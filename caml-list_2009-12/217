Return-Path: <guillaume.yziquel@citycable.ch>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 9C9B8BC37
	for <caml-list@yquem.inria.fr>; Sun, 27 Dec 2009 22:33:36 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArsCAJdhN0tV2gB5h2dsb2JhbACDaZUrgkYBAQEKCwgHFadSjRiBL4IuVgSJJQ
X-IronPort-AV: E=Sophos;i="4.47,460,1257116400"; 
   d="scan'208";a="39394468"
Received: from emailfrontal2.citycable.ch ([85.218.0.121])
  by mail2-smtp-roc.national.inria.fr with SMTP; 27 Dec 2009 22:33:36 +0100
Received: from [192.168.0.12] (unknown [85.218.92.99])
	(Authenticated sender: guillaume.yziquel@citycable.ch)
	by emailfrontal2.citycable.ch (Postfix) with ESMTPA id 61397834260;
	Sun, 27 Dec 2009 22:33:31 +0100 (CET)
Message-ID: <4B37D2AD.5000600@citycable.ch>
Date: Sun, 27 Dec 2009 22:33:33 +0100
From: Guillaume Yziquel <guillaume.yziquel@citycable.ch>
Reply-To: guillaume.yziquel@citycable.ch
User-Agent: Mozilla-Thunderbird 2.0.0.22 (X11/20090707)
MIME-Version: 1.0
To: ygrek <ygrekheretix@gmail.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Wrapping C code using pthread.
References: <4B352731.2060306@citycable.ch>	<20091227114253.a0a9ff49.ygrekheretix@gmail.com>	<4B3750D8.8000209@citycable.ch> <20091227232724.f95c1105.ygrekheretix@gmail.com>
In-Reply-To: <20091227232724.f95c1105.ygrekheretix@gmail.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: quoted-printable
X-Spam: no; 0.00; guillaume:01 guillaume:01 bytecode:01 segfault:01 ocaml:01 bytecode:01 low-level:01 gdb:01 segfault:01 2009:98 wrote:01 dynamically:01 caml-list:01 pthreads:02 native:03 

ygrek a =C3=A9crit :
> On Sun, 27 Dec 2009 13:19:36 +0100
> Guillaume Yziquel <guillaume.yziquel@citycable.ch> wrote:
>=20
>> In fact, my trouble is that when things are compiled to native code, i=
t=20
>> works fine. However, things get screwed up when compiled to bytecode,=20
>> resulting in a segfault.
>>
>> Are pthreads compatible with OCaml bytecode?
>=20
> I believe so. Could you post some code and instructions how to build fo=
r investigation?

I'm working on it. Will look at ocamlforge for this purpose.

I now think, however, that it's not a thread issue. MonetDB loads=20
dynamically at startup some other libraries for its own low-level=20
language, MAL (for MonetDB Assembly Language). I believe this kind of=20
dynamic loading works fine in native code, but doesn't in bytecode.

I've got no issues in native code at all... Only with bytecode.

Haven't located the place in MonetDB where this dynamic loading happens,=20
so it's just conjectures for now.

If someone knows how to use gdb on a bytecode executable to locate the=20
segfault in MonetDB's .so file, I'd be quite happy to know.

All the best,

--=20
      Guillaume Yziquel
http://yziquel.homelinux.org/

