Return-Path: <jon@ffconsultancy.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 8DFA6BBAF
	for <caml-list@yquem.inria.fr>; Tue, 22 Dec 2009 19:06:22 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Al0BAO+YMEvUnwdji2dsb2JhbACCGZkvAQEBCgsKBxEGunGEMwQ
X-IronPort-AV: E=Sophos;i="4.47,437,1257116400"; 
   d="scan'208";a="39195391"
Received: from relay.pcl-ipout01.plus.net ([212.159.7.99])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 22 Dec 2009 19:06:22 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApgFANqZMEtUXebi/2dsb2JhbACCGdRghDME
Received: from relay03.plus.net ([84.93.230.226])
  by relay.pcl-ipout01.plus.net with ESMTP; 22 Dec 2009 18:06:21 +0000
Received: from [87.114.35.173] (helo=leper.local)
	 by relay03.plus.net with esmtp (Exim) id 1NN97l-0008A6-Ll
	for caml-list@yquem.inria.fr; Tue, 22 Dec 2009 18:06:21 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: multicore wish
Date: Tue, 22 Dec 2009 19:20:28 +0000
User-Agent: KMail/1.9.9
References: <4B2D2BC1.6020204@msu.edu> <200912221912.51017.jon@ffconsultancy.com> <4B3109B8.1090406@gmail.com>
In-Reply-To: <4B3109B8.1090406@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200912221920.29008.jon@ffconsultancy.com>
X-Plusnet-Relay: 8638fdd6c86b37fd50588f287d7f6b90
X-Spam: no; 0.00; ocaml:01 pointers:01 ocaml:01 pointers:01 structs:01 pointer:01 2009:98 edgar:98 2009:98 frog:98 wrote:01 wrote:01 avoids:01 caml-list:01 tuples:01 

On Tuesday 22 December 2009 18:02:32 Edgar Friendly wrote:
> On 12/22/2009 01:12 PM, Jon Harrop wrote:
> > On Tuesday 22 December 2009 13:09:27 Goswin von Brederlow wrote:
> >> The advantage with ocaml though is that you never have pointers into a
> >> structure. Makes thinks a lot simpler for the GC and avoids large
> >> overheads in memory.
> >
> > I don't understand what you mean by OCaml "never has pointers into a
> > structure". Half the problem with OCaml is that OCaml almost always uses
> > pointers and the programmer has no choice, e.g. for complex numbers.
>
> I think he means that ocaml structs (records, tuples) will only ever
> have pointers pointing to their beginning - you can't have a pointer to
> somewhere in the middle of a structure.

If so then I do not understand the relevance. You cannot have pointers into a 
structure in F# or HLVM either...

-- 
Dr Jon Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/?e

