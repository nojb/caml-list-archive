Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA09575; Fri, 11 Jan 2002 10:47:57 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA09493 for caml-list@pauillac.inria.fr; Fri, 11 Jan 2002 10:47:56 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA22512 for <caml-list@pauillac.inria.fr>; Thu, 10 Jan 2002 19:50:49 +0100 (MET)
Received: from sj1-3-4-9.securesites.net (sj1-3-4-9.securesites.net [192.220.127.202])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g0AIomL07092
	for <caml-list@inria.fr>; Thu, 10 Jan 2002 19:50:48 +0100 (MET)
Received: (qmail 12451 invoked by uid 16863); 10 Jan 2002 18:50:47 -0000
Received: from unknown (HELO localhost) ([192.220.65.223]) (envelope-sender <bpr@bpr.best.vwh.net>)
          by 192.220.65.223 (qmail-ldap-1.03) with SMTP
          for <patrick@watson.org>; 10 Jan 2002 18:50:47 -0000
Date: Thu, 10 Jan 2002 18:50:46 +0000 (GMT)
From: Brian Rogoff <bpr@bpr.best.vwh.net>
To: Patrick M Doane <patrick@watson.org>
cc: Xavier Leroy <xavier.leroy@inria.fr>,
        Mattias Waldau <mattias.waldau@abc.se>, <caml-list@inria.fr>
Subject: Re: [Caml-list] Non-mutable strings
In-Reply-To: <20020110133809.N63176-100000@fledge.watson.org>
Message-ID: <Pine.BSF.4.40.0201101847260.2173-100000@bpr.best.vwh.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 10 Jan 2002, Patrick M Doane wrote:
> On Thu, 10 Jan 2002, Xavier Leroy wrote:
>
> > If we were to start again from scratch, I'd consider immutable strings
> > seriously.  Having mutable strings is handy when they are used as
> > character buffers, e.g. by low-level I/O functions.  But I agree there
> > are advantages to distinguish (immutable) strings and (mutable)
> > character buffers.
>
> In some situations, I've been able to simply make an immutable replacement
> for the String module:
>
> module String = struct
> [...snip...]
>   (* .. *)
> end

Sure, that works, but I think if the Caml community really wants immutable
strings (and it seems that quite a few people do) it might make sense to
try some alternative implementations, like ropes. It was mentioned on
this list that some older version of Caml used ropes; maybe they could be
resurrected?

-- Brian
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

