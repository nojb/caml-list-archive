Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA05652; Tue, 15 Jan 2002 11:24:51 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA05810 for <caml-list@pauillac.inria.fr>; Tue, 15 Jan 2002 11:24:50 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g0FAOmb07899;
	Tue, 15 Jan 2002 11:24:48 +0100 (MET)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA05505; Tue, 15 Jan 2002 11:24:47 +0100 (MET)
Date: Tue, 15 Jan 2002 11:24:47 +0100
From: Xavier Leroy <xavier.leroy@inria.fr>
To: "Walter B. Rader" <wrader@OCF.Berkeley.EDU>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] More OCaml+windowing system questions
Message-ID: <20020115112447.A5389@pauillac.inria.fr>
References: <Pine.SOL.4.44.0201150139340.7837-100000@apocalypse.OCF.Berkeley.EDU>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0i
In-Reply-To: <Pine.SOL.4.44.0201150139340.7837-100000@apocalypse.OCF.Berkeley.EDU>; from wrader@OCF.Berkeley.EDU on Tue, Jan 15, 2002 at 01:40:16AM -0800
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Question #2: How portable *is* OCaml?  I see that binaries
> are available for Linux, MS Windows, and Macintosh.  Has
> there been success in porting OCaml to other platforms?  If
> not the native-code compiler, at least the byte-code compiler
> and interpreter?

The byte-code system works on essentially every Unix variant out there,
and the native-code compiler is supported for a dozen processor / Unix
variant combinations.  For a detailed list, see
        http://caml.inria.fr/ocaml/portability.html

So, OCaml is supported under Unix (including but not limited to
Linux), Windows, MacOS, and BeOS to some extent.  Other operating
systems (VMS, IBM's mainframe OSes, etc) haven't been tried, but they
are getting extinct :-)

> Question #3: As mentioned previously, I will support running
> byte-code applications that use the windowing system.  I
> would like to be able to load each in its own process space,
> so that the OS scheduler can handle scheduling.
> Is there a "good" (efficient, elegant, etc.) portable way to
> handle communication between the windowing system process and
> the application process(es)?

There's a built-in marshaler that lets you exchange complex data
structures over pipes or sockets.  There is no standard remote
function call infrastructure yet, but it's not hard to build one on
top of the marshaler; see for instance what the Unison team did.

- Xavier Leroy
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

