Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA31538; Sun, 13 Jan 2002 21:05:35 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA31671 for <caml-list@pauillac.inria.fr>; Sun, 13 Jan 2002 21:05:34 +0100 (MET)
Received: from nef.ens.fr (nef.ens.fr [129.199.96.32])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g0DK5XP06062
	for <caml-list@inria.fr>; Sun, 13 Jan 2002 21:05:33 +0100 (MET)
Received: from clipper.ens.fr (clipper-gw.ens.fr [129.199.1.22])
          by nef.ens.fr (8.10.1/1.01.28121999) with ESMTP id g0DK5XX75796
          for <caml-list@inria.fr>; Sun, 13 Jan 2002 21:05:33 +0100 (CET)
Received: from (george@localhost) by clipper.ens.fr (8.9.2/jb-1.1)
Date: Sun, 13 Jan 2002 21:05:33 +0100
From: Nicolas George <nicolas.george@ens.fr>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Non-mutable strings
Message-ID: <20020113210533.A4461@clipper.ens.fr>
References: <20020110133809.N63176-100000@fledge.watson.org> <Pine.BSF.4.40.0201101847260.2173-100000@bpr.best.vwh.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
User-Agent: Mutt/1.2.5.1i
In-Reply-To: <Pine.BSF.4.40.0201101847260.2173-100000@bpr.best.vwh.net>; from bpr@bpr.best.vwh.net on Fri, Jan 11, 2002 at 09:50:43AM +0000
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Le duodi 22 nivôse, an CCX, Brian Rogoff a écrit :
> Sure, that works, but I think if the Caml community really wants immutable
> strings (and it seems that quite a few people do) it might make sense to
> try some alternative implementations, like ropes. It was mentioned on
> this list that some older version of Caml used ropes; maybe they could be
> resurrected?

I second that. Something that would be really nice would be to have tail
recursive appends as efficient as with the Buffer module. And from the
syntactic viewpoint, a rule similar to the one that allow strings tokens
to be seen as format could be the solution to implement that.
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

