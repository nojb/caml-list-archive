Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA00952; Tue, 8 Jan 2002 11:04:10 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA01163 for <caml-list@pauillac.inria.fr>; Tue, 8 Jan 2002 11:04:09 +0100 (MET)
Received: from ns.lami.univ-evry.fr (ns.lami.univ-evry.fr [195.221.162.248])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g08A49108415
	for <caml-list@inria.fr>; Tue, 8 Jan 2002 11:04:09 +0100 (MET)
Received: from lami.univ-evry.fr (bio1.info.lami.univ-evry.fr [192.168.162.9])
	by ns.lami.univ-evry.fr (8.9.3/8.9.3/Debian 8.9.3-21) with ESMTP id LAA11577;
	Tue, 8 Jan 2002 11:04:07 +0100
X-Authentication-Warning: ns.lami.univ-evry.fr: Host bio1.info.lami.univ-evry.fr [192.168.162.9] claimed to be lami.univ-evry.fr
Message-ID: <3C3AC417.1080305@lami.univ-evry.fr>
Date: Tue, 08 Jan 2002 11:04:07 +0100
From: Franck Delaplace <delapla@lami.univ-evry.fr>
Organization: BioInfo Team , LaMI EVE (UMR 8042 CNRS)
User-Agent: Mozilla/5.0 (X11; U; Linux i686; fr-FR; rv:0.9.2) Gecko/20010726 Netscape6/6.1
X-Accept-Language: fr-fr
MIME-Version: 1.0
To: "Jose A. Ortega Ruiz" <jaortega@acm.org>, OCAML <caml-list@inria.fr>
Subject: Re: [Caml-list] ncurses bindings
References: <86wuytyai7.fsf@holmes.localdomain>
Content-Type: multipart/mixed;
 boundary="------------090005070508050708080303"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

This is a multi-part message in MIME format.
--------------090005070508050708080303
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

  > "Jose A. Ortega Ruiz" <jaortega@acm.org> wrote :

 >hi,

 >does anybody know of ocaml bindings for the ncurses lib? (i've looked
 >for them in the caml hump, and googled a little bit, without
 >luck)... and, if not, would you find them useful/interesting? (i'm
 >toying with the idea of writing them myself)

 >thanks for your help,



I've build something for  ncurses  . It is a kernel for a GUI developped
for ncurses.  It is included in Tagcc an environment for gene annotation
written
in Ocaml (http://www.lami.univ-evry.fr/~delapla/tagcc/) .
I've attached the  library (.mli .c)

  The screen may be splitted  into two "windows" : the "menu and status
window" and
the main window  the scrolling  is automatically performed in the main
windows by the curses lib
(Test every keys of the numerical pad)

I hope this will help you

-- 
Franck Delaplace @w3:http://www.lami.univ-evry.fr/~delapla/
Equipe BioInfo, La.M.I-U.M.R 8042 C.N.R.S
523 Place des Terrasses
91025 Evry CEDEX (France)








--------------090005070508050708080303
Content-Type: text/plain;
 name="curses-1.mli"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="curses-1.mli"

(* interface of curses *)

(* Franck Delaplace : Mai 2001 *)

external initscr   :int->int-> unit    = "cur_initscr"           (* init main  window (header size , nlines ) *)
external win    :unit->unit             = "cur_win"                 (* commute to windows (every command are performed  to windows)*)
external header :unit->unit             = "cur_head"                (* commute to header                                  *)

external endscr    :unit -> unit       = "cur_endscr"         (* close main window *)
external init_pair :int->int->int      = "cur_init_pair"      (* set a color to a pair of color foreground background *)
external init_color:int->int->int->int = "cur_init_pair"      (* init_color i r g b changes a color of number i with r g b parameters *)

external addch     :char->unit         = "cur_addch"          (* add a character to the current cursor position *)
external addstr    :string->unit       = "cur_addstr"         (* add a string *)
external addnstr   :string->int->unit  = "cur_addnstr"    (* add a truncated string of n character *)
external refresh   :unit ->unit        = "cur_refresh"        (* refresh the screen *)
external clear     :unit ->unit        = "cur_clear"          (* clear the screen *)
external move      :int->int->unit     = "cur_move"           (* move the cursor to x y position *)

external color     :int->unit          = "cur_color"          (* set the color predefined by init_pair 
						                 more than  50  colors are already predefined 
						                0 cannot be changed by init_pair  *)


external screenon  : unit -> unit      = "cur_screenon"       (* enable scroll and resize mode *)

external isnew     :unit->bool         = "cur_isnew"          (* check if a resize occurs (initial value true ) *)
external iswait    :unit->bool         = "cur_iswait"         (* check if a key should be pressed before refresh *) 
 
external getx      :unit->int          = "cur_getx"           (* get the number of rows *)

external keepy     :int->unit          = "cur_keepy"          (* keep the y which is directly accessed by pressing insert *)

external keyspace  :unit->unit         = "cur_keyspace"        (* refresh and wait a key  *) 

external normal:unit->unit             = "cur_normal"           (* set to normal (default) mode *)

external bold  :unit->unit             = "cur_bold"            (* bold (bright)  *)
external halfbold  :unit->unit         = "cur_halfbold"        (* bold (bright)  *)
external standout :unit->unit          = "cur_standout"         (*standout*)
external blink :unit->unit             = "cur_blink"            (* blink  *)
external reverse :unit->unit           = "cur_reverse"          (* reverse video  *)


external delch :unit->unit             = "cur_delch"           (* delete the character at the cursor position *) 
external delln :unit->unit             = "cur_delln"           (* delete the line under the  cursor position *) 

external insertln  :unit->unit         = "cur_insertln"        (* insert  a  blank  line
                                                                  above the current line and the bottom line is lost  *)


external flash :unit->unit             = "cur_flash"           (* flash the screen  *) 





--------------090005070508050708080303
Content-Type: text/plain;
 name="curses-1.c"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline;
 filename="curses-1.c"

#include <curses.h>
#include <caml/mlvalues.h>


#define max(a,b) ((a>b)?a:b)
#define min(a,b) ((a<b)?a:b)

#define MAXCOLOR 8


/* environnement */

WINDOW *pad=3DNULL; /* pad */
WINDOW *scr=3DNULL; /* ecran */

WINDOW *win=3DNULL; /* fen=EAtre courante */

int yheader;     /* nombre  de lignes de l'ent=EAte */
int xpad;        /* taille  du pad */
int ypad;


int ylast=3D1;
int ycur=3D0;     /* curseur pour les menus d=E9roulant */

/* fin --------- */=20
int isnew =3D TRUE;=20
int keyspace =3D FALSE;

value cur_initscr (value size , value nlines )=20
{
  static int COLOR[MAXCOLOR]=3D
  {COLOR_BLACK,COLOR_YELLOW,COLOR_CYAN,COLOR_RED,COLOR_GREEN,
   COLOR_MAGENTA,COLOR_BLUE,COLOR_WHITE};
 =20
  int x,y; =20
  getmaxyx(scr,y,x);
  if (!scr) =20
    {
      scr =3D initscr();
=20
    }
  else
    {
      wresize(scr,y,x);
    }


      if (has_colors())
	{
	  int i,j;
	  int num =3D 0;
     =20
	  start_color();     =20
	  /* color assignment */
	  for (j=3D 1;j<MAXCOLOR;j=3Dj++)
	    {
	      num++;
	      init_pair(num,COLOR[j],COLOR[0]);
	    }

	  for (i=3D1; i<MAXCOLOR;i++)
	    for (j=3D(i+1)%MAXCOLOR;j!=3Di;j=3D(j+1)%MAXCOLOR)
	      {
		if (j !=3D 0)=20
		  {
		    num++;
		    init_pair(num,COLOR[i],COLOR[j]);
		  }
	=09
	      }
	 =20
	}

  (void)  cbreak();       /* don't wait for NL */
  (void)  noecho();       /* disable echoing while reading char */
  (void)  keypad(scr,TRUE);
  (void)  nodelay(scr,TRUE);=20


  /* pad allocation */
  {

    int xold,yold;

    getmaxyx(pad,yold,xold);
   =20
    ypad =3D Int_val(nlines);
    xpad =3D x;

    yheader =3D Int_val(size);

   =20
    if (ypad+y !=3D yold || xold !=3D xpad)
      {
	delwin(pad);
	pad =3D newpad(ypad+y,xpad);=20
	ycur =3D 0;
	ylast=3D 1;
      }
    win =3D pad;=20
  }
     /* initialize the curses library */
  isnew =3D FALSE;
  prefresh(pad,ycur,0,yheader,0,y,x);
  doupdate();

  return Val_unit;   =20
}


value cur_endscr(value unit) =20
{=20
  isnew=3DTRUE;
  if (scr) endwin();
  return Val_unit;
}
 =20

static short delay =3D FALSE;

value cur_isnew(value unit) {return (Val_bool(isnew));}

value cur_iswait(value unit) {return (Val_bool(delay));}

value cur_init_color (value i,value r,value g, value b)=20
{ if (has_colors()) init_color(Int_val(i),Int_val(r),Int_val(g),Int_val(b=
));return Val_unit;}

value cur_init_pair (value i,value fg,value bg)=20
{ if (has_colors()) init_pair(Int_val(i),Int_val(fg),Int_val(bg));return =
Val_unit;}



/* commutation entre le header et la fen=EAtre */
value cur_getx (value unit) { int x,y ; getmaxyx(scr,y,x);  return Val_in=
t(x); }

value cur_win(value unit) { win =3D pad ; return Val_unit ;}

value cur_head(value unit)  { win =3D scr ; return Val_unit ;}

value cur_addch(value c)  { waddch(win,Int_val(c)); return Val_unit; }

value cur_addstr(value s) { waddstr (win,String_val(s)); return Val_unit;=
 }

value cur_addnstr(value s, value n) {waddnstr (win,String_val(s), Int_val=
(n)); return Val_unit; }



#define KEY_SPACE 32
#define KEY_RET 10
value cur_refresh(value unit)=20
{
  int key;
  int xscr,yscr;
  int ypage ;
 =20
  if (delay)  keyspace =3D TRUE;
  do
    {
      key=3Dgetch();
     =20
      getmaxyx(scr,yscr,xscr);
     =20
      ypage =3D yscr-yheader;
     =20
      switch(key)=20
	{
	case   KEY_DOWN  : ycur=3Dmin(ycur+1,ypad);break;
	case   KEY_UP    : ycur=3Dmax(ycur-1,0) ;break;=20
	case   KEY_PPAGE : ycur=3Dmax(ycur-(ypage-1),0);break;
	case   KEY_NPAGE : ycur=3Dmin(ycur+(ypage-1),ypad-ypage+1);break;
	case   KEY_HOME  : ycur=3D0;break;
	case   KEY_END   : ycur=3Dypad-ypage;break;
	case   KEY_IC    : ycur=3Dmax(ylast-(ypage/3),1);break;

	 =20
	case  KEY_RESIZE :=20
	  {
	    int x,y;
	    while (getch()=3D=3DKEY_RESIZE);=20
	    getmaxyx(scr,yscr,xscr);
	    getmaxyx(pad,y,x);	 =20
	    wresize(pad,y,xscr);
	    wresize(scr,yscr,xscr);
	    isnew=3DTRUE;
	    break;
	  }
	case KEY_DC    : delay =3D !delay;
	case KEY_RET   :
	case KEY_SPACE : keyspace =3D FALSE;break;
	 =20
	}
     =20
     =20
      prefresh(pad,ycur,0,yheader,0,yscr,xscr);
     =20
      doupdate();
    }while(keyspace);
 =20
  return Val_unit;
	=20
 =20
}

value cur_screenon (value unit)=20
{
  int key;
  int xscr,yscr;
  int ypage ;
 =20
  short modif =3D FALSE;
  {
    key=3Dgetch();
=20
    getmaxyx(scr,yscr,xscr);
   =20
    ypage =3D yscr-yheader;
   =20
    switch(key)=20
      {
      case   KEY_DOWN  : ycur=3Dmin(ycur+1,ypad);modif=3DTRUE;break;
      case   KEY_UP    : ycur=3Dmax(ycur-1,0);modif=3DTRUE ;break;=20
      case   KEY_PPAGE : ycur=3Dmax(ycur-(ypage-1),0);;modif=3DTRUE;break=
;
      case   KEY_NPAGE : ycur=3Dmin(ycur+(ypage-1),ypad-ypage+1);modif=3D=
TRUE;break;
      case   KEY_HOME  : ycur=3D0;modif=3DTRUE;break;
      case   KEY_END   : ycur=3Dypad-ypage;modif=3DTRUE;break;
      case   KEY_IC    : ycur=3Dmax(ylast-(ypage/3),1);modif=3DTRUE;break=
;=20
      case   KEY_DC    : delay =3D !delay;break;
=09
      case  KEY_RESIZE :=20
	     {
	       int x,y;
	       while (getch()=3D=3DKEY_RESIZE);=20
	       getmaxyx(scr,yscr,xscr);
	       getmaxyx(pad,y,x);	 =20
	       wresize(pad,y,xscr);
	       wresize(scr,yscr,xscr);
	       isnew=3DTRUE;modif=3DTRUE;
	       break;
	     }
      }
   =20
    if (modif)
      {
	prefresh(pad,ycur,0,yheader,0,yscr,xscr);
=09
	doupdate();
      }

    return Val_unit;
	=20
   =20
  }
}


value cur_keyspace(value unit) {keyspace =3D TRUE; return (Val_unit) ;}


value cur_keepy(value y) { if (win=3D=3Dpad) ylast =3D Int_val(y);  retur=
n Val_unit;}

value cur_clear (value unit) {wclear(win) ;ylast =3D 0;ycur =3D 0; return=
 Val_unit;}

value cur_move(value x,value y) {wmove(win,Int_val(x),Int_val(y)); return=
 Val_unit;}


value cur_normal(value unit)  {wattrset(win,A_NORMAL ) ;return Val_unit;}=


value cur_standout (value unit) {wattron(win,A_STANDOUT ) ; return Val_un=
it;}

value cur_color (value i)     { wcolor_set(win,Int_val(i),NULL);return Va=
l_unit;}

value cur_bold (value unit)  {wattron(win,A_BOLD) ; return Val_unit;}

value cur_halfbold (value unit)  {wattron(win,A_DIM) ; return Val_unit;}

value cur_blink (value unit)  {wattron(win,A_BLINK);return Val_unit;}

value cur_reverse (value unit) {wattron(win,A_REVERSE);return Val_unit;}

value cur_delch (value unit) { wdelch(win) ;  return Val_unit; }

value cur_delln (value unit) { wdeleteln (win) ;  return Val_unit; }

value cur_insertln (value unit) {winsertln(win) ;  return Val_unit; }

value cur_flash (value unit) { flash() ;  return Val_unit; }


--------------090005070508050708080303--

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

