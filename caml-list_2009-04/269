Return-Path: <jean.balthazar.fr@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: ***
X-Spam-Status: No, score=3.8 required=5.0 tests=DNS_FROM_RFC_POST,HTML_10_20,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 70BF0BBC4
	for <caml-list@yquem.inria.fr>; Fri, 17 Apr 2009 12:45:04 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: As4CAIz650nRVdunkWdsb2JhbACCUZM8PwEBAQEJCQwHD6c/gQmQGAEDAQODegY
X-IronPort-AV: E=Sophos;i="4.38,431,1233529200"; 
   d="scan'208";a="27842353"
Received: from mail-ew0-f167.google.com ([209.85.219.167])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 17 Apr 2009 12:45:04 +0200
Received: by ewy11 with SMTP id 11so632191ewy.9
        for <caml-list@inria.fr>; Fri, 17 Apr 2009 03:45:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:date:message-id:subject
         :from:to:content-type;
        bh=cgNqzHkl7osJLc9DhoTGmHmb/xBs2TgdjX8cKOUPBkQ=;
        b=W04lJgyIvxAEMao7dMN0EWUWsdASF60m6501DDm+15A48QXSo3YeqCMVyfRfBthspj
         eUYReTF87FJwOwDSXc/+O92fL4sdqw05VJu1BpzT4kDdXegggtDZOlBioKXI3U5OVpfh
         V5wP/2blwkZwyZLhRzt+3+yHbXMlvjiXqBLQI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:date:message-id:subject:from:to:content-type;
        b=JUIiOLn4aU702vRG0ArMb3RaW9wkeFkp/8KsIEkMihBcf/RuETjz/2Q/K/j7Ku3jPR
         3slJgt5ZWwxlFdSyboSL8q8HcsFTOSOxm7yNzsdcpBUi8vZP+POkeM5SapeHC7Jw4DsL
         v+vmG23OieKV7/ZudJ//zADIpOzaUxE4X9XCU=
MIME-Version: 1.0
Received: by 10.216.7.141 with SMTP id 13mr490952wep.24.1239965103522; Fri, 17 
	Apr 2009 03:45:03 -0700 (PDT)
Date: Fri, 17 Apr 2009 12:45:03 +0200
Message-ID: <d83f21e60904170345l4e9d4676g1339025e18dac4a3@mail.gmail.com>
Subject: Extending a class constrained in a signature
From: Jean Balthazar <jean.balthazar.fr@gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0016364c7b9987858b0467bddf0a
X-Spam: no; 0.00; sig:01 functor:01 struct:01 seq:01 struct:01 seq:01 sig:01 functor:01 behaviour:01 behaviour:01 arg:03 arg:03 module:03 module:03 fails:05 

--0016364c7b9987858b0467bddf0a
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

Dear OCamlers (again !),

I tried this time to specify explictly what I expect from a container. This
specification is given by the signature CONTAINER below. Everyhting works
perfectly but I don't understand why it fails if I remove the 'private'
keyword... Why
am I only able to extend an object when the type have the 'private' keyword
in its definition?

Is it possible to achieve the same behaviour using a class type rather a row
type
with private keyword?

All the best,
Jean

***********************************************************************************************
module type CONTAINER =
sig

  type 'elt container = private < hd : 'elt; .. >
end

module Check = functor(Coll : CONTAINER) -> struct end



module Seq =
struct

  class ['elt] container (arg : 'elt list) =
  object(self : 'selftype)

    method hd  = List.hd arg
    method tl  = new container (List.tl arg)

  end

end

module CheckSeq = Check(Seq)

--0016364c7b9987858b0467bddf0a
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Dear OCamlers (again !),<br><br>I tried this time to specify explictly what=
 I expect from a container. This<br>specification is given by the signature=
 CONTAINER below. Everyhting works<br>perfectly but I don&#39;t understand =
why it fails if I remove the &#39;private&#39; keyword... Why<br>
am I only able to extend an object when the type have the &#39;private&#39;=
 keyword<br>in its definition?<br><br>Is it possible to achieve the same be=
haviour using a class type rather a row type<br>with private keyword?<br>
<br>All the best,<br>Jean<br><br>******************************************=
*****************************************************<br>module type CONTAI=
NER =3D<br>sig<br>=A0<br>=A0 type &#39;elt container =3D private &lt; hd : =
&#39;elt; .. &gt;<br>
end<br><br>module Check =3D functor(Coll : CONTAINER) -&gt; struct end<br><=
br><br><br>module Seq =3D <br>struct<br>=A0 <br>=A0 class [&#39;elt] contai=
ner (arg : &#39;elt list) =3D<br>=A0 object(self : &#39;selftype)<br>=A0=A0=
=A0 <br>=A0=A0=A0 method hd=A0 =3D List.hd arg<br>
=A0=A0=A0 method tl=A0 =3D new container (List.tl arg)<br>=A0=A0=A0=A0=A0 <=
br>=A0 end<br>=A0=A0=A0 <br>end<br><br>module CheckSeq =3D Check(Seq)<br><b=
r>

--0016364c7b9987858b0467bddf0a--

