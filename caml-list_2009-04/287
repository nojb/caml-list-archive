Return-Path: <forum@x9c.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.5 required=5.0 tests=SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 2B30ABBC4
	for <caml-list@yquem.inria.fr>; Sat, 18 Apr 2009 01:05:36 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsABADeo6EnVuj7VlGdsb2JhbACWOQEBAQEJCwgJEQO4UIN9Bg
X-IronPort-AV: E=Sophos;i="4.40,206,1238968800"; 
   d="scan'208";a="24771054"
Received: from 30.mail-out.ovh.net ([213.186.62.213])
  by mail2-smtp-roc.national.inria.fr with SMTP; 18 Apr 2009 01:05:35 +0200
Received: (qmail 29468 invoked by uid 503); 17 Apr 2009 23:05:49 -0000
Received: from b6.ovh.net (HELO mail156.ha.ovh.net) (213.186.33.56)
  by 30.mail-out.ovh.net with SMTP; 17 Apr 2009 23:05:49 -0000
Received: from b0.ovh.net (HELO queue-out) (213.186.33.50)
	by b0.ovh.net with SMTP; 17 Apr 2009 23:05:33 -0000
Received: from 81-64-224-234.rev.numericable.fr (HELO ?192.168.0.10?) (forum%x9c.fr@81.64.224.234)
  by ns0.ovh.net with SMTP; 17 Apr 2009 23:05:31 -0000
Message-Id: <16A3CF1D-0D89-40B5-B77F-AD936FF67271@x9c.fr>
From: "forum@x9c.fr" <forum@x9c.fr>
To: caml users <caml-list@inria.fr>
In-Reply-To: <5409216D-4094-424B-BEEE-3AC3701A87DD@lip6.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Apple Message framework v930.3)
Subject: Re: [Caml-list] "ok with parallel threads" GC (aka ocaml for multicore)
Date: Sat, 18 Apr 2009 01:05:33 +0200
References: <50CD0BA8-B89C-49E2-9082-FFA037F251A6@lip6.fr> <BB3C091F-3BE9-4883-A7CF-9D672CDDF829@x9c.fr> <CAA74566-A3A9-4F80-90D0-3E555944928E@lip6.fr> <9E5A9BDB-2A67-45DC-A963-AA45B7E1693B@lip6.fr> <5409216D-4094-424B-BEEE-3AC3701A87DD@lip6.fr>
X-Mailer: Apple Mail (2.930.3)
X-Ovh-Tracer-Id: 809240558621098784
X-Ovh-Remote: 81.64.224.234 (81-64-224-234.rev.numericable.fr)
X-Ovh-Local: 213.186.33.20 (ns0.ovh.net)
X-Spam: no; 0.00; ocaml:01 patched:01 ocaml:01 runtime:01 byterun:01 patched:01 runtime:01 hash:01 intern:01 extern:01 finalizers:01 finalizers:01 threads:01 threads:01 wrote:01 


Le 18 avr. 09 =E0 00:15, Philippe Wang a =E9crit :

>
> On Apr 16, 2009, at 11:45 CEDT, Philippe Wang wrote:
>
>>> A negative answer would imply that you patched the OCaml
>>> runtime to make it reentrant. To illustrate my point, I will take
>>> the example of the file "byterun/compare.c". In this file, the
>>> code for the comparison of values makes use of a global
>>> variable (named "caml_compare_unordered").
>>
>> It should be, unless bugs are still hiding under that.
>> It is supposed to have been done for a while. We'll make one more =20
>> check.
>>
>>> If you patched the runtime to allow multiple threads to use
>>> it concurrently, I would also be interested by the strategy
>>> used: is the problem solved by additional parameters ?
>>> by the use of thread-local storage ? by any other mean ?
>>
>> - local variable instead of global variable in functions
>> - some functions are parameterized by thread identifier (that is, =20
>> one more parameter than "before") (e.g. in amd64.S)
>
> Well, we went back into runtime code implementation.
>
> This is what can be said rapidly :
> - compare.c contains no global variables anymore, we use local =20
> variables instead
> - if a Caml-C or C-Caml interface uses caml_compare_unordered, we =20
> don't know what can happen with parallel threads
> - we have many global mutex locks with small scopes
> - we do use an "enter/leave blocking section" mechanism to prevent =20
> the GC from waiting on a blocking operation such as I/O or mutex =20
> locking etc.
> - we don't support weak values (not sure whether they don't work or =20=

> they became strong, if they dont work anymore, they can be back in 2 =20=

> minutes as strong values anyway)
> - serialisation of values is a little bit tricky, though it should =20
> work
> - most important : many global variables do not exist anymore =20
> because they are irrelevant in our implementation
> - we do not support unofficial-features of ocaml 3.10, e.g. the new =20=

> features that come with 3.11 but actually have their roots in =20
> previous versions
> ~ it is almost sad to see all the based-on-"one-thread-at-a-time" =20
> optimisations removed...
> + (it looks like it works just fine)
>
>
> I hope there are no "hidden" bad global variables.
>
> Is it fully reentrant ? Hmmmm... maybe.
>
> We use a stop-the-world GC (which means no one is running is =20
> parallel with the GC), that is actually like original ocaml, that =20
> comes with its inconveniences : C calls not declared as blocking =20
> sections (which has quite a cost) may prevent other threads from =20
> running when the heap is full.
>
> Graphics module, for instance, is not reentrant at all (anyhow it's =20=

> not part of the runtime). Same for Str.


I was indeed mostly worried with the runtime itself. I wanted to have =20=

a fully reentrant runtime for the OCaml-Java
project (to be able to execute several programs in the very same JVM) =20=

and remember that it implied primitives
from "compare.c", "hash.c", "intern.c" and "extern.c" among others to =20=

be written differently for this purpose.

Out of curiosity: you state that your GC is of "stop-the-world" =20
nature, what about finalizers ?
Are they executed by the GC thread when the world is stopped or =20
concurrently with
application threads ?
Not sure this question really matters, just curious (I mean, it is =20
doubtful that one would write finalizers with
a long execution time).


Keep up the good work !

Xavier Clerc=

