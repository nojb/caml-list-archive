Return-Path: <xavier.clerc@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 8DB14BBC4
	for <caml-list@yquem.inria.fr>; Tue, 14 Apr 2009 16:18:18 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.40,185,1238968800"; 
   d="scan'208";a="24563331"
Received: from unknown (HELO mp-57040.rocqadm.inria.fr) ([128.93.57.40])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/AES128-SHA; 14 Apr 2009 16:18:18 +0200
Message-Id: <C9498815-D43F-4142-B2A4-C4D3D41CA8B8@inria.fr>
From: xclerc <xavier.clerc@inria.fr>
To: caml-list@inria.fr
In-Reply-To: <CAA74566-A3A9-4F80-90D0-3E555944928E@lip6.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Apple Message framework v930.3)
Subject: Re: [Caml-list] "ok with parallel threads" GC (aka ocaml for multicore)
Date: Tue, 14 Apr 2009 16:18:18 +0200
References: <50CD0BA8-B89C-49E2-9082-FFA037F251A6@lip6.fr> <BB3C091F-3BE9-4883-A7CF-9D672CDDF829@x9c.fr> <CAA74566-A3A9-4F80-90D0-3E555944928E@lip6.fr>
X-Mailer: Apple Mail (2.930.3)
X-Spam: no; 0.00; ocaml:01 patched:01 ocaml:01 runtime:01 runtime:01 patched:01 ocamlopt:01 byterun:01 outcomes:01 10,:98 threads:01 threads:01 garbage:01 wrote:01 partial:01 


Le 14 avr. 09 =E0 12:21, Philippe Wang a =E9crit :

> On Apr 10, 2009, at 20:36 CEDT, forum@x9c.fr wrote:
>
>> Would it be correct to assume that the current state of the project
>> implies that you have patched the OCaml runtime to make it
>> fully reentrant ?
>
> Is this following partial answer relevant enough ?
> The garbage collector is clearly separated from the rest of the =20
> runtime library: the GC is contained in a libgc.a and our patched =20
> ocamlopt links programs to this GC. The GC variables are known by =20
> the GC only.

Well, this is not what I had in mind, but I realize that my question
was not clear. A better question would have been:
	Is your implementation still based on a global runtime lock ?

A negative answer would imply that you patched the OCaml
runtime to make it reentrant. To illustrate my point, I will take
the example of the file "byterun/compare.c". In this file, the
code for the comparison of values makes use of a global
variable (named "caml_compare_unordered").

So, allowing multiple threads to execute primitives from the
runtime at the same time may result in incorrect outcomes.
Unless you patch the runtime to make it reentrant, hence my
original (foolishly indirect) question.

If you patched the runtime to allow multiple threads to use
it concurrently, I would also be interested by the strategy
used: is the problem solved by additional parameters ?
by the use of thread-local storage ? by any other mean ?


Xavier Clerc

