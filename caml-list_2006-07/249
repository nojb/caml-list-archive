Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id DC482BBB7
	for <caml-list@yquem.inria.fr>; Tue, 25 Jul 2006 13:45:37 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k6PBjbuC018504
	for <caml-list@yquem.inria.fr>; Tue, 25 Jul 2006 13:45:37 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA14612 for <caml-list@pauillac.inria.fr>; Tue, 25 Jul 2006 13:45:37 +0200 (MET DST)
Received: from [128.93.8.130] (macadam.inria.fr [128.93.8.130])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k6PBjaak018498
	for <caml-list@inria.fr>; Tue, 25 Jul 2006 13:45:36 +0200
Mime-Version: 1.0 (Apple Message framework v750)
In-Reply-To: <26EB47FDD566A7469FC862DAF373792F01711274@kaiserslautern1.lmsintl.com>
References: <26EB47FDD566A7469FC862DAF373792F01711274@kaiserslautern1.lmsintl.com>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <27E05F30-06CB-4A1C-9929-4B427936EEF3@inria.fr>
Content-Transfer-Encoding: 7bit
From: Damien Doligez <damien.doligez@inria.fr>
Subject: Re: [Caml-list] generic Hashtbl.to_array
Date: Tue, 25 Jul 2006 13:45:52 +0200
To: caml-list <caml-list@inria.fr>
X-Mailer: Apple Mail (2.750)
X-Miltered: at concorde with ID 44C60461.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 44C60460.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 hashtbl:01 hash:01 hashtbl:01 iter:01 2006:98 wrote:01 doligez:01 doligez:01 caml-list:01 match:02 raise:03 let:03 let:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Hello,

On 2006-07-25, at 10:29, Christoph Bauer wrote:

> The simples idea has the problem, that you don't have
> a initial value to make the result array:

You can get it from the hash table itself:

let to_array t =
   let init = ref None in
   begin try Hashtbl.iter (fun k v -> init := Some (k,v); raise Exit) t
   with Exit -> ()
   end;
   match !init with
   | None -> [| |]
   | Some i ->
     let a = Array.make (Hashtbl.length t) i in
     ignore (Hashtbl.fold (fun k v i -> a.(i) <- (k, v); i + 1) t 0);
     a
;;

-- Damien

