Return-Path: <christos.jonathan.hayward@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id D30FCBB84
	for <caml-list@yquem.inria.fr>; Mon, 10 Jul 2006 17:02:07 +0200 (CEST)
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.189])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k6AF26KF009113
	for <caml-list@yquem.inria.fr>; Mon, 10 Jul 2006 17:02:07 +0200
Received: by nf-out-0910.google.com with SMTP id a25so681389nfc
        for <caml-list@yquem.inria.fr>; Mon, 10 Jul 2006 08:02:04 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:references;
        b=N7oeMTYfDQ7HbZ5uast9qfI7Vtl409zqJk7HqtoLVcae4Wytrg006BfSUQlm3m/mJ/Za5MTZtBvyvniTM7vsoko7jbLkmsaZpx1nLJOtzgAfoBeYgLdzwJTJpOdK5vFaSJely3boEy37azZjuZKWJLdcIw0qEIxFGrcllwVMCSM=
Received: by 10.78.157.15 with SMTP id f15mr1726548hue;
        Mon, 10 Jul 2006 08:02:03 -0700 (PDT)
Received: by 10.78.116.20 with HTTP; Mon, 10 Jul 2006 08:02:02 -0700 (PDT)
Message-ID: <fdc31b650607100802g570e96beo1395bcb244353bf2@mail.gmail.com>
Date: Mon, 10 Jul 2006 11:02:02 -0400
From: "Jonathan Hayward http://JonathansCorner.com" <christos.jonathan.hayward@gmail.com>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] "Hello web" please
In-Reply-To: <20060708.224756.70330795.Christophe.Troestler@umh.ac.be>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_10263_26416646.1152543722971"
References: <fdc31b650607080805y2240abb8yf9a7966dadacbf4e@mail.gmail.com>
	 <20060708.224756.70330795.Christophe.Troestler@umh.ac.be>
X-j-chkmail-Score: MSGID : 44B26BEE.001 on nez-perce : j-chkmail score : X : 0/20 1
X-Miltered: at nez-perce with ID 44B26BEE.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocamlnet:01 usr:01 ocaml:01 netcgi:01 netencoding:01 encodes:01 foo:01 foo:01 buffer:01 buffered:01 netcgi:01 buffered:01 netchannels:01 syntax:01 syntax:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.3 required=5.0 tests=DNS_FROM_RFC_ABUSE,HTML_30_40,
	HTML_MESSAGE,RCVD_BY_IP,RCVD_IN_BL_SPAMCOP_NET autolearn=disabled 
	version=3.0.3

------=_Part_10263_26416646.1152543722971
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I need help getting Ocamlnet to work at a basic level.

I tried running the script from the command-like to more easily access
diagnostic output. What should the shebang line say? Right now I have the
following (mostly) paste of the demo script, plus shebang line; when I run
it from within apache I get an internal server error. (A copy of the comman=
d
line output follows the script).

--

#!/usr/local/bin/ocaml
open Netcgi

let text =3D Netencoding.Html.encode_from_latin1
  (* This function encodes "<", ">", "&", double quotes, and Latin 1
     characters as character entities.  E.g. text "<" =3D "&lt;", and
     text "=E4" =3D "&auml;" *)

(* Normally you would use a template system instead of this *)
let html_page (cgi:cgi) title html =3D
  let out =3D cgi#out_channel#output_string in
  out "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \
        \" http://www.w3.org/TR/REC-html40/strict.dtd\">\n";
  out ("<html>\n<head><title>" ^ text title ^"</title></head>
<body>\n");
  out html;
  out "</body>\n</html>"

let main (cgi:cgi) =3D
  cgi#set_header
    ~cache:`No_cache
    ~content_type:"text/html; charset=3D\"iso-8859-1\""
    ();
  let foo =3D cgi#argument_value "foo"
  let html =3D match foo with
    | "1" -> "Yes"
    | "0" -> "No"
    | _ -> "Undefined" in
  html_page cgi foo html

(* You can buffer or not the output.  If buffered you can rollback
   (useful in case of error). You can replace Netcgi_cgi.run by
   another connector entry point (FCGI, SCGI, AJP, Apache mod). *)
let () =3D
  let buffered _ ch =3D new Netchannels.buffered_trans_channel ch in
  Netcgi_cgi.run ~output_type:(`Transactional buffered) main


--

Couldnt get a file descriptor referring to the console
Could not get a file descriptor referring to the console
./demo.ml: line 4: let: =3D: syntax error: operand expected (error token is
"=3D")
./demo.ml: line 5: demo.ml: command not found
./demo.ml: line 6: characters: command not found
./demo.ml: line 7: text: command not found
./demo.ml: line 9: demo.ml: command not found
./demo.ml: line 10: syntax error near unexpected token `('
./demo.ml: line 10: `let html_page (cgi:cgi) title html =3D'


--

On 7/8/06, Christophe TROESTLER <Christophe.Troestler@umh.ac.be> wrote:
>
> On Sat, 8 Jul 2006, "Jonathan Hayward http://JonathansCorner.com" <
> christos.jonathan.hayward@gmail.com> wrote:
> >
> > I'm trying to figure out how to use CamlGI with OCaml, [...]
>
> CamlGI code has been integrated into the Netcgi component
> <https://gps.dynxs.de/wwwsvn/trunk/code/src/netcgi/?root=3Dlib-ocamlnet2>
> of OcamlNet-2 <https://gps.dynxs.de/openapps/svnindex.cgi>, please use
> that instead.
>
> > [...] script that [...] prints a webpage saying only "Yes", "No",
> > "Other" or "Undefined" depending on whether the CGI variable "foo"
> > has value 1, 0, some other defined value, or is undefined (never
> > mind about multiple values)?
>
> You can find examples in the examples/ directory (add.ml is a very
> simple one).  As for the specific example you desire, it is attached.
> It is maybe a bit more complex that you expected because it
> demonstrates additional features (text escaping, setting the header,
> buffered output).
>
> Hope it helps,
> ChriS
>
>
> open Netcgi
>
> let text =3D Netencoding.Html.encode_from_latin1
>   (* This function encodes "<", ">", "&", double quotes, and Latin 1
>      characters as character entities.  E.g. text "<" =3D "&lt;", and
>      text "=E4" =3D "&auml;" *)
>
> (* Normally you would use a template system instead of this *)
> let html_page (cgi:cgi) title html =3D
>   let out =3D cgi#out_channel#output_string in
>   out "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \
>         \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n";
>   out ("<html>\n<head><title>" ^ text title ^"</title></head>
> <body>\n");
>   out html;
>   out "</body>\n</html>"
>
> let main (cgi:cgi) =3D
>   cgi#set_header
>     ~cache:`No_cache
>     ~content_type:"text/html; charset=3D\"iso-8859-1\""
>     ();
>   let foo =3D cgi#argument_value "foo"
>   let html =3D match foo with
>     | "1" -> "Yes"
>     | "0" -> "No"
>     | _ -> "Undefined" in
>   html_page cgi foo html
>
> (* You can buffer or not the output.  If buffered you can rollback
>    (useful in case of error). You can replace Netcgi_cgi.run by
>    another connector entry point (FCGI, SCGI, AJP, Apache mod). *)
> let () =3D
>   let buffered _ ch =3D new Netchannels.buffered_trans_channel ch in
>   Netcgi_cgi.run ~output_type:(`Transactional buffered) main
>
>
>


--=20
++ Jonathan Hayward, jonathan.hayward@pobox.com
** To see an award-winning website with stories, essays, artwork,
** games, and a four-dimensional maze, why not visit my home page?
** All of this is waiting for you at http://JonathansCorner.com

** If you'd like a Google Mail (gmail.com) account, please tell me!

------=_Part_10263_26416646.1152543722971
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I need help getting Ocamlnet to work at a basic level.<br>
<br>
I tried running the script from the command-like to more easily access
diagnostic output. What should the shebang line say? Right now I have
the following (mostly) paste of the demo script, plus shebang line;
when I run it from within apache I get an internal server error. (A
copy of the command line output follows the script).<br>
<br>
--<br>
<br>
#!/usr/local/bin/ocaml<br>
open Netcgi<br>
<br>
let text =3D Netencoding.Html.encode_from_latin1<br>
&nbsp; (* This function encodes &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&=
amp;&quot;, double quotes, and Latin 1<br>
&nbsp;&nbsp;&nbsp;&nbsp; characters as character entities.&nbsp; E.g. text =
&quot;&lt;&quot; =3D &quot;&amp;lt;&quot;, and<br>
&nbsp;&nbsp;&nbsp;&nbsp; text &quot;=E4&quot; =3D &quot;&amp;auml;&quot; *)=
<br>
<br>
(* Normally you would use a template system instead of this *)<br>
let html_page (cgi:cgi) title html =3D<br>
&nbsp; let out =3D cgi#out_channel#output_string in<br>
&nbsp; out &quot;&lt;!DOCTYPE html PUBLIC \&quot;-//W3C//DTD HTML 4.0//EN\&=
quot; \<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&quot; <a href=3D"http://www.w3=
.org/TR/REC-html40/strict.dtd\">http://www.w3.org/TR/REC-html40/strict.dtd\=
</a>&quot;&gt;\n&quot;;<br>
&nbsp; out (&quot;&lt;html&gt;\n&lt;head&gt;&lt;title&gt;&quot; ^ text titl=
e ^&quot;&lt;/title&gt;&lt;/head&gt;<br>
&lt;body&gt;\n&quot;);<br>
&nbsp; out html;<br>
&nbsp; out &quot;&lt;/body&gt;\n&lt;/html&gt;&quot;<br>
<br>
let main (cgi:cgi) =3D<br>
&nbsp; cgi#set_header<br>
&nbsp;&nbsp;&nbsp; ~cache:`No_cache<br>
&nbsp;&nbsp;&nbsp; ~content_type:&quot;text/html; charset=3D\&quot;iso-8859=
-1\&quot;&quot;<br>
&nbsp;&nbsp;&nbsp; ();<br>
&nbsp; let foo =3D cgi#argument_value &quot;foo&quot;<br>
&nbsp; let html =3D match foo with<br>
&nbsp;&nbsp;&nbsp; | &quot;1&quot; -&gt; &quot;Yes&quot;<br>
&nbsp;&nbsp;&nbsp; | &quot;0&quot; -&gt; &quot;No&quot;<br>
&nbsp;&nbsp;&nbsp; | _ -&gt; &quot;Undefined&quot; in<br>
&nbsp; html_page cgi foo html<br>
<br>
(* You can buffer or not the output.&nbsp; If buffered you can rollback<br>
&nbsp;&nbsp; (useful in case of error). You can replace Netcgi_cgi.run by<b=
r>
&nbsp;&nbsp; another connector entry point (FCGI, SCGI, AJP, Apache mod). *=
)<br>
let () =3D<br>
&nbsp; let buffered _ ch =3D new Netchannels.buffered_trans_channel ch in<b=
r>
&nbsp; Netcgi_cgi.run ~output_type:(`Transactional buffered) main<br>
<br>
<br>
--<br>
<br>
Couldnt get a file descriptor referring to the console<br>
Could not get a file descriptor referring to the console<br>
./demo.ml: line 4: let: =3D: syntax error: operand expected (error token is=
 &quot;=3D&quot;)<br>
./demo.ml: line 5: <a href=3D"http://demo.ml">demo.ml</a>: command not foun=
d<br>
./demo.ml: line 6: characters: command not found<br>
./demo.ml: line 7: text: command not found<br>
./demo.ml: line 9: <a href=3D"http://demo.ml">demo.ml</a>: command not foun=
d<br>
./demo.ml: line 10: syntax error near unexpected token `('<br>
./demo.ml: line 10: `let html_page (cgi:cgi) title html =3D'<br>
<br>
<br>
--<br><br><div><span class=3D"gmail_quote">On 7/8/06, <b class=3D"gmail_sen=
dername">Christophe TROESTLER</b> &lt;<a href=3D"mailto:Christophe.Troestle=
r@umh.ac.be">Christophe.Troestler@umh.ac.be</a>&gt; wrote:</span><blockquot=
e class=3D"gmail_quote" style=3D"border-left: 1px solid rgb(204, 204, 204);=
 margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Sat, 8 Jul 2006, &quot;Jonathan Hayward <a href=3D"http://JonathansCorne=
r.com">http://JonathansCorner.com</a>&quot; &lt;<a href=3D"mailto:christos.=
jonathan.hayward@gmail.com">christos.jonathan.hayward@gmail.com</a>&gt; wro=
te:
<br>&gt;<br>&gt; I'm trying to figure out how to use CamlGI with OCaml, [..=
.]<br><br>CamlGI code has been integrated into the Netcgi component<br>&lt;=
<a href=3D"https://gps.dynxs.de/wwwsvn/trunk/code/src/netcgi/?root=3Dlib-oc=
amlnet2">
https://gps.dynxs.de/wwwsvn/trunk/code/src/netcgi/?root=3Dlib-ocamlnet2</a>=
&gt;<br>of OcamlNet-2 &lt;<a href=3D"https://gps.dynxs.de/openapps/svnindex=
.cgi">https://gps.dynxs.de/openapps/svnindex.cgi</a>&gt;, please use<br>tha=
t instead.
<br><br>&gt; [...] script that [...] prints a webpage saying only &quot;Yes=
&quot;, &quot;No&quot;,<br>&gt; &quot;Other&quot; or &quot;Undefined&quot; =
depending on whether the CGI variable &quot;foo&quot;<br>&gt; has value 1, =
0, some other defined value, or is undefined (never
<br>&gt; mind about multiple values)?<br><br>You can find examples in the e=
xamples/ directory (<a href=3D"http://add.ml">add.ml</a> is a very<br>simpl=
e one).&nbsp;&nbsp;As for the specific example you desire, it is attached.<=
br>It is maybe a bit more complex that you expected because it
<br>demonstrates additional features (text escaping, setting the header,<br=
>buffered output).<br><br>Hope it helps,<br>ChriS<br><br><br>open Netcgi<br=
><br>let text =3D Netencoding.Html.encode_from_latin1<br>&nbsp;&nbsp;(* Thi=
s function encodes &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&amp;&quot;, d=
ouble quotes, and Latin 1
<br>&nbsp;&nbsp;&nbsp;&nbsp; characters as character entities.&nbsp;&nbsp;E=
.g. text &quot;&lt;&quot; =3D &quot;&amp;lt;&quot;, and<br>&nbsp;&nbsp;&nbs=
p;&nbsp; text &quot;=E4&quot; =3D &quot;&amp;auml;&quot; *)<br><br>(* Norma=
lly you would use a template system instead of this *)
<br>let html_page (cgi:cgi) title html =3D<br>&nbsp;&nbsp;let out =3D cgi#o=
ut_channel#output_string in<br>&nbsp;&nbsp;out &quot;&lt;!DOCTYPE html PUBL=
IC \&quot;-//W3C//DTD HTML 4.0//EN\&quot; \<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;\&quot;<a href=3D"http://www.w3.org/TR/REC-html40/stric=
t.dtd\">
http://www.w3.org/TR/REC-html40/strict.dtd\</a>&quot;&gt;\n&quot;;<br>&nbsp=
;&nbsp;out (&quot;&lt;html&gt;\n&lt;head&gt;&lt;title&gt;&quot; ^ text titl=
e ^&quot;&lt;/title&gt;&lt;/head&gt;<br>&lt;body&gt;\n&quot;);<br>&nbsp;&nb=
sp;out html;<br>
&nbsp;&nbsp;out &quot;&lt;/body&gt;\n&lt;/html&gt;&quot;<br><br>let main (c=
gi:cgi) =3D<br>&nbsp;&nbsp;cgi#set_header<br>&nbsp;&nbsp;&nbsp;&nbsp;~cache=
:`No_cache<br>&nbsp;&nbsp;&nbsp;&nbsp;~content_type:&quot;text/html; charse=
t=3D\&quot;iso-8859-1\&quot;&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;();<br>&nbsp;=
&nbsp;let foo =3D cgi#argument_value &quot;foo&quot;
<br>&nbsp;&nbsp;let html =3D match foo with<br>&nbsp;&nbsp;&nbsp;&nbsp;| &q=
uot;1&quot; -&gt; &quot;Yes&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;| &quot;0&quot=
; -&gt; &quot;No&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;| _ -&gt; &quot;Undefined=
&quot; in<br>&nbsp;&nbsp;html_page cgi foo html<br><br>(* You can buffer or=
 not the output.&nbsp;&nbsp;If buffered you can rollback
<br>&nbsp;&nbsp; (useful in case of error). You can replace Netcgi_cgi.run =
by<br>&nbsp;&nbsp; another connector entry point (FCGI, SCGI, AJP, Apache m=
od). *)<br>let () =3D<br>&nbsp;&nbsp;let buffered _ ch =3D new Netchannels.=
buffered_trans_channel ch in<br>
&nbsp;&nbsp;Netcgi_cgi.run ~output_type:(`Transactional buffered) main<br><=
br><br></blockquote></div><br><br clear=3D"all"><br>-- <br>++ Jonathan Hayw=
ard, <a href=3D"mailto:jonathan.hayward@pobox.com">jonathan.hayward@pobox.c=
om</a><br>
** To see an award-winning website with stories, essays, artwork,<br>** gam=
es, and a four-dimensional maze, why not visit my home page?<br>** All of t=
his is waiting for you at <a href=3D"http://JonathansCorner.com">http://Jon=
athansCorner.com
</a><br><br>** If you'd like a Google Mail (<a href=3D"http://gmail.com">gm=
ail.com</a>) account, please tell me!

------=_Part_10263_26416646.1152543722971--

