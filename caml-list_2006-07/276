Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 02CA4BBB7
	for <caml-list@yquem.inria.fr>; Wed, 26 Jul 2006 16:41:52 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k6QEfoc4018317
	for <caml-list@yquem.inria.fr>; Wed, 26 Jul 2006 16:41:51 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA02007 for <caml-list@pauillac.inria.fr>; Wed, 26 Jul 2006 16:41:50 +0200 (MET DST)
Received: from mail-outfwd.lms.be (Kaiserslautern1.lms-gmbh.de [213.68.136.230])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k6QEfnkV032218
	for <caml-list@inria.fr>; Wed, 26 Jul 2006 16:41:49 +0200
Received: from localhost (unknown [127.0.0.1])
	by mail-outfwd.lms.be (Postfix) with ESMTP id C18087F418
	for <caml-list@inria.fr>; Wed, 26 Jul 2006 17:01:52 +0200 (CEST)
Received: from mail-kl.lmsintl.com ([127.0.0.1])
	by localhost (kl-ftp [127.0.0.1]) (amavisd-new, port 20024)
	with ESMTP id 24065-08 for <caml-list@inria.fr>;
	Wed, 26 Jul 2006 17:01:52 +0200 (CEST)
Received: from kaiserslautern1.lmsintl.com (unknown [10.2.0.100])
	by mail-kl.lmsintl.com (Postfix) with ESMTP id 9CB35B6EC5
	for <caml-list@inria.fr>; Wed, 26 Jul 2006 17:01:52 +0200 (CEST)
Received: by kaiserslautern1.lmsintl.com with Internet Mail Service (5.5.2653.19)
	id <32PZTDBP>; Wed, 26 Jul 2006 16:41:34 +0200
Message-ID: <26EB47FDD566A7469FC862DAF373792F017113B7@kaiserslautern1.lmsintl.com>
From: Christoph Bauer <christoph.bauer@lms-gmbh.de>
To: caml-list@inria.fr
Subject: AW: [Caml-list] generic Hashtbl.to_array
Date: Wed, 26 Jul 2006 16:41:33 +0200
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2653.19)
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_001_01C6B0C1.9722F728"
X-Virus-Scanned: by IT Services
X-j-chkmail-Score: MSGID : 44C77F2F.000 on concorde : j-chkmail score : XX : 5/20 0
X-j-chkmail-Score: MSGID : 44C77F2D.001 on nez-perce : j-chkmail score : XX : 5/20 0
X-Miltered: at concorde with ID 44C77F2F.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 44C77F2D.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; hashtbl:01 hashtbl:01 toploop:01 hashtable:01 bug:01 ocamlopt:01 unix:01 cmxa:01 cmx:01 iter:01 argv:01 toploop:01 hashtable:01 bug:01 ocamlopt:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO,HTML_MESSAGE 
	autolearn=disabled version=3.0.3

This message is in MIME format. Since your mail reader does not understand
this format, some or all of this message may not be legible.

------_=_NextPart_001_01C6B0C1.9722F728
Content-Type: text/plain

 


  _____  

Von: Tom [mailto:tom.primozic@gmail.com] 
Gesendet: Mittwoch, 26. Juli 2006 15:53
An: Christoph Bauer
Betreff: Re: [Caml-list] generic Hashtbl.to_array


Once again...

I'm sorry to say that, but I believe that you results are flawed...


Upon inspecting your code with Toploop, I found out some flaws... 


let h n =
 let m = n * 100000 in
 let h = Hashtbl.create m in

   for i = 0 to m - 1 do       (* <<< not Hashtbl.length h, as it returns 0
for ampty hashtable *)
     Hashtbl.replace h (Random.int <http://random.int/>  max_int) (
Random.int <http://random.int/>  max_int);
   done;
   h


 
 

 
thanks, sorry for this stupid bug.  to_array_5 is now the clear winner.
 
Christoph Bauer
 
 n=8
             Rate      to_array_2 to_array_3 to_array_1c to_array_1
to_array_4 to_array_1b to_array_5
 to_array_2 34.6+-0.4/s         --       -50%        -71%       -72%
-74%        -74%       -79%
 to_array_3 68.8+-0.6/s        99%         --        -42%       -45%
-49%        -49%       -58%
to_array_1c  118+-  2/s       241%        71%          --        -6%
-12%        -13%       -27%
 to_array_1  126+-  0/s       264%        83%          7%         --
-6%         -7%       -22%
 to_array_4  134+-  2/s       287%        95%         14%         6%
--       [-1%]       -17%
to_array_1b  135+-  1/s       290%        96%         15%         7%
[1%]          --       -17%
 to_array_5  162+- 10/s       369%       136%         37%        29%
21%         20%         --
 
 
 (* compile with
 
ocamlopt -o to_array -I benchmark-0.7 unix.cmxa benchmark-0.7/benchmark.cmx
to_array.ml
 
*)
 
open Benchmark
 
let to_array_1 t =
  let dummy =  Array.init 0 (fun _ -> raise Not_found) in
    fst
      (Hashtbl.fold
         (fun k v (a, i) ->
            if i = 0 then  
              let a = Array.make (Hashtbl.length t) (k, v) in
                (a, 1)
            else (a.(i) <- (k, v); (a, i + 1)))
         t (dummy, 0))
 
let to_array_2 t =
  let init _ = fun () -> raise Not_found  in
  let a = Array.init (Hashtbl.length t) init in
    ignore
      (Hashtbl.fold (fun k v i -> a.(i) <- (fun () -> (k, v)); i+1) t 0);
    Array.map (fun f -> f ())  a
 
let to_array_3 t =
  Array.of_list (Hashtbl.fold (fun a b c -> (a, b) :: c) t [])
 

let to_array_1b t =
  let a = ref (Array.init 0 (fun _ -> raise Not_found)) in
    ignore
      (Hashtbl.fold
         (fun k v i ->
            if i = 0 then
              (a := Array.make (Hashtbl.length t) (k, v);
               1)
            else
              ((!a).(i) <- (k, v); i + 1))
         t 0);
    !a
 
 
 
let to_array_4 t =
  let init = ref None in
    begin try Hashtbl.iter (fun k v -> init := Some (k,v); raise Exit) t
      with Exit -> ()
    end;
    match !init with
      | None -> [| |]
      | Some i ->
          let a = Array.make (Hashtbl.length t) i in
            ignore (Hashtbl.fold (fun k v i -> a.(i) <- (k, v); i + 1) t 0);
            a
 
 
 
let to_array_5 =
  let init = Obj.magic 0 in
    fun t ->
      let a =  Array.make (Hashtbl.length t) init  in
        ignore
          (Hashtbl.fold (fun k v i -> a.(i) <- (k, v); i + 1) t 0) ; 
        a 
 
let to_array_1c t =
  let r =
    Hashtbl.fold (fun k v seed ->
                    match seed with
                 Some (a,i) -> a.(i) <- (k,v); Some (a,i+1)
                      | None -> let a =  Array.make (Hashtbl.length t) (k,v)
in
                                  Some (a,1))
      t None 
  in
    match r with
        None -> Array.init 0 (fun _ -> raise Not_found)
      | Some (a, _) -> a
 

      
let h n = 
  let m = n * 1000 in
  let h = Hashtbl.create m in
    for i = 0 to m - 1 do
      Hashtbl.replace h (Random.int max_int) (Random.int max_int);
    done;
    h
      
let main () =
  let n = try int_of_string Sys.argv.(1) with _ -> 1 in
  let h = h n in
  let res = throughputN ~repeat:5 1
    [("to_array_1", to_array_1, h);
     ("to_array_1b", to_array_1b, h);
     ("to_array_1c", to_array_1c, h);
     ("to_array_2", to_array_2, h);
     ("to_array_3", to_array_3, h);
     ("to_array_4", to_array_4, h);
     ("to_array_5", to_array_5, h);
 
      ] in
      tabulate res
 

let () =  main () 


------_=_NextPart_001_01C6B0C1.9722F728
Content-Type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=us-ascii">


<META content="MSHTML 6.00.5450.4" name=GENERATOR></HEAD>
<BODY>
<DIV dir=ltr align=left><FONT face=Arial color=#0000ff 
size=2></FONT>&nbsp;</DIV><BR>
<BLOCKQUOTE dir=ltr 
style="PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #0000ff 2px solid; MARGIN-RIGHT: 0px">
  <DIV class=OutlookMessageHeader lang=de dir=ltr align=left>
  <HR tabIndex=-1>
  <FONT face=Tahoma size=2><B>Von:</B> Tom [mailto:tom.primozic@gmail.com] 
  <BR><B>Gesendet:</B> Mittwoch, 26. Juli 2006 15:53<BR><B>An:</B> Christoph 
  Bauer<BR><B>Betreff:</B> Re: [Caml-list] generic 
  Hashtbl.to_array<BR></FONT><BR></DIV>
  <DIV></DIV>
  <DIV>Once again...<BR><BR>I'm sorry to say that, but I believe that you 
  results are flawed...<BR><BR><BR>Upon inspecting your code with Toploop, I 
  found out some flaws... </DIV><SPAN class=q>
  <DIV><BR></SPAN>let h n =<BR>&nbsp;let m = n * 100000 in<BR>&nbsp;let h = 
  Hashtbl.create m in<BR></DIV>
  <DIV style="DIRECTION: ltr"><SPAN class=q>&nbsp; &nbsp;for i = 0 to m - 1 
  do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>(* &lt;&lt;&lt; not 
  Hashtbl.length h, as it returns 0 for ampty hashtable *)</DIV>
  <DIV>&nbsp; &nbsp; &nbsp;Hashtbl.replace h (<A 
  onclick="return top.js.OpenExtLink(window,event,this)" 
  href="http://random.int/" target=_blank>Random.int</A> max_int) (<A 
  onclick="return top.js.OpenExtLink(window,event,this)" 
  href="http://random.int/" target=_blank> Random.int</A> max_int);<BR>&nbsp; 
  &nbsp;done;<BR>&nbsp; &nbsp;h<BR><BR><BR><SPAN class=348462614-26072006><FONT 
  face=Arial color=#0000ff size=2>&nbsp;</FONT></SPAN></DIV>
  <DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
  size=2></FONT></SPAN>&nbsp;</DIV></BLOCKQUOTE>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>thanks, sorry for this stupid bug.&nbsp; to_array_5 is now the clear 
winner.</FONT></SPAN></DIV>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>Christoph Bauer</FONT></SPAN></DIV>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV dir=ltr><SPAN class=348462614-26072006>&nbsp;</SPAN><SPAN 
class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>n=8</FONT></SPAN></DIV>
<DIV dir=ltr><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Rate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to_array_2 to_array_3 to_array_1c to_array_1 
to_array_4 to_array_1b to_array_5<BR>&nbsp;to_array_2 
34.6+-0.4/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-50%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-71%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-72%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-74%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-74%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -79%<BR>&nbsp;to_array_3 
68.8+-0.6/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
99%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-42%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-45%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-49%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-49%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -58%<BR>to_array_1c&nbsp; 118+-&nbsp; 
2/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
241%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
71%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-6%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-12%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-13%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -27%<BR>&nbsp;to_array_1&nbsp; 
126+-&nbsp; 0/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
264%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
83%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
7%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-6%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-7%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -22%<BR>&nbsp;to_array_4&nbsp; 
134+-&nbsp; 2/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
287%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
95%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
14%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
6%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [-1%]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-17%<BR>to_array_1b&nbsp; 135+-&nbsp; 1/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
290%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
96%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
15%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
7%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
[1%]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -17%<BR>&nbsp;to_array_5&nbsp; 162+- 
10/s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
369%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
136%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
37%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
29%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
21%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
20%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
--<BR></FONT>&nbsp;</SPAN></DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT><FONT face=Arial color=#0000ff size=2>&nbsp;(* compile 
with</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>ocamlopt -o to_array -I benchmark-0.7 unix.cmxa 
benchmark-0.7/benchmark.cmx to_array.ml</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>*)</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>open 
Benchmark</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_1 t =<BR>&nbsp; let dummy =&nbsp; Array.init 0 (fun _ -&gt; raise 
Not_found) in<BR>&nbsp;&nbsp;&nbsp; fst<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(Hashtbl.fold<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (fun k v (a, 
i) -&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
if i = 0 then&nbsp; 
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
let a = Array.make (Hashtbl.length t) (k, v) 
in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(a, 1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
else (a.(i) &lt;- (k, v); (a, i + 
1)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t (dummy, 
0))</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_2 t =<BR>&nbsp; let init _ = fun () -&gt; raise Not_found&nbsp; 
in<BR>&nbsp; let a = Array.init (Hashtbl.length t) init in<BR>&nbsp;&nbsp;&nbsp; 
ignore<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Hashtbl.fold (fun k v i -&gt; a.(i) 
&lt;- (fun () -&gt; (k, v)); i+1) t 0);<BR>&nbsp;&nbsp;&nbsp; Array.map (fun f 
-&gt; f ())&nbsp; a</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_3 t =<BR>&nbsp; Array.of_list (Hashtbl.fold (fun a b c -&gt; (a, b) :: 
c) t [])</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2><BR>let to_array_1b t =<BR>&nbsp; let a = ref (Array.init 0 (fun _ -&gt; 
raise Not_found)) in<BR>&nbsp;&nbsp;&nbsp; 
ignore<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(Hashtbl.fold<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (fun k v i 
-&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if i 
= 0 
then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(a := Array.make (Hashtbl.length t) (k, 
v);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
((!a).(i) &lt;- (k, v); i + 
1))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t 
0);<BR>&nbsp;&nbsp;&nbsp; !a</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_4 t =<BR>&nbsp; let init = ref None in<BR>&nbsp;&nbsp;&nbsp; begin try 
Hashtbl.iter (fun k v -&gt; init := Some (k,v); raise Exit) 
t<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with Exit -&gt; ()<BR>&nbsp;&nbsp;&nbsp; 
end;<BR>&nbsp;&nbsp;&nbsp; match !init with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 
None -&gt; [| |]<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Some i 
-&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let a = 
Array.make (Hashtbl.length t) i 
in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ignore 
(Hashtbl.fold (fun k v i -&gt; a.(i) &lt;- (k, v); i + 1) t 
0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
a</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2></FONT></SPAN>&nbsp;</DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_5 =<BR>&nbsp; let init = Obj.magic 0 in<BR>&nbsp;&nbsp;&nbsp; fun t 
-&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let a =&nbsp; Array.make (Hashtbl.length 
t) init&nbsp; in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
ignore<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Hashtbl.fold 
(fun k v i -&gt; a.(i) &lt;- (k, v); i + 1) t 0) ; 
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a </FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff size=2>let 
to_array_1c t =<BR>&nbsp; let r =<BR>&nbsp;&nbsp;&nbsp; Hashtbl.fold (fun k v 
seed 
-&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
match seed 
with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Some (a,i) -&gt; a.(i) &lt;- (k,v); Some 
(a,i+1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
| None -&gt; let a =&nbsp; Array.make (Hashtbl.length t) (k,v) 
in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Some (a,1))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t None <BR>&nbsp; 
in<BR>&nbsp;&nbsp;&nbsp; match r 
with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None -&gt; Array.init 0 (fun 
_ -&gt; raise Not_found)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Some (a, _) -&gt; 
a</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>let h n = <BR>&nbsp; let m = n * 
1000 in<BR>&nbsp; let h = Hashtbl.create m in<BR>&nbsp;&nbsp;&nbsp; for i = 0 to 
m - 1 do<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtbl.replace h (Random.int 
max_int) (Random.int max_int);<BR>&nbsp;&nbsp;&nbsp; done;<BR>&nbsp;&nbsp;&nbsp; 
h<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>let main () =<BR>&nbsp; let n = try 
int_of_string Sys.argv.(1) with _ -&gt; 1 in<BR>&nbsp; let h = h n in<BR>&nbsp; 
let res = throughputN ~repeat:5 1<BR>&nbsp;&nbsp;&nbsp; [("to_array_1", 
to_array_1, h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_1b", to_array_1b, 
h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_1c", to_array_1c, 
h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_2", to_array_2, 
h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_3", to_array_3, 
h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_4", to_array_4, 
h);<BR>&nbsp;&nbsp;&nbsp;&nbsp; ("to_array_5", to_array_5, 
h);</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ] in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
tabulate res</FONT></SPAN></DIV>
<DIV>&nbsp;</DIV>
<DIV><SPAN class=348462614-26072006><FONT face=Arial color=#0000ff 
size=2><BR>let () =&nbsp; main () <BR></DIV></FONT></SPAN></BODY></HTML>

------_=_NextPart_001_01C6B0C1.9722F728--

