Return-Path: <alexander.fuchs@uni-koblenz.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id C7439BB84
	for <caml-list@yquem.inria.fr>; Sat, 15 Jul 2006 19:06:06 +0200 (CEST)
Received: from serv07.divms.uiowa.edu (serv07.divms.uiowa.edu [128.255.44.97])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k6FH65uq008912
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@yquem.inria.fr>; Sat, 15 Jul 2006 19:06:06 +0200
Received: from [192.168.1.106] (pool-70-107-136-59.ny325.east.verizon.net [70.107.136.59]) by serv07.divms.uiowa.edu with id k6FH5mhb018218; Sat, 15 Jul 2006 12:05:55 -0500
Message-ID: <44B9202D.7080707@uni-koblenz.de>
Date: Sat, 15 Jul 2006 13:04:45 -0400
From: Alexander Fuchs <alexander.fuchs@uni-koblenz.de>
User-Agent: Thunderbird 1.5.0.4 (X11/20060615)
MIME-Version: 1.0
To: Chris King <colanderman@gmail.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Limiting Memory Usage
References: <44B711FC.7000001@uni-koblenz.de> <875c7e070607140552s2d2fe962n43f8fd7502ccb9eb@mail.gmail.com>
In-Reply-To: <875c7e070607140552s2d2fe962n43f8fd7502ccb9eb@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.55 on 128.255.44.22
X-Virus-Scanned: ClamAV version 0.88.2, clamav-milter version 0.88.2 on serv07.divms.uiowa.edu
X-Virus-Status: Clean
X-Miltered: at nez-perce with ID 44B9207D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; stack:01 heap:01 wrote:01 caml-list:01 functions:01 checking:02 alexander:03 alexander:03 suggestion:03 fuchs:04 fuchs:04 rough:05 chris:05 suggested:06 stat:07 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Hi,

Chris King wrote:
 > Did you look at Gc?  It's not a hard limit but periodically checking
 > (quick_stat ()).heap_words will give you a rough estimate of how much
 > memory your program is using (not exact since it doesn't count
 > code/stack/etc.).

thanks for the suggestion. For some reason I thought that monitoring 
memory usage by calling the Gc functions often tends to be expensive.

But someone suggested to use Gc.create_alarm, and this works fine.

Thanks,

	Alexander


