Return-Path: <rathereasy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id A843A7EE25
	for <caml-list@sympa.inria.fr>; Fri, 25 Oct 2013 22:44:41 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  rathereasy@gmail.com) identity=pra; client-ip=209.85.220.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="rathereasy@gmail.com";
  x-sender="rathereasy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  rathereasy@gmail.com designates 209.85.220.45 as permitted
  sender) identity=mailfrom; client-ip=209.85.220.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="rathereasy@gmail.com";
  x-sender="rathereasy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-pa0-f45.google.com) identity=helo;
  client-ip=209.85.220.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="rathereasy@gmail.com";
  x-sender="postmaster@mail-pa0-f45.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhIDAG3XalLRVdwtlGdsb2JhbABZgz9Uq2mKGIhHgRsIFg4BAQEBBwsLCRIqgiUBAQQBJxkBGxILAQMBCwYFCwMKDSEiAREBBQEKEgYTCAqHYgEDCQYNmnyMVoMKhCAKGScDCmSJAQEFDI9DBAeELAOYCoEvjmwYKYRtIA
X-IPAS-Result: AhIDAG3XalLRVdwtlGdsb2JhbABZgz9Uq2mKGIhHgRsIFg4BAQEBBwsLCRIqgiUBAQQBJxkBGxILAQMBCwYFCwMKDSEiAREBBQEKEgYTCAqHYgEDCQYNmnyMVoMKhCAKGScDCmSJAQEFDI9DBAeELAOYCoEvjmwYKYRtIA
X-IronPort-AV: E=Sophos;i="4.93,573,1378850400"; 
   d="scan'208";a="38833802"
Received: from mail-pa0-f45.google.com ([209.85.220.45])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 25 Oct 2013 22:44:41 +0200
Received: by mail-pa0-f45.google.com with SMTP id kp14so4265556pab.4
        for <caml-list@inria.fr>; Fri, 25 Oct 2013 13:44:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=GFUg8Bdc/fyAga/4PdZkHw2WuL6kH5ne6Fw6bKQvcB8=;
        b=kHPPHEVDhH7zFED9TLHkb5MrKlDKv7QCMN3Ee61i3nyKfZ+aZsiGqa5IglG+8Higoa
         EKK2ec3QIYEChwcOKi5hRBKlEbgrG4iwhuKvlGD6cqaGDl9E6IpWfMeaY+++L1IA8F3X
         4OHbrSFBSo3JNzLmE4EGCUwVNvBKZI4VfuACVqZdV/Tqrs9170I1ytLfCAErZoVkA/Cj
         1rWFFER2Fj8U+KQKinHRICIPjNcdDMbq62KxrYt8rlkUa2e12l/KFrgtW/DN/IpeY2H9
         123y/BBGzrLS1xw7us+/lqANNba7+xddz49LeitJwaq8pndPl0mxpwzfA4DaEbPzPQu7
         PS5g==
MIME-Version: 1.0
X-Received: by 10.66.196.110 with SMTP id il14mr12633032pac.130.1382733878969;
 Fri, 25 Oct 2013 13:44:38 -0700 (PDT)
Received: by 10.70.9.37 with HTTP; Fri, 25 Oct 2013 13:44:38 -0700 (PDT)
In-Reply-To: <CACLX4jSUaC3vzXH1JZz8V0YEpM1uC+yMsmUv=HNasavgwyeE+w@mail.gmail.com>
References: <BLU0-SMTP16AA624460C082145DF676A30C0@phx.gbl>
	<97627FCD-30E1-45AD-A72B-CD423170C0AC@math.nagoya-u.ac.jp>
	<FAB38C63-E179-41F0-8912-F7B90AF30C83@mpi-sws.org>
	<20131025082911.GB23798@voyager>
	<878uxhd62p.fsf@golf.niidar.ru>
	<CAPFanBEjtVg6NZEL0pMQJU5S9Zw2c0Wb4Ff2pWsYatnquhjROQ@mail.gmail.com>
	<526A7F33.6040203@mpi-sws.org>
	<CACLX4jSUaC3vzXH1JZz8V0YEpM1uC+yMsmUv=HNasavgwyeE+w@mail.gmail.com>
Date: Fri, 25 Oct 2013 16:44:38 -0400
Message-ID: <CAK0y-374OxDt-4SLMrFtuHJGxy8z0o41BAp64oPFrHVbmXL1TQ@mail.gmail.com>
From: Jacques Le Normand <rathereasy@gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: Andreas Rossberg <rossberg@mpi-sws.org>, Gabriel Scherer <gabriel.scherer@gmail.com>, 
	Ivan Gotovchits <ivg@ieee.org>, Roberto Di Cosmo <roberto@dicosmo.org>, 
	Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>, OCaML List Mailing <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7bf16572accd1404e996d1c9
Subject: Re: [Caml-list] Equality between abstract type definitions


--047d7bf16572accd1404e996d1c9
Content-Type: text/plain; charset=ISO-8859-1

I'm surprised noone has pointed out the new type annotation syntax:

let id : type s. s -> s = fun x -> x


On Fri, Oct 25, 2013 at 4:32 PM, Yaron Minsky <yminsky@janestreet.com>wrote:

> Changing the semantics of this will, I think, break a _lot_ of code.
> I for one am not excited to do so.
>
> For what it's worth, I suspect that most people who are surprised by
> this are people who were trained on Standard ML.  At Jane Street we've
> had a lot of people learn the language, and the complaints I've heard
> about this feature are, I think, mostly from that group.
>
> I also don't find Andreas suggestion particularly intuitive.  I would
> have guessed that (x: '_a) would constrain x to be a weakly
> polymorphic value, which is at odds with the proposal.
>
> y
>
> On Fri, Oct 25, 2013 at 10:24 AM, Andreas Rossberg <rossberg@mpi-sws.org>
> wrote:
> > On 10/25/2013 01:09 PM, Gabriel Scherer wrote:
> >>
> >> However, I think that the current syntax of implicitly-introduced
> >> variables with heuristically-defined scoping rules is bad in any case.
> >> My own toy experiment with explicit syntaxes always use an explicit
> >> binding syntax for both rigid and flexible variables (eg. "forall a b c
> >> in ..." and "some a b c in ..."). In this regard, the ('a 'b . ty) or
> >> (type a) syntaxes are definite improvements -- if only we had applied
> >> those explicit binding forms to GADT constructor types as well... So I
> >> think that even with Andreas' proposed change, people would still be
> >> surprised by things like the following:
> >>
> >>    let id : 'a -> 'a = fun x -> x
> >>
> >>    let dup (x : 'a) ('a * 'a) =
> >>      let result = (x, x) in
> >>      (id : 'a -> 'a) result  (* fails, while (id : 'b -> 'b) works *)
> >
> >
> > Yes, I agree that implicit scoping is a bit of an ugly hack. That said, I
> > don't expect anybody to be truly surprised about the example above. At
> least
> > I never heard this being an issue for SML programmers. People probably
> > hardly ever write anything like the above, or avoid shadowing for clarity
> > anyway.
> >
> > /Andreas
> >
> >
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa.inria.fr/sympa/arc/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--047d7bf16572accd1404e996d1c9
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;m surprised noone has pointed out the new type annot=
ation syntax:<div><br></div><div>let id : type s. s -&gt; s =3D fun x -&gt;=
 x</div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote"=
>On Fri, Oct 25, 2013 at 4:32 PM, Yaron Minsky <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:yminsky@janestreet.com" target=3D"_blank">yminsky@janestreet.co=
m</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Changing the semantics of this will, I think=
, break a _lot_ of code.<br>
I for one am not excited to do so.<br>
<br>
For what it&#39;s worth, I suspect that most people who are surprised by<br>
this are people who were trained on Standard ML. =A0At Jane Street we&#39;v=
e<br>
had a lot of people learn the language, and the complaints I&#39;ve heard<b=
r>
about this feature are, I think, mostly from that group.<br>
<br>
I also don&#39;t find Andreas suggestion particularly intuitive. =A0I would=
<br>
have guessed that (x: &#39;_a) would constrain x to be a weakly<br>
polymorphic value, which is at odds with the proposal.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
y<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
On Fri, Oct 25, 2013 at 10:24 AM, Andreas Rossberg &lt;<a href=3D"mailto:ro=
ssberg@mpi-sws.org">rossberg@mpi-sws.org</a>&gt; wrote:<br>
&gt; On 10/25/2013 01:09 PM, Gabriel Scherer wrote:<br>
&gt;&gt;<br>
&gt;&gt; However, I think that the current syntax of implicitly-introduced<=
br>
&gt;&gt; variables with heuristically-defined scoping rules is bad in any c=
ase.<br>
&gt;&gt; My own toy experiment with explicit syntaxes always use an explici=
t<br>
&gt;&gt; binding syntax for both rigid and flexible variables (eg. &quot;fo=
rall a b c<br>
&gt;&gt; in ...&quot; and &quot;some a b c in ...&quot;). In this regard, t=
he (&#39;a &#39;b . ty) or<br>
&gt;&gt; (type a) syntaxes are definite improvements -- if only we had appl=
ied<br>
&gt;&gt; those explicit binding forms to GADT constructor types as well... =
So I<br>
&gt;&gt; think that even with Andreas&#39; proposed change, people would st=
ill be<br>
&gt;&gt; surprised by things like the following:<br>
&gt;&gt;<br>
&gt;&gt; =A0 =A0let id : &#39;a -&gt; &#39;a =3D fun x -&gt; x<br>
&gt;&gt;<br>
&gt;&gt; =A0 =A0let dup (x : &#39;a) (&#39;a * &#39;a) =3D<br>
&gt;&gt; =A0 =A0 =A0let result =3D (x, x) in<br>
&gt;&gt; =A0 =A0 =A0(id : &#39;a -&gt; &#39;a) result =A0(* fails, while (i=
d : &#39;b -&gt; &#39;b) works *)<br>
&gt;<br>
&gt;<br>
&gt; Yes, I agree that implicit scoping is a bit of an ugly hack. That said=
, I<br>
&gt; don&#39;t expect anybody to be truly surprised about the example above=
. At least<br>
&gt; I never heard this being an issue for SML programmers. People probably=
<br>
&gt; hardly ever write anything like the above, or avoid shadowing for clar=
ity<br>
&gt; anyway.<br>
&gt;<br>
&gt; /Andreas<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; --<br>
&gt; Caml-list mailing list. =A0Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blan=
k">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

--047d7bf16572accd1404e996d1c9--
