Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 010A57EE4B
	for <caml-list@sympa.inria.fr>; Thu, 10 Oct 2013 17:59:27 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=pra;
  client-ip=133.6.130.5;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=mailfrom;
  client-ip=133.6.130.5;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mailhost.math.nagoya-u.ac.jp) identity=helo;
  client-ip=133.6.130.5;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="postmaster@mailhost.math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap4BAFnOVlKFBoIFnGdsb2JhbABZgz/Be4E5DgEBAQEBCBQJPIIlAQEEAToJATUCAwsLRlcGE4gABQEMpnSEWAKFOokNB4xzgiEzB4MfgQSYCIEvk3k
X-IPAS-Result: Ap4BAFnOVlKFBoIFnGdsb2JhbABZgz/Be4E5DgEBAQEBCBQJPIIlAQEEAToJATUCAwsLRlcGE4gABQEMpnSEWAKFOokNB4xzgiEzB4MfgQSYCIEvk3k
X-IronPort-AV: E=Sophos;i="4.90,1072,1371074400"; 
   d="scan'208";a="36446855"
Received: from rabbit.math.nagoya-u.ac.jp (HELO mailhost.math.nagoya-u.ac.jp) ([133.6.130.5])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 10 Oct 2013 17:59:23 +0200
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id 6D83763B1;
	Fri, 11 Oct 2013 00:59:21 +0900 (JST)
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id 43D3C40CC;
	Fri, 11 Oct 2013 00:59:21 +0900 (JST)
DomainKey-Signature: h=Received:Subject:Mime-Version:Content-Type:From:In-Reply-To:Date:Cc:Content-Transfer-Encoding:Message-Id:References:To:X-Mailer; b=; c=nofws; d=math.nagoya-u.ac.jp; q=; s=alpha
Received: from guest-rocq-134204.inria.fr (guest-rocq-134204.inria.fr [128.93.134.204])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTPSA id 116E63997;
	Fri, 11 Oct 2013 00:59:15 +0900 (JST)
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Content-Type: text/plain; charset=us-ascii
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <17063385.vVJpguqPzc@ocp-dell>
Date: Thu, 10 Oct 2013 17:59:09 +0200
Cc: caml-list@inria.fr,
 Romain Bardou <romain.bardou@inria.fr>,
 Arnaud Spiwack <aspiwack@lix.polytechnique.fr>
Content-Transfer-Encoding: quoted-printable
Message-Id: <B5304A4A-AD46-4972-A245-75134FEA6494@math.nagoya-u.ac.jp>
References: <52551D48.2030204@inria.fr> <CAMoPVjfpbP=DUMfGpA4QRf+7Wkdyu2BpwUnGqXNgsjJC27fO9w@mail.gmail.com> <52569C69.1050408@inria.fr> <17063385.vVJpguqPzc@ocp-dell>
To: Louis Gesbert <louis.gesbert@ocamlpro.com>
X-Mailer: Apple Mail (2.1510)
Subject: Re: [Caml-list] [ANN] Procord 0.1.0: Delegate tasks to other
 processes

On 2013/10/10, at 16:59, Louis Gesbert <louis.gesbert@ocamlpro.com> wrote:

> You may find the bindings for Terminate_process in ocaml-top useful [1].
>=20
> I also had to handle sending a SIGINT to the ocaml toplevel, which wasn't=
 very fun,
>=20
>=20
> [1] https://github.com/OCamlPro/ocaml-top/blob/master/src/sigint_win.c
>=20
> Louis Gesbert -- OCamlPro

If you're just trying to kill an ocaml toplevel that you have spawned yours=
elf,
you can have a look at labltk/browser/shell.ml.
By setting the environment variable OCAMLSIGPIPE and sending T or C to
this pipe you can kill or interrupt the ocaml toplevel asynchronously.
(At the time I implemented that, there was basically no other way to do that
in windows than having a child thread kill its parent.

	Jacques=
