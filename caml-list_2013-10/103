Return-Path: <arnaud.spiwack@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 77C897EE4B
	for <caml-list@sympa.inria.fr>; Fri, 11 Oct 2013 06:50:14 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  arnaud.spiwack@gmail.com) identity=pra;
  client-ip=209.85.212.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="arnaud.spiwack@gmail.com";
  x-sender="arnaud.spiwack@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  arnaud.spiwack@gmail.com designates 209.85.212.173 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.212.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="arnaud.spiwack@gmail.com";
  x-sender="arnaud.spiwack@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wi0-f173.google.com) identity=helo;
  client-ip=209.85.212.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="arnaud.spiwack@gmail.com";
  x-sender="postmaster@mail-wi0-f173.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlcCAB6CV1LRVdStm2dsb2JhbABZgz9SgymrPooUiE6BGggWDgEBAQEBBgsLCRQogiUBAQQBIwQZAS0LAQMBCwEFAwILDQ0dAgIhARIBBQEKEgYTEgcBh1oDCQYMjDiPWowCg12ERycDCollAQUMjE6CaYJ1gTkDlhyBaYEvix2DSxgpgWOCbTo
X-IPAS-Result: AlcCAB6CV1LRVdStm2dsb2JhbABZgz9SgymrPooUiE6BGggWDgEBAQEBBgsLCRQogiUBAQQBIwQZAS0LAQMBCwEFAwILDQ0dAgIhARIBBQEKEgYTEgcBh1oDCQYMjDiPWowCg12ERycDCollAQUMjE6CaYJ1gTkDlhyBaYEvix2DSxgpgWOCbTo
X-IronPort-AV: E=Sophos;i="4.90,1077,1371074400"; 
   d="scan'208";a="29900918"
Received: from mail-wi0-f173.google.com ([209.85.212.173])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 11 Oct 2013 06:50:13 +0200
Received: by mail-wi0-f173.google.com with SMTP id hq15so506691wib.0
        for <caml-list@inria.fr>; Thu, 10 Oct 2013 21:50:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:from:date:message-id
         :subject:to:cc:content-type;
        bh=MPFOfHfxvr+PjDKUS3de5956x8Jvo2OMe0NtY8+No0I=;
        b=I1IrU6aIvXPW6EBEEaUsmNZfyVVvsIW3fTVTI07aKOMBso5kh6bEe8Gu3JaeyS5V/E
         yOQV6vj8ELWrawJqgRTvAGsHz6BSuJZLeQ0FLcfRL19ZePZJ2tKllXFXNlv6i6LY50wY
         okyAT4INJkF3S9TAQKu5qEGGzrQWMBe0U70xy99eN0KZN1cuyZ+6qrcUBFrQd/tzM6pH
         oQtilYtdwEG7SDDPeMznSGMH/ihGHiygtJe9awuAUnaEEEZguin5Ez0ZdEPE7ox3VfON
         y9gfOEBUvkC6quE4acWtHCwVhJgjraoLtiuIqypiHtzZveqNRxO9GLdc8oEzLwLnMCLx
         9G5Q==
X-Received: by 10.194.109.68 with SMTP id hq4mr15487208wjb.12.1381467013069;
 Thu, 10 Oct 2013 21:50:13 -0700 (PDT)
MIME-Version: 1.0
Sender: arnaud.spiwack@gmail.com
Received: by 10.216.33.193 with HTTP; Thu, 10 Oct 2013 21:49:32 -0700 (PDT)
In-Reply-To: <CAN6ygOkbWq5p=2cNYYpWXV=vyK4UE1P+JLLEO7X6X-0AbVG5QQ@mail.gmail.com>
References: <CAN6ygOk6Lnp0jb2OW0WOO4EnuEi3zUyV_u0is61jt5yHY-byzw@mail.gmail.com>
 <E51C5B015DBD1348A1D85763337FB6D9CCC6CE76@Remus.metastack.local> <CAN6ygOkbWq5p=2cNYYpWXV=vyK4UE1P+JLLEO7X6X-0AbVG5QQ@mail.gmail.com>
From: Arnaud Spiwack <aspiwack@lix.polytechnique.fr>
Date: Fri, 11 Oct 2013 06:49:32 +0200
X-Google-Sender-Auth: ErlqfUjeyFsvHuDX3FCprdDoJxk
Message-ID: <CAMoPVjfUxErjpYA1BcJvkK5==uBaS0dn-cn=TGbdZWWK_nJ=Sw@mail.gmail.com>
To: Yotam Barnoy <yotambarnoy@gmail.com>
Cc: David Allsopp <dra-news@metastack.com>, Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e0102e6da9544df04e86fda09
X-Validation-by: arnaud@spiwack.net
Subject: Re: [Caml-list] Pattern matching on refs


--089e0102e6da9544df04e86fda09
Content-Type: text/plain; charset=UTF-8

If you need queues with random access, and do not need highly tuned
performances, may I suggest you having a look at Okasaki's *Purely
functional datastructures*. It has a handful of these, which do not involve
assignment (they use laziness annotation, though, for good amortized
performances). It would make your life better. The book version has a
little more than the thesis, by the way.


On 10 October 2013 21:46, Yotam Barnoy <yotambarnoy@gmail.com> wrote:

> D'oh! I always forget about mutable fields somehow. Refs just take over in
> my mind and I end up putting them everywhere I need mutability. Shows how
> little I actually use mutability in ocaml.
>
> And the reason for the linked lists is that I need a (low-performance)
> queue/stack with random access. And the reason for implementing a
> doubly-linked list myself is that my advisor is against using any library
> that's not part of the ocaml distribution.
>
> Sorry for the disturbance folks. Move along!
>
> -Yotam
>
>
> On Thu, Oct 10, 2013 at 3:42 PM, David Allsopp <dra-news@metastack.com>wrote:
>
>> Yotam Barnoy wrote:
>> > I recently found out how ugly it is to pattern-match on a ref,
>> > using {contents=...}. This should be extremely easy to fix in
>> > the parser. Can it please be put into the next version of ocaml?
>>
>> I imagine there are those who might suggest that the ugliness of pattern
>> matching on refs is part of the discouragement against using them!
>>
>> > match x with
>> > | ref y -> ...
>>
>> I'm guessing that you're really pattern matching with refs inside tuples
>> or something which makes using !x impractical? That said, if you've ended
>> with up (foo, bar, baz) where at least one of those is a reference, why not
>> consider using records with mutable fields?
>>
>> While writing this, Yotam Barnoy wrote:
>> > It wouldn't solve the problem, because in reality
>> > I'm matching something like this piece of code
>> > implementing a doubly-linked list:
>> >
>> > type 'a cell = { data : 'a;
>> >                 next : 'a link ref;
>> >                 last : 'a link ref;
>> >               }
>>
>> Completely ignoring why you might be implementing linked lists in a
>> list-processing language (I'm sure there's a good reason!), why not have
>>
>> type 'a cell = {data: 'a;
>>                 next: mutable 'a link;
>>                 last: mutable 'link}
>>
>> ?
>>
>> The parser change you propose is probably not trivial - for a start,
>> "ref" is part of the Pervasives module, not part of the grammar, and [ref]
>> itself can be redefined (try [let ref x = x] in the toplevel). Putting
>> something into the grammar to allow pattern matching on ref like this would
>> at best be a grim hack.
>>
>>
>> David
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>

--089e0102e6da9544df04e86fda09
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">If you need queues with random access, and do not need hig=
hly tuned performances, may I suggest you having a look at Okasaki&#39;s <i=
>Purely functional datastructures</i>. It has a handful of these, which do =
not involve assignment (they use laziness annotation, though, for good amor=
tized performances). It would make your life better. The book version has a=
 little more than the thesis, by the way.<br>

</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On 10 O=
ctober 2013 21:46, Yotam Barnoy <span dir=3D"ltr">&lt;<a href=3D"mailto:yot=
ambarnoy@gmail.com" target=3D"_blank">yotambarnoy@gmail.com</a>&gt;</span> =
wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div><div>D&#39;oh! I alway=
s forget about mutable fields somehow. Refs just take over in my mind and I=
 end up putting them everywhere I need mutability. Shows how little I actua=
lly use mutability in ocaml.<br>



<br>And the reason for the linked lists is that I need a (low-performance) =
queue/stack with random access. And the reason for implementing a doubly-li=
nked list myself is that my advisor is against using any library that&#39;s=
 not part of the ocaml distribution.<br>



<br></div>Sorry for the disturbance folks. Move along!<span class=3D"HOEnZb=
"><font color=3D"#888888"><br><br></font></span></div><span class=3D"HOEnZb=
"><font color=3D"#888888">-Yotam<br></font></span></div><div class=3D"HOEnZ=
b"><div class=3D"h5">

<div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu, Oct 1=
0, 2013 at 3:42 PM, David Allsopp <span dir=3D"ltr">&lt;<a href=3D"mailto:d=
ra-news@metastack.com" target=3D"_blank">dra-news@metastack.com</a>&gt;</sp=
an> wrote:<br>



<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div>Yotam Barnoy wrote:<br>
&gt; I recently found out how ugly it is to pattern-match on a ref,<br>
&gt; using {contents=3D...}. This should be extremely easy to fix in<br>
&gt; the parser. Can it please be put into the next version of ocaml?<br>
<br>
</div>I imagine there are those who might suggest that the ugliness of patt=
ern matching on refs is part of the discouragement against using them!<br>
<div><br>
&gt; match x with<br>
&gt; | ref y -&gt; ...<br>
<br>
</div>I&#39;m guessing that you&#39;re really pattern matching with refs in=
side tuples or something which makes using !x impractical? That said, if yo=
u&#39;ve ended with up (foo, bar, baz) where at least one of those is a ref=
erence, why not consider using records with mutable fields?<br>




<div><br>
While writing this, Yotam Barnoy wrote:<br>
&gt; It wouldn&#39;t solve the problem, because in reality<br>
&gt; I&#39;m matching something like this piece of code<br>
&gt; implementing a doubly-linked list:<br>
&gt;<br>
&gt; type &#39;a cell =3D { data : &#39;a;<br>
&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 next : &#39;a =
link ref;<br>
&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 last : &#39;a =
link ref;<br>
&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 }<br>
<br>
</div>Completely ignoring why you might be implementing linked lists in a l=
ist-processing language (I&#39;m sure there&#39;s a good reason!), why not =
have<br>
<div><br>
type &#39;a cell =3D {data: &#39;a;<br>
</div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 next: mutable=
 &#39;a link;<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 last: mutable &#39;=
link}<br>
<br>
?<br>
<br>
The parser change you propose is probably not trivial - for a start, &quot;=
ref&quot; is part of the Pervasives module, not part of the grammar, and [r=
ef] itself can be redefined (try [let ref x =3D x] in the toplevel). Puttin=
g something into the grammar to allow pattern matching on ref like this wou=
ld at best be a grim hack.<br>




<span><font color=3D"#888888"><br>
<br>
David<br>
<br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a></font></span></blockquote></div><=
br></div>
</div></div></blockquote></div><br></div>

--089e0102e6da9544df04e86fda09--
