Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 055B27EE4B
	for <caml-list@sympa.inria.fr>; Thu, 10 Oct 2013 21:47:03 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.216.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.216.47 as permitted
  sender) identity=mailfrom; client-ip=209.85.216.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qa0-f47.google.com) identity=helo;
  client-ip=209.85.216.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qa0-f47.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlYCABYDV1LRVdgvm2dsb2JhbABZgz9Srk2KFIhOgR0IFg4BAQEBAQYLCwkUKIIlAQEEAScZARsSCwEDAQsGBQsDCg0hIgERAQUBChIGExIIh1kBAwkGDJt1jFWDCoQVChknAwpkiQEBBQyPNwQHhCMDmAWBL45oGCmEaiA
X-IPAS-Result: AlYCABYDV1LRVdgvm2dsb2JhbABZgz9Srk2KFIhOgR0IFg4BAQEBAQYLCwkUKIIlAQEEAScZARsSCwEDAQsGBQsDCg0hIgERAQUBChIGExIIh1kBAwkGDJt1jFWDCoQVChknAwpkiQEBBQyPNwQHhCMDmAWBL45oGCmEaiA
X-IronPort-AV: E=Sophos;i="4.90,1074,1371074400"; 
   d="scan'208";a="36469451"
Received: from mail-qa0-f47.google.com ([209.85.216.47])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 10 Oct 2013 21:47:00 +0200
Received: by mail-qa0-f47.google.com with SMTP id k4so5615qaq.13
        for <caml-list@inria.fr>; Thu, 10 Oct 2013 12:47:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=ko3pFgK5sphIeZ6VP989cnVkGVFVLr6lkIzLh/QaMqU=;
        b=Qf1Zfmutc5br58gXVQTq6TncrEnSQJrlkft5v2NgNrl874E4Kq1lAofeBEPlarkYnw
         7oeQRq+VjOZZMOqcpDZXLd3zr1+IM2F/NVKKVWlG6yiEWtqaA8RCGw3OsF2kcvgjsss5
         bqJzrWXixfrC5pNuXMOsCgZLawstO2plAGMFUTi42AIK1Afda4TmwiNd6W6Pb6nvQQmS
         EuNR7H2gZ8ZSI/AgHVyOVmP8wnGb8GxNHvU6w6IAc5I+pltMXDUXeqjHVKkpoquBjcpM
         BL+jj1xrMv8VEz3PLK3QqwqkvXxG52nc8jaXLdQqm/PpklF7EhtzeWQEl6U+InfSRYa6
         Gkjw==
X-Received: by 10.229.127.74 with SMTP id f10mr13697003qcs.16.1381434421099;
 Thu, 10 Oct 2013 12:47:01 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.139.20 with HTTP; Thu, 10 Oct 2013 12:46:40 -0700 (PDT)
In-Reply-To: <E51C5B015DBD1348A1D85763337FB6D9CCC6CE76@Remus.metastack.local>
References: <CAN6ygOk6Lnp0jb2OW0WOO4EnuEi3zUyV_u0is61jt5yHY-byzw@mail.gmail.com>
 <E51C5B015DBD1348A1D85763337FB6D9CCC6CE76@Remus.metastack.local>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Thu, 10 Oct 2013 15:46:40 -0400
Message-ID: <CAN6ygOkbWq5p=2cNYYpWXV=vyK4UE1P+JLLEO7X6X-0AbVG5QQ@mail.gmail.com>
To: David Allsopp <dra-news@metastack.com>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1133dd4cf3428704e8684303
Subject: Re: [Caml-list] Pattern matching on refs


--001a1133dd4cf3428704e8684303
Content-Type: text/plain; charset=ISO-8859-1

D'oh! I always forget about mutable fields somehow. Refs just take over in
my mind and I end up putting them everywhere I need mutability. Shows how
little I actually use mutability in ocaml.

And the reason for the linked lists is that I need a (low-performance)
queue/stack with random access. And the reason for implementing a
doubly-linked list myself is that my advisor is against using any library
that's not part of the ocaml distribution.

Sorry for the disturbance folks. Move along!

-Yotam


On Thu, Oct 10, 2013 at 3:42 PM, David Allsopp <dra-news@metastack.com>wrote:

> Yotam Barnoy wrote:
> > I recently found out how ugly it is to pattern-match on a ref,
> > using {contents=...}. This should be extremely easy to fix in
> > the parser. Can it please be put into the next version of ocaml?
>
> I imagine there are those who might suggest that the ugliness of pattern
> matching on refs is part of the discouragement against using them!
>
> > match x with
> > | ref y -> ...
>
> I'm guessing that you're really pattern matching with refs inside tuples
> or something which makes using !x impractical? That said, if you've ended
> with up (foo, bar, baz) where at least one of those is a reference, why not
> consider using records with mutable fields?
>
> While writing this, Yotam Barnoy wrote:
> > It wouldn't solve the problem, because in reality
> > I'm matching something like this piece of code
> > implementing a doubly-linked list:
> >
> > type 'a cell = { data : 'a;
> >                 next : 'a link ref;
> >                 last : 'a link ref;
> >               }
>
> Completely ignoring why you might be implementing linked lists in a
> list-processing language (I'm sure there's a good reason!), why not have
>
> type 'a cell = {data: 'a;
>                 next: mutable 'a link;
>                 last: mutable 'link}
>
> ?
>
> The parser change you propose is probably not trivial - for a start, "ref"
> is part of the Pervasives module, not part of the grammar, and [ref] itself
> can be redefined (try [let ref x = x] in the toplevel). Putting something
> into the grammar to allow pattern matching on ref like this would at best
> be a grim hack.
>
>
> David
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--001a1133dd4cf3428704e8684303
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>D&#39;oh! I always forget about mutable fields s=
omehow. Refs just take over in my mind and I end up putting them everywhere=
 I need mutability. Shows how little I actually use mutability in ocaml.<br>

<br>And the reason for the linked lists is that I need a (low-performance) =
queue/stack with random access. And the reason for implementing a doubly-li=
nked list myself is that my advisor is against using any library that&#39;s=
 not part of the ocaml distribution.<br>

<br></div>Sorry for the disturbance folks. Move along!<br><br></div>-Yotam<=
br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On T=
hu, Oct 10, 2013 at 3:42 PM, David Allsopp <span dir=3D"ltr">&lt;<a href=3D=
"mailto:dra-news@metastack.com" target=3D"_blank">dra-news@metastack.com</a=
>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">Yotam Barnoy wrote:<br>
&gt; I recently found out how ugly it is to pattern-match on a ref,<br>
&gt; using {contents=3D...}. This should be extremely easy to fix in<br>
&gt; the parser. Can it please be put into the next version of ocaml?<br>
<br>
</div>I imagine there are those who might suggest that the ugliness of patt=
ern matching on refs is part of the discouragement against using them!<br>
<div class=3D"im"><br>
&gt; match x with<br>
&gt; | ref y -&gt; ...<br>
<br>
</div>I&#39;m guessing that you&#39;re really pattern matching with refs in=
side tuples or something which makes using !x impractical? That said, if yo=
u&#39;ve ended with up (foo, bar, baz) where at least one of those is a ref=
erence, why not consider using records with mutable fields?<br>


<div class=3D"im"><br>
While writing this, Yotam Barnoy wrote:<br>
&gt; It wouldn&#39;t solve the problem, because in reality<br>
&gt; I&#39;m matching something like this piece of code<br>
&gt; implementing a doubly-linked list:<br>
&gt;<br>
&gt; type &#39;a cell =3D { data : &#39;a;<br>
&gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 next : &#39;a link ref;<br>
&gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 last : &#39;a link ref;<br>
&gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 }<br>
<br>
</div>Completely ignoring why you might be implementing linked lists in a l=
ist-processing language (I&#39;m sure there&#39;s a good reason!), why not =
have<br>
<div class=3D"im"><br>
type &#39;a cell =3D {data: &#39;a;<br>
</div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 next: mutable &#39;a link;<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 last: mutable &#39;link}<br>
<br>
?<br>
<br>
The parser change you propose is probably not trivial - for a start, &quot;=
ref&quot; is part of the Pervasives module, not part of the grammar, and [r=
ef] itself can be redefined (try [let ref x =3D x] in the toplevel). Puttin=
g something into the grammar to allow pattern matching on ref like this wou=
ld at best be a grim hack.<br>


<span class=3D"HOEnZb"><font color=3D"#888888"><br>
<br>
David<br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a></font></span></blockquote></div><=
br></div>

--001a1133dd4cf3428704e8684303--
