Return-Path: <info@gerd-stolpmann.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 410F97EE4B
	for <caml-list@sympa.inria.fr>; Fri, 18 Oct 2013 15:52:27 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=pra; client-ip=212.227.17.8;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=mailfrom;
  client-ip=212.227.17.8;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@moutng.kundenserver.de designates 212.227.17.8 as
  permitted sender) identity=helo; client-ip=212.227.17.8;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="postmaster@moutng.kundenserver.de";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnQCAK87YVLU4xEIm2dsb2JhbABagz++coEkFg4BAQEBAQYLCwkUKIIlAQEDAQFVJAULCxguVwYTCYd3CgjAc4kzhX0mB4QpA48BijeFDI5y
X-IPAS-Result: AnQCAK87YVLU4xEIm2dsb2JhbABagz++coEkFg4BAQEBAQYLCwkUKIIlAQEDAQFVJAULCxguVwYTCYd3CgjAc4kzhX0mB4QpA48BijeFDI5y
X-IronPort-AV: E=Sophos;i="4.93,522,1378850400"; 
   d="asc'?scan'208";a="37668136"
Received: from moutng.kundenserver.de ([212.227.17.8])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Oct 2013 15:52:25 +0200
Received: from office1.lan.sumadev.de (dslb-088-069-151-174.pools.arcor-ip.net [88.69.151.174])
	by mrelayeu.kundenserver.de (node=mreu4) with ESMTP (Nemesis)
	id 0MP6Q7-1VcvEU0CzX-006K7m; Fri, 18 Oct 2013 15:52:17 +0200
Received: from [192.168.0.191] (546BEFE6.cm-12-4d.dynamic.ziggo.nl [84.107.239.230])
	by office1.lan.sumadev.de (Postfix) with ESMTPSA id 7F936C00D3;
	Fri, 18 Oct 2013 15:52:13 +0200 (CEST)
Message-ID: <1382104327.3040.21.camel@e130>
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: Anil Madhavapeddy <anil@recoil.org>
Cc: rixed@happyleptic.org, OCaml Mailing List <caml-list@inria.fr>
Date: Fri, 18 Oct 2013 15:52:07 +0200
In-Reply-To: <20131018122018.GJ25839@dark.recoil.org>
References: 
	<CAKS5mhSbRU50H5ciHEbuSC1HMxiNDkCys0jM8RipqNFvr6ZVaQ@mail.gmail.com>
	 <20131018115553.GA28679@ombreroze.happyleptic.org>
	 <20131018115955.GG25839@dark.recoil.org>
	 <20131018121612.GB28679@ombreroze.happyleptic.org>
	 <20131018122018.GJ25839@dark.recoil.org>
Content-Type: multipart/signed; micalg="pgp-sha1"; protocol="application/pgp-signature";
	boundary="=-BNqYpf1dXpGku9cqB+MC"
X-Mailer: Evolution 3.2.3-0ubuntu6 
Mime-Version: 1.0
X-Provags-ID: V02:K0:0vRzvNM8Bda4wL7qLabdeIsJWsRehqjwtR++Tvw5WV6
 3vsSSk8yb+4qVig+fEwshiivrnE7zmgJ5lYmx67scgnebG4KcN
 5Oir5csYgjf3uLj8fUHMgWwgKQupxi6Kbwly+6j3y6916hV770
 +zhR1yhcWxWH0T8BNSIvyxB4vBVcBfIoTkLbzzL4j0kMXsaPJo
 Y9Z0rIWyRvRbKlZsJ7GlCa6HTlPnoyxwG8WiYxQcbpIBnjiWNN
 FQcOIPW2gK0KWp8zdcxpB9wUD2ApL7yNmr+/Wws/jQWJTK90A9
 GnH5EP5Qr6HtvTN69r7bl3xOOj0BYp7uKVbLl1JF2qAtPJUYqk
 CSzUbZOV8XULunQWlAuqMiUYzg9tjzhiN0nzMlw1J
Subject: Re: [Caml-list] IPv6 packet parsing


--=-BNqYpf1dXpGku9cqB+MC
Content-Type: text/plain; charset="ISO-8859-15"
Content-Transfer-Encoding: quoted-printable

Am Freitag, den 18.10.2013, 13:20 +0100 schrieb Anil Madhavapeddy:
> On Fri, Oct 18, 2013 at 02:16:12PM +0200, rixed@happyleptic.org wrote:
> > -[ Fri, Oct 18, 2013 at 12:59:55PM +0100, Anil Madhavapeddy ]----
> > > One feature I'd really like to see in Bitstring is support for Bigarr=
ay,
> > > since that avoids a copy into the OCaml heap and lets us do quite high
> > > performance parsing.  If I remember right, there was a patch on the
> > > Bitstring issue tracker, but it wasn't parameterised (so it's either
> > > Bistring+string or Bitstring+bigarray, which isn't ideal).
> >=20
> > Pardon my lack of familiarity with bigarrays, but I can't see what's the
> > difference between copying packets from pcap ring buffer into a bigarray
> > or into a string. Or do you mean using Bigarray.map_file on the whole
> > raw ring buffer and handle it without pcap help?

Without knowing details: maybe no copy is required at all? The pcap ring
buffer could be directly wrapped as Bigarray.

> We have a number of use-cases that run OCaml in kernel mode, directly
> operating on packets read from a network driver that's also written in
> OCaml.  Bigarrays are used as the mechanism for passing around externally
> allocated memory (i.e. network card buffers) directly, whereas inspecting
> them with a string-based Bigarray requires an expensive data copy.
>=20
> See: http://anil.recoil.org/papers/2013-asplos-mirage.pdf
> or http://www.openmirage.org

For similar reasons, I also added some Bigarray functions to Ocamlnet:

http://projects.camlcity.org/projects/dl/ocamlnet-3.7.3/doc/html-main/Netsy=
s_mem.html

If you look at the stub behind e.g. Unix.read, you'll see that the data
is first read into an internal unaligned buffer, and then copied to the
string buffer. This means usually two copies of the data: one from the
kernel buffer to the internal buffer, and one from there to the string.

If you use a Bigarray instead the internal buffer becomes superfluous:
Bigarrays are malloc'ed memory, and cannot be moved by the GC. Hence,
you can invoke the read() syscall directly with the Bigarray as buffer.
If you additionally ensure that the Bigarray is page-aligned, the kernel
can sometimes even avoid copying at all (though only some OS seem to
implement such a strategy, as changing the page mapping or doing some
direct I/O can be more costly than copying).

Another advantage here is that you can freely choose the size of the
buffer (Unix.read et al use fixed-size 64K for the internal buffer).
Also you can allocate the buffer in a shared area.

Ocamlnet now prefers Bigarrays as primary buffers where reasonable, and
where a speedup (or lower CPU consumption) can be expected. E.g. The
HTTP client first reads data into a bigarray, splits the header there
into lines (which are then normal strings again), and gathers the data
chunks from the HTTP body (which can be strings or Bigarrays, at the
user's choice).

Gerd
--=20
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
My OCaml site:          http://www.camlcity.org
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
------------------------------------------------------------


--=-BNqYpf1dXpGku9cqB+MC
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAABAgAGBQJSYT0HAAoJEAaM4b9ZLB5TIxkIAIpxkpXbM+d9bOoW/WF/I1fG
P8Im3ODUg6UlT2wdL3b+2XdM+8UhefDMUdvy2B6S4cRHOGHcLp78rNAZuMhf9f1b
Cgzm34jDOiFxgbJliIBp1p2fv0ANMCexfTvrz11RCYQhApZCfHCexp8aljPWTKUT
QCc5XeWrBLO6nV62TVbsUT7Vj6cgq/d3+zfN7HvNCc0SqOiz8ULqa49JVaoyxwjx
M7bpq8YpVAvLIM24Evm3ld6gnEDok4AOznPwnW3YHWtp+pvWCzLbclpOsKZJ/hLE
L4inXV6eVCR6jofcqdhwkm1YeZ0xQ7z8s1BeVudjn4oXF4X1setzjK2ZwUzIw+U=
=bEGy
-----END PGP SIGNATURE-----

--=-BNqYpf1dXpGku9cqB+MC--

