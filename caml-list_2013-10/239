Return-Path: <of12343@my.bristol.ac.uk>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 877B47EE25
	for <caml-list@sympa.inria.fr>; Tue, 29 Oct 2013 18:23:52 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  of12343@my.bristol.ac.uk) identity=pra;
  client-ip=74.125.82.181;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="of12343@my.bristol.ac.uk";
  x-sender="of12343@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  of12343@my.bristol.ac.uk) identity=mailfrom;
  client-ip=74.125.82.181;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="of12343@my.bristol.ac.uk";
  x-sender="of12343@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-we0-f181.google.com) identity=helo;
  client-ip=74.125.82.181;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="of12343@my.bristol.ac.uk";
  x-sender="postmaster@mail-we0-f181.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgoDAL/ub1JKfVK1lGdsb2JhbABZgmZZwTMWDgEBAQEHCwsJEiqCU4FnAQUBiDwBBAiYPYMElVWJEASODIFYgwmBDQOiTYVZQYRR
X-IPAS-Result: AgoDAL/ub1JKfVK1lGdsb2JhbABZgmZZwTMWDgEBAQEHCwsJEiqCU4FnAQUBiDwBBAiYPYMElVWJEASODIFYgwmBDQOiTYVZQYRR
X-IronPort-AV: E=Sophos;i="4.93,594,1378850400"; 
   d="scan'208";a="39491741"
Received: from mail-we0-f181.google.com ([74.125.82.181])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 29 Oct 2013 18:23:40 +0100
Received: by mail-we0-f181.google.com with SMTP id t60so174929wes.12
        for <caml-list@inria.fr>; Tue, 29 Oct 2013 10:23:52 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:from:content-type:content-transfer-encoding
         :subject:message-id:date:to:mime-version;
        bh=n7mvRLx5r5dtNUPOCQyIvna8s7Y7It8EvXyeh9mj92Q=;
        b=aL+9SsGU1/Ov+BvJO7TWoCk9Adecm4g1rfF8srOEOvQRLGmcWJZh+6sVn6VLsjS65l
         YuCacm4/CJcgr0Kii17eqT25dWwIaFr4UYKNuoAJAW58hqZ/6PB0d4eUwCZ5UQH3V0uO
         PU5sSIuxQGCphQJaBHiFQ/KUtNGOwdSrJol/q8bNv+ZpYJ9oX0mQhqXY5LBTg++Z57SW
         7Dgi/G9j8CG1ebxe29juGRebaegKhwC+emTCrBswHomMSIJlTFe8Q5Rtrk0IitOoFCNF
         5yrdBeORpVnMjieyvxKEppZ/72MkR1x0H/oaQJXEw7vsDD6Ks7ePZOCku10jEfQH437R
         CiWA==
X-Gm-Message-State: ALoCoQkPzTjR5fycTep9wEJRU15mJr/MwJm9qI8/QcziHUSBL5BuJKMr+SAarCmN0qs13+yVFIh1
X-Received: by 10.180.187.202 with SMTP id fu10mr442166wic.59.1383067431946;
        Tue, 29 Oct 2013 10:23:51 -0700 (PDT)
Received: from ?IPv6:2001:630:e4:42f6:8000::b5d:30e5? ([2001:630:e4:42f6:8000:0:b5d:30e5])
        by mx.google.com with ESMTPSA id mw9sm7013783wib.0.2013.10.29.10.23.50
        for <caml-list@inria.fr>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Tue, 29 Oct 2013 10:23:51 -0700 (PDT)
From: Ollie Frolovs <of12343@my.bristol.ac.uk>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
Message-Id: <29DB56A1-C77D-4170-A44E-00BB0D5EA81A@my.bristol.ac.uk>
Date: Tue, 29 Oct 2013 17:23:50 +0000
To: caml-list@inria.fr
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1816\))
X-Mailer: Apple Mail (2.1816)
Subject: [Caml-list] Pretty-printing Lwt data structures & using Cohttp_lwt

Hello

I wrote this little program to fetch some JSON data from Google Distance Ma=
trix and i am in need of some advice.

My questions are =96

(a) is there a way to inspect or pretty-print the information (Cohttp_lwt_u=
nix.Client.get uri) and (Lwt_main.run (Cohttp_lwt_unix.Client.get uri)) ret=
urn? This would help me to verify if my understanding of how Lwt works is r=
ight.

(b) do i have to peform Lwt_main.run twice - once to open the connection an=
d once more the get the contents of the document or is there a better optio=
n?

Regards
Ollie


open Core.Std
open Lwt

(* TODO these be parameters *)
let base_uri_string =3D "https://maps.googleapis.com/maps/api/distancematri=
x/json?"
let origins =3D ["Bristol"; "London"; "Cambridge UK"]
let destinations =3D origins

(* Google API wants parameters separated by pipe rather than a comma.
   This is a violation of the RFC.=20
   Uri does not provide for this as of 1.3.10
   But Google API seems to be happy with character escaped version. *)
let anti_rfc_fy s =3D String.concat ~sep:"|" s

let base_uri =3D Uri.of_string base_uri_string
let uri =3D Uri.add_query_params base_uri [("origins", [anti_rfc_fy origins=
]);
					 ("destinations", [anti_rfc_fy destinations]);
					 ("sensor", ["false"])]

let response =3D Lwt_main.run (Cohttp_lwt_unix.Client.get uri)
let body =3D match response with
    None -> failwith "error: request failed -- any reason"
  | Some (_,b) -> Lwt_main.run (Cohttp_lwt_body.string_of_body b)

(* TODO json be p-arsed *)
let () =3D printf "%s" body

=97 Ollie=
