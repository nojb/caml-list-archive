Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA04974 for caml-red; Thu, 25 May 2000 09:27:51 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA24715 for <caml-list@pauillac.inria.fr>; Thu, 25 May 2000 09:00:49 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e4P70i919466;
	Thu, 25 May 2000 09:00:44 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA28614; Thu, 25 May 2000 09:00:43 +0200 (MET DST)
Message-ID: <20000525090043.54247@pauillac.inria.fr>
Date: Thu, 25 May 2000 09:00:43 +0200
From: Pierre Weis <Pierre.Weis@inria.fr>
To: Manuel Fahndrich <maf@microsoft.com>
Cc: caml-list@inria.fr
Subject: Re: Alternative generic hash function
References: <783D93998201D311B0CF00805FEAA07B7E9233@RED-MSG-42>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <783D93998201D311B0CF00805FEAA07B7E9233@RED-MSG-42>; from Manuel Fahndrich on Wed, May 24, 2000 at 03:04:11PM -0700
Lines: 27
Sender: weis

> The generic hash function Hashtbl.hash traverses into mutable data
> structures. So I get different hash values depending on updates of the data
> structure. 
[...]
> As was pointed out times before on this list, Hashtbl.hash is thus
> unsuitable for hashing on data structures that contain mutable data.
> 
> I'm wondering what the design rational is for this choice. I'd rather have a
> generic hash function (Hashtbl.hash_pure) that never looks into mutable
> structures (skips refs and mutable fields of records and classes).
[...]

The rationale is simple: there is no way to distinguish between
mutable and immutable data structures at runtime. So, there is no
possibility to implement the suggested hash_pure function in a
polymorphic way. If you really want to use keys that belong to a
mutable data structure (which is not a good idea anyway), you should
use the functorial interface to hash tables to specify your own
hashing function, that would implement hash_pure on your particular
key type.

Best regards,

-- 
Pierre Weis

INRIA, Projet Cristal, http://pauillac.inria.fr/~weis



