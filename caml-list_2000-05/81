Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA16142 for caml-red; Wed, 17 May 2000 19:28:53 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA08214 for <caml-list@pauillac.inria.fr>; Tue, 16 May 2000 19:13:15 +0200 (MET DST)
Received: from miss.wu-wien.ac.at (miss.wu-wien.ac.at [137.208.107.17])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e4GHDET21054
	for <caml-list@inria.fr>; Tue, 16 May 2000 19:13:14 +0200 (MET DST)
Received: (from mottl@localhost)
	by miss.wu-wien.ac.at (8.9.0/8.9.0) id TAA08221;
	Tue, 16 May 2000 19:13:05 +0200 (MET DST)
From: Markus Mottl <mottl@miss.wu-wien.ac.at>
Message-Id: <200005161713.TAA08221@miss.wu-wien.ac.at>
Subject: Re: The performance cost of using exceptions?
To: dave@kal.com (Dave Berry)
Date: Tue, 16 May 2000 19:13:05 +0200 (MET DST)
Cc: caml-list@inria.fr (OCAML)
In-Reply-To: <3145774E67D8D111BE6E00C0DF418B66226B86@nt.kal.com> from "Dave Berry" at May 16, 2000 05:02:05 PM
X-Mailer: ELM [version 2.5 PL2]
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Lines: 23
Sender: weis

> How about having a compiler that detects this pattern and emits the
> necessary pointer comparisons?  Then you could write your code cleanly
> (without exceptions, flags or comparisons), and the compiler can emit
> whatever code is most efficient for its runtime.

One could surely do this, especially if the compiler "sees" that only one
or a few arguments of a constructor change: then checking for physical
identity would allow it to return the "original" value.

But I am not sure whether this is generally a good idea, because the
compiler cannot predict runtime behaviour: it may well be that you use sets
without ever inserting already existing elements into them. Then all these
checks are superfluous.

The good thing about the version with exceptions is that you do not need
the checks for physical equality anymore, which quickly pays with
increasing data amounts and is not really so "unclean".

Best regards,
Markus Mottl

-- 
Markus Mottl, mottl@miss.wu-wien.ac.at, http://miss.wu-wien.ac.at/~mottl



