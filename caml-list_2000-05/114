Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA26420 for caml-red; Tue, 30 May 2000 22:25:08 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA32744 for <caml-list@pauillac.inria.fr>; Tue, 30 May 2000 01:45:31 +0200 (MET DST)
Received: from mail.is.titech.ac.jp (mail.is.titech.ac.jp [131.112.40.16])
	by concorde.inria.fr (8.10.0/8.10.0) with SMTP id e4TNjTj14779
	for <caml-list@inria.fr>; Tue, 30 May 2000 01:45:30 +0200 (MET DST)
Received: (qmail 21225 invoked from network); 29 May 2000 23:45:27 -0000
Received: from n8nat-8.is.titech.ac.jp (HELO localhost) (131.112.50.138)
  by mail.is.titech.ac.jp with SMTP; 29 May 2000 23:45:27 -0000
To: Francois.Pottier@inria.fr
Cc: danieljg@cs.cornell.edu, caml-list@inria.fr
Subject: Re: Alternative generic hash function
In-Reply-To: <20000529151357.24569@pauillac.inria.fr>
References: <20000525102414.55340@pauillac.inria.fr>
	<392ED1F3.A08D283D@cs.cornell.edu>
	<20000529151357.24569@pauillac.inria.fr>
X-Mailer: Mew version 1.94.1 on Emacs 19.34 / Mule 2.3 (SUETSUMUHANA)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20000530084534H.wakita@is.titech.ac.jp>
Date: Tue, 30 May 2000 08:45:34 +0900
From: Ken Wakita <wakita@is.titech.ac.jp>
X-Dispatcher: imput version 990905(IM130)
Lines: 33
Sender: weis


In message (<20000529151357.24569@pauillac.inria.fr>)
from Francois Pottier <Francois.Pottier@inria.fr>,
talking about "Re: Alternative generic hash function",
on Mon, 29 May 2000 15:13:57 +0200

> I was thinking of a recording mutability per-field, rather than
> per-object. I agree that your proposal seems economical enough.
> 
> > there are plenty of clever tricks you can put in the runtime system
> > that exploit the immutability of objects.
> 
> Would you care to elaborate? I am no compiler expert, but I'm not sure
> why it would be so interesting to have this information at runtime,
> where it is already too late to do code optimization.

Mutability information is useful in distributed computing.  We have
been implementing a distributed Caml, which comes with distributed
shared memory.  To preserve assignment semantics over the network
(basically) we need to replace references to mutables with remote
pointers when they are remotely referenced.  In general, it is
impossible to tell remote/local reference at compile time.  Therefore
we need mutability information at runtime.

We modified the runtime representations for Caml mutable objects so
that the communication substrate can detect mutables (vectors and
mutable record fields).  For this purpose, our modifed compiler
assigns Mutable tag to vectors and arrays.  As for mutable record
field unboxed representation was replaced by boxed representation.
With the latter design, access to record fields can be slower but it
is negligible.

Ken Wakita



