Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA21468 for caml-red; Wed, 24 May 2000 10:06:43 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA21631 for <caml-list@pauillac.inria.fr>; Tue, 23 May 2000 17:43:39 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e4NFh8P21627;
	Tue, 23 May 2000 17:43:08 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA16531; Tue, 23 May 2000 17:43:07 +0200 (MET DST)
Message-ID: <20000523174307.54541@pauillac.inria.fr>
Date: Tue, 23 May 2000 17:43:07 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: David Chemouil <David.Chemouil@enseeiht.fr>, caml-list@inria.fr
Subject: Re: communication problems
References: <39295235.EF3590F6@enseeiht.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <39295235.EF3590F6@enseeiht.fr>; from David Chemouil on Mon, May 22, 2000 at 05:28:53PM +0200
Lines: 35
Sender: weis

> I'm currently writing kind of a middleware, but I face strange
> behaviors. I've got a client C and a server S, both
> (bytecode-)multithreaded. They communicate with TCP sockets. When C
> connects to S, S sends (by marshalling it, with the Marshal.Closures
> parameter) some data (actually an empty list) to C. On S' side it works.
> But C fails when doing a 'from_marshal' with a Sys_blocked_io exception.
> The doc says:

Right.  The Marshal.{to,from}_channel functions do not work in
conjunction with bytecode threads.  For Marshal.to_channel, use the
following definition instead:

let marshal_to_channel oc v flags =
  output_string oc (Marshal.to_string v flags)

and use input_value instead of Marshal.from_channel.

>      A special case of Sys_error raised when no I/O is possible on a
> non-blocking I/O channel. 
> I find this strange because, as far as I know, TCP sockets are
> *blocking" channels.

With the bytecode threads library, all channels are put in
non-blocking mode and I/O operations are wrapped specially so that a
thread that blocks waiting for I/O doesn't block the whole program.
All I/O functions in Pervasives and ThreadUnix are thus wrapped,
but not those in the Marshal module.  Hence the problem you
encountered.

Avoiding this kind of problems was an important motivation for the
system-level thread library (systhreads) :-)

Hope this helps,

- Xavier Leroy



