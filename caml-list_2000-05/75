Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA05997 for caml-redist@pauillac.inria.fr; Tue, 16 May 2000 12:37:20 +0200 (MET DST)
Resent-Message-Id: <200005161037.MAA05997@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA09552 for <caml-list@pauillac.inria.fr>; Tue, 16 May 2000 11:30:16 +0200 (MET DST)
Received: from mail.cs.uu.nl (sunset.cs.uu.nl [131.211.80.32])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e4G9UFT12338
	for <caml-list@inria.fr>; Tue, 16 May 2000 11:30:15 +0200 (MET DST)
Received: from silvester.cs.uu.nl.cs.uu.nl (silvester.cs.uu.nl [131.211.80.119])
	by mail.cs.uu.nl (Postfix) with ESMTP
	id 48EAD451A; Tue, 16 May 2000 11:30:15 +0200 (MET DST)
From: Frank Atanassow <franka@cs.uu.nl>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <14625.5414.998940.387603@silvester.cs.uu.nl>
Date: Tue, 16 May 2000 11:30:14 +0200 (MET DST)
To: Markus Mottl <mottl@miss.wu-wien.ac.at>
Cc: caml-list@inria.fr (OCAML)
Subject: Re: The performance cost of using exceptions?
In-Reply-To: <200005150731.JAA12847@miss.wu-wien.ac.at>
References: <bpxln1eaz70.fsf@neon.rchland.ibm.com>
	<200005150731.JAA12847@miss.wu-wien.ac.at>
X-Mailer: VM 6.75 under Emacs 20.4.1
Resent-From: weis@pauillac.inria.fr
Resent-Date: Tue, 16 May 2000 12:37:20 +0200
Resent-To: caml-redist@pauillac.inria.fr

Markus Mottl writes:
 > > Are programs written to make heavy use of exceptions going to be markedly
 > > slower than programs written more traditionally with loops/ifs, etc?
 > 
 > That depends on how you use them. It is well possible to do this in such a
 > way that you actually increase performance.
 > 
 > For example, when inserting elements into a binary tree, the naive version
 > always copies the "spine" of the tree, even if the element is already a
 > member.
 > 
 > But if you use exceptions, you can "jump back" and can thus prevent the
 > spine from being copied. This normally reduces the load of the garbage
 > collector and yields some percent more performance.

I don't see how this would improve performance. If the element is in the tree,
you will be copying the spine until you descend to a point where you discover
the node exists. If you then escape via an exception, the copied nodes will be
collected. Otherwise (but it depends on your specification, I suppose) the
functional way would be to just return the subtree(s) intact, so there would
be no need to copy their spines. Either way, you're generating the same amount
of garbage.

-- 
Frank Atanassow, Dept. of Computer Science, Utrecht University
Padualaan 14, PO Box 80.089, 3508 TB Utrecht, Netherlands
Tel +31 (030) 253-1012, Fax +31 (030) 251-3791


