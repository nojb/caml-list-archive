Return-Path: <alan.schmitt@polytechnique.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 6230A7ED20
	for <caml-list@sympa.inria.fr>; Tue, 26 Nov 2019 09:33:39 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.69,245,1571695200"; 
   d="asc'?scan'208,217";a="413501118"
Received: from set.irisa.fr (HELO set) ([131.254.10.170])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/AES256-GCM-SHA384; 26 Nov 2019 09:33:38 +0100
User-agent: mu4e 1.2.0; emacs 26.3
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 26 Nov 2019 09:33:35 +0100
Message-ID: <87tv6rjau8.fsf@inria.fr>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="===-=-=";
	micalg=pgp-sha256; protocol="application/pgp-signature"
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--===-=-=
Content-Type: multipart/mixed; boundary="=-=-="

--=-=-=
Content-Type: multipart/alternative; boundary="==-=-="

--==-=-=
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of November 19=20
to 26,
2019.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

tiny_httpd 0.1
printbox.0.3
v0.13 release of Jane Street packages
opam2nix (v1)
GitHub Actions for OCaml / opam now available
OCurrent 0.1 (CI/CD pipeline eDSL)
New pages for OCaml API
Irmin 2.0.0 release
Tail cascade: a new indentation style for some OCaml constructs
Old CWN


tiny_httpd 0.1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-tiny-httpd-0-1/4727/1>


Simon Cruanes announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hello and good morning, I'm pleased to announce that=20
  [tiny_httpd] 0.1
  has been released and is on opam.

  The goal is to emulate python's standard `http.server' by=20
  providing a
  0-dependencies, minimalist, simple HTTP server for embedding in
  applications that are not primarily a website, with very basic=20
  routing
  (thanks to `Scanf'). A binary `http_of_dir' is also distributed=20
  and
  can be used to serve a directory, with optional upload of files.


[tiny_httpd] <https://github.com/c-cube/tiny_httpd>


printbox.0.3
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-printbox-0-3/4731/1>


Simon Cruanes announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  <https://aws1.discourse-cdn.com/standard11/uploads/ocaml/original/2X/8/8e=
7c55c5ab69c12f53a7862d2f84dd6e0cfc0dc0.png>

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let b =3D
  =E2=94=82   let open PrintBox in
  =E2=94=82   PrintBox_unicode.setup();
  =E2=94=82   frame @@ grid_l [
  =E2=94=82     [text "subject"; text_with_style Style.bold "announce:=20
  printbox 0.3"];
  =E2=94=82     [text "explanation";
  =E2=94=82     frame @@ text {|PrintBox is a library for rendering nested=
=20
  tables,
  =E2=94=82     trees, and similar structures in monospace text or=20
  HTML.|}];
  =E2=94=82     [text "github";
  =E2=94=82     text_with_style Style.(bg_color Blue)=20
  "https://github.com/c-cube/printbox/releases/tag/0.3"];
  =E2=94=82     [text "contributors";
  =E2=94=82      vlist_map (text_with_style Style.(fg_color Green))=20
  ["Simon"; "Guillaume"; "Matt"]];
  =E2=94=82     [text "dependencies";
  =E2=94=82     tree empty
  =E2=94=82       [tree (text "mandatory")
  =E2=94=82 	 [text "dune"; text "bytes"];
  =E2=94=82        tree (text "optional")
  =E2=94=82 	 [text "uutf"; text "uucp"; text "tyxml"]]];
  =E2=94=82     [text "expected reaction"; text "=F0=9F=8E=89"];
  =E2=94=82   ]
  =E2=94=82
  =E2=94=82 let () =3D print_endline @@ PrintBox_text.to_string b
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  ([actual link to the release])


[actual link to the release]
<https://github.com/c-cube/printbox/releases/tag/0.3>


v0.13 release of Jane Street packages
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-v0-13-release-of-jane-street-packages/47=
35/1>


Xavier Clerc announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  We are pleased to announce the v0.13 release of Jane Street=20
  packages!

  This release comes with 14 new packages, and a number of fixes=20
  and
  enhancements. The documentation for this release is available on=20
  our
  website:

  <https://ocaml.janestreet.com/ocaml-core/v0.13/doc/>

  The remainder of this mail highlights the main changes since the=20
  v0.12
  release; we hope it will be useful to developers in the process=20
  of
  migrating to the new version. A comprehensive changelog is=20
  available
  at the end.


Notable changes
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Changed `Base', `Core_kernel', and `Core' functions to raise
    `Not_found_s' instead of `Not_found'.  `Hashtbl.find_exn' and
    `Map.find_exn' now include the key in their error message.

  =E2=80=A2 Changed `Core' and `Core_kernel' to export `int' comparison=20
  rather
    than polymorphic comparison.

  =E2=80=A2 Removed the "robust" float comparison operators (`>.', `=3D.',=
=20
  =E2=80=A6)
    from the default namespace.

  =E2=80=A2 Replaced `sexp_*' types (`sexp_list', `sexp_option',=20
  `sexp_opaque',
    =E2=80=A6) with preprocessor attributes (`[@sexp.list]',=20
    `[@sexp.option]',
    `[@sexp.opaque]', =E2=80=A6).

  =E2=80=A2 Changed `let%map' syntax from `let%map.Foo.Let_syntax' to
    `let%map.Foo'.

  =E2=80=A2 Added to `match%optional' support for specifying a path, so=20
  you can
    write `match%optional.Foo foo_option' rather than `let open
    Foo.Optional_syntax in match%optional foo_option'.

  =E2=80=A2 Improved `Base.Backtrace' so that it enables recording of=20
  backtraces
    in more situations, specifically when `OCAMLRUNPARAM' is=20
    defined but
    doesn't mention the backtrace flag, `b'.

  =E2=80=A2 Added javascript support for `Zarith', `Bigint', `Bignum', and
    `Bigdecimal'.

  =E2=80=A2 Changed `Hashtbl.create''s default `size' from 128 to 0.

  =E2=80=A2 Changed `Core_kernel.Command' so that all commands accept=20
  double
    dash flags: `--help', `--version', and `--build-info'.


New packages
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 async_udp (<https://github.com/janestreet/async_udp>): UDP=20
  support
    for Async.

  =E2=80=A2 async_websocket=20
  (<https://github.com/janestreet/async_websocket>): A
    library that implements the websocket protocol on top of=20
    Async.

  =E2=80=A2 bonsai (<https://github.com/janestreet/bonsai>): A library for
    building dynamic webapps, using Js_of_ocaml.

  =E2=80=A2 postgres_async=20
  (<https://github.com/janestreet/postgres_async>):
    OCaml/async implementation of the postgres protocol (i.e.,=20
    does not
    use C-bindings to libpq).

  =E2=80=A2 ppx_cold (<https://github.com/janestreet/ppx_cold>): Expands
    `[@cold]' into `[@inline never][@specialise never][@local=20
    never]'.

  =E2=80=A2 ppx_pattern_bind=20
  (<https://github.com/janestreet/ppx_pattern_bind>):
    A ppx for writing fast incremental bind nodes in a pattern=20
    match.

  =E2=80=A2 ppx_python (<https://github.com/janestreet/ppx_python>):
    `[@@deriving]' plugin to generate Python conversion functions.

  =E2=80=A2 ppx_yojson_conv=20
  (<https://github.com/janestreet/ppx_yojson_conv>):
    `[@@deriving]' plugin to generate Yojson conversion functions.

  =E2=80=A2 ppx_yojson_conv_lib
    (<https://github.com/janestreet/ppx_yojson_conv_lib>): Runtime=20
    lib
    for `ppx_yojson_conv'.

  =E2=80=A2 pythonlib (<https://github.com/janestreet/pythonlib>): A=20
  library to
    help writing wrappers around OCaml code for python.

  =E2=80=A2 sexp_select (<https://github.com/janestreet/sexp_select>): A=20
  library
    to use CSS-style selectors to traverse sexp trees.

  =E2=80=A2 timezone (<https://github.com/janestreet/timezone>): Time-zone
    handling.

  =E2=80=A2 toplevel_backend=20
  (<https://github.com/janestreet/toplevel_backend>):
    Shared backend for setting up toplevels.

  =E2=80=A2 zarith_stubs_js=20
  (<https://github.com/janestreet/zarith_stubs_js>):
    Javascript stubs for the Zarith library.


Deprecations / Removals
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  `Async_kernel':

  =E2=80=A2 Deprecated monadic `ignore' functions in favor of `ignore_m'.

  `Base':

  =E2=80=A2 Deleted `Array.replace' and `replace_all' functions, which=20
  have been
    deprecated since before the last public release.

  =E2=80=A2 Deprecated `Result.ok_unit'; use `Ok ()'.

  =E2=80=A2 Removed the `Monad' and `Applicative' interfaces' `all_ignore'
    function; it was previously deprecated and replaced by=20
    `all_unit'.

  =E2=80=A2 Removed `List.dedup', which has been deprecated since 2017-04.

  =E2=80=A2 Removed `String' mutation functions, which have been=20
  deprecated in
    favor of `Bytes' since 2017-10.

  =E2=80=A2 Deprecated `Array.truncate', `Obj_array.unsafe_truncate', and
    `Uniform_array.unsafe_truncate'.

  =E2=80=A2 Deprecated `Sys.argv', which has been superseded by=20
  `get_argv',
    which is a function, reflecting the fact that `argv' can=20
    change (as
    of OCaml 4.09).

  `Core_kernel':

  =E2=80=A2 Removed `Core_kernel.Std', which had been deprecated for a=20
  year.

  =E2=80=A2 Deprecated type `Command.Spec.param' in favor of=20
  `Command.Param.t'.

  =E2=80=A2 Removed `Hashtbl' functions that had been deprecated for=20
  years.

  =E2=80=A2 Removed `Float.to_string_round_trippable', which has been=20
  deprecated
    in favor of `to_string' since 2017-04.

  =E2=80=A2 Deprecated `Fqueue' functions where one should use `Fdeque'=20
  instead:
    `bot', `bot_exn', and `enqueue_top'.

  =E2=80=A2 Deleted `Bus.unsubscribes', which will be obviated by a=20
  performance
    improvement to `Bus.unsubscribe'.

  `Timing_wheel':

  =E2=80=A2 Removed the `alarm_upper_bound' function, which has been=20
  deprecated
    for 6 months, and superseded by `max_allowed_alarm_time'.


Moves
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  `Core_kernel':

  =E2=80=A2 Moved `Bounded_int_table' to a standalone library.

  =E2=80=A2 Moved the `Pool' and `Tuple_type' modules to a standalone=20
  library,
    `Tuple_pool'.

  `Async_unix':

  =E2=80=A2 Moved `Unix.Fd.replace' into a `Private' submodule.


Changelog
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C

  Please visit
  <https://discuss.ocaml.org/t/ann-v0-13-release-of-jane-street-packages/47=
35>


opam2nix (v1)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-opam2nix-v1/4741/1>


Tim Cuthbertson announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Anouncing opam2nix (v1)

  [opam2nix] generates [nix] expressions from the [opam] OCaml=20
  package
  repository. It works similarly to [bundix], [node2nix], etc:

  You run an (impure) command to resolve all transitive dependency
  versions using the current opam repository, generating a .nix=20
  file
  that locks down the exact package sources and versions. Then=20
  this file
  can be imported to provide `buildInputs' for building your ocaml
  project in nix.

  *What is nix and why would I care?* Well, that's a long story=20
  but the
   headline benefits of nix are:

  =E2=80=A2 reproducible builds (if it builds for me, it builds for you)
  =E2=80=A2 stateless (you don't set up switches and then install=20
  packages, each
    expression specifies everything it needs, and anything you=20
    don't
    have is fetched/built on demand)
  =E2=80=A2 language agnostic (takes care of non-ocaml dependencies)

  It's sadly not a shallow learning curve, but those benefits are=20
  hard
  to find elsewhere, so I obviously think it's worthwhile. So if=20
  you use
  nix (or would like to), please give it a try and provide
  feedback. I'll (slowly) start working on upstreaming it into=20
  nixpkgs.


[opam2nix] <https://github.com/timbertson/opam2nix>

[nix] <https://nixos.org/>

[opam] <https://opam.ocaml.org/>

[bundix] <https://github.com/nix-community/bundix>

[node2nix] <https://github.com/svanderburg/node2nix>


GitHub Actions for OCaml / opam now available
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/github-actions-for-ocaml-opam-now-available/=
4745/1>


Anil Madhavapeddy announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  I was in the [GitHub Actions] beta program and forward ported my=20
  code
  to the latest version that just went public.  It's a pretty=20
  simple way
  to get your OCaml code tested on Linux, macOS and Windows,=20
  without
  requiring an external CI service.  The action attempts to=20
  provide a
  homogenous interface across all three operating systems, so=20
  invoking
  'opam' from subsequent actions should "just work".

  You can find it here:
  =E2=80=A2 In the GitHub Marketplace at
    <https://github.com/marketplace/actions/setup-ocaml>
  =E2=80=A2 Source code on <https://github.com/avsm/setup-ocaml/>
  =E2=80=A2 Hello World usage on
    <https://github.com/avsm/hello-world-action-ocaml>
  =E2=80=A2 Usage in ocaml-yaml:
    =E2=80=A2=20
    <https://github.com/avsm/ocaml-yaml/blob/master/.github/workflows/test.=
yml>
    =E2=80=A2 An [example ocaml-yaml run]

  This should be considered fairly experimental as GH Actions is=20
  so new.
  If you do use it, then consider [updating this issue with your=20
  usage].
  It does not current supporting caching yet, but is pretty fast=20
  to
  bootstrap (~4minutes).

  It also doesn't have any higher level purpose other than to set=20
  up an
  opam environment, since most of the additional functionality=20
  such as
  revdeps testing is planned for addition to the [ocurrent DSL].
  Nevertheless, this GH feature will hopefully be useful for=20
  smaller
  projects without a lot of computational requirements.  Let me=20
  know how
  it goes!

  Windows is currently supported through @fdopen's excellent fork=20
  that
  uses Cygwin.  As Windows support is being mainlined into opam=20
  itself
  at the moment, I'm hoping that we will gradually move over to=20
  that.
  That should eventually remove the need for two separate
  opam-repositories, so I won't be adding any features that are=20
  Linux or
  macOS-specific and do not work on the Cygwin version.


[GitHub Actions] <https://github.com/actions>

[example ocaml-yaml run]
<https://github.com/avsm/ocaml-yaml/runs/314055554>

[updating this issue with your usage]
<https://github.com/avsm/setup-ocaml/issues/4>

[ocurrent DSL]
<https://discuss.ocaml.org/t/ann-ocurrent-0-1-ci-cd-pipeline-edsl/4742/2>


OCurrent 0.1 (CI/CD pipeline eDSL)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-ocurrent-0-1-ci-cd-pipeline-edsl/4742/1>


Thomas Leonard announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  [OCurrent] 0.1 has just been released to opam-repository.

  OCurrent is an OCaml eDSL intended for writing build/test/deploy
  pipelines. It is being used as the engine for [ocaml-ci] and the
  [docker-base-images] builder (used to build the OCaml Docker=20
  images,
  such as `ocurrent/opam:alpine-3.10-ocaml-4.08'). Other good uses=20
  might
  be building and redeploying a Docker service or a unikernel=20
  whenever
  its source repository changes. It can be run locally as a single=20
  Unix
  process.

  An OCurrent pipeline is written as an OCaml program, but the=20
  OCurrent
  engine ensures that it is kept up-to-date by re-running stages=20
  when
  their inputs change. A web UI is available so you can view your
  pipeline and see its current state.

  OCurrent can statically analyse the pipelines before they have=20
  run,
  allowing it to run steps in parallel automatically and to=20
  display the
  whole pipeline. It does this using a light-weight alternative to
  arrows, which doesn't require programming in an awkward=20
  point-free
  style. See [CI/CD Pipelines: Monad, Arrow or Dart?] for more=20
  about
  that.

  The basic functionality can be extended using "plugins" (just=20
  normal
  OCaml libraries). Plugins are available for interacting with=20
  Docker,
  Git, GitHub and Slack. These are in separate packages
  (e.g. `current_github') to avoid having the base package pull in=20
  too
  many dependencies).

  There is also an optional Cap'n Proto RPC interface, in the
  `current_rpc' opam package. This is used, for example, by=20
  [citty] to
  provide a TTY interface to ocaml-ci.

  [The OCurrent wiki] contains examples, and documentation on the
  various plugins.

  Here's an example pipeline (from the base image builder):

  <https://roscidus.com/blog/images/cicd/docker-base-images-thumb.png>


[OCurrent] <https://github.com/ocurrent/ocurrent>

[ocaml-ci] <https://github.com/ocurrent/ocaml-ci/>

[docker-base-images]=20
<https://github.com/ocurrent/docker-base-images>

[CI/CD Pipelines: Monad, Arrow or Dart?]
<https://roscidus.com/blog/blog/2019/11/14/cicd-pipelines/>

[citty] <https://github.com/ocurrent/citty>

[The OCurrent wiki] <https://github.com/ocurrent/ocurrent/wiki>


Anil Madhavapeddy then added
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80

  For those curious about the relation to the existing CI used in
  opam-repository, then it is no coincidence that @talex5 is the=20
  author
  of both :-)

  This DSL is the next iteration of the [datakit-ci], but=20
  specialised to
  be faster and simpler for extending with OCaml and more complex
  workflows that our OCaml Platform tools need these days (like
  ocamlformat linting, or dune expect promotion, or odoc
  cross-referenced doc generation).  We are planning a smooth=20
  migration
  next year over to the new system, but wanted to release this=20
  early to
  show you some of the pieces going into this new iteration.  I am
  particularly excited about the new tty-based interface that=20
  saves an
  awful lot of clicking around on web UIs for CI results=E2=80=A6


[datakit-ci] <https://github.com/moby/datakit>


New pages for OCaml API
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:=20
  <https://discuss.ocaml.org/t/new-pages-for-ocaml-api/4720/13>


Continuing this thread, sanette announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I have uploaded a new version (same link
  <https://sanette.github.io/ocaml-api/>)
  =E2=80=A2 background color for links in the TOC @Maelan
  =E2=80=A2 more indentation for value descriptions @Maelan, @grayswandyr
  =E2=80=A2 word wrapping long `<pre>' codes @grayswandyr
  =E2=80=A2 type table: remove `(*' and `*)', give more space to code wrt
    comments, diminish comment's color @grayswandyr

  searching is not ready yet=E2=80=A6 please wait suggestions for dark=20
  theme
  welcome


sanette later added
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  I have just uploaded a new version with a basic search engine.
  =E2=80=A2 for each page, you can search values/modules
  =E2=80=A2 in the general index page, the search includes also the=20
  descriptions
  =E2=80=A2 search results are ranked by relevance

  the downside is that each page now comes with an index of about=20
  570Kb
  in the form of an index.js file. I'm kind of hoping that the=20
  browser
  will cache this, but I'm not sure. It would be maybe better to=20
  only
  load the index file on demand.


Irmin 2.0.0 release
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90

  Archive:=20
  <https://discuss.ocaml.org/t/ann-irmin-2-0-0-release/4746/1>


Thomas Gazagnaire announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  On behalf of the Irmin development team, I am very happy to=20
  announce
  the release of Irmin 2.0.0, a major release of the Git-like
  distributed branching and storage substrate that underpins
  [MirageOS]. We began the release process for all the components=20
  that
  make up Irmin [back in May 2019], and there have been close to=20
  1000
  commits since Irmin 1.4.0 released back in June 2018. To=20
  celebrate
  this milestone, we have a new logo and opened a dedicated=20
  website:
  [irmin.org].

  More details here:=20
  <https://tarides.com/blog/2019-11-21-irmin-v2>


[MirageOS] <https://mirage.io/>

[back in May 2019]
<https://tarides.com/blog/2019-05-13-on-the-road-to-irmin-v2>

[irmin.org] <https://irmin.org/>


Tail cascade: a new indentation style for some OCaml constructs
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/tail-cascade-a-new-indentation-style-for-som=
e-ocaml-constructs/4736/1>


gasche announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I recently decided to change my indentation style for certain=20
  OCaml
  constructs in a way that I'm going to describe below. I just=20
  coined a
  name for this approach, "tail cascade". I'm creating this topic=20
  to
  convince everyone that this is a cool idea you should adopt as
  well. Or at least tolerate it when you review other people's=20
  code.


Problem
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Programs that heavily use `match' often see a shift to the right=20
  due
  to nested indentation.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 match foo with
  =E2=94=82 | Foo -> ...
  =E2=94=82 | Bar x ->
  =E2=94=82   match bar x with
  =E2=94=82   | FooBar -> ...
  =E2=94=82   | Blah y ->
  =E2=94=82     match f y with
  =E2=94=82     | Some z ->
  =E2=94=82       ...
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Another problem with this style is that it suffers from the=20
  "dangling
  bar" issue: if you try to add a new case for one of the exterior
  `match', it is parsed as belonging to the innermost `match'.=20
  People
  have been recommending (rightly) to use `begin match .. end' for=20
  all
  nested match constructs to avoid this issue.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 match foo with
  =E2=94=82 | Foo -> ...
  =E2=94=82 | Bar x ->
  =E2=94=82   begin match bar x with
  =E2=94=82   | FooBar -> ...
  =E2=94=82   | Blah y ->
  =E2=94=82     begin match f y with
  =E2=94=82     | None -> ...
  =E2=94=82     | Some z ->
  =E2=94=82       ...
  =E2=94=82     end
  =E2=94=82   (* now this is safe *)
  =E2=94=82   | FooBlah -> ...
  =E2=94=82   end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  But still the unpleasant shift to the right remains.


Proposal: cascading tail case
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  We should in general use `begin match .. end' for nested=20
  matches. But
  the "cascading tail case" proposal is to *not* do it for the=20
  *last*
  case of the pattern-matching, and instead *de-indent* (dedent)=20
  this
  last case =E2=80=93 tail case.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 match foo with
  =E2=94=82 | Foo -> ...
  =E2=94=82 | Bar x ->
  =E2=94=82 match bar x with
  =E2=94=82 | FooBar -> ...
  =E2=94=82 | Blah y ->
  =E2=94=82 match f y with
  =E2=94=82 | None -> ...
  =E2=94=82 | Some z ->
  =E2=94=82 ...
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Note that with this indentation style, the "dangling match"=20
  problem is
  also avoided: unlike with the original, non `end'-protected=20
  program,
  the indentation makes it immediately obvious that any further=20
  case
  will be attached to the innermost match, and not any of the=20
  exterior
  ones.

  A program using this "cascading tail" approach should always use
  `begin match .. end' for nested matches, except for a nested=20
  match
  returned within the last branch of an outer match, which can
  (optionally) be dedented instead.

  The choice to dedent the last case corresponds to encouraging a
  sequential reading of the program, where the other cases are
  "auxiliary cases" checked first and dispatched quickly, and the=20
  last
  case is the "main part" where the "rest" of the logic of the=20
  program
  lies. This pattern is typical of nested pattern-matching on the
  `option' or `result' type for example:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 match foo x with
  =E2=94=82 | Error err ->
  =E2=94=82   fail_foo_error err
  =E2=94=82 | Ok y ->
  =E2=94=82 match bar y with
  =E2=94=82 | Error err ->
  =E2=94=82   fail_bar_error err
  =E2=94=82 | Ok () ->
  =E2=94=82 ...
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Remark: it is *not* always the case that the `Error' constructor=20
  is
  the auxiliary case, and the `Ok' constructor is the main case;
  sometimes we implement fallback logic like "if `foo' work then=20
  we are
  good, but otherwise we have to do this and that", and the error=20
  case
  is the most salient (and longer) part of the program logic. I=20
  would
  recommend being mindful, when you write code, of whether there=20
  is a
  most convincing way to "sequentialize" it (distinguish auxiliary=20
  and
  main/tail case), and avoid using cascading tails when there is=20
  no
  clear sequentialization choice.

  Remark: some cases of tail cascades can be linearized by using a=20
  good
  definition of "bind" and a monadic style. This tends to be very
  limited however: it fixes one of the constructors to always be=20
  the
  "tail" constructor (always `Some', always `Ok'), and it only=20
  works
  when the handling of the other constructors is very homogeneous
  (typically: return directly). In real code, many situations=20
  occur
  where the monadic style doesn't fit the problem, but tail=20
  cascade does
  help writing a readable program.


Generalization: tail cascade
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C

  While I have never seen cascading tail cases in real-world OCaml=20
  code
  before (I'm happy to be given pointers; I think that the idea is=20
  not
  new, but I'm not aware of previous attempts to give it a catchy=20
  name
  and spread the cascade love), this is in fact a new (to me)=20
  instance
  of a common technique that is used for other OCaml constructs:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 if foo x then ...
  =E2=94=82 else if bar x then ...
  =E2=94=82 else ... (* this `tail else` was dedented *)
  =E2=94=82
  =E2=94=82 let x =3D foo in
  =E2=94=82 let y =3D bar in (* this `tail let` was dedented *)
  =E2=94=82 ...            (* and the rest as well *)
  =E2=94=82
  =E2=94=82 bind foo @@ fun x ->
  =E2=94=82 bind bar @@ fun y -> (* this "tail function body" was dedented=
=20
  *)
  =E2=94=82 ...                  (* and the rest as well *)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I would call "tail cascade" (or maybe: "cascading tail") the=20
  idea of
  dedenting the "rest" of an OCaml expression (compared to a=20
  strict
  tree-nesting-based approach) when it morally describes the=20
  "rest" of
  the expression. I use the name "tail" because those expressions=20
  are
  almost always in tail-position in the sense of tail-calls.

  This general approach legitimizes some styles that I have seen,=20
  and
  sometimes used, in the wild, while at the same time considering=20
  that I
  may have been doing something improper, for example:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 if foo then blah else
  =E2=94=82 ... (* dedented *)
  =E2=94=82
  =E2=94=82
  =E2=94=82 Fun.protect
  =E2=94=82   ~finally:(...)
  =E2=94=82 @@ fun () ->
  =E2=94=82 ... (* dedented *)
  =E2=94=82
  =E2=94=82
  =E2=94=82 try simple_approach with exn ->
  =E2=94=82 ... (* dedented *)
  =E2=94=82
  =E2=94=82
  =E2=94=82 1 +
  =E2=94=82 2 + (* dedented *)
  =E2=94=82 ... (* dedented *)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Remark: after a `then' or `else', many people share the=20
  reasonable
  view that any expression containing imperative constructs (`foo;=20
  bar')
  should be enclosed in a `begin .. end' block to avoid
  surprising-precedence issue. Just as for nested `match', this
  recommendation should be lifted for "tail else" constructs.

  Remark: The last example is a case where the dedented=20
  expressions are
  *not* in tail-position from a runtime-evaluation point of view.=20
  I am
  not sure as whether the two notions should be made to coincide=20
  more
  strongly, but in any case I'm not fond of the style in this=20
  particular
  example, I prefer to move the infix operator to the beginning of=20
  the
  next line instead, following a different style and=20
  justification.

  The possibility this "cascading tail" style today crucially=20
  relies on
  the nesting properties of open-ended syntactic constructs,=20
  notably
  `let' (commonly cascaded), and now `match' and `if
  ... else'. Proposals to transition to a syntax where `match' and
  `else' are forced to take a closing marker are incompatible with=20
  the
  cascading style. I have not made my mind on whether this should=20
  be
  considered a blocker for those proposals, but at least it shows=20
  that
  having the open-ended form available has value for certain=20
  programs.


Louis Gesbert then said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  @gasche I prototyped a dedicated option in `ocp-indent', if=20
  you're
  interested in trying it out :)
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam pin=20
  git+https://github.com/OCamlPro/ocp-indent#match-tail-cascade
  =E2=94=82 echo "match_tail_cascade=3Dtrue" >> ~/.ocp-indent
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and=20
  I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed=20
  of the
  archives].

  If you also wish to receive it every week by mail, you may=20
  subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <http://alan.petitepomme.net/cwn/>

[RSS feed of the archives]=20
<http://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <http://alan.petitepomme.net/>


--==-=-=
Content-Type: text/html
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2019-11-26 Tue 09:29 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2019.11.19.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2019.12.03.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of November 19 to 26, 20=
19.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">tiny_httpd 0.1</a></li>
<li><a href=3D"#2">printbox.0.3</a></li>
<li><a href=3D"#3">v0.13 release of Jane Street packages</a></li>
<li><a href=3D"#4">opam2nix (v1)</a></li>
<li><a href=3D"#5">GitHub Actions for OCaml / opam now available</a></li>
<li><a href=3D"#6">OCurrent 0.1 (CI/CD pipeline eDSL)</a></li>
<li><a href=3D"#7">New pages for OCaml API</a></li>
<li><a href=3D"#8">Irmin 2.0.0 release</a></li>
<li><a href=3D"#9">Tail cascade: a new indentation style for some OCaml con=
structs</a></li>
<li><a href=3D"#orga562926">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-orgc718c85" class=3D"outline-2">
<h2 id=3D"1">tiny_httpd 0.1</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-tiny-httpd-0-1/4727/1">=
https://discuss.ocaml.org/t/ann-tiny-httpd-0-1/4727/1</a>
</p>
</div>

<div id=3D"outline-container-orgdd1bed5" class=3D"outline-3">
<h3 id=3D"orgdd1bed5">Simon Cruanes announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgdd1bed5">
<p>
Hello and good morning, I'm pleased to announce that <a href=3D"https://git=
hub.com/c-cube/tiny_httpd">tiny_httpd</a> 0.1 has been released and is on o=
pam.
</p>

<p>
The goal is to emulate python's standard <code>http.server</code> by provid=
ing a 0-dependencies, minimalist, simple HTTP server for embedding in appli=
cations that are not primarily a website, with very basic routing (thanks t=
o <code>Scanf</code>). A binary <code>http_of_dir</code> is also distribute=
d and can be used to serve a directory, with optional upload of files.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org002969b" class=3D"outline-2">
<h2 id=3D"2">printbox.0.3</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-printbox-0-3/4731/1">ht=
tps://discuss.ocaml.org/t/ann-printbox-0-3/4731/1</a>
</p>
</div>

<div id=3D"outline-container-org83b4721" class=3D"outline-3">
<h3 id=3D"org83b4721">Simon Cruanes announced</h3>
<div class=3D"outline-text-3" id=3D"text-org83b4721">

<div class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/orig=
inal/2X/8/8e7c55c5ab69c12f53a7862d2f84dd6e0cfc0dc0.png" alt=3D"8e7c55c5ab69=
c12f53a7862d2f84dd6e0cfc0dc0.png" />
</p>
</div>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">b</span> =3D
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">open </span><span style=3D"color: #=
228b22;">PrintBox</span> <span style=3D"color: #000000; font-weight: bold;"=
>in</span>
  <span style=3D"color: #228b22;">PrintBox_unicode.</span>setup();
  frame <span style=3D"color: #a52a2a;">@@</span> grid_l [
    [text <span style=3D"color: #8b2252;">"subject"</span>; text_with_style=
 <span style=3D"color: #228b22;">Style.</span>bold <span style=3D"color: #8=
b2252;">"announce: printbox 0.3"</span>];
    [text <span style=3D"color: #8b2252;">"explanation"</span>;
    frame <span style=3D"color: #a52a2a;">@@</span> text <span style=3D"col=
or: #8b2252;">{|PrintBox is a library for rendering nested tables,</span>
<span style=3D"color: #8b2252;">    trees, and similar structures in monosp=
ace text or HTML.|}</span>];
    [text <span style=3D"color: #8b2252;">"github"</span>;
    text_with_style <span style=3D"color: #228b22;">Style.</span>(bg_color =
<span style=3D"color: #000000; background-color: #ffffff;">Blue</span>) <sp=
an style=3D"color: #8b2252;">"https://github.com/c-cube/printbox/releases/t=
ag/0.3"</span>];
    [text <span style=3D"color: #8b2252;">"contributors"</span>;
     vlist_map (text_with_style <span style=3D"color: #228b22;">Style.</spa=
n>(fg_color <span style=3D"color: #000000; background-color: #ffffff;">Gree=
n</span>)) [<span style=3D"color: #8b2252;">"Simon"</span>; <span style=3D"=
color: #8b2252;">"Guillaume"</span>; <span style=3D"color: #8b2252;">"Matt"=
</span>]];
    [text <span style=3D"color: #8b2252;">"dependencies"</span>;
    tree empty
      [tree (text <span style=3D"color: #8b2252;">"mandatory"</span>)
         [text <span style=3D"color: #8b2252;">"dune"</span>; text <span st=
yle=3D"color: #8b2252;">"bytes"</span>];
       tree (text <span style=3D"color: #8b2252;">"optional"</span>)
         [text <span style=3D"color: #8b2252;">"uutf"</span>; text <span st=
yle=3D"color: #8b2252;">"uucp"</span>; text <span style=3D"color: #8b2252;"=
>"tyxml"</span>]]];
    [text <span style=3D"color: #8b2252;">"expected reaction"</span>; text =
<span style=3D"color: #8b2252;">"&#127881;"</span>];
  ]

<span style=3D"color: #000000; font-weight: bold;">let</span> () =3D print_=
endline <span style=3D"color: #a52a2a;">@@</span> <span style=3D"color: #22=
8b22;">PrintBox_text.</span>to_string b
</pre>
</div>

<p>
(<a href=3D"https://github.com/c-cube/printbox/releases/tag/0.3">actual lin=
k to the release</a>)
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org37102d8" class=3D"outline-2">
<h2 id=3D"3">v0.13 release of Jane Street packages</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-v0-13-release-of-jane-s=
treet-packages/4735/1">https://discuss.ocaml.org/t/ann-v0-13-release-of-jan=
e-street-packages/4735/1</a>
</p>
</div>

<div id=3D"outline-container-org08305ad" class=3D"outline-3">
<h3 id=3D"org08305ad">Xavier Clerc announced</h3>
<div class=3D"outline-text-3" id=3D"text-org08305ad">
<p>
We are pleased to announce the v0.13 release of Jane Street packages!
</p>

<p>
This release comes with 14 new packages, and a number of fixes and
enhancements. The documentation for this release is available on our
website:
</p>

<p>
<a href=3D"https://ocaml.janestreet.com/ocaml-core/v0.13/doc/">https://ocam=
l.janestreet.com/ocaml-core/v0.13/doc/</a>
</p>

<p>
The remainder of this mail highlights the main changes since the v0.12
release; we hope it will be useful to developers in the process of
migrating to the new version. A comprehensive changelog is available
at the end.
</p>
</div>

<div id=3D"outline-container-orgf38a962" class=3D"outline-4">
<h4 id=3D"orgf38a962">Notable changes</h4>
<div class=3D"outline-text-4" id=3D"text-orgf38a962">
<ul class=3D"org-ul">
<li>Changed <code>Base</code>, <code>Core_kernel</code>, and <code>Core</co=
de> functions to raise
<code>Not_found_s</code> instead of <code>Not_found</code>.  <code>Hashtbl.=
find_exn</code> and
<code>Map.find_exn</code> now include the key in their error message.</li>

<li>Changed <code>Core</code> and <code>Core_kernel</code> to export <code>=
int</code> comparison rather
than polymorphic comparison.</li>

<li>Removed the "robust" float comparison operators (<code>&gt;.</code>, <c=
ode>=3D.</code>, &#x2026;)
from the default namespace.</li>

<li>Replaced <code>sexp_*</code> types (<code>sexp_list</code>, <code>sexp_=
option</code>, <code>sexp_opaque</code>,
&#x2026;) with preprocessor attributes (<code>[@sexp.list]</code>, <code>[@=
sexp.option]</code>,
<code>[@sexp.opaque]</code>, &#x2026;).</li>

<li>Changed <code>let%map</code> syntax from <code>let%map.Foo.Let_syntax</=
code> to
<code>let%map.Foo</code>.</li>

<li>Added to <code>match%optional</code> support for specifying a path, so =
you can
write <code>match%optional.Foo foo_option</code> rather than <code>let open
  Foo.Optional_syntax in match%optional foo_option</code>.</li>

<li>Improved <code>Base.Backtrace</code> so that it enables recording of ba=
cktraces
in more situations, specifically when <code>OCAMLRUNPARAM</code> is defined=
 but
doesn't mention the backtrace flag, <code>b</code>.</li>

<li>Added javascript support for <code>Zarith</code>, <code>Bigint</code>, =
<code>Bignum</code>, and
<code>Bigdecimal</code>.</li>

<li>Changed <code>Hashtbl.create</code>'s default <code>size</code> from 12=
8 to 0.</li>

<li>Changed <code>Core_kernel.Command</code> so that all commands accept do=
uble
dash flags: <code>--help</code>, <code>--version</code>, and <code>--build-=
info</code>.</li>
</ul>
</div>
</div>


<div id=3D"outline-container-org8769b57" class=3D"outline-4">
<h4 id=3D"org8769b57">New packages</h4>
<div class=3D"outline-text-4" id=3D"text-org8769b57">
<ul class=3D"org-ul">
<li>async_udp (<a href=3D"https://github.com/janestreet/async_udp">https://=
github.com/janestreet/async_udp</a>): UDP support for
Async.</li>

<li>async_websocket (<a href=3D"https://github.com/janestreet/async_websock=
et">https://github.com/janestreet/async_websocket</a>):
A library that implements the websocket protocol on top of Async.</li>

<li>bonsai (<a href=3D"https://github.com/janestreet/bonsai">https://github=
.com/janestreet/bonsai</a>): A library for building
dynamic webapps, using Js_of_ocaml.</li>

<li>postgres_async (<a href=3D"https://github.com/janestreet/postgres_async=
">https://github.com/janestreet/postgres_async</a>):
OCaml/async implementation of the postgres protocol (i.e., does not
use C-bindings to libpq).</li>

<li>ppx_cold (<a href=3D"https://github.com/janestreet/ppx_cold">https://gi=
thub.com/janestreet/ppx_cold</a>): Expands <code>[@cold]</code>
into <code>[@inline never][@specialise never][@local never]</code>.</li>

<li>ppx_pattern_bind (<a href=3D"https://github.com/janestreet/ppx_pattern_=
bind">https://github.com/janestreet/ppx_pattern_bind</a>):
A ppx for writing fast incremental bind nodes in a pattern match.</li>

<li>ppx_python (<a href=3D"https://github.com/janestreet/ppx_python">https:=
//github.com/janestreet/ppx_python</a>):
<code>[@@deriving]</code> plugin to generate Python conversion functions.</=
li>

<li>ppx_yojson_conv (<a href=3D"https://github.com/janestreet/ppx_yojson_co=
nv">https://github.com/janestreet/ppx_yojson_conv</a>):
<code>[@@deriving]</code> plugin to generate Yojson conversion functions.</=
li>

<li>ppx_yojson_conv_lib (<a href=3D"https://github.com/janestreet/ppx_yojso=
n_conv_lib">https://github.com/janestreet/ppx_yojson_conv_lib</a>):
Runtime lib for <code>ppx_yojson_conv</code>.</li>

<li>pythonlib (<a href=3D"https://github.com/janestreet/pythonlib">https://=
github.com/janestreet/pythonlib</a>): A library to
help writing wrappers around OCaml code for python.</li>

<li>sexp_select (<a href=3D"https://github.com/janestreet/sexp_select">http=
s://github.com/janestreet/sexp_select</a>): A library
to use CSS-style selectors to traverse sexp trees.</li>

<li>timezone (<a href=3D"https://github.com/janestreet/timezone">https://gi=
thub.com/janestreet/timezone</a>): Time-zone handling.</li>

<li>toplevel_backend (<a href=3D"https://github.com/janestreet/toplevel_bac=
kend">https://github.com/janestreet/toplevel_backend</a>):
Shared backend for setting up toplevels.</li>

<li>zarith_stubs_js (<a href=3D"https://github.com/janestreet/zarith_stubs_=
js">https://github.com/janestreet/zarith_stubs_js</a>):
Javascript stubs for the Zarith library.</li>
</ul>
</div>
</div>


<div id=3D"outline-container-org15bdd14" class=3D"outline-4">
<h4 id=3D"org15bdd14">Deprecations / Removals</h4>
<div class=3D"outline-text-4" id=3D"text-org15bdd14">
<p>
<code>Async_kernel</code>:
</p>

<ul class=3D"org-ul">
<li>Deprecated monadic <code>ignore</code> functions in favor of <code>igno=
re_m</code>.</li>
</ul>

<p>
<code>Base</code>:
</p>

<ul class=3D"org-ul">
<li>Deleted <code>Array.replace</code> and <code>replace_all</code> functio=
ns, which have been
deprecated since before the last public release.</li>

<li>Deprecated <code>Result.ok_unit</code>; use <code>Ok ()</code>.</li>

<li>Removed the <code>Monad</code> and <code>Applicative</code> interfaces'=
 <code>all_ignore</code>
function; it was previously deprecated and replaced by <code>all_unit</code=
>.</li>

<li>Removed <code>List.dedup</code>, which has been deprecated since 2017-0=
4.</li>

<li>Removed <code>String</code> mutation functions, which have been depreca=
ted in
favor of <code>Bytes</code> since 2017-10.</li>

<li>Deprecated <code>Array.truncate</code>, <code>Obj_array.unsafe_truncate=
</code>, and
<code>Uniform_array.unsafe_truncate</code>.</li>

<li>Deprecated <code>Sys.argv</code>, which has been superseded by <code>ge=
t_argv</code>,
which is a function, reflecting the fact that <code>argv</code> can change =
(as
of OCaml 4.09).</li>
</ul>

<p>
<code>Core_kernel</code>:
</p>

<ul class=3D"org-ul">
<li>Removed <code>Core_kernel.Std</code>, which had been deprecated for a y=
ear.</li>

<li>Deprecated type <code>Command.Spec.param</code> in favor of <code>Comma=
nd.Param.t</code>.</li>

<li>Removed <code>Hashtbl</code> functions that had been deprecated for yea=
rs.</li>

<li>Removed <code>Float.to_string_round_trippable</code>, which has been de=
precated
in favor of <code>to_string</code> since 2017-04.</li>

<li>Deprecated <code>Fqueue</code> functions where one should use <code>Fde=
que</code> instead:
<code>bot</code>, <code>bot_exn</code>, and <code>enqueue_top</code>.</li>

<li>Deleted <code>Bus.unsubscribes</code>, which will be obviated by a perf=
ormance
improvement to <code>Bus.unsubscribe</code>.</li>
</ul>

<p>
<code>Timing_wheel</code>:
</p>

<ul class=3D"org-ul">
<li>Removed the <code>alarm_upper_bound</code> function, which has been dep=
recated
for 6 months, and superseded by <code>max_allowed_alarm_time</code>.</li>
</ul>
</div>
</div>


<div id=3D"outline-container-orgfdea015" class=3D"outline-4">
<h4 id=3D"orgfdea015">Moves</h4>
<div class=3D"outline-text-4" id=3D"text-orgfdea015">
<p>
<code>Core_kernel</code>:
</p>

<ul class=3D"org-ul">
<li>Moved <code>Bounded_int_table</code> to a standalone library.</li>

<li>Moved the <code>Pool</code> and <code>Tuple_type</code> modules to a st=
andalone library,
<code>Tuple_pool</code>.</li>
</ul>

<p>
<code>Async_unix</code>:
</p>

<ul class=3D"org-ul">
<li>Moved <code>Unix.Fd.replace</code> into a <code>Private</code> submodul=
e.</li>
</ul>
</div>
</div>


<div id=3D"outline-container-orgb7268bc" class=3D"outline-4">
<h4 id=3D"orgb7268bc">Changelog</h4>
<div class=3D"outline-text-4" id=3D"text-orgb7268bc">
<p>
Please visit <a href=3D"https://discuss.ocaml.org/t/ann-v0-13-release-of-ja=
ne-street-packages/4735">https://discuss.ocaml.org/t/ann-v0-13-release-of-j=
ane-street-packages/4735</a>
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org1d77fa4" class=3D"outline-2">
<h2 id=3D"4">opam2nix (v1)</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-opam2nix-v1/4741/1">htt=
ps://discuss.ocaml.org/t/ann-opam2nix-v1/4741/1</a>
</p>
</div>

<div id=3D"outline-container-org48df80f" class=3D"outline-3">
<h3 id=3D"org48df80f">Tim Cuthbertson announced</h3>
<div class=3D"outline-text-3" id=3D"text-org48df80f">
<p>
Anouncing opam2nix (v1)
</p>

<p>
<a href=3D"https://github.com/timbertson/opam2nix">opam2nix</a> generates <=
a href=3D"https://nixos.org/">nix</a> expressions from the <a href=3D"https=
://opam.ocaml.org/">opam</a> OCaml package repository. It works similarly t=
o <a href=3D"https://github.com/nix-community/bundix">bundix</a>, <a href=
=3D"https://github.com/svanderburg/node2nix">node2nix</a>, etc:
</p>

<p>
You run an (impure) command to resolve all transitive dependency versions u=
sing the current opam repository, generating a .nix file that locks down th=
e exact package sources and versions. Then this file can be imported to pro=
vide <code>buildInputs</code> for building your ocaml project in nix.
</p>

<p>
<b>What is nix and why would I care?</b> Well, that's a long story but the =
headline benefits of nix are:
</p>

<ul class=3D"org-ul">
<li>reproducible builds (if it builds for me, it builds for you)</li>
<li>stateless (you don't set up switches and then install packages, each ex=
pression specifies everything it needs, and anything you don't have is fetc=
hed/built on demand)</li>
<li>language agnostic (takes care of non-ocaml dependencies)</li>
</ul>

<p>
It's sadly not a shallow learning curve, but those benefits are hard to fin=
d elsewhere, so I obviously think it's worthwhile. So if you use nix (or wo=
uld like to), please give it a try and provide feedback. I'll (slowly) star=
t working on upstreaming it into nixpkgs.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgb7cca50" class=3D"outline-2">
<h2 id=3D"5">GitHub Actions for OCaml / opam now available</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/github-actions-for-ocaml-op=
am-now-available/4745/1">https://discuss.ocaml.org/t/github-actions-for-oca=
ml-opam-now-available/4745/1</a>
</p>
</div>

<div id=3D"outline-container-org00426ce" class=3D"outline-3">
<h3 id=3D"org00426ce">Anil Madhavapeddy announced</h3>
<div class=3D"outline-text-3" id=3D"text-org00426ce">
<p>
I was in the <a href=3D"https://github.com/actions">GitHub Actions</a> beta=
 program and forward ported my code to the latest version that just went pu=
blic.  It's a pretty simple way to get your OCaml code tested on Linux, mac=
OS and Windows, without requiring an external CI service.  The action attem=
pts to provide a homogenous interface across all three operating systems, s=
o invoking 'opam' from subsequent actions should "just work".
</p>

<p>
You can find it here:
</p>
<ul class=3D"org-ul">
<li>In the GitHub Marketplace at <a href=3D"https://github.com/marketplace/=
actions/setup-ocaml">https://github.com/marketplace/actions/setup-ocaml</a>=
</li>
<li>Source code on <a href=3D"https://github.com/avsm/setup-ocaml/">https:/=
/github.com/avsm/setup-ocaml/</a></li>
<li>Hello World usage on <a href=3D"https://github.com/avsm/hello-world-act=
ion-ocaml">https://github.com/avsm/hello-world-action-ocaml</a></li>
<li>Usage in ocaml-yaml:
<ul class=3D"org-ul">
<li><a href=3D"https://github.com/avsm/ocaml-yaml/blob/master/.github/workf=
lows/test.yml">https://github.com/avsm/ocaml-yaml/blob/master/.github/workf=
lows/test.yml</a></li>
<li>An <a href=3D"https://github.com/avsm/ocaml-yaml/runs/314055554">exampl=
e ocaml-yaml run</a></li>
</ul></li>
</ul>

<p>
This should be considered fairly experimental as GH Actions is so new.  If =
you do use it, then consider <a href=3D"https://github.com/avsm/setup-ocaml=
/issues/4">updating this issue with your usage</a>.  It does not current su=
pporting caching yet, but is pretty fast to bootstrap (~4minutes).
</p>

<p>
It also doesn't have any higher level purpose other than to set up an opam =
environment, since most of the additional functionality such as revdeps tes=
ting is planned for addition to the <a href=3D"https://discuss.ocaml.org/t/=
ann-ocurrent-0-1-ci-cd-pipeline-edsl/4742/2">ocurrent DSL</a>.   Neverthele=
ss, this GH feature will hopefully be useful for smaller projects without a=
 lot of computational requirements.   Let me know how it goes!
</p>

<p>
Windows is currently supported through @fdopen's excellent fork that uses C=
ygwin.   As Windows support is being mainlined into opam itself at the mome=
nt, I'm hoping that we will gradually move over to that.  That should event=
ually remove the need for two separate opam-repositories, so I won't be add=
ing any features that are Linux or macOS-specific and do not work on the Cy=
gwin version.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgbb4ec17" class=3D"outline-2">
<h2 id=3D"6">OCurrent 0.1 (CI/CD pipeline eDSL)</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ocurrent-0-1-ci-cd-pipe=
line-edsl/4742/1">https://discuss.ocaml.org/t/ann-ocurrent-0-1-ci-cd-pipeli=
ne-edsl/4742/1</a>
</p>
</div>

<div id=3D"outline-container-orgc382f8c" class=3D"outline-3">
<h3 id=3D"orgc382f8c">Thomas Leonard announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc382f8c">
<p>
<a href=3D"https://github.com/ocurrent/ocurrent">OCurrent</a> 0.1 has just =
been released to opam-repository.
</p>

<p>
OCurrent is an OCaml eDSL intended for writing build/test/deploy pipelines.=
 It is being used as the engine for <a href=3D"https://github.com/ocurrent/=
ocaml-ci/">ocaml-ci</a> and the <a href=3D"https://github.com/ocurrent/dock=
er-base-images">docker-base-images</a> builder (used to build the OCaml Doc=
ker images, such as <code>ocurrent/opam:alpine-3.10-ocaml-4.08</code>). Oth=
er good uses might be building and redeploying a Docker service or a uniker=
nel whenever its source repository changes. It can be run locally as a sing=
le Unix process.
</p>

<p>
An OCurrent pipeline is written as an OCaml program, but the OCurrent engin=
e ensures that it is kept up-to-date by re-running stages when their inputs=
 change. A web UI is available so you can view your pipeline and see its cu=
rrent state.
</p>

<p>
OCurrent can statically analyse the pipelines before they have run, allowin=
g it to run steps in parallel automatically and to display the whole pipeli=
ne. It does this using a light-weight alternative to arrows, which doesn't =
require programming in an awkward point-free style. See
<a href=3D"https://roscidus.com/blog/blog/2019/11/14/cicd-pipelines/">CI/CD=
 Pipelines: Monad, Arrow or Dart?</a> for more about that.
</p>

<p>
The basic functionality can be extended using "plugins" (just normal OCaml =
libraries). Plugins are available for interacting with Docker, Git, GitHub =
and Slack. These are in separate packages (e.g. <code>current_github</code>=
) to avoid having the base package pull in too many dependencies).
</p>

<p>
There is also an optional Cap'n Proto RPC interface, in the <code>current_r=
pc</code> opam package. This is used, for example, by <a href=3D"https://gi=
thub.com/ocurrent/citty">citty</a> to provide a TTY interface to ocaml-ci.
</p>

<p>
<a href=3D"https://github.com/ocurrent/ocurrent/wiki">The OCurrent wiki</a>=
 contains examples, and documentation on the various plugins.
</p>

<p>
Here's an example pipeline (from the base image builder):
</p>


<div class=3D"figure">
<p><img src=3D"https://roscidus.com/blog/images/cicd/docker-base-images-thu=
mb.png" alt=3D"docker-base-images-thumb.png" />
</p>
</div>
</div>
</div>


<div id=3D"outline-container-orgbdfa9a2" class=3D"outline-3">
<h3 id=3D"orgbdfa9a2">Anil Madhavapeddy then added</h3>
<div class=3D"outline-text-3" id=3D"text-orgbdfa9a2">
<p>
For those curious about the relation to the existing CI used in opam-reposi=
tory, then it is no coincidence that @talex5 is the author of both :-)
</p>

<p>
This DSL is the next iteration of the <a href=3D"https://github.com/moby/da=
takit">datakit-ci</a>, but specialised to be faster and simpler for extendi=
ng with OCaml and more complex workflows that our OCaml Platform tools need=
 these days (like ocamlformat linting, or dune expect promotion, or odoc cr=
oss-referenced doc generation).  We are planning a smooth migration next ye=
ar over to the new system, but wanted to release this early to show you som=
e of the pieces going into this new iteration.  I am particularly excited a=
bout the new tty-based interface that saves an awful lot of clicking around=
 on web UIs for CI results&#x2026;
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgf26e58f" class=3D"outline-2">
<h2 id=3D"7">New pages for OCaml API</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/new-pages-for-ocaml-api/472=
0/13">https://discuss.ocaml.org/t/new-pages-for-ocaml-api/4720/13</a>
</p>
</div>

<div id=3D"outline-container-org73238c6" class=3D"outline-3">
<h3 id=3D"org73238c6">Continuing this thread, sanette announced</h3>
<div class=3D"outline-text-3" id=3D"text-org73238c6">
<p>
I have uploaded a new version (same link <a href=3D"https://sanette.github.=
io/ocaml-api/">https://sanette.github.io/ocaml-api/</a>)
</p>
<ul class=3D"org-ul">
<li>background color for links in the TOC @Maelan</li>
<li>more indentation for value descriptions @Maelan,  @grayswandyr</li>
<li>word wrapping long <code>&lt;pre&gt;</code> codes @grayswandyr</li>
<li>type table: remove <code>(*</code> and <code>*)</code>, give more space=
 to code wrt comments, diminish comment's color @grayswandyr</li>
</ul>

<p>
searching is not ready yet&#x2026; please wait
suggestions for dark theme welcome
</p>
</div>
</div>


<div id=3D"outline-container-orgc98a45b" class=3D"outline-3">
<h3 id=3D"orgc98a45b">sanette later added</h3>
<div class=3D"outline-text-3" id=3D"text-orgc98a45b">
<p>
I have just uploaded a new version with a basic search engine.
</p>
<ul class=3D"org-ul">
<li>for each page, you can search values/modules</li>
<li>in the general index page, the search includes also the descriptions</l=
i>
<li>search results are ranked by relevance</li>
</ul>

<p>
the downside is that each page now comes with an index of about 570Kb in th=
e form of an index.js file. I'm kind of hoping that the browser will cache =
this, but I'm not sure. It would be maybe better to only load the index fil=
e on demand.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgddf2ff1" class=3D"outline-2">
<h2 id=3D"8">Irmin 2.0.0 release</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-irmin-2-0-0-release/474=
6/1">https://discuss.ocaml.org/t/ann-irmin-2-0-0-release/4746/1</a>
</p>
</div>

<div id=3D"outline-container-org3575072" class=3D"outline-3">
<h3 id=3D"org3575072">Thomas Gazagnaire announced</h3>
<div class=3D"outline-text-3" id=3D"text-org3575072">
<p>
On behalf of the Irmin development team, I am very happy to announce the re=
lease of Irmin 2.0.0, a major release of the Git-like distributed branching=
 and storage substrate that underpins <a href=3D"https://mirage.io/">Mirage=
OS</a>. We began the release process for all the components that make up Ir=
min <a href=3D"https://tarides.com/blog/2019-05-13-on-the-road-to-irmin-v2"=
>back in May 2019</a>, and there have been close to 1000 commits since Irmi=
n 1.4.0 released back in June 2018. To celebrate this milestone, we have a =
new logo and opened a dedicated website: <a href=3D"https://irmin.org/">irm=
in.org</a>.
</p>

<p>
More details here: <a href=3D"https://tarides.com/blog/2019-11-21-irmin-v2"=
>https://tarides.com/blog/2019-11-21-irmin-v2</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org0772aad" class=3D"outline-2">
<h2 id=3D"9">Tail cascade: a new indentation style for some OCaml construct=
s</h2>
<div class=3D"outline-text-2" id=3D"text-9">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/tail-cascade-a-new-indentat=
ion-style-for-some-ocaml-constructs/4736/1">https://discuss.ocaml.org/t/tai=
l-cascade-a-new-indentation-style-for-some-ocaml-constructs/4736/1</a>
</p>
</div>

<div id=3D"outline-container-org09e0c55" class=3D"outline-3">
<h3 id=3D"org09e0c55">gasche announced</h3>
<div class=3D"outline-text-3" id=3D"text-org09e0c55">
<p>
I recently decided to change my indentation style for certain OCaml constru=
cts in a way that I'm going to describe below. I just coined a name for thi=
s approach, "tail cascade". I'm creating this topic to convince everyone th=
at this is a cool idea you should adopt as well. Or at least tolerate it wh=
en you review other people's code.
</p>
</div>

<div id=3D"outline-container-org490268e" class=3D"outline-4">
<h4 id=3D"org490268e">Problem</h4>
<div class=3D"outline-text-4" id=3D"text-org490268e">
<p>
Programs that heavily use <code>match</code> often see a shift to the right=
 due to nested indentation.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">match</span> f=
oo <span style=3D"color: #a020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">Foo</span> -&g=
t; ...
| <span style=3D"color: #000000; background-color: #ffffff;">Bar</span> x -=
&gt;
  <span style=3D"color: #a020f0;">match</span> bar x <span style=3D"color: =
#a020f0;">with</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">FooBar</span=
> -&gt; ...
  | <span style=3D"color: #000000; background-color: #ffffff;">Blah</span> =
y -&gt;
    <span style=3D"color: #a020f0;">match</span> f y <span style=3D"color: =
#a020f0;">with</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">Some</span=
> z -&gt;
      ...
</pre>
</div>

<p>
Another problem with this style is that it suffers from the "dangling bar" =
issue: if you try to add a new case for one of the exterior <code>match</co=
de>, it is parsed as belonging to the innermost <code>match</code>. People =
have been recommending (rightly) to use <code>begin match .. end</code> for=
 all nested match constructs to avoid this issue.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">match</span> f=
oo <span style=3D"color: #a020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">Foo</span> -&g=
t; ...
| <span style=3D"color: #000000; background-color: #ffffff;">Bar</span> x -=
&gt;
  <span style=3D"color: #000000; font-weight: bold;">begin</span> <span sty=
le=3D"color: #a020f0;">match</span> bar x <span style=3D"color: #a020f0;">w=
ith</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">FooBar</span=
> -&gt; ...
  | <span style=3D"color: #000000; background-color: #ffffff;">Blah</span> =
y -&gt;
    <span style=3D"color: #000000; font-weight: bold;">begin</span> <span s=
tyle=3D"color: #a020f0;">match</span> f y <span style=3D"color: #a020f0;">w=
ith</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">None</span=
> -&gt; ...
    | <span style=3D"color: #000000; background-color: #ffffff;">Some</span=
> z -&gt;
      ...
    <span style=3D"color: #000000; font-weight: bold;">end</span>
  <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;"=
>now this is safe </span><span style=3D"color: #b22222;">*)</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">FooBlah</spa=
n> -&gt; ...
  <span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
But still the unpleasant shift to the right remains.
</p>
</div>
</div>

<div id=3D"outline-container-orgb802bf4" class=3D"outline-4">
<h4 id=3D"orgb802bf4">Proposal: cascading tail case</h4>
<div class=3D"outline-text-4" id=3D"text-orgb802bf4">
<p>
We should in general use <code>begin match .. end</code> for nested matches=
. But the "cascading tail case" proposal is to <b>not</b> do it for the <b>=
last</b> case of the pattern-matching, and instead <b>de-indent</b> (dedent=
) this last case &#x2013; tail case.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">match</span> f=
oo <span style=3D"color: #a020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">Foo</span> -&g=
t; ...
| <span style=3D"color: #000000; background-color: #ffffff;">Bar</span> x -=
&gt;
<span style=3D"color: #a020f0;">match</span> bar x <span style=3D"color: #a=
020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">FooBar</span> =
-&gt; ...
| <span style=3D"color: #000000; background-color: #ffffff;">Blah</span> y =
-&gt;
<span style=3D"color: #a020f0;">match</span> f y <span style=3D"color: #a02=
0f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">None</span> -&=
gt; ...
| <span style=3D"color: #000000; background-color: #ffffff;">Some</span> z =
-&gt;
...
</pre>
</div>

<p>
Note that with this indentation style, the "dangling match" problem is also=
 avoided: unlike with the original, non <code>end</code>-protected program,=
 the indentation makes it immediately obvious that any further case will be=
 attached to the innermost match, and not any of the exterior ones.
</p>

<p>
A program using this "cascading tail" approach should always use <code>begi=
n match .. end</code> for nested matches, except for a nested match returne=
d within the last branch of an outer match, which can (optionally) be deden=
ted instead.
</p>

<p>
The choice to dedent the last case corresponds to encouraging a sequential =
reading of the program, where the other cases are "auxiliary cases" checked=
 first and dispatched quickly, and the last case is the "main part" where t=
he "rest" of the logic of the program lies. This pattern is typical of nest=
ed pattern-matching on the <code>option</code> or <code>result</code> type =
for example:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">match</span> f=
oo x <span style=3D"color: #a020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">Error</span> e=
rr -&gt;
  fail_foo_error err
| <span style=3D"color: #000000; background-color: #ffffff;">Ok</span> y -&=
gt;
<span style=3D"color: #a020f0;">match</span> bar y <span style=3D"color: #a=
020f0;">with</span>
| <span style=3D"color: #000000; background-color: #ffffff;">Error</span> e=
rr -&gt;
  fail_bar_error err
| <span style=3D"color: #000000; background-color: #ffffff;">Ok</span> () -=
&gt;
...
</pre>
</div>

<p>
Remark: it is <b>not</b> always the case that the <code>Error</code> constr=
uctor is the auxiliary case, and the <code>Ok</code> constructor is the mai=
n case; sometimes we implement fallback logic like "if <code>foo</code> wor=
k then we are good, but otherwise we have to do this and that", and the err=
or case is the most salient (and longer) part of the program logic. I would=
 recommend being mindful, when you write code, of whether there is a most c=
onvincing way to "sequentialize" it (distinguish auxiliary and main/tail ca=
se), and avoid using cascading tails when there is no clear sequentializati=
on choice.
</p>

<p>
Remark: some cases of tail cascades can be linearized by using a good defin=
ition of "bind" and a monadic style. This tends to be very limited however:=
 it fixes one of the constructors to always be the "tail" constructor (alwa=
ys <code>Some</code>, always <code>Ok</code>), and it only works when the h=
andling of the other constructors is very homogeneous (typically: return di=
rectly). In real code, many situations occur where the monadic style doesn'=
t fit the problem, but tail cascade does help writing a readable program.
</p>
</div>
</div>


<div id=3D"outline-container-org86e8c67" class=3D"outline-4">
<h4 id=3D"org86e8c67">Generalization: tail cascade</h4>
<div class=3D"outline-text-4" id=3D"text-org86e8c67">
<p>
While I have never seen cascading tail cases in real-world OCaml code befor=
e (I'm happy to be given pointers; I think that the idea is not new, but I'=
m not aware of previous attempts to give it a catchy name and spread the ca=
scade love), this is in fact a new (to me) instance of a common technique t=
hat is used for other OCaml constructs:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">if</span> foo =
x <span style=3D"color: #a020f0;">then</span> ...
<span style=3D"color: #a020f0;">else</span> <span style=3D"color: #a020f0;"=
>if</span> bar x <span style=3D"color: #a020f0;">then</span> ...
<span style=3D"color: #a020f0;">else</span> ... <span style=3D"color: #b222=
22;">(* </span><span style=3D"color: #b22222;">this `tail else` was dedente=
d </span><span style=3D"color: #b22222;">*)</span>

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">x</span> =3D foo <span style=3D"color: #000000; font-w=
eight: bold;">in</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">y</span> =3D bar <span style=3D"color: #000000; font-w=
eight: bold;">in</span> <span style=3D"color: #b22222;">(* </span><span sty=
le=3D"color: #b22222;">this `tail let` was dedented </span><span style=3D"c=
olor: #b22222;">*)</span>
...            <span style=3D"color: #b22222;">(* </span><span style=3D"col=
or: #b22222;">and the rest as well </span><span style=3D"color: #b22222;">*=
)</span>

bind foo <span style=3D"color: #a52a2a;">@@</span> <span style=3D"color: #a=
020f0;">fun</span> <span style=3D"color: #a0522d;">x</span> -&gt;
bind bar <span style=3D"color: #a52a2a;">@@</span> <span style=3D"color: #a=
020f0;">fun</span> <span style=3D"color: #a0522d;">y</span> -&gt; <span sty=
le=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">this "tail=
 function body" was dedented </span><span style=3D"color: #b22222;">*)</spa=
n>
...                  <span style=3D"color: #b22222;">(* </span><span style=
=3D"color: #b22222;">and the rest as well </span><span style=3D"color: #b22=
222;">*)</span>
</pre>
</div>

<p>
I would call "tail cascade" (or maybe: "cascading tail") the idea of dedent=
ing the "rest" of an OCaml expression (compared to a strict tree-nesting-ba=
sed approach) when it morally describes the "rest" of the expression. I use=
 the name "tail" because those expressions are almost always in tail-positi=
on in the sense of tail-calls.
</p>

<p>
This general approach legitimizes some styles that I have seen, and sometim=
es used, in the wild, while at the same time considering that I may have be=
en doing something improper, for example:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #a020f0;">if</span> foo =
<span style=3D"color: #a020f0;">then</span> blah <span style=3D"color: #a02=
0f0;">else</span>
... <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">dedented </span><span style=3D"color: #b22222;">*)</span>


<span style=3D"color: #228b22;">Fun.</span>protect
  <span style=3D"color: #008b8b;">~finally</span>:(...)
<span style=3D"color: #a52a2a;">@@</span> <span style=3D"color: #a020f0;">f=
un</span> () -&gt;
... <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">dedented </span><span style=3D"color: #b22222;">*)</span>


<span style=3D"color: #a020f0;">try</span> simple_approach <span style=3D"c=
olor: #a020f0;">with</span> exn -&gt;
... <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">dedented </span><span style=3D"color: #b22222;">*)</span>


1 +
2 + <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">dedented </span><span style=3D"color: #b22222;">*)</span>
... <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">dedented </span><span style=3D"color: #b22222;">*)</span>
</pre>
</div>

<p>
Remark: after a <code>then</code> or <code>else</code>, many people share t=
he reasonable view that any expression containing imperative constructs (<c=
ode>foo; bar</code>) should be enclosed in a <code>begin .. end</code> bloc=
k to avoid surprising-precedence issue. Just as for nested <code>match</cod=
e>, this recommendation should be lifted for "tail else" constructs.
</p>

<p>
Remark: The last example is a case where the dedented expressions are <b>no=
t</b> in tail-position from a runtime-evaluation point of view. I am not su=
re as whether the two notions should be made to coincide more strongly, but=
 in any case I'm not fond of the style in this particular example, I prefer=
 to move the infix operator to the beginning of the next line instead, foll=
owing a different style and justification.
</p>

<p>
The possibility this "cascading tail" style today crucially relies on the n=
esting properties of open-ended syntactic constructs, notably <code>let</co=
de> (commonly cascaded), and now <code>match</code> and <code>if ... else</=
code>. Proposals to transition to a syntax where <code>match</code> and <co=
de>else</code> are forced to take a closing marker are incompatible with th=
e cascading style. I have not made my mind on whether this should be consid=
ered a blocker for those proposals, but at least it shows that having the o=
pen-ended form available has value for certain programs.
</p>
</div>
</div>
</div>


<div id=3D"outline-container-org985e6f6" class=3D"outline-3">
<h3 id=3D"org985e6f6">Louis Gesbert then said</h3>
<div class=3D"outline-text-3" id=3D"text-org985e6f6">
<p>
@gasche I prototyped a dedicated option in <code>ocp-indent</code>, if you'=
re interested in trying it out :)
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam pin git+https://github.com/OCamlPro/ocp-i=
ndent#match-tail-cascade
<span style=3D"color: #483d8b;">echo</span> <span style=3D"color: #8b2252;"=
>"match_tail_cascade=3Dtrue"</span> &gt;&gt; ~/.ocp-indent
</pre>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-orga562926" class=3D"outline-2">
<h2 id=3D"orga562926">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-orga562926">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--==-=-=--

--=-=-=--

--===-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEE6lXof/BsSVW56ZmGBA0KO07S5ccFAl3c42EACgkQBA0KO07S
5cfB9gf/czKc6TFbofxgE9nIYYCFKHj/ugAahe9Tj3tz9r4XsjOui8PmVJVkR1Pz
vePH8oPCB72YPB8kUUYmCSdfy/g+VgujiDa1FDbJcMo+lFcDFtouEZsIS/FI31hR
4LehomvbjLb/x6Yd10DUarCptHoHnBXssg3FKkeP08GJHiO+qPoQTu/QEy4nASET
DYy5zYhZ+XEheArpV52gFr2yUFEMXRhbLNVp+g4retI9WAwsBH5loHnNoQeOXAyq
3I4sYxQH2IxPHoM1k1NjDD2B0Ktj4T3fslfbSrhDDqOEscQOlorAFO0z522bMmB4
XW8SKn5MLDQEM4lWh+NCzIJA5DnOXw==
=Xjob
-----END PGP SIGNATURE-----
--===-=-=--
