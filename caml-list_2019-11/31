Return-Path: <ceastlund@janestreet.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 8C80B7F332
	for <caml-list@sympa.inria.fr>; Wed, 27 Nov 2019 22:52:24 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=ceastlund@janestreet.com; spf=Pass smtp.mailfrom=ceastlund@janestreet.com; spf=None smtp.helo=postmaster@mxout5.mail.janestreet.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  ceastlund@janestreet.com) identity=pra;
  client-ip=64.215.233.18;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ceastlund@janestreet.com";
  x-sender="ceastlund@janestreet.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  ceastlund@janestreet.com designates 64.215.233.18 as
  permitted sender) identity=mailfrom; client-ip=64.215.233.18;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ceastlund@janestreet.com";
  x-sender="ceastlund@janestreet.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mxout5.mail.janestreet.com) identity=helo;
  client-ip=64.215.233.18;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ceastlund@janestreet.com";
  x-sender="postmaster@mxout5.mail.janestreet.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AKG7l1hdMTm1/G+JoIsUt9GPmlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcSzZx7h7PlgxGXEQZ/co6odzbaP6Oa5BzFLuMvY+Fk5M7V0Hycfjs?=
 =?us-ascii?q?sXmwFySOWkMmbcaMDQUiohAc5ZX0Vk9XzoeWJcGcL5ekGA6ibqtW1aFRrwLxd6?=
 =?us-ascii?q?KfroEYDOkcu3y/qy+5rOaAlUmTaxe7x/IAi4oAnLq8UbgItvJqksxhbJv3dDZv?=
 =?us-ascii?q?hby35vKV+PhRj3+92+/IRk8yReuvIh89BPXKDndKkmTrJWESorPXkt6MLkqRfM?=
 =?us-ascii?q?Qw2P5mABUmoNiRpHHxLF7BDhUZjvtCbxq/dw1zObPc3ySrA0RCii4qJ2QxLmlC?=
 =?us-ascii?q?sLKzg0+3zMh8dukKxUvg6upx1nw47Vfo6VMuZ+frjAdt8eXGZNQ9pdWzBEDo66?=
 =?us-ascii?q?coABDfcOPfxAoobyqVsBrxuwCwevCu3y1DFHmmT70rcm3+k7CwzKwBAsEtAIvX?=
 =?us-ascii?q?/JrNv1LqASUeWtwaTW1zrDdfdW0iry5ofSaRAhvfWMXa92ccXM1EIiEB/KgUuK?=
 =?us-ascii?q?poz+IzOV0vkNs26G4Od7V+KgkWgnpB9qojiz3McjlJfGhp4Pxl/Y8iV5xZ84KN?=
 =?us-ascii?q?ulQ0B1Zt6kFYFftyCcN4ZuQ8MiRXtouCcgxbEct567ZjAGyJsmxx7Da/yHbpOH?=
 =?us-ascii?q?7gj/W+aWJDd1gm9udrGnhxuq8EWtxffwWtep3FtKtCZJjNfBu34X2xDO6cWLUu?=
 =?us-ascii?q?Vx8lul1DqV1A3e6vtILV4pmaffMZIt37o9m54VvE/eBCH5gl/2g7WTdkg8+uin?=
 =?us-ascii?q?9eDnYrL+q5+ZOI50jRz+Mrgul8ClBOQ3KAkOX2yB9eS+zrLj+1P2QK5Wjv0sjK?=
 =?us-ascii?q?bWrozaKd4Hqa6+Bg9Zyocj6xChADe6yNkVnHYKIEhbdB6aj4XlIU/CLf72APul?=
 =?us-ascii?q?nlihky9nx/XcMb3gBpXNIGLDkLDkfbtl90FT1hA8zctD55JQF7EBJu/8V1TztN?=
 =?us-ascii?q?PCCB82LRe0w/r9CNpjyIweRXiDDbOeMKPXqVOI/P4gI/GQZI8JvzbwM+Qq6OTr?=
 =?us-ascii?q?jX89gFMdeaip3YALaH2jBfRnI0CZYWL2jdsbEGcKuBA+TO3wh1GYXz5TfSX6Y6?=
 =?us-ascii?q?VpyCsyDg2hDJz0foexnL2Mxm/vEIdfYGtBC0vKCXD0a4SJQd8NbjiTK4lviGpX?=
 =?us-ascii?q?e6KmTtoK3Auq/CLz0KZjM+zYsnkTuJv4yNxo4eH7lxg0+CdoFcmQzyeGSGQizT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6UtxqUATYUCtcMMaR8zMNvn98I/DtnzXgzbedLQFgSk?=
 =?us-ascii?q?S9OrGi0rQ98thdQJZhQkQonwvlX4xyOvRoQtufmTHpVtrPDe1n78PNpnxnvakq?=
 =?us-ascii?q?Imigt+G5YdBSidnqd6sjPrKcvJnkGezfb4cLQbwTKQsmKKzG7IvkheXRVsS6jI?=
 =?us-ascii?q?QTYUYU6E9dk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkCgAg795dhxLp10BlFggBCxyCAIMKV?=
 =?us-ascii?q?TIqhCuBHI1lghGZM4F6CQEDAQwjDAEBhEACggAcBwEENgQNAhABAQQBAQECAQI?=
 =?us-ascii?q?DBAETAQEBCA0JCCmFPgyCOykBgm4BAQECARIRBBkBATcBDwsEBzcCAiISAQUBH?=
 =?us-ascii?q?AYTIoMAAYJXIA+mbIEDPYslfzOCfgEBBYYSgT8JEoElhRqGexqBQT+BR4JdPoJ?=
 =?us-ascii?q?LGQKCEIJjgl6NNol3lxCCN4Y5ZI45G4MzlmyXBJFxDyOBHC0NgWpNI1AxBoI1C?=
 =?us-ascii?q?UcRFIZIGoNZgT6BIYgSIzOOQwEB?=
X-IPAS-Result: =?us-ascii?q?A0AkCgAg795dhxLp10BlFggBCxyCAIMKVTIqhCuBHI1lghG?=
 =?us-ascii?q?ZM4F6CQEDAQwjDAEBhEACggAcBwEENgQNAhABAQQBAQECAQIDBAETAQEBCA0JC?=
 =?us-ascii?q?CmFPgyCOykBgm4BAQECARIRBBkBATcBDwsEBzcCAiISAQUBHAYTIoMAAYJXIA+?=
 =?us-ascii?q?mbIEDPYslfzOCfgEBBYYSgT8JEoElhRqGexqBQT+BR4JdPoJLGQKCEIJjgl6NN?=
 =?us-ascii?q?ol3lxCCN4Y5ZI45G4MzlmyXBJFxDyOBHC0NgWpNI1AxBoI1CUcRFIZIGoNZgT6?=
 =?us-ascii?q?BIYgSIzOOQwEB?=
X-IronPort-AV: E=Sophos;i="5.69,251,1571695200"; 
   d="scan'208,217";a="413845904"
X-MGA-submission: =?us-ascii?q?MDGXiO8dJ+pB1yn8Wd2Xz+MnbmMSr0QyqDl61A?=
 =?us-ascii?q?onbyC0M/9tBv7rmT8ujPE04K7vkrNBGb0CDu+4w+2OgR3TwHZjV3EfP9?=
 =?us-ascii?q?aic/KfKM3fSlDRcgk+1xhGX0uh1r2rZwFn1yMH3SEvX3lSjEBxohmdXc?=
 =?us-ascii?q?9PtQLUt9XjRS2zUa4XoJeG9Q=3D=3D?=
Received: from mxout5.mail.janestreet.com ([64.215.233.18])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2019 22:52:23 +0100
X-JS-Received: from [30.40.81.8] (helo=tot-qpr-mailcore1)
	by mxout5.mail.janestreet.com with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.92.2)
	(envelope-from <ceastlund@janestreet.com>)
	id 1ia5EU-0002SC-GS
	for caml-list@inria.fr; Wed, 27 Nov 2019 16:52:22 -0500
X-JS-Flow: external
X-JS-Received: by tot-qpr-mailcore1 with ocaml/mailcore/main_production (148e96e5810f)
 	(envelope-from <ceastlund@janestreet.com>)
 	id Bd3vAW-ELbi4A-M3; 2019-11-27 16:52:22.431154-05:00
X-JS-Scanner-attachment: No attachments
X-JS-Scanner-esets: Not scanned (internal mail)
Received: from mail-yb1-f199.google.com ([209.85.219.199])
 	by mxgoog2.mail.janestreet.com with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
 	(Exim 4.92.2)
 	id 1ia5EU-0001w1-Bm
 	for caml-list@inria.fr; Wed, 27 Nov 2019 16:52:22 -0500
Received: by mail-yb1-f199.google.com with SMTP id j66so16534108ybg.8
         for <caml-list@inria.fr>; Wed, 27 Nov 2019 13:52:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
         d=janestreet.com; s=google;
         h=mime-version:references:in-reply-to:from:date:message-id:subject:to
          :cc;
         bh=0eTTUCmbU6jN5iiKfyGdruxzkvPaf4AoP9KFIu4rMQM=;
         b=OiDDUUYbnGkocF2efNJFqAqyUeBHhoRi7ltfGlW2T72K6lKTitIB+ibIjzxojdQesj
          qkpBZgoDfuEyuOJB6A/m+x1lFfRbIsmmNa8/9Dv532Ay2FWYox6bpnZYr0yH0l4Dxs0W
          z3NvXm5BN7Vvuv08HwTfhCx/Ls6OTWTft7i20=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
         d=1e100.net; s=20161025;
         h=x-gm-message-state:mime-version:references:in-reply-to:from:date
          :message-id:subject:to:cc;
         bh=0eTTUCmbU6jN5iiKfyGdruxzkvPaf4AoP9KFIu4rMQM=;
         b=clF+GAXNGUpHyNF5BjtKtuzzgSJrW8bqRd+DQfSUIZvIsGL89XAZ49kAbjA9JgW10Q
          Cd/i689iJQw1Zx5lD+qxd3tETX1KOMsR49dm/OQCJbETOlkoSlNqkgF1VH61CXtOqxEo
          v0Ucmz1hnLjK6xdLroA/ZMTwKYYxMSB/pdWR4kApdhlSjTBFXcHeilZN5icR+bECkayj
          XFSTeH4u2izXh2EHFWvHThAGchdtTs9zmGLBWYz+lbxFU4uNcV301WAAz9WFzpTXBL3M
          rAIbEmUhxd0huo4PeP7wjyFzShD/+GSJca7ETAFVKYEIZcyMDT0/W7aaZ5vBw5gYJgtN
          q8Yw==
X-Gm-Message-State: APjAAAVrpQGdxlxbrjoGW1nX1tQICFSzC6V865i7DJFzAuKi1aM4uYAE
 	6ib9FK6LVpl+Ycpl0fdfSWEe3koiHja1G0AEaq+9VFf8Sd2zYRpxR/LpV11vXQS9bdKlgUbH7n5
 	syAeIkRH3UH0woX59RbKa5oEywA==
X-Received: by 2002:a25:ba8a:: with SMTP id s10mr31980019ybg.346.1574891541961;
         Wed, 27 Nov 2019 13:52:21 -0800 (PST)
X-Google-Smtp-Source: APXvYqzJbfT7br8ukISdASKW5FCBWgUyNhlCtsEoEatAkdP5X0ATv1qKoLFv2v+lmcAdo9s0PDJb5ISw71JLH9jjfCw=
X-Received: by 2002:a25:ba8a:: with SMTP id s10mr31980002ybg.346.1574891541513;
  Wed, 27 Nov 2019 13:52:21 -0800 (PST)
MIME-Version: 1.0
References: <a025b23b-a84d-164f-7fb9-06a5ee083753@inria.fr>
In-Reply-To: <a025b23b-a84d-164f-7fb9-06a5ee083753@inria.fr>
From: Carl Eastlund <ceastlund@janestreet.com>
Date: Wed, 27 Nov 2019 16:51:46 -0500
Message-ID: <CALyFioQiQc1LCpWA9N3p6JHESRH+7AY+0sZxC2G8o42WbW5xtg@mail.gmail.com>
To: =?UTF-8?Q?Fran=C3=A7ois_Pottier?= <francois.pottier@inria.fr>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="000000000000e4699a05985b0225"
X-JS-Exim-Data-Received: 2019-11-27 16:52:22-0500
X-JS-Processed-by: mailcore
Subject: Re: [Caml-list] zarith: how to pick a random integer?

--000000000000e4699a05985b0225
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

See the Make_random functor in the janestreet Bigint library, which is
built on top of zarith. (It's a functor to produce random distributions
based on both Random.State.t and Base_quickcheck.Generator.t; the functor
itself is not exposed.)

https://github.com/janestreet/bignum/blob/master/bigint/src/bigint.ml

In short, we generate 30-bit chunks of randomness until we have at least
enough bits for our range. We combine those into a number. Usually, we just
modulo that by the range and return it. But to preserve fairness, we first
have to check if the number is in the last fraction-of-range part of the N
bits, and if so retry from scratch. The odds of retry are always less than
50%, so retrying is never too bad.

This is the same trick that Random.int does, but with an unbounded number
of bits instead of a fixed number of bits.

On Wed, Nov 27, 2019 at 4:31 PM Fran=C3=A7ois Pottier <francois.pottier@inr=
ia.fr>
wrote:

>
> Hello,
>
> I am using zarith and would like to pick a random integer
> comprised between 0 and some bound. I would like a function
> Z.random of type Z.t -> Z.t, but this function seems to be
> missing, and I am not sure how to program it in an efficient
> and correct way. Any suggestions would be welcome. Thanks!
>
> --
> Fran=C3=A7ois Pottier
> francois.pottier@inria.fr
> http://gallium.inria.fr/~fpottier/
>


--=20
Carl Eastlund

--000000000000e4699a05985b0225
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">See the Make_random functor in the janestreet=C2=A0Bigint =
library, which is built on top of zarith. (It&#39;s a functor to produce ra=
ndom distributions based on both Random.State.t and Base_quickcheck.Generat=
or.t; the functor itself is not exposed.)<div><br></div><div><a href=3D"htt=
ps://github.com/janestreet/bignum/blob/master/bigint/src/bigint.ml" target=
=3D"_blank">https://github.com/janestreet/bignum/blob/master/bigint/src/big=
int.ml</a></div><div><br></div><div>In short, we generate 30-bit chunks of =
randomness until we have at least enough bits for our range. We combine tho=
se into a number. Usually, we just modulo that by the range and return it. =
But to preserve fairness, we first have to check if the number is in the la=
st fraction-of-range part of the N bits, and if so retry from scratch. The =
odds of retry are always less than 50%, so retrying is never too bad.</div>=
<div><br></div><div>This is the same trick that Random.int does, but with a=
n unbounded number of bits instead of a fixed number of bits.</div></div><b=
r><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Wed, =
Nov 27, 2019 at 4:31 PM Fran=C3=A7ois Pottier &lt;<a href=3D"mailto:francoi=
s.pottier@inria.fr" target=3D"_blank">francois.pottier@inria.fr</a>&gt; wro=
te:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px =
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><br>
Hello,<br>
<br>
I am using zarith and would like to pick a random integer<br>
comprised between 0 and some bound. I would like a function<br>
Z.random of type Z.t -&gt; Z.t, but this function seems to be<br>
missing, and I am not sure how to program it in an efficient<br>
and correct way. Any suggestions would be welcome. Thanks!<br>
<br>
-- <br>
Fran=C3=A7ois Pottier<br>
<a href=3D"mailto:francois.pottier@inria.fr" target=3D"_blank">francois.pot=
tier@inria.fr</a><br>
<a href=3D"http://gallium.inria.fr/~fpottier/" rel=3D"noreferrer" target=3D=
"_blank">http://gallium.inria.fr/~fpottier/</a><br>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
><div dir=3D"ltr"><div>Carl Eastlund<br></div></div></div>

--000000000000e4699a05985b0225--
