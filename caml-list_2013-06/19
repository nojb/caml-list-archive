Return-Path: <lambda.q.q@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 6173C7EE6A
	for <caml-list@sympa.inria.fr>; Tue,  4 Jun 2013 06:06:49 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  lambda.q.q@gmail.com) identity=pra; client-ip=209.85.217.170;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="lambda.q.q@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  lambda.q.q@gmail.com designates 209.85.217.170 as permitted
  sender) identity=mailfrom; client-ip=209.85.217.170;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="lambda.q.q@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lb0-f170.google.com) identity=helo;
  client-ip=209.85.217.170;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="postmaster@mail-lb0-f170.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Au4AAONmrVHRVdmqlGdsb2JhbABZw0QWDgEBAQEHCwsJEiqCURMGATkDDQUmNAEkAQUBiDADDwSbWIJ+j0eFJicNiQYBBQyPN4NCA4kajiSPWz+BXYJd
X-IPAS-Result: Au4AAONmrVHRVdmqlGdsb2JhbABZw0QWDgEBAQEHCwsJEiqCURMGATkDDQUmNAEkAQUBiDADDwSbWIJ+j0eFJicNiQYBBQyPN4NCA4kajiSPWz+BXYJd
X-IronPort-AV: E=Sophos;i="4.87,797,1363129200"; 
   d="scan'208";a="20168653"
Received: from mail-lb0-f170.google.com ([209.85.217.170])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Jun 2013 06:06:48 +0200
Received: by mail-lb0-f170.google.com with SMTP id t11so181479lbd.1
        for <caml-list@inria.fr>; Mon, 03 Jun 2013 21:06:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:from:to:subject:date:message-id:mime-version:content-type;
        bh=CMnuizsyLs6P1tYLGlEWBALxN0v+WX/LdyeOC0uLrWg=;
        b=aDsGyHI6hhSFm3WNyivIJBtVYAjctI/wKX6Rm8qXZJZcgFSN3+o71C4po+4rVd8P7e
         c0PZkMR14BSFS2mT1BlL8mUrBg/ZRlH2Gu1Hjfk4dHZ+4w+/E/k8yDWC57iQixVWxsaI
         c716BABP225kYWOAIWjCB5qDdgWSOAGIHLQk+3V3JPKiJ0qY/cD5ApsP5kMrKq+CIlww
         uQd2upEA0VWF8PaP+D6sXiFP8pIoDqUFRju1+GesRXUKQsxe8cLKiKPT/Axg/tpee9MT
         ZAH9zXwjSIG28+0nUTHjvDOPzsMC4q5si8s5T4TRuvFVa1+ATP58L9kyTKcbNzCqjtH6
         2MSA==
X-Received: by 10.152.26.137 with SMTP id l9mr12339039lag.2.1370318808070;
        Mon, 03 Jun 2013 21:06:48 -0700 (PDT)
Received: from golf.niidar.ru.niidar.ru ([109.188.125.224])
        by mx.google.com with ESMTPSA id a3sm18342385lbg.2.2013.06.03.21.06.46
        for <caml-list@inria.fr>
        (version=TLSv1.1 cipher=RC4-SHA bits=128/128);
        Mon, 03 Jun 2013 21:06:47 -0700 (PDT)
Sender: Ivan Gotovchits <lambda.q.q@gmail.com>
From: Ivan Gotovchits <ivg@ieee.org>
To: caml-list@inria.fr
Date: Tue, 04 Jun 2013 08:06:41 +0400
Message-ID: <87ehciseni.fsf@golf.niidar.ru>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Subject: [Caml-list] GADT and locally ADT


I'm trying to get a grasp of GADT with a simple example, in which I use subj as a
phantom type. With the following, purely synthetical types:

    type ro
    type rw

    type ('a,_) access =
        | Read : 'a -> ('a,ro) access
        | ReadWrite : 'a -> ('a,rw) access

next I define function 

    let f1 = function
      | ReadWrite (ch) -> ();;

    val f : ('a, rw) access -> unit = <fun>

That's ok, I understand, by intuition, that the argument of the function
shouldn't have both types at once: ('a,rw) access and ('a,ro) access. So
the matching is exhaustive. In accordance with it, compiler forbids the
following function:

     let f inp  = match inp with
       | ReadWrite (ch) -> ()
       | Read (ch) -> ();;

     Characters 57-66:
       | Read (ch) -> ();;
           ^^^^^^^^^
     Error: This pattern matches values of type ('a, ro) access
            but a pattern was expected which matches values of type
              ('a, rw) access

But, if I add a type annotation I can successfully delude the compiler
and it typechecks what he has recently considered illegal:

     let f (type t)  (inp: ('a,t) access)  = match inp with
       | ReadWrite (ch) -> ()
       | Read (ch) -> ();;
     
    val f : ('a, 'b) access -> unit = <fun>

Are there any logical explanation to this?

Thank in advance!


-- 
         (__) 
         (oo) 
   /------\/ 
  / |    ||   
 *  /\---/\ 
    ~~   ~~   
...."Have you mooed today?"...
