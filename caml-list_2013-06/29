Return-Path: <lambda.q.q@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id E34387EE25
	for <caml-list@sympa.inria.fr>; Tue,  4 Jun 2013 13:50:58 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  lambda.q.q@gmail.com) identity=pra; client-ip=209.85.215.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="lambda.q.q@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  lambda.q.q@gmail.com designates 209.85.215.52 as permitted
  sender) identity=mailfrom; client-ip=209.85.215.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="lambda.q.q@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-la0-f52.google.com) identity=helo;
  client-ip=209.85.215.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="lambda.q.q@gmail.com";
  x-sender="postmaster@mail-la0-f52.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArYAABXUrVHRVdc0jWdsb2JhbABZgznADBYOAQEBAQcLCwkSBiSCIwEBBAEnEwYBOAEDAQsBBQUhJQ8BBA0TAQUBIhOHewMJBgQInnyPR4U3Jw2JBgEFDIxAhjkDiRqMPoFmgSmKdIM+P4Fdgl0
X-IPAS-Result: ArYAABXUrVHRVdc0jWdsb2JhbABZgznADBYOAQEBAQcLCwkSBiSCIwEBBAEnEwYBOAEDAQsBBQUhJQ8BBA0TAQUBIhOHewMJBgQInnyPR4U3Jw2JBgEFDIxAhjkDiRqMPoFmgSmKdIM+P4Fdgl0
X-IronPort-AV: E=Sophos;i="4.87,799,1363129200"; 
   d="scan'208";a="16705103"
Received: from mail-la0-f52.google.com ([209.85.215.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Jun 2013 13:50:58 +0200
Received: by mail-la0-f52.google.com with SMTP id fo13so98671lab.25
        for <caml-list@inria.fr>; Tue, 04 Jun 2013 04:50:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:from:to:cc:subject:references:date:in-reply-to:message-id
         :user-agent:mime-version:content-type;
        bh=L9o1j/37RV7VfKfg80qD9Wzqw2dydYUedLq45JYedJY=;
        b=h0Ya+ykpQWOFIJZMYWvg8/H79TguLF7Owsm19RxCZclm/QRGQ7yKQ5QD9dwZmpnR05
         RdqS6LT6BjUKoqjGcSRVIx7KS7Veo8eWM4wPr5iLMRN/86O80m3Zu3r+tS3LNoIxrj5Q
         a2SenXKfbM5Cpbb/cuIVfoH8G7GhnSUa99Wiyi7B0mJ3WlZN4XoUcySR4TeRkzqqb2Dk
         AFIl8UDDB4NIkRmkOPdDUjlQSL5IqzyV43YQRSmD+Rolxmr56W++F/vpwth1gEIgQvoJ
         HZkrbqpCiGczuQaVKpZzbBXkjyi1sBr8Kerm+YFI6bct+Se+2DrsVRuLweB2IDtdiY26
         qD5w==
X-Received: by 10.112.140.69 with SMTP id re5mr12977587lbb.0.1370346657232;
        Tue, 04 Jun 2013 04:50:57 -0700 (PDT)
Received: from golf.niidar.ru.niidar.ru ([109.188.125.224])
        by mx.google.com with ESMTPSA id 9sm25028399lbz.16.2013.06.04.04.50.55
        for <multiple recipients>
        (version=TLSv1.1 cipher=RC4-SHA bits=128/128);
        Tue, 04 Jun 2013 04:50:56 -0700 (PDT)
Sender: Ivan Gotovchits <lambda.q.q@gmail.com>
From: Ivan Gotovchits <ivg@ieee.org>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml-list@inria.fr
References: <87ehciseni.fsf@golf.niidar.ru>
	<CAPFanBEau9FFNJAVF+9RyhfnbuLi+smcW3Hc6bk2BMxM3ysnnA@mail.gmail.com>
	<87a9n6s5jo.fsf@golf.niidar.ru>
	<CAPFanBE=Zs_tzNqaJ_2YMjoeH+ycc=O6SF2MAbW6y-kMbgB5aA@mail.gmail.com>
Date: Tue, 04 Jun 2013 15:50:45 +0400
In-Reply-To: <CAPFanBE=Zs_tzNqaJ_2YMjoeH+ycc=O6SF2MAbW6y-kMbgB5aA@mail.gmail.com>
	(Gabriel Scherer's message of "Tue, 4 Jun 2013 11:23:01 +0200")
Message-ID: <8761xurt62.fsf@golf.niidar.ru>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/23.2 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Subject: Re: [Caml-list] GADT and locally ADT

Gabriel Scherer <gabriel.scherer@gmail.com> writes:

> In expressions, type variables 'a 'b do not enforce polymorphism, they
> are merely name for types that will be inferred.
>   let f : 'a -> 'a = fun x -> x + 1
> is accepted. So your second example with ('a, 'b) does not enforce polymorphism.
>
> This is not in general a problem as if the inferred type is indeed a
> type variable, it will be generalized by the inference algorithm and
> therefore "turned into polymorphism" after type inference. It is
> problematic however for polymorphic recursive functions (this form of
> polymorphism would have to be "guessed" before the recursive
> definition is type-checked, and therefore requires an annotation), and
> for GADTs.
>
> There are two *distinct* notions used to enforce polymorphism:
> - polymorphic type variables as in
>     val f : 'a -> 'a
>   or
>     let f : 'a . 'a -> 'a = ...
>   (useful for polymorphic recursion)
> - local abstract types
>    let f (type t) : t -> t = ...
>    fun (type t) -> ...
>   (useful for GADTs)
>
> Local abstract types are documented in
> http://caml.inria.fr/pub/docs/manual-ocaml/manual021.html#toc80 . They
> are not type variable (they cannot be unified with anything, hence
> enforce polymorphism), but type "constructors" syntactically (like
> 'list' in ('a list), but without a parameter). We say that GADTs
> introduce equations and refine types; they can only refine local
> abstract types, not type variables. The refinement of GADT types is
> similar to what happen when you traverse a module abstraction, outside
> you know the abstract type M.t, and inside you know (type M.t = int).
>
> Due to this "implementation detail" of GADTs, the following code (that
> enforces polymorphism) would still fail to type-check:
>
>     let f : 'b . ('a, 'b) access -> unit = function
>       | ReadWrite ch -> ()
>       | Read ch -> ()
>
> while the following work
>
>     let f (type t) : ('a, t) access -> unit = function
>       | ReadWrite ch -> ()
>       | Read ch -> ()
>
> Finally, the syntax
>
>    let f : type t . ('a, t) acc -> unit = function ...
>
> is a merge of both ('a 'b . ...) and ((type t) ...): it provides a
> local type constructor, and enables polymorphic recursion. This is
> what you should use when you write recursive functions using GADTs.
>

Thanks for a very informative answer! I hope that I do understand this,
though practice will show.

Thanks again!


-- 
         (__) 
         (oo) 
   /------\/ 
  / |    ||   
 *  /\---/\ 
    ~~   ~~   
...."Have you mooed today?"...
