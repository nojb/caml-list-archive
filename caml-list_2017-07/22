Return-Path: <shayne.fletcher.50@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C47728018B
	for <caml-list@sympa.inria.fr>; Thu,  6 Jul 2017 08:52:14 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=shayne.fletcher.50@gmail.com; spf=Pass smtp.mailfrom=shayne.fletcher.50@gmail.com; spf=None smtp.helo=postmaster@mail-vk0-f46.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  shayne.fletcher.50@gmail.com) identity=pra;
  client-ip=209.85.213.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  shayne.fletcher.50@gmail.com designates 209.85.213.46 as
  permitted sender) identity=mailfrom; client-ip=209.85.213.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vk0-f46.google.com) identity=helo;
  client-ip=209.85.213.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="postmaster@mail-vk0-f46.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AE/yg/BGXT2mIGnTBkWFwo51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7zoMWwAkXT6L1XgUPTWs2DsrQf2rWQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbQhFgDiwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95TWCxPAo2y?=
 =?us-ascii?q?YYgBAfcfM+lEtITyvUcCoAGkCAWwGO/iyDlFjWL2060g1OQhFBnL0hEgH90UsH?=
 =?us-ascii?q?XUqsv6P7oSX+Cx0qbI0SnMb/NI1jfn9YPFdQshofGWUrNwd8re11MjFw3BjlqO?=
 =?us-ascii?q?tYzqIzOV2foXs2SB7+dsSfmii2Eiqw5rozivwt0ghZXOhoIQ013J8zhyzogyJd?=
 =?us-ascii?q?29UkF7YNikHYNItyGbL4t5XNsuQ3lpuCYi1LIKo4K7fC8SxJQ/xh7fc+KIf5KS?=
 =?us-ascii?q?4h39TumePC90hGl5eLKlhhay90egx+vhXce3yFZHtjRJnsXIu3wX1BHe6tKLRu?=
 =?us-ascii?q?Vg8kqvwzqC2AHe5+dZKk4uj6XbMYQuwrsom5oTr0vDGij2lV3zjKCMd0Uk/vGk?=
 =?us-ascii?q?6/rkYrn6v5OcOYB5hwDkPqQhncy/Bus4MgwQUGSB5eu807jj8VX4QLVMkPI2jr?=
 =?us-ascii?q?HUvI7GKckfvKK0AA9Y3pw95xqiATqqytsVkHgfIFJAYh2HjozpO1/UIPD/CPey?=
 =?us-ascii?q?m0+skDdxyPHGOL3uHI/BLnbHkLj/YbZy905cxxQpzdxF559YFqoMIP32WkDrtd?=
 =?us-ascii?q?zYCgU1PBCzw+biENl9zJ8RWXqTAq+FN6PfqUOH6fgqI+mIfYMVvDf9K+M55/P1?=
 =?us-ascii?q?ln84mVodfbGz0pcNaXC4GO5mI0SDbnb2jNcBCzRCgg1rfeXwj1vKdD9VfHWjF/?=
 =?us-ascii?q?Yt4zA9E4G3JYXKQI22nKaM0Tv9FZpTMDNoEFeJREzofpSCVr8ibC+OKc9siHRQ?=
 =?us-ascii?q?TrioWokskx+quRPxy7d9aLeM0iIdvJPnktNy4ruAxlkJ6TVoApHFgCm2RGZukz?=
 =?us-ascii?q?ZNHmdu0Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CIAwCf3V1Zhi7VVdFcHQEFAQsBGAEFA?=
 =?us-ascii?q?QsBhBGBEAeFH5otH41eiCWCESeFdQKDGQdBFgEBAQEBAQEBAQEBEgEBAQgLCwg?=
 =?us-ascii?q?oL4IzJAGCQAEBAQECASMEGQEbHQEDAQsGAwILAwoqAgIhAQERAQUBHAYTCIoOA?=
 =?us-ascii?q?QMNCBCSSJEaP4wKgWwYBQEcgwgFg2UKGScNVoMnAQEBAQEFAQEBAQEBGgIGEoE?=
 =?us-ascii?q?MggmIUYJXT4RXFoJLAQSBLAEBlX6HJDEIAQGBTYV6h1SEaoIMhUqDcYZXSIstN?=
 =?us-ascii?q?4dCFB+BFSYJgTJSI14aW4FXgjgPEAwZgWokNgGJAgEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CIAwCf3V1Zhi7VVdFcHQEFAQsBGAEFAQsBhBGBEAeFH5o?=
 =?us-ascii?q?tH41eiCWCESeFdQKDGQdBFgEBAQEBAQEBAQEBEgEBAQgLCwgoL4IzJAGCQAEBA?=
 =?us-ascii?q?QECASMEGQEbHQEDAQsGAwILAwoqAgIhAQERAQUBHAYTCIoOAQMNCBCSSJEaP4w?=
 =?us-ascii?q?KgWwYBQEcgwgFg2UKGScNVoMnAQEBAQEFAQEBAQEBGgIGEoEMggmIUYJXT4RXF?=
 =?us-ascii?q?oJLAQSBLAEBlX6HJDEIAQGBTYV6h1SEaoIMhUqDcYZXSIstN4dCFB+BFSYJgTJ?=
 =?us-ascii?q?SI14aW4FXgjgPEAwZgWokNgGJAgEBAQ?=
X-IronPort-AV: E=Sophos;i="5.40,315,1496095200"; 
   d="scan'208,217";a="282263486"
Received: from mail-vk0-f46.google.com ([209.85.213.46])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 06 Jul 2017 08:51:58 +0200
Received: by mail-vk0-f46.google.com with SMTP id r125so4818822vkf.1
        for <caml-list@inria.fr>; Wed, 05 Jul 2017 23:51:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=Ch/S7/fKM/24Cs7p6L1FFGGiPULH03uO7PbKziTLvz0=;
        b=melVhPNxMhTM7al1AvNAyYoJTKUrmKDsuSoqnlbsdMRnAHMehNKLUvlfOhcucQoin+
         PejD4P4bJXaC7CO4x6tLwMEEE+6jOAF3OLhQkCdVKdjjgSNwsHlbfxtMg49H60XxdwI2
         g1DT3+bM/0GqmwkXu80+HWCp+ZhfusQKcFdd8vAsZM1LNBThD95NXPKd8n3A2C7yG5iu
         tv1S09ZOguB9qe1tJwkYynfxgGauXMbyV52BWgD6LT7vUwdgT6hb2k6SXllqyZLhYKZ5
         zO0RUkWj/2Qmpk1uWqjYPBpaG8qNjiibUaKux3+m9OnTYvVoEnH7I5NA0wH270fxnX/i
         25yQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=Ch/S7/fKM/24Cs7p6L1FFGGiPULH03uO7PbKziTLvz0=;
        b=fnnG6b+g76SayRLUEYQVCDLcEufJw6HfWeXU5y0dKhnnccOdbMwGFkY6RKHorNM3tf
         V1W4CBm1BdOMDBbQ3yuVY/VQb38+6MaKeSVeyFtKZU0v37/lbk7oMc7dmVGT5wZu4i7j
         A/8Zzw0LwOJ5MHu3HtUm/++DHEQX5AS7f23lZvfr0SOtRID0iEvirPJ7OVVro61h2uEo
         LZes0K0LpwkhvmswyaHlL16kqMhIwUxYZkaPLdoJRiGMA6pXirLuAgxdPNPMSHTPu4AV
         CCevALhyOtPev/cxLpVvBJ4u5sB4z8cjUiwqWoUcQWJ4HKeBSx8pA05TPNyWwnZ+wTRy
         BRUA==
X-Gm-Message-State: AKS2vOwx3hnjBh8hopaTcxv1TKKtSRCUOMGwYfYcGT6OnQble9rdEbT8
	+QzJn3vFPf2+lfknHNDBHgMEuqB8EPsR
X-Received: by 10.31.146.211 with SMTP id u202mr24289247vkd.66.1499323917039;
 Wed, 05 Jul 2017 23:51:57 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.176.81.41 with HTTP; Wed, 5 Jul 2017 23:51:36 -0700 (PDT)
In-Reply-To: <CACLX4jTqUOv=6SD8q4MC-+ykbEX=Fk29_geL85XsBw0mdz8kvA@mail.gmail.com>
References: <CAMsAzy9S4GM4Q9vOqk0PSK9UnoK-tZQtDGmoNF4qmFQP3TpQig@mail.gmail.com>
 <CADK7aFOuBSr2HVEbVZ-byg1jeb3pH0ZCX_sT0b7C50hMyHwHYw@mail.gmail.com> <CACLX4jTqUOv=6SD8q4MC-+ykbEX=Fk29_geL85XsBw0mdz8kvA@mail.gmail.com>
From: Shayne Fletcher <shayne.fletcher.50@gmail.com>
Date: Thu, 6 Jul 2017 02:51:36 -0400
Message-ID: <CAMsAzy92Y4OYvQRb0qFKj9ckyqF0c5e8L1Qw1Va5GTdT2YT8cQ@mail.gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: =?UTF-8?Q?Nicol=C3=A1s_Ojeda_B=C3=A4r?= <nicolas.ojeda.bar@lexifi.com>, 
	"caml-list@inria.fr users" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="001a11435db87a7daf0553a08dcf"
Subject: Re: [Caml-list] [Async / Cohttp_async] Problem getting all of the
 data in a response body

--001a11435db87a7daf0553a08dcf
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Thu, Jul 6, 2017 at 1:37 AM, Yaron Minsky <yminsky@janestreet.com> wrote:

> The fact that you're ignoring the result of Pipe.iter is concerning. That
> function should return a deferred that becomes determined once the
> iteration is complete. It's hard to say without having a bit more of the
> program, but I suspect the bug is related to that.
>
> y
>
>
=E2=80=8BAh!=E2=80=8B Thank-you Yaron. Is something close to this schematic=
 looking more
plausible?

let run : Command.t =3D
  let cmd_proc : (unit -> unit Deferred.Or_error.t) Param.t =3D
    let open Command.Let_syntax in
    [%map_open
       let uri =3D ...
       and ... in
       fun () ->
          Async_client.post ... uri >>|
          fun (_, body) ->
            let r =3D Cohttp_async.Body.to_pipe body in
            Async.Pipe.iter
              r
              ~continue_on_error:true
              ~f:(fun s -> Async.return (printf "%s" s)) >>|
            fun () -> Ok ()
    ] in
  Command.async_or_error' ~summary:"..." cmd_proc

let main : Command.t =3D
  Command.group ~summary:"..."
  [
    "run", run
  ]

let () =3D Command.run ~v main


On Thu, Jul 6, 2017 at 8:23 AM, Nicol=C3=A1s Ojeda B=C3=A4r <
> nicolas.ojeda.bar@lexifi.com> wrote:
>
>> Hi Shayne,
>>
>> I am not very familiar with Async, but did you remember to run the
>> scheduler (Scheduler.go () or similar) ?
>>
>> Cheers,
>> Nicolas
>>
>>
>> On Thu, Jul 6, 2017 at 12:55 AM, Shayne Fletcher <
>> shayne.fletcher.50@gmail.com> wrote:
>>
>>> Can anyone help me out with this?
>>>
>>> In short, I'm doing a HTTP POST with a handler along the lines of:
>>> ```
>>> fun ((resp : Cohttp_async.Response.t)
>>>     , (body : Cohttp_async.Body.t)) : unit Or_error.t ->
>>>      let r : string Async.Pipe.Reader.t =3D Cohttp_async.Body.to_pipe b=
ody
>>> in
>>>      let _ =3D
>>>       Async.Pipe.iter
>>>         r
>>>         ~continue_on_error:true
>>>         ~f:(fun s -> Async.return (printf "%s" s)) in
>>>       (Ok () : unit Or_error.t)
>>>
>>> ```
>>>
>>> Each time I invoke the program I get, more or less output (very
>>> occasionally none) but never all of it. The response header says it's
>>> "fixed  2700816" and indeed, if I replace the code above with
>>> ```
>>> fun ((resp : Cohttp_async.Response.t)
>>>     , (body : Cohttp_async.Body.t)) : unit Or_error.t ->
>>>   let r : string Async.Pipe.Reader.t =3D Cohttp_async.Body.to_pipe body=
 in
>>>   let n : int Deferred.t =3D
>>>     Async.Pipe.fold
>>>       r
>>>       ~init:0
>>>       ~f:(fun acc s ->
>>>             printf "acc : %d\n" acc; Async.return (acc + String.length =
s)
>>>           ) in
>>>   let _ : unit Deferred.t =3D n  >>| fun n -> printf "Chars read : %d" =
n in
>>>   (Ok () : unit Or_error.t)
>>>
>>>  ```
>>> then (for example), on the first run I might see
>>> ```
>>> acc : 0
>>> acc : 1118
>>> acc : 7503
>>> acc : 8780
>>>
>>> ```
>>>
>>> and then on the second run I might see
>>> ```
>>> acc : 0
>>> acc : 1118
>>> acc : 4949
>>>
>>> ```
>>> but never have I seen "Chars read : 2700816".
>>>
>>> I've tried a bunch of different things:
>>>
>>>   - `Pipe.read_all`:
>>>      ```
>>>        let _ =3D
>>>          Async.Pipe.read_all r >>|
>>>          fun q -> Queue.iter q ~f:(fun s -> printf "%s" s) in
>>>        ...
>>>
>>>      ```
>>>      No output.
>>>
>>>   - `Pipe.drain_and_count`:
>>>     ```
>>>       let _ =3D
>>>         Async.Pipe.drain_and_count r >>|
>>>         fun n -> printf "Count %d\n" n in
>>>       ...
>>>
>>>     ```
>>>     No output.
>>>
>>>   - `Pipe.to_list`:
>>>      ```
>>>      let _ =3D
>>>        Async.Pipe.to_list r >>|
>>>        fun l -> printf "%s" (String.concat ~sep:"" l) in
>>>      ...
>>>
>>>      ```
>>>      No output.
>>>
>>> Also tried the obvious:
>>>
>>>   - `Cohttp_async.Body.to_string`:
>>>     ```
>>>       let s =3D Cohttp_async.Body.to_string body in
>>>       let _ =3D s >>| fun  s -> printf "%s" s in
>>>       ...
>>>
>>>     ```
>>>     No output.
>>>
>>> I'm new to this and obviously missing something fundamental :) Is there
>>> a kind soul out there who can give me a hint on how to proceed please?
>>>
>>> Thanks!
>>>
>>> --
>>> Shayne Fletcher
>>>
>>
>>
>


--=20
Shayne Fletcher

--001a11435db87a7daf0553a08dcf
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_default" style=3D"font-family:tahoma,s=
ans-serif"><br></div><img src=3D"http://t.sidekickopen68.com/e1t/o/5/f18dQh=
b0S7ks8dDMPbW2n0x6l2B9gXrN7sKj6v5dw9-W1qMxhd5v_N4lMRzzqPd3_yKW7Fq_jz1k1H6H0=
?si=3D5384785918689280&amp;pi=3Da956132d-b3bb-4c87-cce4-35a80f82bcc3" style=
=3D"display:none!important" height=3D"1" width=3D"1"><div class=3D"gmail_ex=
tra"><br><div class=3D"gmail_quote">On Thu, Jul 6, 2017 at 1:37 AM, Yaron M=
insky <span dir=3D"ltr">&lt;<a href=3D"mailto:yminsky@janestreet.com" targe=
t=3D"_blank">yminsky@janestreet.com</a>&gt;</span> wrote:<br><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid=
 rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr">The fact that you&#39;=
re ignoring the result of Pipe.iter is concerning. That function should ret=
urn a deferred that becomes determined once the iteration is complete. It&#=
39;s hard to say without having a bit more of the program, but I suspect th=
e bug is related to that.<span class=3D"gmail-HOEnZb"><font color=3D"#88888=
8"><div><br></div><div>y</div></font></span></div><div class=3D"gmail-HOEnZ=
b"><div class=3D"gmail-h5"><div class=3D"gmail_extra"><br></div></div></div=
></blockquote><div><div class=3D"gmail_default" style=3D"font-family:tahoma=
,sans-serif"><br>=E2=80=8BAh!=E2=80=8B Thank-you Yaron. Is something close =
to this schematic looking more plausible?</div></div><div class=3D"gmail_de=
fault"><br><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">l=
et run : Command.t =3D</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 let cmd_proc : (unit -&gt; unit Deferred.Or_=
error.t) Param.t =3D</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 =C2=A0 let open Command.Let_syntax in</font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 [%map_open</font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0let uri =3D ...=C2=A0</font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 =C2=A0and ... in</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0fun () -&gt;</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Async_client.post ... uri &gt;&gt;|</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 fun (_, body) -&gt;</font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0=
 =C2=A0 =C2=A0 let r =3D Cohttp_async.Body.to_pipe body in</font></div><div=
 class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Async.Pipe.iter</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 r</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ~conti=
nue_on_error:true</font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ~f:(fun =
s -&gt; Async.return (printf &quot;%s&quot; s)) &gt;&gt;|</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 fun () -&gt; Ok ()</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 ] in</font></div>=
<div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 Comma=
nd.async_or_error&#39; ~summary:&quot;...&quot; cmd_proc</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div><=
div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">let main : Co=
mmand.t =3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 Command.group ~summary:&quot;...&quot;</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 [</font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 &quot;run&quot;, run</font></div><div class=3D"gmail_default"><font =
face=3D"tahoma, sans-serif">=C2=A0 ]</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">let () =3D Command.run ~v main</f=
ont></div><div style=3D"font-family:tahoma,sans-serif"><br></div></div><div=
><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.=
8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><div class=3D"=
gmail-HOEnZb"><div class=3D"gmail-h5"><div class=3D"gmail_extra"><div class=
=3D"gmail_quote">On Thu, Jul 6, 2017 at 8:23 AM, Nicol=C3=A1s Ojeda B=C3=A4=
r <span dir=3D"ltr">&lt;<a href=3D"mailto:nicolas.ojeda.bar@lexifi.com" tar=
get=3D"_blank">nicolas.ojeda.bar@lexifi.com</a>&gt;</span> wrote:<br><block=
quote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1=
px solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr">Hi Shayne,<div=
><br></div><div>I am not very familiar with Async, but did you remember to =
run the scheduler (Scheduler.go () or similar) ?</div><div><br></div><div>C=
heers,</div><div>Nicolas</div><div><br></div></div><div class=3D"gmail-m_43=
90981808640147649HOEnZb"><div class=3D"gmail-m_4390981808640147649h5"><div =
class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Jul 6, 2017 at=
 12:55 AM, Shayne Fletcher <span dir=3D"ltr">&lt;<a href=3D"mailto:shayne.f=
letcher.50@gmail.com" target=3D"_blank">shayne.fletcher.50@gmail.com</a>&gt=
;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0px 0p=
x 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><div d=
ir=3D"ltr"><div><div><font face=3D"tahoma, sans-serif">Can anyone help me o=
ut with this?</font></div><div><font face=3D"tahoma, sans-serif"><br></font=
></div><div><font face=3D"tahoma, sans-serif">In short, I&#39;m doing a HTT=
P POST with a handler along the lines of:</font></div><div><font face=3D"ta=
homa, sans-serif">```</font></div><div><font face=3D"tahoma, sans-serif">fu=
n ((resp : Cohttp_async.Response.t)</font></div><div><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 , (body : Cohttp_async.Body.t)) : unit Or_error.t=
 -&gt;</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0let r : string Async.Pipe.Reader.t =3D Cohttp_async.Body.to_pipe body in=
</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0let=
 _ =3D</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 Async.Pipe.iter</font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 r</font></div><div><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 =C2=A0 =C2=A0 ~continue_on_error:true</font></div><div><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 ~f:(fun s -&gt; =
Async.return (printf &quot;%s&quot; s)) in</font></div><div><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 (Ok () : unit Or_error.t)</font></d=
iv><div><font face=3D"tahoma, sans-serif"><br>```</font></div><div><font fa=
ce=3D"tahoma, sans-serif"><br></font></div><div><font face=3D"tahoma, sans-=
serif">Each time I invoke the program I get, more or less output (very occa=
sionally none) but never all of it.=C2=A0</font><span style=3D"font-family:=
tahoma,sans-serif">The response header says it&#39;s &quot;fixed =C2=A02700=
816&quot; and indeed, if I replace the code above with</span></div><div><fo=
nt face=3D"tahoma, sans-serif">```</font></div><div><font face=3D"tahoma, s=
ans-serif">fun ((resp : Cohttp_async.Response.t)</font></div><div><font fac=
e=3D"tahoma, sans-serif">=C2=A0 =C2=A0 , (body : Cohttp_async.Body.t)) : un=
it Or_error.t -&gt;</font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 let r : string Async.Pipe.Reader.t =3D Cohttp_async.Body.to_pipe body i=
n</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 let n : int Def=
erred.t =3D</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 Async.Pipe.fold</font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 r</font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 ~init:0</font></div><div><font face=3D"tahoma, sans-serif=
">=C2=A0 =C2=A0 =C2=A0 ~f:(fun acc s -&gt;</font></div><div><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 printf &quot;a=
cc : %d\n&quot; acc; Async.return (acc + String.length s)</font></div><div>=
<font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ) in</=
font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 let _ : unit Defer=
red.t =3D n =C2=A0&gt;&gt;| fun n -&gt; printf &quot;Chars read : %d&quot; =
n in</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 (Ok () : uni=
t Or_error.t)</font></div><div><font face=3D"tahoma, sans-serif"><br>=C2=A0=
```</font></div><div><font face=3D"tahoma, sans-serif">then (for example), =
on the first run I might see</font></div><div><font face=3D"tahoma, sans-se=
rif">```</font></div><div><font face=3D"tahoma, sans-serif">acc : 0</font><=
/div><div><font face=3D"tahoma, sans-serif">acc : 1118</font></div><div><fo=
nt face=3D"tahoma, sans-serif">acc : 7503</font></div><div><font face=3D"ta=
homa, sans-serif">acc : 8780</font></div><div><font face=3D"tahoma, sans-se=
rif"><br>```</font></div><div><font face=3D"tahoma, sans-serif"><br></font>=
</div><div><font face=3D"tahoma, sans-serif">and then on the second run I m=
ight see</font></div><div><font face=3D"tahoma, sans-serif">```</font></div=
><div><font face=3D"tahoma, sans-serif">acc : 0</font></div><div><font face=
=3D"tahoma, sans-serif">acc : 1118</font></div><div><font face=3D"tahoma, s=
ans-serif">acc : 4949</font></div><div><font face=3D"tahoma, sans-serif"><b=
r>```</font></div><div><font face=3D"tahoma, sans-serif">but never have I s=
een &quot;Chars read : 2700816&quot;.</font></div><div><font face=3D"tahoma=
, sans-serif"><br></font></div><div><font face=3D"tahoma, sans-serif">I&#39=
;ve tried a bunch of different things:</font></div><div><font face=3D"tahom=
a, sans-serif"><br></font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 - `Pipe.read_all`:</font></div><div><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0```</font></div><div><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 =C2=A0let _ =3D</font></div><div><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Async.Pipe.read_all r &gt;&g=
t;|</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0=
 =C2=A0 =C2=A0fun q -&gt; Queue.iter q ~f:(fun s -&gt; printf &quot;%s&quot=
; s) in</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0...</font></div><div><font face=3D"tahoma, sans-serif"><br>=C2=
=A0 =C2=A0 =C2=A0```</font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0No output.</font></div><div><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0</font></div><div><font face=3D"tahoma, sans-serif"=
>=C2=A0 - `Pipe.drain_and_count`:</font></div><div><font face=3D"tahoma, sa=
ns-serif">=C2=A0 =C2=A0 ```</font></div><div><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0 let _ =3D</font></div><div><font face=3D"tahoma, s=
ans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 Async.Pipe.drain_and_count r &gt;&gt=
;|</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 fun n -&gt; printf &quot;Count %d\n&quot; n in</font></div><div><fon=
t face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 ...</font></div><div><fo=
nt face=3D"tahoma, sans-serif"><br>=C2=A0 =C2=A0 ```</font></div><div><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 No output.</font></div><div><fon=
t face=3D"tahoma, sans-serif">=C2=A0=C2=A0</font></div><div><font face=3D"t=
ahoma, sans-serif">=C2=A0 - `Pipe.to_list`:</font></div><div><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0```</font></div><div><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0let _ =3D</font></div><div><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0Async.Pipe.to_list r &=
gt;&gt;|</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0fun l -&gt; printf &quot;%s&quot; (String.concat ~sep:&quot;&q=
uot; l) in</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=
 =C2=A0...</font></div><div><font face=3D"tahoma, sans-serif"><br>=C2=A0 =
=C2=A0 =C2=A0```</font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0No output.</font></div><div><font face=3D"tahoma, sans-serif">=
=C2=A0=C2=A0<br>Also tried the obvious:</font></div><div><font face=3D"taho=
ma, sans-serif"><br></font></div><div><font face=3D"tahoma, sans-serif">=C2=
=A0 - `Cohttp_async.Body.to_string`:</font></div><div><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 ```</font></div><div><font face=3D"tahoma, sans-=
serif">=C2=A0 =C2=A0 =C2=A0 let s =3D Cohttp_async.Body.to_string body in</=
font></div><div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 let =
_ =3D s &gt;&gt;| fun =C2=A0s -&gt; printf &quot;%s&quot; s in</font></div>=
<div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 ...</font></div=
><div><font face=3D"tahoma, sans-serif"><br>=C2=A0 =C2=A0 ```</font></div><=
div><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 No output.</font></div>=
<div><font face=3D"tahoma, sans-serif"><br></font></div><div><font face=3D"=
tahoma, sans-serif">I&#39;m new to this and obviously missing something fun=
damental :) Is there a kind soul out there who can give me a hint on how to=
 proceed please?</font></div><div><span style=3D"font-family:tahoma,sans-se=
rif"><br>Thanks!</span><span class=3D"gmail-m_4390981808640147649m_-8694811=
416117289099HOEnZb"><font color=3D"#888888"><br></font></span></div></div><=
span class=3D"gmail-m_4390981808640147649m_-8694811416117289099HOEnZb"><fon=
t color=3D"#888888"><div><br></div>-- <br><div class=3D"gmail-m_43909818086=
40147649m_-8694811416117289099m_-4170213337063989117gmail-m_-46843002012942=
83595gmail_signature">Shayne Fletcher</div>
<img src=3D"http://t.sidekickopen68.com/e1t/o/5/f18dQhb0S7ks8dDMPbW2n0x6l2B=
9gXrN7sKj6v5dw9-W1qMxhd5v_N4lMRzzqPd3_yKW7Fq_jz1k1H6H0?si=3D538478591868928=
0&amp;pi=3D10975d16-aca0-46a2-b88d-818a256d8dff" style=3D"display: none;" h=
eight=3D"1" width=3D"1"></font></span></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=
<div class=3D"gmail_signature">Shayne Fletcher</div>
</div></div>

--001a11435db87a7daf0553a08dcf--
