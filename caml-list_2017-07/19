Return-Path: <nicolas.ojeda.bar@lexifi.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 900788018B
	for <caml-list@sympa.inria.fr>; Thu,  6 Jul 2017 07:23:59 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=nicolas.ojeda.bar@lexifi.com; spf=SoftFail smtp.mailfrom=nicolas.ojeda.bar@lexifi.com; spf=None smtp.helo=postmaster@vrout10.yaziba.net
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  nicolas.ojeda.bar@lexifi.com) identity=pra;
  client-ip=185.56.204.56;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.ojeda.bar@lexifi.com";
  x-sender="nicolas.ojeda.bar@lexifi.com";
  x-conformance=sidf_compatible
Received-SPF: SoftFail (mail2-smtp-roc.national.inria.fr: domain
  of nicolas.ojeda.bar@lexifi.com is inclined to not designate
  185.56.204.56 as permitted sender) identity=mailfrom;
  client-ip=185.56.204.56;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.ojeda.bar@lexifi.com";
  x-sender="nicolas.ojeda.bar@lexifi.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@vrout10.yaziba.net) identity=helo;
  client-ip=185.56.204.56;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.ojeda.bar@lexifi.com";
  x-sender="postmaster@vrout10.yaziba.net";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3A54KXWBe2oP2lSRjSvmYwaKk7lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW+ZB7h7PlgxGXEQZ/co6odzbGH7Oa4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9GiTe5Y75+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTy5OAo28?=
 =?us-ascii?q?YYUBDOQPIPhWoJXmqlQUsRezHxOhCP/zxjJKgHL9wK000/4mEQHDxAEuB9MOv2?=
 =?us-ascii?q?jTrNXxNqASSvi6wrDKzTrdcvxZwy/y5ZXNdRA7vPqBWrRwccvNxkkoEwPKlE6Q?=
 =?us-ascii?q?pZbiPzOXyOsCrnKU4/B7Wu21kW4qsAVxrSagx8cthInJh5gZxUzD9SV82Ys4I8?=
 =?us-ascii?q?CzRkB8Yd6hCpRQtieaOpNuQsMjW2Fnpj42yqUHuZ6jYicG0ognxxnHZ/yfcoiI?=
 =?us-ascii?q?+gzsWPyLIThmnn1qZaqzhw2u8Ui6y+38UMa03VBXpSRGitnBrm0B2h/T58SdSv?=
 =?us-ascii?q?Zw/12t1SiT2w3c8O1JIUE5mbLFJ5I9xrM8jJkevETZEiPohUn7jbWaelgm9+Wr?=
 =?us-ascii?q?7ensf6/oqYWGN4BujwHzKqQuldK7AeQ/KgUOQXKb+eOh1L3/4EH1XK9Gj/0sna?=
 =?us-ascii?q?jYsZDVPt4UqrS/AwBLzoYv8xe/DzG439QEhXQLMVFIdRKdg4XpOlzCOu70Aeuw?=
 =?us-ascii?q?jli2kDpmxujKPrj7DZXMKnjDnq3hfbF460NEzgozzMxQ55VQCr4bO/L/QEjxtN?=
 =?us-ascii?q?7GARAkKQO42f3oB89n1o4FXWKAHKCYMKLcsV+J/O4gP+6MZIoNtDbnN/cl/+Lu?=
 =?us-ascii?q?jWM+mVIFYaamx54XaHShEvRiIkWZembsj8waEWYKuwo+VPblhEeDUT5VfXayXr?=
 =?us-ascii?q?gz6is1CIK8FYvDQ4etj6Gf0yqjBZ1WY3xGCkiLEXf1a4XXE8sLPRmSK95nn3Qq?=
 =?us-ascii?q?UbW9QI8sz1n6rw/z2rxqaOTQ9zETtZ/5koUtz+LWnBA2szdzCpLO/XuKSjRSn2?=
 =?us-ascii?q?gPQ7Yt64d9rEB0/X0Py+Ashf1TEtha/LVOUAo2PNjWxvZSD93iWwzAONyOTQD1?=
 =?us-ascii?q?EZ2dHTgtQ4dpkJc1aEFnFoDn10ib0g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BtAwCGyF1ZfTjMOLlcSQYMhBGBEAeFH?=
 =?us-ascii?q?4lWkHYQiB6PZieFdQKDFkoUAQEBAQEBAQEBAQESAQELFAhXgjMkAYJBAQICASM?=
 =?us-ascii?q?EUgULCQILNwICIQESAQUBHAYTihcDDQgEAQuSEpEaP4wKgWw6hzwNg30BAQEBB?=
 =?us-ascii?q?gEBAQEBAQEhgR6CCYhRgldPhFcWgksBBJcshyQ7jxuEaoIMhUqDcYZXSIstN4d?=
 =?us-ascii?q?CFB+BEwI2gSt1XhoGgiyCRxwZgVB0AYkCAQEB?=
X-IPAS-Result: =?us-ascii?q?A0BtAwCGyF1ZfTjMOLlcSQYMhBGBEAeFH4lWkHYQiB6PZie?=
 =?us-ascii?q?FdQKDFkoUAQEBAQEBAQEBAQESAQELFAhXgjMkAYJBAQICASMEUgULCQILNwICI?=
 =?us-ascii?q?QESAQUBHAYTihcDDQgEAQuSEpEaP4wKgWw6hzwNg30BAQEBBgEBAQEBAQEhgR6?=
 =?us-ascii?q?CCYhRgldPhFcWgksBBJcshyQ7jxuEaoIMhUqDcYZXSIstN4dCFB+BEwI2gSt1X?=
 =?us-ascii?q?hoGgiyCRxwZgVB0AYkCAQEB?=
X-IronPort-AV: E=Sophos;i="5.40,315,1496095200"; 
   d="scan'208,217";a="282252109"
Received: from vrout10-bl2.yaziba.net (HELO vrout10.yaziba.net) ([185.56.204.56])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 06 Jul 2017 07:23:58 +0200
Received: from mtaout10.int.yaziba.net (mtaout10.int.yaziba.net [10.4.20.36])
	(using TLSv1 with cipher ADH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by vrout10.yaziba.net (mx10.yaziba.net) with ESMTPS id DFAFA52032
	for <caml-list@inria.fr>; Thu,  6 Jul 2017 07:23:57 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mtaout10.int.yaziba.net (Postfix) with ESMTP id 0F2B21601F4
	for <caml-list@inria.fr>; Thu,  6 Jul 2017 07:23:58 +0200 (CEST)
X-Virus-Scanned: amavisd-new at 
Received: from mtaout10.int.yaziba.net ([127.0.0.1])
	by localhost (mtaout10.int.yaziba.net [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id jwjvYLM1EkUL for <caml-list@inria.fr>;
	Thu,  6 Jul 2017 07:23:57 +0200 (CEST)
Received: from mail-qt0-f178.google.com (mail-qt0-f178.google.com [209.85.216.178])
	by mtaout10.int.yaziba.net (Postfix) with ESMTPSA id A7A111600D1
	for <caml-list@inria.fr>; Thu,  6 Jul 2017 07:23:57 +0200 (CEST)
Received: by mail-qt0-f178.google.com with SMTP id r30so7253184qtc.0
        for <caml-list@inria.fr>; Wed, 05 Jul 2017 22:23:57 -0700 (PDT)
X-Gm-Message-State: AKS2vOyMqF303SYS3Q2NBf7dIKkQAHRy8bAs1IPZjqL4hKu3y6GM7yQS
	VDFbxFKhhf4ZlbAZGknl/x0beODosw==
X-Received: by 10.237.50.4 with SMTP id y4mr58333490qtd.225.1499318636616;
 Wed, 05 Jul 2017 22:23:56 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.200.34.98 with HTTP; Wed, 5 Jul 2017 22:23:36 -0700 (PDT)
In-Reply-To: <CAMsAzy9S4GM4Q9vOqk0PSK9UnoK-tZQtDGmoNF4qmFQP3TpQig@mail.gmail.com>
References: <CAMsAzy9S4GM4Q9vOqk0PSK9UnoK-tZQtDGmoNF4qmFQP3TpQig@mail.gmail.com>
From: =?UTF-8?Q?Nicol=C3=A1s_Ojeda_B=C3=A4r?= <nicolas.ojeda.bar@lexifi.com>
Date: Thu, 6 Jul 2017 07:23:36 +0200
X-Gmail-Original-Message-ID: <CADK7aFOuBSr2HVEbVZ-byg1jeb3pH0ZCX_sT0b7C50hMyHwHYw@mail.gmail.com>
Message-ID: <CADK7aFOuBSr2HVEbVZ-byg1jeb3pH0ZCX_sT0b7C50hMyHwHYw@mail.gmail.com>
To: Shayne Fletcher <shayne.fletcher.50@gmail.com>
Cc: "caml-list@inria.fr users" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="94eb2c12446abda00505539f52e2"
X-DRWEB-SCAN: ok
X-VRSPAM-SCORE: -100
X-VRSPAM-STATE: legit
X-VRSPAM-CAUSE: gggruggvucftvghtrhhoucdtuddrfeelkedrudejgddutdegucetufdoteggodetrfcurfhrohhfihhlvgemucggtfgfnhhsuhgsshgtrhhisggvnecuuegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpegjfhfhfffkuffvtgesrgdtreertddtjeenucfhrhhomheppfhitgholhojshgpqfhjvggurggpueomrhcuoehnihgtohhlrghsrdhojhgvuggrrdgsrghrsehlvgigihhfihdrtghomheqnecuffhomhgrihhnpehpihhpvgdpphhiphgvrdhtohdpphhiphgvrdhrvggrugdpshhtrhhinhhgnecukfhppedvtdelrdekhedrvdduiedrudejkeenucfrrghrrghmpehmohguvgepshhmthhpohhuth
X-VRSPAM-EXTCAUSE: mhhouggvpehsmhhtphhouhht
Subject: Re: [Caml-list] [Async / Cohttp_async] Problem getting all of the
 data in a response body

--94eb2c12446abda00505539f52e2
Content-Type: text/plain; charset="UTF-8"

Hi Shayne,

I am not very familiar with Async, but did you remember to run the
scheduler (Scheduler.go () or similar) ?

Cheers,
Nicolas


On Thu, Jul 6, 2017 at 12:55 AM, Shayne Fletcher <
shayne.fletcher.50@gmail.com> wrote:

> Can anyone help me out with this?
>
> In short, I'm doing a HTTP POST with a handler along the lines of:
> ```
> fun ((resp : Cohttp_async.Response.t)
>     , (body : Cohttp_async.Body.t)) : unit Or_error.t ->
>      let r : string Async.Pipe.Reader.t = Cohttp_async.Body.to_pipe body in
>      let _ =
>       Async.Pipe.iter
>         r
>         ~continue_on_error:true
>         ~f:(fun s -> Async.return (printf "%s" s)) in
>       (Ok () : unit Or_error.t)
>
> ```
>
> Each time I invoke the program I get, more or less output (very
> occasionally none) but never all of it. The response header says it's
> "fixed  2700816" and indeed, if I replace the code above with
> ```
> fun ((resp : Cohttp_async.Response.t)
>     , (body : Cohttp_async.Body.t)) : unit Or_error.t ->
>   let r : string Async.Pipe.Reader.t = Cohttp_async.Body.to_pipe body in
>   let n : int Deferred.t =
>     Async.Pipe.fold
>       r
>       ~init:0
>       ~f:(fun acc s ->
>             printf "acc : %d\n" acc; Async.return (acc + String.length s)
>           ) in
>   let _ : unit Deferred.t = n  >>| fun n -> printf "Chars read : %d" n in
>   (Ok () : unit Or_error.t)
>
>  ```
> then (for example), on the first run I might see
> ```
> acc : 0
> acc : 1118
> acc : 7503
> acc : 8780
>
> ```
>
> and then on the second run I might see
> ```
> acc : 0
> acc : 1118
> acc : 4949
>
> ```
> but never have I seen "Chars read : 2700816".
>
> I've tried a bunch of different things:
>
>   - `Pipe.read_all`:
>      ```
>        let _ =
>          Async.Pipe.read_all r >>|
>          fun q -> Queue.iter q ~f:(fun s -> printf "%s" s) in
>        ...
>
>      ```
>      No output.
>
>   - `Pipe.drain_and_count`:
>     ```
>       let _ =
>         Async.Pipe.drain_and_count r >>|
>         fun n -> printf "Count %d\n" n in
>       ...
>
>     ```
>     No output.
>
>   - `Pipe.to_list`:
>      ```
>      let _ =
>        Async.Pipe.to_list r >>|
>        fun l -> printf "%s" (String.concat ~sep:"" l) in
>      ...
>
>      ```
>      No output.
>
> Also tried the obvious:
>
>   - `Cohttp_async.Body.to_string`:
>     ```
>       let s = Cohttp_async.Body.to_string body in
>       let _ = s >>| fun  s -> printf "%s" s in
>       ...
>
>     ```
>     No output.
>
> I'm new to this and obviously missing something fundamental :) Is there a
> kind soul out there who can give me a hint on how to proceed please?
>
> Thanks!
>
> --
> Shayne Fletcher
>

--94eb2c12446abda00505539f52e2
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi Shayne,<div><br></div><div>I am not very familiar with =
Async, but did you remember to run the scheduler (Scheduler.go () or simila=
r) ?</div><div><br></div><div>Cheers,</div><div>Nicolas</div><div><br></div=
></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Ju=
l 6, 2017 at 12:55 AM, Shayne Fletcher <span dir=3D"ltr">&lt;<a href=3D"mai=
lto:shayne.fletcher.50@gmail.com" target=3D"_blank">shayne.fletcher.50@gmai=
l.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"m=
argin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"l=
tr"><div class=3D"gmail_default"><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">Can anyone help me out with this?</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif">In short, I&#39=
;m doing a HTTP POST with a handler along the lines of:</font></div><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif">```</font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif">fun ((resp : Co=
http_async.Response.t)</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 , (body : Cohttp_async.Body.t)) : uni=
t Or_error.t -&gt;</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0let r : string Async.Pipe.Reader.t =
=3D Cohttp_async.Body.to_pipe body in</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0let _ =3D</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 Async.Pipe.iter</font></div><div class=3D"gmail_default"><fon=
t face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 r</font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 ~continue_on_error:true</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 ~f:(fun s=
 -&gt; Async.return (printf &quot;%s&quot; s)) in</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 (Ok =
() : unit Or_error.t)</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif"><br>```</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">Each time I invoke the program I get, =
more or less output (very occasionally none) but never all of it.=C2=A0</fo=
nt><span style=3D"font-family:tahoma,sans-serif">The response header says i=
t&#39;s &quot;fixed =C2=A02700816&quot; and indeed, if I replace the code a=
bove with</span></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">```</font></div><div class=3D"gmail_default"><font face=3D"tahoma=
, sans-serif">fun ((resp : Cohttp_async.Response.t)</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 , (body =
: Cohttp_async.Body.t)) : unit Or_error.t -&gt;</font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let r : string Async=
.Pipe.Reader.t =3D Cohttp_async.Body.to_pipe body in</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let n : int Def=
erred.t =3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 Async.Pipe.fold</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 r</font></di=
v><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 =C2=A0 ~init:0</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 ~f:(fun acc s -&gt;</font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 printf &quot;acc : %d\n&quot; acc; Async.return=
 (acc + String.length s)</font></div><div class=3D"gmail_default"><font fac=
e=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ) in</font></di=
v><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let=
 _ : unit Deferred.t =3D n =C2=A0&gt;&gt;| fun n -&gt; printf &quot;Chars r=
ead : %d&quot; n in</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 (Ok () : unit Or_error.t)</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br>=C2=A0```</font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">then (fo=
r example), on the first run I might see</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">```</font></div><div class=3D"gmai=
l_default"><font face=3D"tahoma, sans-serif">acc : 0</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">acc : 1118</font></div=
><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">acc : 7503<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
acc : 8780</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif"><br>```</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif"><br></font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">and then on the second run I might see</font></div>=
<div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">```</font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">acc : 0<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
acc : 1118</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif">acc : 4949</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif"><br>```</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif">but never have I seen &quot;Chars read : 27=
00816&quot;.</font></div><div class=3D"gmail_default"><font face=3D"tahoma,=
 sans-serif"><br></font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">I&#39;ve tried a bunch of different things:</font></div><=
div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 -=
 `Pipe.read_all`:</font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">=C2=A0 =C2=A0 =C2=A0```</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0let _ =
=3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Async.Pipe.read_all r &gt;&gt;|</font=
></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0fun q -&gt; Queue.iter q ~f:(fun s -&gt; pri=
ntf &quot;%s&quot; s) in</font></div><div class=3D"gmail_default"><font fac=
e=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0...</font></div><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br>=C2=A0 =C2=A0 =
=C2=A0```</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">=C2=A0 =C2=A0 =C2=A0No output.</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0</font></div><=
div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 - `Pip=
e.drain_and_count`:</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 ```</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 let _ =3D</font>=
</div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0 =C2=A0 =C2=A0 Async.Pipe.drain_and_count r &gt;&gt;|</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 fun n -&gt; printf &quot;Count %d\n&quot; n in</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 ...</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif"><br>=C2=A0 =C2=A0 ```</font></div><div class=3D"gmail_default"><=
font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 No output.</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0=C2=A0</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 - `Pipe.to_list`:</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0```</font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0let _ =
=3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0 =C2=A0Async.Pipe.to_list r &gt;&gt;|</font></div><=
div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=
 =C2=A0 =C2=A0fun l -&gt; printf &quot;%s&quot; (String.concat ~sep:&quot;&=
quot; l) in</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 =C2=A0...</font></div><div class=3D"gmail_default=
"><font face=3D"tahoma, sans-serif"><br>=C2=A0 =C2=A0 =C2=A0```</font></div=
><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 =C2=A0No output.</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0=C2=A0<br>Also tried the obvious:</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 - =
`Cohttp_async.Body.to_string`:</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 ```</font></div><div class=3D"=
gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 let s=
 =3D Cohttp_async.Body.to_string body in</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 let _ =3D s &=
gt;&gt;| fun =C2=A0s -&gt; printf &quot;%s&quot; s in</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
...</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if"><br>=C2=A0 =C2=A0 ```</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 No output.</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">I&#39;m new to th=
is and obviously missing something fundamental :) Is there a kind soul out =
there who can give me a hint on how to proceed please?</font></div><div cla=
ss=3D"gmail_default"><span style=3D"font-family:tahoma,sans-serif"><br>Than=
ks!</span><span class=3D"HOEnZb"><font color=3D"#888888"><br></font></span>=
</div></div><span class=3D"HOEnZb"><font color=3D"#888888"><div><br></div>-=
- <br><div class=3D"m_-4170213337063989117gmail-m_-4684300201294283595gmail=
_signature">Shayne Fletcher</div>
<img src=3D"http://t.sidekickopen68.com/e1t/o/5/f18dQhb0S7ks8dDMPbW2n0x6l2B=
9gXrN7sKj6v5dw9-W1qMxhd5v_N4lMRzzqPd3_yKW7Fq_jz1k1H6H0?si=3D538478591868928=
0&amp;pi=3D10975d16-aca0-46a2-b88d-818a256d8dff" style=3D"display:none!impo=
rtant" height=3D"1" width=3D"1"></font></span></div>
</blockquote></div><br></div>

--94eb2c12446abda00505539f52e2--
