Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA20835; Wed, 4 Sep 2002 17:12:32 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA20926 for <caml-list@pauillac.inria.fr>; Wed, 4 Sep 2002 17:12:31 +0200 (MET DST)
Received: from mel-rto2.wanadoo.fr (smtp-out-2.wanadoo.fr [193.252.19.254])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g84FCU925631
	for <caml-list@inria.fr>; Wed, 4 Sep 2002 17:12:30 +0200 (MET DST)
Received: from mel-rta8.wanadoo.fr (193.252.19.79) by mel-rto2.wanadoo.fr (6.5.007)
        id 3D760C96000181F6; Wed, 4 Sep 2002 17:11:59 +0200
Received: from gogol (80.9.108.39) by mel-rta8.wanadoo.fr (6.5.007)
        id 3D76090F000167FB; Wed, 4 Sep 2002 17:11:59 +0200
Received: from berke by gogol with local (Exim 3.35 #1 (Debian))
	id 17mbrL-00007O-00; Wed, 04 Sep 2002 17:14:23 +0200
Date: Wed, 4 Sep 2002 17:14:22 +0200
From: Berke Durak <berke@altern.org>
To: Markus Mottl <markus@oefai.at>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Native threads under Debian 3.0r0
Message-ID: <20020904151422.GA336@gogol>
References: <20020903230314.GA311@gogol> <20020904094432.GA1375@kiefer.ai.univie.ac.at> <20020904191523M.garrigue@kurims.kyoto-u.ac.jp> <20020904130151.GB1375@kiefer.ai.univie.ac.at>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20020904130151.GB1375@kiefer.ai.univie.ac.at>
User-Agent: Mutt/1.4i
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, Sep 04, 2002 at 03:01:51PM +0200, Markus Mottl wrote:
> On Wed, 04 Sep 2002, Jacques Garrigue wrote:
>
> > So the answer is: a native code thread should be allocating some data,
> > otherwise it cannot be interrupted. The problem does not exist for
> > bytecode.
> 
> The main consideration is obviously native code performance. OTOH, some
> people might want to guarantee that their threads never get stuck. I
> don't know what solution would be useful for them. Maybe some runtime
> or command-line switch that trades efficiency against such scheduling
> problems.

Sorry about my ignorance, but aren't threads scheduled by the kernel
when using libpthread ? (That would make sense, since I get extra
processes when I create extra threads). I mean, aren't the threads
automatically preempted ?

If not, couldn't it be possible to preempt them automatically using
the interval timer ?
--
Berke
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

