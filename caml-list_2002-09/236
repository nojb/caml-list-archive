Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA00501; Tue, 17 Sep 2002 17:07:33 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA00975 for <caml-list@pauillac.inria.fr>; Tue, 17 Sep 2002 17:07:31 +0200 (MET DST)
Received: from m057pc6.cis.upenn.edu (m057pc6.cis.upenn.edu [158.130.13.156])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g8HF7V112115
	for <caml-list@pauillac.inria.fr>; Tue, 17 Sep 2002 17:07:31 +0200 (MET DST)
Received: from m057pc6.cis.upenn.edu (LOCALHOST [127.0.0.1])
	by m057pc6.cis.upenn.edu (8.12.3/8.12.3) with ESMTP id g8HF7RqS017470;
	Tue, 17 Sep 2002 11:07:27 -0400
Received: (from stse@localhost)
	by m057pc6.cis.upenn.edu (8.12.3/8.12.3/Submit) id g8HF7RQd017467;
	Tue, 17 Sep 2002 11:07:27 -0400
X-Authentication-Warning: m057pc6.cis.upenn.edu: stse set sender to stse@cis.upenn.edu using -f
To: "Arnaud SAHUGUET" <sahuguet@lucent.com>
Cc: <caml-list@pauillac.inria.fr>
Subject: Re: [Caml-list] building web services using oCaml
References: <016301c25e06$b67e7230$0b1919ac@bl.belllabs.com>
	<20020917141602.A27670@pauillac.inria.fr>
	<01e001c25e57$428e8f80$0b1919ac@bl.belllabs.com>
From: Stephen Tse <stse@cis.upenn.edu>
Date: 17 Sep 2002 11:07:27 -0400
In-Reply-To: <01e001c25e57$428e8f80$0b1919ac@bl.belllabs.com>
Message-ID: <juw7khkvemo.fsf@m057pc6.cis.upenn.edu>
Lines: 30
User-Agent: Gnus/5.0808 (Gnus v5.8.8) XEmacs/21.1 (Cuyahoga Valley)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

"Arnaud SAHUGUET" <sahuguet@lucent.com> writes:

> > There are cases where it just makes more sense to interface to an
> > existing C library.  I think SSL falls in this category, because the
> > SSL protocol is quite complex, and the OpenSSL implementation seems
> > of good quality.  On the other hand, the subset of HTTP that you need
> > to write CGI-like applications is simple enough that implementing it
> > directly in OCaml (like OcamlNet does) is easier than trying to
> > interface to, say, libwww.
> 
> I agree that this is fine for a subset of HTTP. But what if we need
> the whole thing.  I think the problem is not so much implementing
> something in oCaml, it is implementing something that satisfies a
> given spec (e.g. SSL, HTTP, etc.)  and maintaining it. The
> maintainance is really the hard part.  >From my point of view,
> relying on a reference implementation (e.g. libwww maintained by
> W3C) is a good way to go.


libcurl is a good alternative to libwww,

http://curl.haxx.se/
http://curl.haxx.se/libcurl/

You may also be interested in the list of http libraries,

http://curl.haxx.se/docs/comparison-table.html
http://curl.haxx.se/libcurl/competitors.html


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

