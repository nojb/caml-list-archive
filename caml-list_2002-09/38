Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA17859; Tue, 3 Sep 2002 08:50:09 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA17851 for <caml-list@pauillac.inria.fr>; Tue, 3 Sep 2002 08:50:08 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from athlon.baretta.com (r-mi214-6a47.tin.it [62.211.4.47])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g836o7r05039
	for <caml-list@inria.fr>; Tue, 3 Sep 2002 08:50:07 +0200 (MET DST)
Received: from baretta.com (localhost.localdomain [127.0.0.1])
	by athlon.baretta.com (Postfix) with ESMTP id 3948427398
	for <caml-list@inria.fr>; Tue,  3 Sep 2002 08:58:32 +0200 (CEST)
Message-ID: <3D745D98.6090003@baretta.com>
Date: Tue, 03 Sep 2002 08:58:32 +0200
From: Alessandro Baretta <alex@baretta.com>
Organization: Baretta srl -- www.baretta.com
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.0.0) Gecko/20020529
X-Accept-Language: it, en
MIME-Version: 1.0
To: Ocaml <caml-list@inria.fr>
Subject: [Caml-list] Re: An XML standard API? (was:What kind of industry do you mean?)
References: <000101c25198$77b64cf0$0a00a8c0@gateway> <3D735CDA.20805@baretta.com> <20020902225828.GC818@ice.gerd-stolpmann.de>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk



Gerd Stolpmann wrote:
> Am 2002.09.02 14:43 schrieb(en) Alessandro Baretta:
> 
>>BTW, I'd gladly give up XSLT and SQL if, respectively, we
>>had a pseudo-official XML transformation API for Ocaml, and
> 
> 
> What do you mean with "pseudo-official"?

PXP is at least "pseudo-official", IMHO. It does not take an 
international consortium such as the W3C or the ISO to make 
a free software API "standard, for all practical purposes". 
Just consider SAX. It is basically just as "standard" as the 
DOM, which is not a standard anyway.

> A remark as developer of free software: One of the advantages
> is that I can do what I want, nobody forces me to develop in a
> certain way, or direction. Free software is basically software 
> without standards.

This I disagree with. Standards are useful in the free 
software community, possibly even more than in the 
commercial software industry. The whole idea behind free 
software is the ability to develop complex applications in a 
distributed, decentralized, and ultimately *free* fashion. 
But standards, whether official or _de_facto_ are needed to 
allow the mutual benefits of code sharing. Such standards by 
no means infringe on your freedom to code whatever you want, 
however you like.

> Industry needs standards to make their
> products interchangeable, but this is not a key point for free
> software, because you have the sources, and you have some
> control over them. PostgreSQL is the best example for this;
> originally it did not support SQL, but had some unique features
> other DBMS did not have. As a user you get the benefits of the
> freedom of the developers, but at the price of lacking secondary
> virtues such as standard-conformance.
> 
> Why don't we have a generally accepted XML transformation API?
> It would not be very much work to develop such an API, and to
> do a prototype for an implementation. I suppose that auch an
> API is not really needed, at least now.

It is not that easy. It takes interest and consensus. I'm 
not sure how widespread is the need for XML processing 
capabilities in the O'Caml community, but I have a definite 
feeling that consensus would be most difficult to achieve on 
an _a_priori_ basis. Probably, the most efficient way to 
achieve such consensus would be to develop the 
"Super-Duper-XML-lib" and distribute it. Consensus would 
simply condense around it.

Ideally, such a library would be built on PXP (a _de_facto_ 
standard, as I already noted), and implement an XML type 
checking à la XSchema, but somehow linked with the O'Caml 
type system. The transformation API would then have to 
implement the same expressiveness of XSLT while retaining 
the static type safety of O'Caml.

This is a wish list I do not address to anyone in 
particular. If I were competent enough in markup languages 
and related tools I might take up the effort myself. At 
present, I do not consider myself apt for such a task, so I 
have little choice but to use what tools are available: 
XSLT, mainly, and possibly XSchema. Not entirely 
satisfactory from my standpoint, but still better (probably) 
than having to code XML validation and transformation 
functions from scratch in O'Caml.

Regards,
Alex

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

