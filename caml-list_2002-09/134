Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id HAA24895; Mon, 9 Sep 2002 07:39:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id HAA22251 for <caml-list@pauillac.inria.fr>; Mon, 9 Sep 2002 07:39:10 +0200 (MET DST)
Received: from lobus.fungible.com (adsl-64-161-114-6.dsl.snfc21.pacbell.net [64.161.114.6])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g895d8917167
	for <caml-list@inria.fr>; Mon, 9 Sep 2002 07:39:09 +0200 (MET DST)
Received: by lobus.fungible.com (Postfix, from userid 1000)
	id 6D8647F4F; Sun,  8 Sep 2002 22:39:06 -0700 (PDT)
Date: Sun,  8 Sep 2002 22:34:55 -0700
From-Tims-Fingers: true
To: caml-list@inria.fr
Subject: [Caml-list] When do you need a subtype before :>?
Message-Id: <20020909053906.6D8647F4F@lobus.fungible.com>
From: tim@fungible.com (Tim Freeman)
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

It seems that sometimes when I use :> I need to use the form

   (e :> t)

and sometimes I need to use this form:

   (e : t1 :> t2)

Can anyone tell me how to predict when I need the more complicated
version?  I needed it in the code below, and that surprised me.

module type CONSCIOUS = sig
  type eventtype = [`VECTOR | `SCALAR | `UNIT]
  type +'a type_constraint
  class type [+'a] eventdesc =
  object
    method type_constraining_field: 'a type_constraint
  end
            
  class type [+'a] described_event =
  object
    method desc: 'a eventdesc
  end
                          
end

module Foo = functor (C: CONSCIOUS) -> struct
  let _ =
    let e: [`SCALAR] C.eventdesc = failwith "x" in
    let f = (e (* No subtype needed here. *) :> C.eventtype C.eventdesc) in
      ()
      
  let _ =
    let e: [`SCALAR] C.described_event = failwith "ouch" in
    (* The : [`SCALAR] C.described_event on the next non-comment line is
       required, even though the same type appears on the previous
       non-comment line. *)
    let f = (e: [`SCALAR] C.described_event :> C.eventtype C.described_event)
    in
      ()
end

-- 
Tim Freeman       
tim@fungible.com
GPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78 
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

