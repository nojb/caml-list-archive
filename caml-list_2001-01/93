Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA31844 for caml-red; Thu, 11 Jan 2001 10:23:16 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA23702 for <caml-list@pauillac.inria.fr>; Wed, 10 Jan 2001 20:16:10 +0100 (MET)
Received: from shell5.ba.best.com (shell5.ba.best.com [206.184.139.136])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f0AJG9T17397
	for <caml-list@inria.fr>; Wed, 10 Jan 2001 20:16:09 +0100 (MET)
Received: from localhost (bpr@localhost)
	by shell5.ba.best.com (8.9.3/8.9.2/best.sh) with ESMTP id LAA15196;
	Wed, 10 Jan 2001 11:16:01 -0800 (PST)
Date: Wed, 10 Jan 2001 11:16:01 -0800 (PST)
From: Brian Rogoff <bpr@best.com>
To: Mattias Waldau <mattias.waldau@abc.se>
cc: Caml-List <caml-list@inria.fr>
Subject: Re: Why can't I use val mover : < move : int -> unit; .. > list ->
	unit ?
In-Reply-To: <HDEEKOMJILGEIHIMAPCDCEFFDNAA.mattias.waldau@abc.se>
Message-ID: <Pine.BSF.4.21.0101101110350.535-100000@shell5.ba.best.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis@pauillac.inria.fr

On Wed, 10 Jan 2001, Mattias Waldau wrote:

> In the example below I have two separate classes with no common 
> super class. Both classes have a method 'move'.
> 
> I have no problem using the function main below that can an 
> arbitrary 'objects with move defined'. However, when I try to 
> expand the example to list of objects with move defined, I 
> cannot use this function.

The problem is sticking the objects into the list, not the function
"mover". Ocaml row polymorphism is a bit different than the OO you're 
probably used to; you need to coerce the objects to the common supertype 
before you put them in the list, so that they'll have the same type. Try
something like this 

type t = < move : int -> unit >
let _ = mover [(p :> t) ; (q :> t)] (* Don't forget the parens! *)

You can write collection building functions which do this coercion for 
you. Hope this helps...

-- Brian

> 
> How can I use the function 'mover'? How do I coerce to 
> objects with move defined? 
> 
> /mattias
> 
> 
> 
> 
> (*
> 
> let _ = mover [p;q]
> 
> This expression has type p1d_1 = < move : int -> unit >
> but is here used with type
>   p1d_2 = < move : int -> unit; only_here : int -> int >
> Only the second object type has a method only_here
> 
> *)
> 
> 
> class p1d_1 = 
>   object 
>     val mutable x = 0
>     method move d = x <- x + d
>   end
> 
> class p1d_2 = 
>   object 
>     val mutable x = 0
>     method move d = x <- x + d
>     method only_here x = x + x
>   end
> 
> let main x = 
>   x#move 3
> 
> 
> let q = new p1d_1
> let p = new p1d_2
> 
> let _ = main q
> let _ = main p
> 
> 
> let mover l = List.iter (fun x -> x#move 10) l
> 
> (* let _ = mover [p;q] *)
> 
> 
> (*
> class p1d_1 : object val mutable x : int method move : int -> unit end
> class p1d_2 :
>   object
>     val mutable x : int
>     method move : int -> unit
>     method only_here : int -> int
>   end
> val main : < move : int -> 'a; .. > -> 'a = <fun>
> val q : p1d_1 = <obj>
> val p : p1d_2 = <obj>
> val mover : < move : int -> unit; .. > list -> unit = <fun>
> 
> *)
> 
> 


