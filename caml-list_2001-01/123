Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA17444 for caml-red; Fri, 12 Jan 2001 10:17:33 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA15143 for <caml-list@pauillac.inria.fr>; Fri, 12 Jan 2001 09:25:19 +0100 (MET)
Received: from localhost.localdomain (kenny77.zip.com.au [61.8.18.205])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f0C8PGD16268
	for <caml-list@inria.fr>; Fri, 12 Jan 2001 09:25:17 +0100 (MET)
Received: from ozemail.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id TAA07143;
	Fri, 12 Jan 2001 19:23:32 +1100
Message-ID: <3A5EBF04.FF4B72E0@ozemail.com.au>
Date: Fri, 12 Jan 2001 19:23:32 +1100
From: John Max Skaller <skaller@ozemail.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Dave Berry <dave@kal.com>
CC: Markus Mottl <mottl@miss.wu-wien.ac.at>, OCAML <caml-list@inria.fr>
Subject: Re: JIT-compilation for OCaml?
References: <3145774E67D8D111BE6E00C0DF418B663AD717@nt.kal.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

Dave Berry wrote:
> 
> By "component", I mean an object with methods, asynchronous events, and
> settable properties, working in containers that know how to embed these
> components.  The origin of this approach was (I think) the Andrew project at
> CMU, many years ago.  ML modules are different.

	OK. I think we'd agree roughly on what a 'component' is.

> As for whether these are "right" or "wrong", this depends on whether you
> want to work in a small purist community or interact with the wider world.

	That isn't how I see it. Pragmatically, we must use available
technology, even if it is faulty, since _all_ the available technology
is faulty.

	For me, the issue is to recognize the flaws, and work 
towards fixing them, or finding a better solution -- probably at 
the same time as continuing to use better understood but flawed
technology when the commerical risks don't justify trying something
more experimental.

	To this end, I can understand why you might choose Java 
as an implementation language: but I think a large part of that choice
is driven by non-expert perceptions (of, for example, shareholders and
clients), rather than by technical evaluations.

	Perhaps by expertise biases my opinion. For example,
a lot of Windows code is developed using MFC, which I believe
is pretty bad. I'd never bother, since I can develop similar but
better functionality as required more quickly than learn the
quirks of an ugly system.

	Except in the case of applets, I'd never use Java,
since I know C++ well enough that I'd gain almost nothing
from it's 'advantages', and lose a lot of the advantages
of C++. More likely, I'd use Ocaml if at all possible :-)

> To date, OCaml has emphasised interoperability (e.g. with C), which is one
> of the reasons that its been successful.

	Yes, I agree. And this is one of the major components
of the design of C++: it is simultaneously a strength and a serious
weakness. My Felix language generates C++, but provides a saner
syntax/semantics (at least, that is the idea); it provides
much better interoperability than Ocaml. Some things are lost
of course!

	 But Java is not compatible with C or C++, so there was no need 
to make a language with so many of the faults it has. IMHO. :-)
Instead, the designers should have looked at the kinds of languages
researchers were working with (like ML), and provided as version of
them with a 'simplified' syntax. At least that's what I would have done,
(and indeed _is_ what I'm doing with Felix :-)

-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


