Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA12690 for caml-red; Sat, 6 Jan 2001 23:21:49 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA21716 for <caml-list@pauillac.inria.fr>; Fri, 5 Jan 2001 21:09:03 +0100 (MET)
Received: from dalilab.com ([63.203.128.164])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f05K91f16313
	for <caml-list@inria.fr>; Fri, 5 Jan 2001 21:09:01 +0100 (MET)
Received: from [63.198.73.142] (HELO kind.kindsoftware.com)
  by dalilab.com (CommuniGate Pro SMTP 3.4b7)
  with ESMTP id 385840; Fri, 05 Jan 2001 12:08:56 -0800
Date: Fri, 05 Jan 2001 12:08:55 -0800
From: "Joseph R. Kiniry" <kiniry@acm.org>
Reply-To: "Joseph R. Kiniry" <kiniry@acm.org>
To: OCAML <caml-list@inria.fr>
cc: Sven LUTHER <luther@dpt-info.u-strasbg.fr>,
        Markus Mottl <mottl@miss.wu-wien.ac.at>,
        Mattias Waldau <mattias.waldau@abc.se>
Subject: Re: JIT-compilation for OCaml?
Message-ID: <37650000.978725335@kind.kindsoftware.com>
In-Reply-To: <20010105135258.C5122@lambda.u-strasbg.fr>
X-Mailer: Mulberry/2.0.6b2 (Linux/x86)
Organization: Department of Computer Science, Caltech
X-Image-Url: http://www.cs.caltech.edu/~kiniry/graphics/jrk-8.99.jpg
X-Url: http://www.cs.caltech.edu/~kiniry/
X-Face: 9X:!41!x9hOT+cJU.gb=hXxEm6v)ZczE-':_8mlM-7^G!j%2$QC0<O2/o~}n>0w?G
        "x_1ZnY3[!+gGQD.6%=0EMBt[m|kdKsr*m=3J&r(#is5]J>&eVWNy-h^DrtO_5jES
        gK6NFKoj%c=+E?*%+\S$Rn7Y|mT(a~1Y{[$MZR[8~(bK[P4]RM2E<"5:n|2Gm!V<p
        9O8lLd#fz'kuJKM)]$C%YR7"JKuEnz\(w7`Ga(t)m|,;2%`k+c.=}qj#1~b$>7aWw
        9+K|b{`Ou,uYaNn(`QDDR<o,VAmIQkg%&~jf`b#$<z&
X-Address: Caltech Mailstop 256-80, Pasadena, CA 91125
X-Office-Phone: 626-395-3556
X-Lab-Phone: 626-395-4840
X-Fax: 626-792-4257
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Sender: weis@pauillac.inria.fr

Hello Sven,

Apologies for the off-topic-ness of this post, but since OCaml will be 
running on this architecture soon, and since this set of software is fairly 
innovative, it is likely of interest to the readers of this list.

--On Friday, January 05, 2001 13:52:58 +0100 Sven LUTHER 
<luther@dpt-info.u-strasbg.fr> wrote:

> On Wed, Jan 03, 2001 at 11:06:09AM -0800, Joseph R. Kiniry wrote:
>> I'm sorry, I should have been more explicit.  I meant that if you are
>> developing and Open Source product and you'd like large scale
>> involvement,  choosing OCaml as a source language isn't in your best
>> interest.  While it  is true that you are likely to get higher quality
>> people involved, the  source pool is several orders of magnitude smaller
>> than that of Java.
>
> A, yes, but is it not said that ocaml programs are easier to write and
> smaller in size, thus easier to maintain ? would this not compensate the
> lower number of available developpers ?

You'll get no argument for me on these points.  The only maintainence 
issues with OCaml are from a 
non-language-expert-business-investor-standpoint: the lack of a large 
corporation to support tools, the small number of existing expert 
programmers as a hiring pool, and the standard chicken-and-egg argument 
("well no one _else_ is using this language, so it _must_ not be a good 
choice!").  Note that *I* do not subscribe to the above, but I am only one 
of many investors/participants.  In my other company, as in my research 
work, I'm the boss, so to speak, so we hear a different tune there.

> BTW, about the amiga/TAO stuff ? what is your feeling about the virtual
> code or whatever they call it ? i had the feeling that it was very i386
> like, but haven't looked at it very long, but it would make it kind of a
> heresy to longtime amiga users ?

The "new" Amiga <http://www.amiga.com/> is really a set of technologies 
built on top of a virtual operating system from the Tao Group 
<http://www.tao-group.com/>.  It is a processor agnostic, clean-room OS 
built from the ground up to be scalable (i.e. run on anything from a 
wristwatch to a multi-processor server), portable (i.e. runs on over 20 
processor architectures), high performance (mostly due to an advanced 
load-time compiler that does data-flow analysis), and of elegant design 
(innovative "tools" as a unit of memory management and compilation, 
asynchronous messaging-based communication throughout, multiprocessor ready 
from day zero, etc.).

I'm really impressed with the Tao codebase.  The VP design is the nicest 
assembly language I have ever used.  (I know most Motorola, MIPS, and Intel 
assembly languages, as a reference).  It is object-based(!), has unlimited 
registers, has a clean and flexible syntax, and (by design) is very 
efficiently translated to machine code.

For the hard-core Amiga user of old (of which I am one, as well as a C=64 
and NeXT geek), it is nice to see the name rebirthed with innovative 
technology, but it is unclear if the team can follow-through with their 
typically-Amiga grandiose visions (your standard ubiquitous distributed 
components discovering each other at run-time &c).

The Amiga SDK is available for Linux and Windows and comes with extensive 
documentation, support for several languages (C, C++, Java, Python, Perl, 
and I've already ported Eiffel), and a whole host of new and innovative 
technologies.  And at $99, it's hard to beat if you are into tinkering with 
really innovative stuff.

Joe
-- 
Joseph R. Kiniry                   http://www.cs.caltech.edu/~kiniry/
California Institute of Technology       ID 78860581      ICQ 4344804


