Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA02750 for caml-red; Thu, 11 Jan 2001 18:37:55 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA00706 for <caml-list@pauillac.inria.fr>; Thu, 11 Jan 2001 13:42:58 +0100 (MET)
Received: from mrwall.kal.com (mrwall.kal.com [194.193.14.236])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id f0BCgwT03895
	for <caml-list@inria.fr>; Thu, 11 Jan 2001 13:42:58 +0100 (MET)
Received: from mrwall.kal.com [194.193.14.236]
	(HELO localhost)
	by mrwall.kal.com (AltaVista Mail V2.0J/2.0J BL25J listener)
	id 0000_0045_3a5d_aa8a_aea6;
	Thu, 11 Jan 2001 12:43:54 +0000
Received: from somewhere by smtpxd
Message-ID: <3145774E67D8D111BE6E00C0DF418B663AD717@nt.kal.com>
From: Dave Berry <dave@kal.com>
To: John Max Skaller <skaller@ozemail.com.au>, Dave Berry <dave@kal.com>
Cc: Markus Mottl <mottl@miss.wu-wien.ac.at>, OCAML <caml-list@inria.fr>
Subject: RE: JIT-compilation for OCaml?
Date: Thu, 11 Jan 2001 12:45:49 -0000
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.0.1460.8)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: weis@pauillac.inria.fr

By "component", I mean an object with methods, asynchronous events, and
settable properties, working in containers that know how to embed these
components.  The origin of this approach was (I think) the Andrew project at
CMU, many years ago.  ML modules are different.

As for whether these are "right" or "wrong", this depends on whether you
want to work in a small purist community or interact with the wider world.
To date, OCaml has emphasised interoperability (e.g. with C), which is one
of the reasons that its been successful.

Dave.

-----Original Message-----
From: John Max Skaller [mailto:skaller@ozemail.com.au]
Sent: Thursday, January 11, 2001 6:38
To: Dave Berry
Cc: Markus Mottl; OCAML
Subject: Re: JIT-compilation for OCaml?


> 4.  A growing number of commercial offerrings are based on component
> technology (ActiveX controls or Javabeans).  Support for these (or perhaps
a
> native equivalent) would be very useful.  (Again, this is easier said than
> done).

	I guess these things have the wrong kinds of 'component'.
Ocaml already has the 'right' kind of component: the module.
What is needed is to dynamically load them (i.e. some module
conforming to some statically specified interface).
 


