Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA20617 for caml-red; Sat, 6 Jan 2001 23:20:05 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA19075 for <caml-list@pauillac.inria.fr>; Fri, 5 Jan 2001 13:42:10 +0100 (MET)
Received: from dpt-info.u-strasbg.fr (dpt-info.u-strasbg.fr [130.79.6.1])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f05CgAf10762
	for <caml-list@inria.fr>; Fri, 5 Jan 2001 13:42:10 +0100 (MET)
Received: from lambda.u-strasbg.fr (lambda.u-strasbg.fr [130.79.90.63])
	by dpt-info.u-strasbg.fr (8.9.3/8.9.3) with ESMTP id NAA22425;
	Fri, 5 Jan 2001 13:40:50 +0100
Received: from luther by lambda.u-strasbg.fr with local (Exim 3.20 #1 (Debian))
	id 14EW9Y-0001LJ-00; Fri, 05 Jan 2001 13:39:28 +0100
Date: Fri, 5 Jan 2001 13:39:28 +0100
To: Mattias Waldau <mattias.waldau@abc.se>
Cc: Markus Mottl <mottl@miss.wu-wien.ac.at>, OCAML <caml-list@inria.fr>
Subject: Re: JIT-compilation for OCaml?
Message-ID: <20010105133928.B5122@lambda.u-strasbg.fr>
References: <20010102170753.A4018@miss.wu-wien.ac.at> <HDEEKOMJILGEIHIMAPCDEEOMDMAA.mattias.waldau@abc.se>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <HDEEKOMJILGEIHIMAPCDEEOMDMAA.mattias.waldau@abc.se>; from mattias.waldau@abc.se on Tue, Jan 02, 2001 at 07:16:37PM +0100
From: Sven LUTHER <luther@dpt-info.u-strasbg.fr>
Sender: weis@pauillac.inria.fr

On Tue, Jan 02, 2001 at 07:16:37PM +0100, Mattias Waldau wrote:
> Why do you want JIT? Do you use Java for regular development? It is a pain,
> the reason is
> 
> 1. Slow, slow
> 2. Big, big
> 
> and the reason that Java gets away with it, is the JIT-compiler. That mean
> that after enormous start-time, the program might achieve resonable
> performance after a couple of minutes. However, at that time, it still needs
> 10-20 extra megs, since the compiler is still loaded into memory.
> 
> The beatty of Ocaml are the fast compilers, the optimizing compiler is
> faster than javac, which only produces bytecode. It is sad that so few
> other programming language developers realizes that the speed of the
> development environment matters.

Well yes, but you forget architecture independence. With a JIT-like thing,
you could achieve native-code like speed out of byte-code. not sure though if
it is possible, or if the speed advantage is worth the trouble. 

Friendly,

Sven Luther


