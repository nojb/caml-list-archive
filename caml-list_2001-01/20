Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA07148 for caml-red; Thu, 4 Jan 2001 14:05:41 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA03667 for <caml-list@pauillac.inria.fr>; Wed, 3 Jan 2001 15:40:36 +0100 (MET)
Received: from nenuphar.saclay.cea.fr (nenuphar.saclay.cea.fr [132.166.192.7])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f03EeZb15542
	for <caml-list@inria.fr>; Wed, 3 Jan 2001 15:40:35 +0100 (MET)
Received: from muguet.saclay.cea.fr (muguet.saclay.cea.fr [132.166.192.6])
	by nenuphar.saclay.cea.fr (8.9.1a/8.9.1/CEAnet-relay-5.0.D20+Y2K) with ESMTP id PAA29266
	for <caml-list@inria.fr>; Wed, 3 Jan 2001 15:40:35 +0100 (MET)
Received: from harpie.saclay.cea.fr (harpie.saclay.cea.fr [132.166.133.152])
	by muguet.saclay.cea.fr (8.9.1a/8.9.1/CEAnet-relay-5.2.D20+Y2K) with ESMTP id PAA16150;
	Wed, 3 Jan 2001 15:40:34 +0100 (MET)
Received: by harpie.saclay.cea.fr (8.8.8+Sun/CEANET.2.0.1)
	id PAA00824; Wed, 3 Jan 2001 15:40:32 +0100 (MET)
From: STARYNKEVITCH Basile <Basile.Starynkevitch@cea.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Message-ID: <14931.14816.249732.816455@gargle.gargle.HOWL>
Date: Wed, 3 Jan 2001 15:40:32 +0100
To: "Mattias Waldau" <mattias.waldau@tacton.se>
Cc: "OCAML" <caml-list@inria.fr>
Subject: RE: JIT-compilation for OCaml?
In-Reply-To: <HDEEKOMJILGEIHIMAPCDGEPFDMAA.mattias.waldau@tacton.se>
References: <20010102203051.A18481@miss.wu-wien.ac.at>
	<HDEEKOMJILGEIHIMAPCDGEPFDMAA.mattias.waldau@tacton.se>
X-Mailer: VM 6.76 under 21.1 (patch 12) "Channel Islands" XEmacs Lucid
Content-Transfer-Encoding: 8bit
Content-Transfer-Encoding: 8bit
Sender: weis@pauillac.inria.fr

>>>>> "Mattias" == Mattias Waldau <mattias.waldau@tacton.se> writes:

    Mattias> If you just want portability, then why not generate
    Mattias> Java-byte code instead of Ocaml-bytecode. 

It is well known (e.g. see the Kawa implementation of Scheme on the
JVM) that the Java Virtual Machine is not well suited for functional
programming: function closures and tail-recursion calls (which are
actually jump with arguments) do not exist in the JVM, and emulating
them (e.g. closures as instances of specially generated classes) is
quite inefficient. The JVM is not as universal as Sun's marketing hype
claim it is...

On the contrary the Ocaml virtual machine was (of course) designed for
functional programming, and efficiently implement tails calls and
closure constructions.

Regards and Happy New Year to all,

N.B. Any opinions expressed here are only mine, and not of my organization.
N.B. Les opinions exprimees ici me sont personnelles et n engagent pas le CEA.

---------------------------------------------------------------------
Basile STARYNKEVITCH   ----  Commissariat à l Energie Atomique 
DTA/LETI/DEIN/SLA * CEA/Saclay b.528 (p111f) * 91191 GIF/YVETTE CEDEX * France
phone: 1,69.08.60.55; fax: 1.69.08.83.95 home: 1,46.65.45.53
email: Basile point Starynkevitch at cea point fr 
web perso: http://perso.wanadoo.fr/starynkevitch/basile/


