Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA07949 for caml-red; Thu, 4 Jan 2001 14:09:08 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA07722 for <caml-list@pauillac.inria.fr>; Wed, 3 Jan 2001 16:54:41 +0100 (MET)
Received: from localhost.localdomain (cartman92.zip.com.au [61.8.20.220])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f03FsZT04792
	for <caml-list@inria.fr>; Wed, 3 Jan 2001 16:54:36 +0100 (MET)
Received: from ozemail.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id CAA16389;
	Thu, 4 Jan 2001 02:51:53 +1100
Message-ID: <3A534A99.93817EA9@ozemail.com.au>
Date: Thu, 04 Jan 2001 02:51:53 +1100
From: John Max Skaller <skaller@ozemail.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Markus Mottl <mottl@miss.wu-wien.ac.at>
CC: Mattias Waldau <mattias.waldau@abc.se>, OCAML <caml-list@inria.fr>
Subject: Re: JIT-compilation for OCaml?
References: <20010102170753.A4018@miss.wu-wien.ac.at> <HDEEKOMJILGEIHIMAPCDEEOMDMAA.mattias.waldau@abc.se> <20010102203051.A18481@miss.wu-wien.ac.at>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

Markus Mottl wrote:

> > the reason is
> >
> > 1. Slow, slow
> > 2. Big, big
> 
> Maybe that's because the Java JIT-compilers were not written by Xavier? ;)

	IMHO: the reason is that Ocaml is based on theory, 
extended and modified over time with experience. Congratulations
to the Ocaml team for refusing to compromise a sound theoretical
basis.
 
> But the JIT-compiled/interpreted byte code seems to be pretty fast: I have
> tried it with a few mini-benchmarks to see whether this JIT-technology
> is of any worth. Really not bad...

	Why bother? The native code compiler is so fast,
it can compile a whole system faster than Java can load 
an already compiled one :-)

> Certainly! I definitely don't want to replace the normal byte code
> interpreter with a purely JIT-one. My motivation was rather portability +
> speed rather than speed alone. For the latter "ocamlopt" is more than
> good enough, and for portability we have the byte code compiler. 

	Actually, I think ocamlopt is _more_ portable.
There's no mucking around with custom run-times, etc.

> I haven't tried the Java-libraries so far. The OCaml-ones are quite
> usable, but if you can tell us what Java has that OCaml is missing,
> just tell us (in time! ;)

	That's easy: a half way decent GUI.
If Ocaml had a decent GUI API that worked on just X- and MS- Windows
systems, it would be a killer. Tk just doesn't cut it anymore.
GTK has promise, but the widgets are immature and lacking functionality.
Java's Swing is a bit messy, but it does provide a rich variety
of configurable widgets, and some documentation. :-(


-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


