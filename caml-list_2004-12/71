Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 5F3C1BB81
	for <caml-list@yquem.inria.fr>; Wed,  8 Dec 2004 11:53:52 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iB8ArqJa025486
	for <caml-list@yquem.inria.fr>; Wed, 8 Dec 2004 11:53:52 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA01359 for <caml-list@pauillac.inria.fr>; Wed, 8 Dec 2004 11:53:51 +0100 (MET)
Received: from [IPv6:::1] (yquem.inria.fr [128.93.8.37])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iB8ArpFL025483
	for <caml-list@inria.fr>; Wed, 8 Dec 2004 11:53:51 +0100
Mime-Version: 1.0 (Apple Message framework v619)
In-Reply-To: <41B62407.4020102@inria.fr>
References: <20041206195527.GA32094@draco.skynet> <41B557D4.2000306@inria.fr> <076FEF06-4856-11D9-8195-000D9345235C@inria.fr> <41B5C4C8.9040701@ps.uni-sb.de> <A940F6C2-4877-11D9-8195-000D9345235C@inria.fr> <41B5F1B2.3000503@inria.fr> <9296F5C2-4893-11D9-8195-000D9345235C@inria.fr> <41B62407.4020102@inria.fr>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <74A16EF6-4907-11D9-8195-000D9345235C@inria.fr>
Content-Transfer-Encoding: 7bit
From: Damien Doligez <damien.doligez@inria.fr>
Subject: Re: [Caml-list] Type constraints
Date: Wed, 8 Dec 2004 11:53:55 +0100
To: caml users <caml-list@inria.fr>
X-Mailer: Apple Mail (2.619)
X-Miltered: at nez-perce with ID 41B6DD40.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 41B6DD3F.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 caml-list:01 frisch:01 wrote:01 wrote:01 struct:01 hmmm:01 ...:98 ...:98 polymorphic:01 doligez:01 doligez:01 modules:01 constraints:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

On 7 Dec 2004, at 22:43, Alain Frisch wrote:

> Damien Doligez wrote:
>
>> So the answer to your original question is: the type is not 
>> generalized
>> because in some cases the let-module construct is not safely 
>> polymorphic.

[...]

> So I don't understand why the same cannot apply to local modules. If 
> the let-module-in were declared "safe" for the value restriction, 
> shouldn't
>
> let module M = struct let v = ref [] end in M.v
>
> yield a non-generalized type for the same reason as for the non-local
> case (and not because of the value restriction) ?

Hmmm...  Now I don't know whether it's safe or not, and I don't know
whether someone checked its safety before excluding it from the value
restriction code...

-- Damien

