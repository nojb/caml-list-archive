Return-Path: <will@exomi.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 1C024BB81
	for <caml-list@yquem.inria.fr>; Tue, 14 Dec 2004 10:10:06 +0100 (CET)
Received: from will.iki.fi (will.iki.fi [217.169.64.20])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id iBE9A5jJ011987
	for <caml-list@yquem.inria.fr>; Tue, 14 Dec 2004 10:10:05 +0100
Received: from ZMCXXXIII.dsl.saunalahti.fi (ZMCXXXIII.dsl.saunalahti.fi [85.76.70.234])
	by will.iki.fi (Postfix) with ESMTP id 1D39B1A;
	Tue, 14 Dec 2004 11:10:03 +0200 (EET)
Subject: Re: [Caml-list] Using OCaml in a kernel
From: Ville-Pertti Keinonen <will@exomi.com>
To: Jonathan Roewen <jonathan.roewen@gmail.com>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <ad8cfe7e041213174349387304@mail.gmail.com>
References: <ad8cfe7e04120516485e090a7f@mail.gmail.com>
	 <1102320552.663.45.camel@localhost>
	 <ad8cfe7e04121013265eff7d60@mail.gmail.com>
	 <20041211.080036.25909489.garrigue@math.nagoya-u.ac.jp>
	 <ad8cfe7e041213174349387304@mail.gmail.com>
Content-Type: text/plain
Date: Tue, 14 Dec 2004 11:09:59 +0200
Message-Id: <1103015399.647.7.camel@localhost>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 FreeBSD GNOME Team Port 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 41BEADED.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 wrote:01 pervasives:01 libasmrun:01 libasmrun:01 byterun:01 functions:01 kernel:01 undefined:01 undefined:01 caml:02 caml:02 assembler:02 string:03 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

On Tue, 2004-12-14 at 14:43 +1300, Jonathan Roewen wrote:

> Three new undefined symbols left:
> 
> : undefined reference to `caml_compare'
> : undefined reference to `caml_greaterequal'
> : undefined reference to `caml_lessequal'
> 
> these are from pervasives.o, string.o, and list.o in libasmrun.a. If
> can get some assembler niceties or whatever for those, then we should
> hopefully be set for next phase of linker hell ;-)

They should be in libasmrun.  These particular functions should be
coming from byterun/compare.c.


