Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id AD318BB81
	for <caml-list@yquem.inria.fr>; Tue,  7 Dec 2004 18:44:33 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id iB7HiXEB003008
	for <caml-list@yquem.inria.fr>; Tue, 7 Dec 2004 18:44:33 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA03995 for <caml-list@pauillac.inria.fr>; Tue, 7 Dec 2004 18:44:32 +0100 (MET)
Received: from [IPv6:::1] (yquem.inria.fr [128.93.8.37])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iB7HiWfN015369
	for <caml-list@inria.fr>; Tue, 7 Dec 2004 18:44:32 +0100
Mime-Version: 1.0 (Apple Message framework v619)
In-Reply-To: <41B5C4C8.9040701@ps.uni-sb.de>
References: <20041206195527.GA32094@draco.skynet> <41B557D4.2000306@inria.fr> <076FEF06-4856-11D9-8195-000D9345235C@inria.fr> <41B5C4C8.9040701@ps.uni-sb.de>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <A940F6C2-4877-11D9-8195-000D9345235C@inria.fr>
Content-Transfer-Encoding: 7bit
From: Damien Doligez <damien.doligez@inria.fr>
Subject: Re: [Caml-list] Type constraints
Date: Tue, 7 Dec 2004 18:44:36 +0100
To: caml users <caml-list@inria.fr>
X-Mailer: Apple Mail (2.619)
X-Miltered: at concorde with ID 41B5EC01.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 41B5EC00.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 caml-list:01 rossberg:01 wrote:01 struct:01 polymorphic:01 polymorphic:01 doligez:01 doligez:01 andreas:01 constraints:01 evaluates:02 module:03 let:03 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 


On 7 Dec 2004, at 15:57, Andreas Rossberg wrote:

> Is this really a counter-example? I don't see any problem with making 
> it polymorphic - it evaluates to ref, and ref can happily be 
> polymorphic.

Yes, well I simplified it a bit too much.  Try this instead:

   let module M = struct let v = ref [] end in M.v;;

-- Damien

