Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA01531; Wed, 9 Apr 2003 04:40:44 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA01684 for <caml-list@pauillac.inria.fr>; Wed, 9 Apr 2003 04:40:43 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from mail.fltrp.com ([211.101.185.130])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h392efX22552
	for <caml-list@inria.fr>; Wed, 9 Apr 2003 04:40:41 +0200 (MET DST)
Received: from delbian [129.0.5.6] by mail.fltrp.com with ESMTP
  (SMTPD32-7.13) id A7E199024E; Wed, 09 Apr 2003 10:39:29 +0800
From: Yang Shouxun <yangsx@fltrp.com>
Organization: FLTRP
To: caml-list@inria.fr
Subject: Re: [Caml-list] stack overflow
Date: Wed, 9 Apr 2003 10:45:25 +0800
User-Agent: KMail/1.5.1
References: <Pine.LNX.4.44.0304081914280.8801-100000@grace.speakeasy.net>
In-Reply-To: <Pine.LNX.4.44.0304081914280.8801-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="gb2312"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200304091045.25094.yangsx@fltrp.com>
X-Spam: no; 0.00; shouxun:01 yangsx:01 fltrp:01 caml-list:01 brogoff:01 000,:01 implicitly:01 heared:01 dataset:01 speakeasy:01 overflow:02 tree:02 maximal:02 stack:02 thread:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wednesday 09 April 2003 10:19, brogoff@speakeasy.net wrote:
> The most likely explanation is that you created a very large list, say of
> length over 50_000, and tried to apply some non-tail-recursive operation to
> it, perhaps even implicitly. There was a very recent thread on this topic.
>
> The second explanation is that you wrote some (non-tail) recursive function
> and it blew the stack.

Yes, the decision tree building function is not tail recursive. I heared 
people saying C4.5 (in C) also has stack overflow problem when the training 
dataset becomes very large.

I don't know how to write a tail recursive version to build trees.  If there 
are not that many continuous attributes and the dataset is not so large, the 
tree stops growing before stack overflow.

Can one know the maximal number of calls before it overflow the stack?

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

