Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA28306; Tue, 15 Apr 2003 22:19:55 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA28759 for <caml-list@pauillac.inria.fr>; Tue, 15 Apr 2003 22:19:53 +0200 (MET DST)
Received: from eposta.kablonet.com.tr ([62.248.102.66])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h3FKJo913383
	for <caml-list@inria.fr>; Tue, 15 Apr 2003 22:19:51 +0200 (MET DST)
Received: (qmail 60692 invoked by uid 0); 15 Apr 2003 20:27:16 -0000
Received: from unknown (HELO 195.174.169.185) (exa@195.174.169.185)
  by 0 with SMTP; 15 Apr 2003 20:27:16 -0000
From: Eray Ozkural <exa@kablonet.com.tr>
Reply-To: erayo@cs.bilkent.edu.tr
Organization: Bilkent University CS Dept.
To: caml-list@inria.fr
Subject: [Caml-list] Module intf/impl annoyances
Date: Sat, 12 Apr 2003 19:18:33 +0300
User-Agent: KMail/1.5.9
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Message-Id: <200304121918.33443.exa@kablonet.com.tr>
X-Spam: no; 0.00; eray:01 ozkural:01 intf:01 impl:01 annoyances:01 mli:01 struct:01 erayo:01 bilkent:01 ankara:01 kde:01 malfunction:01 ariza:01 semantics:01 sci:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi there,

I ran into what I think is a counter-intuitive feature in separate compilation 
of modules that I want to share with you.

It looks like others also had problems with having to dupe type signatures in 
both .mli and .ml files, so is there a working proposal to that end?

Since the .mli and .ml files are properly seen as sig and struct declarations, 
it looks as if a slight change in the semantics of struct would solve the 
problem: Those types declared in the corresponding sig but not redeclared in 
the struct are part of the struct. Is that really a reasonable and 
transparent solution?

The "other" cool functional language solves this by qualifying what to export; 
having the advantage that you declare types only once.

Thanks,

-- 
Eray Ozkural (exa) <erayo@cs.bilkent.edu.tr>
Comp. Sci. Dept., Bilkent University, Ankara  KDE Project: http://www.kde.org
www: http://www.cs.bilkent.edu.tr/~erayo  Malfunction: http://mp3.com/ariza
GPG public key fingerprint: 360C 852F 88B0 A745 F31B  EA0F 7C07 AE16 874D 539C


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

