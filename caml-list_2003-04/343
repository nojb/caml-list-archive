Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA20390; Mon, 28 Apr 2003 16:43:08 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA21069 for <caml-list@pauillac.inria.fr>; Mon, 28 Apr 2003 16:43:06 +0200 (MET DST)
Received: from mailhost.tni.fr (firewall.tni.fr [195.25.255.61])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h3SEh5H01935
	for <caml-list@inria.fr>; Mon, 28 Apr 2003 16:43:05 +0200 (MET DST)
Received: from groscool.tni.fr ([195.25.255.1]) by mailhost.tni.fr
          (Netscape Messaging Server 3.62)  with SMTP id 3015;
          Mon, 28 Apr 2003 16:42:44 +0200
Received: from 192.168.7.60 by groscool.tni.fr (InterScan E-Mail VirusWall NT); Mon, 28 Apr 2003 16:42:44 +0200 (Paris, Madrid (heure d'été))
Message-ID: <3EAD3CCF.C412B078@tni.fr>
Date: Mon, 28 Apr 2003 16:38:07 +0200
From: "sebastien FURIC" <sebastien.furic@tni-valiosys.com>
X-Mailer: Mozilla 4.78 [fr] (Windows NT 5.0; U)
X-Accept-Language: fr
MIME-Version: 1.0
To: David Brown <caml-list@davidb.org>
CC: Siegfried Gonzi <siegfried.gonzi@stud.uni-graz.at>,
        Noel Welsh <noelwelsh@yahoo.com>, caml-list@inria.fr
Subject: Re: [Caml-list] Easy solution in OCaml?
References: <20030427164326.34082.qmail@web41211.mail.yahoo.com> <3EAD18FC.7050108@stud.uni-graz.at> <20030428142223.GA3924@opus.davidb.org>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; furic:01 tni-valiosys:01 caml-list:01 siegfried:01 gonzi:01 recursion:01 abstraction:01 closures:01 smalltalk:01 ecrit:01 ocaml:01 labelled:01 lisp:01 0200,:01 side-effects:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk



David Brown a écrit :
> 
> On Mon, Apr 28, 2003 at 02:05:16PM +0200, Siegfried Gonzi wrote:
> 
> > Lisp dialects, they have taken a purely functional approach. Today's
> > Lisp dialects, foremostly Common Lisp, don't see any problems in making
> > use of side effects, using iteration instead of recursion, using
> > object-oriented abstraction if useful for the problem at hand, and so
> > on. Just use the best abstraction for your current problem.
> 
> So having feature in addition to functional features disqualifies a
> language from being labelled.  All of the accusations given certainly
> apply to Ocaml as well.  Having objects and side-effects doesn't seem to
> stop me from doing functional programming.
> 
> To me, the core feature of functional programming are first class
> closures.  Everything else just makes it more convenient.

 So Smalltalk is a functional language ;-)
 Maybe tail call optimisation has to be considered as a necessary
feature for a langage to qualify ?
 
> 
> Why someone would think using the best abstraction for your current
> problem is a bad thing is beyond me.  I think that is one of the
> strengths of Ocaml, is that it can accomodate this so well.

 Agreed.

 Cheers,
 Sébastien

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

