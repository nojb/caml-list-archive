Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA29659; Mon, 28 Apr 2003 20:15:27 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA29871 for <caml-list@pauillac.inria.fr>; Mon, 28 Apr 2003 20:15:25 +0200 (MET DST)
Received: from eposta.kablonet.com.tr ([62.248.102.66])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h3SIFLT28738
	for <caml-list@inria.fr>; Mon, 28 Apr 2003 20:15:23 +0200 (MET DST)
Received: (qmail 34294 invoked by uid 0); 28 Apr 2003 18:22:41 -0000
Received: from unknown (HELO 195.174.169.185) (exa@195.174.169.185)
  by 0 with SMTP; 28 Apr 2003 18:22:41 -0000
From: Eray Ozkural <exa@kablonet.com.tr>
Reply-To: erayo@cs.bilkent.edu.tr
Organization: Bilkent University CS Dept.
To: David Brown <caml-list@davidb.org>
Subject: Re: [Caml-list] Easy solution in OCaml?
Date: Mon, 28 Apr 2003 21:14:37 +0300
User-Agent: KMail/1.5.9
References: <20030427164326.34082.qmail@web41211.mail.yahoo.com> <3EAD18FC.7050108@stud.uni-graz.at> <20030428142223.GA3924@opus.davidb.org>
In-Reply-To: <20030428142223.GA3924@opus.davidb.org>
Cc: caml-list@inria.fr
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200304282114.37271.exa@kablonet.com.tr>
X-Spam: no; 0.00; eray:01 ozkural:01 caml-list:01 closures:01 haskell:01 orthogonal:01 lacking:01 declarative:01 cardelli:01 erayo:01 bilkent:01 ankara:01 kde:01 malfunction:01 ariza:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Monday 28 April 2003 17:22, David Brown wrote:
> To me, the core feature of functional programming are first class
> closures.  Everything else just makes it more convenient.

Well said. I would also like to say here that I fail to see what distinguishes 
the core of ocaml and haskell so much from a semantics point of view!!!!!!! 
Both are functional languages with sequential constructs and advanced type 
systems IMHO. Minus the object system, the module system of ocaml can be 
viewed as  a more advanced kind of "type class" in haskell (assuming we can 
compare constructs inexactly!!) The really cool object system comes as a 
bonus...

Being an "amateur" PL designer, I think both languages are very orthogonal but 
they are both lacking the degree of parallelism that would make me think of 
them as purely declarative...

There is also another point that I think is worthy of making. You can extend 
ocaml rather easily using p4. I think in the future a safe and easy kind of 
semantic extensibility will be the way to go, like Cardelli described in that 
paper... :P

Not intended as flamery :)

Regards,

-- 
Eray Ozkural (exa) <erayo@cs.bilkent.edu.tr>
Comp. Sci. Dept., Bilkent University, Ankara  KDE Project: http://www.kde.org
www: http://www.cs.bilkent.edu.tr/~erayo  Malfunction: http://mp3.com/ariza
GPG public key fingerprint: 360C 852F 88B0 A745 F31B  EA0F 7C07 AE16 874D 539C

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

