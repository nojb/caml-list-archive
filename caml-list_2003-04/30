Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA17013; Thu, 3 Apr 2003 02:52:18 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA16382 for <caml-list@pauillac.inria.fr>; Thu, 3 Apr 2003 02:52:17 +0200 (MET DST)
Received: from grace.speakeasy.org (grace.speakeasy.org [216.254.0.2])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id h330qF520607
	for <caml-list@inria.fr>; Thu, 3 Apr 2003 02:52:16 +0200 (MET DST)
Received: (qmail 22269 invoked by uid 36130); 3 Apr 2003 00:52:14 -0000
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 3 Apr 2003 00:52:14 -0000
Date: Wed, 2 Apr 2003 16:52:14 -0800 (PST)
From: brogoff@speakeasy.net
To: Gregory Morrisett <jgm@CS.Cornell.EDU>
cc: Ville-Pertti Keinonen <will@exomi.com>,
        Andreas Rossberg <rossberg@ps.uni-sb.de>,
        "caml-list@inria.fr" <caml-list@inria.fr>
Subject: RE: [Caml-list] Bug?  Printf, %X and negative numbers
In-Reply-To: <FB4F95390166B14C90E4DD950D69D6E216305D@EXCHVS2.cs.cornell.edu>
Message-ID: <Pine.LNX.4.44.0304021641520.13365-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; brogoff:01 caml-list:01 bug:01 printf:01 morrisett:01 mlton:01 avoids:01 monomorphic:01 implying:01 recursion:01 okasaki's:01 non-uniform:01 compiles:01 compiler:01 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2 Apr 2003, Gregory Morrisett wrote:
> MLTON avoids these issues by specializing polymorphic code at
> all of its uses so that it becomes monomorphic (not unlike C++), 
> at the price of separate compilation.

And, as I think you're implying, polymorphic recursion. 

In Okasaki's PFDS book, he describes the techniques you'd use to convert 
non-uniform types to uniform ones and rewriting the functions. Has anyone 
played with the idea of automating these transformations, so that a MLTON like 
monomorphizing compiler could work for a language with non uniform recursion? 

No, I'm not suggesting that for OCaml. I agree that the OCaml implementation is 
at some sweet spot where it isn't too complex, is very efficient, compiles 
quickly, etc. 

-- Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

