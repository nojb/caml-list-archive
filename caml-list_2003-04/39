Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA04178; Thu, 3 Apr 2003 16:24:17 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA04376 for <caml-list@pauillac.inria.fr>; Thu, 3 Apr 2003 16:24:15 +0200 (MET DST)
Received: from yellow.csi.cam.ac.uk (yellow.csi.cam.ac.uk [131.111.8.67])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h33EOE900871
	for <caml-list@inria.fr>; Thu, 3 Apr 2003 16:24:14 +0200 (MET DST)
Received: from da209 (helo=localhost)
	by yellow.csi.cam.ac.uk with local-esmtp (Exim 4.12)
	id 1915dW-0001iX-00; Thu, 03 Apr 2003 15:24:14 +0100
Date: Thu, 3 Apr 2003 15:24:14 +0100 (BST)
From: Daniel Andor <da209@cam.ac.uk>
X-X-Sender: da209@yellow.csi.cam.ac.uk
To: caml-list@inria.fr
cc: ocaml_beginners@yahoogroups.com
Subject: [Caml-list] Dynamic Programming
Message-ID: <Pine.SOL.4.44.0304031510280.12177-100000@yellow.csi.cam.ac.uk>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; recursion:01 haskell:01 alignment:01 92.:99 ocaml:01 lazy:02 essentially:02 algorithm:03 dynamic:03 algorithms:03 explanation:04 wondering:04 efficiency:05 implement:05 daniel:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi,

I'm wondering about implementation of dynamic programming algorithms in
OCaml -- essentially, how does it relate to recursion?  Does anyone have a
small example or good explanation?

At the moment I'm trying to implement Neville's algorithm, but of course
there are many other practical examples from bioinformatics etc.

There's an interesting webpage about dynamic programming in Haskell (which
is lazy):
http://www.csse.monash.edu.au/~lloyd/tildeStrings/Alignment/92.IPL.html
How would that approach translate to OCaml without losing all efficiency?

Thanks,
Daniel.


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

