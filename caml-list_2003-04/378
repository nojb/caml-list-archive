Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA03866; Tue, 29 Apr 2003 17:46:38 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA03762 for <caml-list@pauillac.inria.fr>; Tue, 29 Apr 2003 17:46:36 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h3TFkZH07154
	for <caml-list@inria.fr>; Tue, 29 Apr 2003 17:46:35 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (markus@localhost.ai.univie.ac.at [127.0.0.1])
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian-6.3) with ESMTP id h3TFkZwf032272;
	Tue, 29 Apr 2003 17:46:35 +0200
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian-6.3) id h3TFkZIf032271;
	Tue, 29 Apr 2003 17:46:35 +0200
Date: Tue, 29 Apr 2003 17:46:35 +0200
From: Markus Mottl <markus@oefai.at>
To: Hal Daume III <hdaume@ISI.EDU>
Cc: OCaml List <caml-list@inria.fr>
Subject: Re: [Caml-list] Looking for a real array
Message-ID: <20030429154634.GA32175@fichte.ai.univie.ac.at>
Mail-Followup-To: Hal Daume III <hdaume@ISI.EDU>,
	OCaml List <caml-list@inria.fr>
References: <20030429105243.GA30024@fichte.ai.univie.ac.at> <Pine.GSO.4.21.0304290709250.24660-100000@moussor.isi.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.GSO.4.21.0304290709250.24660-100000@moussor.isi.edu>
User-Agent: Mutt/1.4.1i
X-Spam: no; 0.00; caml-list:01 unboxed:01 infer:01 foo:01 arrays:01 compiler:01 bigarray:01 mottl:02 float:02 compile:02 module:03 wrote:03 abstract:03 markus:04 array:04 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 29 Apr 2003, Hal Daume III wrote:
> > to use the Bigarray module unless you need very large arrays. Normal
> > float arrays, too, are unboxed, but only when the compiler can infer at
> > compile time that they are guaranteed to be float arrays.
> 
> Does this also apply if I have an abstract type defined in another module:
> 
>   > type foo = float
> 
> and then have a foo array?

No, because the compiler cannot see then that it is a float when the
type is abstract. Internally (in the module implementation) however,
the compiler may well use unboxed foo arrays.

Regards,
Markus Mottl

-- 
Markus Mottl          http://www.oefai.at/~markus          markus@oefai.at

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

