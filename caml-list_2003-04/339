Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA15823; Mon, 28 Apr 2003 15:17:09 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA13017 for <caml-list@pauillac.inria.fr>; Mon, 28 Apr 2003 15:17:07 +0200 (MET DST)
Received: from teutates.kfunigraz.ac.at (TEUTATES.kfunigraz.ac.at [143.50.129.26])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h3SDH7T17941
	for <caml-list@inria.fr>; Mon, 28 Apr 2003 15:17:07 +0200 (MET DST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by teutates.kfunigraz.ac.at (Postfix) with ESMTP
	id 586B53D2165; Mon, 28 Apr 2003 15:17:05 +0200 (CEST)
Received: from teutates.kfunigraz.ac.at ([127.0.0.1])
 by localhost (teutates.kfunigraz.ac.at [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 12719-10; Mon, 28 Apr 2003 15:17:02 +0200 (CEST)
Received: from stud.uni-graz.at (IGAM08AV.kfunigraz.ac.at [143.50.39.35])
	by teutates.kfunigraz.ac.at (Postfix) with ESMTP
	id 87B623D2228; Mon, 28 Apr 2003 15:17:00 +0200 (CEST)
Message-ID: <3EAD18FC.7050108@stud.uni-graz.at>
Date: Mon, 28 Apr 2003 14:05:16 +0200
From: Siegfried Gonzi <siegfried.gonzi@stud.uni-graz.at>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.8) Gecko/20020204
X-Accept-Language: en-us
MIME-Version: 1.0
To: Noel Welsh <noelwelsh@yahoo.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Easy solution in OCaml?
References: <20030427164326.34082.qmail@web41211.mail.yahoo.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: by amavisd-new at stud.uni-graz.at
X-Spam: no; 0.00; siegfried:01 gonzi:01 stud:99 caml-list:01 haskell:01 recursion:01 abstraction:01 monads:01 circumvents:01 monadic:01 ocaml:01 lisp:01 readable:01 syntax:02 purely:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Noel Welsh wrote:

>Let me just check - you don't consider Scheme to be a
>functional language?
>

I think the following nails it down:

==

Historically, Lisp was one of the first languages to accomodate a 
functional programming style, and for this reason, some people still 
call it a functional programming language. However, that's not correct 
in a strict sense. Several paths have been followed since then, and 
while languages like Miranda and Haskell were surely influenced by early 
Lisp dialects, they have taken a purely functional approach. Today's 
Lisp dialects, foremostly Common Lisp, don't see any problems in making 
use of side effects, using iteration instead of recursion, using 
object-oriented abstraction if useful for the problem at hand, and so 
on. Just use the best abstraction for your current problem.
==

The above quote was pinched up from comp.lang.lisp; they had there 
discussions the other day. Okay, Scheme is considerd even more 
"functional" than Lisp, but the above quote is, I think, valid for 
Scheme too.

Monads are not mentioned in the above quote, but I would like to stress 
that Clean circumvents monadic file input-output but ensures a 
functional style with no side effects! I think they were the first to 
success in this way.

>
>Just about any alternative syntax would be cleaner
>than O'Caml! ;-)
>
>Noel, Scheme hacker and O'Caml lurker
>
One thing which I would like to have solved for myself:

Will  my Scheme code be readable a year later ? Or would in such a case 
Clean or OCaml pay off?

S. Gonzi


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

