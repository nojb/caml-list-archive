Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA20037; Mon, 28 Apr 2003 16:22:34 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA20038 for <caml-list@pauillac.inria.fr>; Mon, 28 Apr 2003 16:22:33 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from opus.davidb.org (66-75-152-1.san.rr.com [66.75.152.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h3SEMWH00139
	for <caml-list@inria.fr>; Mon, 28 Apr 2003 16:22:32 +0200 (MET DST)
Received: from davidb by opus.davidb.org with local (Exim 3.31 #1 (Debian))
	id 19A9WR-00011s-00; Mon, 28 Apr 2003 07:22:23 -0700
Date: Mon, 28 Apr 2003 07:22:23 -0700
From: David Brown <caml-list@davidb.org>
To: Siegfried Gonzi <siegfried.gonzi@stud.uni-graz.at>
Cc: Noel Welsh <noelwelsh@yahoo.com>, caml-list@inria.fr
Subject: Re: [Caml-list] Easy solution in OCaml?
Message-ID: <20030428142223.GA3924@opus.davidb.org>
References: <20030427164326.34082.qmail@web41211.mail.yahoo.com> <3EAD18FC.7050108@stud.uni-graz.at>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <3EAD18FC.7050108@stud.uni-graz.at>
User-Agent: Mutt/1.4i
X-Spam: no; 0.00; caml-list:01 siegfried:01 gonzi:01 recursion:01 abstraction:01 closures:01 ocaml:01 labelled:01 lisp:01 0200,:01 side-effects:02 purely:02 objects:02 dave:03 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, Apr 28, 2003 at 02:05:16PM +0200, Siegfried Gonzi wrote:

> Lisp dialects, they have taken a purely functional approach. Today's 
> Lisp dialects, foremostly Common Lisp, don't see any problems in making 
> use of side effects, using iteration instead of recursion, using 
> object-oriented abstraction if useful for the problem at hand, and so 
> on. Just use the best abstraction for your current problem.

So having feature in addition to functional features disqualifies a
language from being labelled.  All of the accusations given certainly
apply to Ocaml as well.  Having objects and side-effects doesn't seem to
stop me from doing functional programming.

To me, the core feature of functional programming are first class
closures.  Everything else just makes it more convenient.

Why someone would think using the best abstraction for your current
problem is a bad thing is beyond me.  I think that is one of the
strengths of Ocaml, is that it can accomodate this so well.

Dave Brown

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

