Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA22303; Thu, 12 Jul 2001 00:20:18 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA22299 for <caml-list@pauillac.inria.fr>; Thu, 12 Jul 2001 00:20:17 +0200 (MET DST)
Received: from smtp1.cswv.com (smtp1.cswv.com [4.17.129.17])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6BMKGX26117
	for <caml-list@inria.fr>; Thu, 12 Jul 2001 00:20:16 +0200 (MET DST)
Received: from smtp1.cswv.com ([4.17.129.17]) by smtp1.cswv.com  with Microsoft SMTPSVC(5.5.1877.197.19);
	 Wed, 11 Jul 2001 18:20:32 -0400
Received: FROM exchange1.cswv.com BY smtp1.cswv.com ; Wed Jul 11 18:20:31 2001 -0400
Received: by exchange1.cswv.com with Internet Mail Service (5.5.2653.19)
	id <NJMPJRNF>; Wed, 11 Jul 2001 18:23:08 -0400
Message-ID: <B1E4D3274D57D411BE8400D0B783FF322E8656@exchange1.cswv.com>
From: "Krishnaswami, Neel" <neelk@cswcasa.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] A G'Caml question" + additional info
Date: Wed, 11 Jul 2001 18:23:04 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2653.19)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Markus Mottl [mailto:markus@mail4.ai.univie.ac.at] writes:
> On Wed, 11 Jul 2001, Bruce Hoult wrote:
> > But the language itself seems to be starting to rival C++ for sheer
> > complexity. When you want to do something you seem to have a choice
> > of using this feature, or *this* one, or *this* newly developed one.
> 
> Having choices is not necessarily bad, being forced to using many
> alternatives is. I think that OCaml has succeeded quite well so far in
> keeping different features apart as one can see in the standard library,
> which can be used with the core language + modules alone. I hope this
> will stay so!

Permit me to disagree. I find nearly all of OCaml's features highly
useful and orthogonal, and I am only working on medium size projects. 

For instance, I recently wrote yet another set implementation, because 
the functorial interface to the Set module in the standard library 
wouldn't let me use it in a fully polymorphic fashion. If the Set 
library had been written using OCaml's object system, then I would 
not have had to redo my own. From this experience I conclude that the 
right thing is to use the features that offer the nicest degree of
modularity and reusability.

I can offer a demonstration if you are interested, but to illustrate 
I'd need to show both approaches in about 75 lines of code, which may 
be too much for a public email. 

--
Neel Krishnaswami
neelk@cswcasa.com
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

