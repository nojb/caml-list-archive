Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA29964; Mon, 16 Jul 2001 22:30:17 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA29974 for <caml-list@pauillac.inria.fr>; Mon, 16 Jul 2001 22:30:16 +0200 (MET DST)
Received: from smtp1.cswv.com (smtp1.cswv.com [4.17.129.17])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f6GKUFT10565
	for <caml-list@inria.fr>; Mon, 16 Jul 2001 22:30:15 +0200 (MET DST)
Received: from smtp1.cswv.com ([4.17.129.17]) by smtp1.cswv.com  with Microsoft SMTPSVC(5.5.1877.197.19);
	 Mon, 16 Jul 2001 16:31:16 -0400
Received: FROM exchange1.cswv.com BY smtp1.cswv.com ; Mon Jul 16 16:31:15 2001 -0400
Received: by exchange1.cswv.com with Internet Mail Service (5.5.2653.19)
	id <NJMPJX49>; Mon, 16 Jul 2001 16:33:47 -0400
Message-ID: <B1E4D3274D57D411BE8400D0B783FF322E8669@exchange1.cswv.com>
From: "Krishnaswami, Neel" <neelk@cswcasa.com>
To: "'caml-list@inria.fr'" <caml-list@inria.fr>
Subject: [Caml-list] Are multiple return values optimized?
Date: Mon, 16 Jul 2001 16:33:38 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2653.19)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello,

Are multiple return values optimized to avoid heap-allocation 
like curried functions are? In Scheme and Lisp, I'm used to an 
expression like

  (define foo
    (lambda () (values 1 2 3)))

  (call-with-values foo
     (lambda (x y z) (+ x y z))

evaluating without doing any heap-allocation. Will the analgous
OCaml

  let foo() = (1, 2, 3)
 
  let x, y, z = foo()
  in x + y + z

also pass values on the stack or will a tuple be heap-allocated?
Simple experiments with ocamlopt -S suggest the latter, but it's
possible that there are optimized cases that I don't know how 
to write. 

--
Neel Krishnaswami
neelk@cswcasa.com
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

