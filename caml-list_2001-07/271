Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA17076; Tue, 24 Jul 2001 20:08:26 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA17041 for <caml-list@pauillac.inria.fr>; Tue, 24 Jul 2001 20:08:25 +0200 (MET DST)
Received: from www.invert.com (invert.com [209.164.21.15])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f6OI8Nb18097
	for <caml-list@inria.fr>; Tue, 24 Jul 2001 20:08:24 +0200 (MET DST)
Received: (from miles@localhost)
	by www.invert.com (8.10.1/8.10.1AA) id f6OI8H235550
	for caml-list@inria.fr; Tue, 24 Jul 2001 11:08:17 -0700 (PDT)
	(envelope-from miles)
Date: Tue, 24 Jul 2001 11:08:17 -0700
From: Miles Egan <miles@caddr.com>
To: caml-list@inria.fr
Subject: [Caml-list] a reckless proposal
Message-ID: <20010724110817.A35216@caddr.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

It seems that two of the things that most confuse or frustrate new users of
ocaml are records and objects.  Records are confusing because they resemble C
structs and are used in similar ways, but are really quite different.  Objects
are confusing because their use is mildly discouraged and because their
functionality significantly overlaps that of the module system.

The most frustrating feature of records, of course, is that each record field
name must be globally unique.  Objects seem to provide more struct-like
semantics, i.e. field names need only be unique within their class definition.
Using objects in place of records is a bit clumsy, however, because object
fields require accessors.  If the rules for object field access were changed,
however, objects would be just as convenient as records and less confusing and
more comfortable to C/C++/Java/Python programmers.  For example, if object
fields were directly accessible by default, one could use:

class point =
  object
    val x = 0
    val y = 0
  end

and access p.x and p.y directly, which would be in almost all ways preferrable
to using a record type which would make it impossible to define another type
with fields named x or y.

Alternatively, ocaml could offer ruby-style accessor macros, where a definition
like:

class example =
  object
    attr_rw x = 0
    attr_r  y = 0
    attr    z = 0
  end

would automatically generate get_x and set_x methods for x, a get_y method for
y, and no methods for z.  I suppose you could implement this in camlp4, but I
think features like this would have to be included in core ocaml before they'd
really be used.  Records could even be deprecated if this were implemented.

This approach has, in my mind, two advantages:
1. The object system becomes more generally useful.
2. A confusing and non-orthogonal feature of ocaml is subsumed into
   another, more generally useful and flexible feature.

-- 
miles

"We in the past evade X, where X is something which we believe to be a
lion, through the act of running." - swiftrain@geocities.com
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

