Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA05590; Wed, 11 Jul 2001 12:13:48 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA05587 for <caml-list@pauillac.inria.fr>; Wed, 11 Jul 2001 12:13:47 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f6BADj915200;
	Wed, 11 Jul 2001 12:13:45 +0200 (MET DST)
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id MAA28455;
	Wed, 11 Jul 2001 12:13:44 +0200
Date: Wed, 11 Jul 2001 12:13:44 +0200
From: Markus Mottl <markus@mail4.ai.univie.ac.at>
To: Francois Pottier <Francois.Pottier@inria.fr>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Dynamic types, casts, and rights amplification
Message-ID: <20010711121344.A24765@fichte.ai.univie.ac.at>
References: <20010703214914J.mrs35@cam.ac.uk> <20010711095236.A3033@pauillac.inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <20010711095236.A3033@pauillac.inria.fr>; from Francois.Pottier@inria.fr on Wed, Jul 11, 2001 at 09:52:36 +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 11 Jul 2001, Francois Pottier wrote:
> The first one generates exceptions dynamically and uses them as
> tags. The fact that they are exceptions is irrelevant; what matters
> is the ability to generate new tags at runtime. Unfortunately, this
> piece of code isn't accepted by O'Caml, because it doesn't recognize
> the type variable 'a in the exception declaration as bound by the
> preceding type annotation.

I also mentioned this limitation only a few days ago ("polymorphic"
exceptions - they are not really polymorphic, of course, but make use
of type variables bound elsewhere).  Unfortunately, I didn't get any
response so far whether there are inherent difficulties in implementing
an extension. It wouldn't require any syntax change at all, won't break
old code, but clearly gives more expressiveness to the developer. Any
comments?

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

