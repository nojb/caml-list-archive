Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA01003; Wed, 11 Jul 2001 08:04:38 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA01105 for <caml-list@pauillac.inria.fr>; Wed, 11 Jul 2001 08:04:37 +0200 (MET DST)
Received: from str12.sobor.org (adsl-63-198-183-99.dsl.snfc21.pacbell.net [63.198.183.99])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6B64ZX11635
	for <caml-list@inria.fr>; Wed, 11 Jul 2001 08:04:36 +0200 (MET DST)
Received: from quasar.ipa.nw.ru (anza.sobor.org [192.168.123.51])
	by str12.sobor.org (Postfix) with ESMTP id 00738AC065
	for <caml-list@inria.fr>; Tue, 10 Jul 2001 22:51:58 -0700 (PDT)
Message-ID: <3B4BEC2F.7A3938B7@quasar.ipa.nw.ru>
Date: Tue, 10 Jul 2001 23:03:27 -0700
From: "Alexander V. Voinov" <avv@quasar.ipa.nw.ru>
Organization: Fear of the Lord is the beginning of wisdom
X-Mailer: Mozilla 4.75 [en] (Windows NT 5.0; U)
X-Accept-Language: en
MIME-Version: 1.0
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Web Development with OCaml
References: <Pine.GSO.4.04.10107100957200.23057-100000@clipper.ens.fr> <3B4BE8CE.B246A7E8@texoma.net>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi

Jimmie Houchin wrote:
> The speed and memory results in the shootout are amazing. But what compounds
> it is the LOC result. To me that indicates that a language does not have to be
> verbose to be fast.
...
> Currently fast web servers like Tux 10-15,000+ rps (requests per second),
> Apache 2-4,000 rps aren't dynamic (at those speeds). Dynamic website tools
> like Zope, etc are either like 20-80 rps or some I've seen up to 100-200 rps.
> This is a great disparity.
> 
> I want a dynamic website which gets as close to static speeds as possible.

> 3. Tux module. Create an OCaml user space module for Tux.
>       This would be interesting and would probably be very fast.
>       This is also beyond my skill.

I'd like to seriously wonder about the impact of garbage collection in
such a persistent module, which has to reclaim stuff time to time. And
given that there will be many linked (recursive) data structures, the
process of reclaiming would take time. Unless it may be run as a
separate thread on a separate CPU, and the process of getting space for
new stuff doesn't heavily depend on the collection of the old one (say,
when it's not a problem to malloc one more gig). My suspicion is that
the currently widely discussed shootout doesn't catch the effect of GC.

With all this I mean that you are to maintain a kind of _conceptual_
cache in your dynamic server, like filesystem cache serves for static
pages you mentioned, otherwise it would be little point to apply the
strength of FP. Say, if you store your stuff just in a database, and use
some WebDB, or so, you do not have to bother about FP. (But it all is
complete IMHO)

Alexander
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

