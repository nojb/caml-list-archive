Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA14055; Fri, 13 Jul 2001 19:49:05 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA14163 for <caml-list@pauillac.inria.fr>; Fri, 13 Jul 2001 19:49:04 +0200 (MET DST)
Received: from smtp1.xs4all.nl (smtp1.xs4all.nl [194.109.127.131])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6DHn4j19379
	for <caml-list@inria.fr>; Fri, 13 Jul 2001 19:49:04 +0200 (MET DST)
Received: from beertje.william.bogus (williamc.xs4all.nl [213.84.56.92])
	by smtp1.xs4all.nl (8.9.3/8.9.3) with ESMTP id TAA01110;
	Fri, 13 Jul 2001 19:49:02 +0200 (CEST)
Received: (from williamc@localhost)
	by beertje.william.bogus (8.11.2/8.11.2/SuSE Linux 8.11.1-0.5) id f6DHo5R14658;
	Fri, 13 Jul 2001 19:50:05 +0200
X-Authentication-Warning: beertje.william.bogus: williamc set sender to williamc@paneris.org using -f
From: William Chesters <williamc@paneris.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15183.13516.617769.879507@beertje.william.bogus>
Date: Fri, 13 Jul 2001 19:50:04 +0200 (CEST)
To: Caml list <caml-list@inria.fr>, web-caml@quatramaran.ens.fr
Subject: Re: [Caml-list] Web Development with OCaml
In-Reply-To: <m3g0c0x0y8.fsf@cs.uchicago.edu>
References: <Pine.GSO.4.04.10107131216450.9219-100000@clipper.ens.fr>
	<m3g0c0x0y8.fsf@cs.uchicago.edu>
X-Mailer: VM 6.75 under 21.1 (patch 14) "Cuyahoga Valley" XEmacs Lucid
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Lyn A Headley writes:
 > I'd also like to make a point in passing.  Dynamic web development
 > performance has less to do with the implementation language of the web
 > application than it does with the database backend and associated
 > indexes, and with your caching and concurrency strategy.

That has been our experience with Melati; one can easily end up
database-bound---or more likely waiting on the staggeringly slow
JDBC driver (try postgresql's some time ...).

Melati's cacheing can be very helpful.  But of course concurrency
tends to work against cacheing ...

 > I believe, if performance is a main concern, that you will have to
 > commit deep thought to those issues especially.

Depends on the kind of market you are thinking of.  The performance we
get out of Melati+postgres on a cheap PC is adequate for the great
majority of all known websites, without really trying.  If you put a
good ocaml-based equivalent on a 4-way SMP box talking to a database
on another box, you would be comfortably into the hundreds of hits per
second I reckon.
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

