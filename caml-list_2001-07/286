Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA10768; Wed, 25 Jul 2001 23:30:51 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA10763 for caml-list@pauillac.inria.fr; Wed, 25 Jul 2001 23:30:51 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA26128 for <caml-list@pauillac.inria.fr>; Wed, 25 Jul 2001 10:31:57 +0200 (MET DST)
Received: from adsl-gw.nexgen-private (ABoulogne-102-1-3-3.abo.wanadoo.fr [193.253.180.3])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6P8VuD28594
	for <caml-list@inria.fr>; Wed, 25 Jul 2001 10:31:56 +0200 (MET DST)
Received: from fabien (fabien.nexgen-private [192.9.200.110])
	by adsl-gw.nexgen-private (8.10.2/8.10.2) with SMTP id f6P8CMJ00424
	for <caml-list@inria.fr>; Wed, 25 Jul 2001 10:12:22 +0200
Message-ID: <002b01c114e4$1bb52580$6ec809c0@fabien>
From: "FabienFleutot" <fleutotf@esiee.fr>
To: "Caml List" <caml-list@inria.fr>
References: <20010724110817.A35216@caddr.com>
Subject: Re: [Caml-list] a reckless proposal
Date: Wed, 25 Jul 2001 10:30:49 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2919.6700
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> The most frustrating feature of records, of course, is that each record
field
> name must be globally unique.
> [...]
> less confusing and
> more comfortable to C/C++/Java/Python programmers.

Some old K&R C compilers also need unique struct fields id. (That's probably
why the Un*x struct fields have unique prefixes).

This unique struct field id. in caml allows to easily guess a struct's type
in a pattern-matching; I'll write about GCaml without having read related
papers nor compiler sources, but wouldn't it be possible, with GCaml type
engine, to introduce the required polymorphism in non-unique struct field
name pattern matching?
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

