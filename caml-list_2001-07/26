Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA11717; Wed, 4 Jul 2001 02:20:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA11688 for <caml-list@pauillac.inria.fr>; Wed, 4 Jul 2001 02:20:05 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f640K3L10961
	for <caml-list@inria.fr>; Wed, 4 Jul 2001 02:20:04 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id JAA02510;
	Wed, 4 Jul 2001 09:19:44 +0900 (JST)
To: miles@caddr.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] hash_variant anomalies
In-Reply-To: <20010703081540.A58338@caddr.com>
References: <20010702180232.A51837@caddr.com>
	<20010703094210.A15237@pauillac.inria.fr>
	<20010703081540.A58338@caddr.com>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20010704091944F.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 04 Jul 2001 09:19:44 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 23
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> I guess the upshot of all this is that it's much easier to map
> polymorphic variants to C constants because there's no easy way to
> calculate the integer value of a normal variant without knowing it's
> position in the variant declaration.  The integer value of a
> polymorphic variant can be computed directly from its name alone.

Hard to say which is hardest: in both cases you must be careful to
synchronize your sources, and avoid typos. Polymorphic variants are
a bit stronger to ansynchronies, since they are by name.

> Overall I have to say writing ocaml-c interfaces is pretty easy.
> Mapping long lists of c enums and defines to ocaml variants seems to
> be one of the more tedious tasks.

Doesn't ocamlidl provide some help with standard variants?
For polymorphic variants, there is a tool called varcc in the lablgtk
distribution. There is no documentation, but examples and source code
should be informative enough. It generates efficient conversion tables
and macros between polymorphic variants and C enums.

Cheers,

Jacques Garrigue
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

