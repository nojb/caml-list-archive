Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA26675; Sat, 14 Jul 2001 16:00:04 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA26664 for <caml-list@pauillac.inria.fr>; Sat, 14 Jul 2001 16:00:03 +0200 (MET DST)
Received: from localhost.localdomain ([61.8.18.253])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6EDxxD03984
	for <caml-list@pauillac.inria.fr>; Sat, 14 Jul 2001 16:00:00 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id MAA00491;
	Sat, 14 Jul 2001 12:29:45 +1000
Message-ID: <3B4FAE99.8447FFEE@maxtal.com.au>
Date: Sat, 14 Jul 2001 12:29:45 +1000
From: John Max Skaller <skaller@maxtal.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Jeremy Fincher <tweedgeezer@hotmail.com>
CC: caml-list@pauillac.inria.fr
Subject: Re: [Caml-list] High level (asynchronous) networking library?
References: <F122M3oryKFRJrzdDW60000ab1d@hotmail.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Jeremy Fincher wrote:

> Someone has written "asyncore turned inside out" using Stackless Python, an
> implementation of Python that has first-class continuations) using
> continuations to implement the apparent multi-tasking.  It apparently (I've
> not used it myself) makes the asynchronous networking part of the coding a
> little more transparent to the user than asyncore does.  I'm curious if
> something similar could be implemented in O'Caml with closures, and if it
> could achieve similar user-transparency.

	If you want to do this with an Ocaml like language,
consider Felix, which I'm developing at present. It uses heap
allocated stack frames, like Stackless Python, and operates
by continuation passing. Unlike Stackless, it generates native
code (via C++), and functions still use the machine stack
So it should be much faster than Stackless, while supporting
a strongly typed language with first class functions.

-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au 
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
New generation programming language Felix  http://felix.sourceforge.net
Literate Programming tool Interscript     
http://Interscript.sourceforge.net
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

