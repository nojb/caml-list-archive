Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA22629; Thu, 12 Jul 2001 00:47:31 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA22623 for <caml-list@pauillac.inria.fr>; Thu, 12 Jul 2001 00:47:31 +0200 (MET DST)
Received: from shell5.ba.best.com (shell5.ba.best.com [206.184.139.136])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f6BMlTX26344
	for <caml-list@inria.fr>; Thu, 12 Jul 2001 00:47:29 +0200 (MET DST)
Received: from localhost (bpr@localhost)
	by shell5.ba.best.com (8.9.3/8.9.2/best.sh) with ESMTP id PAA27849;
	Wed, 11 Jul 2001 15:47:27 -0700 (PDT)
Date: Wed, 11 Jul 2001 15:47:27 -0700 (PDT)
From: Brian Rogoff <bpr@best.com>
To: "Krishnaswami, Neel" <neelk@cswcasa.com>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] A G'Caml question" + additional info
In-Reply-To: <B1E4D3274D57D411BE8400D0B783FF322E8656@exchange1.cswv.com>
Message-ID: <Pine.BSF.4.21.0107111531550.7564-100000@shell5.ba.best.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 11 Jul 2001, Krishnaswami, Neel wrote:
> Markus Mottl [mailto:markus@mail4.ai.univie.ac.at] writes:
> > On Wed, 11 Jul 2001, Bruce Hoult wrote:
> > > But the language itself seems to be starting to rival C++ for sheer
> > > complexity. When you want to do something you seem to have a choice
> > > of using this feature, or *this* one, or *this* newly developed one.
> > 
> > Having choices is not necessarily bad, being forced to using many
> > alternatives is. I think that OCaml has succeeded quite well so far in
> > keeping different features apart as one can see in the standard library,
> > which can be used with the core language + modules alone. I hope this
> > will stay so!
> 
> Permit me to disagree. I find nearly all of OCaml's features highly
> useful and orthogonal, and I am only working on medium size projects. 

Good point, I was going to disagree with Bruce on the C++ comparison. 
OCaml is still orthogonal, with the major exception being the overlap
between the object system and the module system. I guess that's still
research. 

> For instance, I recently wrote yet another set implementation, because 
> the functorial interface to the Set module in the standard library 
> wouldn't let me use it in a fully polymorphic fashion. If the Set 
> library had been written using OCaml's object system, then I would 
> not have had to redo my own. From this experience I conclude that the 
> right thing is to use the features that offer the nicest degree of
> modularity and reusability.

That's odd. If the Set library had been implemented using the object
system, it seems that you would have less (parametric) polymorphism 
since OCaml doesn't (yet?) have polymorphic methods. 

But, I agree that there should be polymorphic versions of some of the 
functorial libraries. There is no way to directly have a recursive 
type definition/functor instantiation, so if you want to implement what 
OOers call the Component pattern you have to use the parameterization 
trick which requires a polymorphic functor. This has bit me a few times
already. This is pretty high on my "I sure hope this gets fixed one day" 
list. 

BTW, if you really like OO style libraries, point your browser this-a-way 

	http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/classes/

-- Brian


-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

