Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA26555; Mon, 2 Jul 2001 09:36:38 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA26546 for <caml-list@caml.inria.fr>; Mon, 2 Jul 2001 09:36:37 +0200 (MET DST)
Received: from hotmail.com (f14.law15.hotmail.com [64.4.23.14])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f627aab01515
	for <caml-list@caml.inria.fr>; Mon, 2 Jul 2001 09:36:36 +0200 (MET DST)
Received: from mail pickup service by hotmail.com with Microsoft SMTPSVC;
	 Mon, 2 Jul 2001 00:36:34 -0700
Received: from 205.188.199.24 by lw15fd.law15.hotmail.msn.com with HTTP;	Mon, 02 Jul 2001 07:36:34 GMT
X-Originating-IP: [205.188.199.24]
From: "Jeremy Fincher" <tweedgeezer@hotmail.com>
To: caml-list@pauillac.inria.fr
Subject: [Caml-list] Two quick questions.
Date: Mon, 02 Jul 2001 03:36:34 -0400
Mime-Version: 1.0
Content-Type: text/plain; format=flowed
Message-ID: <F14bXCH5n00zepDI8NF0001e3c0@hotmail.com>
X-OriginalArrivalTime: 02 Jul 2001 07:36:34.0745 (UTC) FILETIME=[B8569A90:01C102C9]
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

First: I looked at the source code to the Printf module to see exactly how 
Printf.printf does type checking on the format strings, since I'd like to 
implement something similar (for reimplementing the "struct" python module, 
which uses format strings to pack/unpack arbitrary binary data) but I 
honestly had no idea how it worked.  Is something like what Printf.printf 
does way too "deep magic" for a newbie to O'Caml to do, or are there any 
good explanations of how it does what it does?

Second: Are there any good examples of using ocamllex/ocamlyacc to build 
abstract syntax trees?  I've seen ASTs built from streams in the Caml-light 
manual, and I've seen examples of ocamllex/ocamlyacc used to parse simple 
languages that don't really need an AST, but I can't find any examples (with 
explanations, of course :)) of ocamllex/ocamlyacc being used to actually 
create abstract syntax trees for a given grammar.

Thanks,
Jeremy
_________________________________________________________________
Get your FREE download of MSN Explorer at http://explorer.msn.com

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

