Return-Path: <Alain.Frisch@inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 24193BDCB
	for <caml-list@yquem.inria.fr>; Sat, 20 Aug 2005 15:50:28 +0200 (CEST)
Received: from postfix3-1.free.fr (postfix3-1.free.fr [213.228.0.44])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7KDoRAx018589
	for <caml-list@yquem.inria.fr>; Sat, 20 Aug 2005 15:50:28 +0200
Received: from [127.0.0.1] (bdv75-3-82-224-165-175.fbx.proxad.net [82.224.165.175])
	by postfix3-1.free.fr (Postfix) with ESMTP id 9E8D91734E8;
	Sat, 20 Aug 2005 15:50:27 +0200 (CEST)
Message-ID: <43073520.1090303@inria.fr>
Date: Sat, 20 Aug 2005 15:50:24 +0200
From: Alain Frisch <Alain.Frisch@inria.fr>
User-Agent: Mozilla Thunderbird 1.0 (Windows/20041206)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] recursive polymorphic variants?
References: <20050818212744.94BD41EB0C3@labrador.eecs.harvard.edu>	<20050819.065118.03980029.garrigue@math.nagoya-u.ac.jp> <200508201423.16571.jon@ffconsultancy.com>
In-Reply-To: <200508201423.16571.jon@ffconsultancy.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-Miltered: at nez-perce with ID 43073523.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; frisch:01 frisch:01 caml-list:01 recursive:01 variants:01 recursion:01 stdlib:01 recursive:01 polymorphic:01 functions:01 modules:01 implemented:02 alain:03 alain:03 comparison:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Jon Harrop a écrit :
> As this is a set of values and a value can be a set, there is an obvious 
> recursion. I implemented it by cut and pasting the stdlib code into my own 
> and altering it to have mutually recursive "value set" and "value" comparison 
> functions.

Cannot you use recursive modules?

-- Alain

