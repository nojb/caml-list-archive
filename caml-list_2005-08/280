Return-Path: <david.mentre@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id DF860BDCB
	for <caml-list@yquem.inria.fr>; Tue, 30 Aug 2005 12:28:29 +0200 (CEST)
Received: from nproxy.gmail.com (nproxy.gmail.com [64.233.182.197])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7UASTRV004621
	for <caml-list@yquem.inria.fr>; Tue, 30 Aug 2005 12:28:29 +0200
Received: by nproxy.gmail.com with SMTP id a4so355970nfc
        for <caml-list@yquem.inria.fr>; Tue, 30 Aug 2005 03:28:27 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=P6yAvC4BmyY1Ky8NMocVwGOY/nKiDx/cQCwGwYOgOUQSqAbl1gzaNho6cKaCxrjTeSUzxlnSy/s/f5eA0Ms1ww5HDSVH1FVCqAnXbEJetZ11RZq/kSZho4jTWRBKY5+tKntUHphYiCUdj+cGfl5+AFyNtr/k8G6qT6UvrR2SJwI=
Received: by 10.48.3.15 with SMTP id 15mr340906nfc;
        Tue, 30 Aug 2005 03:28:27 -0700 (PDT)
Received: by 10.48.42.9 with HTTP; Tue, 30 Aug 2005 03:28:27 -0700 (PDT)
Message-ID: <3d13dcfc05083003286c4436f4@mail.gmail.com>
Date: Tue, 30 Aug 2005 12:28:27 +0200
From: David MENTRE <david.mentre@gmail.com>
Reply-To: 
To: Christophe Raffalli <christophe.raffalli@univ-savoie.fr>
Subject: Re: [Caml-list] Re: GUI for OCaml
Cc: Jon Harrop <jon@ffconsultancy.com>, caml-list@yquem.inria.fr
In-Reply-To: <43142CB2.8030306@univ-savoie.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
References: <4311DA63.4010104@havenrock.com>
	 <200508292333.59714.jon@ffconsultancy.com>
	 <3d13dcfc050830001671d0974f@mail.gmail.com>
	 <43142CB2.8030306@univ-savoie.fr>
X-Miltered: at nez-perce with ID 431434CD.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 christophe:01 christophe:01 raffalli:01 raffalli:01 univ-savoie:01 widget:01 haskell:01 kde:01 kde:01 labltk:01 lablgtk:01 lablgtk:01 widget:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.4 required=5.0 tests=RCVD_BY_IP,REPLY_TO_EMPTY 
	autolearn=disabled version=3.0.3

Hello Christophe,

2005/8/30, Christophe Raffalli <christophe.raffalli@univ-savoie.fr>:
> I would prefer a GUI programming language (similar to TeX for word
> processing). This might be easier to develop, can either be static (the
> widget build at compile time) or dynamic, and most of all, it is easier
> to modify an existing GUI.

I'm not fond of yet another Domain Specific Language (DSL), except if
it brings clear advantages (of which I'm not yet convinced).

I don't mind learning a DSL from time to time, but not each time I
need to program a part of my application.

For example, in my current code, I'm using CDuce's DSL and WDialog's
DSL. As an engineer, I would not be very happy to be forced to use yet
another DSL. And other developers in my project need to agree with
this complexity.

BTW, some research has been done one using functional style to program
GUI (in Haskell??). We should at least have a look on it.


> Why a modern look, you should have the look of the OS you are running on,
> using the OS X look on OS X,
> the windows look on windows,
> the KDE (with the user skin) look on KDE etc ...

Your right. I was referring to labltk vs. lablgtk1 vs. lablgtk2. This
is a sub-issue of the general issue of having a native look and
behaviour on all platforms.

> This is were things are difficult and where a programming language to
> design the GUI is needed, because the GUI elements do not have the same
> dimension on all platform.

I don't see why a language rather than a library can improve this point.

> Let's start with simple thing for a basic toolkit,

Agree.

> Then, if the librairy is powerfull enough, it should be possible to
> design new widget entierely in OCaml with the library ?

It could be nice. But as an engineer, I'm always wondering: how can I
reuse that code developed and debugged by others. Reinventing the
wheel is sometimes good, but not always.

Yours,
david

