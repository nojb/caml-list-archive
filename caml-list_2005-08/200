Return-Path: <christophe.raffalli@univ-savoie.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 9155EBDCE
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 16:39:38 +0200 (CEST)
Received: from smtp.cegetel.net (mf01.sitadelle.com [212.94.174.68])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7OEdcSG025709
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 16:39:38 +0200
Received: from [192.168.144.2] (80-125-86-55.dti.cegetel.net [80.125.86.55])
	by smtp.cegetel.net (Postfix) with ESMTP id 711B1318495;
	Wed, 24 Aug 2005 16:39:36 +0200 (CEST)
Message-ID: <430C86A7.6050408@univ-savoie.fr>
Date: Wed, 24 Aug 2005 16:39:35 +0200
From: Christophe Raffalli <christophe.raffalli@univ-savoie.fr>
User-Agent: Mozilla Thunderbird 1.0.6 (X11/20050716)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: Damien Doligez <damien.doligez@inria.fr>
Cc: caml-list <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] Re: Parameter evaluation order
References: <43065B83.6050503@dravanet.hu>	<254E6767-A097-455B-872B-483725D26744@inria.fr>	<000401c5a84a$a2e79760$1866b811@Operational> <91631662-65C4-4FB7-96B1-B6C1CAF50B80@inria.fr>
In-Reply-To: <91631662-65C4-4FB7-96B1-B6C1CAF50B80@inria.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 430C86AA.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; christophe:01 raffalli:01 christophe:01 raffalli:01 univ-savoie:01 caml-list:01 ocaml:01 syntax:01 val:01 int:01 argument:01 parameter:02 let:03 function:08 fun:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3


If you really want left-to-right evaluation order in ocaml, use camlp4 
to change the syntax with a postfix function application (with the 
argument to the left).

That will be homogenous with type application !

:-)

or with a right-associtive operator if you do not like camlp4:

# let (@) x f = f x
val ( @ ) : 'a -> ('a -> 'b) -> 'b = <fun>
# 1 @ 2 @ (+)
- : int = 3

