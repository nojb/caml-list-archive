Return-Path: <raffalli@univ-savoie.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 276F5BDCB
	for <caml-list@yquem.inria.fr>; Wed, 31 Aug 2005 11:06:34 +0200 (CEST)
Received: from smtp.cegetel.net (mf00.sitadelle.com [212.94.174.67])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7V96Xgu024257
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@yquem.inria.fr>; Wed, 31 Aug 2005 11:06:34 +0200
Received: from [192.168.144.128] (unknown [84.5.238.181])
	by smtp.cegetel.net (Postfix) with ESMTP id D932F1A50E8;
	Wed, 31 Aug 2005 11:06:30 +0200 (CEST)
Message-ID: <4315731D.5000308@univ-savoie.fr>
Date: Wed, 31 Aug 2005 11:06:37 +0200
From: Christophe Raffalli <raffalli@univ-savoie.fr>
User-Agent: Mozilla Thunderbird 1.0.6 (Macintosh/20050716)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: David MENTRE <david.mentre@gmail.com>
Cc: Jon Harrop <jon@ffconsultancy.com>, caml-list@yquem.inria.fr
Subject: Proposal a GUI from Ocamlsdl
References: <20050830174757.99765.qmail@web30510.mail.mud.yahoo.com>	<200508302001.58080.jon@ffconsultancy.com> <3d13dcfc05083101487092acd5@mail.gmail.com>
In-Reply-To: <3d13dcfc05083101487092acd5@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 43157319.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; christophe:01 raffalli:01 raffalli:01 univ-savoie:01 ocamlsdl:01 ocamlsdl:01 callbacks:01 callbacks:01 ...:98 ...:98 fonts:01 glut:01 opengl:01 thread:02 caml:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.9 required=5.0 tests=FORGED_RCVD_HELO,
	RCVD_IN_BL_SPAMCOP_NET autolearn=disabled version=3.0.3


I plan to write a real interface for GlSurf (google it !). And I might 
start a minimal GUI library on top of OcamlSDL.

What are the advantages:

- access to everything in the hardware: openGL, sound, CD player, ttf 
fonts, etc (can even play video it seems !)

- no need for callbacks from C to Caml (this is a pain, and you can not 
create too many callbacks with register_callback, if you do not want
performance problems. I add a lot of pb with that on Glut, an app with a 
lot of button and one registered callback per button seems not reasonable).
With OcamlSDL, you can have a Caml thread listening (or polling) the 
event queue and calling the Caml function directly.

- it seems simple to use (I write a small example in just a few minutes, 
despite the lack of documentation)

- works at least on windows, linux and OS X (aqua, no X11)

I can either do my interface alone in my corner with a minimal GUI 
library ... or we can start a project with a bunch of people ...

just a pb ... I do not know yet how to manipulate the OS X menu bar from 
SDL ... If someone knows how to do that ?


