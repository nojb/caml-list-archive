Return-Path: <jon@ffconsultancy.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 1AC18BDCB
	for <caml-list@yquem.inria.fr>; Tue, 30 Aug 2005 23:22:35 +0200 (CEST)
Received: from ptb-relay04.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j7ULMYhP006049
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 30 Aug 2005 23:22:34 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay04.plus.net with esmtp (Exim) id 1EADYw-00085f-Qd
	for caml-list@yquem.inria.fr; Tue, 30 Aug 2005 22:22:34 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Does LablTk have a future?
Date: Tue, 30 Aug 2005 20:01:57 +0100
User-Agent: KMail/1.7.2
References: <20050830174757.99765.qmail@web30510.mail.mud.yahoo.com>
In-Reply-To: <20050830174757.99765.qmail@web30510.mail.mud.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200508302001.58080.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 4314CE1A.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 labltk:01 ocaml:01 bindings:01 guis:01 ocaml:01 widget:01 intersection:01 guis:01 ...:98 ...:98 frog:98 wrote:01 opengl:01 native:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


I had better clarify before continuing. I see two viable approaches here:

1. Write OCaml bindings to the native GUIs and then an OCaml wrapper that 
abstracts the nativeness away.

2. Write a new widget toolkit designed to render via OpenGL.

On Tuesday 30 August 2005 18:47, David Thomas wrote:
> ...

If we do (1) then it will handle skinning and the intersection of the sets of 
functionality of the native GUIs.

If we do (2) then customisation and skinning will be ignored but you have the 
advantage of real time 2D and 3D graphics.

Option (2) seems much easier and more useful to me. I've never cared about 
skinning...

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

