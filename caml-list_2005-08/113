Return-Path: <gava@univ-paris12.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 71A5BBD73
	for <caml-list@yquem.inria.fr>; Tue, 16 Aug 2005 10:32:25 +0200 (CEST)
Received: from smtp9.wanadoo.fr (smtp9.wanadoo.fr [193.252.22.22])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7G8WPFh011124
	for <caml-list@yquem.inria.fr>; Tue, 16 Aug 2005 10:32:25 +0200
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf0907.wanadoo.fr (SMTP Server) with ESMTP id 0CFCE1C0015B
	for <caml-list@yquem.inria.fr>; Tue, 16 Aug 2005 10:32:25 +0200 (CEST)
Received: from nono (ARouen-106-1-11-158.w80-11.abo.wanadoo.fr [80.11.143.158])
	by mwinf0907.wanadoo.fr (SMTP Server) with SMTP id B0D311C00149
	for <caml-list@yquem.inria.fr>; Tue, 16 Aug 2005 10:32:24 +0200 (CEST)
X-ME-UUID: 20050816083224724.B0D311C00149@mwinf0907.wanadoo.fr
Message-ID: <000f01c5a23d$84d6c6a0$9e8f0b50@mshome.net>
From: =?iso-8859-1?Q?Fr=E9d=E9ric_Gava?= <gava@univ-paris12.fr>
To: <caml-list@yquem.inria.fr>
Subject: abstract machine with threads
Date: Tue, 16 Aug 2005 10:35:54 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.50.4133.2400
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
X-Miltered: at nez-perce with ID 4301A499.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; gava:01 gava:01 threads:01 caml-list:01 threads:01 byte:01 stack:01 stack:01 pointers:01 semantics:01 ocaml:01 bytecode:01 12.:98 abstract:01 abstract:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Dear caml-list,

I am looking for a paper which described (formally) an abstract (state)
machine (for a ML like langage) with  threads, e.g., a multi-threads ZAM or
a multi-threads CAM.

Threads are easy to understand in the case of byte or native code. But in
the case of an abstract machine (with a stack) what's happen ? Is there a
copy of the stack ? Is there two pointers on the shared stack ?

I thinks it could be interesting to have this description because once can
formally prove an equivalence between a formal semantics of ocaml with
threads, an abstract-state machine with threads and the bytecode with
threads.

Someone know where I can find it ? (a formal description of a multi-threads
abstract machine)

thanks,
Frédéric Gava


