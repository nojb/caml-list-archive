Return-Path: <hywang@pobox.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 73A56BDCE
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 03:27:05 +0200 (CEST)
Received: from ns3.filemaker.com (ns3.filemaker.com [192.35.50.18])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7O1R23H025939
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 03:27:05 +0200
Received: from mail.filemaker.com (mail.filemaker.com [17.184.4.95])
	by ns3.filemaker.com (8.12.1-20030922/8.12.1) with ESMTP id j7O1QwCo000309
	for <caml-list@yquem.inria.fr>; Tue, 23 Aug 2005 18:26:58 -0700 (PDT)
Received: from Operational ([17.184.102.24]) by mail.filemaker.com
          (Post.Office MTA v3.5.1 release 219 ID# 0-63480U1000L2S100V35)
          with SMTP id com for <caml-list@yquem.inria.fr>;
          Tue, 23 Aug 2005 18:26:59 -0700
Message-ID: <000401c5a84a$a2e79760$1866b811@Operational>
From: "Hao-yang Wang" <hywang@pobox.com>
To: "caml-list" <caml-list@yquem.inria.fr>
References: <43065B83.6050503@dravanet.hu> <254E6767-A097-455B-872B-483725D26744@inria.fr>
Subject: Re: Parameter evaluation order
Date: Tue, 23 Aug 2005 18:24:56 -0700
MIME-Version: 1.0
Content-Type: text/plain;
	format=flowed;
	charset="iso-8859-1";
	reply-type=response
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2900.2180
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2180
X-Miltered: at nez-perce with ID 430BCCE6.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; hao-yang:01 curried:01 evalue:01 cheers:01 hao-yang:01 parameter:02 parameters:02 seems:03 long:04 suppose:05 problem:05 efficiency:05 specify:06 function:08 function:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


>Suppose you want to evaluate a curried function call in left-to-right
>order:
>f e1 e2 e3 e4
>
>You must evaluate f first, then e1.  Then you must apply f to e1, giving
>a new function g1.  Then you must evalue e2, then apply f1 to e2, giving
>f2, etc.

It seems to me that as long as evaluate f the last, we are ok. We can 
specify the evaluation order of the _parameters_ left-to-right (i.e., e1 
then e2, e3, e4, and finally f), without running into the efficiency 
problem.

Cheers,
Hao-yang Wang 


