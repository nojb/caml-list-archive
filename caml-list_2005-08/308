Return-Path: <padator@wanadoo.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id B61CDBDE6
	for <caml-list@yquem.inria.fr>; Wed, 31 Aug 2005 00:38:18 +0200 (CEST)
Received: from smtp2.wanadoo.fr (smtp2.wanadoo.fr [193.252.22.29])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j7UMcIYk014873
	for <caml-list@yquem.inria.fr>; Wed, 31 Aug 2005 00:38:18 +0200
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf0202.wanadoo.fr (SMTP Server) with ESMTP id 4BB7F1C00205
	for <caml-list@yquem.inria.fr>; Wed, 31 Aug 2005 00:38:18 +0200 (CEST)
Received: from [81.53.67.234] (ANantes-154-1-16-234.w81-53.abo.wanadoo.fr [81.53.67.234])
	by mwinf0202.wanadoo.fr (SMTP Server) with ESMTP id C17181C001F2;
	Wed, 31 Aug 2005 00:38:17 +0200 (CEST)
X-ME-UUID: 20050830223817792.C17181C001F2@mwinf0202.wanadoo.fr
In-Reply-To: <3d13dcfc050830001671d0974f@mail.gmail.com>
References: <4311DA63.4010104@havenrock.com> <200508292333.59714.jon@ffconsultancy.com> <3d13dcfc050830001671d0974f@mail.gmail.com>
Mime-Version: 1.0 (Apple Message framework v728)
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <3F903DC1-3DE6-4D58-8032-CD1C19074E2F@wanadoo.fr>
Cc: Jon Harrop <jon@ffconsultancy.com>, caml-list@yquem.inria.fr
Content-Transfer-Encoding: quoted-printable
From: yoann padioleau <padator@wanadoo.fr>
Subject: Re: GUI for OCaml (was: Re: [Caml-list] Does LablTk have a future?)
Date: Wed, 31 Aug 2005 00:31:17 +0200
To: David MENTRE <david.mentre@gmail.com>
X-Mailer: Apple Mail (2.728)
X-Miltered: at concorde with ID 4314DFDA.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 caml-list:01 labltk:01 lablgtk:01 lablgtk:01 ocaml:01 gtk:01 gtk:01 cross-:01 fpls:01 reinvent:01 reinvent:01 guis:01 haskell:01 functionnal:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.2 required=5.0 tests=DNS_FROM_RFC_ABUSE,
	DNS_FROM_RFC_POST,DNS_FROM_RFC_WHOIS autolearn=disabled version=3.0.3


On 30 ao=FBt 05, at 09:16, David MENTRE wrote:

> Hello,
>
> 2005/8/30, Jon Harrop <jon@ffconsultancy.com>:
>
>>  I had tried lablgtk before but failed to get to grips with it.
>>
>
> The client of my application is also written in Lablgtk2 and, despite
> helpful answers by Jacques Garrigue and Olivier Andrieux as well as
> SooHyoung Oh's tutorials, I find programming with Labgtk2 not very
> easy (to say the least). I find Lablgtk2 is largely under-documented.

It seems to me that there is nothing original in the ocaml binding of =20=

gtk
so most of the time you can search in the documentation of gtk in any =20=

other langage
and "quite easily" adapt it to ocaml. Maybe the only problem with =20
lablgtk is that it uses
the object facilities of ocaml and that many people are not very =20
aware of those features. But in that case
what we need is a better documentation of the object features of ocaml.

> Of course, this is a large task that cannot be achieved by two
> individuals.

And I think it is not a good idea. We have to factor code and =20
documentation.
It is better to have one good documentation of gtk in one langage, =20
that 10 bad documentation
of gtk in 10 langages.
Maybe one day when .net or a similar thing will take over the world =20
we will have less problems.

>
>
>> I think it would be more constructive to create a decent cross-=20
>> platform GUI

Well, gtk is cross-platform.

>> library from the ground up for FPLs/OCaml.

And yet again reinvent the wheel. I am quite sure that you will =20
reinvent just exactly gtk :)


>> This wouldn't need to be anything
>> fancy, just easy access to the simplest GUI elements to start with.

Well you have already that with lablgtk.

>> I'd like
>> to see GUIs described by purely functional data structures.

I had a look to fruit in haskell, fudgets, fran, ... and other =20
attempts to make gui in functionnal style, and most of the time
I found the code more complex that the classical  widget/callback  =20
with global variable or closure model.


>>
>
> I'd also loved too. Having a cross-platform GUI (with native look and
> behaviour on Windows and MacOS X),   programmed using a functional
> style,


> well documented (with reference manual and tutorial) and with
>
You have that for gtk, ok it is not in ocaml but you can make the =20
translation quite easily from langage X to ocaml.

> necessary tools (GUI design application) would be very very helpful.

Do you really find useful such RAD tools ?



