Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 84EE6BC2A
	for <caml-list@yquem.inria.fr>; Fri,  5 Aug 2005 16:16:13 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j75EGDb9024175
	for <caml-list@yquem.inria.fr>; Fri, 5 Aug 2005 16:16:13 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA04725 for <caml-list@pauillac.inria.fr>; Fri, 5 Aug 2005 16:16:12 +0200 (MET DST)
From: brjackson@blueyonder.co.uk
Received: from smtp-out6.blueyonder.co.uk (smtp-out6.blueyonder.co.uk [195.188.213.9])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j75EGCxk024170
	for <caml-list@inria.fr>; Fri, 5 Aug 2005 16:16:12 +0200
Received: from webmail.blueyonder.co.uk ([195.188.53.233]) by smtp-out6.blueyonder.co.uk with Microsoft SMTPSVC(5.0.2195.6713);
	 Fri, 5 Aug 2005 15:16:57 +0100
Received: from 195.188.213.34
        (SquirrelMail authenticated user);
        by webmail.blueyonder.co.uk with HTTP;
        Fri, 5 Aug 2005 15:16:12 +0100 (BST)
Message-ID: <5160.195.188.213.34.1123251372.squirrel@195.188.213.34>
Date: Fri, 5 Aug 2005 15:16:12 +0100 (BST)
Subject: Constructing all float tuples in C
To: caml-list@inria.fr
User-Agent: SquirrelMail/1.4.3a
X-Mailer: SquirrelMail/1.4.3a
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal
X-OriginalArrivalTime: 05 Aug 2005 14:16:57.0793 (UTC) FILETIME=[56C11310:01C599C8]
X-Miltered: at concorde with ID 42F374AD.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 42F374AC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; bindings:01 ocaml:01 lablgl:01 api:01 bigarray:01 gdb:01 ocaml:01 elt:01 elt:01 stub:01 bytecode:01 stub:01 camlparam:01 alloc:01 wosize:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=NO_REAL_NAME 
	autolearn=disabled version=3.0.3

Apologies to anybody that received a no subject message identical to that
which is below. It seems that I forgot to include it first time round.

Hi.

I've recently been experimenting with some Glu bindings for Ocaml. I am
aware of the excellent Lablgl but wanted something closer to the C API.
Unfortunately there seems to be a problem with a particular function that
returns a tuple of three floats. I think that I'm constructing the tuple
wrong since if it is changed so that it returns a bigarray it works.

With the following code gdb reports a crash in caml_format_float when
gluUnProject is called:

(* OCAML CODE *)
external gluUnProject : float -> float -> float ->
  (float, float64_elt, c_layout) Array1.t ->
  (float, float64_elt, c_layout) Array1.t ->
  (int, int_elt, c_layout) Array1.t ->
  (float * float * float) =
  "stub_gluUnProject_bytecode" "stub_gluUnProject_native"

/* C CODE */
value stub_gluUnProject_native(value v1, value v2, value v3, value v4,
value v5, value v6)
{
    CAMLparam5(v1, v2, v3, v4, v5);
    CAMLxparam1(v6);
    CAMLlocal1(result);
    result = alloc(Double_wosize * 3, Double_array_tag);
    double obj[3];

    fp_gluUnProject(Double_val(v1), Double_val(v2), Double_val(v3),
        (double *) Data_bigarray_val(v4), (double *) Data_bigarray_val(v5),
        (int *) Data_bigarray_val(v6), obj, obj+1, obj+2);

    Store_double_field(result, 0, obj[0]);
    Store_double_field(result, 1, obj[1]);
    Store_double_field(result, 2, obj[2]);

    CAMLreturn(result);
}


The values altered by fp_gluUnProject (obj[...]) are correct. If the code
is changed to the following (so that is returns a bigarray) it works:


(* OCAML CODE *)
external gluUnProject : float -> float -> float ->
  (float, float64_elt, c_layout) Array1.t ->
  (float, float64_elt, c_layout) Array1.t ->
  (int, int_elt, c_layout) Array1.t ->
  float, float64_elt, c_layout) Array1.t =
  "stub_gluUnProject_bytecode" "stub_gluUnProject_native"

/* C CODE */
value stub_gluUnProject_native(value v1, value v2, value v3, value v4,
value v5, value v6)
{
    CAMLparam5(v1, v2, v3, v4, v5);
    CAMLxparam1(v6);
    CAMLlocal1(result);
    double obj[3];

    fp_gluUnProject(Double_val(v1), Double_val(v2), Double_val(v3),
        (double *) Data_bigarray_val(v4), (double *) Data_bigarray_val(v5),
        (int *) Data_bigarray_val(v6), obj, obj+1, obj+2);

    result = alloc_bigarray_dims(BIGARRAY_FLOAT64 | BIGARRAY_C_LAYOUT,
            1, obj, 3);

    CAMLreturn(result);
}


I've have the feeling that the problem is either blindingly obvious or I
have misunderstood sections 18.3-18.5 of the manual.

Thanks for any insight/help.

Ben Jackson.

