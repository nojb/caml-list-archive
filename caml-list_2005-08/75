Return-Path: <john.harrison@cl.cam.ac.uk>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 0521FBC55
	for <caml-list@yquem.inria.fr>; Tue,  9 Aug 2005 13:34:05 +0200 (CEST)
Received: from mta1.cl.cam.ac.uk (mta1.cl.cam.ac.uk [128.232.0.15])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j79BY4qZ009718
	for <caml-list@yquem.inria.fr>; Tue, 9 Aug 2005 13:34:04 +0200
Received: from nidd.cl.cam.ac.uk
	([128.232.8.175] helo=cl.cam.ac.uk ident=[fDU68ruQE/RGEW9L6YCYSr+fbE5PduUY])
	by mta1.cl.cam.ac.uk with esmtp (Exim 3.092 #1)
	id 1E2SMu-0006UW-00; Tue, 09 Aug 2005 12:34:04 +0100
X-Uri: <URL:http://www.cl.cam.ac.uk/users/jrh>
To: caml-list@yquem.inria.fr
Cc: John.Harrison@cl.cam.ac.uk
Subject: New OCaml version of HOL Light theorem prover
Date: Tue, 09 Aug 2005 12:34:04 +0100
From: John Harrison <John.Harrison@cl.cam.ac.uk>
Message-Id: <E1E2SMu-0006UW-00@mta1.cl.cam.ac.uk>
X-Miltered: at nez-perce with ID 42F894AC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 theorems:01 higher-order:01 algebra:01 ocaml:01 toplevel:01 theorems:01 algebra:01 vectors:01 vectors:01 orthogonal:01 orthogonal:01 non-obvious:01 first-order:01 ...:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


I'm pleased to announce the availability of the HOL Light theorem prover
version 2.0, based on Objective Caml. The system and its documentation,
including a new draft tutorial, can be downloaded from the following Web
page:

  http://www.cl.cam.ac.uk/users/jrh/hol-light

HOL Light proves theorems in classical higher-order logic. It is intended
as an interactive proof assistant, but offers automated support for
proofs in some domains (arithmetic, algebra, pure logic...) and has a
significant library of pre-proved mathematics, particularly elementary
analysis. The system is designed to be fully programmable; not only is
OCaml the implementation language but the OCaml toplevel is the "shell"
from which the user directs proofs. Here are the proofs of a few
extremely simple theorems in the system, just to show you what it looks
like.

1. The sum of squares of the first n natural numbers, by induction and
   arithmetic:

   let SUM_OF_SQUARES = prove
    (`!n:num. nsum(1..n) (\i. i * i) = (n * (n + 1) * (2 * n + 1)) DIV 6`,
     INDUCT_TAC THEN ASM_REWRITE_TAC[NSUM_CLAUSES_NUMSEG] THEN ARITH_TAC);;

2. Vector version of Pythagoras's theorem, using algebra on vectors and real
   numbers:

   needs "Multivariate/vectors.ml";;

   let PYTHAGORAS = prove
    (`!A B C:real^2.
           orthogonal (A - B) (C - B)
           ==> dist(A,C) pow 2 = dist(B,A) pow 2 + dist(B,C) pow 2`,
     SIMP_TAC[dist; NORM_POW_2; orthogonal; DOT_LSUB; DOT_RSUB; DOT_SYM] THEN
     CONV_TAC REAL_RING);;

3. Los's "non-obvious" theorem of predicate calculus, using pure
   first-order reasoning.

   let LOS = prove
    (`(!x y z. P x y /\ P y z ==> P x z) /\
      (!x y z. Q x y /\ Q y z ==> Q x z) /\
      (!x y. P x y ==> P y x) /\
      (!x y. P x y \/ Q x y)
      ==> (!x y. P x y) \/ (!x y. Q x y)`,
     MESON_TAC[]);;

The ASCIIfied logical symbols used above include:

 !x.    for all x
 /\     and
 \/     or
 ==>    implies
 \x.    lambda x (like "fun x ->" in OCaml)

John.

