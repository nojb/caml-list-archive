Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 1C530BDCF
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 21:25:42 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7OJPfPO015425
	for <caml-list@yquem.inria.fr>; Wed, 24 Aug 2005 21:25:41 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA03897 for <caml-list@pauillac.inria.fr>; Wed, 24 Aug 2005 21:25:40 +0200 (MET DST)
Received: from wproxy.gmail.com (wproxy.gmail.com [64.233.184.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j7OJPd2O015417
	for <caml-list@inria.fr>; Wed, 24 Aug 2005 21:25:40 +0200
Received: by wproxy.gmail.com with SMTP id 68so188951wra
        for <caml-list@inria.fr>; Wed, 24 Aug 2005 12:25:39 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:mime-version:content-type;
        b=HPB4GOZ1/DvXuoWl9Wui/7F4itzwivKYCr4NiTkr60hmRQsen4UA7J1R5OWtRoGr5LQWYC9Xa9o9/rkZwqwV4eX3o4kZJPhrqzmoAkf1t0lwRAJVvJFvyN38YjepREwze0z1S1zf1snoes8wX5eW1/7ygUiwUVbIBtb867XzmKo=
Received: by 10.54.63.12 with SMTP id l12mr1043788wra;
        Wed, 24 Aug 2005 12:25:39 -0700 (PDT)
Received: by 10.54.154.6 with HTTP; Wed, 24 Aug 2005 12:25:39 -0700 (PDT)
Message-ID: <891bd33905082412251057b54c@mail.gmail.com>
Date: Wed, 24 Aug 2005 15:25:39 -0400
From: Yaron Minsky <yminsky@gmail.com>
Reply-To: yminsky@cs.cornell.edu
To: Caml Mailing List <caml-list@inria.fr>
Subject: Faking multimethods in OCaml
Mime-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_407_33128635.1124911539079"
X-Miltered: at nez-perce with ID 430CC9B5.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 430CC9B3.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; yaron:01 minsky:01 yminsky:01 multimethods:01 ocaml:01 simulating:01 multimethods:01 ocaml:01 foo:01 foo:01 struct:01 val:01 val:01 struct:01 failwith:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=HTML_20_30,HTML_MESSAGE,
	RCVD_BY_IP autolearn=disabled version=3.0.3

------=_Part_407_33128635.1124911539079
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I'm looking at ways of simulating multimethods in OCaml, and wanted to see=
=20
if other people had any better solutions.

Here's a basic example. Imagine that we have two roles to be filled: let's=
=20
call them a foo and a bar. We're going to have a few functions that opreate=
=20
on foo's and bar's, and some of these functions operate jointly. Imagine,=
=20
for example, that there is a function for adding new information (in the=20
form of a float) to a foo as well as to a bar, and then there's a function=
=20
for jointly evaluating a foo and a bar, which produces another float. Here'=
s=20
a simple example of how this might be realized. First, we might have two=20
base modules, each implementing.

module M1
struct
type foo =3D ...
type bar =3D ....

let update_foo foo (x:float) =3D ...
val update_bar bar (x:float) =3D ..
val eval foo bar : float =3D ...
end

module M2
struct
type foo =3D ...
type bar =3D ....

let update_foo foo (x:float) =3D ...
val update_bar bar (x:float) =3D ..
val eval foo bar : float =3D ...
end

Now let's say I want to create a module that combines these two modules int=
o=20
one. It would support all the same functions, but in each slot it could=20
either take one of types from M1 or from M2. The multi-method issue comes i=
n=20
when you're trying to apply the eval function to a foo and a bar. Here, we=
=20
want the function to throw an exception if the foo and the bar don't come=
=20
from the same module. We can achieve this as follows:

module Joined=20
struct
type foo =3D [ `M1 of M1.foo | `M2 of M2.foo ]
type bar =3D [ `M1 of M1.bar | `M2 of M2.bar ]

let update_foo foo x =3D match foo with
| `M1 foo -> M1.update_foo foo x
| `M2 foo -> M2.update_foo foo x

let update_bar bar x =3D match bar with
| `M1 foo -> M1.update_foo foo x
| `M2 foo -> M2.update_foo foo x

let eval foo bar =3D match foo,bar with
| `M1 foo, `M1 bar -> M1.eval foo bar
| `M2 foo, `M2 bar -> M2.eval foo bar
| _ -> failwith "mismatched foo and bar"
end

This basically does everything I want, but is rather a pain in practice. In=
=20
particular, I have to redo this every time I want to combine a different se=
t=20
of modules. And in realistic examples, the number of functions and the=20
number of modules to be combined gets quite a bit longer.

I can kind of do something like this in a more automatic way. I can kind of=
=20
do this in the following way. I can wrap the original functions in the=20
following way:

module M1
struct
...
let wrapped_eval =3D function (foo,bar) ->=20
`M1 foo, `M1 bar -> eval foo bar
| _ -> raise Exit
end

then, we can combine a list of such functions with a merge function, like=
=20
this:

let rec merge flist x =3D match flist with
[] -> None
| hd::tl ->=20
match (try Some (hd x)
with Exit -> None)
with
| None -> merge tl x
| Some _ as rval -> rval

Now, I can define a merged eval function like this:

let m1m2_eval foo bar =3D merge [M1.wrapped_eval; M2.wrapped_eval] (foo,bar=
)

This basically works, but a fair amount of extra gymnastics is required to=
=20
get this working cleanly, and the end result isn't all that efficient. So, =
I=20
guess the question is, does anyone know of any better way of implementing=
=20
multi-methods than this?

Yaron

------=_Part_407_33128635.1124911539079
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I'm looking at ways of simulating multimethods in OCaml, and wanted to see =
if other people had any better solutions.<br>
<br>
Here's a basic example.&nbsp; Imagine that we have two roles to be
filled:&nbsp; let's call them a foo and a bar.&nbsp; We're going to
have a few functions that opreate on foo's and bar's, and some of these
functions operate jointly.&nbsp; Imagine, for example, that there is a
function for adding new information (in the form of a float) to a foo
as well as to a bar, and then there's a function for jointly evaluating
a foo and a bar, which produces another float.&nbsp; Here's a simple
example of how this might be realized.&nbsp; First, we might have two
base modules, each implementing.<br>
<br>
module M1<br>
struct<br>
&nbsp; type foo =3D ...<br>
&nbsp; type bar =3D ....<br>
<br>
&nbsp; let update_foo foo (x:float) =3D ...<br>
&nbsp; val update_bar bar (x:float) =3D ..<br>
&nbsp; val eval foo bar : float =3D ...<br>
end<br>
<br>
module M2<br>

struct<br>

&nbsp; type foo =3D ...<br>

&nbsp; type bar =3D ....<br>

<br>

&nbsp; let update_foo foo (x:float) =3D ...<br>

&nbsp; val update_bar bar (x:float) =3D ..<br>

&nbsp; val eval foo bar : float =3D ...<br>

end<br>
<br>
Now let's say I want to create a module that combines these two modules
into one.&nbsp; It would support all the same functions, but in each
slot it could either take one of types from M1 or from M2.&nbsp; The
multi-method issue comes in when you're trying to apply the eval
function to a foo and a bar.&nbsp; Here, we want the function to throw
an exception if the foo and the bar don't come from the same
module.&nbsp; We can achieve this as follows:<br>
<br>
module Joined <br>
struct<br>
&nbsp; type foo =3D [ `M1 of M1.foo | `M2 of M2.foo ]<br>
&nbsp; type bar =3D [ `M1 of M1.bar | `M2 of M2.bar ]<br>
<br>
&nbsp; let update_foo foo x =3D match foo with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `M1 foo -&gt; M1.update_foo foo x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `M2 foo -&gt; M2.update_foo foo x<br>
<br>
&nbsp; let update_bar bar x =3D  match bar with<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `M1 foo -&gt; M1.update_foo foo x<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `M2 foo -&gt; M2.update_foo foo x<br>
<br>
&nbsp; let eval foo bar =3D match foo,bar with<br>
&nbsp;&nbsp;&nbsp;&nbsp; | `M1 foo, `M1 bar -&gt; M1.eval foo bar<br>
&nbsp;&nbsp;&nbsp;&nbsp; | `M2 foo, `M2 bar -&gt; M2.eval foo bar<br>
&nbsp;&nbsp;&nbsp;&nbsp; | _ -&gt; failwith &quot;mismatched foo and bar&qu=
ot;<br>
end<br>
<br>
This basically does everything I want, but is rather a pain in
practice.&nbsp; In particular, I have to redo this every time I want to
combine a different set of modules.&nbsp; And in realistic examples,
the number of functions and the number of modules to be combined gets
quite a bit longer.<br>
<br>
I can kind of do something like this in a more automatic way.&nbsp; I
can kind of do this in the following way.&nbsp; I can wrap the original
functions in the following way:<br>
<br>
module M1<br>
struct<br>
...<br>
&nbsp;&nbsp; let wrapped_eval =3D function (foo,bar) -&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `M1 foo, `M1 bar -&gt; eval foo bar<br=
>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | _ -&gt; raise Exit<br>
end<br>
<br>
then, we can combine a list of such functions with a merge function, like t=
his:<br>
<br>
let rec merge flist x =3D match flist with<br>
&nbsp;&nbsp;&nbsp; [] -&gt; None<br>
&nbsp; | hd::tl -&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; match (try Some (hd x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wi=
th Exit -&gt; None)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | None -&gt; merge tl x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Some _ as rval -&gt; rval<br>
<br>
Now, I can define a merged eval function like this:<br>
<br>
let m1m2_eval foo bar =3D merge [M1.wrapped_eval; M2.wrapped_eval] (foo,bar=
)<br>
<br>
This basically works, but a fair amount of extra gymnastics is required
to get this working cleanly, and the end result isn't all that
efficient.&nbsp; So, I guess the question is, does anyone know of any
better way of implementing multi-methods than this?<br>
<br>
Yaron<br>

------=_Part_407_33128635.1124911539079--

