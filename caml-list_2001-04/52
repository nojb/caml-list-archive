Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA18280; Tue, 3 Apr 2001 11:55:38 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA18443 for <caml-list@pauillac.inria.fr>; Tue, 3 Apr 2001 11:55:38 +0200 (MET DST)
Received: from cs.huji.ac.il (cs.huji.ac.il [132.65.16.10])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f339tbP05446
	for <caml-list@inria.fr>; Tue, 3 Apr 2001 11:55:37 +0200 (MET DST)
Received: from zigzag.cs.huji.ac.il ([132.65.208.204] ident=root)
	by cs.huji.ac.il with esmtp (Exim 3.22 #1)
	id 14kNXE-0001hM-00
	for caml-list@inria.fr; Tue, 03 Apr 2001 11:55:36 +0200
Received: (from orodeh@localhost) by zigzag.cs.huji.ac.il (8.9.3/1.1c)
  id LAA20784; Tue, 3 Apr 2001 11:55:35 +0200
Date: Tue, 3 Apr 2001 11:55:35 +0200 (IST)
From: Ohad Rodeh <orodeh@cs.huji.ac.il>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Future of labels, and ideas for library labelling
In-Reply-To: <20010403105212.A15700@pauillac.inria.fr>
Message-ID: <Pine.LNX.4.20_heb2.08.0104031154440.20692-100000@zigzag.cs.huji.ac.il>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

List,
  I've been using OCaml for several years now, taught
with it, and helped build and maintain a very large (80KLOC) line
serious application with it. I think it is a truly
great language. 

My opinion with regards to Labels is that they are a fine
extension of the language, allowing better documentation and
type checking. However, using compulsory label-mode would require me
to change all my calls to Higher-Order functions in the standard
library (e.g. List.{map,for_all,exists,for_all2,exists2,...}).
I also use the Unix module regularly, and I wouldn't like the added
verbosity of labels. 

So, while labels are a find addition, they should stay out of the way
of ordinary usage, so they are in fact optional much like 
objects, polymorphic variants, and functors. 

All the best, 
   Ohad.

----------------------------------------------------------
orodeh@cs.huji.ac.il
www.cs.huji.ac.il/~orodeh




-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

