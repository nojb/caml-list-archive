Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA02443; Wed, 11 Apr 2001 00:44:07 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA02444 for <caml-list@pauillac.inria.fr>; Wed, 11 Apr 2001 00:44:06 +0200 (MET DST)
Received: from shell5.ba.best.com (shell5.ba.best.com [206.184.139.136])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f3AMi5n14652
	for <caml-list@inria.fr>; Wed, 11 Apr 2001 00:44:05 +0200 (MET DST)
Received: from localhost (bpr@localhost)
	by shell5.ba.best.com (8.9.3/8.9.2/best.sh) with ESMTP id PAA04125;
	Tue, 10 Apr 2001 15:43:52 -0700 (PDT)
Date: Tue, 10 Apr 2001 15:43:52 -0700 (PDT)
From: Brian Rogoff <bpr@best.com>
To: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Future of labels, and ideas for library labelling
In-Reply-To: <20010410123756H.garrigue@kurims.kyoto-u.ac.jp>
Message-ID: <Pine.BSF.4.21.0104101532420.19841-100000@shell5.ba.best.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 10 Apr 2001, Jacques Garrigue wrote:
> To summarize recent posts by various people, there are two approaches
> for a universal mode:
> 
> * Take the label mode as a basis, and split libraries where needed to
>   avoid troubling non-labellers.
>   Labels, when present, are no longer optional.
> 
> * Extend classic mode with commutation, and keep labels in libraries.
>   Labels are kept optional.
> 
> Now let me explain what is the trouble with the second option.
> To put it simply: you cannot have commutation, first class
> functions, type inference, and allow discarding of labels in
> unification.

I know you'll hate this, but what about insisting on an explicit type for 
functions which use commuting labels? Could something like that be made to
work? 

I think in other cases (yes, I will mention polymorphic recursion again:) we 
consider explicit typing to get what we want; would that work here? If so, 
could it be made to work so that if you don't use commuting labels you
don't have to provide the type? 

Anyways, I think that because we have two modes, we probably still have
two communities, with former OLabl users using commuting label mode and
most others just doing what they've always done as well, and maybe trying
labels just a little bit. It's difficult to see a way forward, and as much
as you don't like it the classic mode seems a better chance for labels, as
it is less obtrusive in some sense. 

-- Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

