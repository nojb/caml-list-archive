Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA22516; Thu, 5 Apr 2001 05:48:49 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA22223 for <caml-list@pauillac.inria.fr>; Thu, 5 Apr 2001 05:48:49 +0200 (MET DST)
Received: from shell5.ba.best.com (shell5.ba.best.com [206.184.139.136])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f353mH519800
	for <caml-list@inria.fr>; Thu, 5 Apr 2001 05:48:18 +0200 (MET DST)
Received: from localhost (bpr@localhost)
	by shell5.ba.best.com (8.9.3/8.9.2/best.sh) with ESMTP id UAA05713;
	Wed, 4 Apr 2001 20:48:13 -0700 (PDT)
Date: Wed, 4 Apr 2001 20:48:13 -0700 (PDT)
From: Brian Rogoff <bpr@best.com>
To: mahamud@cs.cmu.edu
cc: caml-list@inria.fr
Subject: Re: [Caml-list] semi-colons and begin
In-Reply-To: <15051.47224.795222.890002@marr.ius.cs.cmu.edu>
Message-ID: <Pine.BSF.4.21.0104042032090.28200-100000@shell5.ba.best.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 4 Apr 2001 mahamud@cs.cmu.edu wrote:
> another minor point regarding syntax : 
> the use of "(* ... *)" prevents one from passing the multiplication
> "*" operator as an argument (say to List.map2) without 
> padding some space as in : ( * ) as opposed to (*).
> it's a small point, but i don't think i've come across such unintended
> interactions between comments and other constructs in other languages.

Not comments, but C++ has a similar issue with template syntax last I
looked. That's no excuse, just an observation. 

> while i still have your attention, one last comment :
> as you may have guessed i primarily use OCAML for writing code that
> mostly do number crunching. i know you've all seen others writing similar
> code beg for something like overloading. and i want to chime in too
> for what its worth : why can't OCAML do what SML does ? 
> overload the standard arithmetic operators to do both int and double

No no no no no no! I'd run screaming if the good folks at INRIA botched
overloading as feebly as SML. I *hate* languages that provide some
overloading and then place bizarre restrictions on it, or where the
designers tell you that overloading is bad, except where they've decided
it's good, like Java. 

Phew, that said, it looks like the extensional polymorphism approach is
what will make it (maybe) into OCaml. No response yet on the question of
having to define all overloadings in the same place. 

As long as we're making random comments, it would be nice to see a bit
more discussion of syntax here (apart from the annual label war :). I
really liked ddr's approach to separating the cases of tupling in
Revised. I think that I'm leaning more to Gerard Huet's syntax preference
on imperative constructs though, which is to use parens around the
sequence, rather than the do .. return exp syntax, though I suppose in
the interests of looking like Haskell (and making imperative constructs
stand out a bit more) I could handle a do (e1; ...; en) or some brackets
that stand out more, like (< >) for example

-- Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

