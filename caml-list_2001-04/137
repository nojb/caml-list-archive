Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA29827; Sun, 8 Apr 2001 02:22:36 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA29823 for <caml-list@pauillac.inria.fr>; Sun, 8 Apr 2001 02:22:35 +0200 (MET DST)
Received: from opus.cs.cornell.edu (exchange.cs.cornell.edu [128.84.97.8])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f380MYj08499
	for <caml-list@inria.fr>; Sun, 8 Apr 2001 02:22:34 +0200 (MET DST)
Received: by opus.cs.cornell.edu with Internet Mail Service (5.5.2650.21)
	id <2HK0GV11>; Sat, 7 Apr 2001 20:22:34 -0400
Message-ID: <706871B20764CD449DB0E8E3D81C4D43016049F4@opus.cs.cornell.edu>
From: jgm@cs.cornell.edu
To: caml-list@inria.fr
Subject: RE: [Caml-list] variant with tuple arg in pattern match?
Date: Sat, 7 Apr 2001 20:22:33 -0400 
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2650.21)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Type-based compilation strategies such as TAL and FLINT can deal with
> this issue, but at considerable cost in complexity of the compiler and
> execution speed.

Er, you mean TIL :-)  TAL doesn't care which one you choose.

> Frankly, I think there is no point in maintaining the illusion that
> datatype constructors are either nullary (constant) or unary.  The
> only efficient implementation model is N-ary constructors, so let's
> reflect this in the language.

I agree.  Besides, if you're going to go the uniform route, why not
have all constructors be unary?  This always annoyed me in SML.  

> I agree that in an ideal world the syntax of the declaration should
> make this more explicit, e.g. the CamlP4 way ("Foo of int and int"
> vs. "Foo of int * int").  The current "syntactic overloading" of "*"
> in constructor declarations is sometimes misleading, but did make the
> conversion from Caml V3.1 code convenient a long, long time ago...

What's wrong with "Foo of int,int" or "Foo of (int,int)"?

JGM
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

