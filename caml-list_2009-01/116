Return-Path: <hmf@inescporto.pt>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.8 required=5.0 tests=AWL,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 6AE7FBB84
	for <caml-list@yquem.inria.fr>; Fri, 16 Jan 2009 09:42:54 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtACAGTXb0nVhjEYkWdsb2JhbACUAQEBAQEJCwoHEQMruG2FcQ
X-IronPort-AV: E=Sophos;i="4.37,276,1231110000"; 
   d="scan'208";a="33822096"
Received: from ihsmtp02voda.lis.interhost.com (HELO ihsmtp02cons.lis.interhost.com) ([213.134.49.24])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 16 Jan 2009 09:42:54 +0100
Received: from [192.168.1.64] ([77.54.249.136]) by ihsmtp02cons.lis.interhost.com with Microsoft SMTPSVC(6.0.3790.3959);
	 Fri, 16 Jan 2009 08:40:16 +0000
Message-ID: <4970488C.9080104@inescporto.pt>
Date: Fri, 16 Jan 2009 08:42:52 +0000
From: Hugo Ferreira <hmf@inescporto.pt>
User-Agent: Thunderbird 2.0.0.19 (X11/20090105)
MIME-Version: 1.0
To: "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Optimizing symbolic processing code
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 16 Jan 2009 08:40:16.0683 (UTC) FILETIME=[0E714FB0:01C977B6]
X-Spam: no; 0.00; inference:01 inference:01 compiler:01 ocaml:01 node:01 prolog:01 prolog:01 symbolic:01 implemented:02 algorithms:03 optimizing:03 optimizing:03 ilp:07 tia:08 machine:09 

Hello,

I have implemented a simple Prolog like inference engine
to be used in machine learning algorithms (ILP). My first
basic test shows that inference is dismally slow (compared
to a Prolog compiler). Consequently I am looking for
information on optimizing the code. I have found:

http://ocaml.janestreet.com/?q=node/30
http://camltastic.blogspot.com/2008/05/optimizing-memory-allocation-and-loops.html

Does anyone have any other links or articles I may look at?

TIA,
Hugo F.


