Return-Path: <d0@wp.pl>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_FAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 63791BBAF
	for <caml-list@yquem.inria.fr>; Fri, 23 Jan 2009 15:20:48 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhUBAAZheUnUTWUFkGdsb2JhbACTfgEBAQEJCQwHEQS4CYVz
X-IronPort-AV: E=Sophos;i="4.37,312,1231110000"; 
   d="scan'208";a="22955884"
Received: from mx1.wp.pl ([212.77.101.5])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 23 Jan 2009 15:20:48 +0100
Received: (wp-smtpd smtp.wp.pl 15234 invoked from network); 23 Jan 2009 15:20:45 +0100
Received: from phpdk6.ph.kcl.ac.uk (HELO [137.73.5.196]) (d0@[137.73.5.196])
          (envelope-sender <d0@wp.pl>)
          by smtp.wp.pl (WP-SMTPD) with AES256-SHA encrypted SMTP
          for <caml-list@yquem.inria.fr>; 23 Jan 2009 15:20:45 +0100
Message-ID: <4979D239.9010208@wp.pl>
Date: Fri, 23 Jan 2009 14:20:41 +0000
From: Dawid Toton <d0@wp.pl>
User-Agent: Thunderbird 1.5.0.12 (X11/20090107)
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] (Not) corrupt output of printf
References: <4978AB4C.7000900@uj.edu.pl> <4979A803.4050603@wp.pl> <20090123131638.GA32545@annexia.org>
In-Reply-To: <20090123131638.GA32545@annexia.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-WP-AV: skaner antywirusowy poczty Wirtualnej Polski S. A.
X-WP-SPAM: NO 0000000 [QdOE]                               
X-Spam: no; 0.00; printf:01 ocaml:01 incompatible:01 caml-list:01 functions:01 explicitly:02 exits:02 output:02 output:02 flush:03 flush:03 bytes:03 library:03 stream:04 raises:05 


> Weird ... I was going to suggeest it was because you weren't flushing
> the output after each print statement.  

This raises important question:
Let's see the output as a sequence of bytes (there's no time).
Assuming that the process exits normally and incompatible printing 
functions are not mixed:
is there a guarantee (in OCaml library) that the flush operation doesn't 
affect the output?

For me it's obvious that the output shouldn't depend on the presence of 
flush operations. If otherwise - needs to be explicitly stated.

(Of course I'm not considering the one special flush action done when 
closing a stream, but it's tied to the closing function.)

Dawid

