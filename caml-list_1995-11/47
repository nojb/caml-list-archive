Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id RAA01521 for caml-redistribution; Tue, 28 Nov 1995 17:51:28 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id RAA01172 for <caml-list@pauillac.inria.fr>; Tue, 28 Nov 1995 17:37:12 +0100
Received: from margaux.inria.fr (margaux.inria.fr [128.93.8.2]) by concorde.inria.fr (8.7.1/8.7.1) with ESMTP id RAA27186 for <caml-list@pauillac.inria.fr>; Tue, 28 Nov 1995 17:37:11 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by margaux.inria.fr (8.6.10/8.6.6) with ESMTP id RAA06676 for <caml-list@margaux.inria.fr>; Tue, 28 Nov 1995 17:37:11 +0100
Received: from fronsac.inria.fr (fronsac.inria.fr [128.93.8.72]) by concorde.inria.fr (8.7.1/8.7.1) with ESMTP id RAA27182 for <caml-list@margaux.inria.fr>; Tue, 28 Nov 1995 17:37:10 +0100 (MET)
Received: from localhost (rouaix@localhost) by fronsac.inria.fr (8.6.10/8.6.6) with SMTP id RAA29698 for <caml-list@margaux.inria.fr>; Tue, 28 Nov 1995 17:37:24 +0100
Message-Id: <199511281637.RAA29698@fronsac.inria.fr>
X-Authentication-Warning: fronsac.inria.fr: Host localhost didn't use HELO protocol
X-Mailer: exmh version 1.6.4 10/10/95
To: caml-list@margaux.inria.fr
Subject: Re: MMM, a Web browser with applets in Caml Special Light 
In-reply-to: Your message of "Tue, 28 Nov 1995 17:09:01 +0100."
             <m0tKSaf-0002khC@liasg6.epfl.ch> 
Reply-To: Francois.Rouaix@inria.fr
X-uri: http://pauillac.inria.fr/~rouaix/
X-Face: (0Y_n(V51BL8=yDki='|>_Gh+\:mC&`q1xHDEP?Pj'5{"Mqg(`"P3@"sREkk`E<S"l[z~vC!gEh}y;96~"$0O[GEP7rh\]F^b?M$}-Rq-Tt'SM+omf%$;v"hnG68NV<IyyJf3U}A!a%s_@v6Zj;x8#W2C0D(D)^RoJ^^UaDc(N%DTX/;#1Lg3CJ2hQH%*z7j
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Tue, 28 Nov 1995 17:37:22 +0100
From: Francois Rouaix <Francois.Rouaix@inria.fr>
Sender: weis
Status: O


> Confirmation by the user sounds stupid to me. How is he supposed to know
> that the bytecode is correct ? I see a few alternatives:
> - somehow check the bytecodes (Java does it, but I have no idea if it's
>   doable with CSL's bytecodes)

Open problem. The idea here is "Keep It Simple and Stupid". CSL removes all
type information from the bytecode (except link information).
I'm not going to put it back to do type checking on the 
bytecode (assuming it is feasible at all).

> - transmit source rather than byte codes (since source code can be checked
>   easily)

Easily, easily. I would not bet on it. Besides, it would mean embedding the CSL
compiler inside the browser. Moreover, the point of distributing bytecode is
precisely not to transmit the source.

> - use authentication: the bytecode has to be signed by some trusted entity.
>   It would for instance be possible to provide a mail server that receives
>   CSL source, compiles it, and signs it with its private key: checking the
>   signature against the widely available publickey would prove that it is
>   really the output of an unmodified CSL compiler. This would probably require
>   the use of PGP3's API since forking a PGP for each execution sounds
>   awfully expensive to me (the advantage of having precompiled bytecode
>   would be less obvious)

I have the impression that I wrote about this all over the place in the
various MMM documents related to security, in particular:
<URL:http://pauillac.inria.fr/~rouaix/mmm/papers/mmm.ps.gz>
<URL:http://pauillac.inria.fr/~rouaix/mmm/manual/node4.html>

Please note that <http://pauillac.inria.fr/~rouaix/mmm/applets.html> is only
a very short introduction.

*Indeed*, I am advocating the use of trusted compilers.

Concerning the PGP3 API (for which I haven't seen public announces yet,
though I may not be watching the proper groups):
There is no need to authenticate the bytecode at each compilation during
the development. The applet author can trust his own bytecodes.
If it turns out to be a performance problem for a trusted compiler, then
yes, of course, the PGP3 API will be used.
For the browser itself, we need to fork PGP only once for each bytecode
received, so I don't think it is too much of an overhead.
There will be a legal problem if I attempt to distribute browser binaries
which include PGP code.


> I can deal with this. Providing threads would be a good idea anyway in CSL, tho.

Don't hold you breath, but threads are the latest goodie available for CSL,
and the very next thing to be integrated in MMM.

> But it should be possible to restrict the CPU and memory usage (and probably
> other aspects like network, file system, processes, etc...) of a thread.

Yes, I had the same idea. If you have more precise views on how this should be
made, feel free to share.

--
Francois.Rouaix@inria.fr                   Projet Cristal - INRIA Rocquencourt
WWW Home Page: http://pauillac.inria.fr/~rouaix/





