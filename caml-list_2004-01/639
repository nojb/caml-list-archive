Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA17358; Thu, 29 Jan 2004 18:19:50 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA16816 for <caml-list@pauillac.inria.fr>; Thu, 29 Jan 2004 18:19:49 +0100 (MET)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from wetware.com (wetware.wetware.com [199.108.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id i0THJlP21077
	for <caml-list@inria.fr>; Thu, 29 Jan 2004 18:19:47 +0100 (MET)
Received: from [208.177.152.18] (helo=[10.0.1.7])
	by wetware.com with esmtp (Exim 4.20)
	id 1AmFpS-0001Zs-MP
	for caml-list@inria.fr; Thu, 29 Jan 2004 09:19:46 -0800
Mime-Version: 1.0 (Apple Message framework v612)
In-Reply-To: <40193B59.9050700@ps.uni-sb.de>
References: <20040127063230.GA12482@inv_machine>  <200401282326.i0SNQntl004612@bismarck-chet.watson.ibm.com> <97908806-5238-11D8-8975-000393B8133A@wetware.com> <Pine.LNX.4.58L.0401291241410.23592@ontil.ihep.su> <4018E282.2040404@dcs.qmul.ac.uk> <Pine.LNX.4.58L.0401291840190.4125@ontil.ihep.su> <401930C6.8060907@dcs.qmul.ac.uk> <40193B59.9050700@ps.uni-sb.de>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <54B4181A-527F-11D8-9FE3-000393B8133A@wetware.com>
Content-Transfer-Encoding: 7bit
From: james woodyatt <jhw@wetware.com>
Subject: Re: [Caml-list] ocaml and concurrency
Date: Thu, 29 Jan 2004 09:19:44 -0800
To: The Trade <caml-list@inria.fr>
X-Mailer: Apple Mail (2.612)
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; woodyatt:01 jhw:01 wetware:01 caml-list:01 rossberg:01 lacking:01 expressivity:01 closures:01 stateful:01 touted:01 monad:01 monad:01 woodyatt:01 jhw:01 wetware:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On 29 Jan 2004, at 08:56, Andreas Rossberg wrote:
> Martin Berger wrote:
>>>  Nothing? Did you forget about the possibility to code without
>>> side effects?
>> you have this possibility in java too, albeit less conveniently
>> due to lacking type expressivity.
>
> And even more so due to the lack of real closures, and tail calls. You 
> are practically bound to stateful loops and iterators in Java and 
> similar languages.

Not to mention the happy fact that the library of reuseable code in 
Java, widely touted as "extensive and rich," is heavy with side 
effects.  Unless you want to rewrite the world to get rid of side 
effects, you're stuck trying to wrap imperative code in functional 
wrappers-- a trick not easily done without using the continuation 
monad.

I can't even *imagine* what the continuation monad looks like in Java.  
Does anyone have an example?


-- 
j h woodyatt <jhw@wetware.com>
that's my village calling... no doubt, they want their idiot back.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

