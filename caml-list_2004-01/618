Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA22559; Thu, 29 Jan 2004 11:38:27 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA21830 for <caml-list@pauillac.inria.fr>; Thu, 29 Jan 2004 11:38:26 +0100 (MET)
Received: from mail.dcs.qmul.ac.uk (vicar.dcs.qmul.ac.uk [138.37.88.163])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id i0TAcPP16025
	for <caml-list@inria.fr>; Thu, 29 Jan 2004 11:38:26 +0100 (MET)
Received: from xenografia.plus.com ([212.159.85.26] helo=dcs.qmul.ac.uk)
	by mail.dcs.qmul.ac.uk with asmtp (TLSv1:DHE-RSA-AES256-SHA:256)
	(Exim 4.30)
	id 1Am9Z3-0007Jd-Ax; Thu, 29 Jan 2004 10:38:25 +0000
Message-ID: <4018E282.2040404@dcs.qmul.ac.uk>
Date: Thu, 29 Jan 2004 10:37:54 +0000
From: Martin Berger <martinb@dcs.qmul.ac.uk>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4.1) Gecko/20031114
X-Accept-Language: en, en-us
MIME-Version: 1.0
To: Vitaly Lugovsky <vsl@ontil.ihep.su>
CC: The Trade <caml-list@inria.fr>
Subject: Re: [Caml-list] ocaml and concurrency
References: <20040127063230.GA12482@inv_machine>  <200401282326.i0SNQntl004612@bismarck-chet.watson.ibm.com> <97908806-5238-11D8-8975-000393B8133A@wetware.com> <Pine.LNX.4.58L.0401291241410.23592@ontil.ihep.su>
In-Reply-To: <Pine.LNX.4.58L.0401291241410.23592@ontil.ihep.su>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Auth-User: martinb
X-clamav-result: clean (1Am9Z3-0007Jd-Ax)
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 lacks:01 ocaml's:01 passing:01 liveness:01 expressive:01 orthogonal:01 ocaml:01 ocaml:01 approaches:01 essentially:02 library:03 types:03 implement:05 queue:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

>  You may want to try my mpassing library, which now lacks the
> sequental orthodox unixish message queue, but it would be easy to
> implement (going to do it soon). I'm using it heavily in a
> distributed calculations as well as in a massive agent models and
> as a simple way to program "components", and I'm quite happy I
> don't ever met in OCaml any of the most common concurrncy bugs
> I enjoyed with Java and C++.

i wonder why. ocaml essentially offers the same approaches to
concurrency as do the relevant java or C/C++ libraries.
as far as i can see, there's nothing in Ocaml's approach to shared
memory concurrency that would prevent deadlocks or lack of mutual
exclusion, and there's nothing that prevents the usual problems
with message passing, like lack of liveness. you do have more expressive
types in Ocaml, but that is orthogonal to concurrency.

martin

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

