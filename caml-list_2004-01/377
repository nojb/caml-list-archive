Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA13394; Wed, 7 Jan 2004 14:01:00 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA13746 for <caml-list@pauillac.inria.fr>; Wed, 7 Jan 2004 14:00:58 +0100 (MET)
Received: from aomori.annexia.org (annexia.force9.co.uk [212.56.101.183])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id i07D0v517537
	for <caml-list@inria.fr>; Wed, 7 Jan 2004 14:00:57 +0100 (MET)
Received: from rich by aomori.annexia.org with local (Exim 3.36 #1 (Debian))
	id 1AeDIm-0004tY-00; Wed, 07 Jan 2004 13:00:48 +0000
Date: Wed, 7 Jan 2004 13:00:48 +0000
To: Kip Macy <kmacy@fsmware.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] adding an ocaml interpreter to my C program
Message-ID: <20040107130048.GA18624@redhat.com>
References: <20040107005029.V39150@demos.bsdclusters.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20040107005029.V39150@demos.bsdclusters.com>
User-Agent: Mutt/1.5.4i
From: Richard Jones <rich@annexia.org>
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 2004:99 kip:99 callbacks:01 callbackn:01 dynamically:01 horrific:01 hacks:01 dynlink:01 gdb:01 gdb:01 freshmeat:01 footprints:01 giants:99 ltd:98 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, Jan 07, 2004 at 01:01:00AM -0800, Kip Macy wrote:
> It is possible to add many scripting languages as configuration
> languages for an arbitrary C program. One can transfer control
> to the interpreter, let it use the C bindings to modify program
> state, and then get control back. I'll give perl as an example:
[...]
> I don't see any obvious way of doing this with ocaml.

It's documented here (right at the bottom, in the "Advanced" section):

http://caml.inria.fr/ocaml/htmlman/manual032.html

Basically, you call caml_main, which runs your initialization code
(written in OCaml), which registers C callbacks, which your C can then
execute by calling callbackN ().

What the manual doesn't tell you is that none of this stuff works at
all if your C code is contained in a dynamically linked library (.so
file), unless you undertake some pretty horrific hacks.  Particularly
if you plan to use the OCaml Dynlink module at the same time.  See the
code in my mod_caml project[1] for details.

Also, it only works for bytecode.  (And it only works for compiled
code - linking in the toplevel so you can parse ML directly is a
different thing entirely).

> I'm using perl as a powerful macro language for gdb by just doing:
> (gdb) sourceperl mycoreanalyser.pl
> <OUTPUT>

You might also be interested in [2].

Rich.

[1] http://www.merjis.com/developers/mod_caml/
[2] http://www.merjis.com/developers/perl4caml/

-- 
Richard Jones. http://www.annexia.org/ http://freshmeat.net/users/rwmj
Merjis Ltd. http://www.merjis.com/ - improving website return on investment
If I have not seen as far as others, it is because I have been
standing in the footprints of giants.  -- from Usenet

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

