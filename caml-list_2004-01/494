Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA05898; Tue, 20 Jan 2004 20:37:59 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA05622 for <caml-list@pauillac.inria.fr>; Tue, 20 Jan 2004 20:37:58 +0100 (MET)
Received: from mail.davidb.org (adsl-64-172-240-129.dsl.sndg02.pacbell.net [64.172.240.129])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id i0KJbvv22315
	for <caml-list@inria.fr>; Tue, 20 Jan 2004 20:37:57 +0100 (MET)
Received: from davidb by mail.davidb.org with local (Exim 3.36 #1 (Debian))
	id 1Aj1hE-0006j2-00
	for <caml-list@inria.fr>; Tue, 20 Jan 2004 11:37:56 -0800
Date: Tue, 20 Jan 2004 11:37:56 -0800
From: David Brown <caml-list@davidb.org>
To: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] ANNOUNCE: mod_caml 1.0.6 - includes security patch
Message-ID: <20040120193756.GA25813@davidb.org>
References: <20040116093454.GA23909@redhat.com> <200401192345.10735.exa@kablonet.com.tr> <20040120173423.GA19476@roke.freak> <200401201952.56605.exa@kablonet.com.tr> <20040120185445.GA26921@roke.freak>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20040120185445.GA26921@roke.freak>
User-Agent: Mutt/1.5.4i
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 caml-list:01 2004:99 michal:01 moskal:01 haskell:01 c's:01 ocaml:01 ocaml:01 caml:01 side-effects:02 patch:02 dave:03 wrote:03 readability:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, Jan 20, 2004 at 07:54:45PM +0100, Michal Moskal wrote:

> > > Now, the reader of the code might take false impression that f() is
> > > executed before g(). Of course there is no such danger with function
> > > definitions in where blocks, but still I think readability is the reason
> > > it is absent from ocaml.

The where clause works well for Haskell, because there are no order of
evaluation issues.  Because of side-effects, the where clause in ocaml
would usually just end up being confusing.  Think of a multi-page
expression with a where clause at the end.  Not that this is good code,
but it would sure be easy to miss.  It would probably cause the same
kinds of problems that C's 'break' causes in switch statements.

Dave Brown

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

