Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA06914; Thu, 29 Jan 2004 16:02:13 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA07053 for <caml-list@pauillac.inria.fr>; Thu, 29 Jan 2004 16:02:12 +0100 (MET)
Received: from aomori.annexia.org (annexia.force9.co.uk [212.56.101.183])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id i0TF2Bv01200
	for <caml-list@inria.fr>; Thu, 29 Jan 2004 16:02:11 +0100 (MET)
Received: from rich by aomori.annexia.org with local (Exim 3.36 #1 (Debian))
	id 1AmDgH-0008C6-00; Thu, 29 Jan 2004 15:02:09 +0000
Date: Thu, 29 Jan 2004 15:02:09 +0000
To: ronniec95@lineone.net
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] CamlDL/Abstract pointers problem
Message-ID: <20040129150209.GB30750@redhat.com>
References: <40169E8D00006067@mk-cpfrontend-1.mail.uk.tiscali.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <40169E8D00006067@mk-cpfrontend-1.mail.uk.tiscali.com>
User-Agent: Mutt/1.5.4i
From: Richard Jones <rich@annexia.org>
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 pointers:01 2004:99 ronniec:01 lineone:01 val:01 camlparam:01 camllocal:01 alloc:01 camlreturn:01 val:01 footprints:01 giants:99 ltd:98 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, Jan 29, 2004 at 01:06:39PM +0000, ronniec95@lineone.net wrote:
> All I want to do is just give Ocaml a pointer to something I've created
> in C and pass it back to other C functions later; don't want it to do anything
> with it (including moving it around the ocaml heap).\

It's my understanding that you can't just pass a pointer back to OCaml
and cast it to a value.  OCaml will think that the pointer points to
an OCaml heap object, and hence try to examine / move / delete it in
the garbage collector.  Instead you need to do one of two things:
either set the bottom bit to 1, in which case OCaml will treat it as a
plain integer, or else wrap it up in a box, as in the code below.  The
Abstract_tag tells the garbage collector not to look inside the box.

static value
Val_voidptr (void *ptr)
{
  CAMLparam0 ();
  CAMLlocal1 (rv);
  rv = alloc (1, Abstract_tag);
  Field(rv, 0) = (value) ptr;
  CAMLreturn (rv);
}

#define Voidptr_val(type,rv) ((type *) Field ((rv), 0))

You need to call Val_voidptr to wrap up your C void* pointer into an
OCaml box, and Voidptr_val to unwrap and get your pointer back again.

In any case you need to also add lots of calls to Gc.full_major () to
your code, which will trigger an early core dump if there is some
memory corruption.

Rich.

-- 
Richard Jones. http://www.annexia.org/ http://www.j-london.com/
Merjis Ltd. http://www.merjis.com/ - improving website return on investment
If I have not seen as far as others, it is because I have been
standing in the footprints of giants.  -- from Usenet

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

