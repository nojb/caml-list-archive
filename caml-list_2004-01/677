Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA12797; Fri, 30 Jan 2004 12:26:04 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA12704 for <caml-list@pauillac.inria.fr>; Fri, 30 Jan 2004 12:26:02 +0100 (MET)
Received: from mg.ihep.su (mg.ihep.su [194.190.161.38])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id i0UBQ2v19988
	for <caml-list@inria.fr>; Fri, 30 Jan 2004 12:26:02 +0100 (MET)
Received: by mg.ihep.su (Postfix, from userid 65436)
	id 4BF26B5847; Fri, 30 Jan 2004 14:26:01 +0300 (MSK)
Received: from mg.ihep.su (localhost [127.0.0.1])
	by mg.ihep.su (Postfix) with SMTP
	id CCB20B57D9; Fri, 30 Jan 2004 14:26:00 +0300 (MSK)
X-Mailbox-Line: From vsl@ontil.ihep.su  Fri Jan 30 14:26:00 2004
Received: from ontil.ihep.su (ontil.ihep.su [194.190.161.63])
	by mg.ihep.su (Postfix) with ESMTP
	id 576CAB5847; Fri, 30 Jan 2004 14:25:56 +0300 (MSK)
Received: by ontil.ihep.su (Postfix, from userid 1001)
	id 0B524100E2; Fri, 30 Jan 2004 14:25:12 +0300 (MSK)
Received: from localhost (localhost [127.0.0.1])
	by ontil.ihep.su (Postfix) with ESMTP
	id 09406100DD; Fri, 30 Jan 2004 14:25:12 +0300 (MSK)
Date: Fri, 30 Jan 2004 14:25:12 +0300 (MSK)
From: Vitaly Lugovsky <vsl@ontil.ihep.su>
To: Benjamin Geer <ben@socialtools.net>
Cc: Josh Burdick <jburdick@gradient.cis.upenn.edu>,
        Richard Jones <rich@annexia.org>,
        Inria Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] PostgreSQL-OCaml 1.0.1
In-Reply-To: <401A30ED.6090007@socialtools.net>
Message-ID: <Pine.LNX.4.58L.0401301419330.17414@ontil.ihep.su>
References: <20040128232131.GA22126@fichte.ai.univie.ac.at>
 <Pine.SOL.4.44.0401290922110.17012-100000@clipper.ens.fr>
 <20040129200653.GA14321@redhat.com> <4019F0B1.6050204@gradient.cis.upenn.edu>
 <Pine.LNX.4.58L.0401301117030.12020@ontil.ihep.su> <401A30ED.6090007@socialtools.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam-Status: No, hits=2.8 required=5.0 tests=IN_REP_TO,QL_SENT_FROM_MY_DOMAINS version=2.20
X-Spam-Level: **
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; vitaly:01 lugovsky:01 ontil:01 ihep:01 caml-list:01 1.0.1:01 abstractions:01 low-level:01 abstraction:01 heared:01 api:01 abstraction:01 abstractions:01 bindings:01 caml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


On Fri, 30 Jan 2004, Benjamin Geer wrote:

> >  It was already discussed here. The conclusion was: BAD IDEA. No
> > way to work efficiently with different DBs using the same
> > approach.
>
> In the company I work for (a large financial software vendor),
> the unanimous answer would be 'we don't care if it's less
> efficient; nothing else is acceptable.' Our customers insist on
> being able to use our products with whatever database they
> prefer (and certainly our competitors' products can do this).

 And what's a problem? Write a portable layer, which provides
YOUR application-oriented abstractions. Writing database-related
sub-layer would be easy enough yet, but you will not pay the
price of the efficiency.

> We simply cannot afford to rewrite and maintain all our
> database-related code for every one of those databases.

 It can't be so large. Fine-grained layer always contains no more
then a dozen of low-level entities.

>  For us (and, I think, for most software vendors, certainly all
> the ones I've worked for) the additional abstraction is well
> worth a slight loss of efficiency.  It is quite efficient
> enough for us.

 I've heared a lot of evil words from the industry programmers
about the "good enough" efficiency of the JDBC. And, they're even
have no alternatives, poor ones...

>  The lack of a standard database API is one of the things that,
> unfortunately, would make it very difficult for me to convince
> my boss to let me use Caml.

 You may provide one, your own, which is limited to the standard
JDBC-like abstraction level, it would be easy to support, if you
don't want to write a higher level abstractions (don't forget -
you'd pay much more for the problems with SQL incompatibility -
so there is no damn need in the JDBC-level layers at all). But
why the maintainers of that DB bindings, like me, would follow
someones "standard" limitations?


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

