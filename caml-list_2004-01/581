Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA22024; Wed, 28 Jan 2004 06:30:39 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA22147 for <caml-list@pauillac.inria.fr>; Wed, 28 Jan 2004 06:30:38 +0100 (MET)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from wetware.com (wetware.wetware.com [199.108.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id i0S5UbP21669
	for <caml-list@inria.fr>; Wed, 28 Jan 2004 06:30:37 +0100 (MET)
Received: from [208.177.152.18] (helo=[10.0.1.7])
	by wetware.com with esmtp (Exim 4.20)
	id 1AliHc-0003tk-0i
	for caml-list@inria.fr; Tue, 27 Jan 2004 21:30:36 -0800
Mime-Version: 1.0 (Apple Message framework v612)
In-Reply-To: <1075264726.2351.33.camel@localhost.localdomain>
References: <20040127063230.GA12482@inv_machine> <401627A9.9060901@baretta.com> <20040127094351.GA16215@inv_machine> <20040127183225.GK599@speakeasy.org> <1075264726.2351.33.camel@localhost.localdomain>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <18895EAD-5153-11D8-BCE1-000393B8133A@wetware.com>
Content-Transfer-Encoding: 7bit
From: james woodyatt <jhw@wetware.com>
Subject: Re: [Caml-list] ocaml killer
Date: Tue, 27 Jan 2004 21:30:34 -0800
To: The Trade <caml-list@inria.fr>
X-Mailer: Apple Mail (2.612)
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; woodyatt:01 jhw:01 wetware:01 caml-list:01 everyone--:01 cpan-like:01 runtime:01 woodyatt:01 jhw:01 wetware:01 ocaml:01 ocaml:01 native:02 modules:02 module:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

everyone--

At the risk of flogging a dead horse...

I still think the simplest and most effective way to improve the 
utility of Ocaml in the construction of large software projects is not 
a CPAN-like distributed source library-- it's a federated naming 
authority for library modules, like you find in the Java Runtime 
Environment.

This is the *one* glaring hole in the language as far as I'm concerned, 
and if I ever find myself in a position to do something about it-- I 
just might have to hack the tool chain myself to get what I want.  (On 
the other hand, the one glaring hole in the implementation that INRIA 
provides, if you ask me, is the incomplete support for dynamic module 
load/link in native code programs.  This is not that big a problem for 
me, but it would be nice to have.)

In all other respects, I'm more than satisfied-- I'm tickled pink.


-- 
j h woodyatt <jhw@wetware.com>
markets are only free to the people who own them.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

