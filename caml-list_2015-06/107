Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id BEF9E7EEBF
	for <caml-list@sympa.inria.fr>; Thu, 18 Jun 2015 21:44:34 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.218.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.218.47 as
  permitted sender) identity=mailfrom; client-ip=209.85.218.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oi0-f47.google.com) identity=helo;
  client-ip=209.85.218.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-oi0-f47.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0B4BADZHoNVlC/aVdFchEMGgxiqE4YPk1cHTAEBAQEBARIBAQEBBwsLCR8whBkiER0BGx4DEggBBzcCJAERAQUBIjWHdwEDEqBNgzE+MYs/gWuCeYsnChknDVeFLgEFDpMsgUMFk3CLS5ZcEiOBDAmEOyIxgkgBAQE
X-IPAS-Result: A0B4BADZHoNVlC/aVdFchEMGgxiqE4YPk1cHTAEBAQEBARIBAQEBBwsLCR8whBkiER0BGx4DEggBBzcCJAERAQUBIjWHdwEDEqBNgzE+MYs/gWuCeYsnChknDVeFLgEFDpMsgUMFk3CLS5ZcEiOBDAmEOyIxgkgBAQE
X-IronPort-AV: E=Sophos;i="5.13,640,1427752800"; 
   d="scan'208";a="136879663"
Received: from mail-oi0-f47.google.com ([209.85.218.47])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Jun 2015 21:44:33 +0200
Received: by oigx81 with SMTP id x81so65310790oig.1
        for <caml-list@inria.fr>; Thu, 18 Jun 2015 12:44:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=3lR4WN2cwvKliaxXEvPMROWFArfsQTPFLAIpuHKpwOA=;
        b=QE6LefXssLYIRbVKUlp44D2Wm4cJpOaY5/vSWO44Pj6N2PlmXBpDgc1inknlox7X6I
         yRcXFdwWy+fdObzNdClPvO8UN5sJ6Jk/LdouajItb3lpmQ6SZFhwblMNFLIXrMCkurzF
         rArR62ieiFSrAgUOAmTOmKiqy5Ww6BVzujjEdUvJnXNFelzbg58juINm53Z5wgwVq7za
         skk4wcKV3q0/pQeMDUMI15773rkQgYKCYMWNNS08aos49oDDtNiZ+3FWJcoUefs9dUsD
         D7wmj/4ev+Iw7PuBsTuyih4CBiouh52Pi4O6xu0Z2hE3HUpY5Eu6ISBMGJ2g62qto2sd
         xsqA==
MIME-Version: 1.0
X-Received: by 10.182.87.137 with SMTP id ay9mr10370266obb.68.1434656672689;
 Thu, 18 Jun 2015 12:44:32 -0700 (PDT)
Received: by 10.202.191.8 with HTTP; Thu, 18 Jun 2015 12:44:32 -0700 (PDT)
Received: by 10.202.191.8 with HTTP; Thu, 18 Jun 2015 12:44:32 -0700 (PDT)
Date: Thu, 18 Jun 2015 15:44:32 -0400
Message-ID: <CAK7rcp8-tBP1=kGK2fGHWnppUrkRe+U7vSEScRg4nL-qCgtfNg@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
To: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e0111c01a59b54a0518d0094d
Subject: [Caml-list] Compilation semantics for static garbage collection

--089e0111c01a59b54a0518d0094d
Content-Type: text/plain; charset=UTF-8

I was thinking that while rust is new, some of what it is pioneering is
really interesting, especially with the way it deals with ownership being a
type. Rust doesn't have a GC, yet it rules out leakage and remains fast. It
also manages concurrency safety very well.

The stipulations put on types in the ocaml language are pretty strict, and
the GC is transparent to the user. What is the possibility that there could
ever be a version of ocaml that makes use of something like ownership or
some typing mechanism to determine more at compile time, to facilitate the
removal or reduction of the GC?

--089e0111c01a59b54a0518d0094d
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">I was thinking that while rust is new, some of what it is pi=
oneering is really interesting, especially with the way it deals with owner=
ship being a type. Rust doesn&#39;t have a GC, yet it rules out leakage and=
 remains fast. It also manages concurrency safety very well.</p>
<p dir=3D"ltr">The stipulations put on types in the ocaml language are pret=
ty strict, and the GC is transparent to the user. What is the possibility t=
hat there could ever be a version of ocaml that makes use of something like=
 ownership or some typing mechanism to determine more at compile time, to f=
acilitate the removal or reduction of the GC?</p>

--089e0111c01a59b54a0518d0094d--
