Return-Path: <raould@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 3D4427EEBF
	for <caml-list@sympa.inria.fr>; Thu, 18 Jun 2015 22:00:59 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  raould@gmail.com) identity=pra; client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="raould@gmail.com";
  x-sender="raould@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  raould@gmail.com designates 209.85.218.43 as permitted
  sender) identity=mailfrom; client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="raould@gmail.com";
  x-sender="raould@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oi0-f43.google.com) identity=helo;
  client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="raould@gmail.com";
  x-sender="postmaster@mail-oi0-f43.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0DnBQBdIoNVmyvaVdFchEMGgxiwIpIeAoE3B0wBAQEBAQESAQEBAQEGCwsJIS5BBYNdAQEEEhEdARseAwwGBQsPAiYCAiIBEQEFARwGNYd3AQMSpAU+MYs/gWuCeYsqChknDVeFCAEBCAIBGQEFDoETiiSFDYJogUMFjHOGfYtLllwSI4EMCYQ/HjGCSAEBAQ
X-IPAS-Result: A0DnBQBdIoNVmyvaVdFchEMGgxiwIpIeAoE3B0wBAQEBAQESAQEBAQEGCwsJIS5BBYNdAQEEEhEdARseAwwGBQsPAiYCAiIBEQEFARwGNYd3AQMSpAU+MYs/gWuCeYsqChknDVeFCAEBCAIBGQEFDoETiiSFDYJogUMFjHOGfYtLllwSI4EMCYQ/HjGCSAEBAQ
X-IronPort-AV: E=Sophos;i="5.13,640,1427752800"; 
   d="scan'208";a="136881199"
Received: from mail-oi0-f43.google.com ([209.85.218.43])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Jun 2015 22:00:58 +0200
Received: by oigb199 with SMTP id b199so23957068oig.3
        for <caml-list@inria.fr>; Thu, 18 Jun 2015 13:00:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=ywoKrwWhv/B/zv9DINrPAEj04YMfRlXS2tUSjjmXO04=;
        b=UzLN3XKxFGNw8eBNBTh+VKYM9C7p6AROLtYYltx1ciW5/ISrl0iWCIlVGLqA4FHODV
         zitAb9n/aWIXid7JuEYIuGlvJTWErtMkLG8QPmw3tJ9ay2iH3hV/Oo9Abs9ljQKbjfJQ
         sGZsmDncA7ygplv5Zp5tp+XaITdiTJudqZB9UiteLaYVbB+TMRqWKL/ed1IjGMjW6lw/
         rxmUkUpiOitT5UES4GcnZ6N7wG+0eu+5rZT8SOZtIKoeepe7M7er360hlZZqzLEyzUoZ
         VpeWZKr3hrKKWxtIiyPz9bqSZOQ5BoQDK5vBn2Eyc6ujVQ1RGVPu126sRnQFkLu1WLZ7
         gNpA==
MIME-Version: 1.0
X-Received: by 10.60.34.36 with SMTP id w4mr8163112oei.69.1434657657002; Thu,
 18 Jun 2015 13:00:57 -0700 (PDT)
Received: by 10.182.226.168 with HTTP; Thu, 18 Jun 2015 13:00:56 -0700 (PDT)
In-Reply-To: <CAK7rcp-+-tE+4fB9qe46Kw2aa=ujtDhJwTyodBMScW8mFyD_jQ@mail.gmail.com>
References: <CAK7rcp_SFAx0PS3bgqxUA1dquYuzapXXsgw5A1mirq1Ztdog=Q@mail.gmail.com>
	<CAK7rcp-+-tE+4fB9qe46Kw2aa=ujtDhJwTyodBMScW8mFyD_jQ@mail.gmail.com>
Date: Thu, 18 Jun 2015 13:00:56 -0700
Message-ID: <CAJ7XQb7Or7ew_OXuFr+KtvC83FETPBC2Nq4wm_MOR1W-_3PdcA@mail.gmail.com>
From: Raoul Duke <raould@gmail.com>
To: caml users <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] Parallelism in newer versions of ocaml

Might be subjective. Some people don't mind having things be e.g.
event-driven co-operating threads style, which is probably already
available. :-) Beyond that, for something with e.g. pre-emption of
some sort? Ideally something that is both well founded theoretically,
and long proven pragmatically. Not sure what that would be, though.
Some things which are at least pragmatically proven: Ada's Ravenscar
profile; Actor-ish approaches like Erlang. There's stuff like process
algebras/calculi such as Occam-Pi with static checkers. There's Go's
variant on such process-channel themes. There's stuff like
Haskell/Clojure's STMs (which are still contentious). There's all the
stuff in Rust.
