Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id EDFC67EEF6
	for <caml-list@sympa.inria.fr>; Wed, 17 Jun 2015 16:57:54 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.214.177;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.214.177 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.177;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f177.google.com) identity=helo;
  client-ip=209.85.214.177;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-ob0-f177.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0B6AQAfioFVm7HWVdFcgkWBfgaDGMIlAoEvB0wBAQEBAQESAQEBAQEGCwsJIS6EIgEBAQMBEhEEGQEbHQEDAQsGAwILAwogAQkCAiEBAREBBQEcBhMIGod3AQMKCJZjkGs+MYs/gWuCeYtPChknDVeEagEBAQEBBQEBAQEBARYBBQ6LNoJNgW5LB4JogUMFk2iJZoFhgTSHE4hDgzuCERIjgQwJgi4DHIFuIjGBAySBIQEBAQ
X-IPAS-Result: A0B6AQAfioFVm7HWVdFcgkWBfgaDGMIlAoEvB0wBAQEBAQESAQEBAQEGCwsJIS6EIgEBAQMBEhEEGQEbHQEDAQsGAwILAwogAQkCAiEBAREBBQEcBhMIGod3AQMKCJZjkGs+MYs/gWuCeYtPChknDVeEagEBAQEBBQEBAQEBARYBBQ6LNoJNgW5LB4JogUMFk2iJZoFhgTSHE4hDgzuCERIjgQwJgi4DHIFuIjGBAySBIQEBAQ
X-IronPort-AV: E=Sophos;i="5.13,633,1427752800"; 
   d="scan'208";a="165832328"
Received: from mail-ob0-f177.google.com ([209.85.214.177])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 17 Jun 2015 16:57:53 +0200
Received: by obbgp2 with SMTP id gp2so34684012obb.2
        for <caml-list@inria.fr>; Wed, 17 Jun 2015 07:57:52 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=4ZTKmyTVFx8DUWeLZw1x9lqkRFyJE5ywxHPabIqk074=;
        b=VvFwEuiaV4WQ2JxgsWNNIb/bT7GbW03AjdcVW0TWwANzn03KrQh7vWXlTDGf5Lc4+A
         +WEOsjR0nXwu6JoMxSVWX1EkHG11HsgX05qrmiL/ev8FMdaDJtXtRdf0bh+TLlJxQgo6
         TGbj9RmxWEc8BxsWEQFyymUdFVofS4AvfrkCQxRjYhzToLqSZ7nSOm7xhyKWsoiSgZzf
         IvrTHn5e/QWZn5xPHRjXqZL9+bRtnLOrwxx9tJuHalTQ/THpoXhs+2hz+UsqSb2Svwq1
         WTlfNVZNqXKJVNk6veKVx30S5LASwolXzaGVff5gcI6x27wfGta3swaGFzIqbgm0fqmv
         QoSw==
MIME-Version: 1.0
X-Received: by 10.60.50.168 with SMTP id d8mr4984715oeo.41.1434553072316; Wed,
 17 Jun 2015 07:57:52 -0700 (PDT)
Received: by 10.202.191.8 with HTTP; Wed, 17 Jun 2015 07:57:52 -0700 (PDT)
In-Reply-To: <CAK=fH+i9Wy6eUPY+hAz8TywKmJEb5SiYui1hpxvp4sspzE5_UA@mail.gmail.com>
References: <CAK7rcp9FZVwF5E15GtWjJjsTN=MNa4PFQWwwV8S44-F1QcLJgg@mail.gmail.com>
	<CAK=fH+hkWt+t=hHb0nbup9AFeLpVuWCEfBugDycYR5r78OoZMg@mail.gmail.com>
	<CAK7rcp84Xmr+iOrx0aOpWQb=XB5yOSebHvDSm-=gPdkFsczMLQ@mail.gmail.com>
	<CAK=fH+jX9=pSYjD_AGu6Qp2UFaaqjSxoj_+9hQ_CaohhsLfGsw@mail.gmail.com>
	<CAK7rcp-37TpynOfDDK2xUoD4Z9KUyujFG0zCQsF9wAWMPPvj0g@mail.gmail.com>
	<CAK7rcp90KJTewwn-cA4=KX0SzBPW-ciOCKDv6c8wfzfW_LhxDg@mail.gmail.com>
	<CAK=fH+i9Wy6eUPY+hAz8TywKmJEb5SiYui1hpxvp4sspzE5_UA@mail.gmail.com>
Date: Wed, 17 Jun 2015 10:57:52 -0400
Message-ID: <CAK7rcp_NkXNtkgYgrswJyCCpTJa8vT1N8GQWUkK3y9swSdAQEw@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
To: David House <dhouse@janestreet.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c30bf04979d30518b7ea08
Subject: Re: [Caml-list] Async Server not executing

--001a11c30bf04979d30518b7ea08
Content-Type: text/plain; charset=UTF-8

I had to change it to make not weird, because I found that because
writer.write wasn't sending the Eof like you said, and it wasn't causally
correct so my code was hanging. I found that out when I got it working
yesterday.

My tests all run normally now! Thank you so so much.

On Wed, Jun 17, 2015 at 4:09 AM, David House <dhouse@janestreet.com> wrote:

> Right, length-prefixing is another common trick.
>
> In fact, this is exactly what Writer.send does. Your code at the moment is
> a little weird because it uses Reader.recv, whose documentation says "[recv
> t] returns a string that was written with Writer.send", but you're not
> using Writer.send. I think if you use those pairs of things then you get
> the semantics you want.
>
> More generally, async has good support for reading chunks of data, which
> might contain partial messages, and then putting those chunks together to
> form full messages. See Unpack_sequence in async_extra, which works with
> Unpack_buffer in core_kernel.
>
> On 16 June 2015 at 18:50, Kenneth Adam Miller <kennethadammiller@gmail.com
> > wrote:
>
>> Ok, I have one last question - I've gotten my unit tests to succeed
>> properly, but I'm concerned.
>>
>> At one point in the Pipe documentation, it talked about how writes a
>> recvs would guarantee progress by returning early if they had something at
>> all. I just need some kind of guarantee of the semantics of a send and
>> recv, so that if I send a string of length 4, I don't receive multiple
>> fragments.
>>
>> On Tue, Jun 16, 2015 at 11:48 AM, Kenneth Adam Miller <
>> kennethadammiller@gmail.com> wrote:
>>
>>> Ah. Well I think I can incorporate from that what I can, but my unit
>>> tests need to be reflective of the use case I have. I'm sending protobuf
>>> encoded messages between two processes on one machine-whatever the size of
>>> the message, that's the size that should be received on the other end (I've
>>> read about the returning partial bytes, I can't decode a part of a proto
>>> message, it has to be the right size).
>>>
>>> I can't use write_line, I'll have to find a way to delimit the messages
>>> based on size. I think I'll just prepend every message with the size that
>>> it should expect, and then read a integer off the stream and then that many
>>> bytes.
>>>
>>> On Tue, Jun 16, 2015 at 11:41 AM, David House <dhouse@janestreet.com>
>>> wrote:
>>>
>>>> Ah, now I read your code in more detail I think I see why.
>>>>
>>>> Reader.contents on the server side will block until eof. The client
>>>> side sends some stuff, but does not close the writer, so the server never
>>>> sees eof. (Recall that sockets are not like files: it's possible to read
>>>> all of the available data right now, but not reach eof.)
>>>>
>>>> Network protocols normally have some explicit "this is the end of one
>>>> message" marker, like a newline or something similar. Then the server just
>>>> reads chunks until it sees that marker, at which point it can put the
>>>> message together and to something with it.
>>>>
>>>> For example, you could use Writer.write_line on the client side and
>>>> Reader.read_line on the server side.
>>>>
>>>> On 16 June 2015 at 16:36, Kenneth Adam Miller <
>>>> kennethadammiller@gmail.com> wrote:
>>>>
>>>>> So, now I can get server received if I add that into the callback, but
>>>>> at "writing shutdown to server" I don't see response received or even
>>>>> something for Eof.
>>>>>
>>>>> On Tue, Jun 16, 2015 at 11:09 AM, David House <dhouse@janestreet.com>
>>>>> wrote:
>>>>>
>>>>>> The first thing to try is to make sure that everything is getting
>>>>>> flushed. For temporary debugging messages I strongly recommend just using
>>>>>> [Core.Std.eprintf "<message>\n%!"].
>>>>>>
>>>>>> On 16 June 2015 at 16:03, Kenneth Adam Miller <
>>>>>> kennethadammiller@gmail.com> wrote:
>>>>>>
>>>>>>> I'm having trouble with OCaml Async. I wrote a small server with it,
>>>>>>> and right now I'm trying to unit test that server. Here's my code for the
>>>>>>> server:
>>>>>>>
>>>>>>>
>>>>>>> let _main ()=
>>>>>>>   print_endline "Server running";
>>>>>>>   let handler = print_endline in
>>>>>>>   let socket = Tcp.on_port 5554 in
>>>>>>>   let server = Tcp.Server.create socket (fun addr r w ->
>>>>>>>       (Reader.contents r) >>| handler; (Writer.write w "got it")) in
>>>>>>>   server
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> In my unit test code I have:
>>>>>>>
>>>>>>> let test_shutdown test_ctxt = Thread_safe.block_on_async_exn (fun ()
>>>>>>>  -> (
>>>>>>>       print_endline "test_shutdown";
>>>>>>>       let server = Server._main () in
>>>>>>>       server >>= fun server ->
>>>>>>>       let where = Tcp.to_host_and_port "127.0.0.1" 5554 in
>>>>>>>       Tcp.connect where >>= fun s ->
>>>>>>>         let socket, r, w = s in
>>>>>>>         ignore (Writer.write w "kill");
>>>>>>>         ignore (Writer.flushed w);
>>>>>>>         (Reader.recv r >>> function
>>>>>>>           | `Ok result ->  print_endline ("writing shutdown to
>>>>>>> server" ^ result)
>>>>>>>           | `Eof -> ());
>>>>>>>         return ()
>>>>>>>     )); ()
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> I see test_shutdown and Server running, but not sign of "writing
>>>>>>> shutdown to server" or even "got it"; why isn't my server or even any of
>>>>>>> the connection executing?
>>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>
>>>
>>
>

--001a11c30bf04979d30518b7ea08
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I had to change it to make not weird, because I found that=
 because writer.write wasn&#39;t sending the Eof like you said, and it wasn=
&#39;t causally correct so my code was hanging. I found that out when I got=
 it working yesterday.<div><br></div><div>My tests all run normally now! Th=
ank you so so much.</div></div><div class=3D"gmail_extra"><br><div class=3D=
"gmail_quote">On Wed, Jun 17, 2015 at 4:09 AM, David House <span dir=3D"ltr=
">&lt;<a href=3D"mailto:dhouse@janestreet.com" target=3D"_blank">dhouse@jan=
estreet.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div di=
r=3D"ltr">Right, length-prefixing is another common trick.<div><br></div><d=
iv>In fact, this is exactly what Writer.send does. Your code at the moment =
is a little weird because it uses Reader.recv, whose documentation says &qu=
ot;[recv t] returns a string that was written with Writer.send&quot;, but y=
ou&#39;re not using Writer.send. I think if you use those pairs of things t=
hen you get the semantics you want.</div><div><br></div><div>More generally=
, async has good support for reading chunks of data, which might contain pa=
rtial messages, and then putting those chunks together to form full message=
s. See Unpack_sequence in async_extra, which works with Unpack_buffer in co=
re_kernel.</div></div><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D=
"gmail_extra"><br><div class=3D"gmail_quote">On 16 June 2015 at 18:50, Kenn=
eth Adam Miller <span dir=3D"ltr">&lt;<a href=3D"mailto:kennethadammiller@g=
mail.com" target=3D"_blank">kennethadammiller@gmail.com</a>&gt;</span> wrot=
e:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
eft:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Ok, I have one last q=
uestion - I&#39;ve gotten my unit tests to succeed properly, but I&#39;m co=
ncerned.<div><br></div><div>At one point in the Pipe documentation, it talk=
ed about how writes a recvs would guarantee progress by returning early if =
they had something at all. I just need some kind of guarantee of the semant=
ics of a send and recv, so that if I send a string of length 4, I don&#39;t=
 receive multiple fragments.</div></div><div><div><div class=3D"gmail_extra=
"><br><div class=3D"gmail_quote">On Tue, Jun 16, 2015 at 11:48 AM, Kenneth =
Adam Miller <span dir=3D"ltr">&lt;<a href=3D"mailto:kennethadammiller@gmail=
.com" target=3D"_blank">kennethadammiller@gmail.com</a>&gt;</span> wrote:<b=
r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Ah. Well I think I can in=
corporate from that what I can, but my unit tests need to be reflective of =
the use case I have. I&#39;m sending protobuf encoded messages between two =
processes on one machine-whatever the size of the message, that&#39;s the s=
ize that should be received on the other end (I&#39;ve read about the retur=
ning partial bytes, I can&#39;t decode a part of a proto message, it has to=
 be the right size).=C2=A0<div><br></div><div>I can&#39;t use write_line, I=
&#39;ll have to find a way to delimit the messages based on size. I think I=
&#39;ll just prepend every message with the size that it should expect, and=
 then read a integer off the stream and then that many bytes.</div></div><d=
iv><div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Tue, J=
un 16, 2015 at 11:41 AM, David House <span dir=3D"ltr">&lt;<a href=3D"mailt=
o:dhouse@janestreet.com" target=3D"_blank">dhouse@janestreet.com</a>&gt;</s=
pan> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Ah, now I re=
ad your code in more detail I think I see why.<div><br></div><div>Reader.co=
ntents on the server side will block until eof. The client side sends some =
stuff, but does not close the writer, so the server never sees eof. (Recall=
 that sockets are not like files: it&#39;s possible to read all of the avai=
lable data right now, but not reach eof.)</div><div><br></div><div>Network =
protocols normally have some explicit &quot;this is the end of one message&=
quot; marker, like a newline or something similar. Then the server just rea=
ds chunks until it sees that marker, at which point it can put the message =
together and to something with it.</div><div><br></div><div>For example, yo=
u could use Writer.write_line on the client side and Reader.read_line on th=
e server side.</div></div><div><div><div class=3D"gmail_extra"><br><div cla=
ss=3D"gmail_quote">On 16 June 2015 at 16:36, Kenneth Adam Miller <span dir=
=3D"ltr">&lt;<a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blan=
k">kennethadammiller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex"><div dir=3D"ltr">So, now I can get server received if I add t=
hat into the callback, but at &quot;writing shutdown to server&quot; I don&=
#39;t see response received or even something for Eof.</div><div><div><div =
class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Tue, Jun 16, 2015 a=
t 11:09 AM, David House <span dir=3D"ltr">&lt;<a href=3D"mailto:dhouse@jane=
street.com" target=3D"_blank">dhouse@janestreet.com</a>&gt;</span> wrote:<b=
r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">The first thing to try is=
 to make sure that everything is getting flushed. For temporary debugging m=
essages I strongly recommend just using [Core.Std.eprintf &quot;&lt;message=
&gt;\n%!&quot;].</div><div><div><div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On 16 June 2015 at 16:03, Kenneth Adam Miller <span dir=3D=
"ltr">&lt;<a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">=
kennethadammiller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"g=
mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
eft:1ex"><div dir=3D"ltr"><span style=3D"font-family:Arial,Helvetica,sans-s=
erif;font-size:13px">I&#39;m having trouble with OCaml Async. I wrote a sma=
ll server with it, and right now I&#39;m trying to unit test that server. H=
ere&#39;s my code for the server:</span><div style=3D"margin:0px;padding:0p=
x;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-serif=
;font-size:13px"><br></div><div style=3D"margin:0px;padding:0px;border:0px;=
vertical-align:baseline;font-family:Arial,Helvetica,sans-serif;font-size:13=
px"><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
"><br></div><div style=3D"margin:0px;padding:0px;border:1px solid rgb(187,1=
87,187);vertical-align:baseline;word-wrap:break-word;background-color:rgb(2=
50,250,250)"><code style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline"><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:=
baseline"><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(0,0,0)">let _main=C2=A0</span><span style=3D"margin:0px;p=
adding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">()=3D</=
span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseli=
ne;color:rgb(0,0,0)"><br>=C2=A0 print_endline=C2=A0</span><span style=3D"ma=
rgin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,136,0)"=
>&quot;Server running&quot;</span><span style=3D"margin:0px;padding:0px;bor=
der:0px;vertical-align:baseline;color:rgb(102,102,0)">;</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)"><br>=C2=A0 let handler=C2=A0</span><span style=3D"margin:0px;padding:0=
px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">=3D</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(0,0,0)">=C2=A0print_endline=C2=A0</span><span style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;color:rgb(0,0,136)">in</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(0,0,0)"><br>=C2=A0 let socket=C2=A0</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">=3D</span>=
<span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;co=
lor:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0=
px;vertical-align:baseline;color:rgb(102,0,102)">Tcp</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,=
0)">.</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align=
:baseline;color:rgb(0,0,0)">on_port=C2=A0</span><span style=3D"margin:0px;p=
adding:0px;border:0px;vertical-align:baseline;color:rgb(0,102,102)">5554</s=
pan><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;bord=
er:0px;vertical-align:baseline;color:rgb(0,0,136)">in</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"=
><br>=C2=A0 let server=C2=A0</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(102,102,0)">=3D</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,=
0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(102,0,102)">Tcp</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">.</spa=
n><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;=
color:rgb(102,0,102)">Server</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)">create socket=C2=A0</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=
fun addr r w=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;v=
ertical-align:baseline;color:rgb(102,102,0)">-&gt;</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><b=
r>=C2=A0 =C2=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,0,102)">Reader</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">contents =
r</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:bas=
eline;color:rgb(102,102,0)">)</span><span style=3D"margin:0px;padding:0px;b=
order:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(10=
2,102,0)">&gt;&gt;|</span><span style=3D"margin:0px;padding:0px;border:0px;=
vertical-align:baseline;color:rgb(0,0,0)">=C2=A0handler</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">;</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;pad=
ding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><=
span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;col=
or:rgb(102,0,102)">Writer</span><span style=3D"margin:0px;padding:0px;borde=
r:0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"=
>write w=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;verti=
cal-align:baseline;color:rgb(0,136,0)">&quot;got it&quot;</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">))</span><span style=3D"margin:0px;padding:0px;border:0px;vertical=
-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;pa=
dding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,136)">in</span><=
span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;col=
or:rgb(0,0,0)"><br>=C2=A0 server</span></div></code></div><div style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline"><br></div></div><di=
v style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;font-f=
amily:Arial,Helvetica,sans-serif;font-size:13px"><br></div><div style=3D"ma=
rgin:0px;padding:0px;border:0px;vertical-align:baseline;font-family:Arial,H=
elvetica,sans-serif;font-size:13px"><br></div><div style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans=
-serif;font-size:13px">In my unit test code I have:</div><div style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;font-family:Arial,Hel=
vetica,sans-serif;font-size:13px"><br></div><div style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-s=
erif;font-size:13px"><div style=3D"margin:0px;padding:0px;border:1px solid =
rgb(187,187,187);vertical-align:baseline;word-wrap:break-word;background-co=
lor:rgb(250,250,250)"><code style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline"><div style=3D"margin:0px;padding:0px;border:0px;vertic=
al-align:baseline"><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(0,0,0)">let test_shutdown test_ctxt=C2=A0</span>=
<span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;co=
lor:rgb(102,102,0)">=3D</span><span style=3D"margin:0px;padding:0px;border:=
0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,10=
2)">Thread_safe</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">block_on_=
async_exn=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">fun=C2=A0=
</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line;color:rgb(102,102,0)">()</span><span style=3D"margin:0px;padding:0px;b=
order:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(10=
2,102,0)">-&gt;</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0p=
x;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">(</s=
pan><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 print_endline=C2=A0</span><spa=
n style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:=
rgb(0,136,0)">&quot;test_shutdown&quot;</span><span style=3D"margin:0px;pad=
ding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">;</span><=
span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;col=
or:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 let server=C2=A0</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">=3D</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;p=
adding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Server<=
/span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;bor=
der:0px;vertical-align:baseline;color:rgb(0,0,0)">_main=C2=A0</span><span s=
tyle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb=
(102,102,0)">()</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0p=
x;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,136)">in</sp=
an><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 server=C2=A0</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">&gt;&gt;=3D</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0fun server=C2=A0</span><sp=
an style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color=
:rgb(102,102,0)">-&gt;</span><span style=3D"margin:0px;padding:0px;border:0=
px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 let=
=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(0,0,136)">where</span><span style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><sp=
an style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color=
:rgb(102,102,0)">=3D</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)"=
>Tcp</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:=
baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0p=
x;border:0px;vertical-align:baseline;color:rgb(0,0,0)">to_host_and_port=C2=
=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(0,136,0)">&quot;127.0.0.1&quot;</span><span style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=
=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(0,102,102)">5554</span><span style=3D"margin:0px;padding:=
0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(0,0,136)">in</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0=C2=A0</span>=
<span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;co=
lor:rgb(102,0,102)">Tcp</span><span style=3D"margin:0px;padding:0px;border:=
0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"ma=
rgin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">c=
onnect=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(0,0,136)">where</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</sp=
an><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
;color:rgb(102,102,0)">&gt;&gt;=3D</span><span style=3D"margin:0px;padding:=
0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0fun s=C2=A0<=
/span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;color:rgb(102,102,0)">-&gt;</span><span style=3D"margin:0px;padding:0px=
;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0<br>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 let socket</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(102,102,0)">,</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)">=C2=A0r</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(102,102,0)">,</span><span style=3D"margin:0px;pa=
dding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0w=C2=
=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(102,102,0)">=3D</span><span style=3D"margin:0px;padding:0=
px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0s=C2=A0</span=
><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;c=
olor:rgb(0,0,136)">in</span><span style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0=
 ignore=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertic=
al-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"margin:0px;p=
adding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Writer<=
/span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;bor=
der:0px;vertical-align:baseline;color:rgb(0,0,0)">write w=C2=A0</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(0,136,0)">&quot;kill&quot;</span><span style=3D"margin:0px;padding:0px;b=
order:0px;vertical-align:baseline;color:rgb(102,102,0)">);</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,=
0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 ignore=C2=A0</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)=
">(</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(102,0,102)">Writer</span><span style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><spa=
n style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:=
rgb(0,0,0)">flushed w</span><span style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;color:rgb(102,102,0)">);</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><b=
r>=C2=A0 =C2=A0 =C2=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;padding=
:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(102,0,102)">Reader</span><span style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">rec=
v r=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-a=
lign:baseline;color:rgb(102,102,0)">&gt;&gt;&gt;</span><span style=3D"margi=
n:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=
=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(0,0,136)">function</span><span style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;padding:0px;=
border:0px;vertical-align:baseline;color:rgb(102,102,0)">|</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,=
0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(0,136,0)">`Ok result -&gt; =C2=A0print_endline (=
&quot;writing shutdown to server&quot; ^ result)<br>=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 | `</span><span style=3D"margin:0px;padding:0px;border:0px;ve=
rtical-align:baseline;color:rgb(102,0,102)">Eof</span><span style=3D"margin=
:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=
=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(102,102,0)">-&gt;</span><span style=3D"margin:0px;padding=
:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><spa=
n style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:=
rgb(102,102,0)">());</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0=
=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(0,0,136)">return</span><span style=3D"margin:0px;paddi=
ng:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><s=
pan style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;colo=
r:rgb(102,102,0)">()</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0=C2=A0</span><s=
pan style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;colo=
r:rgb(102,102,0)">));</span><span style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)=
">()</span></div></code></div><div style=3D"margin:0px;padding:0px;border:0=
px;vertical-align:baseline"><br></div></div><div style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-s=
erif;font-size:13px"><br></div><div style=3D"margin:0px;padding:0px;border:=
0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-serif;font-siz=
e:13px"><br></div><div style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;font-family:Arial,Helvetica,sans-serif;font-size:13px">I see=
 test_shutdown and Server running, but not sign of &quot;writing shutdown t=
o server&quot; or even &quot;got it&quot;; why isn&#39;t my server or even =
any of the connection executing?</div></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--001a11c30bf04979d30518b7ea08--
