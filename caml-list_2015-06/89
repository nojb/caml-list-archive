Return-Path: <remy.el-sibaie@lip6.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 8C1397EEF6
	for <caml-list@sympa.inria.fr>; Tue, 16 Jun 2015 16:45:45 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  remy.el-sibaie@lip6.fr) identity=pra;
  client-ip=132.227.60.30;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="remy.el-sibaie@lip6.fr";
  x-sender="remy.el-sibaie@lip6.fr";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  remy.el-sibaie@lip6.fr designates 132.227.60.30 as permitted
  sender) identity=mailfrom; client-ip=132.227.60.30;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="remy.el-sibaie@lip6.fr";
  x-sender="remy.el-sibaie@lip6.fr";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@osiris.lip6.fr designates 132.227.60.30 as
  permitted sender) identity=helo; client-ip=132.227.60.30;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="remy.el-sibaie@lip6.fr";
  x-sender="postmaster@osiris.lip6.fr";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0BUAQAMNoBVmR4844RbDoI3gR9fgx7CZAKBPkwBAQEBAQESAQEBAQEICwsHIS6EIwEBAwESEQRSBQsJAgs3AgIiEgEFARwGEwgTB4gFCJkxkGs+MYs/lm4BAQEBAQEEAQEBAQEBARuLRIUGB4JogUUFk1+LRYEzkwqCETWBFYIwHYEUPm+CRwEBAQ
X-IPAS-Result: A0BUAQAMNoBVmR4844RbDoI3gR9fgx7CZAKBPkwBAQEBAQESAQEBAQEICwsHIS6EIwEBAwESEQRSBQsJAgs3AgIiEgEFARwGEwgTB4gFCJkxkGs+MYs/lm4BAQEBAQEEAQEBAQEBARuLRIUGB4JogUUFk1+LRYEzkwqCETWBFYIwHYEUPm+CRwEBAQ
X-IronPort-AV: E=Sophos;i="5.13,626,1427752800"; 
   d="scan'208";a="165613496"
Received: from osiris.lip6.fr ([132.227.60.30])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 16 Jun 2015 16:45:45 +0200
Received: from tibre.lip6.fr (tibre.lip6.fr [132.227.74.2])
          by osiris.lip6.fr (8.15.1/lip6) with ESMTP id t5GEjhhL029031
          for <caml-list@inria.fr>; Tue, 16 Jun 2015 16:45:43 +0200 (CEST)
X-pt: osiris.lip6.fr
Received: from mail-wi0-f171.google.com (mail-wi0-f171.google.com [209.85.212.171])
	(authenticated bits=0)
	by tibre.lip6.fr (8.15.1/8.14.7) with ESMTPSA id t5GEjaX7000551
	(version=TLSv1.2 cipher=AES128-GCM-SHA256 bits=128 verify=FAIL)
	for <caml-list@inria.fr>; Tue, 16 Jun 2015 16:45:42 +0200 (MEST)
Received: by wiga1 with SMTP id a1so111260567wig.0
        for <caml-list@inria.fr>; Tue, 16 Jun 2015 07:45:36 -0700 (PDT)
X-Received: by 10.180.102.227 with SMTP id fr3mr43123358wib.19.1434465936151;
 Tue, 16 Jun 2015 07:45:36 -0700 (PDT)
MIME-Version: 1.0
References: <CAKAHPK3nxbZot86DkZfj4ShYnLNHJZ1fJSytj7m=kyBZmz8arg@mail.gmail.com>
 <CA+p7B-z_zzm2xGQmvmBA-8CmaPwdz9zfctLeOZk-ByMJcrUyJw@mail.gmail.com>
In-Reply-To: <CA+p7B-z_zzm2xGQmvmBA-8CmaPwdz9zfctLeOZk-ByMJcrUyJw@mail.gmail.com>
From: =?UTF-8?Q?R=C3=A9my_El_Siba=C3=AFe_Besognet?= <remy.el-sibaie@lip6.fr>
Date: Tue, 16 Jun 2015 14:45:25 +0000
Message-ID: <CAKAHPK1o0+Lk-MA9pNnoiQqdwp1nc7EGoCjERuYhomoqvDXi2g@mail.gmail.com>
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: Mailing List OCaml <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0445199b911b650518a3a024
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.4.3 (osiris.lip6.fr [132.227.60.30]); Tue, 16 Jun 2015 16:45:43 +0200 (CEST)
X-Scanned-By: MIMEDefang 2.75 on 132.227.60.30
Subject: Re: [Caml-list] Generic usage of Hashtbl.S with first class module

--f46d0445199b911b650518a3a024
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

@Phil Eaton :
I already tried this solution but it just moves the pattern matching from
parameter to a let binding and does not fix the extrusion scope error.
Thank anyway.



Le mar. 16 juin 2015 =C3=A0 16:30, Jacques Garrigue <garrigue@math.nagoya-u=
.ac.jp>
a =C3=A9crit :

> Dear R=C3=A9my,
>
> The trouble here is that Hashtbl.S defines an abstract type for hash
> tables, and that each time you open this module, using the (module H :
> Hashtbl.S) pattern, your are talking about a fresh abstract type,
> incompatible with anything from the outside world. In particular, there is
> no way the parameter ht could have this type, and this causes an error.
>
> Contrary to real functors, first-class modules do not let you connect
> abstract parameterized types with the outside world. So in this case, the
> only solution I see would be to pack your hash table inside the module
> itself, like for an object, so that you don't need to receive ht as a
> separate argument.
>
> Jacques Garrigue
>
Thank you. This was the kind of answer I expected.
During this time I tried my solution without the `ht` parameter which
solves my original problem. But your solution of giving the `ht` value in
the module is way more general.


> 2015/06/16 21:16 "R=C3=A9my El Siba=C3=AFe Besognet" <remy.el-sibaie@lip6=
.fr>:
>
> Hi all,
>>
>> Considering this function
>>
>> let find ht x =3D
>>   Hashtbl.find ht x
>>
>>
>> I would like to write a more general `find` function which takes the
>> module
>> as first class module in parameter with the possibility to use it on
>> different implentations of Hashtbl.S.
>>
>> let find (module H : Hashtbl.S) ht x =3D
>>   H.find *ht* x
>>
>>
>> but it failed with this error (on the underlined identifier) :
>>
>> *Error: This expression has type 'a H.t but an expression was expected of
>> type         'a H.t       The type constructor H.t would escape its scop=
e*
>>
>>
>>
>> I also tried by specifying the implementation but had the same problem:
>>
>> let find (type a) (module H : Hashtbl.S with type key =3D a) (ht : 'a Ht=
.t) (x : a) =3D
>>
>> H.find ht x
>>
>> Anyone has an idea how to achieve this thing ?
>>
>> Thanks,
>> - R=C3=A9my El Siba=C3=AFe, LIP6
>>
>>
>>
>> PS: at the begining, I was trying on a memoization function which has
>> more interest than the previous function :
>>
>> let memo_rec (module H : Hashtbl.S) h f =3D
>>   let rec g x =3D
>>     try H.find h x with
>>     | Not_found ->
>>       let y =3D f g x in
>>       H.add h x y; y
>>   in g
>>
>>

--f46d0445199b911b650518a3a024
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>@Phil Eaton :=C2=A0</div><div>I already tried this so=
lution but it just moves the pattern matching from parameter to a let bindi=
ng and does not fix the extrusion scope error. Thank anyway.</div><div><br>=
</div><br><br><div class=3D"gmail_quote"><div dir=3D"ltr">Le=C2=A0mar. 16 j=
uin 2015 =C3=A0=C2=A016:30, Jacques Garrigue &lt;<a href=3D"mailto:garrigue=
@math.nagoya-u.ac.jp">garrigue@math.nagoya-u.ac.jp</a>&gt; a =C3=A9crit=C2=
=A0:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex"><p dir=3D"ltr">Dear R=C3=A9my,=
</p>
<p dir=3D"ltr">The trouble here is that Hashtbl.S defines an abstract type =
for hash tables, and that each time you open this module, using the (module=
 H : Hashtbl.S) pattern, your are talking about a fresh abstract type, inco=
mpatible with anything from the outside world. In particular, there is no w=
ay the parameter ht could have this type, and this causes an error.</p>
<p dir=3D"ltr">Contrary to real functors, first-class modules do not let yo=
u connect abstract parameterized types with the outside world. So in this c=
ase, the only solution I see would be to pack your hash table inside the mo=
dule itself, like for an object, so that you don&#39;t need to receive ht a=
s a separate argument.</p>
<p dir=3D"ltr">Jacques Garrigue</p></blockquote><div>Thank you. This was th=
e kind of answer I expected.</div><div>During this time I tried my solution=
 without the `ht` parameter which solves my original problem. But your solu=
tion of giving the `ht` value in the module is way more general.</div><div>=
=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bo=
rder-left:1px #ccc solid;padding-left:1ex">
<div class=3D"gmail_quote">2015/06/16 21:16 &quot;R=C3=A9my El Siba=C3=AFe =
Besognet&quot; &lt;<a href=3D"mailto:remy.el-sibaie@lip6.fr" target=3D"_bla=
nk">remy.el-sibaie@lip6.fr</a>&gt;:</div><div class=3D"gmail_quote"><br typ=
e=3D"attribution"><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><span sty=
le=3D"font-size:13.1999998092651px;line-height:19.7999992370605px">Hi all,<=
/span><div style=3D"font-size:13.1999998092651px;line-height:19.79999923706=
05px"><br></div><div style=3D"font-size:13.1999998092651px;line-height:19.7=
999992370605px">Considering this function</div><div style=3D"font-size:13.1=
999998092651px;line-height:19.7999992370605px"><div><br></div><div><pre sty=
le=3D"margin-top:0px;margin-bottom:0px;width:748px"><div style=3D"color:rgb=
(51,51,51);font-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,mon=
ospace;font-size:12px;line-height:16.7999992370605px"><pre style=3D"font-fa=
mily:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;margin-top:=
0px;margin-bottom:0px;width:748px;line-height:16.7999992370605px"><div><spa=
n style=3D"color:rgb(167,29,93)">let</span> <span style=3D"color:rgb(121,93=
,163)">find</span> <span style=3D"color:rgb(29,62,129)">ht</span> <span sty=
le=3D"color:rgb(29,62,129)">x</span> <span style=3D"color:rgb(167,29,93)">=
=3D</span>
</div><div>  <span style=3D"color:rgb(0,134,179)">Hashtbl.</span>find ht x<=
/div></pre></div><div style=3D"color:rgb(51,51,51);font-family:Consolas,&#3=
9;Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12px;line-height:1=
6.7999992370605px"><br><span style=3D"color:rgb(33,33,33);font-family:&#39;=
Helvetica Neue&#39;,Helvetica,Arial,sans-serif;font-size:13.1999998092651px=
;line-height:19.7999992370605px;white-space:normal">I would like to write a=
 more general `find` function which takes the module=C2=A0</span><span styl=
e=3D"color:rgb(33,33,33);font-family:&#39;Helvetica Neue&#39;,Helvetica,Ari=
al,sans-serif;font-size:small;line-height:20px;white-space:normal"><br></sp=
an></div><div style=3D"color:rgb(51,51,51);font-family:Consolas,&#39;Libera=
tion Mono&#39;,Menlo,Courier,monospace;font-size:12px;line-height:16.799999=
2370605px"><span style=3D"color:rgb(33,33,33);font-family:&#39;Helvetica Ne=
ue&#39;,Helvetica,Arial,sans-serif;font-size:13.1999998092651px;line-height=
:19.7999992370605px;white-space:normal">as first class module in parameter=
=C2=A0</span><span style=3D"color:rgb(33,33,33);font-family:&#39;Helvetica =
Neue&#39;,Helvetica,Arial,sans-serif;font-size:small;line-height:20px;white=
-space:normal">with the possibility to use it on</span></div><div style=3D"=
color:rgb(51,51,51);font-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Co=
urier,monospace;font-size:12px;line-height:16.7999992370605px"><span style=
=3D"color:rgb(33,33,33);font-family:&#39;Helvetica Neue&#39;,Helvetica,Aria=
l,sans-serif;font-size:small;line-height:20px;white-space:normal">different=
 implentations of Hashtbl.S.</span></div><div><br></div><div><pre style=3D"=
font-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;font=
-size:12px;margin-top:0px;margin-bottom:0px;width:748px;color:rgb(51,51,51)=
;line-height:16.7999992370605px"><div><span style=3D"color:rgb(167,29,93)">=
let</span> <span style=3D"color:rgb(121,93,163)">find</span> (<span style=
=3D"color:rgb(29,62,129)">module</span> H <span style=3D"color:rgb(167,29,9=
3)">: Hashtbl.S</span>) <span style=3D"color:rgb(29,62,129)">ht</span> <spa=
n style=3D"color:rgb(29,62,129)">x</span> <span style=3D"color:rgb(167,29,9=
3)">=3D</span>
</div><div>  <span style=3D"color:rgb(0,134,179)">H.</span>find <u>ht</u> x=
</div></pre></div><div><font face=3D"Helvetica Neue, Helvetica, Arial, sans=
-serif"><span style=3D"white-space:normal"><br></span></font></div><div><sp=
an style=3D"font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif=
;white-space:normal">but it failed with this error (on the underlined ident=
ifier) :=C2=A0</span><br></div><div><span style=3D"font-family:&#39;Helveti=
ca Neue&#39;,Helvetica,Arial,sans-serif;white-space:normal"><br></span></di=
v><div><span style=3D"font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,=
sans-serif;white-space:normal"><i><div>Error: This expression has type &#39=
;a H.t but an expression was expected of type</div><div>=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0&#39;a H.t</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0The type c=
onstructor H.t would escape its scope</div></i></span></div></pre></div></d=
iv><div style=3D"font-size:13.1999998092651px;line-height:19.7999992370605p=
x"><br></div><div style=3D"font-size:13.1999998092651px;line-height:19.7999=
992370605px"><br></div><div style=3D"font-size:13.1999998092651px;line-heig=
ht:19.7999992370605px">I also tried by specifying the implementation but ha=
d the same problem:</div><div style=3D"font-size:13.1999998092651px;line-he=
ight:19.7999992370605px"><br></div><pre style=3D"font-family:Consolas,&#39;=
Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12px;margin-top:0px;=
margin-bottom:0px;width:748px;color:rgb(51,51,51);line-height:16.7999992370=
605px"><div><span style=3D"color:rgb(167,29,93)">let</span> <span style=3D"=
color:rgb(121,93,163)">find</span> (<span style=3D"color:rgb(29,62,129)">ty=
pe</span> <span style=3D"color:rgb(29,62,129)">a</span>) (<span style=3D"co=
lor:rgb(29,62,129)">module</span> H <span style=3D"color:rgb(167,29,93)">: =
Hashtbl.S with type key =3D a</span>) (<span style=3D"color:rgb(29,62,129)"=
>ht</span> <span style=3D"color:rgb(167,29,93)">: &#39;a Ht.t</span>) (<spa=
n style=3D"color:rgb(29,62,129)">x</span> <span style=3D"color:rgb(167,29,9=
3)">: a</span>) <span style=3D"color:rgb(167,29,93)">=3D</span>=C2=A0</div>=
</pre><div style=3D"font-size:13.1999998092651px;line-height:19.79999923706=
05px"><span style=3D"color:rgb(51,51,51);font-family:Consolas,&#39;Liberati=
on Mono&#39;,Menlo,Courier,monospace;font-size:12px;line-height:16.79999923=
70605px">  </span><span style=3D"font-family:Consolas,&#39;Liberation Mono&=
#39;,Menlo,Courier,monospace;font-size:12px;line-height:16.7999992370605px;=
color:rgb(0,134,179)">H.</span><span style=3D"color:rgb(51,51,51);font-fami=
ly:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12p=
x;line-height:16.7999992370605px">find ht x</span>=C2=A0</div><div style=3D=
"font-size:13.1999998092651px;line-height:19.7999992370605px"><br></div><di=
v style=3D"font-size:13.1999998092651px;line-height:19.7999992370605px">Any=
one has an idea how to achieve this thing ?</div><div style=3D"font-size:13=
.1999998092651px;line-height:19.7999992370605px"><br></div><div style=3D"fo=
nt-size:13.1999998092651px;line-height:19.7999992370605px">Thanks,</div><di=
v style=3D"font-size:13.1999998092651px;line-height:19.7999992370605px">- R=
=C3=A9my El Siba=C3=AFe, LIP6</div><div style=3D"font-size:13.1999998092651=
px;line-height:19.7999992370605px"><br></div><div style=3D"font-size:13.199=
9998092651px;line-height:19.7999992370605px"><br></div><div style=3D"font-s=
ize:13.1999998092651px;line-height:19.7999992370605px"><br></div><div style=
=3D"font-size:13.1999998092651px;line-height:19.7999992370605px">PS: at the=
 begining, I was trying on a memoization function which has more interest t=
han the previous function :=C2=A0</div><div style=3D"font-size:13.199999809=
2651px;line-height:19.7999992370605px"><br></div><div style=3D"font-size:13=
.1999998092651px;line-height:19.7999992370605px"><pre style=3D"font-family:=
Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12px;m=
argin-top:0px;margin-bottom:0px;width:748px;color:rgb(51,51,51);line-height=
:16.7999992370605px"><div><span style=3D"color:rgb(167,29,93)">let</span> <=
span style=3D"color:rgb(121,93,163)">memo_rec</span> (<span style=3D"color:=
rgb(29,62,129)">module</span> H <span style=3D"color:rgb(167,29,93)">: Hash=
tbl.S</span>) <span style=3D"color:rgb(29,62,129)">h</span> <span style=3D"=
color:rgb(29,62,129)">f</span> <span style=3D"color:rgb(167,29,93)">=3D</sp=
an>
</div><div>  <span style=3D"color:rgb(167,29,93)">let</span> <span style=3D=
"color:rgb(167,29,93)">rec </span><span style=3D"color:rgb(121,93,163)">g</=
span> <span style=3D"color:rgb(29,62,129)">x</span> <span style=3D"color:rg=
b(167,29,93)">=3D</span>
</div><div>    <span style=3D"color:rgb(167,29,93)">try</span> <span style=
=3D"color:rgb(0,134,179)">H.</span>find h x <span style=3D"color:rgb(167,29=
,93)">with</span><span style=3D"color:rgb(167,29,93)"></span>
</div><div>    <span style=3D"color:rgb(167,29,93)">|</span> <span style=3D=
"color:rgb(121,93,163)">Not_found</span> -&gt;
</div><div>      <span style=3D"color:rgb(167,29,93)">let</span> y <span st=
yle=3D"color:rgb(167,29,93)">=3D</span> f g x <span style=3D"color:rgb(167,=
29,93)">in</span>
</div><div>      <span style=3D"color:rgb(0,134,179)">H.</span>add h x y; y
</div><div>  <span style=3D"color:rgb(167,29,93)">in</span> g</div></pre></=
div></div>
</blockquote></div></blockquote></div></div>

--f46d0445199b911b650518a3a024--
