Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 92F757EEF6
	for <caml-list@sympa.inria.fr>; Tue, 16 Jun 2015 17:48:04 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.218.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.218.54 as
  permitted sender) identity=mailfrom; client-ip=209.85.218.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oi0-f54.google.com) identity=helo;
  client-ip=209.85.218.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-oi0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0DXAQDdQ4BVmzbaVdFbgkWBfgaDGMJkAiiBEgdMAQEBAQEBEgEBAQEBBgsLCSEuhBoIAQEBAwESEQQZARsdAQMBCwYDAgsNIAEJAgIhAQERAQUBHBkIGoVRgiYBAwoImVGQaz4xiz+Ba4J5i3wKGScNV4RiAQEBAQEBAQMBAQEBAQEWAQUOizaCTYFuSweCaA+BNgEEk1+JZIFhgTOHEYg+gzuCERIjgQwJgi4fgW4iMYEDJIEgAQEF
X-IPAS-Result: A0DXAQDdQ4BVmzbaVdFbgkWBfgaDGMJkAiiBEgdMAQEBAQEBEgEBAQEBBgsLCSEuhBoIAQEBAwESEQQZARsdAQMBCwYDAgsNIAEJAgIhAQERAQUBHBkIGoVRgiYBAwoImVGQaz4xiz+Ba4J5i3wKGScNV4RiAQEBAQEBAQMBAQEBAQEWAQUOizaCTYFuSweCaA+BNgEEk1+JZIFhgTOHEYg+gzuCERIjgQwJgi4fgW4iMYEDJIEgAQEF
X-IronPort-AV: E=Sophos;i="5.13,627,1427752800"; 
   d="scan'208";a="136513238"
Received: from mail-oi0-f54.google.com ([209.85.218.54])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Jun 2015 17:48:03 +0200
Received: by oigx81 with SMTP id x81so14382397oig.1
        for <caml-list@inria.fr>; Tue, 16 Jun 2015 08:48:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:cc
         :content-type;
        bh=wpdwzJ2jhmv7EQSY1Y7+uF2s3Ym1MhsPcfSW5NnhWqw=;
        b=lcsg+34jUh7tHYymZw2J1Dkdmh5gK6OZWnOlm0JB0i0vGwp8j40ZU9N8o2j5eXDWmw
         0Mtg6Vb+rDJBbNlvybanyPaXG79zy6Mcaqu6s4zEVulopTtVGY+RFysSPHcggnGe5JDN
         ontdD9fjoj8NaToaVR4hf0klXkbxcFGnGfx8lOqZMVkio0wVnnFMO6Gr3wgpadfVTgxB
         fafiCOtI95oBssVyjPe+JoE8V7fehOrnWuBAGapBqCCT4WhFpAnW331C41e1sMCzvdx4
         VXtOKwzJawgL7K5A8GC8gO/xeNxtFovaTIoOriNAlJlVIfWdSpL/Jsx/UOxoQtK+XopA
         ETwA==
MIME-Version: 1.0
X-Received: by 10.60.40.228 with SMTP id a4mr246433oel.7.1434469682129; Tue,
 16 Jun 2015 08:48:02 -0700 (PDT)
Received: by 10.202.191.8 with HTTP; Tue, 16 Jun 2015 08:48:02 -0700 (PDT)
In-Reply-To: <CAK=fH+jX9=pSYjD_AGu6Qp2UFaaqjSxoj_+9hQ_CaohhsLfGsw@mail.gmail.com>
References: <CAK7rcp9FZVwF5E15GtWjJjsTN=MNa4PFQWwwV8S44-F1QcLJgg@mail.gmail.com>
	<CAK=fH+hkWt+t=hHb0nbup9AFeLpVuWCEfBugDycYR5r78OoZMg@mail.gmail.com>
	<CAK7rcp84Xmr+iOrx0aOpWQb=XB5yOSebHvDSm-=gPdkFsczMLQ@mail.gmail.com>
	<CAK=fH+jX9=pSYjD_AGu6Qp2UFaaqjSxoj_+9hQ_CaohhsLfGsw@mail.gmail.com>
Date: Tue, 16 Jun 2015 11:48:02 -0400
Message-ID: <CAK7rcp-37TpynOfDDK2xUoD4Z9KUyujFG0zCQsF9wAWMPPvj0g@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e013a0910d852860518a47f07
Subject: Re: [Caml-list] Async Server not executing

--089e013a0910d852860518a47f07
Content-Type: text/plain; charset=UTF-8

Ah. Well I think I can incorporate from that what I can, but my unit tests
need to be reflective of the use case I have. I'm sending protobuf encoded
messages between two processes on one machine-whatever the size of the
message, that's the size that should be received on the other end (I've
read about the returning partial bytes, I can't decode a part of a proto
message, it has to be the right size).

I can't use write_line, I'll have to find a way to delimit the messages
based on size. I think I'll just prepend every message with the size that
it should expect, and then read a integer off the stream and then that many
bytes.

On Tue, Jun 16, 2015 at 11:41 AM, David House <dhouse@janestreet.com> wrote:

> Ah, now I read your code in more detail I think I see why.
>
> Reader.contents on the server side will block until eof. The client side
> sends some stuff, but does not close the writer, so the server never sees
> eof. (Recall that sockets are not like files: it's possible to read all of
> the available data right now, but not reach eof.)
>
> Network protocols normally have some explicit "this is the end of one
> message" marker, like a newline or something similar. Then the server just
> reads chunks until it sees that marker, at which point it can put the
> message together and to something with it.
>
> For example, you could use Writer.write_line on the client side and
> Reader.read_line on the server side.
>
> On 16 June 2015 at 16:36, Kenneth Adam Miller <kennethadammiller@gmail.com
> > wrote:
>
>> So, now I can get server received if I add that into the callback, but at
>> "writing shutdown to server" I don't see response received or even
>> something for Eof.
>>
>> On Tue, Jun 16, 2015 at 11:09 AM, David House <dhouse@janestreet.com>
>> wrote:
>>
>>> The first thing to try is to make sure that everything is getting
>>> flushed. For temporary debugging messages I strongly recommend just using
>>> [Core.Std.eprintf "<message>\n%!"].
>>>
>>> On 16 June 2015 at 16:03, Kenneth Adam Miller <
>>> kennethadammiller@gmail.com> wrote:
>>>
>>>> I'm having trouble with OCaml Async. I wrote a small server with it,
>>>> and right now I'm trying to unit test that server. Here's my code for the
>>>> server:
>>>>
>>>>
>>>> let _main ()=
>>>>   print_endline "Server running";
>>>>   let handler = print_endline in
>>>>   let socket = Tcp.on_port 5554 in
>>>>   let server = Tcp.Server.create socket (fun addr r w ->
>>>>       (Reader.contents r) >>| handler; (Writer.write w "got it")) in
>>>>   server
>>>>
>>>>
>>>>
>>>> In my unit test code I have:
>>>>
>>>> let test_shutdown test_ctxt = Thread_safe.block_on_async_exn (fun () ->
>>>>  (
>>>>       print_endline "test_shutdown";
>>>>       let server = Server._main () in
>>>>       server >>= fun server ->
>>>>       let where = Tcp.to_host_and_port "127.0.0.1" 5554 in
>>>>       Tcp.connect where >>= fun s ->
>>>>         let socket, r, w = s in
>>>>         ignore (Writer.write w "kill");
>>>>         ignore (Writer.flushed w);
>>>>         (Reader.recv r >>> function
>>>>           | `Ok result ->  print_endline ("writing shutdown to server"
>>>> ^ result)
>>>>           | `Eof -> ());
>>>>         return ()
>>>>     )); ()
>>>>
>>>>
>>>>
>>>> I see test_shutdown and Server running, but not sign of "writing
>>>> shutdown to server" or even "got it"; why isn't my server or even any of
>>>> the connection executing?
>>>>
>>>
>>>
>>
>

--089e013a0910d852860518a47f07
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Ah. Well I think I can incorporate from that what I can, b=
ut my unit tests need to be reflective of the use case I have. I&#39;m send=
ing protobuf encoded messages between two processes on one machine-whatever=
 the size of the message, that&#39;s the size that should be received on th=
e other end (I&#39;ve read about the returning partial bytes, I can&#39;t d=
ecode a part of a proto message, it has to be the right size).=C2=A0<div><b=
r></div><div>I can&#39;t use write_line, I&#39;ll have to find a way to del=
imit the messages based on size. I think I&#39;ll just prepend every messag=
e with the size that it should expect, and then read a integer off the stre=
am and then that many bytes.</div></div><div class=3D"gmail_extra"><br><div=
 class=3D"gmail_quote">On Tue, Jun 16, 2015 at 11:41 AM, David House <span =
dir=3D"ltr">&lt;<a href=3D"mailto:dhouse@janestreet.com" target=3D"_blank">=
dhouse@janestreet.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><div dir=3D"ltr">Ah, now I read your code in more detail I think I see w=
hy.<div><br></div><div>Reader.contents on the server side will block until =
eof. The client side sends some stuff, but does not close the writer, so th=
e server never sees eof. (Recall that sockets are not like files: it&#39;s =
possible to read all of the available data right now, but not reach eof.)</=
div><div><br></div><div>Network protocols normally have some explicit &quot=
;this is the end of one message&quot; marker, like a newline or something s=
imilar. Then the server just reads chunks until it sees that marker, at whi=
ch point it can put the message together and to something with it.</div><di=
v><br></div><div>For example, you could use Writer.write_line on the client=
 side and Reader.read_line on the server side.</div></div><div class=3D"HOE=
nZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><div class=3D"gmail_q=
uote">On 16 June 2015 at 16:36, Kenneth Adam Miller <span dir=3D"ltr">&lt;<=
a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">kennethadam=
miller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote"=
 style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><d=
iv dir=3D"ltr">So, now I can get server received if I add that into the cal=
lback, but at &quot;writing shutdown to server&quot; I don&#39;t see respon=
se received or even something for Eof.</div><div><div><div class=3D"gmail_e=
xtra"><br><div class=3D"gmail_quote">On Tue, Jun 16, 2015 at 11:09 AM, Davi=
d House <span dir=3D"ltr">&lt;<a href=3D"mailto:dhouse@janestreet.com" targ=
et=3D"_blank">dhouse@janestreet.com</a>&gt;</span> wrote:<br><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
adding-left:1ex"><div dir=3D"ltr">The first thing to try is to make sure th=
at everything is getting flushed. For temporary debugging messages I strong=
ly recommend just using [Core.Std.eprintf &quot;&lt;message&gt;\n%!&quot;].=
</div><div><div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">O=
n 16 June 2015 at 16:03, Kenneth Adam Miller <span dir=3D"ltr">&lt;<a href=
=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">kennethadammiller=
@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=
=3D"ltr"><span style=3D"font-family:Arial,Helvetica,sans-serif;font-size:13=
px">I&#39;m having trouble with OCaml Async. I wrote a small server with it=
, and right now I&#39;m trying to unit test that server. Here&#39;s my code=
 for the server:</span><div style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;font-family:Arial,Helvetica,sans-serif;font-size:13px">=
<br></div><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:ba=
seline;font-family:Arial,Helvetica,sans-serif;font-size:13px"><div style=3D=
"margin:0px;padding:0px;border:0px;vertical-align:baseline"><br></div><div =
style=3D"margin:0px;padding:0px;border:1px solid rgb(187,187,187);vertical-=
align:baseline;word-wrap:break-word;background-color:rgb(250,250,250)"><cod=
e style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline"><div =
style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline"><span s=
tyle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb=
(0,0,0)">let _main=C2=A0</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(102,102,0)">()=3D</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)"><br>=C2=A0 print_endline=C2=A0</span><span style=3D"margin:0px;padding=
:0px;border:0px;vertical-align:baseline;color:rgb(0,136,0)">&quot;Server ru=
nning&quot;</span><span style=3D"margin:0px;padding:0px;border:0px;vertical=
-align:baseline;color:rgb(102,102,0)">;</span><span style=3D"margin:0px;pad=
ding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 le=
t handler=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(102,102,0)">=3D</span><span style=3D"margin:0=
px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0p=
rint_endline=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;v=
ertical-align:baseline;color:rgb(0,0,136)">in</span><span style=3D"margin:0=
px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=
=A0 let socket=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(102,102,0)">=3D</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=
=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(102,0,102)">Tcp</span><span style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><spa=
n style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:=
rgb(0,0,0)">on_port=C2=A0</span><span style=3D"margin:0px;padding:0px;borde=
r:0px;vertical-align:baseline;color:rgb(0,102,102)">5554</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical=
-align:baseline;color:rgb(0,0,136)">in</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 let=
 server=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertic=
al-align:baseline;color:rgb(102,102,0)">=3D</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</s=
pan><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(102,0,102)">Tcp</span><span style=3D"margin:0px;padding:0px;bor=
der:0px;vertical-align:baseline;color:rgb(102,102,0)">.</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,0,102)">Server</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">create so=
cket=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;color:rgb(102,102,0)">(</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">fun addr r w=
=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(102,102,0)">-&gt;</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=
=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"margin:0p=
x;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Read=
er</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:ba=
seline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;=
border:0px;vertical-align:baseline;color:rgb(0,0,0)">contents r</span><span=
 style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:r=
gb(102,102,0)">)</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0=
px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">&gt=
;&gt;|</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(0,0,0)">=C2=A0handler</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">;</spa=
n><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;=
color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,10=
2)">Writer</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">write w=C2=A0<=
/span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;color:rgb(0,136,0)">&quot;got it&quot;</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">))</sp=
an><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;borde=
r:0px;vertical-align:baseline;color:rgb(0,0,136)">in</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=
<br>=C2=A0 server</span></div></code></div><div style=3D"margin:0px;padding=
:0px;border:0px;vertical-align:baseline"><br></div></div><div style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;font-family:Arial,Hel=
vetica,sans-serif;font-size:13px"><br></div><div style=3D"margin:0px;paddin=
g:0px;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-s=
erif;font-size:13px"><br></div><div style=3D"margin:0px;padding:0px;border:=
0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-serif;font-siz=
e:13px">In my unit test code I have:</div><div style=3D"margin:0px;padding:=
0px;border:0px;vertical-align:baseline;font-family:Arial,Helvetica,sans-ser=
if;font-size:13px"><br></div><div style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;font-family:Arial,Helvetica,sans-serif;font-size:=
13px"><div style=3D"margin:0px;padding:0px;border:1px solid rgb(187,187,187=
);vertical-align:baseline;word-wrap:break-word;background-color:rgb(250,250=
,250)"><code style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line"><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseli=
ne"><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(0,0,0)">let test_shutdown test_ctxt=C2=A0</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102=
,0)">=3D</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-al=
ign:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;paddi=
ng:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Thread_safe=
</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(0,0,0)">block_on_async_exn=C2=A0=
</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line;color:rgb(102,102,0)">(</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(0,0,0)">fun=C2=A0</span><span st=
yle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(=
102,102,0)">()</span><span style=3D"margin:0px;padding:0px;border:0px;verti=
cal-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px=
;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">-&gt;=
</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;b=
order:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)"><br>=C2=A0 =C2=A0 =C2=A0 print_endline=C2=A0</span><span style=3D"marg=
in:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,136,0)">&=
quot;test_shutdown&quot;</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(102,102,0)">;</span><span style=3D"m=
argin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=
<br>=C2=A0 =C2=A0 =C2=A0 let server=C2=A0</span><span style=3D"margin:0px;p=
adding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">=3D</sp=
an><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;borde=
r:0px;vertical-align:baseline;color:rgb(102,0,102)">Server</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(10=
2,102,0)">.</span><span style=3D"margin:0px;padding:0px;border:0px;vertical=
-align:baseline;color:rgb(0,0,0)">_main=C2=A0</span><span style=3D"margin:0=
px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">()<=
/span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;bo=
rder:0px;vertical-align:baseline;color:rgb(0,0,136)">in</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,0)"><br>=C2=A0 =C2=A0 =C2=A0 server=C2=A0</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">&gt;&g=
t;=3D</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align=
:baseline;color:rgb(0,0,0)">=C2=A0fun server=C2=A0</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)=
">-&gt;</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-ali=
gn:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 let=C2=A0</span><spa=
n style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:=
rgb(0,0,136)">where</span><span style=3D"margin:0px;padding:0px;border:0px;=
vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margi=
n:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">=
=3D</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:b=
aseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0p=
x;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Tcp</span><span =
style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rg=
b(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;border:0px;vert=
ical-align:baseline;color:rgb(0,0,0)">to_host_and_port=C2=A0</span><span st=
yle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(=
0,136,0)">&quot;127.0.0.1&quot;</span><span style=3D"margin:0px;padding:0px=
;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span st=
yle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(=
0,102,102)">5554</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0=
px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,136)">in</s=
pan><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0=C2=A0</span><span style=3D"mar=
gin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)=
">Tcp</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align=
:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0=
px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">connect=C2=A0</span=
><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;c=
olor:rgb(0,0,136)">where</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102=
,0)">&gt;&gt;=3D</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(0,0,0)">=C2=A0fun s=C2=A0</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">-&gt;</span><span style=3D"margin:0px;padding:0px;border:0px;verti=
cal-align:baseline;color:rgb(0,0,0)">=C2=A0<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
let socket</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;color:rgb(102,102,0)">,</span><span style=3D"margin:0px;padd=
ing:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0r</span>=
<span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;co=
lor:rgb(102,102,0)">,</span><span style=3D"margin:0px;padding:0px;border:0p=
x;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0w=C2=A0</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102=
,102,0)">=3D</span><span style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;color:rgb(0,0,0)">=C2=A0s=C2=A0</span><span style=3D"margi=
n:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,136)">in=
</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:base=
line;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 ignore=C2=A0</span><=
span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;col=
or:rgb(102,102,0)">(</span><span style=3D"margin:0px;padding:0px;border:0px=
;vertical-align:baseline;color:rgb(102,0,102)">Writer</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102=
,0)">.</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-alig=
n:baseline;color:rgb(0,0,0)">write w=C2=A0</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(0,136,0)">&quot;ki=
ll&quot;</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-al=
ign:baseline;color:rgb(102,102,0)">);</span><span style=3D"margin:0px;paddi=
ng:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 ignore=C2=A0</span><span style=3D"margin:0px;padding:0px;=
border:0px;vertical-align:baseline;color:rgb(102,102,0)">(</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(10=
2,0,102)">Writer</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(102,102,0)">.</span><span style=3D"margin:0p=
x;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">flushed =
w</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:bas=
eline;color:rgb(102,102,0)">);</span><span style=3D"margin:0px;padding:0px;=
border:0px;vertical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=
=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(102,102,0)">(</span><span style=3D"margin:0p=
x;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,0,102)">Read=
er</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:ba=
seline;color:rgb(102,102,0)">.</span><span style=3D"margin:0px;padding:0px;=
border:0px;vertical-align:baseline;color:rgb(0,0,0)">recv r=C2=A0</span><sp=
an style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color=
:rgb(102,102,0)">&gt;&gt;&gt;</span><span style=3D"margin:0px;padding:0px;b=
order:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span styl=
e=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,=
0,136)">function</span><span style=3D"margin:0px;padding:0px;border:0px;ver=
tical-align:baseline;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0=C2=A0</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-a=
lign:baseline;color:rgb(102,102,0)">|</span><span style=3D"margin:0px;paddi=
ng:0px;border:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><s=
pan style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;colo=
r:rgb(0,136,0)">`Ok result -&gt; =C2=A0print_endline (&quot;writing shutdow=
n to server&quot; ^ result)<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 | `</span=
><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;c=
olor:rgb(102,0,102)">Eof</span><span style=3D"margin:0px;padding:0px;border=
:0px;vertical-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"=
margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102=
,0)">-&gt;</span><span style=3D"margin:0px;padding:0px;border:0px;vertical-=
align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;pad=
ding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">());</spa=
n><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;=
color:rgb(0,0,0)"><br>=C2=A0 =C2=A0 =C2=A0 =C2=A0=C2=A0</span><span style=
=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;color:rgb(0,0=
,136)">return</span><span style=3D"margin:0px;padding:0px;border:0px;vertic=
al-align:baseline;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">()</sp=
an><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline=
;color:rgb(0,0,0)"><br>=C2=A0 =C2=A0=C2=A0</span><span style=3D"margin:0px;=
padding:0px;border:0px;vertical-align:baseline;color:rgb(102,102,0)">));</s=
pan><span style=3D"margin:0px;padding:0px;border:0px;vertical-align:baselin=
e;color:rgb(0,0,0)">=C2=A0</span><span style=3D"margin:0px;padding:0px;bord=
er:0px;vertical-align:baseline;color:rgb(102,102,0)">()</span></div></code>=
</div><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:baseli=
ne"><br></div></div><div style=3D"margin:0px;padding:0px;border:0px;vertica=
l-align:baseline;font-family:Arial,Helvetica,sans-serif;font-size:13px"><br=
></div><div style=3D"margin:0px;padding:0px;border:0px;vertical-align:basel=
ine;font-family:Arial,Helvetica,sans-serif;font-size:13px"><br></div><div s=
tyle=3D"margin:0px;padding:0px;border:0px;vertical-align:baseline;font-fami=
ly:Arial,Helvetica,sans-serif;font-size:13px">I see test_shutdown and Serve=
r running, but not sign of &quot;writing shutdown to server&quot; or even &=
quot;got it&quot;; why isn&#39;t my server or even any of the connection ex=
ecuting?</div></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--089e013a0910d852860518a47f07--
