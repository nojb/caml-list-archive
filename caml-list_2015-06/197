Return-Path: <xavier.deschuyteneer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 3C46A7EF28
	for <caml-list@sympa.inria.fr>; Fri, 26 Jun 2015 11:57:58 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  xavier.deschuyteneer@gmail.com) identity=pra;
  client-ip=209.85.215.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="xavier.deschuyteneer@gmail.com";
  x-sender="xavier.deschuyteneer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  xavier.deschuyteneer@gmail.com designates 209.85.215.48 as
  permitted sender) identity=mailfrom; client-ip=209.85.215.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="xavier.deschuyteneer@gmail.com";
  x-sender="xavier.deschuyteneer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-la0-f48.google.com) identity=helo;
  client-ip=209.85.215.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="xavier.deschuyteneer@gmail.com";
  x-sender="postmaster@mail-la0-f48.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0A1AwDMIY1VlDDXVdFbg2VfBoMYqwCOWoIZgkSDNAKBNQdMAQEBAQEBEgEBAQEHCwsJHzCEIgEBAQMBEhEdARsSCwEDAQsGAwILDQ0dAgIhAQERAQUBChIGCgkSEId3AQMKCA2aZpBrPjGLP4FrgnmLHAoZJwMKV4UcAQEBAQEBAQMBAQEBAQEBFQEFDos8gjsSgWpLBAeCaIFDBYVaCo4ghFiFGYFhgTpCjyODPYIREiOBDQkRBoIbHIFUPDEBgkcBAQE
X-IPAS-Result: A0A1AwDMIY1VlDDXVdFbg2VfBoMYqwCOWoIZgkSDNAKBNQdMAQEBAQEBEgEBAQEHCwsJHzCEIgEBAQMBEhEdARsSCwEDAQsGAwILDQ0dAgIhAQERAQUBChIGCgkSEId3AQMKCA2aZpBrPjGLP4FrgnmLHAoZJwMKV4UcAQEBAQEBAQMBAQEBAQEBFQEFDos8gjsSgWpLBAeCaIFDBYVaCo4ghFiFGYFhgTpCjyODPYIREiOBDQkRBoIbHIFUPDEBgkcBAQE
X-IronPort-AV: E=Sophos;i="5.13,683,1427752800"; 
   d="scan'208";a="137952628"
Received: from mail-la0-f48.google.com ([209.85.215.48])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 26 Jun 2015 11:57:28 +0200
Received: by lagi2 with SMTP id i2so60605444lag.2
        for <caml-list@inria.fr>; Fri, 26 Jun 2015 02:57:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=XMkolNy3HIEw6wT3wGu7yjOritpGfA9vsZYqwErpR2Q=;
        b=pBhbYckvvcDhq364lPJmKKJuMlCFiGasUy36zlq1lxwGuUAjKY4hi4JyQwwaqoGmor
         H2azWjDnd4gvercOmQkODHsC7KNy8YzHahkXnc07574xUfYEKMFl9gZ2FJ4BMtJLXyfz
         nskWRYaeYsiiAoDeNkiEN5EZnVp4MtWtHUPOlB7TLHN6sI4t6XFiuKm22EGpx+eDkxdw
         lNd6uYoa0+gqBZPK2jES3KvF039fT/Hu2dfl1aX1c0qEVxNmRiRH3zoECI7CiSS9xJ1l
         dW8yw0/Tdz2miea4rNIKlwK9XoXymKz7KI+gbBToZ4gRzZp2BuJ9c4zfli1tY3lWzy/H
         oC3Q==
X-Received: by 10.112.219.201 with SMTP id pq9mr772119lbc.109.1435312647513;
 Fri, 26 Jun 2015 02:57:27 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.205.209 with HTTP; Fri, 26 Jun 2015 02:57:07 -0700 (PDT)
In-Reply-To: <CAALTfKCXSw3+KXmSca+8eTt1_TBrqAE-cd_U4Yor-nvoGdr1EQ@mail.gmail.com>
References: <CAP3kh=2qNiZ64SXYJZ-_xGojiEaDTUTvJLfBxzDJWCXOcGZe1w@mail.gmail.com>
 <1e86d3d4e5a1e3ba3051d8c928b0dbd2@in.tum.de> <CAALTfKCXSw3+KXmSca+8eTt1_TBrqAE-cd_U4Yor-nvoGdr1EQ@mail.gmail.com>
From: xavier deschuyteneer <xavier.deschuyteneer@gmail.com>
Date: Fri, 26 Jun 2015 11:57:07 +0200
Message-ID: <CAP3kh=2PMwAFchXfBnJ1j0Vhp_4st-J7-f9-0PtOWYP_iV8bZg@mail.gmail.com>
To: Berke Durak <berke.durak@gmail.com>
Cc: =?UTF-8?Q?Markus_Wei=C3=9Fmann?= <markus.weissmann@in.tum.de>, 
	caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c25cac7f2ccb051968c414
Subject: Re: [Caml-list] OCaml embedded

--001a11c25cac7f2ccb051968c414
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

When i say embedded system, i really mean embedded system running on a
minimal Linux with low power CPU, not so much flash, same for the RAM.
It's similar to think that a raspberry pi is a IOT. It's not, it's mini
computer on ARM platform. In my case, it's really an embedded system, low
cpu, not so much ram, neither flash.

And btw i know exactly how yocto works because i build myself our OS. And
that's not exactly python, it's a mix between python and bash.
We build two different distributions: one ARM and one x86 (for emulation
purpose, valgrind, etc.). and all tools(chains) associated.
This ocaml software needs to be integrated in this workflow.

Right now, we use plain C, and yes cross compilation is a specific setup,
but it's not difficult to achieve.
The advantage right now to use cross compilation are:
We can use all the power of a real computer to build/debug/code.
I can use all the interfaces that my computer have and not my end
(embedded) system: multiple ethernet cards, bluetooth, usb, etc.
I have multiple projects to manage and all of them are not embedded related.

Thanks for your answer and the time spent for my question :-)

TL;DR: i need to cross compile ocaml code to arm because my device is not
powerful enough and that's not possible in industrial purpose to change
that.


Xavier Deschuyteneer

2015-06-26 5:04 GMT+02:00 Berke Durak <berke.durak@gmail.com>:

> On Tue, Jun 23, 2015 at 6:32 AM, Markus Wei=C3=9Fmann
> <markus.weissmann@in.tum.de> wrote:
> >
> > I can offer experience in the following cases:
> > 1) If your system is powerful enough (e.g. rasperry pi), you can just
> install the ocaml toolchain on your system and develop there on your targ=
et
> system.
>
> Seconded.  We did almost that for one of our projects and it works
> pretty well.  The difference is that we didn't use QEmu, but two of
> our custom Q7 board (based on a Zynq ARM Cortex A9 with 512 MB RAM,
> see http://xiphos.com/products/q7-processor/ ).
>
> We use Yocto to generate two versions of a Linux system: the target
> system, and a much larger version that contains developer tools (C
> compiler, m4, etc.)  The development system runs from microSD cards,
> and takes the better part of a gigabyte, while the target system has
> to run from < 64 megs of flash.  The required run-time dependencies of
> the target system have to be manually configured in the Yocto recipes.
>
> We then manually install opam on the developer board, and use it to
> compile our OCaml code. The generated native ARM executables are then
> packaged into .ipks and transferred to the target Q7 board (connected
> to actual hardware:
> http://www.ghgsat.com/wp-content/uploads/2015/03/Payload-Selfie.jpg )
> The packaging is done using a simple shell script that invokes ar and
> tar.
>
> We did try using QEmu but it's significantly slower, however it may
> come into play as automating the build process (using a virtual
> machine or dedicated hardware) is on our to do list, and build time
> isn't as important when it's a nightly automated build.
>
> Initially we looked into using a cross-compiler but we decided that
> being able to use Opam largely outweighs any possible benefit we could
> get from cross-compiling.  And cross-compiling is often a source of
> headaches, even when compiling plain old C.  We would have to write a
> lot of Yocto recipes to get it running.  Note that Yocto is written in
> a progarmming language called Python and requires recipes to be
> expressed mostly the same language.
>
> To conclude, as powerful ARM systems are very cheap and plentiful
> these days, and since the convenience of Opam is immense, I'm not sure
> there is much incentive in using a cross-compiler.  BTW, is there a
> maintained ARM cross-compiler?
> --
> Berke Durak
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a11c25cac7f2ccb051968c414
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">When i say embedded system, i really mean embedded system =
running on a minimal Linux with low power CPU, not so much flash, same for =
the RAM.<div>It&#39;s similar to think that a raspberry pi is a IOT. It&#39=
;s not, it&#39;s mini computer on ARM platform. In my case, it&#39;s really=
 an embedded system, low cpu, not so much ram, neither flash.</div><div><br=
></div><div>And btw i know exactly how yocto works because i build myself o=
ur OS. And that&#39;s not exactly python, it&#39;s a mix between python and=
 bash.</div><div>We build two different distributions: one ARM and one x86 =
(for emulation purpose, valgrind, etc.). and all tools(chains) associated.<=
/div><div>This ocaml software needs to be integrated in this workflow.</div=
><div><br></div><div>Right now, we use plain C, and yes cross compilation i=
s a specific setup, but it&#39;s not difficult to achieve.</div><div>The ad=
vantage right now to use cross compilation are:</div><div>We can use all th=
e power of a real computer to build/debug/code.</div><div>I can use all the=
 interfaces that my computer have and not my end (embedded) system: multipl=
e ethernet cards, bluetooth, usb, etc.</div><div>I have multiple projects t=
o manage and all of them are not embedded related.</div><div><br></div><div=
>Thanks for your answer and the time spent for my question :-)</div><div><b=
r></div><div>TL;DR: i need to cross compile ocaml code to arm because my de=
vice is not powerful enough and that&#39;s not possible in industrial purpo=
se to change that.</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=C2=
=A0</div></div><div class=3D"gmail_extra"><br clear=3D"all"><div><div class=
=3D"gmail_signature"><div dir=3D"ltr">Xavier Deschuyteneer</div></div></div>
<br><div class=3D"gmail_quote">2015-06-26 5:04 GMT+02:00 Berke Durak <span =
dir=3D"ltr">&lt;<a href=3D"mailto:berke.durak@gmail.com" target=3D"_blank">=
berke.durak@gmail.com</a>&gt;</span>:<br><blockquote class=3D"gmail_quote" =
style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><sp=
an class=3D"">On Tue, Jun 23, 2015 at 6:32 AM, Markus Wei=C3=9Fmann<br>
&lt;<a href=3D"mailto:markus.weissmann@in.tum.de">markus.weissmann@in.tum.d=
e</a>&gt; wrote:<br>
&gt;<br>
&gt; I can offer experience in the following cases:<br>
&gt; 1) If your system is powerful enough (e.g. rasperry pi), you can just =
install the ocaml toolchain on your system and develop there on your target=
 system.<br>
<br>
</span>Seconded.=C2=A0 We did almost that for one of our projects and it wo=
rks<br>
pretty well.=C2=A0 The difference is that we didn&#39;t use QEmu, but two o=
f<br>
our custom Q7 board (based on a Zynq ARM Cortex A9 with 512 MB RAM,<br>
see <a href=3D"http://xiphos.com/products/q7-processor/" rel=3D"noreferrer"=
 target=3D"_blank">http://xiphos.com/products/q7-processor/</a> ).<br>
<br>
We use Yocto to generate two versions of a Linux system: the target<br>
system, and a much larger version that contains developer tools (C<br>
compiler, m4, etc.)=C2=A0 The development system runs from microSD cards,<b=
r>
and takes the better part of a gigabyte, while the target system has<br>
to run from &lt; 64 megs of flash.=C2=A0 The required run-time dependencies=
 of<br>
the target system have to be manually configured in the Yocto recipes.<br>
<br>
We then manually install opam on the developer board, and use it to<br>
compile our OCaml code. The generated native ARM executables are then<br>
packaged into .ipks and transferred to the target Q7 board (connected<br>
to actual hardware:<br>
<a href=3D"http://www.ghgsat.com/wp-content/uploads/2015/03/Payload-Selfie.=
jpg" rel=3D"noreferrer" target=3D"_blank">http://www.ghgsat.com/wp-content/=
uploads/2015/03/Payload-Selfie.jpg</a> )<br>
The packaging is done using a simple shell script that invokes ar and<br>
tar.<br>
<br>
We did try using QEmu but it&#39;s significantly slower, however it may<br>
come into play as automating the build process (using a virtual<br>
machine or dedicated hardware) is on our to do list, and build time<br>
isn&#39;t as important when it&#39;s a nightly automated build.<br>
<br>
Initially we looked into using a cross-compiler but we decided that<br>
being able to use Opam largely outweighs any possible benefit we could<br>
get from cross-compiling.=C2=A0 And cross-compiling is often a source of<br>
headaches, even when compiling plain old C.=C2=A0 We would have to write a<=
br>
lot of Yocto recipes to get it running.=C2=A0 Note that Yocto is written in=
<br>
a progarmming language called Python and requires recipes to be<br>
expressed mostly the same language.<br>
<br>
To conclude, as powerful ARM systems are very cheap and plentiful<br>
these days, and since the convenience of Opam is immense, I&#39;m not sure<=
br>
there is much incentive in using a cross-compiler.=C2=A0 BTW, is there a<br>
maintained ARM cross-compiler?<br>
<span class=3D"HOEnZb"><font color=3D"#888888">--<br>
Berke Durak<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a></div></div></b=
lockquote></div><br></div>

--001a11c25cac7f2ccb051968c414--
