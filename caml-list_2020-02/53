Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id F2F297F423
	for <caml-list@sympa.inria.fr>; Sat, 29 Feb 2020 10:05:54 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qt1-f176.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.160.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.160.176 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.160.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qt1-f176.google.com) identity=helo;
  client-ip=209.85.160.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qt1-f176.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AgN+PaxGC4P1zOxik3oAXOZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yps2wAkXT6L1XgUPTWs2DsrQY0raQ4vGrADZZqb+681k8M7V0Hycfjs?=
 =?us-ascii?q?sXmwFySOWkMmbcaMDQUiohAc5ZX0Vk9XzoeWJcGcL5ekGA6ibqtW1aFRrwLxd6?=
 =?us-ascii?q?KfroEYDOkcu3y/qy+5rOaAlUmTaxe7x/IAi5oAnLssQbhYRuJrsvxhfUv3BFZ/?=
 =?us-ascii?q?lYyWR0KF2cmBrx+t2+94N5/SRKvPIh+c9AUaHkcKk9ULdVEjcoPX0r6cPyrRXM?=
 =?us-ascii?q?QheB6XUaUmUNjxpHGBPF4w3gXpfwqST1qOxw0zSHMMLsTLA0XTOi77p3SBLtlS?=
 =?us-ascii?q?wKOSI1/H3Rh8dtl69Qvg6vqAJjzI7VeIGVNeRxfqXBfdMBWGFNWt9dWzFdDo+g?=
 =?us-ascii?q?aocCCfcKM+RFoInnv1YBohW+CgusCu3hyTFGm2H40rEh3us7DQ3LxhYtE84SvH?=
 =?us-ascii?q?nWqtj+KaccUfqyzKnN1TjNbulZ1izn6IjJbB8hpeyHU69sfsrR10YvDR3Kjk+N?=
 =?us-ascii?q?ooHiMDOazP8Cs3Ka7+V+UeKjkXUnpB1xojex3McjlJPJi5kaylDB7yp5wYI1Kc?=
 =?us-ascii?q?ekR058ZN6pCZ1dvDyUOYtxR8MtWWBouCAix70HvJ67ZCwKx4oixxHBbfyHb5KH?=
 =?us-ascii?q?4g7iVOaWJzd0nndleLanixa98Eig1u38VtSv31pQsiVFldzMumgM1xzV8MiHS+?=
 =?us-ascii?q?Fy8l2v2TaV0Q3Y9+JKIVgsmKbFN5IsxqQ8m5kTvEjZAyP7mVn6gLWLekgm++Wl?=
 =?us-ascii?q?7fnsbK/8qZ+GLYB0jxnzMqQwlcy7BuQ1Kg0OUHKa+eS4zbHj5FH5TKhTgv04j6?=
 =?us-ascii?q?XUspHXKd4Upq6+BA9V3YIj5AilAzi619QYmGELLFNDeB2Zk4jkI0/CLOz8APul?=
 =?us-ascii?q?gFmhkC1ny+3HM7H9GJnBM3rOnbb5cbZ48UFcyQ4zzd5F55JTD7EMOP3zVVXqu9?=
 =?us-ascii?q?zCDx82LQi0z/z8CNph1oMRR3iPDbGDMK7Jvl+I4/ggI+iIZIMPpDn9LP0l6+b0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZX+kBPtmJkGZbWPogtcACmcKohEzTPfqiV2HST5cfWy+X6?=
 =?us-ascii?q?M65jEhCYKpF53PRo63gO/J4CDuVKdXbWBPEFzELjHNMc2mXPEBc2jadtVgmTws?=
 =?us-ascii?q?XL6nRp8g3FeprgCsmJR9Ke+B1SQSr5Pu0JBO7O3ejxwovWh7Bs6H0myJCXp/nm?=
 =?us-ascii?q?4SSiUe06V2oEg7wVCGh/sry8dEHMBesqsaGjwxMoTRmqkjU4irBlDxO+yRQVPj?=
 =?us-ascii?q?ee2IRCkrR4tokdALakd5Xd6li0Kbhnf4M/ouj7WOQacM3Ofc0nz2fZgvzn/H0O?=
 =?us-ascii?q?w4kwBjTJIQayupgalw8wWVDInMwR3AxvSaMJ8E1SuIz1+tiG+HvUVWSgl1CPyX?=
 =?us-ascii?q?UnUWZ0+QptP8tBrP?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DyBwCEKFpef7CgVdFmhRJEgQcqhBSBH?=
 =?us-ascii?q?IJeiwOCEYMPh1qQVQkBAwEMJQoEAQGDCnFFAoIKHAcBBDQTAhABAQUBAQECAQI?=
 =?us-ascii?q?DBAETAQEJCwsIJ4VfDII7KQGCfwEBAQIBEhEdARsdAQMBCwYFCzcCAiIBEQEFA?=
 =?us-ascii?q?RwGEyKDBYJJAQMOIA+hRoEEPYsogRUFAReDAAWBREGCPwoZJw1iA4EyAgcSgSa?=
 =?us-ascii?q?MJQ+BTD+BR4IwLj6CZAICghCCZIJeBI1ISohjgimHPo8/B4I/eASGVY8UHINIl?=
 =?us-ascii?q?2mXbJJlDyOBRoF6MxojUDGCOwlHGA2NeYQXgT6CYoY2QzACj3ABAQ?=
X-IPAS-Result: =?us-ascii?q?A0DyBwCEKFpef7CgVdFmhRJEgQcqhBSBHIJeiwOCEYMPh1q?=
 =?us-ascii?q?QVQkBAwEMJQoEAQGDCnFFAoIKHAcBBDQTAhABAQUBAQECAQIDBAETAQEJCwsIJ?=
 =?us-ascii?q?4VfDII7KQGCfwEBAQIBEhEdARsdAQMBCwYFCzcCAiIBEQEFARwGEyKDBYJJAQM?=
 =?us-ascii?q?OIA+hRoEEPYsogRUFAReDAAWBREGCPwoZJw1iA4EyAgcSgSaMJQ+BTD+BR4IwL?=
 =?us-ascii?q?j6CZAICghCCZIJeBI1ISohjgimHPo8/B4I/eASGVY8UHINIl2mXbJJlDyOBRoF?=
 =?us-ascii?q?6MxojUDGCOwlHGA2NeYQXgT6CYoY2QzACj3ABAQ?=
X-IronPort-AV: E=Sophos;i="5.70,499,1574118000"; 
   d="scan'208,217";a="438142821"
X-MGA-submission: =?us-ascii?q?MDEeB/6tekR4gMnofFNYeSepeWD9gvOpg+ss02?=
 =?us-ascii?q?DMJHGbYtwIdPCcGTQKQ1CS/mWAtyi7XipfwTI1W/DZoJxghrZ38+xwg1?=
 =?us-ascii?q?iDmsGNtaYHLqaxmG9k3AzOYGwO5zKV3s7RoDpsi3rsM1z/xIAy5tH2rD?=
 =?us-ascii?q?obTNfeDyUU84JCN/H9WbnVHg=3D=3D?=
Received: from mail-qt1-f176.google.com ([209.85.160.176])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 29 Feb 2020 10:05:54 +0100
Received: by mail-qt1-f176.google.com with SMTP id e20so3947912qto.5
        for <caml-list@inria.fr>; Sat, 29 Feb 2020 01:05:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=ZHkyuZMPRfXIYBVztbTjjnb1eQAZL25s6tS26QlEM0I=;
        b=opMOt0K1Y3v2ffOVEzJdIXA9pwVdjxQ1PrXZ3bDrGGlcZHrG1yTVQYUX/OJv3UnoI1
         wbtki0enDbM4eCKNOs5ONuqmJf/OTb+QOMlrd/v4cnnXvOA7A43wQDZjYhDnX+KxrmCn
         Ip6lgozHCo76ok0MAqjFhBHua/5qGuNQKIIphZRAdoZp+SDeYsUeDuYX5x1AuyKJltVp
         BAZFLFK4r/uyRjlFwnKJvkIXVu+A7/pFeOZdROrGnSj1x7z2HzlaXxBhVxiie6p2H67G
         MH2QRPJIqgGJgvuJi+JBBI7QIeByFP+AwD96xxHAj8Wc+PkAbdEweHaHJqoATHZQ9fEl
         V/bQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=ZHkyuZMPRfXIYBVztbTjjnb1eQAZL25s6tS26QlEM0I=;
        b=ripfARvNaEzRIQj+7t4m0r06ioVu/+s8EzIj7T1wHILv+zvzNWlcSbwt93+TePKhIX
         Y/D5SJNFEAWY48GeGUjYE1sLVE5lDz3MyKH7h7g+96tIkxwCp9s/GKbUKorUUQ6lXTAp
         fqbQw9kElutHss/XyZmA/oUcOK07lrFJo3N08QsL4JEFxVHuAhTiUpOdpfO5K4necAS1
         KqbhcePDNDsF4YJNPhgCr7a+aA9tw+piFYW/7x4h1/gFJ5NkemKtEy1V4bAZSoTe13UF
         cpmmWn9hjJM0z9kafyQ6v0vo81Q+6oEq40K2neMGM82tVsZO2E6HhCtF89szYpITsQvm
         nxAw==
X-Gm-Message-State: APjAAAVgh/DpqguuiHNOCin/m4QZBFA7Qi9R3jbQyR8iV/xZoGDY0FbN
	CPolB2PbXSa6CKE8fG2ogg6rEDTo/98wG3y7f8HBcEDuDNo=
X-Google-Smtp-Source: APXvYqxGnB1aZGhCzCc1Cy0AeK06Tp1sIi81RQQ7Qfq5l1wIXmR2Wh5YSppEuBFFhCwv4nfEN8MXtvFc3HyEKFvqRKM=
X-Received: by 2002:ac8:1baf:: with SMTP id z44mr7887435qtj.127.1582967152783;
 Sat, 29 Feb 2020 01:05:52 -0800 (PST)
MIME-Version: 1.0
References: <20200229085319.GD11122@rich.annexia.org>
In-Reply-To: <20200229085319.GD11122@rich.annexia.org>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sat, 29 Feb 2020 10:09:51 +0100
Message-ID: <CAPFanBFcX2gLbdBVt=k+S6P79x2VpSH3CURQmecauR6xgJm=Ww@mail.gmail.com>
To: "Richard W.M. Jones" <rich@annexia.org>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="000000000000d53639059fb342cc"
Subject: Re: [Caml-list] #use is not textual inclusion

--000000000000d53639059fb342cc
Content-Type: text/plain; charset="UTF-8"

I think that your example is rejected not because of the semantics of #use,
but because toplevel directives in general are parsed at the level of
toplevel *phrases*, and not possibly-in-depth structure items. In other
words, a toplevel script is a sequence of structure items or toplevel
directives, but directives are not (nestable) structure items. The
documentation seems correct -- consistent with this behavior.

I see a way to do what you want using #mod_use, but it is a bit indirect
because #mod_use does not directly support signature checking:

    module type Foo_sig = sig ... end
    #mod_use "implementation.ml";;
    module Foo = (Implementation : Foo_sig);;

This approach defines a suitably restricted Foo, but it also exposes the
Implementation module in the rest of the scope. You can avoid this if you
use the same .ml name as the module name you want, so that shadowing hides
the implementation module

    module type Foo_sig = sig ... end
    #mod_use "foo.ml <http://implementation.ml>";;
    module Foo = (Foo : Foo_sig);;


On Sat, Feb 29, 2020 at 9:54 AM Richard W.M. Jones <rich@annexia.org> wrote:

> I was trying to break up a large ocaml interpreted script:
>
>   https://github.com/libguestfs/libnbd/blob/master/generator/generator
>
> The script contains sections like:
>
>   module Foo : sig
>   (* type signature *)
>   end = struct
>   (* very long implementation *)
>   end
>
> and it would be convenient for me to move the implementations into
> separate files.  However this doesn't work:
>
>   module Foo : sig
>   (* type signature *)
>   end = struct
>   #use "implementation.ml"  (* with or without ;; here *)
>   end
>
> So I guess #use only works for top level statements, which surprised
> me and contradicts the documentation here too:
>
>
> https://caml.inria.fr/pub/docs/manual-ocaml/toplevel.html#s%3Atoplevel-directives
>
> I could move the whole module definition to the file, but then I would
> lose the advantage of hiding the implementation while keeping the
> signature visible in the main file.
>
> Given the constraint that we can't use ocamlc or cppo (because of
> minimal build dependencies), are there any alternatives?  My first
> thought was C's cpp, but it seems impossible to get that working with
> #!/usr/bin/env and preserve the "scriptiness" of being able to just do
> ./generator/generator to run it.
>
> Rich.
>

--000000000000d53639059fb342cc
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>I think that your example is rejected not because of =
the semantics of #use, but because toplevel directives in general are parse=
d at the level of toplevel *phrases*, and not possibly-in-depth structure i=
tems. In other words, a toplevel script is a sequence of structure items or=
 toplevel directives, but directives are not (nestable) structure items. Th=
e documentation seems correct -- consistent with this behavior.</div><div><=
br></div><div>I see a way to do what you want using #mod_use, but it is a b=
it indirect because #mod_use does not directly support signature checking:<=
/div><div><br></div><div>=C2=A0 =C2=A0 module type Foo_sig =3D sig ... end<=
/div><div>=C2=A0 =C2=A0 #mod_use &quot;<a href=3D"http://implementation.ml"=
 target=3D"_blank">implementation.ml</a>&quot;;;</div><div>=C2=A0 =C2=A0 mo=
dule Foo =3D (Implementation : Foo_sig);;</div><div><br></div><div>This app=
roach defines a suitably restricted Foo, but it also exposes the Implementa=
tion module in the rest of the scope. You can avoid this if you use the sam=
e .ml name as the module name you want, so that shadowing hides the impleme=
ntation module<br></div><div><br></div><div><div>=C2=A0 =C2=A0 module type =
Foo_sig =3D sig ... end</div><div>=C2=A0 =C2=A0 #mod_use &quot;foo<a href=
=3D"http://implementation.ml" target=3D"_blank">.ml</a>&quot;;;</div><div>=
=C2=A0 =C2=A0 module Foo =3D (Foo : Foo_sig);;</div></div><div><br></div></=
div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On=
 Sat, Feb 29, 2020 at 9:54 AM Richard W.M. Jones &lt;<a href=3D"mailto:rich=
@annexia.org" target=3D"_blank">rich@annexia.org</a>&gt; wrote:<br></div><b=
lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
ft:1px solid rgb(204,204,204);padding-left:1ex">I was trying to break up a =
large ocaml interpreted script:<br>
<br>
=C2=A0 <a href=3D"https://github.com/libguestfs/libnbd/blob/master/generato=
r/generator" rel=3D"noreferrer" target=3D"_blank">https://github.com/libgue=
stfs/libnbd/blob/master/generator/generator</a><br>
<br>
The script contains sections like:<br>
<br>
=C2=A0 module Foo : sig<br>
=C2=A0 (* type signature *)<br>
=C2=A0 end =3D struct<br>
=C2=A0 (* very long implementation *)<br>
=C2=A0 end<br>
<br>
and it would be convenient for me to move the implementations into<br>
separate files.=C2=A0 However this doesn&#39;t work:<br>
<br>
=C2=A0 module Foo : sig<br>
=C2=A0 (* type signature *)<br>
=C2=A0 end =3D struct<br>
=C2=A0 #use &quot;<a href=3D"http://implementation.ml" rel=3D"noreferrer" t=
arget=3D"_blank">implementation.ml</a>&quot;=C2=A0 (* with or without ;; he=
re *)<br>
=C2=A0 end<br>
<br>
So I guess #use only works for top level statements, which surprised<br>
me and contradicts the documentation here too:<br>
<br>
=C2=A0 <a href=3D"https://caml.inria.fr/pub/docs/manual-ocaml/toplevel.html=
#s%3Atoplevel-directives" rel=3D"noreferrer" target=3D"_blank">https://caml=
.inria.fr/pub/docs/manual-ocaml/toplevel.html#s%3Atoplevel-directives</a><b=
r>
<br>
I could move the whole module definition to the file, but then I would<br>
lose the advantage of hiding the implementation while keeping the<br>
signature visible in the main file.<br>
<br>
Given the constraint that we can&#39;t use ocamlc or cppo (because of<br>
minimal build dependencies), are there any alternatives?=C2=A0 My first<br>
thought was C&#39;s cpp, but it seems impossible to get that working with<b=
r>
#!/usr/bin/env and preserve the &quot;scriptiness&quot; of being able to ju=
st do<br>
./generator/generator to run it.<br>
<br>
Rich.<br>
</blockquote></div>

--000000000000d53639059fb342cc--
