Return-Path: <sjs429@cornell.edu>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 4C38A800BE
	for <caml-list@sympa.inria.fr>; Fri, 10 Feb 2017 00:54:36 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=sjs429@cornell.edu; spf=Pass smtp.mailfrom=sjs429@cornell.edu; spf=Pass smtp.helo=postmaster@limerock03.mail.cornell.edu
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  sjs429@cornell.edu) identity=pra; client-ip=128.84.13.243;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="sjs429@cornell.edu";
  x-sender="sjs429@cornell.edu"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  sjs429@cornell.edu designates 128.84.13.243 as permitted
  sender) identity=mailfrom; client-ip=128.84.13.243;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="sjs429@cornell.edu";
  x-sender="sjs429@cornell.edu"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@limerock03.mail.cornell.edu designates
  128.84.13.243 as permitted sender) identity=helo;
  client-ip=128.84.13.243;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="sjs429@cornell.edu";
  x-sender="postmaster@limerock03.mail.cornell.edu";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3AQsSLQBavgKi2Yg5nxm+RM3f/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZr8S8bnLW6fgltlLVR4KTs6sC0LuK9fC+EjVZqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjSwbLd9IRmsrgjct8YajZZ/Jq0s1hbHv3xEdv?=
 =?us-ascii?q?hMy2h1P1yThRH85smx/J5n7Stdvu8q+tBDX6vnYak2VKRUAzs6PW874s3rrgTD?=
 =?us-ascii?q?QhCU5nQASGUWkwFHDBbD4RrnQ5r+qCr6tu562CmHIc37SK0/VDq+46t3ThLjlT?=
 =?us-ascii?q?wKPCAl/m7JlsNwjbpboBO/qBx5347Ue5yeOP5ncq/AYd8WWW9NU8BMXCJDH4y8?=
 =?us-ascii?q?dZMCAOgPPehYoYfzpEYAowWiCgS3Huzj1iVFi2Xq0aEm0eksFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtMj7NLsMXuC7wqnH0zPDZO5L1zf474jIdhMhruuRVr93asrRzE4vFwfGjlqK?=
 =?us-ascii?q?soHqIyiV2v4RvGic9epgU/ygi2ojqw1rvDeg29osh5DPi4kIxF7E8iB5z5w0Jd?=
 =?us-ascii?q?2+UEN7bsCrEIFNuC2DLIt2XsQiQ2VwuCY/0LIGv5i7cDIXx5s53xLQd+aIc42M?=
 =?us-ascii?q?4h3/VeaRPTd5iGhieLKliBa/91WrxO7kVsSszVpGsClInsPPu30CzRDf98aKRu?=
 =?us-ascii?q?Fj8kqu1zuDzx7f5v1ALEwulqfWK4QtzqAtmpYPq0jPAyv7lUHwgaSLbEsr4PKo?=
 =?us-ascii?q?5P7iYrj+pp+TKYt0igbmP6Qqm8y/BPo3MhIJX2eH+uSwyLPu8Vf8QLpQj/02lr?=
 =?us-ascii?q?PVv4zdJcQBoK62HQtV0oI55xmhEjimzcwUnXgBLF1bZBKKl5XlN0/NLfziDvqy?=
 =?us-ascii?q?jE6gnCplyvzcILHsDZvAImDGkLj7fLZ970BcyBA0zdBa/59UEbMBIOn8V0PvsN?=
 =?us-ascii?q?HVFQM2Mwuuw+bhFtp90oceVXiRDaCELaPeqUWI6f43I+mQeI8Vvy7wJOQ/6P7r?=
 =?us-ascii?q?iX81gFsdfaiy3ZsLc324BfRnI0CBYXX2mNsBEGEKvhA/TOPwklGCXyRTND6OWP?=
 =?us-ascii?q?cT6ys3QLm6CoPbQ4mrhvTV3SG1GbVZa3pKT0uQFnPwcoyCXbEAZXTBDNVml2k/?=
 =?us-ascii?q?SbWvRYInnSqrswv5wvIzNe/T/i4RnZn4ktNy/evekRV0+DBpWZfOm1qRRn15yz?=
 =?us-ascii?q?tbDwQ927py9Akkkg+O?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B4AQD0AJ1Yh/MNVIBdGwEBAQMBAQEJA?=
 =?us-ascii?q?QEBFwEBBAEBCgEBgkSBQ1UDMQeDUoE2iUSRGYgMh3mHPyWFfIJnB0MUAQEBAQE?=
 =?us-ascii?q?BAQEBAQESAQEBCgsJCh0vgjMbAYIaAQEEASMELiQFCwEIAgsDCioCAiEBEgEFA?=
 =?us-ascii?q?RwGDgUJiVMDDQgFCZI8kQ0/jAKBazqHOw1FB4NCCwEBAQEBIhKLKYJRgkGCSIJ?=
 =?us-ascii?q?fBYkMhzWKdzqIMYFeg2wDhBaRBYo1hxkUHoEVNoEfHxMIFxM8FwWDb4JVVwGJe?=
 =?us-ascii?q?gEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0B4AQD0AJ1Yh/MNVIBdGwEBAQMBAQEJAQEBFwEBBAEBCgE?=
 =?us-ascii?q?BgkSBQ1UDMQeDUoE2iUSRGYgMh3mHPyWFfIJnB0MUAQEBAQEBAQEBAQESAQEBC?=
 =?us-ascii?q?gsJCh0vgjMbAYIaAQEEASMELiQFCwEIAgsDCioCAiEBEgEFARwGDgUJiVMDDQg?=
 =?us-ascii?q?FCZI8kQ0/jAKBazqHOw1FB4NCCwEBAQEBIhKLKYJRgkGCSIJfBYkMhzWKdzqIM?=
 =?us-ascii?q?YFeg2wDhBaRBYo1hxkUHoEVNoEfHxMIFxM8FwWDb4JVVwGJegEBAQ?=
X-IronPort-AV: E=Sophos;i="5.35,138,1484002800"; 
   d="scan'208,217";a="212706954"
Received: from limerock03.mail.cornell.edu ([128.84.13.243])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 10 Feb 2017 00:54:23 +0100
X-CornellRouted: This message has been Routed already.
Received: from exchange.cornell.edu (sf-e2013-02.exchange.cornell.edu [10.22.40.49])
	by limerock03.mail.cornell.edu (8.14.4/8.14.4_cu) with ESMTP id v19NsMRK029832
	for <caml-list@inria.fr>; Thu, 9 Feb 2017 18:54:22 -0500
Received: from sf-e2013-10.exchange.cornell.edu (10.22.40.57) by
 sf-e2013-02.exchange.cornell.edu (10.22.40.49) with Microsoft SMTP Server
 (TLS) id 15.0.1210.3; Thu, 9 Feb 2017 18:54:11 -0500
Received: from mail-wj0-f199.google.com (209.85.210.199) by
 exchange.cornell.edu (10.22.40.57) with Microsoft SMTP Server (TLS) id
 15.0.1210.3 via Frontend Transport; Thu, 9 Feb 2017 18:54:11 -0500
Received: by mail-wj0-f199.google.com with SMTP id yr2so4176309wjc.4
        for <caml-list@inria.fr>; Thu, 09 Feb 2017 15:54:22 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:sender:in-reply-to:references:from
         :date:message-id:subject:to:cc;
        bh=/pZuZ2X6Gh7C/6HZ9DoljYPuKubjjZuD5Yytra82YdU=;
        b=ce9mFYnxoa8z+rHA2n+iTQcBaFicWiDI5wJRfp/e/hOUzI32fdQ6V3bOA1iOzg/UGC
         4nCqb9zLjXATeYNW/2PAGzP6m99ZjkQpkX+4a9rcYmD+raEfuIz5JCeDLV8d0mEBipxQ
         3LRnCybOrutuCzv+X2hb0EmjbVtquottMqMS4j9EgwLIHQNQtMXpYARqZoGmPc/WE7bq
         racJsjNk160jhzt1GpmTmkCgaXBCZ9wViByLhGJdjWr6MFH4f73QkgXfGDAwln5RVRtK
         gJqmAPMIbC6fzvpQi9TojJ0jrnzDeb0x1zIRoJ+brirUSq+Xad9elSHRbnWGcdcxLYoI
         G69g==
X-Gm-Message-State: AMke39n58fifh2BJMu0kV+C2XohuwUxm45Kd9q0WFIIinUObFfeJHnb1IVdJOJrOjHfLxwMsonMNFkBO0KQzY8lrGEIoeYW27ECYHSvLb54nYvlTBsNE4jSEaLztanG7oW6/QZEW0OcW4+PYWcP4tf/viA8AK7+5rg==
X-Received: by 10.28.227.84 with SMTP id a81mr4994224wmh.121.1486684461045;
        Thu, 09 Feb 2017 15:54:21 -0800 (PST)
X-Received: by 10.28.227.84 with SMTP id a81mr4994212wmh.121.1486684460721;
 Thu, 09 Feb 2017 15:54:20 -0800 (PST)
MIME-Version: 1.0
Sender: <sjs429@cornell.edu>
Received: by 10.28.87.132 with HTTP; Thu, 9 Feb 2017 15:54:20 -0800 (PST)
In-Reply-To: <1486683451.12698.83.camel@gerd-stolpmann.de>
References: <CAGh2ivAw17fXw_iR4bBPzsK4jXOmrmcYka0HJE77rS+vkcBwVg@mail.gmail.com>
 <CAAxsn=FzJODdst5Quy2Bu2ZYtpdQ5OW3wvSWeCi2UWr18Gmm7A@mail.gmail.com>
 <CAGh2ivAiSQxcwTsue3goHoYacHhb=g-B5hpZa2voGCC_w9+08w@mail.gmail.com>
 <1486683451.12698.83.camel@gerd-stolpmann.de>
From: Steffen Smolka <smolka@cs.cornell.edu>
Date: Thu, 9 Feb 2017 18:54:20 -0500
X-Google-Sender-Auth: wAP_Scz-psL8sP8s4PkE3qxeSVM
Message-ID: <CAGh2ivCGkH8adD-Bw5FD4bEJWC23iW6srFJA9GSzbuUo-hUn-A@mail.gmail.com>
To: Gerd Stolpmann <info@gerd-stolpmann.de>
CC: Jeremy Yallop <yallop@gmail.com>, Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="001a114b0c822cc733054821b370"
X-ORG-HybridRouting: 8a094d06fef3beb72b2f550dfbe843f7
X-ORG-RouteOnPrem: False
X-ORG-MsgSource: cmail
X-PMX-CORNELL-AUTH-RESULTS: dkim-out=none;
Subject: Re: [Caml-list] namespace inside object?

--001a114b0c822cc733054821b370
Content-Type: text/plain; charset="UTF-8"

Yeah, I have seen that there is support for first class modules, that's
pretty cool stuff!
I do need dynamic dispatch, though.

-- Steffen

On Thu, Feb 9, 2017 at 6:37 PM, Gerd Stolpmann <info@gerd-stolpmann.de>
wrote:

> Am Donnerstag, den 09.02.2017, 18:19 -0500 schrieb Steffen Smolka:
>
> Thanks for the detailed answer, Jeremy!
>
> If you're keen to stick with objects
>
>
> Yes, I rely on inheritance and dynamic dispatch for what I have in mind.
> (This is actually the first time I'm touching the dark object oriented side
> of OCaml :) )
>
> To give some more context, I am refactoring some code that uses modules
> and no objects. The reason I want to move to objects is that I want to
> derive a slightly enhanced module from some base implementation.
> Inheritance + dynamic dispatch allow me to do so with very little trouble:
> I can simply overwrite a few methods from the base implementation.
>
> I suppose I could achieve the same by turning the base module into a
> functor, and abstracting over the functions that my enhanced implementation
> needs to replace. I think it won't be quite as natural, but I'll give that
> a try.
>
>
> First-class modules could also be an option:  Let's assume both the base
> module and the modified one can use the same module type:
>
> module T = sig ... end
>
> Now, define the base module like
>
> module Base : T =
>    ...
> end
>
> then, define the modified one:
>
> module Mod : T =
>    include Base
>    ... now override what you need to change but note that there's no
> dynamic dispatch ...
> end
>
> Of course, you could also use functors for making these modules.
>
> Now turn this into first-class modules and pass them around:
>
> let base = (module Base : T)
> let mod = (module Mod : T)
>
> The syntax for unpacking the module is quite cumbersome:
>
> let module M = (val base : T) in
> M.function ...
>
> Unfortunately, there's nothing simple like base.function.
>
> Compared with objects you get:
>
>
>    - You can also put types and (to some degree) modules into these "code
>    containers"
>    - However, there's no dynamic dispatch except you arrange explicitly
>    for that, e.g. with references to functions
>    - Generally, a heavier syntax, but it might be ok
>
>
> Gerd
>
>
>
> Or you could select the encoding using a variant type:
>
>
> Good idea, and I'm happy with the syntax for the caller. But I'm more
> concerned with the organization of the code; this would mix the Latin1 and
> Utf8 implementations. I would rather keep them separate.
>
> -- Steffen
>
>
> On Thu, Feb 9, 2017 at 5:55 PM, Jeremy Yallop <yallop@gmail.com> wrote:
>
> Dear Steffen,
>
> On 9 February 2017 at 20:36, Steffen Smolka <smolka@cs.cornell.edu> wrote:
> > Is it possible to create namespaces inside an object? Concretely, I would
> > like to write
> >
> > class buffer = object(self)
> >   ...
> >   method get = ...
> >
> >   module Latin1 = struct
> >     method get = ...
> >   end
> >
> >   module Utf8 = struct
> >     method get = ...
> >   end
> > end
> >
> > so that given an object b : buffer, I can call methods
> > b#get
> > b#Latin1.get
> > b#Utf8.get
>
> It's possible to achieve something like this using methods that return
> objects.  If your nested objects don't need to access the internal
> state of the parent then you might write it like this:
>
>   class buffer =
>     let latin1 = object
>       method get = ...
>    end
>    and utf8 = object
>       method get = ...
>    end in
>    object(self)
>      ...
>      method get = ...
>      method latin1 = latin1
>      method utf8 = utf8
>    end
>
> With this approach you can write
>
>    b#get
>    b#latin1#get
>    b#utf8#get
>
> which, apart from some minor orthographic differences, looks like what
> you were aiming for.
>
> Your intuition that this isn't really idiomatic OCaml is right,
> though.  In OCaml, unlike some other languages with classes and
> objects, classes are not usually used as namespaces; method names are
> globally (or, rather, "ambiently") scoped, and there's no real support
> for the kind of nesting that you're interested in.  Instead, people
> typically build nested namespaces using modules:
>
>   module Buffer =
>   struct
>      let get = ...
>
>      module Latin1 = struct
>         let get = ...
>      end
>
>      module Utf8 = struct
>         let get = ...
>      end
>   end
>
> With the module approach you write the 'receiver' after the 'method'
> rather than before, but that doesn't seem like a huge hardship.  (10%
> of the world manages to get by with VSO languages.)
>
>   Buffer.get b ...
>   Buffer.Latin1.get b ...
>   Buffer.Utf8.get b ...
>
> If you're keen to stick with objects there are slightly more idiomatic
> ways to make it work.  You could, of course, replace the '.' with a
> '_' and define methods 'latin1_get', 'utf8_get' in place of
> 'Latin1.get', 'Utf8.get'.  Or you could select the encoding using a
> variant type:
>
>   type enc = Latin1 | Utf8
>
>   class buffer =
>   object (self)
>      method get = function
>          | Latin1 -> ...
>          | Utf8 -> ...
>   end
>
> Of course, the order of the words in an invocation changes again, but
> there's no real increase in complexity for the caller:
>
>   b#get Latin1
>   b#get Utf8
>
> This last approach can be taken quite far -- for example, you could
> enrich the type 'enc' so that the return type of 'get' varies
> according to the encoding.
>
> Kind regards,
>
> Jeremy
>
>
> --
> ------------------------------------------------------------
> Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
> My OCaml site:          http://www.camlcity.org
> Contact details:        http://www.camlcity.org/contact.html
> Company homepage:       http://www.gerd-stolpmann.de
> ------------------------------------------------------------
>
>
>

--001a114b0c822cc733054821b370
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Yeah, I have seen that there is support for first class mo=
dules, that&#39;s pretty cool stuff!<div>I do need dynamic dispatch, though=
.</div><div><br></div><div>-- Steffen</div></div><div class=3D"gmail_extra"=
><br><div class=3D"gmail_quote">On Thu, Feb 9, 2017 at 6:37 PM, Gerd Stolpm=
ann <span dir=3D"ltr">&lt;<a href=3D"mailto:info@gerd-stolpmann.de" target=
=3D"_blank">info@gerd-stolpmann.de</a>&gt;</span> wrote:<br><blockquote cla=
ss=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=
dding-left:1ex"><div><span class=3D""><div>Am Donnerstag, den 09.02.2017, 1=
8:19 -0500 schrieb Steffen Smolka:</div><blockquote type=3D"cite"><div dir=
=3D"ltr">Thanks for the detailed answer, Jeremy!<div><br><blockquote type=
=3D"cite"><span style=3D"font-size:12.8px">If you&#39;re keen to stick with=
 objects</span><br></blockquote><div><br></div></div><div>Yes, I rely on in=
heritance and dynamic dispatch for what I have in mind. (This is actually t=
he first time I&#39;m touching the dark object oriented side of OCaml :) )=
=C2=A0</div><div><br></div><div>To give some more context, I am refactoring=
 some code that uses modules and no objects. The reason I want to move to o=
bjects is that I want to derive a slightly enhanced module from some base i=
mplementation. Inheritance + dynamic dispatch allow me to do so with very l=
ittle trouble: I can simply overwrite a few methods from the base implement=
ation.</div><div><br></div><div>I suppose I could achieve the same by turni=
ng the base module into a functor, and abstracting over the functions that =
my enhanced implementation needs to replace. I think it won&#39;t be quite =
as natural, but I&#39;ll give that a try.</div></div></blockquote><div><br>=
</div></span><div>First-class modules could also be an option: =C2=A0Let&#3=
9;s assume both the base module and the modified one can use the same modul=
e type:</div><div><br></div><div>module T =3D sig ... end</div><div><br></d=
iv><div>Now, define the base module like</div><div><br></div><div>module Ba=
se : T =3D</div><div>=C2=A0 =C2=A0...</div><div>end</div><div><br></div><di=
v>then, define the modified one:</div><div><br></div><div>module Mod : T =
=3D</div><div>=C2=A0 =C2=A0include Base</div><div>=C2=A0 =C2=A0... now over=
ride what you need to change but note that there&#39;s no dynamic dispatch =
...</div><div>end</div><div><br></div><div>Of course, you could also use fu=
nctors for making these modules.</div><div><br></div><div>Now turn this int=
o first-class modules and pass them around:</div><div><br></div><div>let ba=
se =3D (module Base : T)</div><div>let mod =3D (module Mod : T)</div><div><=
br></div><div>The syntax for unpacking the module is quite cumbersome:</div=
><div><br></div><div>let module M =3D (val base : T) in</div><div>M.functio=
n ...</div><div><br></div><div>Unfortunately, there&#39;s nothing simple li=
ke base.function.</div><div><br></div><div>Compared with objects you get:</=
div><div><br></div><ul><li>You can also put types and (to some degree) modu=
les into these &quot;code containers&quot;</li><li>However, there&#39;s no =
dynamic dispatch except you arrange explicitly for that, e.g. with referenc=
es to functions</li><li>Generally, a heavier syntax, but it might be ok</li=
></ul><div><br></div><div>Gerd</div><div><div class=3D"h5"><div><br></div><=
div><br></div><blockquote type=3D"cite"><div dir=3D"ltr"><div><br></div><bl=
ockquote type=3D"cite"><span style=3D"font-size:12.8px">Or you could select=
 the encoding using a=C2=A0</span><span style=3D"font-size:12.8px">variant =
type:</span><br></blockquote><div><br></div><div>Good idea, and I&#39;m hap=
py with the syntax for the caller. But I&#39;m more concerned with the orga=
nization of the code; this would mix the Latin1 and Utf8 implementations. I=
 would rather keep them separate.</div><div><br></div><div>-- Steffen</div>=
<div>=C2=A0</div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_q=
uote">On Thu, Feb 9, 2017 at 5:55 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<=
a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&g=
t;</span> wrote:<br><blockquote type=3D"cite">Dear Steffen,<br>
<span><br>
On 9 February 2017 at 20:36, Steffen Smolka &lt;<a href=3D"mailto:smolka@cs=
.cornell.edu" target=3D"_blank">smolka@cs.cornell.edu</a>&gt; wrote:<br>
&gt; Is it possible to create namespaces inside an object? Concretely, I wo=
uld<br>
&gt; like to write<br>
&gt;<br>
&gt; class buffer =3D object(self)<br>
&gt;=C2=A0 =C2=A0...<br>
&gt;=C2=A0 =C2=A0method get =3D ...<br>
&gt;<br>
&gt;=C2=A0 =C2=A0module Latin1 =3D struct<br>
&gt;=C2=A0 =C2=A0 =C2=A0method get =3D ...<br>
&gt;=C2=A0 =C2=A0end<br>
&gt;<br>
&gt;=C2=A0 =C2=A0module Utf8 =3D struct<br>
&gt;=C2=A0 =C2=A0 =C2=A0method get =3D ...<br>
&gt;=C2=A0 =C2=A0end<br>
&gt; end<br>
&gt;<br>
&gt; so that given an object b : buffer, I can call methods<br>
&gt; b#get<br>
&gt; b#Latin1.get<br>
&gt; b#Utf8.get<br>
<br>
</span>It&#39;s possible to achieve something like this using methods that =
return<br>
objects.=C2=A0 If your nested objects don&#39;t need to access the internal=
<br>
state of the parent then you might write it like this:<br>
<br>
=C2=A0 class buffer =3D<br>
=C2=A0 =C2=A0 let latin1 =3D object<br>
<span>=C2=A0 =C2=A0 =C2=A0 method get =3D ...<br>
=C2=A0 =C2=A0end<br>
</span>=C2=A0 =C2=A0and utf8 =3D object<br>
=C2=A0 =C2=A0 =C2=A0 method get =3D ...<br>
=C2=A0 =C2=A0end in<br>
<span>=C2=A0 =C2=A0object(self)<br>
=C2=A0 =C2=A0 =C2=A0...<br>
=C2=A0 =C2=A0 =C2=A0method get =3D ...<br>
</span>=C2=A0 =C2=A0 =C2=A0method latin1 =3D latin1<br>
=C2=A0 =C2=A0 =C2=A0method utf8 =3D utf8<br>
=C2=A0 =C2=A0end<br>
<br>
With this approach you can write<br>
<br>
=C2=A0 =C2=A0b#get<br>
=C2=A0 =C2=A0b#latin1#get<br>
=C2=A0 =C2=A0b#utf8#get<br>
<br>
which, apart from some minor orthographic differences, looks like what<br>
you were aiming for.<br>
<br>
Your intuition that this isn&#39;t really idiomatic OCaml is right,<br>
though.=C2=A0 In OCaml, unlike some other languages with classes and<br>
objects, classes are not usually used as namespaces; method names are<br>
globally (or, rather, &quot;ambiently&quot;) scoped, and there&#39;s no rea=
l support<br>
for the kind of nesting that you&#39;re interested in.=C2=A0 Instead, peopl=
e<br>
typically build nested namespaces using modules:<br>
<br>
=C2=A0 module Buffer =3D<br>
=C2=A0 struct<br>
=C2=A0 =C2=A0 =C2=A0let get =3D ...<br>
<br>
=C2=A0 =C2=A0 =C2=A0module Latin1 =3D struct<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 let get =3D ...<br>
<span>=C2=A0 =C2=A0 =C2=A0end<br>
<br>
=C2=A0 =C2=A0 =C2=A0module Utf8 =3D struct<br>
</span>=C2=A0 =C2=A0 =C2=A0 =C2=A0 let get =3D ...<br>
=C2=A0 =C2=A0 =C2=A0end<br>
=C2=A0 end<br>
<br>
With the module approach you write the &#39;receiver&#39; after the &#39;me=
thod&#39;<br>
rather than before, but that doesn&#39;t seem like a huge hardship.=C2=A0 (=
10%<br>
of the world manages to get by with VSO languages.)<br>
<br>
=C2=A0 Buffer.get b ...<br>
=C2=A0 Buffer.Latin1.get b ...<br>
=C2=A0 Buffer.Utf8.get b ...<br>
<br>
If you&#39;re keen to stick with objects there are slightly more idiomatic<=
br>
ways to make it work.=C2=A0 You could, of course, replace the &#39;.&#39; w=
ith a<br>
&#39;_&#39; and define methods &#39;latin1_get&#39;, &#39;utf8_get&#39; in =
place of<br>
&#39;Latin1.get&#39;, &#39;Utf8.get&#39;.=C2=A0 Or you could select the enc=
oding using a<br>
variant type:<br>
<br>
=C2=A0 type enc =3D Latin1 | Utf8<br>
<br>
=C2=A0 class buffer =3D<br>
=C2=A0 object (self)<br>
=C2=A0 =C2=A0 =C2=A0method get =3D function<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0| Latin1 -&gt; ...<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0| Utf8 -&gt; ...<br>
=C2=A0 end<br>
<br>
Of course, the order of the words in an invocation changes again, but<br>
there&#39;s no real increase in complexity for the caller:<br>
<br>
=C2=A0 b#get Latin1<br>
=C2=A0 b#get Utf8<br>
<br>
This last approach can be taken quite far -- for example, you could<br>
enrich the type &#39;enc&#39; so that the return type of &#39;get&#39; vari=
es<br>
according to the encoding.<br>
<br>
Kind regards,<br>
<br>
Jeremy<br>
<br></blockquote></div><br></div>
</blockquote></div></div><span class=3D"HOEnZb"><font color=3D"#888888"><di=
v><span><pre>--=20
------------------------------<wbr>------------------------------
Gerd Stolpmann, Darmstadt, Germany    <a href=3D"mailto:gerd@gerd-stolpmann=
.de" target=3D"_blank">gerd@gerd-stolpmann.de</a>
My OCaml site:          <a href=3D"http://www.camlcity.org" target=3D"_blan=
k">http://www.camlcity.org</a>
Contact details:        <a href=3D"http://www.camlcity.org/contact.html" ta=
rget=3D"_blank">http://www.camlcity.org/<wbr>contact.html</a>
Company homepage:       <a href=3D"http://www.gerd-stolpmann.de" target=3D"=
_blank">http://www.gerd-stolpmann.de</a>
------------------------------<wbr>------------------------------

</pre></span></div></font></span></div></blockquote></div><br></div>

--001a114b0c822cc733054821b370--
