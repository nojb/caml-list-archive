Return-Path: <leo@lpw25.net>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C4557800BE
	for <caml-list@sympa.inria.fr>; Fri, 10 Feb 2017 10:38:30 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=leo@lpw25.net; spf=None smtp.mailfrom=leo@lpw25.net; spf=None smtp.helo=postmaster@out4-smtp.messagingengine.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  leo@lpw25.net) identity=pra; client-ip=66.111.4.28;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="leo@lpw25.net"; x-sender="leo@lpw25.net";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  leo@lpw25.net) identity=mailfrom; client-ip=66.111.4.28;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="leo@lpw25.net"; x-sender="leo@lpw25.net";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@out4-smtp.messagingengine.com) identity=helo;
  client-ip=66.111.4.28;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="leo@lpw25.net";
  x-sender="postmaster@out4-smtp.messagingengine.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3ASGxMDhxyanfyIbfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?1O4RIJqq85mqBkHD//Il1AaPBtSHraIbwLKP+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZPebgFHiTanYr5/Lhq6oRnMusILnYZsN6E9xwfTrHBVYe?=
 =?us-ascii?q?pW32RoJVySnxb4+Mi9+YNo/jpTtfw86cNOSL32cKskQ7NWCjQmKH0169bwtRbf?=
 =?us-ascii?q?VwuP52ATXXsQnxFVHgXK9hD6XpP2sivnqupw3TSRMMPqQbwoXzmp8qFmQwLqhi?=
 =?us-ascii?q?gaLT406GLZhMxugq1UrxyuuxtxzIzJboGbOvRzZbnScNEASGdbRMtdSy5MD4Wh?=
 =?us-ascii?q?ZIUPFeoBOuNYopH7qVQQqhu1GAmjBOPuyj9UmHD9wKo30+A/HgHBxwEgG8oOsX?=
 =?us-ascii?q?rKoNj1LqsSV/66zLXRwDjFcvhY1zD96I3SfRAgp/GBRb1wftTLyUYyDg/FlUmQ?=
 =?us-ascii?q?qYvhPzON0+QCqW6b7+x6We2ylWErsx1+rSKqxscolobJh54Vy1De+SV+2oY1Kt?=
 =?us-ascii?q?u1Q1N4b968CJZdtiCXO5FrTs8/Xm1koik3xqcYtZO4eiUB1Y4pyATFa/OddoiF?=
 =?us-ascii?q?+hLjW/iVITd/nH9lf6+/hwq9/ES50e38U9W00E5QoipAjNbMrWsN2Abc6siGTP?=
 =?us-ascii?q?t98Vmu2TCA1wDS7OFLP1o4mrbcK54k2rIwl5wTvlrfHiLumUj7jbWaelg59uS1?=
 =?us-ascii?q?8ejqba/qqoGfOoNsjwHxKKUumsixAeQiNQgOWnCW+eCi273k5kD5RK1Kj/Monq?=
 =?us-ascii?q?TZqpzaI9oUprKhDw9Pzokj8wq/Dyuh0NkAgXYINldFeBaeg4jtOlHOO+z4AOyk?=
 =?us-ascii?q?g1WslTdr3+rJMqfgApXLNHjDka3ucaxz605Gm0IPyoVU7pdQT7UAO+7bW0nrtd?=
 =?us-ascii?q?WeAAVqHRazxrPDBdI16YMfRW/HVquUN4vWqUDSu6QpLvXaN9xdgyr0N/Vwv62m?=
 =?us-ascii?q?tnQ+g1JIJaQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BUAQBkiZ1YhxwEb0JdHAEBBAEBCgEBF?=
 =?us-ascii?q?wEBBAEBCgEBgkSBRDFYg1mKepB7H4gMhHODBoc+JoV8AoJxQxQBAQEBAQEBAQE?=
 =?us-ascii?q?BARIBAQEKCwkKHS9CDoFjGYIdAQEBAwEjBBkVJQQLCxgVCwoCAiELKxkJiVcDD?=
 =?us-ascii?q?QgOr1GBazqDD4QtDYEbgnMBAQEBBgEBAQEBAQEZCIhZgmKCUYIDDDOCDTougjG?=
 =?us-ascii?q?JEYc1inc5AYZvgUKBXoNsA4ZkjjeKNYhgNoEfMigKPIQLOREMgX8iNQGBYIg9A?=
 =?us-ascii?q?QEB?=
X-IPAS-Result: =?us-ascii?q?A0BUAQBkiZ1YhxwEb0JdHAEBBAEBCgEBFwEBBAEBCgEBgkS?=
 =?us-ascii?q?BRDFYg1mKepB7H4gMhHODBoc+JoV8AoJxQxQBAQEBAQEBAQEBARIBAQEKCwkKH?=
 =?us-ascii?q?S9CDoFjGYIdAQEBAwEjBBkVJQQLCxgVCwoCAiELKxkJiVcDDQgOr1GBazqDD4Q?=
 =?us-ascii?q?tDYEbgnMBAQEBBgEBAQEBAQEZCIhZgmKCUYIDDDOCDTougjGJEYc1inc5AYZvg?=
 =?us-ascii?q?UKBXoNsA4ZkjjeKNYhgNoEfMigKPIQLOREMgX8iNQGBYIg9AQEB?=
X-IronPort-AV: E=Sophos;i="5.35,140,1484002800"; 
   d="scan'208,217";a="212748562"
Received: from out4-smtp.messagingengine.com ([66.111.4.28])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Feb 2017 10:38:29 +0100
Received: from compute5.internal (compute5.nyi.internal [10.202.2.45])
	by mailout.nyi.internal (Postfix) with ESMTP id E0A02207CD
	for <caml-list@inria.fr>; Fri, 10 Feb 2017 04:38:27 -0500 (EST)
Received: from web1 ([10.202.2.211])
  by compute5.internal (MEProxy); Fri, 10 Feb 2017 04:38:27 -0500
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=lpw25.net; h=
	content-transfer-encoding:content-type:date:from:in-reply-to
	:message-id:mime-version:references:subject:to:x-me-sender
	:x-me-sender:x-sasl-enc; s=mesmtp; bh=F49JHnFHklvMzaFsTKaVK7GLKp
	M=; b=ocUL8JieItMcBrAyi7fkc1v5uSrxCXHNuXYeVNsz92zKNMOnM+56JN8svf
	PVjbB5p4Sm5Rr1+PR3ND/V7TGnYWXmIbk4A6iy4H8Svr8Io6RiPyXJKswlrXkLL1
	kthlZfu024yZPiGmdRLf8ltoU5aAgM1O8bSASZPw5EZzah5d0=
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=
	messagingengine.com; h=content-transfer-encoding:content-type
	:date:from:in-reply-to:message-id:mime-version:references
	:subject:to:x-me-sender:x-me-sender:x-sasl-enc; s=smtpout; bh=F4
	9JHnFHklvMzaFsTKaVK7GLKpM=; b=IVj8Ac0IRhTrALjua4fT7RiOP3wcnPOg/h
	nvLgGKYuibjDd1BvvTjwFP7U+hEP/DEgd+A9m6iwXCr4gzw6Tb2wT00oLWwLAU7B
	sjM2kP8nzi03+FZnggrvLRQJ6cYUgJb0Jn39NrNsy2Th1hz9doJxfWDf3ivao/rs
	Wl2FDs+Wg=
X-ME-Sender: <xms:E4qdWM7ogY0d8sDOom_3_Z3ryYNAfQnxC7m2y_-g2bE6mpVotyIBAQ>
Received: by mailuser.nyi.internal (Postfix, from userid 99)
	id B10F3AA6C8; Fri, 10 Feb 2017 04:38:27 -0500 (EST)
Message-Id: <1486719507.2806603.876599584.3796D567@webmail.messagingengine.com>
From: Leo White <leo@lpw25.net>
To: caml-list@inria.fr
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Type: multipart/alternative; boundary="_----------=_148671950728066030"
X-Mailer: MessagingEngine.com Webmail Interface - ajax-4a450d19
In-Reply-To: <CAGh2ivB3SqUK9sqcHA3wzdtkzfiA-=7pa9Zpr-XkiqN-64kq+A@mail.gmail.com>
References: <CAGh2ivAw17fXw_iR4bBPzsK4jXOmrmcYka0HJE77rS+vkcBwVg@mail.gmail.com>
 <CAAxsn=FzJODdst5Quy2Bu2ZYtpdQ5OW3wvSWeCi2UWr18Gmm7A@mail.gmail.com>
 <CAGh2ivAiSQxcwTsue3goHoYacHhb=g-B5hpZa2voGCC_w9+08w@mail.gmail.com>
 <1486683451.12698.83.camel@gerd-stolpmann.de>
 <CAGh2ivCGkH8adD-Bw5FD4bEJWC23iW6srFJA9GSzbuUo-hUn-A@mail.gmail.com>
 <CACLX4jSL_L3r660sOS0T1=PrgRH17tioq0kH8ZCVw8cTRNxwHQ@mail.gmail.com>
 <CAGh2ivB3SqUK9sqcHA3wzdtkzfiA-=7pa9Zpr-XkiqN-64kq+A@mail.gmail.com>
Date: Fri, 10 Feb 2017 04:38:27 -0500
Subject: Re: [Caml-list] namespace inside object?

This is a multi-part message in MIME format.

--_----------=_148671950728066030
Content-Transfer-Encoding: 7bit
Content-Type: text/plain; charset="utf-8"

I think it would be more correct to say that you want open recursion.
Classes are the easiest way to get that in OCaml, and they indeed use
dynamic dispatch and inheritance, but there are other mechanisms that
provide open recursion. For example, most proposals for "mixin modules"
support open recursion but I wouldn't say they use dynamic dispatch.


Regards,



Leo



On Thu, 9 Feb 2017, at 10:16 PM, Steffen Smolka wrote:

> Right....but you have to explicitly make that choice when you
> implement `f`. With objects on the other hand, somebody may write a
> base implementation c:
> 

> class c = object(this)

>   method foo = ... this#bar ...

>   method bar = ... this#foo ...  (* original definition *)

> end

> 

> Later on, somebody else may refine this implementation by
> overwriting c#bar:
> 

> class c2 = object(this)

>   inherit c

>   method bar = ... (* new definition *)

> end

> 

> Now c2#foo will invoke the new definition of bar, even though the
> author of `c` may have never anticipated this (and did not have to
> account for this possibility when he defined foo).
> 

> So, I would say "dynamic dispatch" plus inheritance give you the
> ability to extend modules in ways that weren't necessarily
> anticipated by the original author of the module. And yet all the
> code written by the original author will work with your extended
> version of the module.
> 

> -- Steffen

> 

> 

> 

> On Thu, Feb 9, 2017 at 9:01 PM, Yaron Minsky
> <yminsky@janestreet.com> wrote:
>> I've always been a bit confused about what the term "dynamic
>> dispatch"
>>  means, but don't first class modules provide what you want?
>>  After all,
>>  when you write:

>> 

>>  let f (module M : S) x =

>>      M.g x

>> 

>>  the specific function M.g is determined dynamically, depending on

>>  which first class module is passed into f.

>> 
>>  y

>> 

>> On Thu, Feb 9, 2017 at 6:54 PM, Steffen Smolka
>> <smolka@cs.cornell.edu> wrote:
>>  > Yeah, I have seen that there is support for first class modules,
>>  > that's
>>  > pretty cool stuff!

>>  > I do need dynamic dispatch, though.

>>  >

>>  > -- Steffen

>>  >

>>  > On Thu, Feb 9, 2017 at 6:37 PM, Gerd Stolpmann <info@gerd-
>>  > stolpmann.de>
>>  > wrote:

>>  >>

>>  >> Am Donnerstag, den 09.02.2017, 18:19 -0500 schrieb Steffen
>>  >> Smolka:
>>  >>

>>  >> Thanks for the detailed answer, Jeremy!

>>  >>

>>  >> If you're keen to stick with objects

>>  >>

>>  >>

>>  >> Yes, I rely on inheritance and dynamic dispatch for what I have
>>  >> in mind.
>>  >> (This is actually the first time I'm touching the dark object
>>  >> oriented side
>>  >> of OCaml :) )

>>  >>

>>  >> To give some more context, I am refactoring some code that uses
>>  >> modules
>>  >> and no objects. The reason I want to move to objects is that I
>>  >> want to
>>  >> derive a slightly enhanced module from some base implementation.
>>  >> Inheritance
>>  >> + dynamic dispatch allow me to do so with very little trouble: I
>>  >>   can simply
>>  >> overwrite a few methods from the base implementation.

>>  >>

>>  >> I suppose I could achieve the same by turning the base module
>>  >> into a
>>  >> functor, and abstracting over the functions that my enhanced
>>  >> implementation
>>  >> needs to replace. I think it won't be quite as natural, but I'll
>>  >> give that a
>>  >> try.

>>  >>

>>  >>

>>  >> First-class modules could also be an option:  Let's assume both
>>  >> the base
>>  >> module and the modified one can use the same module type:

>>  >>

>>  >> module T = sig ... end

>>  >>

>>  >> Now, define the base module like

>>  >>

>>  >> module Base : T =

>>  >>    ...

>>  >> end

>>  >>

>>  >> then, define the modified one:

>>  >>

>>  >> module Mod : T =

>>  >>    include Base

>>  >>    ... now override what you need to change but note that there's
>>  >>    no
>>  >> dynamic dispatch ...

>>  >> end

>>  >>

>>  >> Of course, you could also use functors for making these modules.
>>  >>

>>  >> Now turn this into first-class modules and pass them around:

>>  >>

>>  >> let base = (module Base : T)

>>  >> let mod = (module Mod : T)

>>  >>

>>  >> The syntax for unpacking the module is quite cumbersome:

>>  >>

>>  >> let module M = (val base : T) in

>>  >> M.function ...

>>  >>

>>  >> Unfortunately, there's nothing simple like base.function.

>>  >>

>>  >> Compared with objects you get:

>>  >>

>>  >> You can also put types and (to some degree) modules into these
>>  >> "code
>>  >> containers"

>>  >> However, there's no dynamic dispatch except you arrange
>>  >> explicitly for
>>  >> that, e.g. with references to functions

>>  >> Generally, a heavier syntax, but it might be ok

>>  >>

>>  >>

>>  >> Gerd

>>  >>

>>  >>

>>  >>

>>  >> Or you could select the encoding using a variant type:

>>  >>

>>  >>

>>  >> Good idea, and I'm happy with the syntax for the caller. But I'm
>>  >> more
>>  >> concerned with the organization of the code; this would mix the
>>  >> Latin1 and
>>  >> Utf8 implementations. I would rather keep them separate.

>>  >>

>>  >> -- Steffen

>>  >>

>>  >>

>>  >> On Thu, Feb 9, 2017 at 5:55 PM, Jeremy Yallop <yallop@gmail.com>
>>  >> wrote:
>>  >>

>>  >> Dear Steffen,

>>  >>

>>  >> On 9 February 2017 at 20:36, Steffen Smolka
>>  >> <smolka@cs.cornell.edu> wrote:
>>  >> > Is it possible to create namespaces inside an object?
>>  >> > Concretely, I
>>  >> > would

>>  >> > like to write

>>  >> >

>>  >> > class buffer = object(self)

>>  >> >   ...

>>  >> >   method get = ...

>>  >> >

>>  >> >   module Latin1 = struct

>>  >> >     method get = ...

>>  >> >   end

>>  >> >

>>  >> >   module Utf8 = struct

>>  >> >     method get = ...

>>  >> >   end

>>  >> > end

>>  >> >

>>  >> > so that given an object b : buffer, I can call methods

>>  >> > b#get

>>  >> > b#Latin1.get

>>  >> > b#Utf8.get

>>  >>

>>  >> It's possible to achieve something like this using methods that
>>  >> return
>>  >> objects.  If your nested objects don't need to access the
>>  >> internal
>>  >> state of the parent then you might write it like this:

>>  >>

>>  >>   class buffer =

>>  >>     let latin1 = object

>>  >>       method get = ...

>>  >>    end

>>  >>    and utf8 = object

>>  >>       method get = ...

>>  >>    end in

>>  >>    object(self)

>>  >>      ...

>>  >>      method get = ...

>>  >>      method latin1 = latin1

>>  >>      method utf8 = utf8

>>  >>    end

>>  >>

>>  >> With this approach you can write

>>  >>

>>  >>    b#get

>>  >>    b#latin1#get

>>  >>    b#utf8#get

>>  >>

>>  >> which, apart from some minor orthographic differences, looks like
>>  >> what
>>  >> you were aiming for.

>>  >>

>>  >> Your intuition that this isn't really idiomatic OCaml is right,

>>  >> though.  In OCaml, unlike some other languages with classes and

>>  >> objects, classes are not usually used as namespaces; method names
>>  >> are
>>  >> globally (or, rather, "ambiently") scoped, and there's no real
>>  >> support
>>  >> for the kind of nesting that you're interested in.  Instead,
>>  >> people
>>  >> typically build nested namespaces using modules:

>>  >>

>>  >>   module Buffer =

>>  >>   struct

>>  >>      let get = ...

>>  >>

>>  >>      module Latin1 = struct

>>  >>         let get = ...

>>  >>      end

>>  >>

>>  >>      module Utf8 = struct

>>  >>         let get = ...

>>  >>      end

>>  >>   end

>>  >>

>>  >> With the module approach you write the 'receiver' after the
>>  >> 'method'
>>  >> rather than before, but that doesn't seem like a huge hardship.
>>  >> (10%
>>  >> of the world manages to get by with VSO languages.)

>>  >>

>>  >>   Buffer.get b ...

>>  >>   Buffer.Latin1.get b ...

>>  >>   Buffer.Utf8.get b ...

>>  >>

>>  >> If you're keen to stick with objects there are slightly more
>>  >> idiomatic
>>  >> ways to make it work.  You could, of course, replace the '.'
>>  >> with a
>>  >> '_' and define methods 'latin1_get', 'utf8_get' in place of

>>  >> 'Latin1.get', 'Utf8.get'.  Or you could select the encoding
>>  >> using a
>>  >> variant type:

>>  >>

>>  >>   type enc = Latin1 | Utf8

>>  >>

>>  >>   class buffer =

>>  >>   object (self)

>>  >>      method get = function

>>  >>          | Latin1 -> ...

>>  >>          | Utf8 -> ...

>>  >>   end

>>  >>

>>  >> Of course, the order of the words in an invocation changes again,
>>  >> but
>>  >> there's no real increase in complexity for the caller:

>>  >>

>>  >>   b#get Latin1

>>  >>   b#get Utf8

>>  >>

>>  >> This last approach can be taken quite far -- for example, you
>>  >> could
>>  >> enrich the type 'enc' so that the return type of 'get' varies

>>  >> according to the encoding.

>>  >>

>>  >> Kind regards,

>>  >>

>>  >> Jeremy

>>  >>

>>  >>

>>  >> --

>>  >> ------------------------------------------------------------

>>  >> Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de

>>  >> My OCaml site:          http://www.camlcity.org

>>  >> Contact details:        http://www.camlcity.org/contact.html

>>  >> Company homepage:       http://www.gerd-stolpmann.de

>>  >> ------------------------------------------------------------

>>  >>

>>  >



--_----------=_148671950728066030
Content-Transfer-Encoding: 7bit
Content-Type: text/html; charset="utf-8"

<!DOCTYPE html>
<html>
<head>
<title></title>
</head>
<body><div><span class="highlight" style="background-color:rgb(255, 255, 255)"><span class="colour" style="color:rgb(31, 31, 31)"><span class="font" style="font-family:&quot;Source Sans Pro&quot;, sans-serif"><span class="size" style="font-size:16px">I think it would be more correct to say that you want open recursion. Classes are the easiest way to get that in OCaml, and they indeed use dynamic dispatch and inheritance, but there are other mechanisms that provide open recursion. For example, most proposals for "mixin modules" support open recursion but I wouldn't say they use dynamic dispatch.</span></span></span></span><br></div>
<div><br></div>
<div><span class="highlight" style="background-color:rgb(255, 255, 255)"><span class="colour" style="color:rgb(31, 31, 31)"><span class="font" style="font-family:&quot;Source Sans Pro&quot;, sans-serif"><span class="size" style="font-size:16px">Regards,</span></span></span></span><br></div>
<div><br></div>
<div><span class="highlight" style="background-color:rgb(255, 255, 255)"><span class="colour" style="color:rgb(31, 31, 31)"><span class="font" style="font-family:&quot;Source Sans Pro&quot;, sans-serif"><span class="size" style="font-size:16px">Leo</span></span></span></span><br></div>
<div style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); height: auto; margin: 2px 0px; padding: 0px; color: rgb(31, 31, 31); font-family: &quot;Source Sans Pro&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: 0.1px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);" class="u-quote-topPostToggle"><br></div>
<div>On Thu, 9 Feb 2017, at 10:16 PM, Steffen Smolka wrote:<br></div>
<blockquote type="cite"><div dir="ltr"><div>Right....but you have to explicitly make that choice when you implement `f`. With objects on the other hand, somebody may write a base implementation c:<br></div>
<div><br></div>
<div>class c = object(this)<br></div>
<div>&nbsp; method foo = ... this#bar ...<br></div>
<div>&nbsp; method bar = ... this#foo ... &nbsp;(* original definition *)<br></div>
<div>end<br></div>
<div><br></div>
<div>Later on, somebody else may refine this implementation by overwriting c#bar:<br></div>
<div><br></div>
<div>class c2 = object(this)<br></div>
<div>&nbsp; inherit c<br></div>
<div>&nbsp; method bar = ... (* new definition *)<br></div>
<div>end<br></div>
<div><br></div>
<div>Now c2#foo will invoke the new definition of bar, even though the author of `c` may have never anticipated this (and did not have to account for this possibility when he defined foo).<br></div>
<div><br></div>
<div>So, I would say "dynamic dispatch" plus inheritance give you the ability to extend modules in ways that weren't necessarily anticipated by the original author of the module. And yet all the code written by the original author will work with your extended version of the module.<br></div>
<div><br></div>
<div>-- Steffen<br></div>
<div><br></div>
<div><br></div>
</div>
<div><div><br></div>
<div defang_data-gmailquote="yes"><div>On Thu, Feb 9, 2017 at 9:01 PM, Yaron Minsky <span dir="ltr">&lt;<a href="mailto:yminsky@janestreet.com">yminsky@janestreet.com</a>&gt;</span> wrote:<br></div>
<blockquote defang_data-gmailquote="yes" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0.8ex;border-left-width:1px;border-left-style:solid;border-left-color:rgb(204, 204, 204);padding-left:1ex;"><div>I've always been a bit confused about what the term "dynamic dispatch"<br></div>
<div> means, but don't first class modules provide what you want? After all,<br></div>
<div> when you write:<br></div>
<div> <br></div>
<div> let f (module M : S) x =<br></div>
<div> &nbsp; &nbsp; M.g x<br></div>
<div> <br></div>
<div> the specific function M.g is determined dynamically, depending on<br></div>
<div> which first class module is passed into f.<br></div>
<div> <span><span class="colour" style="color:rgb(136, 136, 136)"><br> y<br> </span></span></div>
<div><div><div><br></div>
<div>On Thu, Feb 9, 2017 at 6:54 PM, Steffen Smolka &lt;<a href="mailto:smolka@cs.cornell.edu">smolka@cs.cornell.edu</a>&gt; wrote:<br></div>
<div> &gt; Yeah, I have seen that there is support for first class modules, that's<br></div>
<div> &gt; pretty cool stuff!<br></div>
<div> &gt; I do need dynamic dispatch, though.<br></div>
<div> &gt;<br></div>
<div> &gt; -- Steffen<br></div>
<div> &gt;<br></div>
<div> &gt; On Thu, Feb 9, 2017 at 6:37 PM, Gerd Stolpmann &lt;<a href="mailto:info@gerd-stolpmann.de">info@gerd-stolpmann.de</a>&gt;<br></div>
<div> &gt; wrote:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Am Donnerstag, den 09.02.2017, 18:19 -0500 schrieb Steffen Smolka:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Thanks for the detailed answer, Jeremy!<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; If you're keen to stick with objects<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Yes, I rely on inheritance and dynamic dispatch for what I have in mind.<br></div>
<div> &gt;&gt; (This is actually the first time I'm touching the dark object oriented side<br></div>
<div> &gt;&gt; of OCaml :) )<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; To give some more context, I am refactoring some code that uses modules<br></div>
<div> &gt;&gt; and no objects. The reason I want to move to objects is that I want to<br></div>
<div> &gt;&gt; derive a slightly enhanced module from some base implementation. Inheritance<br></div>
<div> &gt;&gt; + dynamic dispatch allow me to do so with very little trouble: I can simply<br></div>
<div> &gt;&gt; overwrite a few methods from the base implementation.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; I suppose I could achieve the same by turning the base module into a<br></div>
<div> &gt;&gt; functor, and abstracting over the functions that my enhanced implementation<br></div>
<div> &gt;&gt; needs to replace. I think it won't be quite as natural, but I'll give that a<br></div>
<div> &gt;&gt; try.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; First-class modules could also be an option:&nbsp; Let's assume both the base<br></div>
<div> &gt;&gt; module and the modified one can use the same module type:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; module T = sig ... end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Now, define the base module like<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; module Base : T =<br></div>
<div> &gt;&gt;&nbsp; &nbsp; ...<br></div>
<div> &gt;&gt; end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; then, define the modified one:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; module Mod : T =<br></div>
<div> &gt;&gt;&nbsp; &nbsp; include Base<br></div>
<div> &gt;&gt;&nbsp; &nbsp; ... now override what you need to change but note that there's no<br></div>
<div> &gt;&gt; dynamic dispatch ...<br></div>
<div> &gt;&gt; end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Of course, you could also use functors for making these modules.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Now turn this into first-class modules and pass them around:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; let base = (module Base : T)<br></div>
<div> &gt;&gt; let mod = (module Mod : T)<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; The syntax for unpacking the module is quite cumbersome:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; let module M = (val base : T) in<br></div>
<div> &gt;&gt; M.function ...<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Unfortunately, there's nothing simple like base.function.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Compared with objects you get:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; You can also put types and (to some degree) modules into these "code<br></div>
<div> &gt;&gt; containers"<br></div>
<div> &gt;&gt; However, there's no dynamic dispatch except you arrange explicitly for<br></div>
<div> &gt;&gt; that, e.g. with references to functions<br></div>
<div> &gt;&gt; Generally, a heavier syntax, but it might be ok<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Gerd<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Or you could select the encoding using a variant type:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Good idea, and I'm happy with the syntax for the caller. But I'm more<br></div>
<div> &gt;&gt; concerned with the organization of the code; this would mix the Latin1 and<br></div>
<div> &gt;&gt; Utf8 implementations. I would rather keep them separate.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; -- Steffen<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; On Thu, Feb 9, 2017 at 5:55 PM, Jeremy Yallop &lt;<a href="mailto:yallop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Dear Steffen,<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; On 9 February 2017 at 20:36, Steffen Smolka &lt;<a href="mailto:smolka@cs.cornell.edu">smolka@cs.cornell.edu</a>&gt; wrote:<br></div>
<div> &gt;&gt; &gt; Is it possible to create namespaces inside an object? Concretely, I<br></div>
<div> &gt;&gt; &gt; would<br></div>
<div> &gt;&gt; &gt; like to write<br></div>
<div> &gt;&gt; &gt;<br></div>
<div> &gt;&gt; &gt; class buffer = object(self)<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;...<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;method get = ...<br></div>
<div> &gt;&gt; &gt;<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;module Latin1 = struct<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp; &nbsp;method get = ...<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;end<br></div>
<div> &gt;&gt; &gt;<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;module Utf8 = struct<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp; &nbsp;method get = ...<br></div>
<div> &gt;&gt; &gt;&nbsp; &nbsp;end<br></div>
<div> &gt;&gt; &gt; end<br></div>
<div> &gt;&gt; &gt;<br></div>
<div> &gt;&gt; &gt; so that given an object b : buffer, I can call methods<br></div>
<div> &gt;&gt; &gt; b#get<br></div>
<div> &gt;&gt; &gt; b#Latin1.get<br></div>
<div> &gt;&gt; &gt; b#Utf8.get<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; It's possible to achieve something like this using methods that return<br></div>
<div> &gt;&gt; objects.&nbsp; If your nested objects don't need to access the internal<br></div>
<div> &gt;&gt; state of the parent then you might write it like this:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;class buffer =<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp;let latin1 = object<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;method get = ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; end<br></div>
<div> &gt;&gt;&nbsp; &nbsp; and utf8 = object<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;method get = ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; end in<br></div>
<div> &gt;&gt;&nbsp; &nbsp; object(self)<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; method get = ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; method latin1 = latin1<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; method utf8 = utf8<br></div>
<div> &gt;&gt;&nbsp; &nbsp; end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; With this approach you can write<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp; b#get<br></div>
<div> &gt;&gt;&nbsp; &nbsp; b#latin1#get<br></div>
<div> &gt;&gt;&nbsp; &nbsp; b#utf8#get<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; which, apart from some minor orthographic differences, looks like what<br></div>
<div> &gt;&gt; you were aiming for.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Your intuition that this isn't really idiomatic OCaml is right,<br></div>
<div> &gt;&gt; though.&nbsp; In OCaml, unlike some other languages with classes and<br></div>
<div> &gt;&gt; objects, classes are not usually used as namespaces; method names are<br></div>
<div> &gt;&gt; globally (or, rather, "ambiently") scoped, and there's no real support<br></div>
<div> &gt;&gt; for the kind of nesting that you're interested in.&nbsp; Instead, people<br></div>
<div> &gt;&gt; typically build nested namespaces using modules:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;module Buffer =<br></div>
<div> &gt;&gt;&nbsp; &nbsp;struct<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; let get = ...<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; module Latin1 = struct<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let get = ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; module Utf8 = struct<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let get = ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; end<br></div>
<div> &gt;&gt;&nbsp; &nbsp;end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; With the module approach you write the 'receiver' after the 'method'<br></div>
<div> &gt;&gt; rather than before, but that doesn't seem like a huge hardship.&nbsp; (10%<br></div>
<div> &gt;&gt; of the world manages to get by with VSO languages.)<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;Buffer.get b ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp;Buffer.Latin1.get b ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp;Buffer.Utf8.get b ...<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; If you're keen to stick with objects there are slightly more idiomatic<br></div>
<div> &gt;&gt; ways to make it work.&nbsp; You could, of course, replace the '.' with a<br></div>
<div> &gt;&gt; '_' and define methods 'latin1_get', 'utf8_get' in place of<br></div>
<div> &gt;&gt; 'Latin1.get', 'Utf8.get'.&nbsp; Or you could select the encoding using a<br></div>
<div> &gt;&gt; variant type:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;type enc = Latin1 | Utf8<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;class buffer =<br></div>
<div> &gt;&gt;&nbsp; &nbsp;object (self)<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; method get = function<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Latin1 -&gt; ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Utf8 -&gt; ...<br></div>
<div> &gt;&gt;&nbsp; &nbsp;end<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Of course, the order of the words in an invocation changes again, but<br></div>
<div> &gt;&gt; there's no real increase in complexity for the caller:<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;&nbsp; &nbsp;b#get Latin1<br></div>
<div> &gt;&gt;&nbsp; &nbsp;b#get Utf8<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; This last approach can be taken quite far -- for example, you could<br></div>
<div> &gt;&gt; enrich the type 'enc' so that the return type of 'get' varies<br></div>
<div> &gt;&gt; according to the encoding.<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Kind regards,<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; Jeremy<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;&gt; --<br></div>
<div> &gt;&gt; ------------------------------<wbr>------------------------------<br></div>
<div> &gt;&gt; Gerd Stolpmann, Darmstadt, Germany&nbsp; &nbsp; <a href="mailto:gerd@gerd-stolpmann.de">gerd@gerd-stolpmann.de</a><br></div>
<div> &gt;&gt; My OCaml site:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.camlcity.org">http://www.camlcity.org</a><br></div>
<div> &gt;&gt; Contact details:&nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.camlcity.org/contact.html">http://www.camlcity.org/<wbr>contact.html</a><br></div>
<div> &gt;&gt; Company homepage:&nbsp; &nbsp; &nbsp; &nbsp;<a href="http://www.gerd-stolpmann.de">http://www.gerd-stolpmann.de</a><br></div>
<div> &gt;&gt; ------------------------------<wbr>------------------------------<br></div>
<div> &gt;&gt;<br></div>
<div> &gt;<br></div>
</div>
</div>
</blockquote></div>
</div>
</blockquote><div><br></div>
</body>
</html>

--_----------=_148671950728066030--

