Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA02133; Mon, 6 Sep 2004 11:21:32 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA00891 for <caml-list@pauillac.inria.fr>; Mon, 6 Sep 2004 11:21:30 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i869LSAC022246
	for <caml-list@inria.fr>; Mon, 6 Sep 2004 11:21:29 +0200
Received: from [192.168.1.200] (ppp210-32.lns2.syd3.internode.on.net [203.122.210.32])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i869L54Y017250;
	Mon, 6 Sep 2004 18:51:06 +0930 (CST)
Subject: Re: [Caml-list] build tools with critical mass?
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: "chris.danx" <chris.danx@ntlworld.com>
Cc: "Brandon J. Van Every" <vanevery@indiegamedesign.com>,
        caml-list <caml-list@inria.fr>
In-Reply-To: <413BC51A.1030009@ntlworld.com>
References: <OOEALCJCKEBJBIJHCNJDAELGHHAB.vanevery@indiegamedesign.com>
	 <413BC51A.1030009@ntlworld.com>
Content-Type: text/plain
Message-Id: <1094462464.3352.1043.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 06 Sep 2004 19:21:05 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 413C2C18.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 brandon:99 meets:99 meets:99 sympathy:01 pragmatic:01 9660:01 glebe:01 chris:01 ocaml:01 ocaml:01 face:98 nsw:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 2004-09-06 at 12:02, chris.danx wrote:
> Brandon J. Van Every wrote:
>  Ocaml is my 
> choice for graphics because of it provides good performance and doesn't 
> pigeon hole the problem to an "imperative", "object orientated" or 
> "functional" solution.

Yes but if you look at the reason you can do this, you'll
find answers like 'sound type system', and then you can
start to use that as a way to judge the capabilities of
other languages.

in that case 'it meets my needs' isn't so much of an argument,
since the *real* requirement isn't that it meets you needs,
but that it meets you needs *and will continue to do so 
in the face of change*.

In other words to predict the true productivity benefits
of a language you really do need to examine the mathematical
fundamentals.

I don't have confidence in Ocaml *just* because it has
been able to do what I wanted, and still does,
but *also* because I trust the developers to extend it
in ways which mathematics predicts are sound and useful.

I have much sympathy for 'it works in practice, but
does it work in theory?' because in my exprience,
the pragmatic reality is that if it doesn't work
in theory -- you're just deluding yourself that
it actually does work in practice :)

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

