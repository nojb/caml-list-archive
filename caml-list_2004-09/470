Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA22380; Mon, 27 Sep 2004 11:41:08 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA20224 for <caml-list@pauillac.inria.fr>; Mon, 27 Sep 2004 11:41:07 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8R9f5mO010886
	for <caml-list@inria.fr>; Mon, 27 Sep 2004 11:41:06 +0200
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id SAA25832;
	Mon, 27 Sep 2004 18:40:51 +0900 (JST)
Date: Mon, 27 Sep 2004 18:40:51 +0900 (JST)
Message-Id: <20040927.184051.125125212.garrigue@kurims.kyoto-u.ac.jp>
To: skaller@users.sourceforge.net
Cc: jon@jdh30.plus.com, caml-list@inria.fr
Subject: Re: [Caml-list] C++ STL and template features compared with OCaml
 parametric polymorphism and OO features
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
In-Reply-To: <1096260483.28613.426.camel@pelican.wigram>
References: <7f8e92aa04092613141479823e@mail.gmail.com>
	<200409270259.43863.jon@jdh30.plus.com>
	<1096260483.28613.426.camel@pelican.wigram>
X-Mailer: Mew version 4.0.64 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4157E031.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 sourceforge:01 2004:99 recursion:01 camlp:01 jacques:01 semantics:01 ocaml:01 ocaml:01 variants:01 int:01 int:01 garrigue:01 garrigue:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: skaller <skaller@users.sourceforge.net>
> On Mon, 2004-09-27 at 11:59, Jon Harrop wrote:
> 
> >  In practice, I'm all for 
> > aggressive factoring but I can't see what we're factoring here...
> 
> Sure you can. Consider:
> 
> type 'a F = A | B of 'a | C of 'a * 'a * int 
> 
> Can you write a map function for this? Of course you
> can! What about:
> 
> type 'a F = A of int | C of 'a * int | X of 'a F * 'a
> 
> Yes, of course you can!
> 
> Its obvious how to do it! 
> 
> There *exists* a universal algorithm in your head
> for writing map functions. But this pattern cannot
> be encoded in Ocaml as an HOF:
> 
> map: 'a 'F -> ('a -> 'b) -> 'b 'F
> 
> You can do this provided you have only types built
> from variants, tuples, and recursion (no function types).
> 
> In fact you could probably write this function
> in camlp4 from the definition of each type
> for which you need a map. 

Not exactly: what you demonstrated here is that you can automatically
build a map function for any type definition with one (or more) type
parameter. And the solution is more or less unique because you
required this map to be polymorphic in the parameter.

I often need to define map for types with no parameters. In that case
the problems is more complex, because there are many possible
definitions for map. You need to understand the semantics of the data
structure to choose.

And most types with parameters have small definitions, so defining map
by hand is not that bad...
(Yes, I know that there is a nice programming pattern involving big
types with parameters, but you cannot do this with normal sum types :-)

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

