Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA26390; Tue, 28 Sep 2004 03:46:33 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA24621 for <caml-list@pauillac.inria.fr>; Tue, 28 Sep 2004 03:46:32 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8S1kTVC027057
	for <caml-list@inria.fr>; Tue, 28 Sep 2004 03:46:31 +0200
Received: from [192.168.1.200] (ppp202-133.lns1.syd3.internode.on.net [203.122.202.133])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i8S1k64Y004597;
	Tue, 28 Sep 2004 11:16:15 +0930 (CST)
Subject: Re: [Caml-list] Observations on OCaml vs. Haskell
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: John Goerzen <jgoerzen@complete.org>
Cc: caml-list <caml-list@inria.fr>
In-Reply-To: <200409271408.51872.jgoerzen@complete.org>
References: <200409271408.51872.jgoerzen@complete.org>
Content-Type: text/plain
Message-Id: <1096335965.28613.793.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 28 Sep 2004 11:46:06 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4158C275.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 observations:01 haskell:01 sourceforge:01 2004:99 haskell:01 duality:01 categorical:01 shootout:01 gcc:01 ocamlopt:01 python:01 3.3:99 statically:01 optimiser:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 2004-09-28 at 05:08, John Goerzen wrote:

> 1. Haskell lists resemble OCaml Streams

Laziness -> control inversion -> duality

lists and streams are categorical duals

> 2. Haskell strings are lists of characters

Performance implications ..

> 3. The Num typeclass

Non general attempt to provide polyadic programming.

> OCaml enlightenment appreciated :-)

I would guess Ocaml wins in performance. Shootout at alioth gives:

(CRAPS scores)

gcc -- 57
ocamlopt -- 40
ghc -- 18
ocamlbyte -- 15
python -- 16
felix -- 3.3 (ouch!)
curry (Haskell) -- 0.13

which seems to indicate, at least for statically
typed languages, that performance is most closely
related to the intensity of effort put into the
optimiser.

However, Haskell being purely functional may
make high performance data structures unavailable,
for example arrays (time in secs)

gcc -- 0.02
ocaml -- 0.04
ghc -- 1.4

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

