Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA31404; Thu, 30 Sep 2004 11:19:22 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA30906 for <caml-list@pauillac.inria.fr>; Thu, 30 Sep 2004 11:19:21 +0200 (MET DST)
Received: from mproxy.gmail.com (rproxy.gmail.com [64.233.170.195])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8U9JKkM016178
	for <caml-list@inria.fr>; Thu, 30 Sep 2004 11:19:21 +0200
Received: by mproxy.gmail.com with SMTP id 79so3526657rnk
        for <caml-list@inria.fr>; Thu, 30 Sep 2004 02:19:20 -0700 (PDT)
Received: by 10.38.73.46 with SMTP id v46mr969363rna;
        Thu, 30 Sep 2004 02:19:19 -0700 (PDT)
Received: by 10.38.75.19 with HTTP; Thu, 30 Sep 2004 02:19:19 -0700 (PDT)
Message-ID: <7f8e92aa04093002193cfb3737@mail.gmail.com>
Date: Thu, 30 Sep 2004 12:19:19 +0300
From: Radu Grigore <radugrigore@gmail.com>
Reply-To: Radu Grigore <radugrigore@gmail.com>
To: caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Factoring HOFs [was Re: C++ STL...]
In-Reply-To: <200409291749.17226.jon@jdh30.plus.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
References: <20040925225246.48566.qmail@web53010.mail.yahoo.com>
	 <200409271411.30384.jon@jdh30.plus.com> <415AD595.3020009@bik-gmbh.de>
	 <200409291749.17226.jon@jdh30.plus.com>
X-Miltered: at nez-perce with ID 415BCF98.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 hofs:01 2004:99 annotated:01 forall:01 int:01 int:01 sep:01 polymorphic:01 wrote:03 slightly:03 stl:03 parameter:04 functions:05 guess:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 29 Sep 2004 17:49:17 +0100, Jon Harrop <jon@jdh30.plus.com> wrote:
> Why does this end up with a single polymorphic type:

Slightly related.
I've found in the manual an example were a method is annotated with a type like:

  'a. 'a -> int

meaning "forall 'a the type is 'a -> int". Is there something similar
for normal functions? I guess that such an annotation for the map
parameter would solve Jon's problem.

regards,
 radu

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

