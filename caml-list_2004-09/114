Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA06892; Sun, 5 Sep 2004 22:18:31 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA05756 for <caml-list@pauillac.inria.fr>; Sun, 5 Sep 2004 22:18:29 +0200 (MET DST)
Received: from outbound20-2.nyc.untd.com (outbound20-2.nyc.untd.com [64.136.20.160])
	by concorde.inria.fr (8.13.0/8.13.0) with SMTP id i85KITlY008100
	for <caml-list@inria.fr>; Sun, 5 Sep 2004 22:18:29 +0200
Received: from outbound20-2.nyc.untd.com (smtp01.nyc.untd.com [10.140.24.121])
	by smtpout01.nyc.untd.com with SMTP id AABAVY7EPA5K289J
	for <caml-list@inria.fr> (sender <vanevery@indiegamedesign.com>);
	Sun,  5 Sep 2004 13:18:21 -0700 (PDT)
Received: (qmail 26698 invoked from network); 5 Sep 2004 20:17:53 -0000
Received: from unknown (HELO vangogh) (4.243.36.100)
  by smtp01.nyc.untd.com with SMTP; 5 Sep 2004 20:17:53 -0000
From: "Brandon J. Van Every" <vanevery@indiegamedesign.com>
To: "caml" <caml-list@inria.fr>
Subject: [Caml-list] build tools with critical mass?
Date: Sun, 5 Sep 2004 13:28:51 -0700
Message-ID: <OOEALCJCKEBJBIJHCNJDAELGHHAB.vanevery@indiegamedesign.com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.6604 (9.0.2911.0)
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441
Importance: Normal
X-ContentStamp: 14:7:2221960717
X-UNTD-OriginStamp: CI84cOLHFqh7Zd2QWkwvEFvwyO3T/pIsFsCrOjjLH8711lfFOuBmxU3R4ow9wdnL
X-Miltered: at concorde with ID 413B7495.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; brandon:99 amusing:01 deploying:01 doomed:01 lifestyle:99 sln:99 caml-list:01 bayesian:01 crap:01 crap:01 unboxed:01 alloc:01 alloc:01 val:01 val:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

The discussion of build technologies is amusing... I can imagine all
sorts of wonderful problems I might try to solve, if only I didn't have
more pressing problems to solve.  :-)  The problem I'm more interested
in solving is deploying OCaml to a greater number of people.

So I have 2 questions regarding build tools.  Let's take it as a given
that GNU Make ain't so hot.  Do any of the alternatives have any
significant momentum behind them

- in the OCaml community?
- OUTSIDE OF the OCaml community?

My point being, perhaps the thing I'd throw my weight behind, is the
thing that's better than GNU Make that has the most people using it.  At
least, that's where I'd start looking for The Answer [TM].  Maybe there
is no One True Ansewr [TM], and we are doomed to a lifestyle of
fragmented build tools.  But I'd like to avoid that future if it is
possible.  I think widespread adoption of a language probably depends on
having a consistent set of build tools, at least for all the library
code one is typically going to grab.  As evidence I'd say that GNU Make
may not be great, but it is consistent and widespread.  So are Visual
Studio .sln files, or those of any other IDE that some chunk of
programmers 'prefer'.

Several years down the road, maybe the more experimental build tools
will gain enough adherants that they might become a basis for
industrialization of OCaml.  But right now, I think we need something
that's closer to being ready for prime time.  That, in my book, means
it's been used by a pile of people and the results are encouraging.  So,
what build tools fit this criterion?


Cheers,                         www.indiegamedesign.com
Brand*n Van Every               S*attle, WA

Praise Be to the caml-list Bayesian filter! It blesseth
my postings, it is evil crap!  evil crap!  Bigarray!
Unboxed overhead group!  Wondering!  chant chant chant...

Is my technical content showing?

// return an array of 100 packed tuples
temps
  int $[tvar0][2*100]; // what the c function needs
  value $[tvar1]; // one int
  value $[tvar2]; // one tuple
  int $[tvar3] // loop control var
oncePre
eachPre
  $[cvar0]=&($[tvar0][0]);
eachPost
  $[lvar0] = alloc(2*100, 0 /*NB: zero-tagged block*/ );
  for(int $[tvar3]=0;$[tvar3]<100;$[tvar3]++) {
    $[tvar2] = alloc_tuple(2);
    $[tvar1] = Val_int($[cvar0][0+2*$[tvar3]]);
    Store_field($[tvar2],0,$[tvar1]);
    $[tvar1] = Val_int($[cvar0][1]);
    Store_field($[tvar2],1,$[tvar1+2*$[tvar3]]);
    Array_store($[lvar0],$[tvar3],$[tvar0]);
  }
oncePost

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

