Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA30189; Wed, 29 Sep 2004 16:24:52 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA28330 for <caml-list@pauillac.inria.fr>; Wed, 29 Sep 2004 16:24:51 +0200 (MET DST)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8TEOo5a031825
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Wed, 29 Sep 2004 16:24:51 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay01.plus.net with esmtp (Exim) id 1CCfNu-0007AX-0b
	for caml-list@inria.fr; Wed, 29 Sep 2004 14:24:46 +0000
From: Jon Harrop <jon@jdh30.plus.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Observations on OCaml vs. Haskell
Date: Wed, 29 Sep 2004 15:20:39 +0100
User-Agent: KMail/1.6.2
References: <Pine.LNX.4.44.0409290925010.5809-100000@localhost.localdomain>
In-Reply-To: <Pine.LNX.4.44.0409290925010.5809-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200409291520.39494.jon@jdh30.plus.com>
X-Miltered: at nez-perce with ID 415AC5B2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 observations:01 haskell:01 2004:99 compilers:01 ocaml:01 polymorphic:01 wrote:03 abstract:03 types:03 types:03 usefull:03 data:03 bogus:04 functions:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wednesday 29 September 2004 15:26, Brian Hurt wrote:
> This gets tricky, I would think.  One thing I don't want to lose is the
> ability to make ('a -> 'b) list types.  Comparing two functions is
> obviously bogus, but in most other places being able to handle both
> functions and data is a usefull thing.

What if the compilers flagged a warning when the polymorphic comparisons were 
used either on types containing functions or on abstract types?

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

