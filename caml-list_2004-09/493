Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA24035; Tue, 28 Sep 2004 02:26:35 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA23085 for <caml-list@pauillac.inria.fr>; Tue, 28 Sep 2004 02:26:34 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8S0QW81019991
	for <caml-list@inria.fr>; Tue, 28 Sep 2004 02:26:33 +0200
Received: from [192.168.1.200] (ppp202-133.lns1.syd3.internode.on.net [203.122.202.133])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i8S0QSOU058926;
	Tue, 28 Sep 2004 09:56:29 +0930 (CST)
Subject: Re: [Caml-list] C++ STL and template features compared with OCaml
	parametric polymorphism and OO features
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: brogoff <brogoff@speakeasy.net>
Cc: caml-list <caml-list@inria.fr>
In-Reply-To: <Pine.LNX.4.58.0409270926190.24014@shell2.speakeasy.net>
References: <Pine.LNX.4.44.0409270858120.5809-100000@localhost.localdomain>
	 <Pine.LNX.4.58.0409270926190.24014@shell2.speakeasy.net>
Content-Type: text/plain
Message-Id: <1096331187.28613.715.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 28 Sep 2004 10:26:28 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4158AFB8.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 brogoff:01 pointers:01 amusing:01 amusing:01 iterator:01 haskell:01 functorial:01 9660:01 glebe:01 ocaml:01 ocaml:01 sml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 2004-09-28 at 02:41, brogoff wrote:

> I've thought for a while that a hybrid of C++, Ada, and Pascal, with the awful
> C++ syntax fixed, pointers restricted, and especially downward funargs, would
> be an amusing imperative language, and it would address tha second problem you
> mention, without requiring GC. But functional languages are more amusing :-).

Thats Felix (http://felix.sf.net)

> I don't think that iterator based libraries is the right thing in an
> OCaml (or SML or Haskell) setting.

That may be so, but functorial polymorphism is necessary
for better reusability.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

