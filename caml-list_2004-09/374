Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA27019; Mon, 20 Sep 2004 17:43:10 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA28048 for <caml-list@pauillac.inria.fr>; Mon, 20 Sep 2004 17:43:09 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i8KFh6Uq021820
	for <caml-list@inria.fr>; Mon, 20 Sep 2004 17:43:08 +0200
Received: from [192.168.1.200] (ppp202-133.lns1.syd3.internode.on.net [203.122.202.133])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i8KFh44Y068062;
	Tue, 21 Sep 2004 01:13:05 +0930 (CST)
Subject: Re: [Caml-list] type var in functor instance?
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Jean-Christophe Filliatre <Jean-Christophe.Filliatre@lri.fr>
Cc: caml-list <caml-list@inria.fr>
In-Reply-To: <16718.50690.954027.644373@gargle.gargle.HOWL>
References: <1095516867.2580.211.camel@pelican.wigram>
	 <16718.50690.954027.644373@gargle.gargle.HOWL>
Content-Type: text/plain
Message-Id: <1095694982.2580.595.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 21 Sep 2004 01:43:03 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 414EFA8B.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 functor:01 sourceforge:01 2004:99 filliatre:01 instantiate:01 functor:01 pervasives:01 distro:01 hashtbl:01 hashtbl:01 9660:01 glebe:01 semantics:01 int:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 2004-09-20 at 21:58, Jean-Christophe Filliatre wrote:
> skaller writes:
>  > Is it possible instantiate a functor with a module
>  > containing a type variable? I have a Set with t = int,
>  > and I now need 'a * int.. 

> Various unsatisfying solutions have been proposed, among which
> 
> - to make a copy of Set with an additional type parameter eveywhere (I
>   attach such a module below. Beware: this is an old version of Set)

Hmmm. I see. I think I understand why this is needed.
Dependent typing problem? Set depends on element...

> - to make an unfunctorized version of Set that uses Pervasives.compare,
>   thus polymorphic

This is already in the standard distro for Hashtbl.
Why not for Set and Map as well? Why is this
unsatisfactory?

I actually use heaps of Hashtbl of polymorphic kind
and am ready to switch some over to an functor instance
with key type int -- most of my tables use int keys
and I hope to gain some performance and reasoning ability.

The duplicate interface has let me experiment rapid
prototyping style, then lock down the typing a bit,
leaving the raw function names and semantics the same.

I think that's nice -- one reason I use Hashtbl
even when Set or Map would be better.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

