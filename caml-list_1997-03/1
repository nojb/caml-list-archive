Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA28843 for caml-redistribution; Mon, 3 Mar 1997 09:05:37 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA01371 for <caml-list@pauillac.inria.fr>; Sat, 1 Mar 1997 13:38:29 +0100 (MET)
Received: from ephemere.inria.fr (root@ephemere.inria.fr [128.93.8.26]) by concorde.inria.fr (8.7.6/8.7.3) with ESMTP id NAA07768; Sat, 1 Mar 1997 13:38:24 +0100 (MET)
Received: from ephemere.inria.fr (localhost.inria.fr [127.0.0.1]) by ephemere.inria.fr (8.7.6/8.6.6) with ESMTP id NAA04352; Sat, 1 Mar 1997 13:41:14 +0100
Message-Id: <199703011241.NAA04352@ephemere.inria.fr>
X-Mailer: exmh version 1.6.7 05/05/96
To: Lyn A Headley <laheadle@midway.uchicago.edu>
cc: caml-list@inria.fr
Subject: Re: ML extension language 
In-reply-to: Your message of "Thu, 27 Feb 1997 17:14:06 CST."
             <199702272314.RAA18638@kimbark.uchicago.edu> 
Reply-To: Francois.Rouaix@inria.fr
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Sat, 01 Mar 1997 13:41:12 +0100
From: Francois Rouaix <rouaix@ephemere.inria.fr>
Sender: weis

> A main advantage of extension languages is that they enable a high
> degree of portability, thereby facilitating the availability of (in
> this case) functional programming tools.  More specifically, instead
> of requiring the user to install an interpreter at their site to be
> able to run their application, the application *is* an interpreter for
> its own private language.

The availability of an extension language does not mean that the application
will be portable. The application itself has to be portable in the first place.
Of course, having a portable extension language allows extensions to be
portable as well.

> but the main difference is that in a caml program,
> the main program is the interpreter for the caml virtual machine, whereas
> in an extension language control resides in the application.
Even with the current releases of Caml, it may be a little more complex:
for example, in a CamlTk application, the control is essentially in the
event loop, which belongs to Tk. Moreover, using client/server, RPCs, threads
and whatever, it's "easy" to have several co-existing control flows.

> Thus far, I plan
> to use almost the entire caml-light runtime system, and write a different
> compiler (in C) for a simpler, but (hopefully!) still powerful language.  
The advantage of Caml over Scheme, Python, Tcl or Rexx is that it is 
*statically* strongly typed. The Caml runtime system knows nothing of types;
it simply provides a reasonably efficient portable platform to execute
strict functional and imperative programs.

If you want to define a language "simpler" than Caml, but that has
basically the same operational semantics as well as a strong polymorphic
static type system, it seems to me that your problem
is essentially a syntax problem (e.g. you consider some features of Caml
as superfluous for extension languages, or that you need additionnal 
constructs (such as specific application-specific control-flow)).

You might then want to have a look at Chamau/Camlp4 and related work
in extensible syntax (http://pauillac.inria.fr/~ddr/)

--
Francois.Rouaix@inria.fr                   Projet Cristal - INRIA Rocquencourt
WWW Home Page: http://pauillac.inria.fr/~rouaix/





