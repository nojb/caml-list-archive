Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA14025 for caml-redistribution; Wed, 19 Mar 1997 18:35:23 +0100 (MET)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA07808; Wed, 19 Mar 1997 14:20:37 +0100 (MET)
From: Xavier Leroy <xleroy@pauillac.inria.fr>
Message-Id: <199703191320.OAA07808@pauillac.inria.fr>
Subject: Re: New C interfaces
In-Reply-To: <199703111931.LAA28111@vegemite.Stanford.EDU> from Andrew Conway at "Mar 11, 97 11:31:30 am"
To: arc@sequence.Stanford.EDU (Andrew Conway)
Date: Wed, 19 Mar 1997 14:20:37 +0100 (MET)
Cc: caml-list@pauillac.inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> I have been reading the 1.04 documentation on the C language
> interface, and it occured to me that one could get library routined
> compiled with ocamlopt to live in harmony with the top level by
> compiling the library routines using ocamlopt -output-obj, and then
> linking them into the toplevel using -custom. It looks messy but
> practical.

It almost works, but not quite. One problem is that one would need a
runtime library that supports both the bytecode and the native-code
system. In particular, the garbage collector would need to scan both
the interpreter stack and the native stack.

> Does this make multiple copies of the garbage collector?

At any rate, the C linker will not let you do that (duplicate symbols
are an error in C). Also, if you had two GCs, it would be hard to pass
allocated data structures from one world to the other.

- Xavier Leroy




