Return-Path: <basile@starynkevitch.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id F2507BC37
	for <caml-list@yquem.inria.fr>; Wed, 28 Oct 2009 23:45:26 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnwDAMNm6Eo+BBFne2dsb2JhbACBT5l1AQEWJAO/OIQ/BA
X-IronPort-AV: E=Sophos;i="4.44,642,1249250400"; 
   d="scan'208";a="39128286"
Received: from smtp-103-wednesday.noc.nerim.net (HELO mallaury.nerim.net) ([62.4.17.103])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 28 Oct 2009 23:45:26 +0100
Received: from hector.lesours (ours.starynkevitch.net [213.41.244.95])
	by mallaury.nerim.net (Postfix) with ESMTP id DC5AAA105B;
	Wed, 28 Oct 2009 23:45:24 +0100 (CET)
Received: from glinka.lesours ([192.168.0.1])
	by hector.lesours with esmtp (Exim 4.69)
	(envelope-from <basile@starynkevitch.net>)
	id 1N3HGm-00056i-FG; Wed, 28 Oct 2009 23:45:32 +0100
Message-ID: <4AE8C987.8020100@starynkevitch.net>
Date: Wed, 28 Oct 2009 23:45:27 +0100
From: Basile STARYNKEVITCH <basile@starynkevitch.net>
User-Agent: Mozilla-Thunderbird 2.0.0.22 (X11/20090701)
MIME-Version: 1.0
To: Adrien <camaradetux@gmail.com>
Cc: Caml Mailing List <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] Binding C libraries which use variable arguments
 	(stdarg.h)
References: <666572260910281507q74cb1c1at157c9e3c86070c69@mail.gmail.com>
In-Reply-To: <666572260910281507q74cb1c1at157c9e3c86070c69@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; basile:01 basile:01 foo:01 stub:01 foo:01 ocaml:01 failwith:01 ocaml:01 variants:01 varargs:01 weis:01 printf:01 faiencerie:01 92340:01 reine:01 

Adrien wrote:
> Hi,
> 
> I am currently trying to bind a C function that takes variables
> arguments, like foo(int a, ...). I can't find how to make a C stub for
> that function.

  I am assuming that the a is the number of actual arguments, so you call
foo(3, x, y, z)
foo(5, t, t+1, t+3, 0, 4)
foo(0)

> 
> Any other idea? Hint^WPointer? (sorry for the bad joke ;-) )

First, you could suppose that the a has a reasonable limit, say 100.

Then you could generate the glue code for each value of the argument a. 
I mean generate ocaml code like

external f0: void -> uit = "f_0"
external f1: int -> unit = "f_1"
external f2: int -> int -> unit = "f_2"
external f3: int -> int -> int -> unit = "f_3"

let f a = match Array.length a with
  0 -> f0 ()
| 1 -> f1 a.[0]
| 2 -> f2 a.[0] a.[1]
| 3 -> f3 a.[0] a.[1] a.[2]
....
| _ -> failwith "too many components for f"

and generate C code for each of f_0 f_1 ...

and call f with an array ...

The specialized code generator is reasonably written in Ocaml

There are more crazy variants, including

try Ocaml varargs like Pierre Weis did in printf.ml. For plain mortals 
like me this is white magic.

Assuming a Linux system, you could lazily generate the glue code and 
invoke dynamic linker on it. So the general case would be to call the 
code generator.

Time to go to bed. I am saying lot of non-sense.

Bye!


-- 
Basile STARYNKEVITCH         http://starynkevitch.net/Basile/
email: basile<at>starynkevitch<dot>net mobile: +33 6 8501 2359
8, rue de la Faiencerie, 92340 Bourg La Reine, France
*** opinions {are only mines, sont seulement les miennes} ***

