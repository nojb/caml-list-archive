Return-Path: <yminsky@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.2 required=5.0 tests=AWL,DNS_FROM_RFC_POST,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 6DBB3BBAF
	for <caml-list@yquem.inria.fr>; Fri,  9 Oct 2009 18:52:41 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am4DAKEGz0rRVdSskWdsb2JhbACCJi+Mfop0PwEBAQEJCwoHE65ZCoEyhnKIaAEDAwWEJwSICg
X-IronPort-AV: E=Sophos;i="4.44,533,1249250400"; 
   d="scan'208";a="36026804"
Received: from mail-vw0-f172.google.com ([209.85.212.172])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 09 Oct 2009 18:52:40 +0200
Received: by vws2 with SMTP id 2so618456vws.15
        for <caml-list@yquem.inria.fr>; Fri, 09 Oct 2009 09:52:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:reply-to:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=LBAsIvfISWStgOGCxX8InsqjHilGhCYDbc1Hfa0JSuU=;
        b=E+xCgtgKZYW4LQdxmuz2oUe3P3hmCa6U65yaBDPi7qsVt9GIUo1Ad2guhzyRvBMa2S
         n40/+cDvfUxqCW7tmBAIAprAsPPmvfIqCdkdqPJeg6d+/jBVabdXyJffPlbmaU0CmScB
         SvUGKzC1S6bnKWnZSRrHqC1IfjknmYLdKiSQo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:reply-to:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        b=RgpR7bySHOe85x+V6DRduV2VnmRwbGV+NshvWp5VEGWU1fk5beujfocfJMDLANHsjf
         KPsxLVhurESBEtaFWLTxfW3r41aZU6ZssZZiw3oVYe4EfNIPxZlyOMkgvhpRi26F0uyU
         N8ZUvDEIFRsqxl8zIcOsFaRZp75RebLU12eEc=
MIME-Version: 1.0
Received: by 10.220.89.93 with SMTP id d29mr4406288vcm.26.1255107158770; Fri, 
	09 Oct 2009 09:52:38 -0700 (PDT)
Reply-To: yminsky@gmail.com
In-Reply-To: <200910091618143281094@orange.fr>
References: <891bd3390910081840p37e8c786g60b2c15d2c06ae60@mail.gmail.com>
	 <7d8707de0910090033q4a14a108w62f13d7735994923@mail.gmail.com>
	 <891bd3390910090258l61aa7947p67a10c4adcc3312a@mail.gmail.com>
	 <200910091618143281094@orange.fr>
Date: Fri, 9 Oct 2009 12:52:38 -0400
Message-ID: <891bd3390910090952l5112fe46ue01c8f2c66bc6583@mail.gmail.com>
Subject: Re: [Caml-list] Improving OCaml's choice of type to display
From: Yaron Minsky <yminsky@gmail.com>
To: Damien Guichard <alphablock@orange.fr>
Cc: "caml-list@yquem.inria.fr" <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=0016362852c05a855c04758368df
X-Spam: no; 0.00; ocaml's:01 yaron:01 minsky:01 yminsky:01 compiler:01 compiler:01 functors:01 ocaml's:01 functors:01 argues:01 syntax:01 damien:01 guichard:01 yaron:01 ocaml:01 
Status: O
Content-Length: 13865
Lines: 314

--0016362852c05a855c04758368df
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I do basically think of this as a deficiency in the compiler as opposed to =
a
deficiency in core (although it's hardly a major deficiency in the
compiler).  Signatures, modules and functors are an important part of the
language, and if you want to use them in a significant way, then you will
end up having multiple paths to get to the same type.  OCaml's algorithm fo=
r
choosing the type to display is somewhat unfortunate in this regard.

If you have a design approach that simultaneously makes good use of
functors, modules and signatures and makes OCaml's type-to-display-selector
happy, I'd be very interested in hearing it.

Finally, the specific point you make argues against the specific heuristic
(smallest type name) I proposed, but not against all other heuristics.
Another heuristic which I think has some potential is choosing the type nam=
e
with the smallest number of dots.  (also, as a matter of personal
preference, in the case that you outline, I would prefer the answer of "int=
"
to "color", but that is just a coincidence, of course.)

To be clear, some of this stuff can be made better by using signature
functors, but that has its own problems in terms of messiness and
boilerplate.  That said, I have half a mind to write a syntax extension to
clean that up, and switch over to signature functors, for this and other
reasons.  That said, signature functors only clean up a little bit of the
problem.

y

On Fri, Oct 9, 2009 at 10:18 AM, Damien Guichard <alphablock@orange.fr>wrot=
e:

>
> Hi Yaron,
>
> I think you better think twice about the problem in general (rather than
> the particular needs of Core) before proposing some controversial type
> display improvement.
>
> Imagine my code is:
>
>   type color =3D int
>
>   let black : color =3D 0
>
> Then, following your proposition, evaluating *black* should give me an *
> int* rather than a *color* because *int* is shorter and therefore nicer.
>
> So, now, what's the point in the *color* type declaration ?
> There is none, type aliasing becomes useless because you can't expose it.
> Call me crazy but i whish i can use more than 3 characters as a type name=
.
>
> So you want it to be displayed as an *Int.t* rather than an *
> Int.comparable* ?
> Then just declare it as *Int.t* rather than *Int.comparable*, or choose
> another shorter name, it's not an OCaml issue, its' a Core issue.
> (obviously it would really help if no english word would be more than 6
> characters but Ocaml can't be blamed for that)
>
> I mean, when designing an elaborate software library, you have to make
> choices, and often, no matter how good OCaml is, some choices will be
> compromises. You have to pick the lesser between several evils and live w=
ith
> it.
>
> I have learned that when programming Ocaml-Idaho<https://forge.ocamlcore.=
org/projects/ocaml-idaho/>,
> suddenly module names become longer, module types become more composited,
> data types become more subtle, and so on and so on...
>
> Blaming OCaml is a too easy path.
>
> At one certain point you have to face the verbosity *you* have created an=
d
> decide whether the additionnal expressivity worths the price.
> If you think it does then it's ok, if not then just amend, if amending
> doesn't help then consider refactoring.
> Seek the best expressiveness/verbosity ratio without sacrifying too much
> functionality.
> That's your job as a library designer.
>
>
> - *damien*
>
>
>  ------------------------------
>  *En r=E9ponse au message*
> *de :* Yaron Minsky
> *du :* 2009-10-09 11:58:11
> *=C0 :* Andrej Bauer
> *CC :* caml-list@yquem.inria.fr
> *Sujet :* Re: [Caml-list] Improving OCaml's choice of type to display
>
> Well, if we're picking heuristics, the fewest number of characters wouldn=
't
> be crazy either.  Given the choice between Int.t and Int.comparable (whic=
h
> are aliases for the same type), I'd prefer to see Int.t.
>
> y
>
> On Fri, Oct 9, 2009 at 3:33 AM, Andrej Bauer <andrej.bauer@andrej.com>wro=
te:
>
>> On Fri, Oct 9, 2009 at 3:40 AM, Yaron Minsky <yminsky@gmail.com> wrote:
>> > Choosing shorter names.
>>
>> By which you probably mean "the fewest number of dots (module
>> projections)". It might be a bit annoying if the code that prints
>> doesn't know what modules are open. What do the INRIA priests say?
>>
>> Andrej
>>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--0016362852c05a855c04758368df
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I do basically think of this as a deficiency in the compiler as opposed to =
a deficiency in core (although it&#39;s hardly a major deficiency in the co=
mpiler).=A0 Signatures, modules and functors are an important part of the l=
anguage, and if you want to use them in a significant way, then you will en=
d up having multiple paths to get to the same type.=A0 OCaml&#39;s algorith=
m for choosing the type to display is somewhat unfortunate in this regard.<=
br>
<br>If you have a design approach that simultaneously makes good use of fun=
ctors, modules and signatures and makes OCaml&#39;s type-to-display-selecto=
r happy, I&#39;d be very interested in hearing it.<br><br>Finally, the spec=
ific point you make argues against the specific heuristic (smallest type na=
me) I proposed, but not against all other heuristics.=A0 Another heuristic =
which I think has some potential is choosing the type name with the smalles=
t number of dots.=A0 (also, as a matter of personal preference, in the case=
 that you outline, I would prefer the answer of &quot;int&quot; to &quot;co=
lor&quot;, but that is just a coincidence, of course.)<br>
<br>To be clear, some of this stuff can be made better by using signature f=
unctors, but that has its own problems in terms of messiness and boilerplat=
e.=A0 That said, I have half a mind to write a syntax extension to clean th=
at up, and switch over to signature functors, for this and other reasons.=
=A0 That said, signature functors only clean up a little bit of the problem=
.<br>
<br>y<br><br>On Fri, Oct 9, 2009 at 10:18 AM, Damien Guichard <span dir=3D"=
ltr">&lt;<a href=3D"mailto:alphablock@orange.fr">alphablock@orange.fr</a>&g=
t;</span> wrote:<br><div class=3D"gmail_quote"><blockquote class=3D"gmail_q=
uote" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0=
pt 0.8ex; padding-left: 1ex;">






<div>
<div><font color=3D"#0000ff" face=3D"Verdana" size=3D"2"></font></div>
<div><font color=3D"#0000ff" face=3D"Verdana" size=3D"2"></font></div>
<div align=3D"left"><font color=3D"#c0c0c0">
<div><font face=3D"Verdana" size=3D"2"></font></div></font></div></div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#000000"></font></fon=
t>=A0</div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#000000">Hi Yaron,</f=
ont></font></div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#000000"></font></fon=
t>=A0</div>
<div><font face=3D"Verdana" size=3D"2">I think you better think twice about=
 the problem=20
in general (rather than the particular needs of Core) before proposing=20
some=A0controversial type display improvement.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Imagine my code is:</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Courier New" size=3D"2">=A0 type color =3D int </font></=
div>
<div><font face=3D"Courier New" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2"><font face=3D"Courier New">=A0 let b=
lack : color=20
=3D 0</font>=A0</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Then, following your proposition, ev=
aluating=20
<i>black</i>=A0should give me an <i>int</i> rather than a <i>color</i>=20
because <i>int</i> is shorter and therefore nicer.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">So, now, what&#39;s the point in the=
 <i>color</i>=20
type declaration ?</font></div>
<div><font face=3D"Verdana" size=3D"2">There is none, </font><font face=3D"=
Verdana" size=3D"2">type aliasing becomes useless because you can&#39;t exp=
ose it.</font></div>
<div><font face=3D"Verdana" size=3D"2">Call me crazy=A0but i whish i can us=
e more=20
than 3 characters as a=A0type name.=A0</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">So you want it to be displayed as=20
an=A0<i>Int.t</i> rather than an=A0<i>Int.comparable</i>=20
?</font></div>
<div><font face=3D"Verdana" size=3D"2">Then just declare it as <i>Int.t</i>=
 rather=20
than <i>Int.comparable</i>, or choose another=A0shorter name, it&#39;s not =
an=20
OCaml issue, its&#39; a Core issue.</font></div>
<div><font face=3D"Verdana" size=3D"2">(obviously it would really help if n=
o english=20
word would be more than 6 characters but Ocaml can&#39;t be blamed for=20
that)</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">I mean,=A0when designing an=20
elaborate=A0software library, you have to make choices, and often, no matte=
r=20
how good=A0OCaml is, some choices will be compromises. You have to pick the=
=20
lesser between several evils and live with it.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">I have learned that when programming=
 <a href=3D"https://forge.ocamlcore.org/projects/ocaml-idaho/" target=3D"_b=
lank">Ocaml-Idaho</a>,=20
suddenly module names become longer, module types become more composited, d=
ata=20
types become more subtle, and so on and so on...</font></div>
<div>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Blaming OCaml is a too easy path.</f=
ont></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">At=A0one certain=A0point you have to=
 face=20
the verbosity <u>you</u> have created and decide whether the additionnal=20
expressivity worths the price.</font></div>
<div><font face=3D"Verdana" size=3D"2">If you think it does then it&#39;s o=
k, if not then=20
just amend, if amending doesn&#39;t help then consider refactoring.</font><=
/div>
<div><font face=3D"Verdana" size=3D"2">Seek the best expressiveness/verbosi=
ty ratio=20
without sacrifying too much functionality.</font></div>
<div><font face=3D"Verdana" size=3D"2">That&#39;s your job as a library=20
designer.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#000000">-=20
<i>damien</i></font></font></div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#c0c0c0"></font></fon=
t>=A0</div>
<div><font face=3D"Verdana" size=3D"2"><font color=3D"#c0c0c0"></font>=A0</=
font></div>
<div>
<hr>
</div>
<div><font face=3D"Verdana"><font size=3D"2"><i>En r=E9ponse au message</i>=
<br><b>de=20
:</b> Yaron Minsky</font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>du :</b>=20
2009-10-09=A011:58:11</font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>=C0 :</b> Andrej=20
Bauer</font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>CC :</b>=20
<a href=3D"mailto:caml-list@yquem.inria.fr" target=3D"_blank">caml-list@yqu=
em.inria.fr</a></font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>Sujet :</b> Re: [Caml-list]=
=20
Improving OCaml&#39;s choice of type to display</font></font></div><div><di=
v></div><div class=3D"h5">
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Well, if we&#39;re picking heuristic=
s, the fewest=20
number of characters wouldn&#39;t be crazy either.=A0 Given the choice betw=
een=20
Int.t and Int.comparable (which are aliases for the same type), I&#39;d pre=
fer to=20
see Int.t.<br><br>y<br><br>
<div class=3D"gmail_quote">On Fri, Oct 9, 2009 at 3:33 AM, Andrej Bauer <sp=
an dir=3D"ltr">&lt;<a href=3D"mailto:andrej.bauer@andrej.com" target=3D"_bl=
ank">andrej.bauer@andrej.com</a>&gt;</span>=20
wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid rgb(204, =
204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">On=20
  Fri, Oct 9, 2009 at 3:40 AM, Yaron Minsky &lt;<a href=3D"mailto:yminsky@g=
mail.com" target=3D"_blank">yminsky@gmail.com</a>&gt; wrote:<br>&gt;=20
  Choosing shorter names.<br><br>By which you probably mean &quot;the fewes=
t number=20
  of dots (module<br>projections)&quot;. It might be a bit annoying if the =
code that=20
  prints<br>doesn&#39;t know what modules are open. What do the INRIA pries=
ts=20
  say?<br><font color=3D"#888888"><br>Andrej<br></font></blockquote></div><=
br></font></div>
</div></div><br>_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br></blockquote></div><br>

--0016362852c05a855c04758368df--

