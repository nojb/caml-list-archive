Return-Path: <rich@annexia.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 6AE42BC37
	for <caml-list@yquem.inria.fr>; Fri, 30 Oct 2009 21:30:13 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAB7q6kpQRFuw/2dsb2JhbADgcYQ9BA
X-IronPort-AV: E=Sophos;i="4.44,655,1249250400"; 
   d="scan'208";a="35898584"
Received: from furbychan.cocan.org ([80.68.91.176])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 30 Oct 2009 21:30:13 +0100
Received: from rich by furbychan.cocan.org with local (Exim 4.63)
	(envelope-from <rich@annexia.org>)
	id 1N3y6t-00080f-Qr; Fri, 30 Oct 2009 20:30:11 +0000
Date: Fri, 30 Oct 2009 20:30:11 +0000
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Re: How to read different ints from a Bigarray?
Message-ID: <20091030203011.GA30746@annexia.org>
References: <87eiond3of.fsf@frosties.localdomain> <slrnhegkik.q9j.sylvain@gallu.homelinux.org> <87639zd0m9.fsf@frosties.localdomain> <slrnhego3u.q9j.sylvain@gallu.homelinux.org> <87tyxj5rkv.fsf@frosties.localdomain> <527cf6bc0910281548s53a00ec9s99402f4249b2d411@mail.gmail.com> <873a52wmu0.fsf@frosties.localdomain> <20091029122043.GA18905@annexia.org> <87iqdyb028.fsf@frosties.localdomain>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <87iqdyb028.fsf@frosties.localdomain>
User-Agent: Mutt/1.5.13 (2006-08-11)
From: Richard Jones <rich@annexia.org>
X-Spam: no; 0.00; bigarray:01 0100,:01 syntax:01 statically:01 byte:01 2009:98 wrote:01 ints:01 caml-list:01 reuse:01 structures:02 seems:03 bytes:03 optimizing:03 bits:05 

On Thu, Oct 29, 2009 at 06:07:59PM +0100, Goswin von Brederlow wrote:
> I still can reuse a lot of this. Esspecially the syntax extension
> seems like a good idea. Maybe reduced to bytes instead of bits
> though. I don't intend to use such fine grained structures to need bit
> access.

Take a close look at bitstring.  In all the cases where it can
*statically* determine that accesses are on byte or larger boundaries,
it does *not* do any bitfiddling but uses the most efficient, direct C
calls possible.

We really did spend a lot of time optimizing the bitmatch case.

Rich.

-- 
Richard Jones
Red Hat

