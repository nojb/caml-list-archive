Return-Path: <gilles.ocaml@googlemail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.9 required=5.0 tests=AWL,DNS_FROM_RFC_POST,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 41E22BC37
	for <caml-list@yquem.inria.fr>; Sun, 11 Oct 2009 21:57:29 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AloEAOLV0UrRVd3DkGdsb2JhbACCIzAtjFSKeT8BAQEBCQkMBxMDq0wBBY1VAQaELQ
X-IronPort-AV: E=Sophos;i="4.44,542,1249250400"; 
   d="scan'208";a="38023422"
Received: from mail-qy0-f195.google.com ([209.85.221.195])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 11 Oct 2009 21:57:28 +0200
Received: by qyk33 with SMTP id 33so8193260qyk.29
        for <caml-list@yquem.inria.fr>; Sun, 11 Oct 2009 12:57:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=yuNFKGGZ9dBm0l8jxVEBeDL3i3aJLfLHVxsoFu9bZgA=;
        b=P1o8oxkTmB77oxF6s4dYdemym4PtAzI2ahqefkPs5ccrx7CWEdeJYkCVXJj2wKQ0iW
         Pj0uupIKjzIWMnPGQNO4Y54O5/f9VsHpR9BY7Bt8dP09zOmnI4qCqkGFhW49r5DmJyLM
         lVY6zr1U2WYvC0hbkNIp/dMNhZ/TR0q2QfKFE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=aZ24Ick3hE2y7EGmjT5WpNI8mDxSdAToQlv9eZr8qbqYlZnb2XISpLLq1DyrIaKqAH
         Xod70y4Xv9nCQvTGqqiB0atWu1Pg/uw3SLfgkqx9HoTATNbFzbLP/IymOuPueAuFim+1
         bEbfhWbrzHUiI13NL1pPPQxFLyK83H+UKIH6M=
MIME-Version: 1.0
Received: by 10.229.15.203 with SMTP id l11mr2176489qca.43.1255291046026; Sun, 
	11 Oct 2009 12:57:26 -0700 (PDT)
In-Reply-To: <5160b4200910110824q7998f43ao3d00e94ba7e74b2b@mail.gmail.com>
References: <891bd3390910081840p37e8c786g60b2c15d2c06ae60@mail.gmail.com>
	 <891bd3390910081853m5409c871y35495c6f16e180aa@mail.gmail.com>
	 <5160b4200910110757y47ffad15v70434418cba61f26@mail.gmail.com>
	 <62B782AA-1F44-4207-B037-5C6D1F6CBF50@gmail.com>
	 <5160b4200910110824q7998f43ao3d00e94ba7e74b2b@mail.gmail.com>
Date: Sun, 11 Oct 2009 12:57:25 -0700
Message-ID: <605bf2750910111257h1b2b3f31me95be82ba73b65a3@mail.gmail.com>
Subject: Re: [Caml-list] Re: Improving OCaml's choice of type to display
From: Gilles Pirio <gilles.ocaml@googlemail.com>
To: "caml-list@yquem.inria.fr" <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=0015175ce094e35efb0475ae3841
X-Spam: no; 0.00; ocaml's:01 ocaml:01 val:01 extensively:01 furuse:01 furuse:01 struct:01 struct:01 avoided:01 yaron:01 minsky:01 yminsky:01 yaron:01 minsky:01 hashtbl:01 
Status: O
Content-Length: 15853
Lines: 416

--0015175ce094e35efb0475ae3841
Content-Type: text/plain; charset=ISO-8859-1

On the same topic, I was wondering why the type of the ampl_scalar_app
function below was displayed as ('a -> 'a -> float) -> 'a -> 'a -> float
rather than ('a -> 'a -> float) -> 'a -> ('a -> float). The latter would
make my life easier.

# let ampl_scalar_app f p = if f p p > 1. then fun x->f x p else fun x->f p
x;;
val ampl_scalar_app : ('a -> 'a -> float) -> 'a -> 'a -> float = <fun>

PS: I can imagine this has been discussed extensively before, feel free to
just send my a link to the relevant discussion if that's the case :)

Giles


On Sun, Oct 11, 2009 at 8:24 AM, Jun Furuse <jun.furuse@gmail.com> wrote:

> I have not tested it well but it counts dots and should try to find
> the minimal one.
>
> A problem I have found so far is that it prints something confusing, ex.
>
> module M = struct type t end
> module N = struct type t end
> open M
> open N
>
> let _ = ( 1 : M.t )
>
> >> Error: This expression has type int but an expression was expected of
> type t    (which t ?!?!?)
>
> If there are types M.t and N.t and the both of M and N are opened,
> these types are printed just "t". This can be avoided by testing the
> result name "t" against the current typing envrionment to see it
> really means the original type "M.t". This requires more coding but
> the weekend has ended in the far east already :-)   (It's 0:24 Monday
> now.)
>
> Jun
>
> On Mon, Oct 12, 2009 at 12:12 AM, Yaron Minsky <yminsky@gmail.com> wrote:
> > Cool!  That was quick.
> >
> > Does this patch also implement stephen's fewest-number-of-dots heuristic?
>  I
> > was thinking one nice approach would be fewest-number-of-dots with ties
> > broken by length of final identifier.
> >
> > Y
> >
> > Yaron Minsky
> >
> > On Oct 11, 2009, at 10:57 AM, Jun Furuse <jun.furuse@gmail.com> wrote:
> >
> >> I have quickly wrote a small patch against 3.11.1 for this feature, to
> >> see what it would be like.
> >>
> >>
> http://sites.google.com/a/furuse.info/jun/hacks/other-small-ocaml-patches
> >>
> >> With this patch, path names are printed without opened modules in the
> >> context. It also tries heuristic data type name simplification: if a
> >> variant/record data type is an alias of another data type whose name
> >> is shorter than the original, the printer uses the latter.
> >>
> >> For example:
> >>
> >> # open Hashtbl;;
> >> # let tbl = Hashtbl.create 10;;
> >> val tbl : ('_a, '_b) t = <abstr>      (* not Hashtbl.t, since Hashtbl is
> >> open *)
> >>
> >> # type t = int;;
> >> type t = int
> >> # type long_name = int;;
> >> type long_name = int
> >> # (1 : t);;
> >> - : t = 1                     (* t is the shorter than its original type
> >> int *)
> >> # (1 : long_name);;
> >> - : int = 1                   (* int is shorter name for long_name. t
> >> is even shorter but not aliased unfortunatelly. *)
> >>
> >> I warn you that the patch is very quickly written and not tested well.
> >> Enjoy!
> >>
> >> Jun
> >>
> >> On Fri, Oct 9, 2009 at 10:53 AM, Yaron Minsky <yminsky@gmail.com>
> wrote:
> >>>
> >>> And you can compete to come up with the most innocuous code that comes
> up
> >>> with the longest type.  Here's my current favorite:
> >>>
> >>> # open Option.Monad_infix;;
> >>> # Map.find m 3 >>| fun x -> x + 1;;
> >>> - : int Core.Std.Option.Monad_infix.monad = Some 4
> >>>
> >>> Which of course could be rendered as:
> >>>
> >>> # open Option.Monad_infix;;
> >>> # Map.find m 3 >>| fun x -> x + 1;;
> >>> - : int option = Some 4
> >>>
> >>> y
> >>>
> >>> On Thu, Oct 8, 2009 at 9:40 PM, Yaron Minsky <yminsky@gmail.com>
> wrote:
> >>>>
> >>>> Anyone who plays around with the Core library that Jane Street just
> >>>> released can see showcased a rather ugly detail of how Core's design
> >>>> interacts with how OCaml displays types.  Witness:
> >>>>
> >>>> # Int.of_string;;
> >>>> - : string -> Core.Std.Int.stringable = <fun>
> >>>> # Float.of_string;;
> >>>> - : string -> Core_extended.Std.Float.stringable = <fun>
> >>>>
> >>>> I'd be much happier if this was rendered in the following equally
> >>>> correct
> >>>> and more readable form:
> >>>>
> >>>> # Int.of_string;;
> >>>> - : string -> Int.t = <fun>
> >>>> # Float.of_string;;
> >>>> - : string -> Float.t = <fun>
> >>>>
> >>>> Or even:
> >>>>
> >>>> # Int.of_string;;
> >>>> - : string -> int = <fun>
> >>>> # Float.of_string;;
> >>>> - : string -> float = <fun>
> >>>>
> >>>> And this isn't just an issue in the top-level. The compiler also
> >>>> displays
> >>>> types in the same difficult to read form.  I'm wondering if anyone has
> >>>> some
> >>>> thoughts as to what we can do to make the compiler make better choices
> >>>> here.  There are two issues to overcome:
> >>>>
> >>>> Dropping the module name.  I'd love to give the compiler the hint that
> >>>> Core.Std. could be dropped from the prefix in a context where that
> >>>> module is
> >>>> open.  This is what's done with the pervasives module already, I
> >>>> believe, so
> >>>> it seems like it should be doable here.
> >>>> Choosing shorter names.  This one seems harder, but there are various
> >>>> different possibilities for what type name to print out, and a
> >>>> reasonable
> >>>> heuristic to use might be to pick the shortest one.  Part of the
> reason
> >>>> these issues come up is our use of standardized interface components
> >>>> (that's
> >>>> where the "stringable" type name comes from).  I suspect this one will
> >>>> be
> >>>> hard to fix, sadly.
> >>>>
> >>>> Anyway, we'd be happy with any suggestions on how to improve matters.
> >>>>
> >>>> y
> >>>
> >>>
> >>> _______________________________________________
> >>> Caml-list mailing list. Subscription management:
> >>> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> >>> Archives: http://caml.inria.fr
> >>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >>> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>>
> >>>
> >
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--0015175ce094e35efb0475ae3841
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br>On the same topic, I was wondering why the type of the ampl_scalar_app =
function below was displayed as (&#39;a -&gt; &#39;a -&gt; float) -&gt; &#3=
9;a -&gt; &#39;a -&gt; float rather than (&#39;a -&gt; &#39;a -&gt; float) =
-&gt; &#39;a -&gt; (&#39;a -&gt; float). The latter would make my life easi=
er. <br>
<br># let ampl_scalar_app f p =3D if f p p &gt; 1. then fun x-&gt;f x p els=
e fun x-&gt;f p x;;<br>val ampl_scalar_app : (&#39;a -&gt; &#39;a -&gt; flo=
at) -&gt; &#39;a -&gt; &#39;a -&gt; float =3D &lt;fun&gt;<br><br>PS: I can =
imagine this has been discussed extensively before, feel free to just send =
my a link to the relevant discussion if that&#39;s the case :)<br>
<br>Giles<br><br><br><div class=3D"gmail_quote">On Sun, Oct 11, 2009 at 8:2=
4 AM, Jun Furuse <span dir=3D"ltr">&lt;<a href=3D"mailto:jun.furuse@gmail.c=
om">jun.furuse@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmai=
l_quote" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0p=
t 0pt 0.8ex; padding-left: 1ex;">
I have not tested it well but it counts dots and should try to find<br>
the minimal one.<br>
<br>
A problem I have found so far is that it prints something confusing, ex.<br=
>
<br>
module M =3D struct type t end<br>
module N =3D struct type t end<br>
open M<br>
open N<br>
<br>
let _ =3D ( 1 : M.t )<br>
<br>
&gt;&gt; Error: This expression has type int but an expression was expected=
 of type t =A0 =A0(which t ?!?!?)<br>
<br>
If there are types M.t and N.t and the both of M and N are opened,<br>
these types are printed just &quot;t&quot;. This can be avoided by testing =
the<br>
result name &quot;t&quot; against the current typing envrionment to see it<=
br>
really means the original type &quot;M.t&quot;. This requires more coding b=
ut<br>
the weekend has ended in the far east already :-) =A0 (It&#39;s 0:24 Monday=
<br>
now.)<br>
<font color=3D"#888888"><br>
Jun<br>
</font><div><div></div><div class=3D"h5"><br>
On Mon, Oct 12, 2009 at 12:12 AM, Yaron Minsky &lt;<a href=3D"mailto:yminsk=
y@gmail.com">yminsky@gmail.com</a>&gt; wrote:<br>
&gt; Cool! =A0That was quick.<br>
&gt;<br>
&gt; Does this patch also implement stephen&#39;s fewest-number-of-dots heu=
ristic? =A0I<br>
&gt; was thinking one nice approach would be fewest-number-of-dots with tie=
s<br>
&gt; broken by length of final identifier.<br>
&gt;<br>
&gt; Y<br>
&gt;<br>
&gt; Yaron Minsky<br>
&gt;<br>
&gt; On Oct 11, 2009, at 10:57 AM, Jun Furuse &lt;<a href=3D"mailto:jun.fur=
use@gmail.com">jun.furuse@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; I have quickly wrote a small patch against 3.11.1 for this feature=
, to<br>
&gt;&gt; see what it would be like.<br>
&gt;&gt;<br>
&gt;&gt; <a href=3D"http://sites.google.com/a/furuse.info/jun/hacks/other-s=
mall-ocaml-patches" target=3D"_blank">http://sites.google.com/a/furuse.info=
/jun/hacks/other-small-ocaml-patches</a><br>
&gt;&gt;<br>
&gt;&gt; With this patch, path names are printed without opened modules in =
the<br>
&gt;&gt; context. It also tries heuristic data type name simplification: if=
 a<br>
&gt;&gt; variant/record data type is an alias of another data type whose na=
me<br>
&gt;&gt; is shorter than the original, the printer uses the latter.<br>
&gt;&gt;<br>
&gt;&gt; For example:<br>
&gt;&gt;<br>
&gt;&gt; # open Hashtbl;;<br>
&gt;&gt; # let tbl =3D Hashtbl.create 10;;<br>
&gt;&gt; val tbl : (&#39;_a, &#39;_b) t =3D &lt;abstr&gt; =A0 =A0 =A0(* not=
 Hashtbl.t, since Hashtbl is<br>
&gt;&gt; open *)<br>
&gt;&gt;<br>
&gt;&gt; # type t =3D int;;<br>
&gt;&gt; type t =3D int<br>
&gt;&gt; # type long_name =3D int;;<br>
&gt;&gt; type long_name =3D int<br>
&gt;&gt; # (1 : t);;<br>
&gt;&gt; - : t =3D 1 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (* t is the sh=
orter than its original type<br>
&gt;&gt; int *)<br>
&gt;&gt; # (1 : long_name);;<br>
&gt;&gt; - : int =3D 1 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (* int is shorte=
r name for long_name. t<br>
&gt;&gt; is even shorter but not aliased unfortunatelly. *)<br>
&gt;&gt;<br>
&gt;&gt; I warn you that the patch is very quickly written and not tested w=
ell.<br>
&gt;&gt; Enjoy!<br>
&gt;&gt;<br>
&gt;&gt; Jun<br>
&gt;&gt;<br>
&gt;&gt; On Fri, Oct 9, 2009 at 10:53 AM, Yaron Minsky &lt;<a href=3D"mailt=
o:yminsky@gmail.com">yminsky@gmail.com</a>&gt; wrote:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; And you can compete to come up with the most innocuous code th=
at comes up<br>
&gt;&gt;&gt; with the longest type. =A0Here&#39;s my current favorite:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; # open Option.Monad_infix;;<br>
&gt;&gt;&gt; # Map.find m 3 &gt;&gt;| fun x -&gt; x + 1;;<br>
&gt;&gt;&gt; - : int Core.Std.Option.Monad_infix.monad =3D Some 4<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Which of course could be rendered as:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; # open Option.Monad_infix;;<br>
&gt;&gt;&gt; # Map.find m 3 &gt;&gt;| fun x -&gt; x + 1;;<br>
&gt;&gt;&gt; - : int option =3D Some 4<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; y<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; On Thu, Oct 8, 2009 at 9:40 PM, Yaron Minsky &lt;<a href=3D"ma=
ilto:yminsky@gmail.com">yminsky@gmail.com</a>&gt; wrote:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Anyone who plays around with the Core library that Jane St=
reet just<br>
&gt;&gt;&gt;&gt; released can see showcased a rather ugly detail of how Cor=
e&#39;s design<br>
&gt;&gt;&gt;&gt; interacts with how OCaml displays types. =A0Witness:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; # Int.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; Core.Std.Int.stringable =3D &lt;fun&gt;<b=
r>
&gt;&gt;&gt;&gt; # Float.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; Core_extended.Std.Float.stringable =3D &l=
t;fun&gt;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; I&#39;d be much happier if this was rendered in the follow=
ing equally<br>
&gt;&gt;&gt;&gt; correct<br>
&gt;&gt;&gt;&gt; and more readable form:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; # Int.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; Int.t =3D &lt;fun&gt;<br>
&gt;&gt;&gt;&gt; # Float.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; Float.t =3D &lt;fun&gt;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Or even:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; # Int.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; int =3D &lt;fun&gt;<br>
&gt;&gt;&gt;&gt; # Float.of_string;;<br>
&gt;&gt;&gt;&gt; - : string -&gt; float =3D &lt;fun&gt;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; And this isn&#39;t just an issue in the top-level. The com=
piler also<br>
&gt;&gt;&gt;&gt; displays<br>
&gt;&gt;&gt;&gt; types in the same difficult to read form. =A0I&#39;m wonde=
ring if anyone has<br>
&gt;&gt;&gt;&gt; some<br>
&gt;&gt;&gt;&gt; thoughts as to what we can do to make the compiler make be=
tter choices<br>
&gt;&gt;&gt;&gt; here. =A0There are two issues to overcome:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Dropping the module name. =A0I&#39;d love to give the comp=
iler the hint that<br>
&gt;&gt;&gt;&gt; Core.Std. could be dropped from the prefix in a context wh=
ere that<br>
&gt;&gt;&gt;&gt; module is<br>
&gt;&gt;&gt;&gt; open. =A0This is what&#39;s done with the pervasives modul=
e already, I<br>
&gt;&gt;&gt;&gt; believe, so<br>
&gt;&gt;&gt;&gt; it seems like it should be doable here.<br>
&gt;&gt;&gt;&gt; Choosing shorter names. =A0This one seems harder, but ther=
e are various<br>
&gt;&gt;&gt;&gt; different possibilities for what type name to print out, a=
nd a<br>
&gt;&gt;&gt;&gt; reasonable<br>
&gt;&gt;&gt;&gt; heuristic to use might be to pick the shortest one. =A0Par=
t of the reason<br>
&gt;&gt;&gt;&gt; these issues come up is our use of standardized interface =
components<br>
&gt;&gt;&gt;&gt; (that&#39;s<br>
&gt;&gt;&gt;&gt; where the &quot;stringable&quot; type name comes from). =
=A0I suspect this one will<br>
&gt;&gt;&gt;&gt; be<br>
&gt;&gt;&gt;&gt; hard to fix, sadly.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Anyway, we&#39;d be happy with any suggestions on how to i=
mprove matters.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; y<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt; Caml-list mailing list. Subscription management:<br>
&gt;&gt;&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml=
-list" target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/cam=
l-list</a><br>
&gt;&gt;&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">h=
ttp://caml.inria.fr</a><br>
&gt;&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/=
ocaml_beginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_begi=
nners</a><br>
&gt;&gt;&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" ta=
rget=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;<br>
&gt;<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br>

--0015175ce094e35efb0475ae3841--

