Return-Path: <gilles.ocaml@googlemail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 41F09BC37
	for <caml-list@yquem.inria.fr>; Sun, 11 Oct 2009 23:46:11 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvQEAH/u0UpKfVwaimdsb2JhbACCJS8tjFSKEmc/AQEBCgkMBxEFrAoBBY1VAQaELQ
X-IronPort-AV: E=Sophos;i="4.44,543,1249250400"; 
   d="scan'208";a="38026189"
Received: from qw-out-2122.google.com ([74.125.92.26])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 11 Oct 2009 23:46:09 +0200
Received: by qw-out-2122.google.com with SMTP id 5so1075029qwd.15
        for <caml-list@yquem.inria.fr>; Sun, 11 Oct 2009 14:46:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=7bjjmzG7nkmuFsoLY9ME/6goCl76UfKBjXTNgV/xdHg=;
        b=G2VfKwbM53Zu0qZCDvR18IQjeAkBYw/VT8of7VMDS/HF/CHCGypgcQCwuBGSC7qoYt
         gWGiP46sfu9pxTgIcERRV+6nCom4VkCZYwY1h+68CIIol9UplG9IFunS8bX6AYdc3YRe
         hr8LdQP+/b4zdIgy2Rti9hcUDastyxhTfu/uc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=iy0bPLyuTxwiICsFbqzazpJs7qQnO8vJ2kI5At/hQ0zSZlIhpLR8FOvY8HhmcWYT07
         PTQwksSZxfjWGtt6u7mmamexWOk1qwpzorFeARLFeb15Gy0FucSpWwtRz+8sDu7lrxLH
         Nnws9Um4G1Ok0dNAKFCWcxY1nDH8hwbP8uSos=
MIME-Version: 1.0
Received: by 10.229.15.203 with SMTP id l11mr2187060qca.43.1255297568721; Sun, 
	11 Oct 2009 14:46:08 -0700 (PDT)
In-Reply-To: <200910112317152031791@orange.fr>
References: <891bd3390910081840p37e8c786g60b2c15d2c06ae60@mail.gmail.com>
	 <891bd3390910081853m5409c871y35495c6f16e180aa@mail.gmail.com>
	 <5160b4200910110757y47ffad15v70434418cba61f26@mail.gmail.com>
	 <62B782AA-1F44-4207-B037-5C6D1F6CBF50@gmail.com>
	 <5160b4200910110824q7998f43ao3d00e94ba7e74b2b@mail.gmail.com>
	 <605bf2750910111257h1b2b3f31me95be82ba73b65a3@mail.gmail.com>
	 <200910112317152031791@orange.fr>
Date: Sun, 11 Oct 2009 14:46:08 -0700
Message-ID: <605bf2750910111446m2d4b91cawf4dbadeed1b6ae88@mail.gmail.com>
Subject: Re: [Caml-list] Improving OCaml's choice of type to display
From: Gilles Pirio <gilles.ocaml@googlemail.com>
To: Damien Guichard <alphablock@orange.fr>
Cc: "caml-list@yquem.inria.fr" <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=0015175ce094abcd380475afbdf5
X-Spam: no; 0.00; ocaml's:01 ocaml:01 damien:01 mismatch:01 ocaml:01 val:01 val:01 damien:01 guichard:01 rewriting:01 typer:01 syntax:01 typer:01 semantically:01 ocaml's:01 
Status: O
Content-Length: 24033
Lines: 593

--0015175ce094abcd380475afbdf5
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hey Damien

Sure, I fully understand that both types are equivalent given the rules
governing the application operator. My point was more on the usability side=
,
as the type display is primarily intended at helping the programmer to
quickly figure out type mismatch. So I'd think having a display allowing to
quickly distinguish between the noe and castro functions below would be a
good thing, especially for beginners. I've been using ocaml for a few years
now, and I have to say that it's not a major issue any more - just wanted t=
o
give some feedback about this.

Thanks
Gilles


# let noe a b =3D a;;
val noe : 'a -> 'b -> 'a =3D <fun>
# let castro a =3D fun _ -> a;;
val castro : 'a -> 'b -> 'a =3D <fun>


On Sun, Oct 11, 2009 at 2:17 PM, Damien Guichard <alphablock@orange.fr>wrot=
e:

>
> Hi Gilles,
>
> The type display routine uses right-associativity of the -> operator as a
> rewriting rule.
> Thus *('a -> 'a -> float)* and *'a -> ('a -> float)* are the same type an=
d
> are both displayed as *'a -> 'a -> float*.
>
> The type *'a -> ('a -> float)* means the application will be *(f x) y*whi=
ch is actually the same as
> *f x y* because the application is left-associative.
> The typer system doesn't care about your actual code syntax, and rightly =
so
> because the typer system is about semantic.
> You intend to write *(f x) y,* yet the type system tells you intend to
> write *f x y*, that's quite disturbing at first encounter.
>
> Suffice to say you have to get your head around it.
> Mind the right-associativity of -> and the left-associativity of
> application.
>  Think your code more semantically and less syntactically.
> In the end this type sytem makes you a better programmer.
>
> - *damien*
>
>
>  ------------------------------
>  *En r=E9ponse au message*
> *de :* Gilles Pirio
> *du :* 2009-10-11 21:57:40
> *=C0 :* caml-list@yquem.inria.fr
> *CC :*
> *Sujet :* Re: [Caml-list] Re: Improving OCaml's choice of type to display
>
>
> On the same topic, I was wondering why the type of the ampl_scalar_app
> function below was displayed as ('a -> 'a -> float) -> 'a -> 'a -> float
> rather than ('a -> 'a -> float) -> 'a -> ('a -> float). The latter would
> make my life easier.
>
> # let ampl_scalar_app f p =3D if f p p > 1. then fun x->f x p else fun x-=
>f p
> x;;
> val ampl_scalar_app : ('a -> 'a -> float) -> 'a -> 'a -> float =3D <fun>
>
> PS: I can imagine this has been discussed extensively before, feel free t=
o
> just send my a link to the relevant discussion if that's the case :)
>
> Giles
>
>
> On Sun, Oct 11, 2009 at 8:24 AM, Jun Furuse <jun.furuse@gmail.com> wrote:
>
>> I have not tested it well but it counts dots and should try to find
>> the minimal one.
>>
>> A problem I have found so far is that it prints something confusing, ex.
>>
>> module M =3D struct type t end
>> module N =3D struct type t end
>> open M
>> open N
>>
>> let _ =3D ( 1 : M.t )
>>
>> >> Error: This expression has type int but an expression was expected of
>> type t    (which t ?!?!?)
>>
>> If there are types M.t and N.t and the both of M and N are opened,
>> these types are printed just "t". This can be avoided by testing the
>> result name "t" against the current typing envrionment to see it
>> really means the original type "M.t". This requires more coding but
>> the weekend has ended in the far east already :-)   (It's 0:24 Monday
>> now.)
>>
>> Jun
>>
>> On Mon, Oct 12, 2009 at 12:12 AM, Yaron Minsky <yminsky@gmail.com> wrote=
:
>> > Cool!  That was quick.
>> >
>> > Does this patch also implement stephen's fewest-number-of-dots
>> heuristic?  I
>> > was thinking one nice approach would be fewest-number-of-dots with tie=
s
>> > broken by length of final identifier.
>> >
>> > Y
>> >
>> > Yaron Minsky
>> >
>> > On Oct 11, 2009, at 10:57 AM, Jun Furuse <jun.furuse@gmail.com> wrote:
>> >
>> >> I have quickly wrote a small patch against 3.11.1 for this feature, t=
o
>> >> see what it would be like.
>> >>
>> >>
>> http://sites.google.com/a/furuse.info/jun/hacks/other-small-ocaml-patche=
s
>> >>
>> >> With this patch, path names are printed without opened modules in the
>> >> context. It also tries heuristic data type name simplification: if a
>> >> variant/record data type is an alias of another data type whose name
>> >> is shorter than the original, the printer uses the latter.
>> >>
>> >> For example:
>> >>
>> >> # open Hashtbl;;
>> >> # let tbl =3D Hashtbl.create 10;;
>> >> val tbl : ('_a, '_b) t =3D <abstr>      (* not Hashtbl.t, since Hasht=
bl
>> is
>> >> open *)
>> >>
>> >> # type t =3D int;;
>> >> type t =3D int
>> >> # type long_name =3D int;;
>> >> type long_name =3D int
>> >> # (1 : t);;
>> >> - : t =3D 1                     (* t is the shorter than its original
>> type
>> >> int *)
>> >> # (1 : long_name);;
>> >> - : int =3D 1                   (* int is shorter name for long_name.=
 t
>> >> is even shorter but not aliased unfortunatelly. *)
>> >>
>> >> I warn you that the patch is very quickly written and not tested well=
.
>> >> Enjoy!
>> >>
>> >> Jun
>> >>
>> >> On Fri, Oct 9, 2009 at 10:53 AM, Yaron Minsky <yminsky@gmail.com>
>> wrote:
>> >>>
>> >>> And you can compete to come up with the most innocuous code that com=
es
>> up
>> >>> with the longest type.  Here's my current favorite:
>> >>>
>> >>> # open Option.Monad_infix;;
>> >>> # Map.find m 3 >>| fun x -> x + 1;;
>> >>> - : int Core.Std.Option.Monad_infix.monad =3D Some 4
>> >>>
>> >>> Which of course could be rendered as:
>> >>>
>> >>> # open Option.Monad_infix;;
>> >>> # Map.find m 3 >>| fun x -> x + 1;;
>> >>> - : int option =3D Some 4
>> >>>
>> >>> y
>> >>>
>> >>> On Thu, Oct 8, 2009 at 9:40 PM, Yaron Minsky <yminsky@gmail.com>
>> wrote:
>> >>>>
>> >>>> Anyone who plays around with the Core library that Jane Street just
>> >>>> released can see showcased a rather ugly detail of how Core's desig=
n
>> >>>> interacts with how OCaml displays types.  Witness:
>> >>>>
>> >>>> # Int.of_string;;
>> >>>> - : string -> Core.Std.Int.stringable =3D <fun>
>> >>>> # Float.of_string;;
>> >>>> - : string -> Core_extended.Std.Float.stringable =3D <fun>
>> >>>>
>> >>>> I'd be much happier if this was rendered in the following equally
>> >>>> correct
>> >>>> and more readable form:
>> >>>>
>> >>>> # Int.of_string;;
>> >>>> - : string -> Int.t =3D <fun>
>> >>>> # Float.of_string;;
>> >>>> - : string -> Float.t =3D <fun>
>> >>>>
>> >>>> Or even:
>> >>>>
>> >>>> # Int.of_string;;
>> >>>> - : string -> int =3D <fun>
>> >>>> # Float.of_string;;
>> >>>> - : string -> float =3D <fun>
>> >>>>
>> >>>> And this isn't just an issue in the top-level. The compiler also
>> >>>> displays
>> >>>> types in the same difficult to read form.  I'm wondering if anyone
>> has
>> >>>> some
>> >>>> thoughts as to what we can do to make the compiler make better
>> choices
>> >>>> here.  There are two issues to overcome:
>> >>>>
>> >>>> Dropping the module name.  I'd love to give the compiler the hint
>> that
>> >>>> Core.Std. could be dropped from the prefix in a context where that
>> >>>> module is
>> >>>> open.  This is what's done with the pervasives module already, I
>> >>>> believe, so
>> >>>> it seems like it should be doable here.
>> >>>> Choosing shorter names.  This one seems harder, but there are vario=
us
>> >>>> different possibilities for what type name to print out, and a
>> >>>> reasonable
>> >>>> heuristic to use might be to pick the shortest one.  Part of the
>> reason
>> >>>> these issues come up is our use of standardized interface component=
s
>> >>>> (that's
>> >>>> where the "stringable" type name comes from).  I suspect this one
>> will
>> >>>> be
>> >>>> hard to fix, sadly.
>> >>>>
>> >>>> Anyway, we'd be happy with any suggestions on how to improve matter=
s.
>> >>>>
>> >>>> y
>> >>>
>> >>>
>> >>> _______________________________________________
>> >>> Caml-list mailing list. Subscription management:
>> >>> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>> >>> Archives: http://caml.inria.fr
>> >>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> >>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>> >>>
>> >>>
>> >
>>
>> _______________________________________________
>> Caml-list mailing list. Subscription management:
>> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>> Archives: http://caml.inria.fr
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--0015175ce094abcd380475afbdf5
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hey Damien<br><br>Sure, I fully understand that both types are equivalent g=
iven the rules governing the application operator. My point was more on the=
 usability side, as the type display is primarily intended at helping the p=
rogrammer to quickly figure out type mismatch. So I&#39;d think having a di=
splay allowing to quickly distinguish between the noe and castro functions =
below would be a good thing, especially for beginners. I&#39;ve been using =
ocaml for a few years now, and I have to say that it&#39;s not a major issu=
e any more - just wanted to give some feedback about this.<br>
<br>Thanks<br>Gilles<br><br><br># let noe a b =3D a;;<br>val noe : &#39;a -=
&gt; &#39;b -&gt; &#39;a =3D &lt;fun&gt;<br># let castro a =3D fun _ -&gt; =
a;;<br>val castro : &#39;a -&gt; &#39;b -&gt; &#39;a =3D &lt;fun&gt;<br><br=
><br>
<div class=3D"gmail_quote">On Sun, Oct 11, 2009 at 2:17 PM, Damien Guichard=
 <span dir=3D"ltr">&lt;<a href=3D"mailto:alphablock@orange.fr">alphablock@o=
range.fr</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; p=
adding-left: 1ex;">






<div>
<div><font color=3D"#0000ff" face=3D"Verdana" size=3D"2"></font></div>
<div><font color=3D"#0000ff" face=3D"Verdana" size=3D"2"></font></div>
<div align=3D"left"><font color=3D"#c0c0c0">
<div><font face=3D"Verdana" size=3D"2"></font></div></font></div></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Hi Gilles,</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">The type display routine uses right-=
associativity=20
of the -&gt; operator as a rewriting rule.</font></div>
<div><font face=3D"Verdana" size=3D"2">Thus <i>(&#39;a -&gt; &#39;a -&gt; f=
loat)</i> and=20
<i>&#39;a -&gt; (&#39;a -&gt; float)</i> are the same type </font><font fac=
e=3D"Verdana" size=3D"2">and are both=A0displayed as=A0<i>&#39;a -&gt; &#39=
;a -&gt;=20
float</i>.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">The type=A0<i>&#39;a -&gt; (&#39;a -=
&gt; float)</i>=20
means=A0the application=A0will be <i>(f x) y</i> which is actually the=20
same as=A0<i>f x y</i> because the application is=20
left-associative.</font></div>
<div><font face=3D"Verdana" size=3D"2">The typer system doesn&#39;t care ab=
out your actual=20
code syntax, and rightly so because=A0the typer system is about=20
semantic.</font></div>
<div><font face=3D"Verdana" size=3D"2">You intend to write=A0<i>(f x) y,</i=
> yet=20
the type system tells you intend to write=A0<i>f x y</i>, that&#39;s quite=
=20
disturbing at first encounter.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2">Suffice to say you have to get your =
head around=20
it.</font></div>
<div><font face=3D"Verdana" size=3D"2">Mind the right-associativity of -&gt=
; and the=20
left-associativity of application.</font></div>
<div><font face=3D"Verdana" size=3D"2">
<div><font face=3D"Verdana" size=3D"2">Think your code more semantically an=
d less=20
syntactically.</font></div>In the end=A0this type sytem makes you a better=
=20
programmer.</font></div>
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font color=3D"#000000" face=3D"Verdana" size=3D"2">- <i>damien</i></f=
ont></div>
<div><font color=3D"#000000"></font><font face=3D"Verdana" size=3D"2"></fon=
t>=A0</div>
<div><font face=3D"Verdana" size=3D"2">=A0</font></div>
<div>
<hr>
</div>
<div><font face=3D"Verdana"><font size=3D"2"><i>En r=E9ponse au message</i>=
<br><b>de=20
:</b> Gilles Pirio</font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>du :</b>=20
2009-10-11=A021:57:40</font></font></div><div class=3D"im">
<div><font face=3D"Verdana"><font size=3D"2"><b>=C0 :</b>=20
<a href=3D"mailto:caml-list@yquem.inria.fr" target=3D"_blank">caml-list@yqu=
em.inria.fr</a></font></font></div>
<div><font face=3D"Verdana"><font size=3D"2"><b>CC :</b> </font></font></di=
v>
</div><div><font face=3D"Verdana"><font size=3D"2"><b>Sujet :</b> Re: [Caml=
-list]=20
Re: Improving OCaml&#39;s choice of type to display</font></font></div><div=
><div></div><div class=3D"h5">
<div><font face=3D"Verdana" size=3D"2"></font>=A0</div>
<div><font face=3D"Verdana" size=3D"2"><br>On the same topic, I was wonderi=
ng why the=20
type of the ampl_scalar_app function below was displayed as (&#39;a -&gt; &=
#39;a -&gt;=20
float) -&gt; &#39;a -&gt; &#39;a -&gt; float rather than (&#39;a -&gt; &#39=
;a -&gt; float) -&gt;=20
&#39;a -&gt; (&#39;a -&gt; float). The latter would make my life easier. <b=
r><br># let=20
ampl_scalar_app f p =3D if f p p &gt; 1. then fun x-&gt;f x p else fun x-&g=
t;f p=20
x;;<br>val ampl_scalar_app : (&#39;a -&gt; &#39;a -&gt; float) -&gt; &#39;a=
 -&gt; &#39;a -&gt;=20
float =3D &lt;fun&gt;<br><br>PS: I can imagine this has been discussed exte=
nsively=20
before, feel free to just send my a link to the relevant discussion if that=
&#39;s=20
the case :)<br><br>Giles<br><br><br>
<div class=3D"gmail_quote">On Sun, Oct 11, 2009 at 8:24 AM, Jun Furuse <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:jun.furuse@gmail.com" target=3D"_blank"=
>jun.furuse@gmail.com</a>&gt;</span>=20
wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid rgb(204, =
204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">I=20
  have not tested it well but it counts dots and should try to find<br>the=
=20
  minimal one.<br><br>A problem I have found so far is that it prints somet=
hing=20
  confusing, ex.<br><br>module M =3D struct type t end<br>module N =3D stru=
ct type t=20
  end<br>open M<br>open N<br><br>let _ =3D ( 1 : M.t )<br><br>&gt;&gt; Erro=
r: This=20
  expression has type int but an expression was expected of type t =A0=20
  =A0(which t ?!?!?)<br><br>If there are types M.t and N.t and the both of =
M=20
  and N are opened,<br>these types are printed just &quot;t&quot;. This can=
 be avoided by=20
  testing the<br>result name &quot;t&quot; against the current typing envri=
onment to see=20
  it<br>really means the original type &quot;M.t&quot;. This requires more =
coding=20
  but<br>the weekend has ended in the far east already :-) =A0 (It&#39;s 0:=
24=20
  Monday<br>now.)<br><font color=3D"#888888"><br>Jun<br></font>
  <div>
  <div></div>
  <div><br>On Mon, Oct 12, 2009 at 12:12 AM, Yaron Minsky &lt;<a href=3D"ma=
ilto:yminsky@gmail.com" target=3D"_blank">yminsky@gmail.com</a>&gt; wrote:<=
br>&gt; Cool!=20
  =A0That was quick.<br>&gt;<br>&gt; Does this patch also implement stephen=
&#39;s=20
  fewest-number-of-dots heuristic? =A0I<br>&gt; was thinking one nice=20
  approach would be fewest-number-of-dots with ties<br>&gt; broken by lengt=
h of=20
  final identifier.<br>&gt;<br>&gt; Y<br>&gt;<br>&gt; Yaron=20
  Minsky<br>&gt;<br>&gt; On Oct 11, 2009, at 10:57 AM, Jun Furuse &lt;<a hr=
ef=3D"mailto:jun.furuse@gmail.com" target=3D"_blank">jun.furuse@gmail.com</=
a>&gt;=20
  wrote:<br>&gt;<br>&gt;&gt; I have quickly wrote a small patch against 3.1=
1.1=20
  for this feature, to<br>&gt;&gt; see what it would be=20
  like.<br>&gt;&gt;<br>&gt;&gt; <a href=3D"http://sites.google.com/a/furuse=
.info/jun/hacks/other-small-ocaml-patches" target=3D"_blank">http://sites.g=
oogle.com/a/furuse.info/jun/hacks/other-small-ocaml-patches</a><br>&gt;&gt;=
<br>
&gt;&gt;=20
  With this patch, path names are printed without opened modules in=20
  the<br>&gt;&gt; context. It also tries heuristic data type name=20
  simplification: if a<br>&gt;&gt; variant/record data type is an alias of=
=20
  another data type whose name<br>&gt;&gt; is shorter than the original, th=
e=20
  printer uses the latter.<br>&gt;&gt;<br>&gt;&gt; For=20
  example:<br>&gt;&gt;<br>&gt;&gt; # open Hashtbl;;<br>&gt;&gt; # let tbl =
=3D=20
  Hashtbl.create 10;;<br>&gt;&gt; val tbl : (&#39;_a, &#39;_b) t =3D &lt;ab=
str&gt; =A0=20
  =A0 =A0(* not Hashtbl.t, since Hashtbl is<br>&gt;&gt; open=20
  *)<br>&gt;&gt;<br>&gt;&gt; # type t =3D int;;<br>&gt;&gt; type t =3D=20
  int<br>&gt;&gt; # type long_name =3D int;;<br>&gt;&gt; type long_name =3D=
=20
  int<br>&gt;&gt; # (1 : t);;<br>&gt;&gt; - : t =3D 1 =A0 =A0 =A0 =A0=20
  =A0 =A0 =A0 =A0 =A0 =A0 (* t is the shorter than its=20
  original type<br>&gt;&gt; int *)<br>&gt;&gt; # (1 : long_name);;<br>&gt;&=
gt; -=20
  : int =3D 1 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (*=20
  int is shorter name for long_name. t<br>&gt;&gt; is even shorter but not=
=20
  aliased unfortunatelly. *)<br>&gt;&gt;<br>&gt;&gt; I warn you that the pa=
tch=20
  is very quickly written and not tested well.<br>&gt;&gt;=20
  Enjoy!<br>&gt;&gt;<br>&gt;&gt; Jun<br>&gt;&gt;<br>&gt;&gt; On Fri, Oct 9,=
 2009=20
  at 10:53 AM, Yaron Minsky &lt;<a href=3D"mailto:yminsky@gmail.com" target=
=3D"_blank">yminsky@gmail.com</a>&gt;=20
  wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And you can compete to come up wit=
h the=20
  most innocuous code that comes up<br>&gt;&gt;&gt; with the longest type.=
=20
  =A0Here&#39;s my current favorite:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; # open=
=20
  Option.Monad_infix;;<br>&gt;&gt;&gt; # Map.find m 3 &gt;&gt;| fun x -&gt;=
 x +=20
  1;;<br>&gt;&gt;&gt; - : int Core.Std.Option.Monad_infix.monad =3D Some=20
  4<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Which of course could be rendered=20
  as:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; # open=20
  Option.Monad_infix;;<br>&gt;&gt;&gt; # Map.find m 3 &gt;&gt;| fun x -&gt;=
 x +=20
  1;;<br>&gt;&gt;&gt; - : int option =3D Some 4<br>&gt;&gt;&gt;<br>&gt;&gt;=
&gt;=20
  y<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Oct 8, 2009 at 9:40 PM, Yaron M=
insky=20
  &lt;<a href=3D"mailto:yminsky@gmail.com" target=3D"_blank">yminsky@gmail.=
com</a>&gt;=20
  wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Anyone who plays around wi=
th=20
  the Core library that Jane Street just<br>&gt;&gt;&gt;&gt; released can s=
ee=20
  showcased a rather ugly detail of how Core&#39;s design<br>&gt;&gt;&gt;&g=
t;=20
  interacts with how OCaml displays types.=20
  =A0Witness:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; #=20
  Int.of_string;;<br>&gt;&gt;&gt;&gt; - : string -&gt; Core.Std.Int.stringa=
ble =3D=20
  &lt;fun&gt;<br>&gt;&gt;&gt;&gt; # Float.of_string;;<br>&gt;&gt;&gt;&gt; -=
 :=20
  string -&gt; Core_extended.Std.Float.stringable =3D=20
  &lt;fun&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;d be much happi=
er if=20
  this was rendered in the following equally<br>&gt;&gt;&gt;&gt;=20
  correct<br>&gt;&gt;&gt;&gt; and more readable=20
  form:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; #=20
  Int.of_string;;<br>&gt;&gt;&gt;&gt; - : string -&gt; Int.t =3D=20
  &lt;fun&gt;<br>&gt;&gt;&gt;&gt; # Float.of_string;;<br>&gt;&gt;&gt;&gt; -=
 :=20
  string -&gt; Float.t =3D &lt;fun&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&=
gt; Or=20
  even:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; #=20
  Int.of_string;;<br>&gt;&gt;&gt;&gt; - : string -&gt; int =3D=20
  &lt;fun&gt;<br>&gt;&gt;&gt;&gt; # Float.of_string;;<br>&gt;&gt;&gt;&gt; -=
 :=20
  string -&gt; float =3D &lt;fun&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt=
; And=20
  this isn&#39;t just an issue in the top-level. The compiler=20
  also<br>&gt;&gt;&gt;&gt; displays<br>&gt;&gt;&gt;&gt; types in the same=
=20
  difficult to read form. =A0I&#39;m wondering if anyone has<br>&gt;&gt;&gt=
;&gt;=20
  some<br>&gt;&gt;&gt;&gt; thoughts as to what we can do to make the compil=
er=20
  make better choices<br>&gt;&gt;&gt;&gt; here. =A0There are two issues to=
=20
  overcome:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Dropping the module nam=
e.=20
  =A0I&#39;d love to give the compiler the hint that<br>&gt;&gt;&gt;&gt;=20
  Core.Std. could be dropped from the prefix in a context where=20
  that<br>&gt;&gt;&gt;&gt; module is<br>&gt;&gt;&gt;&gt; open. =A0This is=
=20
  what&#39;s done with the pervasives module already, I<br>&gt;&gt;&gt;&gt;=
 believe,=20
  so<br>&gt;&gt;&gt;&gt; it seems like it should be doable=20
  here.<br>&gt;&gt;&gt;&gt; Choosing shorter names. =A0This one seems harde=
r,=20
  but there are various<br>&gt;&gt;&gt;&gt; different possibilities for wha=
t=20
  type name to print out, and a<br>&gt;&gt;&gt;&gt;=20
  reasonable<br>&gt;&gt;&gt;&gt; heuristic to use might be to pick the shor=
test=20
  one. =A0Part of the reason<br>&gt;&gt;&gt;&gt; these issues come up is ou=
r=20
  use of standardized interface components<br>&gt;&gt;&gt;&gt;=20
  (that&#39;s<br>&gt;&gt;&gt;&gt; where the &quot;stringable&quot; type nam=
e comes from).=20
  =A0I suspect this one will<br>&gt;&gt;&gt;&gt; be<br>&gt;&gt;&gt;&gt; har=
d=20
  to fix, sadly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Anyway, we&#39;d b=
e happy=20
  with any suggestions on how to improve=20
  matters.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;=20
  y<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;=20
  _______________________________________________<br>&gt;&gt;&gt; Caml-list=
=20
  mailing list. Subscription management:<br>&gt;&gt;&gt; <a href=3D"http://=
yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=3D"_blank">http:/=
/yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>&gt;&gt;&gt;=20
  Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.=
inria.fr</a><br>&gt;&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.=
yahoo.com/group/ocaml_beginners" target=3D"_blank">http://groups.yahoo.com/=
group/ocaml_beginners</a><br>
&gt;&gt;&gt;=20
  Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_bl=
ank">http://caml.inria.fr/bin/caml-bugs</a><br>&gt;&gt;&gt;<br>&gt;&gt;&gt;=
<br>&gt;<br><br>_______________________________________________<br>Caml-lis=
t=20
  mailing list. Subscription management:<br><a href=3D"http://yquem.inria.f=
r/cgi-bin/mailman/listinfo/caml-list" target=3D"_blank">http://yquem.inria.=
fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives:=20
  <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.inria.fr</=
a><br>Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_b=
eginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</=
a><br>
Bug=20
  reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank"=
>http://caml.inria.fr/bin/caml-bugs</a><br></div></div></blockquote></div><=
br></font></div>
</div></div><br>_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br></blockquote></div><br>

--0015175ce094abcd380475afbdf5--

