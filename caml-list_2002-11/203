Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA24937; Fri, 15 Nov 2002 01:55:18 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA24940 for <caml-list@pauillac.inria.fr>; Fri, 15 Nov 2002 01:55:17 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id gAF0tFX13546
	for <caml-list@inria.fr>; Fri, 15 Nov 2002 01:55:16 +0100 (MET)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id JAA07159;
	Fri, 15 Nov 2002 09:55:08 +0900 (JST)
To: checker@d6.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] ocamlc linking loads dlls?
In-Reply-To: <4.3.2.7.2.20021114112057.03313b40@localhost>
References: <20021114160348.B9597@pauillac.inria.fr>
	<009301c28c12$4dcee5a0$3c00a8c0@warp>
	<4.3.2.7.2.20021114112057.03313b40@localhost>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20021115095508R.garrigue@kurims.kyoto-u.ac.jp>
Date: Fri, 15 Nov 2002 09:55:08 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 21
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Chris Hecker <checker@d6.com>

> >That point can be resolved by calling LoadLibraryEx with the
> >DONT_RESOLVE_DLL_REFERENCE flag.
> >According to MS docs, this prevent the call of DllMain.
> 
> That's better, but it still requires the dll to be available.

I don't see your point.
All the dlls you mention in ocaml link are supposed to be stub dlls.
As you write them for your caml program, they are going to be
available. If more dlls are needed, they are required by dependencies
in those dlls, and this is what the above flag is supposed to disable.
This looks fine.

However, it might still be simpler to a compiler flag to disable all
dll checking when linking. That's trivial. But if you don't know what
you do, you're going to have runtime errors later, so this is not a
reasonable default.

Jacques Garrigue
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

