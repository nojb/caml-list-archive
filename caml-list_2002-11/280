Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA29691; Sun, 24 Nov 2002 22:10:53 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA29551 for <caml-list@pauillac.inria.fr>; Sun, 24 Nov 2002 22:10:52 +0100 (MET)
Received: from t2.fast.net.uk (ns1.fast.net.uk [212.42.162.2])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id gAOLAq121600
	for <caml-list@inria.fr>; Sun, 24 Nov 2002 22:10:52 +0100 (MET)
Received: from htec.demon.co.uk (adsl-212-42-169-63.fast.net.uk [212.42.169.63])
	by t2.fast.net.uk (8.11.6/8.11.4) with ESMTP id gAOLAj578187
	for <caml-list@inria.fr>; Sun, 24 Nov 2002 21:10:45 GMT
Message-ID: <3DE14044.8050907@htec.demon.co.uk>
Date: Sun, 24 Nov 2002 21:10:28 +0000
From: Christopher Quinn <cq@htec.demon.co.uk>
User-Agent: Mozilla/4.61 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en-us, en
MIME-Version: 1.0
CC: caml-list@inria.fr
Subject: Re: [Caml-list] Why systhreads?
References: <20021123090806.GA633@la.iki.fi>	<4.3.2.7.2.20021124093204.039731b8@localhost> <15841.5801.232036.876630@hector.lesours>
In-Reply-To: <20021123090806.GA633@la.iki.fi>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

amazingly the threading of caml was done back in '93!
here is the paper on it:
http://pauillac.inria.fr/~xleroy/publi/concurrent-gc.ps.gz

but the runtime of the current distro is not so threaded. parallelism is limited to those system functions (for I/O) in the C source files you see surrounded by enter_blocking_section()/leave_blocking_section().
these functions mask whether a new, real thread is created for the duration of the call, or the descriptor is given to select() in the case of bytecode. i think they enforce the 'global lock' on the runtime.

i imagine the performance cost of threading the runtime is rather too high (just what is it that makes java so slow anyway - a multitude of resource locks? )
 
my particular wish is to see the runtime with a compile option to eliminate static global state (make it thread local?) to enable multiple instances of the runtime to operate in the same address space, albeit completely independently.

- chris

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

