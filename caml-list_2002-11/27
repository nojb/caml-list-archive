Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA29179; Mon, 4 Nov 2002 08:46:41 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA06762 for caml-list@pauillac.inria.fr; Mon, 4 Nov 2002 08:46:40 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA07362 for <caml-list@pauillac.inria.fr>; Sun, 3 Nov 2002 12:43:15 +0100 (MET)
Received: from mallaury.noc.nerim.net (mallaury.noc.nerim.net [62.4.17.82])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id gA3BhED05948
	for <caml-list@inria.fr>; Sun, 3 Nov 2002 12:43:14 +0100 (MET)
Received: from chinon (jmarant.net1.nerim.net [62.212.105.6])
	by mallaury.noc.nerim.net (Postfix) with ESMTP id 61CE662D04
	for <caml-list@inria.fr>; Sun,  3 Nov 2002 12:43:13 +0100 (CET)
Received: by chinon (Postfix, from userid 1000)
	id BB87F818256; Sun,  3 Nov 2002 12:43:29 +0100 (CET)
To: caml-list@inria.fr
Subject: Re: [Caml-list] Open types and methods
Message-ID: <20021103105727.GB10959@lordsoth.takhisis.org>
From: jmarant@nerim.net (=?iso-8859-15?q?J=E9r=F4me?= Marant)
Date: Sun, 03 Nov 2002 12:43:29 +0100
In-Reply-To: <H4YTMS$C4E6659DF148E1A2F414D7F7702CE2F0@laposte.net> ("poinca"'s
 message of "Sat,  2 Nov 2002 21:16:04 +0100")
Lines: 32
User-Agent: Gnus/5.090007 (Oort Gnus v0.07) Emacs/21.2 (i386-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

>On Sun, Nov 03, 2002 at 11:30:36AM +0100, J?r?me Marant wrote:
>>   I know that I cannot use open types as method parameter types,
>>   like:
>> 
>>   method foo (w : #mother) = ....
>> 
>>   So, how can I pass to a method an object of a given class or
>>   of its inherited classes, i.e. how to work this limitation
>>   around?
>
> Just define the method as:
>
>   method foo (w: #mother) = ...

  I guess you mean:

  method foo (w : mother) ?

> And cast the object when invoking foo:
>
>   obj#foo (son :> mother)
>

  Thanks.

  Cheers,

-- 
Jérôme Marant

http://marant.org
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

