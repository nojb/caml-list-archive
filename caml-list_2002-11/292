Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA25611; Mon, 25 Nov 2002 15:20:09 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA18752 for <caml-list@pauillac.inria.fr>; Mon, 25 Nov 2002 15:20:05 +0100 (MET)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id gAPEK4114457;
	Mon, 25 Nov 2002 15:20:04 +0100 (MET)
Received: from fichte.ai.univie.ac.at (markus@localhost [127.0.0.1])
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian -4) with ESMTP id gAPEK26K027542;
	Mon, 25 Nov 2002 15:20:02 +0100
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian -4) id gAPEK2f4027541;
	Mon, 25 Nov 2002 15:20:02 +0100
Date: Mon, 25 Nov 2002 15:20:02 +0100
From: Markus Mottl <markus@oefai.at>
To: Xavier Leroy <xavier.leroy@inria.fr>
Cc: Lauri Alanko <la@iki.fi>, caml-list@inria.fr
Subject: Re: [Caml-list] Why systhreads?
Message-ID: <20021125142002.GC26548@fichte.ai.univie.ac.at>
Mail-Followup-To: Xavier Leroy <xavier.leroy@inria.fr>,
	Lauri Alanko <la@iki.fi>, caml-list@inria.fr
References: <20021123090806.GA633@la.iki.fi> <20021125110133.A12077@pauillac.inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20021125110133.A12077@pauillac.inria.fr>
User-Agent: Mutt/1.4i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 25 Nov 2002, Xavier Leroy wrote:
> In summary: there is no SMP support in OCaml, and it is very very
> unlikely that there will ever be.  If you're into parallelism, better
> investigate message-passing interfaces.

To make at least some users happy: it is indeed possible to exploit
SMP-machines with native threads in OCaml, but those benefits only occur
when calling external functions that do not interfere with the OCaml
runtime. E.g. LACAML (the LAPACK-interface for OCaml) makes use of this,
which means that you can, say, crunch several matrices in parallel. Due
to the elegant handling of threads in OCaml, this is much nicer to do
than in C.

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

