Return-Path: <arthur.breitman@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 75D977F720
	for <caml-list@sympa.inria.fr>; Mon, 14 Apr 2014 21:32:39 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  arthur.breitman@gmail.com) identity=pra;
  client-ip=209.85.217.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="arthur.breitman@gmail.com";
  x-sender="arthur.breitman@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  arthur.breitman@gmail.com designates 209.85.217.180 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.217.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="arthur.breitman@gmail.com";
  x-sender="arthur.breitman@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lb0-f180.google.com) identity=helo;
  client-ip=209.85.217.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="arthur.breitman@gmail.com";
  x-sender="postmaster@mail-lb0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiMDAA83TFPRVdm0Ymdsb2JhbABZgwY7V4MQqR2ODIh0gRwIFgMWCwsJPIIlAQEBAwEjBBkBGxILAQMBCwYDAgsNDR0CAiIBEQEFAQoSBhMSh1UBAwkIDYxdkAuMDlGDDpdiChknAwoVT4V/EQEFDI5eBAeCb4FJBIlcixiDbYE2jx4YKYR+Hg
X-IPAS-Result: AiMDAA83TFPRVdm0Ymdsb2JhbABZgwY7V4MQqR2ODIh0gRwIFgMWCwsJPIIlAQEBAwEjBBkBGxILAQMBCwYDAgsNDR0CAiIBEQEFAQoSBhMSh1UBAwkIDYxdkAuMDlGDDpdiChknAwoVT4V/EQEFDI5eBAeCb4FJBIlcixiDbYE2jx4YKYR+Hg
X-IronPort-AV: E=Sophos;i="4.97,858,1389740400"; 
   d="scan'208";a="68212473"
Received: from mail-lb0-f180.google.com ([209.85.217.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 14 Apr 2014 21:32:38 +0200
Received: by mail-lb0-f180.google.com with SMTP id 10so5961683lbg.39
        for <caml-list@inria.fr>; Mon, 14 Apr 2014 12:32:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=CzGVTC3HpK6yhA3JritdaPfJLmiMtBYuClv1v2LIsvw=;
        b=SORdsE1662mvlhkycd8oKl4z33RVSSWfluQiFm1sAf0q4RBXTxHm5E/ElfgP9z3PQT
         dc1XX6iH4rmvZPGYbZKD3sjWf1yNRhAMJJpvTrHQ9eUh0kYcmo4BOr28IB9gZUMZKAYc
         MHZPuhplzb6fb24MNO2gso73vfQ8thpMksmAsZkOk/l4De2Tep74zvGeCGe6bfSQMD3d
         ap79yiDYy9zFnLPQY8z95Tw+AbTBZECkwrXptsgxSXFDd9hBQR95SvZeYVGnHbrL+EdP
         46tNla8zluWx4i6WK/jNC5HyKe6RStRVO02lf84PXwEYlIxUWSScrmc1Z7FX6g2z8zAC
         gdhQ==
X-Received: by 10.153.4.134 with SMTP id ce6mr30738061lad.21.1397503958656;
 Mon, 14 Apr 2014 12:32:38 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.114.158.130 with HTTP; Mon, 14 Apr 2014 12:32:18 -0700 (PDT)
In-Reply-To: <20140414081214.GD25532@frosties>
References: <CAAYUt0P4AzcYPbNLYsHRpCnBGa=oJT3MRfKwZv-wE4vv-JXNkw@mail.gmail.com>
 <20140414081214.GD25532@frosties>
From: Arthur Breitman <arthur.breitman@gmail.com>
Date: Mon, 14 Apr 2014 13:32:18 -0600
Message-ID: <CAAYUt0OA_59j+E70TWAgDq+2dWStFOLgNa=NJku-jtQ7y_7nXA@mail.gmail.com>
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1134de96072a4704f705bff4
Subject: Re: [Caml-list] Keeping A big data optimization problem functional

--001a1134de96072a4704f705bff4
Content-Type: text/plain; charset=UTF-8

Responses in-line

On Mon, Apr 14, 2014 at 2:12 AM, Goswin von Brederlow <goswin-v-b@web.de>wrote:

> On Sun, Apr 13, 2014 at 11:25:18PM -0600, Arthur Breitman wrote:
> > Hello all,
>
> Another structure I'm dealing with is a key value store, whose size is on
> > the same order of magnitude as the size of the data above. Initially,
> this
> > key-value store is empty.
>
> You probably don't expect to keep 1TB data in ram. Does the key-value
> store just reference values in the DB?


Indeed it does. That's part of the difficulty.


 > I am given an "apply" function that, for a given key-value store and for
> a
> > given node in the tree produces a new key-value store. Typically by
> > modifying a few keys in the key-value store. The amount of bits changed
> is
> > on the same order of magnitude as the size of the node. When I reach a
> leaf
> > of the tree, I can compute the optimality of that leaf from the state of
> > the key-value store. I want to find the best leaf.
>
> Not sure what you mean there. Maybe you could give an example with a
> small data set (maybe 10 keys).
>

It would be hard to make it a small example, but abstractly I have:

type node = {value: string; children: node list option}
module type Context = begin
  type t
  val apply: t -> node -> t
  val get: t -> string -> string option
  val set: t -> string -> string -> t
  val fitness -> int
  val empty -> t
end

Given a tree of nodes, and starting with Context.empty find the leaf node
with the highest fitness. You can think of every node in the tree as an
operation acting on the context.


>
> Wouldn't a simple Map work as your key-value store? The apply function
> would then modify the map, creating a new map that shares most of the
> unchanged data with the original map. That way keeping the results of
> many apply functions in memory should be possible and applying should
> be fast.
>

It would if I didn't potentially have a terabyte of data.



>
> But if memory becomes a problem then you probably want to use some
> form of B-Tree to.
>
> MfG
>         Goswin
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>



-- 
Arthur Breitman

--001a1134de96072a4704f705bff4
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Responses in-line<div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On Mon, Apr 14, 2014 at 2:12 AM, Goswin von Brederlow <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:goswin-v-b@web.de" target=3D"_blank">go=
swin-v-b@web.de</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On Sun, Apr 13, 2014 at 11:2=
5:18PM -0600, Arthur Breitman wrote:<br>
&gt; Hello all,=C2=A0</div></blockquote><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div=
 class=3D"">&gt; Another structure I&#39;m dealing with is a key value stor=
e, whose size is on<br>


&gt; the same order of magnitude as the size of the data above. Initially, =
this<br>
&gt; key-value store is empty.<br>
<br>
</div>You probably don&#39;t expect to keep 1TB data in ram. Does the key-v=
alue<br>
store just reference values in the DB?</blockquote><div>=C2=A0</div><div>In=
deed it does. That&#39;s part of the difficulty.</div><div><br></div><div><=
br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex">

<div class=3D"">
&gt; I am given an &quot;apply&quot; function that, for a given key-value s=
tore and for a<br>
&gt; given node in the tree produces a new key-value store. Typically by<br>
&gt; modifying a few keys in the key-value store. The amount of bits change=
d is<br>
&gt; on the same order of magnitude as the size of the node. When I reach a=
 leaf<br>
&gt; of the tree, I can compute the optimality of that leaf from the state =
of<br>
&gt; the key-value store. I want to find the best leaf.<br>
<br>
</div>Not sure what you mean there. Maybe you could give an example with a<=
br>
small data set (maybe 10 keys).<br></blockquote><div><br></div><div>It woul=
d be hard to make it a small example, but abstractly I have:</div><div><br>=
</div><div>type node =3D {value: string; children: node list option} =C2=A0=
</div>

<div>module type Context =3D begin</div><div>=C2=A0 type t</div><div>=C2=A0=
 val apply: t -&gt; node -&gt; t=C2=A0</div><div>=C2=A0 val get: t -&gt; st=
ring -&gt; string option=C2=A0</div><div>=C2=A0 val set: t -&gt; string -&g=
t; string -&gt; t</div><div>

=C2=A0 val fitness -&gt; int</div><div>=C2=A0 val empty -&gt; t</div><div>e=
nd</div><div><br></div><div>Given a tree of nodes, and starting with Contex=
t.empty find the leaf node with the highest fitness. You can think of every=
 node in the tree as an operation acting on the context.</div>

<div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8=
ex;border-left:1px #ccc solid;padding-left:1ex"><div><div class=3D"h5">
<br>
</div></div>Wouldn&#39;t a simple Map work as your key-value store? The app=
ly function<br>
would then modify the map, creating a new map that shares most of the<br>
unchanged data with the original map. That way keeping the results of<br>
many apply functions in memory should be possible and applying should<br>
be fast.<br></blockquote><div><br></div><div>It would if I didn&#39;t poten=
tially have a terabyte of data.</div><div><br></div><div>=C2=A0</div><block=
quote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc=
 solid;padding-left:1ex">


<br>
But if memory becomes a problem then you probably want to use some<br>
form of B-Tree to.<br>
<br>
MfG<br>
<span class=3D"HOEnZb"><font color=3D"#888888">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
Goswin<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=
<div>Arthur Breitman</div>
</div></div>

--001a1134de96072a4704f705bff4--
