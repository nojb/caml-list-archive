Return-Path: <gava@univ-paris12.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_FAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id C0EC5BC69
	for <caml-list@yquem.inria.fr>; Sun,  5 Nov 2006 01:05:33 +0100 (CET)
Received: from smtp-msa-out19.orange.fr (smtp19.orange.fr [80.12.242.1])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id kA505XHk007538
	for <caml-list@yquem.inria.fr>; Sun, 5 Nov 2006 01:05:33 +0100
Received: from nono (AMontsouris-104-1-5-90.w80-11.abo.wanadoo.fr [80.11.105.90])
	by mwinf1904.orange.fr (SMTP Server) with SMTP id C15E91C0009A;
	Sun,  5 Nov 2006 01:05:32 +0100 (CET)
X-ME-UUID: 20061105000532792.C15E91C0009A@mwinf1904.orange.fr
Message-ID: <01cd01c7006e$fb999f20$0100a8c0@mshome.net>
From: =?iso-8859-1?Q?Fr=E9d=E9ric_Gava?= <gava@univ-paris12.fr>
To: "skaller" <skaller@users.sourceforge.net>
Cc: <caml-list@yquem.inria.fr>
References: <1161999192.13607.10.camel@rosella.wigram>
Subject: Re: [Caml-list] Ocamlp3l
Date: Sun, 5 Nov 2006 01:11:46 +0100
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.50.4133.2400
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
X-Miltered: at discorde with ID 454D2ACD.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; gava:01 gava:01 ocaml:01 12.:98 homepages:98 mic:98 caml-list:01 algorithm:01 implemented:02 implemented:02 programming:03 programming:03 frederic:03 frederic:03 library:03 

Hi,

> Does any one here know about Ocamlp3l:

OCamlP3L is a library for OCaml for parallel skeleton programming (P3L
skeletons). A parallel skeleton (also know as algorithm skeleton) is a
"function" that could be implemented in parallel (the goal is to have a good
set of such function : "easy" to be implemented and efficient and can
express many parallel problems).

For example, List.map. The list could be distributed on the processors and
Map could be apply in parallel (if there are no side effects).

You should read the papers of Roberto Di Cosmo (for example in the revue
"parallel programming") about OCamlP3L and go to this web page (of Murray
Cole, the "father" of parallel skeletons) about skeleton programming

http://homepages.inf.ed.ac.uk/mic/Skeletons/index.html

Frédéric Gava

