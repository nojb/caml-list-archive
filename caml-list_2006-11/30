Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 70E7DBC68
	for <caml-list@yquem.inria.fr>; Tue,  7 Nov 2006 01:00:13 +0100 (CET)
Received: from pih-relay04.plus.net (pih-relay04.plus.net [212.159.14.131])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id kA700C6h008671
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 7 Nov 2006 01:00:13 +0100
Received: from [80.229.56.224] (helo=[10.0.0.5])
	 by pih-relay04.plus.net with esmtp (Exim) id 1GhENv-0006D5-TC
	for caml-list@yquem.inria.fr; Tue, 07 Nov 2006 00:00:12 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] parameterized pattern
Date: Mon, 6 Nov 2006 23:58:54 +0000
User-Agent: KMail/1.9.5
References: <454FA5F8.5030106@hq.idt.net>
In-Reply-To: <454FA5F8.5030106@hq.idt.net>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200611062358.54696.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 454FCC8C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; annotations:01 ocaml's:01 unify:01 inference:01 val:01 ocaml:01 frog:98 polymorphic:01 wrote:01 caml-list:01 variant:02 tuple:02 caml:02 objective:02 string:02 

On Monday 06 November 2006 21:15, Serge Aleynikov wrote:
> Could anyone point at a suitable resource?

I wasn't even aware that you could add type annotations inside a pattern. Your 
example will not work simply because OCaml's type system will not allow float 
to unify with string. You need some context where type inference will allow 
different possibilities, like a tuple containing both a float and a string:

# let f = function
  | (y : float), _ -> print_float y
  | _, (s : string) -> print_string s;;

or a polymorphic variant containing either a float or a string:

# let f = function
  | `F (y : float) -> print_float y
  | `S (s : string) -> print_string s;;
val f : [< `F of float | `S of string ] -> unit = <fun>

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

