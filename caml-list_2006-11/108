Return-Path: <Ralf.Wildenhues@gmx.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.3 required=5.0 tests=SPF_FAIL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id BA7FEBC0A
	for <caml-list@yquem.inria.fr>; Thu, 16 Nov 2006 22:21:27 +0100 (CET)
Received: from iam.uni-bonn.de (nic.iam.uni-bonn.de [131.220.223.1])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id kAGLLRYn011059
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 16 Nov 2006 22:21:27 +0100
Received: (qmail 3622 invoked by uid 1008); 16 Nov 2006 21:21:24 -0000
Received: from 84.44.158.175 by hermes (envelope-from <Ralf.Wildenhues@gmx.de>, uid 89) with qmail-scanner-1.25 
 (uvscan: v4.4.00/v4896. spamassassin: 3.1.3.  
 Clear:RC:1(84.44.158.175):. 
 Processed in 1.428503 secs); 16 Nov 2006 21:21:24 -0000
Received: from xdsl-84-44-158-175.netcologne.de (HELO localhost.localdomain) (wildenhu@84.44.158.175)
  by hermes.iam.uni-bonn.de with (DES-CBC3-SHA encrypted) SMTP; 16 Nov 2006 21:21:22 -0000
Received: from ralf by localhost.localdomain with local (Exim 4.63)
	(envelope-from <Ralf.Wildenhues@gmx.de>)
	id 1Gkofb-0001eg-CE; Thu, 16 Nov 2006 22:21:15 +0100
Date: Thu, 16 Nov 2006 22:21:15 +0100
From: Ralf Wildenhues <Ralf.Wildenhues@gmx.de>
To: Guillaume Rousse <Guillaume.Rousse@inria.fr>
Cc: autoconf@gnu.org, caml-list@yquem.inria.fr
Subject: Re: managing ocaml dependencies
Message-ID: <20061116212114.GA6290@iam.uni-bonn.de>
Mail-Followup-To: Guillaume Rousse <Guillaume.Rousse@inria.fr>,
	autoconf@gnu.org, caml-list@yquem.inria.fr
References: <455C73BA.1030803@inria.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <455C73BA.1030803@inria.fr>
Organization: Department of Numerical Simulation, University of Bonn
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Miltered: at discorde with ID 455CD657.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ralf:01 ralf:01 ocaml:01 dependencies:01 guillaume:01 ocaml:01 guillaume:01 autoconf:01 dependencies:01 ocamldep:01 makefile:01 ocamldep:01 mli:01 fwiw:01 config:01 

Hello Guillaume,

Do you use Automake?  If yes, or if you want to add support for ocaml to
Automake, then probably its list would be more appropriate.  If not, all
of the following has relevance without Automake, it's just colored that
way a bit.

* Guillaume Rousse wrote on Thu, Nov 16, 2006 at 03:20:42PM CET:
> I'm trying to use autoconf for ocaml project, and I have troubles with
> managing dependencies.
> 
> They are generated through a specific program, ocamldep, that basically
> output makefile rules, so as to be used this way:
> .depend:
> 	$(OCAMLDEP) *.ml *.mli > .depend
> 
> include .depend
> 
> They are two different strategies here, either generate them on
> maintainer host and ship them in the distribution, either generate them
> on user's host.

FWIW, Automake's strategy is building them on the user's system.  There
is a chapter in its manual that contains rationale:
http://sources.redhat.com/automake/automake.html#Dependency-Tracking-Evolution

Further, the macro AM_MAKE_INCLUDE in automake/m4/make.m4 detects the
'include' style used by 'make'.  The automake way to handle
bootstrapping is to create (almost empty) per-target files at
config.status execution time (see m4/depout.m4), and update them as a
side effect of compilation (see m4/depend.m4 and lib/depcomp).  The side
effect method is more efficient once you have a compiler that can output
dependency information on the fly (such as GCC for some languages).

> The second strategy, however, heavily relies on make implementation.
> Whereas GNU make happily generate .depend file on the fly with previous
> snippet, some other implementations don't, such as Digital Unix's one
> (and potentially others).
> Make: Cannot open ../.depend.  Stop.

Does that mean it fails if it updates a file that is included, or that
it merely fails the first time when the file does not yet exist?

> I also discovered than GNU make use current directory to resolve path of
> included files, even when the inclusion directive is found in an
> included makefile, whereas Digital Unix's one consider the directory
> containing the makefile containing the inclusion directive instead.
> 
> Given the following setup:
> |-- Makefile.rules
> `-- a
>     `-- Makefile
> 
> If the inclusion directive is given in top level Makefile.rules, itself
> included in lower level a/Makefile, GNU make resolve the .depend file in
> a directory, whereas Digital Unix resolve it in top-level directory.

Ah, thanks, I did not know that.  (Automake does not use recursive
inclusion at 'make' run time; not to be mistaken with the automake
'include' which is resolved at 'automake' run time.)

> Finally, it seems the safest strategy would be to use configure to
> produce those .depend file, or is there any other possibility ?

Yes, that's the idea.  I think adapting Automake for ocaml should be
possible.  If you go and add support for it in Autoconf first, then it
can be made quite seamless, too.  For examples how to do this, you could
peek at how Erlang support was recently added to Autoconf, and UPC to
Automake.

Cheers,
Ralf

