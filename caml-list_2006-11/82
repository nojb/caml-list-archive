Return-Path: <zilles@1969web.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id EB2A6BC69
	for <caml-list@yquem.inria.fr>; Mon, 13 Nov 2006 21:31:56 +0100 (CET)
Received: from woodstock.1969.ws (lgb-static-208.57.241.22.mpowercom.net [208.57.241.22] (may be forged))
	by discorde.inria.fr (8.13.6/8.13.6) with SMTP id kADKVn7i029670
	for <caml-list@inria.fr>; Mon, 13 Nov 2006 21:31:56 +0100
Received: (qmail 29083 invoked from network); 13 Nov 2006 20:31:44 -0000
Received: from unknown (HELO ?10.3.2.21?) (10.3.2.21)
  by 0 with SMTP; 13 Nov 2006 20:31:44 -0000
Message-ID: <4558D62E.2070403@1969web.com>
Date: Mon, 13 Nov 2006 12:31:42 -0800
From: Karl Zilles <zilles@1969web.com>
Organization: 1969 Communications,  Inc.
User-Agent: Thunderbird 1.5.0.8 (Windows/20061025)
MIME-Version: 1.0
To: Till Varoquaux <till.varoquaux@gmail.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Simple idea for making a function infix
References: <1EB857FD-F706-419C-9181-D45DEA88B756@mist.i.u-tokyo.ac.jp>	<9d3ec8300611130819q7e13d5f4mb84b9fb1a2ac74ae@mail.gmail.com>	<1163440715.5452.12.camel@rosella.wigram> <9d3ec8300611131029q482cbc73g5cfcf33c4828e18e@mail.gmail.com>
In-Reply-To: <9d3ec8300611131029q482cbc73g5cfcf33c4828e18e@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 4558D635.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; infix:01 christophe:01 .....:98 garbage:01 wrote:01 caml-list:01 int:01 int:01 let:03 let:03 indeed:07 mean:08 function:08 function:08 hum:08 

Till Varoquaux wrote:
> First of all, sorry for the garbage on top of my last mail:
> my computer hates me
> 
> -to Jean Christophe: indeed, that's actually the composition function.....
> -to skaller: Hum, I *should* have tested more thoroughly my "solution":
> 
> let ( /* ) x y = y x
> and ( */ ) x y = x y
> 
> let sub  = (-)
> 
> 4 /*sub 5
> (* is -1 *)
> 4 /*sub*/ 5
> (* is 1 *)

You mean exactly the opposite, right?

# 4 /*sub 5
- : int = 1
# 4 /*sub*/ 5
- : int = -1

Pardon if I'm just not keeping up with the conversation.

