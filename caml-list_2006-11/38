Return-Path: <brogoff@speakeasy.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id CB1F6BC69
	for <caml-list@yquem.inria.fr>; Thu,  9 Nov 2006 02:45:40 +0100 (CET)
Received: from mail8.sea5.speakeasy.net (mail8.sea5.speakeasy.net [69.17.117.10])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id kA91jcC8013036
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@inria.fr>; Thu, 9 Nov 2006 02:45:40 +0100
Received: (qmail 23118 invoked from network); 9 Nov 2006 01:45:35 -0000
Received: from shell3.sea5.speakeasy.net ([69.17.116.4])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail8.sea5.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <caml-list@inria.fr>; 9 Nov 2006 01:45:35 -0000
Date: Wed, 8 Nov 2006 17:45:35 -0800 (PST)
From: brogoff <brogoff@speakeasy.net>
To: caml-list@inria.fr
Subject: Re: [Caml-list] parameterized pattern
In-Reply-To: <4a708d20611081555i1f860911rfb7a29d31a34ce7a@mail.gmail.com>
Message-ID: <Pine.LNX.4.58.0611081737140.16269@shell3.speakeasy.net>
References: <454FA5F8.5030106@hq.idt.net> <4a708d20611081555i1f860911rfb7a29d31a34ce7a@mail.gmail.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde with ID 45528842.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; lukasz:01 ad-hoc:01 polymorphism:01 g'caml:01 u-tokyo:01 furuse:01 gcaml:01 g'caml:01 node:01 1278:01 ocaml:01 gcaml:01 ocaml:01 variants:01 recursive:01 

On Thu, 9 Nov 2006, Lukasz Stafiniak wrote:
> You can do this kind of ad-hoc polymorphism with with G'Caml:
>
> http://web.yl.is.s.u-tokyo.ac.jp/~furuse/gcaml/
>
> BTW, I think that G'Caml deserves more attention on this list (see
> http://lambda-the-ultimate.org/node/1278). (I've even thought that it
> is still a patch to OCaml 2.0, but it seems to be up-to-date now.)

The GCaml docs say (and have said for at least a year) that it doesn't support
all of OCaml, neither objects nor polymorphic variants. I'd guess that
it doesn't support recursive modules either.

It's a pity, as I've often wished that OCaml supported the extensional
polymorphism that GCaml has, but I don't think that's going to happen.
It would probaby make more sense to create a separate language at this
point, since OCaml is complicated enough.

-- Brian

