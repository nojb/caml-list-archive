Return-Path: <jeremie.lumbroso@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id C1FACBB84
	for <caml-list@yquem.inria.fr>; Fri, 15 Aug 2008 15:28:43 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgkDAEwhpUjAXQIniGdsb2JhbACRST4BAQEPIJpAhmoBAoNo
X-IronPort-AV: E=Sophos;i="4.32,215,1217800800"; 
   d="scan'208";a="16016134"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 15 Aug 2008 15:28:43 +0200
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m7FDSfKR027820
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Fri, 15 Aug 2008 15:28:43 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AigBAJofpUjRVcitlGdsb2JhbACRST4BAQEBCQMKBxEDmjeGZwECg2g
X-IronPort-AV: E=Sophos;i="4.32,215,1217800800"; 
   d="scan'208";a="28243957"
Received: from wf-out-1314.google.com ([209.85.200.173])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 15 Aug 2008 15:22:20 +0200
Received: by wf-out-1314.google.com with SMTP id 25so1164235wfa.0
        for <caml-list@inria.fr>; Fri, 15 Aug 2008 06:22:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:sender
         :to:subject:mime-version:content-type:content-transfer-encoding
         :content-disposition:x-google-sender-auth;
        bh=za30Fw0mxXXNmt3eScHeW+sJ/5wbXVGLi7K3KKXRQcg=;
        b=MxjPpmgm2dGg85ssBL3SROjkN8Vxg8uIXprLyZHJUKmFIa4+nuS+el3x84s4j5zBET
         Ek2n/+Tj9xOnJxIKppdmCjAUxOBqrb1VckP5rrNNgK8K8jmkIHTe8wUJ1jpJufpKFgWe
         Tz12cT0rN513GF5/AMAgDbl76ksSL0B8t1d+A=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:sender:to:subject:mime-version:content-type
         :content-transfer-encoding:content-disposition:x-google-sender-auth;
        b=GaSGxjIO44EYyLkmK14FPpXwhFq+NbNRqDMnjfhaDaXYTL6A59Nhcrl5jNvTDGn5oR
         tZFQP1WDm28yzaFqZh8wBLOBkZ3HLdar1e5kCBwHajcWQfrnhYxXI6OBfB9LpUsEeFxz
         tfzNSh4iWQP9YXi5a+VC7SEJI8y6zMe7kFlSk=
Received: by 10.142.229.4 with SMTP id b4mr976460wfh.143.1218806539407;
        Fri, 15 Aug 2008 06:22:19 -0700 (PDT)
Received: by 10.142.105.11 with HTTP; Fri, 15 Aug 2008 06:22:19 -0700 (PDT)
Message-ID: <2b7b425b0808150622w6c5e5cd8n40b57bda62e11aab@mail.gmail.com>
Date: Fri, 15 Aug 2008 15:22:19 +0200
From: "=?ISO-8859-1?Q?J=E9r=E9mie_Lumbroso?=" <jeremie.lumbroso@etu.upmc.fr>
Sender: jeremie.lumbroso@gmail.com
To: caml-list@inria.fr
Subject: Exceptions considered as values in recursive module typechecking?
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
X-Google-Sender-Auth: 5afa5fd27f40759c
X-Miltered: at concorde with ID 48A58489.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 modular:01 abstracted:01 insofar:01 recursive:01 sig:01 sig:01 struct:01 struct:01 ocaml's:01 typechecker:01 ocaml:01 functor:01 ocaml's:01 translmod:01 

Hello,

I am currently working on a project which I strive to make as modular,
flexible and abstract as I possibly can (the previous codebase was not
sufficiently abstracted, making some of the dependent components *too*
dependent insofar as they would often break with implementational
changes).

To this end, the recursive module typing system has been both a terrific
blessing and something of a bane: while it mostly allows me the freedom to
organize my modules in a clean, satisfying way, the "double vision"
problem (in particular, but not only) might have given me gray hair! But
the "double vision" problem is not what this message is about ...

While I think I have a good understanding of the "safe/unsafe" typing rule
for recursive modules (which is described in Xavier Leroy's introductory
paper), I am still specifically befuddled and frustrated by the
restriction on exceptions:

  <code>
  module type CLIENT =3D
  sig
    exception Error
  end

  module type HOST =3D
  sig
    module Client : CLIENT
  end


  module Client(Host : HOST) : CLIENT =3D
  struct
    exception Error
  end

  module rec Host : HOST =3D
  struct
    module Client =3D Client(Host)
  end
  </code>

OCaml's typechecker lets me know it cannot type my code because "Cannot
safely evaluate the definition of the recursively-defined module Host".  I
have a hunch (which I might as well call a certainty) that this is because
OCaml considers exceptions to be values ...


I would be interested to know why this is the case; and furthermore why
this was maintained in the context of recursive modules: it would seem to
me (but please correct me if I'm wrong) that the typing of exceptions in
recursive modules can never go jawry---or rather can never be "worse" than
those inconsistencies that can be written with types:

  <code>
  module rec A : sig type t end =3D
  struct
    type t =3D B of B.t
  end
  and B : sig type t end =3D
  struct
    type t =3D A of A.t
  end
  </code>

(Certainly, if the types were transparent, it would be possible to create
an infinite value with a "let rec".) I know that typing recursive modules
is a difficult problem, and I understand why it should be considered a
work in progress.

That said--is there a (clean, practical) way to circumvent this particular
problem? I like using exceptions a great deal, and the solutions I've come
up with (when a functor is not involved) are troublesome and ugly: I
create a separate, recursive module, with the exceptions; something like
this:

  <code>
  module rec MainModule1 : sig .. end =3D
  struct

    type t =3D ..
    ..

  end
  and MainModule2 : sig .. end =3D
  struct

    ..
    try
      ..
    with MM_Exceptions.Error a -> ...

  end
  and MM_Exceptions : sig exception Error of MainModule.t end =3D
  struct
    exception Error of MainModule.t
  end
  </code>

Finally, is there a hack I can apply to OCaml's code to get peace of mind?
I've awkwardly stumbled accross "translmod.ml" (in which I've located the
infamous Circular_dependency exception), but my attempts have not been
very successful, to the extent that I was only able to produce a version
of the typechecker that segfaults spectacularly ...

Best regards,

J=E9r=E9mie

