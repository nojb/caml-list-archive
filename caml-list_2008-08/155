Return-Path: <pedagand@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id DC651BBAF
	for <caml-list@yquem.inria.fr>; Tue, 19 Aug 2008 00:59:14 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtsAANCbqUhIDtybjmdsb2JhbACRUj4BAQEBCQMKBw8Fnl+FUQEC
X-IronPort-AV: E=Sophos;i="4.32,230,1217800800"; 
   d="scan'208";a="14083419"
Received: from fg-out-1718.google.com ([72.14.220.155])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 19 Aug 2008 00:59:14 +0200
Received: by fg-out-1718.google.com with SMTP id l27so2320477fgb.43
        for <caml-list@yquem.inria.fr>; Mon, 18 Aug 2008 15:59:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:mime-version:content-type:content-transfer-encoding
         :content-disposition;
        bh=OG0zrb0YZjY3E4ihNRPHnd3Rfwm3KUKE0p6wTsWEZ6I=;
        b=qKuL1hJBAocyr4rQRX/2ly4lqB6ACrCRHDVdFth2T1ZX3bRlFNoEk0RGmBe20pWwAu
         lE/IrzD7g+z53FuqIfvnMibxi4ffl/ZeAzjX4PIWf5QVQMOGyJVbbwnqTQkGDBF2dpCe
         2bL+Q9oR5WQouG7qGSbxypkgvS+q0u5PEYfRU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type
         :content-transfer-encoding:content-disposition;
        b=Km9NRxnzkKDoqZrMybFTC5myneVPVLkqTmo91UbCvxPxYIPkYYOouEpx3vTotPieAG
         7/8v/R4vDmPgnP+d+U9L63eRipSGJ4NOdCgg7hJB5MHMOfqj/sgsAmEUn5jt8nzYM1/v
         VS9dd8UXUjCTXJY7ofQaCLbogdcHCJTElBGQ4=
Received: by 10.86.98.10 with SMTP id v10mr5040594fgb.46.1219100353997;
        Mon, 18 Aug 2008 15:59:13 -0700 (PDT)
Received: by 10.86.73.11 with HTTP; Mon, 18 Aug 2008 15:59:13 -0700 (PDT)
Message-ID: <6cb897b30808181559j3b5148a2l771a1aaf96d851c4@mail.gmail.com>
Date: Tue, 19 Aug 2008 00:59:13 +0200
From: "Pierre-Evariste Dagand" <pedagand@gmail.com>
To: caml-list@yquem.inria.fr
Subject: [ANN] Opis, reliable distributed systems in OCaml
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Spam: no; 0.00; ocaml:01 literate:01 ocaml:01 type-checker:01 debugger:01 abstraction:01 haskell:01 combinators:01 combinators:01 wikipedia:01 wiki:01 coq:01 contribs:01 coq:01 trivial:01 

Hi list,

After having delayed this announce for months, I think that Opis is
now mature enough to be publicly released. The literate code and a
technical report are available here:

http://perso.eleves.bretagne.ens-cachan.fr/~dagand/opis/

---------------------------
What Opis is about ?
---------------------------

Opis is a toolkit for large-scale distributed system programming. It
aims at easing the development of complex and reliable distributed
systems by:
   - embedding a domain-specific language (EDSL) in OCaml: hence
offering a reactive, dataflow-oriented programming style while not
reinventing the wheel (type-checker, efficient code generation, ...))
   - assisting the developer with powerful, integrated tools: network
simulator, debugger, model-checker and performance profiler
   - working with purely-functional constructs: therefore lowering the
barrier to certify critical parts of the distributed system in a
theorem prover

----------------------
Technical details:
----------------------

The EDSL is based on the Arrow abstraction
[http://www.haskell.org/arrows/]. First, the developer defines some
pure functions, then abstracts them in the Arrow world and finally
wires them together using the Arrow combinators. The resulting
function is termed an "event function": it receives input events from
the network, the timer or the user interfaces and reacts with output
events.

Then, these output events are interpreted by the "launcher" subsystem.
For instance, the event function might ask to "Send( ip_x , TCP , data
)". Thus, the Network Launcher opens a TCP connection to "ip_x",
marshals "data" to a string and finally sends it.

Internally, the Arrow combinators build a Mealy automaton out of the
user-defined pure functions. Interestingly, Mealy automata has been
introduced and used by Lamport for decades to describe distributed
systems [http://en.wikipedia.org/wiki/State_machine_replication].

Hence, there already exists some encouraging, successful formalization
of Mealy-based systems [http://coq.inria.fr/contribs/fairisle.html].
We are currently experimenting with Coq to completely develop the
event functions in Coq (and to prove non trivial properties about the
behavior of the resulting distributed system).


Beyond an EDSL, Opis also provides some useful tools to speed-up the
development and deployment of event functions. Hence, given an event
function and without any modification, we can:

   - deploy it on a real network
   - simulate a network executing the event function, to test the
behavior of the system "in the large"
   - debug a network of nodes running the event function, to inspect
the system "in the small", with forward and backward execution steps,
state inspection, ...
   - model-check the distributed system against safety properties,
featuring a dynamic partial-order reduction mode that avoids the usual
combinatorial explosion in most systems
    - performance-debug the pure functions, by measuring their
processing time and inferring their (algorithmic) complexity


Finally, by using OCaml and staying in the purely-functional world, we
benefit from:

    - OCaml excellent performances (both on the computational side and
on the networking side) as well as its thoroughly tested type-checker
    - the "code export" capability of theorem provers (Isabelle, Coq,
...): we have been able to certify critical code in Isabelle, export
the corresponding code and integrates it smoothly in an existing
system
    - the usual benefit of functional programming: easier (informal)
reasoning and testing


--------------------------
Acknowledgements
--------------------------

I would like to thanks Zheng Li, Oleg Kiselyov and Jacques Garrigue
for their help on this list to design an efficient Arrow instance.

At this point of this long mail, I think I must also thank the reader
that have bravely read up to here ;-)


Regards,

-- 
Pierre-Evariste DAGAND
http://perso.eleves.bretagne.ens-cachan.fr/~dagand/

