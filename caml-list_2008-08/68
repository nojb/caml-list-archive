Return-Path: <info@gerd-stolpmann.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 448F4BB84
	for <caml-list@yquem.inria.fr>; Tue, 12 Aug 2008 19:33:08 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AusAACxmoUjU4368mmdsb2JhbACBYJAOAQEBAQEIBQgHEQOedoEp
X-IronPort-AV: E=Sophos;i="4.32,196,1217800800"; 
   d="scan'208";a="15942275"
Received: from moutng.kundenserver.de ([212.227.126.188])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 12 Aug 2008 19:33:07 +0200
Received: from gate.lan.gerd-stolpmann.de (dslb-088-068-204-244.pools.arcor-ip.net [88.68.204.244])
	by mrelayeu.kundenserver.de (node=mrelayeu2) with ESMTP (Nemesis)
	id 0MKwtQ-1KSxk13soY-00058C; Tue, 12 Aug 2008 19:33:06 +0200
Received: from gps.dynxs.de (localhost [127.0.0.1])
	by gate.lan.gerd-stolpmann.de (Postfix) with ESMTP id 76390C054;
	Tue, 12 Aug 2008 19:33:05 +0200 (CEST)
Received: from 192.168.1.2 (proxying for 62.163.121.194)
        (SquirrelMail authenticated user gerd)
        by gps.dynxs.de with HTTP;
        Tue, 12 Aug 2008 19:33:05 +0200 (CEST)
Message-ID: <4140.192.168.1.2.1218562385.squirrel@gps.dynxs.de>
In-Reply-To: <48A1B59A.3080203@gmail.com>
References: <48A1B59A.3080203@gmail.com>
Date: Tue, 12 Aug 2008 19:33:05 +0200 (CEST)
Subject: Re: [Caml-list] Tuple allocation overhead
From: "Gerd Stolpmann" <info@gerd-stolpmann.de>
To: "Raj Bandyopadhyay" <technophobicgeek@gmail.com>
Cc: caml-list@yquem.inria.fr
User-Agent: SquirrelMail/1.4.4
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: quoted-printable
X-Provags-ID: V01U2FsdGVkX18v+h1wkIsL6VtDX7Fc8FBzJvjQ1VSe4QY8q7b
 oXFWnG3q6gBo4FEfmt0/y8Aiil8zJSFc0vjJHDciDBLDdquZPK
 kJfV3c927roXtDl3DHdIGnMZ9yKZplu
X-Spam: no; 0.00; gerd:01 stolpmann:01 ocaml:01 ocaml:01 malloc:01 unneeded:01 alloc:01 alloc:01 allocates:01 allocates:01 runtime:01 runtime:01 gerd:01 malloc:01 beginner's:01 


Raj Bandyopadhyay said:
> Hi folks
>
> I was performing a little experiment to try and quantify some of the
> overhead of memory allocation in OCaml. Here is a the kind of little
> program that I am using for timings:

This experiment does not make much sense. Ocaml has its own memory
management for the memory it got from the OS in large blocks using malloc
(or mmap in some cases). Generally, memory allocation is very fast and
often only an integer addition, but checking which memory parts are still
reachable, and cleaning up unneeded memory takes time. You should better
look at the cost of memory management as a whole, and not to allocation
only.

> let rec alloc3 n l =3D
>     if n =3D 0 then l
>     else alloc3 (n-1) ((1,2,n)::l)
>
> The alloc3 function allocates a tuple of size 3 at every call (n is
> initially 100,000).

No. It allocates alwyas a pair (for the list cell), and for t=3D1 nothing
else, and for t>1 another t-tuple (where t is the tuple size).

> I have similar functions alloc1 through alloc10, to allocate tuples of
> size 1 (just an integer) through 10.
> Here are my timing results (each time is the average of 100 runs):
>
>  __Tuple sz 1 ________________ 100x avg=3D 1.964404E+01 msec
> __ Tuple sz 2 ________________ 100x avg=3D 4.699384E+01 msec
> __ Tuple sz 3 ________________ 100x avg=3D 4.232895E+01 msec
> __ Tuple sz 4 ________________ 100x avg=3D 4.265683E+01 msec
> __ Tuple sz 5 ________________ 100x avg=3D 4.442121E+01 msec
> __ Tuple sz 6 ________________ 100x avg=3D 4.723042E+01 msec
> __ Tuple sz 7 ________________ 100x avg=3D 5.168987E+01 msec
> __ Tuple sz 8 ________________ 100x avg=3D 5.234274E+01 msec
> __ Tuple sz 9 ________________ 100x avg=3D 5.504287E+01 msec
> __ Tuple sz 10 _______________ 100x avg=3D 5.836166E+01 msec
>
> As expected, the larger the size of the tuple, the longer it takes.
> However, there is a spike for tuple size 2. I am seeing this on multipl=
e
> platforms (linux and mac).

I cannot fully explain this, but you should consider:

For t=3D2 you allocate 200000 pairs. The minor heap has space for 32k wor=
ds,
and you need 600000 words for the pairs. After every 32k the allocated
pairs are moved to the major heap (the so-called minor collection). Most
of the runtime of your program is probably required for this (but I haven=
t
checked).

If you look at this for various t:

- t=3D1: 300000 words needed, 9 minor collections

- t=3D2: 600000 words needed, 18 minor collections

- t=3D3: 700000 words needed, 21 minor collections

etc.

That at least roughly explains the doubled runtime for t=3D2 vs. t=3D1. T=
here
might be another effect in the memory manager that explains the peak, but
it is not obvious.

Gerd



>
> I was wondering if someone has a good explanation for this. I assume it
> has to do with some overhead of malloc, but I'm not sure. Why is it tha=
t
> a tuple of size 2 is more expensive to allocate than size 3-5 in this
> case? Are there other factors involved that I am not considering?
>
> Thanks
> Raj
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>


------------------------------------------------------------
Gerd Stolpmann * Viktoriastr. 45 * 64293 Darmstadt * Germany
gerd@gerd-stolpmann.de          http://www.gerd-stolpmann.de
------------------------------------------------------------


