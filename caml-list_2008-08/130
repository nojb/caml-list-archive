Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 271C9BB84
	for <caml-list@yquem.inria.fr>; Thu, 14 Aug 2008 17:37:32 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AioDAHXuo0jUnw4Somdsb2JhbACCLo9RAQEBAQEBBwUGCRGja4FV
X-IronPort-AV: E=Sophos;i="4.32,210,1217800800"; 
   d="scan'208";a="16119753"
Received: from pih-relay05.plus.net ([212.159.14.18])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 14 Aug 2008 17:37:21 +0200
Received: from [90.198.246.64] (helo=beast.local)
	 by pih-relay05.plus.net with esmtpa (Exim) id 1KTet6-0001Rg-FZ; Thu, 14 Aug 2008 16:37:20 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: peng.zang@gmail.com, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Typeclasses in OCaml (Was: Haskell vs OCaml)
Date: Thu, 14 Aug 2008 16:38:24 +0100
User-Agent: KMail/1.9.9
References: <e16c7bcd0808140746r4cd42fedo4fb6474d687274c4@mail.gmail.com> <200808141121.25463.peng.zang@gmail.com>
In-Reply-To: <200808141121.25463.peng.zang@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200808141638.24433.jon@ffconsultancy.com>
X-Plusnet-Relay: ee10f75e342cf8b971a8ae5d60370ffa
X-Spam: no; 0.00; ocaml:01 haskell:01 ocaml:01 inference:01 peng:98 frog:98 wrote:01 typing:01 caml-list:01 essentially:02 implemented:02 static:03 meaningful:04 types:05 uses:07 

On Thursday 14 August 2008 16:21:22 Peng Zang wrote:
> This gives all the advantages of static typing and type inference and
> prevents stupid errors and it is meaningful for all types that it is
> implemented for.

That is essentially the solution that F# uses.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

