Return-Path: <technophobicgeek@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 27F82BB84
	for <caml-list@yquem.inria.fr>; Tue, 12 Aug 2008 18:09:12 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Au0CAEBSoUiAKgEfiGdsb2JhbACLCoZjAQEBDyCdaYEp
X-IronPort-AV: E=Sophos;i="4.32,196,1217800800"; 
   d="scan'208";a="15940309"
Received: from mail.cs.rice.edu ([128.42.1.31])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 12 Aug 2008 18:09:11 +0200
Received: from mail.cs.rice.edu (localhost.localdomain [127.0.0.1])
	by mail.cs.rice.edu (Postfix) with ESMTP id 985AA2C2A8E
	for <caml-list@yquem.inria.fr>; Tue, 12 Aug 2008 11:09:09 -0500 (CDT)
X-Virus-Scanned: by amavis-2.4.0 at mail.cs.rice.edu
Received: from mail.cs.rice.edu ([127.0.0.1])
	by mail.cs.rice.edu (mail.cs.rice.edu [127.0.0.1]) (amavisd-new, port 10024)
	with LMTP id 4+vDv-71fHYL for <caml-list@yquem.inria.fr>;
	Tue, 12 Aug 2008 11:09:08 -0500 (CDT)
Received: from [10.121.20.93] (unknown [10.121.20.93])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.cs.rice.edu (Postfix) with ESMTP id 8ACB52C2B02
	for <caml-list@yquem.inria.fr>; Tue, 12 Aug 2008 11:09:08 -0500 (CDT)
Message-ID: <48A1B59A.3080203@gmail.com>
Date: Tue, 12 Aug 2008 11:08:58 -0500
From: Raj Bandyopadhyay <technophobicgeek@gmail.com>
User-Agent: Thunderbird 2.0.0.14 (X11/20080502)
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Tuple allocation overhead
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocaml:01 alloc:01 alloc:01 allocates:01 malloc:01 100,000:98 10,:98 10.:98 rec:01 integer:01 functions:01 tuples:01 tuple:02 tuple:02 let:03 

Hi folks

I was performing a little experiment to try and quantify some of the 
overhead of memory allocation in OCaml. Here is a the kind of little 
program that I am using for timings:

let rec alloc3 n l =
    if n = 0 then l
    else alloc3 (n-1) ((1,2,n)::l)

The alloc3 function allocates a tuple of size 3 at every call (n is 
initially 100,000).

I have similar functions alloc1 through alloc10, to allocate tuples of 
size 1 (just an integer) through 10.
Here are my timing results (each time is the average of 100 runs):

 __Tuple sz 1 ________________ 100x avg= 1.964404E+01 msec
__ Tuple sz 2 ________________ 100x avg= 4.699384E+01 msec
__ Tuple sz 3 ________________ 100x avg= 4.232895E+01 msec
__ Tuple sz 4 ________________ 100x avg= 4.265683E+01 msec
__ Tuple sz 5 ________________ 100x avg= 4.442121E+01 msec
__ Tuple sz 6 ________________ 100x avg= 4.723042E+01 msec
__ Tuple sz 7 ________________ 100x avg= 5.168987E+01 msec
__ Tuple sz 8 ________________ 100x avg= 5.234274E+01 msec
__ Tuple sz 9 ________________ 100x avg= 5.504287E+01 msec
__ Tuple sz 10 _______________ 100x avg= 5.836166E+01 msec

As expected, the larger the size of the tuple, the longer it takes. 
However, there is a spike for tuple size 2. I am seeing this on multiple 
platforms (linux and mac).

I was wondering if someone has a good explanation for this. I assume it 
has to do with some overhead of malloc, but I'm not sure. Why is it that 
a tuple of size 2 is more expensive to allocate than size 3-5 in this 
case? Are there other factors involved that I am not considering?

Thanks
Raj

