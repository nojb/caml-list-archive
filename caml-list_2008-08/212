Return-Path: <circularfunc@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 650CBBB84
	for <caml-list@yquem.inria.fr>; Sat, 30 Aug 2008 23:29:54 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApwDAHtYuUjAXQIniGdsb2JhbACSCT4BAQEPIJwKhyIBAg
X-IronPort-AV: E=Sophos;i="4.32,299,1217800800"; 
   d="scan'208";a="16633201"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 30 Aug 2008 23:29:54 +0200
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m7ULTrGn009141
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Sat, 30 Aug 2008 23:29:54 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvIAALdYuUhA6bjtmWdsb2JhbACSCT4BAQEBAQgFBgkRA5wHhyIBAg
X-IronPort-AV: E=Sophos;i="4.32,299,1217800800"; 
   d="scan'208";a="16424652"
Received: from wr-out-0506.google.com ([64.233.184.237])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 30 Aug 2008 23:29:53 +0200
Received: by wr-out-0506.google.com with SMTP id 50so1177457wra.13
        for <caml-list@inria.fr>; Sat, 30 Aug 2008 14:29:52 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:mime-version:content-type:content-transfer-encoding
         :content-disposition;
        bh=vnxmRKt1jvjXRKkTk05pbt+mjbI7mmSKu/sD+wD9Rek=;
        b=m1Jjp8m+eE8Iar/o4HWtpyChJH/XXucWML02RQhzcCytQqc5bMVGhNOb93CMJvT2uE
         DUwmWB5pwWXddQ9rlax64tGjc/P219bJ8Y0zFxI9P+h7JxRzj22fm8TMyFgKVx9j2MY/
         YHdpjVaMuG6ncvfp4Dvev0g2rgD+F8UooVKIQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type
         :content-transfer-encoding:content-disposition;
        b=apRzmMao9L4L216hmMaOht1ajZxUs8tWKgVv2wdnicPoFNPBE0jlUncbcyynOidujG
         iTzn8kjTMH7DKEoduEq+KG15daW+ahRmIJ2BDrB9+3E2ZQSXs1M+qysfqLhSCpUOqTwp
         FyrZ9HLXWbN5mT+e45F11j17LQjWwx8Bdiy/s=
Received: by 10.90.86.10 with SMTP id j10mr5480486agb.22.1220131791782;
        Sat, 30 Aug 2008 14:29:51 -0700 (PDT)
Received: by 10.90.113.9 with HTTP; Sat, 30 Aug 2008 14:29:51 -0700 (PDT)
Message-ID: <d5f6b0140808301429x2d1532d3tce9edff71e9f43c7@mail.gmail.com>
Date: Sat, 30 Aug 2008 23:29:51 +0200
From: "circ ular" <circularfunc@gmail.com>
To: caml-list@inria.fr
Subject: How to fix this unbound value problem?
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Miltered: at concorde with ID 48B9BBD1.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 downto:01 sqrt:01 sqrt:01 argv:01 argv:01 printf:01 printf:01 downto:01 radius:98 radius:98 12.:98 unbound:01 unbound:01 orig:01 

how do I compile a program? what suffix does ocaml files have?


when evaling the below program  I get:

#                                     Characters 9-10:
  for y = n - 1 downto 0 do
          ^
Unbound value n
#


let delta = sqrt epsilon_float

type vec = {x:float; y:float; z:float}
let zero = {x=0.; y=0.; z=0.}
let ( *| ) s r = {x = s *. r.x; y = s *. r.y; z = s *. r.z}
let ( +| ) a b = {x = a.x +. b.x; y = a.y +. b.y; z = a.z +. b.z}
let ( -| ) a b = {x = a.x -. b.x; y = a.y -. b.y; z = a.z -. b.z}
let dot a b = a.x *. b.x +. a.y *. b.y +. a.z *. b.z
let length r = sqrt(dot r r)
let unitise r = 1. /. length r *| r

let ray_sphere orig dir center radius =
  let v = center -| orig in
  let b = dot v dir in
  let d2 = (b *. b -. dot v v +. radius *. radius) in
  if d2 < 0. then infinity else
  let d = sqrt d2 in
  let t1 = b -. d and t2 = b +. d in
  if t2>0. then if t1>0. then t1 else t2 else infinity

let rec intersect orig dir (l, _ as hit) (center, radius, scene) =
  match ray_sphere orig dir center radius, scene with
  | l', _ when l' >= l -> hit
  | l', [] -> l', unitise (orig +| l' *| dir -| center)
  | _, scenes -> intersects orig dir hit scenes
and intersects orig dir hit = function
  | [] -> hit
  | scene::scenes -> intersects orig dir (intersect orig dir hit scene) scenes

let light = unitise {x=1.; y=3.; z= -2.} and ss = 4

let rec ray_trace dir scene =
  let l, n = intersect zero dir (infinity, zero) scene in
  let g = dot n light in
  if g <= 0. then 0. else
    let p = l *| dir +| sqrt epsilon_float *| n in
    if fst (intersect p light (infinity, zero) scene) < infinity then 0. else g

let rec create level c r =
  let obj = c, r, [] in
  if level = 1 then obj else
  let a = 3. *. r /. sqrt 12. in
  let aux x' z' = create (level - 1) (c +| {x=x'; y=a; z=z'}) (0.5 *. r) in
c, 3. *. r, [obj; aux (-.a) (-.a); aux a (-.a); aux (-.a) a; aux a a]

let level, n =
  try int_of_string Sys.argv.(1), int_of_string Sys.argv.(2) with _ -> 9, 512

  let scene = create level {x=0.; y= -1.; z=4.} 1.;;

Printf.printf "P5\n%d %d\n255\n" n n;;
for y = n - 1 downto 0 do
  for x = 0 to n - 1 do
    let g = ref 0. in
    for dx = 0 to ss - 1 do
      for dy = 0 to ss - 1 do
        let aux x d = float x -. float n /. 2. +. float d /. float ss in
        let dir = unitise {x=aux x dx; y=aux y dy; z=float n} in
        g := !g +. ray_trace dir scene
      done;
    done;
    let g = 0.5 +. 255. *. !g /. float (ss*ss) in
    Printf.printf "%c" (char_of_int (int_of_float g))
  done;
done

