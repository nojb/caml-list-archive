Return-Path: <carette@mcmaster.ca>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id B4A6BBBAF
	for <caml-list@yquem.inria.fr>; Wed, 20 Aug 2008 00:04:34 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsIDALHgqkjAXQIniGdsb2JhbACSEgEBAQ8gpBeBWw
X-IronPort-AV: E=Sophos;i="4.32,237,1217800800"; 
   d="scan'208";a="28340227"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 20 Aug 2008 00:04:30 +0200
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m7JM4HfQ023471
	for <caml-list@inria.fr>; Wed, 20 Aug 2008 00:04:29 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: At0BAHvfqkiCcUBThWdsb2JhbACSEgEBAQoFAgYHEaQggVs
X-IronPort-AV: E=Sophos;i="4.32,237,1217800800"; 
   d="scan'208";a="28340211"
Received: from sigma957.cis.mcmaster.ca ([130.113.64.83])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 20 Aug 2008 00:03:33 +0200
Received: from Gorash7.UTS.McMaster.CA (Gorash7.UTS.mcmaster.ca [130.113.196.61])
	by sigma957.cis.mcmaster.ca (8.13.7/8.13.7) with ESMTP id m7JLq0CT009710
	for <caml-list@inria.fr>; Tue, 19 Aug 2008 18:03:22 -0400 (EDT)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by Gorash7.UTS.McMaster.CA (8.13.7/8.13.7) with ESMTP id m7JKlgV6006999
	for <caml-list@inria.fr>; Tue, 19 Aug 2008 16:47:43 -0400
Received: from [130.113.68.27] (account carette@univmail.cis.mcmaster.ca [130.113.68.27] verified)
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.3.12)
  with ESMTPA id 221520430 for caml-list@inria.fr; Tue, 19 Aug 2008 16:47:27 -0400
Message-ID: <48AB315F.5060505@mcmaster.ca>
Date: Tue, 19 Aug 2008 16:47:27 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Thunderbird 2.0.0.16 (Windows/20080708)
MIME-Version: 1.0
To: OCaml <caml-list@inria.fr>
Subject: What is the correct way to do this?
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-PMX-Version-Mac: 5.4.2.338381, Antispam-Engine: 2.6.0.325393, Antispam-Data: 2008.8.19.191935
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='BODY_SIZE_4000_4999 0, BODY_SIZE_5000_LESS 0, __CT 0, __CTE 0, __CT_TEXT_PLAIN 0, __HAS_MSGID 0, __MIME_TEXT_ONLY 0, __MIME_VERSION 0, __SANE_MSGID 0, __USER_AGENT 0'
X-Miltered: at concorde with ID 48AB4361.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; variants:01 improper:01 compiler:01 unbound:01 unbound:01 polymorphic:01 encode:01 complains:01 constraint:01 constraint:01 define:02 define:02 ast:02 ast:02 declaration:02 

I am trying to define a complex AST via polymorphic variants and 
constraints.  I want to encode my static knowledge of the AST into the 
types as much as possible.  I have gotten 'close', but not 'close 
enough'.  

Any help would be most appreciated.  Note that I do mean
Jacques

type symbol = S of string

  (* translation of kind[] *)
type 't prekind = KType | KFormula | Kind of 't
  (* Needed for P-Expr-2 *)
type  ('t,'f,'p) prekinded =
      KDType of 't
    | KDFormula of 'f
    | KDTerm of 'p * 't

type ('t,'f,'p) pretyp =
    [ `TypeBase of symbol
    | `TypeApplyTerm of symbol * ('t,'f,'p) prekinded list (* 
specialization of P-Expr-2 *)
    | `TypeApp of 't * 'p (* P-Expr-4 *)
    | `TypeDepFun of symbol * 't * 't ] (* expanded P-Expr-5 *)

type  't preoperator = [`Operator of (symbol * 't prekind list *
't prekind)] (* P-Expr-1 *)

type ('t,'f,'p) preformula =
     [ `FBase of symbol
     | `FApplyTerm of symbol * ('t,'f,'p) prekinded list (* 
specialization of P-Expr-2 *)
     | `FExists of symbol * 't * 'f ]

(* for improper expressions [S-expressions or raw symbols] *)
type  'e preunknown = [ `UE of 'e list | `US of symbol]

type  ('t,'e,'f,'p) preterm =
     [ `TermBase of symbol
     | `ApplyTerm of symbol * ('t,'f,'p) prekinded list * 't (* P-Expr-2 *)
     | `TermVar of symbol * 't (* P-Expr-3 *)
     | `FunApp of 'p * 'p (* P-Expr-6 *)
     | `FunAbs of symbol * 't * 'p (* P-Expr-7 *)
     | `IfTerm of 'f * 'p * 'p (* P-Expr-8 *)
     | `DefDescr of symbol * 't * 'f (* P-Expr-10 *)
     | `IndefDescr of symbol * 't * 'f (* P-Expr-11 *)
     | `Quote of 'e (* P-Expr-12 *)
     | `Eval of 'p  (* P-Expr-13 *)
     | `OrderedPair of 'e * 'e ]

(* translation of p-expr[], four sorts of p-expr *)
type ('t,'e,'f,'p) preproper = 'p
    constraint 't = [< ('t,'f,'p) pretyp]
    constraint 'f = [< ('t,'f,'p) preformula]
    constraint 'p = [< ('t,'f,'p) pretyp     | ('t,'f,'p) preformula
                     | ('t,'e,'f,'p) preterm | 't preoperator ]
    constraint 'e = [< ('t,'f,'p) pretyp     | ('t,'f,'p) preformula
                     | ('t,'e,'f,'p) preterm | 't preoperator
                     | 'e preunknown ]

type ('t,'e,'f,'p) preexpression = 'e
    constraint 't = [< ('t,'f,'p) pretyp]
    constraint 'e = [< ('t,'f,'p) pretyp     | ('t,'f,'p) preformula
                     | ('t,'e,'f,'p) preterm | 't preoperator
                     | 'e preunknown ]
    constraint 'f = [< ('t,'f,'p) preformula]
    constraint 'p = [< ('t,'f,'p) pretyp     | ('t,'f,'p) preformula
                     | ('t,'e,'f,'p) preterm | 't preoperator ]

(* here is where things fail -- I want to define convenient short-forms 
for the types to that
   I can annotate my code. *)
type proper     = 'p
    constraint 'p = ('t,'e,'f,'p) preproper

The compiler then complains with [where line 81 is the defining line for 
'proper' above:
File "types.ml", line 81, characters 4-65:
A type variable is unbound in this type declaration.
In definition
  [< `ApplyTerm of
       symbol *
       ([< ('b, [< ('b, 'c, 'a) preformula ] as 'c, 'a) pretyp ] as 'b, 'c,
        'a)
       prekinded list * 'b
   | `DefDescr of symbol * 'b * 'c
   | `Eval of 'a
   | `FApplyTerm of symbol * ('b, 'c, 'a) prekinded list
   | `FBase of symbol
   | `FExists of symbol * 'b * 'c
   | `FunAbs of symbol * 'b * 'a
   | `FunApp of 'a * 'a
   | `IfTerm of 'c * 'a * 'a
   | `IndefDescr of symbol * 'b * 'c
   | `Operator of symbol * 'b prekind list * 'b prekind
   | `OrderedPair of
       ([< `ApplyTerm of symbol * ('b, 'c, 'a) prekinded list * 'b
         | `DefDescr of symbol * 'b * 'c
         | `Eval of 'a
         | `FApplyTerm of symbol * ('b, 'c, 'a) prekinded list
         | `FBase of symbol
         | `FExists of symbol * 'b * 'c
         | `FunAbs of symbol * 'b * 'a
         | `FunApp of 'a * 'a
         | `IfTerm of 'c * 'a * 'a
         | `IndefDescr of symbol * 'b * 'c
         | `Operator of symbol * 'b prekind list * 'b prekind
         | `OrderedPair of 'd * 'd
         | `Quote of 'd
         | `TermBase of symbol
         | `TermVar of symbol * 'b
         | `TypeApp of 'b * 'a
         | `TypeApplyTerm of symbol * ('b, 'c, 'a) prekinded list
         | `TypeBase of symbol
         | `TypeDepFun of symbol * 'b * 'b
         | `UE of 'd list
         | `US of symbol ]
        as 'd) *
       'd
   | `Quote of 'd
   | `TermBase of symbol
   | `TermVar of symbol * 'b
   | `TypeApp of 'b * 'a
   | `TypeApplyTerm of symbol * ('b, 'c, 'a) prekinded list
   | `TypeBase of symbol
   | `TypeDepFun of symbol * 'b * 'b ]
  as 'a the variable 'a is unbound

I can 'fix' that by changing the first line to
type 'p proper = 'p
but that kind-of defeats the point, doesn't it?

