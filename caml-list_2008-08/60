Return-Path: <hmf@inescporto.pt>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=3.0 required=5.0 tests=AWL,NO_REAL_NAME,
	RCVD_NUMERIC_HELO,SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 7D3D3BBAF
	for <caml-list@yquem.inria.fr>; Sat,  9 Aug 2008 10:04:21 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArkDABTsnEjAI/YN/2dsb2JhbACQYVebIw
X-IronPort-AV: E=Sophos;i="4.31,332,1215381600"; 
   d="ml'?sh'?scan'208";a="15853661"
Received: from pepe.inescn.pt ([192.35.246.13])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 09 Aug 2008 10:04:20 +0200
Received: from localhost (pepe.inescn.pt [127.0.0.1])
	by pepe.inescn.pt (8.13.8/8.13.8/5) with ESMTP id m7984Jxb021141
	for <caml-list@yquem.inria.fr>; Sat, 9 Aug 2008 09:04:19 +0100
X-Virus-Scanned: amavisd-new at inescporto.pt
Received: from pepe.inescn.pt ([127.0.0.1])
	by localhost (pepe.inescn.pt [127.0.0.1]) (amavisd-new, port 10024)
	with LMTP id 9IIfmXympYiy for <caml-list@yquem.inria.fr>;
	Sat,  9 Aug 2008 09:03:54 +0100 (WEST)
Received: from localhost (ns.inescn.pt [192.35.246.1])
	by pepe.inescn.pt (8.13.8/8.13.8/43) with ESMTP id m7983pKS021133
	for <caml-list@yquem.inria.fr>; Sat, 9 Aug 2008 09:03:51 +0100
Received: from 136.249.54.77.rev.vodafone.pt (136.249.54.77.rev.vodafone.pt [77.54.249.136]) 
	by webmail.inescporto.pt (IMP) with HTTP 
	for <hmf@imap.inescn.pt>; Sat,  9 Aug 2008 09:03:51 +0100
Message-ID: <1218269031.489d4f67875a8@webmail.inescporto.pt>
Date: Sat,  9 Aug 2008 09:03:51 +0100
From: hmf@inescporto.pt
To: Caml Mailing List <caml-list@yquem.inria.fr>
Subject: Ocamlbuild + menhir + separate token file
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="-MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d"
User-Agent: Internet Messaging Program (IMP) 3.2.3
X-Originating-IP: 77.54.249.136
X-Spam: no; 0.00; parser:01 compilation:01 lexer:01 tokens:01 parsers:01 lexer:01 mll:01 tokens:01 parser:01 ocaml:01 ocaml:01 ocamldep:01 ocamldep:01 cmi:01 byte:01 
X-Attachments: name="all.itarget" name="all.itarget" type="application/x-shellscript" name="build_all.sh" name="build_all.sh" type="text/x-ocaml" name="myocamlbuild.ml" name="myocamlbuild.ml" name="_tags" name="_tags" 

This message is in MIME format.

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit

Hello,

While working on some parser stuff I had some compilation errors.
I am attempting to use a lexer whose tokens are shared by two
parsers implemented using Menhir. This has already been done
and for the life of me I cannot reproduce the results in [1].

So I have used menhir's demos (calc-param) [2] to try and set-up
a small and very simple build process. The source code consists of:

calc.ml
lexer.mll
tokens.mly
parser.mly

where tokens.mly are shared by the lexer and parser.

My _tag file is:
true: use_menhir, debug, profile
"tokens.mly": only_tokens
"parser.mly": token_base, ext_tokens, use_tokens

My myocamlbuild file is:
open Ocamlbuild_plugin;;
open Command;;

dispatch begin function
| After_rules ->

     (* Menhir --explain flag *)
     flag ["ocaml"; "parser" ; "menhir" ; "use_menhir" ]
     (S[A"--explain"]);

     (* Menhir --only-tokens flag *)
     flag ["ocaml"; "parser"; "menhir"; "only_tokens" ] (A"--only-tokens");
     flag ["ocaml"; "menhir_ocamldep"; "only_tokens" ] (A"--only-tokens");

     (* Menhir --external-tokens and --base flag *)
     flag ["ocaml"; "parser"; "menhir"; "ext_tokens" ]
(S[A"--external-tokens";
                                                          A"Tokens";
                                                          A"tokens.mly"; ]);
     flag ["ocaml"; "menhir_ocamldep"; "ext_tokens" ]
(S[A"--external-tokens";
                                                         A"Tokens";
                                                         A"tokens.mly"; ]);

     flag ["ocaml"; "parser"; "menhir"; "token_base" ] (S[A"--base";
                                                          A"parser"; ]);
     flag ["ocaml"; "menhir_ocamldep"; "token_base" ] (S[A"--base";
                                                         A"parser"; ]);

     dep ["ocaml"; "menhir_ocamldep"; "use_tokens"] ["fake.ml"];
     dep ["ocaml"; "parser"; "menhir"; "use_tokens"] ["fake.cmi"];

| _ -> ()
end;;

And I use a target file:
calc.d.byte

and invoke ocamlbuild using a shell script with:
ocamlbuild -verbose 100 all.otarget

The build process always ends with:

+ /home/hugof/ocaml/godi/bin/ocamlc.opt -c -g -o calc.cmo calc.ml
File "calc.ml", line 35, characters 2-13:
Unbound module Parser.Make
Command exited with code 2.

And no parser dependency file is generated.
In fact in this case no parser.mly file is even compiled.

I have tried quite a few variations, but none seem to work.
I addition to this I have noticed that Ocambuild repeats the
use of flags that may cause errors. In the line below is an example
where flag "--only-tokens" is repeated 3 times. Is this correct?

# Target: tokens.mly.depends, tags: { debug, extension:mly,
file:tokens.mly, menhir_ocamldep, ocaml, ocamldep, only_tokens, profile,
quiet, traverse, use_menhir }
/home/hugof/ocaml/godi/bin/menhir --only-tokens --raw-depend --ocamldep
'/home/hugof/ocaml/godi/bin/ocamldep.opt --only-tokens -pp --only-tokens
-modules' tokens.mly > tokens.mly.depends

Can any kind soul give me a hand with this seemingly trivial exercise?

TIA,
Hugo Ferreira.


[1]
http://caml.inria.fr/pub/ml-archives/caml-list/2007/04/d3b9765dd69a010219144200d925ea39.en.html
[2] http://cristal.inria.fr/~fpottier/menhir/menhir-20071212.tar.gz

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d
Content-Type: text/plain; name="all.itarget"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="all.itarget"

Y2FsYy5kLmJ5dGUNCg==

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d
Content-Type: application/x-shellscript; name="build_all.sh"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="build_all.sh"

IyEvYmluL2Jhc2gKCiMgRXhpdCBvbiBlcnJvcgpzZXQgLWUKCm9jYW1sYnVpbGQgLXZlcmJvc2Ug
MTAwIGFsbC5vdGFyZ2V0Cgo=

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d
Content-Type: text/x-ocaml; name="myocamlbuild.ml"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="myocamlbuild.ml"

b3BlbiBPY2FtbGJ1aWxkX3BsdWdpbjs7DQpvcGVuIENvbW1hbmQ7Ow0KDQpkaXNwYXRjaCBiZWdp
biBmdW5jdGlvbg0KfCBBZnRlcl9ydWxlcyAtPg0KDQogICAgKCogTWVuaGlyIC0tZXhwbGFpbiBm
bGFnICopDQogICAgZmxhZyBbIm9jYW1sIjsgInBhcnNlciIgOyAibWVuaGlyIiA7ICJ1c2VfbWVu
aGlyIiBdDQogICAgKFNbQSItLWV4cGxhaW4iXSk7DQoNCiAgICAoKiBNZW5oaXIgLS1vbmx5LXRv
a2VucyBmbGFnICopIA0KICAgIGZsYWcgWyJvY2FtbCI7ICJwYXJzZXIiOyAibWVuaGlyIjsgIm9u
bHlfdG9rZW5zIiBdIChBIi0tb25seS10b2tlbnMiKTsNCiAgICBmbGFnIFsib2NhbWwiOyAibWVu
aGlyX29jYW1sZGVwIjsgIm9ubHlfdG9rZW5zIiBdIChBIi0tb25seS10b2tlbnMiKTsNCg0KICAg
ICgqIE1lbmhpciAtLWV4dGVybmFsLXRva2VucyBhbmQgLS1iYXNlIGZsYWcgKikNCiAgICBmbGFn
IFsib2NhbWwiOyAicGFyc2VyIjsgIm1lbmhpciI7ICJleHRfdG9rZW5zIiBdIChTW0EiLS1leHRl
cm5hbC10b2tlbnMiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgQSJUb2tlbnMiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgQSJ0b2tlbnMubWx5IjsgXSk7DQogICAgZmxhZyBb
Im9jYW1sIjsgIm1lbmhpcl9vY2FtbGRlcCI7ICJleHRfdG9rZW5zIiBdIChTW0EiLS1leHRlcm5h
bC10b2tlbnMiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBBIlRva2VucyI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIEEidG9rZW5zLm1seSI7IF0pOw0KDQogICAgZmxhZyBbIm9j
YW1sIjsgInBhcnNlciI7ICJtZW5oaXIiOyAidG9rZW5fYmFzZSIgXSAoU1tBIi0tYmFzZSI7DQog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBB
InBhcnNlciI7IF0pOw0KICAgIGZsYWcgWyJvY2FtbCI7ICJtZW5oaXJfb2NhbWxkZXAiOyAidG9r
ZW5fYmFzZSIgXSAoU1tBIi0tYmFzZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIEEicGFyc2VyIjsgXSk7DQoNCiAgICBkZXAgWyJvY2Ft
bCI7ICJtZW5oaXJfb2NhbWxkZXAiOyAidXNlX3Rva2VucyJdIFsiZmFrZS5tbCJdOw0KICAgIGRl
cCBbIm9jYW1sIjsgInBhcnNlciI7ICJtZW5oaXIiOyAidXNlX3Rva2VucyJdIFsiZmFrZS5jbWki
XTsNCg0KfCBfIC0+ICgpDQplbmQ7Ow0KDQo=

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d
Content-Type: text/plain; name="_tags"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="_tags"

dHJ1ZTogdXNlX21lbmhpciwgZGVidWcsIHByb2ZpbGUNCiJ0b2tlbnMubWx5Ijogb25seV90b2tl
bnMNCiJwYXJzZXIubWx5IjogdG9rZW5fYmFzZSwgZXh0X3Rva2VucywgdXNlX3Rva2Vucw0KDQo=

---MOQ12182690316be1fc7baa2cd9a37c2ed84e72df1f6d--

