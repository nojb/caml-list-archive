Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id EB9D1BBAF
	for <caml-list@yquem.inria.fr>; Sat, 23 Aug 2008 04:58:18 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AucCANMZr0iCNhABiGdsb2JhbACSKgEBAQ8goguBaA
X-IronPort-AV: E=Sophos;i="4.32,255,1217800800"; 
   d="scan'208";a="16211560"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 23 Aug 2008 04:58:17 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m7N2wCXp026697;
	Sat, 23 Aug 2008 11:58:13 +0900 (JST)
Date: Sat, 23 Aug 2008 11:57:53 +0900 (JST)
Message-Id: <20080823.115753.85827777.garrigue@math.nagoya-u.ac.jp>
To: peng.zang@gmail.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] typeclasses in OCaml
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200808220854.12598.peng.zang@gmail.com>
References: <200808220854.12598.peng.zang@gmail.com>
X-Mailer: Mew version 4.2 on Emacs 22.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocaml:01 'self:01 'self:01 syntax:01 ocaml:01 type-safe:01 polymorphism:01 recursive:01 peng:98 peng:98 polymorphic:01 caml-list:01 define:02 objects:02 garrigue:03 

From: Peng Zang <peng.zang@gmail.com>

> Recently however, I tried to make a "mappable" class.  Something like:
> 
>   class type ['a] mappable = object('self)
>     method map : 'z. ('a -> 'z) -> 'z 'self
>   end
> 
> Which of course is invalid syntax.  However, I think the point is clear.  I 
> want to specify the type of all container objects that can map their 
> contents.  How do you specify this in OCaml?
> 
> I realize there are some inherent issues, eg. polymorphic classes are 
> invarient.  So I'm willing to accept some limited use of magic as long as it 
> can be hidden away and offer a type-safe interface.  Nevertheless, after half 
> a day of trying, I cannot seem to figure this out.  I don't even know how to 
> specify:
> 
>   "  a 'z version of 'self  "
> 
> In a syntactically correct way.  Is this possible?  Thank in advance,
> 
> Peng

There is no way to specify "a 'z version of 'self", and this is the
reason you cannot do this in ocaml.

Even if you don't require structural polymorphism for your object type
(which you need here, since you want to write #mappable), there are
other difficulties related to recursive types having to be regular.

A classical workaround is to define map as a function using #fold and
cons:

let map cons f (o : 'a #foldable) =
  o#fold (fun x o' -> cons (f x) o')

Note that for this to work you need #fold to be the correct fold
(i.e. fold_right)

Hope this helps,

Jacques Garrigue

