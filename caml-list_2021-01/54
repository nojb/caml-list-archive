Return-Path: <oliver@first.in-berlin.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 522F0E00A6
	for <caml-list@sympa.inria.fr>; Sun, 24 Jan 2021 15:34:41 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=oliver@first.in-berlin.de; spf=None smtp.mailfrom=oliver@first.in-berlin.de; spf=None smtp.helo=postmaster@einhorn-mail-out.in-berlin.de
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  oliver@first.in-berlin.de) identity=pra;
  client-ip=217.197.80.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="oliver@first.in-berlin.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  oliver@first.in-berlin.de) identity=mailfrom;
  client-ip=217.197.80.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="oliver@first.in-berlin.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@einhorn-mail-out.in-berlin.de) identity=helo;
  client-ip=217.197.80.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="postmaster@einhorn-mail-out.in-berlin.de";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AYrEUnx36RKEBgN+IsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMVKPad9pjvdHbS+e9qxAeQG9mCurQe0qGK6eigATVGvc/e9ihaMdRlbFwssY?=
 =?us-ascii?q?0uhQsuAcqIWwXQDcXBSGgEJvlET0Jv5HqhMEJYS47UblzWpWCuv3ZJQk2sfQV6?=
 =?us-ascii?q?Kf7oFYHMks+5y/69+4HJYwVPmTGxfa5+IA+5oAnMssQam5VuJrs+xhbGvHdDZu?=
 =?us-ascii?q?BayX91KV6JkBvw+8W98IR//yhMvv4q6tJNX7j9c6kkV7JTES4oM3oy5M3ltBnD?=
 =?us-ascii?q?SRWA634BWWgIkRRGHhbI4gjiUpj+riX1uOx92DKHPcLtVrA7RS6i76ZwRxD2ji?=
 =?us-ascii?q?oMKiM0/3vWisx0i6JbvQ6hqhliyIPafI2ZKPxzdb7GcNgEWWROQNpeVy1ZAoO9?=
 =?us-ascii?q?cYQPCfYBPf1FpIX5vlcCsAeyCRWpCO7p1zRGhGL53bci3uovEQ/IwhEuEdEAsH?=
 =?us-ascii?q?vbsNr6KaUdXPupzKXU1zjPc+9a1Sv/5YXObxsvoeuMXbV1ccfJ0EcvEwLFjkuO?=
 =?us-ascii?q?poz/IjiYy/4Cs26G4OV+UeKklmkqqwZ1ojiu2McjlJPJi5kbylDF7yV525o1Kc?=
 =?us-ascii?q?e5SE59eNKrC4VftzueN4t3RMMuWXxntzgjx7AApJW0czQExo49yB7Dd/yIbZKI?=
 =?us-ascii?q?4hT7WeuNLzl1mm9pdK6wiRuv7EWuxPHxWMa63lhEoSRIjMTBuH8N2RDP5caKSO?=
 =?us-ascii?q?dw80e81TqR1Q3e6OVJL0AomaTUL5MsxKM7mJkLsUnbACP6hUf7gLWLekgg+OWk?=
 =?us-ascii?q?8efqbqn8qpOCKoN5jBz1PL40lcylG+s4NxADX2iF9uS4073u5VP2QLRMjv02la?=
 =?us-ascii?q?nZqpbaKd0epqGjAg9V1p8v6xGiDze6ytgYnH8HIEtedx2ZlYjpP1DOIPbiAfii?=
 =?us-ascii?q?nVugiDZrx/bYMb39GpjBMGXPnbX7cbpg70NRyhA/wNND655OFL0NPer/Wkrru9?=
 =?us-ascii?q?zZCh85PRa0w+HiCNhl0YMeXWOPArGHP6PIqlKI6OMvI/OXZI8Jojr9Kv4l6+f1?=
 =?us-ascii?q?gnAng18deaip3Z0NZH+lAPtqO1+Zbmb0gtcdDWcKuRIzQ/Dwh12HVT5ffnKyX6?=
 =?us-ascii?q?Mn5jEnE4+mFofCRoW1gLObxiu7H5tWZnpHCl+WC3voeZ+ECL8wb3e3K9VijydM?=
 =?us-ascii?q?eLyvUY4n2ln6kQbgyKd8aMfQ9DcZs53Ly9V/oeHew0Ic7ztxWuOZ0n+AVSlel2?=
 =?us-ascii?q?UESjt+iKd7oFJw0H+N0LJjn7pZE5lZ6ulNUwF8OZOKnL8yMMz7Rg+UJoTBc12h?=
 =?us-ascii?q?WNjzRGhpFottke9LWF50HpCZtj6GxzCjWedHmb2RH4By86SZ1XXrI8d7jXrLhv?=
 =?us-ascii?q?F40gsWB/BXPGjjvZZRsgjeA4mSyheUlqCqcr4amSvE9WPGyneS+kBeFQR9S6HE?=
 =?us-ascii?q?WzYTaxmO9IWr1gb5V7arTI8fHE5EwM+GJLFNb4ex31tHXuz/ftXYJmi8gWOxA1?=
 =?us-ascii?q?CEy+HUYQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CvAQDwhA1glxVQxdliHQEBAQEJARIBB?=
 =?us-ascii?q?QUBQIFPAoN2ATIvhECJBIY9ghcDmkaBewsBAwELAQEvBAEBhEoCgXgCHQYGNgQ?=
 =?us-ascii?q?NAhABAQUBAQECAQMDBAETAQEBAQEBAQEJFgaGHYI4KQGDEgEEASNWEAsaAiYCA?=
 =?us-ascii?q?lcGE4MmglYDDiSzRYEyhVmCRCJNgUSBDiqFZxI9hwgmG4IAgRE2gjUuPodXgmA?=
 =?us-ascii?q?Egj6BAgMQW0RQkHk1qCqBb4ESgR2aQw8igSORcY9ksR4ThEMCCgcWgXACSIEtM?=
 =?us-ascii?q?xoIHBQ7gmlQGQ2OO44wQAMwNwIGCgEBAwmMFQEB?=
X-IPAS-Result: =?us-ascii?q?A0CvAQDwhA1glxVQxdliHQEBAQEJARIBBQUBQIFPAoN2ATI?=
 =?us-ascii?q?vhECJBIY9ghcDmkaBewsBAwELAQEvBAEBhEoCgXgCHQYGNgQNAhABAQUBAQECA?=
 =?us-ascii?q?QMDBAETAQEBAQEBAQEJFgaGHYI4KQGDEgEEASNWEAsaAiYCAlcGE4MmglYDDiS?=
 =?us-ascii?q?zRYEyhVmCRCJNgUSBDiqFZxI9hwgmG4IAgRE2gjUuPodXgmAEgj6BAgMQW0RQk?=
 =?us-ascii?q?Hk1qCqBb4ESgR2aQw8igSORcY9ksR4ThEMCCgcWgXACSIEtMxoIHBQ7gmlQGQ2?=
 =?us-ascii?q?OO44wQAMwNwIGCgEBAwmMFQEB?=
X-IronPort-AV: E=Sophos;i="5.79,371,1602540000"; 
   d="scan'208";a="488739609"
X-MGA-submission: =?us-ascii?q?MDFCxPc/orKdqibEz+Opy4KWJ2LhWxd3mnpnvk?=
 =?us-ascii?q?UrftEy37ilnCRoCQ5XzLUxwJL6AWYBTRq3k9s4TfxRKMOcIuLQXSMEtu?=
 =?us-ascii?q?7qf+qTGS7QQ6BoTj6sQMqKV12HHPl+6K3apZR/XJLoNX1DBZ9GLxD7We?=
 =?us-ascii?q?mSluCl79wI+0Py0xnZ26hmAQ=3D=3D?=
Received: from einhorn-mail-out.in-berlin.de ([217.197.80.21])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 24 Jan 2021 15:34:24 +0100
X-Envelope-From: oliver@first.in-berlin.de
Received: from authenticated.user (localhost [127.0.0.1]) by einhorn.in-berlin.de  with ESMTPSA id 10OEYMLu009466
        (version=TLSv1.3 cipher=TLS_AES_256_GCM_SHA384 bits=256 verify=NOT);
	Sun, 24 Jan 2021 15:34:22 +0100
Date: Sun, 24 Jan 2021 15:34:20 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: Markus Elfring <Markus.Elfring@web.de>
Cc: caml-list@inria.fr
Message-ID: <20210124143420.443qexv5dvgtqpbm@first.in-berlin.de>
References: <41485ac7-50cf-08fe-4206-b9f863c4d2f5@web.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <41485ac7-50cf-08fe-4206-b9f863c4d2f5@web.de>
Subject: Re: [Caml-list] Detecting missed checks for error indications in ML
 code

Hi,


Quoting  Markus Elfring <Markus.Elfring@web.de> (snt: 2021-01-24 12:42 +0100 CET) (rcv: 2021-01-24 12:42 +0100 CET):
> Hello,
> 
> OCaml belongs also to the category of functional programming languages.
> Thus the last expression in a function usually becomes the result of
> the data processing which was specified in a ML source file.
> This would usually happen also if the return value from a function call
> indicates an error code (when a function implementation does not throw an exception
> according to an error situation).
[...]

It is very common in other languages to somehow encode "errors" or
"missing values" via the result itself, by selecting a more or less
"obvius" (at the time of writing the function) value as representing an
error or missing value.
Let's call it the socilogogists approach, because I often saw
sociologists encode their data with natural numbers (starting at 1),
for say 7 or so categories, and the "no data available" was encoded as 99.

(R offers NA and NaN, but sociologists tend(ed) to use SPSS or Excel and
the 99 as exceptional value was common for decades; I think it's still
handled this way today.)

Similarly in Perl or other languages, often the empty string is used
  (undef would be better; like NULL in C, which makes sense, just don't
   dereference it; in python you have None; ...)
for indicating a certain return value, which is used like the
sociologist's 99.

But OCaml isn't just only a functional language.
It's also a typed language. And the type system can help you at this
point.
You can use the option-type for indicating missing data.
So, None and Some "" would be different.
The None indicates that there is no data available, while the Some ""
says: hey, we have data, but it's the empty string.
In that way, the empty string is not indicating a problem anymore.
And that means, that the problem you have in mind disappears!
(And if getting the empty string from the source of your data is
  indeed only possible in case of an error, return None instead of Some
  "" and you have made the conversion to a type safe return value. From
  the outside then there will be no Some "" in the set of  possibly
  returned values.)

> 
> I got the impression that corresponding error checks can occasionally be missing.
> How do you think about to detect such cases by advanced source code analysis?

No need to thest these kind of problems, as long as you use the type
system to help you as mentioned above.

Of course you can stick to the sociologists way of coding your data and
return values also in OCaml. But if you use the possibilities the
OCaml's type system offers, all that clutter with problematic values is
excluded from the beginning. No need for extra testing. Just look at the
signature of your functions.

Since a while OCaml also offers a result-type, which you can use.
It might be better than the option type in more general cases.
And if predefined types don't offer what you are looking for, just
define your own type.

Ciao,
  Oliver

