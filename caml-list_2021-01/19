Return-Path: <alan.schmitt@polytechnique.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id AF509E6255
	for <caml-list@sympa.inria.fr>; Tue,  5 Jan 2021 12:22:06 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.78,476,1599516000"; 
   d="scan'208,217";a="369081454"
Received: from clt-128-93-178-153.vpn.inria.fr (HELO set) ([128.93.178.153])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Jan 2021 12:22:05 +0100
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr,
 comp@lists.orbitalfox.eu
Date: Tue, 05 Jan 2021 12:22:05 +0100
Message-ID: <877dord3xe.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64

SGVsbG8NCg0KSGVyZSBpcyB0aGUgbGF0ZXN0IE9DYW1sIFdlZWtseSBOZXdzLCBmb3IgdGhlIHdl
ZWsgb2YgRGVjZW1iZXIgMjksIDIwMjANCnRvIEphbnVhcnkgMDUsIDIwMjEuDQoNClRhYmxlIG9m
IENvbnRlbnRzDQrilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIANCg0KRmlyc3QgcmVsZWFzZSBvZiBGZWF0DQpPQ2x1c3RlciBhbmQgT0J1aWxkZXINClBs
b3R0aW5nIDNEIHZlY3RvcnMNCk1hcnNoYWwgZGV0ZXJtaW5pc20gYW5kIHN0YWJpbGl0eQ0KSXQg
dGhlcmUgYSB0dXRvcmlhbCBmb3IgYGpzX29mX29jYW1sJyB3aXRoIHNpbXBsZSBncmFwaGljcz8N
CkludGVyZXN0aW5nIE9DYW1sIGV4ZXJjaXNlcyBmcm9tIEZyYW7Dp29pcyBQb3R0aWVyIGF2YWls
YWJsZSBvbmxpbmUNCk9sZCBDV04NCg0KDQpGaXJzdCByZWxlYXNlIG9mIEZlYXQNCuKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0K
DQogIEFyY2hpdmU6DQogIDxodHRwczovL2Rpc2N1c3Mub2NhbWwub3JnL3QvYW5uLWZpcnN0LXJl
bGVhc2Utb2YtZmVhdC83MDMzLzE+DQoNCg0KRnJhbsOnb2lzIFBvdHRpZXIgYW5ub3VuY2VkDQri
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIANCg0KICBBIGJyaWVmIG5vdGUgdG8gYW5ub3VuY2UgdGhlIGZp
cnN0IHJlbGVhc2Ugb2YgRmVhdDoNCg0KICDilIzilIDilIDilIDilIANCiAg4pSCIG9wYW0gdXBk
YXRlDQogIOKUgiBvcGFtIGluc3RhbGwgZmVhdA0KICDilJTilIDilIDilIDilIANCg0KICBGZWF0
IGlzIGEgbGlicmFyeSB0aGF0IG9mZmVycyBzdXBwb3J0IGZvciBjb3VudGluZywgZW51bWVyYXRp
bmcsIGFuZA0KICBzYW1wbGluZyBvYmplY3RzIG9mIGEgY2VydGFpbiBraW5kLCBzdWNoIGFzIChz
YXkpIHRoZSBpbmhhYml0YW50cyBvZg0KICBhbiBhbGdlYnJhaWMgZGF0YSB0eXBlLg0KDQogIEZl
YXQgd2FzIGluc3BpcmVkIGJ5IHRoZSBwYXBlciAiRmVhdDogRnVuY3Rpb25hbCBFbnVtZXJhdGlv
biBvZg0KICBBbGdlYnJhaWMgVHlwZXMiIGJ5IEpvbmFzIER1cmVnw6VyZCwgUGF0cmlrIEphbnNz
b24gYW5kIE1lbmcgV2FuZw0KICAoMjAxMikuDQoNCiAgTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3Vu
ZCBoZXJlOg0KDQogIDxodHRwczovL2dpdGxhYi5pbnJpYS5mci9mcG90dGllci9mZWF0Lz4NCg0K
DQpPQ2x1c3RlciBhbmQgT0J1aWxkZXINCuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIEFyY2hpdmU6DQogIDxodHRwczov
L2Rpc2N1c3Mub2NhbWwub3JnL3QvYW5uLW9jbHVzdGVyLWFuZC1vYnVpbGRlci83MDM1LzE+DQoN
Cg0KVGhvbWFzIExlb25hcmQgYW5ub3VuY2VkDQrilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIANCg0KICBJJ20gcGxl
YXNlZCB0byBhbm5vdW5jZSB0aGUgZmlyc3QgcmVsZWFzZSBvZiBbT0NsdXN0ZXJdLiBBIHVzZXIg
Y2FuDQogIHN1Ym1pdCBhIGJ1aWxkIGpvYiAoZWl0aGVyIGEgRG9ja2VyZmlsZSBvciBhbiBPQnVp
bGRlciBzcGVjKSB0byB0aGUNCiAgc2NoZWR1bGVyLCB3aGljaCB0aGVuIHJ1bnMgdGhlIGJ1aWxk
IG9uIGEgd29ya2VyIG1hY2hpbmUsIHN0cmVhbWluZw0KICB0aGUgbG9ncyBiYWNrIHRvIHRoZSBj
bGllbnQuDQoNCiAgVGhpcyBpcyB0aGUgYnVpbGQgc2NoZWR1bGVyIC8gY2x1c3RlciBtYW5hZ2Vy
IHRoYXQgd2UgdXNlIGZvciBlLmcuDQogIFtvcGFtLXJlcG8tY2ldICh3aGljaCB5b3UgbWF5IGhh
dmUgc2VlbiBpbiBhY3Rpb24gaWYgeW91IHN1Ym1pdHRlZCBhDQogIHBhY2thZ2UgdG8gb3BhbS1y
ZXBvc2l0b3J5IHJlY2VudGx5KS4NCg0KICBTZWUgW29jdXJyZW50L292ZXJ2aWV3XSBmb3IgYSBx
dWljayBvdmVydmlldyBvZiB0aGUgdmFyaW91cyBvdGhlciBDSQ0KICBzZXJ2aWNlcyB1c2luZyBp
dCB0b28uDQoNCiAgVG8gaW5zdGFsbCBhbmQgcnVuIHRoZSBzY2hlZHVsZXIgdXNlIGUuZy4NCg0K
ICDilIzilIDilIDilIDilIANCiAg4pSCIG9wYW0gZGVwZXh0IC1pIG9jbHVzdGVyDQogIOKUgiBt
a2RpciBjYXBucC1zZWNyZXRzDQogIOKUgiBvY2x1c3Rlci1zY2hlZHVsZXIgXA0KICDilIIgICAt
LWNhcG5wLXNlY3JldC1rZXktZmlsZT0uL2NhcG5wLXNlY3JldHMva2V5LnBlbSBcDQogIOKUgiAg
IC0tY2FwbnAtbGlzdGVuLWFkZHJlc3M9dGNwOjAuMC4wLjA6OTAwMCBcDQogIOKUgiAgIC0tY2Fw
bnAtcHVibGljLWFkZHJlc3M9dGNwOjEyNy4wLjAuMTo5MDAwIFwNCiAg4pSCICAgLS1zdGF0ZS1k
aXI9L3Zhci9saWIvb2NsdXN0ZXItc2NoZWR1bGVyIFwNCiAg4pSCICAgLS1wb29scz1saW51eC1h
cm0zMixsaW51eC14ODZfNjQNCiAg4pSU4pSA4pSA4pSA4pSADQoNCiAgSXQgd2lsbCBnZW5lcmF0
ZSBga2V5LnBlbScgb24gdGhlIGZpcnN0IHJ1biwgYXMgd2VsbCBhcyB2YXJpb3VzDQogIGNhcGFi
aWxpdHkgZmlsZXMgZ3JhbnRpbmcgYWNjZXNzIGZvciB3b3JrZXJzIGFuZCBjbGllbnRzLiBZb3Ug
dGhlbg0KICBjb3B5IGVhY2ggZ2VuZXJhdGVkIHBvb2wgY2FwYWJpbGl0eSAoZS5nLiBgcG9vbC1s
aW51eC14ODZfNjQuY2FwJykgdG8NCiAgZWFjaCBtYWNoaW5lIHlvdSB3YW50IGluIHRoYXQgcG9v
bCwgYW5kIHJ1biBgb2NsdXN0ZXItd29ya2VyDQogIHBvb2wtbGludXgteDg2XzY0LmNhcCcgdG8g
c3RhcnQgdGhlIHdvcmtlciBhZ2VudC4gU2VlIHRoZSBbUkVBRE1FXSBmb3INCiAgZnVsbCBkZXRh
aWxzLg0KDQogIFtPQnVpbGRlcl0gaXMgYW4gYWx0ZXJuYXRpdmUgdG8gYGRvY2tlciBidWlsZCcu
IFRoZSBtYWluIGRpZmZlcmVuY2VzDQogIGFyZSB0aGF0IGl0IHRha2VzIGEgc3BlYyBpbiBTLWV4
cHJlc3Npb24gZm9ybWF0LCB3aGljaCBpcyBlYXNpZXIgdG8NCiAgZ2VuZXJhdGUgdGhhbiBhIERv
Y2tlcmZpbGUsIGhhbmRsZXMgY29uY3VycmVudCBidWlsZHMgcmVsaWFibHksIGFuZA0KICBrZWVw
cyBjb3BpZXMgb2YgdGhlIGxvZ3Mgc28gdGhhdCB5b3Ugc3RpbGwgc2VlIHRoZSBvdXRwdXQgZXZl
biBpZg0KICBzb21lb25lIGVsc2UgcGVyZm9ybWVkIHRoZSBzYW1lIGJ1aWxkIHN0ZXAgZWFybGll
ciBhbmQgdGhlIHJlc3VsdCBpcw0KICB0aGVyZWZvcmUgdGFrZW4gZnJvbSB0aGUgY2FjaGUuDQoN
CiAgSXQgY3VycmVudGx5IHN1cHBvcnRzIFpGUyBhbmQgQnRyZnMgZm9yIHN0b3JhZ2UgKGl0IG5l
ZWRzIGNoZWFwDQogIHNuYXBzaG90cykgYW5kIGBydW5jJyBmb3Igc2FuZGJveGluZyBidWlsZHMu
IFttYWNvcyBzdXBwb3J0XSBpcyB1bmRlcg0KICBkZXZlbG9wbWVudCwgYnV0IG5vdCB5ZXQgdXBz
dHJlYW1lZC4gSXQgc2hvdWxkIGJlIGZhaXJseSBlYXN5IHRvIGFkZA0KICBzdXBwb3J0IGZvciBh
bnkgcGxhdGZvcm0gdGhhdCBoYXMgc29tZSBmb3JtIG9mIHNlY3VyZSBjaHJvb3QuDQoNCiAgT0Ns
dXN0ZXIgc3VwcG9ydHMgbW9uaXRvcmluZyB3aXRoIFByb21ldGhldXMsIHNvIHlvdSBjYW4gc2Vl
IHdoYXQgdGhlDQogIGNsdXN0ZXIgaXMgZG9pbmc6DQoNCiAgPGh0dHBzOi8vYXdzMS5kaXNjb3Vy
c2UtY2RuLmNvbS9zdGFuZGFyZDExL3VwbG9hZHMvb2NhbWwvb3B0aW1pemVkLzJYL2QvZDVmZjVh
YWEwMjU5ZDdiNTk0NDViMTU2ZTZiNjQyYTQyMTA0MGI2NF8yXzkyMHg3NTAucG5nPg0KDQoNCltP
Q2x1c3Rlcl0gPGh0dHBzOi8vZ2l0aHViLmNvbS9vY3VycmVudC9vY2x1c3Rlcj4NCg0KW29wYW0t
cmVwby1jaV0gPGh0dHBzOi8vZ2l0aHViLmNvbS9vY3VycmVudC9vcGFtLXJlcG8tY2k+DQoNCltv
Y3VycmVudC9vdmVydmlld10gPGh0dHBzOi8vZ2l0aHViLmNvbS9vY3VycmVudC9vdmVydmlldz4N
Cg0KW1JFQURNRV0gPGh0dHBzOi8vZ2l0aHViLmNvbS9vY3VycmVudC9vY2x1c3Rlci9ibG9iL21h
c3Rlci9SRUFETUUubWQ+DQoNCltPQnVpbGRlcl0gPGh0dHBzOi8vZ2l0aHViLmNvbS9vY3VycmVu
dC9vYnVpbGRlcj4NCg0KW21hY29zIHN1cHBvcnRdIDxodHRwczovL2dpdGh1Yi5jb20vb2N1cnJl
bnQvb2J1aWxkZXIvaXNzdWVzLzU3Pg0KDQoNClBsb3R0aW5nIDNEIHZlY3RvcnMNCuKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIEFy
Y2hpdmU6IDxodHRwczovL2Rpc2N1c3Mub2NhbWwub3JnL3QvcGxvdHRpbmctM2QtdmVjdG9ycy83
MDM4LzE+DQoNCg0KQW5kcmVhcyBQb2lzZWwgYXNrZWQNCuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQogIEknbSBkb2luZyBsaW5l
YXIgYWxnZWJyYSB3aXRoIE93bC4gIE93bC1wbHBsb3Qgd29ya3MgZ3JlYXQgZm9yDQogIHZpc3Vh
bGl6aW5nIDJEIHZlY3RvcnMsIGJ1dCBpdCBkb2Vzbid0IHNlZW0gdG8gY2FwYWJsZSBvZiBwbG90
dGluZyAzRA0KICB2ZWN0b3JzLg0KDQogIEkgdG9vayBhIChmYXN0KSBsb29rIGF0IHZhbmlsbGEg
W1BscGxvdF0sIFtPcGxvdF0sIGFuZCB0aGUgW0dOVXBsb3QNCiAgYmluZGluZ3NdLCBidXQgSSBk
aWRuJ3QgZmluZCBhIHNpbXBsZSB3YXkgdG8gcGxvdCAzRCB2ZWN0b3JzLg0KDQogIEkgZG9uJ3Qg
bmVlZCBoaWdoIHF1YWxpdHkgcGxvdHMsIDNEIHN1cmZhY2VzLCBhIGxvdCBvZiBjb250cm9sIG9y
DQogIGZhbmN5IGZlYXR1cmVzLCBqdXN0IGEgY29vcmRpbmF0ZSBzeXN0ZW0gYW5kIHNvbWUgZnVu
Y3Rpb24gdG8gZHJhdw0KICBnZW9tZXRyaWMgcHJpbWl0aXZlcyAocG9pbnRzLCBsaW5lcywgY2ly
Y2xlcywgZXRjLikuDQoNCiAgRGlkIEkgbWlzcyBhbnl0aGluZyBvciBkbyBJIGhhdmUgdG8gYnVp
bGQgdGhpcyBteXNlbGYgd2l0aCB0aGUgZ29vZA0KICBvbGQgR3JhcGhpY3MgbW9kdWxlPw0KDQoN
CltQbHBsb3RdIDxodHRwOi8vcGxwbG90Lm9yZy8+DQoNCltPcGxvdF0gPGh0dHBzOi8vZ2l0aHVi
LmNvbS9zYW5ldHRlL29wbG90Pg0KDQpbR05VcGxvdCBiaW5kaW5nc10gPGh0dHBzOi8vZ2l0aHVi
LmNvbS9jLWN1YmUvb2NhbWwtZ251cGxvdD4NCg0KDQpNYXJzaGFsbCBBYnJhbXMgcmVwbGllZA0K
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSADQoNCiAgV2hhdCBraW5kIG9mIHZlY3RvciByZXByZXNlbnRhdGlvbiBkbyB5
b3Ugd2FudD8gIEp1c3QgbGluZXMvYXJyb3dzIGluDQogIDNEPyAgVGhhdCdzIGp1c3QgYSBjdXJ2
ZSBpbiAzRCwgc28gaXQgc2hvdWxkIGJlIHBvc3NpYmxlIHdpdGggT3dsIGFuZA0KICBwbHBsb3Qs
IGF0IGxlYXN0LiAgTG9va3MgbGlrZSBpdCBzaG91bGQgYmUgZWFzeSB3aXRoIG9wbG90LCB0b28g
KGJ1dCBJDQogIGhhdmVuJ3QgdXNlZCBvcGxvdCkuICBUaGVyZSBhcmUgc29tZSAzRCBPd2wgcGxw
bG90IGV4YW1wbGVzLCB3aXRoDQogIHNvdXJjZSBjb2RlLCBvbiB0aGVzZSBwYWdlczoNCg0KICA8
aHR0cHM6Ly9vY2FtbC54eXovYm9vay92aXN1YWxpc2F0aW9uLmh0bWw+DQoNCiAgPGh0dHBzOi8v
Z2l0aHViLmNvbS9vd2xiYXJuL293bC93aWtpL1R1dG9yaWFsOi1Ib3ctdG8tUGxvdC1pbi1Pd2wl
M0Y+DQoNCiAgPGh0dHBzOi8vZ2l0aHViLmNvbS9vd2xiYXJuL293bC93aWtpL1Bsb3QtR2FsbGVy
eT4NCg0KICBJIGRvbid0IGtub3cgd2hldGhlciBpdCB3aWxsIGJlIGVhc3kgdG8gYWRhcHQgdGhl
bSB0byB5b3VyIG5lZWRzLiAgSQ0KICB3cm90ZSB0aGUgbGFzdCBleGFtcGxlIG9uIHRoZSBsYXN0
IHBhZ2UgYWJvdmUuICBJdCdzIGEgcGxvdCBvZiBhDQogIHNlcmllcyAyRCBjdXJ2ZXMgaW4gM0Qu
ICBNYXliZSBzb21lIG9mIHRoZSB0ZWNobmlxdWVzIGNhbiBiZSBhZGFwdGVkDQogIHRvIHlvdXIg
bmVlZHMuICAoVGhlIGNvZGUgaXMgYSBmZXcgeWVhcnMgb2xkLiAgSSdtIG5vdCBzdXJlIHdoZXRo
ZXIgaXQNCiAgd29ya3Mgd2l0aCB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIE93bC4pDQoNCiAgKElm
IHlvdSBlbmQgdXAgaGF2aW5nIHRvIHVzZSBsb3ctbGV2ZWwgYmluZGluZ3MgdG8gcGxwbG90LCBv
cGxvdCwNCiAgZXRjLiBmcm9tIE93bCwgeW91IG1pZ2h0IGNvbnNpZGVyIGNvbnRyaWJ1dGluZyBh
IHdyYXBwZXIgbW9kdWxlIHRoYXQNCiAgbWFrZXMgaXQgZWFzeSB0byBkbyB0aGUga2luZCBvZiBw
bG90IHlvdSB3YW50LikNCg0KDQpBbmRyZWFzIFBvaXNlbCB0aGVuIHNhaWQNCuKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgA0KDQogIFRoYW5rIHlvdSBmb3IgeW91ciBhbnN3ZXIuDQoNCiAgSSdkIGp1c3QgbGlrZSB0
byBkcmF3IDNEIHZlY3RvcnMgaW4gYSBjYXJ0ZXNpYW4gY29vcmRpbmF0ZSBzeXN0ZW0uICBBDQog
IHBsb3Qgc2hvdWxkIGxvb2sgc2ltaWxhciB0byB0aGlzOg0KDQogIDxodHRwczovL3VwbG9hZC53
aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2YvZmQvM0RfVmVjdG9yLnN2Zy84
MDBweC0zRF9WZWN0b3Iuc3ZnLnBuZz4NCg0KICBJIHdvdWxkbid0IGV2ZW4gbmVlZCBhcnJvd3Ms
IHNpbXBsZSBsaW5lcyB3b3VsZCBiZSBvay4NCg0KICBNYXliZSB0aGVyZSBpcyBhIHdheSB0byB1
c2Ugb25lIG9mIHRoZSAzRCBmdW5jdGlvbnMgKGBQbG90LnN1cmYnLA0KICBgUGxvdC5tZXNoJywg
YFBsb3QuY29udG91cicpLCBidXQgSSBjYW4ndCBmaWd1cmUgaXQgb3V0Lg0KDQoNCkhlemVraWFo
IENhcnR5IHJlcGxpZWQNCuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQogIEl0J3MgYmVlbiBhIHdoaWxlIHNpbmNlIEkg
d29ya2VkIHdpdGggcGxwbG90IGJ1dCB3aGF0IHlvdSBzaG93ZWQNCiAgc2hvdWxkIGJlIHBvc3Np
YmxlLiBUaGUgW3BsbGluZTNdIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gcGxvdCBsaW5lDQogIHNl
Z21lbnRzIGluIDNkIHNwYWNlLiBUaGUgZnVuY3Rpb24gaXMgc2V0dXAgdG8gdGFrZSBtdWx0aXBs
ZSBzZWdtZW50cw0KICBpbiBhIHNpbmdsZSBjYWxsLiBGb3IgYSBzaW5nbGUgc2VnbWVudCBlYWNo
IGFycmF5IHdvdWxkIGhvbGQgYSBzaW5nbGUNCiAgdmFsdWUuIENvbG9ycyBjYW4gYmUgc2V0IGJl
dHdlZW4gZHJhdyBjYWxscy4NCg0KDQpbcGxsaW5lM10NCjxodHRwOi8vcGxwbG90Lm9yZy9kb2Ni
b29rLW1hbnVhbC9wbHBsb3QtaHRtbC01LjE1LjAvcGxsaW5lMy5odG1sPg0KDQoNCnNhbmV0dGUg
YWxzbyByZXBsaWVkDQrilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIANCg0KICBpbiBvcGxvdCwgdGhlcmUgaXMgdGhlIEN1cnZlM2Qgb2Jq
ZWN0IHRoYXQgc2hvdWxkIGRvIGl0LA0KICA8aHR0cHM6Ly9zYW5ldHRlLmdpdGh1Yi5pby9vcGxv
dC9vcGxvdC9PcGxvdC9QbHQvaW5kZXguaHRtbCN0eXBlLXBsb3Rfb2JqZWN0LkN1cnZlM2Q+DQog
IGFsdGhvdWdoIGl0IGlzIHF1aXRlIHJ1ZGltZW50YXJ5DQoNCg0KTWFyc2hhbCBkZXRlcm1pbmlz
bSBhbmQgc3RhYmlsaXR5DQrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZANCg0KICBBcmNoaXZlOg0KICA8aHR0cHM6Ly9kaXNjdXNzLm9jYW1sLm9yZy90L21hcnNoYWwt
ZGV0ZXJtaW5pc20tYW5kLXN0YWJpbGl0eS83MDQxLzI1Pg0KDQoNCkRlZXAgaW4gdGhpcyB0aHJl
YWQsIEJpa2FsIExlbSBtZW50aW9uZWQgYW5kIFJhcGhhw6tsIFByb3VzdCBkZXNjcmliZWQNCuKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQogICAgICAgIFtCaW5hcnkgbW9k
dWxlIG9mIGRhdGEtZW5jb2RpbmddDQoNCiAgUXVpY2sgbm90ZXMgYWJvdXQgdGhpcyBhcHByb2Fj
aDoNCg0KICDigKIgSXQgaXMgdXNlZCBleHRlbnNpdmVseSBpbiB0aGUgVGV6b3MgY29kZWJhc2Uu
IEZvciBkYXRhIGV4Y2hhbmdlIChpbg0KICAgIHRoZSBwMnAgbGF5ZXIpLCBmb3IgZGF0YSBhdCBy
ZXN0IChjb25maWd1cmF0aW9uIGZpbGVzKSwgYW5kIGZvciBhDQogICAgbWl4IG9mIHRoZSB0d28g
KHNlcmlhbGlzYXRpb24gb2YgZWNvbm9taWMgcHJvdG9jb2wgZGF0YSB3aGljaCBpcw0KICAgIGJv
dGggZXhjaGFuZ2VkIGJ5IHBlZXJzIGFuZCBzdG9yZWQgb24gZGlzaykuDQogIOKAoiBJdCBpcyBm
bGV4aWJsZSBpbiB0aGF0IHlvdSBoYXZlIGdyZWF0IGNvbnRyb2wgb3ZlciB0aGUNCiAgICByZXBy
ZXNlbnRhdGlvbiBvZiBkYXRhIGFuZCB0aGUgc2VyaWFsaXNhdGlvbi9kZXNlcmlhbGlzYXRpb24N
CiAgICBwcm9jZWR1cmUuIFRoZXJlIGlzIGEgbWVkaXVtLXRlcm0gcGxhbiB0byBhbGxvdyBldmVu
IG1vcmUNCiAgICBjb250cm9sLiBGb3Igbm93IHlvdSBjYW4gZGVjaWRlLCBzYXksIGlmIDggYm9v
bGVhbnMgYXJlIHJlcHJlc2VudGVkDQogICAgYXMgb25lIGJ5dGUsIDggYnl0ZXMsIG9yIDggd29y
ZHMgKG9yIHNvbWV0aGluZyBlbHNlIGFsdG9nZXRoZXIpIChzZWUNCiAgICBjb2RlIGJlbG93KS4N
CiAg4oCiIFNvbWUgb2YgdGhlIHJlc3BvbnNpYmlsaXR5IGZvciBjb3JyZWN0bmVzcyByZXN0cyB1
cG9uIHlvdXIgc2hvdWxkZXJzDQogICAgYXMgYSB1c2VyLiBFLmcuLCB3aGVuIHlvdSBlbmNvZGUg
YSB0dXBsZSwgdGhlIGxlZnQgZWxlbWVudCBtdXN0IGhhdmUNCiAgICBlaXRoZXIgYSBmaXhlZCBs
ZW5ndGggKGUuZy4sIGJlIGFuIGludDgsIGludDMyLCBldGMuLCBiZSBhDQogICAgZml4ZWQtbGVu
Z3RoIHN0cmluZywgb3IgYmUgYSB0dXBsZSBvZiBmaXhlZC1sZW5ndGggdmFsdWVzKSBvciBiZQ0K
ICAgIHByZWZpeGVkIGJ5IGEgbGVuZ3RoIG1hcmtlciAod2hpY2ggdGhlIGxpYnJhcnkgcHJvdmlk
ZXMgYSBjb21iaW5hdG9yDQogICAgZm9yKS4gTW9zdCBvZiB0aGUgZXJyb3JzIGZvciB0aGlzIGFy
ZSByYWlzZWQgd2hlbiB5b3UgZGVjbGFyZSB0aGUNCiAgICBlbmNvZGluZyBhbmQgYSBmZXcgYXJl
IHJhaXNlZCB3aGVuIHlvdSB1c2UgdGhlIGVuY29kaW5nLiBJIHJlY29tbWVuZA0KICAgIHdyaXRp
bmcgc29tZSB0ZXN0cyB0byBjaGVjayB0aGF0IHlvdXIgZW5jb2RpbmdzIGFjY2VwdCB0aGUgcmFu
Z2Ugb2YNCiAgICB2YWx1ZXMgdGhhdCB5b3UgYXJlIGdvaW5nIHRvIHRocm93IGF0IHRoZW0uDQog
IOKAoiBUaGUgbGlicmFyeSBpcyB3ZWxsIHRlc3RlZDogdGhlcmUgYXJlIHRlc3RzIHVzaW5nIGNy
b3diYXIgdG8gY2hlY2sNCiAgICB0aGF0IGVuY29kaW5nIGFuZCBkZWNvZGluZyBhcmUgYWN0dWFs
IGludmVyc2Ugb2YgZWFjaCBvdGhlcnMuDQoNCiAgTGV0IG1lIGtub3cgaWYgeW91IGhhdmUgbW9y
ZSBxdWVzdGlvbnMuIEFuZCBpbiB0aGUgbWVhbnRpbWUsIGhlcmUncw0KICB0d28gZGlmZmVyZW50
IGVuY29kaW5ncyBmb3IgYSB0dXBsZSBvZiA4IGJvb2xlYW5zOg0KDQogIOKUjOKUgOKUgOKUgOKU
gA0KICDilIIgKCogZWFzeS1lbmNvZGluZywgcHJvZHVjZXMgOCBieXRlcyAqKQ0KICDilIIgbGV0
IGJvb2xzYXM4Ynl0ZXMgPQ0KICDilIIgICAgdHVwOCBib29sIGJvb2wgYm9vbCBib29sIGJvb2wg
Ym9vbCBib29sIGJvb2wNCiAg4pSCIA0KICDilIIgKCogdmVyeS1jb21wYWN0IGVuY29kaW5nLCBw
cm9kdWNlcyAxIGJ5dGUgKikNCiAg4pSCIGxldCBib29sc2FzMWJ5dGUgPQ0KICDilIIgICAgY29u
dg0KICDilIIgICAgICAgKGZ1biAoYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4KSAtPg0K
ICDilIIgCSBsZXQgYWNjID0gMCBpbg0KICDilIIgCSBsZXQgYWNjID0gaWYgYjEgdGhlbiBhY2Mg
bG9yIDBiMTAwMDAwMDAgZWxzZSBhY2MgaW4NCiAg4pSCIAkgbGV0IGFjYyA9IGlmIGIyIHRoZW4g
YWNjIGxvciAwYjAxMDAwMDAwIGVsc2UgYWNjIGluDQogIOKUgiAJIGxldCBhY2MgPSBpZiBiMyB0
aGVuIGFjYyBsb3IgMGIwMDEwMDAwMCBlbHNlIGFjYyBpbg0KICDilIIgCSDigKYNCiAg4pSCIAkg
YWNjKQ0KICDilIIgICAgICAgKGZ1biBpIC0+DQogIOKUgiAJIGxldCBiMSA9IGkgbGFuZCAwYjEw
MDAwMDAwIDw+IDAgaW4NCiAg4pSCIAkgbGV0IGIxID0gaSBsYW5kIDBiMDEwMDAwMDAgPD4gMCBp
bg0KICDilIIgCSBsZXQgYjEgPSBpIGxhbmQgMGIwMDEwMDAwMCA8PiAwIGluDQogIOKUgiAJIOKA
pg0KICDilIIgCSAoYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4KSkNCiAg4pSCICAgICAg
IHVpbnQ4DQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIEluIGdlbmVyYWwsIGRhdGEtZW5jb2Rpbmcg
aXMgcHJvYmFibHkgc2xvd2VyIHRoYW4gbWFyc2hhbCwgYnV0IGl0cw0KICBzdHJvbmcgcG9pbnRz
IGFyZToNCiAg4oCiIGl0IG9mZmVycyBzb21lIHR5cGUgZ3VhcmFudGVlcywNCiAg4oCiIGl0IGdp
dmVzIHlvdSBzb21lIGNvbnRyb2wgb3ZlciB0aGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGEs
DQogIOKAoiBpdCBhbGxvd3MgeW91IHRvIGRlZmluZSByZXByZXNlbnRhdGlvbnMgdGhhdCBhcmUg
ZWFzeSB0byBwYXJzZSBpbg0KICAgIG90aGVyIGxhbmd1YWdlcyBvciBpbiBvdGhlciB2ZXJzaW9u
cyBvZiB0aGUgc2FtZSBsYW5ndWFnZSwNCiAg4oCiIGl0IGdlbmVyYXRlcyBkb2N1bWVudGF0aW9u
IGFib3V0IHRoZSBkYXRhLXJlcHJlc2VudGF0aW9uLg0KDQoNCltCaW5hcnkgbW9kdWxlIG9mIGRh
dGEtZW5jb2RpbmddDQo8aHR0cHM6Ly9naXRsYWIuY29tL25vbWFkaWMtbGFicy9kYXRhLWVuY29k
aW5nPg0KDQoNCkl0IHRoZXJlIGEgdHV0b3JpYWwgZm9yIGBqc19vZl9vY2FtbCcgd2l0aCBzaW1w
bGUgZ3JhcGhpY3M/DQrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZANCg0KICBBcmNoaXZlOg0KICA8aHR0cHM6Ly9kaXNjdXNzLm9j
YW1sLm9yZy90L2l0LXRoZXJlLWEtdHV0b3JpYWwtZm9yLWpzLW9mLW9jYW1sLXdpdGgtc2ltcGxl
LWdyYXBoaWNzLzQ2MzYvNz4NCg0KDQpEZWVwIGluIHRoaXMgdGhyZWFkLCBQaGF0IEt5IHNhaWQN
CuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQogIFRoaXMgaXMg
YSByZWFsbHksIHJlYWxseSBsYXRlIHJlcGx5IGJ1dCB0aGlzIHlvdXR1YmUgdmlkZW8gd2FzIHZl
cnkNCiAgaGVscGZ1bCB0byBtZSDigKYgIDxodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92
PWhfZTVwUEtJMEs0Pg0KDQoNCkludGVyZXN0aW5nIE9DYW1sIGV4ZXJjaXNlcyBmcm9tIEZyYW7D
p29pcyBQb3R0aWVyIGF2YWlsYWJsZSBvbmxpbmUNCuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kA0KDQogIEFyY2hpdmU6DQogIDxodHRwczovL2Rpc2N1c3Mub2NhbWwub3JnL3QvaW50ZXJlc3Rp
bmctb2NhbWwtZXhlcmNpc2VzLWZyb20tZnJhbmNvaXMtcG90dGllci1hdmFpbGFibGUtb25saW5l
LzcwNTAvMT4NCg0KDQpnYXNjaGUgYW5ub3VuY2VkDQrilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIANCg0KICBUaGUgcmVjZW50IFVSTA0KICA8aHR0cHM6Ly9v
Y2FtbC1zZi5vcmcvbGVhcm4tb2NhbWwtcHVibGljLyNhY3Rpdml0eSUzRGV4ZXJjaXNlcz4NCiAg
Y29udGFpbnMgYXV0by1ncmFkZWQgT0NhbWwgZXhlcmNpc2VzLCBpbiBwYXJ0aWN1bGFyIGEgYnVu
Y2ggb2YNCiAgYWR2YW5jZWQgYW5kIGZhaXJseSBpbnRlcmVzdGluZyBleGVyY2ljZXMgd3JpdHRl
biBieSBGcmFuw6dvaXMgUG90dGllciwNCiAgd2hpY2ggSSB3b3VsZCByZWNvbW1lbmQgZm9yIGFu
eW9uZSBrbm93bGVkZ2VhYmxlIGluIE9DYW1sIGFuZCBjdXJpb3VzDQogIGFib3V0IGFsZ29yaXRo
bXMgYW5kIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcuIChZb3UgaGF2ZSB0byBzY3JvbGwgZG93bg0K
ICB0byBzZWUgdGhvc2UsIHRoZSBleGVyY2lzZXMgYXQgdGhlIHRvcCBjb21lIGZyb20gdGhlIE9D
YW1sIE1PT0MuKQ0KDQogIFNlZSBmb3IgZXhhbXBsZSBGcmFuw6dvaXMnIGV4ZXJjaXNlcyBvbjoN
CiAg4oCiIFtBbHBoYS1CZXRhIFNlYXJjaF0sDQogIOKAoiBbUGFyc2VyIGNvbWJpbmF0b3JzXSwN
CiAg4oCiIFtIdWZmbWFuIENvbXByZXNzaW9uXSwNCiAg4oCiIFtJbXBsZW1lbnRpbmcgYmFja3Ry
YWNraW5nIHdpdGggY29udGludWF0aW9uc10sIG9yDQogIOKAoiBteSBwZXJzb25hbCBmYXZvcml0
ZSwgW3JlaW1wbGVtZW50aW5nIHRoZSBjb3JlIG9mIGEgcHJldHR5LXByaW50ZXJdLg0KDQogIENv
bnRleHQ6IHRoZSBleGVyY2lzZSBwbGF0Zm9ybSBpcyBbTGVhcm5PQ2FtbF0sIGluaXRpYWxseSB3
cml0dGVuIGJ5DQogIE9DYW1sUHJvIGZvciB0aGUgT0NhbWwgTU9PQyBhbmQgbWFpbnRhaW5nIGJ5
IFlhbm4gUsOpZ2lzLUdpYW5hcw0KICAoQHl1cnVnKSBvbiBiZWhhbGYgb2YgdGhlIFtPQ2FtbCBT
b2Z0d2FyZSBGb3VuZGF0aW9uXS4gV2UgKGF0IHRoZQ0KICBGb3VuZGF0aW9uKSBhcmUgdHJ5aW5n
IHRvIGFzc2VtYmxlIGEgY29ycHVzIG9mIG5pY2UgT0NhbWwgZXhlcmNpc2VzDQogIGZvciB0ZWFj
aGVycyBhbmQgcGVvcGxlIHNlbGYtc3R1ZHlpbmcsIGFuZCB0aGUgbmljZSBleGVyY2lzZXMgYnkN
CiAgRnJhbsOnb2lzIFBvdHRpZXIgKEBmcG90dGllcikgd2VyZSB3cml0dGVuIGFzIHBhcnQgb2Yg
dGhpcyBpbml0aWF0aXZlLg0KDQoNCltBbHBoYS1CZXRhIFNlYXJjaF0NCjxodHRwczovL29jYW1s
LXNmLm9yZy9sZWFybi1vY2FtbC1wdWJsaWMvZXhlcmNpc2UuaHRtbCNpZCUzRGZwb3R0aWVyL2Fs
cGhhX2JldGElMjZ0YWIlM0R0ZXh0JTI2cHJlbHVkZSUzRHNob3duPg0KDQpbUGFyc2VyIGNvbWJp
bmF0b3JzXQ0KPGh0dHBzOi8vb2NhbWwtc2Yub3JnL2xlYXJuLW9jYW1sLXB1YmxpYy9leGVyY2lz
ZS5odG1sI2lkJTNEZnBvdHRpZXIvcGFyc2VyX2NvbWJpbmF0b3JzJTI2dGFiJTNEdGV4dD4NCg0K
W0h1ZmZtYW4gQ29tcHJlc3Npb25dDQo8aHR0cHM6Ly9vY2FtbC1zZi5vcmcvbGVhcm4tb2NhbWwt
cHVibGljL2V4ZXJjaXNlLmh0bWwjaWQlM0RmcG90dGllci9odWZmbWFuJTI2dGFiJTNEdGV4dCUy
NnByZWx1ZGUlM0RzaG93bj4NCg0KW0ltcGxlbWVudGluZyBiYWNrdHJhY2tpbmcgd2l0aCBjb250
aW51YXRpb25zXQ0KPGh0dHBzOi8vb2NhbWwtc2Yub3JnL2xlYXJuLW9jYW1sLXB1YmxpYy9leGVy
Y2lzZS5odG1sI2lkJTNEZnBvdHRpZXIvbm9uZGV0X21vbmFkX2NvbnQlMjZ0YWIlM0R0ZXh0JTI2
cHJlbHVkZSUzRHNob3duPg0KDQpbcmVpbXBsZW1lbnRpbmcgdGhlIGNvcmUgb2YgYSBwcmV0dHkt
cHJpbnRlcl0NCjxodHRwczovL29jYW1sLXNmLm9yZy9sZWFybi1vY2FtbC1wdWJsaWMvZXhlcmNp
c2UuaHRtbCNpZCUzRGZwb3R0aWVyL3BwcmludCUyNnRhYiUzRHRleHQlMjZwcmVsdWRlJTNEc2hv
d24+DQoNCltMZWFybk9DYW1sXSA8aHR0cHM6Ly9naXRodWIuY29tL29jYW1sLXNmL2xlYXJuLW9j
YW1sPg0KDQpbT0NhbWwgU29mdHdhcmUgRm91bmRhdGlvbl0gPGh0dHA6Ly9vY2FtbC1zZi5vcmcv
Pg0KDQoNCk9sZCBDV04NCuKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIElmIHlvdSBoYXBwZW4g
dG8gbWlzcyBhIENXTiwgeW91IGNhbiBbc2VuZCBtZSBhIG1lc3NhZ2VdIGFuZCBJJ2xsIG1haWwN
CiAgaXQgdG8geW91LCBvciBnbyB0YWtlIGEgbG9vayBhdCBbdGhlIGFyY2hpdmVdIG9yIHRoZSBb
UlNTIGZlZWQgb2YgdGhlDQogIGFyY2hpdmVzXS4NCg0KICBJZiB5b3UgYWxzbyB3aXNoIHRvIHJl
Y2VpdmUgaXQgZXZlcnkgd2VlayBieSBtYWlsLCB5b3UgbWF5IHN1YnNjcmliZQ0KICBbb25saW5l
XS4NCg0KICBbQWxhbiBTY2htaXR0XQ0KDQoNCltzZW5kIG1lIGEgbWVzc2FnZV0gPG1haWx0bzph
bGFuLnNjaG1pdHRAcG9seXRlY2huaXF1ZS5vcmc+DQoNClt0aGUgYXJjaGl2ZV0gPGh0dHA6Ly9h
bGFuLnBldGl0ZXBvbW1lLm5ldC9jd24vPg0KDQpbUlNTIGZlZWQgb2YgdGhlIGFyY2hpdmVzXSA8
aHR0cDovL2FsYW4ucGV0aXRlcG9tbWUubmV0L2N3bi9jd24ucnNzPg0KDQpbb25saW5lXSA8aHR0
cDovL2xpc3RzLmlkeWxsLm9yZy9saXN0aW5mby9jYW1sLW5ld3Mtd2Vla2x5Lz4NCg0KW0FsYW4g
U2NobWl0dF0gPGh0dHA6Ly9hbGFuLnBldGl0ZXBvbW1lLm5ldC8+DQoNCg==
--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2021-01-05 Tue 12:17 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.12.29.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2021.01.12.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of December 29, 2020 to =
January 05, 2021.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">First release of Feat</a></li>
<li><a href=3D"#2">OCluster and OBuilder</a></li>
<li><a href=3D"#3">Plotting 3D vectors</a></li>
<li><a href=3D"#4">Marshal determinism and stability</a></li>
<li><a href=3D"#5">It there a tutorial for <code>js_of_ocaml</code> with si=
mple graphics?</a></li>
<li><a href=3D"#6">Interesting OCaml exercises from Fran=C3=A7ois Pottier a=
vailable online</a></li>
<li><a href=3D"#org5c750ff">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-org2b82eab" class=3D"outline-2">
<h2 id=3D"1">First release of Feat</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-first-release-of-feat/7=
033/1">https://discuss.ocaml.org/t/ann-first-release-of-feat/7033/1</a>
</p>
</div>

<div id=3D"outline-container-org904708a" class=3D"outline-3">
<h3 id=3D"org904708a">Fran=C3=A7ois Pottier announced</h3>
<div class=3D"outline-text-3" id=3D"text-org904708a">
<p>
A brief note to announce the first release of Feat:
</p>

<pre class=3D"example">
opam update
opam install feat
</pre>

<p>
Feat is a library that offers support for counting, enumerating, and sampli=
ng
objects of a certain kind, such as (say) the inhabitants of an algebraic da=
ta
type.
</p>

<p>
Feat was inspired by the paper "Feat: Functional Enumeration of Algebraic T=
ypes"
by Jonas Dureg=C3=A5rd, Patrik Jansson and Meng Wang (2012).
</p>

<p>
More details can be found here:
</p>

<p>
<a href=3D"https://gitlab.inria.fr/fpottier/feat/">https://gitlab.inria.fr/=
fpottier/feat/</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org0c11512" class=3D"outline-2">
<h2 id=3D"2">OCluster and OBuilder</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ocluster-and-obuilder/7=
035/1">https://discuss.ocaml.org/t/ann-ocluster-and-obuilder/7035/1</a>
</p>
</div>

<div id=3D"outline-container-orgb3f2b89" class=3D"outline-3">
<h3 id=3D"orgb3f2b89">Thomas Leonard announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb3f2b89">
<p>
I'm pleased to announce the first release of <a href=3D"https://github.com/=
ocurrent/ocluster">OCluster</a>. A user
can submit a build job (either a Dockerfile or an OBuilder spec) to the sch=
eduler, which then runs the
build on a worker machine, streaming the logs back to the client.
</p>

<p>
This is the build scheduler / cluster manager that we use for e.g.
<a href=3D"https://github.com/ocurrent/opam-repo-ci">opam-repo-ci</a> (whic=
h you may have seen in action if you
submitted a package to opam-repository recently).
</p>

<p>
See <a href=3D"https://github.com/ocurrent/overview">ocurrent/overview</a> =
for a quick overview of the various other
CI services using it too.
</p>

<p>
To install and run the scheduler use e.g.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam depext -i ocluster
mkdir capnp-secrets
ocluster-scheduler <span style=3D"color: #8b2252;">\</span>
  --capnp-secret-key-file=3D./capnp-secrets/key.pem <span style=3D"color: #=
8b2252;">\</span>
  --capnp-listen-address=3Dtcp:0.0.0.0:9000 <span style=3D"color: #8b2252;"=
>\</span>
  --capnp-public-address=3Dtcp:127.0.0.1:9000 <span style=3D"color: #8b2252=
;">\</span>
  --state-dir=3D/var/lib/ocluster-scheduler <span style=3D"color: #8b2252;"=
>\</span>
  --pools=3Dlinux-arm32,linux-x86_64
</pre>
</div>

<p>
It will generate <code>key.pem</code> on the first run, as well as various =
capability files granting access for
workers and clients. You then copy each generated pool capability (e.g. <co=
de>pool-linux-x86_64.cap</code>) to
each machine you want in that pool, and run <code>ocluster-worker pool-linu=
x-x86_64.cap</code> to start the worker
agent. See the <a href=3D"https://github.com/ocurrent/ocluster/blob/master/=
README.md">README</a> for full details.
</p>

<p>
<a href=3D"https://github.com/ocurrent/obuilder">OBuilder</a> is an alterna=
tive to <code>docker build</code>. The main
differences are that it takes a spec in S-expression format, which is easie=
r to generate than a
Dockerfile, handles concurrent builds reliably, and keeps copies of the log=
s so that you still see the
output even if someone else performed the same build step earlier and the r=
esult is therefore taken
from the cache.
</p>

<p>
It currently supports ZFS and Btrfs for storage (it needs cheap snapshots) =
and <code>runc</code> for sandboxing
builds. <a href=3D"https://github.com/ocurrent/obuilder/issues/57">macos su=
pport</a> is under development, but not
yet upstreamed. It should be fairly easy to add support for any platform th=
at has some form of secure
chroot.
</p>

<p>
OCluster supports monitoring with Prometheus, so you can see what the clust=
er is doing:
</p>


<div class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/opti=
mized/2X/d/d5ff5aaa0259d7b59445b156e6b642a421040b64_2_920x750.png" alt=3D"d=
5ff5aaa0259d7b59445b156e6b642a421040b64_2_920x750.png" />
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org7720f45" class=3D"outline-2">
<h2 id=3D"3">Plotting 3D vectors</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/plotting-3d-vectors/7038/1"=
>https://discuss.ocaml.org/t/plotting-3d-vectors/7038/1</a>
</p>
</div>

<div id=3D"outline-container-org10ea6ca" class=3D"outline-3">
<h3 id=3D"org10ea6ca">Andreas Poisel asked</h3>
<div class=3D"outline-text-3" id=3D"text-org10ea6ca">
<p>
I'm doing linear algebra with Owl.  Owl-plplot works great for visualizing =
2D vectors, but it doesn't
seem to capable of plotting 3D vectors.
</p>

<p>
I took a (fast) look at vanilla <a href=3D"http://plplot.org/">Plplot</a>,
<a href=3D"https://github.com/sanette/oplot">Oplot</a>, and the <a href=3D"=
https://github.com/c-cube/ocaml-gnuplot">GNUplot
bindings</a>, but I didn't find a simple way to plot 3D vectors.
</p>

<p>
I don't need high quality plots, 3D surfaces, a lot of control or fancy fea=
tures, just a coordinate
system and some function to draw geometric primitives (points, lines, circl=
es, etc.).
</p>

<p>
Did I miss anything or do I have to build this myself with the good old Gra=
phics module?
</p>
</div>
</div>


<div id=3D"outline-container-orgc3f7230" class=3D"outline-3">
<h3 id=3D"orgc3f7230">Marshall Abrams replied</h3>
<div class=3D"outline-text-3" id=3D"text-orgc3f7230">
<p>
What kind of vector representation do you want?  Just lines/arrows in 3D?  =
That's just a curve in 3D,
so it should be possible with Owl and plplot, at least.  Looks like it shou=
ld be easy with oplot, too
(but I haven't used oplot).  There are some 3D Owl plplot examples, with so=
urce code, on these pages:
</p>

<p>
<a href=3D"https://ocaml.xyz/book/visualisation.html">https://ocaml.xyz/boo=
k/visualisation.html</a>
</p>

<p>
<a href=3D"https://github.com/owlbarn/owl/wiki/Tutorial:-How-to-Plot-in-Owl=
%3F">https://github.com/owlbarn/owl/wiki/Tutorial:-How-to-Plot-in-Owl%3F</a>
</p>

<p>
<a href=3D"https://github.com/owlbarn/owl/wiki/Plot-Gallery">https://github=
.com/owlbarn/owl/wiki/Plot-Gallery</a>
</p>

<p>
I don't know whether it will be easy to adapt them to your needs.  I wrote =
the last example on the last
page above.  It's a plot of a series 2D curves in 3D.  Maybe some of the te=
chniques can be adapted to
your needs.  (The code is a few years old.  I'm not sure whether it works w=
ith the current version of
Owl.)
</p>

<p>
(If you end up having to use low-level bindings to plplot, oplot, etc. from=
 Owl, you might consider
contributing a wrapper module that makes it easy to do the kind of plot you=
 want.)
</p>
</div>
</div>


<div id=3D"outline-container-org96fc74c" class=3D"outline-3">
<h3 id=3D"org96fc74c">Andreas Poisel then said</h3>
<div class=3D"outline-text-3" id=3D"text-org96fc74c">
<p>
Thank you for your answer.
</p>

<p>
I'd just like to draw 3D vectors in a cartesian coordinate system.  A plot =
should look similar to this:
</p>


<div class=3D"figure">
<p><img src=3D"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/3D=
_Vector.svg/800px-3D_Vector.svg.png" alt=3D"800px-3D_Vector.svg.png" />
</p>
</div>

<p>
I wouldn't even need arrows, simple lines would be ok.
</p>

<p>
Maybe there is a way to use one of the 3D functions (<code>Plot.surf</code>=
, <code>Plot.mesh</code>, <code>Plot.contour</code>), but I
can't figure it out.
</p>
</div>
</div>


<div id=3D"outline-container-org159c10a" class=3D"outline-3">
<h3 id=3D"org159c10a">Hezekiah Carty replied</h3>
<div class=3D"outline-text-3" id=3D"text-org159c10a">
<p>
It's been a while since I worked with plplot but what you showed should be =
possible. The
<a href=3D"http://plplot.org/docbook-manual/plplot-html-5.15.0/plline3.html=
">plline3</a> function allows you to plot
line segments in 3d space. The function is setup to take multiple segments =
in a single call. For a
single segment each array would hold a single value. Colors can be set betw=
een draw calls.
</p>
</div>
</div>


<div id=3D"outline-container-orgfdeba8f" class=3D"outline-3">
<h3 id=3D"orgfdeba8f">sanette also replied</h3>
<div class=3D"outline-text-3" id=3D"text-orgfdeba8f">
<p>
in oplot, there is the Curve3d object that should do it,
<a href=3D"https://sanette.github.io/oplot/oplot/Oplot/Plt/index.html#type-=
plot_object.Curve3d">https://sanette.github.io/oplot/oplot/Oplot/Plt/index.=
html#type-plot_object.Curve3d</a>
although it is quite rudimentary
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgc82edee" class=3D"outline-2">
<h2 id=3D"4">Marshal determinism and stability</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/marshal-determinism-and-sta=
bility/7041/25">https://discuss.ocaml.org/t/marshal-determinism-and-stabili=
ty/7041/25</a>
</p>
</div>

<div id=3D"outline-container-org442e595" class=3D"outline-3">
<h3 id=3D"org442e595">Deep in this thread, Bikal Lem mentioned and Rapha=C3=
=ABl Proust described</h3>
<div class=3D"outline-text-3" id=3D"text-org442e595">
<blockquote>
<p>
<a href=3D"https://gitlab.com/nomadic-labs/data-encoding">Binary module of =
data-encoding</a>
</p>
</blockquote>

<p>
Quick notes about this approach:
</p>

<ul class=3D"org-ul">
<li>It is used extensively in the Tezos codebase. For data exchange (in the=
 p2p layer), for data at rest (configuration files), and for a mix of the t=
wo (serialisation of economic protocol data which is both exchanged by peer=
s and stored on disk).</li>
<li>It is flexible in that you have great control over the representation o=
f data and the serialisation/deserialisation procedure. There is a medium-t=
erm plan to allow even more control. For now you can decide, say, if 8 bool=
eans are represented as one byte, 8 bytes, or 8 words (or something else al=
together) (see code below).</li>
<li>Some of the responsibility for correctness rests upon your shoulders as=
 a user. E.g., when you encode a tuple, the left element must have either a=
 fixed length (e.g., be an int8, int32, etc., be a fixed-length string, or =
be a tuple of fixed-length values) or be prefixed by a length marker (which=
 the library provides a combinator for). Most of the errors for this are ra=
ised when you declare the encoding and a few are raised when you use the en=
coding. I recommend writing some tests to check that your encodings accept =
the range of values that you are going to throw at them.</li>
<li>The library is well tested: there are tests using crowbar to check that=
 encoding and decoding are actual inverse of each others.</li>
</ul>

<p>
Let me know if you have more questions. And in the meantime, here's two dif=
ferent encodings for a tuple
of 8 booleans:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #b22222;">(* </span><spa=
n style=3D"color: #b22222;">easy-encoding, produces 8 bytes </span><span st=
yle=3D"color: #b22222;">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">boolsas8bytes</span> =3D
   tup8 bool bool bool bool bool bool bool bool

<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">v=
ery-compact encoding, produces 1 byte </span><span style=3D"color: #b22222;=
">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">boolsas1byte</span> =3D
   conv
      (<span style=3D"color: #a020f0;">fun</span> (<span style=3D"color: #a=
0522d;">b1</span>, <span style=3D"color: #a0522d;">b2</span>, <span style=
=3D"color: #a0522d;">b3</span>, <span style=3D"color: #a0522d;">b4</span>, =
<span style=3D"color: #a0522d;">b5</span>, <span style=3D"color: #a0522d;">=
b6</span>, <span style=3D"color: #a0522d;">b7</span>, <span style=3D"color:=
 #a0522d;">b8</span>) -&gt;
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">acc</span> =3D 0 <span style=3D"color: #000000;=
 font-weight: bold;">in</span>
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">acc</span> =3D <span style=3D"color: #a020f0;">=
if</span> b1 <span style=3D"color: #a020f0;">then</span> acc <span style=3D=
"color: #a52a2a;">lor</span> 0b10000000 <span style=3D"color: #a020f0;">els=
e</span> acc <span style=3D"color: #000000; font-weight: bold;">in</span>
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">acc</span> =3D <span style=3D"color: #a020f0;">=
if</span> b2 <span style=3D"color: #a020f0;">then</span> acc <span style=3D=
"color: #a52a2a;">lor</span> 0b01000000 <span style=3D"color: #a020f0;">els=
e</span> acc <span style=3D"color: #000000; font-weight: bold;">in</span>
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">acc</span> =3D <span style=3D"color: #a020f0;">=
if</span> b3 <span style=3D"color: #a020f0;">then</span> acc <span style=3D=
"color: #a52a2a;">lor</span> 0b00100000 <span style=3D"color: #a020f0;">els=
e</span> acc <span style=3D"color: #000000; font-weight: bold;">in</span>
         &#8230;
         acc)
      (<span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0=
522d;">i</span> -&gt;
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">b1</span> =3D i <span style=3D"color: #a52a2a;"=
>land</span> 0b10000000 &lt;&gt; 0 <span style=3D"color: #000000; font-weig=
ht: bold;">in</span>
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">b1</span> =3D i <span style=3D"color: #a52a2a;"=
>land</span> 0b01000000 &lt;&gt; 0 <span style=3D"color: #000000; font-weig=
ht: bold;">in</span>
         <span style=3D"color: #000000; font-weight: bold;">let</span> <spa=
n style=3D"color: #a0522d;">b1</span> =3D i <span style=3D"color: #a52a2a;"=
>land</span> 0b00100000 &lt;&gt; 0 <span style=3D"color: #000000; font-weig=
ht: bold;">in</span>
         &#8230;
         (b1, b2, b3, b4, b5, b6, b7, b8))
      uint8
</pre>
</div>

<p>
In general, data-encoding is probably slower than marshal, but its strong p=
oints are:
</p>
<ul class=3D"org-ul">
<li>it offers some type guarantees,</li>
<li>it gives you some control over the representation of the data,</li>
<li>it allows you to define representations that are easy to parse in other=
 languages or in other versions of the same language,</li>
<li>it generates documentation about the data-representation.</li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-orgd4596d7" class=3D"outline-2">
<h2 id=3D"5">It there a tutorial for <code>js_of_ocaml</code> with simple g=
raphics?</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/it-there-a-tutorial-for-js-=
of-ocaml-with-simple-graphics/4636/7">https://discuss.ocaml.org/t/it-there-=
a-tutorial-for-js-of-ocaml-with-simple-graphics/4636/7</a>
</p>
</div>

<div id=3D"outline-container-org988bf62" class=3D"outline-3">
<h3 id=3D"org988bf62">Deep in this thread, Phat Ky said</h3>
<div class=3D"outline-text-3" id=3D"text-org988bf62">
<p>
This is a really, really late reply but this youtube video was very helpful=
 to me &#x2026;
<a href=3D"https://www.youtube.com/watch?v=3Dh_e5pPKI0K4">https://www.youtu=
be.com/watch?v=3Dh_e5pPKI0K4</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgbfea83d" class=3D"outline-2">
<h2 id=3D"6">Interesting OCaml exercises from Fran=C3=A7ois Pottier availab=
le online</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/interesting-ocaml-exercises=
-from-francois-pottier-available-online/7050/1">https://discuss.ocaml.org/t=
/interesting-ocaml-exercises-from-francois-pottier-available-online/7050/1<=
/a>
</p>
</div>

<div id=3D"outline-container-org19e92fa" class=3D"outline-3">
<h3 id=3D"org19e92fa">gasche announced</h3>
<div class=3D"outline-text-3" id=3D"text-org19e92fa">
<p>
The recent URL <a href=3D"https://ocaml-sf.org/learn-ocaml-public/#activity=
%3Dexercises">https://ocaml-sf.org/learn-ocaml-public/#activity%3Dexercises=
</a>
contains auto-graded OCaml exercises, in particular a bunch of advanced and=
 fairly interesting
exercices written by Fran=C3=A7ois Pottier, which I would recommend for any=
one knowledgeable in OCaml and
curious about algorithms and functional programming. (You have to scroll do=
wn to see those, the
exercises at the top come from the OCaml MOOC.)
</p>

<p>
See for example Fran=C3=A7ois' exercises on:
</p>
<ul class=3D"org-ul">
<li><a href=3D"https://ocaml-sf.org/learn-ocaml-public/exercise.html#id%3Df=
pottier/alpha_beta%26tab%3Dtext%26prelude%3Dshown">Alpha-Beta Search</a>,</=
li>
<li><a href=3D"https://ocaml-sf.org/learn-ocaml-public/exercise.html#id%3Df=
pottier/parser_combinators%26tab%3Dtext">Parser combinators</a>,</li>
<li><a href=3D"https://ocaml-sf.org/learn-ocaml-public/exercise.html#id%3Df=
pottier/huffman%26tab%3Dtext%26prelude%3Dshown">Huffman Compression</a>,</l=
i>
<li><a href=3D"https://ocaml-sf.org/learn-ocaml-public/exercise.html#id%3Df=
pottier/nondet_monad_cont%26tab%3Dtext%26prelude%3Dshown">Implementing back=
tracking with continuations</a>, or</li>
<li>my personal favorite, <a href=3D"https://ocaml-sf.org/learn-ocaml-publi=
c/exercise.html#id%3Dfpottier/pprint%26tab%3Dtext%26prelude%3Dshown">reimpl=
ementing the core of a pretty-printer</a>.</li>
</ul>

<p>
Context: the exercise platform is <a href=3D"https://github.com/ocaml-sf/le=
arn-ocaml">LearnOCaml</a>, initially
written by OCamlPro for the OCaml MOOC and maintaing by Yann R=C3=A9gis-Gia=
nas (@yurug) on behalf of the
<a href=3D"http://ocaml-sf.org/">OCaml Software Foundation</a>. We (at the =
Foundation) are trying to assemble a
corpus of nice OCaml exercises for teachers and people self-studying, and t=
he nice exercises by
Fran=C3=A7ois Pottier (@fpottier) were written as part of this initiative.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org5c750ff" class=3D"outline-2">
<h2 id=3D"org5c750ff">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org5c750ff">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
