Return-Path: <pierre.weis@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 0BF677F029
	for <caml-list@sympa.inria.fr>; Thu, 29 Sep 2016 18:13:47 +0200 (CEST)
From: pierre.weis@inria.fr (Pierre Weis)
X-IronPort-AV: E=Sophos;i="5.30,415,1470693600"; 
   d="scan'208";a="195102492"
Received: from yquem.paris.inria.fr (HELO yquem.inria.fr) ([128.93.101.33])
  by mail3-relais-sop.national.inria.fr with ESMTP; 29 Sep 2016 18:13:46 +0200
Received: by yquem.inria.fr (Postfix, from userid 24253)
	id ABF4FE1A4F; Thu, 29 Sep 2016 18:13:46 +0200 (CEST)
To: caml-list@inria.fr
Message-Id: <20160929161346.ABF4FE1A4F@yquem.inria.fr>
Date: Thu, 29 Sep 2016 18:13:46 +0200 (CEST)
Subject: [Caml-list] Sklml first public release

                   Easy coarse grain parallelization                    

We are glad to announce the availability of Sklml version 2.0+pl0.

What is Sklml?
==============

Sklml is a functional parallel skeleton compiler and programming system for OCaml programs.

The Sklml system is embedded into the OCaml programming language
and inherits the good properties of this functional heritage: Sklml
programs cannot go wrong (no bus error nor segmentation faults).

All Sklml programs may be run in two evaluation modes: parallel or
sequential evaluation.

The Sklml system features another salient property: for any
Sklml program the sequential and parallel evaluation modes always
return the same result. In particular, the parallel evalution mode is
deterministic and do not introduce nor hide any error (such as floating point
rounding errors).

In Sklml, parallelization is explicit and uses high-level
parallelization primitives for program parallel and data parallel usual
programming situations.

Composing the parallelization primitives is a powerful way to define more
complex or specialized parallelization schemes. For instance, the
Sklml library features a 'domain' high-level function devoted to
advanced scientific computing: indeed, the function 'mk_domain' provides a
parallel implementation of the classical 'Domain Decomposition' method to
solve Partial Differential Equations. Using the same methodology, advanced
users can define powerful parallelization functions and tune Sklml
to the specific domain at hand.

Where to get the Sklml code?
============================

The tarball is available here:
    http://sklml.inria.fr/archive/sklml-2.0+pl0.tgz

Where to get more information?
==============================

The package home page is here:
    http://sklml.inria.fr/

All constructive criticisms and propositions are warmly welcomed.

Enjoy.

Francois Clement <Francois.Clement@inria.fr>
Pierre Weis <Pierre.Weis@inria.fr>
