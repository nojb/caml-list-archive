Return-Path: <francois.berenger@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 74E8D7FD06
	for <caml-list@sympa.inria.fr>; Mon, 11 May 2015 13:46:51 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="5.13,406,1427752800"; 
   d="scan'208";a="142366942"
Received: from meleze.ens.fr (HELO [129.199.99.114]) ([129.199.99.114])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 11 May 2015 13:46:51 +0200
Message-ID: <555096AB.9090208@inria.fr>
Date: Mon, 11 May 2015 13:46:51 +0200
From: Francois Berenger <francois.berenger@inria.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.6.0
MIME-Version: 1.0
To: caml-list@inria.fr
References: <CALGm1VhSaSQi3_ooL8OWY3SyPFjn8mkiQPMis6MU1yVtBsMbHA@mail.gmail.com>
In-Reply-To: <CALGm1VhSaSQi3_ooL8OWY3SyPFjn8mkiQPMis6MU1yVtBsMbHA@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: Re: [Caml-list] OCaml release roadmap

On 05/06/2015 07:24 PM, Damien Doligez wrote:
> Dear OCaml users,
>
> We are now preparing release 4.02.2, mostly a bug-fix release with a
> few new features. We are planning to release it in the first week of
> June (about 1 month from now). If you want to try a preview, get it:
>    - from github: < https://github.com/ocaml/ocaml/tree/4.02 > (don't
> forget to switch to branch 4.02 after cloning)
>    - through OPAM: opam switch 4.02.0+trunk (watch out for the misnomer)
> If you find bugs, please report them as quickly as possible.
>
> As for the next major release, it will include a number of new
> features (including, if all goes well, support for multicore). It will
> be released some time around the end of this year.

Who added the support for multicore?

Will it have an impact on the performance of sequential programs (i.e. 
which don't use multicore)?

Does it mean we will be able to write parallel code that scales better
than what we currently can get with parmap?
I.e. we could see a speedup even if the task is very fine grain.

Will we have to rewrite Parmap ? ;)

> -- Damien Doligez for the OCaml development team
>

-- 
Regards,
Francois.
