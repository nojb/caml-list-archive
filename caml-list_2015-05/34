Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 6CB1B7FD02
	for <caml-list@sympa.inria.fr>; Wed,  6 May 2015 18:46:07 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra;
  client-ip=209.85.160.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.160.172 as permitted
  sender) identity=mailfrom; client-ip=209.85.160.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-yk0-f172.google.com) identity=helo;
  client-ip=209.85.160.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-yk0-f172.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0DxAgAsREpVm6ygVdFcg19cBYMYs3OOKjOBVoYFAoEfBzkTAQEBAQEBAREBAQEBAQYLCwkhLoQgAQEBAwESEQQZARsSCwEDAQsGAwILDQ0dAgIhAQERAQUBChIGExIQh3QBAwoIDZRbkGA+MYs4gWuCd4kiChknAwpXhCwBAQEBAQEBAwEBAQEBAQEBARMBBQ6LK4JNgjQEB4JogUUFhTwKii6GRYRvgVWBJD2NGFaDFoIJEiOBDAmENCIxgkUBAQE
X-IPAS-Result: A0DxAgAsREpVm6ygVdFcg19cBYMYs3OOKjOBVoYFAoEfBzkTAQEBAQEBAREBAQEBAQYLCwkhLoQgAQEBAwESEQQZARsSCwEDAQsGAwILDQ0dAgIhAQERAQUBChIGExIQh3QBAwoIDZRbkGA+MYs4gWuCd4kiChknAwpXhCwBAQEBAQEBAwEBAQEBAQEBARMBBQ6LK4JNgjQEB4JogUUFhTwKii6GRYRvgVWBJD2NGFaDFoIJEiOBDAmENCIxgkUBAQE
X-IronPort-AV: E=Sophos;i="5.13,380,1427752800"; 
   d="scan'208";a="139268343"
Received: from mail-yk0-f172.google.com ([209.85.160.172])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 06 May 2015 18:46:06 +0200
Received: by ykep21 with SMTP id p21so4082846yke.3
        for <caml-list@inria.fr>; Wed, 06 May 2015 09:46:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=ZLUnsfYqm0PKW3dSJmcA1bmMcY2S07MLPgpxSz4HEEk=;
        b=DtHi84tMOhycPb6GKkhR81yiIjLnvZKCLCSRg1L58l+VMDJNgwvFwFzkGvek4Jmei7
         6N21vuKVkCUowzE7IyCsHeENrNYWTbENTC8AmUK6eJbDKE8h0Z0mFAN0f2JfY9nLNlFs
         XHlw0F9va8cHKrjs4+8KW0G1+QyPqJ3LqLPj5qqB2aLyHJ78125oN83Ou2w9KWRkr2aD
         PIsYMcBtmo23WjCqXnUsNTE4G3hInBQ6tBLVi8s/BVp9L7c4JASRSAhKMdSd8ff5hs2H
         crWjFi0kbf21AuNGg92DhNa3zoRM7NeoaG8VpkKQ0Xaz18rY17fa1E3P2yIOeDb6x89J
         sCdA==
X-Received: by 10.236.38.231 with SMTP id a67mr22693863yhb.152.1430930765141;
 Wed, 06 May 2015 09:46:05 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.129.43.132 with HTTP; Wed, 6 May 2015 09:45:44 -0700 (PDT)
In-Reply-To: <CAAxsn=HA+U903wCvHSZWC5HdY61PrtEhXge4nT_jvOY4hkuVOg@mail.gmail.com>
References: <CAMQQO3=nirMojoCsdGvK0EVov6FZj059p3xdUC7h8w84-eQXAQ@mail.gmail.com>
 <20150506095012.91063C382B@www1.g3.pair.com> <CAAxsn=HA+U903wCvHSZWC5HdY61PrtEhXge4nT_jvOY4hkuVOg@mail.gmail.com>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Wed, 6 May 2015 12:45:44 -0400
Message-ID: <CAN6ygOnoqam1y5JW1stCHm6iA0haVVKcYZS7dvxm4+YYo+EOGw@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: Oleg Kiselyov <oleg@okmij.org>, =?UTF-8?Q?=C3=96mer_Sinan_A=C4=9Facan?= <omeragacan@gmail.com>, 
	Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e01537d8cf45d0005156c87b6
Subject: Re: [Caml-list] Problems with printing MetaOCaml generated code

--089e01537d8cf45d0005156c87b6
Content-Type: text/plain; charset=UTF-8

Mind blown.

Let's just call this branch... hmm, I dunno, how about 'OCaml 5'?

Sorry for the noise.

On Wed, May 6, 2015 at 11:58 AM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 6 May 2015 at 10:50,  <oleg@okmij.org> wrote:
> > Of course MetaOCaml serialization can be improved. What I'd like to
> > stress is that you don't have to wait for the improvement. You can
> > always, instead of
> >         .<fun u ->  x>.
> > write
> >         .<fun u -> .~(mylift x)>.
> > where
> >         mylift : t -> t code
> > is *your* function that does whatever _you_ like it to do at that
> > particular type t (it should still produce something of the type (t
> > code)).
> >
> > If some particular mylift functions turn out popular, they can be
> > added to MetaOCaml, to save everyone trouble writing them.
> >
> > And I generally agree with Leo that this implicit lifting is
> > baroque. At present I'm not sure if requiring the explicit lifting is
> > too much of a burden. I'm sure that with modular implicits, it won't
> > be.
>
> I've just pushed an OPAM switch for an OCaml compiler that combines
> the MetaOCaml and modular implicits patches, making it possible to
> experiment with explicit user-defined polymorphic CSP.
>
> For example, you might define a signature, CSP, for "things that can
> be persisted":
>
>   module type CSP =
>    sig
>      type t
>      val lift : t -> t code
>   end
>
> together with a top-level function that dispatches to the appropriate
> instance
>
>   let csp (implicit C: CSP) (x : C.t) = C.lift x
>
> and instances of CSP for each type of interest.  Here's an instance
> for the stx type from earlier in the thread:
>
>   implicit module CSP_stx : CSP with type t = stx =
>   struct
>     type t = stx
>
>     let rec lift : stx -> stx code = function
>       | A -> .< A >.
>       | B s -> .< B .~ (lift s) >.
>       | C (s1, s2) -> .< C ( .~(lift s1), .~(lift s2) ) >.
>    end
>
> and here's a parameterised instance for lists that makes it possible
> to persist lists of any persistable element type:
>
>   implicit functor CSP_list(C: CSP) : CSP with type t = C.t list =
>   struct
>     type t = C.t list
>
>     let rec lift : C.t list -> C.t list code = function
>         [] -> .< [] >.
>       | x :: xs -> .< .~(csp x) :: .~(lift xs) >.
>   end
>
> These two instances make it possible to use the CSP function to
> persist stx values, or lists of stx values, or lists of lists of stx
> values (etc.):
>
>    # let ba = B A in .< .~(csp ba) >.;;
>    - : stx code = .<Stx.B Stx.A>.
>
>   # let l = [A; B A] in .< .~(csp l) >.;;
>   - : stx list code = .<[Stx.A; Stx.B Stx.A]>.
>
>   # let ll = [[A; B A]] and ba = B A in .< .~(csp ll), .~(csp ba) >.;;
>   - : (stx list list * stx) code = .<([[Stx.A; Stx.B Stx.A]], (Stx.B
> Stx.A))>.
>
> It's easy to imagine having the csp function built in to MetaOCaml, so
> that we could write .< x >.  (or some similarly convenient syntax) to
> mean .< .~(csp x) >...
>
> You can try out the switch with OPAM in the usual way:
>
>    opam update
>    opam switch 4.02.1+modular-implicits-ber
>    eval `opam config env`
>
> Jeremy.
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--089e01537d8cf45d0005156c87b6
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Mind blown.<div><br></div><div>Let&#39;s just call this br=
anch... hmm, I dunno, how about &#39;OCaml 5&#39;?</div><div><br></div><div=
>Sorry for the noise.</div></div><div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On Wed, May 6, 2015 at 11:58 AM, Jeremy Yallop <span dir=
=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@g=
mail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span cl=
ass=3D"">On 6 May 2015 at 10:50,=C2=A0 &lt;<a href=3D"mailto:oleg@okmij.org=
">oleg@okmij.org</a>&gt; wrote:<br>
&gt; Of course MetaOCaml serialization can be improved. What I&#39;d like t=
o<br>
&gt; stress is that you don&#39;t have to wait for the improvement. You can=
<br>
&gt; always, instead of<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0.&lt;fun u -&gt;=C2=A0 x&gt;.<br>
&gt; write<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0.&lt;fun u -&gt; .~(mylift x)&gt;.<br>
&gt; where<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0mylift : t -&gt; t code<br>
&gt; is *your* function that does whatever _you_ like it to do at that<br>
&gt; particular type t (it should still produce something of the type (t<br>
&gt; code)).<br>
&gt;<br>
&gt; If some particular mylift functions turn out popular, they can be<br>
&gt; added to MetaOCaml, to save everyone trouble writing them.<br>
&gt;<br>
&gt; And I generally agree with Leo that this implicit lifting is<br>
&gt; baroque. At present I&#39;m not sure if requiring the explicit lifting=
 is<br>
&gt; too much of a burden. I&#39;m sure that with modular implicits, it won=
&#39;t<br>
&gt; be.<br>
<br>
</span>I&#39;ve just pushed an OPAM switch for an OCaml compiler that combi=
nes<br>
the MetaOCaml and modular implicits patches, making it possible to<br>
experiment with explicit user-defined polymorphic CSP.<br>
<br>
For example, you might define a signature, CSP, for &quot;things that can<b=
r>
be persisted&quot;:<br>
<br>
=C2=A0 module type CSP =3D<br>
=C2=A0 =C2=A0sig<br>
=C2=A0 =C2=A0 =C2=A0type t<br>
=C2=A0 =C2=A0 =C2=A0val lift : t -&gt; t code<br>
=C2=A0 end<br>
<br>
together with a top-level function that dispatches to the appropriate insta=
nce<br>
<br>
=C2=A0 let csp (implicit C: CSP) (x : C.t) =3D C.lift x<br>
<br>
and instances of CSP for each type of interest.=C2=A0 Here&#39;s an instanc=
e<br>
for the stx type from earlier in the thread:<br>
<br>
=C2=A0 implicit module CSP_stx : CSP with type t =3D stx =3D<br>
=C2=A0 struct<br>
=C2=A0 =C2=A0 type t =3D stx<br>
<br>
=C2=A0 =C2=A0 let rec lift : stx -&gt; stx code =3D function<br>
<span class=3D"">=C2=A0 =C2=A0 =C2=A0 | A -&gt; .&lt; A &gt;.<br>
</span>=C2=A0 =C2=A0 =C2=A0 | B s -&gt; .&lt; B .~ (lift s) &gt;.<br>
=C2=A0 =C2=A0 =C2=A0 | C (s1, s2) -&gt; .&lt; C ( .~(lift s1), .~(lift s2) =
) &gt;.<br>
=C2=A0 =C2=A0end<br>
<br>
and here&#39;s a parameterised instance for lists that makes it possible<br>
to persist lists of any persistable element type:<br>
<br>
=C2=A0 implicit functor CSP_list(C: CSP) : CSP with type t =3D C.t list =3D=
<br>
=C2=A0 struct<br>
=C2=A0 =C2=A0 type t =3D C.t list<br>
<br>
=C2=A0 =C2=A0 let rec lift : C.t list -&gt; C.t list code =3D function<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 [] -&gt; .&lt; [] &gt;.<br>
=C2=A0 =C2=A0 =C2=A0 | x :: xs -&gt; .&lt; .~(csp x) :: .~(lift xs) &gt;.<b=
r>
=C2=A0 end<br>
<br>
These two instances make it possible to use the CSP function to<br>
persist stx values, or lists of stx values, or lists of lists of stx<br>
values (etc.):<br>
<br>
=C2=A0 =C2=A0# let ba =3D B A in .&lt; .~(csp ba) &gt;.;;<br>
=C2=A0 =C2=A0- : stx code =3D .&lt;Stx.B Stx.A&gt;.<br>
<br>
=C2=A0 # let l =3D [A; B A] in .&lt; .~(csp l) &gt;.;;<br>
=C2=A0 - : stx list code =3D .&lt;[Stx.A; Stx.B Stx.A]&gt;.<br>
<br>
=C2=A0 # let ll =3D [[A; B A]] and ba =3D B A in .&lt; .~(csp ll), .~(csp b=
a) &gt;.;;<br>
=C2=A0 - : (stx list list * stx) code =3D .&lt;([[Stx.A; Stx.B Stx.A]], (St=
x.B Stx.A))&gt;.<br>
<br>
It&#39;s easy to imagine having the csp function built in to MetaOCaml, so<=
br>
that we could write .&lt; x &gt;.=C2=A0 (or some similarly convenient synta=
x) to<br>
mean .&lt; .~(csp x) &gt;...<br>
<br>
You can try out the switch with OPAM in the usual way:<br>
<br>
=C2=A0 =C2=A0opam update<br>
=C2=A0 =C2=A0opam switch 4.02.1+modular-implicits-ber<br>
=C2=A0 =C2=A0eval `opam config env`<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
Jeremy.<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

--089e01537d8cf45d0005156c87b6--
