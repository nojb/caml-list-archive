Return-Path: <fabrissimo@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 0E16D7FA56
	for <caml-list@sympa.inria.fr>; Thu, 24 Jul 2014 18:44:24 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  fabrissimo@gmail.com) identity=pra; client-ip=209.85.192.53;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="fabrissimo@gmail.com";
  x-sender="fabrissimo@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  fabrissimo@gmail.com designates 209.85.192.53 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.53;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="fabrissimo@gmail.com";
  x-sender="fabrissimo@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f53.google.com) identity=helo;
  client-ip=209.85.192.53;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="fabrissimo@gmail.com";
  x-sender="postmaster@mail-qg0-f53.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArICAD430VPRVcA1m2dsb2JhbABYg2BXBIJ0r0iVGYFhh0WBBggWEAEBAQEBBgsLCRQphAMBAQEDARIRHQEtCwEDAQsBBQULAwoNHQICIQESAQUBChIGExIQiAwDCQgNnBVqiymFAop7JwMKhx4RAQUOjRCCKYMDgU4FhHEFlD2CA4FSjFOELhgpgWuDEDsv
X-IPAS-Result: ArICAD430VPRVcA1m2dsb2JhbABYg2BXBIJ0r0iVGYFhh0WBBggWEAEBAQEBBgsLCRQphAMBAQEDARIRHQEtCwEDAQsBBQULAwoNHQICIQESAQUBChIGExIQiAwDCQgNnBVqiymFAop7JwMKhx4RAQUOjRCCKYMDgU4FhHEFlD2CA4FSjFOELhgpgWuDEDsv
X-IronPort-AV: E=Sophos;i="5.01,725,1400018400"; 
   d="scan'208";a="72708168"
Received: from mail-qg0-f53.google.com ([209.85.192.53])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 24 Jul 2014 18:44:22 +0200
Received: by mail-qg0-f53.google.com with SMTP id q107so3557008qgd.40
        for <caml-list@inria.fr>; Thu, 24 Jul 2014 09:44:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date:message-id:subject
         :from:to:cc:content-type;
        bh=T4tqheESJE1ZAaolhUKZLKsGCgByVxJX5fSNYSp/zno=;
        b=1Dx4HfJbhwTUvEzRDePECpElNloaQBjcFGGwbFzvpKG0s9b8wiw161BFeYKHJMqUGS
         m8BGQIeVaLVW1/PIO2AA4Ddf8EzAt9QGU8Iqlbi3uCfMWl8nYz794jZypYr760OcOjck
         WDBemG34oehdedHU+/AkbDwF9KizzCG0Oq8lticTTrg9SaxyLMxj2+pK9MOcJetmTol+
         PClVic8MsgVc70NR8T4uqNjW+jIC4KZPqx3yhwZhF8a+AISD+V5viH4gH2w2fJLRukHS
         31wtZ4UIg2y0KAaOtYR/wifv5/RsDC/kjK9YiWx1NEAPGuuRI0R+KbwP0864B/WZxK5R
         Ux/g==
MIME-Version: 1.0
X-Received: by 10.224.103.134 with SMTP id k6mr17567878qao.24.1406220261680;
 Thu, 24 Jul 2014 09:44:21 -0700 (PDT)
Sender: fabrissimo@gmail.com
Received: by 10.96.115.104 with HTTP; Thu, 24 Jul 2014 09:44:21 -0700 (PDT)
In-Reply-To: <CAKziXDWdKWyR5LigJXVk=ahp9SO+JOrH0CdqR6_ndiKh9yuqXA@mail.gmail.com>
References: <CAJ7XQb7DzUkH0TzB1rSkDpw5e_KdyXSqZLMnfYWa_y3X9mqsYQ@mail.gmail.com>
	<21456.19915.45180.915211@gargle.gargle.HOWL>
	<CAH+PdrAzgcsjjsMwMypzr+F53m9rWx5yFHP4650w3rmTUJw1mQ@mail.gmail.com>
	<CAHvkLrP3jJ0dp+rb4aUAQ4T5qNKYAi0W0KeLe3JNjLHFimZYfg@mail.gmail.com>
	<CAKziXDWdKWyR5LigJXVk=ahp9SO+JOrH0CdqR6_ndiKh9yuqXA@mail.gmail.com>
Date: Thu, 24 Jul 2014 18:44:21 +0200
X-Google-Sender-Auth: b-K8zlac9eaLU5rfCFtxdZWBCVU
Message-ID: <CAHvkLrMPXQU-vC3b7xTpNcHd0OHZJB=c4xGFqNCHsGfe8QkOjw@mail.gmail.com>
From: Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>
To: Malcolm Matalka <mmatalka@gmail.com>
Cc: Raoul Duke <raould@gmail.com>, OCaml <caml-list@inria.fr>, 
	Nicolas Boulay <nicolas@boulay.name>
Content-Type: multipart/alternative; boundary=001a11c23b902c6acf04fef32b81
Subject: Re: [Caml-list] concurrent gc?

--001a11c23b902c6acf04fef32b81
Content-Type: text/plain; charset=UTF-8

Well, it is hard to enumerate. The basic idea is to find, for each data
structure, the best trade-off between efficient operations and space
occupation. The simplest example is to decide between using lists or
arrays. Arrays use less space (unless you use hash-consing or you share the
end of the lists), but if you don't know the final size you need, you will
finish either pre-allocating longer arrays than you need, or re-allocating
arrays too often, or switching between lists and arrays... In the end, it
really depends on what an application does.

There are also other tricks such as changing the tag of a block to avoid
scanning, but I wouldn't advise to use it unless you really know what you
are doing...

--Fabrice


On Thu, Jul 24, 2014 at 5:39 PM, Malcolm Matalka <mmatalka@gmail.com> wrote:

> Cool, what sort of tricks can you do to reduce the number of blocks?
> Den 24 jul 2014 17:36 skrev "Fabrice Le Fessant" <
> Fabrice.Le_fessant@inria.fr>:
>
> Note that the cost of the GC does not automatically depends on the size of
>> RAM. In many networking servers, memory is filled with strings, caching
>> files on disk or content to be sent on the network. Such cases make OCaml
>> GC happy, since it does not have to manipulate many objects, and it won't
>> scan strings for pointers within them. There are also other tricks to
>> improve the GC behavior: you might want to change the data representation
>> to decrease the number of blocks in the heap, I used to do it a lot when
>> doing computations on millions of entries that would not otherwise stay in
>> memory.
>>
>> --Fabrice
>>
>>
>> On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <nicolas@boulay.name>
>> wrote:
>>
>>> What about server that use ~60GB of RAM ? Todays server are sold with 32
>>> to 256 GB of RAM and lot of cpu core.
>>> Maybe in such extreme cases, offloading the major collection of the GC
>>> could reduce latency a lot ?
>>>
>>>
>>> 2014-07-24 2:05 GMT+02:00 John F. Carr <jfc@mit.edu>:
>>>
>>>
>>>> Most programs spend a minority of their time in garbage collection.
>>>> Even if the new GC thread did not slow down the main program,
>>>> possible speedup would be less than 2x, probably well under 50%.
>>>>
>>>> For technical reasons, offloading major collections in OCaml is easier
>>>> than offloading minor collections, so the potential benefit is less.
>>>>
>>>>  > extremely clueless question warning, both generally technically but
>>>>  > also vis-a-vie ocaml specifically:
>>>>  >
>>>>  > so even if ocaml can't so easily be made to support multiple threads
>>>>  > of ocaml code, could the gc be moved off to another thread? so that
>>>> it
>>>>  > could run on another core. would that be of any benefit?
>>>>
>>>> --
>>>> Caml-list mailing list.  Subscription management and archives:
>>>> https://sympa.inria.fr/sympa/arc/caml-list
>>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>>>
>>>
>>>
>>
>>
>> --
>> Fabrice LE FESSANT
>> Chercheur en Informatique
>> INRIA Paris Rocquencourt -- OCamlPro
>> Programming Languages and Distributed Systems
>>
>


-- 
Fabrice LE FESSANT
Chercheur en Informatique
INRIA Paris Rocquencourt -- OCamlPro
Programming Languages and Distributed Systems

--001a11c23b902c6acf04fef32b81
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Well, it is hard to enumerate. The basic idea is to find, =
for each data structure, the best trade-off between efficient operations an=
d space occupation. The simplest example is to decide between using lists o=
r arrays. Arrays use less space (unless you use hash-consing or you share t=
he end of the lists), but if you don&#39;t know the final size you need, yo=
u will finish either pre-allocating longer arrays than you need, or re-allo=
cating arrays too often, or switching between lists and arrays... In the en=
d, it really depends on what an application does.=C2=A0<div>
<br></div><div>There are also other tricks such as changing the tag of a bl=
ock to avoid scanning, but I wouldn&#39;t advise to use it unless you reall=
y know what you are doing...<br><div><br></div><div>--Fabrice</div></div>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu,=
 Jul 24, 2014 at 5:39 PM, Malcolm Matalka <span dir=3D"ltr">&lt;<a href=3D"=
mailto:mmatalka@gmail.com" target=3D"_blank">mmatalka@gmail.com</a>&gt;</sp=
an> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><p dir=3D"ltr">Cool, what sort of tricks can=
 you do to reduce the number of blocks?</p>
<div class=3D"gmail_quote">Den 24 jul 2014 17:36 skrev &quot;Fabrice Le Fes=
sant&quot; &lt;<a href=3D"mailto:Fabrice.Le_fessant@inria.fr" target=3D"_bl=
ank">Fabrice.Le_fessant@inria.fr</a>&gt;:<div><div class=3D"h5"><br type=3D=
"attribution">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<div dir=3D"ltr">Note that the cost of the GC does not automatically depend=
s on the size of RAM. In many networking servers, memory is filled with str=
ings, caching files on disk or content to be sent on the network. Such case=
s make OCaml GC happy, since it does not have to manipulate many objects, a=
nd it won&#39;t scan strings for pointers within them. There are also other=
 tricks to improve the GC behavior: you might want to change the data repre=
sentation to decrease the number of blocks in the heap, I used to do it a l=
ot when doing computations on millions of entries that would not otherwise =
stay in memory.<div>


<br></div><div>--Fabrice</div></div><div class=3D"gmail_extra"><br><br><div=
 class=3D"gmail_quote">On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:nicolas@boulay.name" target=3D"_blank">=
nicolas@boulay.name</a>&gt;</span> wrote:<br>


<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div>What about server that=
 use ~60GB of RAM ? Todays server are sold with 32 to 256 GB of RAM and lot=
 of cpu core. <br>


</div>Maybe in such extreme cases, offloading the major collection of the G=
C could reduce latency a lot ?<br>
<div><div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">201=
4-07-24 2:05 GMT+02:00 John F. Carr <span dir=3D"ltr">&lt;<a href=3D"mailto=
:jfc@mit.edu" target=3D"_blank">jfc@mit.edu</a>&gt;</span>:<div><div>
<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex">
<br>
Most programs spend a minority of their time in garbage collection.<br>
Even if the new GC thread did not slow down the main program,<br>
possible speedup would be less than 2x, probably well under 50%.<br>
<br>
For technical reasons, offloading major collections in OCaml is easier<br>
than offloading minor collections, so the potential benefit is less.<br>
<div><div><br>
=C2=A0&gt; extremely clueless question warning, both generally technically =
but<br>
=C2=A0&gt; also vis-a-vie ocaml specifically:<br>
=C2=A0&gt;<br>
=C2=A0&gt; so even if ocaml can&#39;t so easily be made to support multiple=
 threads<br>
=C2=A0&gt; of ocaml code, could the gc be moved off to another thread? so t=
hat it<br>
=C2=A0&gt; could run on another core. would that be of any benefit?<br>
<br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div></div></div><br></div></div></div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Fabrice LE F=
ESSANT<br>Chercheur en Informatique<br>INRIA Paris Rocquencourt -- OCamlPro=
<br>Programming Languages and Distributed Systems
</div>
</blockquote></div></div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Fabrice LE F=
ESSANT<br>Chercheur en Informatique<br>INRIA Paris Rocquencourt -- OCamlPro=
<br>Programming Languages and Distributed Systems
</div>

--001a11c23b902c6acf04fef32b81--
