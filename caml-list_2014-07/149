Return-Path: <nicolas.boulay@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 370B97FA56
	for <caml-list@sympa.inria.fr>; Fri, 25 Jul 2014 09:18:37 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  nicolas.boulay@gmail.com) identity=pra;
  client-ip=209.85.213.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.boulay@gmail.com";
  x-sender="nicolas.boulay@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  nicolas.boulay@gmail.com designates 209.85.213.182 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.213.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.boulay@gmail.com";
  x-sender="nicolas.boulay@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ig0-f182.google.com) identity=helo;
  client-ip=209.85.213.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="nicolas.boulay@gmail.com";
  x-sender="postmaster@mail-ig0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApYBAAIE0lPRVdW2m2dsb2JhbABZg2BXBIJ0r3qVGYFhh0WBCwgWEAEBAQEBBgsLCRQphAMBAQEDARIRHQEtCwEDAQsBBQULDQ0dAgIhARIBBQEKEgYTCAoQiAwDCQgNm31qiymFAopmJwMKhyARAQUOjRCCKYMDgU8FhHIFlEOCA4FSjFWELxgpgWuDEDsv
X-IPAS-Result: ApYBAAIE0lPRVdW2m2dsb2JhbABZg2BXBIJ0r3qVGYFhh0WBCwgWEAEBAQEBBgsLCRQphAMBAQEDARIRHQEtCwEDAQsBBQULDQ0dAgIhARIBBQEKEgYTCAoQiAwDCQgNm31qiymFAopmJwMKhyARAQUOjRCCKYMDgU8FhHIFlEOCA4FSjFWELxgpgWuDEDsv
X-IronPort-AV: E=Sophos;i="5.01,729,1400018400"; 
   d="scan'208";a="86923872"
Received: from mail-ig0-f182.google.com ([209.85.213.182])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 25 Jul 2014 09:18:36 +0200
Received: by mail-ig0-f182.google.com with SMTP id c1so414080igq.9
        for <multiple recipients>; Fri, 25 Jul 2014 00:18:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date:message-id:subject
         :from:to:cc:content-type;
        bh=CMM3llQhEBLb2Dk1GwVRdK8Fe3ykEdobpVA+gHzLt/c=;
        b=Pna9qjnhywTOwA+06jQEYYGgAABEzNgEpPOeIJ5eco3SnW5S8tT5tKlxgbGkUGDFkn
         RC/iXd42SQBwty56WxDvsiIkcb/S4g65BskBlCZxXuEa5/F4FPBrHVio3qzRkBMDBbNy
         FrrWKdAUJbHxLzdXYIbgWqwvDSOZaUSq5ArPWeU8ovVez9hbBd9CWQWOMQRVHafiu9Wq
         KVIJjcZCC1CtWqQ7xHvuE15hW5PMOtmYOmK+lMKifudJ1HEu1zmB/JKeNjwOqEjQJGSa
         uZQYWuCVVYCA6zpeW+OVPi80Z+m1eq/lhnJ7W9NlgmxV9S0QJGlcTw4btv52bX4fN1fF
         ZV3g==
MIME-Version: 1.0
X-Received: by 10.42.107.145 with SMTP id d17mr17715998icp.61.1406272714928;
 Fri, 25 Jul 2014 00:18:34 -0700 (PDT)
Sender: nicolas.boulay@gmail.com
Received: by 10.50.73.131 with HTTP; Fri, 25 Jul 2014 00:18:34 -0700 (PDT)
In-Reply-To: <CAHvkLrMPXQU-vC3b7xTpNcHd0OHZJB=c4xGFqNCHsGfe8QkOjw@mail.gmail.com>
References: <CAJ7XQb7DzUkH0TzB1rSkDpw5e_KdyXSqZLMnfYWa_y3X9mqsYQ@mail.gmail.com>
	<21456.19915.45180.915211@gargle.gargle.HOWL>
	<CAH+PdrAzgcsjjsMwMypzr+F53m9rWx5yFHP4650w3rmTUJw1mQ@mail.gmail.com>
	<CAHvkLrP3jJ0dp+rb4aUAQ4T5qNKYAi0W0KeLe3JNjLHFimZYfg@mail.gmail.com>
	<CAKziXDWdKWyR5LigJXVk=ahp9SO+JOrH0CdqR6_ndiKh9yuqXA@mail.gmail.com>
	<CAHvkLrMPXQU-vC3b7xTpNcHd0OHZJB=c4xGFqNCHsGfe8QkOjw@mail.gmail.com>
Date: Fri, 25 Jul 2014 09:18:34 +0200
X-Google-Sender-Auth: wrFW1lMw39ZgClp0XmOiXwlPbYM
Message-ID: <CAH+PdrCUJgTbU4LWC6D865Ag3i1HWcX7qPB2nNsRXcBzynFnjQ@mail.gmail.com>
From: Nicolas Boulay <nicolas@boulay.name>
To: Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>
Cc: OCaml <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=20cf301fb60da176e504feff6132
X-Validation-by: nicolas@boulay.name
Subject: Re: [Caml-list] concurrent gc?

--20cf301fb60da176e504feff6132
Content-Type: text/plain; charset=UTF-8

It's not possible to create a generic "list of array" that behave almost
like a list, with a chunk with a nice size (4KB ?)


2014-07-24 18:44 GMT+02:00 Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>:

> Well, it is hard to enumerate. The basic idea is to find, for each data
> structure, the best trade-off between efficient operations and space
> occupation. The simplest example is to decide between using lists or
> arrays. Arrays use less space (unless you use hash-consing or you share the
> end of the lists), but if you don't know the final size you need, you will
> finish either pre-allocating longer arrays than you need, or re-allocating
> arrays too often, or switching between lists and arrays... In the end, it
> really depends on what an application does.
>
> There are also other tricks such as changing the tag of a block to avoid
> scanning, but I wouldn't advise to use it unless you really know what you
> are doing...
>
> --Fabrice
>
>
> On Thu, Jul 24, 2014 at 5:39 PM, Malcolm Matalka <mmatalka@gmail.com>
> wrote:
>
>> Cool, what sort of tricks can you do to reduce the number of blocks?
>> Den 24 jul 2014 17:36 skrev "Fabrice Le Fessant" <
>> Fabrice.Le_fessant@inria.fr>:
>>
>>  Note that the cost of the GC does not automatically depends on the size
>>> of RAM. In many networking servers, memory is filled with strings, caching
>>> files on disk or content to be sent on the network. Such cases make OCaml
>>> GC happy, since it does not have to manipulate many objects, and it won't
>>> scan strings for pointers within them. There are also other tricks to
>>> improve the GC behavior: you might want to change the data representation
>>> to decrease the number of blocks in the heap, I used to do it a lot when
>>> doing computations on millions of entries that would not otherwise stay in
>>> memory.
>>>
>>> --Fabrice
>>>
>>>
>>> On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <nicolas@boulay.name>
>>> wrote:
>>>
>>>> What about server that use ~60GB of RAM ? Todays server are sold with
>>>> 32 to 256 GB of RAM and lot of cpu core.
>>>> Maybe in such extreme cases, offloading the major collection of the GC
>>>> could reduce latency a lot ?
>>>>
>>>>
>>>> 2014-07-24 2:05 GMT+02:00 John F. Carr <jfc@mit.edu>:
>>>>
>>>>
>>>>> Most programs spend a minority of their time in garbage collection.
>>>>> Even if the new GC thread did not slow down the main program,
>>>>> possible speedup would be less than 2x, probably well under 50%.
>>>>>
>>>>> For technical reasons, offloading major collections in OCaml is easier
>>>>> than offloading minor collections, so the potential benefit is less.
>>>>>
>>>>>  > extremely clueless question warning, both generally technically but
>>>>>  > also vis-a-vie ocaml specifically:
>>>>>  >
>>>>>  > so even if ocaml can't so easily be made to support multiple threads
>>>>>  > of ocaml code, could the gc be moved off to another thread? so that
>>>>> it
>>>>>  > could run on another core. would that be of any benefit?
>>>>>
>>>>> --
>>>>> Caml-list mailing list.  Subscription management and archives:
>>>>> https://sympa.inria.fr/sympa/arc/caml-list
>>>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>>>>
>>>>
>>>>
>>>
>>>
>>> --
>>> Fabrice LE FESSANT
>>> Chercheur en Informatique
>>> INRIA Paris Rocquencourt -- OCamlPro
>>> Programming Languages and Distributed Systems
>>>
>>
>
>
> --
> Fabrice LE FESSANT
> Chercheur en Informatique
> INRIA Paris Rocquencourt -- OCamlPro
> Programming Languages and Distributed Systems
>

--20cf301fb60da176e504feff6132
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">It&#39;s not possible to create a generic &quot;list of ar=
ray&quot; that behave almost like a list, with a chunk with a nice size (4K=
B ?)<br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote"=
>2014-07-24 18:44 GMT+02:00 Fabrice Le Fessant <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:Fabrice.Le_fessant@inria.fr" target=3D"_blank">Fabrice.Le_fessa=
nt@inria.fr</a>&gt;</span>:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Well, it is hard to enumera=
te. The basic idea is to find, for each data structure, the best trade-off =
between efficient operations and space occupation. The simplest example is =
to decide between using lists or arrays. Arrays use less space (unless you =
use hash-consing or you share the end of the lists), but if you don&#39;t k=
now the final size you need, you will finish either pre-allocating longer a=
rrays than you need, or re-allocating arrays too often, or switching betwee=
n lists and arrays... In the end, it really depends on what an application =
does.=C2=A0<div>

<br></div><div>There are also other tricks such as changing the tag of a bl=
ock to avoid scanning, but I wouldn&#39;t advise to use it unless you reall=
y know what you are doing...<span class=3D"HOEnZb"><font color=3D"#888888">=
<br>
<div><br></div><div>--Fabrice</div></font></span></div>
</div><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><b=
r><br><div class=3D"gmail_quote">On Thu, Jul 24, 2014 at 5:39 PM, Malcolm M=
atalka <span dir=3D"ltr">&lt;<a href=3D"mailto:mmatalka@gmail.com" target=
=3D"_blank">mmatalka@gmail.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><p dir=3D"ltr">Cool, what sort of tricks can=
 you do to reduce the number of blocks?</p>
<div class=3D"gmail_quote">Den 24 jul 2014 17:36 skrev &quot;Fabrice Le Fes=
sant&quot; &lt;<a href=3D"mailto:Fabrice.Le_fessant@inria.fr" target=3D"_bl=
ank">Fabrice.Le_fessant@inria.fr</a>&gt;:<div><div><br type=3D"attribution">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<div dir=3D"ltr">Note that the cost of the GC does not automatically depend=
s on the size of RAM. In many networking servers, memory is filled with str=
ings, caching files on disk or content to be sent on the network. Such case=
s make OCaml GC happy, since it does not have to manipulate many objects, a=
nd it won&#39;t scan strings for pointers within them. There are also other=
 tricks to improve the GC behavior: you might want to change the data repre=
sentation to decrease the number of blocks in the heap, I used to do it a l=
ot when doing computations on millions of entries that would not otherwise =
stay in memory.<div>



<br></div><div>--Fabrice</div></div><div class=3D"gmail_extra"><br><br><div=
 class=3D"gmail_quote">On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:nicolas@boulay.name" target=3D"_blank">=
nicolas@boulay.name</a>&gt;</span> wrote:<br>



<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div>What about server that=
 use ~60GB of RAM ? Todays server are sold with 32 to 256 GB of RAM and lot=
 of cpu core. <br>



</div>Maybe in such extreme cases, offloading the major collection of the G=
C could reduce latency a lot ?<br>
<div><div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">201=
4-07-24 2:05 GMT+02:00 John F. Carr <span dir=3D"ltr">&lt;<a href=3D"mailto=
:jfc@mit.edu" target=3D"_blank">jfc@mit.edu</a>&gt;</span>:<div><div>
<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex">
<br>
Most programs spend a minority of their time in garbage collection.<br>
Even if the new GC thread did not slow down the main program,<br>
possible speedup would be less than 2x, probably well under 50%.<br>
<br>
For technical reasons, offloading major collections in OCaml is easier<br>
than offloading minor collections, so the potential benefit is less.<br>
<div><div><br>
=C2=A0&gt; extremely clueless question warning, both generally technically =
but<br>
=C2=A0&gt; also vis-a-vie ocaml specifically:<br>
=C2=A0&gt;<br>
=C2=A0&gt; so even if ocaml can&#39;t so easily be made to support multiple=
 threads<br>
=C2=A0&gt; of ocaml code, could the gc be moved off to another thread? so t=
hat it<br>
=C2=A0&gt; could run on another core. would that be of any benefit?<br>
<br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div></div></div><br></div></div></div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Fabrice LE F=
ESSANT<br>Chercheur en Informatique<br>INRIA Paris Rocquencourt -- OCamlPro=
<br>Programming Languages and Distributed Systems
</div>
</blockquote></div></div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Fabrice LE F=
ESSANT<br>Chercheur en Informatique<br>INRIA Paris Rocquencourt -- OCamlPro=
<br>Programming Languages and Distributed Systems
</div>
</div></div></blockquote></div><br></div>

--20cf301fb60da176e504feff6132--
