Return-Path: <mmatalka@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 2A82E7FA56
	for <caml-list@sympa.inria.fr>; Thu, 24 Jul 2014 17:39:26 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  mmatalka@gmail.com) identity=pra; client-ip=209.85.192.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="mmatalka@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  mmatalka@gmail.com designates 209.85.192.43 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="mmatalka@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f43.google.com) identity=helo;
  client-ip=209.85.192.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="postmaster@mail-qg0-f43.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkcCAEEo0VPRVcArm2dsb2JhbABYg2BXBIJ0r0aVGIFhh0UBgQUIFhABAQEBAQYLCwkUKYQDAQEBAwESER0BGxILAQMBCwYFCw0NHQICIgERAQUBChIGExIQiAsBAwkIDZxYaospgXKDEIpbChknAwpkhjIRAQUOjzkEB4J4gU4FhHEFlj2BUpB/GCmEejsv
X-IPAS-Result: AkcCAEEo0VPRVcArm2dsb2JhbABYg2BXBIJ0r0aVGIFhh0UBgQUIFhABAQEBAQYLCwkUKYQDAQEBAwESER0BGxILAQMBCwYFCw0NHQICIgERAQUBChIGExIQiAsBAwkIDZxYaospgXKDEIpbChknAwpkhjIRAQUOjzkEB4J4gU4FhHEFlj2BUpB/GCmEejsv
X-IronPort-AV: E=Sophos;i="5.01,724,1400018400"; 
   d="scan'208";a="72701506"
Received: from mail-qg0-f43.google.com ([209.85.192.43])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 24 Jul 2014 17:39:24 +0200
Received: by mail-qg0-f43.google.com with SMTP id a108so3507713qge.30
        for <multiple recipients>; Thu, 24 Jul 2014 08:39:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=urBprbwGUeC/dLw3oijtutbDbiNDERC8JnwaTn7tMLM=;
        b=k+lx/WhITyz7f5mTQBT/c+1d8A0OguXpn1XzacPlK7OzOgubrAhDPM3+EttoTSnwVt
         1ItmV1lqiJtCy2GETECGntSG2wWAPLgbzTLr18aNPlIljuaELf66PWW6OBjBKBn+RKh3
         LqO4ytUrp4eZIjYu4sEoMzB74O6g5mzfx6qKfj79pLJuFYx5KpB4/w25NXX995HH1tCT
         8//WuJA3FD6/Ep4yYgQswxm0K8K1QBFObnVIfEfW0sOosEtiJWKBOxkFQgpGo/fd1mEK
         lz3QOgUSSLBVYUafrSSJ35CZAQwY+JCTNDfciPp+8fsWPk9Lwun5/rsswKTknIS1/bjh
         HjOA==
MIME-Version: 1.0
X-Received: by 10.140.105.72 with SMTP id b66mr15431122qgf.30.1406216363655;
 Thu, 24 Jul 2014 08:39:23 -0700 (PDT)
Received: by 10.140.88.81 with HTTP; Thu, 24 Jul 2014 08:39:23 -0700 (PDT)
Received: by 10.140.88.81 with HTTP; Thu, 24 Jul 2014 08:39:23 -0700 (PDT)
In-Reply-To: <CAHvkLrP3jJ0dp+rb4aUAQ4T5qNKYAi0W0KeLe3JNjLHFimZYfg@mail.gmail.com>
References: <CAJ7XQb7DzUkH0TzB1rSkDpw5e_KdyXSqZLMnfYWa_y3X9mqsYQ@mail.gmail.com>
	<21456.19915.45180.915211@gargle.gargle.HOWL>
	<CAH+PdrAzgcsjjsMwMypzr+F53m9rWx5yFHP4650w3rmTUJw1mQ@mail.gmail.com>
	<CAHvkLrP3jJ0dp+rb4aUAQ4T5qNKYAi0W0KeLe3JNjLHFimZYfg@mail.gmail.com>
Date: Thu, 24 Jul 2014 17:39:23 +0200
Message-ID: <CAKziXDWdKWyR5LigJXVk=ahp9SO+JOrH0CdqR6_ndiKh9yuqXA@mail.gmail.com>
From: Malcolm Matalka <mmatalka@gmail.com>
To: Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>
Cc: Raoul Duke <raould@gmail.com>, OCaml <caml-list@inria.fr>, 
	Nicolas Boulay <nicolas@boulay.name>
Content-Type: multipart/alternative; boundary=001a1137d358d54cee04fef24294
Subject: Re: [Caml-list] concurrent gc?

--001a1137d358d54cee04fef24294
Content-Type: text/plain; charset=UTF-8

Cool, what sort of tricks can you do to reduce the number of blocks?
Den 24 jul 2014 17:36 skrev "Fabrice Le Fessant" <
Fabrice.Le_fessant@inria.fr>:

> Note that the cost of the GC does not automatically depends on the size of
> RAM. In many networking servers, memory is filled with strings, caching
> files on disk or content to be sent on the network. Such cases make OCaml
> GC happy, since it does not have to manipulate many objects, and it won't
> scan strings for pointers within them. There are also other tricks to
> improve the GC behavior: you might want to change the data representation
> to decrease the number of blocks in the heap, I used to do it a lot when
> doing computations on millions of entries that would not otherwise stay in
> memory.
>
> --Fabrice
>
>
> On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <nicolas@boulay.name>
> wrote:
>
>> What about server that use ~60GB of RAM ? Todays server are sold with 32
>> to 256 GB of RAM and lot of cpu core.
>> Maybe in such extreme cases, offloading the major collection of the GC
>> could reduce latency a lot ?
>>
>>
>> 2014-07-24 2:05 GMT+02:00 John F. Carr <jfc@mit.edu>:
>>
>>
>>> Most programs spend a minority of their time in garbage collection.
>>> Even if the new GC thread did not slow down the main program,
>>> possible speedup would be less than 2x, probably well under 50%.
>>>
>>> For technical reasons, offloading major collections in OCaml is easier
>>> than offloading minor collections, so the potential benefit is less.
>>>
>>>  > extremely clueless question warning, both generally technically but
>>>  > also vis-a-vie ocaml specifically:
>>>  >
>>>  > so even if ocaml can't so easily be made to support multiple threads
>>>  > of ocaml code, could the gc be moved off to another thread? so that it
>>>  > could run on another core. would that be of any benefit?
>>>
>>> --
>>> Caml-list mailing list.  Subscription management and archives:
>>> https://sympa.inria.fr/sympa/arc/caml-list
>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>>
>>
>>
>
>
> --
> Fabrice LE FESSANT
> Chercheur en Informatique
> INRIA Paris Rocquencourt -- OCamlPro
> Programming Languages and Distributed Systems
>

--001a1137d358d54cee04fef24294
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">Cool, what sort of tricks can you do to reduce the number of=
 blocks?</p>
<div class=3D"gmail_quote">Den 24 jul 2014 17:36 skrev &quot;Fabrice Le Fes=
sant&quot; &lt;<a href=3D"mailto:Fabrice.Le_fessant@inria.fr">Fabrice.Le_fe=
ssant@inria.fr</a>&gt;:<br type=3D"attribution"><blockquote class=3D"gmail_=
quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
ex">
<div dir=3D"ltr">Note that the cost of the GC does not automatically depend=
s on the size of RAM. In many networking servers, memory is filled with str=
ings, caching files on disk or content to be sent on the network. Such case=
s make OCaml GC happy, since it does not have to manipulate many objects, a=
nd it won&#39;t scan strings for pointers within them. There are also other=
 tricks to improve the GC behavior: you might want to change the data repre=
sentation to decrease the number of blocks in the heap, I used to do it a l=
ot when doing computations on millions of entries that would not otherwise =
stay in memory.<div>

<br></div><div>--Fabrice</div></div><div class=3D"gmail_extra"><br><br><div=
 class=3D"gmail_quote">On Thu, Jul 24, 2014 at 8:58 AM, Nicolas Boulay <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:nicolas@boulay.name" target=3D"_blank">=
nicolas@boulay.name</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div>What about server that=
 use ~60GB of RAM ? Todays server are sold with 32 to 256 GB of RAM and lot=
 of cpu core. <br>

</div>Maybe in such extreme cases, offloading the major collection of the G=
C could reduce latency a lot ?<br>
<div><div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">201=
4-07-24 2:05 GMT+02:00 John F. Carr <span dir=3D"ltr">&lt;<a href=3D"mailto=
:jfc@mit.edu" target=3D"_blank">jfc@mit.edu</a>&gt;</span>:<div><div>
<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex">
<br>
Most programs spend a minority of their time in garbage collection.<br>
Even if the new GC thread did not slow down the main program,<br>
possible speedup would be less than 2x, probably well under 50%.<br>
<br>
For technical reasons, offloading major collections in OCaml is easier<br>
than offloading minor collections, so the potential benefit is less.<br>
<div><div><br>
=C2=A0&gt; extremely clueless question warning, both generally technically =
but<br>
=C2=A0&gt; also vis-a-vie ocaml specifically:<br>
=C2=A0&gt;<br>
=C2=A0&gt; so even if ocaml can&#39;t so easily be made to support multiple=
 threads<br>
=C2=A0&gt; of ocaml code, could the gc be moved off to another thread? so t=
hat it<br>
=C2=A0&gt; could run on another core. would that be of any benefit?<br>
<br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div></div></div><br></div></div></div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Fabrice LE F=
ESSANT<br>Chercheur en Informatique<br>INRIA Paris Rocquencourt -- OCamlPro=
<br>Programming Languages and Distributed Systems
</div>
</blockquote></div>

--001a1137d358d54cee04fef24294--
