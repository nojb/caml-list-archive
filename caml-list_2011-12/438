Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pBR7jEaW025511
	for <caml-list@sympa-roc.inria.fr>; Tue, 27 Dec 2011 08:45:14 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuYAAB13+U7RVdI2kGdsb2JhbABCnAGQPwgiAQEBAQkJDQcUBCGBcgEBAQQSAiwBGx0BAwwGBQsDOB4EAREBBQEcBjWgIgqLZYJrhCg/iHECBQuMBASMZ4gbjX09g3s
X-IronPort-AV: E=Sophos;i="4.71,414,1320620400"; 
   d="scan'208";a="136953696"
Received: from mail-pz0-f54.google.com ([209.85.210.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 27 Dec 2011 08:45:03 +0100
Received: by dakp5 with SMTP id p5so12553648dak.27
        for <caml-list@inria.fr>; Mon, 26 Dec 2011 23:45:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:reply-to:in-reply-to:references:from:date:message-id
         :subject:to:cc:content-type;
        bh=ny35w4mrvXJcRBLWke1sX91yCRyVOmDuMJSarFywAq8=;
        b=BuhPW1CD3ayZHwgEkJU4vvdEJB1dinTza//TRZQEbRsbuvzu2cvY2PrRqBmKanHlWX
         50e+Vmk8rjYOej/9fZ3EUWaRoEi6u9g68nDDEn/JvBLKV1Wx/oFrcS6Sy6vMuJs7XCcG
         jObVvDQbDsFST33778sFXMX3ny8lkKpXbym74=
Received: by 10.68.191.102 with SMTP id gx6mr41383153pbc.12.1324971901265;
 Mon, 26 Dec 2011 23:45:01 -0800 (PST)
MIME-Version: 1.0
Received: by 10.142.177.14 with HTTP; Mon, 26 Dec 2011 23:44:40 -0800 (PST)
Reply-To: david.baelde@ens-lyon.org
In-Reply-To: <CACyk+CLz1SUo9QqAK+3id2A7J9VyR=aWBaAnZXFLiiYNPbdK8Q@mail.gmail.com>
References: <4EF43C29.9090409@rktmb.org> <CACyk+CLz1SUo9QqAK+3id2A7J9VyR=aWBaAnZXFLiiYNPbdK8Q@mail.gmail.com>
From: David Baelde <david.baelde@gmail.com>
Date: Tue, 27 Dec 2011 08:44:40 +0100
Message-ID: <CAFqqUFEuyTFnvM4DLZX1ZiQje+bRMp=Fyag7o6aSVpBtGT2K4g@mail.gmail.com>
To: Martin Koch <mak@issuu.com>
Cc: Mihamina Rakotomandimby <mihamina@rktmb.org>, caml-list@inria.fr
Content-Type: text/plain; charset=ISO-8859-1
Subject: Re: [Caml-list] polymorphism in general

Hi,

I would say that any value whose type contains a generalized type
variable ('a, 'b, etc.) is polymorphic.

The empty list (of type 'a list) is polymorphic:
  let empty = [] in (1::empty, "2"::empty)

And so is the function always returning the empty list, even though it
has no polymorphic argument:
  let empty () = []

My 2 cents,
-- 
David
