Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pB18NGiR009862
	for <caml-list@sympa-roc.inria.fr>; Thu, 1 Dec 2011 09:23:16 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AngBACs4107RVdK2mGdsb2JhbABEqhB4CCIBAQEBAQgJDQcUJYILAiwBGx4DEgkHXQERAQUBIjWgR4JcCotkgmqEfj2IcQIFCosWBIgihQiHLY1ePYN8
X-IronPort-AV: E=Sophos;i="4.71,277,1320620400"; 
   d="scan'208";a="121619040"
Received: from mail-iy0-f182.google.com ([209.85.210.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 01 Dec 2011 09:23:10 +0100
Received: by iakl21 with SMTP id l21so3439857iak.27
        for <caml-list@inria.fr>; Thu, 01 Dec 2011 00:23:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=DY3CWALsYsgp5dbP1BDKkcakNe9mkT16v/fDlj5mkVU=;
        b=P1BuszgMDu4q/XpXCo5b3VgVEyCYaZNMKpdiSPOlatQdWWmT/dRfD94GFCl/2xIn1o
         jzY4BFH7cUPaOgNP5naDMwbOOQqcys1yAcHvVuW9FqaBRjJkJn3+1k9iJu2doZMQOzMe
         kIsouVePxEFZBiVSycdoCTh+YwLpTjGJrfDOU=
MIME-Version: 1.0
Received: by 10.231.65.73 with SMTP id h9mr1590509ibi.21.1322727789543; Thu,
 01 Dec 2011 00:23:09 -0800 (PST)
Received: by 10.42.202.8 with HTTP; Thu, 1 Dec 2011 00:23:09 -0800 (PST)
Date: Thu, 1 Dec 2011 12:23:09 +0400
Message-ID: <CAGmVoG3byhDyg5jWWkkn4=r61Qb+Jh38OQQM+wYhuAh4tbboSg@mail.gmail.com>
From: Kakadu <kakadu.hafanana@gmail.com>
To: Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=00151773e29607c1f004b3039094
Subject: [Caml-list] Idea about parser


--00151773e29607c1f004b3039094
Content-Type: text/plain; charset=ISO-8859-1

Hello!

How difficult is to create a tool described below?

This Tool will look at AST (maybe specific, with some restrictions; maybe a
syntax extendion of ML-like language)  of parser (which uses combinators)
and will generate parsing code according next rules:
1) this parser-function parses a grammar with some  ambiguities --- GLR
parser is a right choice
2) this parser-function
......................??????................................... ---
recursive descent is better.
3) this parser-function
.......................????...................................... --- we
should use LALR parser.

Now I have code examples which generate parsers of different types from
some DSL. AFAIU the main problems are:
1) how to build grammar from parser-combinators code?
2) how to analyze grammar?

Best wishes,
Kakadu

--00151773e29607c1f004b3039094
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<font size=3D"2"><span style=3D"font-family: arial,helvetica,sans-serif;">H=
ello!</span><br style=3D"font-family: arial,helvetica,sans-serif;"><br styl=
e=3D"font-family: arial,helvetica,sans-serif;"><span style=3D"font-family: =
arial,helvetica,sans-serif;">How difficult is to create a tool described be=
low?</span><br style=3D"font-family: arial,helvetica,sans-serif;">
<br style=3D"font-family: arial,helvetica,sans-serif;"><span style=3D"font-=
family: arial,helvetica,sans-serif;">This Tool will look at AST  (maybe spe=
cific, with some restrictions; maybe a syntax extendion of ML-like language=
)=A0 of parser (which uses combinators) and will generate parsing code acco=
rding next rules:</span><br style=3D"font-family: arial,helvetica,sans-seri=
f;">
<span style=3D"font-family: arial,helvetica,sans-serif;">1) this parser-fun=
ction parses a grammar with</span></font><font size=3D"2"> some=A0 ambiguit=
ies</font><font size=3D"2"> --- GLR parser is a right choice<br>2) this par=
ser-function ......................??????..................................=
. --- recursive descent is better.<br>
3) this parser-function .......................????........................=
.............. --- we should use LALR parser.<br style=3D"font-family: aria=
l,helvetica,sans-serif;"><br>Now I have code examples which generate parser=
s of different types from some DSL. AFAIU the main problems are:<br>
1) how to build grammar from parser-combinators code?<br>2) how to analyze =
grammar?<br style=3D"font-family: arial,helvetica,sans-serif;"><br style=3D=
"font-family: arial,helvetica,sans-serif;"><span style=3D"font-family: aria=
l,helvetica,sans-serif;">Best wishes,</span><br style=3D"font-family: arial=
,helvetica,sans-serif;">
<span style=3D"font-family: arial,helvetica,sans-serif;">Kakadu</span></fon=
t><br>

--00151773e29607c1f004b3039094--
