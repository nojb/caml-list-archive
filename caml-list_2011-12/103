Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pB88usQ9012785
	for <caml-list@sympa-roc.inria.fr>; Thu, 8 Dec 2011 09:56:54 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiEGAJZ64E7RVdK2kWdsb2JhbABAA5o3NIdkAYZ0gRgIIgEBAQEJCQ0HEieBcgEBAQECARICLAEtCwEDAQsBBQULDQ0hIhIBBQEKEgYTEgkHh2UImhsKjk+EUjCIfgIFDINrhCeDHQSCW4VTjD2NcD2BTX+BTg
X-IronPort-AV: E=Sophos;i="4.71,319,1320620400"; 
   d="scan'208";a="134495590"
Received: from mail-iy0-f182.google.com ([209.85.210.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Dec 2011 09:56:48 +0100
Received: by iafi7 with SMTP id i7so3660723iaf.27
        for <caml-list@inria.fr>; Thu, 08 Dec 2011 00:56:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        bh=lQK/2aUkeDNnwWCeclMg/Dx6MfVXTi/80cxgkQFVsc8=;
        b=nN4ZW/qpw2MTuikRqC8fDeRg2nA06FJHDXW/HKycPk/AKsn4TRiCqwiyxSDqoTMAML
         jwB80XEngRZOkihTdRq8lg9ypwiyD5URe3lYRjR7XXUIue3aaGYlZk0tCtNPuC0u84pD
         n2vkHzdb2iUIqp5zbg03aKqwmIpcxZffGNxnA=
Received: by 10.50.171.3 with SMTP id aq3mr2760845igc.49.1323334607191; Thu,
 08 Dec 2011 00:56:47 -0800 (PST)
MIME-Version: 1.0
Sender: warnegia@gmail.com
Received: by 10.50.79.8 with HTTP; Thu, 8 Dec 2011 00:56:26 -0800 (PST)
In-Reply-To: <4EE07A30.4090000@fugmann.net>
References: <CAGS5m-=5CvbV+V9Bu4XVYaRj_jy0E4-u1Vg1oGgZLGRrA=89Lw@mail.gmail.com>
 <4EE07A30.4090000@fugmann.net>
From: William Le Ferrand <William.Le-Ferrand@polytechnique.edu>
Date: Thu, 8 Dec 2011 00:56:26 -0800
X-Google-Sender-Auth: hwXxhzvrQz3mb3_cQHhY2vMfdC8
Message-ID: <CAGS5m-nYMnR13XFvJHzs=Z0y4qJJ7nOKpJfwrpnYOsSbG8rqMg@mail.gmail.com>
To: Anders Fugmann <anders@fugmann.net>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=e89a8f234a1f2e3dbf04b390d9fd
Subject: Re: [Caml-list] Storing ocaml values outside ocaml's heap


--e89a8f234a1f2e3dbf04b390d9fd
Content-Type: text/plain; charset=ISO-8859-1

Hi Anders!

How're you doing ?

Thanks for the suggestion. We actually have a solution in production right
now (www.besport.com) that relies on netshm. Unfortunately, the
serialization / deserialization is killing the performance : about 200ms
for a full request against 7ms for a simple Hashtbl lookup on our hardware.

ocaml-everlasting did solve this performance bottleneck but we get
unacceptable segmentation faults, and before debugging this library I'd
rather learn about other approaches :)

Best regards,

William


On Thu, Dec 8, 2011 at 12:49 AM, Anders Fugmann <anders@fugmann.net> wrote:

> Hi William,
>
> Have you tried netshm from ocamlnet library? It seems that it would fit
> your requirements by placing memory outside the reach of the garbage
> collector.
>
> Using netshm would require a lot of serialization / deserilization and
> memory copying, which might not be that efficient if you access the cache a
> lot.
>
> Regards
> Anders Fugmann
>
>
>
>
> On 12/08/2011 05:35 AM, William Le Ferrand wrote:
>
>> Dear list,
>>
>> We are building a cache in ocaml and we're wondering if it would make
>> sense to store ocaml values outside the reach of the gc. (gc on a 20GB
>> cache hangs the process for a second or so).
>>
>> To run some experiments, we wrote a small library
>> (https://github.com/besport/**ocaml-everlasting<https://github.com/besport/ocaml-everlasting>)
>> that exposes two
>> functions, get and set.
>>
>> When inserting a value, we copy recursively the blocs outside of the
>> reach of the gc (and put the resulting value in some C array). When
>> getting the value, we simply pass the pointer to the copied value to the
>> ocaml code (the structure is still coherent and the value is directly
>> usable). We also wrote an "update" function that compare a new value
>> with the existing value in cache, to avoid unnecessary memory
>> allocation/deallocation.
>>
>> It does not seems very stable though, but I don't know if it is a bug in
>> the update function or simply because this approach is not reasonable.
>> Do you have any thoughts? Is there any clever way to build a large cache
>> in an ocaml app ?
>>
>> Thanks in advance for any tips!
>>
>> Best
>>
>> William
>>
>>
>> --
>> William Le Ferrand
>>
>> Mobile : (+1) (415) 683-1484
>> Web : http://williamleferrand.**github.com/<http://williamleferrand.github.com/>
>> <http://www.linkedin.com/in/**williamleferrand<http://www.linkedin.com/in/williamleferrand>
>> >
>>
>>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/**wws/info/caml-list<https://sympa-roc.inria.fr/wws/info/caml-list>
> Beginner's list: http://groups.yahoo.com/group/**ocaml_beginners<http://groups.yahoo.com/group/ocaml_beginners>
> Bug reports: http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bin/caml-bugs>
>
>


-- 
William Le Ferrand

Mobile : (+1) (415) 683-1484
Web : http://williamleferrand.github.com/
<http://www.linkedin.com/in/williamleferrand>

--e89a8f234a1f2e3dbf04b390d9fd
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Anders!=A0<div><br></div><div>How&#39;re you doing ?=A0</div><div><br></=
div><div>Thanks for the suggestion. We actually have a solution in producti=
on right now (<a href=3D"http://www.besport.com">www.besport.com</a>) that =
relies on netshm. Unfortunately, the serialization / deserialization is kil=
ling the performance : about 200ms for a full request against 7ms for a sim=
ple Hashtbl lookup on our hardware.=A0</div>

<div><br></div><div>ocaml-everlasting did solve this performance bottleneck=
 but we get unacceptable segmentation faults, and before debugging this lib=
rary I&#39;d rather learn about other approaches :)</div><div><br></div>

<div>Best regards,</div><div><br></div><div>William</div><div><br><br><div =
class=3D"gmail_quote">On Thu, Dec 8, 2011 at 12:49 AM, Anders Fugmann <span=
 dir=3D"ltr">&lt;<a href=3D"mailto:anders@fugmann.net">anders@fugmann.net</=
a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;">Hi William,<br>
<br>
Have you tried netshm from ocamlnet library? It seems that it would fit you=
r requirements by placing memory outside the reach of the garbage collector=
.<br>
<br>
Using netshm would require a lot of serialization / deserilization and memo=
ry copying, which might not be that efficient if you access the cache a lot=
.<br>
<br>
Regards<br>
Anders Fugmann<div><div></div><div class=3D"h5"><br>
<br>
<br>
<br>
On 12/08/2011 05:35 AM, William Le Ferrand wrote:<br>
</div></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bo=
rder-left:1px #ccc solid;padding-left:1ex"><div><div></div><div class=3D"h5=
">
Dear list,<br>
<br>
We are building a cache in ocaml and we&#39;re wondering if it would make<b=
r>
sense to store ocaml values outside the reach of the gc. (gc on a 20GB<br>
cache hangs the process for a second or so).<br>
<br>
To run some experiments, we wrote a small library<br>
(<a href=3D"https://github.com/besport/ocaml-everlasting" target=3D"_blank"=
>https://github.com/besport/<u></u>ocaml-everlasting</a>) that exposes two<=
br>
functions, get and set.<br>
<br>
When inserting a value, we copy recursively the blocs outside of the<br>
reach of the gc (and put the resulting value in some C array). When<br>
getting the value, we simply pass the pointer to the copied value to the<br>
ocaml code (the structure is still coherent and the value is directly<br>
usable). We also wrote an &quot;update&quot; function that compare a new va=
lue<br>
with the existing value in cache, to avoid unnecessary memory<br>
allocation/deallocation.<br>
<br>
It does not seems very stable though, but I don&#39;t know if it is a bug i=
n<br>
the update function or simply because this approach is not reasonable.<br>
Do you have any thoughts? Is there any clever way to build a large cache<br>
in an ocaml app ?<br>
<br>
Thanks in advance for any tips!<br>
<br>
Best<br>
<br>
William<br>
<br>
<br>
--<br>
William Le Ferrand<br>
<br>
Mobile : <a href=3D"tel:%28%2B1%29%20%28415%29%20683-1484" value=3D"+141568=
31484" target=3D"_blank">(+1) (415) 683-1484</a><br>
Web : <a href=3D"http://williamleferrand.github.com/" target=3D"_blank">htt=
p://williamleferrand.<u></u>github.com/</a><br></div></div>
&lt;<a href=3D"http://www.linkedin.com/in/williamleferrand" target=3D"_blan=
k">http://www.linkedin.com/in/<u></u>williamleferrand</a>&gt;<br>
<br>
</blockquote><font color=3D"#888888">
<br>
<br>
-- <br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/<u></u>wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
<br>
</font></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>Willi=
am Le Ferrand<br><br><div>Mobile :=A0(+1)=A0<span style=3D"font-family:Aria=
l, sans-serif;border-collapse:collapse;color:rgb(51, 51, 51)">(415) 683-148=
4</span></div>

<div><font color=3D"#333333" face=3D"Arial, sans-serif"><span style=3D"bord=
er-collapse:collapse">Web :=A0<a href=3D"http://williamleferrand.github.com=
/" target=3D"_blank">http://williamleferrand.github.com/</a></span></font><=
br><a href=3D"http://www.linkedin.com/in/williamleferrand" target=3D"_blank=
"></a></div>

<br>
</div>

--e89a8f234a1f2e3dbf04b390d9fd--
