Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pB89UVT9015502
	for <caml-list@sympa-roc.inria.fr>; Thu, 8 Dec 2011 10:30:31 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap4EADyD4E5auLfF/2dsb2JhbABDDqtbgXIBAQQBOEABEAsYCRYPCQMCAQIBRQYNAQcCF4dsArcKizsEmjaMJDg
X-IronPort-AV: E=Sophos;i="4.71,319,1320620400"; 
   d="scan'208";a="122550972"
Received: from 0405ds1-vaer.0.fullrate.dk (HELO fw.fugmann.net) ([90.184.183.197])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 08 Dec 2011 10:30:29 +0100
Received: from [10.0.10.34] (unknown [195.184.103.10])
	(using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by fw.fugmann.net (Postfix) with ESMTPSA id 6852B40061;
	Thu,  8 Dec 2011 10:30:28 +0100 (CET)
Message-ID: <4EE08390.7090203@fugmann.net>
Date: Thu, 08 Dec 2011 10:29:52 +0100
From: Anders Fugmann <anders@fugmann.net>
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.23) Gecko/20111010 Iceowl/1.0b2 Icedove/3.1.15
MIME-Version: 1.0
To: William Le Ferrand <William.Le-Ferrand@polytechnique.edu>
CC: caml users <caml-list@inria.fr>
References: <CAGS5m-=5CvbV+V9Bu4XVYaRj_jy0E4-u1Vg1oGgZLGRrA=89Lw@mail.gmail.com> <4EE07A30.4090000@fugmann.net> <CAGS5m-nYMnR13XFvJHzs=Z0y4qJJ7nOKpJfwrpnYOsSbG8rqMg@mail.gmail.com>
In-Reply-To: <CAGS5m-nYMnR13XFvJHzs=Z0y4qJJ7nOKpJfwrpnYOsSbG8rqMg@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Validation-by: anders@fugmann.net
Subject: Re: [Caml-list] Storing ocaml values outside ocaml's heap

On 12/08/2011 09:56 AM, William Le Ferrand wrote:
> Hi Anders!
>
> How're you doing ?
>
> Thanks for the suggestion. We actually have a solution in production
> right now (www.besport.com <http://www.besport.com>) that relies on
> netshm. Unfortunately, the serialization / deserialization is killing
> the performance : about 200ms for a full request against 7ms for a
> simple Hashtbl lookup on our hardware.
200 ms seems too much - Nothing takes 200ms on modern hardware. not even 
on AWS :-)

Maybe the system was swapping or some other noise polluted your 
statistics. Which serialization format did you use? ocaml's standard 
marshaling, or did your write your own?


  > ocaml-everlasting did solve this performance bottleneck but we get
> unacceptable segmentation faults, and before debugging this library I'd
> rather learn about other approaches :)
What type of performance do you get with ocaml-everlasting?

Regards
Anders
