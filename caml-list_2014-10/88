Return-Path: <shayne.fletcher.50@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id D0B117EFCD
	for <caml-list@sympa.inria.fr>; Thu, 16 Oct 2014 18:37:42 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  shayne.fletcher.50@gmail.com) identity=pra;
  client-ip=209.85.192.42;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  shayne.fletcher.50@gmail.com designates 209.85.192.42 as
  permitted sender) identity=mailfrom; client-ip=209.85.192.42;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f42.google.com) identity=helo;
  client-ip=209.85.192.42;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="postmaster@mail-qg0-f42.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtgBAEvzP1TRVcAqm2dsb2JhbABbg2FcgwLHLoFuiF8HFgERAQEBAQEGCwsJFC6EGxEdARseAxIDDS0KAiQBEQEFAQ4UNYgHAQMRDZh8jRSDHW6LMIFygxCIewoZJw1nhV0BBQ6TPYFUBYUVkTCHEpQqGCmDBIJAIS+CSgEBAQ
X-IPAS-Result: AtgBAEvzP1TRVcAqm2dsb2JhbABbg2FcgwLHLoFuiF8HFgERAQEBAQEGCwsJFC6EGxEdARseAxIDDS0KAiQBEQEFAQ4UNYgHAQMRDZh8jRSDHW6LMIFygxCIewoZJw1nhV0BBQ6TPYFUBYUVkTCHEpQqGCmDBIJAIS+CSgEBAQ
X-IronPort-AV: E=Sophos;i="5.04,733,1406584800"; 
   d="scan'208";a="83517157"
Received: from mail-qg0-f42.google.com ([209.85.192.42])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Oct 2014 18:37:41 +0200
Received: by mail-qg0-f42.google.com with SMTP id z60so2853531qgd.15
        for <caml-list@inria.fr>; Thu, 16 Oct 2014 09:37:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=NaeO7VgILULLJHLkrXIDVAjYPLQ7QyMbPGjj49L9N80=;
        b=LLv7MO6RagWLbjYXIImXdqIedcxsM7kq0IS/xMcFpY9ryUZwJKGLH2ZKBWc9FyH5u3
         p4V/S5hBo1mEKPp4wCwF/k8y5TKwrdT4wny2bv8PcgkvrRzn1d4+7zifimFf+kjrlsAQ
         PHcW2FZf3Z8UxxFZrPSOZKtwFyexj8t8zBj650DEKOeUlH7Q5hSkbYMvsPkADmqWzVkI
         wv6eG6bxN58UnJ4RX5nTkOcdpw2OiDHW60lMbdH8Xx++sumAKKeKHSi68SvQwYjVK5V+
         jlV1nbkZKC5LumIur0fmfA6hcW/3dnJNp5fjUh18IY8xZg/AJDpRwlPyr6khd9yt/AZd
         J2Lg==
X-Received: by 10.140.91.73 with SMTP id y67mr3658795qgd.52.1413477460084;
 Thu, 16 Oct 2014 09:37:40 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.18.147 with HTTP; Thu, 16 Oct 2014 09:37:19 -0700 (PDT)
From: Shayne Fletcher <shayne.fletcher.50@gmail.com>
Date: Thu, 16 Oct 2014 12:37:19 -0400
Message-ID: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
To: "caml-list@inria.fr users" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a113b39dae814b305058cdd07
Subject: [Caml-list] Dimensional Analysis question

--001a113b39dae814b305058cdd07
Content-Type: text/plain; charset=UTF-8

Dear OCamlers,

In 1994, Barton and Nackman in their book 'Scientific Engineering in
C++' [1] demonstrated how one could encode the rules of Dimensional
Analysis [2] into the C++ type system enabling compile-time checking
(no runtime-cost) of the plausibility (at least up to the dimensional
correctness) of computations.

In 2004, Abrahams & Gurtovy in 'C++ Template Metaprogramming' [3]
showed the Barton Nackman technique to be elegantly implementable
using compile time type sequences encoding integer constants. At the
end of this post, I provide a complete listing of their example
program [4].

The key properties of the system (as I see it) are:
  - Encoding of integers as types;
  - Compile time manipulation of sequences of these integer encodings
    to deduce/produce new derived types.

Now, it is not immediately obvious to me how to approach this problem
in OCaml. It irks me some that I can't immediately produce a yet more
elegant OCaml program for this problem and leaves me feeling like C++
has "got something over on us" here ;)

My question therefore is: Does anyone have suggestions/pointers
on how to approach automatic dimensional analysis via the OCaml type
system?

Best,

-- 
Shayne Fletcher

[1] John J. Barton and Lee R. Nackman. Scientific and Engineering C++:
    an Introduction with Advanced Techniques and Examples. Reading,
    MA: Addison Wesley. ISBN 0-201-53393-6. 1994.

[2] Wikipedia http://en.wikipedia.org/wiki/Dimensional_analysis

[3] David Abrahams and Aleksey Gurtovy C++ Template Metaprogramming:
    Concepts, Tools, and Techniques from Boost and Beyond (C++ in
    Depth Series), Addison-Wesley Professional. ISBN:0321227255. 2004.

[4] Code listing:

    //"c:/program files (x86)/Microsoft Visual Studio
10.0/vc/vcvarsall.bat" x64
    //cl /Fedimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp

    #include <boost/mpl/vector_c.hpp>
    #include <boost/mpl/transform.hpp>
    #include <boost/mpl/placeholders.hpp>
    #include <boost/mpl/equal.hpp>
    #include <boost/mpl/plus.hpp>
    #include <boost/mpl/minus.hpp>
    #include <boost/static_assert.hpp>

    typedef boost::mpl::vector_c<int,1,0,0,0,0,0,0> mass;
    typedef boost::mpl::vector_c<int,0,1,0,0,0,0,0> length;
    typedef boost::mpl::vector_c<int,0,0,1,0,0,0,0> time;
    typedef boost::mpl::vector_c<int,0,0,0,1,0,0,0> charge;
    typedef boost::mpl::vector_c<int,0,0,0,0,1,0,0> temperature;
    typedef boost::mpl::vector_c<int,0,0,0,0,0,1,0> intensity;
    typedef boost::mpl::vector_c<int,0,0,0,0,0,0,1> angle;
    typedef boost::mpl::vector_c<int,0,1,-1,0,0,0,0> velocity;     // l/t
    typedef boost::mpl::vector_c<int,0,1,-2,0,0,0,0> acceleration; // l/(t2)
    typedef boost::mpl::vector_c<int,1,1,-1,0,0,0,0> momentum;     // ml/t
    typedef boost::mpl::vector_c<int,1,1,-2,0,0,0,0> force;        //
ml/(t2)
    typedef boost::mpl::vector_c<int,0,0,0,0,0,0,0> scalar;

    template <class T, class Dimensions>
    class quantity
    {
    public:
      explicit quantity (T val)
        : val (val)
      {}
      template <class OtherDimensions>
      quantity (quantity<T, OtherDimensions> const& other)
        : val (other.value ()) {
        BOOST_MPL_ASSERT( (boost::mpl::equal<Dimensions, OtherDimensions>));
      }
      T value () const { return val; }
    private:
      T val;
    };

    template <class T, class D>
    quantity<T, D>
    operator + (quantity<T, D> x, quantity<T, D> y )
    {
      return quantity<T, D>(x.value () + y.value ());
    }

    template <class T, class D>
    quantity<T, D>
    operator - (quantity<T, D> x, quantity<T, D> y )
    {
      return quantity<T, D>(x.value () - y.value ());
    }

    template <class T, class D1, class D2>
    quantity <
      T
    , typename boost::mpl::transform<
        D1, D2, boost::mpl::plus<
                  boost::mpl::placeholders::_1
                , boost::mpl::placeholders::_2> >::type
    >
    operator* (quantity<T, D1> x, quantity <T, D2> y)
    {
      typedef typename boost::mpl::transform<
        D1, D2, boost::mpl::plus<
                  boost::mpl::placeholders::_1
                  , boost::mpl::placeholders::_2> >::type D;

      return quantity<T, D> (x.value () * y.value ());
    }

    template <class T, class D1, class D2>
    quantity <
      T
    , typename boost::mpl::transform<
        D1, D2, boost::mpl::minus<
                  boost::mpl::placeholders::_1
                , boost::mpl::placeholders::_2> >::type
    >
    operator/ (quantity<T, D1> x, quantity <T, D2> y)
    {
      typedef typename boost::mpl::transform<
        D1, D2, boost::mpl::minus<
                  boost::mpl::placeholders::_1
                  , boost::mpl::placeholders::_2> >::type D;

      return quantity<T, D> (x.value () / y.value ());
    }

    // -- test

    #include <iostream>
    #include <limits>
    #include <cassert>

    int main ()
    {
      quantity<float, mass> m (5.0f);
      quantity<float, acceleration> a(9.8f);
      quantity<float, force> f = m * a;
      quantity<float, mass> m2 = f / a;

      assert ((std::abs ((m2 - m).value ())) <=
std::numeric_limits<double>::epsilon ());

      return 0;
    }

--001a113b39dae814b305058cdd07
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_default" style><div class=3D"gmail_def=
ault" style><font face=3D"tahoma, sans-serif">Dear OCamlers,</font></div><d=
iv class=3D"gmail_default" style><font face=3D"tahoma, sans-serif"><br></fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f">In 1994, Barton and Nackman in their book &#39;Scientific Engineering in=
</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-=
serif">C++&#39; [1]=C2=A0demonstrated=C2=A0how one could encode the rules o=
f Dimensional</font></div><div class=3D"gmail_default" style><font face=3D"=
tahoma, sans-serif">Analysis [2] into the C++ type system enabling compile-=
time checking</font></div><div class=3D"gmail_default" style><font face=3D"=
tahoma, sans-serif">(no runtime-cost) of the=C2=A0plausibility=C2=A0(at lea=
st up to the dimensional</font></div><div class=3D"gmail_default" style><fo=
nt face=3D"tahoma, sans-serif">correctness) of computations.</font></div><d=
iv class=3D"gmail_default" style><font face=3D"tahoma, sans-serif"><br></fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f">In 2004, Abrahams &amp; Gurtovy in &#39;C++ Template Metaprogramming&#39=
; [3]</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, =
sans-serif">showed the Barton Nackman technique to be elegantly implementab=
le</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, san=
s-serif">using compile time type sequences encoding integer constants. At t=
he</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, san=
s-serif">end of this post, I provide a complete listing of their example</f=
ont></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-ser=
if">program [4].</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_default" style=
><font face=3D"tahoma, sans-serif">The key properties of the system (as I s=
ee it) are:</font></div><div class=3D"gmail_default" style><font face=3D"ta=
homa, sans-serif">=C2=A0 - Encoding of integers as types;=C2=A0</font></div=
><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 - Compile time manipulation of sequences of these integer encodings</fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 to deduce/produce new derived types.</font></div><div clas=
s=3D"gmail_default" style><font face=3D"tahoma, sans-serif"><br></font></di=
v><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">Now,=
 it is not immediately obvious to me how to approach this problem</font></d=
iv><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">in =
OCaml. It irks me some that I can&#39;t immediately produce a yet more</fon=
t></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif=
">elegant OCaml program for this problem and leaves me feeling like C++</fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f">has &quot;got something over on us&quot; here ;)</font></div><div class=
=3D"gmail_default" style><font face=3D"tahoma, sans-serif"><br></font></div=
><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">My qu=
estion therefore is: Does anyone have suggestions/pointers</font></div><div=
 class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">on how to =
approach automatic dimensional analysis via the OCaml type</font></div><div=
 class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">system?=C2=
=A0</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sa=
ns-serif"><br></font></div><div class=3D"gmail_default" style><font face=3D=
"tahoma, sans-serif">Best,</font></div><div class=3D"gmail_default" style><=
div><br></div>--=C2=A0<br>Shayne Fletcher<br></div><div class=3D"gmail_defa=
ult" style><br></div><div class=3D"gmail_default" style><font face=3D"tahom=
a, sans-serif">[1] John J. Barton and Lee R. Nackman. Scientific and Engine=
ering C++:</font></div><div class=3D"gmail_default" style><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 an Introduction with Advanced Techniques and=
 Examples. Reading,</font></div><div class=3D"gmail_default" style><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 MA: Addison Wesley. ISBN 0-201-5339=
3-6. 1994.</font></div><div class=3D"gmail_default" style><font face=3D"tah=
oma, sans-serif"><br></font></div><div class=3D"gmail_default" style><font =
face=3D"tahoma, sans-serif">[2] Wikipedia <a href=3D"http://en.wikipedia.or=
g/wiki/Dimensional_analysis">http://en.wikipedia.org/wiki/Dimensional_analy=
sis</a></font></div><div class=3D"gmail_default" style><font face=3D"tahoma=
, sans-serif"><br></font></div><div class=3D"gmail_default" style><font fac=
e=3D"tahoma, sans-serif">[3] David Abrahams and Aleksey Gurtovy C++ Templat=
e Metaprogramming:</font></div><div class=3D"gmail_default" style><font fac=
e=3D"tahoma, sans-serif">=C2=A0 =C2=A0 Concepts, Tools, and Techniques from=
 Boost and Beyond (C++ in</font></div><div class=3D"gmail_default" style><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 Depth Series), Addison-Wesley=
 Professional. ISBN:0321227255. 2004.</font></div><div class=3D"gmail_defau=
lt" style><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"=
gmail_default" style><font face=3D"tahoma, sans-serif">[4] Code listing:</f=
ont></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-ser=
if"><br></font></div><div class=3D"gmail_default" style><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 //&quot;c:/program files (x86)/Microsoft Visua=
l Studio 10.0/vc/vcvarsall.bat&quot; x64</font></div><div class=3D"gmail_de=
fault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 //cl /Fedimens=
ion.exe /EHsc /I d:/boost_1_55_0 dimension.cpp</font></div><div class=3D"gm=
ail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</f=
ont></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 #include &lt;boost/mpl/vector_c.hpp&gt;</font></div><div =
class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 #include &lt;boost/mpl/transform.hpp&gt;</font></div><div class=3D"gmai=
l_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &=
lt;boost/mpl/placeholders.hpp&gt;</font></div><div class=3D"gmail_default" =
style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mp=
l/equal.hpp&gt;</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/plus.hpp&gt;</=
font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-se=
rif">=C2=A0 =C2=A0 #include &lt;boost/mpl/minus.hpp&gt;</font></div><div cl=
ass=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=
 #include &lt;boost/static_assert.hpp&gt;</font></div><div class=3D"gmail_d=
efault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font><=
/div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,1,0,0,0,0,0,0&gt; mass;</=
font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-se=
rif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,1,0,0,0,0,0&gt; le=
ngth;</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,0,1,0,0,0,0=
&gt; time;</font></div><div class=3D"gmail_default" style><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,0,0,1,=
0,0,0&gt; charge;</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0=
,0,0,0,1,0,0&gt; temperature;</font></div><div class=3D"gmail_default" styl=
e><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vecto=
r_c&lt;int,0,0,0,0,0,1,0&gt; intensity;</font></div><div class=3D"gmail_def=
ault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::=
mpl::vector_c&lt;int,0,0,0,0,0,0,1&gt; angle;</font></div><div class=3D"gma=
il_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef b=
oost::mpl::vector_c&lt;int,0,1,-1,0,0,0,0&gt; velocity; =C2=A0 =C2=A0 // l/=
t</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans=
-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,1,-2,0,0,0,0&gt=
; acceleration; // l/(t2)</font></div><div class=3D"gmail_default" style><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&=
lt;int,1,1,-1,0,0,0,0&gt; momentum; =C2=A0 =C2=A0 // ml/t</font></div><div =
class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 typedef boost::mpl::vector_c&lt;int,1,1,-2,0,0,0,0&gt; force; =C2=A0 =
=C2=A0 =C2=A0 =C2=A0// ml/(t2)</font></div><div class=3D"gmail_default" sty=
le><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vect=
or_c&lt;int,0,0,0,0,0,0,0&gt; scalar;</font></div><div class=3D"gmail_defau=
lt" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div=
><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 template &lt;class T, class Dimensions&gt;</font></div><div clas=
s=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 c=
lass quantity</font></div><div class=3D"gmail_default" style><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_default=
" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 public:</font></div=
><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 explicit quantity (T val)=C2=A0</font></div><div class=3D=
"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 : val (val)</font></div><div class=3D"gmail_default" style><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 {}</font></div><div class=
=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 template &lt;class OtherDimensions&gt;</font></div><div class=3D"gma=
il_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 qu=
antity (quantity&lt;T, OtherDimensions&gt; const&amp; other)</font></div><d=
iv class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 : val (other.value ()) {</font></div><div class=3D"gma=
il_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 BOOST_MPL_ASSERT( (boost::mpl::equal&lt;Dimensions, OtherDimensions&=
gt;));</font></div><div class=3D"gmail_default" style><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 =C2=A0 }</font></div><div class=3D"gmail_default=
" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 T value () c=
onst { return val; }</font></div><div class=3D"gmail_default" style><font f=
ace=3D"tahoma, sans-serif">=C2=A0 =C2=A0 private:</font></div><div class=3D=
"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 T val;</font></div><div class=3D"gmail_default" style><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 };</font></div><div class=3D"gmail_default" =
style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><di=
v class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 template &lt;class T, class D&gt;</font></div><div class=3D"gmail_de=
fault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity&lt;T,=
 D&gt;</font></div><div class=3D"gmail_default" style><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 operator + (quantity&lt;T, D&gt; x, quantity&lt;=
T, D&gt; y )</font></div><div class=3D"gmail_default" style><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_default"=
 style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return quanti=
ty&lt;T, D&gt;(x.value () + y.value ());</font></div><div class=3D"gmail_de=
fault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div>=
<div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0=C2=A0</font></div><div class=3D"gmail_default" style><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D&gt;</font><=
/div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 quantity&lt;T, D&gt;</font></div><div class=3D"gmail_default"=
 style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 operator - (quantity=
&lt;T, D&gt; x, quantity&lt;T, D&gt; y )</font></div><div class=3D"gmail_de=
fault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div>=
<div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0 =C2=A0 return quantity&lt;T, D&gt;(x.value () - y.value ());</font>=
</div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 }</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail=
_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 template &l=
t;class T, class D1, class D2&gt;</font></div><div class=3D"gmail_default" =
style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity &lt;</font><=
/div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 T</font></div><div class=3D"gmail_default" style><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 , typename boost::mpl::transform=
&lt;</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, s=
ans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::plus&lt;</font><=
/div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 boost::mpl::=
placeholders::_1</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 , boost::mpl::placeholders::_2&gt; &gt;::type=C2=A0</font></div><div=
 class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 &gt;</font></div><div class=3D"gmail_default" style><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 operator* (quantity&lt;T, D1&gt; x, quantity &=
lt;T, D2&gt; y)</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_def=
ault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 typedef =
typename boost::mpl::transform&lt;</font></div><div class=3D"gmail_default"=
 style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2=
, boost::mpl::plus&lt;</font></div><div class=3D"gmail_default" style><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div><div class=3D"gm=
ail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placeholders::_2&gt=
; &gt;::type D;</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail=
_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 retu=
rn quantity&lt;T, D&gt; (x.value () * y.value ());</font></div><div class=
=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }<=
/font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-s=
erif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default" style><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D=
1, class D2&gt;</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity &lt;</font></div><div class=
=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 T</font></div><div class=3D"gmail_default" style><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 , typename boost::mpl::transform&lt;</font></d=
iv><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::minus&lt;</font></div><div cla=
ss=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 boost::mpl::placeholders::=
_1</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, san=
s-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 , boost::m=
pl::placeholders::_2&gt; &gt;::type=C2=A0</font></div><div class=3D"gmail_d=
efault" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 &gt;</font></=
div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 operator/ (quantity&lt;T, D1&gt; x, quantity &lt;T, D2&gt; y)=
</font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-=
serif">=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_default" style><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 typedef typename boost::m=
pl::transform&lt;</font></div><div class=3D"gmail_default" style><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::min=
us&lt;</font></div><div class=3D"gmail_default" style><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
 boost::mpl::placeholders::_1</font></div><div class=3D"gmail_default" styl=
e><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placeholders::_2&gt; &gt;::type D;</=
font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-se=
rif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default" style><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D=
&gt; (x.value () / y.value ());</font></div><div class=3D"gmail_default" st=
yle><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div><div clas=
s=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=
=C2=A0</font></div><div class=3D"gmail_default" style><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 // -- test</font></div><div class=3D"gmail_defau=
lt" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div=
><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 #include &lt;iostream&gt;</font></div><div class=3D"gmail_defaul=
t" style><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 #include &lt;limits&gt;</font></div><div class=3D"gmail_default"=
><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;cassert&gt;</=
font></div></div><div class=3D"gmail_default" style><font face=3D"tahoma, s=
ans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default" sty=
le><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 int main ()</font></div>=
<div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0 {</font></div><div class=3D"gmail_default" style><font face=3D"taho=
ma, sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, mass&gt; m (5.0f);<=
/font></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-s=
erif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, acceleration&gt; a(9.8f);</fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, force&gt; f =3D m * a;</font></d=
iv><div class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 quantity&lt;float, mass&gt; m2 =3D f / a;</font></div><di=
v class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0=C2=A0</font></div><div class=3D"gmail_default" style><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 assert ((std::abs ((m2 - m).value (=
))) &lt;=3D std::numeric_limits&lt;double&gt;::epsilon ());</font></div><di=
v class=3D"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0=C2=A0</font></div><div class=3D"gmail_default" style><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return 0;</font></div><div class=3D=
"gmail_default" style><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</fo=
nt></div><div class=3D"gmail_default" style><font face=3D"tahoma, sans-seri=
f"><br></font></div><div style=3D"font-family:tahoma,sans-serif"></div></di=
v></div>

--001a113b39dae814b305058cdd07--
