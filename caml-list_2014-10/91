Return-Path: <thomas.gazagnaire@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 6687D7EFCD
	for <caml-list@sympa.inria.fr>; Thu, 16 Oct 2014 20:11:01 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  thomas.gazagnaire@gmail.com) identity=pra;
  client-ip=74.125.82.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="thomas.gazagnaire@gmail.com";
  x-sender="thomas.gazagnaire@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  thomas.gazagnaire@gmail.com designates 74.125.82.52 as
  permitted sender) identity=mailfrom; client-ip=74.125.82.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="thomas.gazagnaire@gmail.com";
  x-sender="thomas.gazagnaire@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f52.google.com) identity=helo;
  client-ip=74.125.82.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="thomas.gazagnaire@gmail.com";
  x-sender="postmaster@mail-wg0-f52.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtgBAIoJQFRKfVI0lGdsb2JhbABbg2HLDoFuiGcWAREBAQEBBwsLCRIwhAMBAQMBEi4BOAEDAQsBBQU4DiETAQUBDg4GEyKICAMJCAQBCKlQbpAyiRcnDYZCAQEIAQEBAQEBFgEFDo4LhWiBHgWFFZEwhQGDfYV8h14DhGFBgWyDPWsBgkkBAQE
X-IPAS-Result: AtgBAIoJQFRKfVI0lGdsb2JhbABbg2HLDoFuiGcWAREBAQEBBwsLCRIwhAMBAQMBEi4BOAEDAQsBBQU4DiETAQUBDg4GEyKICAMJCAQBCKlQbpAyiRcnDYZCAQEIAQEBAQEBFgEFDo4LhWiBHgWFFZEwhQGDfYV8h14DhGFBgWyDPWsBgkkBAQE
X-IronPort-AV: E=Sophos;i="5.04,733,1406584800"; 
   d="scan'208,217";a="83524286"
Received: from mail-wg0-f52.google.com ([74.125.82.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Oct 2014 20:11:00 +0200
Received: by mail-wg0-f52.google.com with SMTP id a1so4348085wgh.23
        for <caml-list@inria.fr>; Thu, 16 Oct 2014 11:10:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:content-type:mime-version:subject:from:in-reply-to:date:cc
         :message-id:references:to;
        bh=3dL5dRJiRgHq0HgbLREfiKEf0xvTDHcoiXAZIDIQQsQ=;
        b=uo3WAp29oEMGD6SCnt4qylUSJyCo9EdcRPcBRVwJsdxEwCAB07w4Zl1C2XUy4tinqE
         5DDfFzQaQutWu3LNjaEZ6p+T8sNFiXHKeVuhTPfuzcop65CitMNbc17QZG3VByidyxjN
         GWOyOMOW51T6fUQRubsC1hF06Xa9WV6sKEXhdCNvwgfKsbiZos9LcW3cgeHQ+t8NqZ/Q
         hxG/7v69u8uVk801XCWsJDPn8rrnyr9+XI72dGxGY58awwG4LMHFIBgsYb8D5FM+qnv6
         D9XmMPUM1zhZesNW547xx1RiO9vWiMrkvtFt0ztU2xfi0cKyJTSVpC69oxoh3P0mhBrC
         3GAQ==
X-Received: by 10.180.218.136 with SMTP id pg8mr14400171wic.37.1413483059722;
        Thu, 16 Oct 2014 11:10:59 -0700 (PDT)
Received: from [192.168.0.2] (cpc25-cmbg14-2-0-cust121.5-4.cable.virginm.net. [213.106.112.122])
        by mx.google.com with ESMTPSA id ic4sm2819921wid.19.2014.10.16.11.10.57
        for <multiple recipients>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Thu, 16 Oct 2014 11:10:58 -0700 (PDT)
Sender: Thomas Gazagnaire <thomas.gazagnaire@gmail.com>
Content-Type: multipart/alternative; boundary="Apple-Mail=_E6E53CB7-9E97-40D1-BE88-7A816AD7E02E"
Mime-Version: 1.0 (Mac OS X Mail 7.3 \(1878.6\))
From: Thomas Gazagnaire <thomas@gazagnaire.org>
In-Reply-To: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
Date: Thu, 16 Oct 2014 19:10:56 +0100
Cc: "caml-list@inria.fr users" <caml-list@inria.fr>
Message-Id: <EB5D22A2-A852-49F2-B953-E7AF3F93BFF6@gazagnaire.org>
References: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
To: Shayne Fletcher <shayne.fletcher.50@gmail.com>
X-Mailer: Apple Mail (2.1878.6)
Subject: Re: [Caml-list] Dimensional Analysis question


--Apple-Mail=_E6E53CB7-9E97-40D1-BE88-7A816AD7E02E
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii

You might be interested by http://akabe.github.io/slap/

Thomas

On 16 Oct 2014, at 17:37, Shayne Fletcher <shayne.fletcher.50@gmail.com> wr=
ote:

> Dear OCamlers,
>=20
> In 1994, Barton and Nackman in their book 'Scientific Engineering in
> C++' [1] demonstrated how one could encode the rules of Dimensional
> Analysis [2] into the C++ type system enabling compile-time checking
> (no runtime-cost) of the plausibility (at least up to the dimensional
> correctness) of computations.
>=20
> In 2004, Abrahams & Gurtovy in 'C++ Template Metaprogramming' [3]
> showed the Barton Nackman technique to be elegantly implementable
> using compile time type sequences encoding integer constants. At the
> end of this post, I provide a complete listing of their example
> program [4].
>=20
> The key properties of the system (as I see it) are:
>   - Encoding of integers as types;=20
>   - Compile time manipulation of sequences of these integer encodings
>     to deduce/produce new derived types.
>=20
> Now, it is not immediately obvious to me how to approach this problem
> in OCaml. It irks me some that I can't immediately produce a yet more
> elegant OCaml program for this problem and leaves me feeling like C++
> has "got something over on us" here ;)
>=20
> My question therefore is: Does anyone have suggestions/pointers
> on how to approach automatic dimensional analysis via the OCaml type
> system?=20
>=20
> Best,
>=20
> --=20
> Shayne Fletcher
>=20
> [1] John J. Barton and Lee R. Nackman. Scientific and Engineering C++:
>     an Introduction with Advanced Techniques and Examples. Reading,
>     MA: Addison Wesley. ISBN 0-201-53393-6. 1994.
>=20
> [2] Wikipedia http://en.wikipedia.org/wiki/Dimensional_analysis
>=20
> [3] David Abrahams and Aleksey Gurtovy C++ Template Metaprogramming:
>     Concepts, Tools, and Techniques from Boost and Beyond (C++ in
>     Depth Series), Addison-Wesley Professional. ISBN:0321227255. 2004.
>=20
> [4] Code listing:
>=20
>     //"c:/program files (x86)/Microsoft Visual Studio 10.0/vc/vcvarsall.b=
at" x64
>     //cl /Fedimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp
>=20=20=20=20=20
>     #include <boost/mpl/vector_c.hpp>
>     #include <boost/mpl/transform.hpp>
>     #include <boost/mpl/placeholders.hpp>
>     #include <boost/mpl/equal.hpp>
>     #include <boost/mpl/plus.hpp>
>     #include <boost/mpl/minus.hpp>
>     #include <boost/static_assert.hpp>
>=20=20=20=20=20
>     typedef boost::mpl::vector_c<int,1,0,0,0,0,0,0> mass;
>     typedef boost::mpl::vector_c<int,0,1,0,0,0,0,0> length;
>     typedef boost::mpl::vector_c<int,0,0,1,0,0,0,0> time;
>     typedef boost::mpl::vector_c<int,0,0,0,1,0,0,0> charge;
>     typedef boost::mpl::vector_c<int,0,0,0,0,1,0,0> temperature;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,1,0> intensity;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,1> angle;
>     typedef boost::mpl::vector_c<int,0,1,-1,0,0,0,0> velocity;     // l/t
>     typedef boost::mpl::vector_c<int,0,1,-2,0,0,0,0> acceleration; // l/(=
t2)
>     typedef boost::mpl::vector_c<int,1,1,-1,0,0,0,0> momentum;     // ml/t
>     typedef boost::mpl::vector_c<int,1,1,-2,0,0,0,0> force;        // ml/=
(t2)
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,0> scalar;
>=20=20=20=20=20
>     template <class T, class Dimensions>
>     class quantity
>     {
>     public:
>       explicit quantity (T val)=20
>         : val (val)
>       {}
>       template <class OtherDimensions>
>       quantity (quantity<T, OtherDimensions> const& other)
>         : val (other.value ()) {
>         BOOST_MPL_ASSERT( (boost::mpl::equal<Dimensions, OtherDimensions>=
));
>       }
>       T value () const { return val; }
>     private:
>       T val;
>     };
>=20=20=20=20=20
>     template <class T, class D>
>     quantity<T, D>
>     operator + (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () + y.value ());
>     }
>=20=20=20=20=20
>     template <class T, class D>
>     quantity<T, D>
>     operator - (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () - y.value ());
>     }
>=20=20=20=20=20
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type=20
>     >
>     operator* (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>=20=20=20=20=20
>       return quantity<T, D> (x.value () * y.value ());
>     }
>=20=20=20=20=20
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type=20
>     >
>     operator/ (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>=20=20=20=20=20
>       return quantity<T, D> (x.value () / y.value ());
>     }
>=20=20=20=20=20
>     // -- test
>=20=20=20=20=20
>     #include <iostream>
>     #include <limits>
>     #include <cassert>
>=20=20=20=20=20
>     int main ()
>     {
>       quantity<float, mass> m (5.0f);
>       quantity<float, acceleration> a(9.8f);
>       quantity<float, force> f =3D m * a;
>       quantity<float, mass> m2 =3D f / a;
>=20=20=20=20=20
>       assert ((std::abs ((m2 - m).value ())) <=3D std::numeric_limits<dou=
ble>::epsilon ());
>=20=20=20=20=20
>       return 0;
>     }
>=20


--Apple-Mail=_E6E53CB7-9E97-40D1-BE88-7A816AD7E02E
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=us-ascii

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dus-ascii"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-mode=
: space; -webkit-line-break: after-white-space;">You might be interested by=
&nbsp;<a href=3D"http://akabe.github.io/slap/">http://akabe.github.io/slap/=
</a><div><br></div><div>Thomas</div><div><br><div><div>On 16 Oct 2014, at 1=
7:37, Shayne Fletcher &lt;<a href=3D"mailto:shayne.fletcher.50@gmail.com">s=
hayne.fletcher.50@gmail.com</a>&gt; wrote:</div><br class=3D"Apple-intercha=
nge-newline"><blockquote type=3D"cite"><div dir=3D"ltr"><div class=3D"gmail=
_default" style=3D""><div class=3D"gmail_default" style=3D""><font face=3D"=
tahoma, sans-serif">Dear OCamlers,</font></div><div class=3D"gmail_default"=
 style=3D""><font face=3D"tahoma, sans-serif"><br></font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">In 1994, Ba=
rton and Nackman in their book 'Scientific Engineering in</font></div><div =
class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">C++' [=
1]&nbsp;demonstrated&nbsp;how one could encode the rules of Dimensional</fo=
nt></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans=
-serif">Analysis [2] into the C++ type system enabling compile-time checkin=
g</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma,=
 sans-serif">(no runtime-cost) of the&nbsp;plausibility&nbsp;(at least up t=
o the dimensional</font></div><div class=3D"gmail_default" style=3D""><font=
 face=3D"tahoma, sans-serif">correctness) of computations.</font></div><div=
 class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif"><br><=
/font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, s=
ans-serif">In 2004, Abrahams &amp; Gurtovy in 'C++ Template Metaprogramming=
' [3]</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tah=
oma, sans-serif">showed the Barton Nackman technique to be elegantly implem=
entable</font></div><div class=3D"gmail_default" style=3D""><font face=3D"t=
ahoma, sans-serif">using compile time type sequences encoding integer const=
ants. At the</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">end of this post, I provide a complete listing of t=
heir example</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">program [4].</font></div><div class=3D"gmail_defaul=
t" style=3D""><font face=3D"tahoma, sans-serif"><br></font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">The key pro=
perties of the system (as I see it) are:</font></div><div class=3D"gmail_de=
fault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; - Encoding of in=
tegers as types;&nbsp;</font></div><div class=3D"gmail_default" style=3D"">=
<font face=3D"tahoma, sans-serif">&nbsp; - Compile time manipulation of seq=
uences of these integer encodings</font></div><div class=3D"gmail_default" =
style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; to deduce/produc=
e new derived types.</font></div><div class=3D"gmail_default" style=3D""><f=
ont face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_defaul=
t" style=3D""><font face=3D"tahoma, sans-serif">Now, it is not immediately =
obvious to me how to approach this problem</font></div><div class=3D"gmail_=
default" style=3D""><font face=3D"tahoma, sans-serif">in OCaml. It irks me =
some that I can't immediately produce a yet more</font></div><div class=3D"=
gmail_default" style=3D""><font face=3D"tahoma, sans-serif">elegant OCaml p=
rogram for this problem and leaves me feeling like C++</font></div><div cla=
ss=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">has "got =
something over on us" here ;)</font></div><div class=3D"gmail_default" styl=
e=3D""><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif">My question theref=
ore is: Does anyone have suggestions/pointers</font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif">on how to approach=
 automatic dimensional analysis via the OCaml type</font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">system?&nbs=
p;</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma=
, sans-serif"><br></font></div><div class=3D"gmail_default" style=3D""><fon=
t face=3D"tahoma, sans-serif">Best,</font></div><div class=3D"gmail_default=
" style=3D""><div><br></div>--&nbsp;<br>Shayne Fletcher<br></div><div class=
=3D"gmail_default" style=3D""><br></div><div class=3D"gmail_default" style=
=3D""><font face=3D"tahoma, sans-serif">[1] John J. Barton and Lee R. Nackm=
an. Scientific and Engineering C++:</font></div><div class=3D"gmail_default=
" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; an Introductio=
n with Advanced Techniques and Examples. Reading,</font></div><div class=3D=
"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; =
MA: Addison Wesley. ISBN 0-201-53393-6. 1994.</font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif"><br></font></div><=
div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">[2=
] Wikipedia <a href=3D"http://en.wikipedia.org/wiki/Dimensional_analysis">h=
ttp://en.wikipedia.org/wiki/Dimensional_analysis</a></font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif"><br></font>=
</div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-se=
rif">[3] David Abrahams and Aleksey Gurtovy C++ Template Metaprogramming:</=
font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sa=
ns-serif">&nbsp; &nbsp; Concepts, Tools, and Techniques from Boost and Beyo=
nd (C++ in</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; Depth Series), Addison-Wesley Profess=
ional. ISBN:0321227255. 2004.</font></div><div class=3D"gmail_default" styl=
e=3D""><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif">[4] Code listing:<=
/font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, s=
ans-serif"><br></font></div><div class=3D"gmail_default" style=3D""><font f=
ace=3D"tahoma, sans-serif">&nbsp; &nbsp; //"c:/program files (x86)/Microsof=
t Visual Studio 10.0/vc/vcvarsall.bat" x64</font></div><div class=3D"gmail_=
default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; //cl /F=
edimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp</font></div><div clas=
s=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nb=
sp;&nbsp;</font></div><div class=3D"gmail_default" style=3D""><font face=3D=
"tahoma, sans-serif">&nbsp; &nbsp; #include &lt;boost/mpl/vector_c.hpp&gt;<=
/font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, s=
ans-serif">&nbsp; &nbsp; #include &lt;boost/mpl/transform.hpp&gt;</font></d=
iv><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif=
">&nbsp; &nbsp; #include &lt;boost/mpl/placeholders.hpp&gt;</font></div><di=
v class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbs=
p; &nbsp; #include &lt;boost/mpl/equal.hpp&gt;</font></div><div class=3D"gm=
ail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; #in=
clude &lt;boost/mpl/plus.hpp&gt;</font></div><div class=3D"gmail_default" s=
tyle=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; #include &lt;boos=
t/mpl/minus.hpp&gt;</font></div><div class=3D"gmail_default" style=3D""><fo=
nt face=3D"tahoma, sans-serif">&nbsp; &nbsp; #include &lt;boost/static_asse=
rt.hpp&gt;</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail=
_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; typede=
f boost::mpl::vector_c&lt;int,1,0,0,0,0,0,0&gt; mass;</font></div><div clas=
s=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nb=
sp; typedef boost::mpl::vector_c&lt;int,0,1,0,0,0,0,0&gt; length;</font></d=
iv><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif=
">&nbsp; &nbsp; typedef boost::mpl::vector_c&lt;int,0,0,1,0,0,0,0&gt; time;=
</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, =
sans-serif">&nbsp; &nbsp; typedef boost::mpl::vector_c&lt;int,0,0,0,1,0,0,0=
&gt; charge;</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; typedef boost::mpl::vector_c&lt;int,0=
,0,0,0,1,0,0&gt; temperature;</font></div><div class=3D"gmail_default" styl=
e=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; typedef boost::mpl::=
vector_c&lt;int,0,0,0,0,0,1,0&gt; intensity;</font></div><div class=3D"gmai=
l_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; typed=
ef boost::mpl::vector_c&lt;int,0,0,0,0,0,0,1&gt; angle;</font></div><div cl=
ass=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &=
nbsp; typedef boost::mpl::vector_c&lt;int,0,1,-1,0,0,0,0&gt; velocity; &nbs=
p; &nbsp; // l/t</font></div><div class=3D"gmail_default" style=3D""><font =
face=3D"tahoma, sans-serif">&nbsp; &nbsp; typedef boost::mpl::vector_c&lt;i=
nt,0,1,-2,0,0,0,0&gt; acceleration; // l/(t2)</font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; type=
def boost::mpl::vector_c&lt;int,1,1,-1,0,0,0,0&gt; momentum; &nbsp; &nbsp; =
// ml/t</font></div><div class=3D"gmail_default" style=3D""><font face=3D"t=
ahoma, sans-serif">&nbsp; &nbsp; typedef boost::mpl::vector_c&lt;int,1,1,-2=
,0,0,0,0&gt; force; &nbsp; &nbsp; &nbsp; &nbsp;// ml/(t2)</font></div><div =
class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp;=
 &nbsp; typedef boost::mpl::vector_c&lt;int,0,0,0,0,0,0,0&gt; scalar;</font=
></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-s=
erif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail_default" style=3D=
""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; template &lt;class T, cl=
ass Dimensions&gt;</font></div><div class=3D"gmail_default" style=3D""><fon=
t face=3D"tahoma, sans-serif">&nbsp; &nbsp; class quantity</font></div><div=
 class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp=
; &nbsp; {</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; public:</font></div><div class=3D"gma=
il_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbs=
p; explicit quantity (T val)&nbsp;</font></div><div class=3D"gmail_default"=
 style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; :=
 val (val)</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; {}</font></div><div class=3D"g=
mail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &n=
bsp; template &lt;class OtherDimensions&gt;</font></div><div class=3D"gmail=
_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp;=
 quantity (quantity&lt;T, OtherDimensions&gt; const&amp; other)</font></div=
><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">=
&nbsp; &nbsp; &nbsp; &nbsp; : val (other.value ()) {</font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbs=
p; &nbsp; &nbsp; BOOST_MPL_ASSERT( (boost::mpl::equal&lt;Dimensions, OtherD=
imensions&gt;));</font></div><div class=3D"gmail_default" style=3D""><font =
face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; }</font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbs=
p; &nbsp; T value () const { return val; }</font></div><div class=3D"gmail_=
default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; private=
:</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma,=
 sans-serif">&nbsp; &nbsp; &nbsp; T val;</font></div><div class=3D"gmail_de=
fault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; };</font>=
</div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-se=
rif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail_default" style=3D"=
"><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; template &lt;class T, cla=
ss D&gt;</font></div><div class=3D"gmail_default" style=3D""><font face=3D"=
tahoma, sans-serif">&nbsp; &nbsp; quantity&lt;T, D&gt;</font></div><div cla=
ss=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &n=
bsp; operator + (quantity&lt;T, D&gt; x, quantity&lt;T, D&gt; y )</font></d=
iv><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif=
">&nbsp; &nbsp; {</font></div><div class=3D"gmail_default" style=3D""><font=
 face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; return quantity&lt;T, D&g=
t;(x.value () + y.value ());</font></div><div class=3D"gmail_default" style=
=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; }</font></div><div cl=
ass=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &=
nbsp;&nbsp;</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; template &lt;class T, class D&gt;</fo=
nt></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans=
-serif">&nbsp; &nbsp; quantity&lt;T, D&gt;</font></div><div class=3D"gmail_=
default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; operato=
r - (quantity&lt;T, D&gt; x, quantity&lt;T, D&gt; y )</font></div><div clas=
s=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nb=
sp; {</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tah=
oma, sans-serif">&nbsp; &nbsp; &nbsp; return quantity&lt;T, D&gt;(x.value (=
) - y.value ());</font></div><div class=3D"gmail_default" style=3D""><font =
face=3D"tahoma, sans-serif">&nbsp; &nbsp; }</font></div><div class=3D"gmail=
_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;<=
/font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, s=
ans-serif">&nbsp; &nbsp; template &lt;class T, class D1, class D2&gt;</font=
></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-s=
erif">&nbsp; &nbsp; quantity &lt;</font></div><div class=3D"gmail_default" =
style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; T</font><=
/div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-ser=
if">&nbsp; &nbsp; , typename boost::mpl::transform&lt;</font></div><div cla=
ss=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &n=
bsp; &nbsp; &nbsp; D1, D2, boost::mpl::plus&lt;</font></div><div class=3D"g=
mail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &n=
bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; boost::mpl::placeholders::_1=
</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, =
sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , boost=
::mpl::placeholders::_2&gt; &gt;::type&nbsp;</font></div><div class=3D"gmai=
l_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &gt;<=
/font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, s=
ans-serif">&nbsp; &nbsp; operator* (quantity&lt;T, D1&gt; x, quantity &lt;T=
, D2&gt; y)</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; {</font></div><div class=3D"gmail_def=
ault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; typ=
edef typename boost::mpl::transform&lt;</font></div><div class=3D"gmail_def=
ault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nb=
sp; D1, D2, boost::mpl::plus&lt;</font></div><div class=3D"gmail_default" s=
tyle=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp; &nbsp; &nbsp; boost::mpl::placeholders::_1</font></div><d=
iv class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nb=
sp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , boost::mpl::p=
laceholders::_2&gt; &gt;::type D;</font></div><div class=3D"gmail_default" =
style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></di=
v><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif"=
>&nbsp; &nbsp; &nbsp; return quantity&lt;T, D&gt; (x.value () * y.value ())=
;</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma,=
 sans-serif">&nbsp; &nbsp; }</font></div><div class=3D"gmail_default" style=
=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><di=
v class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbs=
p; &nbsp; template &lt;class T, class D1, class D2&gt;</font></div><div cla=
ss=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &n=
bsp; quantity &lt;</font></div><div class=3D"gmail_default" style=3D""><fon=
t face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; T</font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbs=
p; , typename boost::mpl::transform&lt;</font></div><div class=3D"gmail_def=
ault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nb=
sp; D1, D2, boost::mpl::minus&lt;</font></div><div class=3D"gmail_default" =
style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; &n=
bsp; &nbsp; &nbsp; &nbsp; &nbsp; boost::mpl::placeholders::_1</font></div><=
div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&n=
bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , boost::mpl::placeho=
lders::_2&gt; &gt;::type&nbsp;</font></div><div class=3D"gmail_default" sty=
le=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &gt;</font></div><d=
iv class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nb=
sp; &nbsp; operator/ (quantity&lt;T, D1&gt; x, quantity &lt;T, D2&gt; y)</f=
ont></div><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, san=
s-serif">&nbsp; &nbsp; {</font></div><div class=3D"gmail_default" style=3D"=
"><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; typedef typename b=
oost::mpl::transform&lt;</font></div><div class=3D"gmail_default" style=3D"=
"><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; D1, D2, boo=
st::mpl::minus&lt;</font></div><div class=3D"gmail_default" style=3D""><fon=
t face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp; boost::mpl::placeholders::_1</font></div><div class=3D"gm=
ail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , boost::mpl::placeholders::_=
2&gt; &gt;::type D;</font></div><div class=3D"gmail_default" style=3D""><fo=
nt face=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=
=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbs=
p; &nbsp; return quantity&lt;T, D&gt; (x.value () / y.value ());</font></di=
v><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif"=
>&nbsp; &nbsp; }</font></div><div class=3D"gmail_default" style=3D""><font =
face=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"g=
mail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; //=
 -- test</font></div><div class=3D"gmail_default" style=3D""><font face=3D"=
tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail_def=
ault" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; #include &=
lt;iostream&gt;</font></div><div class=3D"gmail_default" style=3D""><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; #incl=
ude &lt;limits&gt;</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif">&nbsp; &nbsp; #include &lt;cassert&gt;</font></div></div=
><div class=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">=
&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail_default" style=3D""><fo=
nt face=3D"tahoma, sans-serif">&nbsp; &nbsp; int main ()</font></div><div c=
lass=3D"gmail_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; =
&nbsp; {</font></div><div class=3D"gmail_default" style=3D""><font face=3D"=
tahoma, sans-serif">&nbsp; &nbsp; &nbsp; quantity&lt;float, mass&gt; m (5.0=
f);</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahom=
a, sans-serif">&nbsp; &nbsp; &nbsp; quantity&lt;float, acceleration&gt; a(9=
.8f);</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tah=
oma, sans-serif">&nbsp; &nbsp; &nbsp; quantity&lt;float, force&gt; f =3D m =
* a;</font></div><div class=3D"gmail_default" style=3D""><font face=3D"taho=
ma, sans-serif">&nbsp; &nbsp; &nbsp; quantity&lt;float, mass&gt; m2 =3D f /=
 a;</font></div><div class=3D"gmail_default" style=3D""><font face=3D"tahom=
a, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail_default"=
 style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp; assert (=
(std::abs ((m2 - m).value ())) &lt;=3D std::numeric_limits&lt;double&gt;::e=
psilon ());</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp;&nbsp;</font></div><div class=3D"gmail=
_default" style=3D""><font face=3D"tahoma, sans-serif">&nbsp; &nbsp; &nbsp;=
 return 0;</font></div><div class=3D"gmail_default" style=3D""><font face=
=3D"tahoma, sans-serif">&nbsp; &nbsp; }</font></div><div class=3D"gmail_def=
ault" style=3D""><font face=3D"tahoma, sans-serif"><br></font></div><div st=
yle=3D"font-family:tahoma,sans-serif"></div></div></div>
</blockquote></div><br></div></body></html>=

--Apple-Mail=_E6E53CB7-9E97-40D1-BE88-7A816AD7E02E--
