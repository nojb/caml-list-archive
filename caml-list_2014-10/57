Return-Path: <jdimino@janestreet.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 3F23A7F057
	for <caml-list@sympa.inria.fr>; Mon, 13 Oct 2014 13:49:30 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jdimino@janestreet.com) identity=pra;
  client-ip=38.105.200.233;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jdimino@janestreet.com";
  x-sender="jdimino@janestreet.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  jdimino@janestreet.com designates 38.105.200.233 as permitted
  sender) identity=mailfrom; client-ip=38.105.200.233;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jdimino@janestreet.com";
  x-sender="jdimino@janestreet.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mxout4.mail.janestreet.com) identity=helo;
  client-ip=38.105.200.233;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jdimino@janestreet.com";
  x-sender="postmaster@mxout4.mail.janestreet.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Al0BAAG8O1QmacjpnGdsb2JhbABbg2FYBIMCuF2NVYFjAQmHTYEYBxYBEQEBAQEBBhYJQoQbCAkEGQEBOBgNNwIkEgEFASIBCSuIHAMKkkKQL26KOHiFAgEFj3cBAQgBAQEBAQEBFQYKj3k+gkEPMhKBQodvh3WGXIcQgS6GODuEO4IfhSQYKYMvIIFaawEBgQaBQgEBAQ
X-IPAS-Result: Al0BAAG8O1QmacjpnGdsb2JhbABbg2FYBIMCuF2NVYFjAQmHTYEYBxYBEQEBAQEBBhYJQoQbCAkEGQEBOBgNNwIkEgEFASIBCSuIHAMKkkKQL26KOHiFAgEFj3cBAQgBAQEBAQEBFQYKj3k+gkEPMhKBQodvh3WGXIcQgS6GODuEO4IfhSQYKYMvIIFaawEBgQaBQgEBAQ
X-IronPort-AV: E=Sophos;i="5.04,709,1406584800"; 
   d="scan'208";a="100848433"
Received: from mxout4.mail.janestreet.com ([38.105.200.233])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 13 Oct 2014 13:49:26 +0200
Received: from tot-oib-smtp1.delacy.com ([172.27.22.15] helo=tot-smtp)
	by mxout4.mail.janestreet.com with esmtps (UNKNOWN:DHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.82)
	(envelope-from <jdimino@janestreet.com>)
	id 1Xde7x-00045P-Ks
	for caml-list@inria.fr; Mon, 13 Oct 2014 07:49:25 -0400
Received: from [172.27.229.230] (helo=mxgoog1.mail.janestreet.com)
	by tot-smtp with esmtps (UNKNOWN:AES256-GCM-SHA384:256)
	(Exim 4.72)
	(envelope-from <jdimino@janestreet.com>)
	id 1Xde7x-0006SY-I1
	for caml-list@inria.fr; Mon, 13 Oct 2014 07:49:25 -0400
Received: from mail-ig0-f176.google.com ([209.85.213.176])
	by mxgoog1.mail.janestreet.com with esmtps (TLSv1:RC4-SHA:128)
	(Exim 4.72)
	(envelope-from <jdimino@janestreet.com>)
	id 1Xde7x-00079N-DV
	for caml-list@inria.fr; Mon, 13 Oct 2014 07:49:25 -0400
Received: by mail-ig0-f176.google.com with SMTP id hn15so10032187igb.9
        for <caml-list@inria.fr>; Mon, 13 Oct 2014 04:49:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=janestreet.com; s=google;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=kSpcuhHG0JbfgTsonYL9xv6BhMW3hBSMK1MvoWD1GM4=;
        b=10uEYbl/NUWMVw3sxYPb6ubg9CSnpbfEmBvRszCHcssyx9KN+oBiUWxbFOsXWKQUEL
         NctFAIgkIstfheuGgjw5ad7NlvbeIuc7/5qbTvS23jbLhmvzve0YBRiI1HHARaJZBCtc
         ephPQFdWediEBp8odby9QpPetpD9w+EZtQpQU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:date:message-id:subject:from:to
         :content-type;
        bh=kSpcuhHG0JbfgTsonYL9xv6BhMW3hBSMK1MvoWD1GM4=;
        b=fkeSGW/9/BRZFmAJTsLzlKINZeEq1eChFW2wSUNs1CWB9COe0syrTVQSM0LUWTBPxe
         XF0bYy2XQE9ATAOLCSsYPRNbhVJMP/hrRBINqQlO5wH6Z8NCQqDDGs1TZRKjEx+ZOcin
         7CX8y6QXJnllV/FMLMxKcnlTXvjkFAOchoVASDS0FqKXDkMyretPcozOdR2jbefa0u+I
         I7ZgmVN6bIjGRmXqiez27Ju0YmCk31tYxKC/Q3GeaYiQO/4UIbC2/BJdUo58vzLjyZ6d
         Rq1uAD0pXLY66YKP8GiEcJlbeA5Qc0Ytas4YVlucq9hyFykCzhC+5BGm4o6j3dAkLeS9
         XnEw==
X-Gm-Message-State: ALoCoQmPCWtac4vDLpgj/vMWDlJQYNFDt4/mAh5tYQhqGRt5QzI6/Dp0c2StJs9y/Tketo8M2JRtUHbMv3gTXHMNsTpiw+VGj9HOhYfEgF31SJEtmszatF0Ohcfjz0exKEdavhPFJJ/a
X-Received: by 10.42.23.16 with SMTP id q16mr36765975icb.0.1413200965032;
        Mon, 13 Oct 2014 04:49:25 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.42.23.16 with SMTP id q16mr36765953icb.0.1413200964866; Mon,
 13 Oct 2014 04:49:24 -0700 (PDT)
Received: by 10.50.50.70 with HTTP; Mon, 13 Oct 2014 04:49:24 -0700 (PDT)
Date: Mon, 13 Oct 2014 12:49:24 +0100
Message-ID: <CANhEzE5n6cjHgaRNPZxi7=rfW+mKCjYvJtWwtYv7srLPz2HSRA@mail.gmail.com>
From: Jeremie Dimino <jdimino@janestreet.com>
To: "ocaml-core@googlegroups.com" <ocaml-core@googlegroups.com>, "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=20cf301cbf3881f79805054c7d8e
Subject: [Caml-list] [ANN] Core Suite 112.01.00 + rpc_parallel

--20cf301cbf3881f79805054c7d8e
Content-Type: text/plain; charset=UTF-8

I am pleased to announce the 112.01.00 release of the Core suite.
Starting with this releases core packages require OCaml 4.02.

We are also releasing a new package: rpc_parallel. From the package
description:

  Rpc_parallel offers an API to define various workers and protocols,
  spawn workers as separate processes, and communicate with them using
  Async Rpc.

The following packages were upgraded:

- async
- async_extended
- async_extra
- async_kernel
- async_unix
- bignum
- bin_prot
- core_bench
- core
- core_extended
- core_kernel
- custom_printf
- jenga
- ocaml_plugin
- rpc_parallel
- sexplib
- textutils
- type_conv

Files for this release are available on our website and all packages
are in opam:

  https://ocaml.janestreet.com/ocaml-core/112.01.00/individual/

Unfortunately the documentation is not there yet due to opam-doc not
working with 4.02.

Here is list of changes for this version:

# 112.01.00

## async

- update tests

## async_extended

- Clarified an error in `Rpc_proxy`.

## async_extra

- Changed `Persistent_rpc_client.connected` to avoid returning a
  connection that is closed at the time it was called.
- Optimized `Rpc.implement` so that if a server's implementation
  returns a determined deferred, then the output is immediately
  serialized and written out for the client.

  This reduces memory consumption, improves throughput and latency.
  Measurements with the `pipe_rpc_test program` showed that a server
  went from processing 600\_000 msg/sec, to 2\_200\_000 msg/sec before
  pegging the CPU.
- Changed `Log`'s output processor's batch size from `1_000` to `100`.
- Added `Persistent_rpc_client.close` and `close_finished`.
- In `Rpc.Connection.client` and `with_client`, used the
  `handshake_timeout` as the `timeout` passed to `Tcp.connect`.

  `handshake_timeout` was previously used only for the `Rpc` module's
  handshake timeout.
- Changed `Rpc.create`'s `on_unknown_rpc` argument, renaming
  `\`Ignore` as `\`Close_connection`, and requiring `\`Call` to return
  `\`Close_connection` or `\`Continue`.

  `\`Ignore` was renamed because it was a poor name, since in fact it
  closed the connection.

  Added a `\`Continue` option, whic allows one to keep the connection
  open.

  Changed `\`Call` to return `\`Continue` or `\`Close_connection`,
  where the old `unit` return value meant `\`Close_connection`.
- In `Versioned_typed_tcp`, enabled the use of "credentials" in the
  "Hello" message.

  Propagate credentials to the user code when it arrives on the wire.

## async_kernel

- Optimized `Monitor.try_with ~run:\`Now f` to return a determined
  deferred if `f ()` returns a determined deferred.

  Previously, `Monitor.try_with ~run:\`Now f` always introduced a
  `Deferred.map`, which made it impossible to do some optimizations
  that bypass the scheduler overhead.
- Added an `ASYNC_CONFIG` field that causes the program to dump core
  if Async jobs are delayed too much.

  The new field is `dump_core_on_job_delay`.
- Switched `Async_kernel` from using `Core.Sys` to `Pervasives.Sys`
  eliminating one of the dependencies on `Core`.

## async_unix

- Changed `Writer.transfer write pipe` to close `pipe` when the
  `writer`, is closed.

  Previously, `Writer.transfer` did not close the pipe when the
  underlying writer is closed.  This was strange because:

  1. Callers would have to consistently check for the writer being
     closed and close the `Pipe.Reader`t= themselves
  2. The analogous function `Pipe.transfer` closes the reader on
     similar circumstances.

  The absence of the close was noticed as a bug in `Rpc`, which
  assumed that `Writer.transfer` did the close.
- Fixed a bug in `Scheduler.yield` that caused it to pause for 50ms if
  there is no other pending work and no I/O.
- Exposed type equivalence between `Unix.Passwd.t` and
  `Core.Std.Unix.Passwd.t`.
- Changed `Writer.write_bin_prot` to use the new
  `Bigstring.write_bin_prot`.

## bignum

- Added `Bignum.Bigint` module, with arbitrary-precision integers
  based on `Zarith`, which is significantly faster than the
  `Num.Big_int` library.

## bin_prot

- In `Write`, improved some OCaml macros to name values and avoid
  calling C functions multiple times.

## core

- Removed vestigial code supporting OCaml 4.00.
- Added `Command` support for flags that are passed one or more times.

  Added `Command.Spec.one_or_more` and
  `Command.Spec.non_empty_sequence` to deal with the cases where you
  expect a flag or anonymous argument (respectively) to be passed one
  or (optionally) more times.  This is common enough and distinct from
  the case where you want the argument passed zero or more times that
  it seems like we should canonize it in the library.
- In `Lock_file`, made stale lock detection more robust.

  Made `Lock_file.create foo` succeed if `foo` is absent and
  `foo.nfs_lock` file is present and stale.  Previously, it would
  fail.
- Removed `Syslog.syslog`'s `add_stderr` argument; use the `PERROR`
  option instead.
- Fixed `unix_stubs.c` compilation on NetBSD

  Closes #45
- Added `Filename` operators `/^` and `/@`, and `of_parts`, like the
  same functions for Catalog paths.
- Changed `Iobuf` functions that advance the iobuf to not also return
  a redundant number of bytes processed.

  This avoids a small allocation (in the case of the `int option`
  functions) and normalizes the result (so the same information isn't
  returned two ways).  Actually, it doesn't yet avoid the allocation in
  the implementation, as the corresponding `Bigstring` functions must
  still return the number of bytes processed, and currently do so as an
  option.  We hope to eventually change that.

  In the future I expect we will change `unit` to some `error` variant
  to also avoid the exception construction for `EWOULDBLOCK/EAGAIN`.  We
  can even make Unix syscalls `noalloc` if we're careful.
- In `Unix` module, added unit tests for `Cidr.does_match`.

## core_bench

- fixed legacy format string

## core_extended

- Added `Float_ref` module, which is like `float ref` but faster for
  sets due to bypassing the write barrier.

  Benchmark results on Sandy Bridge:

  | [float\_ref.ml:] float ref set  |    2\_886.94ns |   8.00w |
 |
  | [float\_ref.ml:] Float\_ref.set |       355.76ns |   6.00w |
 |
  | [float\_ref.ml:] float ref get  |       415.52ns |   6.00w |
 |
  | [float\_ref.ml:] Float_ref.get  |       416.19ns |   6.00w |
 |
- Added `Bin_io_utils.Wrapped.t`, which defines an `'a t with bin_io`
  that supports size-prefixed serialization and deserialization.

  `Wrapped` has two useful submodules, `Opaque` and `Ignored`, for
  efficient handling of size-prefixed bin-io values in cases where
  serialization can be bypassed.  See the comments in the module for
  more details.

## core_kernel

- Removed vestigial code supporting OCaml 4.00.
- Used `{Hashable,Comparable}.S_binable` in `Day_of_week` and `Month`.
- Improved the performance of `Set_once.set`.
- Added `Type_equal.Lift3` functor.
- Replaced occurrences of `Obj.magic 0` with `Obj.magic None`.

  With the former the compiler might think the destination type is
  always an integer and instruct the GC to ignore references to such
  values.  The latter doesn't have this problem as options are not
  always integers.
- Made `String_id.of_string` faster.
- Added `Bigstring` functions for reading and writing the
  size-prefixed bin-io format.

  - `bin_prot_size_header_length`
  - `write_bin_prot`
  - `read_bin_prot`
  - `read_bin_prot_verbose_errors`
- Added `{Info,Error}.to_string_mach` which produces a single-line
  sexp from an `Error.t`.
- Added `{Info,Error}.createf`, for creation from a format string.
- Added new `Perms` module with phantom types for managing access
  control.

  This module supersedes the `read_only`, `read_write`, and
  `immutable` phantom types, which are now deprecated, and will be
  removed in the future.  This module uses a different approach using
  sets of polymorphic variants as capabilities, and contravariant
  subtyping to express dropping capabilities.

  This approach fixes a bug with the current phantom types used for
  `Ref.Permissioned` in which `immutable` types aren't guaranteed to
  be immutable:

  ```ocaml
  let r = Ref.Permissioned.create 0
  let r_immutable = (r :  (int, immutable) Ref.Permissioned.t)
  let () = assert (Ref.Permissioned.get r_immutable = 0)
  let () = Ref.Permissioned.set r 1
  let () = assert (Ref.Permissioned.get r_immutable = 1)
  ```

  The bug stems from the fact that the phantom-type parameter is
  covariant, which allows OCaml's relaxed value restriction to kick
  in, which allows one to create a polymorphic value, which can then
  be viewed as both immutable and read write.  Here's a small
  standalone example to demonstrate:

  ```ocaml
  module F (M : sig
              type +'z t
              val create : int -> _ t
              val get : _ t -> int
              val set : read_write t -> int -> unit
            end) : sig
    val t : _ M.t
  end = struct
    let t = M.create 0
    let t_immutable = (t :  immutable M.t)
    let () =
      assert (M.get t_immutable = 0);
      M.set t 1;
      assert (M.get t_immutable = 1);
    ;;
  end
  ```

  The new approach fixes the problem by making the phantom-type
  parameter contravariant, and using polymorphic variants as
  capabilities to represent what operations are allowed.
  Contravariance allows one to drop capabilities, but not add them.
- Added `Int.Hex` module, which has hexadecimal sexp/string
  conversions.
- Added `Gc.major_plus_minor_words`, for performance reasons.

## custom_printf

- Fixed uses of `printf=-style`format strings that have unspecified
  behavior in OCaml 4.02 and will become errors.
- Support substitution in format string (lost with 4.02 compatibility)

## jenga

- Don't show noisy `glob..changed` messages except with
`-show-glob-changed` flag.
- Support shared build rules via `${jenga}/share`.
- Detect cycle in dep scheme instead of hanging.
- Made standalone actions atomic, just like actions associated with
  target files.

  Running actions and recording the result in the persistent
  `.jenga.db` should be performed atomically for standalone actions,
  as it is for actions which are associated with target files

## ocaml_plugin

- Changed to not use `rm -r` when it is expected to remove one file.

## rpc_parallel

Initial import.

## sexplib

- Replaced occurrences of `Obj.magic 0` with `Obj.magic None`.

  With the former the compiler might think the destination type is
  always an integer and instruct the GC to ignore references to such
  values.  The latter doesn't have this problem as options are not
  always integers.

## textutils

- Added `Ascii_table.Table_char`, to expose the special table border
  characters.

## type_conv

- Updated ast matching for 4.02

-- 
Jeremie Dimino, for the Core team

--20cf301cbf3881f79805054c7d8e
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>I am pleased to announce the 112.01.00 release of the=
 Core suite.</div><div>Starting with this releases core packages require OC=
aml 4.02.</div><div><br></div><div>We are also releasing a new package: rpc=
_parallel. From the package</div><div>description:</div><div><br></div><div=
>=C2=A0 Rpc_parallel offers an API to define various workers and protocols,=
</div><div>=C2=A0 spawn workers as separate processes, and communicate with=
 them using</div><div>=C2=A0 Async Rpc.</div><div><br></div><div>The follow=
ing packages were upgraded:</div><div><br></div><div>- async</div><div>- as=
ync_extended</div><div>- async_extra</div><div>- async_kernel</div><div>- a=
sync_unix</div><div>- bignum</div><div>- bin_prot</div><div>- core_bench</d=
iv><div>- core</div><div>- core_extended</div><div>- core_kernel</div><div>=
- custom_printf</div><div>- jenga</div><div>- ocaml_plugin</div><div>- rpc_=
parallel</div><div>- sexplib</div><div>- textutils</div><div>- type_conv</d=
iv><div><br></div><div>Files for this release are available on our website =
and all packages</div><div>are in opam:</div><div><br></div><div>=C2=A0 <a =
href=3D"https://ocaml.janestreet.com/ocaml-core/112.01.00/individual/">http=
s://ocaml.janestreet.com/ocaml-core/112.01.00/individual/</a></div><div><br=
></div><div>Unfortunately the documentation is not there yet due to opam-do=
c not</div><div>working with 4.02.</div><div><br></div><div>Here is list of=
 changes for this version:</div><div><br></div><div># 112.01.00</div><div><=
br></div><div>## async</div><div><br></div><div>- update tests</div><div><b=
r></div><div>## async_extended</div><div><br></div><div>- Clarified an erro=
r in `Rpc_proxy`.</div><div><br></div><div>## async_extra</div><div><br></d=
iv><div>- Changed `Persistent_rpc_client.connected` to avoid returning a</d=
iv><div>=C2=A0 connection that is closed at the time it was called.</div><d=
iv>- Optimized `Rpc.implement` so that if a server&#39;s implementation</di=
v><div>=C2=A0 returns a determined deferred, then the output is immediately=
</div><div>=C2=A0 serialized and written out for the client.</div><div><br>=
</div><div>=C2=A0 This reduces memory consumption, improves throughput and =
latency.</div><div>=C2=A0 Measurements with the `pipe_rpc_test program` sho=
wed that a server</div><div>=C2=A0 went from processing 600\_000 msg/sec, t=
o 2\_200\_000 msg/sec before</div><div>=C2=A0 pegging the CPU.</div><div>- =
Changed `Log`&#39;s output processor&#39;s batch size from `1_000` to `100`=
.</div><div>- Added `Persistent_rpc_client.close` and `close_finished`.</di=
v><div>- In `Rpc.Connection.client` and `with_client`, used the</div><div>=
=C2=A0 `handshake_timeout` as the `timeout` passed to `Tcp.connect`.</div><=
div><br></div><div>=C2=A0 `handshake_timeout` was previously used only for =
the `Rpc` module&#39;s</div><div>=C2=A0 handshake timeout.</div><div>- Chan=
ged `Rpc.create`&#39;s `on_unknown_rpc` argument, renaming</div><div>=C2=A0=
 `\`Ignore` as `\`Close_connection`, and requiring `\`Call` to return</div>=
<div>=C2=A0 `\`Close_connection` or `\`Continue`.</div><div><br></div><div>=
=C2=A0 `\`Ignore` was renamed because it was a poor name, since in fact it<=
/div><div>=C2=A0 closed the connection.</div><div><br></div><div>=C2=A0 Add=
ed a `\`Continue` option, whic allows one to keep the connection</div><div>=
=C2=A0 open.</div><div><br></div><div>=C2=A0 Changed `\`Call` to return `\`=
Continue` or `\`Close_connection`,</div><div>=C2=A0 where the old `unit` re=
turn value meant `\`Close_connection`.</div><div>- In `Versioned_typed_tcp`=
, enabled the use of &quot;credentials&quot; in the</div><div>=C2=A0 &quot;=
Hello&quot; message.</div><div><br></div><div>=C2=A0 Propagate credentials =
to the user code when it arrives on the wire.</div><div><br></div><div>## a=
sync_kernel</div><div><br></div><div>- Optimized `Monitor.try_with ~run:\`N=
ow f` to return a determined</div><div>=C2=A0 deferred if `f ()` returns a =
determined deferred.</div><div><br></div><div>=C2=A0 Previously, `Monitor.t=
ry_with ~run:\`Now f` always introduced a</div><div>=C2=A0 `Deferred.map`, =
which made it impossible to do some optimizations</div><div>=C2=A0 that byp=
ass the scheduler overhead.</div><div>- Added an `ASYNC_CONFIG` field that =
causes the program to dump core</div><div>=C2=A0 if Async jobs are delayed =
too much.</div><div><br></div><div>=C2=A0 The new field is `dump_core_on_jo=
b_delay`.</div><div>- Switched `Async_kernel` from using `Core.Sys` to `Per=
vasives.Sys`</div><div>=C2=A0 eliminating one of the dependencies on `Core`=
.</div><div><br></div><div>## async_unix</div><div><br></div><div>- Changed=
 `Writer.transfer write pipe` to close `pipe` when the</div><div>=C2=A0 `wr=
iter`, is closed.</div><div><br></div><div>=C2=A0 Previously, `Writer.trans=
fer` did not close the pipe when the</div><div>=C2=A0 underlying writer is =
closed.=C2=A0 This was strange because:</div><div><br></div><div>=C2=A0 1. =
Callers would have to consistently check for the writer being</div><div>=C2=
=A0 =C2=A0 =C2=A0closed and close the `Pipe.Reader`t=3D themselves</div><di=
v>=C2=A0 2. The analogous function `Pipe.transfer` closes the reader on</di=
v><div>=C2=A0 =C2=A0 =C2=A0similar circumstances.</div><div><br></div><div>=
=C2=A0 The absence of the close was noticed as a bug in `Rpc`, which</div><=
div>=C2=A0 assumed that `Writer.transfer` did the close.</div><div>- Fixed =
a bug in `Scheduler.yield` that caused it to pause for 50ms if</div><div>=
=C2=A0 there is no other pending work and no I/O.</div><div>- Exposed type =
equivalence between `Unix.Passwd.t` and</div><div>=C2=A0 `Core.Std.Unix.Pas=
swd.t`.</div><div>- Changed `Writer.write_bin_prot` to use the new</div><di=
v>=C2=A0 `Bigstring.write_bin_prot`.</div><div><br></div><div>## bignum</di=
v><div><br></div><div>- Added `Bignum.Bigint` module, with arbitrary-precis=
ion integers</div><div>=C2=A0 based on `Zarith`, which is significantly fas=
ter than the</div><div>=C2=A0 `Num.Big_int` library.</div><div><br></div><d=
iv>## bin_prot</div><div><br></div><div>- In `Write`, improved some OCaml m=
acros to name values and avoid</div><div>=C2=A0 calling C functions multipl=
e times.</div><div><br></div><div>## core</div><div><br></div><div>- Remove=
d vestigial code supporting OCaml 4.00.</div><div>- Added `Command` support=
 for flags that are passed one or more times.</div><div><br></div><div>=C2=
=A0 Added `Command.Spec.one_or_more` and</div><div>=C2=A0 `Command.Spec.non=
_empty_sequence` to deal with the cases where you</div><div>=C2=A0 expect a=
 flag or anonymous argument (respectively) to be passed one</div><div>=C2=
=A0 or (optionally) more times.=C2=A0 This is common enough and distinct fr=
om</div><div>=C2=A0 the case where you want the argument passed zero or mor=
e times that</div><div>=C2=A0 it seems like we should canonize it in the li=
brary.</div><div>- In `Lock_file`, made stale lock detection more robust.</=
div><div><br></div><div>=C2=A0 Made `Lock_file.create foo` succeed if `foo`=
 is absent and</div><div>=C2=A0 `foo.nfs_lock` file is present and stale.=
=C2=A0 Previously, it would</div><div>=C2=A0 fail.</div><div>- Removed `Sys=
log.syslog`&#39;s `add_stderr` argument; use the `PERROR`</div><div>=C2=A0 =
option instead.</div><div>- Fixed `unix_stubs.c` compilation on NetBSD</div=
><div><br></div><div>=C2=A0 Closes #45</div><div>- Added `Filename` operato=
rs `/^` and `/@`, and `of_parts`, like the</div><div>=C2=A0 same functions =
for Catalog paths.</div><div>- Changed `Iobuf` functions that advance the i=
obuf to not also return</div><div>=C2=A0 a redundant number of bytes proces=
sed.</div><div><br></div><div>=C2=A0 This avoids a small allocation (in the=
 case of the `int option`</div><div>=C2=A0 functions) and normalizes the re=
sult (so the same information isn&#39;t</div><div>=C2=A0 returned two ways)=
.=C2=A0 Actually, it doesn&#39;t yet avoid the allocation in</div><div>=C2=
=A0 the implementation, as the corresponding `Bigstring` functions must</di=
v><div>=C2=A0 still return the number of bytes processed, and currently do =
so as an</div><div>=C2=A0 option.=C2=A0 We hope to eventually change that.<=
/div><div><br></div><div>=C2=A0 In the future I expect we will change `unit=
` to some `error` variant</div><div>=C2=A0 to also avoid the exception cons=
truction for `EWOULDBLOCK/EAGAIN`.=C2=A0 We</div><div>=C2=A0 can even make =
Unix syscalls `noalloc` if we&#39;re careful.</div><div>- In `Unix` module,=
 added unit tests for `Cidr.does_match`.</div><div><br></div><div>## core_b=
ench</div><div><br></div><div>- fixed legacy format string</div><div><br></=
div><div>## core_extended</div><div><br></div><div>- Added `Float_ref` modu=
le, which is like `float ref` but faster for</div><div>=C2=A0 sets due to b=
ypassing the write barrier.</div><div><br></div><div>=C2=A0 Benchmark resul=
ts on Sandy Bridge:</div><div><br></div><div>=C2=A0 | [float\_<a href=3D"ht=
tp://ref.ml">ref.ml</a>:] float ref set =C2=A0| =C2=A0 =C2=A02\_886.94ns | =
=C2=A0 8.00w | =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0|</div><div>=C2=A0 =
| [float\_<a href=3D"http://ref.ml">ref.ml</a>:] Float\_ref.set | =C2=A0 =
=C2=A0 =C2=A0 355.76ns | =C2=A0 6.00w | =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0|</div><div>=C2=A0 | [float\_<a href=3D"http://ref.ml">ref.ml</a>:] f=
loat ref get =C2=A0| =C2=A0 =C2=A0 =C2=A0 415.52ns | =C2=A0 6.00w | =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0|</div><div>=C2=A0 | [float\_<a href=3D"h=
ttp://ref.ml">ref.ml</a>:] Float_ref.get =C2=A0| =C2=A0 =C2=A0 =C2=A0 416.1=
9ns | =C2=A0 6.00w | =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0|</div><div>-=
 Added `Bin_io_utils.Wrapped.t`, which defines an `&#39;a t with bin_io`</d=
iv><div>=C2=A0 that supports size-prefixed serialization and deserializatio=
n.</div><div><br></div><div>=C2=A0 `Wrapped` has two useful submodules, `Op=
aque` and `Ignored`, for</div><div>=C2=A0 efficient handling of size-prefix=
ed bin-io values in cases where</div><div>=C2=A0 serialization can be bypas=
sed.=C2=A0 See the comments in the module for</div><div>=C2=A0 more details=
.</div><div><br></div><div>## core_kernel</div><div><br></div><div>- Remove=
d vestigial code supporting OCaml 4.00.</div><div>- Used `{Hashable,Compara=
ble}.S_binable` in `Day_of_week` and `Month`.</div><div>- Improved the perf=
ormance of `Set_once.set`.</div><div>- Added `Type_equal.Lift3` functor.</d=
iv><div>- Replaced occurrences of `Obj.magic 0` with `Obj.magic None`.</div=
><div><br></div><div>=C2=A0 With the former the compiler might think the de=
stination type is</div><div>=C2=A0 always an integer and instruct the GC to=
 ignore references to such</div><div>=C2=A0 values.=C2=A0 The latter doesn&=
#39;t have this problem as options are not</div><div>=C2=A0 always integers=
.</div><div>- Made `String_id.of_string` faster.</div><div>- Added `Bigstri=
ng` functions for reading and writing the</div><div>=C2=A0 size-prefixed bi=
n-io format.</div><div><br></div><div>=C2=A0 - `bin_prot_size_header_length=
`</div><div>=C2=A0 - `write_bin_prot`</div><div>=C2=A0 - `read_bin_prot`</d=
iv><div>=C2=A0 - `read_bin_prot_verbose_errors`</div><div>- Added `{Info,Er=
ror}.to_string_mach` which produces a single-line</div><div>=C2=A0 sexp fro=
m an `Error.t`.</div><div>- Added `{Info,Error}.createf`, for creation from=
 a format string.</div><div>- Added new `Perms` module with phantom types f=
or managing access</div><div>=C2=A0 control.</div><div><br></div><div>=C2=
=A0 This module supersedes the `read_only`, `read_write`, and</div><div>=C2=
=A0 `immutable` phantom types, which are now deprecated, and will be</div><=
div>=C2=A0 removed in the future.=C2=A0 This module uses a different approa=
ch using</div><div>=C2=A0 sets of polymorphic variants as capabilities, and=
 contravariant</div><div>=C2=A0 subtyping to express dropping capabilities.=
</div><div><br></div><div>=C2=A0 This approach fixes a bug with the current=
 phantom types used for</div><div>=C2=A0 `Ref.Permissioned` in which `immut=
able` types aren&#39;t guaranteed to</div><div>=C2=A0 be immutable:</div><d=
iv><br></div><div>=C2=A0 ```ocaml</div><div>=C2=A0 let r =3D Ref.Permission=
ed.create 0</div><div>=C2=A0 let r_immutable =3D (r : =C2=A0(int, immutable=
) Ref.Permissioned.t)</div><div>=C2=A0 let () =3D assert (Ref.Permissioned.=
get r_immutable =3D 0)</div><div>=C2=A0 let () =3D Ref.Permissioned.set r 1=
</div><div>=C2=A0 let () =3D assert (Ref.Permissioned.get r_immutable =3D 1=
)</div><div>=C2=A0 ```</div><div><br></div><div>=C2=A0 The bug stems from t=
he fact that the phantom-type parameter is</div><div>=C2=A0 covariant, whic=
h allows OCaml&#39;s relaxed value restriction to kick</div><div>=C2=A0 in,=
 which allows one to create a polymorphic value, which can then</div><div>=
=C2=A0 be viewed as both immutable and read write.=C2=A0 Here&#39;s a small=
</div><div>=C2=A0 standalone example to demonstrate:</div><div><br></div><d=
iv>=C2=A0 ```ocaml</div><div>=C2=A0 module F (M : sig</div><div>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 type +&#39;z t</div><div>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 val create : int -&gt; _ t</div><div=
>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 val get : _ t -&gt; int</=
div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 val set : read_wr=
ite t -&gt; int -&gt; unit</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 end) : sig</div><div>=C2=A0 =C2=A0 val t : _ M.t</div><div>=C2=A0 end =
=3D struct</div><div>=C2=A0 =C2=A0 let t =3D M.create 0</div><div>=C2=A0 =
=C2=A0 let t_immutable =3D (t : =C2=A0immutable M.t)</div><div>=C2=A0 =C2=
=A0 let () =3D</div><div>=C2=A0 =C2=A0 =C2=A0 assert (M.get t_immutable =3D=
 0);</div><div>=C2=A0 =C2=A0 =C2=A0 M.set t 1;</div><div>=C2=A0 =C2=A0 =C2=
=A0 assert (M.get t_immutable =3D 1);</div><div>=C2=A0 =C2=A0 ;;</div><div>=
=C2=A0 end</div><div>=C2=A0 ```</div><div><br></div><div>=C2=A0 The new app=
roach fixes the problem by making the phantom-type</div><div>=C2=A0 paramet=
er contravariant, and using polymorphic variants as</div><div>=C2=A0 capabi=
lities to represent what operations are allowed.</div><div>=C2=A0 Contravar=
iance allows one to drop capabilities, but not add them.</div><div>- Added =
`Int.Hex` module, which has hexadecimal sexp/string</div><div>=C2=A0 conver=
sions.</div><div>- Added `Gc.major_plus_minor_words`, for performance reaso=
ns.</div><div><br></div><div>## custom_printf</div><div><br></div><div>- Fi=
xed uses of `printf=3D-style`format strings that have unspecified</div><div=
>=C2=A0 behavior in OCaml 4.02 and will become errors.</div><div>- Support =
substitution in format string (lost with 4.02 compatibility)</div><div><br>=
</div><div>## jenga</div><div><br></div><div>- Don&#39;t show noisy `glob..=
changed` messages except with `-show-glob-changed` flag.</div><div>- Suppor=
t shared build rules via `${jenga}/share`.</div><div>- Detect cycle in dep =
scheme instead of hanging.</div><div>- Made standalone actions atomic, just=
 like actions associated with</div><div>=C2=A0 target files.</div><div><br>=
</div><div>=C2=A0 Running actions and recording the result in the persisten=
t</div><div>=C2=A0 `.jenga.db` should be performed atomically for standalon=
e actions,</div><div>=C2=A0 as it is for actions which are associated with =
target files</div><div><br></div><div>## ocaml_plugin</div><div><br></div><=
div>- Changed to not use `rm -r` when it is expected to remove one file.</d=
iv><div><br></div><div>## rpc_parallel</div><div><br></div><div>Initial imp=
ort.</div><div><br></div><div>## sexplib</div><div><br></div><div>- Replace=
d occurrences of `Obj.magic 0` with `Obj.magic None`.</div><div><br></div><=
div>=C2=A0 With the former the compiler might think the destination type is=
</div><div>=C2=A0 always an integer and instruct the GC to ignore reference=
s to such</div><div>=C2=A0 values.=C2=A0 The latter doesn&#39;t have this p=
roblem as options are not</div><div>=C2=A0 always integers.</div><div><br><=
/div><div>## textutils</div><div><br></div><div>- Added `Ascii_table.Table_=
char`, to expose the special table border</div><div>=C2=A0 characters.</div=
><div><br></div><div>## type_conv</div><div><br></div><div>- Updated ast ma=
tching for 4.02</div><div><br></div><div>--=C2=A0</div><div>Jeremie Dimino,=
 for the Core team</div><div></div></div>

--20cf301cbf3881f79805054c7d8e--
