Return-Path: <octa@polychoron.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 9D58D7EFCD
	for <caml-list@sympa.inria.fr>; Thu, 16 Oct 2014 19:21:59 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  octa@polychoron.fr) identity=pra; client-ip=217.70.183.195;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="octa@polychoron.fr";
  x-sender="octa@polychoron.fr"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  octa@polychoron.fr) identity=mailfrom;
  client-ip=217.70.183.195;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="octa@polychoron.fr";
  x-sender="octa@polychoron.fr"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@relay3-d.mail.gandi.net) identity=helo;
  client-ip=217.70.183.195;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="octa@polychoron.fr";
  x-sender="postmaster@relay3-d.mail.gandi.net";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiwEAKb9P1TZRrfDm2dsb2JhbABbg2FZA4MChVuvbQaTUIdNAoEXFgERAQEBAQEGCwsJFC6EAwEBBCMEUREJAiEWAQEJAgIJAwIBAgE3DhMIAQEXiCMECZkHnE+VPoYiijKCd4FUBYUVjXCDQIlZhSGQBgEBAYIkgjKBAgEBAQ
X-IPAS-Result: AiwEAKb9P1TZRrfDm2dsb2JhbABbg2FZA4MChVuvbQaTUIdNAoEXFgERAQEBAQEGCwsJFC6EAwEBBCMEUREJAiEWAQEJAgIJAwIBAgE3DhMIAQEXiCMECZkHnE+VPoYiijKCd4FUBYUVjXCDQIlZhSGQBgEBAYIkgjKBAgEBAQ
X-IronPort-AV: E=Sophos;i="5.04,733,1406584800"; 
   d="scan'208,217";a="101524813"
Received: from relay3-d.mail.gandi.net ([217.70.183.195])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 16 Oct 2014 19:21:58 +0200
Received: from mfilter12-d.gandi.net (mfilter12-d.gandi.net [217.70.178.129])
	by relay3-d.mail.gandi.net (Postfix) with ESMTP id A5D7BA80DF
	for <caml-list@inria.fr>; Thu, 16 Oct 2014 19:21:58 +0200 (CEST)
X-Virus-Scanned: Debian amavisd-new at mfilter12-d.gandi.net
Received: from relay3-d.mail.gandi.net ([217.70.183.195])
	by mfilter12-d.gandi.net (mfilter12-d.gandi.net [10.0.15.180]) (amavisd-new, port 10024)
	with ESMTP id lMb-ArqjXgFS for <caml-list@inria.fr>;
	Thu, 16 Oct 2014 19:21:56 +0200 (CEST)
X-Originating-IP: 146.232.92.127
Received: from [146.232.92.127] (unknown [146.232.92.127])
	(Authenticated sender: octa@polychoron.fr)
	by relay3-d.mail.gandi.net (Postfix) with ESMTPSA id E4091A80CE
	for <caml-list@inria.fr>; Thu, 16 Oct 2014 19:21:55 +0200 (CEST)
Message-ID: <543FFEB1.2030400@polychoron.fr>
Date: Thu, 16 Oct 2014 19:21:53 +0200
From: Octachron <octa@polychoron.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.1.2
MIME-Version: 1.0
To: caml-list@inria.fr
References: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
In-Reply-To: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------040902000105070004030202"
Subject: Re: [Caml-list] Dimensional Analysis question

This is a multi-part message in MIME format.
--------------040902000105070004030202
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: quoted-printable

Hello,
As far as I know it is possible to do some kind of basic dimensional=20
analysis.

The idea is to encode natural number at the type level as
0 :: 'a -> 'a
1:: 'a -> 'a succ
n :: 'a -> 'a succ .... succ  (with n succ)

In other words, we are encoding translation on natural numbers rather=20
than the natural numbers themselves.
The free parameter 'a allows to type addition and substraction. We can=20
then define numbers with unit as a phantom type

type 'a t =3D float

and for instance a meter function as

let m : float ->  < m : 'a -> 'a > t =3D fun x -> x

where the row type is merely used to have nice label for the type name.

Addition and substraction then preserve the phantom type
val + : 'a t -> 'a t -> 'a t

whereas  multiplication and division use the free type parameter in the=20
natural encoding to perform the addition

let ( * ) : <m : 'inf -> 'mid > t -> <m: 'mid -> 'sup> t -> <m: 'inf ->=20
'sup> t =3D *.
let (/):  < m: inf->sup > t -> <m:inf->mid> t -> <m: mid-> sup>  t =3D ( /.=
 )

This solution works for basic use but falls apart in complex use due to=20
the lack of second-rank polymorphism.
For instance,

      let y =3D m 2. * m 3.

works but

     let x =3D m 2. in
     let y =3D x * x

doe not. Even worse

let () =3D
     let x =3D m 1. in
     let y =3D m 2. in
     let w =3D x * y in
     ()

works but

let () =3D
     let x =3D m 1. in
     let y =3D m 2. in
     let w =3D x * y in
     let z =3D x + y in
     ()

triggers a compilation error.
And unfortunately, I am not aware of any way to avoid these quirky=20
behaviors.

Regards,
octachron.

Le 10/16/14 18:37, Shayne Fletcher a =C3=A9crit :
> Dear OCamlers,
>
> In 1994, Barton and Nackman in their book 'Scientific Engineering in
> C++' [1] demonstrated how one could encode the rules of Dimensional
> Analysis [2] into the C++ type system enabling compile-time checking
> (no runtime-cost) of the plausibility (at least up to the dimensional
> correctness) of computations.
>
> In 2004, Abrahams & Gurtovy in 'C++ Template Metaprogramming' [3]
> showed the Barton Nackman technique to be elegantly implementable
> using compile time type sequences encoding integer constants. At the
> end of this post, I provide a complete listing of their example
> program [4].
>
> The key properties of the system (as I see it) are:
>   - Encoding of integers as types;
>   - Compile time manipulation of sequences of these integer encodings
>     to deduce/produce new derived types.
>
> Now, it is not immediately obvious to me how to approach this problem
> in OCaml. It irks me some that I can't immediately produce a yet more
> elegant OCaml program for this problem and leaves me feeling like C++
> has "got something over on us" here ;)
>
> My question therefore is: Does anyone have suggestions/pointers
> on how to approach automatic dimensional analysis via the OCaml type
> system?
>
> Best,
>
> --=20
> Shayne Fletcher
>
> [1] John J. Barton and Lee R. Nackman. Scientific and Engineering C++:
>     an Introduction with Advanced Techniques and Examples. Reading,
>     MA: Addison Wesley. ISBN 0-201-53393-6. 1994.
>
> [2] Wikipedia http://en.wikipedia.org/wiki/Dimensional_analysis
>
> [3] David Abrahams and Aleksey Gurtovy C++ Template Metaprogramming:
>     Concepts, Tools, and Techniques from Boost and Beyond (C++ in
>     Depth Series), Addison-Wesley Professional. ISBN:0321227255. 2004.
>
> [4] Code listing:
>
>     //"c:/program files (x86)/Microsoft Visual Studio=20
> 10.0/vc/vcvarsall.bat" x64
>     //cl /Fedimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp
>     #include <boost/mpl/vector_c.hpp>
>     #include <boost/mpl/transform.hpp>
>     #include <boost/mpl/placeholders.hpp>
>     #include <boost/mpl/equal.hpp>
>     #include <boost/mpl/plus.hpp>
>     #include <boost/mpl/minus.hpp>
>     #include <boost/static_assert.hpp>
>     typedef boost::mpl::vector_c<int,1,0,0,0,0,0,0> mass;
>     typedef boost::mpl::vector_c<int,0,1,0,0,0,0,0> length;
>     typedef boost::mpl::vector_c<int,0,0,1,0,0,0,0> time;
>     typedef boost::mpl::vector_c<int,0,0,0,1,0,0,0> charge;
>     typedef boost::mpl::vector_c<int,0,0,0,0,1,0,0> temperature;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,1,0> intensity;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,1> angle;
>     typedef boost::mpl::vector_c<int,0,1,-1,0,0,0,0> velocity;   // l/t
>     typedef boost::mpl::vector_c<int,0,1,-2,0,0,0,0> acceleration; //=20
> l/(t2)
>     typedef boost::mpl::vector_c<int,1,1,-1,0,0,0,0> momentum;   // ml/t
>     typedef boost::mpl::vector_c<int,1,1,-2,0,0,0,0> force;    // ml/(t2)
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,0> scalar;
>     template <class T, class Dimensions>
>     class quantity
>     {
>     public:
>       explicit quantity (T val)
>         : val (val)
>       {}
>       template <class OtherDimensions>
>       quantity (quantity<T, OtherDimensions> const& other)
>         : val (other.value ()) {
>         BOOST_MPL_ASSERT( (boost::mpl::equal<Dimensions,=20
> OtherDimensions>));
>       }
>       T value () const { return val; }
>     private:
>       T val;
>     };
>     template <class T, class D>
>     quantity<T, D>
>     operator + (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () + y.value ());
>     }
>     template <class T, class D>
>     quantity<T, D>
>     operator - (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () - y.value ());
>     }
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type
>     >
>     operator* (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>       return quantity<T, D> (x.value () * y.value ());
>     }
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type
>     >
>     operator/ (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>       return quantity<T, D> (x.value () / y.value ());
>     }
>     // -- test
>     #include <iostream>
>   #include <limits>
>   #include <cassert>
>     int main ()
>     {
>       quantity<float, mass> m (5.0f);
>       quantity<float, acceleration> a(9.8f);
>       quantity<float, force> f =3D m * a;
>       quantity<float, mass> m2 =3D f / a;
>       assert ((std::abs ((m2 - m).value ())) <=3D=20
> std::numeric_limits<double>::epsilon ());
>       return 0;
>     }
>


--------------040902000105070004030202
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<html>
  <head>
    <meta content=3D"text/html; charset=3Dutf-8" http-equiv=3D"Content-Type=
">
  </head>
  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div class=3D"moz-cite-prefix">Hello,<br>
      As far as I know it is possible to do some kind of basic
      dimensional analysis.<br>
      <br>
      The idea is to encode natural number at the type level as <br>
      0 :: 'a -&gt; 'a<br>
      1:: 'a -&gt; 'a succ<br>
      n :: 'a -&gt; 'a succ .... succ=C2=A0 (with n succ) <br>
      <br>
      In other words, we are encoding translation on natural numbers
      rather than the natural numbers themselves.<br>
      The free parameter 'a allows to type addition and substraction. We
      can then define numbers with unit as a phantom type<br>
      <br>
      type 'a t =3D float<br>
      <br>
      and for instance a meter function as<br>
      <br>
      let m : float -&gt;=C2=A0 &lt; m : 'a -&gt; 'a &gt; t =3D fun x -&gt;=
 x<br>
      <br>
      where the row type is merely used to have nice label for the type
      name.<br>
      <br>
      Addition and substraction then preserve the phantom type<br>
      val + : 'a t -&gt; 'a t -&gt; 'a t<br>
      <br>
      whereas=C2=A0 multiplication and division use the free type parameter
      in the natural encoding to perform the addition<br>
      <br>
      let ( * ) : &lt;m : 'inf -&gt; 'mid &gt; t -&gt; &lt;m: 'mid -&gt;
      'sup&gt; t -&gt; &lt;m: 'inf -&gt; 'sup&gt; t =3D *.<br>
      let (/):=C2=A0 &lt; m: inf-&gt;sup &gt; t -&gt; &lt;m:inf-&gt;mid&gt;=
 t
      -&gt; &lt;m: mid-&gt; sup&gt;=C2=A0 t =3D ( /. )<br>
      =C2=A0=C2=A0 =C2=A0 <br>
      This solution works for basic use but falls apart in complex use
      due to the lack of second-rank polymorphism.<br>
      For instance, <br>
      <br>
      =C2=A0=C2=A0=C2=A0=C2=A0 let y =3D m 2. * m 3. =C2=A0 <br>
      <br>
      works but <br>
      <br>
      =C2=A0=C2=A0=C2=A0 let x =3D m 2. in<br>
      =C2=A0=C2=A0=C2=A0 let y =3D x * x <br>
      <br>
      doe not. Even worse <br>
      <br>
      let () =3D <br>
      =C2=A0=C2=A0=C2=A0 let x =3D m 1. in<br>
      =C2=A0=C2=A0=C2=A0 let y =3D m 2. in<br>
      =C2=A0=C2=A0=C2=A0 let w =3D x * y in<br>
      =C2=A0=C2=A0=C2=A0 ()<br>
      <br>
      works but=C2=A0 <br>
      <br>
      let () =3D <br>
      =C2=A0=C2=A0=C2=A0 let x =3D m 1. in<br>
      =C2=A0=C2=A0=C2=A0 let y =3D m 2. in<br>
      =C2=A0=C2=A0=C2=A0 let w =3D x * y in<br>
      =C2=A0=C2=A0=C2=A0 let z =3D x + y in<br>
      =C2=A0=C2=A0=C2=A0 ()<br>
      <br>
      triggers a compilation error. <br>
      And unfortunately, I am not aware of any way to avoid these quirky
      behaviors.<br>
      <br>
      Regards,<br>
      octachron.<br>
      <br>
      Le 10/16/14 18:37, Shayne Fletcher a =C3=A9crit=C2=A0:<br>
    </div>
    <blockquote
cite=3D"mid:CAMsAzy_LvL-cUzsgfX+pPMioSBjb=3D70n28yQcw9UiP04YTq5KQ@mail.gmai=
l.com"
      type=3D"cite">
      <div dir=3D"ltr">
        <div class=3D"gmail_default" style=3D"">
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">Dear OCamlers,</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">In 1994, Barton and Nackman in their book
              'Scientific Engineering in</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">C++' [1]=C2=A0demonstrated=C2=A0how one could enc=
ode the
              rules of Dimensional</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">Analysis [2] into the C++ type system enabling
              compile-time checking</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">(no runtime-cost) of the=C2=A0plausibility=C2=A0(=
at
              least up to the dimensional</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">correctness) of computations.</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">In 2004, Abrahams &amp; Gurtovy in 'C++
              Template Metaprogramming' [3]</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">showed the Barton Nackman technique to be
              elegantly implementable</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">using compile time type sequences encoding
              integer constants. At the</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">end of this post, I provide a complete listing
              of their example</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">program [4].</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">The key properties of the system (as I see it)
              are:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 - Encoding of integers as types;=C2=A0</fo=
nt></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 - Compile time manipulation of sequences of
              these integer encodings</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 to deduce/produce new derived types=
.</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">Now, it is not immediately obvious to me how
              to approach this problem</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">in OCaml. It irks me some that I can't
              immediately produce a yet more</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">elegant OCaml program for this problem and
              leaves me feeling like C++</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">has "got something over on us" here ;)</font></di=
v>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">My question therefore is: Does anyone have
              suggestions/pointers</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">on how to approach automatic dimensional
              analysis via the OCaml type</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">system?=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">Best,</font></div>
          <div class=3D"gmail_default" style=3D"">
            <div><br>
            </div>
            --=C2=A0<br>
            Shayne Fletcher<br>
          </div>
          <div class=3D"gmail_default" style=3D""><br>
          </div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">[1] John J. Barton and Lee R. Nackman.
              Scientific and Engineering C++:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 an Introduction with Advanced Techn=
iques
              and Examples. Reading,</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 MA: Addison Wesley. ISBN 0-201-5339=
3-6.
              1994.</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">[2] Wikipedia <a moz-do-not-send=3D"true"
                href=3D"http://en.wikipedia.org/wiki/Dimensional_analysis">=
http://en.wikipedia.org/wiki/Dimensional_analysis</a></font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">[3] David Abrahams and Aleksey Gurtovy C++
              Template Metaprogramming:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 Concepts, Tools, and Techniques fro=
m Boost
              and Beyond (C++ in</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 Depth Series), Addison-Wesley
              Professional. ISBN:0321227255. 2004.</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">[4] Code listing:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 //"c:/program files (x86)/Microsoft=
 Visual
              Studio 10.0/vc/vcvarsall.bat" x64</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 //cl /Fedimension.exe /EHsc /I
              d:/boost_1_55_0 dimension.cpp</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/vector_c.hpp=
&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/transform.hp=
p&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include
              &lt;boost/mpl/placeholders.hpp&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/equal.hpp&gt=
;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/plus.hpp&gt;=
</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/minus.hpp&gt=
;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;boost/static_assert.hp=
p&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,1,0,0,0,0,0,0&gt; mass;</font></d=
iv>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,1,0,0,0,0,0&gt; length;</font><=
/div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,1,0,0,0,0&gt; time;</font></d=
iv>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,0,1,0,0,0&gt; charge;</font><=
/div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,0,0,1,0,0&gt; temperature;</f=
ont></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,0,0,0,1,0&gt; intensity;</fon=
t></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,0,0,0,0,1&gt; angle;</font></=
div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,1,-1,0,0,0,0&gt; velocity; =C2=
=A0
              =C2=A0 // l/t</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,1,-2,0,0,0,0&gt;
              acceleration; // l/(t2)</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,1,1,-1,0,0,0,0&gt; momentum; =C2=
=A0
              =C2=A0 // ml/t</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,1,1,-2,0,0,0,0&gt; force; =C2=A0 =
=C2=A0
              =C2=A0 =C2=A0// ml/(t2)</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 typedef
              boost::mpl::vector_c&lt;int,0,0,0,0,0,0,0&gt; scalar;</font><=
/div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 template &lt;class T, class Dimensi=
ons&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 class quantity</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 public:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 explicit quantity (T val)=C2=
=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 : val (val)</font></d=
iv>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 {}</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 template &lt;class OtherDime=
nsions&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity (quantity&lt;T,
              OtherDimensions&gt; const&amp; other)</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 : val (other.value ()=
) {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 BOOST_MPL_ASSERT(
              (boost::mpl::equal&lt;Dimensions, OtherDimensions&gt;));</fon=
t></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 T value () const { return va=
l; }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 private:</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 T val;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 };</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D&gt;</=
font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 quantity&lt;T, D&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 operator + (quantity&lt;T, D&gt; x,
              quantity&lt;T, D&gt; y )</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt;(=
x.value () +
              y.value ());</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D&gt;</=
font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 quantity&lt;T, D&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 operator - (quantity&lt;T, D&gt; x,
              quantity&lt;T, D&gt; y )</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt;(=
x.value () -
              y.value ());</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D1, cla=
ss
              D2&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 quantity &lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 T</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 , typename boost::mpl::transform&lt=
;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::p=
lus&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 ,
              boost::mpl::placeholders::_2&gt; &gt;::type=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 &gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 operator* (quantity&lt;T, D1&gt; x,
              quantity &lt;T, D2&gt; y)</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 typedef typename
              boost::mpl::transform&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::p=
lus&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 ,
              boost::mpl::placeholders::_2&gt; &gt;::type D;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt; =
(x.value ()
              * y.value ());</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D1, cla=
ss
              D2&gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 quantity &lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 T</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 , typename boost::mpl::transform&lt=
;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::m=
inus&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 ,
              boost::mpl::placeholders::_2&gt; &gt;::type=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 &gt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 operator/ (quantity&lt;T, D1&gt; x,
              quantity &lt;T, D2&gt; y)</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 typedef typename
              boost::mpl::transform&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::m=
inus&lt;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 ,
              boost::mpl::placeholders::_2&gt; &gt;::type D;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt; =
(x.value ()
              / y.value ());</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 // -- test</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 #include &lt;iostream&gt;</font></d=
iv>
          <div class=3D"gmail_default" style=3D"">
            <div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0
                =C2=A0 #include &lt;limits&gt;</font></div>
            <div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0
                =C2=A0 #include &lt;cassert&gt;</font></div>
          </div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 int main ()</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 {</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, mass&gt; =
m (5.0f);</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, accelerat=
ion&gt;
              a(9.8f);</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, force&gt;=
 f =3D m * a;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, mass&gt; =
m2 =3D f / a;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 assert ((std::abs ((m2 - m).=
value ()))
              &lt;=3D std::numeric_limits&lt;double&gt;::epsilon ());</font=
></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0=C2=A0</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 =C2=A0 return 0;</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif">=C2=A0 =C2=A0 }</font></div>
          <div class=3D"gmail_default" style=3D""><font face=3D"tahoma,
              sans-serif"><br>
            </font></div>
        </div>
      </div>
    </blockquote>
    <br>
  </body>
</html>

--------------040902000105070004030202--
