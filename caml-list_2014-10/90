Return-Path: <mario.alvarez739@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id B80CC7EFCD
	for <caml-list@sympa.inria.fr>; Thu, 16 Oct 2014 19:35:38 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  mario.alvarez739@gmail.com) identity=pra;
  client-ip=209.85.223.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mario.alvarez739@gmail.com";
  x-sender="mario.alvarez739@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  mario.alvarez739@gmail.com designates 209.85.223.169 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.223.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mario.alvarez739@gmail.com";
  x-sender="mario.alvarez739@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ie0-f169.google.com) identity=helo;
  client-ip=209.85.223.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mario.alvarez739@gmail.com";
  x-sender="postmaster@mail-ie0-f169.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuMEAFgBQFTRVd+pgGdsb2JhbABbg2FND4MCxzCBboZ5VAKBEAcWAREBARQoLoQDAQECAQESER0BGx0BAwELBgMCCy0KAgIhAQERAQUBDg4GEyKIBwEDCQgNmQKQMW6LMIFygxCIeAoZJw1nhVsBAQEBBgEBAQEBARYBBQ6OC4IwBAeCd4FUBYUVik6GYoUBghGPRoRkGCmFKjsvAQEBgkcBAQE
X-IPAS-Result: AuMEAFgBQFTRVd+pgGdsb2JhbABbg2FND4MCxzCBboZ5VAKBEAcWAREBARQoLoQDAQECAQESER0BGx0BAwELBgMCCy0KAgIhAQERAQUBDg4GEyKIBwEDCQgNmQKQMW6LMIFygxCIeAoZJw1nhVsBAQEBBgEBAQEBARYBBQ6OC4IwBAeCd4FUBYUVik6GYoUBghGPRoRkGCmFKjsvAQEBgkcBAQE
X-IronPort-AV: E=Sophos;i="5.04,733,1406584800"; 
   d="scan'208";a="83521845"
Received: from mail-ie0-f169.google.com ([209.85.223.169])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Oct 2014 19:35:33 +0200
Received: by mail-ie0-f169.google.com with SMTP id tp5so3960302ieb.0
        for <caml-list@inria.fr>; Thu, 16 Oct 2014 10:35:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=DXplIyKivHMf4/nz7Q3p8ljFOW/AHMMA5Y4hoZLMWZM=;
        b=hBlmrqCI6SE9Setx/mJ1k1fbhphryAWtsS5qpoAyOKCpY8G52Q0rwcoaf1Gp897iH+
         2i2QaZqmczXPil8r2kRRWfWU5b6XH4XDLzUMwutpeUMazgXFgCc3eT+eIC1JwDXkUhK4
         HailTT3tQcWEsKOwwSgRGilUjltap3dglEyTPB0MtRBS1x6f7wFQN16AobBzDQ7xQxcm
         keVXy2xhgkiRCmw5skKx3NJLcVcdvQhJ9kcFM7OyjkkPA3orks1oint1NKJXJos0JWyr
         QZsWSnCusfoECvlr9Cqvm5EnX50rhKiS5UHHHX1cPMDu+zW6Pc/mTxjxSLgUkrbf2Ogd
         kR3w==
MIME-Version: 1.0
X-Received: by 10.50.61.226 with SMTP id t2mr6694084igr.27.1413480932254; Thu,
 16 Oct 2014 10:35:32 -0700 (PDT)
Received: by 10.64.147.101 with HTTP; Thu, 16 Oct 2014 10:35:32 -0700 (PDT)
In-Reply-To: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
References: <CAMsAzy_LvL-cUzsgfX+pPMioSBjb=70n28yQcw9UiP04YTq5KQ@mail.gmail.com>
Date: Thu, 16 Oct 2014 19:35:32 +0200
Message-ID: <CANgVXKZ=3Fxe2KPcFPD1D9fQsT0TYpfXKOtwvnfTL-Q1Z=1uaQ@mail.gmail.com>
From: Mario Alvarez Picallo <mario.alvarez739@gmail.com>
To: Shayne Fletcher <shayne.fletcher.50@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=047d7bdc0c84dd2a8a05058dac36
Subject: Re: [Caml-list] Dimensional Analysis question

--047d7bdc0c84dd2a8a05058dac36
Content-Type: text/plain; charset=UTF-8

Hello Shayne,

I was at first convinced that this could not be done, but you can in fact
encode it (in a verbose way) with phantom types,
using a smart typelevel representation of integers (
http://www.kb.ecei.tohoku.ac.jp/ml2008/slides/lindley.pdf).

I've written a small proof of concept that seems to work just fine (but, of
course, there may be errors), that you can find
here: https://gist.github.com/m-alvarez/b1e42b7b42cbeed7d1f0

It seems to be solid enough to pass the tests that Octachron tried, but
there probably are some other corner cases for which
it breaks down. Otherwise, it would be interesting to coalesce both
representations, using Octachron's idea of row types instead
of tuples to have extensible dimensional analysis, where each part of the
program can introduce its own dimensions.

Regards,
Mario A.

On Thu, Oct 16, 2014 at 6:37 PM, Shayne Fletcher <
shayne.fletcher.50@gmail.com> wrote:

> Dear OCamlers,
>
> In 1994, Barton and Nackman in their book 'Scientific Engineering in
> C++' [1] demonstrated how one could encode the rules of Dimensional
> Analysis [2] into the C++ type system enabling compile-time checking
> (no runtime-cost) of the plausibility (at least up to the dimensional
> correctness) of computations.
>
> In 2004, Abrahams & Gurtovy in 'C++ Template Metaprogramming' [3]
> showed the Barton Nackman technique to be elegantly implementable
> using compile time type sequences encoding integer constants. At the
> end of this post, I provide a complete listing of their example
> program [4].
>
> The key properties of the system (as I see it) are:
>   - Encoding of integers as types;
>   - Compile time manipulation of sequences of these integer encodings
>     to deduce/produce new derived types.
>
> Now, it is not immediately obvious to me how to approach this problem
> in OCaml. It irks me some that I can't immediately produce a yet more
> elegant OCaml program for this problem and leaves me feeling like C++
> has "got something over on us" here ;)
>
> My question therefore is: Does anyone have suggestions/pointers
> on how to approach automatic dimensional analysis via the OCaml type
> system?
>
> Best,
>
> --
> Shayne Fletcher
>
> [1] John J. Barton and Lee R. Nackman. Scientific and Engineering C++:
>     an Introduction with Advanced Techniques and Examples. Reading,
>     MA: Addison Wesley. ISBN 0-201-53393-6. 1994.
>
> [2] Wikipedia http://en.wikipedia.org/wiki/Dimensional_analysis
>
> [3] David Abrahams and Aleksey Gurtovy C++ Template Metaprogramming:
>     Concepts, Tools, and Techniques from Boost and Beyond (C++ in
>     Depth Series), Addison-Wesley Professional. ISBN:0321227255. 2004.
>
> [4] Code listing:
>
>     //"c:/program files (x86)/Microsoft Visual Studio
> 10.0/vc/vcvarsall.bat" x64
>     //cl /Fedimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp
>
>     #include <boost/mpl/vector_c.hpp>
>     #include <boost/mpl/transform.hpp>
>     #include <boost/mpl/placeholders.hpp>
>     #include <boost/mpl/equal.hpp>
>     #include <boost/mpl/plus.hpp>
>     #include <boost/mpl/minus.hpp>
>     #include <boost/static_assert.hpp>
>
>     typedef boost::mpl::vector_c<int,1,0,0,0,0,0,0> mass;
>     typedef boost::mpl::vector_c<int,0,1,0,0,0,0,0> length;
>     typedef boost::mpl::vector_c<int,0,0,1,0,0,0,0> time;
>     typedef boost::mpl::vector_c<int,0,0,0,1,0,0,0> charge;
>     typedef boost::mpl::vector_c<int,0,0,0,0,1,0,0> temperature;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,1,0> intensity;
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,1> angle;
>     typedef boost::mpl::vector_c<int,0,1,-1,0,0,0,0> velocity;     // l/t
>     typedef boost::mpl::vector_c<int,0,1,-2,0,0,0,0> acceleration; //
> l/(t2)
>     typedef boost::mpl::vector_c<int,1,1,-1,0,0,0,0> momentum;     // ml/t
>     typedef boost::mpl::vector_c<int,1,1,-2,0,0,0,0> force;        //
> ml/(t2)
>     typedef boost::mpl::vector_c<int,0,0,0,0,0,0,0> scalar;
>
>     template <class T, class Dimensions>
>     class quantity
>     {
>     public:
>       explicit quantity (T val)
>         : val (val)
>       {}
>       template <class OtherDimensions>
>       quantity (quantity<T, OtherDimensions> const& other)
>         : val (other.value ()) {
>         BOOST_MPL_ASSERT( (boost::mpl::equal<Dimensions,
> OtherDimensions>));
>       }
>       T value () const { return val; }
>     private:
>       T val;
>     };
>
>     template <class T, class D>
>     quantity<T, D>
>     operator + (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () + y.value ());
>     }
>
>     template <class T, class D>
>     quantity<T, D>
>     operator - (quantity<T, D> x, quantity<T, D> y )
>     {
>       return quantity<T, D>(x.value () - y.value ());
>     }
>
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type
>     >
>     operator* (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::plus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>
>       return quantity<T, D> (x.value () * y.value ());
>     }
>
>     template <class T, class D1, class D2>
>     quantity <
>       T
>     , typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                 , boost::mpl::placeholders::_2> >::type
>     >
>     operator/ (quantity<T, D1> x, quantity <T, D2> y)
>     {
>       typedef typename boost::mpl::transform<
>         D1, D2, boost::mpl::minus<
>                   boost::mpl::placeholders::_1
>                   , boost::mpl::placeholders::_2> >::type D;
>
>       return quantity<T, D> (x.value () / y.value ());
>     }
>
>     // -- test
>
>     #include <iostream>
>     #include <limits>
>     #include <cassert>
>
>     int main ()
>     {
>       quantity<float, mass> m (5.0f);
>       quantity<float, acceleration> a(9.8f);
>       quantity<float, force> f = m * a;
>       quantity<float, mass> m2 = f / a;
>
>       assert ((std::abs ((m2 - m).value ())) <=
> std::numeric_limits<double>::epsilon ());
>
>       return 0;
>     }
>
>

--047d7bdc0c84dd2a8a05058dac36
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div><div><div>Hello Shayne,<br><br>I was a=
t first convinced that this could not be done, but you can in fact encode i=
t (in a verbose way) with phantom types,<br></div>using a smart typelevel r=
epresentation of integers (<a href=3D"http://www.kb.ecei.tohoku.ac.jp/ml200=
8/slides/lindley.pdf">http://www.kb.ecei.tohoku.ac.jp/ml2008/slides/lindley=
.pdf</a>).<br></div><br></div>I&#39;ve written a small proof of concept tha=
t seems to work just fine (but, of course, there may be errors), that you c=
an find<br>here: <a href=3D"https://gist.github.com/m-alvarez/b1e42b7b42cbe=
ed7d1f0">https://gist.github.com/m-alvarez/b1e42b7b42cbeed7d1f0</a><br><br>=
</div>It seems to be solid enough to pass the tests that Octachron tried, b=
ut there probably are some other corner cases for which<br>it breaks down. =
Otherwise, it would be interesting to coalesce both representations, using =
Octachron&#39;s idea of row types instead<br>of tuples to have extensible d=
imensional analysis, where each part of the program can introduce its own d=
imensions.<br><br></div><div>Regards,<br></div><div>Mario A.<br></div></div=
></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Oc=
t 16, 2014 at 6:37 PM, Shayne Fletcher <span dir=3D"ltr">&lt;<a href=3D"mai=
lto:shayne.fletcher.50@gmail.com" target=3D"_blank">shayne.fletcher.50@gmai=
l.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"m=
argin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"l=
tr"><div class=3D"gmail_default"><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">Dear OCamlers,</font></div><div class=3D"gmail_default=
"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">In 1994, Barton and Nackman in the=
ir book &#39;Scientific Engineering in</font></div><div class=3D"gmail_defa=
ult"><font face=3D"tahoma, sans-serif">C++&#39; [1]=C2=A0demonstrated=C2=A0=
how one could encode the rules of Dimensional</font></div><div class=3D"gma=
il_default"><font face=3D"tahoma, sans-serif">Analysis [2] into the C++ typ=
e system enabling compile-time checking</font></div><div class=3D"gmail_def=
ault"><font face=3D"tahoma, sans-serif">(no runtime-cost) of the=C2=A0plaus=
ibility=C2=A0(at least up to the dimensional</font></div><div class=3D"gmai=
l_default"><font face=3D"tahoma, sans-serif">correctness) of computations.<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
<br></font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-se=
rif">In 2004, Abrahams &amp; Gurtovy in &#39;C++ Template Metaprogramming&#=
39; [3]</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans=
-serif">showed the Barton Nackman technique to be elegantly implementable</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">u=
sing compile time type sequences encoding integer constants. At the</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">end of =
this post, I provide a complete listing of their example</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">program [4].</font=
></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br><=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
The key properties of the system (as I see it) are:</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 - Encoding of i=
ntegers as types;=C2=A0</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 - Compile time manipulation of sequences of =
these integer encodings</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 to deduce/produce new derived types.<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
<br></font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-se=
rif">Now, it is not immediately obvious to me how to approach this problem<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
in OCaml. It irks me some that I can&#39;t immediately produce a yet more</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">e=
legant OCaml program for this problem and leaves me feeling like C++</font>=
</div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">has &q=
uot;got something over on us&quot; here ;)</font></div><div class=3D"gmail_=
default"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">My question therefore is: D=
oes anyone have suggestions/pointers</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">on how to approach automatic dimension=
al analysis via the OCaml type</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">system?=C2=A0</font></div><div class=3D"gmai=
l_default"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">Best,</font></div><div cl=
ass=3D"gmail_default"><div><br></div>--=C2=A0<br>Shayne Fletcher<br></div><=
div class=3D"gmail_default"><br></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">[1] John J. Barton and Lee R. Nackman. Scientific=
 and Engineering C++:</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 an Introduction with Advanced Techniq=
ues and Examples. Reading,</font></div><div class=3D"gmail_default"><font f=
ace=3D"tahoma, sans-serif">=C2=A0 =C2=A0 MA: Addison Wesley. ISBN 0-201-533=
93-6. 1994.</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif"><br></font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">[2] Wikipedia <a href=3D"http://en.wikipedia.org/wiki/Dime=
nsional_analysis" target=3D"_blank">http://en.wikipedia.org/wiki/Dimensiona=
l_analysis</a></font></div><div class=3D"gmail_default"><font face=3D"tahom=
a, sans-serif"><br></font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">[3] David Abrahams and Aleksey Gurtovy C++ Template Met=
aprogramming:</font></div><div class=3D"gmail_default"><font face=3D"tahoma=
, sans-serif">=C2=A0 =C2=A0 Concepts, Tools, and Techniques from Boost and =
Beyond (C++ in</font></div><div class=3D"gmail_default"><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 Depth Series), Addison-Wesley Professional. IS=
BN:0321227255. 2004.</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif"><br></font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">[4] Code listing:</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"=
gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 //&quot;c:/p=
rogram files (x86)/Microsoft Visual Studio 10.0/vc/vcvarsall.bat&quot; x64<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 //cl /Fedimension.exe /EHsc /I d:/boost_1_55_0 dimension.cpp<=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/vector_c.hpp&gt;</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 #include &lt;boost/mpl/transform.hpp&gt;</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #inclu=
de &lt;boost/mpl/placeholders.hpp&gt;</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/=
equal.hpp&gt;</font></div><div class=3D"gmail_default"><font face=3D"tahoma=
, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/mpl/plus.hpp&gt;</font></div=
><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 #include &lt;boost/mpl/minus.hpp&gt;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;boost/s=
tatic_assert.hpp&gt;</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::=
vector_c&lt;int,1,0,0,0,0,0,0&gt; mass;</font></div><div class=3D"gmail_def=
ault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::v=
ector_c&lt;int,0,1,0,0,0,0,0&gt; length;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::=
vector_c&lt;int,0,0,1,0,0,0,0&gt; time;</font></div><div class=3D"gmail_def=
ault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::v=
ector_c&lt;int,0,0,0,1,0,0,0&gt; charge;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::=
vector_c&lt;int,0,0,0,0,1,0,0&gt; temperature;</font></div><div class=3D"gm=
ail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost:=
:mpl::vector_c&lt;int,0,0,0,0,0,1,0&gt; intensity;</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef =
boost::mpl::vector_c&lt;int,0,0,0,0,0,0,1&gt; angle;</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef =
boost::mpl::vector_c&lt;int,0,1,-1,0,0,0,0&gt; velocity; =C2=A0 =C2=A0 // l=
/t</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,1,-2,0,0,0,0&gt; acc=
eleration; // l/(t2)</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,1,1,=
-1,0,0,0,0&gt; momentum; =C2=A0 =C2=A0 // ml/t</font></div><div class=3D"gm=
ail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 typedef boost:=
:mpl::vector_c&lt;int,1,1,-2,0,0,0,0&gt; force; =C2=A0 =C2=A0 =C2=A0 =C2=A0=
// ml/(t2)</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif">=C2=A0 =C2=A0 typedef boost::mpl::vector_c&lt;int,0,0,0,0,0,0,0&=
gt; scalar;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 template &lt;class T, class D=
imensions&gt;</font></div><div class=3D"gmail_default"><font face=3D"tahoma=
, sans-serif">=C2=A0 =C2=A0 class quantity</font></div><div class=3D"gmail_=
default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div=
 class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 pu=
blic:</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-s=
erif">=C2=A0 =C2=A0 =C2=A0 explicit quantity (T val)=C2=A0</font></div><div=
 class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 : val (val)</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 {}</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 temp=
late &lt;class OtherDimensions&gt;</font></div><div class=3D"gmail_default"=
><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity (quantity&=
lt;T, OtherDimensions&gt; const&amp; other)</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 : v=
al (other.value ()) {</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 BOOST_MPL_ASSERT( (boos=
t::mpl::equal&lt;Dimensions, OtherDimensions&gt;));</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 }=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 =C2=A0 T value () const { return val; }</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 privat=
e:</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 =C2=A0 T val;</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 };</font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 template &lt;class T, class D&gt;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity&lt;T, D&gt;=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 operator + (quantity&lt;T, D&gt; x, quantity&lt;T, D&gt; y )=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt;(x.value (=
) + y.value ());</font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 }</font></div><div class=3D"gmail_default"><=
font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 template=
 &lt;class T, class D&gt;</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity&lt;T, D&gt;</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
operator - (quantity&lt;T, D&gt; x, quantity&lt;T, D&gt; y )</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
{</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif=
">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt;(x.value () - y.value ())=
;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif=
">=C2=A0 =C2=A0 }</font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 template &lt;class T, c=
lass D1, class D2&gt;</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity &lt;</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 T=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 , typename boost::mpl::transform&lt;</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 D1, D2, boost::mpl::plus&lt;</font></div><div class=3D"gmail_default=
"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placeholders::_2&gt; &gt;:=
:type=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 &gt;</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 operator* (quantity&lt;T, D1&g=
t; x, quantity &lt;T, D2&gt; y)</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div class=3D"g=
mail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 typede=
f typename boost::mpl::transform&lt;</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 D1, D2, bo=
ost::mpl::plus&lt;</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 boost::mpl::placeholders::_1</font></div><div class=3D"gmail_default=
"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placeholders::_2&gt; &gt;::type D;</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantity&lt;T, D&gt; (x.val=
ue () * y.value ());</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 temp=
late &lt;class T, class D1, class D2&gt;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 quantity &lt;</font>=
</div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0 =C2=A0 T</font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 , typename boost::mpl::transform&lt;</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 D1, D2, boost::mpl::minus&lt;</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 boost::mpl::placeholders::_1</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placehol=
ders::_2&gt; &gt;::type=C2=A0</font></div><div class=3D"gmail_default"><fon=
t face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 &gt;</font></div><div class=3D"=
gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 operator/ (q=
uantity&lt;T, D1&gt; x, quantity &lt;T, D2&gt; y)</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 typedef typename boost::mpl::transform&lt;</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 D1, D2, boost::mpl::minus&lt;</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 boost::mpl::placeholders::_1</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 , boost::mpl::placeholders::_=
2&gt; &gt;::type D;</font></div><div class=3D"gmail_default"><font face=3D"=
tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"gmail_def=
ault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 return quantit=
y&lt;T, D&gt; (x.value () / y.value ());</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=
=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 // -- test</font></div><div class=3D"gmail_default"><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</font></div><div class=3D"=
gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt=
;iostream&gt;</font></div><div class=3D"gmail_default"><div class=3D"gmail_=
default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 #include &lt;limit=
s&gt;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-s=
erif">=C2=A0 =C2=A0 #include &lt;cassert&gt;</font></div></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 int main ()</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 {</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;=
float, mass&gt; m (5.0f);</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, accelerat=
ion&gt; a(9.8f);</font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, force&gt; f =3D m =
* a;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-se=
rif">=C2=A0 =C2=A0 =C2=A0 quantity&lt;float, mass&gt; m2 =3D f / a;</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 =C2=A0 assert ((std::abs ((m2 - m).value ())) &l=
t;=3D std::numeric_limits&lt;double&gt;::epsilon ());</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0=C2=A0</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 return 0;</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div><div class=3D"gm=
ail_default"><font face=3D"tahoma, sans-serif"><br></font></div><div style=
=3D"font-family:tahoma,sans-serif"></div></div></div>
</blockquote></div><br></div>

--047d7bdc0c84dd2a8a05058dac36--
