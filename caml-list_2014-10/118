Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 3BDC17F02D
	for <caml-list@sympa.inria.fr>; Sun, 19 Oct 2014 21:06:16 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.214.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.214.180 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f180.google.com) identity=helo;
  client-ip=209.85.214.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-ob0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aj0BALIKRFTRVda0m2dsb2JhbABbg2FYBIMCxyGBbIdSAoEHBxYBEQEBAQEBBgsLCRQuhAIBAQEDARIRBBkBGx0BAwELBgUHBA0qAgIiAREBBQEcBhMIGogIAQMJCJ8vboswgXKDEIgQChknDWeFSgEBAQEGAQEBAQEXAQUOkEMHgneBVAWTB4M/hxOBMDyNX4JWggwYKYNogUU7L4JLAQEB
X-IPAS-Result: Aj0BALIKRFTRVda0m2dsb2JhbABbg2FYBIMCxyGBbIdSAoEHBxYBEQEBAQEBBgsLCRQuhAIBAQEDARIRBBkBGx0BAwELBgUHBA0qAgIiAREBBQEcBhMIGogIAQMJCJ8vboswgXKDEIgQChknDWeFSgEBAQEGAQEBAQEXAQUOkEMHgneBVAWTB4M/hxOBMDyNX4JWggwYKYNogUU7L4JLAQEB
X-IronPort-AV: E=Sophos;i="5.04,749,1406584800"; 
   d="scan'208";a="101916910"
Received: from mail-ob0-f180.google.com ([209.85.214.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 19 Oct 2014 21:06:15 +0200
Received: by mail-ob0-f180.google.com with SMTP id va2so2867743obc.11
        for <caml-list@inria.fr>; Sun, 19 Oct 2014 12:06:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=7MbnC4r6EuKz1FeBBilUYsPf5b+8jZdovLco6poZxgw=;
        b=tUjGKTBn1T7bm/E4EWygBs4YhnXc0EIREPX1ZGMVQhwHFAUn+kXkarrSmws6HOYN0j
         7qpD1bR3w8BMijS5B5U4FbKr6iD0LT6a4sLKgR1R93IthzPn08JTlCyiIq8P6CmNDril
         rl7JgfguexsbsEIizJuJU2cCQGqj4AEFYPhpYQSum1zq3b6hnYAOCzwyzyCZxJmXLtoW
         XLXNVZnANnmYg/8lCKi4vhaTH5tllXGrChjwnsJX83BKPy7MAubJc6A+Mgqot0QQMXqK
         SoJcBwhF82CyzhDPJ9VEY06KnTkeWpLRpcyjMbU5NZDHNciUK2UGiyHWvIfl7iSIhd1n
         drRQ==
X-Received: by 10.182.95.9 with SMTP id dg9mr3162391obb.44.1413745574346; Sun,
 19 Oct 2014 12:06:14 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.76.105.196 with HTTP; Sun, 19 Oct 2014 12:05:33 -0700 (PDT)
In-Reply-To: <54440936.3010001@coherentgraphics.co.uk>
References: <5443FCE6.50206@coherentgraphics.co.uk> <CAPFanBGJgrBDECesJDUZiXRSwp=ZgbDtRCLjXpKEh8j_7WQV_Q@mail.gmail.com>
 <54440936.3010001@coherentgraphics.co.uk>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sun, 19 Oct 2014 21:05:33 +0200
Message-ID: <CAPFanBFZ+SK8M+u=+c8hG_BgtHZkQX7VFcXhqhdcnYXkDv4uJA@mail.gmail.com>
To: John Whitington <john@coherentgraphics.co.uk>
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e01538a12c3056c0505cb4ac5
Subject: Re: [Caml-list] ANN: exn-source - exception backtraces with source
 code printing

--089e01538a12c3056c0505cb4ac5
Content-Type: text/plain; charset=UTF-8

> perhaps it's just in need of clarification in the documentation.

My understanding is that uncaught exception raised by the handler are
dropped/ignored.
Would you mind creating a mantis issue ( http://caml.inria.fr/mantis/ ) so
that we can discuss improving the documentation there?

Note that a way to side-step this issue entirely would be for your API to
provide something in the style of Printexc.print
  handle : ('a -> 'b) -> 'a -> 'b
that handles any exception raised by the function application. Users would
be able to call this explicitly around their main processing loop (which is
the place where they often already handle exception-handling) instead of
delegating to a possibly-fragile mutable final handler.

My understanding is that exn-source currently operates by a side-effect at
link-time. I would rather have the choice between an explicit (unit ->
unit) registration function, and a side-effect-free handling function as
above.

On Sun, Oct 19, 2014 at 8:55 PM, John Whitington <
john@coherentgraphics.co.uk> wrote:

> Hi Gabriel,
>
> Gabriel Scherer wrote:
>
>>  > (we can't use exceptions at all inside a backtrace handler, for
>> example)
>>
>> I'm a bit surprised by this. Part of the point of reifying traces into
>> datatypes (raw_backtrace, backtrace_slot) was to make them persistent.
>> set_uncaught_exception_handler is passed a raw trace that should not be
>> mutated by raising new exceptions. What breaks if you use exceptions
>> inside a backtrace handler?
>>
>
> To quote the documentation for set_uncaught_exception_handler: "If fn
> raises an exception, it is ignored."
>
> This is a bit ambiguous -- it might mean
>
> a) The uncaught exception handler you register won't get called from
> inside itself in the case of an uncaught exception. Nor will any such
> exceptions be handled by the standard exception handler; or
>
> b) Exceptions in the handler literally have no effect.
>
> I've done a little test just now, and it seems to be (a), so perhaps it's
> just in need of clarification in the documentation.
>
> (It might be nice to have, for development, an option to have the default
> exception handler remain active, so it reports any exceptions escaping from
> the user-installed exception handler).
>
>
> Thanks,
>
> --
> John Whitington
> Director, Coherent Graphics Ltd
> http://www.coherentpdf.com/
>
>

--089e01538a12c3056c0505cb4ac5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div><div>&gt; perhaps it&#39;s just in nee=
d of clarification in the documentation.<br><br>My understanding is that un=
caught exception raised by the handler are dropped/ignored.<br>Would you mi=
nd creating a mantis issue ( <a href=3D"http://caml.inria.fr/mantis/">http:=
//caml.inria.fr/mantis/</a> ) so that we can discuss improving the document=
ation there?<br></div><br>Note that a way to side-step this issue entirely =
would be for your API to provide something in the style of Printexc.print<b=
r></div></div>=C2=A0 handle : (&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39=
;b<br></div>that handles any exception raised by the function application. =
Users would be able to call this explicitly around their main processing lo=
op (which is the place where they often already handle exception-handling) =
instead of delegating to a possibly-fragile mutable final handler.<br><br><=
/div>My understanding is that exn-source currently operates by a side-effec=
t at link-time. I would rather have the choice between an explicit (unit -&=
gt; unit) registration function, and a side-effect-free handling function a=
s above.<br>
</div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Sun, Oct=
 19, 2014 at 8:55 PM, John Whitington <span dir=3D"ltr">&lt;<a href=3D"mail=
to:john@coherentgraphics.co.uk" target=3D"_blank">john@coherentgraphics.co.=
uk</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hi Gabriel,<span=
 class=3D""><br>
<br>
Gabriel Scherer wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
=C2=A0&gt; (we can&#39;t use exceptions at all inside a backtrace handler, =
for example)<br>
<br>
I&#39;m a bit surprised by this. Part of the point of reifying traces into<=
br>
datatypes (raw_backtrace, backtrace_slot) was to make them persistent.<br>
set_uncaught_exception_handler is passed a raw trace that should not be<br>
mutated by raising new exceptions. What breaks if you use exceptions<br>
inside a backtrace handler?<br>
</blockquote>
<br></span>
To quote the documentation for set_uncaught_exception_<u></u>handler: &quot=
;If fn raises an exception, it is ignored.&quot;<br>
<br>
This is a bit ambiguous -- it might mean<br>
<br>
a) The uncaught exception handler you register won&#39;t get called from in=
side itself in the case of an uncaught exception. Nor will any such excepti=
ons be handled by the standard exception handler; or<br>
<br>
b) Exceptions in the handler literally have no effect.<br>
<br>
I&#39;ve done a little test just now, and it seems to be (a), so perhaps it=
&#39;s just in need of clarification in the documentation.<br>
<br>
(It might be nice to have, for development, an option to have the default e=
xception handler remain active, so it reports any exceptions escaping from =
the user-installed exception handler).<div class=3D"HOEnZb"><div class=3D"h=
5"><br>
<br>
Thanks,<br>
<br>
-- <br>
John Whitington<br>
Director, Coherent Graphics Ltd<br>
<a href=3D"http://www.coherentpdf.com/" target=3D"_blank">http://www.cohere=
ntpdf.com/</a><br>
<br>
</div></div></blockquote></div><br></div>

--089e01538a12c3056c0505cb4ac5--
