Return-Path: <info@gerd-stolpmann.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C41A07F02D
	for <caml-list@sympa.inria.fr>; Mon,  6 Oct 2014 12:03:16 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=pra;
  client-ip=212.227.126.131;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=mailfrom;
  client-ip=212.227.126.131;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mout.kundenserver.de) identity=helo;
  client-ip=212.227.126.131;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="postmaster@mout.kundenserver.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArMBACtoMlTU436Dm2dsb2JhbABfg2FYzBIKh00CgQQWAREBAQEBAQYLCwkULIQEAQEDAScuJAULC0ZXBhMJEogbDAmrYyFvDZJ6GIothTU9JgeCNlOBQgWGK4wFhACIOzuFcQWKI4VpIIFbagGCSQEBAQ
X-IPAS-Result: ArMBACtoMlTU436Dm2dsb2JhbABfg2FYzBIKh00CgQQWAREBAQEBAQYLCwkULIQEAQEDAScuJAULC0ZXBhMJEogbDAmrYyFvDZJ6GIothTU9JgeCNlOBQgWGK4wFhACIOzuFcQWKI4VpIIFbagGCSQEBAQ
X-IronPort-AV: E=Sophos;i="5.04,663,1406584800"; 
   d="asc'?scan'208";a="99573389"
Received: from mout.kundenserver.de ([212.227.126.131])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 06 Oct 2014 12:03:16 +0200
Received: from office1.lan.sumadev.de (dslb-178-004-068-137.178.004.pools.vodafone-ip.de [178.4.68.137])
	by mrelayeu.kundenserver.de (node=mreue004) with ESMTP (Nemesis)
	id 0MJYNz-1Xd09523Cd-0038Yc; Mon, 06 Oct 2014 12:03:12 +0200
Received: from [192.168.10.100] (unknown [5.146.48.81])
	by office1.lan.sumadev.de (Postfix) with ESMTPSA id AF62FDC270;
	Mon,  6 Oct 2014 12:03:11 +0200 (CEST)
Message-ID: <1412589781.5797.177.camel@e130>
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml users <caml-list@inria.fr>
Date: Mon, 06 Oct 2014 12:03:01 +0200
In-Reply-To: <CAPFanBEXe1rVifeL2fYH-hbcLXJMf3zWjqP3-K1Zhhh7L7p61Q@mail.gmail.com>
References: 
	<CAPFanBEXe1rVifeL2fYH-hbcLXJMf3zWjqP3-K1Zhhh7L7p61Q@mail.gmail.com>
Content-Type: multipart/signed; micalg="pgp-sha1"; protocol="application/pgp-signature";
	boundary="=-iqtapnS8NW95PTZuYvCt"
X-Mailer: Evolution 3.10.4-0ubuntu1 
Mime-Version: 1.0
X-Provags-ID: V02:K0:9vPNDVLuU7Pyk9hRG9M78hm8xmU8ZyWHOCspjLDJC+L
 dd+CHvmbi6y/F7Tue/uco6JqNznHyGD2uk6XB3hkc02vQQzKEe
 7zF1Nd4Ss6kdBMo2K6EM2atVet3JLiCcHK1vYVhjEvSJWGiP+D
 E4zesr+TxO57i7joWVJwAESukuQVuEV0Rwp8EwyJUx6tbHKlmC
 E7pXhUrywjTcba12SodtH9OomNr8yxfxG/JkFyNi73L3XAilh7
 xOclSb+CYZRANgXo4/7SgVpNgKBfISvsai5jlfZo9YUuTLLPUL
 aVuPXpqiZ5Ag2MmRxaz/GilITOW4TPkEGn1nOCkgFs1Qw5Z0/p
 YxJbsjBCBbX+J/e7s+/YfdU5t6BdS3X+jE8ValyVg
X-UI-Out-Filterresults: notjunk:1;
Subject: Re: [Caml-list] Feedback on -safe-string migration attempts


--=-iqtapnS8NW95PTZuYvCt
Content-Type: text/plain; charset="ISO-8859-15"
Content-Transfer-Encoding: quoted-printable

Am Sonntag, den 05.10.2014, 19:19 +0200 schrieb Gabriel Scherer:
> The question is, when converting an existing library interface, how to
> decide whether any given part of the API should remain a "string" or
> be moved to "bytes" (
> http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bytes.html ) -- or
> maybe provide two functions, one for each type.
>=20
> # The problem
>=20
> The new distinction between bytes and string, added in 4.02, actually
> plays on two different intuitions:
> - bytes represents (1) mutable (2) sequences of bytes
> - string represents (1) immutable (2) end-user text (which happen to
> be represented as sequence of bytes, but we could think of
> representing them as eg. Javascript strings in the future and with
> js_of_ocaml, or with ropes, etc.)

Well, I think there are different views on this: In the OCaml stdlib
there is no distinction between character and byte, and it is left to
the user how to represent text (e.g. to use multibyte UTF-8 text). From
that point of view it is clear that "string" is for immutable data, no
matter weather text or bytes, and "bytes" is for mutable data of either
kind. However, as you found out this is sometimes impractical. If you
have some data you don't want to draw a somewhat arbitrary line between
mutable and immutable appearances of it.

I also will have to convert a fairly amount of code, and esp. for
Ocamlnet I really don't see how to do this cleanly, because the kind of
data suddenly changes. For instance the HTTP client reads bytes into a
bytes buffer, but the HTTP headers have more the characteristics of
text.

> The problem is that aspects (1) and (2) are somewhat orthogonal. I
> don't think we're interested in mutable end-user texts, but I
> encountered a few notable cases of (1) immutable (2) sequences of
> bytes. The problem is: should those be typed as string, or bytes?
>=20
> (There may be a difference between functions that assume their
> arguments are immutable, and function that simply guarantee that they
> won't themselves mutate their arguments. For now I'll assume those two
> cases count as "immutable sequences of bytes").
>=20
> Right now, the standard library itself does a strange job of making a
> choice. The Marshal module (
> http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html )
> appears to favor the choice of "bytes" for non-mutated byte sequences
> (eg. data_size, total_size), while the Digest module (
> http://caml.inria.fr/pub/docs/manual-ocaml/libref/Digest.html )
> remained in the land of strings.

I also noticed that some functionality is now available over two
interfaces. In particular, there are now functions for writing from a
bytes buffer and for writing from a string buffer (e.g. Unix.write and
Unix.write_substring). My thinking is that all stdlib functions should
now be provided in that manner.

> # An ideal solution
>=20
> In an ideal world, I claim the best solution would be the following.
> Given that it is clear (to me) that mutable byte sequences and
> immutable byte sequences share the same representation, we should use
> phantom type to distinguish them:
>=20
>   type mut
>   type immut
>   type 'a bytes
>=20
>   val get : 'a bytes -> int -> char
>   val set : mut bytes -> int -> char
>   Digest.t =3D immut bytes
>=20
> Using phantom types had been considered at the time of the
> bytes/string split, but rejected because suddenly adding polymorphism
> to string literals and string functions broke a lot of code ("The type
> of this expression, ..., contains a type variable that cannot be
> generalized", or suddenly-polymorphic method return types). More
> importantly, we do not want to enforce string and bytes to always have
> the same underlying representation. Neither arguments hold for
> mutable/immutable bytes.

A new variant! The problem is still that it introduces polymorphisms.

For OCamlnet I was more thinking of providing all internal string
functionality also with string_reader interface. A string_reader is a
little abstraction on top of string/bytes/char bigarray that abstracts
the representation, and provides the most needed functions (at least
what String/Bytes have, plus extensions like searching, conversions,
maybe even regexps). I think that's the missing piece to make the
"bytes" change acceptable:

module String_reader : sig
  type t
  val for_string : string -> t
  val for_bytes : bytes -> t
  val for_memory : (char,...,...) Bigarray.Array1.t -> t

  val get : t -> int -> char
  val sub_string : t -> int -> int -> string
  val sub_bytes : t -> int -> int -> bytes
  val blit_to_bytes : t -> int -> bytes -> int -> int -> unit
  val blit_to_memory : t -> int -> (char,...) Bigarray.Array1.t -> int
-> int -> unit

  val index : t -> char -> int

  val search_leftmost : t -> t -> int -> int
  val search_rightmost : t -> t -> int -> int

  val get_int32_le : t -> int -> int32
  val get_int32_be : t -> int -> int32
  val get_int64_le : t -> int -> int64
  val get_int64_be : t -> int -> int64

  (* plus more ... not sure yet what to cover exactly *)

end


Gerd


>=20
>=20
> # Going forward
>=20
> It is probably a bit too late to change the "bytes" type in the
> compiler standard library. (Well, feel free to disagree on this.)
> And maybe we don't need to: just as more featureful, higher-level
> libraries have been developed outside the OCaml distribution, we could
> think of having a safer, higher-level phantom representation of byte
> sequences, as an external library.
>=20
> Regardless of what we do about this, I would recommend that immutable
> byte sequences (things that are, by design, not text) be represented
> as "bytes" rather than "string"=B9. If/whenever a consensus on a safer
> phantom representation appear, it will be possible to convert to it
> without changing the representation.
> Similarly, if your bytes-taking function does not mutate or capture
> its input, you should mention it informally in its
> specification/documentation (and maybe express this with a phantom
> type later): this is important to reason about, for example, (un)safe
> conversions on those byte sequences.
>=20
> =B9: a dissenting opinion could suggest that it is more important to get
> the type-checker help re. mutability than expose the distinction
> between byte-level data and text (which should be an abstract type in
> some UTF8 library anyway), and thus immutable anything should rather
> be "string". I think the phantom type approach is superior, and we
> should design interfaces with it in mind.
>=20

--=20
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
My OCaml site:          http://www.camlcity.org
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
------------------------------------------------------------


--=-iqtapnS8NW95PTZuYvCt
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAABAgAGBQJUMmjVAAoJEAaM4b9ZLB5TiucH/2lEBNJHPTmvwyOKDjA7m/z9
n9gM1Ov5XrOueSQRrrIll7atgXQD3zR16fkshetBtkubekvbXbKzu+nJ+6aK/M9x
qGbBpG9C0WxCPRpU8eP+uTq8BSVKzWFQFbdZKL6kexd2PqWUYq4wmrp4rx6TZC/8
hKuWgV0awZck2b3LsUF7SmY3kYvzZ+dm/WkMO1c9TZHRFiggnVRXftRlPY0fLoA6
DUrqlzh4WUS+u7UOhuJAqyTfIwafZjJ9xNSzuxgu4Jz06FFukWvam7IFR3lx6j1F
UO2qrmTSr8x8ac6d59r+ooXWblhxqATr47C1C19IpwPiiGyPgZl1xjcVGtNmytI=
=Y6Zr
-----END PGP SIGNATURE-----

--=-iqtapnS8NW95PTZuYvCt--

