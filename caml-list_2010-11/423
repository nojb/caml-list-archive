Return-Path: <examachine@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id A3D69BC57
	for <caml-list@yquem.inria.fr>; Tue, 30 Nov 2010 16:17:23 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjECAHek9EzRVdU0k2dsb2JhbACUVYYrAYc2UwgVAQEBAQkJCgkRAx+pQ4lkghiFRS6IVgEBAwWFQgSKYg
X-IronPort-AV: E=Sophos;i="4.59,280,1288566000"; 
   d="scan'208";a="68862124"
Received: from mail-yw0-f52.google.com ([209.85.213.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 30 Nov 2010 16:17:22 +0100
Received: by ywf9 with SMTP id 9so2716171ywf.39
        for <caml-list@yquem.inria.fr>; Tue, 30 Nov 2010 07:17:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=IoAqYB753oUXU6lunGs1LoVlD/8gXgI+/5GQAqJmOdE=;
        b=eW+ifdPiIGKq36ILERc4f33+nLaCLkgmLY+MUrgPytbIWx6WsWETFUOuWbOMO07YDa
         CE0TEvHP2YJC7B9+cmipeCK5s4ZHi9nb5h4n+/QEXdP1cYDFfQ0PSh2l7k4buAcLoX+c
         jgOHWGHU8P2eYILYmuuNn0tFummyobx1xsNvk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=XX80MW3Zu++gRyxbpCapHH8mS0JW1HbbWEuqhOj2tpkwXpreMuNiLdLiXQEtjHUndE
         DRZYty9/cO09TJe1LJImJCgL251lX5j0wSnvbV8MCd52dKe9f6Jgwbjbt5KYggJlA5ef
         XE70snHHPrrCX1gLvmpoCwWVcrLdNQKCDnbNs=
MIME-Version: 1.0
Received: by 10.90.87.9 with SMTP id k9mr11214030agb.150.1291130241845; Tue,
 30 Nov 2010 07:17:21 -0800 (PST)
Received: by 10.90.211.10 with HTTP; Tue, 30 Nov 2010 07:17:21 -0800 (PST)
In-Reply-To: <20101130142941.GG1637@siouxsie>
References: <fa.B9mcuN46iEGhXlge41VUCLz69+Y@ifi.uio.no>
	<fa.D3cDWzaD9Uu03+KvekpwpBGCx7o@ifi.uio.no>
	<fa.xsCCCeDYPj8J16i9UrdqxoOIQ0Y@ifi.uio.no>
	<fa.SW2Swldk88Bs5ujaNHT8Yh4bXkg@ifi.uio.no>
	<fa.V+M6RbukE/w/Aftpwxkx2MvkxlU@ifi.uio.no>
	<fa.+OkqNL3AB4+5LA8wOnQD9WS59QQ@ifi.uio.no>
	<4CF50470.802@planet.nl>
	<20101130142941.GG1637@siouxsie>
Date: Tue, 30 Nov 2010 17:17:21 +0200
Message-ID: <AANLkTi=GQR7p27d_ORSFLcV+h3dc1Je46d8fe7hnoaK7@mail.gmail.com>
Subject: Re: Threading and SharedMem (Re: [Caml-list] Re: Is OCaml fast?)
From: Eray Ozkural <examachine@gmail.com>
To: oliver@first.in-berlin.de
Cc: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016361e88a66c88fb049646afec
X-Spam: no; 0.00; threading:01 ocaml:01 eray:01 ozkural:01 in-berlin:01 ocaml:01 compiler:01 runtime:01 runtime:01 vars:01 substituted:01 alloc:01 malloc:01 eray:01 ozkural:01 

--0016361e88a66c88fb049646afec
Content-Type: text/plain; charset=ISO-8859-1

On Tue, Nov 30, 2010 at 4:29 PM, <oliver@first.in-berlin.de> wrote:
>
> And here I see a thread-specific GC as a solution.
>
> It seems to me that this way was not thought about before,
> and people thought about changing the GC to be able to handle multiple
> threads.
> Instead I mean: each thread that is not the global thread, get's it's own
> thread-specific GC.
>
> Maybe that can be implemented much easier.
> But I've not looked into the Ocaml internals to say: yes, this can be done
> comparingly easy, or to say: oh no, that's more complex than changing the
> GC and make it
> handle all the threads from the main thread.
>
> I just would assume that seperate threads would be easier to handle.
>
> But maybe there are other restrictions in the language or the compiler
> that block this attempt.
>
>
Not anything that I have yet found but I am curious about the opinion of the
runtime designers as well. There seem to be some global variables in the
runtime, which isn't the best way to write it anyway, if all vars are local
then it becomes easier to embed, thread and fork as you like. That is to
say, such a level of virtualization allows the global lock to be substituted
with whatever locking the system alloc functions have, i.e. when many malloc
requests overlap.

Except that, the user has to explicitly sync his mem accesses so I don't
think there could be any problem. And no other part of the library is
thread-safe either (which is great for performance!). So I think each thread
can have its own GC. Perhaps there is an obstacle I have not yet noticed?

Best,

-- 
Eray Ozkural, PhD candidate.  Comp. Sci. Dept., Bilkent University, Ankara
http://groups.yahoo.com/group/ai-philosophy
http://myspace.com/arizanesil http://myspace.com/malfunct

--0016361e88a66c88fb049646afec
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Tue, Nov 30, 2010 at 4:29 PM,  <span dir=3D"l=
tr">&lt;<a href=3D"mailto:oliver@first.in-berlin.de">oliver@first.in-berlin=
.de</a>&gt;</span> wrote:<blockquote class=3D"gmail_quote" style=3D"margin:=
0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">

And here I see a thread-specific GC as a solution.<br>
<br>
It seems to me that this way was not thought about before,<br>
and people thought about changing the GC to be able to handle multiple thre=
ads.<br>
Instead I mean: each thread that is not the global thread, get&#39;s it&#39=
;s own<br>
thread-specific GC.<br>
<br>
Maybe that can be implemented much easier.<br>
But I&#39;ve not looked into the Ocaml internals to say: yes, this can be d=
one<br>
comparingly easy, or to say: oh no, that&#39;s more complex than changing t=
he GC and make it<br>
handle all the threads from the main thread.<br>
<br>
I just would assume that seperate threads would be easier to handle.<br>
<br>
But maybe there are other restrictions in the language or the compiler<br>
that block this attempt.<br>
<div class=3D"im"><br></div></blockquote><div><br></div><div>Not anything t=
hat I have yet found but I am curious about the opinion of the runtime desi=
gners as well. There seem to be some global variables in the runtime, which=
 isn&#39;t the best way to write it anyway, if all vars are local then it b=
ecomes easier to embed, thread and fork as you like. That is to say, such a=
 level of virtualization allows the global lock to be substituted with what=
ever locking the system alloc functions have, i.e. when many malloc request=
s overlap.</div>
<div><br></div><div>Except that, the user has to explicitly sync his mem ac=
cesses so I don&#39;t think there could be any problem. And no other part o=
f the library is thread-safe either (which is great for performance!). So I=
 think each thread can have its own GC. Perhaps there is an obstacle I have=
 not yet noticed?</div>
<div><br></div><div>Best,</div></div><br>-- <br>Eray Ozkural, PhD candidate=
.=A0 Comp. Sci. Dept., Bilkent University, Ankara<br><a href=3D"http://grou=
ps.yahoo.com/group/ai-philosophy">http://groups.yahoo.com/group/ai-philosop=
hy</a><br>
<a href=3D"http://myspace.com/arizanesil">http://myspace.com/arizanesil</a>=
 <a href=3D"http://myspace.com/malfunct">http://myspace.com/malfunct</a><br=
><br>

--0016361e88a66c88fb049646afec--

