Return-Path: <goswin-v-b@web.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 041C0BBAF
	for <caml-list@yquem.inria.fr>; Mon,  8 Nov 2010 17:07:34 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhkHAGuv10zZSMDqY2dsb2JhbACiCQsXCwgIEAUfvTiFSASFEIhP
X-IronPort-AV: E=Sophos;i="4.58,314,1286143200"; 
   d="scan'208";a="86535182"
Received: from fmmailgate03.web.de ([217.72.192.234])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 08 Nov 2010 17:07:33 +0100
Received:  from smtp08.web.de  ( [172.20.5.216])
	by fmmailgate03.web.de (Postfix) with ESMTP id 5443116F08EF1;
	Mon,  8 Nov 2010 17:07:33 +0100 (CET)
Received: from [78.43.204.177] (helo=frosties.localdomain)
	by smtp08.web.de with asmtp (TLSv1:AES256-SHA:256)
	(WEB.DE 4.110 #24)
	id 1PFUFp-00010b-00; Mon, 08 Nov 2010 17:07:33 +0100
Received: from mrvn by frosties.localdomain with local (Exim 4.72)
	(envelope-from <goswin-v-b@web.de>)
	id 1PFUFo-0005KV-QX; Mon, 08 Nov 2010 17:07:32 +0100
From: Goswin von Brederlow <goswin-v-b@web.de>
To: Daniel de Rauglaudre <daniel.de_rauglaudre@inria.fr>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] MLbrot: Mandelbrot Set in OCaml
References: <20101108150313.GA11054@yquem.inria.fr>
Date: Mon, 08 Nov 2010 17:07:32 +0100
In-Reply-To: <20101108150313.GA11054@yquem.inria.fr> (Daniel de Rauglaudre's
	message of "Mon, 8 Nov 2010 16:03:13 +0100")
Message-ID: <8739rbkddn.fsf@frosties.localnet>
User-Agent: Gnus/5.110009 (No Gnus v0.9) XEmacs/21.4.22 (linux, no MULE)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: goswin-v-b@web.de
X-Sender: goswin-v-b@web.de
X-Provags-ID: V01U2FsdGVkX1+qIQgzSIK5LWEFpueQS9A8Cr3SIofKbeqm0iAF
	7ekcm8DCq449bMbCYMNDKqCOKBRrk3xyc9Zoxa7G8kq14Mrt6C
	cwPhFpquA=
X-Spam: no; 0.00; ocaml:01 rauglaudre:01 rauglaudre:01 lablgtk:01 lablgtk:01 ocaml:01 camlp:01 mpz:01 -help:01 iteration:01 iterated:01 iteration:01 homeip:01 zoom:98 zoom:98 

Daniel de Rauglaudre <daniel.de_rauglaudre@inria.fr> writes:

> Hi everybody!
>
> New release of MLbrot: 1.00
>
> MLbrot is a program allowing to explore the Mandelbrot Set and produce
> nice fractal images. With some extra work, can produce videos. Can be
> helped by other computers, via internet, to speed up images calculations.
>
> Interfaced with 3 graphic toolkits: Lablgtk2, OpenGL and Olibrt. You
> can choose the one(s) you want at configure time, or let the 'configure'
> shell to select the ones it finds.
>
> Best interface is with Lablgtk2 (it has menus and progress bars).
>
> Web site and download at:
>    http://pauillac.inria.fr/~ddr/mlbrot/
>
> You need OCaml and Camlp5 to compile.
> You need at least one library installed: Lablgtk2, OpenGL or Olibrt.
> Very useful library too: GMP/MPZ to display deep images (zoom > 2^46).
>
> Documentation not yet done. Just launch it, try out option -help
> and/or ask me.
>
> Enjoy!

Only looked at the pictures so far but they do look good. I'm missing
some screenshots though. How does the interface look like? I assume you
have some way to select a part of the image to zoom?

It would also be nice to know a bit more about what drawing methods you
support. Do you just compute every pixel or do you support guessing,
boundary trace, tesseracting? Also do you have a coloring mode using
distance estimation? E.g. color all points < 0.5 pixels distance from
the M-Set white.

Can you zoom and refine the image like xaos does?

Do you support the single orbital iteration method? That puts a 3x3
points grid over the image plus 4 control points. Points of the image
are aproximated from the 9 grid points. The 13 points are iterated a few
iterations as long as the 4 reference points are close to approximating
the same points. If the error becomes to great you go back an iteration,
subdivide the grid into 4 parts, approximate the missing point and
repeat for each subgrid. Esspecially on dep zooms this can speed up
calculations by magnitudes since the first few thousand iterations of
each point will be done by calculating only 14 points and approximating.


You say you are using OpenGL, so where are the 3D images?

I've converted some 20 year old code into ocaml a while back that
generates 3D images. Putting the height map into OpenGL and render it
through that would probably improve the quality:
http://mrvn.homeip.net/mandelbrot/

If you are interested I can share the algorithm for the height
calculation (which is all you really need) and example source for this
(just don't have it at hand at the moment or I would just paste it
here).

MfG
        Goswin

