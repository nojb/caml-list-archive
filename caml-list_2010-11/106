Return-Path: <goswin-v-b@web.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 32C17BC57
	for <caml-list@yquem.inria.fr>; Tue, 16 Nov 2010 11:02:48 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnECAGfl4UzZSMDjgmdsb2JhbACiWxUBAQsLCAcTAx++SIVLBI1kiAs
X-IronPort-AV: E=Sophos;i="4.59,205,1288566000"; 
   d="scan'208";a="78106830"
Received: from fmmailgate02.web.de ([217.72.192.227])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 16 Nov 2010 11:02:47 +0100
Received:  from smtp03.web.de  ( [172.20.0.65])
	by fmmailgate02.web.de (Postfix) with ESMTP id 9F489183CE5A8;
	Tue, 16 Nov 2010 11:02:29 +0100 (CET)
Received: from [78.43.204.177] (helo=frosties.localdomain)
	by smtp03.web.de with asmtp (TLSv1:AES256-SHA:256)
	(WEB.DE 4.110 #24)
	id 1PIIMv-0001gW-00; Tue, 16 Nov 2010 11:02:29 +0100
Received: from mrvn by frosties.localdomain with local (Exim 4.72)
	(envelope-from <goswin-v-b@web.de>)
	id 1PIIMu-0003OC-QK; Tue, 16 Nov 2010 11:02:28 +0100
From: Goswin von Brederlow <goswin-v-b@web.de>
To: Jianzhou Zhao <jianzhou@seas.upenn.edu>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Average cost of the OCaml GC
References: <AANLkTinaSS+QOCJ8AA9LMMM9OHZMKZ2NVQr9KY48XkK_@mail.gmail.com>
	<87bp5w1b47.fsf@frosties.localnet>
	<AANLkTinfyffP8CMj0R2B1qtH_PxE-MdUC-q5Ny_pDdgL@mail.gmail.com>
	<8739r78vsq.fsf@frosties.localnet>
	<AANLkTinepB+CydLrS5fPC4RzHikO5ANVkfDgQoaGk3_h@mail.gmail.com>
Date: Tue, 16 Nov 2010 11:02:28 +0100
In-Reply-To: <AANLkTinepB+CydLrS5fPC4RzHikO5ANVkfDgQoaGk3_h@mail.gmail.com>
	(Jianzhou Zhao's message of "Fri, 12 Nov 2010 12:27:40 -0500")
Message-ID: <87y68td1sb.fsf@frosties.localnet>
User-Agent: Gnus/5.110009 (No Gnus v0.9) XEmacs/21.4.22 (linux, no MULE)
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: goswin-v-b@web.de
X-Sender: goswin-v-b@web.de
X-Provags-ID: V01U2FsdGVkX19KR4gTuz59r/kdxALW8Ej0xAEXov9TVSaJMp2Z
	V2Tz9x0YCnrT4lWbxNGIeLmTD5arGmRe142E6HMk5YumS6wNP3
	eFj5NEKWo=
X-Spam: no; 0.00; ocaml:01 ocaml:01 'self:01 'self:01 alloc:01 alloc:01 pointers:01 'as:01 verbose:01 zhao:98 zhao:98 57%:98 57%:98 mfg:98 wrote:01 

Jianzhou Zhao <jianzhou@seas.upenn.edu> writes:

> On Thu, Nov 11, 2010 at 3:11 PM, Goswin von Brederlow <goswin-v-b@web.de> wrote:
>> Jianzhou Zhao <jianzhou@seas.upenn.edu> writes:
>>
>>> On Thu, Nov 11, 2010 at 4:08 AM, Goswin von Brederlow <goswin-v-b@web.de> wrote:
>>>> Jianzhou Zhao <jianzhou@seas.upenn.edu> writes:
>>>>
>>>>> Hi,
>>>>>
>>>>> What is the average cost of the OCaml GC? I have a program that calls
>>>>> 'mark_slice' in 57% of the total execution time, and calls
>>>>> 'sweep_slice' in 21% of the total time, reported by Callgrind, which
>>>>> is a profiling tool in Valgrind. 57% and 21% are the 'self cost' ---
>>>>> the cost of the function itself ('Self Cost'), rather than the cost
>>>>> including all called functions ('Inclusive Cost'). I guess
>>>>> 'mark_slice'  and  'sweep_slice'  are functions from OCaml GC. Are
>>>>> these numbers normal?
>>>>
>>>> Those numbers sound rather high to me.
>>>>
>>>>> My program calls both OCaml and C, which passes around C data types in
>>>>> between. I also doubt if I defined the interface in an 'unefficient'
>>>>> way that slows down the GC. Are there any rules in mind to make GC
>>>>> work more efficiently?
>>>>
>>>> You can tune some of the GC parameters to suit your use case.
>>>>
>>>> Do you allocate custom types from C? In caml_alloc_custom(ops, size,
>>>> used, max) the used and max do influence the GC how often to run.
>>>
>>> Yes. The code uses caml_alloc_custom to create a lot of small objects
>>> (less then 8 bytes) frequently. The used and max are set to be
>>> default, 0 and 1. The manual says
>>>   http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#toc140
>>>
>>> /////////////////////
>>> If your finalized blocks contain no pointers to out-of-heap resources,
>>> or if the previous discussion made little sense to you, just take used
>>> = 0 and max = 1. But if you later find that the finalization functions
>>> are not called “often enough”, consider increasing the used / max
>>> ratio.
>>> //////////////////////
>>>
>>> Does this mean the default used and max let GC do finalization 'as
>>> slow as possible'? This does not seem to be the case if the costs 57%
>>> and 20% are too high.
>>
>> I think 0/1 gives you the least amount of GC runs.
>>
>>>> If you set them wrong you might trigger the GC too often.
>>>
>>> In which case could they be set 'wrong'? For example, if 'used' is not
>>> equal to the real amount of allocated data; or is there a range of
>>> 'max' given a used?
>>
>> A used = 1000000 would be wrong here. Your 0/1 setting look fine to me.
>
> Do we still have other methods to debug such problems? Is it possible
> to know when and where GC runs, say, the number of times GC works
> after a particular usr-defined function? If this is possible, I was
> wondering if we can see which function in my code behave wrong.

Only the interface the GC module exposes. You can turn the GC quite
verbose.

MfG
        Goswin

