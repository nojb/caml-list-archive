Return-Path: <benedikt.meurer@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 7AFD2BC57
	for <caml-list@yquem.inria.fr>; Mon, 29 Nov 2010 13:11:40 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AngCACIn80zRVdc0kGdsb2JhbACUfI15CBYBAQEJCQwHEQMfqEKLfAEFjUsBBIVH
X-IronPort-AV: E=Sophos;i="4.59,275,1288566000"; 
   d="scan'208";a="89597500"
Received: from mail-ew0-f52.google.com ([209.85.215.52])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 29 Nov 2010 13:11:40 +0100
Received: by ewy23 with SMTP id 23so1689240ewy.39
        for <caml-list@yquem.inria.fr>; Mon, 29 Nov 2010 04:11:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:content-type:mime-version
         :subject:from:in-reply-to:date:content-transfer-encoding:message-id
         :references:to:x-mailer;
        bh=Al2bKJprmok+Xr9m+RbF736OyGb83fw9vfxSeTNTfcs=;
        b=RFCC8KGSMtRqGtQ5GTaTBcDuv6aXjLTxSKwoOZ3gA9903AcEq/vcMCGel7gequYjDu
         vU364rvyalTndMB3BbZo4KcPUMGV0v/q2mqZJzxTtKzALhW+Uzmd+HFIamullWNqT+Ul
         Qvdx/ri4LeuolkPHZ6QJJtSksV+WZiOeaCHLs=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=content-type:mime-version:subject:from:in-reply-to:date
         :content-transfer-encoding:message-id:references:to:x-mailer;
        b=NxH3sBpTHU0I1dJgCQOSbAbZ4CU6JDZ2Guatj0Ed29zKUlEgEiw56NN1lOpLnmum1L
         FIY7oLEKb2yx/8jXzQbUShv4bNVuKNqy2hgGZKb++2MAfsa14fyz+RApZcFOfOZMF4ek
         ikcOY5BT4Wy6oNVptq1tCVT7fftcf6IFW2t1A=
Received: by 10.213.17.13 with SMTP id q13mr6609532eba.65.1291032699734;
        Mon, 29 Nov 2010 04:11:39 -0800 (PST)
Received: from bespin.kosmos.all (ip-95-223-170-32.unitymediagroup.de [95.223.170.32])
        by mx.google.com with ESMTPS id v51sm5078363eeh.16.2010.11.29.04.11.38
        (version=SSLv3 cipher=RC4-MD5);
        Mon, 29 Nov 2010 04:11:39 -0800 (PST)
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Apple Message framework v1081)
Subject: Re: [Caml-list] OCaml GC [was Is OCaml fast?]
From: Benedikt Meurer <benedikt.meurer@googlemail.com>
In-Reply-To: <08ef01cb8f54$d4bf1af0$7e3d50d0$@com>
Date: Mon, 29 Nov 2010 13:11:37 +0100
Content-Transfer-Encoding: quoted-printable
Message-Id: <A453505F-84D7-4959-8074-92A264E9E296@googlemail.com>
References: <AANLkTi=MFt3mGK2L_o=4=o=3FOtA2onvdvqTpw9SObYP@mail.gmail.com>	<1290434674.16005.354.camel@thinkpad>	<AANLkTi=nsgA3qEmpj0=89AodNN4M1tru+WJSsyYJ0ZqV@mail.gmail.com>	<582306206.731582.1290438133628.JavaMail.root@zmbs4.inria.fr>	<AANLkTinrvZRXzn5eFvyB2E4_CR_7+XU1zRtbNQLjMhVS@mail.gmail.com>	<20101122203334.7adc5ee6@deb0>	<20101127221121.0920db65@ordinaves.concept-micro.com>	<4CF25878.4060202@univ-savoie.fr>	<F909DA08-5F0C-4B3D-8FD2-4EB948098176@googlemail.com>	<AANLkTimNCKM8pjJfv8Xo4wZWSD=83YdXwt9FWXuguOpj@mail.gmail.com>	<08df01cb8f34$299d5800$7cd80800$@com> <208D27C6-A2CD-4383-8667-F4988301D265@googlemail.com> <08ef01cb8f54$d4bf1af0$7e3d50d0$@com>
To: caml-list@yquem.inria.fr
X-Mailer: Apple Mail (2.1081)
X-Spam: no; 0.00; ocaml:01 ocaml:01 generational:01 compaction:01 generational:01 cheers:01 haskell:01 wiki:01 wrote:01 heap:01 caml-list:01 minor:01 ghc:01 ghc:01 reuse:01 


On Nov 29, 2010, at 00:34 , Jon Harrop wrote:

> I see. Yes, that sounds like a great idea. How well does Immix cope =
with
> high allocation rates of short-lived objects? Been a while since I =
read the
> Immix paper...

In theory this should be handled more efficiently compared to a =
generational collector (given an appropriate evacuation heuristic), =
since there is less copying and short-lived objects tend to reuse the =
"hot" memory of objects that died previously (similar to the minor heap =
now), while survivers benefit from better compaction (without the need =
for a seperate mark-compact phase as implemented in the current major =
GC).

The timings for Java are impressive, but the allocation rates in Java =
tend to be different from those typically found in functional programs. =
There was also a GSoC project to implement Immix for GHC [1], but they =
seem to have used Immix in a generational setting, with mixed results =
(my knowledge of the GHC GC is limited).=20

> Cheers,
> Jon.

greets,
Benedikt

[1] =
http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/GC/Immix=

