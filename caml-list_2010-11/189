Return-Path: <padator@wanadoo.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 6C461BC57
	for <caml-list@yquem.inria.fr>; Sat, 20 Nov 2010 16:59:07 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgsGAJt+50xQDPIaYGdsb2JhbACUMYYpAYgKCxcLCAYUAx+7A4VLBIRaiRI
X-IronPort-AV: E=Sophos;i="4.59,229,1288566000"; 
   d="scan'208,217";a="79708474"
Received: from smtp20.orange.fr ([80.12.242.26])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 20 Nov 2010 16:59:06 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2018.orange.fr (SMTP Server) with ESMTP id 3AC3520000A5;
	Sat, 20 Nov 2010 16:59:06 +0100 (CET)
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2018.orange.fr (SMTP Server) with ESMTP id 2B73C20000A8;
	Sat, 20 Nov 2010 16:59:06 +0100 (CET)
Received: from [192.168.1.114] (c-67-188-213-250.hsd1.ca.comcast.net [67.188.213.250])
	by mwinf2018.orange.fr (SMTP Server) with ESMTP id 1617220000A5;
	Sat, 20 Nov 2010 16:59:04 +0100 (CET)
X-ME-UUID: 20101120155905906.1617220000A5@mwinf2018.orange.fr
X-ME-User-Auth: padator@wanadoo.fr
Subject: Re: [Caml-list] OCamlJit 2.0
Mime-Version: 1.0 (Apple Message framework v1081)
Content-Type: multipart/alternative; boundary=Apple-Mail-1-576414330
From: Yoann Padioleau <padator@wanadoo.fr>
In-Reply-To: <87247923-BF98-49A2-9334-2A4081DD07FD@googlemail.com>
Date: Sat, 20 Nov 2010 07:59:03 -0800
Cc: caml-list@yquem.inria.fr
Message-Id: <4E5CD9AC-C0D7-4BBB-BDCA-5E54353F041C@wanadoo.fr>
References: <D252EA22-12B7-4161-8F51-B09A505424D7@googlemail.com> <FF0D5F27-226B-4B40-9D85-E51B8135B0D8@wanadoo.fr> <87247923-BF98-49A2-9334-2A4081DD07FD@googlemail.com>
To: Benedikt Meurer <benedikt.meurer@googlemail.com>
X-Mailer: Apple Mail (2.1081)
X-Spam: no; 0.00; computations:01 speedup:01 speedups:01 runtime:01 compiler:01 compilation:01 compiler:01 inference:01 statically:01 beginner's:01 ocaml:01 bug:01 computations:01 speedup:01 speedups:01 


--Apple-Mail-1-576414330
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii


On Nov 19, 2010, at 11:10 AM, Benedikt Meurer wrote:

>=20
> Well, it is a research project, and it was driven by actual demand. A =
JIT engine for PHP is something less interesting from a university point =
of view, unless there are companies willing to sponsor/help the =
development.
>=20
> But from my personal experience, there is not really a lot to gain =
w.r.t. PHP. Delivering website content does not involve complex =
computations or processing, it is mostly I/O bound, depending on a fast =
database engine, a fast webserver, decent text processing throughput, =
etc. I may be wrong here,

I think you are. As said by someone previously facebook got a 2x speedup =
on CPU by optimizing PHP. Websites are not just
getting something from a database and echoing it.

> but I doubt that you'd see relevant speedups on large websites by =
simply JITting the PHP code.
>=20
> Also PHP code is less likely to change at runtime, so there's no real =
need to acutally JIT compile it. You could use a lot simpler techniques =
here to improve performance. For example, just write a simple PHP to C =
compiler, compiling your PHP code to native code via C, and let the =
webserver run the native code instead. With some clever compilation =
scheme, this should outperform any JIT engine, with a lot less effort.

I think it may actually be more effort to do an efficient compiler than =
a JIT on languages like PHP
For instance the team behind the Druby project ( =
http://www.cs.umd.edu/projects/PL/druby/publications.html )
first tried to do some static type inference on ruby code but then =
switched to a dynamic approach
because it was too hard to infer statically.

>=20
> Anyway, this seems to be off-topic here...

Sure

>=20
> Benedikt
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs


--Apple-Mail-1-576414330
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=us-ascii

<html><head></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
"><br><div><div>On Nov 19, 2010, at 11:10 AM, Benedikt Meurer =
wrote:</div><br class=3D"Apple-interchange-newline"><blockquote =
type=3D"cite"><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font>Well, it is a research project, and it was =
driven by actual demand. A JIT engine for PHP is something less =
interesting from a university point of view, unless there are companies =
willing to sponsor/help the development.<br><br>But from my personal =
experience, there is not really a lot to gain w.r.t. PHP. Delivering =
website content does not involve complex computations or processing, it =
is mostly I/O bound, depending on a fast database engine, a fast =
webserver, decent text processing throughput, etc. I may be wrong =
here,</div></blockquote><div><br></div><div>I think you are. As said by =
someone previously facebook got a 2x speedup on CPU by optimizing PHP. =
Websites are not just</div><div>getting something from a database and =
echoing it.</div><br><blockquote type=3D"cite"><div> but I doubt that =
you'd see relevant speedups on large websites by simply JITting the PHP =
code.<br><br>Also PHP code is less likely to change at runtime, so =
there's no real need to acutally JIT compile it. You could use a lot =
simpler techniques here to improve performance. For example, just write =
a simple PHP to C compiler, compiling your PHP code to native code via =
C, and let the webserver run the native code instead. With some clever =
compilation scheme, this should outperform any JIT engine, with a lot =
less effort.<br></div></blockquote><div><br></div><div>I think it may =
actually be more effort to do an efficient compiler than a JIT on =
languages like PHP</div>For instance the team behind the Druby project =
(&nbsp;<a =
href=3D"http://www.cs.umd.edu/projects/PL/druby/publications.html">http://=
www.cs.umd.edu/projects/PL/druby/publications.html</a> )</div><div>first =
tried to do some static type inference on ruby code but then switched to =
a dynamic approach</div><div>because it was too hard to infer =
statically.</div><div><br><blockquote type=3D"cite"><div><br>Anyway, =
this seems to be off-topic =
here...<br></div></blockquote><div><br></div>Sure</div><div><br><blockquot=
e =
type=3D"cite"><div><br>Benedikt<br>_______________________________________=
________<br>Caml-list mailing list. Subscription management:<br><a =
href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">http://y=
quem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: =
http://caml.inria.fr<br>Beginner's list: =
http://groups.yahoo.com/group/ocaml_beginners<br>Bug reports: =
http://caml.inria.fr/bin/caml-bugs<br></div></blockquote></div><br></body>=
</html>=

--Apple-Mail-1-576414330--


