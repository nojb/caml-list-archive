Return-Path: <thomas.gazagnaire@inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 27C79BBAF
	for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2010 15:01:29 +0100 (CET)
X-IronPort-AV: E=Sophos;i="4.59,242,1288566000"; 
   d="scan'208";a="80043334"
Received: from saorge.inria.fr (HELO [138.96.248.57]) ([138.96.248.57])
  by mail4-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-CAMELLIA256-SHA; 23 Nov 2010 15:01:24 +0100
Subject: Re: [Caml-list] [ANN] HTCaML / CaSS
From: Thomas Gazagnaire <thomas.gazagnaire@inria.fr>
To: Gerd Stolpmann <info@gerd-stolpmann.de>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <1681920730.765376.1290518571583.JavaMail.root@zmbs4.inria.fr>
References: <1290517554.4734.103.camel@saorge.inria.fr>
	 <1681920730.765376.1290518571583.JavaMail.root@zmbs4.inria.fr>
Content-Type: text/plain; charset="UTF-8"
Date: Tue, 23 Nov 2010 15:01:21 +0100
Message-ID: <1290520881.4734.124.camel@saorge.inria.fr>
Mime-Version: 1.0
X-Mailer: Evolution 2.30.3 
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; pxp:01 ocaml:01 pxp-:01 syntax:01 pxp:01 foo:01 foo:01 syntax:01 node:01 nodes:01 node:01 gerd:01 ocaml:01 struct:01 cheers:01 

> Have you seen that there is a preprocessor for PXP that allows you to
> embed XML in ocaml?
> 
> http://projects.camlcity.org/projects/dl/pxp-1.2.1/doc/manual/html/ref/Intro_preprocessor.html
> 

No, I didn't know about that. And there is also a syntax extension in
Eliom to do the same kind of things.

However, the two things I am really happy with HTCaML (and apparently it
is not possible to do the same thing in PXP nor Eliom) are :
i) you can easily mix auto-generated and hand-crafted code to create
XHTML fragments (no more tedious conversion functions); and
ii) you can write in the same part of your file (ie. in the same module)
the css and xhtml generator for a given type definition. That means that
you can do web-programming as you are used to : think about type
definitions first, and then write your code to reason by induction on
these defintions.

for example, you can have:

type foo = (* some random type *)
let html_of_foo : Html.t = (* some random code of type Html.t = (`a
Xml.frag as `a) Xmlm.frag list *)
let foo_css = (* some random, possibly nested, CSS *)

and :

type bar = { foo : foo; complex types } with html
let bar_css = <:css< .foo { $foo_css$; ... } >>

In the later case, you don't have to write manually the code for
html_of_bar as it will be done automatically by HTCaML, by looking at
the structure of bar; and it will pick your own definition of
html_of_foo. Also, nested declarations in bar_css will be automatically
unrolled to generate valid CSS fragments.

> I'm happily using this for dynamic web pages. The syntax is more
> light-weight, though, e.g. you write
> 
I don't really call this dynamic web pages, but yea, that's the same
idea :-)

--
Thomas


> <div> [ ... ]
> 
> instead of <div>...</div>, and there is a distinction in the syntax
> between node and list of nodes, e.g.
> 
> <div> list
> 
> but
> 
> <div> [ node1 node2 ... ]
> 
> Gerd
> 
> Am Dienstag, den 23.11.2010, 14:05 +0100 schrieb Thomas Gazagnaire:
> > I am happy to announce the first official release of HTCaML[1] and
> > CaSS[2], two small libraries which make the writing of static web pages
> > easy in OCaml.
> > 
> > HTCaML enables the embedding of XHTML fragments in your OCaml program
> > (the EDSL translates directly to Xmlm) using quotations. It also allows
> > you to auto-generate boilerplate XHTML fragments from type definitions.
> > In the same way, CaSS enables the embedding of CSS fragments in your
> > OCaml program using quotations.
> > 
> > A quick example:
> > 
> > module Box = struct
> >   type t = { title: string; date: string; contents: Html.t } with html
> >   let css fg bg = <:css<
> >      color: $fg$;
> >      background-color: $bg$;
> >      $Css.rounded$;
> >      .title { color: $bg$; background-color: $fg$; }
> >   >>
> > end
> > 
> > let my_html boxes = Html.to_string <:html<
> >   <html>
> >     <body>
> >       <div class="boxes">
> >         $list:List.map Box.html_of_t boxes$
> >       </div>
> >     </body>
> >   </html>
> >   >>
> > 
> > let my_css = Css.to_string <:css<
> >    .boxes { $Box.css <:css< blue >> <:css< white >> $ }
> >   >>
> > 
> > You can find a quick introduction to HTCaML (and maybe soon to CaSS) on
> > the mirage blog[3].
> > 
> > Cheers,
> > Thomas
> > 
> > [1] https://github.com/samoht/htcaml
> > [2] https://github.com/samoht/cass
> > [3] http://www.openmirage.org/blog/introduction-to-htcaml
> > 
> > _______________________________________________
> > Caml-list mailing list. Subscription management:
> > http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> > Archives: http://caml.inria.fr
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> > 
> 
> 


