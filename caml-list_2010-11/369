Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 26FB2BBAF
	for <caml-list@yquem.inria.fr>; Sat, 27 Nov 2010 11:32:06 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArADAC1t8EzRVditkGdsb2JhbACUWoYpAYgACBYBAQEJCQwHEQMfiCycBYlkghiESi6IVgEBAwWFQgSBXIkFhgCDLQ
X-IronPort-AV: E=Sophos;i="4.59,266,1288566000"; 
   d="scan'208";a="80314449"
Received: from mail-qy0-f173.google.com ([209.85.216.173])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 27 Nov 2010 11:32:05 +0100
Received: by qyk1 with SMTP id 1so6653586qyk.18
        for <caml-list@yquem.inria.fr>; Sat, 27 Nov 2010 02:32:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:mime-version:sender:received
         :in-reply-to:references:from:date:x-google-sender-auth:message-id
         :subject:to:cc:content-type;
        bh=ieY6uhIMyQEskWiobFoW7VFDCyx1xjhsAA0I98KSdG4=;
        b=cAKnFxKp8cboiyespk7Xsd2zX3YelgjhUUWVqqY9XV0s1ckg95fkP/foBln1RmM4ug
         jMWN/H44KnYW/zc1FQFTYfOkvt/lpblOpvg2Bd58CrCADaWXNm3ufeGsUHcsHrfB+J6w
         Q3NzJ3rDLINVwpV0caW69SonL1bvT04rrNL1c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        b=hhUReWJoJw2HWjUMGvlUaDPzOr+MpOr+DhJ9/QpoUKtisKbsBu/r/JQkdHdjwntiJF
         4cHLj6UjQH2A1EKTxdGwRUwBQx9C/o5CQFfEK3D0jsOo19d5ymbZtEOLpSTFHpZgO6yB
         dsoOCt5QbfcsKC9Xfr1AUMPSBiMFo0GhojlSI=
Received: by 10.229.189.4 with SMTP id dc4mr2625012qcb.106.1290853921804; Sat,
 27 Nov 2010 02:32:01 -0800 (PST)
MIME-Version: 1.0
Sender: gabriel.scherer@gmail.com
Received: by 10.229.253.135 with HTTP; Sat, 27 Nov 2010 02:31:41 -0800 (PST)
In-Reply-To: <1290851344516@names.co.uk>
References: <1290851344516@names.co.uk>
From: bluestorm <bluestorm.dylc@gmail.com>
Date: Sat, 27 Nov 2010 11:31:41 +0100
X-Google-Sender-Auth: 51zNVAO8aUcVYY5tWATdMUSJwaA
Message-ID: <AANLkTik4=DG1aGWWY8_XZ3+4KmrUgXRrndaq=_8wFp49@mail.gmail.com>
Subject: Re: [Caml-list] zero-arity constructor
To: mark@proof-technologies.com
Cc: julia@diku.dk, mehdi.dogguy@pps.jussieu.fr,
	caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016361e815c7750fd0496065984
X-Spam: no; 0.00; syntax:01 syntax:01 camlp:01 constructors:01 foo:01 -like:01 -like:01 foo:01 explicitely:01 haskell:01 ad-hoc:01 haskell:01 bug:01 frisch:01 ocaml:01 

--0016361e815c7750fd0496065984
Content-Type: text/plain; charset=ISO-8859-1

On Sat, Nov 27, 2010 at 10:49 AM, <mark@proof-technologies.com> wrote:

> Surely it's preferable to use a syntactically distinct mechanism for this
> subtly different concept.


Agreed.


> Perhaps something like '*' to mean 0 or more.  Or is it already too late
> because '_' has already been incorporated and backwards compatibility
> dictates that this cannot be changed?
>

I suppose that it is too late. You might get a new syntax accepted in
parallel with the old one, but I wouldn't hope of changing the current
syntax which would break a large amount of code. Reversing the specific
0-ary modification suggested by Alain is probably easier, as I suspect most
users don't use that one much, but Alain probably makes use of it; but that
would not achieve your goal of using different syntax for different
meanings.

What you might do, if you're interested in this change for your personal
use, is to write a camlp4 extension to modify the syntax accordingly. I
think it would be quite easy to do : support the new syntax (in terms of the
old one), and add a warning or an error when the old one is used. There is
one important problem however: as Alain pointed out, a syntax extension
cannot easily keep track of constructor arities -- think of constructors
declared in other modules -- so a reasonable syntax extension would *also*
raise a warning/error for the 1-ary case. When it encounters (Foo _), it
cannot know if this is a *-like _ for a n-ary constructor, or a _-like _ for
a 1-ary constructor. The most reasonable thing to do would be to forget (Foo
_) altogether, and use (Foo (_)) in your code when you explicitely want to
ignore one parameter. That has syntactic costs you may not wish to pay.


Finally, I'd like to point out that Haskell has a similar, not well-known,
ad-hoc syntactic rule, though it is arguably less confusing, and certainly
better documented. In haskell 98, you can use a (Foo {}) pattern to ignore
the parameters of any n-ary constructor. This is an extension of the
record-matching syntax {}, extension that works even when the constructor
was not defined using named fields (the Haskell way of doing records, which
is mostly a syntaxic sugar above tuples).


On Sat, Nov 27, 2010 at 10:49 AM, <mark@proof-technologies.com> wrote:

> Surely it's preferable to use a syntactically distinct mechanism for this
> subtly different concept.  Given that we're talking about patterns and not
> general expressions here, surely there's plenty of space in the syntax.
> Perhaps something like '*' to mean 0 or more.  Or is it already too late
> because '_' has already been incorporated and backwards compatibility
> dictates that this cannot be changed?
>
> type ty = A | B
>
> let test = function
> | A * -> ()
> | B -> ()
>
> Mark Adams
>
> on 26/11/10 10:35 PM, bluestorm <bluestorm.dylc@gmail.com> wrote:
>
> > A quick summary for those like me that didn't follow the change and were
> > baffled to find out that "it's not a bug, it's a feature".
> >
> > The change was asked for by Alain Frisch in 2006 (
> > http://caml.inria.fr/mantis/view.php?id=4052 ) and finally added in
> ocaml
> > 3.11. The rationale is to make it easy to mechanically -- think camlp4 or
> > another preprocessor -- generate pattern clauses to test for the head
> > constructor of a data type, ignoring it's parameter.
> > Before that change, (K _) would work for all constructors K of arity
> greater
> > than 1, but not for arity 0. After the change, (K _) work even for
> constant
> > constructors. Generating a match clause that says "looks if it's the
> > constructor K, I don't care about the arguments" is much easier as you
> don't
> > have to carry  arity information around.
> >
> > The downside of this behaviour is that the universal pattern _ has an
> > different meaning in this setting. It does not only matches any value (as
> > the manual says :
> http://caml.inria.fr/pub/docs/manual-ocaml/patterns.html
> > ),
> > but also "matches any number of arguments, possibly 0". The nice
> > compositional interpretation of patterns -- K (p1, .., pN) matches a
> value
> > with constructor K and whose N arguments match p1..pN -- is lost.
> > Note that this was already the case before the change suggested by Alain
> > Frisch : _ would work for two-arguments constructors as well, while a
> named
> > variable wouldn't -- this is well-known subtle difference between (Foo of
> a
> > * b) and (Foo of (a * b)). The pattern _ ignored any non-zero number of
> > arguments.
> >
> > Note that since ocaml 3.12, there is a warning available for this very
> > error.
> >
> > $ ocaml -warn-help
> > [...]
> > 28 Wildcard pattern given as argument to a constant constructor.
> > [...]
> >
> > $ cat test.ml
> > type ty = A | B
> >
> > let test = function
> > | A _ -> ()
> > | B -> ()
> >
> > $ ocaml -w +28 test.ml
> > File "test.ml", line 4, characters 4-5:
> > Warning 28: wildcard pattern given as argument to a constant constructor
> >
> > I think than, in the end, it's all a matter of compromise.
> >
> > Thanks to Julia and Mehdi for casting light on the dark corners of the
> ocaml
> > syntax!
> >
> > PS : I haven't found that behaviour documented anywhere. Maybe it would
> be
> > good to describe that special behaviour of _ on constructors in the
> manual?
> >
> > On Fri, Nov 26, 2010 at 11:02 PM, Julia Lawall <julia@diku.dk> wrote:
> >
> >> On Fri, 26 Nov 2010, Mehdi Dogguy wrote:
> >>
> >> > On 11/26/2010 10:46 PM, Julia Lawall wrote:
> >> > > The following code compiles in 3.12.0 but doesn't compile in 3.10.2.
> >> > > Is it a bug or a feature?
> >> > >
> >> >
> >> > It's a feature that was implemented in 3.11.0 (iirc).
> >> >
> >> > See: http://caml.inria.fr/mantis/view.php?id=4675 (and other related
> >> > bugreports).
> >>
> >> OK, thanks.  I agree wth those that don't like the change...
> >>
> >> julia
> >>
> >> _______________________________________________
> >> Caml-list mailing list. Subscription management:
> >> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> >> Archives: http://caml.inria.fr
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >
> >
> >
> > ----------------------------------------
> > _______________________________________________
> > Caml-list mailing list. Subscription management:
> > http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> > Archives: http://caml.inria.fr
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
> >
> >
>

--0016361e815c7750fd0496065984
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<meta http-equiv=3D"content-type" content=3D"text/html; charset=3Dutf-8">On=
 Sat, Nov 27, 2010 at 10:49 AM,=A0<span dir=3D"ltr">&lt;<a href=3D"mailto:m=
ark@proof-technologies.com">mark@proof-technologies.com</a>&gt;</span>=A0wr=
ote:<br><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px; margin-=
right: 0px; margin-bottom: 0px; margin-left: 0.8ex; border-left-width: 1px;=
 border-left-color: rgb(204, 204, 204); border-left-style: solid; padding-l=
eft: 1ex; ">

Surely it&#39;s preferable to use a syntactically distinct mechanism for th=
is<br>subtly different concept.</blockquote><div><br></div><div>Agreed.</di=
v><div>=A0</div><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px;=
 margin-right: 0px; margin-bottom: 0px; margin-left: 0.8ex; border-left-wid=
th: 1px; border-left-color: rgb(204, 204, 204); border-left-style: solid; p=
adding-left: 1ex; ">

Perhaps something like &#39;*&#39; to mean 0 or more. =A0Or is it already t=
oo late<br>because &#39;_&#39; has already been incorporated and backwards =
compatibility<br>dictates that this cannot be changed?<br></blockquote><div=
>

<br></div><div>I suppose that it is too late. You might get a new syntax ac=
cepted in parallel with the old one, but I wouldn&#39;t hope of changing th=
e current syntax which would break a large amount of code. Reversing the sp=
ecific 0-ary modification suggested by Alain is probably easier, as I suspe=
ct most users don&#39;t use that one much, but Alain probably makes use of =
it; but that would not achieve your goal of using different syntax for diff=
erent meanings.</div>

<div><br></div><div>What you might do, if you&#39;re interested in this cha=
nge for your personal use, is to write a camlp4 extension to modify the syn=
tax accordingly. I think it would be quite easy to do : support the new syn=
tax (in terms of the old one), and add a warning or an error when the old o=
ne is used. There is one important problem however: as Alain pointed out, a=
 syntax extension cannot easily keep track of constructor arities -- think =
of constructors declared in other modules -- so a reasonable syntax extensi=
on would *also* raise a warning/error for the 1-ary case. When it encounter=
s (Foo _), it cannot know if this is a *-like _ for a n-ary constructor, or=
 a _-like _ for a 1-ary constructor. The most reasonable thing to do would =
be to forget (Foo _) altogether, and use (Foo (_)) in your code when you ex=
plicitely want to ignore one parameter. That has syntactic costs you may no=
t wish to pay.</div>

<div><br></div><div><br></div><div>Finally, I&#39;d like to point out that =
Haskell has a similar, not well-known, ad-hoc syntactic rule, though it is =
arguably less confusing, and certainly better documented. In haskell 98, yo=
u can use a (Foo {}) pattern to ignore the parameters of any n-ary construc=
tor. This is an extension of the record-matching syntax {}, extension that =
works even when the constructor was not defined using named fields (the Has=
kell way of doing records, which is mostly a syntaxic sugar above tuples).<=
/div>

<div><br></div><div><br></div><div class=3D"gmail_quote">On Sat, Nov 27, 20=
10 at 10:49 AM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:mark@proof-technol=
ogies.com">mark@proof-technologies.com</a>&gt;</span> wrote:<br><blockquote=
 class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc soli=
d;padding-left:1ex;">

Surely it&#39;s preferable to use a syntactically distinct mechanism for th=
is<br>
subtly different concept. =A0Given that we&#39;re talking about patterns an=
d not<br>
general expressions here, surely there&#39;s plenty of space in the syntax.=
<br>
Perhaps something like &#39;*&#39; to mean 0 or more. =A0Or is it already t=
oo late<br>
because &#39;_&#39; has already been incorporated and backwards compatibili=
ty<br>
dictates that this cannot be changed?<br>
<div class=3D"im"><br>
type ty =3D A | B<br>
<br>
let test =3D function<br>
| A * -&gt; ()<br>
| B -&gt; ()<br>
<br>
</div>Mark Adams<br>
<div><div></div><div class=3D"h5"><br>
on 26/11/10 10:35 PM, bluestorm &lt;<a href=3D"mailto:bluestorm.dylc@gmail.=
com">bluestorm.dylc@gmail.com</a>&gt; wrote:<br>
<br>
&gt; A quick summary for those like me that didn&#39;t follow the change an=
d were<br>
&gt; baffled to find out that &quot;it&#39;s not a bug, it&#39;s a feature&=
quot;.<br>
&gt;<br>
&gt; The change was asked for by Alain Frisch in 2006 (<br>
&gt; <a href=3D"http://caml.inria.fr/mantis/view.php?id=3D4052" target=3D"_=
blank">http://caml.inria.fr/mantis/view.php?id=3D4052</a> ) and finally add=
ed in ocaml<br>
&gt; 3.11. The rationale is to make it easy to mechanically -- think camlp4=
 or<br>
&gt; another preprocessor -- generate pattern clauses to test for the head<=
br>
&gt; constructor of a data type, ignoring it&#39;s parameter.<br>
&gt; Before that change, (K _) would work for all constructors K of arity<b=
r>
greater<br>
&gt; than 1, but not for arity 0. After the change, (K _) work even for<br>
constant<br>
&gt; constructors. Generating a match clause that says &quot;looks if it&#3=
9;s the<br>
&gt; constructor K, I don&#39;t care about the arguments&quot; is much easi=
er as you<br>
don&#39;t<br>
&gt; have to carry =A0arity information around.<br>
&gt;<br>
&gt; The downside of this behaviour is that the universal pattern _ has an<=
br>
&gt; different meaning in this setting. It does not only matches any value =
(as<br>
&gt; the manual says : <a href=3D"http://caml.inria.fr/pub/docs/manual-ocam=
l/patterns.html" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-oca=
ml/patterns.html</a><br>
&gt; ),<br>
&gt; but also &quot;matches any number of arguments, possibly 0&quot;. The =
nice<br>
&gt; compositional interpretation of patterns -- K (p1, .., pN) matches a v=
alue<br>
&gt; with constructor K and whose N arguments match p1..pN -- is lost.<br>
&gt; Note that this was already the case before the change suggested by Ala=
in<br>
&gt; Frisch : _ would work for two-arguments constructors as well, while a<=
br>
named<br>
&gt; variable wouldn&#39;t -- this is well-known subtle difference between =
(Foo of<br>
a<br>
&gt; * b) and (Foo of (a * b)). The pattern _ ignored any non-zero number o=
f<br>
&gt; arguments.<br>
&gt;<br>
&gt; Note that since ocaml 3.12, there is a warning available for this very=
<br>
&gt; error.<br>
&gt;<br>
&gt; $ ocaml -warn-help<br>
&gt; [...]<br>
&gt; 28 Wildcard pattern given as argument to a constant constructor.<br>
&gt; [...]<br>
&gt;<br>
&gt; $ cat <a href=3D"http://test.ml" target=3D"_blank">test.ml</a><br>
&gt; type ty =3D A | B<br>
&gt;<br>
&gt; let test =3D function<br>
&gt; | A _ -&gt; ()<br>
&gt; | B -&gt; ()<br>
&gt;<br>
&gt; $ ocaml -w +28 <a href=3D"http://test.ml" target=3D"_blank">test.ml</a=
><br>
&gt; File &quot;<a href=3D"http://test.ml" target=3D"_blank">test.ml</a>&qu=
ot;, line 4, characters 4-5:<br>
&gt; Warning 28: wildcard pattern given as argument to a constant construct=
or<br>
&gt;<br>
&gt; I think than, in the end, it&#39;s all a matter of compromise.<br>
&gt;<br>
&gt; Thanks to Julia and Mehdi for casting light on the dark corners of the=
<br>
ocaml<br>
&gt; syntax!<br>
&gt;<br>
&gt; PS : I haven&#39;t found that behaviour documented anywhere. Maybe it =
would be<br>
&gt; good to describe that special behaviour of _ on constructors in the<br=
>
manual?<br>
&gt;<br>
&gt; On Fri, Nov 26, 2010 at 11:02 PM, Julia Lawall &lt;<a href=3D"mailto:j=
ulia@diku.dk">julia@diku.dk</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; On Fri, 26 Nov 2010, Mehdi Dogguy wrote:<br>
&gt;&gt;<br>
&gt;&gt; &gt; On 11/26/2010 10:46 PM, Julia Lawall wrote:<br>
&gt;&gt; &gt; &gt; The following code compiles in 3.12.0 but doesn&#39;t co=
mpile in 3.10.2.<br>
&gt;&gt; &gt; &gt; Is it a bug or a feature?<br>
&gt;&gt; &gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; It&#39;s a feature that was implemented in 3.11.0 (iirc).<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; See: <a href=3D"http://caml.inria.fr/mantis/view.php?id=3D467=
5" target=3D"_blank">http://caml.inria.fr/mantis/view.php?id=3D4675</a> (an=
d other related<br>
&gt;&gt; &gt; bugreports).<br>
&gt;&gt;<br>
&gt;&gt; OK, thanks. =A0I agree wth those that don&#39;t like the change...=
<br>
&gt;&gt;<br>
&gt;&gt; julia<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; Caml-list mailing list. Subscription management:<br>
&gt;&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t" target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-li=
st</a><br>
&gt;&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http:=
//caml.inria.fr</a><br>
&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocam=
l_beginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginner=
s</a><br>
&gt;&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=
=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
</div></div>&gt; ----------------------------------------<br>
<div><div></div><div class=3D"h5">&gt; ____________________________________=
___________<br>
&gt; Caml-list mailing list. Subscription management:<br>
&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" t=
arget=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</=
a><br>
&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://ca=
ml.inria.fr</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
</div></div></blockquote></div><br>

--0016361e815c7750fd0496065984--

