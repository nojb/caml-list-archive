Return-Path: <padator@wanadoo.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 8850BBC57
	for <caml-list@yquem.inria.fr>; Tue, 30 Nov 2010 18:32:59 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AokEABvE9ExQDPIvgmdsb2JhbACUVoYrAYgRFQEBCwsIGgMfqWWaW4ITgzQEhFyJFQ
X-IronPort-AV: E=Sophos;i="4.59,281,1288566000"; 
   d="scan'208,217";a="68872584"
Received: from smtp21.orange.fr ([80.12.242.47])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 30 Nov 2010 18:32:59 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2108.orange.fr (SMTP Server) with ESMTP id 9542B1C0013B;
	Tue, 30 Nov 2010 18:32:58 +0100 (CET)
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2108.orange.fr (SMTP Server) with ESMTP id 81AA41C0016E;
	Tue, 30 Nov 2010 18:32:58 +0100 (CET)
Received: from [172.24.131.9] (out1-1601fw.corp.tfbnw.net [66.220.144.27])
	by mwinf2108.orange.fr (SMTP Server) with ESMTP id 4279A1C0013B;
	Tue, 30 Nov 2010 18:32:57 +0100 (CET)
X-ME-UUID: 20101130173257272.4279A1C0013B@mwinf2108.orange.fr
X-ME-User-Auth: padator@wanadoo.fr
Subject: Re: [Caml-list] OCamlJIT2 vs. OCamlJIT
Mime-Version: 1.0 (Apple Message framework v1081)
Content-Type: multipart/alternative; boundary=Apple-Mail-1--701436443
From: Yoann Padioleau <padator@wanadoo.fr>
In-Reply-To: <AANLkTi=Wu1SXVgQ+X0NECNx3oUsD=xEy-9Zq6T3ncJ+W@mail.gmail.com>
Date: Tue, 30 Nov 2010 09:32:56 -0800
Cc: Benedikt Meurer <benedikt.meurer@googlemail.com>,
	caml-list@yquem.inria.fr
Message-Id: <B8C055A1-2A67-4C7E-BF67-4A639619C4EB@wanadoo.fr>
References: <3DCEA910-1382-47E5-876B-059178F8F82E@googlemail.com> <20101130124803.7952fca1@deb0> <D6C274D9-8A00-4D6F-936A-58206CA5D358@googlemail.com> <AANLkTi=Wu1SXVgQ+X0NECNx3oUsD=xEy-9Zq6T3ncJ+W@mail.gmail.com>
To: bluestorm <bluestorm.dylc@gmail.com>
X-Mailer: Apple Mail (2.1081)
X-Spam: no; 0.00; low-level:01 ocaml:01 ocaml:01 ocamlopt:01 compiler:01 compilation:01 compiler:01 semantics:01 semantics:01 beginner's:01 bug:01 low-level:01 ocamlopt:01 compilation:01 beginner's:01 


--Apple-Mail-1--701436443
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii


On Nov 30, 2010, at 9:01 AM, bluestorm wrote:

> On Tue, Nov 30, 2010 at 11:55 AM, Benedikt Meurer =
<benedikt.meurer@googlemail.com> wrote:
> There would be several advantages in switching to LLVM for code =
generation. The general idea is that if other people work on the =
low-level stuff, it is less work for the OCaml implementors.
>=20
[...]

> LLVM is nice and trendy

Yes, and it has to stop. I don't understand why there is so much hype =
around LLVM. Why would you think something written in C++ would be far =
better than the ocaml code we have in the ocamlopt compiler ?


> (though it's a shame the GNU guys, partly due to their own mistakes, =
are losing an important part of the FLOSS ecosystem to Apple...), but =
I'm personally more interested in the more theoretical projects of  =
verified compilation toolchains, such as compcert ( =
http://compcert.inria.fr/ ). It's unrealistic to hope to have a =
completely verified ocaml-to-assembly compiler, as we would first need =
formal semantics for the OCaml language itself, but it is the very point =
: doing that kind of things forces you to have formal semantics, which =
is very interesting in many respects.
>=20
> Asking for a decent compiler was once the way to tell apart the =
serious languages from the insane string-fiddling script languages, but =
the line is blurred by the indecent amount of work injected in the =
optimization of those insane languages. Formal semantics will =
distinguish the gentlemen of the future.
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs


--Apple-Mail-1--701436443
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=us-ascii

<html><head></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
"><br><div><div>On Nov 30, 2010, at 9:01 AM, bluestorm wrote:</div><br =
class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
class=3D"gmail_quote">On Tue, Nov 30, 2010 at 11:55 AM, Benedikt =
Meurer&nbsp;<span dir=3D"ltr">&lt;<a =
href=3D"mailto:benedikt.meurer@googlemail.com">benedikt.meurer@googlemail.=
com</a>&gt;</span>&nbsp;wrote:<blockquote class=3D"gmail_quote" =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0.8ex; border-left-width: 1px; border-left-color: rgb(204, =
204, 204); border-left-style: solid; padding-left: 1ex; position: =
static; z-index: auto; ">There would be several advantages in switching =
to LLVM for code generation. The general idea is that if other people =
work on the low-level stuff, it is less work for the OCaml =
implementors.</blockquote>

<div><br></div></div></blockquote>[...]</div><div><br><blockquote =
type=3D"cite"><div class=3D"gmail_quote"><div>LLVM is nice and =
trendy</div></div></blockquote><div><br></div><div>Yes, and it has to =
stop. I don't understand why there is so much hype around LLVM. Why =
would you think something written in C++ would be far better than the =
ocaml code we have in the ocamlopt compiler =
?</div><div><br></div><br><blockquote type=3D"cite"><div =
class=3D"gmail_quote"><div> (though it's a shame the GNU guys, partly =
due to their own mistakes, are losing an important part of the FLOSS =
ecosystem to Apple...), but I'm personally more interested in the more =
theoretical projects of &nbsp;verified compilation toolchains, such as =
compcert (&nbsp;<a =
href=3D"http://compcert.inria.fr/">http://compcert.inria.fr/</a>&nbsp;). =
It's unrealistic to hope to have a completely verified ocaml-to-assembly =
compiler, as we would first need formal semantics for the OCaml language =
itself, but it is the very point : doing that kind of things forces you =
to have formal semantics, which is very interesting in many =
respects.</div>

<div><br></div><div>Asking for a decent compiler was once the way to =
tell apart the serious languages from the insane string-fiddling script =
languages, but the line is blurred by the indecent amount of work =
injected in the optimization of those insane languages. Formal semantics =
will distinguish the gentlemen of the future.</div>

</div>
_______________________________________________<br>Caml-list mailing =
list. Subscription management:<br><a =
href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">http://y=
quem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: =
http://caml.inria.fr<br>Beginner's list: =
http://groups.yahoo.com/group/ocaml_beginners<br>Bug reports: =
http://caml.inria.fr/bin/caml-bugs<br></blockquote></div><br></body></html=
>=

--Apple-Mail-1--701436443--


