Return-Path: <rixed@happyleptic.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 72C6CBBAF
	for <caml-list@yquem.inria.fr>; Wed, 24 Nov 2010 15:07:26 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av4FAEqr7Exc8w3B/2dsb2JhbACUcY53vkCFRwQ
X-IronPort-AV: E=Sophos;i="4.59,248,1288566000"; 
   d="scan'208";a="80869176"
Received: from dangi.happyleptic.org (HELO dangi) ([92.243.13.193])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 24 Nov 2010 15:07:17 +0100
Received: from extranet.securactive.org ([82.234.213.170] helo=ccellier.rd.securactive.lan)
	by dangi with esmtp (Exim 4.69)
	(envelope-from <rixed@happyleptic.org>)
	id 1PLG0D-000205-1h
	for caml-list@yquem.inria.fr; Wed, 24 Nov 2010 15:07:17 +0100
Received: from rixed by ccellier.rd.securactive.lan with local (Exim 4.71)
	(envelope-from <rixed@happyleptic.org>)
	id 1PLG0B-0001pm-3O
	for caml-list@yquem.inria.fr; Wed, 24 Nov 2010 15:07:15 +0100
Date: Wed, 24 Nov 2010 15:07:15 +0100
From: Cedric Cellier <rixed@happyleptic.org>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Is OCaml fast?
Message-ID: <20101124140715.GA6863@securactive.net>
Mail-Followup-To: Cedric Cellier <rixed@happyleptic.org>,
	caml-list@yquem.inria.fr
References: <AANLkTi=MFt3mGK2L_o=4=o=3FOtA2onvdvqTpw9SObYP@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <AANLkTi=MFt3mGK2L_o=4=o=3FOtA2onvdvqTpw9SObYP@mail.gmail.com>
User-Agent: Mutt/1.5.20 (2009-06-14)
X-Spam: no; 0.00; ocaml:01 criticizing:01 non-trivial:01 mls:01 haskell:01 ocaml:01 syntax:01 webpages:98 aps:98 caml-list:01 ghc:01 expressive:01 data:02 lisp:02 structures:02 

I was in a similar position than yours two years ago, looking for a
higher level language than C to gain some expressive power but without
willing to sacrifice C's speed. I consulted a lot of benchmarks from
the shootout, and also many webpages similar to the one you refer to,
some praising a language some criticizing it.

The various contenders of the shootout seamed to fall in three categories :
languages that are fast compared to C, but does not reduce much the size
of the source code (C++, java, APS...), languages that allow concise
manipulations of non-trivial data structures (Lisps, MLs, Haskells), and
non-compiled languages that I never considered adopting.

I eliminated Haskell because GHC was only usable on x86 architecture at
that time, so I tried various Lisp at first. Then a friend pointed me to
Ocaml since, according to him, it's easier to cross the gap between C
and Ocaml than between C and anything else. I thus finally tried Ocaml
and, despite my initial apprehensions, I felt myself comfortable with
its syntax after am couple of days.

I am now using it whenever I have the choice to, after many years of C,
mixing with C or ASM when necessary (which is quite easy), because I
feel it's pleasant to use, and that I have still many things to learn
from it, without the bad feeling to waste CPU cycles along the way.

I like to think that if yon consider only speed and terseness of the
code, Ocaml is still amongst the top languages ; probably not the #1 as
stated by the (quite old) webpage you pointed to, but still excellent.


