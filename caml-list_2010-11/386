Return-Path: <oliver@first.in-berlin.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 43040BC57
	for <caml-list@yquem.inria.fr>; Sun, 28 Nov 2010 19:17:49 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsgCAKcr8kzAbSoIZGdsb2JhbACDUJE4jgEIGggNGAQesEaPZA2BFIMzcwQ
X-IronPort-AV: E=Sophos;i="4.59,271,1288566000"; 
   d="scan'208";a="80347189"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 28 Nov 2010 19:17:48 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from first (e178028169.adsl.alicedsl.de [85.178.28.169])
	(authenticated bits=0)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id oASIHmIN014387
	for <caml-list@inria.fr>; Sun, 28 Nov 2010 19:17:48 +0100
Received: by first (Postfix, from userid 1000)
	id 1FCEF4409D1; Sun, 28 Nov 2010 19:17:48 +0100 (CET)
Date: Sun, 28 Nov 2010 19:17:48 +0100
From: oliver@first.in-berlin.de
To: caml-list@inria.fr
Subject: Re: [Caml-list] Re: Is OCaml fast?
Message-ID: <20101128181748.GB1689@siouxsie>
References: <20101122180203.2126497sau3zukgb@webmail.in-berlin.de>
 <E0E134FB-BF3D-4CF2-8214-12322034662D@univ-orleans.fr>
 <loom.20101123T030109-899@post.gmane.org>
 <20101123232742.GC28768@siouxsie>
 <loom.20101124T011919-47@post.gmane.org>
 <AANLkTi=9BnGCEftg_TAaeY8s3cNnmzHuw2-UxuCX2oKX@mail.gmail.com>
 <loom.20101124T031035-994@post.gmane.org>
 <AANLkTik_j=H+1JPTmreYL2UVBn_CHWMrMjsABW7ZBL5Q@mail.gmail.com>
 <jwv39qp2vn4.fsf-monnier+gmane.comp.lang.caml.inria@gnu.org>
 <4CF12ABF.7010803@univ-savoie.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <4CF12ABF.7010803@univ-savoie.fr>
User-Agent: Mutt/1.5.20 (2009-06-14)
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Spam: no; 0.00; in-berlin:01 ocaml:01 0100,:01 christophe:01 raffalli:01 ocaml's:01 ocaml:01 garbage:01 wrote:01 oliver:01 oliver:01 heap:01 caml-list:01 minor:01 minor:01 

On Sat, Nov 27, 2010 at 04:58:55PM +0100, Christophe Raffalli wrote:
> Hello,
> > To the extent that this rule is the same for all languages and that most
> > languages on the shootout are also garbage collected, I think OCaml's
> > problem with this benchmark do point at a weakness of the current
> > GC code.
> This is untrue ... the bintree example, is just bad in OCaml because the
> default
> value of the minor heap size is the correct value for reactive programs
> where you want fast minor GC slice, because they interrupt the program ...
[...]

And if your program contains both kinds of functionality?
What possible solution would you recommend?


Ciao,
   Oliver

