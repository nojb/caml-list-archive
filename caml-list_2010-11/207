Return-Path: <cullmann@absint.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 05E6BBBAF
	for <caml-list@yquem.inria.fr>; Mon, 22 Nov 2010 13:04:09 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: An0FAP/q6UzUUiSF/2dsb2JhbACUUI52u1uFSwSFL4Uv
X-IronPort-AV: E=Sophos;i="4.59,235,1288566000"; 
   d="scan'208";a="80682140"
Received: from one4vision-tunnel.absint.com (HELO mail.absint.com) ([212.82.36.133])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 22 Nov 2010 13:04:08 +0100
Received: from mail.absint.com (localhost [127.0.0.1])
	by mail.absint.com (Postfix) with ESMTP id D1AFD11C01D6
	for <caml-list@yquem.inria.fr>; Mon, 22 Nov 2010 13:03:58 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.3.1-spampd (2010-03-16) on
	mail.absint.com
X-Spam-Level: 
Received: from absint.com (imp.absint.com [192.168.10.48])
	by mail.absint.com (Postfix) with ESMTP
	for <caml-list@yquem.inria.fr>; Mon, 22 Nov 2010 13:03:58 +0100 (CET)
Received: by absint.com (Postfix, from userid 15028)
	id B942F1054BF; Mon, 22 Nov 2010 13:03:58 +0100 (CET)
From: Christoph Cullmann <cullmann@absint.de>
Organization: AbsInt
To: caml-list@yquem.inria.fr
Subject: OCaml + mingw-w64
Date: Mon, 22 Nov 2010 13:03:58 +0100
User-Agent: KMail/1.13.2 (Linux/2.6.35-14-generic; KDE/4.4.2; x86_64; ; )
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Message-Id: <201011221303.58505.cullmann@absint.de>
X-Spam: no; 0.00; ocaml:01 ocaml:01 mingw:01 gdb:01 mingw:01 frisch:01 gcc:01 unices:01 bytecode:01 byterun:01 gesch:98 ferdinand:98 unix:01 compile:01 msvc:01 

Hi,

atm we compile out large ocaml application (Astree, http://www.astree.ens.f=
r/)=20
with ocaml + MSVC64.

I would like to go away from MSVC to mingw, to e.g. have gdb available and=
=20
more unix like environment.

Atm it seems only the normal mingw (32bit) is supported.
I found some problem with using the 64bit version with flexlinker, which I=
=20
reported to Alain Frisch to get that sorted out.

Aside from that, I think a problem might be, that there is no matching=20
assembler for amd64 + mingw (windows calling convention).

Is that correct and could somebody help me out with this?
I think, given that gcc on unices with 64bit work fine here, it shouldn't b=
e=20
too much effort to get mingw-w64 working too, enabling to have a nice (and =
fast=20
for the bytecode interpreter) variant of ocaml for win64 using mostly open=
=20
source components ;)

Other feedback (which is valid for MSVC64, too):

In ocaml 3.12, in byterun/major_gc.h, there is:

intnat caml_major_collection_slice (long howmuch)

whereas in the .c file that is:

intnat caml_major_collection_slice (intnat howmuch)

As intnat is with mingw-w64 long long, this doesn't match.
Should not the header use intnat, too?

Greetings
Christoph

=2D-=20
=2D------------------------------------- Christoph Cullmann ---------
AbsInt Angewandte Informatik GmbH      Email: cullmann@AbsInt.com
Science Park 1                         Tel:   +49-681-38360-22
66123 Saarbr=FCcken                      Fax:   +49-681-38360-20
GERMANY                                WWW:   http://www.AbsInt.com
=2D-------------------------------------------------------------------
Gesch=E4ftsf=FChrung: Dr.-Ing. Christian Ferdinand
Eingetragen im Handelsregister des Amtsgerichts Saarbr=FCcken, HRB 11234

