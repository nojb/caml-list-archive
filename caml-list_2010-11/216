Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 7E92BBBAF
	for <caml-list@yquem.inria.fr>; Mon, 22 Nov 2010 15:36:53 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApEBABYP6kzRVaG0k2dsb2JhbACaSogFCBUBAQEBCQkKCREDH4grmlGJY4IYhHQuiFkBAQMFhUYEil6JLQ
X-IronPort-AV: E=Sophos;i="4.59,236,1288566000"; 
   d="scan'208";a="79972814"
Received: from mail-gx0-f180.google.com ([209.85.161.180])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 22 Nov 2010 15:36:52 +0100
Received: by gxk24 with SMTP id 24so962810gxk.39
        for <caml-list@yquem.inria.fr>; Mon, 22 Nov 2010 06:36:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:mime-version:sender:received
         :in-reply-to:references:from:date:x-google-sender-auth:message-id
         :subject:to:cc:content-type;
        bh=gAa0BPBFcc0MSQtlnQ4VvFhoBrnOQjJ9XY2n2jTDDhE=;
        b=GBma5e52MHZb2rgUYYe0XWHe/2Bh7qr8E7NAOgUqJvnqemdUNKJfOKWxyWMb4u6uPI
         ybwwWmAmmlwJjXI3tuhbJTp2mAQwqhblgIiyGHL9ELfbSeszICA7jHC4R27xxVYqyCc9
         W8KoYxGU98CPoIBphS83f/vUwL/z9ZMBMr6ts=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        b=e03638HToGLIx93AFMJiYEolxaTesk5NT140Yr28aIqQxQ8WYegja0jox0XtQwlNNs
         VjOovcDytxlh6Z6iL8QmqJ4DKOJHndCSP5lV0WVeGvVsd2b9Cz2nBdxUgTnEoMSx5yA4
         5ebBFbUHTFND7oliyRxiL9OkWMejQlmSfI8uw=
Received: by 10.229.217.133 with SMTP id hm5mr4990022qcb.258.1290436610295;
 Mon, 22 Nov 2010 06:36:50 -0800 (PST)
MIME-Version: 1.0
Sender: gabriel.scherer@gmail.com
Received: by 10.229.253.135 with HTTP; Mon, 22 Nov 2010 06:36:30 -0800 (PST)
In-Reply-To: <1290434674.16005.354.camel@thinkpad>
References: <AANLkTi=MFt3mGK2L_o=4=o=3FOtA2onvdvqTpw9SObYP@mail.gmail.com> <1290434674.16005.354.camel@thinkpad>
From: bluestorm <bluestorm.dylc@gmail.com>
Date: Mon, 22 Nov 2010 15:36:30 +0100
X-Google-Sender-Auth: RzKmJDYH24FRmp_YXa1T6ujnLrk
Message-ID: <AANLkTi=nsgA3qEmpj0=89AodNN4M1tru+WJSsyYJ0ZqV@mail.gmail.com>
Subject: Re: [Caml-list] Is OCaml fast?
To: Gerd Stolpmann <info@gerd-stolpmann.de>
Cc: Thanassis Tsiodras <ttsiodras@gmail.com>,
	caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016361e81a2c30ada0495a52f01
X-Spam: no; 0.00; ocaml:01 gerd:01 stolpmann:01 ocaml:01 gerd:01 stolpmann:01 sans-serif:98 sans-serif:98 wrote:01 wrote:01 heap:01 heap:01 verdana:98 verdana:98 caml-list:01 

--0016361e81a2c30ada0495a52f01
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Mon, Nov 22, 2010 at 3:04 PM, Gerd Stolpmann <info@gerd-stolpmann.de>wro=
te:

> I think the shootout is not a good data source. There are definitely
> some very poor Ocaml results there, so I'd guess the shootout got
> recently more attention by enthusiasts of other languages, and the
> current Ocaml programs there are not very good. (I remember Ocaml was #1
> at the shootout a few years ago, faster than C.) So maybe a good
> opportunity to post better Ocaml solutions there?
>

As Sylvain noticed, some (in not most) of the OCaml poor performances in th=
e
shootout are actually not due to bad OCaml programs, but to arbitrary
restrictions in the shootout rules. For example, one of the bad-performing
benchmark for OCaml is the binary-tree benchmark, where it is nearly four
times slower than C, but on closer inspection you discover that this is due
to the arbitrary choice to forbid any change of the GC parameters. With
appropriate GC parameters, the very same OCaml program is exactly as fast a=
s
C.

http://shootout.alioth.debian.org/u32/performance.php?test=3Dbinarytrees

=AB Note: these programs are being measured with *the default initial heap
size* - the measurements may be very different with a larger initial heap
size or GC tuning. =BB
C version : 12.11 secs
OCaml version : 47.22 secs
OCaml version with GC parameters tuned ("interesting alternative" section) =
:
12.67 secs


Therefore, there is nothing that can be changed to the OCaml submission for
this benchmark to improve performances, except changing the default GC
parameters; while this might be a good idea in general, changing it only fo=
r
the sake of shootout-obsessed people is ridiculous.

--0016361e81a2c30ada0495a52f01
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Mon, Nov 22, 2010 at 3:04 PM, Gerd Stolpmann <span dir=3D"ltr">&lt;<a hr=
ef=3D"mailto:info@gerd-stolpmann.de">info@gerd-stolpmann.de</a>&gt;</span> =
wrote:<br><div class=3D"gmail_quote"><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">

I think the shootout is not a good data source. There are definitely<br>
some very poor Ocaml results there, so I&#39;d guess the shootout got<br>
recently more attention by enthusiasts of other languages, and the<br>
current Ocaml programs there are not very good. (I remember Ocaml was #1<br=
>
at the shootout a few years ago, faster than C.) So maybe a good<br>
opportunity to post better Ocaml solutions there?<br></blockquote><div><br>=
</div><div>As Sylvain noticed, some (in not most) of the OCaml poor perform=
ances in the shootout are actually not due to bad OCaml programs, but to ar=
bitrary restrictions in the shootout rules. For example, one of the bad-per=
forming benchmark for OCaml is the binary-tree benchmark, where it is nearl=
y four times slower than C, but on closer inspection you discover that this=
 is due to the arbitrary choice to forbid any change of the GC parameters. =
With appropriate GC parameters, the very same OCaml program is exactly as f=
ast as C.</div>

<div><br></div><div><a href=3D"http://shootout.alioth.debian.org/u32/perfor=
mance.php?test=3Dbinarytrees">http://shootout.alioth.debian.org/u32/perform=
ance.php?test=3Dbinarytrees</a></div><div><br></div><div>=AB=A0<span class=
=3D"Apple-style-span" style=3D"font-family: verdana, arial, sans-serif; ">N=
ote: these programs are being measured with=A0<em>the default initial heap =
size</em>=A0- the measurements may be very different with a larger initial =
heap size or GC tuning. =BB</span></div>

<div><font class=3D"Apple-style-span" face=3D"verdana, arial, sans-serif">C=
 version : 12.11 secs</font></div><div><font class=3D"Apple-style-span" fac=
e=3D"verdana, arial, sans-serif">OCaml version : 47.22 secs</font></div><di=
v><font class=3D"Apple-style-span" face=3D"verdana, arial, sans-serif">OCam=
l version with GC parameters tuned (&quot;interesting alternative&quot; sec=
tion) : 12.67 secs</font></div>

<div><font class=3D"Apple-style-span" face=3D"verdana, arial, sans-serif"><=
br></font></div><div><font class=3D"Apple-style-span" face=3D"verdana, aria=
l, sans-serif"><br></font></div><div><font class=3D"Apple-style-span" face=
=3D"verdana, arial, sans-serif">Therefore, there is nothing that can be cha=
nged to the OCaml submission for this benchmark to improve performances, ex=
cept changing the default GC parameters; while this might be a good idea in=
 general, changing it only for the sake of shootout-obsessed people is ridi=
culous.</font></div>

</div>

--0016361e81a2c30ada0495a52f01--

