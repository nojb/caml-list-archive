Return-Path: <michael@elehack.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 747A5BBAF
	for <caml-list@yquem.inria.fr>; Wed, 24 Nov 2010 15:06:27 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnsGABGr7Eyty1O7/2dsb2JhbACUcY4Gcb46hUcEhFuJFBo
X-IronPort-AV: E=Sophos;i="4.59,248,1288566000"; 
   d="scan'208";a="80123519"
Received: from elehack.net ([173.203.83.187])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 24 Nov 2010 15:06:08 +0100
Received: from [192.168.42.103] (unknown [68.168.162.166])
	by elehack.net (Postfix) with ESMTPSA id 7A00FC8A3F
	for <caml-list@yquem.inria.fr>; Wed, 24 Nov 2010 08:06:16 -0600 (CST)
Message-ID: <4CED1BCA.3050606@elehack.net>
Date: Wed, 24 Nov 2010 08:06:02 -0600
From: Michael Ekstrand <michael@elehack.net>
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.12) Gecko/20101027 Lightning/1.0b2 Thunderbird/3.1.6
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Desktop GUI toolkits - current state of the art?
References: <AANLkTinmdg+=NyumuqajsYfLHanmeo59E815DqWmWaPp@mail.gmail.com>	<AANLkTimrGksFy9PpmFZOsmE12m9cQaeN7f_KLWv9FfPJ@mail.gmail.com> <AANLkTikiG=nKYccQ-HESy+gijRXCnZFKF1bOFexruVj1@mail.gmail.com>
In-Reply-To: <AANLkTikiG=nKYccQ-HESy+gijRXCnZFKF1bOFexruVj1@mail.gmail.com>
X-Enigmail-Version: 1.1.2
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; lablgtk:01 lablgtk:01 gtk:01 gtk:01 verbose:01 translated:01 ocaml:01 high-level:01 high-level:01 higher-level:01 wwwfun:01 olabl:01 wrote:01 wrote:01 caml-list:01 

On 11/24/2010 03:33 AM, Martin DeMello wrote:
> On Wed, Nov 24, 2010 at 4:36 AM, Jacques Garrigue
> <garrigue@math.nagoya-u.ac.jp> wrote:
>> I'm not sure which examples you looked at for lablgtk2.
>> The goals of lablgtk are:
>>  * be as close as possible to the spirit of Gtk+
>>  * while providing type and memory safety
>>  * and allow comfortable use through objects and optional arguments
>> This resulted in a 2-layer implementation, with a lower layer
>> that just wraps basic Gtk+ calls, and an object layer on top of it.
>> Some examples mix the two layers, which may look strange, but
>> I think that when you use only the upper layer, this is clean enough.
>> (The lower layer is not dirty, but converting between the two may be
>> verbose and look clumsy).
> 
> That might be the problem, then. I was looking at the examples in the
> translation of the gtk tutorial, and a lot of it seemed like C code
> translated to OCaml. Could you point me to some example of code
> written using the high level API?

The LablGTK tutorial I am aware of[1] uses the high-level API.  The
high-level API isn't notably higher-level than the base API in terms of
what calls are necessary, but it wraps everything up in objects and
makes the data structures nicer.  The API call sequences are roughly the
same.

- Michael

1. http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/lablgtk.html

