Return-Path: <SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 51202E0031
	for <caml-list@sympa.inria.fr>; Tue,  7 Jul 2020 12:04:52 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=ufv1=AS=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3A0ruj1hOUHMrttn/GDgol6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K//+pMbcNUDSrc9gkEXOFd2Cra4d1ayP7uu5ACRAuc/H7ClfNsQUFlcsso?=
 =?us-ascii?q?Y/p0QYGsmLCEn2frbBThcRO4B8bmJj5GyxKkNPGczzNBX4q3y26iMOSF2kbVIm?=
 =?us-ascii?q?buv6FZTPgMupyuu854PcYxlShDq6fLh+MAi6oR/eu8ULgIZuMLs9xxvGrndVZu?=
 =?us-ascii?q?hd2GdkKU6Okxrm6cq84Z5u/z5Mt/498sJLTLn3cbk/QbFEFjotLno75NfstRnN?=
 =?us-ascii?q?TAuP4mUTX2ALmRdWAAbL8Q/3UI7pviT1quRy1i+aPdbrTb8vQjSt871rSB7zhy?=
 =?us-ascii?q?gZMTMy7XzahdZxjKJfpxKhugB/zovJa4ybKPZyYqXQds4dSmRcQ8ZRTDRBDZ2g?=
 =?us-ascii?q?YIsTAeQBOuNYoJP8p1sIsBCyAQahCefqxjJOhnP43qs60/ogEQHd3QwvBNYOv2?=
 =?us-ascii?q?rJp9T7M6cSS/26zLLVxjnHYf5axTLx5Y7VeR4jvP6MR6p9f8rPx0cyGQ3LjVqf?=
 =?us-ascii?q?ppD+MjOQyugAqXKW4/Z8We+tjWMstgF/oiKoxscpkoTEmoYVxUrC9S5k3Yg6Od?=
 =?us-ascii?q?24SEt6Yd64DJtbqiaXOJFyQsw4RWFkoj06xaEGuZ6+fSgK1IgnygXHa/yAd4iJ?=
 =?us-ascii?q?4g7jW/iNLjd4gnJleau/hwus/kS6ze38TMa03U9MoyFYndbCqmoD2AbP6sibVP?=
 =?us-ascii?q?R95EGh1C6A2gzP9uxKL0A6m6rFJ5MuwrM+locfvETBEyLqhEn7kbGaelsl9+Wq?=
 =?us-ascii?q?6+rqfrXrq56BO4J6lgzzMrgjltK7DOk4NAUFQmaV+eO51LL5/E35Rq1HjuUona?=
 =?us-ascii?q?nFsZDaOdoUpra+Aw9Q14Ys9QyzDzG439QEhXUHK05KdwiCj4jtIV3OJ+r4Dfin?=
 =?us-ascii?q?j1SjkTdr2/TGMaf6DZnXL3jDl6/tfbl8605AyAoz0MtQ64hIBbEGJfL/QlTxtN?=
 =?us-ascii?q?3XDh8hNwy72eDnBM961oMEVmKDGrWWMLndsF+J+OIjOe6MZJUauDrlKvgl4eTu?=
 =?us-ascii?q?jX4jllMHc6mpx4MbaH+5HvR6J0WWe2Hjjs0dHmcNuwoyVOPqiFyeUT5Tena9RL?=
 =?us-ascii?q?gw5jA8CI6+DIfMW4CsgLiF3CuhGZ1WfG9GB1aRGnnrb4WJQ+oAZDyWL8N7jzAI?=
 =?us-ascii?q?SbesR5Uv2B2yrgP3xbVqIvLJ9iAWqJ7vzsZ56u3cmB0o6DB4E96R33yPQm1omG?=
 =?us-ascii?q?4DWiU407ploUNnz1eOyah4jOJcFdxU//5JVwg7OYPGw+xiDNDyXgLAfsuXR1m6?=
 =?us-ascii?q?QtWmBzAxTsssw9AQeUp9HM+ijh/b0yqrBb8aiaCLCYQp/q7C23X9Pdtxx2rJ2a?=
 =?us-ascii?q?U7gVQqXtFDOGOpi6Jn8gjcHY/Jk0GXl6awcqQc2TbA+nqfw2SToE1VSBNwUavb?=
 =?us-ascii?q?XXwCfkbbscn361vaT7+pDbQmMhdBxtCeJatKbN3pjExGROr9N9jEZGKxgWiwCA?=
 =?us-ascii?q?6SybOIdoXqfX8R3D7BB0gElgAT/GqGNRQlCyi6pGLeETpuGk7xbEP36+V+rXy2?=
 =?us-ascii?q?T0AuwwGNdU1h2KK5+gQJivyEV/MTwrUEtT89pDpuGVa928vaC96Bpwp6YKVRes?=
 =?us-ascii?q?g94VdC1WLBrQNxJJ2gL6Z4hl4faQt7pU3u1w8kQrlHxIIus3VghF52NqSw1ExH?=
 =?us-ascii?q?MTWVwca0cvfcNW+4tFj7YLHQ8lXfy8qNvKYD+fA87VL5s1ftXkEr9nEi19hOz1?=
 =?us-ascii?q?Od4I/LBUwcS9a5WUEy7zB+pqrGeW86/YnVyXRoP66k9DLfiPwzA+5w4xKpeZ9k?=
 =?us-ascii?q?O6OBFRPuW5kTA8Gobvchm12ocg4sJOdW5bI5NMOgduKb1eisJuk2z2HutnhO/I?=
 =?us-ascii?q?0oihHEzCF7UOOdgMdcnqOomzCfXjK5t2+P98D6nYcePmMXDjP50S/gFZJcba10?=
 =?us-ascii?q?fJ8WBCGpOcLln4wi1a6oYGZR8RuYP31DwNWgIEvAd1v5zBFd3kQRoGW6lG2/1T?=
 =?us-ascii?q?Mmymh4/Jra5zTHxqHZTDRCP2dKQGd4ilK1ftq+iM0cV0WzKQ11hF2i/0monqU?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BbAQDjRwRfhyIeaIFgFgYBAQEBAQEHA?=
 =?us-ascii?q?QESAQEEBAEBggqBI1hAAV1VMiyEMokBiROCDYU6jVGEA4EQA1AQAQMBBwUYAQ4?=
 =?us-ascii?q?FAQIEAQGGbwIdBgEFMxMCEAEBBQEBAQIBAwMEARMBAQEKCwkIKYU1BicMgjcMD?=
 =?us-ascii?q?AMDgx4DARgBCAQGOyojAxQBBgMCEQEXARQKAwETARIUBgGCQEsBgnwFCo0Km3p?=
 =?us-ascii?q?/M4Q6AQMFhESBMBANAhN/F4FTg2NGgmoIg1YmD4FMP4ERglsHbIF9SAwLAQEBA?=
 =?us-ascii?q?QGBFh0BBgEBBgQHgyUXgkkEjyAKBCQDaIoFh1OSTigHgl+BBwQLhjl8hi6EHYN?=
 =?us-ascii?q?Vgn+Cc4EaiBaFIo1YIZE5gWWFZgd6gVCFcYkngQ2ESIFAKoF4MxowQw0OA4JLC?=
 =?us-ascii?q?WANi3KCAwEzAReDToEGOIEmgSRRO4VEPzMCAQEOJQIGAQcBAQMJdQEBBRMLAY0?=
 =?us-ascii?q?AAQEmgh4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0BbAQDjRwRfhyIeaIFgFgYBAQEBAQEHAQESAQEEBAEBggq?=
 =?us-ascii?q?BI1hAAV1VMiyEMokBiROCDYU6jVGEA4EQA1AQAQMBBwUYAQ4FAQIEAQGGbwIdB?=
 =?us-ascii?q?gEFMxMCEAEBBQEBAQIBAwMEARMBAQEKCwkIKYU1BicMgjcMDAMDgx4DARgBCAQ?=
 =?us-ascii?q?GOyojAxQBBgMCEQEXARQKAwETARIUBgGCQEsBgnwFCo0Km3p/M4Q6AQMFhESBM?=
 =?us-ascii?q?BANAhN/F4FTg2NGgmoIg1YmD4FMP4ERglsHbIF9SAwLAQEBAQGBFh0BBgEBBgQ?=
 =?us-ascii?q?HgyUXgkkEjyAKBCQDaIoFh1OSTigHgl+BBwQLhjl8hi6EHYNVgn+Cc4EaiBaFI?=
 =?us-ascii?q?o1YIZE5gWWFZgd6gVCFcYkngQ2ESIFAKoF4MxowQw0OA4JLCWANi3KCAwEzARe?=
 =?us-ascii?q?DToEGOIEmgSRRO4VEPzMCAQEOJQIGAQcBAQMJdQEBBRMLAY0AAQEmgh4BAQ?=
X-IronPort-AV: E=Sophos;i="5.75,323,1589234400"; 
   d="asc'?scan'208,217";a="353812284"
X-MGA-submission: =?us-ascii?q?MDF7OsUlU+u8wJsrjYTaCICSYf0/+4sIcMK5O7?=
 =?us-ascii?q?e4jDGsNnuHbFsV+ArokLvupuVdD6yA+2kZmnbKLK/ry3+sypG4DiXv5I?=
 =?us-ascii?q?GhjaDEi1ne7t5hhPuES0Ujb7n1LEzl76OEVqKC7WX3jWgn5wn+G9Mgbo?=
 =?us-ascii?q?X7Sf2p6OBDQBR4L86TGXKD+w=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Jul 2020 12:04:49 +0200
Received: from set (set.irisa.fr [131.254.10.170])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 00F43565A7D;
	Tue,  7 Jul 2020 12:04:46 +0200 (CEST)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr, comp@lists.orbitalfox.eu
Date: Tue, 07 Jul 2020 12:04:45 +0200
Message-ID: <87o8ormyiq.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Jul  7 12:04:47 2020 +0200 (CEST))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.000000, queueID=7852E565A7E
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: multipart/signed; boundary="==-=-=";
	micalg=pgp-sha256; protocol="application/pgp-signature"

--==-=-=
Content-Type: text/plain


--==-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEE6lXof/BsSVW56ZmGBA0KO07S5ccFAl8ESL4ACgkQBA0KO07S
5ce/5QgAsTTm481rZPqUq/792kDNaRpPsvGleJGGobwewg4IZsdVIjExmTMrvpuc
yet23zXlpL1iijsgcvZHNTmwDy3EM4kGpN2zcP85UcUq0gPY+h6AIKQBDY+eUiR4
RXZIWUX15Hc4DHcUbfhzjzdGhqAbsZa4MGNaZ4cBRaOJpcgdPrkhaaMuwniyh3Of
y5T/906oy2vdXFGbBj9PQAfWSkgGlqWXRmseEiCih+98i5AzXs8A8mc4/kDd3Tzr
9YYDtxyg3ED7F1kKSBARyDAAgDVCMko8pGY/2RixIKbJbDEJe3Y1Mrdta8ooR/h8
NcbPAPu6LQvEI39FYlR9dFl7DmRwUA==
=01eu
-----END PGP SIGNATURE-----
--==-=-=--

--=-=-=
Content-Type: multipart/alternative; boundary="===-=-="

--===-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of June 30 to July
07, 2020.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Releases of ringo
Multicore OCaml: June 2020
Time expression demo
Interactive OCaml development with utop in Emacs
Old CWN


Releases of ringo
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90

  Archive: [https://discuss.ocaml.org/t/ann-releases-of-ringo/5605/5]


Continuing this thread, Rapha=C3=ABl Proust said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  Ringo provides bounded-size key-value stores. More specifically, it
  provides a functor similar to `Hastbl.Make' except that the number of
  bindings held by the tables is limited: inserting additional bindings
  when the limit has been reached causes some previously inserted
  binding to be removed.

  More more specifically, Ringo provides a function `map_maker' that
  takes parameters to customise the policies that determine the
  behaviour of the cache when supernumerary bindings are inserted, and
  returns the functor described above. Once a module `Cache' is
  instantiated using this functor, it can be used as follows:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let cache =3D Cache.create size
  =E2=94=82 let fetch_data uri =3D
  =E2=94=82   match Cache.find_opt cache uri with
  =E2=94=82   | Some data -> data
  =E2=94=82   | None ->
  =E2=94=82     let data =3D really_fetch_data uri in
  =E2=94=82     Cache.replace cache uri data;
  =E2=94=82     data
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The cache will only hold up to [size] bindings, which avoids leaking
  memory. Additionally, the parameters for `map_maker' allow you to
  customise:

  =E2=80=A2 The replacement policy: which binding is removed when a
    supernumerary is inserted (currently supports least-recently used
    and first-in first-out).
  =E2=80=A2 The overflow policy: whether the cache can weakly hold some
    supernumerary elements (if so, the cache may hold more but the GC
    can always collect them if space is lacking).
  =E2=80=A2 The accounting precision: whether to keep precise track of
    removed/replaced elements.

  In addition, Ringo also provide set-caches: i.e., sets (rather than
  maps) with bounded size and all the same properties as above.

  Also note Ringo-Lwt (`ringo-lwt') provides Lwt wrappers around Ringo
  caches.

  If you have suggestions for a different concise synopsis for `opam',
  feel free to send them this way.

  Use cases are, I guess, caches. In particular those that might receive
  many elements not all of which you can hold in memory. We use it in a
  few places in the Tezos project to hold resources (blocks, operations,
  etc.) that are fetched from the P2p layer: it avoids having to fetch
  them again from the network.

  I think `anycache', `lru', and `lru-cache' are all alternatives
  available on opam.


Rapha=C3=ABl Proust later added
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80

  The documentation is now available online at
  [https://nomadic-labs.gitlab.io/ringo/index.html]

  Of particular interest:
  =E2=80=A2 [The signature for a `ringo' key-value cache]
  =E2=80=A2 [The entry point for the `ringo' library] (allowing you to
    instantiate modules with the above signature as well as simple value
    caches)
  =E2=80=A2 [The signature for `ringo-lwt' cache]


[The signature for a `ringo' key-value cache]
https://nomadic-labs.gitlab.io/ringo/ringo/Ringo/module-type-CACHE_MAP/inde=
x.html

[The entry point for the `ringo' library]
https://nomadic-labs.gitlab.io/ringo/ringo/Ringo/index.html

[The signature for `ringo-lwt' cache]
https://nomadic-labs.gitlab.io/ringo/ringo-lwt/Ringo_lwt/Sigs/module-type-C=
ACHE_MAP/index.html


Multicore OCaml: June 2020
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90

  Archive:
  [https://discuss.ocaml.org/t/multicore-ocaml-june-2020/6047/1]


Anil Madhavapeddy announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  Welcome to the June 2020 [Multicore OCaml] report! As with [previous
  updates], many thanks to @shakthimaan and @kayceesrk for collating the
  updates for the month of June 2020. /This is an incremental update;
  new readers may find it helpful to flick through the previous posts
  first./

  This month has seen a tremendous surge of activity on the upstream
  OCaml project to prepare for multicore integration, as @xavierleroy
  and the core team have driven a number of initiatives to prepare the
  OCaml project for the full multicore featureset.  To reflect this,
  from next month we will have a status page on the ocaml-multicore wiki
  with the current status of both our multicore branch and the upstream
  OCaml project itself.

  Why not from this month? Well, there's good news and bad news.  [Last
  month], I observed that we are a PR away from most of the opam
  ecosystem working with the multicore branch.  The good news is that we
  are still a single PR away from it working, but it's a different one
  :-) The retrofitting of the `Threads' library has brought up [some
  design complexities], and so rather than putting in a "bandaid" fix,
  we are integrating a comprehensive solution that will work with system
  threads, domains and (eventually) fibres.  That work has taken some
  time to get right, and I hope to be able to update you all on an
  opam-friendly OCaml 4.10.0+multicore in a few weeks.

  Aside from this, there have been a number of other improvements going
  into the multicore branches: [mingw Windows support], [callstack
  improvements], [fixing the Unix module] and so on. The full list is in
  the detailed report later in this update.


[Multicore OCaml] https://github.com/ocaml-multicore/ocaml-multicore

[previous updates] https://discuss.ocaml.org/tag/multicore-monthly

[Last month]
https://discuss.ocaml.org/t/multicore-ocaml-may-2020-update/5898

[some design complexities]
https://github.com/ocaml-multicore/ocaml-multicore/pull/342

[mingw Windows support]
https://github.com/ocaml-multicore/ocaml-multicore/pull/351

[callstack improvements]
https://github.com/ocaml-multicore/ocaml-multicore/pull/363

[fixing the Unix module]
https://github.com/ocaml-multicore/ocaml-multicore/pull/346

Sandmark benchmarks
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C

  A major milestone in this month has been the upgrade to the latest
  dune.2.6.0 to build Multicore OCaml 4.10.0 for the Sandmark
  benchmarking project. A number of new OPAM packages have been added,
  and the existing packages have been upgraded to their latest
  versions. The Multicore OCaml code base has seen continuous
  performance improvements and enhancements which can be observed from
  the various PRs mentioned in the report.

  We would like to thank:

  =E2=80=A2 @xavierleroy for working on a number of multicore-prequisite PR=
s to
    make stock OCaml ready for Multicore OCaml.
  =E2=80=A2 @camlspotter has reviewed and accepted the camlimages changes a=
nd
    made a release of camlimages.5.0.3 required for Sandmark.
  =E2=80=A2 @dinosaure for updating the decompress test benchmarks for Sand=
mark
    to build and run with dune.2.6.0 for Multicore OCaml 4.10.0.

  A chapter on Parallel Programming in Multicore OCaml with topics on
  task pool, channels section, profiling with code examples is being
  written. We shall provide an early draft version of the document to
  the community for your valuable feedback.


Papers
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Our "Retrofitting Parallism onto OCaml" paper has been officially
  accepted at [ICFP 2020] which will be held virtually between August
  23-28, 2020. A [preprint] of the paper was made available earlier, and
  will be updated in a few days with the camera-ready version for ICFP.
  Please do feel free to send on comments and queries even after the
  paper is published, of course.

  Excitingly, another multicore-related paper on [Cosmo: A Concurrent
  Separation Logic for Multicore OCaml] will also be presented at the
  same conference.

  The Multicore OCaml updates are first listed in our report, which are
  followed by improvements to the Sandmark benchmarking
  project. Finally, the changes made to upstream OCaml which include
  both the ongoing and completed tasks are mentioned for your reference.


[ICFP 2020]
https://icfp20.sigplan.org/track/icfp-2020-papers#event-overview

[preprint] https://arxiv.org/abs/2004.11663

[Cosmo: A Concurrent Separation Logic for Multicore OCaml]
http://gallium.inria.fr/~fpottier/publis/mevel-jourdan-pottier-cosmo-2020.p=
df


Multicore OCaml
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A Ongoing

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#339] Proposal for domain-local
    storage

    An RFC proposal to implement a domain-local storage in Multicore
    OCaml. Kindly review the idea and share your feedback!

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#342] Implementing the threads
    library with Domains

    An effort to rebase @jhwoodyatt's implementation of the Thread
    library for Domains.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#357] Implementation of systhre=
ads
    with pthreads

    Exploring the possibilty of implementing systhreads with pthreads,
    while still maintaining compatibility with the existing solution.

  =E2=80=A2 [ocaml/dune#3548] Dune fails to pick up secondary compiler

    The `ocaml-secondary-compiler' fails to install with
    dune.2.6.0. This is required as Multicore OCaml cannot build the
    latest dune without systhreads support.


  [ocaml-multicore/ocaml-multicore#339]
  https://github.com/ocaml-multicore/ocaml-multicore/issues/339

  [ocaml-multicore/ocaml-multicore#342]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/342

  [ocaml-multicore/ocaml-multicore#357]
  https://github.com/ocaml-multicore/ocaml-multicore/issues/357

  [ocaml/dune#3548] https://github.com/ocaml/dune/issues/3548


=E2=97=8A Completed

  =E2=80=A2 [ocaml-multicore/multicore-opam#22] Update dune to 2.6.0

    The dune version in the Multicore OPAM repository is now updated to
    use the latest 2.6.0.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#338] Introduce Lazy.try_force =
and
    Lazy.try_force_val

    An implementation of `Lazy.try_force' and `Lazy.try_force_val'
    functions to implement concurrent lazy abstractions.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#340] Fix Atomic.exchange in
    concurrent_minor_gc

    A patch that introduces `Atomic.exchange' through `Atomic.get' that
    provides the appropriate read barrier for correct exchange semantics
    for `caml_atomic_exchange' in `memory.c'.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#343] Fix extcall noalloc DWARF

    The DWARF information emitted for `extcall noalloc' had broken
    backtraces and this PR fixes the same.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#345] Absolute exception stack

    The representation of the exception stack is changed from relative
    addressing to absolute addressing and the results are promising. The
    Sandmark serial benchmark results after the change is illustrated in
    the following graph:

    [https://aws1.discourse-cdn.com/standard11/uploads/ocaml/optimized/2X/b=
/b385409b3f9e44cbfef98de668b0b4d0ed403472_2_1380x436.png]

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#347] Turn on -Werror by default

    Adds a `--enable-warn-error' option to `configure' to treat C
    compiler warnings as errors.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#353] Poll for interrupts in
    cpu_relax without locking

    Use `Caml_check_gc_interrupt' first to poll for interrupts without
    locking, and then proceeding to handle the interrupt with the lock.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#354] Add Caml_state_field to
    domain_state.h

    The `Caml_state_field' macro definition in domain_state.h is
    required for base-v0.14.0 to build for Multicore OCaml 4.10.0 with
    dune.2.6.0.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#355] One more location to poll=
 for
    interrupts without lock

    Another use of `Caml_check_gc_interrupt' first to poll for
    interrupts without lock, similar to
    [ocaml-multicore/ocaml-multicore#353].

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#356] Backup threads for domain

    Introduces `backup threads' to perform GC and handle service
    interrupts when the domain is blocked in the kernel.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#358] Fix up bad CFI informatio=
n in
    amd64.S

    Add missing `CFI_ADJUST' directives in `runtime/amd64.S' for
    `caml_call_poll' and `caml_allocN'.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#359] Inline caml_domain_alone

    The PR makes `caml_domain_alone' an inline function to improve
    performance for `caml_atomic_cas_field' and other atomics in
    `memory.c'.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#360] Parallel minor GC inline =
mask
    rework

    The inline mask rework for the promotion path to the
    `parallel_minor_gc' branch gives a 3-5% performance improvement for
    `test_decompress' sandmark benchmark, and a decrease in the executed
    instructions for all other benchmarks.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#361] Mark stack push work cred=
it

    The PR improves the Multicore mark work accounting to be in line
    with stock OCaml.

  =E2=80=A2 [ocaml-multicore/ocaml-multicore#362] Iloadmut does not clobber=
 rax
    and rdx when we do not have a read barrier

    A code clean-up to free the registers `rax' and `rdx' for OCaml code
    when `Iloadmut' is used.


  [ocaml-multicore/multicore-opam#22]
  https://github.com/ocaml-multicore/multicore-opam/pull/22

  [ocaml-multicore/ocaml-multicore#338]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/338

  [ocaml-multicore/ocaml-multicore#340]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/340

  [ocaml-multicore/ocaml-multicore#343]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/343

  [ocaml-multicore/ocaml-multicore#345]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/345

  [ocaml-multicore/ocaml-multicore#347]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/347

  [ocaml-multicore/ocaml-multicore#353]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/353

  [ocaml-multicore/ocaml-multicore#354]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/354

  [ocaml-multicore/ocaml-multicore#355]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/355

  [ocaml-multicore/ocaml-multicore#356]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/356

  [ocaml-multicore/ocaml-multicore#358]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/358

  [ocaml-multicore/ocaml-multicore#359]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/359

  [ocaml-multicore/ocaml-multicore#360]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/360

  [ocaml-multicore/ocaml-multicore#361]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/361

  [ocaml-multicore/ocaml-multicore#362]
  https://github.com/ocaml-multicore/ocaml-multicore/pull/362


Benchmarking
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A Ongoing

  =E2=80=A2 [ocaml-bench/sandmark#8] Ability to run compiler variants in
    Sandmark

    A feature to specify configure options when building compiler
    variants such as `flambda' is useful for development and
    testing. This feature is being worked upon.

  =E2=80=A2 [ocaml-bench/sandmark#107] Add Coq benchmarks

    We are continuing to add more benchmarks to Sandmark for Multicore
    OCaml and investigating adding the [Coq] benchmarks to our
    repertoire!

  =E2=80=A2 [ocaml-bench/sandmark#124] User configurable paramwrapper added=
 to
    Makefile

    A `PARAMWRAPPER' environment variable can be passed as an argument
    by specifying the `--cpu-list' to be used for parallel benchmark
    runs.

  =E2=80=A2 [ocaml-bench/sandmark#131] Update decompress benchmarks

    Thanks to @dinosaure for updating the decompress benchmarks in order
    to run them with dune.2.6.0 for Multicore OCaml 4.10.0.

  =E2=80=A2 [ocaml-bench/sandmark#132] Update dependency packages to use
    dune.2.6.0 and Multicore OCaml 4.10.0

    Sandmark has been running with dune.1.11.4, and we need to move to
    the latest dune.2.6.0 for using Multicore OCaml 4.10.0 and beyond,
    as mentioned in [Promote dune to > 2.0]. The PR updates over 30
    dependency packages and successfully builds both serial and parallel
    benchmarks!


  [ocaml-bench/sandmark#8]
  https://github.com/ocaml-bench/sandmark/issues/8

  [ocaml-bench/sandmark#107]
  https://github.com/ocaml-bench/sandmark/issues/107

  [Coq] https://coq.inria.fr/

  [ocaml-bench/sandmark#124]
  https://github.com/ocaml-bench/sandmark/pull/124

  [ocaml-bench/sandmark#131]
  https://github.com/ocaml-bench/sandmark/pull/131

  [ocaml-bench/sandmark#132]
  https://github.com/ocaml-bench/sandmark/pull/132

  [Promote dune to > 2.0]
  https://github.com/ocaml-bench/sandmark/issues/106


=E2=97=8A Completed

  =E2=80=A2 [camlspotter/camlimages#1] Use dune-configurator instead of
    configurator for camlimages

    A new release of `camlimages.5.0.3' was made by @camlspotter after
    accepting the changes to camlimages.opam in order to build with
    dune.2.6.0.

  =E2=80=A2 [ocaml-bench/sandmark#115] Task API Port: LU-Decomposition, Flo=
yd
    Warshall, Mandelbrot, Nbody

    The changes to use the `Domainslib.Task' API for the listed
    benchmarks have been merged.

  =E2=80=A2 [ocaml-bench/sandmark#121] Mention sudo access for
    run_all_parallel.sh script

    The README.md file has been updated with the necessary `sudo'
    configuration steps to execute the `run_all_parallel.sh' script for
    nightly builds.

  =E2=80=A2 [ocaml-bench/sandmark#125] Add cubicle benchmarks

    The `German PFS' and `Szymanski's mutual exclusion algorithm'
    cubicle benchmarks have been included in Sandmark.

  =E2=80=A2 [ocaml-bench/sandmark#126] Update ocaml-versions README to refl=
ect
    4.10.0+multicore

    The README has now been updated to reflect the latest 4.10.0
    Multicore OCaml compiler and its variants.

  =E2=80=A2 [ocaml-bench/sandmark#129] Add target to run parallel benchmark=
s in
    the CI

    The .drone.yml file used by the CI has been updated to run both the
    serial and parallel benchmarks.

  =E2=80=A2 [ocaml-bench/sandmark#130] Add missing dependencies in
    multicore-numerical

    The `domainslib' library has been added to the dune file for the
    multicore-numerical benchmark.


  [camlspotter/camlimages#1]
  https://gitlab.com/camlspotter/camlimages/-/merge_requests/1

  [ocaml-bench/sandmark#115]
  https://github.com/ocaml-bench/sandmark/pull/115

  [ocaml-bench/sandmark#121]
  https://github.com/ocaml-bench/sandmark/pull/121

  [ocaml-bench/sandmark#125]
  https://github.com/ocaml-bench/sandmark/pull/125

  [ocaml-bench/sandmark#126]
  https://github.com/ocaml-bench/sandmark/pull/126

  [ocaml-bench/sandmark#129]
  https://github.com/ocaml-bench/sandmark/pull/129

  [ocaml-bench/sandmark#130]
  https://github.com/ocaml-bench/sandmark/pull/130


OCaml
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A Ongoing

  =E2=80=A2 [ocaml/ocaml#9541] Add manual page for the instrumented runtime

    The [instrumented runtime] has been merged to OCaml 4.11.0. A manual
    for the same has been created and is under review.

  =E2=80=A2 [sadigqj/ocaml#1] GC colours change

    This PR removes the grey colour used in stock OCaml to match the
    scheme used by the Multicore major collector. The performance and
    considerations are included for review.


  [ocaml/ocaml#9541] https://github.com/ocaml/ocaml/pull/9541

  [instrumented runtime] https://github.com/ocaml/ocaml/pull/9082

  [sadigqj/ocaml#1] https://github.com/sadiqj/ocaml/pull/1


=E2=97=8A Completed

  =E2=80=A2 [ocaml/ocaml#9619] A self-describing representation for function
    closures

    The PR provides a way to record the position of the environment for
    each entry point for function closures.

  =E2=80=A2 [ocaml/ocaml#9649] Marshaling for the new closure representation

    The `output_value' marshaler has been updated to use the new closure
    representation. There is no change required for the `input_value'
    unmarshaler.

  =E2=80=A2 [ocaml/ocaml#9655] Introduce type Obj.raw_data and functions
    Obj.raw_field, Obj.set_raw_field to manipulate out-of-heap pointers

    The PR introduces a type `Obj.bits', and functions `Obj.field_bits'
    and `Obj.set_field_bits' to read and write bit representation of
    block fields to support the no-naked-pointer operation.

  =E2=80=A2 [ocaml/ocaml#9678] Reimplement Obj.reachable_word using a hash =
table
    to detect sharing

    The `caml_obj_reachable_words' now uses a hash table instead of
    modifying the mark bits of block headers to detect sharing. This is
    required for compatibility with Multicore OCaml.

  =E2=80=A2 [ocaml/ocaml#9680] Naked pointers and the bytecode interpreter

    The bytecode interpreter implementation is updated to support the
    no-naked-pointers mode operation as required by Multicore OCaml.

  =E2=80=A2 [ocaml/ocaml#9682] Signal handling in native code without the p=
age
    table

    The patch uses the code fragment table instead of a page table
    lookup for signal handlers to know whether the signal came from
    ocamlopt-generated code.

  =E2=80=A2 [ocaml/ocaml#9683] globroots.c: adapt to no-naked-pointers mode

    The patch considers out-of-heap pointers as major-heap pointers in
    no-naked-pointers mode for global roots management.

  =E2=80=A2 [ocaml/ocaml#9689] Generic hashing for the new closure
    representation

    The hashing functions have been updated to use the latest closure
    representation from [ocaml/ocaml#9619] for the no-naked-pointers
    mode.

  =E2=80=A2 [ocaml/ocaml#9698] The end of the page table is near

    The PR eliminates some of the use of the page tables in the runtime
    system when built with no-naked-pointers mode.

  Our thanks to all the OCaml developers and users in the community for
  their continued support and contribution to the project. Stay safe!


  [ocaml/ocaml#9619] https://github.com/ocaml/ocaml/pull/9619

  [ocaml/ocaml#9649] https://github.com/ocaml/ocaml/pull/9649

  [ocaml/ocaml#9655] https://github.com/ocaml/ocaml/pull/9655

  [ocaml/ocaml#9678] https://github.com/ocaml/ocaml/pull/9678

  [ocaml/ocaml#9680] https://github.com/ocaml/ocaml/pull/9680

  [ocaml/ocaml#9682] https://github.com/ocaml/ocaml/pull/9682

  [ocaml/ocaml#9683] https://github.com/ocaml/ocaml/pull/9683

  [ocaml/ocaml#9689] https://github.com/ocaml/ocaml/pull/9689

  [ocaml/ocaml#9698] https://github.com/ocaml/ocaml/pull/9698


Acronyms
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 API: Application Programming Interface
  =E2=80=A2 CFI: Call Frame Information
  =E2=80=A2 CI: Continuous Integration
  =E2=80=A2 DWARF: Debugging With Attributed Record Formats
  =E2=80=A2 GC: Garbage Collector
  =E2=80=A2 ICFP: International Conference on Functional Programming
  =E2=80=A2 OPAM: OCaml Package Manager
  =E2=80=A2 PR: Pull Request
  =E2=80=A2 RFC: Request for Comments


Time expression demo
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive: [https://discuss.ocaml.org/t/time-expression-demo/6052/1]


Darren announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  An interactive demo for a small part of our time stuff and schedule
  handling library is available here:
  [https://daypack-dev.github.io/time-expr-demo/]

  Time expression is in essence a language for specifying time points or
  time slots precisely and concisely, while trying to mimic natural
  language.

  The implementation of the demo core itself can be seen here:
  [https://github.com/daypack-dev/time-expr-demo/blob/master/src/demo.ml]
  , where the usage of Daypack-lib is shown.

  Lastly, the library is still a prototype, so expect some faults in the
  outputs of the demo here and there.


Interactive OCaml development with utop in Emacs
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  [https://discuss.ocaml.org/t/interactive-ocaml-development-with-utop-in-e=
macs/6058/1]


Samarth Kishor announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I made a [blog post] about REPL driven development with utop in Emacs
  a few months ago. Please let me know if you found it useful or have
  anything to add!  I'm a bit new to OCaml so any feedback helps.

  There was a [similar post about REPL driven development] last year and
  my post addresses a lot of those points. I wish I'd seen that post
  before I wrote this since there's a ton of useful information in the
  comments.


[blog post]
https://samarthkishor.github.io/posts/interactive_ocaml_development/

[similar post about REPL driven development]
https://discuss.ocaml.org/t/ocaml-repl-driven-development/4068


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] mailto:alan.schmitt@polytechnique.org

[the archive] http://alan.petitepomme.net/cwn/

[RSS feed of the archives] http://alan.petitepomme.net/cwn/cwn.rss

[online] http://lists.idyll.org/listinfo/caml-news-weekly/

[Alan Schmitt] http://alan.petitepomme.net/


--===-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2020-07-07 Tue 12:00 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.06.30.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2020.07.14.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of June 30 to July 07, 2=
020.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">Releases of ringo</a></li>
<li><a href=3D"#2">Multicore OCaml: June 2020</a></li>
<li><a href=3D"#3">Time expression demo</a></li>
<li><a href=3D"#4">Interactive OCaml development with utop in Emacs</a></li>
<li><a href=3D"#org862693b">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-orgde70133" class=3D"outline-2">
<h2 id=3D"1"><a id=3D"orgde70133"></a>Releases of ringo</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-releases-of-ringo/5605/=
5">https://discuss.ocaml.org/t/ann-releases-of-ringo/5605/5</a>
</p>
</div>

<div id=3D"outline-container-org5a8f3fb" class=3D"outline-3">
<h3 id=3D"org5a8f3fb">Continuing this thread, Rapha=C3=ABl Proust said</h3>
<div class=3D"outline-text-3" id=3D"text-org5a8f3fb">
<p>
Ringo provides bounded-size key-value stores. More specifically, it provide=
s a functor similar to <code>Hastbl.Make</code>
except that the number of bindings held by the tables is limited: inserting=
 additional bindings when the limit has
been reached causes some previously inserted binding to be removed.
</p>

<p>
More more specifically, Ringo provides a function <code>map_maker</code> th=
at takes parameters to customise the policies that
determine the behaviour of the cache when supernumerary bindings are insert=
ed, and returns the functor described
above. Once a module <code>Cache</code> is instantiated using this functor,=
 it can be used as follows:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">cache</span> =3D <span styl=
e=3D"color: #228b22;">Cache.</span>create size
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">fetch_data</span> <span style=3D"color: #a0522d;">uri<=
/span> =3D
  <span style=3D"color: #a020f0;">match</span> <span style=3D"color: #228b2=
2;">Cache.</span>find_opt cache uri <span style=3D"color: #a020f0;">with</s=
pan>
  | <span style=3D"color: #000000; background-color: #ffffff;">Some</span> =
data -&gt; data
  | <span style=3D"color: #000000; background-color: #ffffff;">None</span> =
-&gt;
    <span style=3D"color: #000000; font-weight: bold;">let</span> <span sty=
le=3D"color: #a0522d;">data</span> =3D really_fetch_data uri <span style=3D=
"color: #000000; font-weight: bold;">in</span>
    <span style=3D"color: #228b22;">Cache.</span>replace cache uri data;
    data
</pre>
</div>

<p>
The cache will only hold up to [size] bindings, which avoids leaking memory=
. Additionally, the parameters for
<code>map_maker</code> allow you to customise:
</p>

<ul class=3D"org-ul">
<li>The replacement policy: which binding is removed when a supernumerary i=
s inserted (currently supports least-recently used and first-in first-out).=
</li>
<li>The overflow policy: whether the cache can weakly hold some supernumera=
ry elements (if so, the cache may hold more but the GC can always collect t=
hem if space is lacking).</li>
<li>The accounting precision: whether to keep precise track of removed/repl=
aced elements.</li>
</ul>

<p>
In addition, Ringo also provide set-caches: i.e., sets (rather than maps) w=
ith bounded size and all the same
properties as above.
</p>

<p>
Also note Ringo-Lwt (<code>ringo-lwt</code>) provides Lwt wrappers around R=
ingo caches.
</p>

<p>
If you have suggestions for a different concise synopsis for <code>opam</co=
de>, feel free to send them this way.
</p>

<p>
Use cases are, I guess, caches. In particular those that might receive many=
 elements not all of which you can hold in
memory. We use it in a few places in the Tezos project to hold resources (b=
locks, operations, etc.) that are fetched
from the P2p layer: it avoids having to fetch them again from the network.
</p>

<p>
I think <code>anycache</code>, <code>lru</code>, and <code>lru-cache</code>=
 are all alternatives available on opam.
</p>
</div>
</div>


<div id=3D"outline-container-org13b16cf" class=3D"outline-3">
<h3 id=3D"org13b16cf">Rapha=C3=ABl Proust later added</h3>
<div class=3D"outline-text-3" id=3D"text-org13b16cf">
<p>
The documentation is now available online at <a href=3D"https://nomadic-lab=
s.gitlab.io/ringo/index.html">https://nomadic-labs.gitlab.io/ringo/index.ht=
ml</a>
</p>

<p>
Of particular interest:
</p>
<ul class=3D"org-ul">
<li><a href=3D"https://nomadic-labs.gitlab.io/ringo/ringo/Ringo/module-type=
-CACHE_MAP/index.html">The signature for a <code>ringo</code> key-value cac=
he</a></li>
<li><a href=3D"https://nomadic-labs.gitlab.io/ringo/ringo/Ringo/index.html"=
>The entry point for the <code>ringo</code> library</a> (allowing you to in=
stantiate modules with the above signature as well as simple value caches)<=
/li>
<li><a href=3D"https://nomadic-labs.gitlab.io/ringo/ringo-lwt/Ringo_lwt/Sig=
s/module-type-CACHE_MAP/index.html">The signature for <code>ringo-lwt</code=
> cache</a></li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-orgfcc05c0" class=3D"outline-2">
<h2 id=3D"2"><a id=3D"orgfcc05c0"></a>Multicore OCaml: June 2020</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/multicore-ocaml-june-2020/6=
047/1">https://discuss.ocaml.org/t/multicore-ocaml-june-2020/6047/1</a>
</p>
</div>

<div id=3D"outline-container-org5ec3c3f" class=3D"outline-3">
<h3 id=3D"org5ec3c3f">Anil Madhavapeddy announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5ec3c3f">
<p>
Welcome to the June 2020 <a href=3D"https://github.com/ocaml-multicore/ocam=
l-multicore">Multicore OCaml</a> report! As with
<a href=3D"https://discuss.ocaml.org/tag/multicore-monthly">previous update=
s</a>, many thanks to @shakthimaan and @kayceesrk for
collating the updates for the month of June 2020. <i>This is an incremental=
 update; new readers may find it helpful to
flick through the previous posts first.</i>
</p>

<p>
This month has seen a tremendous surge of activity on the upstream OCaml pr=
oject to prepare for multicore
integration, as @xavierleroy and the core team have driven a number of init=
iatives to prepare the OCaml project for
the full multicore featureset.  To reflect this, from next month we will ha=
ve a status page on the ocaml-multicore
wiki with the current status of both our multicore branch and the upstream =
OCaml project itself.
</p>

<p>
Why not from this month? Well, there's good news and bad news.  <a href=3D"=
https://discuss.ocaml.org/t/multicore-ocaml-may-2020-update/5898">Last
month</a>, I observed that we are a PR away from most
of the opam ecosystem working with the multicore branch.  The good news is =
that we are still a single PR away from it
working, but it's a different one :-) The retrofitting of the <code>Threads=
</code> library has brought up <a href=3D"https://github.com/ocaml-multicor=
e/ocaml-multicore/pull/342">some design
complexities</a>, and so rather than putting in a "bandaid"
fix, we are integrating a comprehensive solution that will work with system=
 threads, domains and (eventually) fibres.
That work has taken some time to get right, and I hope to be able to update=
 you all on an opam-friendly OCaml
4.10.0+multicore in a few weeks.
</p>

<p>
Aside from this, there have been a number of other improvements going into =
the multicore branches: <a href=3D"https://github.com/ocaml-multicore/ocaml=
-multicore/pull/351">mingw Windows
support</a>, <a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/=
pull/363">callstack
improvements</a>, <a href=3D"https://github.com/ocaml-multicore/ocaml-multi=
core/pull/346">fixing the Unix
module</a> and so on. The full list is in the detailed
report later in this update.
</p>
</div>

<div id=3D"outline-container-org61fccb9" class=3D"outline-4">
<h4 id=3D"org61fccb9">Sandmark benchmarks</h4>
<div class=3D"outline-text-4" id=3D"text-org61fccb9">
<p>
A major milestone in this month has been the upgrade to the latest
dune.2.6.0 to build Multicore OCaml 4.10.0 for the Sandmark
benchmarking project. A number of new OPAM packages have been added,
and the existing packages have been upgraded to their latest
versions. The Multicore OCaml code base has seen continuous
performance improvements and enhancements which can be observed from
the various PRs mentioned in the report.
</p>

<p>
We would like to thank:
</p>

<ul class=3D"org-ul">
<li>@xavierleroy for working on a number of multicore-prequisite PRs to mak=
e stock OCaml ready for Multicore OCaml.</li>
<li>@camlspotter has reviewed and accepted the camlimages changes and made =
a release of camlimages.5.0.3 required for Sandmark.</li>
<li>@dinosaure for updating the decompress test benchmarks for Sandmark to =
build and run with dune.2.6.0 for Multicore OCaml 4.10.0.</li>
</ul>

<p>
A chapter on Parallel Programming in Multicore OCaml with topics on
task pool, channels section, profiling with code examples is being
written. We shall provide an early draft version of the document to
the community for your valuable feedback.
</p>
</div>
</div>

<div id=3D"outline-container-orge814764" class=3D"outline-4">
<h4 id=3D"orge814764">Papers</h4>
<div class=3D"outline-text-4" id=3D"text-orge814764">
<p>
Our "Retrofitting Parallism onto OCaml" paper has been officially
accepted at <a href=3D"https://icfp20.sigplan.org/track/icfp-2020-papers#ev=
ent-overview">ICFP 2020</a> which will be held
virtually between August 23-28, 2020. A <a href=3D"https://arxiv.org/abs/20=
04.11663">preprint</a> of the paper was made available
earlier, and will be updated in a few days with the camera-ready version fo=
r ICFP.  Please do feel free to send on
comments and queries even after the paper is published, of course.
</p>

<p>
Excitingly, another multicore-related paper on <a href=3D"http://gallium.in=
ria.fr/~fpottier/publis/mevel-jourdan-pottier-cosmo-2020.pdf">Cosmo: A Conc=
urrent Separation Logic for Multicore
OCaml</a> will also be presented at the
same conference.
</p>

<p>
The Multicore OCaml updates are first listed in our report, which are follo=
wed by improvements to the Sandmark
benchmarking project. Finally, the changes made to upstream OCaml which inc=
lude both the ongoing and completed tasks
are mentioned for your reference.
</p>
</div>
</div>

<div id=3D"outline-container-org7ac4a74" class=3D"outline-4">
<h4 id=3D"org7ac4a74">Multicore OCaml</h4>
<div class=3D"outline-text-4" id=3D"text-org7ac4a74">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org20fbd04"></a>Ongoing<br />
<div class=3D"outline-text-5" id=3D"text-org20fbd04">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/issues/339">o=
caml-multicore/ocaml-multicore#339</a> Proposal for domain-local storage
</p>

<p>
An RFC proposal to implement a domain-local storage in Multicore OCaml. Kin=
dly review the idea and share your feedback!
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/342">oca=
ml-multicore/ocaml-multicore#342</a>
Implementing the threads library with Domains
</p>

<p>
An effort to rebase @jhwoodyatt's implementation of the Thread
library for Domains.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/issues/357">o=
caml-multicore/ocaml-multicore#357</a>
Implementation of systhreads with pthreads
</p>

<p>
Exploring the possibilty of implementing systhreads with pthreads,
while still maintaining compatibility with the existing solution.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/dune/issues/3548">ocaml/dune#3548</a>
Dune fails to pick up secondary compiler
</p>

<p>
The <code>ocaml-secondary-compiler</code> fails to install with dune.2.6.0.=
 This
is required as Multicore OCaml cannot build the latest dune without
systhreads support.
</p></li>
</ul>
</div>
</li>

<li><a id=3D"org471d61c"></a>Completed<br />
<div class=3D"outline-text-5" id=3D"text-org471d61c">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://github.com/ocaml-multicore/multicore-opam/pull/22">ocaml=
-multicore/multicore-opam#22</a>
Update dune to 2.6.0
</p>

<p>
The dune version in the Multicore OPAM repository is now updated to
use the latest 2.6.0.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/338">oca=
ml-multicore/ocaml-multicore#338</a>
Introduce Lazy.try_force and Lazy.try_force_val
</p>

<p>
An implementation of <code>Lazy.try_force</code> and <code>Lazy.try_force_v=
al</code>
functions to implement concurrent lazy abstractions.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/340">oca=
ml-multicore/ocaml-multicore#340</a>
Fix Atomic.exchange in concurrent_minor_gc
</p>

<p>
A patch that introduces <code>Atomic.exchange</code> through <code>Atomic.g=
et</code> that
provides the appropriate read barrier for correct exchange
semantics for <code>caml_atomic_exchange</code> in <code>memory.c</code>.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/343">oca=
ml-multicore/ocaml-multicore#343</a>
Fix extcall noalloc DWARF
</p>

<p>
The DWARF information emitted for <code>extcall noalloc</code> had broken
backtraces and this PR fixes the same.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/345">oca=
ml-multicore/ocaml-multicore#345</a>
Absolute exception stack
</p>

<p>
The representation of the exception stack is changed from relative
addressing to absolute addressing and the results are promising. The
Sandmark serial benchmark results after the change is illustrated in
the following graph:
</p>


<div class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/opti=
mized/2X/b/b385409b3f9e44cbfef98de668b0b4d0ed403472_2_1380x436.png" alt=3D"=
b385409b3f9e44cbfef98de668b0b4d0ed403472_2_1380x436.png" />
</p>
</div></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/347">oca=
ml-multicore/ocaml-multicore#347</a>
Turn on -Werror by default
</p>

<p>
Adds a <code>--enable-warn-error</code> option to <code>configure</code> to=
 treat C
compiler warnings as errors.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/353">oca=
ml-multicore/ocaml-multicore#353</a>
Poll for interrupts in cpu_relax without locking
</p>

<p>
Use <code>Caml_check_gc_interrupt</code> first to poll for interrupts witho=
ut
locking, and then proceeding to handle the interrupt with the lock.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/354">oca=
ml-multicore/ocaml-multicore#354</a>
Add Caml_state_field to domain_state.h
</p>

<p>
The <code>Caml_state_field</code> macro definition in domain_state.h is
required for base-v0.14.0 to build for Multicore OCaml 4.10.0 with
dune.2.6.0.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/355">oca=
ml-multicore/ocaml-multicore#355</a>
One more location to poll for interrupts without lock
</p>

<p>
Another use of <code>Caml_check_gc_interrupt</code> first to poll for
interrupts without lock, similar to
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/353">oca=
ml-multicore/ocaml-multicore#353</a>.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/356">oca=
ml-multicore/ocaml-multicore#356</a>
Backup threads for domain
</p>

<p>
Introduces <code>backup threads</code> to perform GC and handle service
interrupts when the domain is blocked in the kernel.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/358">oca=
ml-multicore/ocaml-multicore#358</a>
Fix up bad CFI information in amd64.S
</p>

<p>
Add missing <code>CFI_ADJUST</code> directives in <code>runtime/amd64.S</co=
de> for
<code>caml_call_poll</code> and <code>caml_allocN</code>.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/359">oca=
ml-multicore/ocaml-multicore#359</a>
Inline caml_domain_alone
</p>

<p>
The PR makes <code>caml_domain_alone</code> an inline function to improve
performance for <code>caml_atomic_cas_field</code> and other atomics in
<code>memory.c</code>.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/360">oca=
ml-multicore/ocaml-multicore#360</a>
Parallel minor GC inline mask rework
</p>

<p>
The inline mask rework for the promotion path to the
<code>parallel_minor_gc</code> branch gives a 3-5% performance improvement =
for
<code>test_decompress</code> sandmark benchmark, and a decrease in the exec=
uted
instructions for all other benchmarks.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/361">oca=
ml-multicore/ocaml-multicore#361</a>
Mark stack push work credit
</p>

<p>
The PR improves the Multicore mark work accounting to be in line
with stock OCaml.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-multicore/ocaml-multicore/pull/362">oca=
ml-multicore/ocaml-multicore#362</a>
Iloadmut does not clobber rax and rdx when we do not have a read barrier
</p>

<p>
A code clean-up to free the registers <code>rax</code> and <code>rdx</code>=
 for OCaml code
when <code>Iloadmut</code> is used.
</p></li>
</ul>
</div>
</li>
</ul>
</div>

<div id=3D"outline-container-org9d23097" class=3D"outline-4">
<h4 id=3D"org9d23097">Benchmarking</h4>
<div class=3D"outline-text-4" id=3D"text-org9d23097">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org0551b7b"></a>Ongoing<br />
<div class=3D"outline-text-5" id=3D"text-org0551b7b">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/issues/8">ocaml-bench/sa=
ndmark#8</a>
Ability to run compiler variants in Sandmark
</p>

<p>
A feature to specify configure options when building compiler
variants such as <code>flambda</code> is useful for development and
testing. This feature is being worked upon.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/issues/107">ocaml-bench/=
sandmark#107</a>
Add Coq benchmarks
</p>

<p>
We are continuing to add more benchmarks to Sandmark for Multicore
OCaml and investigating adding the <a href=3D"https://coq.inria.fr/">Coq</a>
benchmarks to our repertoire!
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/124">ocaml-bench/sa=
ndmark#124</a>
User configurable paramwrapper added to Makefile
</p>

<p>
A <code>PARAMWRAPPER</code> environment variable can be passed as an argume=
nt
by specifying the <code>--cpu-list</code> to be used for parallel benchmark
runs.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/131">ocaml-bench/sa=
ndmark#131</a>
Update decompress benchmarks
</p>

<p>
Thanks to @dinosaure for updating the decompress benchmarks in order
to run them with dune.2.6.0 for Multicore OCaml 4.10.0.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/132">ocaml-bench/sa=
ndmark#132</a>
Update dependency packages to use dune.2.6.0 and Multicore OCaml 4.10.0
</p>

<p>
Sandmark has been running with dune.1.11.4, and we need to move to
the latest dune.2.6.0 for using Multicore OCaml 4.10.0 and beyond,
as mentioned in <a href=3D"https://github.com/ocaml-bench/sandmark/issues/1=
06">Promote dune to &gt;
2.0</a>. The PR
updates over 30 dependency packages and successfully builds both
serial and parallel benchmarks!
</p></li>
</ul>
</div>
</li>

<li><a id=3D"org0e9aada"></a>Completed<br />
<div class=3D"outline-text-5" id=3D"text-org0e9aada">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://gitlab.com/camlspotter/camlimages/-/merge_requests/1">ca=
mlspotter/camlimages#1</a>
Use dune-configurator instead of configurator for camlimages
</p>

<p>
A new release of <code>camlimages.5.0.3</code> was made by @camlspotter aft=
er
accepting the changes to camlimages.opam in order to build with
dune.2.6.0.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/115">ocaml-bench/sa=
ndmark#115</a>
Task API Port: LU-Decomposition, Floyd Warshall, Mandelbrot, Nbody
</p>

<p>
The changes to use the <code>Domainslib.Task</code> API for the listed benc=
hmarks
have been merged.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/121">ocaml-bench/sa=
ndmark#121</a>
Mention sudo access for run_all_parallel.sh script
</p>

<p>
The README.md file has been updated with the necessary <code>sudo</code>
configuration steps to execute the <code>run_all_parallel.sh</code> script =
for
nightly builds.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/125">ocaml-bench/sa=
ndmark#125</a>
Add cubicle benchmarks
</p>

<p>
The <code>German PFS</code> and <code>Szymanski's mutual exclusion algorith=
m</code> cubicle
benchmarks have been included in Sandmark.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/126">ocaml-bench/sa=
ndmark#126</a>
Update ocaml-versions README to reflect 4.10.0+multicore
</p>

<p>
The README has now been updated to reflect the latest 4.10.0
Multicore OCaml compiler and its variants.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/129">ocaml-bench/sa=
ndmark#129</a>
Add target to run parallel benchmarks in the CI
</p>

<p>
The .drone.yml file used by the CI has been updated to run both the
serial and parallel benchmarks.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml-bench/sandmark/pull/130">ocaml-bench/sa=
ndmark#130</a>
Add missing dependencies in multicore-numerical
</p>

<p>
The <code>domainslib</code> library has been added to the dune file for the
multicore-numerical benchmark.
</p></li>
</ul>
</div>
</li>
</ul>
</div>

<div id=3D"outline-container-org5d0fa15" class=3D"outline-4">
<h4 id=3D"org5d0fa15">OCaml</h4>
<div class=3D"outline-text-4" id=3D"text-org5d0fa15">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org7049876"></a>Ongoing<br />
<div class=3D"outline-text-5" id=3D"text-org7049876">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9541">ocaml/ocaml#9541</a>
Add manual page for the instrumented runtime
</p>

<p>
The <a href=3D"https://github.com/ocaml/ocaml/pull/9082">instrumented runti=
me</a>
has been merged to OCaml 4.11.0. A manual for the same has been
created and is under review.
</p></li>

<li><p>
<a href=3D"https://github.com/sadiqj/ocaml/pull/1">sadigqj/ocaml#1</a>
GC colours change
</p>

<p>
This PR removes the grey colour used in stock OCaml to match the
scheme used by the Multicore major collector. The performance and
considerations are included for review.
</p></li>
</ul>
</div>
</li>

<li><a id=3D"org7949aa1"></a>Completed<br />
<div class=3D"outline-text-5" id=3D"text-org7949aa1">
<ul class=3D"org-ul">
<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9619">ocaml/ocaml#9619</a>
A self-describing representation for function closures
</p>

<p>
The PR provides a way to record the position of the environment for
each entry point for function closures.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9649">ocaml/ocaml#9649</a>
Marshaling for the new closure representation
</p>

<p>
The <code>output_value</code> marshaler has been updated to use the new clo=
sure
representation. There is no change required for the <code>input_value</code>
unmarshaler.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9655">ocaml/ocaml#9655</a>
Introduce type Obj.raw_data and functions Obj.raw_field,
Obj.set_raw_field to manipulate out-of-heap pointers
</p>

<p>
The PR introduces a type <code>Obj.bits</code>, and functions <code>Obj.fie=
ld_bits</code>
and <code>Obj.set_field_bits</code> to read and write bit representation of
block fields to support the no-naked-pointer operation.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9678">ocaml/ocaml#9678</a>
Reimplement Obj.reachable_word using a hash table to detect sharing
</p>

<p>
The <code>caml_obj_reachable_words</code> now uses a hash table instead of
modifying the mark bits of block headers to detect sharing. This is
required for compatibility with Multicore OCaml.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9680">ocaml/ocaml#9680</a>
Naked pointers and the bytecode interpreter
</p>

<p>
The bytecode interpreter implementation is updated to support the
no-naked-pointers mode operation as required by Multicore OCaml.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9682">ocaml/ocaml#9682</a>
Signal handling in native code without the page table
</p>

<p>
The patch uses the code fragment table instead of a page table
lookup for signal handlers to know whether the signal came from
ocamlopt-generated code.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9683">ocaml/ocaml#9683</a>
globroots.c: adapt to no-naked-pointers mode
</p>

<p>
The patch considers out-of-heap pointers as major-heap pointers in
no-naked-pointers mode for global roots management.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9689">ocaml/ocaml#9689</a>
Generic hashing for the new closure representation
</p>

<p>
The hashing functions have been updated to use the latest closure
representation from
<a href=3D"https://github.com/ocaml/ocaml/pull/9619">ocaml/ocaml#9619</a> f=
or the
no-naked-pointers mode.
</p></li>

<li><p>
<a href=3D"https://github.com/ocaml/ocaml/pull/9698">ocaml/ocaml#9698</a>
The end of the page table is near
</p>

<p>
The PR eliminates some of the use of the page tables in the runtime
system when built with no-naked-pointers mode.
</p></li>
</ul>

<p>
Our thanks to all the OCaml developers and users in the community for
their continued support and contribution to the project. Stay safe!
</p>
</div>
</li>
</ul>
</div>

<div id=3D"outline-container-org9b8ca4d" class=3D"outline-4">
<h4 id=3D"org9b8ca4d">Acronyms</h4>
<div class=3D"outline-text-4" id=3D"text-org9b8ca4d">
<ul class=3D"org-ul">
<li>API: Application Programming Interface</li>
<li>CFI: Call Frame Information</li>
<li>CI: Continuous Integration</li>
<li>DWARF: Debugging With Attributed Record Formats</li>
<li>GC: Garbage Collector</li>
<li>ICFP: International Conference on Functional Programming</li>
<li>OPAM: OCaml Package Manager</li>
<li>PR: Pull Request</li>
<li>RFC: Request for Comments</li>
</ul>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-orgfa0cf17" class=3D"outline-2">
<h2 id=3D"3"><a id=3D"orgfa0cf17"></a>Time expression demo</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/time-expression-demo/6052/1=
">https://discuss.ocaml.org/t/time-expression-demo/6052/1</a>
</p>
</div>

<div id=3D"outline-container-orgcbe3074" class=3D"outline-3">
<h3 id=3D"orgcbe3074">Darren announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgcbe3074">
<p>
An interactive demo for a small part of our time stuff and schedule handlin=
g library is available here:
<a href=3D"https://daypack-dev.github.io/time-expr-demo/">https://daypack-d=
ev.github.io/time-expr-demo/</a>
</p>

<p>
Time expression is in essence a language for specifying time points or time=
 slots precisely and concisely, while
trying to mimic natural language.
</p>

<p>
The implementation of the demo core itself can be seen here:
<a href=3D"https://github.com/daypack-dev/time-expr-demo/blob/master/src/de=
mo.ml">https://github.com/daypack-dev/time-expr-demo/blob/master/src/demo.m=
l</a> , where the usage of Daypack-lib is shown.
</p>

<p>
Lastly, the library is still a prototype, so expect some faults in the outp=
uts of the demo here and there.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org5c31673" class=3D"outline-2">
<h2 id=3D"4"><a id=3D"org5c31673"></a>Interactive OCaml development with ut=
op in Emacs</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/interactive-ocaml-developme=
nt-with-utop-in-emacs/6058/1">https://discuss.ocaml.org/t/interactive-ocaml=
-development-with-utop-in-emacs/6058/1</a>
</p>
</div>

<div id=3D"outline-container-org751532d" class=3D"outline-3">
<h3 id=3D"org751532d">Samarth Kishor announced</h3>
<div class=3D"outline-text-3" id=3D"text-org751532d">
<p>
I made a <a href=3D"https://samarthkishor.github.io/posts/interactive_ocaml=
_development/">blog post</a> about REPL driven
development with utop in Emacs a few months ago. Please let me know if you =
found it useful or have anything to add!
I'm a bit new to OCaml so any feedback helps.
</p>

<p>
There was a <a href=3D"https://discuss.ocaml.org/t/ocaml-repl-driven-develo=
pment/4068">similar post about REPL driven
development</a> last year and my post addresses a lot of
those points. I wish I'd seen that post before I wrote this since there's a=
 ton of useful information in the
comments.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org862693b" class=3D"outline-2">
<h2 id=3D"org862693b">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org862693b">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--===-=-=--

--=-=-=--

