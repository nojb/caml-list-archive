Return-Path: <Sebastien.Ferre@irisa.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 68BD27F615
	for <caml-list@sympa.inria.fr>; Thu,  8 Dec 2016 09:41:11 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.33,318,1477954800"; 
   d="scan'208";a="203313195"
Received: from alnitak.irisa.fr ([131.254.16.128])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 08 Dec 2016 09:41:11 +0100
Message-ID: <58491CA5.7080205@irisa.fr>
Date: Thu, 08 Dec 2016 09:41:09 +0100
From: Sebastien Ferre <Sebastien.Ferre@irisa.fr>
Organization: IRISA
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.4.0
MIME-Version: 1.0
To: caml-list@inria.fr
References: <baacb5fa-1c76-6924-7284-73f5a0a0d16d@gmail.com>
In-Reply-To: <baacb5fa-1c76-6924-7284-73f5a0a0d16d@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
X-Validation-by: sebastien.ferre@irisa.fr
Subject: Re: [Caml-list] Web technologies as graphical user interface to
 OCaml programs?

Hello,

I recently converted an application with lablgtk2-based GUI to
a web-based GUI. The body of the application has been transformed
into an XML HTTP server using ocamlnet, and the GUI has been
re-implemented using js-of-ocaml.

See http://www.irisa.fr/LIS/softwares/sewelis for description of the 
app, and access to open source.
See http://www.irisa.fr/LIS/ferre/sewelis-servolis/index.html for the 
online Web application.

Don't have time right now to expand, but I am very happy of the move.

Best,
Sébastien

On 12/08/2016 09:21 AM, Matthieu Dubuget wrote:
> Hello,
>
> I wonder how I could use Web technologies to write OCaml program's
> GUI.
>
> I’m particularly interested by the ocaml-vdom (elm) approach
> simplicity.
>
> But my need would be to add a user interface to programs using some
> OCaml libraries which are not supported by js_of_ocaml (Unix, C libs
> bindings…).
>
> One solution would be to keep the GUI-less native OCaml apps compiled
> and running as native code, and have them communicate with GUIs that
> would run in browsers.
>
> I'm not sure how this communication would be done, thought? Maybe websocket,
> but this is something I do not know at all…
>
> Another solution would be to have the native OCaml app directly serve
> it's UI, maybe using ocsigenserver?
>
> I'm wondering if there are some examples around with those kind of
> approaches or other kind of solution?
>
> Best regards
>
>
