Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA05778 for caml-red; Wed, 27 Dec 2000 19:06:36 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA24124 for <caml-list@pauillac.inria.fr>; Wed, 27 Dec 2000 04:34:58 +0100 (MET)
Received: from mail.crestedbutte.net (mail.crestedbutte.net [199.190.87.31])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eBR3Yuf28953
	for <caml-list@inria.fr>; Wed, 27 Dec 2000 04:34:57 +0100 (MET)
Received: from checkerlap.d6.com (s157.gunnison.com [206.162.91.157])
	by mail.crestedbutte.net (8.9.3/8.9.3) with ESMTP id UAA03112
	for <caml-list@inria.fr>; Tue, 26 Dec 2000 20:27:42 -0700
Message-Id: <4.3.2.7.2.20001226151428.00b2f680@shell16.ba.best.com>
X-Sender: def6@shell16.ba.best.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Tue, 26 Dec 2000 15:47:08 -0800
To: caml-list@inria.fr
From: Chris Hecker <checker@d6.com>
Subject: status of some big "important" features?
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: weis@pauillac.inria.fr


Hi, what's the status of adding these important (to me :) features:

1.  Overloading?  Now that I'm writing some real ocaml code, not only is the + vs. +. thing ugly and killing me in mixed int/float code (((float i)/.8.*.4.*.pi-.2.*.pi <- yuck!, I'm half way to writing an emacs syntax table that hides the damn . after the arithmetic ops :)), it would really make life easier to have things like fst be definable for ('a,'b) and ('a,'b,'c), etc., or have functions with different numbers of arguments (the label default args only go so far and aren't really dynamic enough).  I know this is hard with type inference, but is it possible?

2.  Module recursion or Tom Hirschowitz's mixin modules?  Forward declarations?  Anything?

3.  Pierre Weis's generics stuff ($a, etc.) from a post in April?  Hopefully as compile-time optimizable as possible where possible to match C++ templates for speed when you don't do something like put generics in a data structure.

Any status updates, dates, addresses to send money to speed things up? :)

Thanks,
Chris

PS.  Minor question I thought of the other day...is there any way to write "nth" for tuples (as opposed to "fst", which is hard-coded to 2-tuples)?  This is related to the overloading and generic questions above, but it also touches on some introspection issues, since nth would need to know the "length" of the tuple to either recurse or loop.  I guess I could use camlp4 for this if I really wanted to...couldn't I?


