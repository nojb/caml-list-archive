Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA19255 for caml-red; Sun, 3 Dec 2000 23:10:16 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA32187 for <caml-list@pauillac.inria.fr>; Thu, 30 Nov 2000 23:39:48 +0100 (MET)
Received: from mail2.microsoft.com (mail2.microsoft.com [131.107.3.124])
	by concorde.inria.fr (8.11.1/8.10.0) with SMTP id eAUMdlf26147
	for <caml-list@inria.fr>; Thu, 30 Nov 2000 23:39:47 +0100 (MET)
Received: from 157.54.9.104 by mail2.microsoft.com (InterScan E-Mail VirusWall NT); Thu, 30 Nov 2000 14:39:46 -0800 (Pacific Standard Time)
Received: by inet-imc-02.redmond.corp.microsoft.com with Internet Mail Service (5.5.2651.58)
	id <X885N7VX>; Thu, 30 Nov 2000 14:39:32 -0800
Message-ID: <BEC4845020047048A9A8616BCFFCA9044367B6@red-msg-04.redmond.corp.microsoft.com>
From: Manuel Fahndrich <maf@microsoft.com>
To: "'Daniel C. Wang'" <danwang+news@cs.princeton.edu>,
        "CAML List (E-mail)" <caml-list@inria.fr>
Subject: RE: OCaml bug or feature?
Date: Thu, 30 Nov 2000 14:30:22 -0800
X-Mailer: Internet Mail Service (5.5.2651.58)
Sender: weis@pauillac.inria.fr


I think the problem you refer to is checking equivalence of parameterized
type definitions "Type Definitions With Parameters" Marvin Solomon 5th POPL.
The problem is equivalent to checking the equivalence of deterministic
pushdown automaton, which has since been shown decidable, although I know of
no practical algorithm.

Keep in mind though that the problem only arises in the presence of
non-regular types. Thus another approach is to simply disallow non-regular
types, which OCaml does for non-datatype definitions.

E.g. It is possible to define general regular parameterized recursive types
using polymorphic variants alone, ie., without explicit datatype
definitions.

type 'a list = [`Nil | `Cons of `a * 'a list ];

-Manuel


-----Original Message-----
From: Daniel C. Wang [mailto:danwang+news@cs.princeton.edu]
Sent: Thursday, November 30, 2000 11:37 AM
To: comp-lang-ml@uunet.uu.net
Subject: Re: OCaml bug or feature?



Henning Makholm <henning@makholm.net> writes:

> Scripsit "Daniel C. Wang" <danwang+news@cs.princeton.edu>
> 
> > The datatype constructors in both OCaml and SML are *type annotations*
they
> > just are unobtrusive and *mandatory* type annotations. Without the
explicit
> > constructor tags the type inference system would have no way to deal
> > properly with reucursive types. 
> 
> Do you have references to good explanations of what the exact
> problems you refer to are?

Nope... sorry.. this just my fuzzy understanding of how recursive types are
treated by type inference.. without the annotations, you have to guess how
many times you need to unfold/fold the recursive type for things to type
check.


> My experience (though not with full-sized
> ML-type languages) is that declaration-free recursive type inference
> is piece of cake once you have a circular unification algorithm.
> Sure, with polymorphism you get the same trouble with principal
> types as SML has with record types, but nothing more.

I was under the impression that the problem without the constructors made
the problem undecidable, but maybe I'm wrong...

> (Strangely enough it is not easy to find literature references
> to this. There was a paper on "Declaration-free type checking"
> by P.Mishra and U.Reddy in POPL'85, but that is much more
> complicated than necessary for mere declaration-free ML-style
> type inference because it includes union types and subtyping).

Have you tried citeseer?

http://www.neci.nj.nec.com/homepages/lawrence/citeseer.html

and doing a reverse citation lookup...


