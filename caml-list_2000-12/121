Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA14918 for caml-red; Fri, 15 Dec 2000 17:59:27 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA00033 for <caml-list@pauillac.inria.fr>; Fri, 15 Dec 2000 14:31:09 +0100 (MET)
Received: from copper.dcs.qmw.ac.uk (copper.dcs.qmw.ac.uk [138.37.88.248])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eBFDV8X20649
	for <caml-list@inria.fr>; Fri, 15 Dec 2000 14:31:08 +0100 (MET)
Received: from dcs.qmw.ac.uk (kohei-pc.dcs.qmw.ac.uk [138.37.88.184])
	by copper.dcs.qmw.ac.uk (8.9.3/8.9.3/Debian 8.9.3-21) with ESMTP id NAA14398;
	Fri, 15 Dec 2000 13:31:04 GMT
Message-ID: <3A3A1D18.8EB69865@dcs.qmw.ac.uk>
Date: Fri, 15 Dec 2000 13:31:04 +0000
From: Martin Berger <martinb@dcs.qmw.ac.uk>
Organization: Department of Computer Science, QMW.
X-Mailer: Mozilla 4.73 [en] (X11; I; Linux 2.2.14 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: "T. Kurt Bond" <tkb@tkb.mpl.com>, caml-list@inria.fr
Subject: Re: callcc/cps-style programming
References: <3145774E67D8D111BE6E00C0DF418B6638D1D3@nt.kal.com>
		<200012131636.LAA02306@bismarck-chet.watson.ibm.com> <14905.7573.233207.196188@tkb.mpl.com>
Content-Type: text/plain; charset=iso-8859-2
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

"T. Kurt Bond" wrote:

> Hmmm.  Well, try telling the Erlang folks that super-lightweight
> user-level processes aren't useful.  Or the Gambit Scheme folks: their
> next release has lightweight threads built on call/cc.  (Note: these
> two things may be related.)

concerning lightweight threads and continuations, simon peyton-jones
and norman ramsey have a nice paper:

	http://www.cminusminus.org/abstracts/c--con.html

and then there's always mitch wand's classic "Continuation-Based Multiprocessing",
available from:

	http://www.ccs.neu.edu/home/wand/pubs.html

regarding the merits of using threads vs callback, i agree that
there are few working programmers who can be trusted with concurrency,
but well-designed multi-threaded programms tend to be easier to
understand. it comes down to education really. of course there are
also various performance trade-offs.


martin


