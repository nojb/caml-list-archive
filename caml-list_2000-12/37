Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA24150 for caml-red; Fri, 8 Dec 2000 10:11:19 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA14233 for <caml-list@pauillac.inria.fr>; Thu, 7 Dec 2000 21:01:30 +0100 (MET)
Received: from batman.labri.u-bordeaux.fr (batman.labri.u-bordeaux.fr [147.210.8.5])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eB7K1U513202
	for <caml-list@inria.fr>; Thu, 7 Dec 2000 21:01:30 +0100 (MET)
Received: from serveur1-1.labri.u-bordeaux.fr (root@serveur1-1 [147.210.8.170])
	by batman.labri.u-bordeaux.fr (8.8.7/8.8.7) with ESMTP id VAA08790
	for <caml-list@inria.fr>; Thu, 7 Dec 2000 21:04:29 +0100 (MET)
Received: (from vanicat@localhost)
	by serveur1-1.labri.u-bordeaux.fr (8.9.3/8.8.8/Debian/GNU) id VAA07866;
	Thu, 7 Dec 2000 21:01:22 +0100
X-Authentication-Warning: serveur1-1.labri.u-bordeaux.fr: vanicat set sender to vanicat@labri.u-bordeaux.fr using -f
To: caml-list@inria.fr
Subject: polymorphic variant and subtyping
From: Remi VANICAT <remi.vanicat@labri.u-bordeaux.fr>
Date: 07 Dec 2000 21:01:22 +0100
Message-ID: <ya3ofyo57cd.dlv@serveur1-1.labri.u-bordeaux.fr>
Lines: 39
User-Agent: Gnus/5.0807 (Gnus v5.8.7) Emacs/20.7
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: weis@pauillac.inria.fr

I have try this :

# type 'a t = [ `A of 'a];;
type 'a t = [ `A of 'a]
# type arg1 = [`A | `B];;
type arg1 = [ `A | `B]
# type arg2 = [`A];;
 type arg2 = [ `A]
# type t1 = arg1 t;;
type t1 = arg1 t
# type t2 = arg2 t;;
type t2 = arg2 t
# let a2 = (`A : arg2);;
val a2 : arg2 = `A
# let a1 = (a1 :> arg1);;
val a1 : arg1 = `A
# let t2 = (`A a2 : t2);;
val t2 : t2 = `A `A
# let t1 = (t2 :> t1);;
This expression cannot be coerced to type t1 = [ `A of arg1]; it has type
  t2 = [ `A of arg2]
but is here used with type arg1 #t as 'a = 'a
Type arg2 = [ `A] is not compatible with type arg1 = [ `A | `B] 

but 
# let f : t2 -> t1 = function
    `A x -> `A (x :> arg1)

do what i want. It seems to me that caml don't infere subtyping
relationship, when ithe subtyping relation come from argument of the
type. 

Is there a good way in ocaml of doing this ? 


-- 
Rémi Vanicat
vanicat@labri.u-bordeaux.fr
http://dept-info.labri.u-bordeaux.fr/~vanicat


