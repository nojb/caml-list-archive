Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA17828 for caml-red; Fri, 22 Dec 2000 15:06:19 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA09288 for <caml-list@pauillac.inria.fr>; Fri, 22 Dec 2000 10:18:06 +0100 (MET)
Received: from indigo.recherche.enac.fr (indigo.recherche.enac.fr [195.220.158.66])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eBM9I5918037
	for <caml-list@inria.fr>; Fri, 22 Dec 2000 10:18:05 +0100 (MET)
Received: from sepia.recherche.enac.fr (mail@sepia.recherche.enac.fr [10.31.1.82] (may be forged)) by indigo.recherche.enac.fr (8.8.6 (PHNE_14041)/8.6.11) with ESMTP id KAA16097; Fri, 22 Dec 2000 10:17:25 +0100 (MET)
Received: from brisset by sepia.recherche.enac.fr with local (Exim 3.20 #1 (Debian))
	id 149OKL-0003m8-00; Fri, 22 Dec 2000 10:17:25 +0100
From: Pascal Brisset <brisset@recherche.enac.fr>
To: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
Cc: caml-list@inria.fr
Subject: Re: Ref syntax
In-Reply-To: <20001222122938T.garrigue@kurims.kyoto-u.ac.jp>
References: <Pine.LNX.4.20_heb2.08.0012141610480.1456-100000@zigzag.cs.huji.ac.il>
	<Pine.LNX.4.20_heb2.08.0012211444520.26395-100000@zigzag.cs.huji.ac.il>
	<20001222122938T.garrigue@kurims.kyoto-u.ac.jp>
Mime-Version: 1.0 (generated by tm-edit 7.106)
Content-Type: text/plain; charset=US-ASCII
Message-Id: <E149OKL-0003m8-00@sepia.recherche.enac.fr>
Date: Fri, 22 Dec 2000 10:17:25 +0100
Sender: weis@pauillac.inria.fr

> * addition of let mutable ... in
>        let mutable x = 0 in
>        for i = 1 to do x <- x + i done;
>        x

 Unfortunately, it violates the simple ``rule'' which says that there
must be a dot (.) on the left side of a left arrow (<-). I like this
kind of simple rule which can be taught to beginners and help
debugging their programs.

 On my wish list, I put a "-strict" option for ocamlc which would
remove freedom in the syntax. For example
 - ";" means "sequence" and not "end of expr" (it is currently allowed
before "end" in a block)
 - "|" means "or" or "start of pattern" but not both
 - ";;" is compulsory
 - deprecated "&" and "or" operators removed
 - ...

--Pascal


