Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA08920 for caml-red; Mon, 25 Dec 2000 22:39:05 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA05482 for <caml-list@pauillac.inria.fr>; Sat, 23 Dec 2000 01:25:35 +0100 (MET)
Received: from elbereth.pgh.arsdigita.com (63-224-222-81.customers.uswest.net [63.224.222.81])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eBN0PW914000
	for <caml-list@inria.fr>; Sat, 23 Dec 2000 01:25:33 +0100 (MET)
Received: by elbereth.pgh.arsdigita.com (Postfix, from userid 1000)
	id 789EC36B29; Fri, 22 Dec 2000 19:30:03 -0500 (EST)
To: Sven LUTHER <luther@dpt-info.u-strasbg.fr>
Cc: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>, orodeh@cs.huji.ac.il,
        caml-list@inria.fr
Subject: Re: Ref syntax
References: <Pine.LNX.4.20_heb2.08.0012141610480.1456-100000@zigzag.cs.huji.ac.il>
	<Pine.LNX.4.20_heb2.08.0012211444520.26395-100000@zigzag.cs.huji.ac.il>
	<20001222122938T.garrigue@kurims.kyoto-u.ac.jp>
	<20001222094517.B486@lambda.u-strasbg.fr>
From: John Prevost <jmp@arsdigita.com>
Date: 22 Dec 2000 16:30:03 -0800
In-Reply-To: <20001222094517.B486@lambda.u-strasbg.fr>
Message-ID: <87snngm12s.fsf@elbereth.pgh.arsdigita.com>
Lines: 25
User-Agent: Gnus/5.0808 (Gnus v5.8.8) Emacs/21.0.91
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: weis@pauillac.inria.fr

>>>>> "sl" == Sven LUTHER <luther@dpt-info.u-strasbg.fr> writes:

    sl> Also another related issue would be to be able to append a
    sl> modules path element to libraries when building them. (or
    sl> maybe this is already possible ?).

It's not, without writing something like:

XXX.ml:
module Foo = Foo
module Bar = Bar
module ...

and of course that also leaves Foo and Bar at the top level.

    sl> Thus permitting people to reuse modules names in their
    sl> libraries whitout needing to be carefull with conflict with
    sl> other similar module names.

Count me in voting for this.  Namespace management continues to be
messy in O'Caml.  We need *something* better.  This would make
libraries, anyway, a little nicer.

John.


