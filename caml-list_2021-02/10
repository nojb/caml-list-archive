Return-Path: <alan.schmitt@polytechnique.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id A0B44E01C3
	for <caml-list@sympa.inria.fr>; Tue, 23 Feb 2021 10:51:55 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.81,199,1610406000"; 
   d="scan'208,217";a="373853812"
Received: from clt-128-93-178-93.vpn.inria.fr (HELO set) ([128.93.178.93])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Feb 2021 10:51:18 +0100
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr,
 comp@lists.orbitalfox.eu
Date: Tue, 23 Feb 2021 10:51:17 +0100
Message-ID: <87tuq3nmcq.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of February 16 to 23,
2021.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

OCamlFormat 0.17.0
Set up OCaml 1.1.8
Set up OCaml 1.1.9
OCaml 4.12.0, first release candidate
Ppxlib.0.22: an update on the state of ppx
OCaml-based trading firm is hiring remote devs
ocamlearlybird 1.0.0 beta1
OCaml for ARM MacOS
Old CWN


OCamlFormat 0.17.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-ocamlformat-0-17-0/7287/1>


Guillaume Petiot announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80

  On behalf of the OCamlFormat development team I am pleased to announce
  the release of [ocamlformat.0.17.0] :tada:.

  OCamlformat is an auto-formatter for OCaml code, writing the parse
  tree and comments in a consistent style, so that you do not have to
  worry about formatting it by hand, and to speed up code review by
  focusing on the important parts.

  OCamlFormat is beta software. We expect the program to change
  considerably before we reach version 1.0.0. In particular, upgrading
  the `ocamlformat' package will cause your program to get
  reformatted. Sometimes it is relatively pain-free, but sometimes it
  will make a diff in almost every file. We are working towards having a
  tool that pleases most usecases in the OCaml community, please bear
  with us!

  To make sure your project uses the last version of ocamlformat, please
  set
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 version=3D0.17.0
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  in your `.ocamlformat' file.

  Main changes in `ocamlformat.0.17.0' are:

  =E2=80=A2 the `let-open' option, deprecated since 0.16.0, has been removed
  =E2=80=A2 support for OCaml 4.06 and 4.07 has been removed, minimal versi=
on
    requirement bumped to OCaml 4.08
  =E2=80=A2 the `extension-sugar' option, deprecated since 0.14.0, has been
    removed
  =E2=80=A2 the syntax of infix set/get operators is now preserved (`String=
.get'
    and similar calls used to be automatically rewritten to their
    corresponding infix form `.()', that was incorrect when using the
    `-unsafe' compilation flag. Now the concrete syntax of these calls
    is preserved)
  =E2=80=A2 all sugared extension points are now preserved
  =E2=80=A2 injectivity type annotations (OCaml 4.12 feature) are now suppo=
rted
  =E2=80=A2 various fixes about comments positions

  We encourage you to try ocamlformat, that can be installed from opam
  directly ( `opam install ocamlformat' ), but please remember that it
  is still beta software. We have a [FAQ for new users ] that should
  help you decide if ocamlformat is the right choice for you.


[ocamlformat.0.17.0] <https://github.com/ocaml-ppx/ocamlformat>

[FAQ for new users ]
<https://github.com/ocaml-ppx/ocamlformat#faq-for-new-users>


Set up OCaml 1.1.8
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-8/7288/1>


Sora Morimoto announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

Changed
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 The Windows opam wrapper is fractionally less-archaically named
    opam.cmd, with no loss in arcaneness.
  =E2=80=A2 Export `CYGWIN_ROOT' on the Windows runners, allowing bash to be
    invoked as `%CYGWIN_ROOT%\bin\bash~/~$env:CYGWIN_ROOT\bin\bash' (and
    similarly for Cygwin `setup-x86_64.exe').
  =E2=80=A2 The Windows runner no longer prepends `%CYGWIN_ROOT%\bin' to `P=
ATH'.


Fixed
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Switches in Unix are now properly initialized before running de=
pext.

  <https://github.com/avsm/setup-ocaml/releases/tag/v1.1.8>


Set up OCaml 1.1.9
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-9/7293/1>


Sora Morimoto announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

Fixed
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Further fix to switch initialisation.

  <https://github.com/avsm/setup-ocaml/releases/tag/v1.1.9>


OCaml 4.12.0, first release candidate
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-4-12-0-first-release-candidate/7294/1>


octachron announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  The release of OCaml 4.12.0 is expected next week. We have created a
  release candidate that you can test. Most opam packages should work
  with this release candidate (without the need for an alpha
  repository).

  Compared to the last beta, this new release only contains one fix for
  Solaris and illumos.

  If you find any bugs, please report them here:
   <https://github.com/ocaml/ocaml/issues>

  Happy hacking,

  =E2=80=93 Florian Angeletti for the OCaml team.


Installation instructions
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  The base compiler can be installed as an opam switch with the
  following commands
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam update
  =E2=94=82 opam switch create 4.12.0~rc1 --repositories=3Ddefault,beta=3Dg=
it+https://github.com/ocaml/ocaml-beta-repository.git
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  If you want to tweak the configuration of the compiler, you can pick
  configuration options with
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam update
  =E2=94=82 opam switch create <switch_name> --packages=3Docaml-variants.4.=
12.0~rc1+options,<option_list>
  =E2=94=82 --repositories=3Ddefault,beta=3Dgit+https://github.com/ocaml/oc=
aml-beta-repository.git
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  where `<option_list>' is a comma separated list of ocaml-option-*
  packages. For instance, for a flambda and afl enabled switch:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam switch create 4.12.0~rc1+flambda+afl --packages=3Docaml-va=
riants.4.12.0~rc1+options,ocaml-option-flambda,ocaml-option-afl
  =E2=94=82 --repositories=3Ddefault,beta=3Dgit+https://github.com/ocaml/oc=
aml-beta-repository.git
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  All available options can be listed with `opam search ocaml-option'.

  The source code is available at these addresses:

  =E2=80=A2 <https://github.com/ocaml/ocaml/archive/4.12.0-rc1.tar.gz>
  =E2=80=A2 <https://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0~rc1.=
tar.gz>


Ppxlib.0.22: an update on the state of ppx
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90

  Archive:
  <https://discuss.ocaml.org/t/ppxlib-0-22-an-update-on-the-state-of-ppx/72=
96/1>


Nathan Rebours announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  We're happy to announce the release of ppxlib.0.22.0, the fist release
  of ppxlib fully compatible with OCaml 4.12.  The main and only feature
  of this release is the bump of the internal OCaml AST used by ppxlib
  from 4.11 to 4.12, allowing you to use 4.12 language features with
  ppxlib and any ppxlib-based ppx.  Note that ppxlib was compatible with
  the 4.12 compiler since 0.19.0 but that you couldn't use 4.12 language
  features until now.

  This is the third such AST bump release since we announced our plan to
  improve the state of the PPX ecosystem [here] and we though it'd be a
  good time to report back to you and tell you how things are going on
  this front.

  For those of you who aren't familiar with this plan, the goal is to
  upstream a minimal, stable, ocaml-migrate-parsetree-like API on top of
  the compiler-libs called `Astlib'. It will allow us to keep ppxlib and
  any ppx based on ppxlib compatible with OCaml trunk at all time.  To
  allow better performances and a clear compisition semantic, all the
  ppxlib-based ppx-es need to use the same AST (as opposed to
  ocaml-migrate-parsetree based ppx-es) so from a certain perspective,
  this plan simply moves the breaking API up one step, from
  compiler-libs to ppxlib.  In order to greatly ease the maintainenance
  of ppx-es and to prevent opam-universe splits we decided that
  everytime we cut a breaking ppxlib release, we will send patches to
  keep the existing ppx-es compatible with the latest version and
  therefore with the latest OCaml compilers and language features.

  While this seems like a tremendous task and a huge amount of work,
  dune and other tools that raised in its wake such as [opam-monorepo]
  incredibly simplified this kind of work.

  Ahead of OCaml releases, we prepare a branch of ppxlib with the
  upgraded AST. We then fetch opam-repository to gather a list of
  sensible reverse dependencies (i.e. packages whose latest version
  depends on ppxlib and is compatible with ppxlib's latest version) and
  assemble a dune workspace with a clone of each of those reverse
  dependencies, our ppxlib branch and all of their dependencies thanks
  to opam-monorepo.  We then use dune to build all the packages we're
  interested in and simply follow the compilation errors until
  everything builds successfully with the new ppxlib.  What remains is
  to create PRs on the relevant repositories to upstream those changes,
  after which maintainers have everything they need to cut a new
  compatible release.

  Most of this process is automated using scripts but it still requires
  a bit of handiwork. We aim at extracting tools to further improve this
  workflow and reduce the time and effort required but it has been
  surprisingly smooth. Our experience with the 4.10, 4.11 and 4.12
  upgrades so far is that most reverse dependencies don't need an
  upgrade and that it's far less demanding for one person to upgrade all
  the packages that need it than it would be for each individual
  maintainers to understand the changes in the AST and do the upgrade
  themselves.

  It's worth noting that for this to work well, the ppx-es and all their
  dependencies have to build with dune. We do maitain a separate
  opam-repository with dune ports of commonly used packages so in
  practice most projects fall into this category but a few exceptions
  remain and they are therefore not taken into account for this upgrade
  process.

  We're also trying to improve the tracking of the upgrade's progress
  and for the 4.12 compatible release we created a [github project] to
  have a list of all the packages we considered and see where they
  are. We also keep track of the packages we had to exclude and why.
  During this upgrade, we considered 80 opam packages, out of which only
  4 needed to be patched and 6 had to be excluded from the process as we
  couldn't reasonably get them to build in our workspace.

  Once we have a better idea of what makes a package easy to upgrade we
  plan on releasing a set of reasonable rules to follow to benefit from
  those upgrades, we'll keep you updated on this!

  All in all we're pretty happy with this new process and although it
  needs to be refined, we're confident it can grow into something
  sustainable by creating tools and CI to support it. Hopefully these
  will also benefit the wider community and help grow a healthier Opam
  universe.


[here] <https://discuss.ocaml.org/t/ppx-omp-2-0-0-and-next-steps/6231>

[opam-monorepo] <https://github.com/ocamllabs/opam-monorepo>

[github project] <https://github.com/ocaml-ppx/ppxlib/projects/2>


Jason Nielsen asked
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  Curious about the current status of `Astlib'.  I was closely following
  [ppx] at one point but it hasn't seen much activity recently.  Thanks
  for all your hard work.


[ppx] <https://github.com/ocaml-ppx/ppx>


J=C3=A9r=C3=A9mie Dimino
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  It's in progress. Not much happened in the past couple of months while
  we were finishing the port of a few projects to ppxlib and doing the
  4.12 upgrade. But @pitag re-started working `Astlib' as of a week
  ago. You can follow our progression via [the public meeting notes].

  Note however that the [ppx] project was for our original goal or
  providing a "forever stable" API for ppx rewriters. It has been in
  pause since August 2020 while were trying the "upgrade the world"
  method, which as @NathanReb pointed out is working pretty well
  practice. At this point, it's looking more and more likely that we
  won't resurect the ppx project.


[the public meeting notes] <https://github.com/ocaml-ppx/ppxlib/wiki>

[ppx] <https://github.com/ocaml-ppx/ppx>


OCaml-based trading firm is hiring remote devs
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-based-trading-firm-is-hiring-remote-de=
vs/7298/1>


Michael Bacarella announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  BTG is a trading firm founded by ex-Jane Street devs looking to hire
  some more devs.

  The role is primarily remote, working with the rest of our mostly
  remote team, though we hope to resume regular on-sites in Puerto Rico.

  We operate 24/7 and will consider employees anywhere in the world.

  Prior experience with OCaml is a plus, though any solid programming
  experience with an interest in functional programming and strong
  static types is also fine.

  Comfort navigating Linux is essential.

  Shoot me a message with a copy of your r=C3=A9sum=C3=A9 or C.V. to discus=
s the
  opportunity further: [michael.bacarella@gmail.com]

  Feel free to re-post this elsewhere.


[michael.bacarella@gmail.com] <mailto:michael.bacarella@gmail.com>


ocamlearlybird 1.0.0 beta1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-ocamlearlybird-1-0-0-beta1/7180/21>


=E6=96=87=E5=AE=87=E7=A5=A5 announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi, all. All the issues of beta1 have been fixed. Beta2 will be
  released soon.

  <https://github.com/ocaml/opam-repository/pull/18191>


OCaml for ARM MacOS
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ocaml-for-arm-macos/6019/24>


Aaron L. Zeng announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I noticed that opam 2.08 is now available for ARM Macs using
  [Homebrew], and I was able to confirm on my machine.

  `brew install opam' away :)


[Homebrew] <https://github.com/Homebrew/homebrew-core/pull/71605>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2021-02-23 Tue 10:49 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2021.02.16.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2021.03.02.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of February 16 to 23, 20=
21.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">OCamlFormat 0.17.0</a></li>
<li><a href=3D"#2">Set up OCaml 1.1.8</a></li>
<li><a href=3D"#3">Set up OCaml 1.1.9</a></li>
<li><a href=3D"#4">OCaml 4.12.0, first release candidate</a></li>
<li><a href=3D"#5">Ppxlib.0.22: an update on the state of ppx</a></li>
<li><a href=3D"#6">OCaml-based trading firm is hiring remote devs</a></li>
<li><a href=3D"#7">ocamlearlybird 1.0.0 beta1</a></li>
<li><a href=3D"#8">OCaml for ARM MacOS</a></li>
<li><a href=3D"#org3cc487f">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-org444f7c4" class=3D"outline-2">
<h2 id=3D"1">OCamlFormat 0.17.0</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ocamlformat-0-17-0/7287=
/1">https://discuss.ocaml.org/t/ann-ocamlformat-0-17-0/7287/1</a>
</p>
</div>

<div id=3D"outline-container-org7bdc288" class=3D"outline-3">
<h3 id=3D"org7bdc288">Guillaume Petiot announced</h3>
<div class=3D"outline-text-3" id=3D"text-org7bdc288">
<p>
On behalf of the OCamlFormat development team I am pleased to announce the =
release of
<a href=3D"https://github.com/ocaml-ppx/ocamlformat">ocamlformat.0.17.0</a>=
 :tada:.
</p>

<p>
OCamlformat is an auto-formatter for OCaml code, writing the parse tree and=
 comments in a consistent style, so that
you do not have to worry about formatting it by hand, and to speed up code =
review by focusing on the important parts.
</p>

<p>
OCamlFormat is beta software. We expect the program to change considerably =
before we reach version 1.0.0. In
particular, upgrading the <code>ocamlformat</code> package will cause your =
program to get reformatted. Sometimes it is
relatively pain-free, but sometimes it will make a diff in almost every fil=
e. We are working towards having a tool
that pleases most usecases in the OCaml community, please bear with us!
</p>

<p>
To make sure your project uses the last version of ocamlformat, please set
</p>
<pre class=3D"example">
version=3D0.17.0
</pre>
<p>
in your <code>.ocamlformat</code> file.
</p>

<p>
Main changes in <code>ocamlformat.0.17.0</code> are:
</p>

<ul class=3D"org-ul">
<li>the <code>let-open</code> option, deprecated since 0.16.0, has been rem=
oved</li>
<li>support for OCaml 4.06 and 4.07 has been removed, minimal version requi=
rement bumped to OCaml 4.08</li>
<li>the <code>extension-sugar</code> option, deprecated since 0.14.0, has b=
een removed</li>
<li>the syntax of infix set/get operators is now preserved (<code>String.ge=
t</code> and similar calls used to be automatically rewritten to their corr=
esponding infix form <code>.()</code>, that was incorrect when using the <c=
ode>-unsafe</code> compilation flag. Now the concrete syntax of these calls=
 is preserved)</li>
<li>all sugared extension points are now preserved</li>
<li>injectivity type annotations (OCaml 4.12 feature) are now supported</li>
<li>various fixes about comments positions</li>
</ul>

<p>
We encourage you to try ocamlformat, that can be installed from opam direct=
ly ( <code>opam install ocamlformat</code> ), but
please remember that it is still beta software. We have a <a href=3D"https:=
//github.com/ocaml-ppx/ocamlformat#faq-for-new-users">FAQ for new users
</a> that should help you decide if ocamlformat is the right
choice for you.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org13089c1" class=3D"outline-2">
<h2 id=3D"2">Set up OCaml 1.1.8</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-8/7288=
/1">https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-8/7288/1</a>
</p>
</div>

<div id=3D"outline-container-org66def14" class=3D"outline-3">
<h3 id=3D"org66def14">Sora Morimoto announced</h3>
<div class=3D"outline-text-3" id=3D"text-org66def14">
</div>
<div id=3D"outline-container-org72fbedc" class=3D"outline-4">
<h4 id=3D"org72fbedc">Changed</h4>
<div class=3D"outline-text-4" id=3D"text-org72fbedc">
<ul class=3D"org-ul">
<li>The Windows opam wrapper is fractionally less-archaically named opam.cm=
d, with no loss in arcaneness.</li>
<li>Export <code>CYGWIN_ROOT</code> on the Windows runners, allowing bash t=
o be invoked as <code>%CYGWIN_ROOT%\bin\bash~/~$env:CYGWIN_ROOT\bin\bash</c=
ode> (and similarly for Cygwin <code>setup-x86_64.exe</code>).</li>
<li>The Windows runner no longer prepends <code>%CYGWIN_ROOT%\bin</code> to=
 <code>PATH</code>.</li>
</ul>
</div>
</div>

<div id=3D"outline-container-org698ff0c" class=3D"outline-4">
<h4 id=3D"org698ff0c">Fixed</h4>
<div class=3D"outline-text-4" id=3D"text-org698ff0c">
<ul class=3D"org-ul">
<li>Switches in Unix are now properly initialized before running depext.</l=
i>
</ul>

<p>
<a href=3D"https://github.com/avsm/setup-ocaml/releases/tag/v1.1.8">https:/=
/github.com/avsm/setup-ocaml/releases/tag/v1.1.8</a>
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-orgb44b6c6" class=3D"outline-2">
<h2 id=3D"3">Set up OCaml 1.1.9</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-9/7293=
/1">https://discuss.ocaml.org/t/ann-set-up-ocaml-1-1-9/7293/1</a>
</p>
</div>

<div id=3D"outline-container-orgc1b8a7e" class=3D"outline-3">
<h3 id=3D"orgc1b8a7e">Sora Morimoto announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc1b8a7e">
</div>
<div id=3D"outline-container-org7d009f9" class=3D"outline-4">
<h4 id=3D"org7d009f9">Fixed</h4>
<div class=3D"outline-text-4" id=3D"text-org7d009f9">
<ul class=3D"org-ul">
<li>Further fix to switch initialisation.</li>
</ul>

<p>
<a href=3D"https://github.com/avsm/setup-ocaml/releases/tag/v1.1.9">https:/=
/github.com/avsm/setup-ocaml/releases/tag/v1.1.9</a>
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org06d1384" class=3D"outline-2">
<h2 id=3D"4">OCaml 4.12.0, first release candidate</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-4-12-0-first-release-=
candidate/7294/1">https://discuss.ocaml.org/t/ocaml-4-12-0-first-release-ca=
ndidate/7294/1</a>
</p>
</div>

<div id=3D"outline-container-orgda98f05" class=3D"outline-3">
<h3 id=3D"orgda98f05">octachron announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgda98f05">
<p>
The release of OCaml 4.12.0 is expected next week. We have created a release
candidate that you can test. Most opam packages should work with this relea=
se
candidate (without the need for an alpha repository).
</p>

<p>
Compared to the last beta, this new release only contains one fix for Solar=
is
and illumos.
</p>

<p>
If you find any bugs, please report them here:
 <a href=3D"https://github.com/ocaml/ocaml/issues">https://github.com/ocaml=
/ocaml/issues</a>
</p>

<p>
Happy hacking,
</p>

<p>
&#x2013; Florian Angeletti for the OCaml team.
</p>
</div>

<div id=3D"outline-container-org517fac1" class=3D"outline-4">
<h4 id=3D"org517fac1">Installation instructions</h4>
<div class=3D"outline-text-4" id=3D"text-org517fac1">
<p>
The base compiler can be installed as an opam switch with the following com=
mands
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam update
opam switch create 4.12.0~rc1 --repositories=3Ddefault,<span style=3D"color=
: #a0522d;">beta</span>=3Dgit+https://github.com/ocaml/ocaml-beta-repositor=
y.git
</pre>
</div>
<p>
If you want to tweak the configuration of the compiler, you can pick config=
uration options with
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam update
opam switch create &lt;switch_name&gt; --packages=3Docaml-variants.4.12.0~r=
c1+options,&lt;option_list&gt;
--repositories=3Ddefault,<span style=3D"color: #a0522d;">beta</span>=3Dgit+=
https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
where <code>&lt;option_list&gt;</code> is a comma separated list of ocaml-o=
ption-* packages. For
instance, for a flambda and afl enabled switch:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam switch create 4.12.0~rc1+flambda+afl --pa=
ckages=3Docaml-variants.4.12.0~rc1+options,ocaml-option-flambda,ocaml-optio=
n-afl
--repositories=3Ddefault,<span style=3D"color: #a0522d;">beta</span>=3Dgit+=
https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
All available options can be listed with <code>opam search ocaml-option</co=
de>.
</p>

<p>
The source code is available at these addresses:
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://github.com/ocaml/ocaml/archive/4.12.0-rc1.tar.gz">ht=
tps://github.com/ocaml/ocaml/archive/4.12.0-rc1.tar.gz</a></li>
<li><a href=3D"https://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0~rc=
1.tar.gz">https://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0~rc1.tar=
.gz</a></li>
</ul>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org6febd2c" class=3D"outline-2">
<h2 id=3D"5">Ppxlib.0.22: an update on the state of ppx</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ppxlib-0-22-an-update-on-th=
e-state-of-ppx/7296/1">https://discuss.ocaml.org/t/ppxlib-0-22-an-update-on=
-the-state-of-ppx/7296/1</a>
</p>
</div>

<div id=3D"outline-container-org2f2c307" class=3D"outline-3">
<h3 id=3D"org2f2c307">Nathan Rebours announced</h3>
<div class=3D"outline-text-3" id=3D"text-org2f2c307">
<p>
We're happy to announce the release of ppxlib.0.22.0, the fist release of p=
pxlib fully compatible
with OCaml 4.12.
The main and only feature of this release is the bump of the internal OCaml=
 AST used by ppxlib from
4.11 to 4.12, allowing you to use 4.12 language features with ppxlib and an=
y ppxlib-based ppx.
Note that ppxlib was compatible with the 4.12 compiler since 0.19.0 but tha=
t you couldn't use 4.12
language features until now.
</p>

<p>
This is the third such AST bump release since we announced our plan to impr=
ove the state of the PPX
ecosystem <a href=3D"https://discuss.ocaml.org/t/ppx-omp-2-0-0-and-next-ste=
ps/6231">here</a> and we though it'd be a good time to report back to you a=
nd tell you
how things are going on this front.
</p>

<p>
For those of you who aren't familiar with this plan, the goal is to upstrea=
m a minimal, stable,
ocaml-migrate-parsetree-like API on top of the compiler-libs called <code>A=
stlib</code>. It will allow us
to keep ppxlib and any ppx based on ppxlib compatible with OCaml trunk at a=
ll time.
To allow better performances and a clear compisition semantic, all the ppxl=
ib-based ppx-es need to use
the same AST (as opposed to ocaml-migrate-parsetree based ppx-es) so from a=
 certain perspective, this
plan simply moves the breaking API up one step, from compiler-libs to ppxli=
b.
In order to greatly ease the maintainenance of ppx-es and to prevent opam-u=
niverse splits we decided
that everytime we cut a breaking ppxlib release, we will send patches to ke=
ep the existing ppx-es compatible with the
latest version and therefore with the latest OCaml compilers and language f=
eatures.
</p>

<p>
While this seems like a tremendous task and a huge amount of work, dune and=
 other tools that raised
in its wake such as <a href=3D"https://github.com/ocamllabs/opam-monorepo">=
opam-monorepo</a> incredibly simplified this kind of work.
</p>

<p>
Ahead of OCaml releases, we prepare a branch of ppxlib with the upgraded AS=
T. We then fetch
opam-repository to gather a list of sensible reverse dependencies (i.e. pac=
kages whose latest version
depends on ppxlib and is compatible with ppxlib's latest version) and assem=
ble a dune workspace with
a clone of each of those reverse dependencies, our ppxlib branch and all of=
 their dependencies thanks to
opam-monorepo.
We then use dune to build all the packages we're interested in and simply f=
ollow the compilation errors
until everything builds successfully with the new ppxlib.
What remains is to create PRs on the relevant repositories to upstream thos=
e changes, after which
maintainers have everything they need to cut a new compatible release.
</p>

<p>
Most of this process is automated using scripts but it still requires a bit=
 of handiwork. We aim at
extracting tools to further improve this workflow and reduce the time and e=
ffort required but it has
been surprisingly smooth. Our experience with the 4.10, 4.11 and 4.12 upgra=
des so far is that
most reverse dependencies don't need an upgrade and that it's far less dema=
nding for one person
to upgrade all the packages that need it than it would be for each individu=
al maintainers to
understand the changes in the AST and do the upgrade themselves.
</p>

<p>
It's worth noting that for this to work well, the ppx-es and all their depe=
ndencies have to build
with dune. We do maitain a separate opam-repository with dune ports of comm=
only used packages so in
practice most projects fall into this category but a few exceptions remain =
and they are therefore
not taken into account for this upgrade process.
</p>

<p>
We're also trying to improve the tracking of the upgrade's progress and for=
 the 4.12 compatible
release we created a <a href=3D"https://github.com/ocaml-ppx/ppxlib/project=
s/2">github project</a> to have a list of all the packages we
considered and see where they are. We also keep track of the packages we ha=
d to exclude and why.
During this upgrade, we considered 80 opam packages, out of which only 4 ne=
eded to be patched and 6
had to be excluded from the process as we couldn't reasonably get them to b=
uild in our workspace.
</p>

<p>
Once we have a better idea of what makes a package easy to upgrade we plan =
on releasing a set of
reasonable rules to follow to benefit from those upgrades, we'll keep you u=
pdated on this!
</p>

<p>
All in all we're pretty happy with this new process and although it needs t=
o be refined, we're
confident it can grow into something sustainable by creating tools and CI t=
o support it. Hopefully
these will also benefit the wider community and help grow a healthier Opam =
universe.
</p>
</div>
</div>


<div id=3D"outline-container-org57a3c5f" class=3D"outline-3">
<h3 id=3D"org57a3c5f">Jason Nielsen asked</h3>
<div class=3D"outline-text-3" id=3D"text-org57a3c5f">
<p>
Curious about the current status of <code>Astlib</code>.  I was closely fol=
lowing <a href=3D"https://github.com/ocaml-ppx/ppx">ppx</a> at one
point but it hasn't seen much activity recently.  Thanks for all your hard =
work.
</p>
</div>
</div>


<div id=3D"outline-container-orgaca9cf7" class=3D"outline-3">
<h3 id=3D"orgaca9cf7">J=C3=A9r=C3=A9mie Dimino</h3>
<div class=3D"outline-text-3" id=3D"text-orgaca9cf7">
<p>
It's in progress. Not much happened in the past couple of months while we w=
ere finishing the port of a few projects
to ppxlib and doing the 4.12 upgrade. But @pitag re-started working <code>A=
stlib</code> as of a week ago. You can follow our
progression via <a href=3D"https://github.com/ocaml-ppx/ppxlib/wiki">the pu=
blic meeting notes</a>.
</p>

<p>
Note however that the <a href=3D"https://github.com/ocaml-ppx/ppx">ppx</a> =
project was for our original goal or providing a
"forever stable" API for ppx rewriters. It has been in pause since August 2=
020 while were trying the "upgrade the
world" method, which as @NathanReb pointed out is working pretty well pract=
ice. At this point, it's looking more and
more likely that we won't resurect the ppx project.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org2859a2e" class=3D"outline-2">
<h2 id=3D"6">OCaml-based trading firm is hiring remote devs</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-based-trading-firm-is=
-hiring-remote-devs/7298/1">https://discuss.ocaml.org/t/ocaml-based-trading=
-firm-is-hiring-remote-devs/7298/1</a>
</p>
</div>

<div id=3D"outline-container-org99ba497" class=3D"outline-3">
<h3 id=3D"org99ba497">Michael Bacarella announced</h3>
<div class=3D"outline-text-3" id=3D"text-org99ba497">
<p>
BTG is a trading firm founded by ex-Jane Street devs looking to hire some m=
ore devs.
</p>

<p>
The role is primarily remote, working with the rest of our mostly remote te=
am, though we hope to resume regular
on-sites in Puerto Rico.
</p>

<p>
We operate 24/7 and will consider employees anywhere in the world.
</p>

<p>
Prior experience with OCaml is a plus, though any solid programming experie=
nce with an interest in functional
programming and strong static types is also fine.
</p>

<p>
Comfort navigating Linux is essential.
</p>

<p>
Shoot me a message with a copy of your r=C3=A9sum=C3=A9 or C.V. to discuss =
the opportunity further:
<a href=3D"mailto:michael.bacarella@gmail.com">michael.bacarella@gmail.com<=
/a>
</p>

<p>
Feel free to re-post this elsewhere.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgbb2efae" class=3D"outline-2">
<h2 id=3D"7">ocamlearlybird 1.0.0 beta1</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ocamlearlybird-1-0-0-be=
ta1/7180/21">https://discuss.ocaml.org/t/ann-ocamlearlybird-1-0-0-beta1/718=
0/21</a>
</p>
</div>

<div id=3D"outline-container-org8f7fe15" class=3D"outline-3">
<h3 id=3D"org8f7fe15">=E6=96=87=E5=AE=87=E7=A5=A5 announced</h3>
<div class=3D"outline-text-3" id=3D"text-org8f7fe15">
<p>
Hi, all. All the issues of beta1 have been fixed. Beta2 will be released so=
on.
</p>

<p>
<a href=3D"https://github.com/ocaml/opam-repository/pull/18191">https://git=
hub.com/ocaml/opam-repository/pull/18191</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org7ee9fd7" class=3D"outline-2">
<h2 id=3D"8">OCaml for ARM MacOS</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-for-arm-macos/6019/24=
">https://discuss.ocaml.org/t/ocaml-for-arm-macos/6019/24</a>
</p>
</div>

<div id=3D"outline-container-orga50e1d6" class=3D"outline-3">
<h3 id=3D"orga50e1d6">Aaron L. Zeng announced</h3>
<div class=3D"outline-text-3" id=3D"text-orga50e1d6">
<p>
I noticed that opam 2.08 is now available for ARM Macs using
<a href=3D"https://github.com/Homebrew/homebrew-core/pull/71605">Homebrew</=
a>, and I was able to confirm on my machine.
</p>

<p>
<code>brew install opam</code> away :)
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org3cc487f" class=3D"outline-2">
<h2 id=3D"org3cc487f">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org3cc487f">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
