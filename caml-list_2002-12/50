Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA08966; Thu, 5 Dec 2002 20:15:09 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA09269 for <caml-list@pauillac.inria.fr>; Thu, 5 Dec 2002 20:15:08 +0100 (MET)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id gB5JF5104776
	for <caml-list@inria.fr>; Thu, 5 Dec 2002 20:15:07 +0100 (MET)
Received: from fichte.ai.univie.ac.at (markus@localhost [127.0.0.1])
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian -4) with ESMTP id gB5JEu6K008858;
	Thu, 5 Dec 2002 20:14:56 +0100
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.12.3/8.12.3/Debian -4) id gB5JEtFC008857;
	Thu, 5 Dec 2002 20:14:55 +0100
Date: Thu, 5 Dec 2002 20:14:55 +0100
From: Markus Mottl <markus@oefai.at>
To: David Brown <caml-list@davidb.org>
Cc: Caml List <caml-list@inria.fr>
Subject: Re: [Caml-list] Memory leak with native code.
Message-ID: <20021205191455.GA7580@fichte.ai.univie.ac.at>
Mail-Followup-To: David Brown <caml-list@davidb.org>,
	Caml List <caml-list@inria.fr>
References: <20021205184846.GA30014@opus.davidb.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20021205184846.GA30014@opus.davidb.org>
User-Agent: Mutt/1.4i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 05 Dec 2002, David Brown wrote:
> I guess what would be helpful would be any pointers on what might be
> different between bytecode and native.  I do use callbacks, but the
> main program is in Ocaml.

Have you made sure that stubs taking more than five arguments need to
be split up into two functions? E.g.:

C-file:

  CAMLprim value add_nat_native(value nat1, value ofs1, value len1,
                                value nat2, value ofs2, value len2,
                                value carry_in)
  {
    ...
  }

  CAMLprim value add_nat_bytecode(value * argv, int argn)
  {
    return add_nat_native(argv[0], argv[1], argv[2], argv[3],
                          argv[4], argv[5], argv[6]);
  }

OCaml-file:

  external add_nat: nat -> int -> int -> nat -> int -> int -> int -> int
                  = "add_nat_bytecode" "add_nat_native"

Notice that the external function needs to be declared such on the
OCaml-side that you name both entry points (for byte- and native code).

That's the only difference that comes to my mind...

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

