Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA16744; Wed, 11 Dec 2002 20:18:46 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA16740 for <caml-list@pauillac.inria.fr>; Wed, 11 Dec 2002 20:18:44 +0100 (MET)
Received: from orcaware.com (bdsl.66.12.233.174.gte.net [66.12.233.174])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id gBBJIhX04540
	for <caml-list@inria.fr>; Wed, 11 Dec 2002 20:18:43 +0100 (MET)
Received: from orcaware.com (localhost.localdomain [127.0.0.1])
	by orcaware.com (8.12.5/8.12.5) with ESMTP id gBBJIfT7006484;
	Wed, 11 Dec 2002 11:18:42 -0800
Message-ID: <3DF78FB5.A1642B8@orcaware.com>
Date: Wed, 11 Dec 2002 11:19:17 -0800
From: Blair Zajac <blair@orcaware.com>
X-Mailer: Mozilla 4.8 [en] (Windows NT 5.0; U)
X-Accept-Language: en,x-ns1rfacHe4WNh5,x-ns2U100btwUq5f
MIME-Version: 1.0
To: Caml Users Mailing List <caml-list@inria.fr>
Subject: [Caml-list] Resource acquisition is initialization
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

One of the nice things about C++ and Java is that with properly
designed classes, you don't need to worry about freeing resources
in complicated code, because the when the objects go out of scope
either normally or via an exception, they will clean themselves up.

Here's a good description of this idiom:

http://sourceforge.net/docman/display_doc.php?docid=8673&group_id=9028

Given that Ocaml has objects, it would be useful to have this
idiom available to us.  Is there a way to implement it, rather
than just waiting for the garbage collector?

Also, since objects have initializers, do they have finializers?  I
read the entire Oreilly book and didn't see any mention of them.

Reading the C code interface, it looks like you can associate a
finalizer function to clean up an abstract type, but can you do
this with normal Ocaml code?

Best,
Blair

-- 
Blair Zajac <blair@orcaware.com>
Plots of your system's performance - http://www.orcaware.com/orca/
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

