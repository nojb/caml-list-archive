Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA03799; Mon, 9 Dec 2002 15:10:35 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA03633 for <caml-list@pauillac.inria.fr>; Mon, 9 Dec 2002 15:10:34 +0100 (MET)
Received: from shiva.jussieu.fr (shiva.jussieu.fr [134.157.0.129])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id gB9EAXX26943
	for <caml-list@inria.fr>; Mon, 9 Dec 2002 15:10:33 +0100 (MET)
Received: from akasha.ijm.jussieu.fr (akasha.ijm.jussieu.fr [134.157.173.57])
          by shiva.jussieu.fr (8.12.5/jtpda-5.4) with ESMTP id gB9EAKjC091230
          ; Mon, 9 Dec 2002 15:10:22 +0100 (CET)
Received: by akasha.ijm.jussieu.fr (Postfix, from userid 11004)
	id 620B53C45B; Mon,  9 Dec 2002 15:10:15 +0100 (CET)
From: Olivier Andrieu <andrieu@ijm.jussieu.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15860.42055.229312.122122@akasha.ijm.jussieu.fr>
Date: Mon, 9 Dec 2002 15:10:15 +0100
To: onlyclimb <onlyclimb@163.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] How to throw away oop?
In-Reply-To: <3DF50918.7040704@163.com>
References: <3DF50918.7040704@163.com>
X-Mailer: VM 7.07 under Emacs 21.2.1
X-Antivirus: scanned by sophie at shiva.jussieu.fr
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

 onlyclimb [Monday 9 December 2002] :
 >   DNA and Protein can be a subclass of Seq. And in fact there are many 
 >  kind of sequences , so we can suppose the number of the kind of Seq is 
 > infinite. ie. the subclasses of Seq can be infinite.  and DNA and 
 > Protein are just two of them

Do you really think you'll have to subclass your Seq often ? I mean,
you have DNA, proteins and this is it (you can add RNA if you want to
nitpick). In this case, ie when your datatypes are fixed and you're not
going to extend them, you can simply use a variant type.

module DNA = 
  type t = ...
  let length = ...
end

module Protein = 
  type t = ...
  let length = ...
end

and you can build a generic module for functions common in DNA and
Protein :

module Seq = 
  type t = 
   | DNA of DNA.t
   | Protein of Protein.t
  let length = function
   | DNA s -> DNA.length s
   | Protein s -> Protein.length s
end

-- 
   Olivier
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

