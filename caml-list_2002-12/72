Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA12223; Fri, 6 Dec 2002 21:21:45 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA12207 for <caml-list@pauillac.inria.fr>; Fri, 6 Dec 2002 21:21:44 +0100 (MET)
Received: from mallaury.noc.nerim.net (mallaury.noc.nerim.net [62.4.17.82])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id gB6KLhX02217
	for <caml-list@inria.fr>; Fri, 6 Dec 2002 21:21:44 +0100 (MET)
Received: from hector.lesours (lesours.starynkevitch.net [80.65.224.217])
	by mallaury.noc.nerim.net (Postfix) with ESMTP
	id 639C062D03; Fri,  6 Dec 2002 21:21:41 +0100 (CET)
Received: from basile by hector.lesours with local (Exim 3.36 #1 (Debian))
	id 18KOyl-00077u-00; Fri, 06 Dec 2002 21:21:43 +0100
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Message-ID: <15857.1747.608762.636810@hector.lesours>
Date: Fri, 6 Dec 2002 21:21:39 +0100
To: mcharity@vendian.org
Cc: caml-list@inria.fr
Subject: [Caml-list] Exceptions and C
In-Reply-To: <200212061840.gB6Iehc17706@vendian.org>
References: <200212061840.gB6Iehc17706@vendian.org>
X-Mailer: VM 7.07 under Emacs 21.2.2
From: Basile STARYNKEVITCH <basile@starynkevitch.net>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

>>>>> "Mitchell" == Mitchell N Charity <mcharity@vendian.org> writes:

    Mitchell> I gather run-time type checking is not occurring.  Can I
    Mitchell> at least count on avoiding a segfault, or is behavior
    Mitchell> completely undefined if callback arguments are
    Mitchell> incorrectly typed?

Behavior is undefined. For details, read the Chapter 18 "Interfacing C
with Objective Caml" of the reference manual. To understand what is
happening, read the section 18.2 (the value type) - or read the source
of the runtime system.

And there is a reason for that. The whole philosophy of Ocaml is
static typing, which the OCaml team pushes to the extreme (for
instance by refusing dynamic casting or class checking for objects).

I miss more dynamic ability of the object part of Ocaml (even if this
means having a tree of classes, not a forest, and reject multiple
inheritance).



-- 

Basile STARYNKEVITCH         http://starynkevitch.net/Basile/ 
email: basile<at>starynkevitch<dot>net 
alias: basile<at>tunes<dot>org 
8, rue de la Faïencerie, 92340 Bourg La Reine, France
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

