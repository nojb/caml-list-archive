Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA04165; Thu, 26 Dec 2002 18:03:57 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA04989 for <caml-list@pauillac.inria.fr>; Thu, 26 Dec 2002 18:03:57 +0100 (MET)
Received: from smtpproxy2.mitre.org (smtpproxy2.mitre.org [192.80.55.70])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id gBQH3tn29103;
	Thu, 26 Dec 2002 18:03:56 +0100 (MET)
Received: from avsrv1.mitre.org (avsrv1.mitre.org [129.83.20.58])
	by smtpproxy2.mitre.org (8.11.3/8.11.3) with ESMTP id gBQH3sV00795;
	Thu, 26 Dec 2002 12:03:54 -0500 (EST)
Received: from MAILHUB1 (mailhub1.mitre.org [129.83.20.31])
	by smtpsrv1.mitre.org (8.11.3/8.11.3) with ESMTP id gBQH3ri11428;
	Thu, 26 Dec 2002 12:03:53 -0500 (EST)
Received: from banjara.mitre.org (129.83.34.51) by mailhub1.mitre.org with SMTP
        id 575915; Thu, 26 Dec 2002 12:03:51 -0500
To: Pierre Weis <pierre.weis@inria.fr>
Cc: caml-list@inria.fr, guttman@mitre.org (Joshua D. Guttman)
Subject: Re: [Caml-list] Cross-platform DBM equivalent?
Reply-To: guttman@mitre.org (Joshua D. Guttman disp: current)
References: <200212261650.RAA04279@pauillac.inria.fr>
From: guttman@mitre.org (Joshua D. Guttman)
Date: 26 Dec 2002 12:03:49 -0500
In-Reply-To: <200212261650.RAA04279@pauillac.inria.fr>
Message-ID: <nhaisxgg1ai.fsf@banjara.mitre.org>
Lines: 24
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.1
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Pierre Weis <pierre.weis@inria.fr> writes:

>   As far as I know the best (and simpler) way to do this for reasonable
>   number of URLs bindings (say thousands but not millions) is to create
>   a Hashtlbl.t or Map.t and dump it to file using output_value (then
>   read it back with input_value).

Is there a recommended data structure in case one needs tables for
reasonably fast access to millions or tens of millions of values?
Probably hash tables are no longer providing nearly-constant access
time at those sizes.  Is there something better in the standard
library?   

Thanks --

        Joshua 


-- 
	Joshua D. Guttman		<guttman@mitre.org> 
	MITRE, Mail Stop S119		Office:	+1 781 271 2654
	202 Burlington Rd.		Cell:	+1 781 526 5713
	Bedford, MA 01730-1420 USA	Fax:	+1 781 271 8953


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

