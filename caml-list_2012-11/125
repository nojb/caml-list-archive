Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 5D2C07EE86
	for <caml-list@sympa.inria.fr>; Fri, 16 Nov 2012 11:54:29 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.223.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.223.182 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.223.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ie0-f182.google.com) identity=helo;
  client-ip=209.85.223.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-ie0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnwBAPQaplDRVd+2mGdsb2JhbABEsBSSMAgjAQEBAQEICQ0HFCeCHgEBBUABGxILAQMMBgULDQ0hIgERAQUBChIGExIJh18BAw8LnyqMM4J4hG8KGScDClmIdQEFDIwlFAaEcwOSSoMygRyNRhYphBKBWgkX
X-IronPort-AV: E=Sophos;i="4.83,264,1352070000"; 
   d="scan'208";a="162721993"
Received: from mail-ie0-f182.google.com ([209.85.223.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Nov 2012 11:54:21 +0100
Received: by mail-ie0-f182.google.com with SMTP id k10so5973662iea.27
        for <multiple recipients>; Fri, 16 Nov 2012 02:54:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:content-transfer-encoding;
        bh=36K4u1nofo40MQryh8LMI5uyjVRTa//PaTvwDharYzY=;
        b=dn1XAEdp6HqgiYdJfD2klyqajS03np+/h28yG/66FuQTlcaLpL6/HCG4FNAknEkkR6
         IV2JLpmXjEvjyeqnOHuxDT1GwN/iFmONeCQzC5aamDOYqLHlq6gJ0YWmbE73EH1lsRS5
         Re4E+LSXvQQscH9tZRR3qJYKwQ9eyp8XuoK5vz3B0qoBUbTL+hXpN5O2CB7KV2KolZlz
         UttWO1ZFtiY3G1sNg+/YWd8i/KewZSRT86u68R6obGNtX3o0xOByI9NpOn3VaAko6q3o
         u21nZQw//HCG7j0uFnSTmD2w3+yiKxteNx2f62jmcGrRR1hsbfvlY13LtYB4s/7x3JOF
         2UKA==
Received: by 10.50.213.69 with SMTP id nq5mr2115911igc.70.1353063260954; Fri,
 16 Nov 2012 02:54:20 -0800 (PST)
MIME-Version: 1.0
Received: by 10.50.184.199 with HTTP; Fri, 16 Nov 2012 02:53:33 -0800 (PST)
In-Reply-To: <CAMoPVjeChbZ9uGiY6y-UxKVniQN2WcrqJP4iM9WpX=DQDzGxmA@mail.gmail.com>
References: <50A56709.7080105@gmail.com> <331585634.4160435.1353019001535.JavaMail.root@inria.fr>
 <CAMoPVjeChbZ9uGiY6y-UxKVniQN2WcrqJP4iM9WpX=DQDzGxmA@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 16 Nov 2012 11:53:33 +0100
Message-ID: <CAPFanBFtti2ra1so6+NQkUHxwztGYdv0zB8C+vX03WN6JXuJ2w@mail.gmail.com>
To: Arnaud Spiwack <Arnaud.Spiwack@lix.polytechnique.fr>
Cc: Xavier Clerc <xavier.clerc@inria.fr>, Edgar Friendly <thelema314@gmail.com>, 
	OCaML Mailing List <caml-list@inria.fr>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Subject: Re: [Caml-list] About ocamlbuild

Regardless of the overly heated tone of the discussion, I find the
idea of having "ocamlbuild as a library" interesting. Let me detail
what I believe was the idea of the proposal.

Currently we have a shared ocamlbuild executable that would contain
the core logic, and be passed plugins that are invoked by the core
logic at some point of the program. We could consider an inversion of
control where the executable logic is exposed as a library, and users
write scripts use this library (to invoke the ocamlbuild processing),
the script being compiled as whole programs rather than plugins. In
effect, you give the tool to let any project define it's own "tailored
ocamlbuild" easily. There could be little change of usage and
behavior, it's just a different point of view, that has the advantages
already evoked in this thread (facility to link with other stuff,
etc.).

This idea has already been used in other projects where "configuration
is compilation", such as the XMonad window manager (
http://xmonad.org/ ); the xmonad.hs users write is not compiled to a
dynamically loaded plugin, it itself invokes the "xmonad program" as a
library function, passing it (from the language) configuration
information.

I find this idea interesting, but it will require some amount of work.
My guess as to why Xavier Clerc's reply is a bit grumpy is that he is
often the one tasked with implementing those changes. On the other
hand, everyone is free to contribute to ocamlbuild, and I've been
trying to publicly encourage people to contribute, with little success
so far. So Pierre, if you want to have a try at implementing this
idea, by all means, do! We'll see when someone has some working patch
if it can be integrated upstream.

Regarding in-file tags/pragmas, I find such changes should be
considered much more cautiously, as those could mean changes to the
OCaml tooling (or worse, language) as a whole, not simply ocamlbuild
itself. Again, nobody's forbidden to come up with a good,
well-specified, simple proposal that would please everyone, but that
is a quite difficult task and any such proposal should expect to get
rejected.

On Fri, Nov 16, 2012 at 11:33 AM, Arnaud Spiwack
<Arnaud.Spiwack@lix.polytechnique.fr> wrote:
> Well,
>
> I must say the sort of mafioso-like reasoning =AD- "you really do not wan=
t to
> do that" - doesn't really make sense to me.
>
> Here are valid reasons not to include a feature X in a tool:
>
> I don't have time to do X
> I don't know how to do X
> Having X would prevent me from having Y which I'd rather
>
> Any other reason is bad.
>
> People want to have tags and compilation pragmas? Well, let them, they
> probably have valid reasons to (some options may be better seen global to
> the project and other local to files). People want to interleave compiling
> the build system and compiling the project. They have a good reason for t=
hat
> too. Also: ocamlbuild doesn't only compile ocaml files.
>
> Related to that last point, and to the initial question: as far as I'm
> aware, an ocamlbuild plugin cannot depend on a custom library (to go arou=
nd
> that we can use a myocamlbuild.ml which compiles a mymyocamlbuild.ml (or
> something) with the appropriate linking options, then copy it in a
> _build_stage2 directory, then Unix.excv an ocamlbuild -no-plugin -build-d=
ir
> _build_stage2. It would be nice if there were a standard and simple way to
> do this sort of thing). In particular there is no principled way to
> distribute a tool together with an ocamlbuild library against which to
> compile our myocamlbuild.ml plugins (hence extending what ocamlbuild can
> "natively" compile).
>
>
>
>
> On 15 November 2012 23:36, Xavier Clerc <xavier.clerc@inria.fr> wrote:
>>
>> ----- Mail original -----
>> > On 11/15/2012 4:48 PM, Xavier Clerc wrote:
>> > >> 3 - Finally, I find the idea of tags good, for backward
>> > >> compatibility
>> > >> reasons (you do not have to change your code), but not enough. For
>> > >> instance, in haskell (and some compilers written in ocaml), you
>> > >> can
>> > >> add "tags" at the beginning of your files. You would start your
>> > >> ocaml files with comments such as:
>> > >>
>> > >> (* #OPTIONS -rectypes *)
>> > > Well, I find tags pretty convenient, and do not dislike the comment
>> > > approach. However, I am pretty sure I do not want the related
>> > > information
>> > > to be scattered over multiple locations.
>> > It's exactly this reason that I'm strongly in favor of magic comments
>> > or
>> > pragmas or something in .ml files to do do this kind of thing.
>> > Splitting the data needed to compile a module into two parts: the
>> > module
>> > and a makefile (or _tags or OMakefile or whatever) seems a violation
>> > of
>> > your "multiple locations" policy.
>>
>> I do not follow your line of thought: every information about how to
>> compile is clearly in build files, and not in source code files.
>> If I wonder how the command-line for a given compilation is determined,
>> there is only one place to look.
>>
>> Again, I do not claim that the current state of affairs (everything
>> in build files) is better than a pure pragma-based solution (everything
>> in source files). My objection is about a mixed system where one should
>> have to consult both build and source file in order to know which
>> options are passed to compile a given module.
>>
>>
>> > While I grant that some
>> > compilation
>> > options (whether to compile in debug/profiling/native mode, location
>> > of
>> > external libraries) should not be included in a source file, I'm
>> > strongly in favor of having the build system work out the details of
>> > dependencies (internal to project and external, installed in global
>> > location) and even what camlp4 to run based on the contents of the
>> > file
>> > itself and not elsewhere.
>>
>> To be fair, I should point out that Coq is extracting camlp4 information
>> from source files in order to determine how to treat them.
>>
>>
>> Just a final remark: compared to Haskell, OCaml compilers feature a
>> limited
>> number of command-line switches having an influence on the semantics of a
>> source file(*). I regard this as a pleasant thing, and think this makes
>> the
>> issue at hand quite minor.
>>
>>
>> Kind regards,
>>
>> Xavier Clerc
>>
>>
>>
>>
>> (*) we are only talking about labels, applicative functors, and recursive
>> types
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
