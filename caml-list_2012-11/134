Return-Path: <wojciech.meyer@googlemail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 49CA07EE20
	for <caml-list@sympa.inria.fr>; Fri, 16 Nov 2012 20:33:13 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  wojciech.meyer@googlemail.com) identity=pra;
  client-ip=209.85.219.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="wojciech.meyer@googlemail.com";
  x-sender="wojciech.meyer@googlemail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  wojciech.meyer@googlemail.com designates 209.85.219.54 as
  permitted sender) identity=mailfrom; client-ip=209.85.219.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="wojciech.meyer@googlemail.com";
  x-sender="wojciech.meyer@googlemail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oa0-f54.google.com) identity=helo;
  client-ip=209.85.219.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="wojciech.meyer@googlemail.com";
  x-sender="postmaster@mail-oa0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjcDAFeUplDRVds2m2dsb2JhbABEsEeJBQGJEQgjAQEBAQEICQsJFCeCHgEBBUABMwUBAwwGBQsDCi4hARIBBQEcBhOHegEDD6AmjyuEfwpADYlOAQUMiz5phQ0DkkqBXYFVgRyKFgKDLhYphBI
X-IronPort-AV: E=Sophos;i="4.83,266,1352070000"; 
   d="scan'208";a="162782272"
Received: from mail-oa0-f54.google.com ([209.85.219.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Nov 2012 20:33:11 +0100
Received: by mail-oa0-f54.google.com with SMTP id n9so5351463oag.27
        for <caml-list@inria.fr>; Fri, 16 Nov 2012 11:33:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=ZWs5h1i+Oldt5VUHNEMBYFsQAruuwbzZmcCbGp/CYuE=;
        b=b2jUQbzcwbNqhM5uYCAc+yTwx9LYwBeayqnozC2HANWTVK+ZzH3kNeT40ynOQRei2F
         BM3vcxvCjR7e1Ha1a/8ugYV4cJOpe0LwqDbK3M7c26CB1ioahl1PYCspHU+vKmccRo+O
         DuXMRCFubPUV57UXRhKZuqXjZn3UtykqQIybbc5cYIb+yGIjRocDUEKhIQOGMSwnN7H6
         hVsO3A/nNycAJ0v1syJBnoIc7H55Fe15pvQeqYnQ3Nc542Q/WA0W4Enl1Gc234V2Hiie
         aZ7PLUELsL6jR3nveq8u1LoyFwH97GntxcBjXYUW4V7WfO/UJVHk57R9LOj+CXmYy6qL
         SfoQ==
MIME-Version: 1.0
Received: by 10.182.31.13 with SMTP id w13mr4806157obh.29.1353094389878; Fri,
 16 Nov 2012 11:33:09 -0800 (PST)
Received: by 10.76.81.229 with HTTP; Fri, 16 Nov 2012 11:33:09 -0800 (PST)
In-Reply-To: <50A68E6E.5080704@gmail.com>
References: <50A56709.7080105@gmail.com>
	<331585634.4160435.1353019001535.JavaMail.root@inria.fr>
	<CAMoPVjeChbZ9uGiY6y-UxKVniQN2WcrqJP4iM9WpX=DQDzGxmA@mail.gmail.com>
	<CAPFanBFtti2ra1so6+NQkUHxwztGYdv0zB8C+vX03WN6JXuJ2w@mail.gmail.com>
	<BBA74930-79F4-4C9D-871A-719113837891@gmail.com>
	<50A68E6E.5080704@gmail.com>
Date: Fri, 16 Nov 2012 20:33:09 +0100
Message-ID: <CAOg1smDhjHgSTAG_ZAidoMii31Wap7cJq8ORVVZSFY-P2karfA@mail.gmail.com>
From: Wojciech Meyer <wojciech.meyer@googlemail.com>
To: Hongbo Zhang <bobzhang1988@gmail.com>
Cc: Pierre-Etienne Meunier <pierreetienne.meunier@gmail.com>, O Caml <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=14dae93a148d74cf0f04cea1d68e
Subject: Re: [Caml-list] About ocamlbuild


--14dae93a148d74cf0f04cea1d68e
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

Hi,

I had the idea of fleshing out the ocamlbuild internals some time ago. On
OUD I expressed this to Nicolas P (co author of ocamlbuid) and Xavier
Clerk. I also spoke to Sylvain about turning Oasis from compiler to
interpreter, not directly generating files but instead calling ocamlbuild
API. The good start would be to be able to dynlink directly libraries with
side effects. Then we could do further and provide .build pacakges for
ocamlind for each project that uses complex build steps for instance due to
metaprogramming or several stages of compilation.

On Friday, November 16, 2012, Hongbo Zhang <bobzhang1988@gmail.com> wrote:
> On 11/16/12 6:43 AM, Pierre-Etienne Meunier wrote:
>>
>> Hi,
>>
>> My original idea was not at all to start a new ocaml-tools war, I'm
sorry if my first message was poorly formulated. Let me make myself clear,
I wrote a typesetting system in ocaml, in order to write my PhD thesis. The
way it works is a little strange, it compiles your source to ocaml source
code (our language is quite cool, because based on a dypgen grammar, but
you can use another one if you have time to write a parser and code
generator). Then it compiles this code with a library called "Typography",
that does all the document processing stuff, optimization of the page
breaks, and so on. Finally, it calls another library to output to different
formats, such as pdf, plain text, svg, opengl, or anything else.
>>
>> These are clearly "separable but not independent" projects (drivers,
document formats, font library, typesetting library, parser/code
generator). So compiling everything without duplication is not that
trivial, and I really would like to write an ocaml program to compile it,
maybe using a more complex build system than just one file with the
ocamlbuild api. I understand that ocamlbuild is still in an early stage of
development, this is why I'm sending these mails. The code is split among
different directories, and using a library interface in the compilation of
another library still seems difficult in ocamlbuild today. The
documentation explains how to use an internal library in program, but it
forces you to use a particular layout of your files. This is why I feel
that a library would be more versatile: we can imagine a makefile compiling
the build system first, possibly split between several modules, then
calling it to compile the rest, like xmonad does, for instance.
>>
>> Also, if you are writing a document with our system, separated between
different files, you want the system to compile it automatically, without
too much recompilation. The problem is extensibility: for instance, if you
are writing a bibliography library (I wrote one, but there may be others in
the future), you certainly do not want to touch our code in order to
compile it. Instead, you want to write a dynlinkable module explaining to
our system how the documents depend on bibliography files, and how to
compile everything in what order.
>> To do this, I had to rewrite a (small) ocamlbuild-like library. My point
is that ocamlbuild exposes (or documents) a too small part of its internals
to be re-used inside another project.
>
> I fully agree with you, it would be really nice that ocamlbuild provide a
library interface instead a poor myocamlbuild.ml.
>
> Currently my situation is  that I have to copy my 2000lines
myocamlbuild.ml everywhere, and do some changes locally(probably some bug
fixes will be forgotten to sync up since it's scattered everywhere and I am
lazy), that's not the ideal case.
>
>
> Now, I completely understand Xavier's points:
>
> - about _tags, and this is also my philosophy when I write ocaml code
myself. I asked the question because I needed magic comments in the build
system of my typesetting stuff, mostly because the ocaml source code that I
compile is produced automatically, and meant to be executed only once.
Writing the correct _tags files without conflicts between the different
files, with the correct directory inclusions for instance, would be much
more complicated. This is the only case where I see the point of a mixed
system.
>
> - about the command line options of ghc: clearly, this also has to do
with the fact that ocamlopt manages to compile files of equivalent sizes
about twenty or thirty times faster than ghc in the cases I tried. The
theoretical problems solved are not the same, either.
>
> Finally, Gabriel, I would be happy to contribute code to ocaml, only my
time is a scarce resource right now. Maybe some day=85
>
> Cheers,
> Pierre
>
>
> Em 16/11/2012, =E0s 11:53, Gabriel Scherer escreveu:
>
> Regardless of the overly heated tone of the discussion, I find the
> idea of having "ocamlbuild as a library" interesting. Let me detail
> what I believe was the idea of the proposal.
>
> Currently we have a shared ocamlbuild executable that would contain
> the core logic, and be passed plugins that are invoked by the core
> logic at some point of the program. We could consider an inversion of
> control where the executable logic is exposed as a library, and users
> write scripts use this library (to invoke the ocamlbuild processing),
> the script being compiled as whole programs rather than plugins. In
> effect, you give the tool to let any project define it's own "tailored
> ocamlbuild" easily. There could be little change of usage and
> behavior, it's just a different point of view, that has the advantages
> already evoked in this thread (facility to link with other stuff,
> etc.).
>
> This idea has already been used in other projects where "configuration
> is compilation", such as the XMonad window manager (
> http://xmonad.org/ ); the xmonad.hs users write is not compiled to a
> dynamically loaded plugin, it itself invokes the "xmonad program" as a
> library function, passing it (from the language) configuration
> information.
>
> I find this idea interesting, but it will require some amount of work.
> My guess as to why Xavier Clerc's reply is a bit grumpy is that he is
> often the one tasked with implementing those changes. On the other
> hand, everyone is free to contribute to ocamlbuild, and I've been
> trying to publicly encourage people to contribute, with little success
> so far. So Pierre, if you want to have a try at implementing this
> idea, by all means, do! We'll see when someone has some working patch
> if it can be integrated upstream.
>
> Regarding in-file tags/pragmas, I find such changes should be
> considered much more cautiously, as those could mean changes to the
> OCaml tooling (or worse, language) as a whole, not simply ocamlbuild
> itself. Again, nobody's forbidden to come up with a good,
> well-specified, simple proposal that would please everyone, but that
> is a quite difficult task and any such proposal should expect to get
> rejected.
>
> On Fri, Nov 16, 2012 at 11:33 AM, Arnaud Spiwack
> <Arnaud.Spiwack@lix.polytechnique.fr> wrote:
>
> Well,
>
> I must say the sort of mafioso-like reasoning - "you really do not want to
> do that" - doesn't really make sense to me.
>
> Here are valid reasons not to include a feature X in a tool:
>
> I don't have time to do X
> I don't know how to do X
> Having X would prevent me from having Y which I'd rather
>
> Any other reason is bad.
>
> People want to have tags and compilation pragmas? Well, let them, they
> probably have valid reasons to (some options may be better seen global to
> the project and other local to files). People want to interleave compiling
> the build system and compiling the project. They have a good reason for
that
> too. Also: ocamlbuild doesn't only compile ocaml files.
>
> Related to that last point, and to the initial question: as far as I'm
> aware, an ocamlbuild plugin cannot depend on a custom library (to go
around
> that we can use a myocamlbuild.ml which compiles a mymyocamlbuild.ml (or
> something) with the appropriate linking options, th

--14dae93a148d74cf0f04cea1d68e
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

Hi,<br><br>I had the idea of fleshing out the ocamlbuild internals some tim=
e ago. On OUD I expressed this to Nicolas P (co author of ocamlbuid) and Xa=
vier Clerk. I also spoke to Sylvain about turning Oasis from compiler to in=
terpreter, not directly generating files but instead calling ocamlbuild API=
. The good start would be to be able to dynlink directly libraries with sid=
e effects. Then we could do further and provide .build pacakges for ocamlin=
d for each project that uses complex build steps for instance due to metapr=
ogramming or several stages of compilation.<br>
<br>On Friday, November 16, 2012, Hongbo Zhang &lt;<a href=3D"mailto:bobzha=
ng1988@gmail.com">bobzhang1988@gmail.com</a>&gt; wrote:<br>&gt; On 11/16/12=
 6:43 AM, Pierre-Etienne Meunier wrote:<br>&gt;&gt;<br>&gt;&gt; Hi,<br>&gt;=
&gt;<br>
&gt;&gt; My original idea was not at all to start a new ocaml-tools war, I&=
#39;m sorry if my first message was poorly formulated. Let me make myself c=
lear, I wrote a typesetting system in ocaml, in order to write my PhD thesi=
s. The way it works is a little strange, it compiles your source to ocaml s=
ource code (our language is quite cool, because based on a dypgen grammar, =
but you can use another one if you have time to write a parser and code gen=
erator). Then it compiles this code with a library called &quot;Typography&=
quot;, that does all the document processing stuff, optimization of the pag=
e breaks, and so on. Finally, it calls another library to output to differe=
nt formats, such as pdf, plain text, svg, opengl, or anything else.<br>
&gt;&gt;<br>&gt;&gt; These are clearly &quot;separable but not independent&=
quot; projects (drivers, document formats, font library, typesetting librar=
y, parser/code generator). So compiling everything without duplication is n=
ot that trivial, and I really would like to write an ocaml program to compi=
le it, maybe using a more complex build system than just one file with the =
ocamlbuild api. I understand that ocamlbuild is still in an early stage of =
development, this is why I&#39;m sending these mails. The code is split amo=
ng different directories, and using a library interface in the compilation =
of another library still seems difficult in ocamlbuild today. The documenta=
tion explains how to use an internal library in program, but it forces you =
to use a particular layout of your files. This is why I feel that a library=
 would be more versatile: we can imagine a makefile compiling the build sys=
tem first, possibly split between several modules, then calling it to compi=
le the rest, like xmonad does, for instance.<br>
&gt;&gt;<br>&gt;&gt; Also, if you are writing a document with our system, s=
eparated between different files, you want the system to compile it automat=
ically, without too much recompilation. The problem is extensibility: for i=
nstance, if you are writing a bibliography library (I wrote one, but there =
may be others in the future), you certainly do not want to touch our code i=
n order to compile it. Instead, you want to write a dynlinkable module expl=
aining to our system how the documents depend on bibliography files, and ho=
w to compile everything in what order.<br>
&gt;&gt; To do this, I had to rewrite a (small) ocamlbuild-like library. My=
 point is that ocamlbuild exposes (or documents) a too small part of its in=
ternals to be re-used inside another project.<br>&gt;<br>&gt; I fully agree=
 with you, it would be really nice that ocamlbuild provide a library interf=
ace instead a poor <a href=3D"http://myocamlbuild.ml">myocamlbuild.ml</a>.<=
br>
&gt;<br>&gt; Currently my situation is =A0that I have to copy my 2000lines =
<a href=3D"http://myocamlbuild.ml">myocamlbuild.ml</a> everywhere, and do s=
ome changes locally(probably some bug fixes will be forgotten to sync up si=
nce it&#39;s scattered everywhere and I am lazy), that&#39;s not the ideal =
case.<br>
&gt;<br>&gt;<br>&gt; Now, I completely understand Xavier&#39;s points:<br>&=
gt;<br>&gt; - about _tags, and this is also my philosophy when I write ocam=
l code myself. I asked the question because I needed magic comments in the =
build system of my typesetting stuff, mostly because the ocaml source code =
that I compile is produced automatically, and meant to be executed only onc=
e. Writing the correct _tags files without conflicts between the different =
files, with the correct directory inclusions for instance, would be much mo=
re complicated. This is the only case where I see the point of a mixed syst=
em.<br>
&gt;<br>&gt; - about the command line options of ghc: clearly, this also ha=
s to do with the fact that ocamlopt manages to compile files of equivalent =
sizes about twenty or thirty times faster than ghc in the cases I tried. Th=
e theoretical problems solved are not the same, either.<br>
&gt;<br>&gt; Finally, Gabriel, I would be happy to contribute code to ocaml=
, only my time is a scarce resource right now. Maybe some day=85<br>&gt;<br=
>&gt; Cheers,<br>&gt; Pierre<br>&gt;<br>&gt;<br>&gt; Em 16/11/2012, =E0s 11=
:53, Gabriel Scherer escreveu:<br>
&gt;<br>&gt; Regardless of the overly heated tone of the discussion, I find=
 the<br>&gt; idea of having &quot;ocamlbuild as a library&quot; interesting=
. Let me detail<br>&gt; what I believe was the idea of the proposal.<br>
&gt;<br>&gt; Currently we have a shared ocamlbuild executable that would co=
ntain<br>&gt; the core logic, and be passed plugins that are invoked by the=
 core<br>&gt; logic at some point of the program. We could consider an inve=
rsion of<br>
&gt; control where the executable logic is exposed as a library, and users<=
br>&gt; write scripts use this library (to invoke the ocamlbuild processing=
),<br>&gt; the script being compiled as whole programs rather than plugins.=
 In<br>
&gt; effect, you give the tool to let any project define it&#39;s own &quot=
;tailored<br>&gt; ocamlbuild&quot; easily. There could be little change of =
usage and<br>&gt; behavior, it&#39;s just a different point of view, that h=
as the advantages<br>
&gt; already evoked in this thread (facility to link with other stuff,<br>&=
gt; etc.).<br>&gt;<br>&gt; This idea has already been used in other project=
s where &quot;configuration<br>&gt; is compilation&quot;, such as the XMona=
d window manager (<br>
&gt; <a href=3D"http://xmonad.org/">http://xmonad.org/</a> ); the xmonad.hs=
 users write is not compiled to a<br>&gt; dynamically loaded plugin, it its=
elf invokes the &quot;xmonad program&quot; as a<br>&gt; library function, p=
assing it (from the language) configuration<br>
&gt; information.<br>&gt;<br>&gt; I find this idea interesting, but it will=
 require some amount of work.<br>&gt; My guess as to why Xavier Clerc&#39;s=
 reply is a bit grumpy is that he is<br>&gt; often the one tasked with impl=
ementing those changes. On the other<br>
&gt; hand, everyone is free to contribute to ocamlbuild, and I&#39;ve been<=
br>&gt; trying to publicly encourage people to contribute, with little succ=
ess<br>&gt; so far. So Pierre, if you want to have a try at implementing th=
is<br>
&gt; idea, by all means, do! We&#39;ll see when someone has some working pa=
tch<br>&gt; if it can be integrated upstream.<br>&gt;<br>&gt; Regarding in-=
file tags/pragmas, I find such changes should be<br>&gt; considered much mo=
re cautiously, as those could mean changes to the<br>
&gt; OCaml tooling (or worse, language) as a whole, not simply ocamlbuild<b=
r>&gt; itself. Again, nobody&#39;s forbidden to come up with a good,<br>&gt=
; well-specified, simple proposal that would please everyone, but that<br>
&gt; is a quite difficult task and any such proposal should expect to get<b=
r>&gt; rejected.<br>&gt;<br>&gt; On Fri, Nov 16, 2012 at 11:33 AM, Arnaud S=
piwack<br>&gt; &lt;<a href=3D"mailto:Arnaud.Spiwack@lix.polytechnique.fr">A=
rnaud.Spiwack@lix.polytechnique.fr</a>&gt; wrote:<br>
&gt;<br>&gt; Well,<br>&gt;<br>&gt; I must say the sort of mafioso-like reas=
oning - &quot;you really do not want to<br>&gt; do that&quot; - doesn&#39;t=
 really make sense to me.<br>&gt;<br>&gt; Here are valid reasons not to inc=
lude a feature X in a tool:<br>
&gt;<br>&gt; I don&#39;t have time to do X<br>&gt; I don&#39;t know how to =
do X<br>&gt; Having X would prevent me from having Y which I&#39;d rather<b=
r>&gt;<br>&gt; Any other reason is bad.<br>&gt;<br>&gt; People want to have=
 tags and compilation pragmas? Well, let them, they<br>
&gt; probably have valid reasons to (some options may be better seen global=
 to<br>&gt; the project and other local to files). People want to interleav=
e compiling<br>&gt; the build system and compiling the project. They have a=
 good reason for that<br>
&gt; too. Also: ocamlbuild doesn&#39;t only compile ocaml files.<br>&gt;<br=
>&gt; Related to that last point, and to the initial question: as far as I&=
#39;m<br>&gt; aware, an ocamlbuild plugin cannot depend on a custom library=
 (to go around<br>
&gt; that we can use a <a href=3D"http://myocamlbuild.ml">myocamlbuild.ml</=
a> which compiles a <a href=3D"http://mymyocamlbuild.ml">mymyocamlbuild.ml<=
/a> (or<br>&gt; something) with the appropriate linking options, th

--14dae93a148d74cf0f04cea1d68e--
