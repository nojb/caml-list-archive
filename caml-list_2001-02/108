Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA28612 for caml-red; Fri, 9 Feb 2001 10:48:34 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA08247 for <caml-list@pauillac.inria.fr>; Fri, 9 Feb 2001 10:06:40 +0100 (MET)
Received: from pochi.inria.fr (pochi.inria.fr [128.93.8.128])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f1996bP28119;
	Fri, 9 Feb 2001 10:06:37 +0100 (MET)
Received: (from mentre@localhost)
	by pochi.inria.fr (8.11.1/8.10.0) id f1996b431626;
	Fri, 9 Feb 2001 10:06:37 +0100
X-Authentication-Warning: pochi.inria.fr: mentre set sender to David.Mentre@inria.fr using -f
To: Xavier Leroy <Xavier.Leroy@inria.fr>
Cc: Don Syme <dsyme@microsoft.com>, caml-list@inria.fr
Subject: Re: OCaml on CLR/JVM?
References: <0C682B70CE37BC4EADED9D375809768A02DB1D6E@red-msg-04.redmond.corp.microsoft.com>
	<20010208200330.A10340@pauillac.inria.fr>
From: David Mentre <David.Mentre@inria.fr>
X-PhD-defense:  in 0 months and 17 days.
Date: 09 Feb 2001 10:06:37 +0100
In-Reply-To: Xavier Leroy's message of "Thu, 8 Feb 2001 20:03:30 +0100"
Message-ID: <qtlpugsdy3m.fsf@pochi.inria.fr>
Lines: 51
User-Agent: Gnus/5.0807 (Gnus v5.8.7) Emacs/20.4
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: weis@pauillac.inria.fr

Xavier Leroy <Xavier.Leroy@inria.fr> writes:

[ about Caml and Java GC cooperation ]
> The only limitation is that a cross-heap cycle (a Java object pointing
> to a Caml block pointing back to the Java object) can never be
> reclaimed... (Thanks to Martin Odersky for pointing this out.)

Regarding GC cooperation, some work has been done on the MALI memory
system [Bekkers86-0:confs]. As Olivier Ridoux explained to me and as far
as I remember, they consider 4 kinds of pointer, some of them to let
garbage reclamation be done latter by the other GC. However, I don't
know if their scheme would solve your inter-GC cycle reclamation. Maybe
you should ask Olivier.Ridoux@irisa.fr directly.

I would be interested to know the solution you applied to this issue. 

>  it turns out to be much simpler (for the implementation, not for the
> final user!) to map Java objects to values of abstract Caml types, and
> treat methods as functions over these abstract types, than mapping
> Java objects to Caml objects.  That was quite unexpected!

Of pure curiosity, why is it so difficult to map Java to Caml objects?
Is it the way control flow evolves between object methods that is
different? Is the typing of OCaml constraining too much the kind of
programs that can be written compared to Java?


Best regards,
d.


@InProceedings{Bekkers86-0:confs,
  author =       "Y. Bekkers and B. Canet and O. Ridoux and L. Ungaro",
  title =        "{MALI}: {A} Memory with a Real-time Garbage Collector
                 for Implementing Logic Programming Languages",
  booktitle =    "Proceedings of the International Symposium on Logic
                 Programming",
  organization = "IEEE Computer Society,",
  year =         "1986",
  month =        sep,
  publisher =    "The Computer Society Press",
  pages =        "258--265",
  ISBN =         "0-8186-0728-9",
}

There is also a "Publication interne" #611, IRISA, 1991, by Olivier
Ridoux : ftp://ftp.irisa.fr/local/lande/or-tr-irisa611-91.ps.Z

-- 
 David.Mentre@inria.fr -- http://www.irisa.fr/prive/dmentre/
 Opinions expressed here are only mine.


