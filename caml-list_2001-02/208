Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA32455; Fri, 16 Feb 2001 20:01:45 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA32420 for <caml-list@pauillac.inria.fr>; Fri, 16 Feb 2001 20:01:44 +0100 (MET)
Received: from mrwall.kal.com (mrwall.kal.com [194.193.14.236])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id f1GJ1hT00901;
	Fri, 16 Feb 2001 20:01:43 +0100 (MET)
Received: from mrwall.kal.com [194.193.14.236]
	(HELO localhost)
	by mrwall.kal.com (AltaVista Mail V2.0J/2.0J BL25J listener)
	id 0000_004f_3a8d_797e_c01c;
	Fri, 16 Feb 2001 19:03:26 +0000
Received: from somewhere by smtpxd
Message-ID: <3145774E67D8D111BE6E00C0DF418B663FD1FB@nt.kal.com>
From: Dave Berry <dave@kal.com>
To: Don Syme <dsyme@microsoft.com>, Xavier Leroy <Xavier.Leroy@inria.fr>,
        caml-list@inria.fr
Subject: [Caml-list] RE: OCaml on CLR/JVM?
Date: Fri, 16 Feb 2001 19:06:31 -0000
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.0.1460.8)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

I think Microsoft should be congratulated on their outreach to programming
language researchers.  I for one would certainly welcome a widely
distributed VM that is a good target for compiling ML.  Interoperability
with other languages on the same VM would be a bonus.

That said, interoperability is still hard.  You're making it easier, for a
single platform (a hardware-independent platform, which is good, but still a
single platform).  I'm not out to rubbish your work, or your goals; but
there is no general solution to the problem, and interoperability with C
(etc.) will still be needed, unless and until the .NET CLR is the de facto
standard everywhere.

Regarding threads, I have encountered problems mixing Java threads with
native Windows threads, and with mixing Dylan threads with native Windows
threads, and mixing MLWorks threads with native Windows threads.  With care,
simple cases should work fine, and this is often sufficient.  But there
always seem to be dark corners to trap you if you attempt more complicated
uses.  Again, I don't want to knock attempts to improve this situation.  I
just think it's fundamentally hard to resolve all cases.

Dave.
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

