Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA30588 for caml-red; Mon, 5 Feb 2001 17:56:08 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA22128 for <caml-list@pauillac.inria.fr>; Mon, 5 Feb 2001 03:21:24 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f152LM907797
	for <caml-list@inria.fr>; Mon, 5 Feb 2001 03:21:22 +0100 (MET)
Received: from localhost (mikan.kurims.kyoto-u.ac.jp [130.54.16.202])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id LAA27315;
	Mon, 5 Feb 2001 11:21:10 +0900 (JST)
To: andorxor@gmx.de
Cc: caml-list@inria.fr
Subject: Re: Unbound type constructor
In-Reply-To: <9114178788.20010203181656@gmx.de>
References: <9114178788.20010203181656@gmx.de>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20010205112112B.garrigue@kurims.kyoto-u.ac.jp>
Date: Mon, 05 Feb 2001 11:21:12 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 33
Sender: weis@pauillac.inria.fr

> I'm learning OCaml...
> 
> The following code snippet fails due to an "unbound type constructor"
> error. How could I achieve the intended result in OCaml?
> 
> type combination = T1 of int | T2 of test | T3 of test * test
> 
> class test =
>       object
>             method virtual get : combination
>       end

Since you cannot have mutual recursion between a type definition and a
class definition, you have to use parameterization. In this case this
is very easy, but this can get heavier when you have lots of mutually
recursive types.

type 'a combination = T1 of int | T2 of 'a | T3 of 'a * 'a

class virtual test =
  object
    method virtual get : test combination
  end

> PS: Naive question, why aren't there type members in OCaml classes?

Because classes are not modules...
The technical explanation is rather complex, but you can just think
about the fact class types are just object types, and the compiler
should be able to infer object types without type annotations. In
general you cannot infer type members.

Jacques Garrigue


