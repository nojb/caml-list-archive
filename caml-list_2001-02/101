Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA21438 for caml-red; Fri, 9 Feb 2001 10:19:12 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA07025 for <caml-list@pauillac.inria.fr>; Thu, 8 Feb 2001 21:01:32 +0100 (MET)
Received: from mail.liquidmarket.com (oahu02.liquidmarket.com [208.244.147.130])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id f18K1VH08374
	for <caml-list@inria.fr>; Thu, 8 Feb 2001 21:01:31 +0100 (MET)
Message-Id: <200102082001.f18K1VH08374@nez-perce.inria.fr>
Received: (qmail 7558 invoked by uid 10021); 8 Feb 2001 20:58:38 -0000
Received: from maui00.liquidmarket.com (192.168.1.63)
  by ypmaster2.liquidmarket.com with SMTP; 8 Feb 2001 20:58:38 -0000
X-Mailer: exmh version 2.2 06/23/2000 with nmh-1.0.3
From: Francois Rouaix <frouaix@liquidmarket.com>
To: caml-list@inria.fr
Subject: Re: OCaml's long range graphical direction? 
In-reply-to: Your message of "Tue, 06 Feb 2001 10:28:42 +0100."
             <20010206102842.A27059@pauillac.inria.fr> 
Reply-To: frouaix@liquidmarket.com
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Thu, 08 Feb 2001 12:01:29 -0800
Sender: weis@pauillac.inria.fr

Okay, my 2 bits on this dicussion; (my credentials are : original designer of 
the CamlTk interface, writer of MMM. More recently, I've used CamlTk for a 
production tool in the company I work for).

I actually think that none of CamlTk/LablTK/LabelGTK fit the most common need 
in GUI development. In many cases, it still strikes me as utterly boring and 
time consuming to write *code* to put up menus, buttons, dialogs and such. Of 
course, from time to time, when you need some form of widget that is a bit 
original, programming will be useful. But that doesn't happen a lot, unless 
you write something that needs complex rendering or interaction.
Back in 1985, Apple started using resources to define interfaces. More 
recently, Palm used resources again to define interfaces. More recently, 
Mozilla folks used XML based representation (XUL) to define interfaces, with a 
GUI level scripting language (JavaScript/ECMAScript).
This type of approach has, in theory, lots of advantages
  - forces separation GUI from logic in the code
  - allows non-programmers to do the GUI design/layout (maybe using 
interactive tools in the process).
  - themes easily abstracted
  - language independence, extensibility, device independence

I wish that XUL wasn't so bloated (it's basically the whole Mozilla), and that 
I had time to play with it.
I would also be interested to know if anybody has explored this realm.

--f



