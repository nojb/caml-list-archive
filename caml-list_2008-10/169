Return-Path: <kuba@mareimbrium.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 9FBFABBAF
	for <caml-list@yquem.inria.fr>; Wed, 15 Oct 2008 15:50:55 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: As4BAGKS9UhDWxLCbmdsb2JhbACBcpFtPq1FgWs
X-IronPort-AV: E=Sophos;i="4.33,416,1220220000"; 
   d="scan'208";a="30369537"
Received: from ip67-91-18-194.z18-91-67.customer.algx.net (HELO server1.bertec.net) ([67.91.18.194])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 15 Oct 2008 15:50:53 +0200
Received: from kuba.bertec.net (kuba.bertec.net [192.168.2.16])
	by server1.bertec.net (Postfix) with ESMTP id DB5D2105761
	for <caml-list@yquem.inria.fr>; Wed, 15 Oct 2008 09:50:52 -0400 (EDT)
From: Kuba Ober <kuba@mareimbrium.org>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: Road to native windows OCaml...
Date: Wed, 15 Oct 2008 09:50:49 -0400
User-Agent: KMail/1.9.10
References: <200810131935.53365.kuba@mareimbrium.org> <200810141737.16230.kuba@mareimbrium.org> <90823c940810142252q16764d3avcfa9a358d14a719a@mail.gmail.com>
In-Reply-To: <90823c940810142252q16764d3avcfa9a358d14a719a@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200810150950.51153.kuba@mareimbrium.org>
X-Spam: no; 0.00; ocaml:01 bytecode:01 debugger:01 descriptors:01 doable:01 unices:01 buffer:01 doable:01 ocaml:01 ocaml's:01 bytecode:01 cheers:01 instrument:98 unix:01 caml-list:01 

> > Why do we need fork? I need to look at the code...
>
> http://caml.inria.fr/pub/ml-archives/caml-list/1999/03/f44178e212e78826bcbd
>ee52ddf6fd91.en.html
>
> Concerning bytecode debugging under Windows, the major issue is the
> way our debugger performs periodic checkpointing of the running program
> (in order to implement reverse execution).  We just use the Unix fork()
> system call, which does everything we want (checkpointing of memory
> and file descriptors, using lazy copy-on-write to minimize copying).

Ah-ha, hmm, I guess I will just have to hack on some "state-preserving"
machinery for win32 world, then. That's way into the future, but should
be doable. Some things cannot be trivially preserved unless you instrument
(wrap) the relevant APIs. Example: on Unices, you can read from a network
stream, fork, and continue on reading in the child process. The parent
process can stop reading and resume at a later point: the kernel will buffer
the data as long as it can (till it runs out of memory). On Windows, this
is not doable without wrapping the relevant Winsock calls, and potentially
all other streaming interfaces that the OCaml application uses either
directly or indirectly.

The checkpointing for OCaml's debugging can perform much better than Cygwin's
fork because the bytecode interpreter controls the application startup and
can put everything (including itself) into memory pages that can be made
copy-on-write at checkpoints. The only benefit to creating separate processes
for each checkpoint is to have more virtual memory available, and to prevent a
crash from doing too much damage. Even then, enough functionality should be
easy to implement to make this feature "do what you expect it to" on Windows.

It's still some work to get it to work, but what the heck: may as well prove
to myself it's doable. That'd come after Camelia is in shape, though.

Cheers, Kuba

