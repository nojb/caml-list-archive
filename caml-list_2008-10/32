Return-Path: <jonathandeanharrop@googlemail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 66168BBAF
	for <caml-list@yquem.inria.fr>; Sat,  4 Oct 2008 03:16:22 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AokBAK9g5khC+Vqwmmdsb2JhbACBcU2QZT4BAQEBAQgLCgcRA6BLhnABAg
X-IronPort-AV: E=Sophos;i="4.33,359,1220220000"; 
   d="scan'208";a="29888402"
Received: from ik-out-1112.google.com ([66.249.90.176])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 04 Oct 2008 03:16:21 +0200
Received: by ik-out-1112.google.com with SMTP id c29so1327779ika.3
        for <caml-list@yquem.inria.fr>; Fri, 03 Oct 2008 18:16:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:organization:to:subject:date
         :user-agent:references:in-reply-to:mime-version:content-type
         :content-transfer-encoding:content-disposition:message-id:from;
        bh=7rasG984uYNDJUbIufMtTy0z1bQEjc3XC1jURgxvRIQ=;
        b=jXLNgX2Ldkt6OVHgjfyabcKlKFRa0xbzam9MOoZplvIO9yiKU8GeJpPyeqSqD90stC
         s2aBeHXRM6aUpEZToWweyFTEI5tWctcFIqDQhkDqd9fP5yWNsT8UW+spLOR3ND0H+5Qb
         HR2dp8zeI4meMTypcbosQbM38cbsxIOfQ7YCM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=organization:to:subject:date:user-agent:references:in-reply-to
         :mime-version:content-type:content-transfer-encoding
         :content-disposition:message-id:from;
        b=PFz/WhDpKOuuwm4fk2QGTaZ9Y9OhZ66mwdny1Smxz45SKrnF8UjU9TgJBzhnITLUNl
         HxBM08rI+IPXP8Ws7gCEV4tJCpjXoplzomOkaUlDcT9IhaZ37fgnaOmTXMWCi+8cmEF9
         YafDCJGMbRQZvW4WmQsXkY+D5xfussJqw5GZY=
Received: by 10.210.89.4 with SMTP id m4mr2142264ebb.195.1223082981356;
        Fri, 03 Oct 2008 18:16:21 -0700 (PDT)
Received: from leper.local (host86-139-250-145.range86-139.btcentralplus.com [86.139.250.145])
        by mx.google.com with ESMTPS id i6sm6946817gve.2.2008.10.03.18.16.20
        (version=TLSv1/SSLv3 cipher=RC4-MD5);
        Fri, 03 Oct 2008 18:16:20 -0700 (PDT)
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Metaprogramming features
Date: Sat, 4 Oct 2008 03:17:17 +0100
User-Agent: KMail/1.9.9
References: <48E62D5B.3060400@mcmaster.ca> <1223049697.6282.8.camel@Blefuscu>
In-Reply-To: <1223049697.6282.8.camel@Blefuscu>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200810040317.17868.jon@ffconsultancy.com>
From: Jon Harrop <jonathandeanharrop@googlemail.com>
X-Spam: no; 0.00; camlp:01 metaocaml:01 camlp:01 syntax:01 ocaml:01 run-time:01 metaocaml:01 haskell:01 ocaml:01 haskell:01 syntax:01 run-time:01 polymorphism:01 ffi:01 lexers:01 

On Friday 03 October 2008 17:01:36 David Teller wrote:
> I strongly agree with that feature request. One reason is all the code
> which is currently in Camlp4 but actually deserves the MetaOCaml
> treatment.

Most Camlp4 code is macros providing syntax extensions to OCaml that would not 
benefit from run-time code generation. So what Camlp4 code are you referring 
to that "deserves MetaOCaml treatment"?

> The other reason is that I believe that the Haskell vs. OCaml 
> race matters.

If you want a race, forget Haskell and look at F# which already provides typed 
metaprogramming with quotations, unsafe high-performance metaprogramming via 
CIL and the two most valuable syntax extensions (try..finally and views) as 
well as most of the key benefits of OCaml plus decent libraries and a 
concurrent run-time.

IMHO, the most productive direction for OCaml right now is towards LLVM. An 
LLVM backend to OCaml would facilitate some productive improvements (e.g. 
free polymorphism, easy run-time code generation and dynamic linking, easy 
FFI, platform independent and performant intermediate representation, extra 
optimization passes for "free"). Moreover, this path can lead to completely 
independent compilers that could then be free to expose their lexers, 
parsers, type checkers and metaprogramming capabilities without licensing 
issues.

-- 
Dr Jon Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/?e

