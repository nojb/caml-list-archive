Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA24430 for caml-redistribution; Thu, 2 Dec 1999 11:23:50 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA25541 for <caml-list@pauillac.inria.fr>; Thu, 2 Dec 1999 10:36:52 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id KAA05830;
	Thu, 2 Dec 1999 10:36:50 +0100 (MET)
Received: from localhost (riesling.inria.fr [128.93.8.51]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA18131; Thu, 2 Dec 1999 10:36:49 +0100 (MET)
To: pfitzen@informatik.uni-tuebingen.de
Cc: caml-list@inria.fr
Subject: Re: Objective Label 2.04
Reply-To: Jacques.Garrigue@inria.fr
In-Reply-To: Your message of "Tue, 30 Nov 1999 16:42:56 +0100 (MET)"
	<199911301542.QAA19049@sunray.informatik.uni-tuebingen.de>
References: <199911301542.QAA19049@sunray.informatik.uni-tuebingen.de>
X-Mailer: Mew version 1.93 on Emacs 20.4 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <19991202103649W.garrigue@pauillac.inria.fr>
Date: Thu, 02 Dec 1999 10:36:49 +0100
From: Jacques Garrigue <Jacques.Garrigue@inria.fr>
X-Dispatcher: imput version 980905(IM100)
Lines: 38
Sender: weis

From: Juergen Pfitzenmaier <pfitzen@informatik.uni-tuebingen.de>

> Jacques Garrigue wrote:
> >    * are using polymorphic methods. For technical reasons, this
> >     feature will probably not be included soon in OCaml.
> 
> Why ? Polymorphic methods are the best part of OLabl. It should'nt
> be too hard to move code from OLabl to the OCaml distribution ?

The reason is that there was a major efficiency problem in olabl
typechecking, due to these methods. It can also produce huge .cmi
files. As long as these problems are not solved, it seems difficult to
include them in the production ocaml compiler.

Also, my experience with using them is contrasted. It is certainly a
nice feature, but not so easy to use: you have to give explicitly the
type when creating a method, and you need to know the type of the
object when using it.
They are not strictly needed, in that you can almost always write a
non-polymorphic method and a polymorphic function which calls it.

For all these reasons, inclusion of polymorphic methods into the
standard ocaml compiler is postponed until a more sarisfactory
solution is found.

As an intermediate solution, I may write a patch adding polymorphic
methods to the new ocaml compiler, as an experimental feature.

By the way, I do not think that polymorphic methods are the _best_
part of olabl. As its name goes, I believe that really labels are the
nice part... But anybody may choose its pet feature.

Regards,

Jacques Garrigue
------------------------------------------------------
Jacques Garrigue, visiting INRIA from Kyoto University
		          Jacques.Garrigue at inria.fr



