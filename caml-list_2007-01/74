Return-Path: <jsnow@cs.pdx.edu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id C00CABC0A
	for <caml-list@yquem.inria.fr>; Fri, 12 Jan 2007 02:24:57 +0100 (CET)
Received: from ehlo.cat.pdx.edu (ehlo.cat.pdx.edu [131.252.208.106])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0C1Osp0031119
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@yquem.inria.fr>; Fri, 12 Jan 2007 02:24:57 +0100
Received: from [192.168.0.3] (c-24-20-143-105.hsd1.or.comcast.net [24.20.143.105])
	(authenticated bits=0)
	by ehlo.cat.pdx.edu (8.13.5/8.13.5/Debian-3ubuntu1.1) with ESMTP id l0C1Oncn032578
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 11 Jan 2007 17:24:51 -0800
Message-ID: <45A6E34A.6040007@cs.pdx.edu>
Date: Thu, 11 Jan 2007 17:24:26 -0800
From: Jim Snow <jsnow@cs.pdx.edu>
User-Agent: Thunderbird 1.5.0.9 (X11/20070103)
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Announce: glome-0.2 (ocaml-based raytracer)
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Greylist: Sender succeeded SMTP AUTH authentication, not delayed by milter-greylist-2.0.2 (ehlo.cat.pdx.edu [131.252.208.106]); Thu, 11 Jan 2007 17:24:51 -0800 (PST)
X-Virus-Scanned: ClamAV version 0.90RC1.1, clamav-milter version devel-131006 on ehlo.cat.pdx.edu
X-Virus-Status: Clean
X-Miltered: at concorde with ID 45A6E366.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; renders:01 tog:01 ocaml:01 compiler:01 triangles:01 acceleration:01 tolerate:01 lablgl:01 ocaml:01 spd:98 gpl:01 experimental:01 supported:01 primitives:01 output:02 

I've been working on a raytracer for awhile, and recently decided to 
remove a lot of experimental code that doesn't work well anyways and 
release the rest under the gpl version 2.  Currently, glome renders some 
of the scenes from the standard procedural database 
(http://www.acm.org/tog/resources/SPD/).  I thought that, aside from the 
practical utility of generating pretty pictures, some people on this 
list might be interested in using it to benchmark the quality of code 
generated by various versions of the ocaml compiler.

Supported primitives are spheres and triangles.  It uses a kd-tree as an 
acceleration structure.  There is limited joystick support (moving works 
fine, but turning can have unexpected results) for those patient enough 
to tolerate the low framerates.

I use lablgl for screen output, but there aren't any other libraries 
required outside of the standard ocaml distribution.

I'm not a very experienced ocaml programmer, so I'm sure there are some 
things I'm doing inefficiently just because I don't know better.  I 
welcome any suggestions that would make my code faster, or reduce the 
memory footprint of my scene representation.

There is a discussion thread about glome over at ompf.org: 
http://ompf.org/forum/viewtopic.php?t=336

Source code download is here: http://syn.cs.pdx.edu/~jsnow/glome/

