Return-Path: <markus.mottl@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.8 required=5.0 tests=AWL,HTML_MESSAGE,INFO_TLD,
	SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 54FF9BC0A
	for <caml-list@yquem.inria.fr>; Mon,  8 Jan 2007 22:21:47 +0100 (CET)
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.230])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l08LLklj031388
	for <caml-list@yquem.inria.fr>; Mon, 8 Jan 2007 22:21:46 +0100
Received: by wr-out-0506.google.com with SMTP id i23so2671832wra
        for <caml-list@yquem.inria.fr>; Mon, 08 Jan 2007 13:21:45 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=ZqbAzrDrBJkW8TaQLol6GE8ngZ3TlysffBV8zauIbbGRFwkd+xMSgBjeqeqHF8NiuchjrjC5qK/LpOd6qZ/ZKWj6F2sy1q4zNmfPZmEJtWEc16QdKDzR5N+j82oa0CbCzY0hS8UgmbAJGJPqj2/obEOeAAD8SULFTfClGjKMQTM=
Received: by 10.78.18.3 with SMTP id 3mr4277562hur.1168291305121;
        Mon, 08 Jan 2007 13:21:45 -0800 (PST)
Received: by 10.78.16.5 with HTTP; Mon, 8 Jan 2007 13:21:44 -0800 (PST)
Message-ID: <f8560b80701081321j62e75ae2se4d3f517c2c45944@mail.gmail.com>
Date: Mon, 8 Jan 2007 16:21:44 -0500
From: "Markus Mottl" <markus.mottl@gmail.com>
To: "Trevor Jim" <trevor@research.att.com>
Subject: Re: [Caml-list] calling ocaml from threaded C program
Cc: caml-list@yquem.inria.fr
In-Reply-To: <45A29E39.9030403@research.att.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_31042_9098342.1168291304725"
References: <45A29E39.9030403@research.att.com>
X-j-chkmail-Score: MSGID : 45A2B5EA.000 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 45A2B5EA.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; markus:01 mottl:01 markus:01 mottl:01 ocaml:01 exn:01 val:01 val:01 wosize:01 thread-safe:01 ocaml-value:01 unboxed:01 nativeint:01 variants:01 unboxed:01 

------=_Part_31042_9098342.1168291304725
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 1/8/07, Trevor Jim <trevor@research.att.com> wrote:
>
> However, I still get crashes.  I think I must be missing some locking.
> So far I have locked ObjC calls to caml_callback, caml_callback_exn,
> etc.  I have not locked certain other calls of the caml C API, e.g.,
>
>    caml_named_value()
>    caml_copy_string()
>    caml_remove_global_root()
>    caml_register_global_root()
>    Val_int()
>    Field()
>    String_val()
>    Wosize_val()


With the exception of "Val_int" none of the above is thread-safe.  Since the
GC can move values at anytime while your C-thread is executing, any
C-function that accepts or returns a "value" (= OCaml-value) is potentially
unsafe.  Val_int is an exception, because OCaml-ints are unboxed (btw.
unlike int32, int64, nativeint!).  Atomic (also atomic polymorphic) variants
and characters, too, are unboxed and can therefore be safely handled by
C-threads at any time.

Furthermore, it is safe to access the contents of bigarrays if they cannot
be reclaimed during that time (e.g. because you protected them before
releasing the OCaml-lock using CAMLparam, etc.), because their contents is
outside of the OCaml-heap.

Otherwise never access OCaml-values from a C-thread if there are running
OCaml-threads.  Here be dragons...

If anyone knows exactly what parts of the ocaml C API need to be locked
> for this scenario, it would be nice to have that in the documentation.


Yes, that would be nice indeed...

Also, I wonder whether there is any issue with having one ObjC thread
> in the ocaml runtime, while another ObjC thread accesses an object
> that is either an ocaml root or accessible from an ocaml root -- is
> any locking required?


The OCaml-GC may run at anytime and mess with the existence and position of
OCaml-values.  Thus, you cannot do what you want here without locking.

Regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com

------=_Part_31042_9098342.1168291304725
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 1/8/07, <b class="gmail_sendername">Trevor Jim</b> &lt;<a href="mailto:trevor@research.att.com" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">trevor@research.att.com</a>&gt; wrote:<div><span class="gmail_quote">
</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
However, I still get crashes.&nbsp;&nbsp;I think I must be missing some locking.<br>So far I have locked ObjC calls to caml_callback, caml_callback_exn,<br>etc.&nbsp;&nbsp;I have not locked certain other calls of the caml C API, e.g.,<br><br>

&nbsp;&nbsp; caml_named_value()<br>&nbsp;&nbsp; caml_copy_string()<br>&nbsp;&nbsp; caml_remove_global_root()<br>&nbsp;&nbsp; caml_register_global_root()<br>&nbsp;&nbsp; Val_int()<br>&nbsp;&nbsp; Field()<br>&nbsp;&nbsp; String_val()<br>&nbsp;&nbsp; Wosize_val()</blockquote><div><br>With the exception of &quot;Val_int&quot; none of the above is thread-safe.&nbsp; Since the GC can move values at anytime while your C-thread is executing, any C-function that accepts or returns a &quot;value&quot; (= OCaml-value) is potentially unsafe.&nbsp; Val_int is an exception, because OCaml-ints are unboxed (btw. unlike int32, int64, nativeint!).&nbsp; Atomic (also atomic polymorphic) variants and characters, too, are unboxed and can therefore be safely handled by C-threads at any time.
<br><br>Furthermore, it is safe to access the contents of bigarrays if they cannot be reclaimed during that time (e.g. because you protected them before releasing the OCaml-lock using CAMLparam, etc.), because their contents is outside of the OCaml-heap.
<br><br>Otherwise never access OCaml-values from a C-thread if there are running OCaml-threads.&nbsp; Here be dragons...<br></div><br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
If anyone knows exactly what parts of the ocaml C API need to be locked
<br>for this scenario, it would be nice to have that in the documentation.</blockquote><div><br>Yes, that would be nice indeed... <br></div><br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Also, I wonder whether there is any issue with having one ObjC thread<br>in the ocaml runtime, while another ObjC thread accesses an object
<br>that is either an ocaml root or accessible from an ocaml root -- is<br>any locking required?</blockquote></div><br>The OCaml-GC may run at anytime and mess with the existence and position of OCaml-values.&nbsp; Thus, you cannot do what you want here without locking.
<br><br>Regards,<br>Markus<br><br>-- <br>Markus Mottl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.ocaml.info" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">http://www.ocaml.info</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:markus.mottl@gmail.com" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">
markus.mottl@gmail.com</a>


------=_Part_31042_9098342.1168291304725--

