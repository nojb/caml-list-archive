Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id BFB94BC0B
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 06:55:28 +0100 (CET)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0H5tNdX021094
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 06:55:27 +0100
Received: from ppp27-234.lns1.syd6.internode.on.net (HELO rosella) ([59.167.27.234])
  by ipmail01.adl2.internode.on.net with ESMTP; 17 Jan 2007 16:25:15 +1030
X-IronPort-AV: i="4.13,198,1167571800"; 
   d="scan'208"; a="74975603:sNHT20155033227"
Subject: Re: [Caml-list] Polymorphic Variants
From: skaller <skaller@users.sourceforge.net>
To: "Seth J. Fogarty" <sfogarty@gmail.com>
Cc: caml-list <caml-list@yquem.inria.fr>
In-Reply-To: <c7ee61120701161323r4bd66f35sd1d7c6253431bcdd@mail.gmail.com>
References: <c1490a380701161232u7b60e286l163a4a5837d3083c@mail.gmail.com>
	 <c7ee61120701161249m39a049f2v7dc6fb2ef378785b@mail.gmail.com>
	 <c1490a380701161305w6f41bc3cxc5fbe535d089c3b@mail.gmail.com>
	 <c7ee61120701161323r4bd66f35sd1d7c6253431bcdd@mail.gmail.com>
Content-Type: text/plain
Date: Wed, 17 Jan 2007 16:55:09 +1100
Message-Id: <1169013309.8941.99.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.6.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 45ADBA4B.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; variants:01 ocaml:01 subtyping:01 ocaml:01 structurally:01 structurally:01 sourceforge:01 polymorphic:01 wrote:01 typing:01 caml-list:01 tuples:01 coercion:01 hmm:02 explicit:03 

On Tue, 2007-01-16 at 15:23 -0600, Seth J. Fogarty wrote:

> OCaml does not, as far as I know, have any structural typing for
> records.. 

Hmm .. Felix does, and it supports subtyping (by explicit coercion).
So why doesn't Ocaml have it? Yes, it would be "yet another product
type", bringing the total to 4 in Ocaml (tuples, records, structurally
typed records and classes).

Come to think of it .. aren't classes structurally typed records?


-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

