Return-Path: <Christophe.Troestler+ocaml@umh.ac.be>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0F73CBC0B
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 04:24:41 +0100 (CET)
Received: from hedwig1.umh.ac.be (hedwig2.umh.ac.be [193.190.193.73])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0H3OeS1023917
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 04:24:40 +0100
Received: from poincare.swapping.umh.ac.be (hedwig2 [193.190.193.73])
	by hedwig1.umh.ac.be (8.13.6/8.13.6) with ESMTP id l0H3Pu2c3416224;
	Wed, 17 Jan 2007 04:26:01 +0100
Received: from [127.0.0.1] (helo=localhost)
	by poincare.swapping.umh.ac.be with esmtp (Exim 4.63)
	(envelope-from <Christophe.Troestler+ocaml@umh.ac.be>)
	id 1H71Pa-0004IA-Ko; Wed, 17 Jan 2007 04:24:30 +0100
Date: Wed, 17 Jan 2007 04:24:30 +0100 (CET)
Message-Id: <20070117.042430.17384639.Christophe.Troestler@umh.ac.be>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Polymorphic Variants
From: Christophe TROESTLER <Christophe.Troestler+ocaml@umh.ac.be>
In-Reply-To: <20070117.111927.2004173151.garrigue@math.nagoya-u.ac.jp>
References: <c1490a380701161232u7b60e286l163a4a5837d3083c@mail.gmail.com>
	<20070117.111927.2004173151.garrigue@math.nagoya-u.ac.jp>
X-Face: #2fb%mPx>rRL@4ff~TVgZ"<[:,oL"`TUEGK/[8/qb58~C>jR(x4A+v/n)7BgpEtIph_neoLKJBq0JBY9:<qMr[nclFSC*8GVW;&@q*7^R?u"i{y>}8v|j
Organization: Universite de Mons-Hainaut (http://math.umh.ac.be/an/)
X-Mailer: Mew version 5.1.52 on Emacs 22.0.92 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.1 (www dot roaringpenguin dot com slash mimedefang)
X-Miltered: at concorde with ID 45AD96F8.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; variants:01 christophe:01 troestler:01 christophe:01 troestler:01 ocaml:01 umh:01 recursive:01 trivial:01 recursive:01 variants:01 reuse:01 2007,:98 polymorphic:01 polymorphic:01 

On Wed, 17 Jan 2007, Jacques GARRIGUE <garrigue@math.nagoya-u.ac.jp> wrote:
> 
> [...] I have some code using objects (visitor pattern), recursive
> modules, lazyness, and private row types, in an utterly non trivial
> way, just to do what can be done by standard recursive function
> definitions using polymorphic variants...

Sounds like a good case to see & learn the power of polymorphic
variants in action.  Are the two codes available somewhere (if
possible with some explanations ?) or are you simply referring to your
paper "Code reuse through polymorphic variants" ?

Regards,
ChriS

