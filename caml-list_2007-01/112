Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id C0132BC0B
	for <caml-list@yquem.inria.fr>; Mon, 15 Jan 2007 01:57:40 +0100 (CET)
Received: from pih-relay04.plus.net (pih-relay04.plus.net [212.159.14.131])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0F0veas020329
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Mon, 15 Jan 2007 01:57:40 +0100
Received: from [80.229.56.224] (helo=[10.0.0.5])
	 by pih-relay04.plus.net with esmtp (Exim) id 1H6GAN-0002Jt-Pt
	for caml-list@yquem.inria.fr; Mon, 15 Jan 2007 00:57:39 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Ocaml compiler features
Date: Mon, 15 Jan 2007 00:55:56 +0000
User-Agent: KMail/1.9.5
References: <45A87011.8080203@gmail.com> <200701142049.57959.jon@ffconsultancy.com> <20070115003823.7cd377c8@localhost>
In-Reply-To: <20070115003823.7cd377c8@localhost>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Message-Id: <200701150055.56886.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 45AAD184.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 compiler:01 haskell:01 overloading:01 optimise:01 ocaml:01 frog:98 wrote:01 caml-list:01 computation:01 simplify:01 lazy:02 caml:02 objective:02 sentence:04 

On Sunday 14 January 2007 23:38, Gabriel Kerneis wrote:
> Le Sun, 14 Jan 2007 20:49:57 +0000, Jon Harrop <jon@ffconsultancy.com>
> a =E9crit :
> > Playing with Haskell and F# has opened my eyes a bit. F#'s operator
> > overloading and active patterns will make my code much nicer. Being
> > lazier can simplify things until you have to optimise, in which case
> > it suddenly becomes really complicated and error prone.
>
> What do you mean exactly in this last sentence ? I agree OCaml should
> evolve but what kind of "laziness" are you referring to ?

Lazy (as opposed to eager) computation. OCaml is very eager. Using laziness=
=20
more can speed things up in some simple cases, e.g. nested maps and folds.

=2D-=20
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

