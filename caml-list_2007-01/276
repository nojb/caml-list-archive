Return-Path: <Xavier.Leroy@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 75D06BC0C
	for <caml-list@yquem.inria.fr>; Sun, 21 Jan 2007 18:25:35 +0100 (CET)
Received: from smtp3-g19.free.fr (smtp3-g19.free.fr [212.27.42.29])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0LHPZJd003717
	for <caml-list@yquem.inria.fr>; Sun, 21 Jan 2007 18:25:35 +0100
Received: from [192.168.1.2] (che78-2-82-237-71-191.fbx.proxad.net [82.237.71.191])
	by smtp3-g19.free.fr (Postfix) with ESMTP id A3E5A4A16B;
	Sun, 21 Jan 2007 18:25:34 +0100 (CET)
Message-ID: <45B3A20D.1090304@inria.fr>
Date: Sun, 21 Jan 2007 18:25:33 +0100
From: Xavier Leroy <Xavier.Leroy@inria.fr>
User-Agent: Mozilla Thunderbird 1.0.2 (X11/20050317)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Bob Matcuk <Hamartiology@squeg.net>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] va_arg values
References: <200701132310.l0DNArug026315@discorde.inria.fr>
In-Reply-To: <200701132310.l0DNArug026315@discorde.inria.fr>
X-Enigmail-Version: 0.91.0.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 45B3A20F.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; sizeof:01 hash:01 camlparam:01 ocaml:01 advocates:01 hash:01 failwith:01 camlreturn:01 pointers:01 char:01 exception:01 exception:01 caml-list:01 func:01 func:01 

> value func(value obj, char *method, int n, ...)
> {
>   va_list ap;
>   int i;
>   value *args = calloc(n + 1, sizeof(value));
>   value r;
>
>   args[0] = obj;
>   va_start(ap, n);
>   for (i = 0; i < n; i++)
>     args[i + 1] = va_arg(ap, value);
>   va_end(ap);
>
>   r = caml_callbackN(caml_get_public_method(obj, hash_variant(method)),
>                      n + 1, args);
>   free(args);
>   return r;
> }
>
> Is it an invalid assumption that it is unnecessary to bother with the
> CAMLparam/CAMLlocal stuff since there's nothing to trip the GC?

It's a valid assumption.  The hard rule is that you must register as
root all local variables that need to survive a call to the GC or to a
function that might trigger the GC.  In general it's hard to keep
track of those variables, which is why the OCaml manual advocates
registering everything that has type "value".  But in your case you
cannot, and the code fragment above look safe to me.  (Make sure you
document this in a big comment, though...)  As others pointed out,
you're also relying on the fact that caml_get_public_method
and hash_variant never trigger a GC, which is true now and in the
foreseeable future, but again a big comment is warranted.

> Should probably check calloc for success and maybe throw an exception
> if it failed... Which actually brings me to another quick question: if
> I throw an exception, say caml_failwith("..."), is it necessary to
> still call CAMLreturn after it? Or will the exception cause the
> function to exit?

The latter: the exception triggers something like a longjmp(), causing
immediate return from the C function (and de-registration of the local
roots, if any).

> One last quick question: is the line "args[i + 1] = va_arg(ap, value);"
> above legal? args[] is an array of value and va_arg(ap, value) will
> return a value. So, essentially, it's the same thing as the assignment
> in the following example:
>
> value func(value v1)
> {
>   value v2 = v1;
>   ...
> }
>
> I know values are just pointers so it is syntactically correct, but
> what I'm asking is: is it safe to do? Should I be using some function
> instead to create a copy of the value?

No copying is necessary.

Hope this helps,

- Xavier Leroy

