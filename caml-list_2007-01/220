Return-Path: <tom.primozic@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.2 required=5.0 tests=AWL,HTML_MESSAGE,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id BFA61BC0B
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 22:13:51 +0100 (CET)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.175])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l0HLDpBM010780
	for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 22:13:51 +0100
Received: by ug-out-1314.google.com with SMTP id q2so2543uge
        for <caml-list@yquem.inria.fr>; Wed, 17 Jan 2007 13:13:51 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=r7poP1hu7sUlbftMLMUK7vxhTZCZpQG9oYA5k82KhoRmBpk4XxI6aiPuElii9afhlLQ1Cheo9Uba8IzdS/xEzJNdkfLHUFB6mWlBV+4JUR9Gs/6ijE7J0IcoYGnIVhJLj03Tt7O6egPPPww8toFaaoFdcytnKoGUNWNZuhO4sZc=
Received: by 10.82.179.9 with SMTP id b9mr4776buf.1169068430445;
        Wed, 17 Jan 2007 13:13:50 -0800 (PST)
Received: by 10.82.175.13 with HTTP; Wed, 17 Jan 2007 13:13:50 -0800 (PST)
Message-ID: <c1490a380701171313j7f54a420yd17d15164e52f9ac@mail.gmail.com>
Date: Wed, 17 Jan 2007 22:13:50 +0100
From: Tom <tom.primozic@gmail.com>
To: "Jacques GARRIGUE" <garrigue@math.nagoya-u.ac.jp>
Subject: Re: [Caml-list] Polymorphic Variants
Cc: caml-list@yquem.inria.fr
In-Reply-To: <20070117.111927.2004173151.garrigue@math.nagoya-u.ac.jp>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_69582_6258525.1169068430337"
References: <c1490a380701161232u7b60e286l163a4a5837d3083c@mail.gmail.com>
	 <20070117.111927.2004173151.garrigue@math.nagoya-u.ac.jp>
X-j-chkmail-Score: MSGID : 45AE918F.000 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 45AE918F.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; variants:01 variants:01 labltk:01 overloading:01 ocaml:01 overloading:01 ocaml:01 subtyping:01 -like:01 pexp:01 pexp:01 texp:01 texp:01 subtyping:01 bool:01 
X-Attachments: cset="UTF-8" cset="UTF-8" 

------=_Part_69582_6258525.1169068430337
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 17/01/07, Jacques GARRIGUE <garrigue@math.nagoya-u.ac.jp> wrote:
>
> From: Tom <tom.primozic@gmail.com>
> > So... why actually are polymorphic variants useful? Why can't they
> simply be
> > implemented as normal, concrete (or how would you call them? ...)
> variants?
>
> The original motivation was for the LablTk library, where some types
> (index for instance) have lots of small variations. At that point
> there where several options
> * overloading (but ocaml loathes overloading, you could say that the
>   total absence of overloading is essential to the language)
>

Is there a reason for that? Is it only hard to implement or are there any
conceptual / strategical / theoretical reasons?

> OCaml does not, as far as I know, have any structural typing for
> records..

Hm... Actually, what I had in mind is nominal subtyping... similar to
objects, in fact, objects in C++-like languages, just that they have no
class methods.

Now... close your eyes (but try to continue reading this ;) ) and imagine
you're in a dreamworld. You are programming in a language that has
  * function overloading that allows you to have
       length "abcd" + length [1; 2; 3]
  * Constructor overloading, eliminating the need of
       type parse_expression =
           Pexp_name of string
         | Pexp_constant of constant
         | Pexp_let of (pattern * parse_expression) * parse_expression
         | Pexp_apply of parse_expression * parse_expression list
         | Pexp_try of parse_expression * (pattern * parse_expression) list

       type typed_expression =
           Texp_ident of ident
         | Texp_constant of constant
         | Texp_let of (pattern * typed_expression) * typed_expression
         | Texp_apply of typed_expression * typed_expression list
         | Texp_try of typed_expression * (pattern * typed_expression) list
    as it can be coded as
       type parse_expression =
           Name of string
         | Constant of constant
         | ...

       type typed_expression =
           Ident of ident
         | Constant of constant
         | ...

  * nominal subtyping of records, with overloaded field names:
       type widget = {x : float; y : float; width: float; height: float} (*
top-level type *)
       type button = {widget | text : string }
       type checkbox = {button | checked : bool}
       type image = {widget | url : string}

       type vector = {x : float; y : float}
       type document {url : url}

    so subtypes could be applied to a function
       fun move : widget -> (float * float) -> unit

       let chk = {x = 0.0; y = 0.0; width = 10.0; height = 12.0; text =
"Check me!"; checked = false}
       move chk (3.0, 3.0)
    and types could be "discovered" at runtime:
       let draw widget =
         typematch widget with
             w : widget -> draw_box (w.x, w.y, w.height, w.width)
           | b : button -> draw_box (b.x, b.y, b.height, b.width); draw_text
b.text
           | i : image -> draw_image i.url (i.x, i.y)
           | ...

Do you think you would be "satisfied" even without polymorphic variants?

I am not saying this just for fun... I want to create a language with
overloading, but I kinda don't really like polymorphic variants... thou if
they turn out to be really useful, I would probably start to like them.

Any comments?

- Tom

------=_Part_69582_6258525.1169068430337
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<br><br><div><span class="gmail_quote">On 17/01/07, <b class="gmail_sendername">Jacques GARRIGUE</b> &lt;<a href="mailto:garrigue@math.nagoya-u.ac.jp">garrigue@math.nagoya-u.ac.jp</a>&gt; wrote:</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
From: Tom &lt;<a href="mailto:tom.primozic@gmail.com">tom.primozic@gmail.com</a>&gt;<br>&gt; So... why actually are polymorphic variants useful? Why can&#39;t they simply be<br>&gt; implemented as normal, concrete (or how would you call them? ...) variants?
<br><br>The original motivation was for the LablTk library, where some types<br>(index for instance) have lots of small variations. At that point<br>there where several options<br>* overloading (but ocaml loathes overloading, you could say that the
<br>&nbsp;&nbsp;total absence of overloading is essential to the language)<br></blockquote></div><br>Is there a reason for that? Is it only hard to implement or are there any conceptual / strategical / theoretical reasons?<br><br>&gt; OCaml does not, as far as I know, have any structural typing for
<br>&gt; records..<br><br>Hm... Actually, what I had in mind is nominal subtyping... similar to objects, in fact, objects in C++-like languages, just that they have no class methods. <br><br>Now... close your eyes (but try to continue reading this ;) ) and imagine you&#39;re in a dreamworld. You are programming in a language that has
<br>&nbsp; * function overloading that allows you to have <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length &quot;abcd&quot; + length [1; 2; 3]<br>&nbsp; * Constructor overloading, eliminating the need of<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type parse_expression =<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Pexp_name of string
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Pexp_constant of constant<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; | Pexp_let of (pattern * parse_expression) * parse_expression<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | Pexp_apply of parse_expression * parse_expression list<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | Pexp_try of parse_expression * (pattern * parse_expression) list
<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type typed_expression =<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Texp_ident of ident<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Texp_constant of constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; | Texp_let of (pattern * typed_expression) * typed_expression<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | Texp_apply of typed_expression * typed_expression list<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | Texp_try of typed_expression * (pattern * typed_expression) list<br>&nbsp; &nbsp; as it can be coded as<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type parse_expression =<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Name of string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Constant of constant<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | ...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type typed_expression =<br>

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Ident of ident<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Constant of constant<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | ...<br><br>&nbsp; * nominal subtyping of records, with overloaded field names:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type widget = {x : float; y : float; width: float; height: float} (* top-level type *)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type button = {widget | text : string }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type checkbox = {button | checked : bool}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type image = {widget | url : string}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type vector = {x : float; y : float}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type document {url : url}
<br><br>&nbsp;&nbsp;&nbsp; so subtypes could be applied to a function<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fun move : widget -&gt; (float * float) -&gt; unit<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let chk = {x = 0.0; y = 0.0; width = 10.0; height = 12.0; text = &quot;Check me!&quot;; checked = false}
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move chk (3.0, 3.0)<br>&nbsp;&nbsp;&nbsp; and types could be &quot;discovered&quot; at runtime:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let draw widget =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typematch widget with<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w : widget -&gt; draw_box (w.x, w.y, w.height, w.width
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | b : button -&gt; draw_box (b.x, b.y, b.height, b.width); draw_text b.text<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | i : image -&gt; draw_image i.url (i.x, i.y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | ...<br><br>Do you think you would be &quot;satisfied&quot; even without polymorphic variants?
<br><br>I am not saying this just for fun... I want to create a language with overloading, but I kinda don&#39;t really like polymorphic variants... thou if they turn out to be really useful, I would probably start to like them. 
<br><br>Any comments?<br><br>- Tom<br>

------=_Part_69582_6258525.1169068430337--

