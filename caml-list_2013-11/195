Return-Path: <goswin-v-b@web.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 3C4B27EE6B
	for <caml-list@sympa.inria.fr>; Tue, 26 Nov 2013 10:02:50 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=pra; client-ip=212.227.15.4;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=mailfrom; client-ip=212.227.15.4;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mout.web.de) identity=helo;
  client-ip=212.227.15.4;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="postmaster@mout.web.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArYCANJilFLU4w8EnGdsb2JhbABZulmFToEpFg4BAQEBAQYNCQkUKIIlAQEFOk8LEQQBAQEJJQ8FKA0BBSGHbgEWtisfiFaOfRaDCoETA5gThi4Sjns
X-IPAS-Result: ArYCANJilFLU4w8EnGdsb2JhbABZulmFToEpFg4BAQEBAQYNCQkUKIIlAQEFOk8LEQQBAQEJJQ8FKA0BBSGHbgEWtisfiFaOfRaDCoETA5gThi4Sjns
X-IronPort-AV: E=Sophos;i="4.93,773,1378850400"; 
   d="scan'208";a="45429445"
Received: from mout.web.de ([212.227.15.4])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 26 Nov 2013 10:02:49 +0100
Received: from frosties.localnet ([37.49.32.119]) by smtp.web.de (mrweb101)
 with ESMTPSA (Nemesis) id 0Lr2dj-1V8c033cXL-00eawO for <caml-list@inria.fr>;
 Tue, 26 Nov 2013 10:02:48 +0100
Received: from mrvn by frosties.localnet with local (Exim 4.80)
	(envelope-from <goswin-v-b@web.de>)
	id 1VlEXg-0005OY-75
	for caml-list@inria.fr; Tue, 26 Nov 2013 10:02:48 +0100
Date: Tue, 26 Nov 2013 10:02:48 +0100
From: Goswin von Brederlow <goswin-v-b@web.de>
To: caml-list@inria.fr
Message-ID: <20131126090248.GA20512@frosties>
References: <CCC7876BE807C74EABED4C8FC00ADFC5F5728A@exmb-01-tyo.ad.mathworks.com>
 <20131120205611.GA15056@notk.org>
 <20131125130111.GC3610@frosties>
 <20131125135527.GA23794@notk.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20131125135527.GA23794@notk.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Provags-ID:  V03:K0:/Op4VC3oDxwBwt4lBxGenDqn/0ZEgwQs0rZnsJ0MdYe0GcQKuvk
 N3e/FNlBmb6nO3ZORPxHaWwItf/5dfE3zvr1TFif4tXmfjE61wSDwK61gvFuXbQ6DPUP7JT
 DkyzJgsyQGRuITvesArdcPxx2vJHyp9pF8o91tqPSKOnIYtALerKAoK13/l2teoH2fIFUJT
 31oIsIlLiL7q+mBHvXQFA==
Subject: Re: [Caml-list] Ocaml crash in windows due to running out of memory

On Mon, Nov 25, 2013 at 02:55:27PM +0100, Adrien Nader wrote:
> Hi,
> 
> On Mon, Nov 25, 2013, Goswin von Brederlow wrote:
> > On Wed, Nov 20, 2013 at 09:56:11PM +0100, Adrien Nader wrote:
> > > Hi,
> > > 
> > > On Wed, Nov 20, 2013, Amogh Margoor wrote:
> > > > Hi,
> > > > The Ocaml version I am facing problem with is 3.12.1.
> > > > Regards,
> > > > Amogh
> > > > 
> > > > From: Amogh Margoor
> > > > Sent: Wednesday, November 20, 2013 4:19 PM
> > > > To: 'caml-list@inria.fr'
> > > > Subject: Ocaml crash in windows due to running out of memory
> > > > 
> > > > Hi,
> > > > We have memory intensive application coded in Ocaml, which crashes on Windows 7 when it runs out of memory instead of throwing an exception.
> > > > Is that a known issue ?
> > > 
> > > What is the exception and how much memory is your application using at
> > > that moment?
> > 
> > Many kernels only allocate address space on malloc() and assign pages
> > only on use. They also support over commit of memory. Meaning
> > applications can allocate more memory than the system has under the
> > assumption that they won't actually use it all (or that maybe some
> > memory will be freed before the apps actually use the memory).
> > 
> > Due to that in many kernels malloc() basically never fails but when
> > you use the memory and the kernel can't find any page to assign to it
> > you get a segfault and your program crashes. You only get the
> > exception if the malloc() fails.
> > 
> > Now I'm not sure how windows actualy handles this but it sounds like
> > it allows over commit.
> 
> As far as I know, it doesn't do overcommit. Also, I doubt that would
> change anything: if you exhaust your address space, you cannot receive a
> pointer to some place since it would collide with some of your already
> assigned space.
> On 32b, allocations have to fail once you reach 2GB of memory (or 3GB
> depending on some settings). That said, such a scenario should probably
> trigger an exception but so far this is just an hypothesis which cannot
> be confirmed until we roughly know the memory usage.

But what if I only have 512MB ram? I can still malloc(1G), get a
pointer back and then get segfaults when I use too much of it. On
64bit systems the address space also greatly exceeds any amount of
physical ram you might have.

My reply was just an explanation of why ocaml would crash rather than
throw an out of memory exception.

MfG
	Goswin
