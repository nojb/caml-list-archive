Return-Path: <adrien@notk.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 8733C7EE6C
	for <caml-list@sympa.inria.fr>; Tue, 26 Nov 2013 10:22:51 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  adrien@notk.org) identity=pra; client-ip=91.121.71.147;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="adrien@notk.org"; x-sender="adrien@notk.org";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  adrien@notk.org designates 91.121.71.147 as permitted sender)
  identity=mailfrom; client-ip=91.121.71.147;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="adrien@notk.org"; x-sender="adrien@notk.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@nautica.notk.org) identity=helo;
  client-ip=91.121.71.147;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="adrien@notk.org";
  x-sender="postmaster@nautica.notk.org";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgMFAFRnlFJbeUeT/2dsb2JhbABZgweEBLkSCoEpFnSCJQEBBSNWEAsRBAEBAQICBRMOAgIPBRgdAQUOE4gFrgKREheBKY1NB4JrNYETA5gTAZIRgyk7
X-IPAS-Result: AgMFAFRnlFJbeUeT/2dsb2JhbABZgweEBLkSCoEpFnSCJQEBBSNWEAsRBAEBAQICBRMOAgIPBRgdAQUOE4gFrgKREheBKY1NB4JrNYETA5gTAZIRgyk7
X-IronPort-AV: E=Sophos;i="4.93,773,1378850400"; 
   d="scan'208";a="45434947"
Received: from nautica.notk.org ([91.121.71.147])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 26 Nov 2013 10:22:51 +0100
Received: by nautica.notk.org (Postfix, from userid 1003)
	id 0E1D2C009; Tue, 26 Nov 2013 10:22:50 +0100 (CET)
Date: Tue, 26 Nov 2013 10:22:50 +0100
From: Adrien Nader <adrien@notk.org>
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml-list@inria.fr
Message-ID: <20131126092250.GA904@notk.org>
References: <CCC7876BE807C74EABED4C8FC00ADFC5F5728A@exmb-01-tyo.ad.mathworks.com>
 <20131120205611.GA15056@notk.org>
 <20131125130111.GC3610@frosties>
 <20131125135527.GA23794@notk.org>
 <20131126090248.GA20512@frosties>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20131126090248.GA20512@frosties>
User-Agent: Mutt/1.5.20 (2009-06-14)
Subject: Re: [Caml-list] Ocaml crash in windows due to running out of memory

On Tue, Nov 26, 2013, Goswin von Brederlow wrote:
> On Mon, Nov 25, 2013 at 02:55:27PM +0100, Adrien Nader wrote:
> > Hi,
> > 
> > On Mon, Nov 25, 2013, Goswin von Brederlow wrote:
> > > On Wed, Nov 20, 2013 at 09:56:11PM +0100, Adrien Nader wrote:
> > > > Hi,
> > > > 
> > > > On Wed, Nov 20, 2013, Amogh Margoor wrote:
> > > > > Hi,
> > > > > The Ocaml version I am facing problem with is 3.12.1.
> > > > > Regards,
> > > > > Amogh
> > > > > 
> > > > > From: Amogh Margoor
> > > > > Sent: Wednesday, November 20, 2013 4:19 PM
> > > > > To: 'caml-list@inria.fr'
> > > > > Subject: Ocaml crash in windows due to running out of memory
> > > > > 
> > > > > Hi,
> > > > > We have memory intensive application coded in Ocaml, which crashes on Windows 7 when it runs out of memory instead of throwing an exception.
> > > > > Is that a known issue ?
> > > > 
> > > > What is the exception and how much memory is your application using at
> > > > that moment?
> > > 
> > > Many kernels only allocate address space on malloc() and assign pages
> > > only on use. They also support over commit of memory. Meaning
> > > applications can allocate more memory than the system has under the
> > > assumption that they won't actually use it all (or that maybe some
> > > memory will be freed before the apps actually use the memory).
> > > 
> > > Due to that in many kernels malloc() basically never fails but when
> > > you use the memory and the kernel can't find any page to assign to it
> > > you get a segfault and your program crashes. You only get the
> > > exception if the malloc() fails.
> > > 
> > > Now I'm not sure how windows actualy handles this but it sounds like
> > > it allows over commit.
> > 
> > As far as I know, it doesn't do overcommit. Also, I doubt that would
> > change anything: if you exhaust your address space, you cannot receive a
> > pointer to some place since it would collide with some of your already
> > assigned space.
> > On 32b, allocations have to fail once you reach 2GB of memory (or 3GB
> > depending on some settings). That said, such a scenario should probably
> > trigger an exception but so far this is just an hypothesis which cannot
> > be confirmed until we roughly know the memory usage.
> 
> But what if I only have 512MB ram? I can still malloc(1G), get a
> pointer back and then get segfaults when I use too much of it. On
> 64bit systems the address space also greatly exceeds any amount of
> physical ram you might have.
> 
> My reply was just an explanation of why ocaml would crash rather than
> throw an out of memory exception.

OK.

However as far as I know and as far as I can read right now, Windows
doesn't do overcommit. Actually I'm seeing that VMWare implements its
own kind of memory overcommit to save memory on the hosts.

If you don't have enough memory, Windows (in its default configuration)
will expand its swap files. I believe that on Windows 7 the outdated
rule of swap = 2.5*RAM is still used so even with only 512MB of memory
(which is something you'll have trouble finding on Windows 7 machines)
you already get almost 2GB; and since Windows will happily expand swap
to let your machine crawl more by using more swap, I'm sure you can
almost always have 2GB usable for one process.

Another efficient way to fill up 2GB of address space is mmap() or
WindowsEquivalentEx() which are accessible through Bigarray.

In any case, it's all speculation until we get an idea of how much
memory is used by the application which crashes.

-- 
Adrien Nader
