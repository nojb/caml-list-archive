Return-Path: <jp.deplaix@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id BEADD7EE25
	for <caml-list@sympa.inria.fr>; Tue, 19 Nov 2013 12:06:04 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jp.deplaix@gmail.com) identity=pra; client-ip=209.85.215.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jp.deplaix@gmail.com";
  x-sender="jp.deplaix@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  jp.deplaix@gmail.com designates 209.85.215.172 as permitted
  sender) identity=mailfrom; client-ip=209.85.215.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jp.deplaix@gmail.com";
  x-sender="jp.deplaix@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ea0-f172.google.com) identity=helo;
  client-ip=209.85.215.172;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jp.deplaix@gmail.com";
  x-sender="postmaster@mail-ea0-f172.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjACAC9Fi1LRVdesm2dsb2JhbABZw1GBHhYOAQEBAQEGCwsJFCiCJQEBBUABGxwCAwwGBQsNCRYPCQMCAQIBEREBBQEcEwgBAYdqAQMPBAGkD4xXgwmEMwoZJw1kiFURAQUMj1IWhBwDmBKGP4liQYRU
X-IPAS-Result: AjACAC9Fi1LRVdesm2dsb2JhbABZw1GBHhYOAQEBAQEGCwsJFCiCJQEBBUABGxwCAwwGBQsNCRYPCQMCAQIBEREBBQEcEwgBAYdqAQMPBAGkD4xXgwmEMwoZJw1kiFURAQUMj1IWhBwDmBKGP4liQYRU
X-IronPort-AV: E=Sophos;i="4.93,728,1378850400"; 
   d="scan'208";a="43753506"
Received: from mail-ea0-f172.google.com ([209.85.215.172])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 19 Nov 2013 12:06:04 +0100
Received: by mail-ea0-f172.google.com with SMTP id q10so831030ead.17
        for <caml-list@inria.fr>; Tue, 19 Nov 2013 03:06:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:subject:references
         :in-reply-to:content-type:content-transfer-encoding;
        bh=RVU5Db889HwYmpDdNa7c1+Oxa4CZjV2kspDzfD+ttns=;
        b=qYdbx3HM1sArcn/I+5CWiEZjgRbx4DT2xqs+ni263P3Jhas8b6oOnfIep7gNCSTSAT
         KLrrlGmyoHeSWP81l2nmeGC5uL/BsEJ9SYMBLBlJjzuOmC4IX4PdCnB8muTsW2QI6Dj5
         CFCwb6sC3K/DR20Goc8e4AWdyICBW/cnP//iKNGX4qXRoFqnALnzdoNV52cj8R6xZPbs
         gefBsee69m+mf3NLGDn7BytLRe+Jhh83h3tYjhMm3ew0ndmsFBboS2Zg2IouoguwfszH
         E22fP1gyNXpwY72euBXlkF4H3zaE17sTEM+JnBJ17CabV2r7MGdlLMgvTklLsuQ8HXwO
         pxpw==
X-Received: by 10.14.3.130 with SMTP id 2mr27936270eeh.36.1384859163996;
        Tue, 19 Nov 2013 03:06:03 -0800 (PST)
Received: from [192.168.1.30] (AMontsouris-652-1-7-170.w92-163.abo.wanadoo.fr. [92.163.30.170])
        by mx.google.com with ESMTPSA id g8sm47556450eep.20.2013.11.19.03.06.02
        for <caml-list@inria.fr>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Tue, 19 Nov 2013 03:06:03 -0800 (PST)
Message-ID: <528B463A.5080303@gmail.com>
Date: Tue, 19 Nov 2013 12:06:34 +0100
From: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:24.0) Gecko/20100101 Thunderbird/24.1.0
MIME-Version: 1.0
To: caml-list@inria.fr
References: <8738mthu88.fsf@golf.niidar.ru>
In-Reply-To: <8738mthu88.fsf@golf.niidar.ru>
X-Enigmail-Version: 1.6
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Subject: Re: [Caml-list] lwt exceptions and infinite loops

Where did you find the operator (>>) ? Your function loop doesn't
terminate because (>>) evaluates both arguments.

On 11/19/2013 05:48 AM, Ivan Gotovchits wrote:
> consider the following simple example:
>
>   open Lwt
>   let rec loop () = Lwt_unix.sleep 1. >> loop ()
>   let bad () = Lwt_unix.sleep 1. >> fail Not_found
>   let () = Lwt_main.run (join [loop (); bad ()])
>
>
> This program never terminates with an exception as I expect.
>
> Can someone clarify to me what really happens underneath the hood?
>
> Thanks in advance!
>
>

