Return-Path: <francois.pottier@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 4EA8FE0128
	for <caml-list@sympa.inria.fr>; Tue, 30 Aug 2022 17:47:41 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=inria.fr; s=dc;
  h=subject:to:cc:references:from:message-id:date:
   mime-version:in-reply-to:content-transfer-encoding;
  bh=UPvYj6mndsxxvzSEjUFlfjEbowv1/aTrKBmwYauXzWo=;
  b=ds3lCxLHi5/CaFHCbiKM9p4tmLc2Wl71QUipIov3DFeE8rDhhh5Js5wZ
   xB+Zc36gcbbqBLHjC2b3w5vMG7ORybsH40L99mLNb1/FGf6bcFF35diam
   FvZBE2bINE6MfBmD2GfO5DwkAkKAhRJKF9A5hEYAP0y1QLl0kR2sMoYgu
   Y=;
Authentication-Results: mail3-relais-sop.national.inria.fr; dkim=none (message not signed) header.i=none; spf=SoftFail smtp.mailfrom=francois.pottier@inria.fr; dmarc=fail (p=none dis=none) d=inria.fr
X-IronPort-AV: E=Sophos;i="5.93,275,1654552800"; 
   d="scan'208";a="22440415"
Received: from dt-64014.paris.inria.fr ([128.93.64.14])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 30 Aug 2022 17:47:41 +0200
To: Aaron Gray <aaronngray.lists@gmail.com>
Cc: OCaML Mailing List <caml-list@inria.fr>
References: <CANkmNDf-VLO+1jW1uVCYcP0bh9HaWD-7_5PRD4dVt-SAr356kg@mail.gmail.com>
 <25e68e2c-04d2-7764-e189-00812c08a34a@inria.fr>
 <CANkmNDeFiieWNq0WEh0p52E61qHUJ2_BMH8int67uif+RrRAQw@mail.gmail.com>
From: =?UTF-8?Q?Fran=c3=a7ois_Pottier?= <francois.pottier@inria.fr>
Message-ID: <8078ad33-f220-b233-4863-06ce30cc8cff@inria.fr>
Date: Tue, 30 Aug 2022 17:47:40 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101
 Thunderbird/68.7.0
MIME-Version: 1.0
In-Reply-To: <CANkmNDeFiieWNq0WEh0p52E61qHUJ2_BMH8int67uif+RrRAQw@mail.gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Subject: Re: [Caml-list] coinductive data types


Hi,

On 30/08/2022 14:37, Aaron Gray wrote:
 > My original path of inquiry which I should have actually stated was
 > regarding how to go about implementing subtyping of mutually recursive
 > algebraic data types.

Do you mean implementing an algorithm that decides whether two types are
related by subtyping, in the presence of mutually recursive algebraic
data types?

I guess the answer depends on exactly how the subtying relation is defined.
E.g., if "α foo" and "β bar" are (parameterized) algebraic data types, does
the subtyping relation "α foo ≤ β bar" necessarily imply that "foo" and 
"bar"
are the same algebraic data type?

- If the answer is positive, then the problem boils down to deciding
   "α ≤ β" or "β ≤ α" or neither or both, depending on whether this
   algebraic data type is covariant or contravariant or neither or both.
   In that case, you are working with "isorecursive" types,
   also known as "nominal" types.

- If the answer is negative, then (I imagine) you wish to unfold the
   definitions of "foo" and "bar" and decide whether the two unfoldings
   are related by subtyping.
   In that case, you are working with "equirecursive" types,
   also known as "structural" types.

Brandt and Henglein ("Coinductive axiomatization of recursive type equality
and subtyping", 1998) study the second problem, if I remember correctly.

 > Does OCaML use/handle subtyping of mutually recursive algebraic data
 > types ? And if so, is its implementation easily accessible ?

OCaml has explicit subtyping coercions: a user can write `(e : t1 :> t2)`
and the compiler will check that `t1` is a subtype of `t2`.

As far as algebraic data types are concerned, OCaml's notion of subtyping is
nominal, I believe. An algebraic data type can be decorated with variance
annotations, so, for instance, "list" can be declared covariant and "α list"
is considered a subtype of "β list" if α is a subtype of β. However, "α 
list"
can never be considered a subtype of an algebraic data type other than 
"list".

The variance annotations provided by the programmer are checked when an
algebraic data type is defined, and are later used when deciding whether a
subtyping relation holds.

Some more information here:

   https://blog.janestreet.com/a-and-a/
   https://v2.ocaml.org/manual/expr.html#ss%3Aexpr-coercions

--
François Pottier
Francois.Pottier@inria.fr
http://cambium.inria.fr/~fpottier/
