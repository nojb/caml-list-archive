Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id B40F3E0128
	for <caml-list@sympa.inria.fr>; Wed, 31 Aug 2022 03:21:29 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=garrigue@math.nagoya-u.ac.jp; spf=None smtp.mailfrom=garrigue@math.nagoya-u.ac.jp; spf=None smtp.helo=postmaster@ms.math.nagoya-u.ac.jp
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=pra;
  client-ip=133.6.130.11;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=mailfrom;
  client-ip=133.6.130.11;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@ms.math.nagoya-u.ac.jp) identity=helo;
  client-ip=133.6.130.11;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="postmaster@ms.math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
IronPort-SDR: KBeniEQES8XQDPoIzHmPoAsI8+piqHohEKtvLp2LgF2F14oBiznM6i3ZkaASzuXQxHhn1NfO36
 QLpLbMP1bMQPQDloy3RGZ2Igj133jihO/Z2/4sHGaKNZAj5ulCKcKeIO5Epw7y/3e8lO87D31E
 qRJO8/z0ldsZv355E4ewUit7nEVpzLGSTlAiWByMz+Ys7QayzJgwkh0YACzbkrrVCgEKANLPUK
 Dr8rQNtSCgHIIxqtfkVKJHhLxvThu4PPSGCDVGzKBePCJUKeZHilVyfJmiSov4EmbWY0Ztw0IL
 AYssJ3sJ+9xJpHnBtY90b9jQ
X-IPAS-Result: =?us-ascii?q?A0BWAQD1tg5jlwuCBoVaFgcBAQEBCQESAQUFAYIPgSGBA?=
 =?us-ascii?q?4EBVysDBAtFhE6IfogPA4skk1YFAgkBAwENLAEGDQIEAQGCE4J0AoRlHgYGN?=
 =?us-ascii?q?BMBAgQBAQEBAwIDAQEBAQEBAwEBBQEBAQIBAQIEBAETAQEBAQEBAQE2BRBOZ?=
 =?us-ascii?q?GiBT4F6BgQwDYI1KQGDYwEBAQECAQEiBBkBATcBBAsJAgwMHAQBBgMCAiEHH?=
 =?us-ascii?q?hEGE4J9AYJtAw0lAhGNDJscen8ygQGCCAEBBoJggjkNKyZOgSQJgT2GewMbU?=
 =?us-ascii?q?VIBgTiGH0OCDYE8HIJnPoIgQgECgTZWgyk3gi6EGpMTBzcDCQQHBSweQgMLH?=
 =?us-ascii?q?w4WNRwDFAMFGAwHAxkPIw0NBBYHDAMDBSUDAgIbBwICAwIGFQUCAjUYOQgEC?=
 =?us-ascii?q?AQrGwkPBQIHLwUELwIeBAUGEQgCFgIGBAQEBBUCEAgCCCYXBxMzGQEFWRAJI?=
 =?us-ascii?q?RwOGg0FBhMDIG0FBz4PKDM1OSsdGwqBEiooFQMEBAMCBhMDAyACECwxAxQGK?=
 =?us-ascii?q?RMSLQcrdQkCAyJoBQMDBCgsAwk+BygmPAUFWToBBAMDECI9BgMJAwInX36UV?=
 =?us-ascii?q?4FBghCBMQYBAU9CB3aORQeEOREFkDKLOZIuboNchAcdhSk8gSKNA4F0hgQEL?=
 =?us-ascii?q?oN2gVCLAJgwHZZqjTmDY5EHLz4BhE81gRkqI4FbTTg7KgGCPAk1EAECAQIBD?=
 =?us-ascii?q?AECAgECAQIBAgEIAQECAY4cGYUXgUiCDoVZMjQCOQIGAQoBAQMJhUaCRIJIA?=
 =?us-ascii?q?QE?=
IronPort-PHdr: A9a23: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
 C7bst4opViplfiGjychWREIqC4Z3Oq2
IronPort-Data: A9a23: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
IronPort-HdrOrdr: A9a23:pjDAdKHB+bz04B+MpLqExceALOsnbusQ8zAXPo5KOH5om62j+P
 xG+c5w6faaslYssR0b9OxofZPwIk80i6QY3WBhB9mftWDd0QPCEGgh1/qH/9SKIUzDH4BmpM
 JdmycSMqyXMbEDt7ec3OChKadb/DCYytHSuQ4A9QYVcem6A5sQlztENg==
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-AV: E=Sophos;i="5.93,276,1654552800"; 
   d="scan'208,217";a="50606243"
X-MGA-submission: =?us-ascii?q?MDFeqlOqlkGSbla8EDC9Uz/QR4eJas6GnlaSN7?=
 =?us-ascii?q?zdAtZMzCMzxk9jwHtDcmtXh08MdY6e0Pqtsb6+uS1Bs7psFx5miyTxTh?=
 =?us-ascii?q?OLAXXvxw1RfTyKiNCiBcGRl1goBlzs1l/0GI3HRWwu+8+MTpr/QRWzv9?=
 =?us-ascii?q?MTK5ccAs2OBvzMcAztdjuoFA=3D=3D?=
Received: from bsd20.math.nagoya-u.ac.jp (HELO ms.math.nagoya-u.ac.jp) ([133.6.130.11])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 31 Aug 2022 03:21:25 +0200
Received: from smtpclient.apple (unknown [210.137.33.122])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ms.math.nagoya-u.ac.jp (Postfix) with ESMTPSA id 4306015EC016;
	Wed, 31 Aug 2022 10:21:21 +0900 (JST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=math.nagoya-u.ac.jp;
	s=20160220; t=1661908881;
	bh=ySyeyagEkmrREI/bCNgaP2hVZtt4Rze+dFj2IXwUkfc=;
	h=From:Subject:Date:In-Reply-To:Cc:To:References;
	b=Y9cbz6aSNxIwORk0tBxNdPybPQBXAxuSOYx4FPSz1bjB2Xf9T1FpTFVvbL+thxuRW
	 wC1uQdZWBkLpUKJHDofs6G7vfwZiCSAekNBv/JUE3oix9cdFfipoIqd+ZaQkqCmjmn
	 IWZbPIr4hyTskzvtK5fGklbIoAM0XS+9/DTFlVFQ=
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Message-Id: <1C6AD961-EBAA-4DB8-89C6-D89536366411@math.nagoya-u.ac.jp>
Content-Type: multipart/alternative;
	boundary="Apple-Mail=_3123FD76-AE42-495E-87F5-55005DC02A4D"
Mime-Version: 1.0 (Mac OS X Mail 16.0 \(3696.120.41.1.1\))
Date: Wed, 31 Aug 2022 10:21:20 +0900
In-Reply-To: <CANkmNDcx3axisT9An_+v=BNZDUV1WT-z7pCdsdRPSq_kuUsSgw@mail.gmail.com>
Cc: Mailing List OCaml <caml-list@inria.fr>
To: Aaron Gray <aaronngray.lists@gmail.com>
References: <CANkmNDf-VLO+1jW1uVCYcP0bh9HaWD-7_5PRD4dVt-SAr356kg@mail.gmail.com>
 <25e68e2c-04d2-7764-e189-00812c08a34a@inria.fr>
 <CAH=h3gEXUjgt=yxXoAmVAR03aTwH5BATZw-0YLcaT2_G1JW9Ug@mail.gmail.com>
 <CANkmNDcx3axisT9An_+v=BNZDUV1WT-z7pCdsdRPSq_kuUsSgw@mail.gmail.com>
X-Mailer: Apple Mail (2.3696.120.41.1.1)
X-Greylist: Sender succeeded SMTP AUTH, not delayed by milter-greylist-4.6.2 (ms.math.nagoya-u.ac.jp [0.0.0.0]); Wed, 31 Aug 2022 10:21:21 +0900 (JST)
X-Virus-Scanned: clamav-milter 0.99.2 at bsdserver20
X-Virus-Status: Clean
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on
	bsdserver20.math.nagoya-u.ac.jp
Subject: Re: [Caml-list] coinductive data types


--Apple-Mail=_3123FD76-AE42-495E-87F5-55005DC02A4D
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Hello Aaron,

If you are interested in the subtyping already available inside OCaml,
it provides width subtyping for both objects and polymorphic variants.
Polymorphic variants are algebraic datatypes, but their equality is
structural rather than nominal, and they are limited to regular type
definitions.

For instance, the following subtyping on two variants of potentially =
infinite
streams is available:

type 'a seq =3D 'a seqc lazy_t and 'a seqc =3D [`Nil | `Cons of 'a * 'a =
seq]
type 'a aseq =3D 'a aseqc lazy_t
 and 'a aseqc =3D ['a seqc | `App of 'a aseq * 'a aseq]
let sub x =3D (x : 'a seq :> 'a aseq)
(* val sub : 'a seq -> 'a aseq *)

Jacques Garrigue

> 2022/08/30 21:33=E3=80=81Aaron Gray <aaronngray.lists@gmail.com =
<mailto:aaronngray.lists@gmail.com>>=E3=81=AE=E3=83=A1=E3=83=BC=E3=83=AB:
>=20
> On Tue, 30 Aug 2022 at 12:12, Xavier Leroy
> <xavier.leroy@college-de-france.fr =
<mailto:xavier.leroy@college-de-france.fr>> wrote:
>>=20
>> On Tue, Aug 30, 2022 at 9:24 AM Fran=C3=A7ois Pottier =
<francois.pottier@inria.fr <mailto:francois.pottier@inria.fr>> wrote:
>>>=20
>>>=20
>>> Hello,
>>>=20
>>> Le 29/08/2022 =C3=A0 17:43, Aaron Gray a =C3=A9crit :
>>>> Does either ML or OCaML have coinductive data types ? And if so =
could
>>>> you please point me at the/some appropriate documentation on them.
>>>=20
>>> ML and OCaml have algebraic data types, which are recursive (that =
is,
>>> more general than inductive and co-inductive types). Algebraic data
>>> type definitions are not subject to a positivity restriction, and
>>> algebraic data types can be constructed and deconstructed by =
recursive
>>> functions, which are not subject to a termination check.
>=20
> Hello Xavier,
>=20
> Thanks for putting me straight on that.
>=20
> My original path of inquiry which I should have actually stated was
> regarding how to go about implementing subtyping of mutually recursive
> algebraic data types.
>=20
> I am looking on how to go about this and using coinduction and
> bisimulation seemed like the best fit or correct way to go about this.
>=20
> Does OCaML use/handle subtyping of mutually recursive algebraic data
> types ? And if so, is its implementation easily accessible ?
>=20
>>> If you want to see a typical example of a "co-inductive" data =
structure
>>> encoded in OCaml, I suggest to have a look at "sequences", which can =
be
>>> described as potentially infinite lists:
>>>=20
>>>   https://v2.ocaml.org/api/Seq.html =
<https://v2.ocaml.org/api/Seq.html>
>>>=20
>> Lazy evaluation (type Lazy.t) can also be used to define coinductive =
data structures.
>>=20
>> For concreteness, here are two definitions of the type of streams =
(infinite lists) :
>>=20
>> type 'a stream =3D unit -> 'a streamcell and 'a streamcell =3D { =
head: 'a; tail: 'a stream }
>> type 'a stream =3D 'a streamcell Lazy.t and 'a streamcell =3D { head: =
'a; tail: 'a stream }
>>=20
>> and of the stream of integers starting from n :
>>=20
>> let rec ints n =3D fun () -> { head =3D n; tail =3D ints (n + 1) }
>> let rec ints n =3D lazy { head =3D n; tail =3D ints (n + 1) }
>=20
> Thank you, yes I am familiar with this type of usage.
>=20
> Regards,
>=20
> Aaron
>=20
>>>=20
>>=20
>> Hope this helps,
>>=20
>> - Xavier Leroy
>>=20
>>=20
>>>=20
>>> --
>>> Fran=C3=A7ois Pottier
>>> francois.pottier@inria.fr <mailto:francois.pottier@inria.fr>
>>> http://cambium.inria.fr/~fpottier/
>=20
>=20
>=20
> --=20
> Aaron Gray
>=20
> Independent Open Source Software Engineer, Computer Language
> Researcher, Information Theorist, and amateur computer scientist.


--Apple-Mail=_3123FD76-AE42-495E-87F5-55005DC02A4D
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dutf-8"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; line-break: after-white-space;" class=3D""><meta=
 http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8" =
class=3D""><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: =
space; line-break: after-white-space;" class=3D"">Hello Aaron,<div =
class=3D""><br class=3D""></div><div class=3D"">If you are interested in =
the subtyping already available inside OCaml,</div><div class=3D"">it =
provides width subtyping for both objects and polymorphic =
variants.</div><div class=3D"">Polymorphic variants are algebraic =
datatypes, but their equality is</div><div class=3D"">structural rather =
than nominal, and they are limited to regular type</div><div =
class=3D"">definitions.</div><div class=3D""><br class=3D""></div><div =
class=3D"">For instance, the following subtyping on two variants of =
potentially infinite</div><div class=3D"">streams is =
available:</div><div class=3D""><br class=3D""></div><div class=3D""><div =
class=3D"">type 'a seq =3D 'a seqc lazy_t and 'a seqc =3D [`Nil | `Cons =
of 'a * 'a seq]</div><div class=3D"">type 'a aseq =3D 'a aseqc =
lazy_t</div><div class=3D"">&nbsp;and 'a aseqc =3D ['a seqc | `App of 'a =
aseq * 'a aseq]</div><div class=3D"">let sub x =3D (x : 'a seq :&gt; 'a =
aseq)</div><div class=3D"">(* val sub : 'a seq -&gt; 'a aseq =
*)</div><div class=3D""><br class=3D""></div><div class=3D"">Jacques =
Garrigue</div><div class=3D""><br class=3D""><blockquote type=3D"cite" =
class=3D""><div class=3D"">2022/08/30 21:33=E3=80=81Aaron Gray &lt;<a =
href=3D"mailto:aaronngray.lists@gmail.com" =
class=3D"">aaronngray.lists@gmail.com</a>&gt;=E3=81=AE=E3=83=A1=E3=83=BC=E3=
=83=AB:</div><br class=3D"Apple-interchange-newline"><div class=3D""><meta=
 charset=3D"UTF-8" class=3D""><span style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">On Tue, 30 Aug 2022 at 12:12, Xavier Leroy</span><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">&lt;</span><a =
href=3D"mailto:xavier.leroy@college-de-france.fr" style=3D"font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; orphans: auto; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; =
-webkit-text-stroke-width: 0px;" =
class=3D"">xavier.leroy@college-de-france.fr</a><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">&gt; wrote:</span><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" =
class=3D""><blockquote type=3D"cite" style=3D"font-family: Helvetica; =
font-size: 13px; font-style: normal; font-variant-caps: normal; =
font-weight: 400; letter-spacing: normal; orphans: auto; text-align: =
start; text-indent: 0px; text-transform: none; white-space: normal; =
widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><br =
class=3D"">On Tue, Aug 30, 2022 at 9:24 AM Fran=C3=A7ois Pottier &lt;<a =
href=3D"mailto:francois.pottier@inria.fr" =
class=3D"">francois.pottier@inria.fr</a>&gt; wrote:<br =
class=3D""><blockquote type=3D"cite" class=3D""><br class=3D""><br =
class=3D"">Hello,<br class=3D""><br class=3D"">Le 29/08/2022 =C3=A0 =
17:43, Aaron Gray a =C3=A9crit :<br class=3D""><blockquote type=3D"cite" =
class=3D"">Does either ML or OCaML have coinductive data types ? And if =
so could<br class=3D"">you please point me at the/some appropriate =
documentation on them.<br class=3D""></blockquote><br class=3D"">ML and =
OCaml have algebraic data types, which are recursive (that is,<br =
class=3D"">more general than inductive and co-inductive types). =
Algebraic data<br class=3D"">type definitions are not subject to a =
positivity restriction, and<br class=3D"">algebraic data types can be =
constructed and deconstructed by recursive<br class=3D"">functions, =
which are not subject to a termination check.<br =
class=3D""></blockquote></blockquote><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Hello Xavier,</span><br style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Thanks for putting me straight on that.</span><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">My original path of inquiry =
which I should have actually stated was</span><br style=3D"caret-color: =
rgb(0, 0, 0); font-family: Helvetica; font-size: 13px; font-style: =
normal; font-variant-caps: normal; font-weight: 400; letter-spacing: =
normal; text-align: start; text-indent: 0px; text-transform: none; =
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">regarding how to go about implementing subtyping of mutually =
recursive</span><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><span style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none; float: none; display: inline !important;" class=3D"">algebraic =
data types.</span><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><span style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none; float: none; display: inline !important;" class=3D"">I am looking =
on how to go about this and using coinduction and</span><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">bisimulation seemed like the =
best fit or correct way to go about this.</span><br style=3D"caret-color: =
rgb(0, 0, 0); font-family: Helvetica; font-size: 13px; font-style: =
normal; font-variant-caps: normal; font-weight: 400; letter-spacing: =
normal; text-align: start; text-indent: 0px; text-transform: none; =
white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Does OCaML use/handle subtyping of mutually recursive =
algebraic data</span><br style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">types ? And if so, is its implementation easily accessible =
?</span><br style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; =
font-size: 13px; font-style: normal; font-variant-caps: normal; =
font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><blockquote type=3D"cite" style=3D"font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; orphans: auto; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; =
-webkit-text-stroke-width: 0px; text-decoration: none;" =
class=3D""><blockquote type=3D"cite" class=3D"">If you want to see a =
typical example of a "co-inductive" data structure<br class=3D"">encoded =
in OCaml, I suggest to have a look at "sequences", which can be<br =
class=3D"">described as potentially infinite lists:<br class=3D""><br =
class=3D"">&nbsp;&nbsp;<a href=3D"https://v2.ocaml.org/api/Seq.html" =
class=3D"">https://v2.ocaml.org/api/Seq.html</a><br class=3D""><br =
class=3D""></blockquote>Lazy evaluation (type Lazy.t) can also be used =
to define coinductive data structures.<br class=3D""><br class=3D"">For =
concreteness, here are two definitions of the type of streams (infinite =
lists) :<br class=3D""><br class=3D"">type 'a stream =3D unit -&gt; 'a =
streamcell and 'a streamcell =3D { head: 'a; tail: 'a stream }<br =
class=3D"">type 'a stream =3D 'a streamcell Lazy.t and 'a streamcell =3D =
{ head: 'a; tail: 'a stream }<br class=3D""><br class=3D"">and of the =
stream of integers starting from n :<br class=3D""><br class=3D"">let =
rec ints n =3D fun () -&gt; { head =3D n; tail =3D ints (n + 1) }<br =
class=3D"">let rec ints n =3D lazy { head =3D n; tail =3D ints (n + 1) =
}<br class=3D""></blockquote><br style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Thank you, yes I am familiar with this type of =
usage.</span><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><br style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><span style=3D"caret-color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 13px; font-style: normal; font-variant-caps: =
normal; font-weight: 400; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none; float: none; display: inline !important;" =
class=3D"">Regards,</span><br style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Aaron</span><br style=3D"caret-color: rgb(0, 0, 0); =
font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><blockquote type=3D"cite" =
style=3D"font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
orphans: auto; text-align: start; text-indent: 0px; text-transform: =
none; white-space: normal; widows: auto; word-spacing: 0px; =
-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><blockquote type=3D"cite" =
class=3D""><br class=3D""></blockquote><br class=3D"">Hope this =
helps,<br class=3D""><br class=3D"">- Xavier Leroy<br class=3D""><br =
class=3D""><br class=3D""><blockquote type=3D"cite" class=3D""><br =
class=3D"">--<br class=3D"">Fran=C3=A7ois Pottier<br class=3D""><a =
href=3D"mailto:francois.pottier@inria.fr" =
class=3D"">francois.pottier@inria.fr</a><br class=3D""><a =
href=3D"http://cambium.inria.fr/~fpottier/" =
class=3D"">http://cambium.inria.fr/~fpottier/</a><br =
class=3D""></blockquote></blockquote><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">--<span class=3D"Apple-converted-space">&nbsp;</span></span><br=
 style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">Aaron Gray</span><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><br =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none;" class=3D""><span =
style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; font-size: =
13px; font-style: normal; font-variant-caps: normal; font-weight: 400; =
letter-spacing: normal; text-align: start; text-indent: 0px; =
text-transform: none; white-space: normal; word-spacing: 0px; =
-webkit-text-stroke-width: 0px; text-decoration: none; float: none; =
display: inline !important;" class=3D"">Independent Open Source Software =
Engineer, Computer Language</span><br style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none;" class=3D""><span style=3D"caret-color: rgb(0, 0, =
0); font-family: Helvetica; font-size: 13px; font-style: normal; =
font-variant-caps: normal; font-weight: 400; letter-spacing: normal; =
text-align: start; text-indent: 0px; text-transform: none; white-space: =
normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; =
text-decoration: none; float: none; display: inline !important;" =
class=3D"">Researcher, Information Theorist, and amateur computer =
scientist.</span></div></blockquote></div><br =
class=3D""></div></div></body></html>=

--Apple-Mail=_3123FD76-AE42-495E-87F5-55005DC02A4D--
