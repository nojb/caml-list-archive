Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 27FA37EEBF
	for <caml-list@sympa.inria.fr>; Sat, 11 Jul 2015 00:16:07 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.213.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.213.178 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.213.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ig0-f178.google.com) identity=helo;
  client-ip=209.85.213.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-ig0-f178.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0D6AgCDQ6BVlLLVVdFbgzE1YAaDGqhtjnqCKIU7OgKBPgdMAQEBAQEBEgEBAQEHCwsJHzCEJAEBAgEBEhEdARsSCwEDAQsGBQsaHQICIQEBEQEFAQoSBhMICgIOh3YBAwoIDatTgSw+MYs/gWuCeYsYChknAwpXhQEBAQEBAQUBAQEBAQEBARQBBQ6LPYJNgjUEB4JogUMFhV0MhzKHFoRphTWBZoIEj0SFWRIjgRURBoQZLzEBAYJJAQEB
X-IPAS-Result: A0D6AgCDQ6BVlLLVVdFbgzE1YAaDGqhtjnqCKIU7OgKBPgdMAQEBAQEBEgEBAQEHCwsJHzCEJAEBAgEBEhEdARsSCwEDAQsGBQsaHQICIQEBEQEFAQoSBhMICgIOh3YBAwoIDatTgSw+MYs/gWuCeYsYChknAwpXhQEBAQEBAQUBAQEBAQEBARQBBQ6LPYJNgjUEB4JogUMFhV0MhzKHFoRphTWBZoIEj0SFWRIjgRURBoQZLzEBAYJJAQEB
X-IronPort-AV: E=Sophos;i="5.15,450,1432591200"; 
   d="scan'208";a="169823281"
Received: from mail-ig0-f178.google.com ([209.85.213.178])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 11 Jul 2015 00:16:06 +0200
Received: by igpy18 with SMTP id y18so22743669igp.0
        for <caml-list@inria.fr>; Fri, 10 Jul 2015 15:16:04 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=kDnSE+LAZX6nKdsC2YlZTRAmEtwMWJ2avMCmdu9zTT4=;
        b=viWMBSt5YfPEU+yzdpqxmaFx2pMQltUguNCT2gCT/5CFH0KlR52cd/gZ5ht881xfn4
         I/UjKSa+ck7vLIufFvq620WJg5fZomIKw43gqWsnwkUn+C1mT8BM2GMmlvE+D9gGGKKI
         HF2AjcaCQRWjRF+4ht/8u00IDUnnadd9NF3mpnJuqSPofu4U1aBtICWpN1C8lbSV2EuQ
         IvEvv2sl3lySy6YFhKLkVxAuWwUsnjb248QI1c4zoOhOMg5Od4nVeoyUf2QGfvkZ8M2y
         vD6v036UCjgozHFF4qPDup5YuMWLEiennSvZ2hwKHJuLqPZxRBZ1qPH3WbeagiwL6885
         XYMg==
X-Received: by 10.107.30.69 with SMTP id e66mr34409440ioe.76.1436566564242;
 Fri, 10 Jul 2015 15:16:04 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.79.68.132 with HTTP; Fri, 10 Jul 2015 15:15:24 -0700 (PDT)
In-Reply-To: <CAJ7XQb5fFrAo1J7Notdxi0J-4nsCYVPhbSajPjP6rLMek2M7ZQ@mail.gmail.com>
References: <CAGyVGgOE77g4QGvQcqj3ug_Nv2x7xC0Go94ZDaLk-UA-D-u4iA@mail.gmail.com>
 <559EEE98.8080303@starynkevitch.net> <55A00351.2050604@inria.fr> <CAJ7XQb5fFrAo1J7Notdxi0J-4nsCYVPhbSajPjP6rLMek2M7ZQ@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sat, 11 Jul 2015 07:15:24 +0900
Message-ID: <CAPFanBEAN6BA2PhMJ00ybUZVHisu4aLHOwfqmrcH26oBsYW28g@mail.gmail.com>
To: Raoul Duke <raould@gmail.com>
Cc: OCaml <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1140f33ac20b8d051a8cb732
Subject: Re: [Caml-list] Native compiler for oCaml on System Z

--001a1140f33ac20b8d051a8cb732
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

There were in fact at least two serious attempts at a LLVM port:
- one by Colin Benner,
  https://github.com/colinbenner/ocamlllvm
  http://oud.ocaml.org/2012/abstracts/oud2012-paper7.pdf
  (the paper above briefly discusses GC issues)
- one by Rapha=C3=ABl Amiard,
  https://github.com/raph-amiard/CamllVM
  https://www.irill.org/blog/camllvm-a-llvm-based-runtime-for-ocaml
  (in the spirit of University Pierre et Marie Curie, this compiler goes
from
   OCaml bytecode to LLVM programs, instead of being a harder-to-deploy
   native-code compiler backend)

Both cited the GC interface and the slowness of exceptions (relative to the
exceptionnally fast OCaml runtime exception handling on which many programs
rely). These difficulties had been correctly foreplanned by Xavier Leroy in
his 2009 caml-list message

http://caml.inria.fr/pub/ml-archives/caml-list/2009/03/3a77bfcca0f90b763d12=
7d1581d6a2f1.en.html

There has been recent developments on the GC support front in the LLVM
community, notably the work of Philip Reames on "statepoints" as an
alternative approach to GC support (that should support eg. passing roots
in registers):
http://www.philipreames.com/Blog/2014/10/21/statepoints-vs-gcroot-for-repre=
senting-call-safepoints/

Regarding exceptions, I would guess a necessary evil would be to do more
static analyses inside the OCaml backend to detect when exception usage can
be refined to less generic constructs (eg. the experiments of Alain Frisch
on "static raise": https://www.lexifi.com/blog/static-exceptions ).
Degraded exceptions are also a source of performance issues on other
backends such as js_of_ocaml.


On Sat, Jul 11, 2015 at 2:47 AM, Raoul Duke <raould@gmail.com> wrote:

> > Targeting LLVM or GCCJIT is an interesting but separate project.
> > At least one attempt were made in the past to target LLVM, running into
> > problems with the (exact) GC interface of OCaml.  Maybe LLVM improved
> > recently in this department, and maybe GCCJIT can handle it too.  If
> > not, I think it's a dead end.
>
>
> For posterity, and for the sake of curiosity, might someone in the
> know succinctly explain what the (exact) GC interface road blocks
> were? Thank you!
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a1140f33ac20b8d051a8cb732
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div><div><div><div><div><div><div>There we=
re in fact at least two serious attempts at a LLVM port:<br></div>- one by =
Colin Benner,<br>=C2=A0 <a href=3D"https://github.com/colinbenner/ocamlllvm=
">https://github.com/colinbenner/ocamlllvm</a><br>=C2=A0 <a href=3D"http://=
oud.ocaml.org/2012/abstracts/oud2012-paper7.pdf">http://oud.ocaml.org/2012/=
abstracts/oud2012-paper7.pdf</a><br></div>=C2=A0 (the paper above briefly d=
iscusses GC issues)<br></div>- one by Rapha=C3=ABl Amiard,<br>=C2=A0 <a hre=
f=3D"https://github.com/raph-amiard/CamllVM">https://github.com/raph-amiard=
/CamllVM</a><br>=C2=A0 <a href=3D"https://www.irill.org/blog/camllvm-a-llvm=
-based-runtime-for-ocaml">https://www.irill.org/blog/camllvm-a-llvm-based-r=
untime-for-ocaml</a><br></div>=C2=A0 (in the spirit of University Pierre et=
 Marie Curie, this compiler goes from<br></div>=C2=A0=C2=A0 OCaml bytecode =
to LLVM programs, instead of being a harder-to-deploy<br></div>=C2=A0=C2=A0=
 native-code compiler backend)<br><br></div>Both cited the GC interface and=
 the slowness of exceptions (relative to the exceptionnally fast OCaml runt=
ime exception handling on which many programs rely). These difficulties had=
 been correctly foreplanned by Xavier Leroy in his 2009 caml-list message<b=
r>=C2=A0 <a href=3D"http://caml.inria.fr/pub/ml-archives/caml-list/2009/03/=
3a77bfcca0f90b763d127d1581d6a2f1.en.html">http://caml.inria.fr/pub/ml-archi=
ves/caml-list/2009/03/3a77bfcca0f90b763d127d1581d6a2f1.en.html</a><br><br><=
/div>There has been recent developments on the GC support front in the LLVM=
 community, notably the work of Philip Reames on &quot;statepoints&quot; as=
 an alternative approach to GC support (that should support eg. passing roo=
ts in registers): <a href=3D"http://www.philipreames.com/Blog/2014/10/21/st=
atepoints-vs-gcroot-for-representing-call-safepoints/">http://www.philiprea=
mes.com/Blog/2014/10/21/statepoints-vs-gcroot-for-representing-call-safepoi=
nts/</a><br><br></div><div>Regarding exceptions, I would guess a necessary =
evil would be to do more static analyses inside the OCaml backend to detect=
 when exception usage can be refined to less generic constructs (eg. the ex=
periments of Alain Frisch on &quot;static raise&quot;: <a href=3D"https://w=
ww.lexifi.com/blog/static-exceptions">https://www.lexifi.com/blog/static-ex=
ceptions</a> ). Degraded exceptions are also a source of performance issues=
 on other backends such as js_of_ocaml.<br></div><br></div></div><div class=
=3D"gmail_extra"><br><div class=3D"gmail_quote">On Sat, Jul 11, 2015 at 2:4=
7 AM, Raoul Duke <span dir=3D"ltr">&lt;<a href=3D"mailto:raould@gmail.com" =
target=3D"_blank">raould@gmail.com</a>&gt;</span> wrote:<br><blockquote cla=
ss=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=
dding-left:1ex"><span class=3D"">&gt; Targeting LLVM or GCCJIT is an intere=
sting but separate project.<br>
&gt; At least one attempt were made in the past to target LLVM, running int=
o<br>
&gt; problems with the (exact) GC interface of OCaml.=C2=A0 Maybe LLVM impr=
oved<br>
&gt; recently in this department, and maybe GCCJIT can handle it too.=C2=A0=
 If<br>
&gt; not, I think it&#39;s a dead end.<br>
<br>
<br>
</span>For posterity, and for the sake of curiosity, might someone in the<b=
r>
know succinctly explain what the (exact) GC interface road blocks<br>
were? Thank you!<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

--001a1140f33ac20b8d051a8cb732--
