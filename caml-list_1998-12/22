Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA22933 for caml-redistribution; Fri, 11 Dec 1998 15:14:21 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA20787 for <caml-list@pauillac.inria.fr>; Thu, 10 Dec 1998 04:21:28 +0100 (MET)
Received: from hadar.cs.Buffalo.EDU (hadar.cs.Buffalo.EDU [128.205.32.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id EAA20674
	for <caml-list@inria.fr>; Thu, 10 Dec 1998 04:21:26 +0100 (MET)
Received: (from whitley@localhost)
	by hadar.cs.Buffalo.EDU (8.8.8/8.8.5) id WAA19345;
	Wed, 9 Dec 1998 22:21:22 -0500 (EST)
From: John Whitley <whitley@cse.buffalo.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Date: Wed,  9 Dec 1998 22:21:21 -0500 (EST)
To: caml-list@inria.fr
Subject: for loops with stride
X-Mailer: VM 6.43 under 20.4 "Emerald" XEmacs  Lucid
Message-ID: <13935.15218.91076.707446@hadar.cs.Buffalo.EDU>
Sender: weis


Thanks to everyone who responded to my earlier question re:
composition.  Quite enlightening discussion...  8-)

On a hopefully less controversial note, I'd like to make a suggestion
for an addition to OCaml for-loops.  Consider an optional stride
parameter, as in:

for i = 0 to n-1 by stride do
...
done

At least in certain signal processing code that I'm working with
presently, the above is a common (and highly convenient) pattern.  The
corresponding while loop is simply not as easy to write or understand.

Thanks,
John



