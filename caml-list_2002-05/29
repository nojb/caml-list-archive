Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA30561; Thu, 2 May 2002 10:33:44 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA30557 for <caml-list@pauillac.inria.fr>; Thu, 2 May 2002 10:33:43 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g428XgD09849
	for <caml-list@inria.fr>; Thu, 2 May 2002 10:33:42 +0200 (MET DST)
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id KAA16289;
	Thu, 2 May 2002 10:33:35 +0200
Date: Thu, 2 May 2002 10:33:35 +0200
From: Markus Mottl <markus@oefai.at>
To: John Prevost <visigoth@cs.cmu.edu>
Cc: OCaml Mailing list <caml-list@inria.fr>
Subject: Re: [Caml-list] Breaking out of iterative loops
Message-ID: <20020502083335.GB16030@fichte.ai.univie.ac.at>
Mail-Followup-To: John Prevost <visigoth@cs.cmu.edu>,
	OCaml Mailing list <caml-list@inria.fr>
References: <20020430202706.GA6791@vincent> <200204302331.32905.johan.baltie@wanadoo.fr> <3CD08EE3.9010202@ozemail.com.au> <863cxbmgww.fsf@laurelin.dementia.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <863cxbmgww.fsf@laurelin.dementia.org>
User-Agent: Mutt/1.3.26i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 01 May 2002, John Prevost wrote:
> The drawback to allowing:
> 
> let rec ones = 1 :: ones
> 
> and such expressions is that when looking at the definition of, for
> example, 'a list and length, one would expect it to be guaranteed that
> length terminates.  Since you can't prevent recursive use of
> constructors, well, you can no longer guarantee that.

I second this. Does anybody here really benefit from such cyclic
structures?

I haven't found a single practical case where this was useful, but would
assume that some future program transformation tools that use proofs by
induction would have an easier life if this were disallowed...

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

