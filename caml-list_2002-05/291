Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA31510; Wed, 22 May 2002 05:04:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA31509 for <caml-list@pauillac.inria.fr>; Wed, 22 May 2002 05:04:05 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g4M344X09587
	for <caml-list@inria.fr>; Wed, 22 May 2002 05:04:04 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id MAA13192;
	Wed, 22 May 2002 12:03:51 +0900 (JST)
To: skaller@ozemail.com.au
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Is CVS version of ocaml faster?
In-Reply-To: <3CEA931F.6090700@ozemail.com.au>
References: <Pine.LNX.3.95.1020424004639.128A-100000@first.in-berlin.de>
	<86lmbeuheg.fsf@laurelin.dementia.org>
	<3CEA931F.6090700@ozemail.com.au>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020522120351X.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 22 May 2002 12:03:51 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 22
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: John Max Skaller <skaller@ozemail.com.au>

> I just built the CVS version of Ocaml
> 
> 	Objective Caml version 3.04+11 (2002-05-16)
> 
> to check out a fix. Felix seems to run correctly now.
> 
> 	***** All 201 tests passed *****

Good

> But .. it seems faster, for example my parser builds in 5 seconds ..
> was 20 seconds. Am I imagining things?

There's a small optimization in the type checker, which can improve
performance if you have lots of mutually recursive types. It's rather
application specific, so I wouldn't say it would improve performance
for everybody, but you can have good surprises. Some exponential cases
become linear.

Jacques Garrigue
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

