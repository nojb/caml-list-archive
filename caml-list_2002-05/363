Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA26561; Wed, 29 May 2002 00:44:58 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA26689 for <caml-list@pauillac.inria.fr>; Wed, 29 May 2002 00:44:58 +0200 (MET DST)
Received: from verdot.inria.fr (verdot.inria.fr [128.93.11.7])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g4SMivv01820
	for <caml-list@inria.fr>; Wed, 29 May 2002 00:44:57 +0200 (MET DST)
Received: (from ddr@localhost)
	by verdot.inria.fr (8.9.3/8.9.3) id AAA06813
	for caml-list@inria.fr; Wed, 29 May 2002 00:44:57 +0200
Date: Wed, 29 May 2002 00:44:57 +0200
From: Daniel de Rauglaudre <daniel.de_rauglaudre@inria.fr>
To: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] infix precedence
Message-ID: <20020529004457.B1511@verdot.inria.fr>
References: <20020528203212.B21121@verdot.inria.fr> <Pine.SOL.4.20.0205281440380.4380-100000@csa.bu.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <Pine.SOL.4.20.0205281440380.4380-100000@csa.bu.edu>; from zhudp@cs.bu.edu on Tue, May 28, 2002 at 02:48:42PM -0400
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi,

On Tue, May 28, 2002 at 02:48:42PM -0400, dengping zhu wrote:
> 
> I tried camlp4 before. I got the example from the camlp4 tutorial and
> modified a little bit. 

Your code cannot work: you are defining a new entry, you are not using
the entry of OCaml expressions, which is Pcaml.expr.

  $ cat foo.ml
  let add_infix lev op =
  EXTEND
    GLOBAL: Pcaml.expr;
    Pcaml.expr: LEVEL $lev$
      [ [ x = SELF; $op$; y = SELF -> <:expr< $lid:op$ $x$ $y$ >> ] ];
  END;;
  $ ocaml
	  Objective Caml version 3.04+11 (2002-05-16)
  
  # #load "camlp4o.cma";;
	  Camlp4s Parsing version 3.04+11
  
  # #load "pa_extend.cmo";;    
  # #load "q_MLast.cmo";;  
  # #use "foo.ml";;
  val add_infix : string -> string -> unit = <fun>

Type:
   Grammar.Entry.print Pcaml.expr;;
to see the current entry of expressions.

The available levels are "top", "expr1", ":=", "||", "&&", "<", "^",
"+", "*", "**", "unary minus", "apply", "label", ".", "~-", "simple".
They are the one you can use as first parameter of add_infix:

  # add_infix "*" "op1";;

If you type
   Grammar.Entry.print Pcaml.expr;;
then you see that the rule with "op1" has been added in the level "*".

  # let op1 x y = x + y + 1;;
  Toplevel input:
  # let op1 x y = x + y + 1;;
	^^^
  Parse error: 'module' uppercase identifier expected after 'let' (in
    [str_item])

Normal, since "op1" is now a keyword. Mmmm... the normal form should be:
   let (op1) x y = x + y + 1;;
But it does not work... this is a bug in Camlp4 that I am going to fix.

A solution should be to define it before the "add_infix"...

But, in the meantime, this works:
   # let \op1 x y = x + y + 1;;
   val op1 : int -> int -> int = <fun>
   # 3 op1 4;;
   - : int = 8

-- 
Daniel de RAUGLAUDRE
daniel.de_rauglaudre@inria.fr
http://cristal.inria.fr/~ddr/
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

