Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA28240; Fri, 3 May 2002 12:17:24 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA28249 for caml-list@pauillac.inria.fr; Fri, 3 May 2002 12:17:23 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA20677 for <caml-list@pauillac.inria.fr>; Fri, 3 May 2002 03:36:53 +0200 (MET DST)
Received: from obento.cs.caltech.edu (obento.cs.caltech.edu [131.215.44.101])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g431aqD19849
	for <caml-list@inria.fr>; Fri, 3 May 2002 03:36:52 +0200 (MET DST)
Received: from orchestra.cs.caltech.edu (orchestra.cs.caltech.edu [131.215.44.20])
	by obento.cs.caltech.edu (Postfix) with ESMTP
	id 63BDC4050; Thu,  2 May 2002 18:36:50 -0700 (PDT)
Received: (from mvanier@localhost)
	by orchestra.cs.caltech.edu (8.11.2/8.9.3) id g431ao611142;
	Thu, 2 May 2002 18:36:50 -0700
Date: Thu, 2 May 2002 18:36:50 -0700
Message-Id: <200205030136.g431ao611142@orchestra.cs.caltech.edu>
X-Authentication-Warning: orchestra.cs.caltech.edu: mvanier set sender to mvanier@cs.caltech.edu using -f
From: Michael Vanier <mvanier@cs.caltech.edu>
To: checker@d6.com
Cc: caml-list@inria.fr
In-reply-to: <4.3.2.7.2.20020502173934.03b73250@mail.d6.com> (message from
	Chris Hecker on Thu, 02 May 2002 17:49:25 -0700)
Subject: Re: [Caml-list] "high end" type theory for working programmers?
References:  <4.3.2.7.2.20020502173934.03b73250@mail.d6.com>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


I highly recommend Benjamin Pierce's new book "Types in Programming
Languages" from MIT press.  It's very well-written, covers much of the
material you describe, and includes implementations in ocaml ;-)

Mike


> Date: Thu, 02 May 2002 17:49:25 -0700
> From: Chris Hecker <checker@d6.com>
> 
> The list has had a lot of discussions about type theory behind the module 
> system, tuples, and the like lately.  Most of it has been over my head, 
> which is fun, because it presents a challenge to try to figure out what 
> people are saying.  I am wondering how much of it is useful for actually 
> writing "regular" code (as opposed to compilers or theorem provers).  Are 
> there books (or survey papers) on this stuff that are meant to educate 
> working programmers, as opposed to language researchers?  For example, 
> where should I go to learn what this means, and whether I care (just a 
> randomly chosen sentence representative of stuff that's currently over my 
> head from the past few days on the list):
> 
> "That functor is essentially the polymorphic identity functor, while the 
> other variation was a polymorphic eta-expansion of the abstraction operator."
> 
> or another example:
> 
> "In this encoding, modules are only records, so module types are ordinary 
> types, and there is no distinction between ordinary abstract types 
> (introduced by explicit polymorphic abstraction) and ``abstract 
> signatures''. There is, as far as I can tell, no need for kind polymorphism."
> 
> I started using caml to find out if a "higher level" language could make a 
> difference in my programming productivity (writing video games).  As I 
> continue with that experiment, I'm curious to know whether understanding 
> this high end type theory stuff would help make me a better programmer, or 
> just more able to understand the list lately.  Either is fine, but both 
> would obviously be great.  :)
> 
> Chris
> 
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

