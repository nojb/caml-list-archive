Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA08180; Thu, 2 May 2002 15:34:56 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA08174 for <caml-list@pauillac.inria.fr>; Thu, 2 May 2002 15:34:56 +0200 (MET DST)
Received: from kiefer.ai.univie.ac.at (kiefer.ai.univie.ac.at [131.130.174.157])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g42DYsX07678
	for <caml-list@inria.fr>; Thu, 2 May 2002 15:34:54 +0200 (MET DST)
Received: (from markus@localhost)
	by kiefer.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id PAA02954;
	Thu, 2 May 2002 15:34:52 +0200
Date: Thu, 2 May 2002 15:34:52 +0200
From: Markus Mottl <markus@oefai.at>
To: "Krishnaswami, Neel" <neelk@cswcasa.com>
Cc: OCaml Mailing list <caml-list@inria.fr>
Subject: Re: [Caml-list] Breaking out of iterative loops
Message-ID: <20020502133452.GE2033@kiefer.ai.univie.ac.at>
Mail-Followup-To: "Krishnaswami, Neel" <neelk@cswcasa.com>,
	OCaml Mailing list <caml-list@inria.fr>
References: <B1E4D3274D57D411BE8400D0B783FF32A8D73E@exchange1.cswv.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <B1E4D3274D57D411BE8400D0B783FF32A8D73E@exchange1.cswv.com>
User-Agent: Mutt/1.3.26i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 02 May 2002, Krishnaswami, Neel wrote:
> Markus Mottl [mailto:markus@oefai.at] wrote:
> > I second this. Does anybody here really benefit from such cyclic
> > structures?
> 
> Somewhat to my surprise, I can answer yes:
[snip]
>   | Rec(name, n, body) -> 
>       let rec c = Closure(n, body, r')
>       and r' = (name, c) :: r in
>       c

> Using cyclic structures means I don't have to dink around with 
> mutable references and all the headaches they bring, and so it's
> very handy when prototyping. 

Ok, I agree that this is a nice solution. It's still funny that all
people mentioned environment handling with recursion as only example.
I am not sure whether this is justification enough to have this extra
feature in the language...

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

