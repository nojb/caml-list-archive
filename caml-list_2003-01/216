Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA02277; Fri, 24 Jan 2003 22:55:25 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA01950 for caml-list@pauillac.inria.fr; Fri, 24 Jan 2003 22:55:24 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA00906 for <caml-list@pauillac.inria.fr>; Fri, 24 Jan 2003 21:58:09 +0100 (MET)
Received: from ep09.kernel.pl (ep09.kernel.pl [212.87.11.162])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h0OKw2v17469
	for <caml-list@inria.fr>; Fri, 24 Jan 2003 21:58:05 +0100 (MET)
Received: (qmail 29466 invoked by uid 566); 24 Jan 2003 20:57:51 -0000
Date: Fri, 24 Jan 2003 21:54:22 +0100
From: Michal Moskal <malekith@pld-linux.org>
To: Brian Hurt <brian.hurt@qlogic.com>
Cc: Oleg <oleg_inconnu@myrealbox.com>, caml-list@inria.fr
Subject: Re: [Caml-list] Baby Steps (was: ChartPak - a data visualization library for the web)
Message-ID: <20030124205422.GB6483@roke.freak>
References: <20030124105919.GB3390@roke.freak> <Pine.LNX.4.33.0301241322390.2036-100000@eagle.ancor.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.33.0301241322390.2036-100000@eagle.ancor.com>
User-Agent: Mutt/1.4i
X-PGP-Fingerprint: CF89 1B14 11BE 1CC9 2CA3  7497 5E32 69B4 BC71 B4C2
X-AntiVirus: scanned for viruses by AMaViS 0.2.1 (http://amavis.org/)
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, Jan 24, 2003 at 01:35:55PM -0600, Brian Hurt wrote:
> 
> There is no argument (in my mind) that Ocaml is a better language than any 
> Functional-C hybrid.  That's not the question.  The question is wether 
> such a language stands a chance of getting programmers to start moving 
> towards a functional language.  

Well, my point when writing Gont was to create new super-hiper language
that is better then anything else.  Now I know I have failed.  Maybe
because making such hybrids isn't best idea, maybe because I don't have
enough experience/knowledge/time.

The main problem here is (I guess) the fact that creating real-life language 
takes lots of effort.  And it is not going to be funny to write language
that is only meant as learning tool for few business programmers.

[...]
> At this point, the people still using C are like the people who are still 
> using Cobol and Fortran.  They will be there until the day they die.  Note 
> that this isn't necessarily bad- C is in many ways a category killer 
> language.  For what I think C is good for (OSs, embedded code, and other 
> stuff banging on hardware) I cannot envision a language sufficiently 
> better than C to make it worthwhile to switch off of C for these 
> environments.  In these environments, C's pointer games and explicit 
> allocation is an *advantage*.  Despite the fact that they're disadvantages 
> just about everywhere else.
> 
> This means you're starting point isn't C.  It's C++ or Java.

Cyclone has all that pointer games (although improved and safer) and quite 
explicit storage management (using regions), which IMHO makes it very
(too?) complex.  It's starting point was definitely C.

My starting point was non-OO part of Java (i.e. parts borrowed from C
but without pointers and with GC).  Maybe it's good as a step between C
and ML but nobody is going to use it in real life project.

-- 
: Michal Moskal ::::: malekith/at/pld-linux.org :  GCS {C,UL}++++$ a? !tv
: PLD Linux ::::::: Wroclaw University, CS Dept :  {E-,w}-- {b++,e}>+++ h
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

