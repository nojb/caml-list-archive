Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA32099; Fri, 3 Jan 2003 15:39:21 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA32077 for <caml-list@pauillac.inria.fr>; Fri, 3 Jan 2003 15:39:19 +0100 (MET)
Received: from igw2.watson.ibm.com (igw2.watson.ibm.com [129.34.20.6])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h03EdHr25255;
	Fri, 3 Jan 2003 15:39:17 +0100 (MET)
Received: from sp1n293en1.watson.ibm.com (sp1n293en1.watson.ibm.com [9.2.112.57])
	by igw2.watson.ibm.com (8.11.4/8.11.4) with ESMTP id h03EdG317328;
	Fri, 3 Jan 2003 09:39:16 -0500
Received: from nautilus-chet.watson.ibm.com (sig-9-65-80-41.mts.ibm.com [9.65.80.41])
	by sp1n293en1.watson.ibm.com (8.11.4/8.11.4) with ESMTP id h03EdDT40972;
	Fri, 3 Jan 2003 09:39:13 -0500
Received: from maine (maine [127.0.0.1])
	by nautilus-chet.watson.ibm.com (8.12.5/8.12.5/Debian-1) with ESMTP id h02HqPXh005051;
	Thu, 2 Jan 2003 12:52:25 -0500
Message-Id: <200301021752.h02HqPXh005051@nautilus-chet.watson.ibm.com>
To: Xavier Leroy <xavier.leroy@inria.fr>
cc: onlyclimb <onlyclimb@163.com>, caml-list@inria.fr
Subject: Re: [Caml-list] speed 
In-Reply-To: Your message of "Fri, 03 Jan 2003 14:32:21 +0100."
             <20030103143221.B29601@pauillac.inria.fr> 
References: <3E15B3B3.3040106@163.com>  <20030103143221.B29601@pauillac.inria.fr> 
Date: Thu, 02 Jan 2003 12:52:25 -0500
From: Chet Murthy <chet@watson.ibm.com>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Not to contradict Xavier, because in essence, he is right -- Caml is
indeed far faster than Java on any realistic applications in almost
any area I have ever bothered to try -- but the story as to Java is
actually rather complicated.

(1) different JDKs exhibit remarkably different results on real-world
examples, as their implementors have different backgrounds.  I
remember that the first JITs all did great on integer and
floating-point loops, and that was _it_ -- the rest of the time, they
were often slower than just a hack like inlining interpreter
code-segments.  This is just a human thing.

(2) different JDKs from different manufacturers exhibit different
behaviours.  E.g., I find that the Sunsoft JDKs on Solaris are a lot
faster than the Javasoft JDKs on Solaris.  I also find (no, I'm not
shilling for IBM) that IBM's JDK on Linux is a lot faster than
Javasoft's.  There are, again, social issues involved here, which I am
not sure I am at liberty to discuss.

That said, by and large I find that when you don't go near issues of
allocation and interprocedural optimization, Java is and can be as
fast as Caml.  *However*, when you _do_ go near those things, e.g. if
you do anything I/O or string-processing-intensive, well,

  go get a rocking chair, 'cos you're gonna have a looong wait.

--chet--

P.S. Or get thee to a caml and get it done.  *grin*
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

