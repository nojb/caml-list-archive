Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA01521; Fri, 3 Jan 2003 16:30:13 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA01508 for <caml-list@pauillac.inria.fr>; Fri, 3 Jan 2003 16:30:12 +0100 (MET)
Received: from pots.cmguc.com ([208.248.239.78])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h03FUAr28071;
	Fri, 3 Jan 2003 16:30:10 +0100 (MET)
Received: from cmguc.com ([10.239.68.244])
	by pots.cmguc.com (Mirapoint Messaging Server MOS 3.2.0.52-EA)
	with ESMTP id ABV00661;
	Fri, 3 Jan 2003 10:27:10 -0500 (EST)
Message-ID: <3E15AC23.3EF2932C@cmguc.com>
Date: Fri, 03 Jan 2003 10:28:35 -0500
From: Erol Akarsu <eakarsu@cmguc.com>
X-Mailer: Mozilla 4.78 [en] (Windows NT 5.0; U)
X-Accept-Language: en
MIME-Version: 1.0
To: Sven Luther <luther@dpt-info.u-strasbg.fr>
CC: Chet Murthy <chet@watson.ibm.com>, Xavier Leroy <xavier.leroy@inria.fr>,
        onlyclimb <onlyclimb@163.com>, caml-list@inria.fr
Subject: Re: [Caml-list] speed
References: <3E15B3B3.3040106@163.com> <20030103143221.B29601@pauillac.inria.fr> <200301021752.h02HqPXh005051@nautilus-chet.watson.ibm.com> <20030103145340.GA2819@iliana>
Content-Type: text/plain; charset=iso-8859-9
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi All,

What is the best way to access to huge Java libraries created so far from ocaml?
I am looking for efficient way, easy-to-write wrappers. I am actually intersted in
accessing to Web services utilities , RDF parsers and some multiagent libraries
all written java.

Thanks

Erol Akarsu

Sven Luther wrote:

> On Thu, Jan 02, 2003 at 12:52:25PM -0500, Chet Murthy wrote:
> >
> > Not to contradict Xavier, because in essence, he is right -- Caml is
> > indeed far faster than Java on any realistic applications in almost
> > any area I have ever bothered to try -- but the story as to Java is
> > actually rather complicated.
> >
> > (1) different JDKs exhibit remarkably different results on real-world
> > examples, as their implementors have different backgrounds.  I
> > remember that the first JITs all did great on integer and
> > floating-point loops, and that was _it_ -- the rest of the time, they
> > were often slower than just a hack like inlining interpreter
> > code-segments.  This is just a human thing.
>
> Do you have any idea how gcj does, compared to ocamlopt maybe ? After
> all, if i am not wrong, both generate native code.
>
> Friendly,
>
> Sven Luther
> -------------------
> To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
> Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

