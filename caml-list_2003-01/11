Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA00116; Fri, 3 Jan 2003 15:53:44 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA00102 for <caml-list@pauillac.inria.fr>; Fri, 3 Jan 2003 15:53:42 +0100 (MET)
Received: from mel-rto4.wanadoo.fr (smtp-out-4.wanadoo.fr [193.252.19.23])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h03Erg527883;
	Fri, 3 Jan 2003 15:53:42 +0100 (MET)
Received: from mel-rta8.wanadoo.fr (193.252.19.79) by mel-rto4.wanadoo.fr (6.7.015)
        id 3E0C33FD00314953; Fri, 3 Jan 2003 15:53:41 +0100
Received: from iliana (81.48.94.83) by mel-rta8.wanadoo.fr (6.7.015)
        id 3E075B32003DD046; Fri, 3 Jan 2003 15:53:41 +0100
Received: from luther by iliana with local (Exim 3.36 #1 (Debian))
	id 18UTCe-0000k0-00; Fri, 03 Jan 2003 15:53:40 +0100
Date: Fri, 3 Jan 2003 15:53:40 +0100
To: Chet Murthy <chet@watson.ibm.com>
Cc: Xavier Leroy <xavier.leroy@inria.fr>, onlyclimb <onlyclimb@163.com>,
        caml-list@inria.fr
Subject: Re: [Caml-list] speed
Message-ID: <20030103145340.GA2819@iliana>
References: <3E15B3B3.3040106@163.com> <20030103143221.B29601@pauillac.inria.fr> <200301021752.h02HqPXh005051@nautilus-chet.watson.ibm.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200301021752.h02HqPXh005051@nautilus-chet.watson.ibm.com>
User-Agent: Mutt/1.4i
From: Sven Luther <luther@dpt-info.u-strasbg.fr>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, Jan 02, 2003 at 12:52:25PM -0500, Chet Murthy wrote:
> 
> Not to contradict Xavier, because in essence, he is right -- Caml is
> indeed far faster than Java on any realistic applications in almost
> any area I have ever bothered to try -- but the story as to Java is
> actually rather complicated.
> 
> (1) different JDKs exhibit remarkably different results on real-world
> examples, as their implementors have different backgrounds.  I
> remember that the first JITs all did great on integer and
> floating-point loops, and that was _it_ -- the rest of the time, they
> were often slower than just a hack like inlining interpreter
> code-segments.  This is just a human thing.

Do you have any idea how gcj does, compared to ocamlopt maybe ? After
all, if i am not wrong, both generate native code.

Friendly,

Sven Luther
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

