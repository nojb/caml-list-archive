Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id C8CD67ED26
	for <caml-list@sympa.inria.fr>; Mon,  4 Jun 2012 21:11:04 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkMBAPYHzU/RVdU2kGdsb2JhbABFo1iHYAGIbggiAQEBAQkJDQcUBCOCGAEBAQMBEgITGQEbEgsBAwELBgUEBxohIQEBEQEFAQoSBhMSEIdaAQMGBQuYVgkDjCKCcIRKChknAwpXiHEBBQyKJWCGEAOVG4EPiBGBW4MePoQB
X-IronPort-AV: E=Sophos;i="4.75,714,1330902000"; 
   d="scan'208";a="146537146"
Received: from mail-yw0-f54.google.com ([209.85.213.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 04 Jun 2012 21:11:04 +0200
Received: by yhgm50 with SMTP id m50so4858001yhg.27
        for <caml-list@inria.fr>; Mon, 04 Jun 2012 12:11:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=y3NEHuIH9EPJ9DMHkmODJkiN2Yv7oZygoXNJIB3c0dA=;
        b=mJ8/9d2sOduEMfd+DC0hE3U6dRt+mZdaAUKfdfc7rqdwCyGGO7aEmiyiYFSErgV28g
         1nt6B+HbLf6aFkmXcSyq8TqyqYCwKMQhfOLaLhbwvJOlITV+4GqjHMv6tZZ/TNx42oBj
         hIsSAu5wX1UGkvm+1YL+45q8DNYsVb7UthGpRjxT1LnMCkIVBCHdPbgFxyKYatw/KJGR
         X3au5vf52BJ8o/NjPNO8s5fEY+K93RLKH/wnJd8IlzkriGnsVQI86XkULdTKqa1hqCh+
         65qIk+piSeVArQ+umjlBaYHQQy7kTGcHfnJEO811v4Hb6RjX25uF8XdoRe0CrXc2Qam8
         +m0A==
Received: by 10.50.237.71 with SMTP id va7mr8304373igc.6.1338837062801; Mon,
 04 Jun 2012 12:11:02 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.50.94.39 with HTTP; Mon, 4 Jun 2012 12:10:22 -0700 (PDT)
In-Reply-To: <CAHqiZ-+mJuOrtE03rftvrodxU4pfCfndQToJEHS0LRHa6Xwb-w@mail.gmail.com>
References: <CAHqiZ-+mJuOrtE03rftvrodxU4pfCfndQToJEHS0LRHa6Xwb-w@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Mon, 4 Jun 2012 21:10:22 +0200
Message-ID: <CAPFanBFj+6kZTRBnEN+6u6SgGXRPct0wwZqDLm=ch1M93-YZfg@mail.gmail.com>
To: Diego Olivier Fernandez Pons <dofp.ocaml@gmail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0447a2438a596a04c1aa4b4e
Subject: Re: [Caml-list] Puzzled by Scanf.Scanning.in_channel


--f46d0447a2438a596a04c1aa4b4e
Content-Type: text/plain; charset=ISO-8859-1

You should use bscanf:

# Scanf.fscanf;;
- : in_channel -> ('a, 'b, 'c, 'd) Scanf.scanner = <fun>
# Scanf.bscanf;;
- : Scanf.Scanning.in_channel -> ('a, 'b, 'c, 'd) Scanf.scanner = <fun>


On Mon, Jun 4, 2012 at 8:59 PM, Diego Olivier Fernandez Pons <
dofp.ocaml@gmail.com> wrote:

>    Caml-List,
>
> When I try to use Scanf.fscanf with an input channel created with
> Scanf.Scanning.from_string the type checker complains
>
>    let s = Scanf.Scanning.from_string "3" in Scanf.fscanf s "%i" (fun x ->
> x);;
>
>    Characters 55-56:
>    Error: This expression has type Scanf.Scanning.in_channel
>       but an expression was expected of type in_channel
>
> Which confuses me as from the manual I understood this should have worked.
>
>    val from_string : string -> in_channel
>
>    Scanning.from_string s returns a formatted input channel which
> reads from the given string. Reading starts from the first character
> in the string. The end-of-input condition is set when the end of the
> string is reached.
>
> Could anyone explain how is the proper way to generate a input channel
> from a string ? Its for testing a program that will use stdin in
> production.
>
>        Diego Olivier
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--f46d0447a2438a596a04c1aa4b4e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

You should use bscanf:<br><br># Scanf.fscanf;;<br>- : in_channel -&gt; (&#3=
9;a, &#39;b, &#39;c, &#39;d) Scanf.scanner =3D &lt;fun&gt;<br># Scanf.bscan=
f;;<br>
- : Scanf.Scanning.in_channel -&gt; (&#39;a, &#39;b, &#39;c, &#39;d) Scanf.=
scanner =3D &lt;fun&gt;<br>
<br><br><div class=3D"gmail_quote">On Mon, Jun 4, 2012 at 8:59 PM, Diego Ol=
ivier Fernandez Pons <span dir=3D"ltr">&lt;<a href=3D"mailto:dofp.ocaml@gma=
il.com" target=3D"_blank">dofp.ocaml@gmail.com</a>&gt;</span> wrote:<br><bl=
ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
ccc solid;padding-left:1ex">

 =A0 =A0Caml-List,<br>
<br>
When I try to use Scanf.fscanf with an input channel created with<br>
Scanf.Scanning.from_string the type checker complains<br>
<br>
 =A0 =A0let s =3D Scanf.Scanning.from_string &quot;3&quot; in Scanf.fscanf =
s &quot;%i&quot; (fun x -&gt; x);;<br>
<br>
 =A0 =A0Characters 55-56:<br>
 =A0 =A0Error: This expression has type Scanf.Scanning.in_channel<br>
 =A0 =A0 =A0 but an expression was expected of type in_channel<br>
<br>
Which confuses me as from the manual I understood this should have worked.<=
br>
<br>
 =A0 =A0val from_string : string -&gt; in_channel<br>
<br>
 =A0 =A0Scanning.from_string s returns a formatted input channel which<br>
reads from the given string. Reading starts from the first character<br>
in the string. The end-of-input condition is set when the end of the<br>
string is reached.<br>
<br>
Could anyone explain how is the proper way to generate a input channel<br>
from a string ? Its for testing a program that will use stdin in<br>
production.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
 =A0 =A0 =A0 =A0Diego Olivier<br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></span></blockquote></div><br>

--f46d0447a2438a596a04c1aa4b4e--
