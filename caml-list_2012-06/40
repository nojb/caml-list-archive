Return-Path: <rdicosmo@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id B44457ED26
	for <caml-list@sympa.inria.fr>; Wed,  6 Jun 2012 15:37:31 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvIBAGNcz0/RVdW2imdsb2JhbABFtCwIIgEBAQoJDQcSBiOCMQIJHQYBOAEDDQVfIAEFAQFWh1sDCwuYXwkDjxKFIScNiUgBBQwIjgeCNmADlRyBE40LPoFUgi0
X-IronPort-AV: E=Sophos;i="4.75,724,1330902000"; 
   d="scan'208";a="146775104"
Received: from mail-yx0-f182.google.com ([209.85.213.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 06 Jun 2012 15:37:30 +0200
Received: by yenl8 with SMTP id l8so7453833yen.27
        for <caml-list@inria.fr>; Wed, 06 Jun 2012 06:37:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:date:from:to:cc:subject:message-id:mime-version:content-type
         :content-disposition:user-agent;
        bh=N+Nil/H8Me0uScsVn884Ne8zQoSDfEXsSiHtYeal+QM=;
        b=AkkxiAlsEAi5ktYcudkC6GnIrP9+Y9M4qeRGRd1GPS0rz/gZqMklSZW0Sdo9rCRlxv
         W7KJLDc0Y82RLcGSkes2Ub2DF4EmUg0C3GCYlU720URAzCh7Ieoq5Pm9oGsjif3ZhrEJ
         svX90jhZYZ80O4Z7OlrSd+n2iVS2UMBoZHDgOSNY/4laKiKLDx7T3MaZ3po6R3FpuQMM
         i0lkrdLeU6j3wYFHLcMpfADEQ00FPszYAzDwzQjgIUPCQ9VOYrO1CjGM17SoGKy3J6Om
         csBr6OssQKyYx5pQaMxz311trr9I6m9FTmblAH3HdC5lxKsjv/iOext/TYA77fjY4ZON
         uvYw==
Received: by 10.60.29.137 with SMTP id k9mr20674010oeh.23.1338989849551;
        Wed, 06 Jun 2012 06:37:29 -0700 (PDT)
Received: from voyager (wsip-68-15-229-55.om.om.cox.net. [68.15.229.55])
        by mx.google.com with ESMTPS id n9sm981353oen.2.2012.06.06.06.37.27
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 06 Jun 2012 06:37:28 -0700 (PDT)
Sender: Roberto Di Cosmo <rdicosmo@gmail.com>
Received: from dicosmo by voyager with local (Exim 4.72)
	(envelope-from <roberto@dicosmo.org>)
	id 1ScGU0-0003X9-El; Wed, 06 Jun 2012 15:41:08 +0200
Date: Wed, 6 Jun 2012 15:41:08 +0200
From: Roberto Di Cosmo <roberto@dicosmo.org>
To: caml-list@inria.fr
Cc: roberto@dicosmo.org, marcod@di.unipi.it
Message-ID: <20120606134108.GA11071@voyager>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.20 (2009-06-14)
Subject: [Caml-list] [ANN]: Parmap 0.9.9, and call for contributors

Dear all,
       a few lines to announce the (much improved) version 
0.9.9 of Parmap, the minimalistic library which can be useful
to exploit your multicore processor with minimal modifications
to your OCaml programs.

A full description is in the README file, as well as several
examples, and an article on Parmap has just appeared here:
http://www.sciencedirect.com/science/article/pii/S1877050912003237

Main changes
------------

 - the new combinator pariter iterates over a sequence; since
   no result is returned to the main process, this code is
   faster than calling parmap and ignoring the result
 
 - new functions that provide as argument the index of the
   element of the sequence: parmapi, parmapifold, 
   array_parmapi, array_float_parmapi

 - it is now possible to set the default number of cores used
   when calling the combinators without the optional parameter
   ncores

 - eliminated dependencies on external libraries: this code
   should now build out of the box on any machine

 - added configure support for use with legacy OCaml 3.11
   and tested to build correctly with OCaml 4.00

 - initial support for Oasis packaging

In a nutshell
-------------

If you want to use your many cores to accelerate an operation which 
happens to be a map, fold or map/fold (map-reduce), just use Parmap's
parmap, parfold and parmapfold primitives in place of the standard
List.map and friends; you can specify the number of subprocesses to
use with the optional parameter ncores, and the size of granularity
of the paralle computation with the optional parameter chunksize.

For example, in the classical Mandelbrot present in the example
directory, the line 

  Parmap.parmap ~ncores: !ncores ~chunksize: !chunksize pixel (Parmap.L tasks)

allows to spawn ncores separate processes, each working on sublists of 
size chunksize of the tasks list.

How to get it
-------------

Project home: https://gitorious.org/parmap

To compile and install:

 git clone git://gitorious.org/parmap/parmap.git
 git checkout pipes
 aclocal -I m4
 autoconf
 ./configure
 make
 make install

How to help
-----------

We would use some help on 

 - writing unit tests, both for functionality, and
   speedup estimation

 - adding support for automatically determining
   the number of available physical cores on the
   different unix-like operating systems (can be tricky)

Enjoy

-- Marco Danelutto and Roberto Di Cosmo

P.S.: many thanks to Francois Berenger for extensive testing, to Jerome
Maloberti for GODI packaging, and to Markus Weissman for suggestion the
default for ncores.





