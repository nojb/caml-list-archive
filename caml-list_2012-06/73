Return-Path: <berenger@riken.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 423CB7ED26
	for <caml-list@sympa.inria.fr>; Fri,  8 Jun 2012 02:54:01 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqkBAJFM0U+GoCGimWdsb2JhbABFFrRZAQEBAQEICwsHFCeCGAEBBAE4NgoGCwsYCRYPCQMCAQIBRQYNBgIBAYgCBQu5D4sdhgADiD6MX4EShEGFLIdq
X-IronPort-AV: E=Sophos;i="4.75,734,1330902000"; 
   d="scan'208";a="161844332"
Received: from postman2.riken.jp (HELO postman.riken.jp) ([134.160.33.162])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 08 Jun 2012 02:53:59 +0200
Received: from postman.riken.jp (postman2.riken.jp [127.0.0.1])
	by postman.riken.jp (Postfix) with SMTP id 8F4F212603D4;
	Fri,  8 Jun 2012 09:53:56 +0900 (JST)
Received: from [172.27.98.103] (rikad98.riken.jp [134.160.214.98])
	by postman.riken.jp (Postfix) with ESMTPA id 65C121270063;
	Fri,  8 Jun 2012 09:53:55 +0900 (JST)
Message-ID: <4FD14D23.5040906@riken.jp>
Date: Fri, 08 Jun 2012 09:53:55 +0900
From: Francois Berenger <berenger@riken.jp>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20120430 Thunderbird/12.0.1
MIME-Version: 1.0
To: caml-list <caml-list@inria.fr>
References: <CAHR=VkxRi3G3mtgCmWqByGirJZNjM6vv6y26RKmUsj_wXmnJ_g@mail.gmail.com> <1339005692.4950.2@samsung> <CAHR=VkzFnTY_7=5esH-L5wZ-fGLT7KkwuVi-ZbLPev+Uvj1L-A@mail.gmail.com> <4FD0053B.5020600@riken.jp> <CAHR=Vkxy0k-SRJYixWpxpDMjpp+yCBJNhY013UbHMgQQT_gRvA@mail.gmail.com>
In-Reply-To: <CAHR=Vkxy0k-SRJYixWpxpDMjpp+yCBJNhY013UbHMgQQT_gRvA@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-PMX-Version: 5.6.0.2009776, Antispam-Engine: 2.7.2.376379, Antispam-Data: 2012.6.8.4522
Subject: Re: [Caml-list] Distributed computing libraries

Hello,

On 06/08/2012 12:44 AM, Thomas Braibant wrote:
>> Don't hesitate, jump on it, that's really a nice technology.
>> The "minimal disruption" concept is quite interesting.
>> For example, if your List.iter is changed to a Parmap.pariter,
>> the parallelization of this portion of the code is done.
>>
>> It's quite comfortable to develop and debug in single core mode (List.iter)
>> and switch to the // version only once you're happy with
>> the sequential one.
>
> I see. However, looking at, e.g., Functory,
> http://www.lri.fr/~filliatr/functory/doc/Functory.Cores.html it seems
> that I can use it in the same fashion (Using Functory.Cores.map
> instead of List.map) and that I can debug my code using
> Functory.Sequential.map.

Functory can distribute computations while parmap can only parallelize 
them on your local machine.
I'm pretty sure that parmap is faster at doing what they can be compared 
on because it has specialized optimizations that you cannot use if your 
data has to be distributed over the network.

The last time I looked at Functory:
- Functory had several not tail recursive functions and blew my stack
   (it was about one year ago, maybe things have changed)
- not any mailing list for functory
- while parmap has:
   parmap-devel <parmap-devel@inria.fr> and
   parmap-users <parmap-users@inria.fr>
- no GODI package for functory
- parmap has a GODI package (thanks to Jerome
   Maloberti) and maybe very soon an oasis one

> So this does not really discriminate between the two libraries. Note,
> however, that I cannot find Parmap's API described on line (using
> ocamldoc). Right now, it seems that I have to download it, to generate
> the doc.

At least there is a doc and you even managed to generate it.
('make doc' in a parmap checkout).
Maybe the doc will be online soon, who knows. ;)

> Note that Gerd's Plasma Map/Reduce has a nice and comprehensive
> documentation available, but, being more ambitious maybe, it is harder
> for a beginner to find his/her way in: the entry cost is higher.

It's also for distributed computing, parmap is for local parallelization.

> By comparison, JOcaml's manual is written in a quasi-tutorial fashion
> ( http://jocaml.inria.fr/doc/index.html ) which makes it more easy to
> start hacking stuff, even if the scope is a bit different.

I'm not sure it's standard OCaml code then.
At least with parmap and functory, they are just libraries that
you can plug into any plain vanilla OCaml source code.

> And what about CamlP3l? What is its status? Is it superseded by Parmap
> (the lists of authors of the two softwares have a non-empty
> intersection)?

I don't think it's just a library too.
Some more knowledgeable people may answer you on these.

Regards,
F.
