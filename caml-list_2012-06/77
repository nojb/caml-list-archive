Return-Path: <berenger@riken.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id ED7367ED26
	for <caml-list@sympa.inria.fr>; Fri,  8 Jun 2012 08:36:33 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApEBAI+c0U+GoCGimWdsb2JhbABFFrRfAQEBAQEICwsHFCeCGAEBBAE4QAYLCxgJFg8JAwIBAgFFEwgBAQWHfQULuROLJoJngxkDiD6MYIEShEGFLIdr
X-IronPort-AV: E=Sophos;i="4.75,734,1330902000"; 
   d="scan'208";a="161864917"
Received: from postman2.riken.jp (HELO postman.riken.jp) ([134.160.33.162])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 08 Jun 2012 08:36:32 +0200
Received: from postman.riken.jp (postman2.riken.jp [127.0.0.1])
	by postman.riken.jp (Postfix) with SMTP id A23F91260590;
	Fri,  8 Jun 2012 15:36:30 +0900 (JST)
Received: from [172.27.98.103] (rikad98.riken.jp [134.160.214.98])
	by postman.riken.jp (Postfix) with ESMTPA id DD22D1270088;
	Fri,  8 Jun 2012 15:36:29 +0900 (JST)
Message-ID: <4FD19D6D.4000108@riken.jp>
Date: Fri, 08 Jun 2012 15:36:29 +0900
From: Francois Berenger <berenger@riken.jp>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20120430 Thunderbird/12.0.1
MIME-Version: 1.0
To: caml-list@inria.fr
References: <CAHR=VkxRi3G3mtgCmWqByGirJZNjM6vv6y26RKmUsj_wXmnJ_g@mail.gmail.com> <1339005692.4950.2@samsung> <CAHR=VkzFnTY_7=5esH-L5wZ-fGLT7KkwuVi-ZbLPev+Uvj1L-A@mail.gmail.com> <4FD0053B.5020600@riken.jp> <CAHR=Vkxy0k-SRJYixWpxpDMjpp+yCBJNhY013UbHMgQQT_gRvA@mail.gmail.com>
In-Reply-To: <CAHR=Vkxy0k-SRJYixWpxpDMjpp+yCBJNhY013UbHMgQQT_gRvA@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-PMX-Version: 5.6.0.2009776, Antispam-Engine: 2.7.2.376379, Antispam-Data: 2012.6.8.62722
Subject: Re: [Caml-list] Distributed computing libraries

On 06/08/2012 12:44 AM, Thomas Braibant wrote:
>> Don't hesitate, jump on it, that's really a nice technology.
>> The "minimal disruption" concept is quite interesting.
>> For example, if your List.iter is changed to a Parmap.pariter,
>> the parallelization of this portion of the code is done.
>>
>> It's quite comfortable to develop and debug in single core mode (List.iter)
>> and switch to the // version only once you're happy with
>> the sequential one.
>
> I see. However, looking at, e.g., Functory,
> http://www.lri.fr/~filliatr/functory/doc/Functory.Cores.html it seems
> that I can use it in the same fashion (Using Functory.Cores.map
> instead of List.map) and that I can debug my code using
> Functory.Sequential.map.
>
> So this does not really discriminate between the two libraries. Note,
> however, that I cannot find Parmap's API described on line (using
> ocamldoc). Right now, it seems that I have to download it, to generate
> the doc.

Roberto Di Cosmo just created a home page:
http://www.dicosmo.org/code/parmap/

The ocamldoc-generated pages are here:
http://www.dicosmo.org/code/parmap/doc/Parmap.html

Regards,
F.

> Note that Gerd's Plasma Map/Reduce has a nice and comprehensive
> documentation available, but, being more ambitious maybe, it is harder
> for a beginner to find his/her way in: the entry cost is higher.
>
> By comparison, JOcaml's manual is written in a quasi-tutorial fashion
> ( http://jocaml.inria.fr/doc/index.html ) which makes it more easy to
> start hacking stuff, even if the scope is a bit different.
>
> And what about CamlP3l? What is its status? Is it superseded by Parmap
> (the lists of authors of the two softwares have a non-empty
> intersection)?
>
> Maybe that I should add some criteria to Oliver's list:
> - active / inactive
> - used in the wild
> - documentation (API, manual)
> - examples / tutorials
>
> With best regards,
> Thomas
>

