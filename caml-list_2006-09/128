Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 64DF3BB83
	for <caml-list@yquem.inria.fr>; Mon, 18 Sep 2006 10:39:08 +0200 (CEST)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id k8I8d5rr026103
	for <caml-list@yquem.inria.fr>; Mon, 18 Sep 2006 10:39:07 +0200
Received: from ppp14-47.lns2.syd7.internode.on.net (HELO rosella) ([59.167.14.47])
  by ipmail01.adl2.internode.on.net with ESMTP; 18 Sep 2006 18:08:58 +0930
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AY8CANP2DUU
X-IronPort-AV: i="4.09,180,1157293800"; 
   d="scan'208"; a="13995638:sNHT21074585"
Subject: Re: [Caml-list] The Future Possibility of Concurrent Garbage
	Collection?
From: skaller <skaller@users.sourceforge.net>
To: Hendrik Tews <tews@cs.ru.nl>
Cc: caml-list <caml-list@yquem.inria.fr>
In-Reply-To: <wwubqpdr392.fsf@tandem.cs.ru.nl>
References: <fd3d4e9d0609140840t740eef5ey6eee999ebe6b42e5@mail.gmail.com>
	 <B4FCDE83-36F4-4FA6-9B11-06283C88CB76@inria.fr>
	 <891bd3390609150729k27b7acf8rc9b12f1e08eae93@mail.gmail.com>
	 <wwubqpdr392.fsf@tandem.cs.ru.nl>
Content-Type: text/plain
Date: Mon, 18 Sep 2006 18:38:54 +1000
Message-Id: <1158568734.15083.11.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.6.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 450E5B2A.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; hendrik:01 tews:01 yaron:01 minsky:01 yminsky:01 ocaml:01 ocaml:01 compilers:01 afaik:01 2006:98 sourceforge:01 wrote:01 garbage:01 garbage:01 compile:01 

On Mon, 2006-09-18 at 10:24 +0200, Hendrik Tews wrote:
> "Yaron Minsky" <yminsky@cs.cornell.edu> writes:
> 
>    That said, I do understand that a concurrent GC is a big technical
>    challenge, and I can understand why the ocaml team isn't eager to take it on
>    right now.
> 
> The ocaml team could document the GC interface and modularize
> everything, such that the user can choose between different
> garbage collectors (at compile time, or even better at
> application start).

I doubt this is possible with native code compilers.
AFAIK allocation, write barrier, and int/box flag bit handling
aren't modelled using standard C ABI calls?

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

