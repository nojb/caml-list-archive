Return-Path: <yminsky@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: ****
X-Spam-Status: No, score=4.2 required=5.0 tests=DNS_FROM_RFC_ABUSE,
	HTML_MESSAGE,RCVD_IN_BL_SPAMCOP_NET,SOME_BREAKTHROUGH,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id B19E0BC50
	for <caml-list@yquem.inria.fr>; Fri, 15 Sep 2006 16:29:06 +0200 (CEST)
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.229])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id k8FET5da005727
	for <caml-list@yquem.inria.fr>; Fri, 15 Sep 2006 16:29:06 +0200
Received: by wx-out-0506.google.com with SMTP id s6so3474223wxc
        for <caml-list@yquem.inria.fr>; Fri, 15 Sep 2006 07:29:03 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:sender:to:subject:in-reply-to:mime-version:content-type:references:x-google-sender-auth;
        b=dsjGb5y9XCQRewFgdHRmfuToFxfj2eE5mFVcQhFpEmCTQd4e8hd9obKdDE+ieietx1A+ddWlu11duPXK7Te/RFSZYiovPHT8HQwY6LxZV29KXM2CpgShhQ9NWgKikdpZzWP/4sWkqMPGKsSK2FO5MAPGApPEGTGn5qBDIhZKw8k=
Received: by 10.70.46.1 with SMTP id t1mr14755382wxt;
        Fri, 15 Sep 2006 07:29:03 -0700 (PDT)
Received: by 10.70.61.5 with HTTP; Fri, 15 Sep 2006 07:29:03 -0700 (PDT)
Message-ID: <891bd3390609150729k27b7acf8rc9b12f1e08eae93@mail.gmail.com>
Date: Fri, 15 Sep 2006 10:29:03 -0400
From: "Yaron Minsky" <yminsky@cs.cornell.edu>
Sender: yminsky@gmail.com
To: caml-list <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] The Future Possibility of Concurrent Garbage Collection?
In-Reply-To: <B4FCDE83-36F4-4FA6-9B11-06283C88CB76@inria.fr>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_152765_7635640.1158330543116"
References: <fd3d4e9d0609140840t740eef5ey6eee999ebe6b42e5@mail.gmail.com>
	 <B4FCDE83-36F4-4FA6-9B11-06283C88CB76@inria.fr>
X-Google-Sender-Auth: 1ee6f3322af4c634
X-Miltered: at discorde with ID 450AB8B1.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; yaron:01 minsky:01 yminsky:01 damien:01 damien:01 ocaml:01 run-time:01 threads:01 threads:01 abstractions:01 ocaml:01 posix:01 unix:01 unix:01 apis:01 

------=_Part_152765_7635640.1158330543116
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 9/15/06, Damien Doligez <damien.doligez@inria.fr> wrote:
>
>
> On 2006-09-14, at 17:40, Jim Battin wrote:
>
> > It seems Moore's law is taking us in the direction of more cores per
> > microprocessor with less effort placed on exploring ILP.  With the
> > advent of multi-core processors, and their inevitable ubiquity, are
> > there any plans, considerations, or ideas for a concurrent garbage
> > collector in Ocaml?
>
> It's very nice to have a concurrent run-time system, and we know how
> to do it (at significant cost), but it's not really worth the trouble
> until we have an answer to this question: what programming language
> features do we put on top of it?
>
> Shared memory with threads, locks, and conditions just doesn't cut
> it, in terms of writing programs that work.


I understand where you're coming from, but this point of view implies, I
think, an inappropriate division of labor between language designers and
language users.  I agree, ordinary shared-state concurrency with threads is
a disaster.  But the burden of figuring out how to write concurrent programs
in a reasonable way is not just the responsibility of the language designer
--- library writers can come up with good abstractions to take advantage of
threads as well.

That is, they could do so if they had access to threads with real
concurrency.  Right now, ocaml doesn't provide that, and it's a real
weakness of the language.  The lack of a concurrent GC, in my opinion,
stifles innovation in this area, at least within the caml world.

That said, I do understand that a concurrent GC is a big technical
challenge, and I can understand why the ocaml team isn't eager to take it on
right now.

> To my knowledge, Caml Light had a concurrent garbage collector under
> > development by Xavier Leroy but was abandoned due to significant
> > technical challenges.  Prior to that, there appears to have been some
> > academic research regarding concurrent GC (Doligez, Leroy).
>
> The development was done by myself, it was done before the
> publications, and as part of the academic research (like everything
> we do here).
>
> The most significant challenges are in making Posix threads work
> under Unix (threads and Unix signals just don't mix well, given the
> currently available APIs).
>
>
> In summary, you shouldn't hold your breath.  In my opinion, we
> will need some major breakthrough before we can make good use
> of multicore architectures in normal programs.  In any language.
>
> -- Damien
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_152765_7635640.1158330543116
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 9/15/06, <b class="gmail_sendername">Damien Doligez</b> &lt;<a href="mailto:damien.doligez@inria.fr">damien.doligez@inria.fr</a>&gt; wrote:<div><span class="gmail_quote"></span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>On 2006-09-14, at 17:40, Jim Battin wrote:<br><br>&gt; It seems Moore's law is taking us in the direction of more cores per<br>&gt; microprocessor with less effort placed on exploring ILP.&nbsp;&nbsp;With the<br>&gt; advent of multi-core processors, and their inevitable ubiquity, are
<br>&gt; there any plans, considerations, or ideas for a concurrent garbage<br>&gt; collector in Ocaml?<br><br>It's very nice to have a concurrent run-time system, and we know how<br>to do it (at significant cost), but it's not really worth the trouble
<br>until we have an answer to this question: what programming language<br>features do we put on top of it?<br><br>Shared memory with threads, locks, and conditions just doesn't cut<br>it, in terms of writing programs that work.
</blockquote><div><br>I understand where you're coming from, but this point of view implies,
I think, an inappropriate division of labor between language designers
and language users.&nbsp; I agree, ordinary shared-state concurrency with
threads is a disaster.&nbsp; But the burden of figuring out how to write
concurrent programs in a reasonable way is not just the responsibility
of the language designer --- library writers can come up with good
abstractions to take advantage of threads as well.&nbsp; <br><br>That is, they could do so if they had access to threads with
real concurrency.&nbsp; Right now, ocaml doesn't provide that, and it's a
real weakness of the language.&nbsp; The lack of a concurrent GC, in my
opinion, stifles innovation in this area, at least within the caml
world.
<br><br>That said, I do understand that a concurrent GC is a big
technical challenge, and I can understand why the ocaml team isn't
eager to take it on right now.&nbsp;&nbsp;</div><br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; To my knowledge, Caml Light had a concurrent garbage collector under
<br>&gt; development by Xavier Leroy but was abandoned due to significant<br>&gt; technical challenges.&nbsp;&nbsp;Prior to that, there appears to have been some<br>&gt; academic research regarding concurrent GC (Doligez, Leroy).<br>
<br>The development was done by myself, it was done before the<br>publications, and as part of the academic research (like everything<br>we do here).<br><br>The most significant challenges are in making Posix threads work
<br>under Unix (threads and Unix signals just don't mix well, given the<br>currently available APIs).<br><br><br>In summary, you shouldn't hold your breath.&nbsp;&nbsp;In my opinion, we<br>will need some major breakthrough before we can make good use
<br>of multicore architectures in normal programs.&nbsp;&nbsp;In any language.<br><br>-- Damien<br><br>_______________________________________________<br>Caml-list mailing list. Subscription management:<br><a href="http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: <a href="http://caml.inria.fr">http://caml.inria.fr</a><br>Beginner's list: <a href="http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group/ocaml_beginners
</a><br>Bug reports: <a href="http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a><br></blockquote></div><br>

------=_Part_152765_7635640.1158330543116--

