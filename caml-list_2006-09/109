Return-Path: <fw@deneb.enyo.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0E812BC50
	for <caml-list@yquem.inria.fr>; Fri, 15 Sep 2006 22:27:29 +0200 (CEST)
Received: from mail.enyo.de (mail.enyo.de [212.9.189.167])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k8FKRPrx015168
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Fri, 15 Sep 2006 22:27:28 +0200
Received: from deneb.vpn.enyo.de ([212.9.189.177] helo=deneb.enyo.de)
	by mail.enyo.de with esmtp id 1GOKHJ-0002Yi-EZ; Fri, 15 Sep 2006 22:27:13 +0200
Received: from fw by deneb.enyo.de with local (Exim 4.63)
	(envelope-from <fw@deneb.enyo.de>)
	id 1GOKH5-0004zc-8z; Fri, 15 Sep 2006 22:26:59 +0200
From: Florian Weimer <fw@deneb.enyo.de>
To: "Jim Battin" <jrbattin@gmail.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] The Future Possibility of Concurrent Garbage Collection?
References: <fd3d4e9d0609140840t740eef5ey6eee999ebe6b42e5@mail.gmail.com>
Date: Fri, 15 Sep 2006 22:26:59 +0200
In-Reply-To: <fd3d4e9d0609140840t740eef5ey6eee999ebe6b42e5@mail.gmail.com>
	(Jim Battin's message of "Thu, 14 Sep 2006 10:40:13 -0500")
Message-ID: <87odtg3mgc.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Miltered: at concorde with ID 450B0CAE.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 marshalling:01 advent:98 garbage:01 garbage:01 caml-list:01 florian:03 seems:03 seems:03 concurrent:03 concurrent:03 processors:04 ilp:07 execute:08 i'm:08 

* Jim Battin:

> It seems Moore's law is taking us in the direction of more cores per
> microprocessor with less effort placed on exploring ILP.  With the
> advent of multi-core processors, and their inevitable ubiquity, are
> there any plans, considerations, or ideas for a concurrent garbage
> collector in Ocaml?

Right now, concurrent garbage collection seems to offer significantly
less throughput.  I'm not sure if it's worth all the effort.

Another thing that might be interesting is a way to execute multiple
run-times with independent heaps in a single process, with Ada-style
rendezvous betweeen them and a special low-overhead form of
marshalling.

