Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA20221 for caml-redistribution; Thu, 7 Oct 1999 14:18:10 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA09143 for <caml-list@pauillac.inria.fr>; Thu, 7 Oct 1999 11:19:49 +0200 (MET DST)
Received: from alcaudon.tsc.uc3m.es (alcaudon.tsc.uc3m.es [163.117.145.35])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id LAA03675
	for <caml-list@inria.fr>; Thu, 7 Oct 1999 11:19:38 +0200 (MET DST)
Received: from tsc.uc3m.es (garza.tsc.uc3m.es [163.117.145.203])
          by alcaudon.tsc.uc3m.es (Netscape Messaging Server 3.6)
           with ESMTP id AAA358F; Thu, 7 Oct 1999 11:19:35 +0200
Received: from tsc.uc3m.es (fenix [163.117.145.58])
	by tsc.uc3m.es (8.9.3/8.9.3) with ESMTP id LAA04075;
	Thu, 7 Oct 1999 11:19:35 +0200 (MET DST)
Message-ID: <37FC6572.719AD12D@tsc.uc3m.es>
Date: Thu, 07 Oct 1999 11:18:42 +0200
From: "Francisco Valverde Albacete" <fva@tsc.uc3m.es>
X-Mailer: Mozilla 4.51 [en] (WinNT; I)
X-Accept-Language: en
MIME-Version: 1.0
To: Ohad Rodeh <orodeh@cs.cornell.edu>
CC: caml-list@inria.fr
Subject: Re: Stdlib regularity
References: <Pine.LNX.4.10.9910060925320.18180-100000@mojave.cs.cornell.edu>
Sender: weis

Ohad Rodeh wrote:

> Caml list,
>   I have used OCaml extensively in the past few years, and I've had
> some misgivings about the CAML standard library argument ordering. It
> is a little bit confusing and not standard. For example:

Greetings, everybody,

I have my opinion about argument order too! However, I have also read the
proposals by other people and I guess all of us have their bit of reason.
C'mon, even the implementors of the language and its their own child!

Now, the work of the OLabl group is much more daring and advanced than any
of the proposals *we* can make: It allows free order of parameters (with
certain restrictions). It involves also named parameters, missing arguments
and default values (which can deal more elegantly with obnoxious default
comparison functions for aggregate types like sets and priority queues). It
can also accept OCaml-like function types. Take a look at
http://pauillac.inria.fr/olabl

Alas, for one of particular "features" above mentioned (I don't remember
which) there is a time penalty in runtime, although minor if I remember well
(Any explanations from J.Garrigue or J.P. Furuse)? But we never got into
OCaml strictly for time-efficiency reasons, did we?

The most important consideration is that the OLabl people are not *the OCaml
people* and their work remains different (if faithful to releases of the
original language. I guess both teams are closely related?). And that has
always been my main deterrent for not adhering to OLabl: I use all its tools
*except* this particular feature with the types of functions, for fear I'll
be left out of the main OCaml tool development.

Any gues what comes next? *YES* can I ask the OCaml implemtors if there are
any plans to consider implementing OLabl's typing discipline/suggestions as
an alternative to OCaml's more rigid one while maintaining the present
scheme for compatibility's sake?

Thanks for your attention!

        Francisco Valverde
        Universidad Carlos III de Madrid

Resume' en francais:

Pourquoi ne profite-t-on pas des advantages de la discipline de typage de
OLabl dans OCaml? Merci.



