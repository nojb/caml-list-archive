Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA25308 for caml-redistribution; Thu, 7 Oct 1999 14:12:21 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA07595 for <caml-list@pauillac.inria.fr>; Thu, 7 Oct 1999 06:45:01 +0200 (MET DST)
Received: from ruby (pm1-16.triode.net.au [203.63.235.32])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id GAA29597
	for <caml-list@inria.fr>; Thu, 7 Oct 1999 06:44:54 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id RAA03052;
	Thu, 7 Oct 1999 17:33:25 +1000
Sender: weis
Message-ID: <37FC4CC5.BDA728A9@maxtal.com.au>
Date: Thu, 07 Oct 1999 17:33:25 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal P/L
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Ohad Rodeh <orodeh@cs.cornell.edu>
CC: caml-list@inria.fr
Subject: Re: Stdlib regularity
References: <Pine.LNX.4.10.9910060925320.18180-100000@mojave.cs.cornell.edu>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Ohad Rodeh wrote:
> 
> Caml list,
>   I have used OCaml extensively in the past few years, and I've had
>  some misgivings about the CAML standard library argument ordering.
>  What do you think?

While I tend to agree with the sentiment (and, apart from just
remembering
the ordering, the most likely Currying isn't possible when the data
structure
type isn't the first argument), it would create a compatibility
problem to just change the existing library, and a mess to add a new set
of modules just to 'fix' the argument order to be slightly more
intuitive.
I guess the original reasoning was more to do with reading order:

	List.mem element theList

reads well as

	element <is member of> theList

This kind of issue (argument order) was much more important in C++,
where generics represented by templates _mandate_ consistency
(in the naming conventions as well). Even before the STL was finalised,
it was being used enough that people argued against changing it
to avoid breaking code.

It is probably more important to consider how to introduce
FISh 2 style polymorphism, in which functions like 'map'
and 'iter' can be applied to _any_ data structure.
In that case, you gain consistency automatically, since there
is _really_ only one such algorithm for all data structures :-)

A more limited way to achieve this is to use an STL style
library; that is, iterator based algorithms, with the client
supplying the iterators.

-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



