Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA31734 for caml-redistribution; Mon, 11 Oct 1999 19:28:44 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA13724 for <caml-list@pauillac.inria.fr>; Mon, 11 Oct 1999 02:57:53 +0200 (MET DST)
Received: from ruby (pm1-25.triode.net.au [203.63.235.41])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id CAA00207
	for <caml-list@inria.fr>; Mon, 11 Oct 1999 02:57:49 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id KAA10191;
	Mon, 11 Oct 1999 10:51:38 +1000
Sender: weis
Message-ID: <3801349A.5D1163BD@maxtal.com.au>
Date: Mon, 11 Oct 1999 10:51:38 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal P/L
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: William Chesters <williamc@dai.ed.ac.uk>
CC: caml-list@inria.fr
Subject: Re: Proposal for study: Add a categorical Initial type to ocaml
References: <Pine.LNX.4.10.9910060925320.18180-100000@mojave.cs.cornell.edu>
		<37FC6572.719AD12D@tsc.uc3m.es>
		<37FE1E1F.4790FE85@maxtal.com.au>
		<ya2n1tsb1ew.fsf@po.maya.com>
		<38002EBF.DF0EF779@maxtal.com.au> <24984.199910102105@buckie>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

William Chesters wrote:
> 
> skaller writes:
>  > > > Boxed values can use a null pointer for none.
>  > >
>  > > I have a question--how is this different (except for the efficiency of
>  > > using null) from using a 'a option array?
>  >
>  >      It isn't, in theory, it is exactly the same (and therefore sound).
> 
> I think (correct me if I'm wrong, sorry) that this is a return to an
> issue which seems to be a bit of an FAQ.
> 
> The problem is that if you have a value of the type `int option
> option', you have to be able to distinguish between `None' and `Some
> None'!  If both the enumeration-indirections are elided, you can't; if
> only one of them is, you have inconsistency which would presumably
> have to be resolved using whole-program optimisation or something.

You are right. Note, however, that the 'initial' value would
never be available to the client, since any attempt to get it
would throw an exception, and in that case there is no need to
distinguish the cases.

To put it another way: programming languages generally
distinguish isomorphic objects, for example

	((), x) (* type is unit * int *)

is isomorphic to

	x  (* type is int *)

but they are distinguished in _client_ code. 
The compiler may be able to use the isomorphism to achieve
an optimisation in the representation. 

However, this is not the way initial works, since the client
can never sensibly test for this value, since every attempt to do so
would either fail or raise an exception. That is,
while in the case of 'a option:

	match x with
	| Some x' -> do_something x'
	| None -> do_nothing

it makes sense for do_nothing to do some kind of work, in the
case of initial, it always signifies a programming error.
So there is no need to distinguish the isomorphic cases here:
unlike client code 'Initial' means 'forbidden', the action
on the 'None' case is built in (raise an exception).


-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



