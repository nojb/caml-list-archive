Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA30063 for caml-redistribution; Sun, 10 Oct 1999 22:20:06 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA02122 for <caml-list@pauillac.inria.fr>; Sun, 10 Oct 1999 08:20:40 +0200 (MET DST)
Received: from ruby (pm1-27.triode.net.au [203.63.235.43])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id IAA19062
	for <caml-list@inria.fr>; Sun, 10 Oct 1999 08:20:33 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id QAA09438;
	Sun, 10 Oct 1999 16:14:23 +1000
Sender: weis
Message-ID: <38002EBF.DF0EF779@maxtal.com.au>
Date: Sun, 10 Oct 1999 16:14:23 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal P/L
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: John Prevost <prevost@maya.com>
CC: caml-list@inria.fr
Subject: Re: Proposal for study: Add a categorical Initial type to ocaml
References: <Pine.LNX.4.10.9910060925320.18180-100000@mojave.cs.cornell.edu> <37FC6572.719AD12D@tsc.uc3m.es> <37FE1E1F.4790FE85@maxtal.com.au> <ya2n1tsb1ew.fsf@po.maya.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

John Prevost wrote:
> 
> skaller <skaller@maxtal.com.au> writes:
> 
> > A better name than $ is probably 'none'.
> > Boxed values can use a null pointer for none.
> > Integers and floats can be treated as follows:
> > do not initialise them at all, if -unsafe is
> > specified. Otherwise, use the spare value of integers
> > and some NaN for floats, and insert tests
> > for all read accesses.
> 
> I have a question--how is this different (except for the efficiency of
> using null) from using a 'a option array?  The array still must be
> initialized--in this case to all null, or in the unsafe case, well,
> it's unsafe.

	It isn't, in theory, it is exactly the same (and therefore sound).
The difference lies in the way it is represented: using the initial
the 'a option wrapping is done by the system, not the client programmer
(sort of like a Haskell monad) and therefore is more robust, more
efficient, and leaves the client code cleaner. This is much the
same argument as for exceptions. 

> If anything, I would argue that this points at representing 'a option
> specially for already boxed values by using a null pointer for None,
> rather than having a special strange value that comes out of arrays
> and magically creates exceptions.

	That would make 'a option faster to use, but still require
the overhead of writing code that needless does matches where
it is known (dynamically) that only one of the cases can be used (such
as in
a variable length array).
 
> Again, rather than introduce new features into the language, add a new
> unsafe optimization and make the option type more efficient for boxed
> values.

The initial is not 'strange',
rather it is fundamental, the dual of the 'unit' type.

-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



