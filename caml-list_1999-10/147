Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA31488 for caml-redistribution; Fri, 15 Oct 1999 08:50:11 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA28645 for <caml-list@pauillac.inria.fr>; Fri, 15 Oct 1999 00:50:06 +0200 (MET DST)
Received: from ruby (pm1-25.triode.net.au [203.63.235.41])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id AAA08453
	for <caml-list@inria.fr>; Fri, 15 Oct 1999 00:50:02 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id IAA16844;
	Fri, 15 Oct 1999 08:43:55 +1000
Sender: weis
Message-ID: <38065CAA.6694C79B@maxtal.com.au>
Date: Fri, 15 Oct 1999 08:43:54 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Manuel Fahndrich <maf@microsoft.com>
CC: caml-list@inria.fr
Subject: Re: Proposal for study: Add a categorical Initial type to ocaml
References: <783D93998201D311B0CF00805FEAA07B7E8F5E@RED-MSG-42>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Manuel Fahndrich wrote:
> 
> skaller wrote:
> 
>         [...]
> 
>         > Like I've been saying, with option you can turn it off, with
> Obj.magic, the implementor ought to be damned sure he's doing things right.  
> But with these special "uninitialized value" sorts of things, people like
> me who've gotten used to good type systems keep looking over their
> shoulders because they're afraid it might turn around and bite
> them in the butt.
> 
>>                 How is this different from Obj.magic? Can't that bite you
>>         in the ass too?
> 
>>> The difference is that in the first case of uninitialized values, they can
>>> crop up anywhere in your program, since they get propagated. Using Obj.magic
>>> within a special module such as resizable arrays confines the danger to that
>>> module. The programmer can make sure (through extensive code reviews of a
>>> finite piece of code) that outside the module, things cannot go awry.

	No. It is the other way around. Obj.magic values can get
propagated, and so cause a problem. The special initial can NOT
be propagated. Any attempt to copy such a value raises an exception.
Ensuing this does not happen is also a matter of hiding within
a modular abstraction, but at least an exception will help
detect such localised errors.

-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



