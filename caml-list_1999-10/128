Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA25271 for caml-redistribution; Wed, 13 Oct 1999 09:10:20 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA15267 for <caml-list@pauillac.inria.fr>; Tue, 12 Oct 1999 22:14:16 +0200 (MET DST)
Received: from ruby (pm1-22.triode.net.au [203.63.235.38])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id WAA28408
	for <caml-list@inria.fr>; Tue, 12 Oct 1999 22:14:10 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id GAA12287;
	Wed, 13 Oct 1999 06:07:48 +1000
Sender: weis
Message-ID: <38039513.41E0B135@maxtal.com.au>
Date: Wed, 13 Oct 1999 06:07:47 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal P/L
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Gerd.Stolpmann@darmstadt.netsurf.de
CC: William Chesters <williamc@dai.ed.ac.uk>, caml-list@inria.fr
Subject: Re: speed versus C
References: <24949.199910102048@buckie> <99101201303001.12255@ice>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Gerd Stolpmann wrote:

> I was surprised by Caml when I tried it because it was not so slow than I
> expected. My point is that there are even some practically useful constructs in
> Caml which are faster than the construct a programmer would typically choose in
> the same situation in the "traditional" language. I can even imagine that
> functional languages are some day faster than traditional ones because medium-
> and high-level optimizations are better applicable. But this is only a dream.

I do not think it is a dream at all, but current reality with ocaml,
using it where it performs well. For example, a naive interpreter
for Python in ocaml is bound to be slower than C. However,
much sophistication is possible, such as infering types,
eliding dynamic lookup by string names, and recognising various
patterns, which, when implemented in C, would likely cost
a similar amount of processor time -- and take 10-100 times
longer to code, and remain unreliable. Perhaps C++ would
reduce the coding time to only 10 times longer, and improve
the reliability. But, for example, to add GC to Python,
is non-trivial in C, whereas in ocaml it is quite easy :-)

Consider also, FISh is an algol like language, like Ocaml
mixing functional and imperative features, and it 
outperforms C and Fortran for the same applications.
[For example, FISh quicksort is faster than the C
standard library qsort, because there is no function
calling overhead]

I think my point is that it isn't 'only a dream',
many people are not only dreaming, but implementing
some of it. [including the ocaml developers, for many years now].

-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



