Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA01989 for caml-redistribution; Wed, 6 Oct 1999 16:19:44 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA18756 for <caml-list@pauillac.inria.fr>; Wed, 6 Oct 1999 01:23:21 +0200 (MET DST)
Received: from igw3.watson.ibm.com (igw3.watson.ibm.com [198.81.209.18])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id BAA19517
	for <caml-list@inria.fr>; Wed, 6 Oct 1999 01:23:20 +0200 (MET DST)
From: chet@watson.ibm.com
Received: from mailhub.watson.ibm.com (mailhub.watson.ibm.com [9.2.250.97])
	by igw3.watson.ibm.com (8.9.3/8.9.3/05-14-1999) with ESMTP id TAA14398;
	Tue, 5 Oct 1999 19:23:17 -0400
Received: from nautilus.chet.org (lig32-225-254-198.us.lig-dial.ibm.com [32.225.254.198]) by mailhub.watson.ibm.com (8.8.7/Feb-20-98) with ESMTP id TAA15022; Tue, 5 Oct 1999 19:23:14 -0400
Received: from bismarck.chet.org (root@bismarck.chet.org [192.168.10.15])
	by nautilus.chet.org (8.8.8/8.8.8/Debian/GNU) with ESMTP id TAA05975;
	Tue, 5 Oct 1999 19:24:07 -0400
Received: from bismarck.chet.org (chet@localhost [127.0.0.1])
	by bismarck.chet.org (8.8.8/8.8.8/Debian/GNU) with ESMTP id TAA00554;
	Tue, 5 Oct 1999 19:22:44 -0400
Message-Id: <199910052322.TAA00554@bismarck.chet.org>
To: skaller <skaller@maxtal.com.au>
cc: Jan Brosius <jan.brosius@village.uunet.be>, OCAML <caml-list@inria.fr>
Subject: Re: speed versus C 
In-reply-to: Your message of Tue, 05 Oct 1999 07:59:37 +1000.
             <37F92349.4C043735@maxtal.com.au> 
Date: Tue, 05 Oct 1999 19:22:44 -0400
Sender: weis


The Caml XML parser I wrote was competitive with XML4C (slightly faster),
and blew XML4J out of the water (10x).

This was using the native-code compiler.

The Caml XSL processor I wrote handily beat Java XSL processors.

My guess is that if you're thinking of writing in C, and you don't
need low-level access to real memory and such, you will find that CAML
is more than fast enough.

--chet--



