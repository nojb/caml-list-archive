Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA27299 for caml-redistribution; Tue, 5 Oct 1999 10:16:17 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA30891 for <caml-list@pauillac.inria.fr>; Mon, 4 Oct 1999 23:49:01 +0200 (MET DST)
Received: from ruby (pm1-5.triode.net.au [203.63.235.21])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id XAA21567
	for <caml-list@inria.fr>; Mon, 4 Oct 1999 23:48:57 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by ruby (8.9.3/8.9.3) with ESMTP id HAA08664;
	Tue, 5 Oct 1999 07:59:37 +1000
Sender: weis
Message-ID: <37F92349.4C043735@maxtal.com.au>
Date: Tue, 05 Oct 1999 07:59:37 +1000
From: skaller <skaller@maxtal.com.au>
Organization: Maxtal P/L
X-Mailer: Mozilla 4.51 [en] (X11; I; Linux 2.2.12 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Jan Brosius <jan.brosius@village.uunet.be>
CC: OCAML <caml-list@inria.fr>
Subject: Re: speed versus C
References: <000f01bf0de7$2f626fd0$240cbed4@jannt>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Jan Brosius wrote:
> 
> Hi, is there anything known about the efficiency of compiled Ocaml code
> compared with C/C++

For what it is worth, I am writing an extensive test in the form of
a Python interpreter. C Python is reasonably efficient for certain
operations. The current Ocaml implementation is only 10 times slower
than the C version, running on the pystone benchmark,
and I expect that will be reduced considerably
as I improve the algorithms and data structures.

While an interpreter isn't a benchmark, it is a useful performance
measure because it exercises so much of the language, and in ways
determined partly by the code being interpreted.

It is my guess that, partly due to the higher level nature of ocaml
compared with C, it is possible to encode more optimisations
in the ocaml version than the C version, so that the ocaml
version may even run faster than the C one (simply because
encoding the pattern recognition for the cases in C is
hard to program).

BTW: I would like to see performance (Order) data for library functions.
It is difficult to chose a data structure without knowing
how fast various operations can be expected to perform.
For example, how fast are insertions into Set and Map?
In procedural code, these would be amortized constant time,
or at worst O(log n), by using hashtables or some efficient
tree representation, but the ocaml library versions
are FUNCTIONAL so I have no idea how fast the functional updates
are compared, with say, the in place modification of a hashtable.

-- 
John Skaller, mailto:skaller@maxtal.com.au
1/10 Toxteth Rd Glebe NSW 2037 Australia
homepage: http://www.maxtal.com.au/~skaller
downloads: http://www.triode.net.au/~skaller



