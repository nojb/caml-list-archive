Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA25422 for caml-redistribution; Thu, 7 Oct 1999 17:51:13 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA26038 for <caml-list@pauillac.inria.fr>; Thu, 7 Oct 1999 17:48:04 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id RAA07650;
	Thu, 7 Oct 1999 17:48:03 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA10893; Thu, 7 Oct 1999 17:48:02 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <199910071548.RAA10893@pauillac.inria.fr>
Subject: Re: speed versus C
To: williamc@dai.ed.ac.uk (William Chesters)
Date: Thu, 7 Oct 1999 17:48:02 +0200 (MET DST)
Cc: caml-list@inria.fr
In-Reply-To: <199910071046.LAA02740@toy.william.bogus> from "William Chesters" at Oct 7, 99 11:46:42 am
X-Mailer: ELM [version 2.4 PL24 ME8]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> Equally, it's not a good idea to adopt too much ref-trans style, and
> ocaml, thank heavens, supports both very well.  Imperative programming
> is either better from an efficiency point of view, or stylistically
> closer to the best way of thinking about the problem, or both.

Yes, Caml was designed to provide as good support as possible for both
functional and imperative programming style, and to encourage
a smooth interaction between the two styles in user's programs.

To be precise, we claim for decades now, that the power of Caml is
its ability to handle a free mixture of various programming styles.

That's why the logo I prefer for Caml is a Yin-Yang sign where the dots
are replaced by a $\lambda$ and a \verb":="...
(See http://cristal.inria.fr/~weis/books-fra.html to get an idea of
the image).

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://cristal.inria.fr/~weis/



