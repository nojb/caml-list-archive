Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA21940 for caml-redistribution; Mon, 11 Oct 1999 19:31:28 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA32423 for <caml-list@pauillac.inria.fr>; Mon, 11 Oct 1999 11:08:06 +0200 (MET DST)
Received: from post.tepkom.ru (post.tepkom.ru [195.9.10.12])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id LAA02092
	for <caml-list@pauillac.inria.fr>; Mon, 11 Oct 1999 11:08:04 +0200 (MET DST)
Received: (from msk@localhost)
	by post.tepkom.ru (8.9.3/8.9.3) id NAA00731
	for caml-list@pauillac.inria.fr.ANTIVIRUS; Mon, 11 Oct 1999 13:08:14 +0400
Received: from localhost (msk@localhost)
	by post.tepkom.ru (8.9.3/8.9.3) with ESMTP id NAA00700;
	Mon, 11 Oct 1999 13:08:01 +0400
X-Authentication-Warning: post.tepkom.ru: msk owned process doing -bs
Date: Mon, 11 Oct 1999 13:08:01 +0400 (MSD)
From: Anton Moscal <msk@post.tepkom.ru>
To: skaller <skaller@maxtal.com.au>
cc: Caml list <caml-list@pauillac.inria.fr>
Subject: Re: speed versus C
In-Reply-To: <38001B53.BD6283EE@maxtal.com.au>
Message-ID: <Pine.LNX.4.03.9910111255580.298-100000@post.tepkom.ru>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis

On Sun, 10 Oct 1999, skaller wrote:

> > Assignment to array element can be very ineffictive in O'Caml due to the
> > following reasons:
> > 
> > 1)O'Caml uses generational GC. 
> 
> 	Can you explain what a 'generational' collector is?

http://www.iecc.com/gclist/GC-faq.html

This page contains very good introduction into main garbage collection 
algorithms. From this FAQ:

-------------------------
 Generational collection

Based on the observation that most objects have short lifetimes, it is
useful to restrict garbage collection to the most recently allocated objects. 

A generational collector maintains several ``generations'' of objects.
Newly created objects are all put in the ``youngest'' generation, and
when the space allocated for that generation is full, the collector will
use the root set (and any pointers from older generations to the youngest
generation -- see below) to reclaim dead objects from the youngest
generation only, leaving the ``older'' generations untouched. Objects
that survive after several (perhaps just one) collection of the youngest
generation are ``promoted'' to the next older generation, and when that
generation becomes full, it and all the generations younger than it are
collected. 

The difficulty with generational collectors is the identification of
pointers from older generations into younger ones. An observation is that
such references are uncommon in most programs: new objects typically
point to older objects; this is clearly true in pure functional languages
where assignment is prohibited, but is common for many programs and
languages. Nonetheless, such references do exist, and a collector must
handle them. When a pointer to a younger generation object is written
into an old object, the pointer (or just the old object) is recorded so
it can be scanned when the younger generation is collected.
------------------------

O'Caml uses simple algorithm with two generations: young & old objects. 

Regards,
Anton Moscal



