Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA19922 for caml-redistribution; Thu, 9 Sep 1999 18:36:23 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA02068 for <caml-list@pauillac.inria.fr>; Wed, 8 Sep 1999 21:29:18 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id VAA24143;
	Wed, 8 Sep 1999 21:29:11 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA01255; Wed, 8 Sep 1999 21:29:11 +0200 (MET DST)
Message-ID: <19990908212911.30954@pauillac.inria.fr>
Date: Wed, 8 Sep 1999 21:29:11 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: "Charles 'Buck' Krasic" <krasic@cse.ogi.edu>, caml-list@inria.fr
Subject: Re: -output-obj and shared libraries?
References: <199909071601.JAA00745@giove.cse.ogi.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <199909071601.JAA00745@giove.cse.ogi.edu>; from Charles 'Buck' Krasic on Tue, Sep 07, 1999 at 09:01:30AM -0700
Sender: weis
Content-Length: 1156
Lines: 31

> My target platform is Linux/x86.  
> Is it possible to create a .so object from ocaml?   

It depends what you want to put in the shared library and how you
want to use it.

>From your mention of the -output-obj option, I infer that you'd like
to build a shared library that contains some Caml code, some C
wrappers around the Caml code, and a copy of the Caml runtime system.
This is easy to do.  Referring to the example at the end of the
"Interfacing C with Objective Caml" chapter, you'd do:

        ocamlc -custom -output-obj -o modcaml.o mod.ml
        ocamlc -c modwrap.c
	gcc -shared -Wl,-soname,libmod.so.1 -o libmod.so.1.0 \
                modwrap.o modcaml.o /usr/local/lib/ocaml/libcamlrun.a

and then install libmod.so.1.0 in a public place as usual.  Then you
can dynamically link against libmod using -lmod or dlopen().

If your question is about building shared libraries of Caml code that
can be linked dynamically against other Caml code, we don't know yet
how to do this.  A Caml program can load bytecode Caml object files at
run-time using the Dynlink library, but that's not quite the same
thing.

Best regards,

- Xavier Leroy



