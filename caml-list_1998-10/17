Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA13718 for caml-redistribution; Fri, 9 Oct 1998 17:29:04 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA10194 for <caml-list@pauillac.inria.fr>; Fri, 9 Oct 1998 15:00:00 +0200 (MET DST)
Received: from isis.lip6.fr (isis.lip6.fr [132.227.60.2])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id OAA22608;
	Fri, 9 Oct 1998 14:59:58 +0200 (MET DST)
Received: from spi.lip6.fr (monbazillac.lip6.fr [132.227.82.65])
          by isis.lip6.fr (8.8.8/jtpda-5.2.9.1+lip6) with ESMTP id OAA23729
          ; Fri, 9 Oct 1998 14:59:57 +0200 (MET DST)
Received: from ventoux.lip6.fr (root@ventoux.lip6.fr [132.227.83.34])
          by spi.lip6.fr (8.8.6/jtpda-5.2) with ESMTP id OAA17527
          ; Fri, 9 Oct 1998 14:59:55 +0200 (MET DST)
Received: from ventoux.lip6.fr (boulme@localhost [127.0.0.1])
          by ventoux.lip6.fr (8.8.8/jtpda-5.2) with ESMTP id PAA01591
          ; Fri, 9 Oct 1998 15:12:05 +0200
Message-Id: <199810091312.PAA01591@ventoux.lip6.fr>
X-Mailer: exmh version 1.6.9 05/05/96
To: Serge Fantino <fantino@math.unice.fr>
cc: Jerome Vouillon <Jerome.Vouillon@inria.fr>,
        Vyskocil Vladimir <vyskocil@math.unice.fr>, caml-list@inria.fr
Subject: Re: porte des definitions / initialisation des variables de classe 
In-reply-to: Your message of "Thu, 08 Oct 1998 14:42:01 BST."
             <361CC129.8F7CA6E3@math.unice.fr> 
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: quoted-printable
Date: Fri, 09 Oct 1998 15:12:05 +0200
From: "Sylvain BOULM'E" <Sylvain.Boulme@lip6.fr>
Sender: weis


Bonjour,

> Pour moi, l'implémentation de caml devrait vérifier:
> "les variables d'instances sont initialisées à chaque création d'=
un nouvel objet".
> Cela dit, je peux complètement me tromper, ne pas voir l'évidence, =
etre le seul à
> trouver le fonctionnement actuel "counter-intuitive".

Le probleme que tu enonces releve d'un choix. Le tien a l'avantage
d'etre plus simple. Celui des developpeurs de Ocaml, qui est celui
de l'evaluation "lazy" (on evalue le plus tot possible), a l'avantage
d'etre plus efficace (on evalue qu'une fois des expressions, qui dans ton=

choix sont evaluees plusieurs fois) tout en etant plus general (car on =

peut quand meme ecrire facilement les programmes que tu as envie d'ecrire=
). =


De mon point de vue, la difference de comportement (d'un point de vue =

semantique)
entre les deux intervient lorsqu'on programme avec "effets de bord". Et d=
ans =

ce cas,
il faut de toute facon mieux s'interroger plusieurs fois sur la maniere d=
ont =

les expressions
sont evaluees. La solution de Ocaml me convient donc totalement...

Cordialement,

Sylvain.




