Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA18933 for caml-redistribution; Wed, 7 Oct 1998 17:23:47 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA22361 for <caml-list@pauillac.inria.fr>; Wed, 7 Oct 1998 12:04:03 +0200 (MET DST)
Received: from isis.lip6.fr (isis.lip6.fr [132.227.60.2])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id MAA01623
	for <caml-list@inria.fr>; Wed, 7 Oct 1998 12:04:01 +0200 (MET DST)
Received: from spi.lip6.fr (monbazillac.lip6.fr [132.227.82.65])
          by isis.lip6.fr (8.8.8/jtpda-5.2.9.1+lip6) with ESMTP id MAA26020
          ; Wed, 7 Oct 1998 12:03:57 +0200 (MET DST)
Received: from ventoux.lip6.fr (root@ventoux.lip6.fr [132.227.83.34])
          by spi.lip6.fr (8.8.6/jtpda-5.2) with ESMTP id MAA02581
          ; Wed, 7 Oct 1998 12:03:56 +0200 (MET DST)
Received: from ventoux.lip6.fr (boulme@localhost [127.0.0.1])
          by ventoux.lip6.fr (8.8.8/jtpda-5.2) with ESMTP id MAA18740
          ; Wed, 7 Oct 1998 12:16:02 +0200
Message-Id: <199810071016.MAA18740@ventoux.lip6.fr>
X-Mailer: exmh version 1.6.9 05/05/96
To: Serge Fantino <fantino@math.unice.fr>
cc: "Sylvain BOULM'E" <Sylvain.Boulme@lip6.fr>, caml-list@inria.fr,
        Vyskocil Vladimir <vyskocil@math.unice.fr>
Subject: Re: porte des definitions des variables de classe 
In-reply-to: Your message of "Tue, 06 Oct 1998 17:12:57 BST."
             <361A4189.AFB9947D@math.unice.fr> 
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: quoted-printable
Date: Wed, 07 Oct 1998 12:16:01 +0200
From: "Sylvain BOULM'E" <Sylvain.Boulme@lip6.fr>
Sender: weis

Bonjour,

> - elle est ambigue;
> Cela va a l'encontre du "sens commun". =


C'est vrai que ca peut sembler bizarre, mais je trouve =

cela assez coherent avec le reste de Ocaml.

Par exemple :

 let toto = let a=ref 0 in function () -> (a:=!a+1; !a)
 in (toto (); toto ());;

retourne 2

Alors que

 let tutu () = let a=ref 0 in function () -> (a:=!a+1; !a);;
 in (tutu () (); tutu () ());;

retourne 1

> D'ailleurs, il est confondant de voir que la déclaration suivante:
> class test3 =
> object
>     val mutable v = 5
>     method get = v
>     method set x = v<-x
> end;;

Il ne faut pas confondre variable mutable et reference. Une reference
est un "record" avec un champ mutable. =

  # ref 1;;
  - : int ref = {contents=1}
Donc si dans "let v=ref 1", v designe ce "record" et non pas le champ =

"mutable".

> Il suffit de supprimer ou d'ajouter un paramètre à une classe pour =
en changer
> complètement la sémantique.

C'est pareil pour "tutu" et "toto".

> - elle n'est pas consistante
> Rien ne me previent du changement de fonctionnalité dans ce cas parti=
culier.
> Il suffit de supprimer ou d'ajouter un paramètre à une classe pour =
en changer
> complètement la sémantique.

> - elle n'est pas necessaire;
> Si on en a besoin, on peut simplement partager des variables "statiques=
"
> entre différentes instances de la meme classe.

> Enfin c'est mon avis d'utilisateur. Pour la petite histoire, il m'a fal=
lu
> tout un weekend pour comprendre pourquoi mon code ne marchait plus sous=

> OCaml-2.0, alors que la version 1.07 marche tres bien...

D'abord, sous Ocaml 1.07, on devait obligatoirement mettre un argument
a une classe : si on conserve cet argument, les classes Ocaml-2.0 se
comportent de la meme facon. Les classes de Ocaml-2.0 sont en fait plus
generales que celles de Ocam 1.07

En fait, pour eviter ces possibles confusions, je pense qu'on ne devrait
utiliser les variables d'instances "val" que vraiment quand elles sont de=
s =

variables d'instances (ie quand elles sont destinees a evoluer, de facon
"imperative" ou "fonctionnelle", par copie d'objet). Sur mes exemples
precedents, on devrait ecrire test1 comme cela :
 =

 class test1 = =

   let v=ref 5 in
    object
      method get= !v
      method set x= v:=x
    end;;


Par contre, il est vrai que je trouve surprenant que :

  class test2 =
    let v=ref 5
    in fun () -> =

          object =

            method get = !v
            method set x = v:= x
         end;;

  let f=new test2 in =

    let a=f() and b=f() in (b#set 4; a#get);;

retourne 5

au lieu de retourner 4, comme on s'y attenderait....



Sylvain.





