Return-Path: <SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C92177EEB4
	for <caml-list@sympa.inria.fr>; Sun,  3 Feb 2013 15:39:08 +0100 (CET)
Received-SPF: Neutral (mail3-smtp-sop.national.inria.fr: domain
  of simon.cruanes.2007@m4x.org does not assert whether or not
  129.104.30.34 is permitted sender) identity=pra;
  client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org";
  x-sender="simon.cruanes.2007@m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org";
  x-sender="SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=qwa8=L3=m4x.org=simon.cruanes.2007@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgoEACZ1DlGBaB4if2dsb2JhbABEhkimA4lHAYkgFg4BAQsLCggUJ4IfAQEBBAECIEkCBhEECxEEAQEBDRoDAgIoHQEJCAYBEhIJh2QDDwQIrSKHZgOJYI0PgzCBEwOTbYIygR2SMQ
X-IPAS-Result: AgoEACZ1DlGBaB4if2dsb2JhbABEhkimA4lHAYkgFg4BAQsLCggUJ4IfAQEBBAECIEkCBhEECxEEAQEBDRoDAgIoHQEJCAYBEhIJh2QDDwQIrSKHZgOJYI0PgzCBEwOTbYIygR2SMQ
X-IronPort-AV: E=Sophos;i="4.84,593,1355094000"; 
   d="scan'208,217";a="906670"
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 03 Feb 2013 15:35:15 +0100
Received: from android-11593d1dd160940 (143.16.80.79.rev.sfr.net [79.80.16.143])
	(using TLSv1 with cipher RC4-MD5 (128/128 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 2904A140C56C0;
	Sun,  3 Feb 2013 15:39:03 +0100 (CET)
User-Agent: K-9 Mail for Android
In-Reply-To: <017801ce0216$f2b2c020$d8184060$@ffconsultancy.com>
References: <510145A5.6030807@frisch.fr> <90C5BC201F264C4C902B4E7897660042@erratique.ch> <1359044659.30715.4@samsung> <51066BCA.1020201@frisch.fr> <017801ce0216$f2b2c020$d8184060$@ffconsultancy.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="----L2EFSAHW4GZVYIVLA7OZ3HSOJ663HK"
From: Simon Cruanes <simon.cruanes.2007@m4x.org>
Date: Sun, 03 Feb 2013 15:38:59 +0100
To: Jon Harrop <jon@ffconsultancy.com>,'caml-list' <caml-list@inria.fr>
Message-ID: <ed69b8dc-c0db-4045-a67a-ac22585a616f@email.android.com>
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Sun Feb  3 15:39:04 2013 +0100 (CET))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.000000, queueID=603BB140C56C2
X-Org-Mail: simon.cruanes.2007@polytechnique.org
Subject: RE: AW: [Caml-list] Working Group: the future of syntax extensions
 in OCaml, after camlp4


------L2EFSAHW4GZVYIVLA7OZ3HSOJ663HK
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 8bit

I like the idea of inline lexer/parsers. A problem I have with ocamllex/ocamlyacc is the fact that circular dependencies prevent from using/exporting a parser for some type in the same module where this type is defined. Inline parsers would allow to keep the type and its parser(s) defined together. First-class parsers, even better, would be great for composition.

Cheers, 
-- 
Simon


Jon Harrop <jon@ffconsultancy.com> a écrit :

>
>I worked on a commercial project written in OCaml in Q4 2012 that used
>stream parsing. However, my project was to translate the whole thing
>into
>F#...
>
>I never used stream parsing in any commercial code I wrote myself. I
>did use
>camlp4 quite a bit though and, I must say, the only problem I had was
>that
>it was never finished (the docs end in "..."!). Moreover, my main
>practical
>application of camlp4 was in using it to write parsers. Parsers written
>using Camlp4 are nicer than with any other tool I have ever used. Would
>be a
>shame if OCaml lost this or, if it did, gained the ability to write
>lex/yacc
>in-line without having to battle with multi-stage compilation and a
>wide
>selection of incomplete/broken build tools.
>
>Cheers,
>Jon.
>
>> -----Original Message-----
>> From: caml-list-request@inria.fr [mailto:caml-list-request@inria.fr]
>On
>Behalf
>> Of Alain Frisch
>> Sent: 28 January 2013 12:15
>> To: Gerd Stolpmann
>> Cc: Daniel Bünzli; caml-list; wg-camlp4@lists.ocaml.org; Leo P White;
>Anil
>> Madhavapeddy
>> Subject: Re: AW: [Caml-list] Working Group: the future of syntax
>extensions in
>> OCaml, after camlp4
>> 
>> On 01/24/2013 05:24 PM, Gerd Stolpmann wrote:
>> > It's used in the tool, but only for stream parsing. I could also
>> > distribute the already-preprocessed file (and maybe I'll do so in
>the
>> > next release).
>> >
>> > Stream parsing is certainly one of the topics to discuss.
>> 
>> I've no idea how widely stream parsing is used.  Has anyone some
>intuition
>> about this?
>> 
>> Stream parsers probably fall in the same category as bitstring or
>sedlex
>(custom
>> notions of pattern matching).  It seems that stream parsers (which
>I'm not
>> familiar with) require to be able to write expressions within
>"left-hand
>sides",
>> which might require special support.  Or maybe the whole left-hand
>sides
>should
>> just be quotations.
>> 
>> Anyway, for a basic infrastructure tool such as ocamlfind, I'd
>probably
>advocate
>> for a "manual" solution which works out of the box with a basic OCaml
>> installation (ocamlyacc or manual top-down parser).  Gerd: does that
>sound
>> reasonable to you?
>> 
>> 
>> Alain
>> 
>> 
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>-- 
>Caml-list mailing list.  Subscription management and archives:
>https://sympa.inria.fr/sympa/arc/caml-list
>Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>Bug reports: http://caml.inria.fr/bin/caml-bugs

------L2EFSAHW4GZVYIVLA7OZ3HSOJ663HK
Content-Type: text/html;
 charset=utf-8
Content-Transfer-Encoding: 8bit

<html><head/><body><html><head></head><body>I like the idea of inline lexer/parsers. A problem I have with ocamllex/ocamlyacc is the fact that circular dependencies prevent from using/exporting a parser for some type in the same module where this type is defined. Inline parsers would allow to keep the type and its parser(s) defined together. First-class parsers, even better, would be great for composition.<br>
<br>
Cheers, <br>
-- <br>
Simon<br><br><div class="gmail_quote"><br>
Jon Harrop &lt;jon@ffconsultancy.com&gt; a écrit :<blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
<pre style="white-space: pre-wrap; word-wrap:break-word; font-family: sans-serif; margin-top: 0px"><br />I worked on a commercial project written in OCaml in Q4 2012 that used<br />stream parsing. However, my project was to translate the whole thing into<br />F#...<br /><br />I never used stream parsing in any commercial code I wrote myself. I did use<br />camlp4 quite a bit though and, I must say, the only problem I had was that<br />it was never finished (the docs end in "..."!). Moreover, my main practical<br />application of camlp4 was in using it to write parsers. Parsers written<br />using Camlp4 are nicer than with any other tool I have ever used. Would be a<br />shame if OCaml lost this or, if it did, gained the ability to write lex/yacc<br />in-line without having to battle with multi-stage compilation and a wide<br />selection of incomplete/broken build tools.<br /><br />Cheers,<br />Jon.<br /><br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex;
border-left: 1px solid #729fcf; padding-left: 1ex;">-----Original Message-----<br />From: caml-list-request@inria.fr [mailto:caml-list-request@inria.fr] On<br /></blockquote>Behalf<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;">Of Alain Frisch<br />Sent: 28 January 2013 12:15<br />To: Gerd Stolpmann<br />Cc: Daniel Bünzli; caml-list; wg-camlp4@lists.ocaml.org; Leo P White; Anil<br />Madhavapeddy<br />Subject: Re: AW: [Caml-list] Working Group: the future of syntax<br /></blockquote>extensions in<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;">OCaml, after camlp4<br /><br />On 01/24/2013 05:24 PM, Gerd Stolpmann wrote:<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;">It's used in the tool, but only for stream parsing. I could also<br />distribute the
already-preprocessed file (and maybe I'll do so in the<br />next release).<br /><br />Stream parsing is certainly one of the topics to discuss.</blockquote><br />I've no idea how widely stream parsing is used.  Has anyone some intuition<br />about this?<br /><br />Stream parsers probably fall in the same category as bitstring or sedlex<br /></blockquote>(custom<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;">notions of pattern matching).  It seems that stream parsers (which I'm not<br />familiar with) require to be able to write expressions within "left-hand<br /></blockquote>sides",<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;">which might require special support.  Or maybe the whole left-hand sides<br /></blockquote>should<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf;
padding-left: 1ex;">just be quotations.<br /><br />Anyway, for a basic infrastructure tool such as ocamlfind, I'd probably<br /></blockquote>advocate<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;">for a "manual" solution which works out of the box with a basic OCaml<br />installation (ocamlyacc or manual top-down parser).  Gerd: does that sound<br />reasonable to you?<br /><br /><br />Alain<br /><br /><br />--<br />Caml-list mailing list.  Subscription management and archives:<br /><a href="https://sympa.inria.fr/sympa/arc/caml-list">https://sympa.inria.fr/sympa/arc/caml-list</a><br />Beginner's list: <a href="http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group/ocaml_beginners</a><br />Bug reports: <a href="http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a></blockquote><br /></pre></blockquote></div></body></html></body></html>
------L2EFSAHW4GZVYIVLA7OZ3HSOJ663HK--

