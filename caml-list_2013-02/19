Return-Path: <cedilla@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 9A3E57EEB4
	for <caml-list@sympa.inria.fr>; Sun,  3 Feb 2013 02:53:44 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  cedilla@gmail.com) identity=pra; client-ip=209.85.223.179;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  cedilla@gmail.com designates 209.85.223.179 as permitted
  sender) identity=mailfrom; client-ip=209.85.223.179;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ie0-f179.google.com) identity=helo;
  client-ip=209.85.223.179;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="postmaster@mail-ie0-f179.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsEBAFHCDVHRVd+zm2dsb2JhbABFhki4YggWDgEBAQEBCAkLCRQngh8BAQQBIwQZARsdAQMBCwYDAgsNKgICIQEBEQEFARwGE4d+AQMJBpQ1jxyLZU+Ce4NwChknDVmIdwEFDIwRhCKBEwOIZothgViLP4MxFimEPw
X-IPAS-Result: AsEBAFHCDVHRVd+zm2dsb2JhbABFhki4YggWDgEBAQEBCAkLCRQngh8BAQQBIwQZARsdAQMBCwYDAgsNKgICIQEBEQEFARwGE4d+AQMJBpQ1jxyLZU+Ce4NwChknDVmIdwEFDIwRhCKBEwOIZothgViLP4MxFimEPw
X-IronPort-AV: E=Sophos;i="4.84,591,1355094000"; 
   d="scan'208";a="876141"
Received: from mail-ie0-f179.google.com ([209.85.223.179])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Feb 2013 02:50:16 +0100
Received: by mail-ie0-f179.google.com with SMTP id k11so3346716iea.38
        for <caml-list@inria.fr>; Sat, 02 Feb 2013 17:53:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=N6S8dWISus+tCZ/cD85572aEHY+IvrFLg2RvMxwF/Nk=;
        b=f7jrKw3RgXvVF8QRAxflS+OtANrHZfdxWcb2U6fvSiEtCMGk/vuJ5Zu9imICoHOFUP
         E7CCGQISo8kQF7h+Ybx3sj8RVNyz4lnmugWk0ivP57tMJGhw+E1jGeUZaZ+Lkse+Fpjk
         UbYswbaMg3fHWbtBn+ZRVdDtfArJXkRlAkt9/zP99gh9C0RZew7Vcbl7o1Yb9sg/MsUz
         cgz7BV/dT+Js3nCu0OcYxqzK8bpqJ8zVDMSoZRBZdaZgSqDcWwa98grs5Q8VDhv+Jw4U
         XRkmE21yPUf0YlH6wvawyY4H9Y9qjLLmTomGP+7e2iqld6u8AKvVa3imaduXgEk7pItu
         eINA==
MIME-Version: 1.0
X-Received: by 10.50.180.196 with SMTP id dq4mr1776569igc.71.1359856422009;
 Sat, 02 Feb 2013 17:53:42 -0800 (PST)
Received: by 10.64.6.1 with HTTP; Sat, 2 Feb 2013 17:53:41 -0800 (PST)
In-Reply-To: <CAAxsn=HyDTWUidRM7Y-jChN-DtcD+W1+7juQLM7836yVeVZ-Yw@mail.gmail.com>
References: <CALLFq5SYVOEszYH9jcDTgpA9ZpZb95RXVtsCHfUMZuqqW4ZP2w@mail.gmail.com>
	<CAAxsn=HyDTWUidRM7Y-jChN-DtcD+W1+7juQLM7836yVeVZ-Yw@mail.gmail.com>
Date: Sat, 2 Feb 2013 17:53:41 -0800
Message-ID: <CALLFq5SDsE=Z6JyozV-HGcqU3of34osicuQEm2-fayW98TCYfQ@mail.gmail.com>
From: Reed Wilson <cedilla@gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=14dae93407a3fabc5a04d4c83e7a
X-Validation-by: cedilla@gmail.com
Subject: Re: [Caml-list] Objects and polymorphic variants


--14dae93407a3fabc5a04d4c83e7a
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Perfect! That's exactly what I need. If I use your idea and provide
explicit typing for the other two methods everything works fine.

My final (working) methods:

method private method_12 : 'a. int -> ([> `One | `Two ] as 'a) =3D function
  | 1 -> `One
  | _ -> `Two

method method_123 : int -> [ `One | `Two | `Three ] =3D function
  | 3 -> `Three
  | x -> o#method_12 x

method method_124 : int -> [ `One | `Two | `Four ] =3D function
  | 4 -> `Four
  | x -> o#method_12 x

OCaml gives me the desired types:
method private method_12 : 'a. int -> ([> `One | `Two ] as 'a)
method method_123 : int -> [ `One | `Three | `Two ]
method method_124 : int -> [ `Four | `One | `Two ]

Thanks for the quick response,
Reed


On Sat, Feb 2, 2013 at 4:13 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 2 February 2013 23:18, Reed Wilson <cedilla@gmail.com> wrote:
> > What I really want is a signature like this:
> > method private method_12 : int -> [ > `One | `Two ]
> > method method_123 : int -> [ `One | `Two | `Three ]
> > method method_124 : int -> [ `One | `Two | `Four ]
> >
> > If I replace method_12 with a function outside the class it works fine,
> but
> > for whatever reason method_12 really wants to be the exact same type as
> > method_123 and method_124.
> >
> > Is there any way around this typing requirement for methods?
>
> I think that the problem arises because methods are typed similarly to
> mutually-recursive functions.  Unless you give type signatures, both
> functions that are marked as mutually recursive and methods are
> assumed to be monomorhpic.  For example, in
>
>     let rec f =3D fun x -> x
>         and g =3D fun x -> f (x + 1)
>
> the types are
>
>     val f : int -> int
>     val g : int -> int
>
> i.e. f is assigned the type with which it is used in the body of g.
> If you remove the (unnecessary) mutual recursion then the more general
> types will be inferred; for example, in
>
>     let f =3D fun x -> x
>     let g =3D fun x -> f (x + 1)
>
> the types are
>
>     val f : 'a -> 'a
>     val g : int -> int
>
> It's also possible to ensure that f is assigned the more general type
> by using a type signature:
>
>     let rec f : 'a. 'a -> 'a =3D fun x -> x
>         and g =3D fun x -> f (x + 1)
>
> With objects, the situation is similar, except that you can't mark
> methods non-recursive, so you have to give a type signature to avoid
> the monomorphising.  So
>
>    object (self)
>      method f =3D fun x -> x
>      method g =3D fun x -> self#f (x + 1)
>    end
>
> receives the type
>
>    < f : int -> int;
>      g : int -> int >
>
> whereas
>
>    object (self)
>      method f : 'a. 'a -> 'a =3D fun x -> x
>      method g =3D fun x -> self#f (x + 1)
>    end
>
> receives the more general type
>
>    < f : 'a. 'a -> 'a;
>      g : int -> int >
>
> In your example you can ensure that the type you want is inferred by
> annotating method_12 with a polymorphic signature:
>
>    object (self)
>      method private method_12 : 'a. int -> ([> `One | `Two] as 'a) =3D
> function
>        | 1 -> `One
>        | _ -> `Two
>
>      method method_123 =3D function
>       | 3 -> `Three
>       | x -> self#method_12 x
>
>      method method_124 =3D function
>       | 4 -> `Four
>       | x -> self#method_12 x
>    end
>
> Now the inferred types for method_123 and method_125 are distinct:
>
>   < method_123 : int -> [> `One | `Three | `Two ];
>     method_124 : int -> [> `Four | `One | `Two ] >
>
> Hope that helps a bit,
>
> Jeremy.
>



--=20
=C3=A7

--14dae93407a3fabc5a04d4c83e7a
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Perfect! That&#39;s exactly what I need. If I use your ide=
a and provide explicit typing for the other two methods everything works fi=
ne.<div><br></div><div style>My final (working) methods:</div><div style><b=
r>
</div><div style><div>method private method_12 : &#39;a. int -&gt; ([&gt; `=
One | `Two ] as &#39;a) =3D function</div><div><span style=3D"white-space:p=
re">=C2=A0 </span>| 1 -&gt; `One</div><div><span style=3D"white-space:pre">=
=C2=A0 </span>| _ -&gt; `Two</div>
<div><br></div><div>method method_123 : int -&gt; [ `One | `Two | `Three ] =
=3D function</div><div><span style=3D"white-space:pre">=C2=A0 </span>| 3 -&=
gt; `Three</div><div><span style=3D"white-space:pre">=C2=A0 </span>| x -&gt=
; o#method_12 x</div>
<div><br></div><div>method method_124 : int -&gt; [ `One | `Two | `Four ] =
=3D function</div><div><span style=3D"white-space:pre">=C2=A0 </span>| 4 -&=
gt; `Four</div><div><span style=3D"white-space:pre">=C2=A0 </span>| x -&gt;=
 o#method_12 x</div>
<div><br></div><div style>OCaml gives me the desired types:</div><div style=
><div>method private method_12 : &#39;a. int -&gt; ([&gt; `One | `Two ] as =
&#39;a)</div><div>method method_123 : int -&gt; [ `One | `Three | `Two ]</d=
iv>
<div>method method_124 : int -&gt; [ `Four | `One | `Two ]</div><div><br></=
div><div style>Thanks for the quick response,</div><div style>Reed</div></d=
iv></div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote=
">
On Sat, Feb 2, 2013 at 4:13 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=
=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</sp=
an> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex">
<div class=3D"im">On 2 February 2013 23:18, Reed Wilson &lt;<a href=3D"mail=
to:cedilla@gmail.com">cedilla@gmail.com</a>&gt; wrote:<br>
&gt; What I really want is a signature like this:<br>
&gt; method private method_12 : int -&gt; [ &gt; `One | `Two ]<br>
&gt; method method_123 : int -&gt; [ `One | `Two | `Three ]<br>
&gt; method method_124 : int -&gt; [ `One | `Two | `Four ]<br>
&gt;<br>
&gt; If I replace method_12 with a function outside the class it works fine=
, but<br>
&gt; for whatever reason method_12 really wants to be the exact same type a=
s<br>
&gt; method_123 and method_124.<br>
&gt;<br>
&gt; Is there any way around this typing requirement for methods?<br>
<br>
</div>I think that the problem arises because methods are typed similarly t=
o<br>
mutually-recursive functions. =C2=A0Unless you give type signatures, both<b=
r>
functions that are marked as mutually recursive and methods are<br>
assumed to be monomorhpic. =C2=A0For example, in<br>
<br>
=C2=A0 =C2=A0 let rec f =3D fun x -&gt; x<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 and g =3D fun x -&gt; f (x + 1)<br>
<br>
the types are<br>
<br>
=C2=A0 =C2=A0 val f : int -&gt; int<br>
=C2=A0 =C2=A0 val g : int -&gt; int<br>
<br>
i.e. f is assigned the type with which it is used in the body of g.<br>
If you remove the (unnecessary) mutual recursion then the more general<br>
types will be inferred; for example, in<br>
<br>
=C2=A0 =C2=A0 let f =3D fun x -&gt; x<br>
=C2=A0 =C2=A0 let g =3D fun x -&gt; f (x + 1)<br>
<br>
the types are<br>
<br>
=C2=A0 =C2=A0 val f : &#39;a -&gt; &#39;a<br>
=C2=A0 =C2=A0 val g : int -&gt; int<br>
<br>
It&#39;s also possible to ensure that f is assigned the more general type<b=
r>
by using a type signature:<br>
<br>
=C2=A0 =C2=A0 let rec f : &#39;a. &#39;a -&gt; &#39;a =3D fun x -&gt; x<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 and g =3D fun x -&gt; f (x + 1)<br>
<br>
With objects, the situation is similar, except that you can&#39;t mark<br>
methods non-recursive, so you have to give a type signature to avoid<br>
the monomorphising. =C2=A0So<br>
<br>
=C2=A0 =C2=A0object (self)<br>
=C2=A0 =C2=A0 =C2=A0method f =3D fun x -&gt; x<br>
=C2=A0 =C2=A0 =C2=A0method g =3D fun x -&gt; self#f (x + 1)<br>
=C2=A0 =C2=A0end<br>
<br>
receives the type<br>
<br>
=C2=A0 =C2=A0&lt; f : int -&gt; int;<br>
=C2=A0 =C2=A0 =C2=A0g : int -&gt; int &gt;<br>
<br>
whereas<br>
<br>
=C2=A0 =C2=A0object (self)<br>
=C2=A0 =C2=A0 =C2=A0method f : &#39;a. &#39;a -&gt; &#39;a =3D fun x -&gt; =
x<br>
=C2=A0 =C2=A0 =C2=A0method g =3D fun x -&gt; self#f (x + 1)<br>
=C2=A0 =C2=A0end<br>
<br>
receives the more general type<br>
<br>
=C2=A0 =C2=A0&lt; f : &#39;a. &#39;a -&gt; &#39;a;<br>
=C2=A0 =C2=A0 =C2=A0g : int -&gt; int &gt;<br>
<br>
In your example you can ensure that the type you want is inferred by<br>
annotating method_12 with a polymorphic signature:<br>
<br>
=C2=A0 =C2=A0object (self)<br>
=C2=A0 =C2=A0 =C2=A0method private method_12 : &#39;a. int -&gt; ([&gt; `On=
e | `Two] as &#39;a) =3D function<br>
<div class=3D"im">=C2=A0 =C2=A0 =C2=A0 =C2=A0| 1 -&gt; `One<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| _ -&gt; `Two<br>
<br>
=C2=A0 =C2=A0 =C2=A0method method_123 =3D function<br>
=C2=A0 =C2=A0 =C2=A0 | 3 -&gt; `Three<br>
=C2=A0 =C2=A0 =C2=A0 | x -&gt; self#method_12 x<br>
<br>
=C2=A0 =C2=A0 =C2=A0method method_124 =3D function<br>
=C2=A0 =C2=A0 =C2=A0 | 4 -&gt; `Four<br>
=C2=A0 =C2=A0 =C2=A0 | x -&gt; self#method_12 x<br>
</div>=C2=A0 =C2=A0end<br>
<br>
Now the inferred types for method_123 and method_125 are distinct:<br>
<br>
=C2=A0 &lt; method_123 : int -&gt; [&gt; `One | `Three | `Two ];<br>
=C2=A0 =C2=A0 method_124 : int -&gt; [&gt; `Four | `One | `Two ] &gt;<br>
<br>
Hope that helps a bit,<br>
<br>
Jeremy.<br>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=C3=A7
</div>

--14dae93407a3fabc5a04d4c83e7a--
