Return-Path: <cpitadev@yahoo.com.ar>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 24208BBE1
	for <caml-list@yquem.inria.fr>; Thu, 12 Oct 2006 07:19:30 +0200 (CEST)
Received: from smtp101.mail.mud.yahoo.com (smtp101.mail.mud.yahoo.com [209.191.85.211])
	by concorde.inria.fr (8.13.6/8.13.6) with SMTP id k9C5JSjM025744
	for <caml-list@yquem.inria.fr>; Thu, 12 Oct 2006 07:19:29 +0200
Received: (qmail 14287 invoked from network); 12 Oct 2006 05:19:28 -0000
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com.ar;
  h=Received:Subject:From:To:Content-Type:Date:Message-Id:Mime-Version:X-Mailer:Content-Transfer-Encoding;
  b=Jl5C3Nc8kupmA6xXJQUZwu0r2Iz03T7g14NUI7jPP76Dlruh67VtmLCZNsCsonJ0rdjOapj37ks03IjpGuPekxZjKqnkL6D3wSR2+6ZgXzUr9cQid6pG78ttshWzwyE7pevqv1cnFGqgsYbVeTKK9yciPy5q84zMRNp3TnY+528=  ;
Received: from unknown (HELO ?192.168.0.100?) (cpitadev@201.254.106.107 with plain)
  by smtp101.mail.mud.yahoo.com with SMTP; 12 Oct 2006 05:19:27 -0000
Subject: Why + vs +. but "fake" parametric polymorphism for <
From: Carlos Pita <cpitadev@yahoo.com.ar>
To: caml-list@yquem.inria.fr
Content-Type: text/plain
Date: Thu, 12 Oct 2006 02:19:25 -0300
Message-Id: <1160630365.7649.20.camel@monad>
Mime-Version: 1.0
X-Mailer: Evolution 2.8.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 452DD060.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; parametric:01 polymorphism:01 ocaml:01 inference:01 parametric:01 polymorphism:01 subtyping:01 compiler:01 bool:01 generality:01 saber:98 respuestas:98 respuestas:98 integer:01 integer:01 

Hi all!

I would like to implement some number crunching inner loops for dsp
stuff with ocaml. I'm a newcomer to the language with strong
scheme/python background and trying to come into terms with type
inference, parametric polymorphism and structural subtyping. One thing
than I'm pretty fond of is the difference between floating point and
integer basic mathematical operators. I guess the compiler is able to
generate specific and more efficient code for each case without further
analysis. But then I found out that comparison operators offer some kind
of adhoc polymorphism in the guise of parametric one:

# (<);;
- : 'a -> 'a -> bool = <fun>

Is there any reason for this apparently inconsistent design? Would the
generality of < be against performance if for example, say, my critical
inner loops check against a top limit value thousands of times per
second? I'm afraid that the implementation of such a generic operator,
which is so different for numerical integer comparison than v.gr for
string lexicographical comparison, would incur into some run time
overhead. But, as I've said at the beginning, I'm just a newbie and most
probably there is a coherent explanation for all this confusion.

Thank you in advance.
Best regards,
Carlos




	
	
		
__________________________________________________
Preguntá. Respondé. Descubrí.
Todo lo que querías saber, y lo que ni imaginabas,
está en Yahoo! Respuestas (Beta).
¡Probalo ya! 
http://www.yahoo.com.ar/respuestas

