Return-Path: <luc.maranget@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 00DEBBC69;
	Fri, 13 Oct 2006 15:37:16 +0200 (CEST)
Received: from yquem.inria.fr (yquem.inria.fr [128.93.8.37])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k9DDaun6015010;
	Fri, 13 Oct 2006 15:36:56 +0200
Received: by yquem.inria.fr (Postfix, from userid 18041)
	id 6D0DEBC69; Fri, 13 Oct 2006 15:36:56 +0200 (CEST)
Date: Fri, 13 Oct 2006 15:36:56 +0200
To: skaller <skaller@users.sourceforge.net>
Cc: Luc Maranget <luc.maranget@inria.fr>,
	Diego Olivier FERNANDEZ PONS <diego.fernandez_pons@etu.upmc.fr>,
	Gerd Stolpmann <info@gerd-stolpmann.de>, caml-list@inria.fr
Subject: Re: [Caml-list] Why + vs +. but "fake" parametric polymorphism for <
Message-ID: <20061013133656.GC10977@yquem.inria.fr>
References: <1160630285.7649.18.camel@monad> <20061012.144518.115907516.garrigue@math.nagoya-u.ac.jp> <1160632737.7649.34.camel@monad> <ad8cfe7e0610112308ld9c1bd3x9d028450b0fe8aa5@mail.gmail.com> <20061013135650.48rwzsri8ws8coww@webmail.etu.upmc.fr> <1160741662.16545.9.camel@localhost.localdomain> <20061013144605.vvzwfl4pw0kockw8@webmail.etu.upmc.fr> <20061013130100.GA10977@yquem.inria.fr> <1160745317.16199.17.camel@rosella.wigram>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1160745317.16199.17.camel@rosella.wigram>
User-Agent: Mutt/1.5.9i
From: luc.maranget@inria.fr (Luc Maranget)
X-Miltered: at concorde with ID 452F9678.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; parametric:01 polymorphism:01 maranget:01 maranget:01 abstracting:01 replacing:01 variance:01 --luc:01 luc:01 luc:01 caml-list:01 interfaces:01 snip:02 snip:02 constraints:03 


> Interfaces act as constraints on what a module
> exports. These constraints permit eliding some symbols.
> 
> They also permit abstracting types, or replacing types
> with sub/supertypes (depending on variance) or specialisations.
> <SNIP> relevant examples </SNIP>
> ... for no apparent reason (there is,
> of course, a reason).

Thank you Skaller for this neat explanation and clear conclusion.
My answer was much less informative, I admit.


--Luc

