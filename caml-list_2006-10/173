Return-Path: <j.romildo@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.9 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	NO_REAL_NAME,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 9C68CBC69
	for <caml-list@yquem.inria.fr>; Sat, 21 Oct 2006 05:42:18 +0200 (CEST)
Received: from malaquias.no-ip.org ([200.131.216.204])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k9L3gHbX011070
	for <caml-list@inria.fr>; Sat, 21 Oct 2006 05:42:18 +0200
Received: by malaquias.no-ip.org (Postfix, from userid 500)
	id 906DFCB0F6; Sat, 21 Oct 2006 00:41:25 -0300 (BRT)
Date: Sat, 21 Oct 2006 00:41:25 -0300
From: j.romildo@gmail.com
To: caml-list@inria.fr
Subject: mutable record fields and performance
Message-ID: <20061021034125.GA15596@malaquias.gwiceb1>
Mail-Followup-To: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.13 (2006-08-11)
X-j-chkmail-Score: MSGID : 45399719.000 on concorde : j-chkmail score : X : 0/20 1
X-Miltered: at concorde with ID 45399719.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; romildo:01 mutable:01 mutable:01 ocaml:01 romildo:01 expression:01 int:01 int:01 types:03 imposes:11 fields:11 fields:11 does:14 use:16 record:17 

Hello.

How do the implementation of mutable and imuttable record fields differ
in ocaml? Have them any impact on field access performance?

That is, the expression p.x has different performances for the types
{ x:int } and { mutable x:int } for p?

In summary, what additional cost does the use of mutable imposes on a
record field?

Romildo

