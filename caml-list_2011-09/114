Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8EKvwFR004014
	for <caml-list@sympa-roc.inria.fr>; Wed, 14 Sep 2011 22:57:58 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqsBANMUcU7RVdivkGdsb2JhbABCmFw1hw0BhyEIFAEBAQEJCQ0HFAQigVMBAQQBEgITGQEbEgsBAwELBgULGiEiAREBBQEKEgYTEhCHVQSYPQqLQIJXhVM7iG0CAwaGaASCVJBrjHo9gkSBLA
X-IronPort-AV: E=Sophos;i="4.68,382,1312149600"; 
   d="scan'208";a="119857493"
Received: from mail-qy0-f175.google.com ([209.85.216.175])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 14 Sep 2011 22:57:37 +0200
Received: by qyk10 with SMTP id 10so4712325qyk.6
        for <caml-list@inria.fr>; Wed, 14 Sep 2011 13:57:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=nMQVDW2cY0K4tcz63ADRGX5GQ+WZs0C872wpIxgRYi8=;
        b=dPFx6q5wO4P076yxQ5DkZacjuSfalc+tWYu29vkOnaVTjkZdYrBeJz2DotX0Bi9q8o
         x/DdSLHvEDWpf4aTehAULHZVf8UOAUVRIyLKAR8bUQqvfvsRcDyehso/kv73Xmpy3Vak
         uvzz8jqMVYMbc/po4IeTKS9O4Az89w5oD4AT8=
Received: by 10.52.101.227 with SMTP id fj3mr292815vdb.367.1316033856233; Wed,
 14 Sep 2011 13:57:36 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.221.13.202 with HTTP; Wed, 14 Sep 2011 13:57:16 -0700 (PDT)
In-Reply-To: <alpine.LFD.2.00.1109142210370.2647@surtur.dico.unimi.it>
References: <alpine.LFD.2.00.1109142210370.2647@surtur.dico.unimi.it>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Wed, 14 Sep 2011 22:57:16 +0200
Message-ID: <CAOOOohSiD9F9BUyW1+oqkp+Lzi07_y86QuSHv7ppsUxZXascNg@mail.gmail.com>
To: Walter Cazzola <cazzola@dico.unimi.it>
Cc: OCaML Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=bcaec5485c94835f4804aced02d0
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] pattern matching on strings


--bcaec5485c94835f4804aced02d0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Walter,

Contrary to Prolog or Haskell, strings in ocaml are not represented as char
lists. They are exactly like char array, but have their own type, operations
and syntax : strings are created with String.make (similar to Array.make),
their length is given by String.length (sim. to Array.length) and the chars
are accessed with the notation s.[i] (similar to t.(i)). Actually I don't
know why they are not defined like char arrays (anyone on this ?). Long
story short, recursive formulations on strings (likewise for array) will
often rely on indices (and thus, not much on pattern matching). Note that
you can use optional arguments to hide indices :

let rec iter f ?(k =3D 0) s =3D
  if k < String.length s then (
    f s.[k] ;
    iter f ~k:(k + 1) s
  )

let _ =3D iter print_char "abc";;


The closest to your request I see can be achieved using ocaml batteries (*),
by transforming your string into a list:

let rec iter_aux f =3D function
    [] -> ()
  | c :: s1 -> f c ; iter_aux f s1
let iter f s =3D iter_aux f (String.explode s)

But this won't be very efficient !

You won't find advanced string pattern matching in core ocaml. But micmatch
seems a nice way to go if that's what you're looking for.

cheers,
Philippe.

(*) http://batteries.forge.ocamlcore.org/


2011/9/14 Walter Cazzola <cazzola@dico.unimi.it>

> Hi all,
> I'm just trying to write a recursive function that iterates=B9 on a string
> and I'd like to use pattern matching as in:
>
> let rec iter f s =3D
>  match s with
>     | ""  -> unit;
>     | c^s1 -> f c; iter f s1;;
>
> but the ^ concatenates 2 strings and not a char with a string and above
> all seems to be inadmissible in the patterns.
>
> Does this mean that I can't write a function on strings by pattern
> matching or is there something I don't know?=B2
>
> Thanks for the help
> Walter
>
> =B9 I know that exists String.iter but I'd like to improve my skill in
>  writing functions by using pattern matching
> =B2 I read about micmatch but I'd like to avoid non standard packages.
> --
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/**wws/info/caml-list<https://sympa-roc.inria.f=
r/wws/info/caml-list>
> Beginner's list: http://groups.yahoo.com/group/**ocaml_beginners<http://g=
roups.yahoo.com/group/ocaml_beginners>
> Bug reports: http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bi=
n/caml-bugs>
>
>

--bcaec5485c94835f4804aced02d0
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Walter,<br><br>Contrary to Prolog or Haskell, strings in ocaml are not r=
epresented as char lists. They are exactly like char array, but have their =
own type, operations and syntax : strings are created with String.make (sim=
ilar to Array.make), their length is given by String.length (sim. to Array.=
length) and the chars are accessed with the notation s.[i] (similar to t.(i=
)). Actually I don&#39;t know why they are not defined like char arrays (an=
yone on this ?). Long story short, recursive formulations on strings (likew=
ise for array) will often rely on indices (and thus, not much on pattern ma=
tching).<font face=3D"courier new,monospace"> <font face=3D"arial,helvetica=
,sans-serif">Note that you can use optional arguments to hide indices :<br>

<br><span style=3D"font-family: courier new,monospace;">let rec iter f ?(k =
=3D 0) s =3D</span><br style=3D"font-family: courier new,monospace;"><span =
style=3D"font-family: courier new,monospace;">=A0 if k &lt; String.length s=
 then (</span><br style=3D"font-family: courier new,monospace;">

<span style=3D"font-family: courier new,monospace;">=A0=A0=A0 f s.[k] ;</sp=
an><br style=3D"font-family: courier new,monospace;"><span style=3D"font-fa=
mily: courier new,monospace;">=A0=A0=A0 iter f ~k:(k + 1) s</span><br style=
=3D"font-family: courier new,monospace;">

<span style=3D"font-family: courier new,monospace;">=A0 )</span><br style=
=3D"font-family: courier new,monospace;"><br style=3D"font-family: courier =
new,monospace;"><span style=3D"font-family: courier new,monospace;">let _ =
=3D iter print_char &quot;abc&quot;;;</span><br>

<br><br>The closest to your request I see can be achieved using ocaml batte=
ries (*), by transforming your string into a list:<br><br><span style=3D"fo=
nt-family: courier new,monospace;">let rec iter_aux f =3D function</span><b=
r style=3D"font-family: courier new,monospace;">

<span style=3D"font-family: courier new,monospace;">=A0=A0=A0 [] -&gt; ()</=
span><br style=3D"font-family: courier new,monospace;"><span style=3D"font-=
family: courier new,monospace;">=A0 | c :: s1 -&gt; f c ; iter_aux f s1</sp=
an><br style=3D"font-family: courier new,monospace;">

<span style=3D"font-family: courier new,monospace;">let iter f s =3D iter_a=
ux f (String.explode s)</span><br style=3D"font-family: courier new,monospa=
ce;"></font></font><font face=3D"courier new,monospace"><font face=3D"arial=
,helvetica,sans-serif"><br>

But this won&#39;t be very efficient !<br><br>
  </font></font>You won&#39;t find advanced string pattern matching in core=
 ocaml. But micmatch seems a nice way to go if that&#39;s what you&#39;re l=
ooking for.<br><br>cheers,<br>Philippe.<br><br>(*) <a href=3D"http://batter=
ies.forge.ocamlcore.org/">http://batteries.forge.ocamlcore.org/</a><br>

<br><br><div class=3D"gmail_quote">2011/9/14 Walter Cazzola <span dir=3D"lt=
r">&lt;<a href=3D"mailto:cazzola@dico.unimi.it">cazzola@dico.unimi.it</a>&g=
t;</span><br><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt=
 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">

Hi all,<br>
I&#39;m just trying to write a recursive function that iterates=B9 on a str=
ing<br>
and I&#39;d like to use pattern matching as in:<br>
<br>
let rec iter f s =3D<br>
 =A0match s with<br>
 =A0 =A0 | &quot;&quot; =A0-&gt; unit;<br>
 =A0 =A0 | c^s1 -&gt; f c; iter f s1;;<br>
<br>
but the ^ concatenates 2 strings and not a char with a string and above<br>
all seems to be inadmissible in the patterns.<br>
<br>
Does this mean that I can&#39;t write a function on strings by pattern<br>
matching or is there something I don&#39;t know?=B2<br>
<br>
Thanks for the help<br>
Walter<br>
<br>
=B9 I know that exists String.iter but I&#39;d like to improve my skill in<=
br>
 =A0writing functions by using pattern matching<br>
=B2 I read about micmatch but I&#39;d like to avoid non standard packages.<=
br>
-- <br><font color=3D"#888888">
-- <br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/<u></u>wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
<br>
</font></blockquote></div><br>

--bcaec5485c94835f4804aced02d0--
