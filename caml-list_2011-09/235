Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8TFXBNv007561
	for <caml-list@sympa-roc.inria.fr>; Thu, 29 Sep 2011 17:33:11 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtUBAOmOhE6flYLKhWdsb2JhbABBqA8UAQEBCgsLGyWBUwEBBAEnEQI/BQsLRlcGiA24VocTBJNWhRGMKw
X-IronPort-AV: E=Sophos;i="4.68,461,1312149600"; 
   d="scan'208";a="111157085"
Received: from smtp.dico.unimi.it ([159.149.130.202])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 29 Sep 2011 17:33:06 +0200
Received: from ulik.disi.unige.it (ulik.disi.unige.it [130.251.61.165])
	(authenticated bits=0)
	by smtp.dico.unimi.it (8.14.4/8.14.4) with ESMTP id p8TFX3NT008332
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Thu, 29 Sep 2011 17:33:03 +0200
Date: Thu, 29 Sep 2011 17:32:58 +0200 (CEST)
From: Walter Cazzola <cazzola@dico.unimi.it>
To: Pierre Chopin <pierre@punchup.com>
cc: OCaML Mailing List <caml-list@inria.fr>
In-Reply-To: <ECCFE43B-CB21-4541-917D-D42FF98F098B@punchup.com>
Message-ID: <alpine.LFD.2.00.1109291732150.4431@surtur.dico.unimi.it>
References: <alpine.LFD.2.00.1109291700550.4431@surtur.dico.unimi.it> <ECCFE43B-CB21-4541-917D-D42FF98F098B@punchup.com>
User-Agent: Alpine 2.00 (LFD 1167 2008-08-23)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
X-Greylist: Sender succeeded SMTP AUTH, not delayed by milter-greylist-4.0 (smtp.dico.unimi.it [159.149.130.202]); Thu, 29 Sep 2011 17:33:03 +0200 (CEST)
X-DSI-MailScanner-Information: Please contact the staff for more information
X-DSI-MailScanner-ID: p8TFX3NT008332
X-DSI-MailScanner: Found to be clean
X-DSI-MailScanner-From: cazzola@dico.unimi.it
Subject: Re: [Caml-list] still puzzled on generic types

On Thu, 29 Sep 2011, Pierre Chopin wrote:

> You need to explicitly name the optional arguments you are passing,
> otherwise the interpreter thinks you are trying to pass l, which should be 'a list :

> let rec enumerate ?(l'=[]) ?(n=0) l =
>   match l with
>        h::l1 -> enumerate  ~l':(l'@[(n,h)]) ~n:(n+1) l1
>   |  [] -> l'

great point, you are right (what a silly error), thanks a lot.

Walter
-- 
