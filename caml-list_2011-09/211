Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8RMDCM9002426
	for <caml-list@sympa-roc.inria.fr>; Wed, 28 Sep 2011 00:13:12 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap0DACFJgk5QDPJ9kGdsb2JhbABBhGWBeZIsjwwBAQEBCQkNBxQDI4F9BCIlQAIJHQJHPQmHXwSZfY1qkWaBLIFsgmKBEQSTUoFdj1k
X-IronPort-AV: E=Sophos;i="4.68,451,1312149600"; 
   d="scan'208,217";a="121835820"
Received: from smtp03.smtpout.orange.fr (HELO smtp.smtpout.orange.fr) ([80.12.242.125])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 28 Sep 2011 00:13:07 +0200
Received: from LENOVO-R60 ([90.29.110.75])
	by mwinf5d57 with ME
	id dyDp1h0061depua03yDqAi; Wed, 28 Sep 2011 00:13:51 +0200
X-ME-engine: default
From: "Damien Guichard" <alphablock@orange.fr>
To: caml-list@inria.fr
Content-Type: multipart/alternative; charset="UTF-8"; boundary="6DNsLwLOD=_VZ1esd0WrKgxQCM5nA2Xj9h"
MIME-Version: 1.0
Date: Wed, 28 Sep 2011 00:12:58 +0200
Message-ID: <558697822355394825@orange.fr>
X-Mailer: EssentialPIM Portable  v. 3.12
X-Validation-by: alphablock@orange.fr
Subject: [Caml-list] Dependent types ?

This is a multi-part message in MIME format

--6DNsLwLOD=_VZ1esd0WrKgxQCM5nA2Xj9h
Content-Type: multipart/alternative;
	boundary="Q8=_VjmflwAHLhX6WZ54iPyYmCIG63ljuL"


--Q8=_VjmflwAHLhX6WZ54iPyYmCIG63ljuL
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

That's pretty cool, everyone and his mother has a solution to the proposed =
problem.
I think, for the sake of exhaustivity, i can share my own weird hack.
It can express all power of 2 sizes (for example add, mul and div).
It uses a nested data type.


  type 'a size =3D
   | Word of 'a
   | DWord of ('a * 'a) size

   type n16 =3D int size
   type n32 =3D (n16 * n16) size
   type n64 =3D (n32 * n32) size

   add : 'a size -> 'a size -> 'a size=20
   mul : 'a size -> 'a size -> ('a * 'a) size=20
   div : ('a * 'a) size -> 'a size -> ('a size * 'a size)


- damien


Le 26/09/2011 =C3=A0 13:42, "Jocelyn S=C3=A9rot"  =C3=A0 =C3=A9crit :
>Hello,
>
>I've recently come across a problem while writing a domain specific=20
>language for hardware synthesis (http://wwwlasmea.univ-bpclermont.fr/Perso=
nnel/Jocelyn.Serot/caph.html
>).
>The idea is to extend the type system to accept "size" annotations for=20
>int types (it could equally apply to floats).
>The target language (VHDL in this case) accept "generic" functions,=20
>operating on ints with variable bit width and I'd like to reflect this=20
>in the source language.
>
>For instance, I'd like to be able to declare :
>
>val foo : int * int -> int
>
>(where the type int is not annotated, i.e. "generic")
>
>so that, when applied to, let say :
>
>val x : int<16>
>val y : int<16>
>
>(where <16> is a size annotation),
>
>like in
>
>let z =3D foo (x,y)
>
>then the compiler will infer type int<16> for z
>
>In fact, the exact type signature for foo would be :
>
>val foo : int * int -> int
>
>where "s" would be a "size variable" (playing a role similar to a type=20
>variable in, for ex : val map : 'a list -> ('a ->'b) -> 'b list).
>
>In a sense, it has to do with the theory of sized types (Hughes and=20
>Paretto, .. ) and dependent types (DML for ex), but my goal is far=20
>less ambitious.
>In particular, i dont want to do _computations_ (1) on the size (and,=20
>a fortiori, don't want to prove anything on the programs).
>So sized types / dependent types seems a big machinery for a=20
>relatively small goal.
>My intuition is that this is just a variant of polymorphism in which=20
>the variables ranged over are not types but integers.
>Before testing this intuition by trying to implement it, I'd like to=20
>know s/o has already tackled this problem.
>Any pointer - including "well, this is trivial" ! ;-) - will be=20
>appreciated.
>
>Best wishes
>
>Jocelyn
>
>(1) i.e. i dont bother supporting declarations like : val mul : int=20=20=
=20
>* int   -> int <2*n> ...
>
>=20
>
>--=20
>Caml-list mailing list. Subscription management and archives:
>https://sympa-roc.inria.fr/wws/info/caml-list
>Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>Bug reports: http://caml.inria.fr/bin/caml-bugs
>


--
Mail created using EssentialPIM Free - www.essentialpim.com

--Q8=_VjmflwAHLhX6WZ54iPyYmCIG63ljuL
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<html>
  <head>
    <title></title>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
" />
  </head>
  <body><br />That's pretty cool, everyone and his mother has a solution to=
 the proposed problem.<br />I think, for the sake of exhaustivity, i can sh=
are my own weird hack.<br />It can express all power of 2 sizes (for exampl=
e add, mul and div).<br />It uses a nested data type.<br /><br /><br /><fon=
t face=3D"Courier New" size=3D"2">&nbsp; type 'a size =3D<br />&nbsp;&nbsp;=
 | Word of 'a<br />&nbsp;&nbsp; | DWord of ('a * 'a) size<br /><br />&nbsp;=
&nbsp; type n16 =3D int size<br />&nbsp;&nbsp; type n32 =3D (n16 * n16) siz=
e<br />&nbsp;&nbsp; type n64 =3D (n32 * n32) size<br /><br />&nbsp;&nbsp; a=
dd : 'a size -&gt; 'a size -&gt; 'a size <br />&nbsp;&nbsp; mul : 'a size -=
&gt; 'a size -&gt; ('a * 'a) size&nbsp;<br />&nbsp;&nbsp;&nbsp;div : ('a * =
'a) size -&gt; 'a size -&gt; ('a size * 'a size)<br /></font><br /><br />- =
damien<br /><br /><br />Le 26/09/2011 &agrave; 13:42, &quot;Jocelyn S&eacut=
e;rot&quot;=20
    <jocelyn.serot@ubpmes.univ-bpclermont.fr>&nbsp;</jocelyn.serot@ubpmes.u=
niv-bpclermont.fr>&agrave; &eacute;crit :<br />&gt;Hello,<br />&gt;<br />&g=
t;I've recently come across a problem while writing a domain specific <br /=
>&gt;language for hardware synthesis (http://wwwlasmea.univ-bpclermont.fr/P=
ersonnel/Jocelyn.Serot/caph.html <br />&gt;).<br />&gt;The idea is to exten=
d the type system to accept &quot;size&quot; annotations for <br />&gt;int =
types (it could equally apply to floats).<br />&gt;The target language (VHD=
L in this case) accept &quot;generic&quot; functions, <br />&gt;operating o=
n ints with variable bit width and I'd like to reflect this <br />&gt;in th=
e source language.<br />&gt;<br />&gt;For instance, I'd like to be able to =
declare :<br />&gt;<br />&gt;val foo : int * int -&gt; int<br />&gt;<br />&=
gt;(where the type int is not annotated, i.e. &quot;generic&quot;)<br />&gt=
;<br />&gt;so that, when applied to, let say :<br />&gt;<br />&gt;val x : i=
nt&lt;16&gt;<br />&gt;val y : int&lt;16&gt;<br />&gt;<br />&gt;(where &lt;1=
6&gt; is a size annotation),<br />&gt;<br />&gt;like in<br />&gt;<br />&gt;=
let z =3D foo (x,y)<br />&gt;<br />&gt;then the compiler will infer type in=
t&lt;16&gt; for z<br />&gt;<br />&gt;In fact, the exact type signature for =
foo would be :<br />&gt;<br />&gt;val foo : int<s> * int <s>-&gt; int<s><br=
 />&gt;<br />&gt;where &quot;s&quot; would be a &quot;size variable&quot; (=
playing a role similar to a type <br />&gt;variable in, for ex : val map : =
'a list -&gt; ('a -&gt;'b) -&gt; 'b list).<br />&gt;<br />&gt;In a sense, i=
t has to do with the theory of sized types (Hughes and <br />&gt;Paretto, .=
. ) and dependent types (DML for ex), but my goal is far <br />&gt;less amb=
itious.<br />&gt;In particular, i dont want to do _computations_ (1) on the=
 size (and, <br />&gt;a fortiori, don't want to prove anything on the progr=
ams).<br />&gt;So sized types / dependent types seems a big machinery for a=
 <br />&gt;relatively small goal.<br />&gt;My intuition is that this is jus=
t a variant of polymorphism in which <br />&gt;the variables ranged over ar=
e not types but integers.<br />&gt;Before testing this intuition by trying =
to implement it, I'd like to <br />&gt;know s/o has already tackled this pr=
oblem.<br />&gt;Any pointer - including &quot;well, this is trivial&quot; !=
 ;-) - will be <br />&gt;appreciated.<br />&gt;<br />&gt;Best wishes<br />&=
gt;<br />&gt;Jocelyn<br />&gt;<br />&gt;(1) i.e. i dont bother supporting d=
eclarations like : val mul : int
          <n>&nbsp;</n> <br />&gt;* int
          <n>&nbsp;</n> -&gt; int &lt;2*n&gt; ...<br />&gt;<br />&gt; <br /=
>&gt;<br />&gt;-- <br />&gt;Caml-list mailing list. Subscription management=
 and archives:<br />&gt;https://sympa-roc.inria.fr/wws/info/caml-list<br />=
&gt;Beginner's list: http://groups.yahoo.com/group/ocaml_beginners<br />&gt=
;Bug reports: http://caml.inria.fr/bin/caml-bugs<br />&gt;<br /></s></s></s>
  </body>
</html>
<br><br>--<br>Mail created using EssentialPIM Free - <a href=3D"http://www.=
essentialpim.com">www.essentialpim.com</a>

--Q8=_VjmflwAHLhX6WZ54iPyYmCIG63ljuL--

--6DNsLwLOD=_VZ1esd0WrKgxQCM5nA2Xj9h--

