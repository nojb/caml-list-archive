Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8QCjOSq024443
	for <caml-list@sympa-roc.inria.fr>; Mon, 26 Sep 2011 14:45:24 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArMBAJxygE7RVdy2mGdsb2JhbABBmRg1hxoBhx4IFAEBAQEBCAkNBxQmgVMBAQEECwcCEwQVARsSCwEDDAYFCw0NISEBAQwBBAEFAQMBBhIGExIQh1ydQAqLTAqCUoRUO4huAgMGgxKDcwSCVIUci2KGD4QIgnI9OYNB
X-IronPort-AV: E=Sophos;i="4.68,444,1312149600"; 
   d="scan'208";a="110547645"
Received: from mail-vx0-f182.google.com ([209.85.220.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 26 Sep 2011 14:45:18 +0200
Received: by vcbf13 with SMTP id f13so5218668vcb.27
        for <caml-list@inria.fr>; Mon, 26 Sep 2011 05:45:17 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:reply-to:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=3dDGWCRer/hymJQ2lDi25+NTJElbhPWYThkpGGVGEUY=;
        b=n7ZbNdbPdulWvDqktUYq6ASeWJ95YgMKuEgB3SEDB2XF+lc044mLZnJmWnRnBYmMCc
         V9C/DAqfYjPSHMrL1G352A9Qbnyl3V4u3HOSYQaQCWhMaLmL/a8u/jhOdQMSFNQvh7A7
         NjND8CBeyqSGHkwNTZf9cxDTZ3tHsrKwAX0v4=
MIME-Version: 1.0
Received: by 10.52.66.38 with SMTP id c6mr6704775vdt.22.1317041117350; Mon, 26
 Sep 2011 05:45:17 -0700 (PDT)
Received: by 10.220.158.132 with HTTP; Mon, 26 Sep 2011 05:45:16 -0700 (PDT)
Received: by 10.220.158.132 with HTTP; Mon, 26 Sep 2011 05:45:16 -0700 (PDT)
Reply-To: yminsky@gmail.com
In-Reply-To: <4E806C6F.5050407@gmail.com>
References: <10F5DBD5-5387-408C-967B-50B37367A6E1@lasmea.univ-bpclermont.fr>
	<4E806C6F.5050407@gmail.com>
Date: Mon, 26 Sep 2011 20:45:16 +0800
Message-ID: <CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com>
From: Yaron Minsky <yminsky@gmail.com>
To: Denis Berthod <denis.berthod@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=20cf3071c9e8f44ac804add78750
Subject: Re: [Caml-list] Dependent types ?


--20cf3071c9e8f44ac804add78750
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

As written, the behavior of the types might not be what you expect, since
addition of two 16 bit ints may result in an int that requires 17 bits.

When using phantom types, you need to be especially careful that the types
mean what you think they mean.
On Sep 26, 2011 8:13 AM, "Denis Berthod" <denis.berthod@gmail.com> wrote:
> Hello,
>
> I think that achieving something very near from what you whant is
> relatively easy using phantom types.
> That avoid the boxing/unboxing in records.
>
> type i16
> type i32
>
> module SizedInt:
> sig
> type 'a integer
> val int16: int -> i16 integer
> val int32: int -> i32 integer
> val add: 'a integer -> 'a integer -> 'a integer
> end
> =3D
> struct
> type 'a integer =3D int
>
> let int16 x =3D x
> let int32 x =3D x
>
> let add x y =3D x + y
> end
>
> then
>
> open SizedInt
>
> let bar =3D
> let x =3D int16 42 in
> foo x
>
> must have type i16 integer -> i16 integer
>
> Regards,
>
> Denis Berthod
>
>
> Le 26/09/2011 13:42, Jocelyn S=E9rot a =E9crit :
>> Hello,
>>
>> I've recently come across a problem while writing a domain specific
>> language for hardware synthesis
>> (http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/caph.html).
>> The idea is to extend the type system to accept "size" annotations for
>> int types (it could equally apply to floats).
>> The target language (VHDL in this case) accept "generic" functions,
>> operating on ints with variable bit width and I'd like to reflect this
>> in the source language.
>>
>> For instance, I'd like to be able to declare :
>>
>> val foo : int * int -> int
>>
>> (where the type int is not annotated, i.e. "generic")
>>
>> so that, when applied to, let say :
>>
>> val x : int<16>
>> val y : int<16>
>>
>> (where <16> is a size annotation),
>>
>> like in
>>
>> let z =3D foo (x,y)
>>
>> then the compiler will infer type int<16> for z
>>
>> In fact, the exact type signature for foo would be :
>>
>> val foo : int<s> * int <s> -> int<s>
>>
>> where "s" would be a "size variable" (playing a role similar to a type
>> variable in, for ex : val map : 'a list -> ('a ->'b) -> 'b list).
>>
>> In a sense, it has to do with the theory of sized types (Hughes and
>> Paretto, .. ) and dependent types (DML for ex), but my goal is far
>> less ambitious.
>> In particular, i dont want to do _computations_ (1) on the size (and,
>> a fortiori, don't want to prove anything on the programs).
>> So sized types / dependent types seems a big machinery for a
>> relatively small goal.
>> My intuition is that this is just a variant of polymorphism in which
>> the variables ranged over are not types but integers.
>> Before testing this intuition by trying to implement it, I'd like to
>> know s/o has already tackled this problem.
>> Any pointer - including "well, this is trivial" ! ;-) - will be
>> appreciated.
>>
>> Best wishes
>>
>> Jocelyn
>>
>> (1) i.e. i dont bother supporting declarations like : val mul : int<n>
>> * int<n> -> int <2*n> ...
>>
>>
>>
>
>
> --
> Caml-list mailing list. Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--20cf3071c9e8f44ac804add78750
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<p>As written, the behavior of the types might not be what you expect, sinc=
e addition of two 16 bit ints may result in an int that requires 17 bits.</=
p>
<p>When using phantom types, you need to be especially careful that the typ=
es mean what you think they mean.</p>
<div class=3D"gmail_quote">On Sep 26, 2011 8:13 AM, &quot;Denis Berthod&quo=
t; &lt;<a href=3D"mailto:denis.berthod@gmail.com">denis.berthod@gmail.com</=
a>&gt; wrote:<br type=3D"attribution">&gt; Hello,<br>&gt; <br>&gt; I think =
that achieving something very near from what you whant is <br>
&gt; relatively easy using phantom types.<br>&gt; That avoid the boxing/unb=
oxing in records.<br>&gt; <br>&gt; type i16<br>&gt; type i32<br>&gt; <br>&g=
t; module SizedInt:<br>&gt;      sig<br>&gt;        type &#39;a integer<br>
&gt;        val  int16: int -&gt; i16 integer<br>&gt;        val  int32: in=
t -&gt; i32 integer<br>&gt;        val  add: &#39;a integer -&gt; &#39;a in=
teger -&gt; &#39;a integer<br>&gt;      end<br>&gt;   =3D<br>&gt;      stru=
ct<br>
&gt;          type &#39;a integer =3D int<br>&gt; <br>&gt;          let int=
16 x =3D x<br>&gt;          let int32 x =3D x<br>&gt; <br>&gt;         let =
add x y =3D x + y<br>&gt;      end<br>&gt; <br>&gt; then<br>&gt; <br>&gt; o=
pen SizedInt<br>
&gt; <br>&gt; let bar =3D<br>&gt;     let x =3D int16 42 in<br>&gt;     foo=
 x<br>&gt; <br>&gt; must have type i16 integer -&gt; i16 integer<br>&gt; <b=
r>&gt; Regards,<br>&gt; <br>&gt; Denis Berthod<br>&gt; <br>&gt; <br>&gt; Le=
 26/09/2011 13:42, Jocelyn S=E9rot a =E9crit :<br>
&gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I&#39;ve recently come across a pro=
blem while writing a domain specific <br>&gt;&gt; language for hardware syn=
thesis <br>&gt;&gt; (<a href=3D"http://wwwlasmea.univ-bpclermont.fr/Personn=
el/Jocelyn.Serot/caph.html">http://wwwlasmea.univ-bpclermont.fr/Personnel/J=
ocelyn.Serot/caph.html</a>).<br>
&gt;&gt; The idea is to extend the type system to accept &quot;size&quot; a=
nnotations for <br>&gt;&gt; int types (it could equally apply to floats).<b=
r>&gt;&gt; The target language (VHDL in this case) accept &quot;generic&quo=
t; functions, <br>
&gt;&gt; operating on ints with variable bit width and I&#39;d like to refl=
ect this <br>&gt;&gt; in the source language.<br>&gt;&gt;<br>&gt;&gt; For i=
nstance, I&#39;d like to be able to declare :<br>&gt;&gt;<br>&gt;&gt; val f=
oo : int * int -&gt; int<br>
&gt;&gt;<br>&gt;&gt; (where the type int is not annotated, i.e. &quot;gener=
ic&quot;)<br>&gt;&gt;<br>&gt;&gt; so that, when applied to, let say :<br>&g=
t;&gt;<br>&gt;&gt; val x : int&lt;16&gt;<br>&gt;&gt; val y : int&lt;16&gt;<=
br>
&gt;&gt;<br>&gt;&gt; (where &lt;16&gt; is a size annotation),<br>&gt;&gt;<b=
r>&gt;&gt; like in<br>&gt;&gt;<br>&gt;&gt; let z =3D foo (x,y)<br>&gt;&gt;<=
br>&gt;&gt; then the compiler will infer type int&lt;16&gt; for z<br>&gt;&g=
t;<br>
&gt;&gt; In fact, the exact type signature for foo would be :<br>&gt;&gt;<b=
r>&gt;&gt; val foo : int&lt;s&gt; * int &lt;s&gt; -&gt; int&lt;s&gt;<br>&gt=
;&gt;<br>&gt;&gt; where &quot;s&quot; would be a &quot;size variable&quot; =
(playing a role similar to a type <br>
&gt;&gt; variable in, for ex : val map : &#39;a list -&gt; (&#39;a -&gt;&#3=
9;b) -&gt; &#39;b list).<br>&gt;&gt;<br>&gt;&gt; In a sense, it has to do w=
ith the theory of sized types (Hughes and <br>&gt;&gt; Paretto, .. ) and de=
pendent types (DML for ex), but my goal is far <br>
&gt;&gt; less ambitious.<br>&gt;&gt; In particular, i dont want to do _comp=
utations_ (1) on the size (and, <br>&gt;&gt; a fortiori, don&#39;t want to =
prove anything on the programs).<br>&gt;&gt; So sized types / dependent typ=
es seems a big machinery for a <br>
&gt;&gt; relatively small goal.<br>&gt;&gt; My intuition is that this is ju=
st a variant of polymorphism in which <br>&gt;&gt; the variables ranged ove=
r are not types but integers.<br>&gt;&gt; Before testing this intuition by =
trying to implement it, I&#39;d like to <br>
&gt;&gt; know s/o has already tackled this problem.<br>&gt;&gt; Any pointer=
 - including &quot;well, this is trivial&quot; ! ;-) - will be <br>&gt;&gt;=
 appreciated.<br>&gt;&gt;<br>&gt;&gt; Best wishes<br>&gt;&gt;<br>&gt;&gt; J=
ocelyn<br>
&gt;&gt;<br>&gt;&gt; (1) i.e. i dont bother supporting declarations like : =
val mul : int&lt;n&gt; <br>&gt;&gt; * int&lt;n&gt; -&gt; int &lt;2*n&gt; ..=
.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; <br>&gt; <br>&gt; -- <br>
&gt; Caml-list mailing list.  Subscription management and archives:<br>&gt;=
 <a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list">https://sympa-ro=
c.inria.fr/wws/info/caml-list</a><br>&gt; Beginner&#39;s list: <a href=3D"h=
ttp://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group=
/ocaml_beginners</a><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs">http://cam=
l.inria.fr/bin/caml-bugs</a><br>&gt; <br></div>

--20cf3071c9e8f44ac804add78750--
