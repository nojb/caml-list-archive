Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8QCuZCs025034
	for <caml-list@sympa-roc.inria.fr>; Mon, 26 Sep 2011 14:56:36 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlsBAAV2gE7RVaG2kGdsb2JhbABBmRiObggUAQEBAQkJDQcUBCKBUwEBAQQSAhMZARsSCgEBAwwGBQsNCQQSCAcJAwIBAgEPAhEBBQEKARETAQUCAQEOEIdYBJ05CotMglyEWTuIbgIDBoMSg3MEglSQfoUigSqDS4JyPYNv
X-IronPort-AV: E=Sophos;i="4.68,444,1312149600"; 
   d="scan'208,217";a="110549855"
Received: from mail-gx0-f182.google.com ([209.85.161.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 26 Sep 2011 14:56:35 +0200
Received: by gxk26 with SMTP id 26so5458698gxk.27
        for <caml-list@inria.fr>; Mon, 26 Sep 2011 05:56:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=message-id:date:from:user-agent:mime-version:to:cc:subject
         :references:in-reply-to:content-type;
        bh=FYHE6Oru9z5ORq314gpXkgWFlB9QvErJN7bABl6U/qU=;
        b=UVz3wrQbdPNomlMm/iNU1uds7BfOEA1lyCwRzQDo8L45o2A9aHSEVfIH/Dmg0bFq8j
         c2Cg3D9li19sKTQ2gWguQmyujFGHW/2MgkTmtjn+uNfwusNhE/vbfd4rVU36/yNILNVN
         JIPhjZJgmbk+3P3crLw+Yk94SHSdsFwvRI77c=
Received: by 10.236.177.66 with SMTP id c42mr39340629yhm.14.1317041794461;
        Mon, 26 Sep 2011 05:56:34 -0700 (PDT)
Received: from [192.168.1.20] (APuteaux-154-1-32-171.w83-199.abo.wanadoo.fr. [83.199.87.171])
        by mx.google.com with ESMTPS id x65sm1023888yhg.18.2011.09.26.05.56.32
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 26 Sep 2011 05:56:33 -0700 (PDT)
Message-ID: <4E80768C.1000608@gmail.com>
Date: Mon, 26 Sep 2011 14:56:44 +0200
From: Denis Berthod <denis.berthod@gmail.com>
User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:6.0.2) Gecko/20110902 Thunderbird/6.0.2
MIME-Version: 1.0
To: yminsky@gmail.com
CC: caml-list@inria.fr
References: <10F5DBD5-5387-408C-967B-50B37367A6E1@lasmea.univ-bpclermont.fr> <4E806C6F.5050407@gmail.com> <CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com>
In-Reply-To: <CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------020902040307040508000905"
Subject: Re: [Caml-list] Dependent types ?

This is a multi-part message in MIME format.
--------------020902040307040508000905
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit

Indeed.

So you can have something like that in the module implementation:

type 'a interger = int * int

let int16 x = 16, x
let int32 x = 32, x

let add (size, x) (_, y) = treat_overflow (size, x + y)

Regards,

Denis Berthod

Le 26/09/2011 14:45, Yaron Minsky a écrit :
>
> As written, the behavior of the types might not be what you expect, 
> since addition of two 16 bit ints may result in an int that requires 
> 17 bits.
>
> When using phantom types, you need to be especially careful that the 
> types mean what you think they mean.
>
> On Sep 26, 2011 8:13 AM, "Denis Berthod" <denis.berthod@gmail.com 
> <mailto:denis.berthod@gmail.com>> wrote:
> > Hello,
> >
> > I think that achieving something very near from what you whant is
> > relatively easy using phantom types.
> > That avoid the boxing/unboxing in records.
> >
> > type i16
> > type i32
> >
> > module SizedInt:
> > sig
> > type 'a integer
> > val int16: int -> i16 integer
> > val int32: int -> i32 integer
> > val add: 'a integer -> 'a integer -> 'a integer
> > end
> > =
> > struct
> > type 'a integer = int
> >
> > let int16 x = x
> > let int32 x = x
> >
> > let add x y = x + y
> > end
> >
> > then
> >
> > open SizedInt
> >
> > let bar =
> > let x = int16 42 in
> > foo x
> >
> > must have type i16 integer -> i16 integer
> >
> > Regards,
> >
> > Denis Berthod
> >
> >
> > Le 26/09/2011 13:42, Jocelyn Sérot a écrit :
> >> Hello,
> >>
> >> I've recently come across a problem while writing a domain specific
> >> language for hardware synthesis
> >> 
> (http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/caph.html).
> >> The idea is to extend the type system to accept "size" annotations for
> >> int types (it could equally apply to floats).
> >> The target language (VHDL in this case) accept "generic" functions,
> >> operating on ints with variable bit width and I'd like to reflect this
> >> in the source language.
> >>
> >> For instance, I'd like to be able to declare :
> >>
> >> val foo : int * int -> int
> >>
> >> (where the type int is not annotated, i.e. "generic")
> >>
> >> so that, when applied to, let say :
> >>
> >> val x : int<16>
> >> val y : int<16>
> >>
> >> (where <16> is a size annotation),
> >>
> >> like in
> >>
> >> let z = foo (x,y)
> >>
> >> then the compiler will infer type int<16> for z
> >>
> >> In fact, the exact type signature for foo would be :
> >>
> >> val foo : int<s> * int <s> -> int<s>
> >>
> >> where "s" would be a "size variable" (playing a role similar to a type
> >> variable in, for ex : val map : 'a list -> ('a ->'b) -> 'b list).
> >>
> >> In a sense, it has to do with the theory of sized types (Hughes and
> >> Paretto, .. ) and dependent types (DML for ex), but my goal is far
> >> less ambitious.
> >> In particular, i dont want to do _computations_ (1) on the size (and,
> >> a fortiori, don't want to prove anything on the programs).
> >> So sized types / dependent types seems a big machinery for a
> >> relatively small goal.
> >> My intuition is that this is just a variant of polymorphism in which
> >> the variables ranged over are not types but integers.
> >> Before testing this intuition by trying to implement it, I'd like to
> >> know s/o has already tackled this problem.
> >> Any pointer - including "well, this is trivial" ! ;-) - will be
> >> appreciated.
> >>
> >> Best wishes
> >>
> >> Jocelyn
> >>
> >> (1) i.e. i dont bother supporting declarations like : val mul : int<n>
> >> * int<n> -> int <2*n> ...
> >>
> >>
> >>
> >
> >
> > --
> > Caml-list mailing list. Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >


--------------020902040307040508000905
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Indeed.<br>
    <br>
    So you can have something like that in the module implementation:<br>
    <br>
    type 'a interger = int * int<br>
    <br>
    let int16 x = 16, x<br>
    let int32 x = 32, x<br>
    <br>
    let add (size, x) (_, y) = treat_overflow (size, x + y) <br>
    <br>
    Regards,<br>
    <br>
    Denis Berthod<br>
    <br>
    Le 26/09/2011 14:45, Yaron Minsky a &eacute;crit&nbsp;:
    <blockquote
cite="mid:CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com"
      type="cite">
      <p>As written, the behavior of the types might not be what you
        expect, since addition of two 16 bit ints may result in an int
        that requires 17 bits.</p>
      <p>When using phantom types, you need to be especially careful
        that the types mean what you think they mean.</p>
      <div class="gmail_quote">On Sep 26, 2011 8:13 AM, "Denis Berthod"
        &lt;<a moz-do-not-send="true"
          href="mailto:denis.berthod@gmail.com">denis.berthod@gmail.com</a>&gt;
        wrote:<br type="attribution">
        &gt; Hello,<br>
        &gt; <br>
        &gt; I think that achieving something very near from what you
        whant is <br>
        &gt; relatively easy using phantom types.<br>
        &gt; That avoid the boxing/unboxing in records.<br>
        &gt; <br>
        &gt; type i16<br>
        &gt; type i32<br>
        &gt; <br>
        &gt; module SizedInt:<br>
        &gt; sig<br>
        &gt; type 'a integer<br>
        &gt; val int16: int -&gt; i16 integer<br>
        &gt; val int32: int -&gt; i32 integer<br>
        &gt; val add: 'a integer -&gt; 'a integer -&gt; 'a integer<br>
        &gt; end<br>
        &gt; =<br>
        &gt; struct<br>
        &gt; type 'a integer = int<br>
        &gt; <br>
        &gt; let int16 x = x<br>
        &gt; let int32 x = x<br>
        &gt; <br>
        &gt; let add x y = x + y<br>
        &gt; end<br>
        &gt; <br>
        &gt; then<br>
        &gt; <br>
        &gt; open SizedInt<br>
        &gt; <br>
        &gt; let bar =<br>
        &gt; let x = int16 42 in<br>
        &gt; foo x<br>
        &gt; <br>
        &gt; must have type i16 integer -&gt; i16 integer<br>
        &gt; <br>
        &gt; Regards,<br>
        &gt; <br>
        &gt; Denis Berthod<br>
        &gt; <br>
        &gt; <br>
        &gt; Le 26/09/2011 13:42, Jocelyn S&eacute;rot a &eacute;crit :<br>
        &gt;&gt; Hello,<br>
        &gt;&gt;<br>
        &gt;&gt; I've recently come across a problem while writing a
        domain specific <br>
        &gt;&gt; language for hardware synthesis <br>
        &gt;&gt; (<a moz-do-not-send="true"
href="http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/caph.html">http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/caph.html</a>).<br>
        &gt;&gt; The idea is to extend the type system to accept "size"
        annotations for <br>
        &gt;&gt; int types (it could equally apply to floats).<br>
        &gt;&gt; The target language (VHDL in this case) accept
        "generic" functions, <br>
        &gt;&gt; operating on ints with variable bit width and I'd like
        to reflect this <br>
        &gt;&gt; in the source language.<br>
        &gt;&gt;<br>
        &gt;&gt; For instance, I'd like to be able to declare :<br>
        &gt;&gt;<br>
        &gt;&gt; val foo : int * int -&gt; int<br>
        &gt;&gt;<br>
        &gt;&gt; (where the type int is not annotated, i.e. "generic")<br>
        &gt;&gt;<br>
        &gt;&gt; so that, when applied to, let say :<br>
        &gt;&gt;<br>
        &gt;&gt; val x : int&lt;16&gt;<br>
        &gt;&gt; val y : int&lt;16&gt;<br>
        &gt;&gt;<br>
        &gt;&gt; (where &lt;16&gt; is a size annotation),<br>
        &gt;&gt;<br>
        &gt;&gt; like in<br>
        &gt;&gt;<br>
        &gt;&gt; let z = foo (x,y)<br>
        &gt;&gt;<br>
        &gt;&gt; then the compiler will infer type int&lt;16&gt; for z<br>
        &gt;&gt;<br>
        &gt;&gt; In fact, the exact type signature for foo would be :<br>
        &gt;&gt;<br>
        &gt;&gt; val foo : int&lt;s&gt; * int &lt;s&gt; -&gt;
        int&lt;s&gt;<br>
        &gt;&gt;<br>
        &gt;&gt; where "s" would be a "size variable" (playing a role
        similar to a type <br>
        &gt;&gt; variable in, for ex : val map : 'a list -&gt; ('a
        -&gt;'b) -&gt; 'b list).<br>
        &gt;&gt;<br>
        &gt;&gt; In a sense, it has to do with the theory of sized types
        (Hughes and <br>
        &gt;&gt; Paretto, .. ) and dependent types (DML for ex), but my
        goal is far <br>
        &gt;&gt; less ambitious.<br>
        &gt;&gt; In particular, i dont want to do _computations_ (1) on
        the size (and, <br>
        &gt;&gt; a fortiori, don't want to prove anything on the
        programs).<br>
        &gt;&gt; So sized types / dependent types seems a big machinery
        for a <br>
        &gt;&gt; relatively small goal.<br>
        &gt;&gt; My intuition is that this is just a variant of
        polymorphism in which <br>
        &gt;&gt; the variables ranged over are not types but integers.<br>
        &gt;&gt; Before testing this intuition by trying to implement
        it, I'd like to <br>
        &gt;&gt; know s/o has already tackled this problem.<br>
        &gt;&gt; Any pointer - including "well, this is trivial" ! ;-) -
        will be <br>
        &gt;&gt; appreciated.<br>
        &gt;&gt;<br>
        &gt;&gt; Best wishes<br>
        &gt;&gt;<br>
        &gt;&gt; Jocelyn<br>
        &gt;&gt;<br>
        &gt;&gt; (1) i.e. i dont bother supporting declarations like :
        val mul : int&lt;n&gt; <br>
        &gt;&gt; * int&lt;n&gt; -&gt; int &lt;2*n&gt; ...<br>
        &gt;&gt;<br>
        &gt;&gt;<br>
        &gt;&gt;<br>
        &gt; <br>
        &gt; <br>
        &gt; -- <br>
        &gt; Caml-list mailing list. Subscription management and
        archives:<br>
        &gt; <a moz-do-not-send="true"
          href="https://sympa-roc.inria.fr/wws/info/caml-list">https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
        &gt; Beginner's list: <a moz-do-not-send="true"
          href="http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group/ocaml_beginners</a><br>
        &gt; Bug reports: <a moz-do-not-send="true"
          href="http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a><br>
        &gt; <br>
      </div>
    </blockquote>
    <br>
  </body>
</html>

--------------020902040307040508000905--
