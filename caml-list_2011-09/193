Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8R8Ra0C003720
	for <caml-list@sympa-roc.inria.fr>; Tue, 27 Sep 2011 10:27:36 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjoCANiHgU7D3XqWmWdsb2JhbABBh02RMjWHGgGHLRQBAQEBAQgLCwcUJoFTAQEEASdHEAsLGA0hHwIkEgYTEodmAgS5FYMYgxNgBIJUiTOHS4UihHaFc4Er
X-IronPort-AV: E=Sophos;i="4.68,448,1312149600"; 
   d="scan'208,217";a="121644809"
Received: from ubpmes.univ-bpclermont.fr ([195.221.122.150])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 27 Sep 2011 10:27:30 +0200
Received: from localhost (localhost.localdomain [127.0.0.1])
	by ubpmes.univ-bpclermont.fr (Postfix) with ESMTP id DCD352C06AE
	for <caml-list@inria.fr>; Tue, 27 Sep 2011 10:27:30 +0200 (CEST)
X-Virus-Scanned: amavisd-new at univ-bpclermont.fr
Received: from ubpmes.univ-bpclermont.fr ([127.0.0.1])
	by localhost (ubpmes.univ-bpclermont.fr [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id dT0FlW+uGWeF for <caml-list@inria.fr>;
	Tue, 27 Sep 2011 10:27:29 +0200 (CEST)
Received: from [172.27.1.69] (unknown [193.54.50.250])
	by ubpmes.univ-bpclermont.fr (Postfix) with ESMTP id 4D0782C314A
	for <caml-list@inria.fr>; Tue, 27 Sep 2011 10:27:29 +0200 (CEST)
Message-Id: <AF612ADF-D90A-4AF4-B5B8-92899DB965FD@lasmea.univ-bpclermont.fr>
From: =?ISO-8859-1?Q?Jocelyn_S=E9rot?= <Jocelyn.SEROT@ubpmes.univ-bpclermont.fr>
To: OCaML Mailing List <caml-list@inria.fr>
In-Reply-To: <CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com>
Content-Type: multipart/alternative; boundary=Apple-Mail-7--497566791
Mime-Version: 1.0 (Apple Message framework v935.3)
Date: Tue, 27 Sep 2011 10:27:29 +0200
References: <10F5DBD5-5387-408C-967B-50B37367A6E1@lasmea.univ-bpclermont.fr> <4E806C6F.5050407@gmail.com> <CADKNfhLMqAstEUJyik4DZ9QEBdb-4D-=9HnDgy3dF0WbfrnnXg@mail.gmail.com>
X-Mailer: Apple Mail (2.935.3)
X-Validation-by: jocelyn.serot@ubpmes.univ-bpclermont.fr
Subject: Re: [Caml-list] Dependent types ?


--Apple-Mail-7--497566791
Content-Type: text/plain;
	charset=ISO-8859-1;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: quoted-printable


Le 26 sept. 11 =E0 14:45, Yaron Minsky a =E9crit :

> As written, the behavior of the types might not be what you expect,=20=20
> since addition of two 16 bit ints may result in an int that requires=20=
=20
> 17 bits.
>

In the current situation, this will be handled at the VHDL level.
Making it explicit at CAPH (the source level DSL) would be great but=20=20
i'm afraid it is too complex to implement for the moment.
> When using phantom types, you need to be especially careful that the=20=
=20
> types mean what you think they mean.
>
> On Sep 26, 2011 8:13 AM, "Denis Berthod" <denis.berthod@gmail.com>=20=20
> wrote:
> > Hello,
> >
> > I think that achieving something very near from what you whant is
> > relatively easy using phantom types.
> > That avoid the boxing/unboxing in records.
> >
> > type i16
> > type i32
> >
> > module SizedInt:
> > sig
> > type 'a integer
> > val int16: int -> i16 integer
> > val int32: int -> i32 integer
> > val add: 'a integer -> 'a integer -> 'a integer
> > end
> > =3D
> > struct
> > type 'a integer =3D int
> >
> > let int16 x =3D x
> > let int32 x =3D x
> >
> > let add x y =3D x + y
> > end
> >
> > then
> >
> > open SizedInt
> >
> > let bar =3D
> > let x =3D int16 42 in
> > foo x
> >
> > must have type i16 integer -> i16 integer
> >
> > Regards,
> >
> > Denis Berthod
> >
> >
> > Le 26/09/2011 13:42, Jocelyn S=E9rot a =E9crit :
> >> Hello,
> >>
> >> I've recently come across a problem while writing a domain specific
> >> language for hardware synthesis
> >> (http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/caph.html=
=20
> ).
> >> The idea is to extend the type system to accept "size"=20=20
> annotations for
> >> int types (it could equally apply to floats).
> >> The target language (VHDL in this case) accept "generic" functions,
> >> operating on ints with variable bit width and I'd like to reflect=20=
=20
> this
> >> in the source language.
> >>
> >> For instance, I'd like to be able to declare :
> >>
> >> val foo : int * int -> int
> >>
> >> (where the type int is not annotated, i.e. "generic")
> >>
> >> so that, when applied to, let say :
> >>
> >> val x : int<16>
> >> val y : int<16>
> >>
> >> (where <16> is a size annotation),
> >>
> >> like in
> >>
> >> let z =3D foo (x,y)
> >>
> >> then the compiler will infer type int<16> for z
> >>
> >> In fact, the exact type signature for foo would be :
> >>
> >> val foo : int<s> * int <s> -> int<s>
> >>
> >> where "s" would be a "size variable" (playing a role similar to a=20=
=20
> type
> >> variable in, for ex : val map : 'a list -> ('a ->'b) -> 'b list).
> >>
> >> In a sense, it has to do with the theory of sized types (Hughes and
> >> Paretto, .. ) and dependent types (DML for ex), but my goal is far
> >> less ambitious.
> >> In particular, i dont want to do _computations_ (1) on the size=20=20
> (and,
> >> a fortiori, don't want to prove anything on the programs).
> >> So sized types / dependent types seems a big machinery for a
> >> relatively small goal.
> >> My intuition is that this is just a variant of polymorphism in=20=20
> which
> >> the variables ranged over are not types but integers.
> >> Before testing this intuition by trying to implement it, I'd like=20=
=20
> to
> >> know s/o has already tackled this problem.
> >> Any pointer - including "well, this is trivial" ! ;-) - will be
> >> appreciated.
> >>
> >> Best wishes
> >>
> >> Jocelyn
> >>
> >> (1) i.e. i dont bother supporting declarations like : val mul :=20=20
> int<n>
> >> * int<n> -> int <2*n> ...
> >>
> >>
> >>
> >
> >
> > --
> > Caml-list mailing list. Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >


--Apple-Mail-7--497566791
Content-Type: text/html;
	charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; -webk=
it-line-break: after-white-space; "><br><div><div>Le 26 sept. 11 =E0 14:45,=
 Yaron Minsky a =E9crit :</div><br class=3D"Apple-interchange-newline"><blo=
ckquote type=3D"cite"><p>As written, the behavior of the types might not be=
 what you expect, since addition of two 16 bit ints may result in an int th=
at requires 17 bits.</p></blockquote><div><br></div>In the current situatio=
n, this will be handled at the VHDL level.&nbsp;</div><div>Making it explic=
it&nbsp;at&nbsp;CAPH&nbsp;(the&nbsp;source&nbsp;level&nbsp;DSL)&nbsp;would&=
nbsp;be&nbsp;great&nbsp;but&nbsp;i'm&nbsp;afraid&nbsp;it&nbsp;is&nbsp;too&n=
bsp;complex&nbsp;to&nbsp;implement&nbsp;for&nbsp;the&nbsp;moment.<br><block=
quote type=3D"cite"><p>When using phantom types, you need to be especially =
careful that the types mean what you think they mean.</p> <div class=3D"gma=
il_quote">On Sep 26, 2011 8:13 AM, "Denis Berthod" &lt;<a href=3D"mailto:de=
nis.berthod@gmail.com">denis.berthod@gmail.com</a>&gt; wrote:<br type=3D"at=
tribution">&gt; Hello,<br>&gt; <br>&gt; I think that achieving something ve=
ry near from what you whant is <br> &gt; relatively easy using phantom type=
s.<br>&gt; That avoid the boxing/unboxing in records.<br>&gt; <br>&gt; type=
 i16<br>&gt; type i32<br>&gt; <br>&gt; module SizedInt:<br>&gt;      sig<br=
>&gt;        type 'a integer<br> &gt;        val  int16: int -&gt; i16 inte=
ger<br>&gt;        val  int32: int -&gt; i32 integer<br>&gt;        val  ad=
d: 'a integer -&gt; 'a integer -&gt; 'a integer<br>&gt;      end<br>&gt;   =
=3D<br>&gt;      struct<br> &gt;          type 'a integer =3D int<br>&gt; <=
br>&gt;          let int16 x =3D x<br>&gt;          let int32 x =3D x<br>&g=
t; <br>&gt;         let add x y =3D x + y<br>&gt;      end<br>&gt; <br>&gt;=
 then<br>&gt; <br>&gt; open SizedInt<br> &gt; <br>&gt; let bar =3D<br>&gt; =
    let x =3D int16 42 in<br>&gt;     foo x<br>&gt; <br>&gt; must have type=
 i16 integer -&gt; i16 integer<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; D=
enis Berthod<br>&gt; <br>&gt; <br>&gt; Le 26/09/2011 13:42, Jocelyn S=E9rot=
 a =E9crit :<br> &gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I've recently come=
 across a problem while writing a domain specific <br>&gt;&gt; language for=
 hardware synthesis <br>&gt;&gt; (<a href=3D"http://wwwlasmea.univ-bpclermo=
nt.fr/Personnel/Jocelyn.Serot/caph.html">http://wwwlasmea.univ-bpclermont.f=
r/Personnel/Jocelyn.Serot/caph.html</a>).<br> &gt;&gt; The idea is to exten=
d the type system to accept "size" annotations for <br>&gt;&gt; int types (=
it could equally apply to floats).<br>&gt;&gt; The target language (VHDL in=
 this case) accept "generic" functions, <br> &gt;&gt; operating on ints wit=
h variable bit width and I'd like to reflect this <br>&gt;&gt; in the sourc=
e language.<br>&gt;&gt;<br>&gt;&gt; For instance, I'd like to be able to de=
clare :<br>&gt;&gt;<br>&gt;&gt; val foo : int * int -&gt; int<br> &gt;&gt;<=
br>&gt;&gt; (where the type int is not annotated, i.e. "generic")<br>&gt;&g=
t;<br>&gt;&gt; so that, when applied to, let say :<br>&gt;&gt;<br>&gt;&gt; =
val x : int&lt;16&gt;<br>&gt;&gt; val y : int&lt;16&gt;<br> &gt;&gt;<br>&gt=
;&gt; (where &lt;16&gt; is a size annotation),<br>&gt;&gt;<br>&gt;&gt; like=
 in<br>&gt;&gt;<br>&gt;&gt; let z =3D foo (x,y)<br>&gt;&gt;<br>&gt;&gt; the=
n the compiler will infer type int&lt;16&gt; for z<br>&gt;&gt;<br> &gt;&gt;=
 In fact, the exact type signature for foo would be :<br>&gt;&gt;<br>&gt;&g=
t; val foo : int&lt;s&gt; * int &lt;s&gt; -&gt; int&lt;s&gt;<br>&gt;&gt;<br=
>&gt;&gt; where "s" would be a "size variable" (playing a role similar to a=
 type <br> &gt;&gt; variable in, for ex : val map : 'a list -&gt; ('a -&gt;=
'b) -&gt; 'b list).<br>&gt;&gt;<br>&gt;&gt; In a sense, it has to do with t=
he theory of sized types (Hughes and <br>&gt;&gt; Paretto, .. ) and depende=
nt types (DML for ex), but my goal is far <br> &gt;&gt; less ambitious.<br>=
&gt;&gt; In particular, i dont want to do _computations_ (1) on the size (a=
nd, <br>&gt;&gt; a fortiori, don't want to prove anything on the programs).=
<br>&gt;&gt; So sized types / dependent types seems a big machinery for a <=
br> &gt;&gt; relatively small goal.<br>&gt;&gt; My intuition is that this i=
s just a variant of polymorphism in which <br>&gt;&gt; the variables ranged=
 over are not types but integers.<br>&gt;&gt; Before testing this intuition=
 by trying to implement it, I'd like to <br> &gt;&gt; know s/o has already =
tackled this problem.<br>&gt;&gt; Any pointer - including "well, this is tr=
ivial" ! ;-) - will be <br>&gt;&gt; appreciated.<br>&gt;&gt;<br>&gt;&gt; Be=
st wishes<br>&gt;&gt;<br>&gt;&gt; Jocelyn<br> &gt;&gt;<br>&gt;&gt; (1) i.e.=
 i dont bother supporting declarations like : val mul : int&lt;n&gt; <br>&g=
t;&gt; * int&lt;n&gt; -&gt; int &lt;2*n&gt; ...<br>&gt;&gt;<br>&gt;&gt;<br>=
&gt;&gt;<br>&gt; <br>&gt; <br>&gt; -- <br> &gt; Caml-list mailing list.  Su=
bscription management and archives:<br>&gt; <a href=3D"https://sympa-roc.in=
ria.fr/wws/info/caml-list">https://sympa-roc.inria.fr/wws/info/caml-list</a=
><br>&gt; Beginner's list: <a href=3D"http://groups.yahoo.com/group/ocaml_b=
eginners">http://groups.yahoo.com/group/ocaml_beginners</a><br> &gt; Bug re=
ports: <a href=3D"http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/=
bin/caml-bugs</a><br>&gt; <br></div></blockquote></div><br></body></html>=

--Apple-Mail-7--497566791--
