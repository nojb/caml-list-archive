Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p83BZnsZ026398
	for <caml-list@sympa-roc.inria.fr>; Sat, 3 Sep 2011 13:35:49 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjADANUPYk7RVdQ2kGdsb2JhbABCmQeHQgGIGggUAQEBAQkJDQcUBCKBRgEBAQECARICExkBBhUPAwsBAwELBgULGiEiAREBBQEKEgYTEhCHUQSYRgqMPYJWK4ROO4htAgMGhmQEglSQWoxmPINt
X-IronPort-AV: E=Sophos;i="4.68,324,1312149600"; 
   d="scan'208";a="107574112"
Received: from mail-vw0-f54.google.com ([209.85.212.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Sep 2011 13:35:44 +0200
Received: by vws18 with SMTP id 18so5156870vws.27
        for <caml-list@inria.fr>; Sat, 03 Sep 2011 04:35:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=dmihqLs0g+knDci814l8Jr1Hip2jdQlqW2abVUu3YSM=;
        b=WKrQAeBjQzkibaC9y7k/P6gEKC3VbnlnDAMtlmEtxPHOXEgdwvvotvKu7OY8zPRMYj
         OqFr3mst1KqQ6RzQVjEy0rN4kGxtcEkkuLBRq0Fy7aLb+frb4Nx2T7KUNllWvjCU+HCJ
         D0oxYfY89hFP5MPDa7UXm2YmwKDxswW446BhM=
Received: by 10.52.101.227 with SMTP id fj3mr1993298vdb.367.1315049742109;
 Sat, 03 Sep 2011 04:35:42 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.221.13.202 with HTTP; Sat, 3 Sep 2011 04:35:22 -0700 (PDT)
In-Reply-To: <20110903103653.GX15100@localhost>
References: <87ty8uc5ph.fsf@frosties.localnet> <20110903103653.GX15100@localhost>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sat, 3 Sep 2011 13:35:22 +0200
Message-ID: <CAOOOohT0v8zrEE6TbzL9RXn5_-A3KHBsZUT3aL+gZHCGsYuWEQ@mail.gmail.com>
To: Guillaume Yziquel <guillaume.yziquel@citycable.ch>
Cc: Goswin von Brederlow <goswin-v-b@web.de>, caml-list@inria.fr
Content-Type: multipart/alternative; boundary=bcaec5485c94bd8c1004ac07e07d
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Odd failure to infer types


--bcaec5485c94bd8c1004ac07e07d
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi, I'm really no typing expert and have not looked much into your code, so
sorry in advance if what I say is irrelevant. Christophe got it right I
think : I'd say that an array value cannot be polymorphic because it is
mutable. I've quickly searched the web and found that

http://mirror.ocamlcore.org/caml.inria.fr/pub/ml-archives/caml-list/2001/12=
/0dccd30f4582e551a674562e3ddcc03c.en.html

Quoting Fran=E7ois Pottier:
"Any polymorphic, mutable structure is unsound and rightly rejected. A
monomorphic, mutable structure that contains polymorphic data is sound, but
cannot be expressed in ML's type system where universal quantification must
be prenex."

So it seems to me that whatever the way you try to achieve it, you simply
can't define a value state of type

val states : ('a list * (char * int * int) array * string) list array

(implicitely for all 'a). If the compiler is right, you'll always end up
with a weak type variable somewhere.

my 2 cent,

ph.


2011/9/3 Guillaume Yziquel <guillaume.yziquel@citycable.ch>

> Le Saturday 03 Sep 2011 =E0 11:53:30 (+0200), Goswin von Brederlow a =E9c=
rit :
> > Hi,
> >
> > I'm implementing a solver for the game Atomix. If you don't know it then
> > don't worry. It isn't relevant.
> >
> > I split things up into submodules and now one of the submodules does not
> > infere the right types:
> >
> > File "Atomix.ml", line 168, characters 11-876:
> > Error: The type of this module,
> >        sig
> >          type dir =3D NORTH | SOUTH | WEST | EAST
> >          val max_moves : int
> >          val cache : (string, unit) Hashtbl.t
> >          val states :
> >            ('_a list * (char * int * int) array * string) list array
> >          val string_of_dir : dir -> string
> >          val print :
> >            (int * int * dir) list * (char * int * int) array * string ->
> unit
> >          val num_states : int
> >        end, contains type variables that cannot be generalized
> >
> > I believe this is wrong. In S.num_states the call to "print state"
> > fixates the type for state and the "states.(d) <- state::states.(d);"
> > should then fixate the missing '_a in the type for states.
> >
> > Anyone know why?
>
> It also seems quite wrong to me. You should perhaps file a bug into
> Mantis if no typing expert answers.
>
> Did you try adding type annotations one at a time near the call to print
> and the states.(d) assignment in your anonymous List.fold-ing function?
> To check precisely what the type inferencer gets right and what it gets
> wrong?
>
> I'd be curious to know whether annotating state in "states.(d) <-
> state::states.(d)" solves your problem. Since it's here that the '_a in
> the type of states should be fixated.
>
> --
>      Guillaume Yziquel
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--bcaec5485c94bd8c1004ac07e07d
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi, I&#39;m really no typing expert and have not looked much into your code=
, so sorry in advance if what I say is irrelevant. Christophe got it right =
I think : I&#39;d say that an array value cannot be polymorphic because it =
is mutable. I&#39;ve quickly searched the web and found that<br>

<br><a href=3D"http://mirror.ocamlcore.org/caml.inria.fr/pub/ml-archives/ca=
ml-list/2001/12/0dccd30f4582e551a674562e3ddcc03c.en.html">http://mirror.oca=
mlcore.org/caml.inria.fr/pub/ml-archives/caml-list/2001/12/0dccd30f4582e551=
a674562e3ddcc03c.en.html</a><br>

<br>Quoting Fran=E7ois Pottier: <br>&quot;Any polymorphic, mutable structur=
e is unsound and rightly rejected. A monomorphic, mutable structure that co=
ntains polymorphic data is sound, but cannot be expressed in ML&#39;s type =
system where universal quantification must be prenex.&quot;<br>


<br>So it seems to me that whatever the way you try to achieve it, you simp=
ly can&#39;t define a value state of type <br><br>val states : (&#39;a list=
 * (char * int * int) array * string) list array<br><br>(implicitely for al=
l &#39;a). If the compiler is right, you&#39;ll always end up with a weak t=
ype variable somewhere.<br>

<br>my 2 cent,<br><br>ph.<br><br><br><div class=3D"gmail_quote">2011/9/3 Gu=
illaume Yziquel <span dir=3D"ltr">&lt;<a href=3D"mailto:guillaume.yziquel@c=
itycable.ch">guillaume.yziquel@citycable.ch</a>&gt;</span><br><blockquote c=
lass=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px s=
olid rgb(204, 204, 204); padding-left: 1ex;">

Le Saturday 03 Sep 2011 =E0 11:53:30 (+0200), Goswin von Brederlow a =E9cri=
t :<br>
<div class=3D"im">&gt; Hi,<br>
&gt;<br>
&gt; I&#39;m implementing a solver for the game Atomix. If you don&#39;t kn=
ow it then<br>
&gt; don&#39;t worry. It isn&#39;t relevant.<br>
&gt;<br>
&gt; I split things up into submodules and now one of the submodules does n=
ot<br>
&gt; infere the right types:<br>
&gt;<br>
&gt; File &quot;Atomix.ml&quot;, line 168, characters 11-876:<br>
&gt; Error: The type of this module,<br>
&gt; =A0 =A0 =A0 =A0sig<br>
&gt; =A0 =A0 =A0 =A0 =A0type dir =3D NORTH | SOUTH | WEST | EAST<br>
&gt; =A0 =A0 =A0 =A0 =A0val max_moves : int<br>
&gt; =A0 =A0 =A0 =A0 =A0val cache : (string, unit) Hashtbl.t<br>
&gt; =A0 =A0 =A0 =A0 =A0val states :<br>
&gt; =A0 =A0 =A0 =A0 =A0 =A0(&#39;_a list * (char * int * int) array * stri=
ng) list array<br>
&gt; =A0 =A0 =A0 =A0 =A0val string_of_dir : dir -&gt; string<br>
&gt; =A0 =A0 =A0 =A0 =A0val print :<br>
&gt; =A0 =A0 =A0 =A0 =A0 =A0(int * int * dir) list * (char * int * int) arr=
ay * string -&gt; unit<br>
&gt; =A0 =A0 =A0 =A0 =A0val num_states : int<br>
&gt; =A0 =A0 =A0 =A0end, contains type variables that cannot be generalized=
<br>
&gt;<br>
&gt; I believe this is wrong. In S.num_states the call to &quot;print state=
&quot;<br>
&gt; fixates the type for state and the &quot;states.(d) &lt;- state::state=
s.(d);&quot;<br>
&gt; should then fixate the missing &#39;_a in the type for states.<br>
&gt;<br>
&gt; Anyone know why?<br>
<br>
</div>It also seems quite wrong to me. You should perhaps file a bug into<b=
r>
Mantis if no typing expert answers.<br>
<br>
Did you try adding type annotations one at a time near the call to print<br>
and the states.(d) assignment in your anonymous List.fold-ing function?<br>
To check precisely what the type inferencer gets right and what it gets<br>
wrong?<br>
<br>
I&#39;d be curious to know whether annotating state in &quot;states.(d) &lt=
;-<br>
state::states.(d)&quot; solves your problem. Since it&#39;s here that the &=
#39;_a in<br>
the type of states should be fixated.<br>
<br>
--<br>
<font color=3D"#888888"> =A0 =A0 Guillaume Yziquel<br>
</font><div><div></div><div class=3D"h5"><br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</div></div></blockquote></div><br>

--bcaec5485c94bd8c1004ac07e07d--
