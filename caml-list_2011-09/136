Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8GKCPXv019226
	for <caml-list@sympa-roc.inria.fr>; Fri, 16 Sep 2011 22:12:25 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjYCALOsc05KfVI0kGdsb2JhbABBmSWHEgGHIAgUAQEBAQkJDQcUBCGBbAITGQEbHgMSCQddAREBBQFXnEeCWAqLQYJahSo7iG0CAwaGcgSCVJB2jQE9hAo
X-IronPort-AV: E=Sophos;i="4.68,395,1312149600"; 
   d="scan'208";a="109383944"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 16 Sep 2011 22:12:19 +0200
Received: by mail-ww0-f52.google.com with SMTP id 40so6245413wwj.9
        for <caml-list@inria.fr>; Fri, 16 Sep 2011 13:12:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=yNY2UWoX9nMLO6bAVwJbewM4UW8n7afRdcN/bpzgoZ0=;
        b=TUM2ByTWSuqAqD+9XUrkkxobgg9v62VRntTPB6wpMW1aHJBURpdsZVfLIXtaLcg97m
         mYj8Wj8VLKrbOped85+E/cZZ+2dixBsnz7AGblh/ATLTlQqkwKBtyyn6D70kA+bH0QGr
         Wy/j07UfdJTK4tNZTSBSPhETSXX6PgoLhl4xc=
Received: by 10.227.203.137 with SMTP id fi9mr97817wbb.86.1316203765100; Fri,
 16 Sep 2011 13:09:25 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.180.86.198 with HTTP; Fri, 16 Sep 2011 13:08:55 -0700 (PDT)
From: Alex Rubinsteyn <alex.rubinsteyn@gmail.com>
Date: Fri, 16 Sep 2011 16:08:55 -0400
Message-ID: <CAMB58pGrrz1BLn59i_9eAAMb=Z7D+4dKuoOuydQVfkQ8ODfUFw@mail.gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00151758b4cedef12a04ad14918d
Subject: [Caml-list] Overhead of first class modules


--00151758b4cedef12a04ad14918d
Content-Type: text/plain; charset=ISO-8859-1

I ran a very simple experiment gauging the overhead of OCaml's new
first-class modules.

*direct.ml: *
let f x = x + 1
let _ =
  let acc = ref 0 in
  for i = 0 to 10000000 do
    acc := !acc + (f 1)
  done

*first_class_module.ml*
module type S = sig val f : int -> int end
module M = struct let f x = x + 1 end
let package = (module M : S)
let _ =
  let acc = ref 0 in
  for i = 0 to 10000000 do
     let module Local = (val package : S) in
     acc := !acc + (Local.f 1)
  done

obj.ml
let o = object method f x = x + 1 end
let _ =
  let acc = ref 0 in
  for i = 0 to 10000000 do
     acc := !acc + o#f 1
  done


# ocamlopt direct.ml -o direct
# ocamlopt first_class_module.ml -o first_class_module
# ocamlopt obj.ml -o obj

# time ./direct
real 0m0.008s
user 0m0.010s

# time ./first_class_module
real 0m0.012s
user 0m0.020s

# time ./obj
real 0m0.058s
user 0m0.060s

So, the overhead of first class modules is slight, especially when compared
with method invocation.

--00151758b4cedef12a04ad14918d
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I ran a very simple experiment gauging the overhead of OCaml&#39;s new firs=
t-class modules.=A0<br><div><br></div><div><u><a href=3D"http://direct.ml">=
direct.ml</a>:=A0</u></div><div><div>let f x =3D x + 1</div><div>let _ =3D<=
/div><div>

=A0 let acc =3D ref 0 in</div><div>=A0 for i =3D 0 to 10000000 do</div><div=
>=A0 =A0 acc :=3D !acc + (f 1)</div><div>=A0 done</div><div><br></div></div=
><div><u><a href=3D"http://first_class_module.ml">first_class_module.ml</a>=
</u></div><div>

<div>module type S =3D sig val f : int -&gt; int end</div><div>module M =3D=
 struct let f x =3D x + 1 end</div><div>let package =3D (module M : S)</div=
><div>let _ =3D</div><div>=A0 let acc =3D ref 0 in</div><div>=A0 for i =3D =
0 to 10000000 do</div>

<div>=A0 =A0 =A0let module Local =3D (val package : S) in</div><div>=A0 =A0=
 =A0acc :=3D !acc + (Local.f 1)</div><div>=A0 done</div><div style=3D"text-=
decoration: underline; "><br></div></div><div style=3D"text-decoration: und=
erline; "><a href=3D"http://obj.ml">obj.ml</a></div>

<div><div>let o =3D object method f x =3D x + 1 end</div><div>let _ =3D</di=
v><div>=A0 let acc =3D ref 0 in</div><div>=A0 for i =3D 0 to 10000000 do</d=
iv><div>=A0 =A0 =A0acc :=3D !acc + o#f 1</div><div>=A0 done</div><div style=
=3D"text-decoration: underline; ">

<br></div></div><div style=3D"text-decoration: underline; "><br></div><div>=
<div><div># ocamlopt <a href=3D"http://direct.ml">direct.ml</a> -o direct</=
div></div><div># ocamlopt <a href=3D"http://first_class_module.ml">first_cl=
ass_module.ml</a> -o first_class_module</div>

<div># ocamlopt <a href=3D"http://obj.ml">obj.ml</a> -o obj</div><div><br><=
/div><div># time ./direct</div><div>real<span class=3D"Apple-tab-span" styl=
e=3D"white-space: pre; ">	</span>0m0.008s</div><div>user<span class=3D"Appl=
e-tab-span" style=3D"white-space: pre; ">	</span>0m0.010s</div>

<div><br></div></div><div><div># time ./first_class_module</div><div><div><=
div>real<span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span>0m=
0.012s</div><div>user<span class=3D"Apple-tab-span" style=3D"white-space:pr=
e">	</span>0m0.020s</div>

<div><br></div></div></div></div><div><div><div># time ./obj</div></div><di=
v><div><div>real<span class=3D"Apple-tab-span" style=3D"white-space: pre; "=
>	</span>0m0.058s</div><div>user<span class=3D"Apple-tab-span" style=3D"whi=
te-space: pre; ">	</span>0m0.060s</div>

</div></div></div><div><br></div><div>So, the overhead of first class modul=
es is slight, especially when compared with method invocation.=A0</div><div=
 style=3D"text-decoration: underline; "><br></div>

--00151758b4cedef12a04ad14918d--
