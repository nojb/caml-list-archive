Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8AAXHsf017755
	for <caml-list@sympa-roc.inria.fr>; Sat, 10 Sep 2011 12:33:17 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Al0BAFc8a07RVaE2kGdsb2JhbABCpxp3CBQBAQEBCQkNBxQEIoFSAQEBAQIBEgITGQEbHQEDAQsGBQsNLiEBAREBBQEcBhMih1SYaAqJeoFEgleFATuIbQIDBoZoBIdti06KCIJsPYQL
X-IronPort-AV: E=Sophos;i="4.68,360,1312149600"; 
   d="scan'208";a="119133816"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 10 Sep 2011 12:33:12 +0200
Received: by fxe4 with SMTP id 4so6083690fxe.27
        for <caml-list@inria.fr>; Sat, 10 Sep 2011 03:33:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=c7EQ95NzSi1uq5XJBq26Q1iqL/frbbl1Bo5NMvD4mE0=;
        b=KXRgJwTVKc/LFyLsZTRjPPsHz/jQ9kM4A7c2KD40naIdFdCt3V/NUX242N7jTLpRnE
         hnBX45RFP8kf8VE5h3vXv3CLu4Ip01KwZauimwzUuF0O04J1uhygTQzrRCwyh2BfA94x
         r4KUhjnyO33W7joZG3lGAUFQO8pFfmiX6/9zo=
MIME-Version: 1.0
Received: by 10.223.58.13 with SMTP id e13mr1087392fah.41.1315650791840; Sat,
 10 Sep 2011 03:33:11 -0700 (PDT)
Received: by 10.223.109.195 with HTTP; Sat, 10 Sep 2011 03:33:11 -0700 (PDT)
In-Reply-To: <CAOOOohRqX6VgrhA31CKvJtx1Vr6FmTSerD-US2j-HbGC-FgwGA@mail.gmail.com>
References: <CAN=ouMSM0SaKnKs3WCFk=yH5yLdWoToi3YtW_i5hTT300CpaKw@mail.gmail.com>
	<4E6AA1E1.9050307@gmail.com>
	<CAN=ouMR5nav_OS+Qam7UR5=qFC7Fdvn3jeGcJPEKM0F8rv1yxQ@mail.gmail.com>
	<CAOOOohRqX6VgrhA31CKvJtx1Vr6FmTSerD-US2j-HbGC-FgwGA@mail.gmail.com>
Date: Sat, 10 Sep 2011 04:33:11 -0600
Message-ID: <CAN=ouMR+QLebY4+k+xG8CrcXsgjdAPdspwuraKBW2p-X8+UO2Q@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Philippe Veber <philippe.veber@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00151747583e189bc904ac93d2b5
Subject: Re: [Caml-list] Mutually recursive closures?


--00151747583e189bc904ac93d2b5
Content-Type: text/plain; charset=ISO-8859-1

That's a good alternative, thanks Philippe! I might use this, but
encapsulate the returned closures with the constructor since they will be of
common type -- whereas the function signatures will be different, some
having additional parameters.

I've read more on rectypes and it's certainly not to be used lightly!


On Sat, Sep 10, 2011 at 12:54 AM, Philippe Veber
<philippe.veber@gmail.com>wrote:

> You may not need the -rectypes option if you add a thin layer around your
> functions:
>
>         Objective Caml version 3.12.1
>
> Findlib has been successfully loaded. Additional directives:
> [...]
> # type t = F of (unit -> t);;
> type t = F of (unit -> t)
> # let rec a = F (fun () -> print_endline "a" ; b)
>   and     b = F (fun () -> print_endline "b" ; a);;
> val a : t = F <fun>
> val b : t = F <fun>
> # let ( ! ) (F f) = f ();;
> val ( ! ) : t -> t = <fun>
> # let x1 = ! a;;
> a
> val x1 : t = F <fun>
> # ! x1;;
> b
> - : t = F <fun>
>
> It works in this version because you're defining a brand new type, and not
> using a type alias (like in type t = unit -> t). I think a record would work
> too, but I think either is needed to avoid using -rectypes.
>
> cheers,
>   Philippe.
>
>
>
>
> 2011/9/10 Anthony Tavener <anthony.tavener@gmail.com>
>
>> Thanks Jonathan! I've seen -rectypes mentioned over the years and always
>> glossed over it thinking "Ah, I'll never need that!" :P
>>
>> Understandable that it's a good default to have disabled. I'll experiment
>> first and if I like the results I'll try to limit compiling with -rectypes
>> to the smallest bit of code using it.
>>
>>
>> On Fri, Sep 9, 2011 at 5:31 PM, Jonathan Protzenko <
>> jonathan.protzenko@gmail.com> wrote:
>>
>>> You can use equirecursive types, which can be enabled through the
>>> -rectypes command-line switch. With that option, your example above
>>> type-checks. However, these are not enabled by default for a variety of
>>> reasons, the most important one being it makes it much easier to shoot
>>> yourself in the foot.
>>>
>>> Cheers,
>>>
>>> jonathan
>>>
>>>
>>> On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:
>>>
>>>> I was considering returning a couple of closures to help organize my UI
>>>> code, essentially representing current UI mode by one of these closures. But
>>>> then I run into a problem because the types are infinite (returns a
>>>> function, which returns a function, ...)
>>>>
>>>> A simplified example:
>>>>
>>>> # let rec a () = printf "state a\n"; b
>>>>       and b () = printf "state b\n"; a
>>>>
>>>> Error: This expression has type unit -> unit -> 'a
>>>>       but an expression was expected of type 'a
>>>>
>>>>
>>>> Is there a way I can do this? To express (or 'hide') the cyclic nature
>>>> of the type resolution?
>>>>
>>>> I've considered using continuations, but that seems heavy-weight for
>>>> what I'm looking to do. And as far as I can tell I'd need to leverage Oleg's
>>>> delimcc (which I'd love to start using and wrap my head around -- but for a
>>>> task worthy of it!).
>>>>
>>>> I can use a variant to represent states/modes and have a dispatcher
>>>> which runs the right code... but this introduces what feels like an
>>>> unnecessary layer of distraction. Returning the closure of the "next state"
>>>> seems straightforward, but introduces cycles into the typing. :(
>>>>
>>>> I'm hoping I'm missing something simple. Thank-you for any assistance!
>>>>
>>>>  -Tony
>>>>
>>>>
>>
>

--00151747583e189bc904ac93d2b5
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div>That&#39;s a good alternative, thanks Philippe! I might use this, but =
encapsulate the returned closures with the constructor since they will be o=
f common type -- whereas the function signatures will be different, some ha=
ving additional parameters.</div>
<div><br></div><div>I&#39;ve read more on rectypes and it&#39;s certainly n=
ot to be used lightly!</div><div><br></div><div><br></div><div class=3D"gma=
il_quote">On Sat, Sep 10, 2011 at 12:54 AM, Philippe Veber <span dir=3D"ltr=
">&lt;<a href=3D"mailto:philippe.veber@gmail.com">philippe.veber@gmail.com<=
/a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;">You may not need the -rectypes option if yo=
u add a thin layer around your functions:<br><br style=3D"font-family:couri=
er new,monospace">
<span style=3D"font-family:courier new,monospace">=A0=A0=A0=A0=A0=A0=A0 Obj=
ective Caml version 3.12.1</span><br style=3D"font-family:courier new,monos=
pace">


<br style=3D"font-family:courier new,monospace"><span style=3D"font-family:=
courier new,monospace">Findlib has been successfully loaded. Additional dir=
ectives:</span><br style=3D"font-family:courier new,monospace"><span style=
=3D"font-family:courier new,monospace">[...]<br>



</span><span style=3D"font-family:courier new,monospace"># type t =3D F of =
(unit -&gt; t);;</span><br style=3D"font-family:courier new,monospace"><spa=
n style=3D"font-family:courier new,monospace">type t =3D F of (unit -&gt; t=
)</span><br style=3D"font-family:courier new,monospace">



<span style=3D"font-family:courier new,monospace"># let rec a =3D F (fun ()=
 -&gt; print_endline &quot;a&quot; ; b)</span><br style=3D"font-family:cour=
ier new,monospace"><span style=3D"font-family:courier new,monospace">=A0 an=
d=A0=A0=A0=A0 b =3D F (fun () -&gt; print_endline &quot;b&quot; ; a);;</spa=
n><br style=3D"font-family:courier new,monospace">



<span style=3D"font-family:courier new,monospace">val a : t =3D F &lt;fun&g=
t;</span><br style=3D"font-family:courier new,monospace"><span style=3D"fon=
t-family:courier new,monospace">val b : t =3D F &lt;fun&gt;</span><br style=
=3D"font-family:courier new,monospace">



<span style=3D"font-family:courier new,monospace"># let ( ! ) (F f) =3D f (=
);;</span><br style=3D"font-family:courier new,monospace"><span style=3D"fo=
nt-family:courier new,monospace">val ( ! ) : t -&gt; t =3D &lt;fun&gt;</spa=
n><br style=3D"font-family:courier new,monospace">



<span style=3D"font-family:courier new,monospace"># let x1 =3D ! a;;</span>=
<br style=3D"font-family:courier new,monospace"><span style=3D"font-family:=
courier new,monospace">a</span><br style=3D"font-family:courier new,monospa=
ce">


<span style=3D"font-family:courier new,monospace">val x1 : t =3D F &lt;fun&=
gt;</span><br style=3D"font-family:courier new,monospace"><span style=3D"fo=
nt-family:courier new,monospace"># ! x1;;</span><br style=3D"font-family:co=
urier new,monospace">



<span style=3D"font-family:courier new,monospace">b</span><br style=3D"font=
-family:courier new,monospace"><span style=3D"font-family:courier new,monos=
pace">- : t =3D F &lt;fun&gt;</span><br style=3D"font-family:courier new,mo=
nospace">



<br>It works in this version because you&#39;re defining a brand new type, =
and not using a type alias (like in type t =3D unit -&gt; t). I think a rec=
ord would work too, but I think either is needed to avoid using -rectypes.<=
br>


<br>
cheers,<br><font color=3D"#888888">=A0 Philippe.</font><div><div></div><div=
 class=3D"h5"><br><br><br><br><div class=3D"gmail_quote">2011/9/10 Anthony =
Tavener <span dir=3D"ltr">&lt;<a href=3D"mailto:anthony.tavener@gmail.com" =
target=3D"_blank">anthony.tavener@gmail.com</a>&gt;</span><br>
<blockquote class=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;border-=
left:1px solid rgb(204, 204, 204);padding-left:1ex">


Thanks Jonathan! I&#39;ve seen -rectypes mentioned over the years and alway=
s glossed over it thinking &quot;Ah, I&#39;ll never need that!&quot; :P<div=
><br></div><div>Understandable that it&#39;s a good default to have disable=
d. I&#39;ll experiment first and if I like the results I&#39;ll try to limi=
t compiling with -rectypes to the smallest bit of code using it.</div>



<div><div></div><div>
<div><br></div><div><br><div class=3D"gmail_quote">On Fri, Sep 9, 2011 at 5=
:31 PM, Jonathan Protzenko <span dir=3D"ltr">&lt;<a href=3D"mailto:jonathan=
.protzenko@gmail.com" target=3D"_blank">jonathan.protzenko@gmail.com</a>&gt=
;</span> wrote:<br>



<blockquote class=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;border-=
left:1px solid rgb(204, 204, 204);padding-left:1ex">
You can use equirecursive types, which can be enabled through the -rectypes=
 command-line switch. With that option, your example above type-checks. How=
ever, these are not enabled by default for a variety of reasons, the most i=
mportant one being it makes it much easier to shoot yourself in the foot.<b=
r>





<br>
Cheers,<br><font color=3D"#888888">
<br>
jonathan</font><div><div></div><div><br>
<br>
On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;border-=
left:1px solid rgb(204, 204, 204);padding-left:1ex">
I was considering returning a couple of closures to help organize my UI cod=
e, essentially representing current UI mode by one of these closures. But t=
hen I run into a problem because the types are infinite (returns a function=
, which returns a function, ...)<br>





<br>
A simplified example:<br>
<br>
# let rec a () =3D printf &quot;state a\n&quot;; b<br>
 =A0 =A0 =A0 and b () =3D printf &quot;state b\n&quot;; a<br>
<br>
Error: This expression has type unit -&gt; unit -&gt; &#39;a<br>
 =A0 =A0 =A0 but an expression was expected of type &#39;a<br>
<br>
<br>
Is there a way I can do this? To express (or &#39;hide&#39;) the cyclic nat=
ure of the type resolution?<br>
<br>
I&#39;ve considered using continuations, but that seems heavy-weight for wh=
at I&#39;m looking to do. And as far as I can tell I&#39;d need to leverage=
 Oleg&#39;s delimcc (which I&#39;d love to start using and wrap my head aro=
und -- but for a task worthy of it!).<br>





<br>
I can use a variant to represent states/modes and have a dispatcher which r=
uns the right code... but this introduces what feels like an unnecessary la=
yer of distraction. Returning the closure of the &quot;next state&quot; see=
ms straightforward, but introduces cycles into the typing. :(<br>





<br>
I&#39;m hoping I&#39;m missing something simple. Thank-you for any assistan=
ce!<br>
<br>
=A0-Tony<br>
<br>
</blockquote>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br>
</div></div></blockquote></div><br>

--00151747583e189bc904ac93d2b5--
