Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8FEk1W0022059
	for <caml-list@sympa-roc.inria.fr>; Thu, 15 Sep 2011 16:46:01 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlIEABkPck7RVdQpkGdsb2JhbABDmGI1hxEBhxwIFAEBAQEJCQ0HFAQigVMBAQEBAgESAhMZARsSCwEDAQsGBQsZASEiAREBBQEKEgYTEhCHVQSZTwqLQIJahRA7iG0CAwaGbgSCVJBzjH89g3A
X-IronPort-AV: E=Sophos;i="4.68,387,1312149600"; 
   d="scan'208";a="109220634"
Received: from mail-vw0-f41.google.com ([209.85.212.41])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 15 Sep 2011 16:45:55 +0200
Received: by vwm42 with SMTP id 42so4925390vwm.0
        for <caml-list@inria.fr>; Thu, 15 Sep 2011 07:45:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=x8omOhFzc/8w+m1kS9wGz4UqfSzDzlt/wraKRJXcBn4=;
        b=ISx/8fpvKgXhR8cxm15G4Suf7h7AvtibKe4mCM7Lvo/R6qVx/u7u3sVm18l9J95KAD
         rpxcoRGECv5rt3Ot92CAodbfIgsSr00XI5eMEHKrxKIqo6Oy8/fy7sAcyIop7gtaf+f4
         sOrymjGySSma7U7+wSZZAOJJcYIdlsLAmEXDI=
Received: by 10.52.115.194 with SMTP id jq2mr1074952vdb.434.1316097954211;
 Thu, 15 Sep 2011 07:45:54 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.221.13.202 with HTTP; Thu, 15 Sep 2011 07:45:34 -0700 (PDT)
In-Reply-To: <4E72096C.1040904@itpl.co.jp>
References: <4E72096C.1040904@itpl.co.jp>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Thu, 15 Sep 2011 16:45:34 +0200
Message-ID: <CAOOOohR4N++xB8wM23GpAaOuKV03mKnOs6-ty3suTyE+p-b1RA@mail.gmail.com>
To: Satoshi Ogasawara <ogasawara@itpl.co.jp>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=bcaec548a05d0ce7b304acfbeff0
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] a push style event combinator


--bcaec548a05d0ce7b304acfbeff0
Content-Type: text/plain; charset=ISO-8859-1

Thank you for releasing your library, it looks really interesting !
How would you compare it with react (http://erratique.ch/software/react)
which, AFAIU, can be used for similar purposes ? At least I can see there is
no notion of signal (continuous function of time) in PEC (or maybe signals
can be emulated somehow ?). Also could you comment on the 'no memory leaks'
feature ?

cheers,
  Philippe.


2011/9/15 Satoshi Ogasawara <ogasawara@itpl.co.jp>

> Hello,
>
> I'd like to announce the release of PEC, a push style event combinator.
>
>  PEC : https://github.com/osiire/Pec
>
> This small module(about 350 LOC) provides
>
> - a composable event.
> - map, choose, never, join and several useful functions.
> - immediate reactions corresponds sending data to events.
> - no memory leaks.
>
> I think PEC is useful to write event driven systems. The signature is as
> follows.
>
> type 'a event
>
> (** [make ()] makes a new event and sender function.*)
> val make : unit -> 'a event * ('a -> unit)
> val map : ('a -> 'b) -> 'a event -> 'b event
>
> (** [choose l] is a event which will be raised when one of specified events
> occurred. *)
> val choose : 'a event list -> 'a event
> val never : 'a event
> (** [join ee] is a event which will be raised when a inner event occurred.
>    "Inner event" is a event comes from outer event [ee]. *)
> val join : 'a event event -> 'a event
> (** [bind e f] is [join (map f e)] *)
> val bind : 'a event -> ('a -> 'b event) -> 'b event
> val scan : ('a -> 'b -> 'a) -> 'a -> 'b event -> 'a event
> val filter : ('a -> bool) -> 'a event -> 'a event
> val filter_map : ('a -> 'b option) -> 'a event -> 'b event
> val zip : 'a event -> 'b event -> ('a * 'b) event
> val take_while : ('a -> bool) -> 'a event -> 'a event
> val take_while_in : ('a -> bool) -> 'a event -> 'a event
> val take_n : int -> 'a event -> 'a event
> val once : 'a event -> 'a event
> val drop_while : ('a -> bool) -> 'a event -> 'a event
> val drop_n : int -> 'a event -> 'a event
> val delay : int -> 'a event -> 'a event
> val pairwise : 'a event -> ('a * 'a) event
>
> (** [subscribe f e] attaches the [f] to the specified event.
>    The [f] will be called when the [e] will occurred. *)
> val subscribe : ('a -> unit) -> 'a event -> unit
>
> (** [value e] returns a reference cell which store a latest value *)
> val value : 'a -> 'a event -> 'a ref
>
> (** [run ()] runs PEC event system and returns a number of queuing size of
> sended data. *)
> val run : unit -> int
>
>
> e.g.
>  Using PEC, you can write a drag event from mouse events like this.
>
> let (+>) f g = g f
> (* E is PEC module *)
> let dragging mouse_down mouse_up mouse_move =
>  E.bind mouse_down (fun dloc -> E.choose [
>    E.map (fun uloc -> `Drop (dloc, uloc)) mouse_up;
>    E.map (fun mloc -> `Drag (dloc, mloc)) mouse_move;
>  ]
>  +> E.take_while_in (function `Drop _ -> false | _ -> true))
>
>
> Regards,
>  ogasawara
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--bcaec548a05d0ce7b304acfbeff0
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank you for releasing your library, it looks really interesting !<br>How =
would you compare it with react (<a href=3D"http://erratique.ch/software/re=
act">http://erratique.ch/software/react</a>) which, AFAIU, can be used for =
similar purposes ? At least I can see there is no notion of signal (continu=
ous function of time) in PEC (or maybe signals can be emulated somehow ?). =
Also could you comment on the &#39;no memory leaks&#39; feature ?<br>

<br>cheers,<br>=A0 Philippe.<br><br><br><div class=3D"gmail_quote">2011/9/1=
5 Satoshi Ogasawara <span dir=3D"ltr">&lt;<a href=3D"mailto:ogasawara@itpl.=
co.jp">ogasawara@itpl.co.jp</a>&gt;</span><br><blockquote class=3D"gmail_qu=
ote" style=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 20=
4, 204); padding-left: 1ex;">

Hello,<br>
<br>
I&#39;d like to announce the release of PEC, a push style event combinator.=
<br>
<br>
 =A0PEC : <a href=3D"https://github.com/osiire/Pec" target=3D"_blank">https=
://github.com/osiire/Pec</a><br>
<br>
This small module(about 350 LOC) provides<br>
<br>
- a composable event.<br>
- map, choose, never, join and several useful functions.<br>
- immediate reactions corresponds sending data to events.<br>
- no memory leaks.<br>
<br>
I think PEC is useful to write event driven systems. The signature is as fo=
llows.<br>
<br>
type &#39;a event<br>
<br>
(** [make ()] makes a new event and sender function.*)<br>
val make : unit -&gt; &#39;a event * (&#39;a -&gt; unit)<br>
val map : (&#39;a -&gt; &#39;b) -&gt; &#39;a event -&gt; &#39;b event<br>
<br>
(** [choose l] is a event which will be raised when one of specified events=
 occurred. *)<br>
val choose : &#39;a event list -&gt; &#39;a event<br>
val never : &#39;a event<br>
(** [join ee] is a event which will be raised when a inner event occurred.<=
br>
 =A0 =A0&quot;Inner event&quot; is a event comes from outer event [ee]. *)<=
br>
val join : &#39;a event event -&gt; &#39;a event<br>
(** [bind e f] is [join (map f e)] *)<br>
val bind : &#39;a event -&gt; (&#39;a -&gt; &#39;b event) -&gt; &#39;b even=
t<br>
val scan : (&#39;a -&gt; &#39;b -&gt; &#39;a) -&gt; &#39;a -&gt; &#39;b eve=
nt -&gt; &#39;a event<br>
val filter : (&#39;a -&gt; bool) -&gt; &#39;a event -&gt; &#39;a event<br>
val filter_map : (&#39;a -&gt; &#39;b option) -&gt; &#39;a event -&gt; &#39=
;b event<br>
val zip : &#39;a event -&gt; &#39;b event -&gt; (&#39;a * &#39;b) event<br>
val take_while : (&#39;a -&gt; bool) -&gt; &#39;a event -&gt; &#39;a event<=
br>
val take_while_in : (&#39;a -&gt; bool) -&gt; &#39;a event -&gt; &#39;a eve=
nt<br>
val take_n : int -&gt; &#39;a event -&gt; &#39;a event<br>
val once : &#39;a event -&gt; &#39;a event<br>
val drop_while : (&#39;a -&gt; bool) -&gt; &#39;a event -&gt; &#39;a event<=
br>
val drop_n : int -&gt; &#39;a event -&gt; &#39;a event<br>
val delay : int -&gt; &#39;a event -&gt; &#39;a event<br>
val pairwise : &#39;a event -&gt; (&#39;a * &#39;a) event<br>
<br>
(** [subscribe f e] attaches the [f] to the specified event.<br>
 =A0 =A0The [f] will be called when the [e] will occurred. *)<br>
val subscribe : (&#39;a -&gt; unit) -&gt; &#39;a event -&gt; unit<br>
<br>
(** [value e] returns a reference cell which store a latest value *)<br>
val value : &#39;a -&gt; &#39;a event -&gt; &#39;a ref<br>
<br>
(** [run ()] runs PEC event system and returns a number of queuing size of =
sended data. *)<br>
val run : unit -&gt; int<br>
<br>
<br>
e.g.<br>
=A0Using PEC, you can write a drag event from mouse events like this.<br>
<br>
let (+&gt;) f g =3D g f<br>
(* E is PEC module *)<br>
let dragging mouse_down mouse_up mouse_move =3D<br>
 =A0E.bind mouse_down (fun dloc -&gt; E.choose [<br>
 =A0 =A0E.map (fun uloc -&gt; `Drop (dloc, uloc)) mouse_up;<br>
 =A0 =A0E.map (fun mloc -&gt; `Drag (dloc, mloc)) mouse_move;<br>
 =A0]<br>
 =A0+&gt; E.take_while_in (function `Drop _ -&gt; false | _ -&gt; true))<br>
<br>
<br>
Regards,<br>
=A0ogasawara<br>
<font color=3D"#888888"><br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></blockquote></div><br>

--bcaec548a05d0ce7b304acfbeff0--
