Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8A6tN1O013347
	for <caml-list@sympa-roc.inria.fr>; Sat, 10 Sep 2011 08:55:23 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am0BALEIa07RVdQ0imdsb2JhbABCpxp3CBQBAQEKCQ0HEgYigVIBAQEBAgESAhMZARsdAQMBCwYFCw0uIQEBEQEFARwGEyKHVJhkCol6gUSCV4URO4htAgMGhmgEkzuKCIJsPYNu
X-IronPort-AV: E=Sophos;i="4.68,360,1312149600"; 
   d="scan'208";a="119109262"
Received: from mail-vw0-f52.google.com ([209.85.212.52])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 10 Sep 2011 08:55:17 +0200
Received: by vws16 with SMTP id 16so2761903vws.11
        for <caml-list@inria.fr>; Fri, 09 Sep 2011 23:55:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=nbY+WLWEErz/g2WMx7H7GXVPqwwxk/k3Fj5Fb6oEhQ4=;
        b=nwMVlNqzN4X/p3Jmrc2OfHcVqp5uPg9ju5pKG6NhTn0Lg5F2iKuZFG7EbTwGKEzVoi
         fx6Zt5hACGVAOvoQWBeCphlfG3wPN7eZqhRHRmbxsClFyFdLJ/AQYjGRKkSBLYK6Cj2F
         Kq0zHtb4+TB2Ff+mxW+MvI3VsOyQgUVWifhyU=
Received: by 10.52.101.227 with SMTP id fj3mr1534000vdb.367.1315637716424;
 Fri, 09 Sep 2011 23:55:16 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.221.13.202 with HTTP; Fri, 9 Sep 2011 23:54:56 -0700 (PDT)
In-Reply-To: <CAN=ouMR5nav_OS+Qam7UR5=qFC7Fdvn3jeGcJPEKM0F8rv1yxQ@mail.gmail.com>
References: <CAN=ouMSM0SaKnKs3WCFk=yH5yLdWoToi3YtW_i5hTT300CpaKw@mail.gmail.com>
 <4E6AA1E1.9050307@gmail.com> <CAN=ouMR5nav_OS+Qam7UR5=qFC7Fdvn3jeGcJPEKM0F8rv1yxQ@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sat, 10 Sep 2011 08:54:56 +0200
Message-ID: <CAOOOohRqX6VgrhA31CKvJtx1Vr6FmTSerD-US2j-HbGC-FgwGA@mail.gmail.com>
To: Anthony Tavener <anthony.tavener@gmail.com>
Cc: Jonathan Protzenko <jonathan.protzenko@gmail.com>, caml-list@inria.fr
Content-Type: multipart/alternative; boundary=bcaec5485c94bd969d04ac90c649
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Mutually recursive closures?


--bcaec5485c94bd969d04ac90c649
Content-Type: text/plain; charset=ISO-8859-1

You may not need the -rectypes option if you add a thin layer around your
functions:

        Objective Caml version 3.12.1

Findlib has been successfully loaded. Additional directives:
[...]
# type t = F of (unit -> t);;
type t = F of (unit -> t)
# let rec a = F (fun () -> print_endline "a" ; b)
  and     b = F (fun () -> print_endline "b" ; a);;
val a : t = F <fun>
val b : t = F <fun>
# let ( ! ) (F f) = f ();;
val ( ! ) : t -> t = <fun>
# let x1 = ! a;;
a
val x1 : t = F <fun>
# ! x1;;
b
- : t = F <fun>

It works in this version because you're defining a brand new type, and not
using a type alias (like in type t = unit -> t). I think a record would work
too, but I think either is needed to avoid using -rectypes.

cheers,
  Philippe.



2011/9/10 Anthony Tavener <anthony.tavener@gmail.com>

> Thanks Jonathan! I've seen -rectypes mentioned over the years and always
> glossed over it thinking "Ah, I'll never need that!" :P
>
> Understandable that it's a good default to have disabled. I'll experiment
> first and if I like the results I'll try to limit compiling with -rectypes
> to the smallest bit of code using it.
>
>
> On Fri, Sep 9, 2011 at 5:31 PM, Jonathan Protzenko <
> jonathan.protzenko@gmail.com> wrote:
>
>> You can use equirecursive types, which can be enabled through the
>> -rectypes command-line switch. With that option, your example above
>> type-checks. However, these are not enabled by default for a variety of
>> reasons, the most important one being it makes it much easier to shoot
>> yourself in the foot.
>>
>> Cheers,
>>
>> jonathan
>>
>>
>> On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:
>>
>>> I was considering returning a couple of closures to help organize my UI
>>> code, essentially representing current UI mode by one of these closures. But
>>> then I run into a problem because the types are infinite (returns a
>>> function, which returns a function, ...)
>>>
>>> A simplified example:
>>>
>>> # let rec a () = printf "state a\n"; b
>>>       and b () = printf "state b\n"; a
>>>
>>> Error: This expression has type unit -> unit -> 'a
>>>       but an expression was expected of type 'a
>>>
>>>
>>> Is there a way I can do this? To express (or 'hide') the cyclic nature of
>>> the type resolution?
>>>
>>> I've considered using continuations, but that seems heavy-weight for what
>>> I'm looking to do. And as far as I can tell I'd need to leverage Oleg's
>>> delimcc (which I'd love to start using and wrap my head around -- but for a
>>> task worthy of it!).
>>>
>>> I can use a variant to represent states/modes and have a dispatcher which
>>> runs the right code... but this introduces what feels like an unnecessary
>>> layer of distraction. Returning the closure of the "next state" seems
>>> straightforward, but introduces cycles into the typing. :(
>>>
>>> I'm hoping I'm missing something simple. Thank-you for any assistance!
>>>
>>>  -Tony
>>>
>>>
>

--bcaec5485c94bd969d04ac90c649
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

You may not need the -rectypes option if you add a thin layer around your f=
unctions:<br><br style=3D"font-family: courier new,monospace;"><span style=
=3D"font-family: courier new,monospace;">=A0=A0=A0=A0=A0=A0=A0 Objective Ca=
ml version 3.12.1</span><br style=3D"font-family: courier new,monospace;">


<br style=3D"font-family: courier new,monospace;"><span style=3D"font-famil=
y: courier new,monospace;">Findlib has been successfully loaded. Additional=
 directives:</span><br style=3D"font-family: courier new,monospace;"><span =
style=3D"font-family: courier new,monospace;">[...]<br>


</span><span style=3D"font-family: courier new,monospace;"># type t =3D F o=
f (unit -&gt; t);;</span><br style=3D"font-family: courier new,monospace;">=
<span style=3D"font-family: courier new,monospace;">type t =3D F of (unit -=
&gt; t)</span><br style=3D"font-family: courier new,monospace;">


<span style=3D"font-family: courier new,monospace;"># let rec a =3D F (fun =
() -&gt; print_endline &quot;a&quot; ; b)</span><br style=3D"font-family: c=
ourier new,monospace;"><span style=3D"font-family: courier new,monospace;">=
=A0 and=A0=A0=A0=A0 b =3D F (fun () -&gt; print_endline &quot;b&quot; ; a);=
;</span><br style=3D"font-family: courier new,monospace;">


<span style=3D"font-family: courier new,monospace;">val a : t =3D F &lt;fun=
&gt;</span><br style=3D"font-family: courier new,monospace;"><span style=3D=
"font-family: courier new,monospace;">val b : t =3D F &lt;fun&gt;</span><br=
 style=3D"font-family: courier new,monospace;">


<span style=3D"font-family: courier new,monospace;"># let ( ! ) (F f) =3D f=
 ();;</span><br style=3D"font-family: courier new,monospace;"><span style=
=3D"font-family: courier new,monospace;">val ( ! ) : t -&gt; t =3D &lt;fun&=
gt;</span><br style=3D"font-family: courier new,monospace;">


<span style=3D"font-family: courier new,monospace;"># let x1 =3D ! a;;</spa=
n><br style=3D"font-family: courier new,monospace;"><span style=3D"font-fam=
ily: courier new,monospace;">a</span><br style=3D"font-family: courier new,=
monospace;">


<span style=3D"font-family: courier new,monospace;">val x1 : t =3D F &lt;fu=
n&gt;</span><br style=3D"font-family: courier new,monospace;"><span style=
=3D"font-family: courier new,monospace;"># ! x1;;</span><br style=3D"font-f=
amily: courier new,monospace;">


<span style=3D"font-family: courier new,monospace;">b</span><br style=3D"fo=
nt-family: courier new,monospace;"><span style=3D"font-family: courier new,=
monospace;">- : t =3D F &lt;fun&gt;</span><br style=3D"font-family: courier=
 new,monospace;">


<br>It works in this version because you&#39;re defining a brand new type, =
and not using a type alias (like in type t =3D unit -&gt; t). I think a rec=
ord would work too, but I think either is needed to avoid using -rectypes.<=
br>

<br>
cheers,<br>=A0 Philippe.<br><br><br><br><div class=3D"gmail_quote">2011/9/1=
0 Anthony Tavener <span dir=3D"ltr">&lt;<a href=3D"mailto:anthony.tavener@g=
mail.com" target=3D"_blank">anthony.tavener@gmail.com</a>&gt;</span><br><bl=
ockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; border-l=
eft: 1px solid rgb(204, 204, 204); padding-left: 1ex;">


Thanks Jonathan! I&#39;ve seen -rectypes mentioned over the years and alway=
s glossed over it thinking &quot;Ah, I&#39;ll never need that!&quot; :P<div=
><br></div><div>Understandable that it&#39;s a good default to have disable=
d. I&#39;ll experiment first and if I like the results I&#39;ll try to limi=
t compiling with -rectypes to the smallest bit of code using it.</div>


<div><div></div><div>
<div><br></div><div><br><div class=3D"gmail_quote">On Fri, Sep 9, 2011 at 5=
:31 PM, Jonathan Protzenko <span dir=3D"ltr">&lt;<a href=3D"mailto:jonathan=
.protzenko@gmail.com" target=3D"_blank">jonathan.protzenko@gmail.com</a>&gt=
;</span> wrote:<br>


<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
You can use equirecursive types, which can be enabled through the -rectypes=
 command-line switch. With that option, your example above type-checks. How=
ever, these are not enabled by default for a variety of reasons, the most i=
mportant one being it makes it much easier to shoot yourself in the foot.<b=
r>




<br>
Cheers,<br><font color=3D"#888888">
<br>
jonathan</font><div><div></div><div><br>
<br>
On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
I was considering returning a couple of closures to help organize my UI cod=
e, essentially representing current UI mode by one of these closures. But t=
hen I run into a problem because the types are infinite (returns a function=
, which returns a function, ...)<br>




<br>
A simplified example:<br>
<br>
# let rec a () =3D printf &quot;state a\n&quot;; b<br>
 =A0 =A0 =A0 and b () =3D printf &quot;state b\n&quot;; a<br>
<br>
Error: This expression has type unit -&gt; unit -&gt; &#39;a<br>
 =A0 =A0 =A0 but an expression was expected of type &#39;a<br>
<br>
<br>
Is there a way I can do this? To express (or &#39;hide&#39;) the cyclic nat=
ure of the type resolution?<br>
<br>
I&#39;ve considered using continuations, but that seems heavy-weight for wh=
at I&#39;m looking to do. And as far as I can tell I&#39;d need to leverage=
 Oleg&#39;s delimcc (which I&#39;d love to start using and wrap my head aro=
und -- but for a task worthy of it!).<br>




<br>
I can use a variant to represent states/modes and have a dispatcher which r=
uns the right code... but this introduces what feels like an unnecessary la=
yer of distraction. Returning the closure of the &quot;next state&quot; see=
ms straightforward, but introduces cycles into the typing. :(<br>




<br>
I&#39;m hoping I&#39;m missing something simple. Thank-you for any assistan=
ce!<br>
<br>
=A0-Tony<br>
<br>
</blockquote>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br>

--bcaec5485c94bd969d04ac90c649--
