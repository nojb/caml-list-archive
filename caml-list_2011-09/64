Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8A0l770005544
	for <caml-list@sympa-roc.inria.fr>; Sat, 10 Sep 2011 02:47:07 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmYBAHSyak7RVaE2kGdsb2JhbABCpxl3CBQBAQEBCQkNBxQEIoFSAQEBAQIBEgITGQEbHQEDAQsGBQQHDS4hAQERAQUBHAYTIodUmlYKiz6CV4VBO4htAgMGhmgEh22LTYoGgmw9hAs
X-IronPort-AV: E=Sophos;i="4.68,359,1312149600"; 
   d="scan'208";a="108362684"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 10 Sep 2011 02:47:02 +0200
Received: by fxe4 with SMTP id 4so5664282fxe.27
        for <caml-list@inria.fr>; Fri, 09 Sep 2011 17:47:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=3xu+YUuSgX4itHv9FynqmI/ovTe4gBouIlt38JVGoZw=;
        b=CgF2oAg+SHFn6qzkT9gGb2+BROprCU9BpFU91LSEp/Nj66rPkZ9xMXhyvmdBEhz/IZ
         CmWTPxwPzob1hoCK7DEas4DML/BdqS5s4US54CJPcLPjTH9WeyMJI4VQo561rU7+LERu
         yWW5+iMF4fleoRnukCajoE85YIqRBX+HH86Eg=
MIME-Version: 1.0
Received: by 10.223.21.141 with SMTP id j13mr299895fab.79.1315615621563; Fri,
 09 Sep 2011 17:47:01 -0700 (PDT)
Received: by 10.223.109.195 with HTTP; Fri, 9 Sep 2011 17:47:01 -0700 (PDT)
In-Reply-To: <4E6AA1E1.9050307@gmail.com>
References: <CAN=ouMSM0SaKnKs3WCFk=yH5yLdWoToi3YtW_i5hTT300CpaKw@mail.gmail.com>
	<4E6AA1E1.9050307@gmail.com>
Date: Fri, 9 Sep 2011 18:47:01 -0600
Message-ID: <CAN=ouMR5nav_OS+Qam7UR5=qFC7Fdvn3jeGcJPEKM0F8rv1yxQ@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Jonathan Protzenko <jonathan.protzenko@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00151740271ac8c68804ac8ba160
Subject: Re: [Caml-list] Mutually recursive closures?


--00151740271ac8c68804ac8ba160
Content-Type: text/plain; charset=ISO-8859-1

Thanks Jonathan! I've seen -rectypes mentioned over the years and always
glossed over it thinking "Ah, I'll never need that!" :P

Understandable that it's a good default to have disabled. I'll experiment
first and if I like the results I'll try to limit compiling with -rectypes
to the smallest bit of code using it.


On Fri, Sep 9, 2011 at 5:31 PM, Jonathan Protzenko <
jonathan.protzenko@gmail.com> wrote:

> You can use equirecursive types, which can be enabled through the -rectypes
> command-line switch. With that option, your example above type-checks.
> However, these are not enabled by default for a variety of reasons, the most
> important one being it makes it much easier to shoot yourself in the foot.
>
> Cheers,
>
> jonathan
>
>
> On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:
>
>> I was considering returning a couple of closures to help organize my UI
>> code, essentially representing current UI mode by one of these closures. But
>> then I run into a problem because the types are infinite (returns a
>> function, which returns a function, ...)
>>
>> A simplified example:
>>
>> # let rec a () = printf "state a\n"; b
>>       and b () = printf "state b\n"; a
>>
>> Error: This expression has type unit -> unit -> 'a
>>       but an expression was expected of type 'a
>>
>>
>> Is there a way I can do this? To express (or 'hide') the cyclic nature of
>> the type resolution?
>>
>> I've considered using continuations, but that seems heavy-weight for what
>> I'm looking to do. And as far as I can tell I'd need to leverage Oleg's
>> delimcc (which I'd love to start using and wrap my head around -- but for a
>> task worthy of it!).
>>
>> I can use a variant to represent states/modes and have a dispatcher which
>> runs the right code... but this introduces what feels like an unnecessary
>> layer of distraction. Returning the closure of the "next state" seems
>> straightforward, but introduces cycles into the typing. :(
>>
>> I'm hoping I'm missing something simple. Thank-you for any assistance!
>>
>>  -Tony
>>
>>

--00151740271ac8c68804ac8ba160
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks Jonathan! I&#39;ve seen -rectypes mentioned over the years and alway=
s glossed over it thinking &quot;Ah, I&#39;ll never need that!&quot; :P<div=
><br></div><div>Understandable that it&#39;s a good default to have disable=
d. I&#39;ll experiment first and if I like the results I&#39;ll try to limi=
t compiling with -rectypes to the smallest bit of code using it.</div>
<div><br></div><div><br><div class=3D"gmail_quote">On Fri, Sep 9, 2011 at 5=
:31 PM, Jonathan Protzenko <span dir=3D"ltr">&lt;<a href=3D"mailto:jonathan=
.protzenko@gmail.com">jonathan.protzenko@gmail.com</a>&gt;</span> wrote:<br=
><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1=
px #ccc solid;padding-left:1ex;">
You can use equirecursive types, which can be enabled through the -rectypes=
 command-line switch. With that option, your example above type-checks. How=
ever, these are not enabled by default for a variety of reasons, the most i=
mportant one being it makes it much easier to shoot yourself in the foot.<b=
r>

<br>
Cheers,<br><font color=3D"#888888">
<br>
jonathan</font><div><div></div><div class=3D"h5"><br>
<br>
On Sat 10 Sep 2011 01:14:46 AM CEST, Anthony Tavener wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
I was considering returning a couple of closures to help organize my UI cod=
e, essentially representing current UI mode by one of these closures. But t=
hen I run into a problem because the types are infinite (returns a function=
, which returns a function, ...)<br>

<br>
A simplified example:<br>
<br>
# let rec a () =3D printf &quot;state a\n&quot;; b<br>
 =A0 =A0 =A0 and b () =3D printf &quot;state b\n&quot;; a<br>
<br>
Error: This expression has type unit -&gt; unit -&gt; &#39;a<br>
 =A0 =A0 =A0 but an expression was expected of type &#39;a<br>
<br>
<br>
Is there a way I can do this? To express (or &#39;hide&#39;) the cyclic nat=
ure of the type resolution?<br>
<br>
I&#39;ve considered using continuations, but that seems heavy-weight for wh=
at I&#39;m looking to do. And as far as I can tell I&#39;d need to leverage=
 Oleg&#39;s delimcc (which I&#39;d love to start using and wrap my head aro=
und -- but for a task worthy of it!).<br>

<br>
I can use a variant to represent states/modes and have a dispatcher which r=
uns the right code... but this introduces what feels like an unnecessary la=
yer of distraction. Returning the closure of the &quot;next state&quot; see=
ms straightforward, but introduces cycles into the typing. :(<br>

<br>
I&#39;m hoping I&#39;m missing something simple. Thank-you for any assistan=
ce!<br>
<br>
=A0-Tony<br>
<br>
</blockquote>
</div></div></blockquote></div><br></div>

--00151740271ac8c68804ac8ba160--
