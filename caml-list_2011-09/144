Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p8GMJDUK022835
	for <caml-list@sympa-roc.inria.fr>; Sat, 17 Sep 2011 00:19:13 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiQDAHvKc07RVdQxkGdsb2JhbABBmHE1hxEBhyAIFAEBAQEJCQ0HFAQhgVMBAQEBAgESAhMZARsSCwEDAQsGBQsDCg0hIQEBEQEFAQoSBhMSEIdVBJdVCotBglqFGTuIbQIDBoZyBIJUkHaKEoJvPYNw
X-IronPort-AV: E=Sophos;i="4.68,395,1312149600"; 
   d="scan'208";a="120176264"
Received: from mail-vw0-f49.google.com ([209.85.212.49])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 17 Sep 2011 00:19:08 +0200
Received: by vws8 with SMTP id 8so7238077vws.36
        for <caml-list@inria.fr>; Fri, 16 Sep 2011 15:19:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=cS+QyTKyBiLMIOYXllsq4iRWUcwiXGmNv5Vti3X5qfU=;
        b=NMTn4NcVAM5SOAl3nR26cb+pVyZrwFVJH9qcMqqDcf10VvogTGNuaELVpdCFDhb+rb
         mYnZcMd34lgX6SqqQ6sAKgpysK8iTSV1BjWGcqptHppNVVh1R2vfQh5L2yMnBZZupLez
         aGkVcrAIV/yvzy98GApJgNZ5yMeJaKPr7hgkc=
Received: by 10.52.29.145 with SMTP id k17mr109834vdh.455.1316211547074; Fri,
 16 Sep 2011 15:19:07 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.221.13.202 with HTTP; Fri, 16 Sep 2011 15:18:47 -0700 (PDT)
In-Reply-To: <CAAmHUA=o8QWUKaLEJ4yPb1miGVNJ1b9pKqyyL3eVUqGJcEWQyA@mail.gmail.com>
References: <alpine.LFD.2.00.1109142210370.2647@surtur.dico.unimi.it>
 <CAOOOohSiD9F9BUyW1+oqkp+Lzi07_y86QuSHv7ppsUxZXascNg@mail.gmail.com> <CAAmHUA=o8QWUKaLEJ4yPb1miGVNJ1b9pKqyyL3eVUqGJcEWQyA@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sat, 17 Sep 2011 00:18:47 +0200
Message-ID: <CAOOOohR7sd7daYvggNMLZaUMXSifhJTkm8_dC4AuPb1+2xgv+g@mail.gmail.com>
To: Raphael Proust <raphlalou@gmail.com>
Cc: Walter Cazzola <cazzola@dico.unimi.it>,
        OCaML Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=20cf307f3484b66ecb04ad166172
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] pattern matching on strings


--20cf307f3484b66ecb04ad166172
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank you Raphael !
Indeed, keeping the C encoding underneath strings (and arrays) is a nice
property.
ph.

2011/9/14 Raphael Proust <raphlalou@gmail.com>

> Richard Jones described the internals of OCaml quite concisely. The
> difference between char arrays and strings is exposed in part two of
> his series of posts:
>
> https://rwmj.wordpress.com/2009/08/05/ocaml-internals-part-2-strings-and-=
other-types/
>
> There is a pointer to
>
> http://caml.inria.fr/pub/ml-archives/caml-list/2002/08/e109df224ff0150b30=
2033e2002dbf87.en.html
> in the article.
>
> On 9/14/11, Philippe Veber <philippe.veber@gmail.com> wrote:
> > Hi Walter,
> >
> > Contrary to Prolog or Haskell, strings in ocaml are not represented as
> char
> > lists. They are exactly like char array, but have their own type,
> operations
> > and syntax : strings are created with String.make (similar to
> Array.make),
> > their length is given by String.length (sim. to Array.length) and the
> chars
> > are accessed with the notation s.[i] (similar to t.(i)). Actually I don=
't
> > know why they are not defined like char arrays (anyone on this ?). Long
> > story short, recursive formulations on strings (likewise for array) will
> > often rely on indices (and thus, not much on pattern matching). Note th=
at
> > you can use optional arguments to hide indices :
> >
> > let rec iter f ?(k =3D 0) s =3D
> >   if k < String.length s then (
> >     f s.[k] ;
> >     iter f ~k:(k + 1) s
> >   )
> >
> > let _ =3D iter print_char "abc";;
> >
> >
> > The closest to your request I see can be achieved using ocaml batteries
> (*),
> > by transforming your string into a list:
> >
> > let rec iter_aux f =3D function
> >     [] -> ()
> >   | c :: s1 -> f c ; iter_aux f s1
> > let iter f s =3D iter_aux f (String.explode s)
> >
> > But this won't be very efficient !
> >
> > You won't find advanced string pattern matching in core ocaml. But
> micmatch
> > seems a nice way to go if that's what you're looking for.
> >
> > cheers,
> > Philippe.
> >
> > (*) http://batteries.forge.ocamlcore.org/
> >
> >
> > 2011/9/14 Walter Cazzola <cazzola@dico.unimi.it>
> >
> >> Hi all,
> >> I'm just trying to write a recursive function that iterates=B9 on a st=
ring
> >> and I'd like to use pattern matching as in:
> >>
> >> let rec iter f s =3D
> >>  match s with
> >>     | ""  -> unit;
> >>     | c^s1 -> f c; iter f s1;;
> >>
> >> but the ^ concatenates 2 strings and not a char with a string and above
> >> all seems to be inadmissible in the patterns.
> >>
> >> Does this mean that I can't write a function on strings by pattern
> >> matching or is there something I don't know?=B2
> >>
> >> Thanks for the help
> >> Walter
> >>
> >> =B9 I know that exists String.iter but I'd like to improve my skill in
> >>  writing functions by using pattern matching
> >> =B2 I read about micmatch but I'd like to avoid non standard packages.
> >> --
> >> --
> >> Caml-list mailing list.  Subscription management and archives:
> >> https://sympa-roc.inria.fr/**wws/info/caml-list<
> https://sympa-roc.inria.fr/wws/info/caml-list>
> >> Beginner's list:
> >> http://groups.yahoo.com/group/**ocaml_beginners<
> http://groups.yahoo.com/group/ocaml_beginners>
> >> Bug reports:
> >> http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bin/caml-bugs
> >
> >>
> >>
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
> >
>
>
> --
> _______
> Raphael
>

--20cf307f3484b66ecb04ad166172
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank you Raphael !<br>Indeed, keeping the C encoding underneath strings (a=
nd arrays) is a nice property.<br>ph.<br><br><div class=3D"gmail_quote">201=
1/9/14 Raphael Proust <span dir=3D"ltr">&lt;<a href=3D"mailto:raphlalou@gma=
il.com">raphlalou@gmail.com</a>&gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">Richard Jones des=
cribed the internals of OCaml quite concisely. The<br>
difference between char arrays and strings is exposed in part two of<br>
his series of posts:<br>
<a href=3D"https://rwmj.wordpress.com/2009/08/05/ocaml-internals-part-2-str=
ings-and-other-types/" target=3D"_blank">https://rwmj.wordpress.com/2009/08=
/05/ocaml-internals-part-2-strings-and-other-types/</a><br>
<br>
There is a pointer to<br>
<a href=3D"http://caml.inria.fr/pub/ml-archives/caml-list/2002/08/e109df224=
ff0150b302033e2002dbf87.en.html" target=3D"_blank">http://caml.inria.fr/pub=
/ml-archives/caml-list/2002/08/e109df224ff0150b302033e2002dbf87.en.html</a>=
<br>


in the article.<br>
<div><div></div><div class=3D"h5"><br>
On 9/14/11, Philippe Veber &lt;<a href=3D"mailto:philippe.veber@gmail.com">=
philippe.veber@gmail.com</a>&gt; wrote:<br>
&gt; Hi Walter,<br>
&gt;<br>
&gt; Contrary to Prolog or Haskell, strings in ocaml are not represented as=
 char<br>
&gt; lists. They are exactly like char array, but have their own type, oper=
ations<br>
&gt; and syntax : strings are created with String.make (similar to Array.ma=
ke),<br>
&gt; their length is given by String.length (sim. to Array.length) and the =
chars<br>
&gt; are accessed with the notation s.[i] (similar to t.(i)). Actually I do=
n&#39;t<br>
&gt; know why they are not defined like char arrays (anyone on this ?). Lon=
g<br>
&gt; story short, recursive formulations on strings (likewise for array) wi=
ll<br>
&gt; often rely on indices (and thus, not much on pattern matching). Note t=
hat<br>
&gt; you can use optional arguments to hide indices :<br>
&gt;<br>
&gt; let rec iter f ?(k =3D 0) s =3D<br>
&gt; =A0 if k &lt; String.length s then (<br>
&gt; =A0 =A0 f s.[k] ;<br>
&gt; =A0 =A0 iter f ~k:(k + 1) s<br>
&gt; =A0 )<br>
&gt;<br>
&gt; let _ =3D iter print_char &quot;abc&quot;;;<br>
&gt;<br>
&gt;<br>
&gt; The closest to your request I see can be achieved using ocaml batterie=
s (*),<br>
&gt; by transforming your string into a list:<br>
&gt;<br>
&gt; let rec iter_aux f =3D function<br>
&gt; =A0 =A0 [] -&gt; ()<br>
&gt; =A0 | c :: s1 -&gt; f c ; iter_aux f s1<br>
&gt; let iter f s =3D iter_aux f (String.explode s)<br>
&gt;<br>
&gt; But this won&#39;t be very efficient !<br>
&gt;<br>
&gt; You won&#39;t find advanced string pattern matching in core ocaml. But=
 micmatch<br>
&gt; seems a nice way to go if that&#39;s what you&#39;re looking for.<br>
&gt;<br>
&gt; cheers,<br>
&gt; Philippe.<br>
&gt;<br>
&gt; (*) <a href=3D"http://batteries.forge.ocamlcore.org/" target=3D"_blank=
">http://batteries.forge.ocamlcore.org/</a><br>
&gt;<br>
&gt;<br>
&gt; 2011/9/14 Walter Cazzola &lt;<a href=3D"mailto:cazzola@dico.unimi.it">=
cazzola@dico.unimi.it</a>&gt;<br>
&gt;<br>
&gt;&gt; Hi all,<br>
&gt;&gt; I&#39;m just trying to write a recursive function that iterates=B9=
 on a string<br>
&gt;&gt; and I&#39;d like to use pattern matching as in:<br>
&gt;&gt;<br>
&gt;&gt; let rec iter f s =3D<br>
&gt;&gt; =A0match s with<br>
&gt;&gt; =A0 =A0 | &quot;&quot; =A0-&gt; unit;<br>
&gt;&gt; =A0 =A0 | c^s1 -&gt; f c; iter f s1;;<br>
&gt;&gt;<br>
&gt;&gt; but the ^ concatenates 2 strings and not a char with a string and =
above<br>
&gt;&gt; all seems to be inadmissible in the patterns.<br>
&gt;&gt;<br>
&gt;&gt; Does this mean that I can&#39;t write a function on strings by pat=
tern<br>
&gt;&gt; matching or is there something I don&#39;t know?=B2<br>
&gt;&gt;<br>
&gt;&gt; Thanks for the help<br>
&gt;&gt; Walter<br>
&gt;&gt;<br>
&gt;&gt; =B9 I know that exists String.iter but I&#39;d like to improve my =
skill in<br>
&gt;&gt; =A0writing functions by using pattern matching<br>
&gt;&gt; =B2 I read about micmatch but I&#39;d like to avoid non standard p=
ackages.<br>
&gt;&gt; --<br>
&gt;&gt; --<br>
&gt;&gt; Caml-list mailing list. =A0Subscription management and archives:<b=
r>
</div></div>&gt;&gt; <a href=3D"https://sympa-roc.inria.fr/**wws/info/caml-=
list" target=3D"_blank">https://sympa-roc.inria.fr/**wws/info/caml-list</a>=
&lt;<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_bl=
ank">https://sympa-roc.inria.fr/wws/info/caml-list</a>&gt;<br>


&gt;&gt; Beginner&#39;s list:<br>
&gt;&gt; <a href=3D"http://groups.yahoo.com/group/**ocaml_beginners" target=
=3D"_blank">http://groups.yahoo.com/group/**ocaml_beginners</a>&lt;<a href=
=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_blank">http:/=
/groups.yahoo.com/group/ocaml_beginners</a>&gt;<br>


&gt;&gt; Bug reports:<br>
&gt;&gt; <a href=3D"http://caml.inria.fr/bin/caml-**bugs" target=3D"_blank"=
>http://caml.inria.fr/bin/caml-**bugs</a>&lt;<a href=3D"http://caml.inria.f=
r/bin/caml-bugs" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a>&g=
t;<br>


&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt; --<br>
<div><div></div><div class=3D"h5">&gt; Caml-list mailing list. =A0Subscript=
ion management and archives:<br>
&gt; <a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_b=
lank">https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
&gt;<br>
<br>
<br>
</div></div><font color=3D"#888888">--<br>
_______<br>
Raphael<br>
</font></blockquote></div><br>

--20cf307f3484b66ecb04ad166172--
