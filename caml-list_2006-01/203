Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 8ACEABBBB
	for <caml-list@yquem.inria.fr>; Thu, 26 Jan 2006 01:52:44 +0100 (CET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id k0Q0qg1X018186
	for <caml-list@yquem.inria.fr>; Thu, 26 Jan 2006 01:52:43 +0100
Received: from localhost (suiren [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.13.1/8.13.1) with ESMTP id k0Q0qbeI019853;
	Thu, 26 Jan 2006 09:52:38 +0900 (JST)
Date: Thu, 26 Jan 2006 09:54:13 +0900 (JST)
Message-Id: <20060126.095413.25913547.garrigue@math.nagoya-u.ac.jp>
To: vinhioi@yahoo.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Debugging problem
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <20060125212943.92348.qmail@web30505.mail.mud.yahoo.com>
References: <20060125212943.92348.qmail@web30505.mail.mud.yahoo.com>
X-Mailer: Mew version 4.2 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 43D81D5A.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 debugging:01 debugging:01 val:01 mutable:01 debugger:01 cmo:01 cmo:01 debugger:01 closures:01 jacques:01 jacques:01 defined:01 variables:02 objects:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.0.3

From: vinh le sy <vinhioi@yahoo.com>

> I am debugging using camldebugger. I got the same
> problem as Robin posted few years ago. 
> Here comes the problem:
> 
> 
> Let's take a simple example (took from the manual):
> 
> (***** File essai.ml *******)
> 
> class point =
>     object
>       val mutable x = 0
>       method get_x = x
>       method move d = x <- x + d
>     end;;
> 
> let my_p = new point;;
> 
> (****************************)
> 
> In order to print the value x of my_p, I separately
> defined a printer
> function as
[...]
> 4. load the printer (I show also the answer of the
> debugger)
>  (ocd) load_printer "essai_printer.cmo"
>  File ./essai_printer.cmo loaded
>  5. install the printer function my_print_point
>  (ocd) install_printer Essai_printer.my_print_point
>  6. ....put a breakpoint immediately after the
> definition of my_p
> 
> 7. print my_p
>  (ocd) p my_p
>  my_p : point = <cannot fetch remote object>
> 
> Do anyone know the solution for the problem?

No simple solution: objects include the closures of their methods,
so you cannot marshall them (or only between identical programs, which
is not the case of the debugger). As printers run on the debugger
side, there is pretty little one can do. What would be needed is a way
for the debugger to inject code into the running program, which is a
rather extensive change...

What you can do is add a break point inside a method of the object,
and then you (should) be able to inspect its variables. But for it to
work, your program must call this method close enough to the point you
want to inspect.

Jacques

