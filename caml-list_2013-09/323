Return-Path: <goswin-v-b@web.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 0122E7EE49
	for <caml-list@sympa.inria.fr>; Mon, 23 Sep 2013 14:30:33 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=pra; client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=mailfrom;
  client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mout.web.de) identity=helo;
  client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="postmaster@mout.web.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkkCAC0zQFLU4xEMlGdsb2JhbABZv3qFSIEeFg4BAQEBBwsLCRIqgiUBAQU6TwsYCSUPBSiIJgEWsSAfiiKPbBaDCIEAA5d7hh+Ofw
X-IPAS-Result: AkkCAC0zQFLU4xEMlGdsb2JhbABZv3qFSIEeFg4BAQEBBwsLCRIqgiUBAQU6TwsYCSUPBSiIJgEWsSAfiiKPbBaDCIEAA5d7hh+Ofw
X-IronPort-AV: E=Sophos;i="4.90,962,1371074400"; 
   d="scan'208";a="33961958"
Received: from mout.web.de ([212.227.17.12])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 23 Sep 2013 14:30:31 +0200
Received:  from frosties.localnet ([95.208.119.3]) by smtp.web.de (mrweb001)
 with ESMTPSA (Nemesis) id 0MhDVJ-1VBDEd2IbZ-00MOkS for <caml-list@inria.fr>;
 Mon, 23 Sep 2013 14:30:30 +0200
Received: from mrvn by frosties.localnet with local (Exim 4.80)
	(envelope-from <goswin-v-b@web.de>)
	id 1VO5HZ-0006gn-E0
	for caml-list@inria.fr; Mon, 23 Sep 2013 14:30:29 +0200
Date: Mon, 23 Sep 2013 14:30:29 +0200
From: Goswin von Brederlow <goswin-v-b@web.de>
To: caml-list@inria.fr
Message-ID: <20130923123029.GA25427@frosties>
References: <CAKdt_-YTk2gfc6P2-jyLVzTbp7heueC+M3t=p_LJWaNMC_zR7Q@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAKdt_-YTk2gfc6P2-jyLVzTbp7heueC+M3t=p_LJWaNMC_zR7Q@mail.gmail.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Provags-ID:  V03:K0:Pa1yRNZdXa65/hekOh2xObIvK4/3nFlAcFTnZ8Wat5jZVUJl5Qc
 +DY4Ck2xuiStjAP5OKp+FIM2EnoiwlYy3yHZJoChH+gvNL+1+oLuC1Rxhi9lSreOt5O5uMI
 snJVbJLTezAYpo4pdrQPkAVyHSQxtc2EDmDuYmNR6hiiP/iZnBTv6/9uzy/gD+7LWWz4yFC
 3ejdlI9bVKcSmFXqPSk5w==
Subject: Re: [Caml-list] Ocaml on an embedded arm system (no linux)

On Fri, Sep 20, 2013 at 09:13:26AM -0500, Dwight Schauer wrote:
> Hi,
> 
> I'm looking at the feasibility of targetting a couple ARM processeors in a
> similar manner to ocapic at its core.
>... 
> The ARM processors I'm looking to target are:
> STM32F407ZGT6 ARM Cortex-M4, 1MB Flash, 196KB RAM (Has floating point)
> STM32F103RB ARM Cortex-M3, 128 KB Flash, 20K RAM (No floating point)
> 
> On both I'd like to be able to run bytecode both out of Flash and RAM.
> (Primarily flash, but RAM for debugging).
> 
> Speed is on overly important as long as I can control when the garbage
> collection is run (could be done in C in the multitasker?).
> 
> Dwight

I'm looking at the same, but for seriously different specs.

My interest would be to run ocaml apps on a Raspberry PI baremetal.
Basically what openmirage does for the cloud (x86 VMs) but for
Raspberry PI and similar dimensioned arm boards.

So targets would be ARMv6 / ARMv7 cpus with 128MB - 2GB ram, USB,
HDMI, ethernet (often via USB), serial and an SD card.

I'm familiar with the hardware side, how to boot, how to initialize
the devices, how to get a picture to show on the HDMI and so on. What
I lack is knowledge in creating a new runtime library for ocaml that
runs directly on the hardware, or with just a verry thin hardware
abstraction layer.

Any pointers for how to do that?

MfG
	Goswin

