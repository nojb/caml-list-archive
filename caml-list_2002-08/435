Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA07610; Sat, 24 Aug 2002 23:47:22 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA07668 for <caml-list@pauillac.inria.fr>; Sat, 24 Aug 2002 23:47:21 +0200 (MET DST)
Received: from relay.rinet.ru (relay.rinet.ru [195.54.192.35])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g7OLjjv07304
	for <caml-list@inria.fr>; Sat, 24 Aug 2002 23:46:12 +0200 (MET DST)
Received: (from uucp@localhost)
	by relay.rinet.ru (8.11.6/8.11.6) with UUCP id g7OLjBJ21858
	for caml-list@inria.fr; Sun, 25 Aug 2002 01:45:11 +0400 (MSD)
X-Envelope-To: caml-list@inria.fr
Received: from dialin1.stormoff (ROVER1) [192.168.0.129] 
	by stormoff with esmtp (Exim 3.12 #1 (Debian))
	id 17iigh-00019f-00; Sun, 25 Aug 2002 01:43:20 +0400
To: caml-list@inria.fr
Subject: [Caml-list] packing Ocaml standard library into Std "namespace"
From: Dmitry Bely <dbely@mail.ru>
Date: Sun, 25 Aug 2002 01:42:28 +0400
Message-ID: <ofbsrl17.fsf@mail.ru>
Lines: 19
User-Agent: Gnus/5.090005 (Oort Gnus v0.05) XEmacs/21.4 (Common Lisp
 (Windows [3]), i586-pc-win32)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Ocaml 3.05 and above introduces new packing facility (ocamlc "-pack"
option). What do you think of using it to pack all Ocaml standard modules
into one big Std module so that the user code could use them as
Std.List.something, Std.Array.something etc. (having an analog of C++
std:: namespace)?

Of course, the old "flat" standard modules should also be left in the
distribution to preserve existing code compatibility, but their direct use
will be deprecated (or not recommended).

I think this will help us reduce the name clash dramatically. E.g. I have
just discovered that I cannot modify ocamlild compiler to use Array.of_list
somethere inside, because it already contains array.ml source file, that
overlaps standard Array module. Having Std module, I just would write
Std.Array.of_string there.

How do you think, does this make any sense?

- Dmitry Bely


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

