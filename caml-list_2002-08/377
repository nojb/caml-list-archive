Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA32081; Thu, 22 Aug 2002 01:51:16 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA32225 for <caml-list@pauillac.inria.fr>; Thu, 22 Aug 2002 01:51:15 +0200 (MET DST)
Received: from favie.faith.gr.jp (favie.faith.gr.jp [61.127.175.250])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g7LNpC924685
	for <caml-list@inria.fr>; Thu, 22 Aug 2002 01:51:13 +0200 (MET DST)
Received: from localhost (dhcp7.faith.gr.jp [192.168.1.17])
	by favie.faith.gr.jp (8.9.3/8.9.3) with ESMTP id IAA22189;
	Thu, 22 Aug 2002 08:51:07 +0900
To: nalexander@amavi.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Naming polymorphic variant types
In-Reply-To: <63094.209.139.221.124.1029945762.squirrel@mail.gx.ca>
References: <1413.207.194.7.18.1029903741.squirrel@mail.gx.ca>
	<20020821142724W.garrigue@kurims.kyoto-u.ac.jp>
	<63094.209.139.221.124.1029945762.squirrel@mail.gx.ca>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020822085053K.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 22 Aug 2002 08:50:53 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 16
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Nick Alexander" <nalexander@amavi.com>
> Now, can anyone point me at docs about polymorphic records?  I can't find
> a thing :(  They were mentioned in the 3.05 release notes as'-
> Support for polymorphic methods and record fields.' 
> which could be an extension of the object-based polymorphic records or a
> really useful extension like the polymorphic variants.

Oops, you didn't parser the above sentence correctly.
What 3.05 adds is "polymorphic methods" and "polymorphic record
fields", but not "polymorphic records" (you still have to simulate
them with objects).  Polymorphic record fields are shortly described
in the core language part of the tutorial; they provide explicit
polymorhism at the record field level, which may be light than going
through objects and methods.

Jacques Garrigue
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

