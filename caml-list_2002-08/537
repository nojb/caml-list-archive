Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA02709; Fri, 30 Aug 2002 12:48:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA02913 for <caml-list@pauillac.inria.fr>; Fri, 30 Aug 2002 12:48:53 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from athlon.baretta.com (r-mi214-6a226.tin.it [62.211.4.226])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g7UAmpD13994
	for <caml-list@inria.fr>; Fri, 30 Aug 2002 12:48:51 +0200 (MET DST)
Received: from baretta.com (localhost.localdomain [127.0.0.1])
	by athlon.baretta.com (Postfix) with ESMTP id 01C4C273C5
	for <caml-list@inria.fr>; Fri, 30 Aug 2002 12:57:05 +0200 (CEST)
Message-ID: <3D6F4F81.4000908@baretta.com>
Date: Fri, 30 Aug 2002 12:57:05 +0200
From: Alessandro Baretta <alex@baretta.com>
Organization: Baretta srl -- www.baretta.com
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.0.0) Gecko/20020529
X-Accept-Language: it, en
MIME-Version: 1.0
To: Ocaml <caml-list@inria.fr>
Subject: [Caml-list] Feature wish: types with invariants
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

This is a *wish* as opposed to a *request* because it does 
not add to the power of the language but only to the comfort 
and ease of use.

I would like to have the possiblity of expressing invariant 
properties which must always hold on a given datatype I'm in 
the process of defining. Consider the following definition 
of a doubly linked list:

type 'a dlist = 'a option * 'a * 'a option

There is absolutely no way to distinguish this data 
structure from that of a binary tree, or, worse yet, of a 
directed graph.

In order to enforce the structural properties of a dlist, I 
would need to disseminate the code with assertions. 
Basically, I'd like the compiler to throw in assertions for 
me whenever a new value of type dlist is constructed. Such 
assertions would have to verify invariant properties 
specified in the definition of the type.

I'd like to write:

exception Dlist_exn
type 'a dlist = 'a option * 'a * 'a option : ( dlist_value )
   where
     (match dlist_value with
        | None, _, None -> true
        | Some(_, _, this), _, None -> this == dlist_value
        | None, _, Some(this, _, _) -> this == dlist_value
        | Some(_, _, this1), _, Some(this2, _, _) ->
            this1 == dlist_value && this2 == dlist_value
      ) otherwise Dlist_exn

What do you guys think? It should not be overly messy, or am 
I completely mistaken?

Alex

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

