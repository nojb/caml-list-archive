Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA27504; Wed, 28 Aug 2002 19:20:44 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA27542 for <caml-list@pauillac.inria.fr>; Wed, 28 Aug 2002 19:20:43 +0200 (MET DST)
Received: from dewberry.cc.columbia.edu (dewberry.cc.columbia.edu [128.59.59.68])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g7SHKgD15612
	for <caml-list@inria.fr>; Wed, 28 Aug 2002 19:20:42 +0200 (MET DST)
Received: from there (tw304h3.cpmc.columbia.edu [156.111.84.180])
	by dewberry.cc.columbia.edu (8.9.3/8.9.3) with SMTP id NAA06955;
	Wed, 28 Aug 2002 13:20:38 -0400 (EDT)
Message-Id: <200208281720.NAA06955@dewberry.cc.columbia.edu>
Content-Type: text/plain;
  charset="iso-8859-1"
From: Oleg <oleg_inconnu@myrealbox.com>
To: John Max Skaller <skaller@ozemail.com.au>
Subject: inlining tail-recursive functions (Re: [Caml-list] O'Caml vs C++: a little benchmark)
Date: Wed, 28 Aug 2002 13:23:13 -0400
X-Mailer: KMail [version 1.3.2]
Cc: caml-list@inria.fr
References: <200208181716.NAA10426@hickory.cc.columbia.edu> <200208232134.RAA09914@dewberry.cc.columbia.edu> <3D6CD46E.1030701@ozemail.com.au>
In-Reply-To: <3D6CD46E.1030701@ozemail.com.au>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wednesday 28 August 2002 09:47 am, John Max Skaller wrote:
> > BTW does O'Caml inline tail-recursive functions?
>
> Do you mean loop unrolling? I hear that it doesn't
> do loop unrolling. [There's nothing to gain from
> a simple inlining, unless the loop is only executed
> once or twice - you'd only save a single function call]

It's been mentioned that O'Caml can inline functions that are not recursive 
(including inlining across module boundaries). Tail-recursive functions can 
be, basically, transformed into non-recursive functions by the compiler. So I 
was wondering if O'Caml inlined them. The benefits of inlining tail-recursive 
functions should thus be the same as the benefits of inlining non-recursive 
functions.

Cheers
Oleg
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

