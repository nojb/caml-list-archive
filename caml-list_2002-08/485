Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA25202; Tue, 27 Aug 2002 15:04:04 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA25208 for <caml-list@pauillac.inria.fr>; Tue, 27 Aug 2002 15:04:03 +0200 (MET DST)
Received: from shiva.jussieu.fr (shiva.jussieu.fr [134.157.0.129])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g7RD42f04002
	for <caml-list@inria.fr>; Tue, 27 Aug 2002 15:04:02 +0200 (MET DST)
Received: from ibm3.cicrp.jussieu.fr (ibm3.cicrp.jussieu.fr [134.157.15.3])
          by shiva.jussieu.fr (8.12.5/jtpda-5.4) with ESMTP id g7RD41jR057746
          ; Tue, 27 Aug 2002 15:04:01 +0200 (CEST)
Received: from ibm1.cicrp.jussieu.fr (ibm1.cicrp.jussieu.fr [134.157.15.1])
          by ibm3.cicrp.jussieu.fr (8.8.8/jtpda/mob-V8) with ESMTP id PAA29630
          ; Tue, 27 Aug 2002 15:02:21 +0200
Received: from localhost (fernande@localhost)
          by ibm1.cicrp.jussieu.fr (8.8.8/jtpda/mob-v8) with SMTP id PAA73544
          ; Tue, 27 Aug 2002 15:00:31 +0200
Date: Tue, 27 Aug 2002 15:00:30 +0200 (DST)
From: Diego Olivier Fernandez Pons <Diego-Olivier.FERNANDEZ-PONS@cicrp.jussieu.fr>
To: John Max Skaller <skaller@ozemail.com.au>
cc: caml-list@inria.fr
Subject: Re: Polymorphic recursion 9Was Re: [Caml-list] Doubly-linked list)
In-Reply-To: <3D66AFAE.7040607@ozemail.com.au>
Message-ID: <Pine.A32.3.95.1020827143732.83860D-100000@ibm1.cicrp.jussieu.fr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=iso-8859-1
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Antivirus: scanned by sophie at shiva.jussieu.fr
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

John Max Skaller a =E9crit :

> I'm confused. I think you mean *type inference* is difficult
> if you want polymorphic recursion?

I'am confused too. We do want type inference, do we not ? And
polymorphic recursion makes type inference undecidable.=20

- Haskell allows full polymorphic recursion but requires providing
explicitly a type signature (in fact, in Haskell you always provide
type annotations even if it is not required)

- Caml now allows a restricted kind of polymorphic recursion but keeps
most of the type inference (there were a few constructions in Caml
which already required type annotations, I don't know yet how
polymorphic methods interfer with type inference, I suppose the Caml
team can answer that question)=20


        Diego Olivier

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

