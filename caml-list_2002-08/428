Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA26640; Fri, 23 Aug 2002 23:57:08 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA26623 for <caml-list@pauillac.inria.fr>; Fri, 23 Aug 2002 23:57:07 +0200 (MET DST)
Received: from mail1.tpgi.com.au (mail.tpgi.com.au [203.12.160.57])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g7NLv5v12567
	for <caml-list@inria.fr>; Fri, 23 Aug 2002 23:57:06 +0200 (MET DST)
Received: from ozemail.com.au (syd-ts15-2600-027.tpgi.com.au [203.213.83.27] (may be forged))
	(authenticated (0 bits))
	by mail1.tpgi.com.au (8.11.6/8.11.6) with ESMTP id g7NLv3p03332
	for <caml-list@inria.fr>; Sat, 24 Aug 2002 07:57:03 +1000
Message-ID: <3D66AFAE.7040607@ozemail.com.au>
Date: Sat, 24 Aug 2002 07:57:02 +1000
From: John Max Skaller <skaller@ozemail.com.au>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.2.1) Gecko/20010901
X-Accept-Language: en-us
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: Re: Polymorphic recursion 9Was Re: [Caml-list] Doubly-linked list)
References: <Pine.A32.3.95.1020821094217.35716C-100000@ibm1.cicrp.jussieu.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Diego Olivier Fernandez Pons wrote:

> Brian Rogoff a écrit
> 
> 
>>Oh I'm not arguing that point, I totally agree that it's omission is a 
>>bad thing. However, not everyone agrees, since you it becomes a lot tougher
>>to build a monomorphizing compiler if you allow it, though it has been 
>>suggested that the same tricks you use to manually remove polymorphic
>>recursion could be used in an SSC (sufficiently smart compiler). 
>>
> 
> I do not agree with your analysis since I really do not believe anyone
> could think that polymorphic recursion is useless. But it is a
> _difficult_ subject and the Caml Team is working on it (you can read
> their research summary)


I'm confused. I think you mean *type inference* is difficult
if you want polymorphic recursion?

-- 
John Max Skaller, mailto:skaller@ozemail.com.au
snail:10/1 Toxteth Rd, Glebe, NSW 2037, Australia.
voice:61-2-9660-0850


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

