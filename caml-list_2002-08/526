Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA27043; Fri, 30 Aug 2002 04:22:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA26967 for <caml-list@pauillac.inria.fr>; Fri, 30 Aug 2002 04:22:20 +0200 (MET DST)
Received: from relay.pair.com (relay1.pair.com [209.68.1.20])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id g7U2MIX27339
	for <caml-list@inria.fr>; Fri, 30 Aug 2002 04:22:18 +0200 (MET DST)
Received: (qmail 26382 invoked from network); 30 Aug 2002 02:22:16 -0000
Received: from slip32-106-38-175.por.uk.prserv.net (HELO checkerlap.d6.com) (32.106.38.175)
  by relay1.pair.com with SMTP; 30 Aug 2002 02:22:16 -0000
X-pair-Authenticated: 32.106.38.175
Message-Id: <4.3.2.7.2.20020829191906.02985970@mail.d6.com>
X-Sender: checker@mail.d6.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Thu, 29 Aug 2002 19:21:42 -0700
To: "M E Leypold @ labnet" <leypold@informatik.uni-tuebingen.de>
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] mixin modules paper and future?
Cc: tom.hirschowitz@inria.fr, caml-list@inria.fr
In-Reply-To: <15725.62310.16647.701975@hod.void.org>
References: <4.3.2.7.2.20020828121746.02985ce0@mail.d6.com>
 <4.3.2.7.2.20020826201812.02c89e20@mail.d6.com>
 <4.3.2.7.2.20020828121746.02985ce0@mail.d6.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


> > I think that this is an incredibly important feature for
> > caml to make headway into large systems development.
>Do you think so?

You misunderstood what I thought was important, or I was unclear, or 
both.  ;)  I think shipping the mixin system (or any system that allows 
module recursion) is important, not the open problems themselves.  All of 
the examples you mentioned (well, I don't know about Cobol, but all the 
others) allow you to have recursive systems spread across multiple files to 
reduce compile times, limit file length, and break things out conceptually.

The concept of a "forward declaration" is critical to writing large scale 
software effectively, I think.

Chris


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

