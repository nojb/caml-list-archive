Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA19317; Fri, 16 Aug 2002 12:28:09 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA19263 for <caml-list@pauillac.inria.fr>; Fri, 16 Aug 2002 12:28:09 +0200 (MET DST)
Received: from comtv.ru (comtv.ru [217.10.32.4])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g7GAS5j18948
	for <caml-list@inria.fr>; Fri, 16 Aug 2002 12:28:08 +0200 (MET DST)
Received: from [10.0.66.9] ([10.0.66.9] verified)
  by comtv.ru (CommuniGate Pro SMTP 3.5.9)
  with ESMTP-TLS id 4122881; Fri, 16 Aug 2002 14:28:05 +0400
Date: Fri, 16 Aug 2002 14:27:26 +0400 (MSD)
From: malc <malc@pulsesoft.com>
X-X-Sender: malc@home.oyster.ru
To: Richard Nyberg <rnyberg@it.su.se>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Bigarray access speed
In-Reply-To: <20020815225004.GA5959@gromit.it.su.se>
Message-ID: <Pine.LNX.4.44.0208161417580.941-100000@home.oyster.ru>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 16 Aug 2002, Richard Nyberg wrote:

> In the following small programs 3) is faster than 1) and 2), which run
> equally fast. However, 4 is significantly slower than the rest. If you
> change the line "a.{i} <- a.{i} + i" to "a.{i} <- i" the execution time
> is halfed but it's still much slower.
> 
> Are access to Bigarrays slower when passed to functions? If so, is it
> fixable? or is there some workaround?
> 
> I stumbled upon this while coding on a school assignment ((not too ;) fast
> multiplication of large integers).
> 
> 1)
> let a = Array.make 1000000 0 in
> for i = 0 to 999999 do
>     a.(i) <- a.(i) + i;
> done;;
> 
> 2)
> let a = Array.make 1000000 0 in
> let rec loop a i =
>   if i <= 999999 then begin
>     a.(i) <- a.(i) + i;
>     loop a (i + 1)
>   end in
> loop a 0;;
> 
> 3)
> open Bigarray;;
> let a = Array1.create int c_layout 1000000 in
> Array1.fill a 0;
> for i = 0 to 999999 do
>   a.{i} <- a.{i} + i
> done;;
> 
> 4)
> open Bigarray;;
> let a = Array1.create int c_layout 1000000 in
> Array1.fill a 0;
> let rec loop a i =
>   if i <= 999999 then begin
>     a.{i} <- a.{i} + i;
>     loop a (i + 1)
>   end in
> loop a 0;;

http://caml.inria.fr/archives/200110/msg00148.html

An aside(not all facts are cheked):

Bigarrays(of at least floats) can have a slight edge over normals arrays.
To get maximal speed of the inner loops data needs to be naturally 
aligned. OCaml does nothing to enforce it for non-big arrays. Bigarrays on 
the other hand are mmaped(4k on IA32) and you get perfectly aligned data 
for free. I was thinking that maybe Array can be extended with
make[create]_aligned, for speed/space tradeoff.

-- 
mailto:malc@pulsesoft.com

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

