Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA22121; Fri, 9 Aug 2002 10:28:12 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA22446 for <caml-list@pauillac.inria.fr>; Fri, 9 Aug 2002 10:28:11 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g798SAr08613
	for <caml-list@inria.fr>; Fri, 9 Aug 2002 10:28:10 +0200 (MET DST)
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id KAA05084;
	Fri, 9 Aug 2002 10:27:57 +0200
Date: Fri, 9 Aug 2002 10:27:57 +0200
From: Markus Mottl <markus@oefai.at>
To: Nicolas Cannasse <warplayer@free.fr>
Cc: Travis Bemann <bemann@execpc.com>, Oleg <oleg_inconnu@myrealbox.com>,
        caml-list@inria.fr
Subject: Re: [Caml-list] Is anyone using caml for music or sound synthesis?
Message-ID: <20020809082757.GB4942@fichte.ai.univie.ac.at>
Mail-Followup-To: Nicolas Cannasse <warplayer@free.fr>,
	Travis Bemann <bemann@execpc.com>,
	Oleg <oleg_inconnu@myrealbox.com>, caml-list@inria.fr
References: <20020808150134.B7570@cilantro.cs.wisc.edu> <200208082235.SAA14930@dewberry.cc.columbia.edu> <20020809011830.A702@execpc.com> <001e01c23f78$5c765700$0700a8c0@warp>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <001e01c23f78$5c765700$0700a8c0@warp>
User-Agent: Mutt/1.4i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 09 Aug 2002, Nicolas Cannasse wrote:
> Yes but such algorithms are making a large use of float calculations, and
> ocaml float are boxed into a block, so such calcs could trigger multiples
> allocations.

It's true that this can deteriorate performance in the general case,
but note that the compiler performs a fair amount of unboxing (e.g.
float arrays when the compiler can see the float type). This usually makes
numeric code run surprisingly fast in OCaml. If you know the details, you
can most often write your code in such a way that it performs efficiently.
Then it really isn't much worse than C.

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

