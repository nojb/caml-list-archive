Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA21100; Fri, 2 Aug 2002 04:56:29 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA21072 for <caml-list@pauillac.inria.fr>; Fri, 2 Aug 2002 04:56:28 +0200 (MET DST)
Received: from ext-ch1gw-2.online-age.net (ext-ch1gw-2.online-age.net [216.34.191.36])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g722uRr09058
	for <caml-list@inria.fr>; Fri, 2 Aug 2002 04:56:27 +0200 (MET DST)
Received: from int-ch1gw-2.online-age.net (int-ch1gw-2 [3.159.232.66])
	by ext-ch1gw-2.online-age.net (8.12.3/8.9.1/990426-RLH) with ESMTP id g722uQEN011270;
	Thu, 1 Aug 2002 22:56:26 -0400 (EDT)
Received: from uswaumsxb4medge.med.ge.com (localhost [127.0.0.1])
	by int-ch1gw-2.online-age.net (8.12.3/8.12.3/990426-RLH) with ESMTP id g722uKoL022186;
	Thu, 1 Aug 2002 22:56:20 -0400 (EDT)
Received: by USWAUMSXB4MEDGE with Internet Mail Service (5.5.2656.59)
	id <QAR56FZ2>; Thu, 1 Aug 2002 21:56:09 -0500
Message-ID: <D4DBD8568F05D511A1C20002A55C008C09C294F6@uswaumsx03medge.med.ge.com>
From: "Gurr, David (MED, self)" <David.Gurr@med.ge.com>
To: Noel Welsh <noelwelsh@yahoo.com>
Cc: caml-list@inria.fr
Subject: RE: ocaml, simd, & fftwgel RE: [Caml-list] Caml productivity.
Date: Thu, 1 Aug 2002 21:56:09 -0500 
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2656.59)
Content-Type: text/plain
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Noel Welsh:

> There are a least two parallelising C compilers for
> the PC: Intel's and CodePlay's.  CodePlay say they do
> a better job than Intel.  I imagine Intel hold a
> differing opinion.

But do they do a better job than fftwgel or Spiral
or Atlas?

> I'm interested in knowing the deficiencies of these
> compilers.  I imagine they run into problems with
> dependency analysis on complicated array expressions. 
> Similarly, I'm interested in knowing in what areas HPF
> and SAC are performant.  It appears to me that a
> functional language (where dependency analysis is
> simple) with array shape inference should be capable
> of creating very array fast code is almost all
> situations (and the SAC benchmarks show them beating
> HPF).

Is SAC available for public inspection?

> 
> Cheers,
> Noel
 
I have not used either compiler.  From the FFTW, Atlas, etc experience
the only way to get consistently high performance from a C compiler is
to do most of the work for the compiler and carefully feed it code that
it correctly optimizes.  This is a compiler and application specific
trial and error process.  FFTW does the optimization and scheduling for
the C compiler.  Once you do this, it is much less clear what
the value added of the C compiler is.  In particular, the amount of 
refinement that would be needed to get ocamlopt to match C compilers
at this task might be relatively small.  I have not read to code to
fftwgel but if fftwgel could be married to ocamlopt, they might well
produce code superior to intel or codeplay since C is notoriously
difficult to optimize even without SIMD.

-D
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

