Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 6E0E9BC0A
	for <caml-list@yquem.inria.fr>; Fri, 22 Dec 2006 13:39:54 +0100 (CET)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id kBMCdrhE014182
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Fri, 22 Dec 2006 13:39:54 +0100
Received: from [80.229.56.224] (helo=[10.0.0.5])
	 by ptb-relay01.plus.net with esmtp (Exim) id 1Gxjgm-0007rt-Jk
	for caml-list@yquem.inria.fr; Fri, 22 Dec 2006 12:39:52 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Scripting in ocaml
Date: Fri, 22 Dec 2006 12:37:32 +0000
User-Agent: KMail/1.9.5
References: <6dbd4d000612201941wcd4b09anc503a13889576512@mail.gmail.com> <458AF864.20902@hq.idt.net> <20061221221921.GM9440@apotheon.com>
In-Reply-To: <20061221221921.GM9440@apotheon.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200612221237.32390.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 458BD219.005 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 compile-time:01 runtime:01 runtime:01 inference:01 run-time:01 ocaml:01 frog:98 compilers:01 wrote:01 dynamically:01 typing:01 typing:01 caml-list:01 lisp:01 

On Thursday 21 December 2006 22:19, Chad Perrin wrote:
> So, basically, by "strict typing" you mean something like both
> compile-time and runtime type checking?  If it was *only* runtime type
> checking, you'd just be using a dynamic type system (the opposite of
> static typing, basically).

As many Lisp compilers try to do type inference and check types at run-time 
(giving warnings), Lisp is not dynamically typed according to your argument. 
Moreover, this is a property of the implementation and not of the language.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

