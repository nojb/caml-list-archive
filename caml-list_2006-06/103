Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 6C1FBBB84
	for <caml-list@yquem.inria.fr>; Thu, 29 Jun 2006 00:49:03 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k5SMn3ia016537
	for <caml-list@yquem.inria.fr>; Thu, 29 Jun 2006 00:49:03 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA27593 for <caml-list@pauillac.inria.fr>; Thu, 29 Jun 2006 00:49:02 +0200 (MET DST)
Received: from wx-out-0102.google.com (wx-out-0102.google.com [66.249.82.197])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k5SMn1xJ010167
	for <caml-list@inria.fr>; Thu, 29 Jun 2006 00:49:02 +0200
Received: by wx-out-0102.google.com with SMTP id s9so1253247wxc
        for <caml-list@inria.fr>; Wed, 28 Jun 2006 15:48:58 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:references;
        b=VWWzC+lJPJamqPy/vs7RHcANZaEa3X3Kviw0s4+lKkDJ+GvH8Pafu+KNNP2XAPRR264iXlD4aIw0cm3HAzCzSGK97AlOClDSwucDOV64XzUU70SZy9E7PjmeAoN7S7ftzFeoV54zNJ2HZFrQ7rF8NZzsfIAA/zgLOxNZ4uzJIzY=
Received: by 10.70.53.11 with SMTP id b11mr2080903wxa;
        Wed, 28 Jun 2006 15:48:55 -0700 (PDT)
Received: by 10.70.55.19 with HTTP; Wed, 28 Jun 2006 15:48:55 -0700 (PDT)
Message-ID: <f8560b80606281548x359ec5b1u57eb496c1dbe4481@mail.gmail.com>
Date: Wed, 28 Jun 2006 18:48:55 -0400
From: "Markus Mottl" <markus.mottl@gmail.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Marshalling data format deteriorates compressibility
In-Reply-To: <Pine.LNX.4.63.0606271629090.8465@munge>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_14230_30171008.1151534935926"
References: <Pine.LNX.4.63.0606271629090.8465@munge>
X-j-chkmail-Score: MSGID : 44A3075F.000 on concorde : j-chkmail score : XX : 5/20 0
X-j-chkmail-Score: MSGID : 44A3075D.000 on nez-perce : j-chkmail score : XXX : 5/20 1
X-Miltered: at concorde with ID 44A3075F.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 44A3075D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; markus:01 mottl:01 markus:01 mottl:01 marshalling:01 ocaml:01 marshalling:01 ocaml:01 caml-list:01 data:02 data:02 shared:04 marshalled:04 problem:05 problem:05 
X-Attachments: type="text/x-patch" name="absolute.patch" name="absolute.patch" 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=INFO_TLD,RCVD_BY_IP 
	autolearn=disabled version=3.0.3

------=_Part_14230_30171008.1151534935926
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hi,

I have just finished (and attached) a patch for the latest CVS-release
of OCaml, which adds a new marshalling flag.  This flag generates a
different marshalling format, which uses absolute addresses to refer
to shared values.  This fixes the problem of bad compressibility of
marshalled OCaml data.  See the patch header for more information.

Since the patch is quite small and does not break any existing code,
we'd be very grateful if it could be made part of the next
OCaml-release.  I'll also enter the patch into the OCaml bugtracker so
that people running into the same problem can find it there, too.

Best regards,
Markus

-- 
Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com

------=_Part_14230_30171008.1151534935926
Content-Type: text/x-patch; name=absolute.patch; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Attachment-Id: f_ep09lgsr
Content-Disposition: attachment; filename="absolute.patch"

---------------------------------------------------------------------------

            PATCH FOR ABSOLUTE SHARING IN MARSHALLED DATA FOR OCAML

---------------------------------------------------------------------------

                                    LICENSE

Copyright (C) 2006
Jane Street Holding, LLC
Address: 111 Broadway, 21st Floor, 10006 New York, USA
Author: Markus Mottl <markus.mottl@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Neither the name of Jane Street Holding, LLC, nor the names of its
      contributors may be used to endorse or promote products derived
      from this patch without specific prior written permission.

THIS PATCH IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS PATCH, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

---------------------------------------------------------------------------

                               APPLYING THE PATCH

The patch was generated against the CVS-release of OCaml as of 2006-06-28,
but may also work with other releases.

To apply it just check out OCaml from the CVS-server at INRIA, or download
the source distribution, and change to the source directory.

Apply the patch, e.g.:

  patch -p0 < {path to this patch}/absolute.patch

Now build OCaml from source as you would otherwise do (see the
INSTALL-file in the OCaml-distribution for more details).

Finally, install OCaml with "make install", and you are done.

---------------------------------------------------------------------------

                                     USAGE

There is a new flag in module Marshal: Absolute_sharing.  When passed
during marshalling data, shared values will be encoded using absolute
rather than relative offsets.  This may change the size of the resulting
data, sometimes slightly increasing, other times slightly decreasing it.
Generally, if there are only a few shared values, absolute sharing will
produce better results than the default relative sharing.  If there are
many shared values and if they are in close proximity to their pointers,
the default relative sharing will work better.

The biggest difference is that absolute sharing may often lead to greatly
improved compression results when applying compressors like e.g. gzip to
the data, because patterns of absolute addresses to shared values are
constant and can be exploited by the compressor.  Heavily shared data
as e.g. resulting from hashconsing may only require a small fraction
of storage space when compressed as opposed to compressed data encoded
using relative sharing.  We have seen orders of magnitude difference on
artificial data, and factors of three on large production data.

Values marshalled with older OCaml-runtimes are fully supported.
Values marshalled with the default settings can also be used by older
applications.  But note that older applications cannot read the data
format using absolute sharing.

New York, 2006-06-28
Markus Mottl
Jane Street Holding, LLC

---------------------------------------------------------------------------

Index: byterun/extern.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/byterun/extern.c,v
retrieving revision 1.58.2.2
diff -u -r1.58.2.2 extern.c
--- byterun/extern.c=0910 Jun 2006 09:02:40 -0000=091.58.2.2
+++ byterun/extern.c=0928 Jun 2006 21:59:08 -0000
@@ -35,6 +35,7 @@
=20
 static int extern_ignore_sharing; /* Flag to ignore sharing */
 static int extern_closures;     /* Flag to allow externing code pointers *=
/
+static int extern_absolute_sharing;  /* Flag to turn on absolute sharing *=
/
=20
 /* Trail mechanism to undo forwarding pointers put inside objects */
=20
@@ -334,7 +335,10 @@
     }
     /* Check if already seen */
     if (Color_hd(hd) =3D=3D Caml_blue) {
-      uintnat d =3D obj_counter - (uintnat) Field(v, 0);
+      uintnat d =3D
+        extern_absolute_sharing
+          ? (uintnat) Field(v, 0)
+          : obj_counter - (uintnat) Field(v, 0);
       if (d < 0x100) {
         writecode8(CODE_SHARED8, d);
       } else if (d < 0x10000) {
@@ -449,8 +453,8 @@
   }
 }
=20
-enum { NO_SHARING =3D 1, CLOSURES =3D 2 };
-static int extern_flags[] =3D { NO_SHARING, CLOSURES };
+enum { NO_SHARING =3D 1, CLOSURES =3D 2, ABSOLUTE_SHARING =3D 4 };
+static int extern_flags[] =3D { NO_SHARING, CLOSURES, ABSOLUTE_SHARING };
=20
 static intnat extern_value(value v, value flags)
 {
@@ -460,13 +464,18 @@
   fl =3D caml_convert_flag_list(flags, extern_flags);
   extern_ignore_sharing =3D fl & NO_SHARING;
   extern_closures =3D fl & CLOSURES;
+  extern_absolute_sharing =3D fl & ABSOLUTE_SHARING;
   /* Initializations */
   init_extern_trail();
   obj_counter =3D 0;
   size_32 =3D 0;
   size_64 =3D 0;
   /* Write magic number */
-  write32(Intext_magic_number);
+  write32(
+    extern_absolute_sharing
+      ? Intext_magic_number_absolute_sharing
+      : Intext_magic_number
+  );
   /* Set aside space for the sizes */
   extern_ptr +=3D 4*4;
   /* Marshal the object */
Index: byterun/intern.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/byterun/intern.c,v
retrieving revision 1.60
diff -u -r1.60 intern.c
--- byterun/intern.c=0922 Sep 2005 14:21:50 -0000=091.60
+++ byterun/intern.c=0928 Jun 2006 21:59:08 -0000
@@ -40,6 +40,9 @@
 /* 1 if intern_input was allocated by caml_stat_alloc()
    and needs caml_stat_free() on error, 0 otherwise. */
=20
+static int intern_absolute_sharing;
+/* 1 if absolute sharing is used, 0 otherwise. */
+
 static header_t * intern_dest;
 /* Writing pointer in destination block */
=20
@@ -187,7 +190,10 @@
         Assert (ofs > 0);
         Assert (ofs <=3D obj_counter);
         Assert (intern_obj_table !=3D NULL);=20
-        v =3D intern_obj_table[obj_counter - ofs];
+        v =3D
+          intern_absolute_sharing
+            ? intern_obj_table[ofs]
+            : intern_obj_table[obj_counter - ofs];
         break;
       case CODE_SHARED16:
         ofs =3D read16u();
@@ -387,6 +393,14 @@
   }
 }
=20
+static void handle_magic(uint32 magic, char *msg)
+{
+  if (magic =3D=3D Intext_magic_number) intern_absolute_sharing =3D 0;
+  else if (magic =3D=3D Intext_magic_number_absolute_sharing)
+    intern_absolute_sharing =3D 1;
+  else caml_failwith(msg);
+}
+
 value caml_input_val(struct channel *chan)
 {
   uint32 magic;
@@ -397,7 +411,7 @@
   if (! caml_channel_binary_mode(chan))
     caml_failwith("input_value: not a binary channel");
   magic =3D caml_getword(chan);
-  if (magic !=3D Intext_magic_number) caml_failwith("input_value: bad obje=
ct");
+  handle_magic(magic, "input_value: bad object");
   block_len =3D caml_getword(chan);
   num_objects =3D caml_getword(chan);
   size_32 =3D caml_getword(chan);
@@ -508,8 +522,7 @@
   intern_src =3D intern_input + ofs;
   intern_input_malloced =3D 1;
   magic =3D read32u();
-  if (magic !=3D Intext_magic_number)=20
-    caml_failwith("input_value_from_malloc: bad object");
+  handle_magic(magic, "input_value_from_malloc: bad object");
   block_len =3D read32u();
   obj =3D input_val_from_block();
   /* Free the input */
@@ -527,8 +540,7 @@
   intern_src =3D intern_input;
   intern_input_malloced =3D 0;
   magic =3D read32u();
-  if (magic !=3D Intext_magic_number)=20
-    caml_failwith("input_value_from_block: bad object");
+  handle_magic(magic, "input_value_from_block: bad object");
   block_len =3D read32u();
   if (5*4 + block_len > len)
     caml_failwith("input_value_from_block: bad block length");
@@ -544,9 +556,7 @@
   intern_src =3D &Byte_u(buff, Long_val(ofs));
   intern_input_malloced =3D 0;
   magic =3D read32u();
-  if (magic !=3D Intext_magic_number){
-    caml_failwith("Marshal.data_size: bad object");
-  }
+  handle_magic(magic, "Marshal.data_size: bad object");
   block_len =3D read32u();
   return Val_long(block_len);
 }
Index: byterun/intext.h
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/byterun/intext.h,v
retrieving revision 1.32
diff -u -r1.32 intext.h
--- byterun/intext.h=0922 Sep 2005 14:21:50 -0000=091.32
+++ byterun/intext.h=0928 Jun 2006 21:59:08 -0000
@@ -30,6 +30,7 @@
 /* Magic number */
=20
 #define Intext_magic_number 0x8495A6BE
+#define Intext_magic_number_absolute_sharing 0xEB6A5948
=20
 /* Codes for the compact format */
=20
Index: otherlibs/threads/marshal.ml
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/otherlibs/threads/marshal.ml,v
retrieving revision 1.9
diff -u -r1.9 marshal.ml
--- otherlibs/threads/marshal.ml=0927 May 2004 15:28:05 -0000=091.9
+++ otherlibs/threads/marshal.ml=0928 Jun 2006 21:59:08 -0000
@@ -16,6 +16,7 @@
 type extern_flags =3D
     No_sharing
   | Closures
+  | Absolute_sharing
=20
 external to_string: 'a -> extern_flags list -> string
     =3D "caml_output_value_to_string"
Index: stdlib/marshal.ml
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/stdlib/marshal.ml,v
retrieving revision 1.9
diff -u -r1.9 marshal.ml
--- stdlib/marshal.ml=0925 Oct 2005 18:34:07 -0000=091.9
+++ stdlib/marshal.ml=0928 Jun 2006 21:59:08 -0000
@@ -16,6 +16,7 @@
 type extern_flags =3D
     No_sharing
   | Closures
+  | Absolute_sharing
=20
 external to_channel: out_channel -> 'a -> extern_flags list -> unit
     =3D "caml_output_value"
Index: stdlib/marshal.mli
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /caml/ocaml/stdlib/marshal.mli,v
retrieving revision 1.14
diff -u -r1.14 marshal.mli
--- stdlib/marshal.mli=0925 Oct 2005 18:34:07 -0000=091.14
+++ stdlib/marshal.mli=0928 Jun 2006 21:59:08 -0000
@@ -47,6 +47,7 @@
 type extern_flags =3D
     No_sharing                          (** Don't preserve sharing *)
   | Closures                            (** Send function closures *)
+  | Absolute_sharing        (** Use absolute addresses for sharing *)
 (** The flags to the [Marshal.to_*] functions below. *)
=20
 val to_channel : out_channel -> 'a -> extern_flags list -> unit






------=_Part_14230_30171008.1151534935926--

