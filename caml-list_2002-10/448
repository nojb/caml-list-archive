Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA01785; Thu, 17 Oct 2002 17:55:10 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA03394 for <caml-list@pauillac.inria.fr>; Thu, 17 Oct 2002 17:55:10 +0200 (MET DST)
Received: from boule.etirade.com (12-247-44-244.client.attbi.com [12.247.44.244])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id g9HFt9D14166
	for <Caml-list@inria.fr>; Thu, 17 Oct 2002 17:55:09 +0200 (MET DST)
Received: (qmail 1075 invoked from network); 17 Oct 2002 15:55:07 -0000
Received: from unknown (HELO batard.etirade.com) (192.168.1.34)
  by boule.etirade.com with SMTP; 17 Oct 2002 15:55:07 -0000
Content-Type: text/plain;
  charset="iso-8859-1"
From: Jeffrey Palmer <jeffrey.palmer@acm.org>
To: Caml-list@inria.fr
Subject: Re: [Caml-list] productivity improvement
Date: Thu, 17 Oct 2002 10:55:05 -0500
User-Agent: KMail/1.4.3
References: <Pine.A41.4.44.0210171047120.3235898-100000@ibm1.cicrp.jussieu.fr>
In-Reply-To: <Pine.A41.4.44.0210171047120.3235898-100000@ibm1.cicrp.jussieu.fr>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
Message-Id: <200210171055.05646.jeffrey.palmer@acm.org>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello all. I have a request.

Can we please cease the C++ flamefest? Some of us are not able to choose=20
our implementation language quite as easily as others, and, frankly,=20
endless discussions about language X's failings just irritate the=20
people that are forced to use X daily. Making blanket statements like=20
"language X clearly isn't good for anything" is just ridiculous -=20
nothing is ever that clear cut.=20

If we were to talk about the aspects of C++ (or Java, or ...) that we=20
could apply to ocaml, that might be a different story (there might not=20
be many!)

For my part, I'm under the impression that cross-module functor=20
specializations (terminology?) in ocaml, akin to C++ template=20
instantiation, are not optimized in the same manner as C++ templates=20
(compiled away). Is this true? This is a killer for me, as I can't even=20
afford the overhead of a function call (don't ask).

I would love to be able to write my product in ocaml, and plop a C++=20
wrapper on top of it, but practicalities unfortunately make this an=20
impossibility. I need to do things similar to Blitz, which I suppose=20
dooms me to template hell. ;)

=09- j

--=20
The river is moving.
The blackbird must be flying.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

