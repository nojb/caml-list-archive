Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA25426; Thu, 10 Oct 2002 11:42:39 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA25340 for <caml-list@pauillac.inria.fr>; Thu, 10 Oct 2002 11:42:38 +0200 (MET DST)
Received: from mailhost.tni.fr (firewall.tni.fr [195.25.255.61])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g9A9gb505014
	for <caml-list@inria.fr>; Thu, 10 Oct 2002 11:42:37 +0200 (MET DST)
Received: from groscool.tni.fr ([195.25.255.1]) by mailhost.tni.fr
          (Netscape Messaging Server 3.62)  with SMTP id 614;
          Thu, 10 Oct 2002 11:42:14 +0200
Received: from 192.168.7.60 by groscool.tni.fr (InterScan E-Mail VirusWall NT); Thu, 10 Oct 2002 11:42:14 +0200 (Paris, Madrid (heure d'été))
Message-ID: <3DA54B75.80A7E7ED@tni.fr>
Date: Thu, 10 Oct 2002 11:42:13 +0200
From: "sebastien FURIC" <sebastien.furic@tni-valiosys.com>
X-Mailer: Mozilla 4.7 [fr] (WinNT; I)
X-Accept-Language: fr
MIME-Version: 1.0
To: Alain Frisch <frisch@clipper.ens.fr>, Caml list <caml-list@inria.fr>
Subject: Re: [Caml-list] Num library
References: <Pine.SOL.4.44.0210101033080.11248-100000@clipper.ens.fr>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

 Hello,

Alain Frisch a écrit :
> 
> Hello Caml List,
> 
> I'm considering using the Num library (from the standard distribution) for
> implementing numbers in an interpreter. Questions:
> 
> - Is there any benchmark available ?  What is the overhead when dealing
>   with "small" integers ?
> 
> - How does the library compare with other large/rational numbers
>   implementations ?

 I made some benchmarks with Dolphin Smalltalk (a pure Smalltalk
bytecode interpreter) and O'Caml (using ocamlopt) a few months ago. To
my great surprise, Dolphin Samlltalk outperformed O'Caml by a factor of
4 over various tests IIRC. I think the same results may be obtained with
other modern big numbers implementations against O'Caml's one.
 The context was the following: I had to rewrite a program that performs
symbolic manipulations from Smalltalk to O'Caml and this benchmark was
the first thing I did to test O'Caml's performance (I was a little
disappointed!). Finally, despite O'Caml's poor performance over bignum
computations, O'Caml outperformed Smalltalk by a factor of 100 over
"real world" benchmarks! (because only a few percents of the time is
spent in bignum calculations and most of the time is spent doing
substitutions etc.).

 Sébastien.
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

