Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA15536; Fri, 18 Oct 2002 00:05:25 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA15669 for <caml-list@pauillac.inria.fr>; Fri, 18 Oct 2002 00:05:24 +0200 (MET DST)
Received: from cs.rice.edu (cs.rice.edu [128.42.1.30])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g9HM5N523833
	for <caml-list@inria.fr>; Fri, 18 Oct 2002 00:05:23 +0200 (MET DST)
Received: from localhost (localhost [127.0.0.1])
	by cs.rice.edu (Postfix) with SMTP
	id AAAEE4AA60; Thu, 17 Oct 2002 17:05:22 -0500 (CDT)
Received: from localhost (localhost [127.0.0.1])
	by cs.rice.edu (Postfix) with ESMTP
	id 7955C4AA5E; Thu, 17 Oct 2002 17:05:22 -0500 (CDT)
Received: from frosty.cs.rice.edu (frosty.cs.rice.edu [128.42.1.20])
	by cs.rice.edu (Postfix) with ESMTP
	id 89B0F4AA29; Thu, 17 Oct 2002 17:05:21 -0500 (CDT)
Received: from localhost (taha@localhost)
	by frosty.cs.rice.edu (8.9.3+Sun/8.9.0) with ESMTP id RAA14472;
	Thu, 17 Oct 2002 17:05:12 -0500 (CDT)
X-Authentication-Warning: frosty.cs.rice.edu: taha owned process doing -bs
Date: Thu, 17 Oct 2002 17:05:11 -0500 (CDT)
From: Walid Taha <taha@cs.rice.edu>
To: Dmitry Lomov <dsl@intellij.com>
Cc: <caml-list@inria.fr>, Cristiano Calcagno <calcagno@disi.unige.it>
Subject: Re: [Caml-list] Runtime (native) compilation
In-Reply-To: <1034867271.3655.7.camel@eddie>
Message-ID: <Pine.GSO.4.33.0210171645430.11458-100000@frosty.cs.rice.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Virus-Scanned: by AMaViS snapshot-20020300
X-DCC--Metrics: cs.rice.edu 1066; Body=1 Fuz1=1 Fuz2=1
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Dear Dmitry,

In MetaOCaml, a call to run (or "eval", written ".!") invokes the compiler
(be it bytecode or native).  So far, we've been able to make things work
reasonably well for the bytecode compiler.  In the bytecode setting, a
call to run generates new bytecode, and using the same machinary that is
used for the top level read-eval-print loop in OCaml, we add this new
bytecode to the running bytecode, and then just jump to it.  With the
native code it is not completely clear to me what needs to be done to
mimic this.  I don't know if it would be difficult or easy to make
ocamlopt generate machine code directly.  If you have some insights into
this, I would be very interested.  Regarding linking, I had assumed that
the assembly code (or machine code) generated will have some stubs
missing, and some kind of linking will be needed to fill those in.  But
now that you've raised a doubt about that, I have to admit that I'm not a
100% sure that some kind of linking will be needed.  I will look into this
question.

Incidently, your dynamic caml systems is very interesting (I just found
the users manual).  Does its "eval" invoke the compiler at runtime like
MetaOCamls?  If so, I would be very interested in the details of your
experience generating code for the i386.

Best regards,

Walid.

On 17 Oct 2002, Dmitry Lomov wrote:

|Walid,
|
|although Dynamic Caml does not (yet) work on native code, we have
|implemented (a while ago actually) a very preliminary prototype
|implementation of it for i386. We do not use ocamlopt for code
|generation however - we implemented a custom code generator. Do you
|think it is difficult to make ocamlopt generate machine code instead of
|assembler, and why do you think one needs linking at all? (Probably it
|all different in MetaOCaml - I have not studied the internals)
|
|As to dealing with runtime, I do not see much differences between
|bytecode and native code case - at least in Dynamic Caml. What problems
|do you perceive?
|
|Friendly,
|Dmitry
|
|
|>
|> Hello,
|>
|> We've been working on a while on building MetaOCaml, which provides three
|> basic constructs for contructing programs at runtime and compiling them.
|> This seems to be working well in the context of the bytecode compiler.
|> For the native code compiler, though, things seems to be more tricky.  In
|> particular, the native code compiler produces assembly code.  This has to
|> be assembled, linked, and loaded to memory.  Does any one know of a fast
|> way to do the last three steps (other than calling the assembler, linker,
|> and loader).  Also, has anyone dealt with the issue of coordinating the
|> runtime for the original running image and the newly produced runnable
|> image (in particular, has anyone dealt with the garbage collection
|> issues?)
|>
|> Walid.
|>
|--
|Dmitry Lomov
|IntelliJ Labs / JetBrains Inc.
|http://www.intellij.com
|"Develop with pleasure!"
|

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

