Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA12509; Thu, 17 Oct 2002 22:01:33 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA12301 for <caml-list@pauillac.inria.fr>; Thu, 17 Oct 2002 22:01:32 +0200 (MET DST)
Received: from relay.pair.com (relay1.pair.com [209.68.1.20])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id g9HK1V520625
	for <Caml-list@inria.fr>; Thu, 17 Oct 2002 22:01:31 +0200 (MET DST)
Received: (qmail 5020 invoked from network); 17 Oct 2002 20:01:30 -0000
Received: from node-d8e9cca2-sfo-onnet.worldcom.com (HELO checkerlap.d6.com) (216.233.204.162)
  by relay1.pair.com with SMTP; 17 Oct 2002 20:01:30 -0000
X-pair-Authenticated: 216.233.204.162
Message-Id: <4.3.2.7.2.20021017125123.0309e000@mail.d6.com>
X-Sender: checker@mail.d6.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Thu, 17 Oct 2002 13:01:39 -0700
To: Shivkumar Chandrasekaran <shiv@ece.ucsb.edu>, Caml-list@inria.fr
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] Re: Camlp4 optimizations (was: productivity
  improvement)
In-Reply-To: <C1AADA5A-E203-11D6-8B3F-000393942C76@ece.ucsb.edu>
References: <4.3.2.7.2.20021017112600.0318b410@mail.d6.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>However, for casual coding a la Matlab style, the lack of overloading 
>could be seen as a problem. Of course one must then be prepared to live 
>with unnecessary copying and memory accesses.

Of course, that's why I said "look nice and pretty for numerical code" not 
"be efficient".  There are times when you want blas-style functions for 
efficiency, and times when you want to write d = (a + b) * (c - b).  Caml 
can't do the latter [very cleanly].  That was my point.

Saying the latter isn't necessary or desired is the same type of argument 
people use against other high-level language features (gc, etc.).  When 
programming, most of my time is spent figuring out what I want to do and 
how, it is not spent optimizing (and I write games, which are notoriously 
prematurely optimized).  Once I figure something out, then I'll optimize it 
if necessary.  Blas-style functions inhibit rapid prototyping and 
experimentation, while expression-syntax-style operators inhibit 
efficiency.  I want to be able to use both, each at the appropriate time.

That's why I wish Ocaml supported the latter better.

Chris


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

