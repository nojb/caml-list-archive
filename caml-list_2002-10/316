Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA17327; Sun, 13 Oct 2002 10:55:02 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA17042 for <caml-list@pauillac.inria.fr>; Sun, 13 Oct 2002 10:55:02 +0200 (MET DST)
Received: from mel-rto6.wanadoo.fr (smtp-out-6.wanadoo.fr [193.252.19.25])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g9D8t1518100;
	Sun, 13 Oct 2002 10:55:01 +0200 (MET DST)
Received: from mel-rta9.wanadoo.fr (193.252.19.69) by mel-rto6.wanadoo.fr (6.5.007)
        id 3DA24D4D003493C9; Sun, 13 Oct 2002 10:55:00 +0200
Received: from iliana (80.14.240.235) by mel-rta9.wanadoo.fr (6.5.007)
        id 3DA24B29003518D9; Sun, 13 Oct 2002 10:55:00 +0200
Received: from luther by iliana with local (Exim 3.36 #1 (Debian))
	id 180eg4-0000Kn-00; Sun, 13 Oct 2002 11:04:48 +0200
Date: Sun, 13 Oct 2002 11:04:48 +0200
To: Xavier Leroy <xavier.leroy@inria.fr>
Cc: nadji@noos.fr, "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] Native Threads
Message-ID: <20021013090448.GA1277@iliana>
References: <3DA01AAF.14FD242C@noos.fr> <20021013104353.G13771@pauillac.inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20021013104353.G13771@pauillac.inria.fr>
User-Agent: Mutt/1.4i
From: Sven LUTHER <luther@dpt-info.u-strasbg.fr>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sun, Oct 13, 2002 at 10:43:53AM +0200, Xavier Leroy wrote:
> > I've just been playing with threads and I noticed at execution
> > time that Thread.kill is not implemented by the posix-compiled
> > version of the library. I used this flag because I thought that
> > it would be faster (please correct me if I'm wrong), and there
> > was no mention that Thread.kill would not be implemented.
> > By looking at the sources, I learned that the reason is
> > "problems with cleanup handlers on several platforms".
> > That's fine with me, but I would like to compile my
> > program :)
> 
> The documentation should definitely be updated to mention that
> Thread.kill is not only unavailable with system threads, but also
> deprecated and definitely not advised.  

Why not remove it entirelly ?

It is only confusing to have kill, but advice not to use it, and have it
only working in some conditions (caml threads) ?

> Being able to terminate any thread at any time, without cooperation
> from the thread, is extremely dangerous: what if the killed thread was
> holding mutexes?  (I think this has been discussed recently on this
> list.)  For this reason, thread APIs either provide a low-level "kill"
> operation and strongly adivse not to use it (Win32, Java), or they
> provide a more controlled "cancellation" mechanism (POSIX) that is
> slightly less risky, but doesn't (currently) map well to Caml threads.
> 
> So: don't kill threads.  Let them live a long and happy life :-)

Well, the idea is to interactively kill threads that loop forever or
something else such.

I know you adviced me to have a the thread check each time if it can
continue living, and stop if it is told not so, and this is what i will
be doind, but what about having a thread function available in the
thread library that does this in a somewhat standardized way ?

Friendly,

Sven Luther
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

