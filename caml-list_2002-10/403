Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA24889; Tue, 15 Oct 2002 12:34:50 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA24878 for caml-list@pauillac.inria.fr; Tue, 15 Oct 2002 12:34:48 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA21374 for <caml-list@pauillac.inria.fr>; Tue, 15 Oct 2002 10:42:52 +0200 (MET DST)
Received: from mail.interaktif.net.tr ([62.248.102.120])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g9F8go520714
	for <caml-list@inria.fr>; Tue, 15 Oct 2002 10:42:51 +0200 (MET DST)
Received: from abn166-176.ank-avrupa-ports.kablonet.net.tr (unknown [195.174.166.176])
	by mail.interaktif.net.tr (Postfix) with ESMTP
	id D00661E697; Tue, 15 Oct 2002 11:39:47 +0300 (EEST)
From: Eray Ozkural <erayo@cs.bilkent.edu.tr>
Organization: Bilkent University CS Dept.
To: Dave Berry <daveb@tardis.ed.ac.uk>, Markus Mottl <markus@oefai.at>,
        Oleg <oleg_inconnu@myrealbox.com>
Subject: Re: [Caml-list] Re: productivity improvement
Date: Tue, 15 Oct 2002 11:38:58 +0300
User-Agent: KMail/1.4.5
Cc: OCaml <caml-list@inria.fr>
References: <200207121133.HAA26986@dewberry.cc.columbia.edu> <4.1.20020714213245.00a37f00@pop3.btclick.com>
In-Reply-To: <4.1.20020714213245.00a37f00@pop3.btclick.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline
Message-Id: <200210151138.58478.erayo@cs.bilkent.edu.tr>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sunday 14 July 2002 23:44, Dave Berry wrote:
> As a commercial manager, I've seen a productivity improvement of about 50%
> using Java over C++ -- mainly arising from automatic memory management, and
> a slightly cleaner language.  I would expect OCaml to have that 50%, and
> perhaps another for a more expressive type system, making 2:1.  For some
> problems, e.g. compilers, the increase might be more, say 3:1 or 4:1.  For
> comparison, this is also the productivity improvement I'd expect to see
> using Visual Basic over C/C++ for small GUI/Database problems.

I'd expect a much higher ratio for compilers or any form of symbolic 
computation. Having went through a few C++ compilers recently I would say 
more than 1:10. The problem is that I don't have a C++ compiler written in 
ocaml in front of me, so that's just a guess ;) However, compilers for 
languages with more complex semantics (like Haskell) seems to be achievable 
in the magnitude of a few ten thousands of lines while your casual Mono 
compiler took some 10^6 lines in C if you will remember. That ratio would be 
something like 1:30, 1:40 against C, and I suspect it would still be 1:10 to 
1:20 for C++.

For a C++ compiler, the ratio would be about the same since C++ has simpler 
semantics but a more involved syntax than well designed languages. Hence more 
code for syntax, less code for semantics in the case of C++ probably making 
the compiler as complex as Haskell.

That ratio would wildly change with respect to design of the compiler of 
course. There are lots of choices even in the simplest matters. Not to 
mention the need for a good programmer. A bad programmer can eventually
manage to blow up the code size worse than a good C++ implementation ;)

Just a rough comparison,

-- 
Eray Ozkural <erayo@cs.bilkent.edu.tr>
Comp. Sci. Dept., Bilkent University, Ankara
www: http://www.cs.bilkent.edu.tr/~erayo
GPG public key fingerprint: 360C 852F 88B0 A745 F31B  EA0F 7C07 AE16 874D 539C
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

