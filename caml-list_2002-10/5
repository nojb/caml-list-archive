Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA03716; Tue, 1 Oct 2002 11:12:41 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA03820 for <caml-list@pauillac.inria.fr>; Tue, 1 Oct 2002 11:12:40 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g919Cc507641;
	Tue, 1 Oct 2002 11:12:38 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA03775; Tue, 1 Oct 2002 11:12:38 +0200 (MET DST)
Date: Tue, 1 Oct 2002 11:12:38 +0200
From: Xavier Leroy <xavier.leroy@inria.fr>
To: Alessandro Baretta <alex@baretta.com>
Cc: =?iso-8859-1?Q?Micha=EBl_Gr=FCnewald?= <michael-grunewald@wanadoo.fr>,
        caml-list@inria.fr
Subject: Re: [Caml-list] Re: Kinds of threads
Message-ID: <20021001111238.B3571@pauillac.inria.fr>
References: <3D98559D.2060100@baretta.com> <87wup3ecb2.fsf@ketanu.dyndns.org> <3D9953EC.3030604@baretta.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0i
In-Reply-To: <3D9953EC.3030604@baretta.com>; from alex@baretta.com on Tue, Oct 01, 2002 at 09:51:08AM +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> The docs say that there are two kinds of threads in O'Caml: 
> Ocaml bytecode threads and POSIX threads, and that it is 
> possible to select which implementation to use at compiler 
> build time. Two questions: first, what is the implementation 
> chosen in the ocaml RPM distribution

The RPMs distributed by INRIA use bytecode threads.  That might not be
true of RPMs and Debian packages built by third parties.

> second, why must one choose one implementation at compiler build
> time? Why not use a compiler switch such as --posix-threads as opposed
> to --caml-threads?

Mostly because the idea didn't cross my mind.  Offhand, I believe that
just playing with the search path would suffice to select between the
two implementations.  (This needs to be checked, though.)

> Caml threads are probably the only way to go on Windows, 
> since the Win32 API is not POSIX compliant.

Amusingly, it's the other way around: bytecode threads use a lot of
Unix-specific hacks to get non-blocking I/O, while system threads can
easily be built on top of Win32 threads (even though the latter aren't
POSIX-compliant).

- Xavier Leroy
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

