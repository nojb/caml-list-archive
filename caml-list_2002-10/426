Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA17015; Wed, 16 Oct 2002 04:46:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA16894 for <caml-list@pauillac.inria.fr>; Wed, 16 Oct 2002 04:46:20 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g9G2kID19448
	for <caml-list@inria.fr>; Wed, 16 Oct 2002 04:46:19 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id LAA02391;
	Wed, 16 Oct 2002 11:46:10 +0900 (JST)
To: Frederic.Tronel@inrialpes.fr
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Problem with ocamlc and recursive and parametrized
 classes
In-Reply-To: <3DAAA5BF.9010901@inrialpes.fr>
References: <3DAAA035.6020809@inrialpes.fr>
	<3DAAA5BF.9010901@inrialpes.fr>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20021016114610F.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 16 Oct 2002 11:46:10 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 20
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Frederic Tronel <Frederic.Tronel@inrialpes.fr>

> I reply to myself, since it seems I was too prompt to post on the list. 
> In fact after an ultimate try and few hundred megabytes of memory later,
> ocamlc.opt was able to produce the code.
> Sorry for the previous post. Is there any plan to improve the behaviour
> of the compiler in the future ? (if possible of course).

Any "unexpected" behaviour of the compiler can be seen as a bug, so
yes, if we understand what the problem is, it should be solved. Or at
least we could define workarounds to avoid stretching the compiler's
ability too much.

I believed that most problems with efficiency were already solved in
3.06, but you might have found a new one. Please write a bug report.

By the way several infinite loops were solved since 3.06, but this
doesn't seem to be your problem.

        Jacques Garrigue
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

