Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA15061; Fri, 4 Oct 2002 10:46:24 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA14954 for <caml-list@pauillac.inria.fr>; Fri, 4 Oct 2002 10:46:22 +0200 (MET DST)
Received: from paille.inria.fr (paille.inria.fr [128.93.11.15])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g948kL529259
	for <caml-list@inria.fr>; Fri, 4 Oct 2002 10:46:21 +0200 (MET DST)
Received: (from hirschow@localhost)
	by paille.inria.fr (8.11.6/8.11.6) id g948kEF02353;
	Fri, 4 Oct 2002 08:46:14 GMT
From: Tom Hirschowitz <tom.hirschowitz@inria.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15773.21836.500915.522180@paille.inria.fr>
Date: Fri, 4 Oct 2002 08:46:04 +0000
To: caml-list@inria.fr
Subject: [Caml-list] Forward references
X-Mailer: VM 6.97 under Emacs 21.2.1
Reply-To: tom.hirschowitz@inria.fr
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk



Hi Brian, 

in your example, the current structure of types would not allow
to express how Set.Make uses its arguments.
Nothing ensures you that the body of Set.Make does not make use 
of cmp.

It is in fact exactly the same problem for the right-hand sizes 
of let rec, as in

let rec f x y = compare (x, y) (y, x) 
and     u = A.g f 1 2 

One could imagine a type system telling you whether A.g inspects 
the value of its arguments or not (in fact Xavier and I did imagine 
such a type system, article is on our web pages).
But without this, A.g could apply f, which would make the computation 
go wrong.

This said, even in the context of a type system where those dependency
problems are solved, it is not trivial that types do not cause new
problems.  We don't think so but are not sure. I tried to formalize
this idea and implemented an early prototype type-checker for caml
with mixin modules, which used this idea. My conclusion was that the
theory was in to early stage for a prototype to be really significant.

 >     I'm curious as to whether types could also be forward declared, or deferred, 
 > as well, and if this forward ref machinery could deal with the problem of 
 > instantiating a functor which is in a recursive relationship with a type, as in  
 > the following faux-Caml
 > 
 > forward type composite = { data : string ; children : CompositeSet.t }
 > and cmp x y = Pervasives.compare x.data y.data  
 > and module CompositeSet = Set.Make(struct type t = composite let compare = cmp end)
 > 
 >     This is a lighter approach than the one involving MoscowML recursive 
 > modules, since there is no extra module wrapper, but can probably be transformed 
 > into the mosml style mechanically. Is there some showstopper that prevents this 
 > (admittedly half baked) approach from being feasible? 
 > 
 >     I'd really like to see some solution to the above mentioned problems in 
 > OCaml sooner rather than later.  
 > 
 > -- Brian
 > 
 > 
 > -------------------
 > To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
 > Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
 > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
 > 
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

