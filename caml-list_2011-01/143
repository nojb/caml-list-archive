Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p0FE0SKD018909
	for <caml-list@sympa-roc.inria.fr>; Sat, 15 Jan 2011 15:00:28 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AoAAAGs3MU3RVaC2kWdsb2JhbACWHoY1AYc1VQgVAQEBAQkLCgcRBCCkEol6ghiEJy6GWgEBAwWFSwSLHw
X-IronPort-AV: E=Sophos;i="4.60,327,1291590000"; 
   d="scan'208";a="86988361"
Received: from mail-gy0-f182.google.com ([209.85.160.182])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 15 Jan 2011 15:00:22 +0100
Received: by gyf3 with SMTP id 3so1502515gyf.27
        for <caml-list@inria.fr>; Sat, 15 Jan 2011 06:00:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=g/xzb/IV2EjeNlnzVuB7zn86EMIQubEp0xStlluOdVU=;
        b=C67VBc2+jXtuNc9g70GyYr4KHR3DeBDuxLjn+XHa0dTshdTIypBZ9+1iqp+SspKG7X
         +Nx40xIXxJKlUTFM98FPa3nzRFBhPRE3Ym6V5O+VYQBGZp8Lgi4Bu0XMp+5lSMNauS6w
         r6M4Ab1VuLPs4L0/UrBo/cbXrTd6PHmZiiQCY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=c+ZdInTvLbNeyhikjgZ1vB+iTY669qJpSIvdxpGCqitN601DrnnwEiTnZ5+NGFAMs3
         Ru/iXnN4dR60OLQeVUnwMOb84Xw1fnHY55/O7Rz32mPlDa+TJBNEt2vvL2oJv/JYR/en
         iINg5/I4rDQoWoFIwvLKmVCIX9x+cPW7O0eCo=
MIME-Version: 1.0
Received: by 10.90.25.11 with SMTP id 11mr2506373agy.119.1295100022000; Sat,
 15 Jan 2011 06:00:22 -0800 (PST)
Received: by 10.90.89.4 with HTTP; Sat, 15 Jan 2011 06:00:21 -0800 (PST)
In-Reply-To: <20110115123838.GS4195@localhost>
References: <AANLkTi=g2bny3VaSEOhYxEJRO_iGur365FgEsJe6d-_G@mail.gmail.com>
	<20110115123838.GS4195@localhost>
Date: Sat, 15 Jan 2011 16:00:21 +0200
Message-ID: <AANLkTinAptP4G6JZH+Msyf_99UDkWkSDF6AwH1hRfHHo@mail.gmail.com>
From: Eray Ozkural <examachine@gmail.com>
To: Guillaume Yziquel <guillaume.yziquel@citycable.ch>
Cc: Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=00163630e99fc28d710499e2f8b3
Subject: Re: [Caml-list] Unboxing: how to do it best?


--00163630e99fc28d710499e2f8b3
Content-Type: text/plain; charset=ISO-8859-1

On Sat, Jan 15, 2011 at 2:38 PM, Guillaume Yziquel <
guillaume.yziquel@citycable.ch> wrote:
>
>
> If you do not care about having the annotation available at runtime
> instead of being something static (after all, MPI datatypes are
> available at runtime), you could go for encapsulating type information
> in first class modules representing datatypes.
>
> Then, for instance, given a datatype, you may wish to construct the
> datatype of an array of such types. Such a function needs to know
> details about the way OCaml boxes or unboxes different kinds of arrays,
> and it can be done (though rather awkwardly in my case).
>
> So first-class modules encapsulating datatype information seems to me a
> worthwile option and the only solution I could come with to mimic what
> would be done in C++ with traits.
>


 Hi Guillaume,

That's a good idea.

Theoretically a functor transforms programs. Radical program rewriting would
be just the thing to do with a functor, but I'd rather have it in the
compiler.

After all program-transformation is what an optimization pass is
essentially. There is absolutely nothing wrong with doing it in a high-level
way, as long as it doesn't introduce runtime overhead.

Has anyone designed a cool compiler like that? :)


As for 'annotating type definitions', where would you put the line as to
> what 'annotating' means? Using type-conv-like Camlp4 processing?
>
>
I haven't thought much about the implementation, except verifying that it's
just an extension of the present kinds of unboxing in the runtime.

What I would like is something like (thinking of a typical simulation
datatype):

type cvector4 = ][ (complex * complex * complex * complex)

where ][ would be a "type operator" enforcing a flattened representation of
the type expression it is applied to. It would just change the layout so it
would be equivalent to the same type without the unboxing op.

Preprocessing might be one way to implement it, but i don't think it's an
easy implementation at any rate.

Just a small idea that I couldn't let slip from my mind.

But as to avoiding pointer chasing, I think there's no workaround to the
> way OCaml handles memory. The only solution I can come of is the
> obvious: use arrays or bigarrays and smart datatypes.
>

Smart datatypes is OK, I think you could substitute many datatypes with such
a thing, but I'm not sure how easy that would be to do in real-world
programming?

Best,

-- 
Eray Ozkural, PhD candidate.  Comp. Sci. Dept., Bilkent University, Ankara
http://groups.yahoo.com/group/ai-philosophy
http://myspace.com/arizanesil http://myspace.com/malfunct

--00163630e99fc28d710499e2f8b3
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Sat, Jan 15, 2011 at 2:38 PM, Guillaume Yziqu=
el <span dir=3D"ltr">&lt;<a href=3D"mailto:guillaume.yziquel@citycable.ch">=
guillaume.yziquel@citycable.ch</a>&gt;</span> wrote:<blockquote class=3D"gm=
ail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-le=
ft:1ex;">
<div><div class=3D"h5">
<br>
</div></div>If you do not care about having the annotation available at run=
time<br>
instead of being something static (after all, MPI datatypes are<br>
available at runtime), you could go for encapsulating type information<br>
in first class modules representing datatypes.<br>
<br>
Then, for instance, given a datatype, you may wish to construct the<br>
datatype of an array of such types. Such a function needs to know<br>
details about the way OCaml boxes or unboxes different kinds of arrays,<br>
and it can be done (though rather awkwardly in my case).<br>
<br>
So first-class modules encapsulating datatype information seems to me a<br>
worthwile option and the only solution I could come with to mimic what<br>
would be done in C++ with traits.<br></blockquote><div><br></div><div><br><=
/div><div>=A0Hi Guillaume,</div><div><br></div><div>That&#39;s a good idea.=
</div><div><br></div><div>Theoretically a functor transforms programs. Radi=
cal program rewriting would be just the thing to do with a functor, but I&#=
39;d rather have it in the compiler.</div>
<div><br></div><div>After all program-transformation is what an optimizatio=
n pass is essentially. There is absolutely nothing wrong with doing it in a=
 high-level way, as long as it doesn&#39;t introduce runtime overhead.</div>
<div><br></div><div>Has anyone designed a cool compiler like that? :)</div>=
<div><br></div><div><br></div><blockquote class=3D"gmail_quote" style=3D"ma=
rgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">
As for &#39;annotating type definitions&#39;, where would you put the line =
as to<br>
what &#39;annotating&#39; means? Using type-conv-like Camlp4 processing?<br>
<br></blockquote><div><br></div><div>I haven&#39;t thought much about the i=
mplementation, except verifying that it&#39;s just an extension of the pres=
ent kinds of unboxing in the runtime.=A0</div><div><br></div><div>What I wo=
uld like is something like (thinking of a typical simulation datatype):</di=
v>
<div><br></div><div>type cvector4 =3D ][ (complex * complex * complex * com=
plex)</div><div><br></div><div>where ][ would be a &quot;type operator&quot=
; enforcing a flattened representation of the type expression it is applied=
 to. It would just change the layout so it would be equivalent to the same =
type without the unboxing op.</div>
<div><br></div><div>Preprocessing might be one way to implement it, but i d=
on&#39;t think it&#39;s an easy implementation at any rate.</div><div><br><=
/div><div>Just a small idea that I couldn&#39;t let slip from my mind.</div>
<div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex;">
But as to avoiding pointer chasing, I think there&#39;s no workaround to th=
e<br>
way OCaml handles memory. The only solution I can come of is the<br>
obvious: use arrays or bigarrays and smart datatypes.<br></blockquote><div>=
<br></div><div>Smart datatypes is OK, I think you could substitute many dat=
atypes with such a thing, but I&#39;m not sure how easy that would be to do=
 in real-world programming?</div>
<div><br></div><div>Best,</div></div><br>-- <br>Eray Ozkural, PhD candidate=
.=A0 Comp. Sci. Dept., Bilkent University, Ankara<br><a href=3D"http://grou=
ps.yahoo.com/group/ai-philosophy">http://groups.yahoo.com/group/ai-philosop=
hy</a><br>
<a href=3D"http://myspace.com/arizanesil">http://myspace.com/arizanesil</a>=
 <a href=3D"http://myspace.com/malfunct">http://myspace.com/malfunct</a><br=
><br>

--00163630e99fc28d710499e2f8b3--
