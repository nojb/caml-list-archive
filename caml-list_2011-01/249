Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p0QNC05i023511
	for <caml-list@sympa-roc.inria.fr>; Thu, 27 Jan 2011 00:12:00 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ak0BAA45QE3RVdi2kGdsb2JhbACWKYY2AYgSCBUBAQIJCQwHEQQgoieKAIIXhRsuiFkBAQMFhUoEgWKJMoEV
X-IronPort-AV: E=Sophos;i="4.60,382,1291590000"; 
   d="scan'208";a="86366179"
Received: from mail-qy0-f182.google.com ([209.85.216.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 27 Jan 2011 00:11:54 +0100
Received: by qyk36 with SMTP id 36so1521857qyk.6
        for <caml-list@inria.fr>; Wed, 26 Jan 2011 15:11:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:content-type;
        bh=H3Hi/jpBXi4nSiZ4zVrYmNqw5UK21p2crIWEHMOhQwE=;
        b=wu52SQ8klbnOQ66u0FHagW5LG+Xm5FWrD/F1UFbs/CBABYkt4ZPR7fNG6ii8CAEgGm
         kI+3/IBCf0nNgD2TqVItOYzmlUggTO5uaIUQ8oz4sEawr5b0erFfzAJAyUv2Neq+0rei
         TxLm8VaS72dGvsCtt1yIW19eao/36HfjhHOl0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        b=UbBWtRPaoQDuT3GMuWuI3H1fPAszCcqcNf6snYR1mIWltfrTjGFuICbBqtgrzIB183
         HFCSPhTtQMwDZ1XHT2T8lXFrBzZbkZbMeGQp+lcUSTmvADZYY+trjOKZ9UzCV3qo37Vf
         bHIxxmmIqEGZ7n7KKsJINLRbtSLaQ7fD7/4zo=
Received: by 10.229.249.17 with SMTP id mi17mr893823qcb.123.1296083511787;
 Wed, 26 Jan 2011 15:11:51 -0800 (PST)
MIME-Version: 1.0
Received: by 10.229.62.9 with HTTP; Wed, 26 Jan 2011 15:11:31 -0800 (PST)
In-Reply-To: <20110126221756.GA5907@vaio.jimpryor.net>
References: <20110126221756.GA5907@vaio.jimpryor.net>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Thu, 27 Jan 2011 00:11:31 +0100
Message-ID: <AANLkTi=ZmJ6iexTF1zjwKNANj9pShkPvzfLP02_92wWh@mail.gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0016e64cc91851bfd9049ac7f512
Subject: Re: [Caml-list] Magic with fun (type t) ... ?


--0016e64cc91851bfd9049ac7f512
Content-Type: text/plain; charset=ISO-8859-1

Local modules are usually "safe" in the sense that the type system checks
that the local types do not escape the whole expression.

  # let test =
      let module Local = struct type t = Foo end
      in Local.Foo;;
  Error: This `let module' expression has type Local.t
  In this type, the locally bound module name Local escapes its scope

However, exceptions do not create a local type, they instead augment the
global open-ended "exn" type, so the type-checker won't detect the leak.

Finally, you don't want to disallow local exception declarations, as they're
very useful in various situations -- simply moving an existing module to a
local scope.
The use of the new (type t) construct to declare local polymorphic
exceptions is also useful in some cases. See for example:
http://ocaml.janestreet.com/?q=node/18#comment-190


(I agree that the type regression when escaping is quite weird and should be
avoided if possible.)


On Wed, Jan 26, 2011 at 11:17 PM, Jim Pryor
<lists+caml@jimpryor.net<lists%2Bcaml@jimpryor.net>
> wrote:

> I expect this is bad coding style, and should not be relied on. However,
> I was surprised at the behavior, and wondered whether it was intended:
>
> # let f = fun (type t) x ->
>    let module M = struct exception E of t end in
>    M.E x;;
> val f : 'a -> exn = <fun>
>
> f is polymorphic, as we expect:
>
> # f 1;;
> - : exn = E 1
> # f "s";;
> - : exn = E "s"
>
> But now notice:
>
> # f ();;
> - : exn = E 0
> # f None;;
> - : exn = E 0
>
> It appears that non-heap values are always getting magicked into ints.
>
> Has this been noted before?
>
> --
> Jim Pryor
> profjimm@jimpryor.net
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--0016e64cc91851bfd9049ac7f512
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Local modules are usually &quot;safe&quot; in the sense that the type syste=
m checks that the local types do not escape the whole expression.<div><br><=
/div><div><div>=A0=A0# let test =3D</div><div>=A0=A0 =A0 =A0let module Loca=
l =3D struct type t =3D Foo end</div>

<div>=A0=A0 =A0 =A0in Local.Foo;;</div><div>=A0=A0Error: This `let module&#=
39; expression has type Local.t</div><div>=A0=A0In this type, the locally b=
ound module name Local escapes its scope</div><div><br></div><div>However, =
exceptions do not create a local type, they instead augment the global open=
-ended &quot;exn&quot; type, so the=A0type-checker won&#39;t detect the lea=
k.</div>

<div><br></div><div>Finally, you don&#39;t want to disallow local exception=
 declarations, as they&#39;re very useful in various situations -- simply m=
oving an existing module to a local scope.</div><div>The use of the new (ty=
pe t) construct to declare local polymorphic exceptions is also useful in s=
ome cases. See for example:=A0<a href=3D"http://ocaml.janestreet.com/?q=3Dn=
ode/18#comment-190">http://ocaml.janestreet.com/?q=3Dnode/18#comment-190</a=
></div>

<meta http-equiv=3D"content-type" content=3D"text/html; charset=3Dutf-8"><d=
iv><br></div><div><br></div><div>(I agree that the type regression when esc=
aping is quite weird and should be avoided if possible.)</div><div><br></di=
v>

<br><div class=3D"gmail_quote">On Wed, Jan 26, 2011 at 11:17 PM, Jim Pryor =
<span dir=3D"ltr">&lt;<a href=3D"mailto:lists%2Bcaml@jimpryor.net">lists+ca=
ml@jimpryor.net</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" =
style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">

I expect this is bad coding style, and should not be relied on. However,<br>
I was surprised at the behavior, and wondered whether it was intended:<br>
<br>
# let f =3D fun (type t) x -&gt;<br>
 =A0 =A0let module M =3D struct exception E of t end in<br>
 =A0 =A0M.E x;;<br>
val f : &#39;a -&gt; exn =3D &lt;fun&gt;<br>
<br>
f is polymorphic, as we expect:<br>
<br>
# f 1;;<br>
- : exn =3D E 1<br>
# f &quot;s&quot;;;<br>
- : exn =3D E &quot;s&quot;<br>
<br>
But now notice:<br>
<br>
# f ();;<br>
- : exn =3D E 0<br>
# f None;;<br>
- : exn =3D E 0<br>
<br>
It appears that non-heap values are always getting magicked into ints.<br>
<br>
Has this been noted before?<br>
<br>
--<br>
Jim Pryor<br>
<a href=3D"mailto:profjimm@jimpryor.net">profjimm@jimpryor.net</a><br>
<font color=3D"#888888"><br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></blockquote></div><br></div>

--0016e64cc91851bfd9049ac7f512--
