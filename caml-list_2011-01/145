Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p0FIXap5011500
	for <caml-list@sympa-roc.inria.fr>; Sat, 15 Jan 2011 19:33:36 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AucAAGd3MU3RVaG2kGdsb2JhbACGeo8nhjUBhzVVCBUBAQEBCQkMBxEEIKUTiXqCGIQMLoZaAQEDBYVLBIsf
X-IronPort-AV: E=Sophos;i="4.60,327,1291590000"; 
   d="scan'208";a="73137047"
Received: from mail-gx0-f182.google.com ([209.85.161.182])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 15 Jan 2011 19:33:34 +0100
Received: by gxk8 with SMTP id 8so1557440gxk.27
        for <caml-list@inria.fr>; Sat, 15 Jan 2011 10:33:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=qUm9Dvug7XNYqFLCUHe8FVHn5HMJAEyZxAoG2D5tn6U=;
        b=WHszd+rMt83nWssKxqw5PW0UFee4jobltc1OeMQx0/An/kpM3CTOmscWX4CN4GC0JW
         6TgjGhPB+pI5f/Dc3JyW+qmBTN3cbctvLnjlGSolWLUbQpeDmSKT34YnlkDqQN7gyk8f
         PDO/cX4gNCjwlfo2MqcJy+pmfp31jV1zY6rME=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=G/3P0Ubi12M9RJXHMGOGOGUD8N1Ii2vVxbeRdZCDpD/FNNv/Qt8zGCA8xYp9f0e5o+
         OP27hanxu74dUjOOZenGPdoCFSTwSZhErGjiViSJqffwhJ5h9LtFbNbxGDKAA+NtwfWg
         bu5rkkKSzl8CFTGPQ1fMLc3Li+rbqMdnzaSuY=
MIME-Version: 1.0
Received: by 10.91.21.33 with SMTP id y33mr2796412agi.92.1295116413577; Sat,
 15 Jan 2011 10:33:33 -0800 (PST)
Received: by 10.90.89.4 with HTTP; Sat, 15 Jan 2011 10:33:33 -0800 (PST)
In-Reply-To: <20110115172300.GN4195@localhost>
References: <AANLkTi=g2bny3VaSEOhYxEJRO_iGur365FgEsJe6d-_G@mail.gmail.com>
	<20110115123838.GS4195@localhost>
	<AANLkTinAptP4G6JZH+Msyf_99UDkWkSDF6AwH1hRfHHo@mail.gmail.com>
	<20110115172300.GN4195@localhost>
Date: Sat, 15 Jan 2011 20:33:33 +0200
Message-ID: <AANLkTi=_J3Y2kOGpEExv4Hzqkw_5yUOEtuiOVus1OfX_@mail.gmail.com>
From: Eray Ozkural <examachine@gmail.com>
To: Guillaume Yziquel <guillaume.yziquel@citycable.ch>
Cc: Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001485f8617ac62afc0499e6c991
Subject: Re: [Caml-list] Unboxing: how to do it best?


--001485f8617ac62afc0499e6c991
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Sat, Jan 15, 2011 at 7:23 PM, Guillaume Yziquel <
guillaume.yziquel@citycable.ch> wrote:

> Le Saturday 15 Jan 2011 =E0 16:00:21 (+0200), Eray Ozkural a =E9crit :
> >    On Sat, Jan 15, 2011 at 2:38 PM, Guillaume Yziquel
> >    <[1]guillaume.yziquel@citycable.ch> wrote:
> >
> >      Then, for instance, given a datatype, you may wish to construct the
> >      datatype of an array of such types. Such a function needs to know
> >      details about the way OCaml boxes or unboxes different kinds of
> >      arrays,
> >      and it can be done (though rather awkwardly in my case).
>
>
Awkwardly, but how? :)



> >    That's a good idea.
> >    Theoretically a functor transforms programs. Radical program rewriti=
ng
> >    would be just the thing to do with a functor, but I'd rather have it
> in
> >    the compiler.
>
> I wasn't thinking of applying functors to rewrite / specialise (whatever
> you call it) some code to a datatype.
>
>
Ok, you mean exactly like C++ type traits, where a static namespace provides
further type information. In OCaml that'd be a module, right.


> I was more thinking of having a first-class module as a regular value
> that provides, when you unpack it, sufficient information to know how to
> cross the barriers from OCaml to C or Fortran or whatever, and then send
> it or receive it via an MPI implementation (since that's what I'm
> looking at). Which means all your HPC primitives must know how to read
> properly the datatype info enclosed in your first-class module.
>

I didn't really have MPI types on my mind, but it would surely be nice to be
able to integrate nicely with MPI as well, though I think the Marshal module
isn't costly (I made a small benchmark).

What I had in mind was, say, I have this CA simulation or spiking neural net
simulation code or a cell simulation, or a quantum chromodynamics
simulation, maybe a visualization of an irregular mesh, or some other
non-trivial scientific computing application where it's difficult to reduce
everything to float arrays. Because usually you will have either vectors, or
graphs of complex atomic structures and then this boxing is going to
seriously hurt performance, as performance is hurt when you try to write any
serious algorithm in Java in an OO fashion because everything is a pointer.
When you have to start writing every algorithm in an awkward and bloated way
to maintain some sense of performance, the benefit of the language quickly
vanishes. (Main reason why Java should never be used except for toy web
apps!) And then the HPC guy will have to turn to the portable assembly of
C++, right?


> I'm saying first-class module, because it can be typed as 'value datatype.
> You only know what the 'value it is supposed to encode is, and have all
> the typing info of how to deal with it encapsulated in the first-class
> module and not leaking into the rest of your code.
>

Ok, care to give a minimal example? How do you pass and use the module
value? This sounds interesting enough. You seem to be using the module to
encapsulate encoding/decoding functions. Which is fine but how is it enough?
How would that apply to changing the memory layout of a data type (or to
provide an unboxed array of such values)? I thought you would be generating
another module that represents the same type as an array of ints, and
somehow convert the types transparently. How do you propose to do it?

>    What I would like is something like (thinking of a typical simulation
> >    datatype):
> >    type cvector4 =3D ][ (complex * complex * complex * complex)
> >    where ][ would be a "type operator" enforcing a flattened
> >    representation of the type expression it is applied to. It would just
> >    change the layout so it would be equivalent to the same type without
> >    the unboxing op.
>
> If I'm not mistaking tuples or records of floats are already unboxed at
> runtime. Not seeing the great benefit here.
>

Yes, but the above is not a tuple of floats.

Best,

--=20
Eray Ozkural, PhD candidate.  Comp. Sci. Dept., Bilkent University, Ankara
http://groups.yahoo.com/group/ai-philosophy
http://myspace.com/arizanesil http://myspace.com/malfunct

--001485f8617ac62afc0499e6c991
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Sat, Jan 15, 2011 at 7:23 PM, Guillaume Yziqu=
el <span dir=3D"ltr">&lt;<a href=3D"mailto:guillaume.yziquel@citycable.ch">=
guillaume.yziquel@citycable.ch</a>&gt;</span> wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex;">
Le Saturday 15 Jan 2011 =E0 16:00:21 (+0200), Eray Ozkural a =E9crit :<br>
<div class=3D"im">&gt; =A0 =A0On Sat, Jan 15, 2011 at 2:38 PM, Guillaume Yz=
iquel<br>
</div><div class=3D"im">&gt; =A0 =A0&lt;[1]<a href=3D"mailto:guillaume.yziq=
uel@citycable.ch">guillaume.yziquel@citycable.ch</a>&gt; wrote:<br>
&gt;<br>
&gt; =A0 =A0 =A0Then, for instance, given a datatype, you may wish to const=
ruct the<br>
&gt; =A0 =A0 =A0datatype of an array of such types. Such a function needs t=
o know<br>
&gt; =A0 =A0 =A0details about the way OCaml boxes or unboxes different kind=
s of<br>
&gt; =A0 =A0 =A0arrays,<br>
&gt; =A0 =A0 =A0and it can be done (though rather awkwardly in my case).<br=
></div>
<div class=3D"im"><br></div></blockquote><div><br></div><div>Awkwardly, but=
 how? :)</div><div><br></div><div>=A0</div><blockquote class=3D"gmail_quote=
" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">=
<div class=3D"im">

&gt; =A0 =A0That&#39;s a good idea.<br>
&gt; =A0 =A0Theoretically a functor transforms programs. Radical program re=
writing<br>
&gt; =A0 =A0would be just the thing to do with a functor, but I&#39;d rathe=
r have it in<br>
&gt; =A0 =A0the compiler.<br>
<br>
</div>I wasn&#39;t thinking of applying functors to rewrite / specialise (w=
hatever<br>
you call it) some code to a datatype.<br>
<br></blockquote><div><br></div><div>Ok, you mean exactly like C++ type tra=
its, where a static namespace provides further type information. In OCaml t=
hat&#39;d be a module, right.</div><div>=A0</div><blockquote class=3D"gmail=
_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:=
1ex;">

I was more thinking of having a first-class module as a regular value<br>
that provides, when you unpack it, sufficient information to know how to<br>
cross the barriers from OCaml to C or Fortran or whatever, and then send<br>
it or receive it via an MPI implementation (since that&#39;s what I&#39;m<b=
r>
looking at). Which means all your HPC primitives must know how to read<br>
properly the datatype info enclosed in your first-class module.<br></blockq=
uote><div><br></div><div>I didn&#39;t really have MPI types on my mind, but=
 it would surely be nice to be able to integrate nicely with MPI as well, t=
hough I think the Marshal module isn&#39;t costly (I made a small benchmark=
).=A0</div>
<div><br></div><div>What I had in mind was, say, I have this CA simulation =
or spiking neural net simulation code or a cell simulation, or a quantum ch=
romodynamics simulation, maybe a visualization of an irregular mesh, or som=
e other non-trivial scientific computing application where it&#39;s difficu=
lt to reduce everything to float arrays. Because usually you will have eith=
er vectors, or graphs of complex atomic structures and then this boxing is =
going to seriously hurt performance, as performance is hurt when you try to=
 write any serious algorithm in Java in an OO fashion because everything is=
 a pointer. When you have to start writing every algorithm in an awkward an=
d bloated way to maintain some sense of performance, the benefit of the lan=
guage quickly vanishes. (Main reason why Java should never be used except f=
or toy web apps!) And then the HPC guy will have to turn to the portable as=
sembly of C++, right?</div>
<div>=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex;">
I&#39;m saying first-class module, because it can be typed as &#39;value da=
tatype.<br>
You only know what the &#39;value it is supposed to encode is, and have all=
<br>
the typing info of how to deal with it encapsulated in the first-class<br>
module and not leaking into the rest of your code.<br></blockquote><div><br=
></div><div>Ok, care to give a minimal example? How do you pass and use the=
 module value? This sounds interesting enough. You seem to be using the mod=
ule to encapsulate encoding/decoding functions. Which is fine but how is it=
 enough? How would that apply to changing the memory layout of a data type =
(or to provide an unboxed array of such values)? I thought you would be gen=
erating another module that represents the same type as an array of ints, a=
nd somehow convert the types transparently. How do you propose to do it?</d=
iv>
<div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex;"><div class=3D"im">
&gt; =A0 =A0What I would like is something like (thinking of a typical simu=
lation<br>
&gt; =A0 =A0datatype):<br>
&gt; =A0 =A0type cvector4 =3D ][ (complex * complex * complex * complex)<br>
&gt; =A0 =A0where ][ would be a &quot;type operator&quot; enforcing a flatt=
ened<br>
&gt; =A0 =A0representation of the type expression it is applied to. It woul=
d just<br>
&gt; =A0 =A0change the layout so it would be equivalent to the same type wi=
thout<br>
&gt; =A0 =A0the unboxing op.<br>
<br>
</div>If I&#39;m not mistaking tuples or records of floats are already unbo=
xed at<br>
runtime. Not seeing the great benefit here.<br></blockquote><div>=A0</div><=
div>Yes, but the above is not a tuple of floats.</div><div><div><br></div><=
/div><div>Best,=A0</div></div><br>-- <br>Eray Ozkural, PhD candidate.=A0 Co=
mp. Sci. Dept., Bilkent University, Ankara<br>
<a href=3D"http://groups.yahoo.com/group/ai-philosophy">http://groups.yahoo=
.com/group/ai-philosophy</a><br><a href=3D"http://myspace.com/arizanesil">h=
ttp://myspace.com/arizanesil</a> <a href=3D"http://myspace.com/malfunct">ht=
tp://myspace.com/malfunct</a><br>
<br>

--001485f8617ac62afc0499e6c991--
