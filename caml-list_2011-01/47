Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p05GMTQW022043
	for <caml-list@sympa-roc.inria.fr>; Wed, 5 Jan 2011 17:22:29 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmIBAO8pJE1KfVM2kWdsb2JhbACVXjGGAgGICQgVAQEBAQkLCgcRBCCncIl4ghiEZi6FcQEBAwWFRwSLCg
X-IronPort-AV: E=Sophos;i="4.60,278,1291590000"; 
   d="scan'208";a="72178014"
Received: from mail-gw0-f54.google.com ([74.125.83.54])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 05 Jan 2011 17:22:22 +0100
Received: by gwj21 with SMTP id 21so7476276gwj.27
        for <caml-list@inria.fr>; Wed, 05 Jan 2011 08:22:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:date:message-id
         :subject:from:to:content-type;
        bh=ONNAEu3IE2qWAMUaya0z+CC/fHttX+ZAgdHe1f6Z3qg=;
        b=b3+PqD6BTSHdeHKgYlnuV7DcexuedQYoWwHor79CIiOslW1+MhR/gSdYblOQNv/V5Q
         V9qKiAXLvx8JsR+8noOiXEY4lKIshu2V2yxqz4olQHBBhhbNDwj06rar1orff5eWPMrT
         Vhv6J14XIdmxOLoF90mdEfJ/XyEqejhsGphLw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:date:message-id:subject:from:to:content-type;
        b=Vy8mq1p1TgSbYtOjIetPuWunAFi4LGgvZPP10iU7Vsux1ZKKe6SqnurrBo4LbBrejZ
         MYBlz2uNz2m7MOvHWsCL1ylKZosJY/wsH5L2H3M0K3p/fZuSUKg5ygzIpX+C+IuMYO+B
         Cy6ttAM8yBAABoqfrgOD00uUfsnTE+23qd1UM=
MIME-Version: 1.0
Received: by 10.90.72.16 with SMTP id u16mr862131aga.146.1294244542268; Wed,
 05 Jan 2011 08:22:22 -0800 (PST)
Received: by 10.90.67.15 with HTTP; Wed, 5 Jan 2011 08:22:20 -0800 (PST)
Date: Wed, 5 Jan 2011 18:22:20 +0200
Message-ID: <AANLkTimdAe+BgseJLinwhF=5oy2Yb8Lui5po=3uQ+EOM@mail.gmail.com>
From: Eray Ozkural <examachine@gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00163630e96331c37604991bca3e
Subject: [Caml-list] Fixed-point arithmetic on 32-bit architectures


--00163630e96331c37604991bca3e
Content-Type: text/plain; charset=ISO-8859-1

Hello there,

I'm using fixed-point arithmetic in an algorithm. I am troubled by the
inefficiency of the fixed-point multiplication and division operations on
32-bit architectures. On the Intel 64-bit architecture, I can use the
Nativeint module and it's quite fast, on 32-bit I had to use the Int64
module (for the necessary shifts and mul/div's) and I encountered a
significant slowdown, naturally. is there a preferred way of performing
fixed point arithmetic with ocaml on 32-bit architectures that I might be
overlooking?

Best,

-- 
Eray Ozkural, PhD candidate.  Comp. Sci. Dept., Bilkent University, Ankara
http://groups.yahoo.com/group/ai-philosophy

--00163630e96331c37604991bca3e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hello there,<div><br></div><div>I&#39;m using fixed-point arithmetic in an =
algorithm. I am troubled by the inefficiency of the fixed-point multiplicat=
ion and division operations on 32-bit architectures. On the Intel 64-bit ar=
chitecture, I can use the Nativeint module and it&#39;s quite fast, on 32-b=
it I had to use the Int64 module (for the necessary shifts and mul/div&#39;=
s) and I encountered a significant slowdown, naturally. is there a preferre=
d way of performing fixed point arithmetic with ocaml on 32-bit architectur=
es that I might be overlooking?</div>
<div><br></div><div>Best,</div><div><br>-- <br>Eray Ozkural, PhD candidate.=
=A0 Comp. Sci. Dept., Bilkent University, Ankara<br><a href=3D"http://group=
s.yahoo.com/group/ai-philosophy">http://groups.yahoo.com/group/ai-philosoph=
y</a><br>
<br>
</div>

--00163630e96331c37604991bca3e--
