Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p0KJiwUN001925
	for <caml-list@sympa-roc.inria.fr>; Thu, 20 Jan 2011 20:44:58 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnoBAIsfOE3RVdivkGdsb2JhbACWCTKGBAGHNlcIFQEBAQEJCQwHEQQgpiCJeoIXhGsuiFgBAQMFhUsEgV+DTYVyhh2DLQ
X-IronPort-AV: E=Sophos;i="4.60,352,1291590000"; 
   d="scan'208";a="96077656"
Received: from mail-qy0-f175.google.com ([209.85.216.175])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-MD5; 20 Jan 2011 20:44:53 +0100
Received: by qyk8 with SMTP id 8so2232518qyk.6
        for <caml-list@inria.fr>; Thu, 20 Jan 2011 11:44:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:sender:in-reply-to:references:from
         :date:x-google-sender-auth:message-id:subject:to:cc:content-type;
        bh=oGsHPOXth/z00OWA6D0zz35GAOdrdOufXPfhRkuR6xc=;
        b=TjtKjD1Qth5AnHT0M65Kb7ZlUciwyDSo4g+agvho6p2tGz0O/XiYpAQRZTd5/jp1sI
         oyYaSGLJiXtFI2wBZOZWVGMxluW9oRKdXyVK/bPqeMi0+j2yUZv79Xys2p7zt7UydAui
         YAhaYjX+IpN9lGgHaH2SAKDpOEKYfYlqCzcOU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        b=YvbqPpp0arA66t2FCukLAt1tS+wXAHLWZ3JjsmTL/gxwhkMvlBnOCOyoFph5yMmPBp
         HPlATrwSaR51xQEc/m0O9ZwYeqyD8k/k1fc498ggU6h7V4jjjHQvQqiXBK1OCI2ohSOB
         7qtOI6juBkwm1/WnD5hWo/gBoPPOnquZEaQms=
Received: by 10.229.193.204 with SMTP id dv12mr2031874qcb.274.1295552692000;
 Thu, 20 Jan 2011 11:44:52 -0800 (PST)
MIME-Version: 1.0
Sender: gabriel.scherer@gmail.com
Received: by 10.229.23.139 with HTTP; Thu, 20 Jan 2011 11:44:31 -0800 (PST)
In-Reply-To: <AANLkTimX34snA9Xuiao_mjipu1Fr4--JdtqFi600=2rB@mail.gmail.com>
References: <4d386889.027bd80a.187c.ffffbda4@mx.google.com> <AANLkTimX34snA9Xuiao_mjipu1Fr4--JdtqFi600=2rB@mail.gmail.com>
From: bluestorm <bluestorm.dylc@gmail.com>
Date: Thu, 20 Jan 2011 20:44:31 +0100
X-Google-Sender-Auth: mt_8TSDyc79MYZB4nKSO_golGBI
Message-ID: <AANLkTik+by=QSW7fzaKxfYkB-DQodOf9irUrE-hc1Cpq@mail.gmail.com>
To: Andrew <newsgroups.fr@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=005045015df3fe9766049a4c5d32
Subject: Re: [Caml-list] Strange syntax used in queue.ml -- The "<-" operator


--005045015df3fe9766049a4c5d32
Content-Type: text/plain; charset=ISO-8859-1

An addendum for "ref" patterns. They're not a specific syntacitc sugar, but
are actually genuine mutable variant types:

  type 'a ref = ref of mutable 'a

In Caml Light (but not in OCaml), variant constructor may begin with a
lowercase. "ref" (as a term) is therefore the constructor for the ref type,
and can be naturally used when a pattern matching. It also appears as a
function (ref : 'a -> 'a ref) because Caml Light, like Haskell but not
OCaml, automatically turns constructors into functions.

The ref type is defined here in the documentation:
  http://caml.inria.fr/pub/docs/manual-caml-light/node14.15.html

On Thu, Jan 20, 2011 at 6:43 PM, bluestorm <bluestorm.dylc@gmail.com> wrote:

> The semantics of mutable fields and references has changed a lot (for good)
> between Caml Light and Objective Caml. Beware that this code is Caml Light
> specific -- and if you want to learn Caml, you should rather be using
> Objective Caml, which is the implementation that is still maintained.
>
> In Objective Caml, only records fields are mutable. References are a
> derived concept, the type 'a ref is defined as :
>   type 'a ref = { mutable contents : 'a }
>
> You change a mutable field with the syntax   foo.bar <- baz (where "bar" is
> a record field, and foo and baz are any expression, foo being of a record
> type)
>
> In Caml Light, record fields are mutable, but sum type fields (variants)
> are mutable as well; mutable variant fields are however not used here. See
> http://caml.inria.fr/pub/docs/manual-caml-light/node4.6.html for
> documentation.
>
> In Caml Light, a record may return a mutable location, akin to a lvalue in
> C-like languages. For example, with the mutable variant
>   type foo = Foo of mutable int
> you may write:
>   let set_foo (f : foo) (n : int) =
>     match f with
>     | Foo loc ->
>        loc <- n
>
> "foo <- bar" is used here to assign a value "bar" to a lvalue "foo" bound
> in a mutable pattern.
>
> In your example, two mutable patterns are used :
>      | { tail = Cons(_, ref newtail) as oldtail } ->
>
> - oldtail is a mutable pattern denoting the mutable "tail" field of the
> record
> - (ref newtail) is a specific syntax, a pattern on references. It binds a
> mutable pattern "newtail" corresponding to the location of the reference
>
> In other words, in Caml Light you can write the ":=" operator as such:
>   let prefix := r v =
>     match r with
>     | ref loc ->
>       loc <- v
>
> Hope that helps.
>
> On Thu, Jan 20, 2011 at 5:53 PM, Andrew <newsgroups.fr@gmail.com> wrote:
>
>  Hello everyone,
>>
>> While browsing the Caml Light library for programming examples, I stumbled
>> across the following code, taken from the Caml Light queue.ml file:
>>
>>    type 'a queue_cell =
>>        Nil
>>      | Cons of 'a * 'a queue_cell ref
>>    ;;
>>
>>    type 'a t =
>>      { mutable head: 'a queue_cell;
>>        mutable tail: 'a queue_cell }
>>    ;;
>>
>>    let add x = function
>>        { head = h; tail = Nil as t } ->    (* if tail = Nil then head =
>> Nil
>> *)
>>          let c = Cons(x, ref Nil) in
>>            h <- c; t <- c
>>      | { tail = Cons(_, ref newtail) as oldtail } ->
>>          let c = Cons(x, ref Nil) in
>>            newtail <- c; oldtail <- c
>>    ;;
>>
>> This implementation of FIFO data structures puzzles me. I get the general
>> idea, to keep a pointer to the last entry in the structure, so that
>> appending at the end is possible. This makes perfect sense to me. However,
>> it's the syntax of how this is done that bugs me.
>>
>> Consider the following:
>>
>>      | { tail = Cons(_, ref newtail) as oldtail } ->
>>          let c = Cons(x, ref Nil) in
>>            newtail <- c; oldtail <- c
>>
>> I have a problem with types here. By the type definition, "newtail" should
>> be of type "'a queue cell", since it's retrieved using "Cons(_, ref
>> newtail)" in the pattern matching: if I understand correctly, this would
>> mean that "newtail" binds the value pointed by the second member of the
>> "tail" record field (which is a reference).
>>
>> So what does the "newtail <- c" means? If I try to replace this statement
>> by
>> "(fun x -> x <- c) newtail", I get a "The identifier x is not mutable.",
>> whereas the code sounds perfectly similar to the original variant to me.
>>
>> Would rewriting these few lines to read as follows mean the same?
>>
>>      | { tail = Cons(_, newtail) as oldtail } ->
>>          let c = Cons(x, ref Nil) in
>>            newtail := c; oldtail <- c
>>
>> Taking the question one step further, what does the following code
>> actually
>> do?
>>
>>    type t = Nil | Node of (t ref);;
>>    type box = {mutable field: t};;
>>
>>    let poke = function
>>      | {field = Node(ref n)} -> n <- Nil
>>      | {field = Nil} -> ()
>>    ;;
>>
>>    let test = {field = Node(ref (Node(ref Nil)))};;
>>    poke test;;
>>    test;;
>>
>> Is it the same to write
>>    {field = Node(n)} -> n := Nil
>> and
>>    {field = Node(ref n)} -> n <- Nil
>> ?
>>
>> Even stranger: the following code returns "The value identifier a is
>> unbound."
>>    let a = Nil;;
>>    a <- Nil;; (* The value identifier a is unbound. *)
>>
>>
>> Could someone take the time to clarify the use of "<-" for me? The various
>> examples here are pretty puzzling to me...
>> Thanks!
>>
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>>

--005045015df3fe9766049a4c5d32
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

An addendum for &quot;ref&quot; patterns. They&#39;re not a specific syntac=
itc sugar, but are actually genuine mutable variant types:<div><br></div><d=
iv>=A0=A0type &#39;a ref =3D ref of mutable &#39;a<br><br></div><div>In Cam=
l Light (but not in OCaml), variant constructor may begin with a lowercase.=
 &quot;ref&quot; (as a term) is therefore the constructor for the ref type,=
 and can be naturally used when a pattern matching. It also appears as a fu=
nction (ref : &#39;a -&gt; &#39;a ref) because Caml Light, like Haskell but=
 not OCaml, automatically turns constructors into functions.</div>

<div><br></div><div>The ref type is defined here in the documentation:</div=
><div><meta http-equiv=3D"content-type" content=3D"text/html; charset=3Dutf=
-8">=A0=A0<a href=3D"http://caml.inria.fr/pub/docs/manual-caml-light/node14=
.15.html">http://caml.inria.fr/pub/docs/manual-caml-light/node14.15.html</a=
></div>

<div><br><div class=3D"gmail_quote">On Thu, Jan 20, 2011 at 6:43 PM, bluest=
orm <span dir=3D"ltr">&lt;<a href=3D"mailto:bluestorm.dylc@gmail.com">blues=
torm.dylc@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quo=
te" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;=
">

<div>The semantics of mutable fields and references has changed a lot (for =
good) between Caml Light and Objective Caml. Beware that this code is Caml =
Light specific -- and if you want to learn Caml, you should rather be using=
 Objective Caml, which is the implementation that is still maintained.<div>


<br></div><div>In Objective Caml, only records fields are mutable. Referenc=
es are a derived concept, the type &#39;a ref is defined as :</div><div>=A0=
=A0type &#39;a ref =3D { mutable contents : &#39;a }</div><div><br></div><d=
iv>


You change a mutable field with the syntax =A0 foo.bar &lt;- baz (where &qu=
ot;bar&quot; is a record field, and foo and baz are any expression, foo bei=
ng of a record type)</div><div><br></div><div>In Caml Light, record fields =
are mutable, but sum type fields (variants) are mutable as well; mutable va=
riant fields are however not used here. See=A0<a href=3D"http://caml.inria.=
fr/pub/docs/manual-caml-light/node4.6.html" target=3D"_blank">http://caml.i=
nria.fr/pub/docs/manual-caml-light/node4.6.html</a>=A0for documentation.</d=
iv>


<div><br></div><div>In Caml Light, a record may return a mutable location, =
akin to a lvalue in C-like languages. For example, with the mutable variant=
</div><div>=A0=A0type foo =3D Foo of mutable int</div><div>you may write:</=
div>


<div>=A0=A0let set_foo (f : foo)=A0(n : int) =3D</div><div>=A0=A0 =A0match =
f with</div><div>=A0=A0 =A0| Foo loc -&gt;</div><div>=A0=A0 =A0 =A0 loc &lt=
;- n</div><div><br></div><div>&quot;foo &lt;- bar&quot; is used here to ass=
ign a value &quot;bar&quot; to a lvalue &quot;foo&quot; bound in a mutable =
pattern.</div>


<div><br></div><div>In your example, two mutable patterns are used :</div><=
div class=3D"im"><div>=A0=A0 =A0 | { tail =3D Cons(_, ref newtail) as oldta=
il } -&gt;<br></div><div><br></div>
</div><div>- oldtail is a mutable pattern denoting the mutable &quot;tail&q=
uot; field of the record</div><div>- (ref newtail) is a specific syntax, a =
pattern on references. It binds a mutable pattern &quot;newtail&quot; corre=
sponding to the location of the reference</div>


<div><br></div><div>In other words, in Caml Light you can write the &quot;:=
=3D&quot; operator as such:</div><div>=A0=A0let prefix :=3D r v =3D</div><d=
iv>=A0=A0 =A0match r with</div><div>=A0=A0 =A0| ref loc -&gt;</div><div>=A0=
=A0 =A0 =A0loc &lt;- v</div>


<div><br></div><div>Hope that helps.</div><div><br><div class=3D"gmail_quot=
e">On Thu, Jan 20, 2011 at 5:53 PM, Andrew=A0<span dir=3D"ltr">&lt;<a href=
=3D"http://newsgroups.fr" target=3D"_blank">newsgroups.fr</a>@<a href=3D"ht=
tp://gmail.com" target=3D"_blank">gmail.com</a>&gt;</span>=A0wrote:<div>

<div></div><div class=3D"h5"><br>
<blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margin-right:0px;=
margin-bottom:0px;margin-left:0.8ex;border-left-width:1px;border-left-color=
:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex">
Hello everyone,<br><br>While browsing the Caml Light library for programmin=
g examples, I stumbled<br>across the following code, taken from the Caml Li=
ght=A0<a href=3D"http://queue.ml/" target=3D"_blank">queue.ml</a>=A0file:<b=
r><br>


=A0 =A0type &#39;a queue_cell =3D<br>=A0 =A0 =A0 =A0Nil<br>=A0 =A0 =A0| Con=
s of &#39;a * &#39;a queue_cell ref<br>=A0 =A0;;<br><br>=A0 =A0type &#39;a =
t =3D<br>=A0 =A0 =A0{ mutable head: &#39;a queue_cell;<br>=A0 =A0 =A0 =A0mu=
table tail: &#39;a queue_cell }<br>=A0 =A0;;<br>


<br>=A0 =A0let add x =3D function<br>=A0 =A0 =A0 =A0{ head =3D h; tail =3D =
Nil as t } -&gt; =A0 =A0(* if tail =3D Nil then head =3D Nil<br>*)<br>=A0 =
=A0 =A0 =A0 =A0let c =3D Cons(x, ref Nil) in<br>=A0 =A0 =A0 =A0 =A0 =A0h &l=
t;- c; t &lt;- c<br>=A0 =A0 =A0| { tail =3D Cons(_, ref newtail) as oldtail=
 } -&gt;<br>


=A0 =A0 =A0 =A0 =A0let c =3D Cons(x, ref Nil) in<br>=A0 =A0 =A0 =A0 =A0 =A0=
newtail &lt;- c; oldtail &lt;- c<br>=A0 =A0;;<br><br>This implementation of=
 FIFO data structures puzzles me. I get the general<br>idea, to keep a poin=
ter to the last entry in the structure, so that<br>


appending at the end is possible. This makes perfect sense to me. However,<=
br>it&#39;s the syntax of how this is done that bugs me.<br><br>Consider th=
e following:<br><br>=A0 =A0 =A0| { tail =3D Cons(_, ref newtail) as oldtail=
 } -&gt;<br>


=A0 =A0 =A0 =A0 =A0let c =3D Cons(x, ref Nil) in<br>=A0 =A0 =A0 =A0 =A0 =A0=
newtail &lt;- c; oldtail &lt;- c<br><br>I have a problem with types here. B=
y the type definition, &quot;newtail&quot; should<br>be of type &quot;&#39;=
a queue cell&quot;, since it&#39;s retrieved using &quot;Cons(_, ref<br>


newtail)&quot; in the pattern matching: if I understand correctly, this wou=
ld<br>mean that &quot;newtail&quot; binds the value pointed by the second m=
ember of the<br>&quot;tail&quot; record field (which is a reference).<br>


<br>So what does the &quot;newtail &lt;- c&quot; means? If I try to replace=
 this statement by<br>&quot;(fun x -&gt; x &lt;- c) newtail&quot;, I get a =
&quot;The identifier x is not mutable.&quot;,<br>whereas the code sounds pe=
rfectly similar to the original variant to me.<br>


<br>Would rewriting these few lines to read as follows mean the same?<br><b=
r>=A0 =A0 =A0| { tail =3D Cons(_, newtail) as oldtail } -&gt;<br>=A0 =A0 =
=A0 =A0 =A0let c =3D Cons(x, ref Nil) in<br>=A0 =A0 =A0 =A0 =A0 =A0newtail =
:=3D c; oldtail &lt;- c<br><br>

Taking the question one step further, what does the following code actually=
<br>
do?<br><br>=A0 =A0type t =3D Nil | Node of (t ref);;<br>=A0 =A0type box =3D=
 {mutable field: t};;<br><br>=A0 =A0let poke =3D function<br>=A0 =A0 =A0| {=
field =3D Node(ref n)} -&gt; n &lt;- Nil<br>=A0 =A0 =A0| {field =3D Nil} -&=
gt; ()<br>=A0 =A0;;<br><br>=A0 =A0let test =3D {field =3D Node(ref (Node(re=
f Nil)))};;<br>


=A0 =A0poke test;;<br>=A0 =A0test;;<br><br>Is it the same to write<br>=A0 =
=A0{field =3D Node(n)} -&gt; n :=3D Nil<br>and<br>=A0 =A0{field =3D Node(re=
f n)} -&gt; n &lt;- Nil<br>?<br><br>Even stranger: the following code retur=
ns &quot;The value identifier a is<br>


unbound.&quot;<br>=A0 =A0let a =3D Nil;;<br>=A0 =A0a &lt;- Nil;; (* The val=
ue identifier a is unbound. *)<br><br><br>Could someone take the time to cl=
arify the use of &quot;&lt;-&quot; for me? The various<br>examples here are=
 pretty puzzling to me...<br>


Thanks!<br><font color=3D"#888888"><br><br>--<br>Caml-list mailing list. =
=A0Subscription management and archives:<br><a href=3D"https://sympa-roc.in=
ria.fr/wws/info/caml-list" target=3D"_blank">https://sympa-roc.inria.fr/wws=
/info/caml-list</a><br>


Beginner&#39;s list:=A0<a href=3D"http://groups.yahoo.com/group/ocaml_begin=
ners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><b=
r>Bug reports:=A0<a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_=
blank">http://caml.inria.fr/bin/caml-bugs</a><br>


<br></font></blockquote></div></div></div></div></div>
</blockquote></div><br></div>

--005045015df3fe9766049a4c5d32--
