Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p0A6RmKJ032404
	for <caml-list@sympa-roc.inria.fr>; Mon, 10 Jan 2011 07:27:48 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiIBAL81Kk3RVdU2kGdsb2JhbACVfYY0AYgDCBUBAQIJCQwHEQQgpHGJeIIVg28uhWEBAQMFhUcEiwo
X-IronPort-AV: E=Sophos;i="4.60,299,1291590000"; 
   d="scan'208";a="94888038"
Received: from mail-yw0-f54.google.com ([209.85.213.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-MD5; 10 Jan 2011 07:27:43 +0100
Received: by ywp6 with SMTP id 6so8328099ywp.27
        for <caml-list@inria.fr>; Sun, 09 Jan 2011 22:27:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=vwE6PIgVwyXvPsvRdV/wn7ChLtdrw5COEDJLXnCorQI=;
        b=sUB0PtcG1hyXwXdHa50DF3BvUYlVDFnJi/YNYgAfJ0NIwGFlHsvVFbBRAg6Qqwhsgi
         e3vjh0xOejzpVJFYpIY1/QYudDacKeXhyHS3ClK8zNSvLvWxOisw4casjy15N3NfKLPI
         ZZ5V9lj1EFVwgSGUksHLIAn/MkjnDekhRYtaQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=Se5N5/LkgVFzOrf3mmcGgfM991HeNEP0rRkufQCwJtfWz1cMp8OHko6rZRnWxS3jHx
         pg/oaDGv+ha7rTQTvZ1RnDZAIHBLPFVC2Ap8eJFOfNuHBGf6GFh41xCjyH8VbBdTR8lO
         V8+JErNLLCw5mJmasjcxRLsecbrTZr2yKEITE=
MIME-Version: 1.0
Received: by 10.90.72.16 with SMTP id u16mr5738433aga.146.1294640862242; Sun,
 09 Jan 2011 22:27:42 -0800 (PST)
Received: by 10.90.89.4 with HTTP; Sun, 9 Jan 2011 22:27:42 -0800 (PST)
In-Reply-To: <01d001cbb017$d9369340$8ba3b9c0$@com>
References: <699537.6718.qm@web111509.mail.gq1.yahoo.com>
	<20110107181157.GA16020852@CIS.FU-Berlin.DE>
	<alpine.DEB.2.00.1101071344150.7793@sergyar>
	<01d001cbb017$d9369340$8ba3b9c0$@com>
Date: Mon, 10 Jan 2011 08:27:42 +0200
Message-ID: <AANLkTimuDMuRRN0VCgb-CCt39ry=0PWW8nTzWzHde2hs@mail.gmail.com>
From: Eray Ozkural <examachine@gmail.com>
To: Jon Harrop <jonathandeanharrop@googlemail.com>
Cc: Brian Hurt <bhurt@spnz.org>, Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=00163630e963b4a6840499781065
Subject: Re: [Caml-list] Purity and lazyness


--00163630e963b4a6840499781065
Content-Type: text/plain; charset=ISO-8859-1

On Sun, Jan 9, 2011 at 6:11 PM, Jon Harrop <
jonathandeanharrop@googlemail.com> wrote:

> Brian Hurt wrote:
> > Unless there is some other driver to keep things pure even while being
> > strict.  And I would argue there is- concurrency.  Concurrency has a
> > lot
> > of similarities with laziness, in that the ordering of computations can
> > be
> > (and often is) undefined, with all the fun that entails.  Haskell is
> > really good at multithreaded because it has already "paid the price" of
> > dealing with asynchronous computations.
>
> I agree except for "Haskell is really good at multithreaded" because, space
> leaks aside, getting Haskell to force lazy computations at the necessary
> times to take advantage of multithreading is usually a nightmare.
>
>
I think the lesson to learn there is that there is no simple evaluation
strategy
that is good for all architectures.

Best,

-- 
Eray Ozkural, PhD candidate.  Comp. Sci. Dept., Bilkent University, Ankara
http://groups.yahoo.com/group/ai-philosophy
http://myspace.com/arizanesil http://myspace.com/malfunct

--00163630e963b4a6840499781065
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Sun, Jan 9, 2011 at 6:11 PM, Jon Harrop <span=
 dir=3D"ltr">&lt;<a href=3D"mailto:jonathandeanharrop@googlemail.com">jonat=
handeanharrop@googlemail.com</a>&gt;</span> wrote:<br><blockquote class=3D"=
gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-=
left:1ex;">
<div class=3D"im">Brian Hurt wrote:<br>
&gt; Unless there is some other driver to keep things pure even while being=
<br>
&gt; strict. =A0And I would argue there is- concurrency. =A0Concurrency has=
 a<br>
&gt; lot<br>
&gt; of similarities with laziness, in that the ordering of computations ca=
n<br>
&gt; be<br>
&gt; (and often is) undefined, with all the fun that entails. =A0Haskell is=
<br>
&gt; really good at multithreaded because it has already &quot;paid the pri=
ce&quot; of<br>
&gt; dealing with asynchronous computations.<br>
<br>
</div>I agree except for &quot;Haskell is really good at multithreaded&quot=
; because, space<br>
leaks aside, getting Haskell to force lazy computations at the necessary<br>
times to take advantage of multithreading is usually a nightmare.<br><br></=
blockquote><div><br></div><div>I think the lesson to learn there is that th=
ere is no simple evaluation strategy</div><div>that is good for all archite=
ctures.</div>
<div><br></div><div>Best,=A0</div></div><br>-- <br>Eray Ozkural, PhD candid=
ate.=A0 Comp. Sci. Dept., Bilkent University, Ankara<br><a href=3D"http://g=
roups.yahoo.com/group/ai-philosophy">http://groups.yahoo.com/group/ai-philo=
sophy</a><br>
<a href=3D"http://myspace.com/arizanesil">http://myspace.com/arizanesil</a>=
 <a href=3D"http://myspace.com/malfunct">http://myspace.com/malfunct</a><br=
><br>

--00163630e963b4a6840499781065--
