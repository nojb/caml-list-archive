Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA18982; Mon, 11 Aug 2003 04:02:13 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA21407 for <caml-list@pauillac.inria.fr>; Mon, 11 Aug 2003 04:02:10 +0200 (MET DST)
Received: from mail1.tpgi.com.au (mail.tpgi.com.au [203.12.160.57])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h7B228T19344
	for <caml-list@inria.fr>; Mon, 11 Aug 2003 04:02:09 +0200 (MET DST)
Received: from 203-213-83-171-syd-ts15-2600.tpgi.com.au (203-213-83-171-syd-ts15-2600.tpgi.com.au [203.213.83.171])
	by mail1.tpgi.com.au (8.11.6/8.11.6) with ESMTP id h7B21xO00694;
	Mon, 11 Aug 2003 12:01:59 +1000
Subject: Re: [Caml-list] Re: Tcl/Tk and RH 9
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: erayo@cs.bilkent.edu.tr
Cc: Matt Gushee <matt@gushee.net>, caml-list@inria.fr
In-Reply-To: <200308110420.53523.exa@kablonet.com.tr>
References: <1060394583.12630.4.camel@localhost.localdomain>
	 <200308110215.42114.exa@kablonet.com.tr> <20030811004129.GB32383@swordfish>
	 <200308110420.53523.exa@kablonet.com.tr>
Content-Type: text/plain
Message-Id: <1060567325.7474.66.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 11 Aug 2003 12:02:06 +1000
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; ozemail:01 caml-list:01 eray:01 ozkural:01 model:01 familiarity:01 gui:01 toolkit:01 generic:01 no-brainer:99 kde:01 abstraction:01 quirks:01 xlib:01 widget:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 2003-08-11 at 11:20, Eray Ozkural wrote:

> With GTK, I would worry about its object model, library design, hack-ability, 
> platform-independence.... The design of gtk seems fairly "backwards" to me. 

Me too, though I can't claim great familiarity with it.

> It is now going to sound "bold" to you people, but I don't understand why you 
> can't write the ultimate portable GUI toolkit in ocaml itself. With a 
> language as generic as ocaml it should be a no-brainer to efficiently 
> abstract over peculiarities of windows systems.

Yeah, that's a good question. The answer is probably: we could,
but who is going to finance it? Building GUI toolkit is a rather
large job (its difficult enough to *wrap* a toolkit).

> Besides, you will find that the limitations of those C/C++ based systems will 
> be severe. I can make an educated guess because I was designing an ocaml 
> binding for KDE... If you decide on some kind of binding to a "high level" 
> toolkit like gtk it's going to be some abstraction layer over black boxes 
> with a lot of quirks, it's not going to be pretty.

Sure, but where does one bind? To Xlib? To the X protocol directly?
If you bind that deep, how do you handle a Windows port of the library?

I personally think most widget kits are pretty bad, they're the wrong
idea altogether, especially the stupid callback/event loop paradigm.
I'd be happy to paint buttons myself, etc if the drawing and event
management tools existed in a standard form.

The problem, I think, is that they dont: its actually easier to
standardise widget functionality in the face of distinct underlying
drawing/event primitives/models. But I could be wrong, this isn't my
area of expertise.

OTOH: a portable clean standard Ocaml GUI would be a killer app..
it would make Ocaml the language of choice for deploying user
interfaces and GUI applications.


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

