Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA02315; Wed, 6 Aug 2003 16:51:56 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA20737 for <caml-list@pauillac.inria.fr>; Wed, 6 Aug 2003 16:51:54 +0200 (MET DST)
Received: from opus.davidb.org (66-75-152-1.san.rr.com [66.75.152.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h76Eprf10144
	for <caml-list@inria.fr>; Wed, 6 Aug 2003 16:51:53 +0200 (MET DST)
Received: from davidb by opus.davidb.org with local (Exim 3.31 #1 (Debian))
	id 19kPdk-0007c6-00; Wed, 06 Aug 2003 07:51:48 -0700
Date: Wed, 6 Aug 2003 07:51:48 -0700
From: David Brown <caml-list@davidb.org>
To: Richard Jones <rich@annexia.org>
Cc: Vovka <jove@newmail.ru>, caml-list@inria.fr
Subject: Re: [Caml-list] static class member....
Message-ID: <20030806145148.GA29231@davidb.org>
References: <000201c35c17$2cefc4a0$0300a8c0@James> <200308061657.26300.jove@newmail.ru> <20030806144523.GA29653@redhat.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20030806144523.GA29653@redhat.com>
User-Agent: Mutt/1.5.4i
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 0400,:01 newbie:01 foo:01 separates:01 ocaml:01 06,:02 modules:02 objects:02 module:03 dave:03 wrote:03 let:04 namespace:04 aug:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, Aug 06, 2003 at 03:45:23PM +0100, Richard Jones wrote:
> On Wed, Aug 06, 2003 at 04:57:26PM +0400, Vovka wrote:
> > Hi!!!!
> > 
> > Could you help me please. I'm newbie in ocaml programming, i used to write 
> > programmes in C++ , so I've faced    difficulties in introducing  static 
> > class member(==a common member for all objects of the same class).  Can i 
> > handle it in ocaml? Thanks a lot. 
> 
> This is one way to do it, there might be other easier ways:
> 
> class foo =
>   let counter = ref 0 in

But this counter will be unique for each new instance of the class.
What they are really asking for is something like

let counter = ref 0
class foo =
  ... counter ...

There is only one counter, globally.

Remember, Ocaml separates the namespace management (modules) from the
class system.  It is easy to hide "counter" with the module spec.

Dave

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

