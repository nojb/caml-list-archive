Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA23885; Thu, 21 Aug 2003 01:33:07 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA25474 for <caml-list@pauillac.inria.fr>; Thu, 21 Aug 2003 01:33:06 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h7KNX4f02811
	for <caml-list@inria.fr>; Thu, 21 Aug 2003 01:33:04 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2/3.7W) with ESMTP id IAA11216;
	Thu, 21 Aug 2003 08:32:58 +0900 (JST)
To: carette@mcmaster.ca
Cc: caml-list@inria.fr
Subject: RE: [Caml-list] does class polymorphism need to be so complicated?
In-Reply-To: <000f01c36740$1bfe14b0$1b447182@cas.mcmaster.ca>
References: <Pine.LNX.4.44.0308200941050.7047-100000@grace.speakeasy.net>
	<000f01c36740$1bfe14b0$1b447182@cas.mcmaster.ca>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20030821083400B.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 21 Aug 2003 08:34:00 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 24
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; jacques:01 caml-list:01 naively:01 unification:01 garrigue:01 coq:02 unit:03 classes:03 dependent:03 object:03 types:03 complicated:04 seems:05 mean:05 define:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Jacques Carette" <carette@mcmaster.ca>

> > The extension of Brian's code to rows with more than one field is obvious 
> > though, isn't it? 
> 
> Indeed - but that rather begs the question of why are classes and rows
> different, as they (naively perhaps) seem so ripe for 'unification'.
> 
> The work on dependent records in Coq seems highly related (and looks quite
> successful, at least in the context of the FOC project).

I'm not sure of what you mean by rows.
At least, in the above examples, rows were used as a name for object
types.
And a class type is just an object type plus a bit more information.
In that respect, I would say they are one and the same thing, and
there is no unification needed.
  class type printable = object method print : unit end
also defines the type
  type printable = < print : unit >
Of course there could be a discussion on whether we really need class
types, or whether classes should define a class type or not, etc...

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

