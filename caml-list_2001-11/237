Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA16674; Tue, 13 Nov 2001 13:19:00 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA22483 for <caml-list@pauillac.inria.fr>; Tue, 13 Nov 2001 13:18:59 +0100 (MET)
Received: from c0mailgw05.prontomail.com ([216.163.180.10])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id fADCIw522970
	for <caml-list@pauillac.inria.fr>; Tue, 13 Nov 2001 13:18:58 +0100 (MET)
Received: by c0mailgw05.prontomail.com (NPlex 5.5.029) id 3BEE4C0E000685D3 for caml-list@pauillac.inria.fr; Tue, 13 Nov 2001 04:12:07 -0800
Received: from 207.1.194.208 by SmtpServer for <enew@bigfoot.com>; Tue, 13 Nov 2001 12:12:06 +0000
X-Sender: 29538.starband.net
Message-ID: <006601c16c3d$214c06c0$0401a8c0@XENO>
Reply-To: "Eric Newhuis" <enew@starband.net>
From: "Eric Newhuis" <enew@bigfoot.com>
To: "Caml" <caml-list@pauillac.inria.fr>
References: <001e01c1675c$a4b3e630$0401a8c0@XENO> <luofm7dvq0.fsf@dsf.net>
Subject: Receptive Tool Vendors (was: Re: [Caml-list] Jihad)
Date: Tue, 13 Nov 2001 06:17:14 -0600
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2600.0000
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Have you found tool vendors outside of the USA more receptive /
> perceptive?

Not directly.  However I have, on occasion, encountered people from the UK
who know ML and have preached its virtues.  I only assumed that there must
have been some form of support outside the classrooms and research labs.

Am I wrong?  What is the current state of functional programming language
acceptance?

I used to preach Lisp for no apparent reason.  I know that Lisp has enjoyed
some commercial success, perhaps for those who have refused to relinquish
who now find themselves solving commercial problems.

After learning about ML and Caml I doubt that I will ever preach Lisp again.
I wouldn't have known any better if I hadn't collected years of personal
observations on the (potential) safety provided by languages like C++ and
Caml.

Caml provides a much stronger safety of primitives than C++.  I believe
higher-level safety is also important:  Avoid Primitive Obsession and
construct useful classes that encapsulate basic domain concepts.  This is a
good form of safety that is even possible in weakly typed languages.

Why am I venturing here in response to your question?  Well I think there
are a lot of good techniques that programmers consistently ignore because
they are creatures of habit.  So we don't have a lot of developers screaming
for better type safety here in the USA.  And I'll bet this is true worldwide
since USA tool vendors have an influence on the world, no?

I recall reading "After the Gold Rush" in which the author urges us to move
toward more professional software engineering practices.  I firmly believe
that languages like Caml can play a role in that.

It is precisely the X-behavior of weakly typed languages that leads one to
believe that programming is still more of a "black art" or a .  I say those
developers are simply too lazy or too lame to undertake the higher task that
is deserving of the title of "Professional Engineer".  (This is what I was
referring to in my first email about the "true professional".)

Interviewer:  "Yes Mr. NASA engineer, just how did you get that robot to
land on Mars and take pictures?"
NASA Engineer:  "Oh that?  We don't know.  We have a number of magicians
working for us and they refuse to reveal their secrets."

Hogwash!

True; no language is a silver bullet.  We need a combination of fail-safe
mechanisms, good engineering practices, and technical management and process
optimization.  (I must sound like an SEI pundit.)

I think Caml can be one piece of a much larger puzzle.  Tool vendors who
sell this higher cause and demonstrate how it can save money by producing
more intentionally error-free software will, perhaps, have an edge over the
competition.

But the sales pitch needs to also educate software developers in best
engineering practices.  And I don't necessarily mean UML diagrams, but more
practical things like SOME of those practices suggested by the Extreme
Programming crowd, the Refactoring book, NASA's SEL, and IBM's software
lifecycle management research.

Failure to instruct in all these areas will diminish the understanding that
a language like Ocaml is a good thing.

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

