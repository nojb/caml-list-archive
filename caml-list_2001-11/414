Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA25922; Mon, 26 Nov 2001 02:28:03 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA29513 for <caml-list@pauillac.inria.fr>; Mon, 26 Nov 2001 02:28:02 +0100 (MET)
Received: from mailout01.sul.t-online.de (mailout01.sul.t-online.com [194.25.134.80])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id fAQ1S1H27804
	for <caml-list@inria.fr>; Mon, 26 Nov 2001 02:28:01 +0100 (MET)
Received: from fwd00.sul.t-online.de 
	by mailout01.sul.t-online.de with smtp 
	id 168AYy-00081K-00; Mon, 26 Nov 2001 02:28:00 +0100
Received: from localhost (520013318687-0001@[217.230.22.237]) by fmrl00.sul.t-online.com
	with esmtp id 168AYl-11cLWiC; Mon, 26 Nov 2001 02:27:47 +0100
Received: from falk by localhost with local (Exim 3.32 #1 (Debian))
	id 168AYk-0006fz-00
	for <caml-list@inria.fr>; Mon, 26 Nov 2001 02:27:46 +0100
X-Face: >Q)4Pn.JVfRz{G(G_eIkykbZGG\)2mk8:5a"{^Mk07iC#F.t2L7h<Sa|7Zr1_L8[nbiq:8F
 %o\(7>|]{*cFg$GEPDdun~+UTjG(^4z<_Ksw%L-\w0xDmUR~<zsnGH]&sK=M\Y=;U4XZ"z)[CX6I6d
 _p
To: caml-list@inria.fr
Subject: [Caml-list] Alpha optimizations
From: Falk Hueffner <falk.hueffner@student.uni-tuebingen.de>
Date: 26 Nov 2001 02:27:45 +0100
Message-ID: <87lmgub9ta.fsf@student.uni-tuebingen.de>
Lines: 33
User-Agent: Gnus/5.0808 (Gnus v5.8.8) XEmacs/21.5 (anise)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Sender: 520013318687-0001@t-dialin.net
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi,

I noticed that there are some small optimizations possible for Alpha,
e. g. s4addq with immediate values, or multiplication with 2.0 as
add. Is there any interest in patches for that?

Also, would it be reasonably easy to unbox floats in tail recursive
leaf functions? This would speed up code tremendously like

let rec do_iter i zr zi =
  let zr2 = sqr zr and zi2 = sqr zi in
    if i >= maxiter || zr2 +. zi2 >= 4.0
    then i
    else do_iter
        (i + 1)
        (zr2 -. zi2 +. cr)
        (2.0 *. zr *. zi +. ci)

which is currently 7.5 times slower than C.

Also, OCaml frequently emits redundant instructions like

        ldt     $f13, 0($18)
        ldt     $f14, 0($18)
or
        sra     $16, 1, $3
        sra     $16, 1, $4

I'm not sure how to avoid this, though; perhaps some postprocessing
would be appropriate?

        Falk

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

