Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA15607; Fri, 9 Nov 2001 15:55:50 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA15729 for <caml-list@pauillac.inria.fr>; Fri, 9 Nov 2001 15:55:49 +0100 (MET)
Received: from c007.snv.cp.net (c007-h000.c007.snv.cp.net [209.228.33.206])
	by concorde.inria.fr (8.11.1/8.10.0) with SMTP id fA9Etmn13780
	for <caml-list@inria.fr>; Fri, 9 Nov 2001 15:55:48 +0100 (MET)
Received: (cpmta 21726 invoked from network); 9 Nov 2001 06:55:46 -0800
Received: from 65.187.194.217 (HELO vaiobambino)
  by smtp.directvinternet.com (209.228.33.206) with SMTP; 9 Nov 2001 06:55:46 -0800
X-Sent: 9 Nov 2001 14:55:46 GMT
From: "Jeff Henrikson" <jehenrik@yahoo.com>
To: <caml-list@inria.fr>
Cc: "Chris Hecker" <checker@d6.com>, <markus@mail4.ai.univie.ac.at>,
        "Jerome Vouillon" <vouillon@saul.cis.upenn.edu>
Subject: [Caml-list] avoiding native call from bytecode issue via dynamic linking
Date: Fri, 9 Nov 2001 10:09:48 -0500
Message-ID: <002f01c16930$92e96300$0b01a8c0@mit.edu>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook 8.5, Build 4.71.2173.0
In-Reply-To: <4.3.2.7.2.20010925141543.02a904f0@arda.pair.com>
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2615.200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Has anybody considered sidestepping the native/bytecode compatablity issue in favor of an all native toplevel?  That is, one which
takes an expression, compiles it to native code, and loads it back in to code space?  For example, write it out to a shared lib,
either one for each expression (or more likely for efficiency) one for some reasonably sized history of expressions.  Then dlopen
and dlsym the symbols into place.

Once upon a time when I briefly tried to work with SML/NJ, I saw little temp files being written to disk all the time when I was
evaluating expressions from an sml session in emacs.  I presumed their purpose was getting code to cross the data/code barrier.  I
don't think they were standard shared libs under windows or linux because they were often only a few hundreded bytes- too small to
be a real shared lib.


Jeff Henrikson


Markus Mottl [markus@mail4.ai.univie.ac.at] on 9/25/01
>It would be really nice if there were ways to call OCaml-native code
>from OCaml-byte code. This question has popped up in the past, but it's
>not an easy thing to do due to issues with the runtime:
>  http://caml.inria.fr/archives/200108/msg00026.html
>Any news in this respect? A toplevel that could run a high-performance,
>OCaml-native code string matching engine would give a terrific scripting
>environment!

Chris Hecker [checker@d6.com] on 9/25/01:
> I was going to reply to that same quote and reiterate my desire to link native and bytecode!  :) That was the thread I
> started you've linked to, here's the beginning: http://caml.inria.fr/archives/200108/msg00008.html.
>
> It's such a shame that we're pushing ocaml code into C because of this limitation.  This seems incredibly ironic and sad to me.







-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

