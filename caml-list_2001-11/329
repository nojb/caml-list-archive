Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA30585; Mon, 19 Nov 2001 10:02:37 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA30678 for <caml-list@pauillac.inria.fr>; Mon, 19 Nov 2001 10:02:36 +0100 (MET)
Received: from wetware.wetware.com (wetware.wetware.com [199.108.16.1])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id fAJ92Z112830
	for <caml-list@inria.fr>; Mon, 19 Nov 2001 10:02:35 +0100 (MET)
Received: from localhost([208.177.152.18]) (2057 bytes) by wetware.wetware.com
	via sendmail with P:esmtp/R:bind_hosts/T:inet_zone_bind_smtp
	(sender: <jhw@wetware.com>) 
	id <m165kK2-002TSkC@wetware.wetware.com>
	for <caml-list@inria.fr>; Mon, 19 Nov 2001 01:02:34 -0800 (PST)
	(Smail-3.2.0.111 2000-Feb-17 #5 built 2000-Dec-22)
Date: Mon, 19 Nov 2001 01:02:33 -0800
Subject: Re: [Caml-list] Re: variance, subtyping and monads... oh, my!
Content-Type: text/plain; charset=US-ASCII; format=flowed
Mime-Version: 1.0 (Apple Message framework v472)
From: james woodyatt <jhw@wetware.com>
To: The Trade <caml-list@inria.fr>
Content-Transfer-Encoding: 7bit
In-Reply-To: <20011119091119.A29570@pauillac.inria.fr>
Message-Id: <2B0C11B2-DCCC-11D5-B196-000502DB38F5@wetware.com>
X-Mailer: Apple Mail (2.472)
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Monday, November 19, 2001, at 12:11 , Francois Pottier wrote:
> James Woodyatt wrote:
>> Now, is it my imagination, or is all that research into what you can
>> build out of monads primarily a way for Haskell people to rediscover
>> everything we already know about polymorphism, inheritance and
>> encapsulation?
>
> Isn't that a bit harsh?

Maybe.  I'm more of a developer than a researcher.  As with any 
research, it's not useful to me until I know how and why to apply it.

If it *isn't* just my imagination, and it turns out that monadic 
programming is only a way to apply object-oriented programming 
techniques in purely functional languages, then I'd have to ask, "What's 
the point?"  We've already discovered object-oriented programming, as 
well as how to integrate it with a functional language, i.e. Objective 
Caml.

If by using monads, on the other hand, I can do something easily that 
would otherwise be very awkward, then I'm sold.  So far, I have only 
found examples of how to do things I can already do better with the 
imperative and object-oriented styles in OCaml.

Last month's Communications of the ACM (or was it the month before?) had 
a special on "aspect-oriented programming," which intrigued me.  Is 
there, perhaps, a natural application of monadic programming there?


--
j h woodyatt <jhw@wetware.com>
"somebody has to do something, and it's just incredibly
pathetic that it has to be us." --jerry garcia

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

