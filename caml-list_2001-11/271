Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA16518; Wed, 14 Nov 2001 17:05:27 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA11637 for <caml-list@pauillac.inria.fr>; Wed, 14 Nov 2001 17:05:26 +0100 (MET)
Received: from relay.rinet.ru (relay.rinet.ru [195.54.192.35])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id fAEG5PL21943
	for <caml-list@inria.fr>; Wed, 14 Nov 2001 17:05:25 +0100 (MET)
Received: (from uucp@localhost)
	by relay.rinet.ru (8.11.6/8.11.6) with UUCP id fAEG5Lk03266
	for caml-list@inria.fr; Wed, 14 Nov 2001 19:05:21 +0300 (MSK)
X-Envelope-To: caml-list@inria.fr
Received: from bely.stormoff (BELY) [192.168.0.10] 
	by stormoff with esmtp (Exim 2.05 #1 (Debian))
	id 1642U7-0005PZ-00; Wed, 14 Nov 2001 19:01:55 +0300
X-Comment-To: "Marcin 'Qrczak' Kowalczyk"
To: caml-list@inria.fr
Subject: Re: [Caml-list] camlidl and pointer to function
References: <m3k7wu36so.fsf@mail.ru> <3BF23EE4.BB444C5C@crf.canon.fr>
	<9stni6$hh6$1@qrnik.zagroda> <slrn9v51gn.kp3.qrczak@qrnik.zagroda>
From: Dmitry Bely <dbely@mail.ru>
Date: 14 Nov 2001 19:02:59 +0300
In-Reply-To: <slrn9v51gn.kp3.qrczak@qrnik.zagroda>
Message-ID: <itcduyq4.fsf@mail.ru>
Lines: 36
User-Agent: Gnus/5.0808 (Gnus v5.8.8) XEmacs/21.4 (Civil Service (Windows))
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

"Marcin 'Qrczak' Kowalczyk" <qrczak@knm.org.pl> writes:

> > The problem is that C library is binary-only (Intel image processing
> > library), and CallBack type is exactly 
> > 
> > typedef int (*CallBack)(int);
> 
> Converting a function closure to a C function pointer can't be done
> portably, but it can be done with lots of ugly magic.
> 
> Glasgow Haskell does this (by generating a piece of assembler on
> the heap) and it's convenient to use from the level of Haskell.
> Such functions need to be explicitly freed of course.
> 
> GNU C does this for local functions, but only "downwards". If the
> function pointer doesn't need to live longer than the function which
> installs the callback, the GNU C extension can be used. It generates
> the piece of assembler on the stack. To use it - just define a function
> inside a function and take its address.

Hmm, this trick assumes that the stack is executable (IMHO, the serious
security hole). Don't know about Linux/x86 page/segment attributes policy,
but I am almost sure that Windows NT/2000 x86 (which is my platform) will
not allow to execute the code in data/stack pages.

> It would be nice if OCaml provided this functionality because not
> all C libraries provide the extra argument for simulating closures.
> Unfortunately it can't be implemented nicely.
> 
> I've once seen a C library which tries to provide it for several
> platforms but I forgot its name.

It would be nice if you recall it :-)

Hope to hear from you soon,
Dmitry


-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

