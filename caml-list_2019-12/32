Return-Path: <oliver@first.in-berlin.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id EBA907ED20
	for <caml-list@sympa.inria.fr>; Sun, 29 Dec 2019 14:42:42 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=oliver@first.in-berlin.de; spf=None smtp.mailfrom=oliver@first.in-berlin.de; spf=None smtp.helo=postmaster@einhorn-mail.in-berlin.de
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  oliver@first.in-berlin.de) identity=pra;
  client-ip=217.197.80.20;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="oliver@first.in-berlin.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  oliver@first.in-berlin.de) identity=mailfrom;
  client-ip=217.197.80.20;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="oliver@first.in-berlin.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@einhorn-mail.in-berlin.de) identity=helo;
  client-ip=217.197.80.20;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="oliver@first.in-berlin.de";
  x-sender="postmaster@einhorn-mail.in-berlin.de";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3A8VFXcBVyZSUIw5dSqXxXIgJn8cbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbBOHt8tkgFKBZ4jH8fUM07OQ7/m7HzZbut3c7DgrS99lb1c9k8?=
 =?us-ascii?q?IYnggtUoauKHbQC7rUVRE8B9lIT1R//nu2YgB/Ecf6YEDO8DXptWZBUhrwOhBo?=
 =?us-ascii?q?KevrB4Xck9q41/yo+53Ufg5EmCexbal9IRmrowjdrNcajIVsJ6o+yhbErWZDdv?=
 =?us-ascii?q?hLy29vOV+dhQv36N2q/J5k/SRQuvYh+NBFXK7nYak2TqFWASo/PWwt68LlqRfM?=
 =?us-ascii?q?TQ2U5nsBSWoWiQZHAxLE7B7hQJj8tDbxu/dn1ymbOc32Sq00WSin4qx2RhLklD?=
 =?us-ascii?q?sLOjgk+2zMlMd+kLxUrw6gpxxnwo7bfoeVNOZlfqjAed8WXHdNUtpNWyBEBI63?=
 =?us-ascii?q?cokBAPcbPetAoYfzp0UAowa9CwmiC+zg1iJHiX340qAhz+QtDRvL0BA8E98Usn?=
 =?us-ascii?q?nZqsj+OqcIUeCyyanF1SzNb/dX2Tfj9ofIaA0qrOyWUrJ2bMXe100vHB7Cg1WX?=
 =?us-ascii?q?rYzlPi2V2foXs2WA4epgVPivi3U7qw1rozivwN4ghZLXiYIPzlDE9CN5zJwoKt?=
 =?us-ascii?q?KmUUN2Z8OvHpVXtyGfLYR2Q8UiTnlvuCkm0LIGvJq7cDINyJQ9yB7Tc/OHc4mU?=
 =?us-ascii?q?4hLjSeaeOi10i25ieLK6gRu57EuuyvXkW8WqzVpHrDBJnsTIu30PzRDe6dSLRu?=
 =?us-ascii?q?Fj8ku93zuEyhrd5fteIU8ukKrWM54hzaA0lpoUqUnMAC72mEP2jK+RbEUk/PGk?=
 =?us-ascii?q?6+H9bbXnop+QLY50igfnPqs1hMO/G+A4MgkIX2SB5OuzyqXv/Uz/QLpUkv07ir?=
 =?us-ascii?q?fVvI3YKMgBu6K0Bw1Y3pwg5hqjFTuqzsgUkWECLF1feRKHi4bpO0vJIPD9Ffq/?=
 =?us-ascii?q?hFCskDZ1x//YJL3sGZvNLnnZkLf6YbZx8U9cyAwqwd9E+Z1UELUBIPP1WkPrqd?=
 =?us-ascii?q?PXEAc1MxaozOb/FNV9yoQeVHqTDaCDNaPStUaE5uYuI+mXeI8Yoy39Kvgg5/72?=
 =?us-ascii?q?l3A1g14dfa+z3ZsWcn+0BPpmI1/KKUbr1/4FGGFChQE+Se32lBXWWDpaYTCpVK?=
 =?us-ascii?q?I55y0nIJqhCZbfS4uthr2YwSr9GYdZMDNoEFeJRFDsdpuJQb8mYSSeL8spxjsA?=
 =?us-ascii?q?VKasUacv1Au1qEn7zf9tI/DQ+yteuZ+1h4s93PHaiRxnrW88NM+ayWzYCjgsxj?=
 =?us-ascii?q?pZFQ9z57h2pAlG8nnG1KF5h/JCEtkJv6FHUx0hKdjdyalwBsr2WwSHctrbEA/6?=
 =?us-ascii?q?EOXjOik4S5cK+/FLe1x0QY3wgBHZxDbsArlQnbGRAJ0ytK7RjSCoepRNjk3e3a?=
 =?us-ascii?q?xktGEIB8tCMWr82fxy9g7TAJTP1kCQlqLsdKJZ1iPX8GaFi2aD7hlV?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CeBAB4rAheZBRQxdllHgEbDIF+gicmR?=
 =?us-ascii?q?iA0ATIqhAiJA4YOnUMJAQMBCgEBIwwBAYRAAoIfHAYGNQUNAhABAQQBAQECAQI?=
 =?us-ascii?q?DBAEEHAsKBSuFPgyCOykBgnoGI1YQCxoCBSECAg9IBhMaAYMIgnsLqw2BMoQ6A?=
 =?us-ascii?q?YEUgyqBPYEOKIUdhnwaggCBR4JdPoJkAoRzgl4ErxOBTXF5hjqOWgwbeIFOdoc?=
 =?us-ascii?q?FhBUsi1WXJJIEAgoHFYFqgXkzGggcFDuCbAlHGA2NHheDUIQgdIVAQAMwkFcBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0CeBAB4rAheZBRQxdllHgEbDIF+gicmRiA0ATIqhAiJA4Y?=
 =?us-ascii?q?OnUMJAQMBCgEBIwwBAYRAAoIfHAYGNQUNAhABAQQBAQECAQIDBAEEHAsKBSuFP?=
 =?us-ascii?q?gyCOykBgnoGI1YQCxoCBSECAg9IBhMaAYMIgnsLqw2BMoQ6AYEUgyqBPYEOKIU?=
 =?us-ascii?q?dhnwaggCBR4JdPoJkAoRzgl4ErxOBTXF5hjqOWgwbeIFOdocFhBUsi1WXJJIEA?=
 =?us-ascii?q?goHFYFqgXkzGggcFDuCbAlHGA2NHheDUIQgdIVAQAMwkFcBAQ?=
X-IronPort-AV: E=Sophos;i="5.69,371,1571695200"; 
   d="scan'208";a="429387407"
X-MGA-submission: =?us-ascii?q?MDG5VOttm4EAgyJ/yxPSUPGCj989kQdwrAFpOr?=
 =?us-ascii?q?691v56gFusctUQuqjQCH4l89BXebGvn7Z/SaVi7lrxlmER2f70IueY9A?=
 =?us-ascii?q?Q6DORJVk9pdSj9pBoxgANd2E764tx/aXCFni3gjnvl/oLwy9AmdwfRGK?=
 =?us-ascii?q?00GxBZhGO8IRa3YQfvCz8Beg=3D=3D?=
Received: from einhorn-mail.in-berlin.de ([217.197.80.20])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Dec 2019 14:42:42 +0100
X-Envelope-From: oliver@first.in-berlin.de
Received: from authenticated.user (localhost [127.0.0.1]) by einhorn.in-berlin.de  with ESMTPSA id xBTDgfJu030043
        (version=TLSv1.3 cipher=TLS_AES_256_GCM_SHA384 bits=256 verify=NOT);
	Sun, 29 Dec 2019 14:42:41 +0100
Date: Sun, 29 Dec 2019 14:42:41 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: Alan Schmitt <alan.schmitt@polytechnique.org>
Cc: OCaml Mailing List <caml-list@inria.fr>
Message-ID: <20191229134240.censvvrki4xliexz@first.in-berlin.de>
References: <87impglc4p.fsf@polytechnique.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <87impglc4p.fsf@polytechnique.org>
User-Agent: NeoMutt/20180716
Subject: Re: [Caml-list] https and Ocamlnet

Quoting  Alan Schmitt <alan.schmitt@polytechnique.org> (snt: 2019-09-25 15:49 +0200 CEST) (rcv: 2019-09-25 15:49 +0200 CEST):
> Hello,
> 
> I have a small utility that downloads and parses the RSS feed from
> ocaml.org to include in the OCaml Weekly News, but a recent change to
> ocaml.org broke it: it seems to only be served through https. I tried to
> add a TLS provider, but it's still failing with a cryptic error message.
> 
> Here is an extract of the code showing the problem:
> 
> #+begin_src ocaml
> let () = Nettls_gnutls.init()
> 
> let site = "https://ocaml.org"
> let feed_name = "/feed.xml"
> 
> let planet = Nethttp_fs.http_fs site
> let feedic = planet # read [] feed_name
> let feed_string = Netchannels.string_of_in_obj_channel feedic
> let () = feedic # close_in()
> #+end_src
> 
> I can compile it with
> 
> ocamlfind ocamlc -o test -linkpkg -package netclient,nettls-gnutls test.ml
> 
> but when I run it, I get this error
> 
> Fatal error: exception Nettls_gnutls.TLS.Error(GNUTLS_E_PUSH_ERROR)
> 
> I know nothing of TLS and searching for the error did not point me
> toward any solution.
> 
> I'm using gnutls 3.6.9 and ocamlnet 4.1.6.
> 
> How can I access the site using https?
> 
> Thanks,
> 
> Alan

Someone else had explored the problem with gnutls and
GNUTLS_E_PREMATURE_TERMINATION:

Missing "Content-Length" header results in "The TLS connection was non-properly terminated"
  https://github.com/varnish/hitch/issues/127

Maybe that can help to find a solution here.

IMO it's good to have a library throwing an error / raising an exception
instead of ignoring it, but as user of that library it should be possible to catch it.

Don't know how to catch that exception with ocamlnet's Nettls_gnutls in
a convenient way.
If someone finds a solution to get the already read data even though the
exception was raised by gnutls/ocamlnet, please send it to the list.

Ciao,
  Oliver

