Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA20666; Mon, 3 May 2004 18:09:14 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA20574 for <caml-list@pauillac.inria.fr>; Mon, 3 May 2004 18:09:13 +0200 (MET DST)
From: Alain.Frisch@ens.fr
Received: from nef.ens.fr (nef.ens.fr [129.199.96.32])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i43G9BEV031981
	for <caml-list@inria.fr>; Mon, 3 May 2004 18:09:11 +0200
Received: from clipper.ens.fr (clipper-gw.ens.fr [129.199.1.22])
          by nef.ens.fr (8.12.10/1.01.28121999) with ESMTP id i43G96Kx085535
          ; Mon, 3 May 2004 18:09:06 +0200 (CEST)
Received: from localhost (frisch@localhost) by clipper.ens.fr (8.12.3/jb-1.1)
	id i43G916R029806 ; Mon, 3 May 2004 18:09:03 +0200 (MET DST)
X-Authentication-Warning: clipper.ens.fr: frisch owned process doing -bs
Date: Mon, 3 May 2004 18:09:01 +0200 (MET DST)
X-X-Sender: frisch@clipper.ens.fr
Reply-To: Alain.Frisch@ens.fr
To: Jacques Carette <carette@mcmaster.ca>
cc: "'caml-list'" <caml-list@inria.fr>
Subject: RE: [Caml-list] Functors
In-Reply-To: <001601c4311c$f5a58fd0$1b447182@cas.mcmaster.ca>
Message-ID: <Pine.SOL.4.44.0405031807060.27704-100000@clipper.ens.fr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Virus-Scanned: by amavisd-milter (http://amavis.org/)
X-Miltered: at nez-perce with ID 40966EA7.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; alain:01 frisch:01 caml-list:01 functors:01 jacques:01 ocamlopt:01 constants:01 alain:01 ocaml:01 unit:03 unit:03 executable:03 wrote:03 inline:03 compiling:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 3 May 2004, Jacques Carette wrote:

> I know of people who have their 'build' scripts concatenate all their Ocaml
> source files into one large file before compiling anything; the resulting
> compilation time is still very short, but the corresponding executable is
> significantly faster!

Do you have an explanation for this fact ?  Given that ocamlopt can inline
function and propagate constants across compilation unit boundaries, what
kind of extra optimizations do you get with a single compilation unit ?

-- Alain

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

