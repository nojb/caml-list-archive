Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA02662; Wed, 19 May 2004 15:13:59 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA03071 for <caml-list@pauillac.inria.fr>; Wed, 19 May 2004 15:13:58 +0200 (MET DST)
Received: from calmail-cr.berkeley.edu (mailfarm.Berkeley.EDU [128.32.61.106])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i4JDDuEV001841
	for <caml-list@inria.fr>; Wed, 19 May 2004 15:13:56 +0200
Received: from [64.162.212.212] (HELO tallman.kefka.frap.net)
  by calmail-cr.berkeley.edu (CommuniGate Pro SMTP 4.1.8)
  with SMTP id 30223283; Wed, 19 May 2004 06:13:55 -0700
Received: by tallman.kefka.frap.net (sSMTP sendmail emulation); Wed, 19 May 2004 06:11:44 -0700
Date: Wed, 19 May 2004 06:11:44 -0700
From: Kenneth Knowles <kknowles@berkeley.edu>
To: skaller <skaller@users.sourceforge.net>
Cc: "Vladimir N. Silyaev" <vsilyaev@mindspring.com>,
        caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Lazy vs closure
Message-ID: <20040519131144.GB25420@tallman.kefka.frap.net>
References: <20040519062157.GA65076@server.vns.oc.ca.us> <1084957820.19838.774.camel@pelican.wigram>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1084957820.19838.774.camel@pelican.wigram>
User-Agent: Mutt/1.5.6i
X-Miltered: at nez-perce with ID 40AB5D94.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; knowles:99 caml-list:01 2004:99 semantically:01 val:01 closure:01 lazy:02 lazy:02 unit:03 unit:03 string:03 wrote:03 let:04 values:11 print:11 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


On Wed, May 19, 2004 at 07:10:21PM +1000, skaller wrote:
> Is there any difference semantically?

Yes, since lazy values are not recomputed.

# let l = lazy (print_string "hello");;
val l : unit lazy_t = <lazy>
# Lazy.force l;;
hello- : unit = ()
# Lazy.force l;;
- : unit = ()

Kenn

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

