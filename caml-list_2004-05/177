Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA32635; Sat, 8 May 2004 23:21:45 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA31136 for <caml-list@pauillac.inria.fr>; Sat, 8 May 2004 23:21:43 +0200 (MET DST)
Received: from smtp.mbg.ocn.ne.jp (mbg.ocn.ne.jp [210.190.142.181])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i48LLgSH004634
	for <caml-list@inria.fr>; Sat, 8 May 2004 23:21:43 +0200
Received: from localhost (p18223-adsau14honb7-acca.tokyo.ocn.ne.jp [220.106.131.223])
	by smtp.mbg.ocn.ne.jp (Postfix) with ESMTP
	id 2D4B96201; Sun,  9 May 2004 06:21:41 +0900 (JST)
Date: Sun, 09 May 2004 06:21:38 +0900 (JST)
Message-Id: <20040509.062138.71082875.yoriyuki@mbg.ocn.ne.jp>
To: briand@aracnet.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] interesting array efficiency observations
From: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <16541.9013.181806.9426@soggy.deldotd.com>
References: <16541.9013.181806.9426@soggy.deldotd.com>
X-Mailer: Mew version 3.3 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 409D4F66.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 observations:01 yamagata:01 yoriyuki:01 yoriyuki:01 caml-list:01 observations:01 2004:99 slower:01 inlined:01 yamagata:01 bigarray:01 layout:04 array:04 array:04 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: briand@aracnet.com
Subject: [Caml-list] interesting array efficiency observations
Date: Sat, 8 May 2004 11:13:09 -0700

> I was investigating the use of 1-D bigarray's vs Array and noticed
>  that the 1-D bigarray using c_layout seems to be slower than Array.
> 
> Is this an expected result ?

Yes, it is expected, since a.{j} expands a call of a C function, while
a.(j) expands inlined assembly codes.

--
Yamagata Yoriyuki

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

