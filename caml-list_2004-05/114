Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA16282; Wed, 5 May 2004 22:42:02 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA16543 for <caml-list@pauillac.inria.fr>; Wed, 5 May 2004 22:42:01 +0200 (MET DST)
From: brogoff@speakeasy.net
Received: from mail1.speakeasy.net (mail1.speakeasy.net [216.254.0.201])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i45KfxEV019661
	for <caml-list@inria.fr>; Wed, 5 May 2004 22:42:00 +0200
Received: (qmail 810 invoked from network); 5 May 2004 20:41:56 -0000
Received: from grace.speakeasy.net ([216.254.0.22])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail1.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <Julien.Signoles@lri.fr>; 5 May 2004 20:41:56 -0000
Date: Wed, 5 May 2004 13:41:56 -0700 (PDT)
To: Julien Signoles <Julien.Signoles@lri.fr>
cc: Jon Harrop <jdh30@cam.ac.uk>, caml-list@inria.fr
Subject: Re: [Caml-list] Functors
In-Reply-To: <Pine.LNX.4.43.0405051012250.3885-100000@pc8-119.lri.fr>
Message-ID: <Pine.LNX.4.58.0405051257110.15595@grace.speakeasy.net>
References: <Pine.LNX.4.43.0405051012250.3885-100000@pc8-119.lri.fr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at nez-perce with ID 40995197.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; brogoff:01 caml-list:01 functors:01 signoles:01 functorized:01 ocamldefun:01 3.07:01 mlton:01 mlton:01 doable:01 python:01 compiler:01 compiler:01 ocaml:01 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 5 May 2004, Julien Signoles wrote:
> > I didn't mean including the defunctorizor in the compiler, just the
> > functionality which it provides.
>
> It is what I mean too ;-). Sorry, my English is really perfectible.

I'm not sure I understand the difference, since there is only one
defunctorizer for OCaml, wouldn't including it in the compiler be the
easiest way to get that functionality?

In any case, the absence of a defunctorization step means that we often
have a choice between performance and a functorized programming style, which
stinks. Does ocamldefun deal with the recursive modules of 3.07?

MLton began as an SML defunctorizer if I'm not mistaken, but has evolved
into a whole program optimizing compiler. Since I usually have access to all
of the OCaml sources that I want to compile, an OCamlton is an appealing
prospect. Stephen Weeks (of the MLton team) told me he thought an OCaml front
end was doable (he mentioned that he's working or contemplating a Python front
end) but there were some interesting problems in translating some of the
newer OCaml features (recursive modules, polymorphic methods) but that he had
some ideas.

-- Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

