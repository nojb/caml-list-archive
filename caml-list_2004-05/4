Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA01588; Sat, 1 May 2004 06:18:59 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA01637 for <caml-list@pauillac.inria.fr>; Sat, 1 May 2004 06:18:58 +0200 (MET DST)
Received: from ptb-relay03.plus.net (ptb-relay03.plus.net [212.159.14.214])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i414IvSH027048
	for <caml-list@inria.fr>; Sat, 1 May 2004 06:18:57 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1BJlxp-0002xx-6I
	for caml-list@inria.fr; Sat, 01 May 2004 04:18:57 +0000
From: Jon Harrop <jdh30@cam.ac.uk>
Organization: University of Cambridge
To: caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] List.rev
Date: Sat, 1 May 2004 05:18:38 +0100
User-Agent: KMail/1.5.4
References: <20040430175429.GB11118@online.fr> <4092A448.6080909@1969.ws> <1083376750.2581.183.camel@pelican.wigram>
In-Reply-To: <1083376750.2581.183.camel@pelican.wigram>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200405010518.38038.jdh30@cam.ac.uk>
X-Miltered: at concorde with ID 40932531.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 2004:99 quantify:01 rec:01 complexity:02 complexity:02 match:02 stack:02 heap:03 heap:03 wrote:03 recursive:03 recursive:03 btw:03 tail:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Saturday 01 May 2004 02:59, skaller wrote:
> > List.rev is not tail recursive, so you wouldn't want to use this
> > function on industrial size lists.
>
> But it should be. Why isn't it???

I'm not sure that it isn't already tail-recursive. Doesn't the second argument 
in rev_append act as an accumulator?

> let rev lst = let r = ref [] in
>   let rec aux lst = match lst with
>
>   | [] -> !r
>   | h::t -> r:= h :: !r; aux t

let rev l = fold_left (fun t h -> h::t) [] l

=:-p

> BTW: documentation that says a function is 'tail recursive'
> is misguided. That's an implementation detail of no
> possible use to a user of the function. The user may
> benefit from knowing the complexity of the function
> in terms of speed and auxilliary storage required.

As "tail recursive" typically means less stack storage and more heap storage 
instead of the reverse, it is useful to a user and it does pertain to the 
complexity (although it obviously doesn't quantify the complexity of the heap 
storage).

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

