Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA15901; Wed, 5 May 2004 13:52:12 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA16057 for <caml-list@pauillac.inria.fr>; Wed, 5 May 2004 13:52:11 +0200 (MET DST)
Received: from mta1.cl.cam.ac.uk (mta1.cl.cam.ac.uk [128.232.0.15])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i45BqAEV026388
	for <caml-list@inria.fr>; Wed, 5 May 2004 13:52:10 +0200
Received: from astrocyte.cl.cam.ac.uk
	([128.232.8.107] helo=cl.cam.ac.uk ident=[IYeZZ7guXWoFTGYqvtRCjdSCWhHU8oiR])
	by mta1.cl.cam.ac.uk with esmtp (Exim 3.092 #1)
	id 1BLKwY-0003zP-00; Wed, 05 May 2004 12:52:06 +0100
X-Mailer: exmh version 2.6.3-CL 04/04/2003 with nmh-1.0.4
X-Exmh-Isig-CompType: repl
X-Exmh-Isig-Folder: cslists/caml
To: skaller@users.sourceforge.net
cc: Jon Harrop <jdh30@cam.ac.uk>, caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Ocamlyacc reentrancy 
In-reply-to: Your message of "01 May 2004 15:36:01 +1000."
             <1083389761.20722.15.camel@pelican.wigram> 
Mime-Version: 1.0
Content-Type: text/plain
Date: Wed, 05 May 2004 12:52:06 +0100
From: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Message-Id: <E1BLKwY-0003zP-00@mta1.cl.cam.ac.uk>
X-Miltered: at nez-perce with ID 4098D56A.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 2004:99 caml-list:01 ocaml:01 caml:01 reentrant:01 reentrant:01 trivial:01 parser:02 purely:02 module:03 module:03 parsers:03 wrote:03 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> On Sat, 2004-05-01 at 14:47, Jon Harrop wrote:
> > Apparently the Parser module should be reentrant because it is careful to save 
> > and load its global data.
> > 
> > http://pauillac.inria.fr/caml/caml-list/0258.html
> 
> Thanks for that link.  Xavier says:
> 
> "The module Parsing is supposed to be reentrant. Yes, there's some 
> global state inside, but we're careful to save and restore it across 
> entries. If you have a program demonstrating non-reentrance, please 
> send it to me privately and I'll try to fix that."

What about multithreaded code?

We wrote a couple of scripts that hack the output of ocamllex and
ocamlyacc, and a slightly modified lexing.ml and parsing.ml, that give
you purely functional lexers and parsers.  The modification is trivial
- just pass the state around in an argument, rather than a global
variable.

Let me know if you are interested.  I think we got some positive
noises from INRIA, but I'll leave it to them to comment re future
OCaml releases.  We didn't consider performance impact.

--KW 8-)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

