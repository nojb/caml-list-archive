Return-Path: <goswin-v-b@web.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 6E8B17F7B4
	for <caml-list@sympa.inria.fr>; Sun,  2 Feb 2014 02:38:48 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=pra; client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  goswin-v-b@web.de) identity=mailfrom;
  client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="goswin-v-b@web.de"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mout.web.de) identity=helo;
  client-ip=212.227.17.12;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="goswin-v-b@web.de";
  x-sender="postmaster@mout.web.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlICADah7VLU4xEMnGdsb2JhbABYg0Sqbo12hVKBCBYOAQEBAQEGDQkJFCiCJQEBBAE6GxkQCwsYCQQWCw8FDRsJKxKHXgEDCQwJwkYfKwMKFYkeF4xzgh2DJIEUBJY+gWuBM4R/EoQMgg+HMoE/
X-IPAS-Result: AlICADah7VLU4xEMnGdsb2JhbABYg0Sqbo12hVKBCBYOAQEBAQEGDQkJFCiCJQEBBAE6GxkQCwsYCQQWCw8FDRsJKxKHXgEDCQwJwkYfKwMKFYkeF4xzgh2DJIEUBJY+gWuBM4R/EoQMgg+HMoE/
X-IronPort-AV: E=Sophos;i="4.95,760,1384297200"; 
   d="scan'208";a="56455322"
Received: from mout.web.de ([212.227.17.12])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 02 Feb 2014 02:38:47 +0100
Received: from frosties.localnet ([37.49.32.119]) by smtp.web.de (mrweb002)
 with ESMTPSA (Nemesis) id 0LhvYQ-1VWZa107u6-00nBI0 for <caml-list@inria.fr>;
 Sun, 02 Feb 2014 02:38:47 +0100
Received: from mrvn by frosties.localnet with local (Exim 4.80)
	(envelope-from <goswin-v-b@web.de>)
	id 1W9m1G-0002uE-Bp
	for caml-list@inria.fr; Sun, 02 Feb 2014 02:38:46 +0100
Date: Sun, 2 Feb 2014 02:38:46 +0100
From: Goswin von Brederlow <goswin-v-b@web.de>
To: caml-list@inria.fr
Message-ID: <20140202013846.GA11002@frosties>
References: <20140201164203.GG1783@frosties>
 <CAP_800r7KACq_gAfybMe4BZHHZ3Ukm=mg7dgPX31HQxLuEEQVg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAP_800r7KACq_gAfybMe4BZHHZ3Ukm=mg7dgPX31HQxLuEEQVg@mail.gmail.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Provags-ID:  V03:K0:YdAevZl8RowtxTO9AqnrDr+6OfBFuCs4K3V3gUmyb8+LKKOYT8c
 WRcHC2dvEc/8aNBzW29tMF5PL0yK8okvMn1aK+S7rg7UF7y3OInHod74a13Ov0H8dfBth4Z
 AKrBXemVYgKGmS+nagoBEoWDXJ1RWhnLOLpU/BvWWGiK7ogG7qDIsW6QSsHPwMcirIHoafe
 eu/MM7f5tjB6IhPyO8TsA==
Subject: Re: [Caml-list] Why is struct caml_ba_proxy allocated outside the
 GC heap and why doesn't it have a finalizer?

On Sat, Feb 01, 2014 at 03:49:55PM -0500, Markus Mottl wrote:
> I'd opt for 2).
> 
> 1) seems problematic, e.g. what if several functions from possibly
> independent libraries needed to be executed?  2) would allow you to
> store a previous function pointer and the old contents of the private
> field in the new private field so you can "chain" finalization calls.
> This would also work seamlessly with "free" and "munmap".

The free pointer would only be for the one finalize function needed to
free the blob of memory. Not a general Gc.finalise thing. So there
should never be more than one function.
 
> 3) would seem less efficient.  Storing pointers to C-data in a normal
> record could cause troubles with the GC so you might have to store
> another unscanned abstract/custom block in the record, adding another
> layer of indirection.

The GC knows which pointers point inside the GC heap and which point
outside. So there is no problem there. The pointer must just not exist
after the destination has been freed or it might accidentaly point to
inside the next GC heap. Can't happen in this use case.
 
> Regards,
> Markus
> 
> On Sat, Feb 1, 2014 at 11:42 AM, Goswin von Brederlow <goswin-v-b@web.de> wrote:
> > Hi,
> >
> > in ZMQ (C library) I have zmq_msg_t structs that contain some metadata
> > (like the length) and potentially a pointer to data. For short
> > messages the data is part of zmq_msg_t and for larger it is allocated
> > seperately. The zmq_msg_t is an abstract type and I need to call
> > zmq_msg_close() when I no longer need that data of a message.
> >
> > Now when I write bindings for this I would like to use Bigarray to
> > grant access to the data and there I run into a problem. I need to
> > call zmq_msg_close() when the Bigarray is freed by the GC. Normaly I
> > could use Gc.finalise to register a function that calls
> > zmq_msg_close(). But not so with Bigarray because they can be sliced.
> > The slicing creates a new Bigarray that points to the same data. The
> > data can only be freed when every Bigarray pointing to it is
> > unreachable. The way this works now in ocaml is using a struct
> > caml_ba_proxy.
> >
> > The problem for me now is that the caml_ba_proxy is allocated outside
> > the GC heap and not reachable from the ocaml side. But I would have to
> > call Gc.finalise for the caml_ba_proxy object instead of the Bigarray.
> >
> >
> > Currently a Bigarray is a custom block that optionally contains a
> > pointer to the caml_ba_proxy. The pointer is set when a Bigarray is
> > sliced for the first time. And the caml_ba_proxy does reference
> > counting. A Bigarray also has a flag to say that the memory it points
> > to is not to be freed by the GC, is to be freed or is to be
> > munmap()ed, hardcoding 3 options.
> >
> > I can see 3 possible improvements there:
> >
> > 1) add a "void (*free)(struct caml_ba_proxy *)" to the caml_ba_proxy
> > structure that, if not NULL, gets called when the caml_ba_proxy is
> > freed. In the case of GC managed memory this would be set to free the
> > memory. In the case of mmap it would be set to munmap. And in
> > unmanaged memory it would be NULL. And for C bindings using Bigarray
> > they can pass in their own free function pointer.
> >
> > 2) Like 1 but also add a "void *private". Additional state for the
> > Bigarray can be stored there. In my case a pointer to the zmq_msg_t
> > would be stored. Actually forget about 1 and just do 2.
> >
> > 3) Bigarray becomes a normal OCaml record and the caml_ba_proxy
> > becomes a custom block. The finaliser, compare, serialise, ...
> > functions of the Bigarray and some flags move to the caml_ba_proxy,
> > which is no longer optional. Reference counting gets dropped since the
> > GC already covers that better now and the Bigarray module adds a
> > function to add finalisers to the caml_ba_proxy object.
> >
> >
> > So what do you think? Would it make sense to patch ocaml to support
> > option 2 or 3?
> >
> > MfG
> >         Goswin
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa.inria.fr/sympa/arc/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> 
> 
> 
> -- 
> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
> 
> -- 
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
