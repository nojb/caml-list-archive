Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id B9B3E7F7C2
	for <caml-list@sympa.inria.fr>; Wed,  5 Feb 2014 22:17:53 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.216.53;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.216.53 as permitted
  sender) identity=mailfrom; client-ip=209.85.216.53;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qa0-f53.google.com) identity=helo;
  client-ip=209.85.216.53;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qa0-f53.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqECACOq8lLRVdg1lGdsb2JhbABZg0RXqmWLIYhUgQgIFg4BAQEBBwsLCRIqgiUBAQQBJxkBGw8DCwEDAQsGBQsNDSEiAREBBQEKEgYTCAqHXgEDCQgNoRqMXoMJk3MKGScDCmSIKhEBBQyOZQQHhDgEiUmOYoEyjwIYKYJsggse
X-IPAS-Result: AqECACOq8lLRVdg1lGdsb2JhbABZg0RXqmWLIYhUgQgIFg4BAQEBBwsLCRIqgiUBAQQBJxkBGw8DCwEDAQsGBQsNDSEiAREBBQEKEgYTCAqHXgEDCQgNoRqMXoMJk3MKGScDCmSIKhEBBQyOZQQHhDgEiUmOYoEyjwIYKYJsggse
X-IronPort-AV: E=Sophos;i="4.95,788,1384297200"; 
   d="scan'208";a="57040271"
Received: from mail-qa0-f53.google.com ([209.85.216.53])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Feb 2014 22:17:52 +0100
Received: by mail-qa0-f53.google.com with SMTP id cm18so1435018qab.26
        for <caml-list@inria.fr>; Wed, 05 Feb 2014 13:17:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=7sHRTKGSiEwXfKieNDjXIeqLPsZrrNWh0WcYGWEoUZY=;
        b=wWjVPKfmPaSWhoHMbYx9xC881w1JGCX5Bm6QzpZn6nX4jy95zTzroHbCw9MW5AWEOM
         2gOtDzPY4wcs79GWYukuM0HOXAM/1SGDv3fjQCKqTxvk02VXGRuDf1Gsm1uN0rKCWUog
         iSNCrKtNE6RwP/uKATds5ARWmO+AfhtGu1GKdUccXoI0RDCl9bSCG499w8UlMu74bdQ+
         1vSn1AXT+Y+EqYEN8IMCgN7kqlT1CyiT7jk/QdrwVDT5uZVZMyR8JGLABZ+VocLUkvnq
         VW1EXV41r2fdUfoWF42x6rFabfYqc7E3deV+ExAHB1m3ero41AMxBBcU2o/wUYyVHw36
         IPuA==
X-Received: by 10.224.60.69 with SMTP id o5mr6388216qah.92.1391635071825; Wed,
 05 Feb 2014 13:17:51 -0800 (PST)
MIME-Version: 1.0
Received: by 10.224.106.137 with HTTP; Wed, 5 Feb 2014 13:17:31 -0800 (PST)
In-Reply-To: <52F29F45.6070003@frisch.fr>
References: <CAN6ygO=F1VMSEB1QoBv8U+f0QgQk3wA4RTrc91gnV4f5Gwc9QA@mail.gmail.com>
 <52F29F45.6070003@frisch.fr>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Wed, 5 Feb 2014 16:17:31 -0500
Message-ID: <CAN6ygOmsjLfPfXdumEWRn6N6_yFYO9Q5g31Twbxzh8ZQCZLkXA@mail.gmail.com>
To: Alain Frisch <alain@frisch.fr>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c3e4881cfa8904f1af4a48
Subject: Re: [Caml-list] Default methods for module signatures

--001a11c3e4881cfa8904f1af4a48
Content-Type: text/plain; charset=ISO-8859-1

Very nice proposal. I'm not crazy about the word 'virtual' since it doesn't
really mean anything (and has been brutally abused in C++), but that's
obviously a minor nitpick. Any reason this patch wasn't picked up?

-Yotam


On Wed, Feb 5, 2014 at 3:29 PM, Alain Frisch <alain@frisch.fr> wrote:

> I proposed (13 years ago...) a small patch to support optional fields in
> modules.  This would help achieving the desired effect. See:
>
> http://alain.frisch.fr/info/patch-option-announce
> http://alain.frisch.fr/info/patch-option
>
> -- Alain
>
>
>
> On 2/5/2014 7:49 PM, Yotam Barnoy wrote:
>
>> Hello List
>>
>> I would like the following feature, and I'm not enough of an expert in
>> module-fu to know if something like this is doable.
>>
>> Suppose I have a module signature of
>>
>> module type Monad = sig
>>    type 'a m
>>    val return : 'a -> 'a m
>>    val (>>=) : 'a m -> ('a -> 'b m) -> 'b m
>>    val (>>) : 'a m -> 'b m -> 'b m
>> end
>>
>> I would like to have a default implementation for (>>), since a simple
>> default implementation is
>>
>> let (>>) m f = m >>= fun _ -> f
>>
>> Alternatively, I would like to include this from some DefaultMonad
>> module, but have the (>>=) referred to in the function be my newly
>> defined (>>=) implementation (ie. late binding). Is there currently any
>> way to do this? If not, would there be a way to implement a partial
>> default implementation built into or associated with a module signature?
>> Something like
>>
>> module type Monad = sig... default struct... end
>>
>> Haskell has this available as part of the semantics of their typeclass
>> system, and I think it would be really handy to have (if there isn't
>> already a way to do it currently).
>>
>> -Yotam
>>
>>
>>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a11c3e4881cfa8904f1af4a48
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Very nice proposal. I&#39;m not crazy about the word =
&#39;virtual&#39; since it doesn&#39;t really mean anything (and has been b=
rutally abused in C++), but that&#39;s obviously a minor nitpick. Any reaso=
n this patch wasn&#39;t picked up?<br>

<br></div>-Yotam<br></div><div class=3D"gmail_extra"><br><br><div class=3D"=
gmail_quote">On Wed, Feb 5, 2014 at 3:29 PM, Alain Frisch <span dir=3D"ltr"=
>&lt;<a href=3D"mailto:alain@frisch.fr" target=3D"_blank">alain@frisch.fr</=
a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">I proposed (13 years ago...) a small patch t=
o support optional fields in modules. =A0This would help achieving the desi=
red effect. See:<br>


<br>
<a href=3D"http://alain.frisch.fr/info/patch-option-announce" target=3D"_bl=
ank">http://alain.frisch.fr/info/<u></u>patch-option-announce</a><br>
<a href=3D"http://alain.frisch.fr/info/patch-option" target=3D"_blank">http=
://alain.frisch.fr/info/<u></u>patch-option</a><br>
<br>
-- Alain<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
<br>
On 2/5/2014 7:49 PM, Yotam Barnoy wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Hello List<br>
<br>
I would like the following feature, and I&#39;m not enough of an expert in<=
br>
module-fu to know if something like this is doable.<br>
<br>
Suppose I have a module signature of<br>
<br>
module type Monad =3D sig<br>
=A0 =A0type &#39;a m<br>
=A0 =A0val return : &#39;a -&gt; &#39;a m<br>
=A0 =A0val (&gt;&gt;=3D) : &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#3=
9;b m<br>
=A0 =A0val (&gt;&gt;) : &#39;a m -&gt; &#39;b m -&gt; &#39;b m<br>
end<br>
<br>
I would like to have a default implementation for (&gt;&gt;), since a simpl=
e<br>
default implementation is<br>
<br>
let (&gt;&gt;) m f =3D m &gt;&gt;=3D fun _ -&gt; f<br>
<br>
Alternatively, I would like to include this from some DefaultMonad<br>
module, but have the (&gt;&gt;=3D) referred to in the function be my newly<=
br>
defined (&gt;&gt;=3D) implementation (ie. late binding). Is there currently=
 any<br>
way to do this? If not, would there be a way to implement a partial<br>
default implementation built into or associated with a module signature?<br>
Something like<br>
<br>
module type Monad =3D sig... default struct... end<br>
<br>
Haskell has this available as part of the semantics of their typeclass<br>
system, and I think it would be really handy to have (if there isn&#39;t<br>
already a way to do it currently).<br>
<br>
-Yotam<br>
<br>
<br>
</blockquote>
<br>
<br></div></div><span class=3D"HOEnZb"><font color=3D"#888888">
-- <br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/<u></u>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
</font></span></blockquote></div><br></div>

--001a11c3e4881cfa8904f1af4a48--
