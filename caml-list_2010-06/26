Return-Path: <alain.frisch@lexifi.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id DF3C2BBAF
	for <caml-list@yquem.inria.fr>; Fri,  4 Jun 2010 06:59:29 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArYCALckCEzUGyoFkWdsb2JhbACeOBUBAQEBCQsKBxEDH74mgleCPwSPcA
X-IronPort-AV: E=Sophos;i="4.53,359,1272837600"; 
   d="scan'208";a="63937890"
Received: from smtp5-g21.free.fr ([212.27.42.5])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 04 Jun 2010 06:59:29 +0200
Received: from [192.168.0.5] (rke75-3-82-229-183-156.fbx.proxad.net [82.229.183.156])
	by smtp5-g21.free.fr (Postfix) with ESMTP id EB727D4805A;
	Fri,  4 Jun 2010 06:59:21 +0200 (CEST)
Message-ID: <4C088828.3020209@lexifi.com>
Date: Fri, 04 Jun 2010 06:59:20 +0200
From: Alain Frisch <alain.frisch@lexifi.com>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.9) Gecko/20100317 Thunderbird/3.0.4
MIME-Version: 1.0
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Questions concerning modules as first-class values
References: <21533_1275496091_o52GSC5l015052_4C068697.5050007@frisch.fr>	<20100602173618.GD23344@localhost> <4C07CAB4.3060803@frisch.fr> <20100604.103408.51384535.garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <20100604.103408.51384535.garrigue@math.nagoya-u.ac.jp>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; frisch:01 frisch:01 lexifi:01 plug-ins:01 lexifi:01 sig:01 val:01 val:01 attrs:01 attrs:01 marshaling:01 syntax:01 compiler:01 instrument:98 instrument:98 

On 04/06/2010 03:34, Jacques Garrigue wrote:
> For instance, you can easily build a list of such plug-ins, with an
> uniform interface, and add elements to this list through dynamic
> loading. They can even expose internal data, with an abstract type.

Indeed!

That's basically our primary use of first-class modules at LexiFi. Our 
application maintains several sets of extensible notions (like 
"instruments" or "models") and it can load plugins which can register 
new such objects. Roughly speaking, each instrument is represented as a 
first-class module of type (module S) which looks like:

module type S = sig
   type t            (* the type of parameters for the instruments *)
   val t: t ttype    (* a dynamic representation of the type t *)
   val name: string  (* name to identify this instrument, presented
                        in a menu to the end-user *)
   val run: t -> contract (* build a fresh contract, which is a notion 
independent from the instrument *)

   type attrs   (* the type of attributes for this instrument *)
   val attrs: attrs ttype (* dynamic representation of attrs *)
   val compute: t -> contract -> attrs (* calculate attributes
                                    from initial parameters and
                                    a contract with history *)

   (* ... *)
end


The idea is that each instrument defines a number of abstract types 
(parameters, attributes) and operations on these types. It also exports 
values that gives the concrete structural representation of these 
abstract types (the 'a ttype components above) to enable generic 
operations such as automatic generation of GUI for showing/editing 
values of these types, or safe marshaling.  These "type" values can be 
derived automatically from the actual type definitions (either with a 
syntax extension, or with a compiler modification in our case).




Alain

