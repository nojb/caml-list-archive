Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id F315FBC57
	for <caml-list@yquem.inria.fr>; Fri, 25 Jun 2010 10:18:07 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArQBABcDJEzRVdY2mGdsb2JhbACTEIwpCBUBAQEBAQgJDAcRIrARggmFZC6IUwEBAwWFHASPCQ
X-IronPort-AV: E=Sophos;i="4.53,480,1272837600"; 
   d="scan'208";a="62107332"
Received: from mail-bw0-f54.google.com ([209.85.214.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 25 Jun 2010 10:18:07 +0200
Received: by bwz17 with SMTP id 17so1196061bwz.27
        for <caml-list@inria.fr>; Fri, 25 Jun 2010 01:18:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:mime-version:sender:received
         :in-reply-to:references:from:date:x-google-sender-auth:message-id
         :subject:to:cc:content-type;
        bh=vdoNvdbAOhI24sExTwViEcQcJMveNJzzIU8JssmphJA=;
        b=r5GqsLd8MxydPzxkEKl4veRofU8NxppbzQ9zUby77fKEAuBpNEDAlLATyykUIierzl
         KWZDbM/q6TiVFT+/GTimp1jkP5/siM+EgVyRVWGVwRKCI0fYabRgvBorbn8jzw5gge5V
         RzclGwtjZOGSUmaFLXIFM/e99HImu0+NbIVCw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        b=jKakDv480+ih8+NDnBFzUhmFFRmwXle49wcYX9GzCnRO2Imm3s7EKeGYPpeH8XEOZl
         BCEmUS7XNxBwrdiJaX3GymmJ6wLeb91FWQ+hT74Oe/CpVahd8gzZqEhItUESAAvEytda
         ixX2I1WQ7Cc3q7qTyUVzvHgfCA72jVEqLM8dE=
Received: by 10.204.73.193 with SMTP id r1mr233369bkj.111.1277453886311; Fri, 
	25 Jun 2010 01:18:06 -0700 (PDT)
MIME-Version: 1.0
Sender: gabriel.scherer@gmail.com
Received: by 10.204.68.148 with HTTP; Fri, 25 Jun 2010 01:17:46 -0700 (PDT)
In-Reply-To: <20100625082404.19864c8w6r8962kk@webmail.imag.fr>
References: <E8A96ADD-B0B1-4EAB-8D00-F1DA4EE331EA@inria.fr> 
	<4C232778.2020605@imag.fr> <4C2399B0.4060503@ens-lyon.org> 
	<20100624205906.48451eor602oaf3u@webmail.imag.fr> <AANLkTikF5ksWbj8J-b6qJ0FNCSMXkCv-M9KN5p-rX8yU@mail.gmail.com> 
	<20100624224944.91886zxkgzxq78iw@webmail.imag.fr> <AANLkTin4WhT942SwtKsODH07t-WF4P0hR4njvcg8WG4Y@mail.gmail.com> 
	<20100625000544.142418fa5cp6ye9k@webmail.imag.fr> <AANLkTil3-31E6aAurUzqETdNmVstQXynLMpm2h8PCu1F@mail.gmail.com> 
	<20100625082404.19864c8w6r8962kk@webmail.imag.fr>
From: bluestorm <bluestorm.dylc@gmail.com>
Date: Fri, 25 Jun 2010 10:17:46 +0200
X-Google-Sender-Auth: 1n0VqoszvUcgdqSNiCxNChTN-Qc
Message-ID: <AANLkTilObXVbEfPuBWf-fDprgu0oi16xMve7inu2FDIb@mail.gmail.com>
Subject: Re: [Caml-list] OCaml 3.12.0+beta1
To: Florent Ouchet <florent.ouchet@imag.fr>
Cc: "Hezekiah M. Carty" <hcarty@atmos.umd.edu>,
	caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=0016e6dd8f611c61490489d6699b
X-Spam: no; 0.00; ocaml:01 camlp:01 camlp:01 ocaml-:01 byterun:01 ocamlrun:01 otherlibs:01 byte:01 byterun:01 ocamlrun:01 ocamlc:01 stdlib:01 otherlibs:01 byte:01 cmo:01 

--0016e6dd8f611c61490489d6699b
Content-Type: text/plain; charset=ISO-8859-1

Here is a small Camlp4 filter removing exhaustive patterns. It obviously
depends on 3.12.

  open Camlp4.PreCast;;

  let filter =
    function
    | <:patt@_loc< { $p$ } >> ->
      let rec clean = function
        | <:patt< _ ; $p$ >> | <:patt< $p$; _ >> -> clean p
        | <:patt@_loc< $p1$; $p2$ >> -> <:patt< $clean p1$; $clean p2$ >>
        | p -> p in
      <:patt< { $clean p$ } >>
    | t -> t
  ;;

  AstFilters.register_str_item_filter (Ast.map_patt filter)#str_item;;


  (*
  #step I used to compile and test the code from a freshly compiiled (but
not installed) ocaml-3.12 beta :
  #I build using fastworld.sh (see INSTALL) then `cd _build`
  ../byterun/ocamlrun -I otherlibs/unix/ camlp4/camlp4orf.byte /tmp/
exhaustive_record_stripper.ml -o /tmp/stripper.ml
  ../byterun/ocamlrun ./ocamlc -I stdlib -I camlp4 /tmp/stripper.ml -c
   ../byterun/ocamlrun -I otherlibs/unix/ camlp4/camlp4o.byte
/tmp/stripper.cmo -str 'fun {a; b; _} -> c'
  #output : fun { a = a; b = b } -> c
  *)


Notes :
- that the OCaml printer expand sugared { a; b } patters into { a = a; b = b
} is necessary for printing backward-compatible code; I'm not sure it's a
good idea to rely on this.
- as with every camlp4 filters, the code is parsed then pretty-printed; do
not expect indentation to stay as is. Comment placement is also going to do
weird things (know and nearly-unfixable camlp4 defect) : ocamldoc may not
work properly on the output code.

--0016e6dd8f611c61490489d6699b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Here is a small Camlp4 filter removing exhaustive patterns. It obviously de=
pends on 3.12.<div><br></div><div><div>=A0=A0open Camlp4.PreCast;;</div><di=
v>=A0=A0</div><div>=A0=A0let filter =3D</div><div>=A0=A0 =A0function</div><=
div>=A0=A0 =A0| &lt;:patt@_loc&lt; { $p$ } &gt;&gt; -&gt;</div>

<div>=A0=A0 =A0 =A0let rec clean =3D function</div><div>=A0=A0 =A0 =A0 =A0|=
 &lt;:patt&lt; _ ; $p$ &gt;&gt; | &lt;:patt&lt; $p$; _ &gt;&gt; -&gt; clean=
 p</div><div>=A0=A0 =A0 =A0 =A0| &lt;:patt@_loc&lt; $p1$; $p2$ &gt;&gt; -&g=
t; &lt;:patt&lt; $clean p1$; $clean p2$ &gt;&gt;</div>

<div>=A0=A0 =A0 =A0 =A0| p -&gt; p in</div><div>=A0=A0 =A0 =A0&lt;:patt&lt;=
 { $clean p$ } &gt;&gt;</div><div>=A0=A0 =A0| t -&gt; t</div><div>=A0=A0;;<=
/div><div>=A0=A0</div><div>=A0=A0AstFilters.register_str_item_filter (Ast.m=
ap_patt filter)#str_item;;</div>

<div>=A0=A0</div><div>=A0=A0</div><div>=A0=A0(*</div><div>=A0=A0#step I use=
d to compile and test the code from a freshly compiiled (but not installed)=
 ocaml-3.12 beta :</div><div>=A0=A0#I build using fastworld.sh (see INSTALL=
) then `cd _build`</div>

<div>=A0=A0../byterun/ocamlrun -I otherlibs/unix/ camlp4/camlp4orf.byte /tm=
p/<a href=3D"http://exhaustive_record_stripper.ml">exhaustive_record_stripp=
er.ml</a> -o /tmp/<a href=3D"http://stripper.ml">stripper.ml</a></div><div>=
=A0=A0../byterun/ocamlrun ./ocamlc -I stdlib -I camlp4 /tmp/<a href=3D"http=
://stripper.ml">stripper.ml</a> -c</div>

<div>=A0=A0 ../byterun/ocamlrun -I otherlibs/unix/ camlp4/camlp4o.byte /tmp=
/stripper.cmo -str &#39;fun {a; b; _} -&gt; c&#39;</div><div>=A0=A0#output =
: fun { a =3D a; b =3D b } -&gt; c</div><div>=A0=A0*)</div></div><div><br><=
/div><div><br>

</div><div>Notes :</div><div>- that the OCaml printer expand sugared { a; b=
 } patters into { a =3D a; b =3D b } is necessary for printing backward-com=
patible code; I&#39;m not sure it&#39;s a good idea to rely on this.</div>
<div>
- as with every camlp4 filters, the code is parsed then pretty-printed; do =
not expect indentation to stay as is. Comment placement is also going to do=
 weird things (know and nearly-unfixable camlp4 defect) : ocamldoc may not =
work properly on the output code.</div>


--0016e6dd8f611c61490489d6699b--

