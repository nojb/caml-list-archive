Return-Path: <geoffw@cis.upenn.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 95D4FBB86
	for <caml-list@yquem.inria.fr>; Wed, 10 May 2006 04:42:44 +0200 (CEST)
Received: from lion.seas.upenn.edu (LION.SEAS.upenn.edu [158.130.12.194])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k4A2ghIn016111
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 10 May 2006 04:42:44 +0200
Received: from [192.168.19.128] (cpe-68-174-95-226.ucwphilly.res.rr.com [68.174.95.226])
	(authenticated bits=0)
	by lion.seas.upenn.edu (8.13.6/8.12.10) with ESMTP id k4A2gWvJ003930
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT);
	Tue, 9 May 2006 22:42:38 -0400
Message-ID: <446152CB.5010605@cis.upenn.edu>
Date: Tue, 09 May 2006 22:41:15 -0400
From: Geoffrey Alan Washburn <geoffw@cis.upenn.edu>
User-Agent: Thunderbird 1.5.0.2 (X11/20060420)
MIME-Version: 1.0
Newsgroups: gmane.comp.lang.caml.inria
To: Dan Grossman <djg@cs.washington.edu>
Cc: caml-list@yquem.inria.fr
Subject: Re: OO design
References: <53c655920605050235k64e70333je8df813239ea3c53@mail.gmail.com>	<20060508.121743.65190532.garrigue@math.nagoya-u.ac.jp>	<200605082329.36911.David.Teller@ens-lyon.org> <445FB9C7.4040703@cs.washington.edu>
In-Reply-To: <445FB9C7.4040703@cs.washington.edu>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 44615323.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; upenn:01 monadic:01 ocaml:01 runtime:01 wrote:01 idiom:01 alan:01 purely:02 functional:02 types:02 types:02 seems:03 seems:03 programming:03 uses:06 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Dan Grossman wrote:

> Phantom types are a programming idiom that can often pull off this sort 
> of thing.

	Maybe I'm just not smart enough, but I can't seem to think of a way to 
do this in an effectful language without getting bitten by aliasing.  In 
a purely functional setting, a monadic approach seems plausible, but if 
you can create a "ref" anywhere, as in OCaml, it seems straightforward 
to subvert any uses of phantom types for implementing protocols.  I 
suppose one could look at it from the angle that phantom types make it 
harder for cooperative users to make mistakes, but I can't see how they 
can prevent the need for runtime checks.

