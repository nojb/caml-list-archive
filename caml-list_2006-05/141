Return-Path: <carette@mcmaster.ca>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 76E86BB84
	for <caml-list@yquem.inria.fr>; Thu, 18 May 2006 19:33:42 +0200 (CEST)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id k4IHXfJF013309
	for <caml-list@yquem.inria.fr>; Thu, 18 May 2006 19:33:42 +0200
Received: from [130.113.68.27] (account carette@univmail.cis.mcmaster.ca [130.113.68.27] verified)
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.1.8)
  with ESMTP id 126571176 for caml-list@yquem.inria.fr; Thu, 18 May 2006 13:33:41 -0400
Message-ID: <446CB021.6000009@mcmaster.ca>
Date: Thu, 18 May 2006 13:34:25 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Mozilla Thunderbird 1.0.6 (Windows/20050716)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] compiler bug?
References: <20060517231426.30289.qmail@web32203.mail.mud.yahoo.com> <446CABCA.8000906@inria.fr>
In-Reply-To: <446CABCA.8000906@inria.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 446CAFF5.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; compiler:01 bug:01 compiler:01 compilation:01 compilation:01 solver:01 compilers:01 ocamlopt:01 fervent:98 wrote:01 caml-list:01 integer:01 jacques:01 jacques:01 linear:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Xavier Leroy wrote:

>Generation of spill code is a dark corner of compiler construction.
>As with many other compilation problems, there are a bunch of
>NP-completeness results.  Unlike many other compilation problems, I'm
>not aware of any published heuristics that works well in most cases.
>Well, there is the paper by George and Appel where they use an ILP
>solver (integer linear programming) to produce optimal spills, but
>that's kind of expensive...
>  
>

It is my impression that users of compilers are "ready" for the 
following situation:
1) an optimizing compiler (like ocamlopt!) that produces good code 
efficiently
2) a super-optimizing compiler that produces fantastic code, at whatever 
cost.

Such a compiler would probably rapidly find a niche of fervent users. 

Jacques

