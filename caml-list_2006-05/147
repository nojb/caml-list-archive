Return-Path: <carette@mcmaster.ca>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 966CCBB84
	for <caml-list@yquem.inria.fr>; Thu, 18 May 2006 22:14:36 +0200 (CEST)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k4IKEZxl014947
	for <caml-list@yquem.inria.fr>; Thu, 18 May 2006 22:14:36 +0200
Received: from [130.113.68.27] (account carette@univmail.cis.mcmaster.ca [130.113.68.27] verified)
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.1.8)
  with ESMTP id 126595608; Thu, 18 May 2006 16:14:35 -0400
Message-ID: <446CD5D7.30903@mcmaster.ca>
Date: Thu, 18 May 2006 16:15:19 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Mozilla Thunderbird 1.0.6 (Windows/20050716)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: David Brown <caml-list2@davidb.org>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] compiler bug?
References: <20060517231426.30289.qmail@web32203.mail.mud.yahoo.com> <446CABCA.8000906@inria.fr> <446CB021.6000009@mcmaster.ca> <446CB2EE.1080102@inria.fr> <446CCB8E.8080601@mcmaster.ca> <20060518200732.GA31619@old.davidb.org>
In-Reply-To: <20060518200732.GA31619@old.davidb.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 446CD5AB.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; compiler:01 bug:01 algebra:01 worst-case:01 worst-case:01 compiler:01 ocaml:01 functors:01 wrote:01 caml-list:01 compile:01 jacques:01 jacques:01 mcmaster:02 generally:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3



David Brown wrote:

>>In Computer Algebra, people use Groebner bases all the time.  They have 
>>doubly-exponential worst-case complexity -- but seem to work rather well 
>>in practice.  So I have stopped paying attention to worst-case; average 
>>case, when available, does matter a lot more.
>>    
>>
>
>Except when someone made a decision like this, in say a revision control
>system, and suddenly you discover that you've provoked a worst case
>scenario, and it suddenly takes hundreds of cpu hours to check in a file
>rather than a few seconds.
>  
>
I see you've used ClearCase!   Rather unpleasant experience.

>For something like a compiler, worse case behavior is very important.  It
>is not generally acceptable for a build to just hang in the compiler.
>
Not the compiler, the super-optimizing pass in the compiler.  I 
completely agree that the base compiler should not hang a build, and 
that complexity (including worst-case) there matters a lot.

Speaking of which, have you ever tried to compile an Ocaml program with 
a LOT of functors in it?  It requires quite a bit of patience...

Jacques

