Return-Path: <carette@mcmaster.ca>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 8F3E3BB84
	for <caml-list@yquem.inria.fr>; Fri, 19 May 2006 18:47:15 +0200 (CEST)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k4JGlEnt029423
	for <caml-list@yquem.inria.fr>; Fri, 19 May 2006 18:47:15 +0200
Received: from [130.113.68.27] (account carette@univmail.cis.mcmaster.ca [130.113.68.27] verified)
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.1.8)
  with ESMTP id 126685844; Fri, 19 May 2006 12:47:13 -0400
Message-ID: <446DF6C0.4090000@mcmaster.ca>
Date: Fri, 19 May 2006 12:48:00 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Mozilla Thunderbird 1.0.6 (Windows/20050716)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: skaller <skaller@users.sourceforge.net>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] compiler bug?
References: <20060517231426.30289.qmail@web32203.mail.mud.yahoo.com>	 <446CABCA.8000906@inria.fr> <446CB021.6000009@mcmaster.ca>	 <1147976357.25630.27.camel@rosella.wigram>  <446CC2C1.5040801@mcmaster.ca> <1148003249.25630.29.camel@rosella.wigram>
In-Reply-To: <1148003249.25630.29.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 446DF692.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; compiler:01 bug:01 haskell:01 untyped:01 well-typed:01 syntax:01 wrote:01 caml-list:01 syntactic:01 ghc:01 jacques:01 jacques:01 semantic:02 mcmaster:02 programming:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

skaller wrote:

>>>What about high level optimisations?
>>>
>>>Felix supports this:
>>>
>>>	reduce revrev[t] (x:list[t]): rev (rev x) => x;
>>>      
>>>
>>Haskell (GHC to be precise) allows that too. But is syntactic 
>>term-rewriting, in other words it is *untyped*.
>>    
>>
>
>It's well typed. x:list[t] means x is of type list[t].
>  
>
The *result* is well-typed.  What is the 'type' of the rule (ie the 
'function' reduce) ?  reduce acts on the programming language syntax, 
not on semantic values.

Jacques

