Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 42011BB84
	for <caml-list@yquem.inria.fr>; Wed, 31 May 2006 21:36:56 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k4VJatqQ004212
	for <caml-list@yquem.inria.fr>; Wed, 31 May 2006 21:36:55 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA24515 for <caml-list@pauillac.inria.fr>; Wed, 31 May 2006 21:36:55 +0200 (MET DST)
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.190])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k4VJaslO004204
	for <caml-list@inria.fr>; Wed, 31 May 2006 21:36:54 +0200
Received: by nf-out-0910.google.com with SMTP id p46so187896nfa
        for <caml-list@inria.fr>; Wed, 31 May 2006 12:35:54 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:mime-version:content-type;
        b=EiJ7JLAZasCGL9lyE1kuelRO6b9bpVSXH6K3qfpqTLqSg0fDCjJNgNv5lOT6gBeoN9kttIKJ58qnBqXZQ2tltOhbpXjvxF9+vk4aFEqgTsJDu7cWN7zuG0/5Qa7VTT93zm1Vfulta4B/0kvSBHMLpTCLJj4y49gcJwIVI0CZAtQ=
Received: by 10.49.93.9 with SMTP id v9mr795810nfl;
        Wed, 31 May 2006 12:35:54 -0700 (PDT)
Received: by 10.48.206.17 with HTTP; Wed, 31 May 2006 12:35:54 -0700 (PDT)
Message-ID: <5de3f5ca0605311235h1f1db228t8e10f4ef65233e05@mail.gmail.com>
Date: Wed, 31 May 2006 12:35:54 -0700
From: "L.G. Meredith" <lgreg.meredith@gmail.com>
To: caml-list <caml-list@inria.fr>
Subject: recursive modules?
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_30202_1624956.1149104154062"
X-j-chkmail-Score: MSGID : 447DF056.000 on nez-perce : j-chkmail score : X : 0/20 1
X-Miltered: at nez-perce with ID 447DF057.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 447DF056.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; recursive:01 ocaml:01 compiler:01 abstractly:01 recursive:01 ocaml:01 compiler:01 sig:01 val:01 bool:01 functor:01 sig:01 mult:01 val:01 functor:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=2.0 required=5.0 tests=HTML_50_60,HTML_MESSAGE,
	RCVD_BY_IP,RCVD_IN_BL_SPAMCOP_NET autolearn=disabled version=3.0.3

------=_Part_30202_1624956.1149104154062
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

All,

i'm mostly a neophyte with OCaml. Please find below a simple example of a
code i would like to be able to write, but that the compiler will not eat. i
build a term language over a set of variables that are themselves abstractly
characterized in terms of some identifier type. i would like to write a
recursive module in which the abstract type of identifier is essentially the
type of the joinedcompositionfunctor applied to itself. One can show that
this results in a (mathematically) well-founded definition. Is there a
version of OCaml or an OCaml compiler option that will enable this kind of
recursive definition?

Best wishes,

--greg

(* What we demand of identifiers used by variables *)

module type IDENTIFIER =
  sig
    type idType
    val comparator : idType -> idType -> bool
  end

(* Two monoids 'joined at the hip', i.e. sharing an identity and set of
'variables' *)

module type JOINEDCOMPOSITIONFUNCTOR =
  functor (VarId : IDENTIFIER) ->
    sig
      type idType = VarId.idType
      type composite =
          Empty
        | Var of idType
        | Mult of composite list
        | Sum of composite list
      exception IllFormedMultiplication
      exception IllFormedSummation
      val zero : composite
      val multiply : composite list -> composite
      val sum : composite list -> composite
    end

module JoinedCompositionFunctor =
  functor  ( VarId : IDENTIFIER ) ->
    struct
      type idType = VarId.idType
      type composite =
      Empty
    | Var of idType
    | Mult of composite list
    | Sum of composite list

      exception IllFormedMultiplication
      exception IllFormedSummation

      let zero = Empty
      let rec multiply cList =
    (match cList with
         [] -> Empty
       | cListHd :: cListRest ->
           (let mRest = multiply cListRest in
          (match cListHd with
               Empty -> mRest
             | _ ->
             (match mRest with
                  Empty -> Mult( [ cListHd ] )
                | Mult( mList ) -> Mult( cListHd :: mList )
                | _ -> raise IllFormedMultiplication))))
      let rec sum cList =
    (match cList with
         [] -> Empty
       | cListHd :: cListRest ->
           (let mRest = sum cListRest in
          (match cListHd with
               Empty -> mRest
             | _ ->
             (match mRest with
                  Empty -> Sum( [ cListHd ] )
                | Sum( mList ) -> Sum( cListHd :: mList )
                | _ -> raise IllFormedSummation))))
    end

(* A structural equivalence, with an abstract characterization of
bag-equivalence *)

module Equivalence ( TFun : JOINEDCOMPOSITIONFUNCTOR ) ( VarId : IDENTIFIER
) =
  struct
    module JoinedComposition = TFun( VarId )
    let rec structural c1 c2 =
      match ( c1, c2 ) with
      ( JoinedComposition.Empty, JoinedComposition.Empty ) -> true
    | ( JoinedComposition.Mult( [] ), JoinedComposition.Empty ) -> true
    | ( JoinedComposition.Empty, JoinedComposition.Mult( [] ) ) -> true
    | ( JoinedComposition.Sum( [] ), JoinedComposition.Empty ) -> true
    | ( JoinedComposition.Empty, JoinedComposition.Sum( [] ) ) -> true
    | ( JoinedComposition.Mult( [] ), JoinedComposition.Sum( [] ) ) -> true
    | ( JoinedComposition.Sum( [] ), JoinedComposition.Mult( [] ) ) -> true
    | ( JoinedComposition.Mult( multiplicands1 ), JoinedComposition.Mult(
multiplicands2 ) ) ->
        (structuralBags multiplicands1 multiplicands2
JoinedComposition.multiply structural)
    | ( JoinedComposition.Sum( sumands1 ), JoinedComposition.Sum( sumands2 )
) ->
        (structuralBags sumands1 sumands2 JoinedComposition.sum structural)
    | ( JoinedComposition.Var( id1 ), JoinedComposition.Var( id2 ) ) ->
        ( VarId.comparator id1 id2 )
    | ( d1, d2 ) -> ( d1 = d2 )
    and structuralBags opands1 opands2 compositeCtor equiv =
      (match opands1 with
       [] ->
         (match opands2 with
          [] -> true
        | _ -> false)
     | opands1Hd :: opands1Rest ->
         let compositeCtor1Rest = (compositeCtor opands1Rest) in
         let filterfn =
           (fun opands2Candidate ->
          (equiv opands1Hd opands2Candidate)) in
           (match opands2 with
            [] -> false
          | opands2Hd :: opands2Rest ->
              match (List.partition filterfn opands2) with
              ( [], _ ) -> false
            | ( candidatesHd :: candidatesRest, failures ) ->
                let lc = ref true in
                let found = ref false in
                let c = ref candidatesHd in
                let cRest = ref candidatesRest in
                let fails = ref failures in
                  ((while !lc do
                  if (equiv compositeCtor1Rest (compositeCtor (!cRest @
!fails)))
                  then
                    (found := true;
                     lc := false)
                  else
                    (fails := !c :: !fails;
                     (match !cRest with
                      [] -> lc := false
                    | cRestHd :: cRestRest ->
                        (c := cRestHd;
                         cRest := cRestRest;)))
                done);
                   !found)))
  end

module VariableOfString =
struct

  type idType = string
      let comparator = (=)
end

module JoinedCompositionOfString = JoinedCompositionFunctor (
VariableOfString )

module JoinedEquivalenceOfString = Equivalence ( JoinedCompositionFunctor )
( VariableOfString )

(*

  The following definition can be proven to be mathematically
  well-founded, but is there a compiler that will do the right thing?

  module VariableOfRJoinedComposition =
  struct

  module RJoinedCompositionEquivalence =
  Equivalence ( JoinedCompositionFunctor )( VariableOfJoinedRComposition )

  type idType = RJoinedCompositionEquivalence.JoinedComposition.idType
  let comparator =
RJoinedCompositionEquivalence.JoinedComposition.comparator

  end

*)

-- 
L.G. Meredith
Partner
Biosimilarity LLC
505 N 72nd St
Seattle, WA 98103

+1 206.650.3740

------=_Part_30202_1624956.1149104154062
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

All,<br><br>i'm mostly a neophyte with OCaml. Please find below a simple example of a code i would like to be able to write, but that the compiler will not eat. i build a term language over a set of variables that are themselves abstractly characterized in terms of some identifier type. i would like to write a recursive module in which the abstract type of identifier is essentially the type of the joinedcompositionfunctor applied to itself. One can show that this results in a (mathematically) well-founded definition. Is there a version of OCaml or an OCaml compiler option that will enable this kind of recursive definition?
<br><br>Best wishes,<br><br>--greg<br><br>(* What we demand of identifiers used by variables *)<br><br>module type IDENTIFIER =<br>&nbsp; sig<br>&nbsp;&nbsp;&nbsp; type idType<br>&nbsp;&nbsp;&nbsp; val comparator : idType -&gt; idType -&gt; bool<br>&nbsp; end<br>
<br>(* Two monoids 'joined at the hip', i.e. sharing an identity and set of 'variables' *)<br><br>module type JOINEDCOMPOSITIONFUNCTOR =<br>&nbsp; functor (VarId : IDENTIFIER) -&gt;<br>&nbsp;&nbsp;&nbsp; sig<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type idType = VarId.idType
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type composite =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Empty<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Var of idType<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Mult of composite list<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Sum of composite list<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exception IllFormedMultiplication<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exception IllFormedSummation
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val zero : composite<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val multiply : composite list -&gt; composite<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val sum : composite list -&gt; composite<br>&nbsp;&nbsp;&nbsp; end<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>module JoinedCompositionFunctor =<br>&nbsp; functor&nbsp; ( VarId : IDENTIFIER ) -&gt;
<br>&nbsp;&nbsp;&nbsp; struct<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type idType = VarId.idType<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type composite =<br>&nbsp;&nbsp;&nbsp; &nbsp; Empty<br>&nbsp;&nbsp;&nbsp; | Var of idType<br>&nbsp;&nbsp;&nbsp; | Mult of composite list<br>&nbsp;&nbsp;&nbsp; | Sum of composite list<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exception IllFormedMultiplication
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exception IllFormedSummation<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let zero = Empty<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let rec multiply cList =<br>&nbsp;&nbsp;&nbsp; (match cList with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; [] -&gt; Empty<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; | cListHd :: cListRest -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (let mRest = multiply cListRest in
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; (match cListHd with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Empty -&gt; mRest<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; | _ -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(match mRest with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Empty -&gt; Mult( [ cListHd ] )<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | Mult( mList ) -&gt; Mult( cListHd :: mList )
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | _ -&gt; raise IllFormedMultiplication))))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let rec sum cList =<br>&nbsp;&nbsp;&nbsp; (match cList with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; [] -&gt; Empty<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; | cListHd :: cListRest -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (let mRest = sum cListRest in
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; (match cListHd with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Empty -&gt; mRest<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; | _ -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(match mRest with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Empty -&gt; Sum( [ cListHd ] )<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | Sum( mList ) -&gt; Sum( cListHd :: mList )
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | _ -&gt; raise IllFormedSummation))))<br>&nbsp;&nbsp;&nbsp; end<br><br>(* A structural equivalence, with an abstract characterization of bag-equivalence *)<br><br>module Equivalence ( TFun : JOINEDCOMPOSITIONFUNCTOR ) ( VarId : IDENTIFIER ) =
<br>&nbsp; struct<br>&nbsp;&nbsp;&nbsp; module JoinedComposition = TFun( VarId )<br>&nbsp;&nbsp;&nbsp; let rec structural c1 c2 =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; match ( c1, c2 ) with<br>&nbsp;&nbsp;&nbsp; &nbsp; ( JoinedComposition.Empty, JoinedComposition.Empty ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Mult
( [] ), JoinedComposition.Empty ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Empty, JoinedComposition.Mult( [] ) ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Sum( [] ), JoinedComposition.Empty ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Empty
, JoinedComposition.Sum( [] ) ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Mult( [] ), JoinedComposition.Sum( [] ) ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Sum( [] ), JoinedComposition.Mult( [] ) ) -&gt; true<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Mult
( multiplicands1 ), JoinedComposition.Mult( multiplicands2 ) ) -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; (structuralBags multiplicands1 multiplicands2 JoinedComposition.multiply structural)<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Sum( sumands1 ), JoinedComposition.Sum
( sumands2 ) ) -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; (structuralBags sumands1 sumands2 JoinedComposition.sum structural)<br>&nbsp;&nbsp;&nbsp; | ( JoinedComposition.Var( id1 ), JoinedComposition.Var( id2 ) ) -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ( VarId.comparator id1 id2 )<br>
&nbsp;&nbsp;&nbsp; | ( d1, d2 ) -&gt; ( d1 = d2 )<br>&nbsp;&nbsp;&nbsp; and structuralBags opands1 opands2 compositeCtor equiv =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (match opands1 with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; [] -&gt; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; (match opands2 with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; [] -&gt; true<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | _ -&gt; false)
<br>&nbsp;&nbsp;&nbsp; &nbsp;| opands1Hd :: opands1Rest -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; let compositeCtor1Rest = (compositeCtor opands1Rest) in<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; let filterfn = <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (fun opands2Candidate -&gt; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; (equiv opands1Hd opands2Candidate)) in
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (match opands2 with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [] -&gt; false<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; | opands2Hd :: opands2Rest -&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; match (List.partition filterfn opands2) with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ( [], _ ) -&gt; false<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | ( candidatesHd :: candidatesRest, failures ) -&gt;
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; let lc = ref true in<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; let found = ref false in<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; let c = ref candidatesHd in<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; let cRest = ref candidatesRest in<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; let fails = ref failures in
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((while !lc do<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; if (equiv compositeCtor1Rest (compositeCtor (!cRest @ !fails)))<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; then <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; (found := true;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; lc := false)
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; else<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; (fails := !c :: !fails;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; (match !cRest with<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; [] -&gt; lc := false<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; | cRestHd :: cRestRest -&gt; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; (c := cRestHd;
<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; cRest := cRestRest;)))&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; done);<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !found)))<br>&nbsp; end<br><br>module VariableOfString =<br>struct<br><br>&nbsp; type idType = string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let comparator = (=)
<br>end<br><br>module JoinedCompositionOfString = JoinedCompositionFunctor ( VariableOfString )<br><br>module JoinedEquivalenceOfString = Equivalence ( JoinedCompositionFunctor ) ( VariableOfString )<br><br>(*<br><br>&nbsp; The following definition can be proven to be mathematically
<br>&nbsp; well-founded, but is there a compiler that will do the right thing?<br><br>&nbsp; module VariableOfRJoinedComposition =<br>&nbsp; struct<br><br>&nbsp; module RJoinedCompositionEquivalence = <br>&nbsp; Equivalence ( JoinedCompositionFunctor )( VariableOfJoinedRComposition )
<br>&nbsp; <br>&nbsp; type idType = RJoinedCompositionEquivalence.JoinedComposition.idType<br>&nbsp; let comparator = RJoinedCompositionEquivalence.JoinedComposition.comparator<br><br>&nbsp; end<br><br>*)<br clear="all"><br>-- <br>L.G. Meredith
<br>Partner<br>Biosimilarity LLC<br>505 N 72nd St<br>Seattle, WA 98103<br><br>+1 206.650.3740

------=_Part_30202_1624956.1149104154062--

