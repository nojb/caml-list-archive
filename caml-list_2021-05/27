Return-Path: <alan.schmitt@polytechnique.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id B8F37E002C
	for <caml-list@sympa.inria.fr>; Tue, 25 May 2021 09:30:29 +0200 (CEST)
IronPort-Data: =?us-ascii?q?A9a23=3AcNDYnqDyKyu6yRVW//7hw5YqxClBgxIJ4g17XOL?=
 =?us-ascii?q?fB1W7gDgjhDZTzGUWXj+DOq3fYzGkfN1ybYm19hlQuZ6Ax9UxeLYW3SE0HigS8?=
 =?us-ascii?q?aIpJvzAcxyuZ3vKRiH7ofMOA/w2MrEsF+hpCC+GzvuRGuK59yAkiPvUHuGU5NP?=
 =?us-ascii?q?sYUideyc1EU/Ntjozw4bVsqYw6TSIK1vlVeHa+6UzC3f5s9JACV/43orYwP9ZU?=
 =?us-ascii?q?FsejxtD1rA2TagjUFYzDBD5BrpHTU26ByOQroW5goeHq+j/ILGRpgs1/j82B8/?=
 =?us-ascii?q?NfrTTKxdaBO+Je1He0zwPAfnKbhtq/0Te1o4yMPMaL1xcizCIg8xZ0NJJpIC9Q?=
 =?us-ascii?q?gcvP7TRlaIaSRYw/yRWYPUXp+Kaeijm2SCU5wicG5f2+N1lBUQyeIkZ4fpfGnB?=
 =?us-ascii?q?L7fVeKTYXbxnFifje6LmkTMFoh98/N4/qMJIbvjdn1z6xJfI5R7jHXKOM49JEt?=
 =?us-ascii?q?ArcLOgm8e32bM4FLGM1PFGROFgWag5SUchv2vmwgD/+dSdZoRSbv8IKD6Ho5FQ?=
 =?us-ascii?q?Z+NDQ3BD9II3iqR1po3ul?=
IronPort-HdrOrdr: =?us-ascii?q?A9a23=3AJPSjJqkAO0yiYGKIJTWSiTy6uljpDfKX3DAb?=
 =?us-ascii?q?v31ZSRFFG/FwWfrOoB19726TtN9xYgBGpTnkAsO9qBznmKKdjbN8AV7mZniEhI?=
 =?us-ascii?q?NHRLsSkbcKgAeQZhEXz4ZmpNhdmtFFeaPN5DpB7foSkTPId+rIm+P3iZxA7N22?=
 =?us-ascii?q?pxxQpENRGsNdBmFCZTpzeXcGITWua6BWKHO03Ls3mxOQPVoWc+WmDT0/U+DYod?=
 =?us-ascii?q?qjruOdXTc2QzAm9SiThneS5LT7ChiV2Qp2aUI1/Z4StUbEji3k7eGZv/u60x/R?=
 =?us-ascii?q?0HKWx5lag9f60LJ4dbyxo/lQBDXwqxqiIL5sXLCPp1kO0ZmS1Go=3D?=
X-IronPort-AV: E=Sophos;i="5.82,327,1613430000"; 
   d="scan'208,217";a="509755381"
Received: from clt-128-93-181-129.vpn.inria.fr (HELO set) ([128.93.181.129])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 25 May 2021 09:30:24 +0200
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 25 May 2021 09:30:14 +0200
Message-ID: <87sg2bgtix.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of May 18 to 25,
2021.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Applied PL research at Jane Street
IRC channels available on libera.chat
B Trees in Ocaml via Fmlib 0.3.0
GitHub Actions for OCaml: now stable and on the ocaml org
Set up OCaml 2.0.0-alpha
FrontC 4.1.0 (Vingt ans apr=C3=A8s)
Old CWN


Applied PL research at Jane Street
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive:
  <https://discuss.ocaml.org/t/job-applied-pl-research-at-jane-street/7877/=
1>


Yaron Minsky announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This isn't exactly news, but we're (still) actively looking to hire
  people to do applied PL research, with a particular focus on
  type-level work. Follow this link if you want to see how to apply.

  <https://blog.janestreet.com/applied-PL-research/>

  Please share it around with anyone who you think might be on the
  market!

  *About the job*

  Part of our ambition is to grow OCaml into a language that does an
  ever better job of being convenient and expressive by default, while
  allowing for the kind of precise control you need when building high
  performance systems, where it's needed.

  That's led us to do research on stack-allocation, unboxed types,
  algebraic effects, type-level resource tracking, and more. We think
  it's an exciting direction for the language, and there's a lot of
  challenging and novel work to be done, and the main thing that could
  speed us up is having more of the right people to work on it!

  Jane Street is an excellent laboratory for this kind of work: big
  enough to have serious and demanding use-cases, but small and nimble
  enough to be able to try out new language features, and then back out
  of them or change them in incompatible ways if need be.

  And all the work we do on the compiler is in the open, with the goal
  of getting the final results into a state where they can be
  upstreamed.

  Also, it's a great team! Full of serious experts who have collectively
  contributed a lot to OCaml and PL research over the years, and also a
  really nice set of people to work with. And I think the team has a
  good balance of the practical and theoretical: working hard to do the
  right thing, but also finding practical ideas that can make forward
  progress in the near term.

  *Who are we looking for*

  We're looking for people with a good balance of theoretical and
  engineering backgrounds, since the work is demanding on both fronts.

  We're happy to hire people at a range of experience levels: people who
  have just finished a post-doc or PhD, up to experienced academics and
  people in industry.

  The team has a presence in New York and London, and we're hiring in
  both offices. No remote work, I'm afraid.


IRC channels available on libera.chat
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://sympa.inria.fr/sympa/arc/caml-list/2021-05/msg00022.html>


Adrien Nader announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Due to the recent troubles on freenode[1][2], I've connected to
  irc.libera.chat early in order to create and register the same
  channels that I know and take care ofa on freenode (i.e. #ocaml and
  #ocaml-fr).

  I am not stating libera.chat is better than freenode.net although the
  amount of staffers moving makes me think freenode.net will not be
  running fine for a much longer time.

  At the moment I believe it is better to keep both channels running and
  to encourage people to connect on libera.chat too. In the future, I
  might force migration by progressively silencing the channel that
  should be abandoned.

  If you maintain a relay bot, can you please add it on libera.chat too?

  As far as I know, there is no Matrix bridge available currently. It
  seems the discussion/process for bridge additions occurs at [3].

  A good news is that I've gotten the full rights on the channel,
  something which was requiring paperwork on freenode (which I had
  already mentioned but never got around to doing and for which I never
  even remotely got time for).

  [1] <https://lwn.net/Articles/856543/> (this still constantly changes)
  [2]
  <https://en.wikipedia.org/wiki/Freenode#2021_ownership_change_and_conflic=
t>
  [3] <https://github.com/matrix-org/matrix-appservice-irc/issues/208>


B Trees in Ocaml via Fmlib 0.3.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/b-trees-in-ocaml-via-fmlib-0-3-0/7880/1>


Hbr announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I am pleased to announce the release (0.3.0) of fmlib, a functional
  library with managed effects.

  The main new feature of release 0.3.0 are B trees. B trees can be used
  to implement finite sets and finite maps. Fmlib's B trees have
  functionality similar to the modules `Set' and `Map' of the standard
  library.

  The modules `Set' and `Map' of the standard library are based on AVL
  trees. B trees offer the same functionality but have on modern
  processors a better cache performance and have better data locality.

  The current B tree implementation in `Fmlib' implements B trees by
  using arrays which are guaranteed to fit into a cache line. The design
  of B trees is described [here]. The API can be found [here].

  The library `Fmlib' has four main components:

  =E2=80=A2 [Standard Datatypes]: This component offers some modules from
    `Stdlib' with additional functionality. E.g. `Fmlib_std.Array'
    offers functions to insert elements into arrays, remove elements
    from an array and binary search in a sorted array. It has the
    modules `Result' and `Option' which can be used to avoid exceptions
    and use exceptions in a more structured way. The modules `Result'
    and `Option' in `Fmlib' offer a complete monadic interface and offer
    the `let*' operator to write well readable monadic code.

  =E2=80=A2 [Pretty Printing]: Print tree like structures in a nice way and=
 use
    the library completely functional. The library does not assume a
    specific IO method. The pretty printer generates a lazy stream of
    characteres which can be written by all io functions.

  =E2=80=A2 [Combinator Parsing]: Easily parse textual input by the use of
    combinators. The library supports indentation sensitivity and can
    therefore be used to parse yaml files, haskell, python,
    etc. Furthermore no input method is assumed. The generated parsers
    are sink of tokens (or characters). You can choose any input method
    and push the tokens/characters into the parsers. The generated
    parsers are fully incremental. Parser can be stored at any position
    of the input stream and in case of interactive editing, parsing can
    be resumed from any point of the stream.

  =E2=80=A2 [Interface to Javascript]: This components contains primitives =
to
    interface to javascript via `js_of_ocaml'.

  `Fmlib' can be installed via opam:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam update
  =E2=94=82 opam install fmlib
  =E2=94=82 opam install fmlib_std
  =E2=94=82 opam install fmlib_pretty
  =E2=94=82 opam install fmlib_parse
  =E2=94=82 opam install fmlib_js
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The source code of the library is located at [github]


[here] <https://fmlib_ocaml.readthedocs.io>

[here] <https://hbr.github.io/fmlib/odoc/fmlib_std>

[Standard Datatypes] <https://hbr.github.io/fmlib/odoc/fmlib_std>

[Pretty Printing] <https://hbr.github.io/fmlib/odoc/fmlib_pretty>

[Combinator Parsing] <https://hbr.github.io/fmlib/odoc/fmlib_parse>

[Interface to Javascript] <https://hbr.github.io/fmlib/odoc/fmlib_js>

[github] <https://github.com/hbr/fmlib>


GitHub Actions for OCaml: now stable and on the ocaml org
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/github-actions-for-ocaml-now-stable-and-on-t=
he-ocaml-org/7889/1>


Anil Madhavapeddy announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  I [announced a beta] of OCaml/opam support for GitHub Actions back in
  Nov 2019, and the functionality has turned out to be popular. A number
  of projects in our community have been using the Action, and it can be
  found in the [GitHub Marketplace].

  It has been sufficiently popular that it's definitely time to get it
  off my personal GitHub account, and so I have transferred it to its
  new home at <https://github.com/ocaml/setup-ocaml>.  I am also very
  pleased to announce that @smorimoto and @dra27 are also now
  maintainers =E2=80=93 they have both made significant improvements to it,=
 and
  @smorimoto in particular has been working with the GitHub ecosystem to
  further improve the efficiency of the Action (such as by adding
  reliable caching).  Thank you to them both and [all the other
  contributors] for your help improving the CI experience around OCaml.

  If anyone else wishes to contribute to improving the action, please do
  get involved on [the issue tracker].  And of course, if you are still
  referencing `avsm/setup-ocaml' in your own workflow definition, this
  is a good time to change it to `ocaml/setup-ocaml'.

  This is probably a good time to note that the other [ci-scripts]
  repository on the ocaml/ GitHub organisation is in sore need of either
  new maintainers (for the Travis CI), or being retired due to lack of
  support (primarily due to the shift to GitHub Actions). I'm immensely
  grateful to Travis CI for the decade of mostly free builds they have
  provided our community to date.


[announced a beta]
<https://discuss.ocaml.org/t/github-actions-for-ocaml-opam-now-available/47=
45>

[GitHub Marketplace]
<https://github.com/marketplace/actions/set-up-ocaml>

[all the other contributors]
<https://github.com/ocaml/setup-ocaml/graphs/contributors>

[the issue tracker] <https://github.com/ocaml/setup-ocaml/issues>

[ci-scripts] <https://github.com/ocaml/ocaml-ci-scripts>


Set up OCaml 2.0.0-alpha
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-alpha/7895/1>


Sora Morimoto announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This is the announcement of the first alpha release of setup-ocaml
  v2. This includes quite a few changes, including reliable cache, as
  described in a recent [post].

  There are so many changes, so I would like to list only the notable
  changes. (The full changelog can be found at the bottom of the post.)


[post]
<https://discuss.ocaml.org/t/github-actions-for-ocaml-now-stable-and-on-the=
-ocaml-org/7889>

The "ocaml-version" input is now named "ocaml-compiler"
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  This was changed because calling it "OCaml Version" is not appropriate
  enough, e.g. to use the new variant naming convention introduced from
  4.12.


32 bits compiler support
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C


Semver-style version matching support
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  With the naughty exception of `4.02.2' , point releases are meant to
  be strictly compatible, so once OCaml dev team release a new point
  release, upgrading should be a no-brainer. With that in mind, it's
  obviously not smart to rewrite every workflow every time a new point
  release is released, so you can now specify versions in the style like
  `4.12.x'.


Reliable cache feature
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  The action supports not only the compiler cache, but also the [dune
  cache]. However, note that it is not available on the macOS runners
  until opam 2.0.9 is released. The dune cache is actually quite
  powerful for large projects, if you're interested in it, check out the
  comparison section of [ocaml/setup-ocaml#66]. The reliable cache
  feature uses the [@actions/cache] package internally, and I worked
  with the GitHub team to make it fast enough for setup-ocaml to be up
  to 4x faster. For the Ubuntu runners, you can set up your environment
  with cache in about 30~40 seconds at the fastest.


[dune cache] <https://github.com/ocaml/dune/blob/2.8.5/doc/caching.rst>

[ocaml/setup-ocaml#66] <https://github.com/ocaml/setup-ocaml/pull/66>

[@actions/cache]
<https://github.com/actions/toolkit/tree/main/packages/cache>


Automatic pinning and depext handling of local packages
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  For example, if you have a very large number of local packages, like
  the [Irmin] project, it can be quite a pain for a human to have to
  write a script to pin them all in your workflow. The action pins and
  depext the local packages if they exist in the repository by
  default. You can also use the glob pattern to select which local
  packages to handle, as described [here].

  <https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-alpha>


[Irmin] <https://github.com/mirage/irmin>

[here]
<https://github.com/ocaml/setup-ocaml/blob/master/examples.md#using-glob-pa=
tterns-to-filter-local-packages>


FrontC 4.1.0 (Vingt ans apr=C3=A8s)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-frontc-4-1-0-vingt-ans-apres/7906/1>


Ivan Gotovchits announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  More than twenty years after its original release [FrontC] is still
  alive and getting new updates. Mostly it started with my frustration
  with its Makefiles that ended up in switching to menhir and dune and
  adding cram tests that finally enabled us to safely touch the grammar
  definitions and introduce a few c99 =E2=80=A6 c11 language features as we=
ll as
  more GNU extensions. Our end goal is to get a robust and easy-to-use C
  parser that is capable of taking a C program on a modern Linux
  distribution and get it parsed into a C abstract tree. It is not that
  trivial as it may sound as modern C library headers (especially GNU
  libc) use non-standard or standard but very modern C features, and
  most of the OCaml parsers that I have seen are still unable to parse
  them, including parsers from FramaC, C11parser, and even compcert
  parser (mostly they do not handle complex floating-point types and
  various extension types and some GCC attributes).

  Therefore, FrontC is still useful, especially if all that you want is
  to start doing program analysis with minimal initial effort, just do
  (but wait until it is [merged])

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam install FrontC
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  and start hacking!

  With that said, FrontC is mostly maintained at leisure time by
  volunteers, so the pull requests are very welcome.


[FrontC] <https://github.com/BinaryAnalysisPlatform/FrontC>

[merged] <https://github.com/ocaml/opam-repository/pull/18736>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2021-05-25 Tue 09:23 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
// @license magnet:?xt=3Durn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&=
dn=3Dpublic-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2021.05.18.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2021.06.01.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of May 18 to 25, 2021.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">Applied PL research at Jane Street</a></li>
<li><a href=3D"#2">IRC channels available on libera.chat</a></li>
<li><a href=3D"#3">B Trees in Ocaml via Fmlib 0.3.0</a></li>
<li><a href=3D"#4">GitHub Actions for OCaml: now stable and on the ocaml or=
g</a></li>
<li><a href=3D"#5">Set up OCaml 2.0.0-alpha</a></li>
<li><a href=3D"#6">FrontC 4.1.0 (Vingt ans apr=C3=A8s)</a></li>
<li><a href=3D"#org5fac4e9">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">Applied PL research at Jane Street</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/job-applied-pl-research-at-=
jane-street/7877/1">https://discuss.ocaml.org/t/job-applied-pl-research-at-=
jane-street/7877/1</a>
</p>
</div>

<div id=3D"outline-container-org1cf8d25" class=3D"outline-3">
<h3 id=3D"org1cf8d25">Yaron Minsky announced</h3>
<div class=3D"outline-text-3" id=3D"text-org1cf8d25">
<p>
This isn't exactly news, but we're (still) actively looking to hire people =
to do applied PL research, with a
particular focus on type-level work. Follow this link if you want to see ho=
w to apply.
</p>

<p>
<a href=3D"https://blog.janestreet.com/applied-PL-research/">https://blog.j=
anestreet.com/applied-PL-research/</a>
</p>

<p>
Please share it around with anyone who you think might be on the market!
</p>

<p>
<b>About the job</b>
</p>

<p>
Part of our ambition is to grow OCaml into a language that does an ever bet=
ter job of being convenient and expressive
by default, while allowing for the kind of precise control you need when bu=
ilding high performance systems, where
it's needed.
</p>

<p>
That's led us to do research on stack-allocation, unboxed types, algebraic =
effects, type-level resource tracking, and
more. We think it's an exciting direction for the language, and there's a l=
ot of challenging and novel work to be
done, and the main thing that could speed us up is having more of the right=
 people to work on it!
</p>

<p>
Jane Street is an excellent laboratory for this kind of work: big enough to=
 have serious and demanding use-cases, but
small and nimble enough to be able to try out new language features, and th=
en back out of them or change them in
incompatible ways if need be.
</p>

<p>
And all the work we do on the compiler is in the open, with the goal of get=
ting the final results into a state where
they can be upstreamed.
</p>

<p>
Also, it's a great team! Full of serious experts who have collectively cont=
ributed a lot to OCaml and PL research
over the years, and also a really nice set of people to work with. And I th=
ink the team has a good balance of the
practical and theoretical: working hard to do the right thing, but also fin=
ding practical ideas that can make forward
progress in the near term.
</p>

<p>
<b>Who are we looking for</b>
</p>

<p>
We're looking for people with a good balance of theoretical and engineering=
 backgrounds, since the work is demanding
on both fronts.
</p>

<p>
We're happy to hire people at a range of experience levels: people who have=
 just finished a post-doc or PhD, up to
experienced academics and people in industry.
</p>

<p>
The team has a presence in New York and London, and we're hiring in both of=
fices. No remote work, I'm afraid.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">IRC channels available on libera.chat</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2021-05/msg0=
0022.html">https://sympa.inria.fr/sympa/arc/caml-list/2021-05/msg00022.html=
</a>
</p>
</div>

<div id=3D"outline-container-orgb7faf04" class=3D"outline-3">
<h3 id=3D"orgb7faf04">Adrien Nader announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb7faf04">
<p>
Due to the recent troubles on freenode[1][2], I've connected to
irc.libera.chat early in order to create and register the same channels
that I know and take care ofa on freenode (i.e. #ocaml and #ocaml-fr).
</p>

<p>
I am not stating libera.chat is better than freenode.net although the
amount of staffers moving makes me think freenode.net will not be
running fine for a much longer time.
</p>

<p>
At the moment I believe it is better to keep both channels running and
to encourage people to connect on libera.chat too. In the future, I
might force migration by progressively silencing the channel that should
be abandoned.
</p>

<p>
If you maintain a relay bot, can you please add it on libera.chat too?
</p>

<p>
As far as I know, there is no Matrix bridge available currently. It
seems the discussion/process for bridge additions occurs at [3].
</p>

<p>
A good news is that I've gotten the full rights on the channel,
something which was requiring paperwork on freenode (which I had already
mentioned but never got around to doing and for which I never even remotely
got time for).
</p>

<p>
[1] <a href=3D"https://lwn.net/Articles/856543/">https://lwn.net/Articles/8=
56543/</a> (this still constantly changes) <br />
[2] <a href=3D"https://en.wikipedia.org/wiki/Freenode#2021_ownership_change=
_and_conflict">https://en.wikipedia.org/wiki/Freenode#2021_ownership_change=
_and_conflict</a> <br />
[3] <a href=3D"https://github.com/matrix-org/matrix-appservice-irc/issues/2=
08">https://github.com/matrix-org/matrix-appservice-irc/issues/208</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">B Trees in Ocaml via Fmlib 0.3.0</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/b-trees-in-ocaml-via-fmlib-=
0-3-0/7880/1">https://discuss.ocaml.org/t/b-trees-in-ocaml-via-fmlib-0-3-0/=
7880/1</a>
</p>
</div>

<div id=3D"outline-container-org092c3b6" class=3D"outline-3">
<h3 id=3D"org092c3b6">Hbr announced</h3>
<div class=3D"outline-text-3" id=3D"text-org092c3b6">
<p>
I am pleased to announce the release (0.3.0) of fmlib, a functional
library with managed effects.
</p>

<p>
The main new feature of release 0.3.0 are B trees. B trees can be used to
implement finite sets and finite maps. Fmlib's  B trees have functionality
similar to the modules <code>Set</code> and <code>Map</code> of the standar=
d library.
</p>

<p>
The modules <code>Set</code> and <code>Map</code> of the standard library a=
re based on AVL trees. B
trees offer the same functionality but have on modern processors a better c=
ache
performance and have better data locality.
</p>

<p>
The current B tree implementation in <code>Fmlib</code> implements B trees =
by using arrays
which are guaranteed to fit into a cache line. The design of B trees is
described <a href=3D"https://fmlib_ocaml.readthedocs.io">here</a>. The API =
can be found <a href=3D"https://hbr.github.io/fmlib/odoc/fmlib_std">here</a=
>.
</p>

<p>
The library <code>Fmlib</code> has four main components:
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://hbr.github.io/fmlib/odoc/fmlib_std">Standard Datatyp=
es</a>: This component offers some modules from <code>Stdlib</code>
with additional functionality. E.g. <code>Fmlib_std.Array</code> offers fun=
ctions to
insert elements into arrays, remove elements from an array and binary search
in a sorted array. It has the modules <code>Result</code> and <code>Option<=
/code> which can be used
to avoid exceptions and use exceptions in a more structured way. The modules
<code>Result</code> and <code>Option</code> in <code>Fmlib</code> offer a c=
omplete monadic interface and offer
the <code>let*</code> operator to write well readable monadic code.</li>

<li><a href=3D"https://hbr.github.io/fmlib/odoc/fmlib_pretty">Pretty Printi=
ng</a>: Print tree like structures in a nice way and use
the library completely functional. The library does not assume a specific IO
method. The pretty printer generates a lazy stream of characteres which can=
 be
written by all io functions.</li>

<li><a href=3D"https://hbr.github.io/fmlib/odoc/fmlib_parse">Combinator Par=
sing</a>: Easily parse textual input by the use of
combinators. The library supports indentation sensitivity and can therefore=
 be
used to parse yaml files, haskell, python, etc. Furthermore no input method=
 is
assumed. The generated parsers are sink of tokens (or characters). You can
choose any input method and push the tokens/characters into the parsers. The
generated parsers are fully incremental. Parser can be stored at any positi=
on
of the input stream and in case of interactive editing, parsing can be resu=
med
from any point of the stream.</li>

<li><a href=3D"https://hbr.github.io/fmlib/odoc/fmlib_js">Interface to Java=
script</a>: This components contains primitives to
interface to javascript via <code>js_of_ocaml</code>.</li>
</ul>

<p>
<code>Fmlib</code> can be installed via opam:
</p>

<pre class=3D"example" id=3D"org76f3d97">
opam update
opam install fmlib
opam install fmlib_std
opam install fmlib_pretty
opam install fmlib_parse
opam install fmlib_js
</pre>

<p>
The source code of the library is located at <a href=3D"https://github.com/=
hbr/fmlib">github</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">GitHub Actions for OCaml: now stable and on the ocaml org</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/github-actions-for-ocaml-no=
w-stable-and-on-the-ocaml-org/7889/1">https://discuss.ocaml.org/t/github-ac=
tions-for-ocaml-now-stable-and-on-the-ocaml-org/7889/1</a>
</p>
</div>

<div id=3D"outline-container-org7f9f27b" class=3D"outline-3">
<h3 id=3D"org7f9f27b">Anil Madhavapeddy announced</h3>
<div class=3D"outline-text-3" id=3D"text-org7f9f27b">
<p>
I <a href=3D"https://discuss.ocaml.org/t/github-actions-for-ocaml-opam-now-=
available/4745">announced a beta</a> of OCaml/opam
support for GitHub Actions back in Nov 2019, and the functionality has turn=
ed out to be popular. A number of projects
in our community have been using the Action, and it can be found in the <a =
href=3D"https://github.com/marketplace/actions/set-up-ocaml">GitHub
Marketplace</a>.
</p>

<p>
It has been sufficiently popular that it's definitely time to get it off my=
 personal GitHub account, and so I have
transferred it to its new home at <a href=3D"https://github.com/ocaml/setup=
-ocaml">https://github.com/ocaml/setup-ocaml</a>.  I am also very pleased t=
o announce that
@smorimoto and @dra27 are also now maintainers &#x2013; they have both made=
 significant improvements to it, and @smorimoto
in particular has been working with the GitHub ecosystem to further improve=
 the efficiency of the Action (such as by
adding reliable caching).  Thank you to them both and <a href=3D"https://gi=
thub.com/ocaml/setup-ocaml/graphs/contributors">all the other
contributors</a> for your help improving the CI experience
around OCaml.
</p>

<p>
If anyone else wishes to contribute to improving the action, please do get =
involved on <a href=3D"https://github.com/ocaml/setup-ocaml/issues">the iss=
ue
tracker</a>.  And of course, if you are still referencing
<code>avsm/setup-ocaml</code> in your own workflow definition, this is a go=
od time to change it to <code>ocaml/setup-ocaml</code>.
</p>

<p>
This is probably a good time to note that the other <a href=3D"https://gith=
ub.com/ocaml/ocaml-ci-scripts">ci-scripts</a>
repository on the ocaml/ GitHub organisation is in sore need of either new =
maintainers (for the Travis CI), or being
retired due to lack of support (primarily due to the shift to GitHub Action=
s). I'm immensely grateful to Travis CI
for the decade of mostly free builds they have provided our community to da=
te.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Set up OCaml 2.0.0-alpha</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-alph=
a/7895/1">https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-alpha/7895/1</=
a>
</p>
</div>

<div id=3D"outline-container-orgf617074" class=3D"outline-3">
<h3 id=3D"orgf617074">Sora Morimoto announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgf617074">
<p>
This is the announcement of the first alpha release of setup-ocaml v2. This=
 includes quite a few changes, including
reliable cache, as described in a recent
<a href=3D"https://discuss.ocaml.org/t/github-actions-for-ocaml-now-stable-=
and-on-the-ocaml-org/7889">post</a>.
</p>

<p>
There are so many changes, so I would like to list only the notable changes=
. (The full changelog can be found at the
bottom of the post.)
</p>
</div>

<div id=3D"outline-container-org6401225" class=3D"outline-4">
<h4 id=3D"org6401225">The "ocaml-version" input is now named "ocaml-compile=
r"</h4>
<div class=3D"outline-text-4" id=3D"text-org6401225">
<p>
This was changed because calling it "OCaml Version" is not appropriate enou=
gh, e.g. to use the new variant naming
convention introduced from 4.12.
</p>
</div>
</div>

<div id=3D"outline-container-org26d8296" class=3D"outline-4">
<h4 id=3D"org26d8296">32 bits compiler support</h4>
</div>

<div id=3D"outline-container-orgb0328cd" class=3D"outline-4">
<h4 id=3D"orgb0328cd">Semver-style version matching support</h4>
<div class=3D"outline-text-4" id=3D"text-orgb0328cd">
<p>
With the naughty exception of <code>4.02.2</code> , point releases are mean=
t to be strictly compatible, so once OCaml dev team
release a new point release, upgrading should be a no-brainer. With that in=
 mind, it's obviously not smart to rewrite
every workflow every time a new point release is released, so you can now s=
pecify versions in the style like
<code>4.12.x</code>.
</p>
</div>
</div>

<div id=3D"outline-container-orgb998877" class=3D"outline-4">
<h4 id=3D"orgb998877">Reliable cache feature</h4>
<div class=3D"outline-text-4" id=3D"text-orgb998877">
<p>
The action supports not only the compiler cache, but also the <a href=3D"ht=
tps://github.com/ocaml/dune/blob/2.8.5/doc/caching.rst">dune
cache</a>. However, note that it is not available on the macOS
runners until opam 2.0.9 is released. The dune cache is actually quite powe=
rful for large projects, if you're
interested in it, check out the comparison section of
<a href=3D"https://github.com/ocaml/setup-ocaml/pull/66">ocaml/setup-ocaml#=
66</a>. The reliable cache feature uses the
<a href=3D"https://github.com/actions/toolkit/tree/main/packages/cache">@ac=
tions/cache</a> package internally, and I worked with
the GitHub team to make it fast enough for setup-ocaml to be up to 4x faste=
r. For the Ubuntu runners, you can set up
your environment with cache in about 30~40 seconds at the fastest.
</p>
</div>
</div>

<div id=3D"outline-container-orgb2e9961" class=3D"outline-4">
<h4 id=3D"orgb2e9961">Automatic pinning and depext handling of local packag=
es</h4>
<div class=3D"outline-text-4" id=3D"text-orgb2e9961">
<p>
For example, if you have a very large number of local packages, like the <a=
 href=3D"https://github.com/mirage/irmin">Irmin</a>
project, it can be quite a pain for a human to have to write a script to pi=
n them all in your workflow. The action
pins and depext the local packages if they exist in the repository by defau=
lt. You can also use the glob pattern to
select which local packages to handle, as described
<a href=3D"https://github.com/ocaml/setup-ocaml/blob/master/examples.md#usi=
ng-glob-patterns-to-filter-local-packages">here</a>.
</p>

<p>
<a href=3D"https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-alpha">=
https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-alpha</a>
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">FrontC 4.1.0 (Vingt ans apr=C3=A8s)</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-frontc-4-1-0-vingt-ans-=
apres/7906/1">https://discuss.ocaml.org/t/ann-frontc-4-1-0-vingt-ans-apres/=
7906/1</a>
</p>
</div>

<div id=3D"outline-container-org5663c1b" class=3D"outline-3">
<h3 id=3D"org5663c1b">Ivan Gotovchits announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5663c1b">
<p>
More than twenty years after its original release <a href=3D"https://github=
.com/BinaryAnalysisPlatform/FrontC">FrontC</a> is still alive and getting n=
ew updates. Mostly it
started with my frustration with its Makefiles that ended up in switching t=
o menhir and dune and adding cram tests
that finally enabled us to safely touch the grammar definitions and introdu=
ce a few c99 &#x2026; c11 language features as
well as more GNU extensions. Our end goal is to get a robust and easy-to-us=
e C parser that is capable of taking a C
program on a modern Linux distribution and get it parsed into a C abstract =
tree. It is not that trivial as it may
sound as modern C library headers (especially GNU libc) use non-standard or=
 standard but very modern C features, and
most of the OCaml parsers that I have seen are still unable to parse them, =
including parsers from FramaC, C11parser,
and even compcert parser (mostly they do not handle complex floating-point =
types and various extension types and some
GCC attributes).
</p>

<p>
Therefore, FrontC is still useful, especially if all that you want is to st=
art doing program analysis with minimal
initial effort, just do (but wait until it is <a href=3D"https://github.com=
/ocaml/opam-repository/pull/18736">merged</a>)
</p>

<pre class=3D"example" id=3D"org620cf32">
opam install FrontC
</pre>

<p>
and start hacking!
</p>

<p>
With that said, FrontC is mostly maintained at leisure time by volunteers, =
so the pull requests are very welcome.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org5fac4e9" class=3D"outline-2">
<h2 id=3D"org5fac4e9">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org5fac4e9">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname" id=3D"org952e506">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
