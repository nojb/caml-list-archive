Return-Path: <eposse@cs.mcgill.ca>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id ED292BB81
	for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2004 17:32:51 +0100 (CET)
Received: from mail.cs.mcgill.ca (mail.CS.McGill.CA [132.206.51.234])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id iANGWp9S006774
	for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2004 17:32:51 +0100
Received: from mail.cs.mcgill.ca (localhost [127.0.0.1])
	by mail.cs.mcgill.ca (Postfix) with SMTP
	id AAC802F94B; Tue, 23 Nov 2004 11:32:50 -0500 (EST)
Received: from 67.68.219.234
        (SquirrelMail authenticated user eposse)
        by mail.cs.mcgill.ca with HTTP;
        Tue, 23 Nov 2004 11:32:50 -0500 (EST)
Message-ID: <1602.67.68.219.234.1101227570.squirrel@mail.cs.mcgill.ca>
In-Reply-To: <d849ad2a04112214185342ca2e@mail.gmail.com>
References: <33462.132.206.3.150.1101158431.squirrel@mail.cs.mcgill.ca> 
     <d849ad2a04112214185342ca2e@mail.gmail.com>
Date: Tue, 23 Nov 2004 11:32:50 -0500 (EST)
Subject: Re: [Caml-list] Threads library
From: "Ernesto Posse" <eposse@cs.mcgill.ca>
To: "John Prevost" <j.prevost@gmail.com>
Cc: caml-list@yquem.inria.fr
Reply-To: eposse@cs.mcgill.ca
User-Agent: SquirrelMail/1.4.0
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
X-Priority: 3
Importance: Normal
X-Miltered: at concorde with ID 41A36633.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 threads:01 rec:01 threads:01 spawned:01 wrote:01 usr:01 lib:01 ocaml:01 toplevel:01 ocaml:01 threading:01 toplevel:01 mli:01 lib:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 


  Thanks John. It worked.

  I do have another question, and it is about the behaviour of Thread.join.

  I have the following definitions:

open Thread;;

let rec f = function 0 -> () | n -> print_int n; f(n-1);;

let pp (x, y) = (create f x, create f y);;

let ppp = create pp;;

let jpp x y = join(ppp (x,y));

  I would expect that invoking

jpp 8 9;;

  would force the prompt to appear after all threads from ppp(x,y) have
ended, but this doesn't appear to be the case. If I understand
correctly, the join affects only the thread created by ppp, but not
those spawned from it. Is there a simple way to join the rest of the
threads created?



> On Mon, 22 Nov 2004 16:20:31 -0500 (EST), Ernesto Posse
> <eposse@cs.mcgill.ca> wrote:
>>   Hi. I have a problem with the threads library. Basically I am unable
>> to
>> access the library.
>>
>>   The libraries are installed in the default location
>> (/usr/local/lib/ocaml) (I installed version 3.08.1, on linux
>> 2.6.4-54.5-smp on i686, running SuSE)
>   {...}
>
> There are two things that will help you here.  The first is that you
> want to run your toplevel like this:
>
> ocaml -I +threads
>
> in order to make sure that the threading libraries (and more
> importantly, the thread interfaces!) are on the ocaml include path.
> This is *the* most important point, since when you try to refer to the
> Threads module, the toplevel is going to look in its path to find the
> .mli files, regardless of what has been linked in.
>
> The second thing is that the order in which you #load is relevant.  If you
> do:
>
> #load "threads.cma";;
> #load "unix.cma";;
>
> threads isn't actually loaded--it failed to load.  I suspect you
> figured that part out, however.
>
> So, if you just do the -I +threads and then #load "threads.cma"
> instead of #load ".../lib/ocaml/threads.cma", you'll succeed for the
> normal toplevel.  And with the custom toplevel, you'll still need to
> include -I +threads.  You can also use:
>
> #directory "+threads";;
>
> to add to the include path of a running ocaml process.
>
> And as a final note, if you have installed findlib, you can either
> make a toplevel with topfind compiled in, or:
>
> #use "topfind";;
>
> in order to get the findlib toplevel extensions.  This will let you do:
>
> #thread;;
>
> to enable threading.  (It adds +threads to the include path, then
> loads unix and threads.)
>
> Hope this helps!
>
> John.
>
>


-- 
Ernesto Posse
Modelling, Simulation and Design Lab - School of Computer Science
McGill University - Montreal, Quebec, Canada
url: http://moncs.cs.mcgill.ca/people/eposse


