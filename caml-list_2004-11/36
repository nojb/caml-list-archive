Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 7B61FBC28
	for <caml-list@yquem.inria.fr>; Fri,  5 Nov 2004 15:25:33 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id iA5EPX7S004702
	for <caml-list@yquem.inria.fr>; Fri, 5 Nov 2004 15:25:33 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA31786 for <caml-list@pauillac.inria.fr>; Fri, 5 Nov 2004 15:25:32 +0100 (MET)
Received: from stag.seas.upenn.edu (stag.seas.upenn.edu [158.130.70.79])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iA5EPVUg010906
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@inria.fr>; Fri, 5 Nov 2004 15:25:32 +0100
Received: from [158.130.38.71] (dhcp38-062.SEAS.UPENN.EDU [158.130.38.71])
	(authenticated bits=0)
	by stag.seas.upenn.edu (8.12.10/8.12.10) with ESMTP id iA5EPUWw018513
	(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NOT)
	for <caml-list@inria.fr>; Fri, 5 Nov 2004 09:25:30 -0500
Message-ID: <418B8D56.5010109@seas.upenn.edu>
Date: Fri, 05 Nov 2004 09:25:26 -0500
From: Aaron Bohannon <bohannon@seas.upenn.edu>
User-Agent: Mozilla Thunderbird 0.7.1 (X11/20040626)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: native code and ZINC machine
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 418B8D5D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 418B8D5B.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; upenn:01 compiler:01 implements:01 bytecode:01 model:01 runtime:01 overlooking:01 pointers:01 native:02 native:02 dependent:02 impractical:03 perhaps:03 weak:04 somewhat:05 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

I was quite surprised, recently, when I found out that the native code 
compiler implements left-to-right evaulation, as opposed to the 
right-to-left evaulation of the bytecode.  [NB: My question is not about 
trying to write code that is dependent on the order of arguments.]

You see, I am quite familiar with the ZINC machine and the benefits of 
its design, and I thought that the design could be adapted in some way 
or another to the native code setting.  I am interested in finding out 
what factors prevented this, or what made the ZINC machine execution 
model impractical in the native runtime.  My knowledge of systems is 
perhaps somewhat weak, so maybe I am overlooking some obvious point.

I have googled for papers and discussions, and poked around the obvious 
websites looking for answers, but I must have missed something.  Any 
pointers in the right direction would be appreciated.

Aaron Bohannon

