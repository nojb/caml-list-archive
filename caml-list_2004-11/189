Return-Path: <j.prevost@gmail.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id CEEFABB81
	for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2004 21:10:08 +0100 (CET)
Received: from wproxy.gmail.com (wproxy.gmail.com [64.233.184.206])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iANKA8ua015982
	for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2004 21:10:08 +0100
Received: by wproxy.gmail.com with SMTP id 36so957160wra
        for <caml-list@yquem.inria.fr>; Tue, 23 Nov 2004 12:10:07 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:references;
        b=uuvRsCAoTajXdNfOxYjNq+KbcfQLnUYwM9pz4Orw33OCCtJbM+PF++tjdc6ntNQk3acWZceaCupRDqXWrHpmeg/roMUIQjLBXzbQgIq0zL/vwzjeb7onIPtcq+FM5aRWRoYaLDpIM9xWk3PsOpFi/8m+6VoJX0h46CruOegiIBA=
Received: by 10.54.27.75 with SMTP id a75mr21932wra;
        Tue, 23 Nov 2004 12:08:24 -0800 (PST)
Received: by 10.54.27.33 with HTTP; Tue, 23 Nov 2004 12:08:23 -0800 (PST)
Message-ID: <d849ad2a041123120861a285b4@mail.gmail.com>
Date: Tue, 23 Nov 2004 15:08:23 -0500
From: John Prevost <j.prevost@gmail.com>
Reply-To: John Prevost <j.prevost@gmail.com>
To: eposse@cs.mcgill.ca
Subject: Re: [Caml-list] Threads library
Cc: caml-list@yquem.inria.fr
In-Reply-To: <1602.67.68.219.234.1101227570.squirrel@mail.cs.mcgill.ca>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
References: <33462.132.206.3.150.1101158431.squirrel@mail.cs.mcgill.ca>
	 <d849ad2a04112214185342ca2e@mail.gmail.com>
	 <1602.67.68.219.234.1101227570.squirrel@mail.cs.mcgill.ca>
X-Miltered: at nez-perce with ID 41A39920.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; prevost:01 prevost:01 caml-list:01 threads:01 wrote:01 spawned:01 threads:01 waits:01 waits:01 iter:01 iter:01 extensible:01 extensible:01 thread:02 thread:02 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_BY_IP autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

On Tue, 23 Nov 2004 11:32:50 -0500 (EST), Ernesto Posse
<eposse@cs.mcgill.ca> wrote:
> If I understand
> correctly, the join affects only the thread created by ppp, but not
> those spawned from it. Is there a simple way to join the rest of the
> threads created?

The behavior of Thread.join is specifically to wait for that specific
thread to finish running.  Since your thread ppp simply creates two
other threads and then stops, joining with it waits until those two
threads have been created.  If you want to wait for all of the created
threads to complete, you'll need to do one of a handful of things:

1) The easiest solution is to have your function pp wait until all of
the threads it creates are complete before it exits.  For example:

let pp (x, y) =
  let a = create f x in
  let b = create f y in
  begin
    join a;
    join b
  end

This isn't very extensible, but it's simple, and it works.  The main
lack of flexibility is that the function pp always waits for its
threads to complete, and sometimes you might just want to wait for all
of its subthreads to be created instead.

2) Another solution, which is mostly the same, is to have pp return
the threads it created, and let ppp decide what to do with them.  It's
probably better to change pp to return a list so that this is
extensible to more than two threads:

let pp (x, y) = [create f x; create f y]

let ppp (x, y) =
  create (fun () ->
    let subthreads = pp (x, y) in
    List.iter join subthreads)

This has the advantage that the calling function (ppp) gets to decide
whether to join with the subthreads or with the thread that creates
the subthreads.  It's still on the messy side--particularly because
everybody needs to know what threads go together.

3) You can create a pretty simple module that provides a way to group
threads together, by using the above List.iter technique.  This would
be more complicated, because a general solution needs to deal with
synchronization if multiple threads are creating threads in the
threadgroup, etc.  (I'm actually somewhat surprised that there's not
such a module already in the standard library.)  This would have the
advantage that everything could work the same way, and you can always
choose whether to join to an individual thread or to an entire
threadgroup.  I could whip something like this up later today,
although my first implementation was *too* naive, so I'm not including
it here.  :)

John.

