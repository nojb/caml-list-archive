Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 48AAFBC28
	for <caml-list@yquem.inria.fr>; Sun, 21 Nov 2004 19:31:45 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iALIViJr022517
	for <caml-list@yquem.inria.fr>; Sun, 21 Nov 2004 19:31:45 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA08159 for <caml-list@pauillac.inria.fr>; Sun, 21 Nov 2004 19:31:44 +0100 (MET)
Received: from smtp.unc.edu (listserv0.isis.unc.edu [152.2.0.38])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id iALIVgaK022504
	(version=TLSv1/SSLv3 cipher=IDEA-CBC-SHA bits=128 verify=FAIL)
	for <caml-list@inria.fr>; Sun, 21 Nov 2004 19:31:44 +0100
Received: from [192.168.0.118] (adsl-068-209-207-132.sip.rdu.bellsouth.net [68.209.207.132])
	(authenticated bits=0)
	by smtp.unc.edu (8.12.9/8.12.9) with ESMTP id iALIUr2D009239
	for <caml-list@inria.fr>; Sun, 21 Nov 2004 13:31:20 -0500 (EST)
Mime-Version: 1.0 (Apple Message framework v619)
In-Reply-To: <200411212142.29950.jmg@gaillourdet.net>
References: <E1CSE4C-00045B-00@mta1.cl.cam.ac.uk> <Pine.LNX.4.61.0411202210230.1123@home.oyster.ru> <20041121155909.GA18549@annexia.org> <200411212142.29950.jmg@gaillourdet.net>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <929F9986-3BEB-11D9-A20F-000A95CDFBE4@cs.unc.edu>
Content-Transfer-Encoding: 7bit
From: Ritesh Kumar <ritesh@cs.unc.edu>
Subject: Re: [Caml-list] Native executable symtable
Date: Sun, 21 Nov 2004 13:31:34 -0500
To: caml-list@inria.fr
X-Mailer: Apple Mail (2.619)
X-Miltered: at nez-perce with ID 41A0DF10.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 41A0DF0E.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; kumar:01 caml-list:01 symtable:01 wrote:01 dynlink:01 bytecode:01 ocaml:01 ocaml:01 recompiled:01 compiler:01 runtime:01 byte:01 runtimes:01 bytecoded:01 bytecode:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 



On Nov 21, 2004, at 3:42 PM, Jean-Marie Gaillourdet wrote:

> Hi,
>
> Am Sonntag, 21. November 2004 16:59 schrieb Richard Jones:
>> It'd be very useful for mod_caml - mod_caml uses Dynlink to load the
>> "scripts" and handlers, and hence is limited to bytecode.  Native code
>> dynamic linking would come in useful.  I'd rather it was part of core
>> OCaml, or available as a separate library which didn't require OCaml
>> itself to be recompiled.
>
> Actually, my impression of the ocaml development is, ocaml is going 
> into the
> same direction as e.g. Java. They are developing a jit compiler to 
> improve
> the performance of the interpreted environment. This is the direction 
> of the
> future as it allows to adapt the native code at runtime, based upon 
> live
> profiling results. We aren't there yet, but this is the direction 
> industry
> and academic world are heading for. Just look at Microsoft's .NET and 
> Sun's
> Java environemt and the huge number of academic papers talking about
> interesting issues with those environemnts. Therefore it might be the 
> right
> time to stop about whining and lamenting the missing native ocaml 
> shared
> library support and to start accepting byte code runtimes as 
> appropriate even
> for performace critical applications.
>
> Regards,
>   Jean-Marie Gaillourdet
>


Well, I just know that currently no bytecoded language (Java/.NET/OcaML 
bytecode)  could give me the 7 to 8 times performance boost in run time 
taken by some of the network topology analysis tools I made for my 
research work. Java was especially bad at those algorithms (may be 
because of its huge memory consumption). There has to be a reason why 
C/native OcaML still take all the performance jewels. You are right 
about the fact that dynamic run-time optimizations might be interesting 
from a performance perspective esp. looking at a functional value 
oriented language like ML. However, it is still a "research" problem 
and has research interest. Native shared libraries has importance in 
making OcaML an otherwise important tool for general day to day 
development. Something like C/C++/Java/.NET. This if you see carefully 
is not a "research" problem.


> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs


--
The human being is a bag of chemicals... nothing else.

