Return-Path: <thelema314@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 96368BC57
	for <caml-list@yquem.inria.fr>; Wed,  3 Mar 2010 02:58:34 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiUCAPdQjUvRVdO4kWdsb2JhbACRH4llCBUBAQEBCQsKBxMDH651gV6FGS2ISgEBAwWCP4I3BIMX
X-IronPort-AV: E=Sophos;i="4.49,570,1262559600"; 
   d="scan'208,217";a="58106162"
Received: from mail-yw0-f184.google.com ([209.85.211.184])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 03 Mar 2010 02:58:34 +0100
Received: by ywh14 with SMTP id 14so222883ywh.15
        for <caml-list@yquem.inria.fr>; Tue, 02 Mar 2010 17:58:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from
         :user-agent:mime-version:to:subject:references:in-reply-to
         :content-type;
        bh=4IUEC+Yc2Nej9SyoYOReo8WRT9r0odkasz3BVvRmjjg=;
        b=xokvh36tknt+cN8Sqy5bPnTUzqmZm+maTk+DRoQbWY89yL2z3oGf+I1n0qT/26wQdC
         HstQqKlE3bJlWQ5S3pJP38kQApfvIagTkTtUb6scdkUUJyDvCsax3MjuJW2UFpL1WEBu
         1LkRtqWS1dXqs0jUp6NkMqslZSSFUDpxZWmkw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:user-agent:mime-version:to:subject:references
         :in-reply-to:content-type;
        b=ay4/v8iDbWcUZlXBooTfW2PiCiQMAljP0JO/Lm+c+Avny2B31pe62m5Uhdfpjpuj52
         JnmihOO8Avwn692b4JaxNErrFfDTnkd1HXopkxLz2vmnf0keE1NcqVrTZ5sGlfgNd8f7
         9oEG/nSKZhOTHecZcYcrXINuHv0v/3aanLoM8=
Received: by 10.150.233.33 with SMTP id f33mr65592ybh.31.1267581512902;
        Tue, 02 Mar 2010 17:58:32 -0800 (PST)
Received: from ?192.168.1.98? ([72.44.99.175])
        by mx.google.com with ESMTPS id 20sm4709069iwn.13.2010.03.02.17.58.30
        (version=SSLv3 cipher=RC4-MD5);
        Tue, 02 Mar 2010 17:58:31 -0800 (PST)
Message-ID: <4B8DC246.2080507@gmail.com>
Date: Tue, 02 Mar 2010 20:58:30 -0500
From: Edgar Friendly <thelema314@gmail.com>
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.9pre) Gecko/20100217 Shredder/3.0.3pre
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: gc overhead
References: <37150F07-8902-464A-9A0E-44A0C424C87B@gmail.com>	<slrnhor2ok.ckm.sylvain@gallu.homelinux.org> <64042246-59C5-4B75-B5A9-6FDF7A2814AE@gmail.com>
In-Reply-To: <64042246-59C5-4B75-B5A9-6FDF7A2814AE@gmail.com>
Content-Type: multipart/alternative;
 boundary="------------080809040100060903030804"
X-Spam: no; 0.00; eprintf:01 hashtbl:01 hashtbl:01 hash:01 hash:01 eprintf:01 edgar:98 warren:98 instrument:98 warren:98 instrument:98 wrote:01 wrote:01 graph:01 graph:01 

This is a multi-part message in MIME format.
--------------080809040100060903030804
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

On 03/02/2010 06:09 PM, Warren Harris wrote:
>
> On Mar 2, 2010, at 2:03 PM, Sylvain Le Gall wrote:
>>
>> You can have a look at:
>> http://ocamlviz.forge.ocamlcore.org
>>
>> This allow to instrument your code and watch GC activity. I think that
>> with a little a little help on program side, you can be quite precise
>> about GC without using gprof at all. This should also be more
>> lightweight than gprof.
>
> Sylvain,
>
> Thanks! This looks very promising. I'll give it a try.
>
> Warren
>
I'd like to add my personal experience with ocamlviz - it's a great 
program, and has helped me a ton find unexpected performance.  It has 
very good functions for starting and stopping timers that the gui can 
monitor in realtime, and associating these with counts of how many times 
your program reached a certain point can give good understanding of 
function call cost.  It's memory profiler makes a very pretty graph of 
how much memory is in use by your program.  I've also gotten started 
using its ability to watch the live value of ref values to monitor the 
state of the program easier than [eprintf]s, especially monitoring the 
state of many variables at once.  It's very fast and the ability to 
debug over the network has come in handy more than once.

This said, I've wanted to measure GC overhead with it, and found it 
lacking in that regard.  If anyone finds a way to do this, I'm interested.

I've not done much with its tree viewer, and the hashtbl monitor only 
indicated that the Hashtbl.t I was using had an amazingly horrible hash, 
and was filling only 3% of its buckets, and had thousands of entries in 
a few buckets.  I tried to fix the hash, but ended up switching to a Map.

Lastly, the ability to mark in memory certain values and have it count 
the total usage and/or count of those values seems interesting, but gets 
quite slow.  I've not had much luck with it.

Overall, good job.  But is it going to die or stay maintained?
E

--------------080809040100060903030804
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
On 03/02/2010 06:09 PM, Warren Harris wrote:
<blockquote cite="mid:64042246-59C5-4B75-B5A9-6FDF7A2814AE@gmail.com"
 type="cite"><br>
  <div>
  <div>On Mar 2, 2010, at 2:03 PM, Sylvain Le Gall wrote:</div>
  <blockquote type="cite">
    <div><font class="Apple-style-span" color="#000000"><br>
    </font>You can have a look at:<br>
    <a moz-do-not-send="true" href="http://ocamlviz.forge.ocamlcore.org">http://ocamlviz.forge.ocamlcore.org</a><br>
    <br>
This allow to instrument your code and watch GC activity. I think that<br>
with a little a little help on program side, you can be quite precise<br>
about GC without using gprof at all. This should also be more<br>
lightweight than gprof.</div>
  </blockquote>
  <br>
  </div>
  <div>Sylvain,</div>
  <div><br>
  </div>
  <div>Thanks! This looks very promising. I'll give it a try.</div>
  <div><br>
  </div>
  <div>Warren</div>
  <br>
</blockquote>
I'd like to add my personal experience with ocamlviz - it's a great
program, and has helped me a ton find unexpected performance.&nbsp; It has
very good functions for starting and stopping timers that the gui can
monitor in realtime, and associating these with counts of how many
times your program reached a certain point can give good understanding
of function call cost.&nbsp; It's memory profiler makes a very pretty graph
of how much memory is in use by your program.&nbsp; I've also gotten started
using its ability to watch the live value of ref values to monitor the
state of the program easier than [eprintf]s, especially monitoring the
state of many variables at once.&nbsp; It's very fast and the ability to
debug over the network has come in handy more than once.&nbsp; <br>
<br>
This said, I've wanted to measure GC overhead with it, and found it
lacking in that regard.&nbsp; If anyone finds a way to do this, I'm
interested.&nbsp; <br>
<br>
I've not done much with its tree viewer, and the hashtbl monitor only
indicated that the Hashtbl.t I was using had an amazingly horrible
hash, and was filling only 3% of its buckets, and had thousands of
entries in a few buckets.&nbsp; I tried to fix the hash, but ended up
switching to a Map.&nbsp; <br>
<br>
Lastly, the ability to mark in memory certain values and have it count
the total usage and/or count of those values seems interesting, but
gets quite slow.&nbsp; I've not had much luck with it.<br>
<br>
Overall, good job.&nbsp; But is it going to die or stay maintained?<br>
E<br>
</body>
</html>

--------------080809040100060903030804--

