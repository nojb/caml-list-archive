Return-Path: <gclci-caml-list@m.gmane.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 6663DBC57
	for <caml-list@yquem.inria.fr>; Tue,  2 Mar 2010 23:03:28 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Apo6AB4ajUtQW+UMgWdsb2JhbACRJIllFQEBFiQivzmCRII3BIVk
X-IronPort-AV: E=Sophos;i="4.49,569,1262559600"; 
   d="scan'208";a="45881313"
Received: from lo.gmane.org ([80.91.229.12])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 02 Mar 2010 23:03:21 +0100
Received: from list by lo.gmane.org with local (Exim 4.69)
	(envelope-from <gclci-caml-list@m.gmane.org>)
	id 1NmaBO-0007Ej-Te
	for caml-list@inria.fr; Tue, 02 Mar 2010 23:03:14 +0100
Received: from ks300734.kimsufi.com ([91.121.65.225])
        by main.gmane.org with esmtp (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Tue, 02 Mar 2010 23:03:14 +0100
Received: from sylvain by ks300734.kimsufi.com with local (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Tue, 02 Mar 2010 23:03:14 +0100
X-Injected-Via-Gmane: http://gmane.org/
To: caml-list@inria.fr
From: Sylvain Le Gall <sylvain@le-gall.net>
Subject: Re: gc overhead
Date: Tue, 2 Mar 2010 22:03:00 +0000 (UTC)
Lines: 19
Message-ID: <slrnhor2ok.ckm.sylvain@gallu.homelinux.org>
References: <37150F07-8902-464A-9A0E-44A0C424C87B@gmail.com>
X-Complaints-To: usenet@dough.gmane.org
X-Gmane-NNTP-Posting-Host: ks300734.kimsufi.com
User-Agent: slrn/pre1.0.0-11 (Linux)
X-Spam: no; 0.00; le-gall:01 warren:98 instrument:98 garbage:01 wrote:01 short:01 gprof:03 gprof:03 overhead:04 overhead:04 perhaps:05 stat:07 quite:08 seem:08 collector:12 

On 01-03-2010, Warren Harris <warrensomebody@gmail.com> wrote:
> I would like to determine what percentage of my application's cpu time  
> is spent in the garbage collector (for tuning purposes, but also just  
> to monitor the overhead). Is there any way to obtain this information  
> short of using gprof? Additional information provided by Gc.stat would  
> be ideal, or perhaps a Gc.alarm that was called at the beginning of  
> the gc cycle, but neither of these seem to exist.
>

You can have a look at:
http://ocamlviz.forge.ocamlcore.org

This allow to instrument your code and watch GC activity. I think that
with a little a little help on program side, you can be quite precise
about GC without using gprof at all. This should also be more
lightweight than gprof.

Regards,
Sylvain Le Gall

