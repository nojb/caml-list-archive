Return-Path: <eliot@colba.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id C1EAEBBAF
	for <caml-list@yquem.inria.fr>; Sat, 13 Mar 2010 16:38:24 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am0BACdAm0vY/EBGkWdsb2JhbACachUBAQEBCQsKBxMEHrhWhHsEgxg
X-IronPort-AV: E=Sophos;i="4.49,632,1262559600"; 
   d="scan'208";a="54772565"
Received: from mailhost1.enter-net.com ([216.252.64.70])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 13 Mar 2010 16:38:24 +0100
Received: (qmail-ldap/ctrl 1738 invoked from network); 13 Mar 2010 15:39:02 -0000
Received: from 244.67.252.216.dsl.colba.net (HELO [192.168.0.100]) (eliot@[216.252.67.244])
          (envelope-sender <eliot@colba.net>)
          by mailhost1.enter-net.com (qmail-ldap-1.03) with SMTP
          for <bluestorm.dylc@gmail.com>; 13 Mar 2010 15:39:02 -0000
Message-ID: <4B9BB16B.4010806@colba.net>
Date: Sat, 13 Mar 2010 10:38:19 -0500
From: Eliot Handelman <eliot@colba.net>
Reply-To: eliot@colba.net
User-Agent: Thunderbird 2.0.0.23 (Windows/20090812)
MIME-Version: 1.0
To: blue storm <bluestorm.dylc@gmail.com>
Cc: Eray Ozkural <examachine@gmail.com>,
	caml-list <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] AGI research using ocaml
References: <320e992a1003130229v1f39f6aek752c32a677c3ac87@mail.gmail.com> <527cf6bc1003130521p203013bbo1c62ff66479cff6a@mail.gmail.com>
In-Reply-To: <527cf6bc1003130521p203013bbo1c62ff66479cff6a@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocaml:01 ocaml:01 subset:01 storm:98 sml:01 wrote:01 caml-list:01 functions:01 probability:01 fragments:01 fragments:01 reuse:01 algorithm:01 constraints:03 blue:96 

blue storm wrote:
>
>
> 1) your field of research is "automatic program generation to solve a 
> set of given tasks" : you generate random programs in a given 
> language, with a mathematic theory giving you probability distribution 
> for various syntaxic elements, until you find one that achieve your 
> goal. You have a "learning mechanism" that can reuse previous solution 
> (such as declared functions) for helping further tasks
>
> 2) You generate Scheme program fragments
>
> 3) Your algorithm/generator is written in OCaml, using the ocs Ocaml 
> Scheme interpreter to test your generated programs
>
> 4) You would like to generate OCaml program fragments instead of 
> Scheme. Your idea is that the type system, imposing more constraints 
> on the legal program, will reduce the search space and accelerate your 
> generator.

If this description is correct (I haven't followed the whole discussion) 
then check out the adate system, which generates programs
in a subset of SML:

http://www-ia.hiof.no/~rolando/

-- eliot

