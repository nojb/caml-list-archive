Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA28071 for caml-red; Tue, 6 Jun 2000 17:37:08 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA06400 for <caml-list@pauillac.inria.fr>; Tue, 6 Jun 2000 10:56:15 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e568uDH18812
	for <caml-list@inria.fr>; Tue, 6 Jun 2000 10:56:14 +0200 (MET DST)
Received: from localhost (sansho.kurims.kyoto-u.ac.jp [130.54.16.90])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id RAA22471;
	Tue, 6 Jun 2000 17:55:54 +0900 (JST)
To: patrick@watson.org
Cc: caml-list@inria.fr
Subject: Re: Typing of patterns
In-Reply-To: Your message of "Mon, 5 Jun 2000 21:10:45 -0400 (EDT)"
	<Pine.BSF.3.96.1000605204225.15847A-100000@fledge.watson.org>
References: <Pine.BSF.3.96.1000605204225.15847A-100000@fledge.watson.org>
X-Mailer: Mew version 1.93 on Emacs 20.5 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20000606175546M.garrigue@kurims.kyoto-u.ac.jp>
Date: Tue, 06 Jun 2000 17:55:46 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 45
Sender: weis

From: Patrick M Doane <patrick@watson.org>

> I want to change the data associated to a particular constructor of a
> variant and leave the others unmodified:
> 
>      # let f = function `A -> `A () | _ as t -> t;;
>      Characters 41-42:
>      This expression has type [< `A | ..] but is here used with type
>        [> `A of unit]
> 
> Notice that the type for '_' includes `A when it obviously cannot. One
> could include every possible expected type in place of '_' but that
> removes one of the advantages of polymorphic variants: that the type can 
> be refined and extended easily.

However, this is what you will have to do :-)
I know that it is theoretically possible to build a type system
where t is given a type excluding `A, but this would require exposing
the row variable, which we have been carefully avoiding until now.

As for the ease of definition, you can use type-patterns:

type others = [ you other cases ]
let f = function `A -> `A () | #others as t -> t

I believe this should be enough in general.

> While further exploring this issue I managed to get an uncaught exception
> from the type checker:
> 
>      # let f = function `A true -> () | `A 5 -> ();; 
>      Uncaught exception: File "typing/parmmatch.ml", ...

This is a known bug, the current version of the typechecker finds an
error here,

> Taking the conjuction of 'unit' and 'int' does seem to work however,
> 
>      # let f = function `A -> () | `A 5 -> ();;
>      val f : [< `A of & int] -> unit = <fun>

and also here (basically conflicting types are not allowed in the same
pattern-matching).

        Jacques



