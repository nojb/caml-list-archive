Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA13093 for caml-red; Wed, 21 Jun 2000 15:35:13 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA24239 for <caml-list@pauillac.inria.fr>; Tue, 20 Jun 2000 17:59:36 +0200 (MET DST)
Received: from air.irisa.fr (air.irisa.fr [131.254.60.130])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e5KFxaH09500
	for <caml-list@inria.fr>; Tue, 20 Jun 2000 17:59:36 +0200 (MET DST)
Received: from parate.irisa.fr (parate.irisa.fr [131.254.12.25])
	by air.irisa.fr (8.9.3/8.9.3) with ESMTP id RAA21004
	for <caml-list@inria.fr>; Tue, 20 Jun 2000 17:59:35 +0200 (MET DST)
To: caml-list@inria.fr
Subject: How to cleanly encode "quasi-constants"?
From: David.Mentre@irisa.fr (David=?iso-8859-1?q?_Mentr=E9?=)
Date: 20 Jun 2000 17:59:35 +0200
Message-ID: <wd8g0q8xs0o.fsf@parate.irisa.fr>
Lines: 54
User-Agent: Gnus/5.0805 (Gnus v5.8.5) Emacs/20.6
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: weis@pauillac.inria.fr

Hello dear camlists,

I'm still learning caml and functionnal programming, so this is maybe a
newbie question. Please don't be too rude.

In my program, I have variables that can only be modified once
(potentially at initialization time after parsing command line and done
some computation) and then are never modified for a very long time (rest
of program execution). I call them "quasi-constants", they have a
write-once semantic. They are used throught the program so it is very
painfull to propagate them along function calls (i.e. these variables
need a global scope, at least from a programmer point of view).

Right now, I'm using constants (let var = ...) or mutable references
(let var := ...) to encode such things.

However I'm not satisfied. With constants, I obviously can only modify
them at compile time. With mutables, I can modify them but potentially
at any time, meaning potential bugs. So my question is: 

 What is the Right Way(tm) to encode such a thing in an ML like
 language and more specifically in OCaml?

I was thinking of using a functor (return a module with functions
referencing these quasi-constants and quasi-constants values given at
module creation). Is it right? It is also possible to use functions,
however is seems impracticable for a real program (this approach creates
a function many pages long):

# let create_manipulator v =
  let f1 () = v 
  and f2 x = v+x in (f1, f2);;
  val create_manipulator : int -> (unit -> int) * (int -> int) = <fun>
# let (g1, g2) = create_manipulator 3;;
val g1 : unit -> int = <fun>
val g2 : int -> int = <fun>
# g1 ();;
- : int = 3


Two side questions:

 - is there such a problem tackled in a big program ? (ocaml compiler?)

 - it seems to me that Arg.Set and Arg.Clear types have this semantic
   (an option is only set at parse time).



Best regards,
david
-- 
 David.Mentre@irisa.fr -- http://www.irisa.fr/prive/dmentre/
 Opinions expressed here are only mine.


