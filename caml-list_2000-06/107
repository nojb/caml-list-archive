Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA16222 for caml-red; Wed, 21 Jun 2000 15:33:20 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA25684 for <caml-list@pauillac.inria.fr>; Tue, 20 Jun 2000 17:21:57 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e5KFLuH08435;
	Tue, 20 Jun 2000 17:21:56 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA20802; Tue, 20 Jun 2000 17:21:56 +0200 (MET DST)
Message-ID: <20000620172156.51286@pauillac.inria.fr>
Date: Tue, 20 Jun 2000 17:21:56 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: David Monniaux <David.Monniaux@ens.fr>, Liste CAML <caml-list@inria.fr>
Subject: Re: Pervasives.compare: slow?
References: <Pine.GSO.4.03.10006191610270.1655-100000@basilic.ens.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <Pine.GSO.4.03.10006191610270.1655-100000@basilic.ens.fr>; from David Monniaux on Mon, Jun 19, 2000 at 04:31:47PM +0200
Sender: weis@pauillac.inria.fr

> I used Pervasives.compare as a comparison function between hash values
> (16-byte strings). Pervasives.compare is a polymorphic hack that works by
> induction on the type information left for the garbage collector; even if
> you specify Pervasives.compare : string -> string -> int, it still invokes
> the polymorphic function.
> 
> There is apparently a 20-25% performance penalty using this form instead
> of a simple comparison procedure for 16-byte strings. I suspect the
> performance hit is even higher for more complex data structures.
> 
> Would it be possible to have ad hoc generated comparison functions? That
> sounds like it needs including polytypic features into the language, which
> is some very big stuff.

Actually, there is some "polytypic" optimisations going on in the
compiler.  For instance, the compiler will replace the generic "="
function by integer equality if both arguments are known to be of type
int.

Such "type-based strength reduction", as I like to call it, is
currently applied to all boolean comparisons (=, <>, <, <=, >, >=) but
not to "compare".  It could be done for "compare" as well; it's just
that no one has yet expressed a strong need for this...

- Xavier Leroy


