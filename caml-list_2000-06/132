Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA11907 for caml-red; Wed, 28 Jun 2000 17:46:04 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA06042 for <caml-list@pauillac.inria.fr>; Wed, 28 Jun 2000 11:45:01 +0200 (MET DST)
Received: from enseeiht.enseeiht.fr (enseeiht.enseeiht.fr [147.127.18.144])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e5S9j0X12493
	for <caml-list@inria.fr>; Wed, 28 Jun 2000 11:45:00 +0200 (MET DST)
Received: from enseeiht.fr by enseeiht.enseeiht.fr; Wed, 28 Jun 2000 11:44:57 +0200 (MET DST)
X-Url: http://www.enseeiht.fr
Message-ID: <3959C916.D1A3BDFD@enseeiht.fr>
Date: Wed, 28 Jun 2000 11:44:54 +0200
From: David Chemouil <David.Chemouil@enseeiht.fr>
Organization: ENSEEIHT - LIMA/IRIT/CNRS
X-Mailer: Mozilla 4.7 [en] (X11; I; SunOS 5.6 sun4u)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: convenient features
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: weis@pauillac.inria.fr


Hi


participating to a former discussion about convenient features which
could be added to the Caml system, I'd like to inform you of a few 
critics, constructive critics of course ;-)

1. One thing that really bothers me is the obligation to put object
files in the good order, when linking them. As it is possible to
generate the dependency graph (ocamldot does it), wouldn't it be
possible for the linker to "flatten" it, in order for it to find alone
the good order? It seems to me that it works in C for example. So, one
would just have to put necessary object files on the command line, in
any order. 'Cause when you have 50 object files, or so, it's really
boring to find dependencies "by hand".

2. The second point is minor: it seems to me you only need to put the
'-thread' option when your program uses the 'threads.cm[x]a' library. So
it must be possible to remove the '-thread' option, and have the
compiler guess that the program is multithreaded when it sees
'threads.cm[x]a' on the command line.

3. The last point seems important to me. When you use bytecode threads,
marshalling with the Marshal module doesn't work well. Isn't it possible
that the compiler automatically replaces it by a working one, like it
does with Pervasives? 


dc

-- 
David Chemouil [mailto:chemouil@enseeiht.fr] [mobile: 06 84 16 26 65]

Laboratoire d'informatique et de mathématiques appliquées (IRIT-INPT)

"Je vous ai fait trop faibles pour sortir du gouffre, parce que 
 je vous ai fait assez forts pour n'y point tomber" -- Rousseau


