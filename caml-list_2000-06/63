Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA18251 for caml-red; Mon, 12 Jun 2000 16:14:11 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA29906 for <caml-list@pauillac.inria.fr>; Mon, 12 Jun 2000 15:36:03 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e5CDa1D25657;
	Mon, 12 Jun 2000 15:36:01 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA05163; Mon, 12 Jun 2000 15:36:00 +0200 (MET DST)
Message-ID: <20000612153600.11189@pauillac.inria.fr>
Date: Mon, 12 Jun 2000 15:36:00 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: Jean-Christophe Filliatre <filliatr@csl.sri.com>, caml-list@inria.fr
Subject: Re: hash and nums
References: <14655.50486.355042.478626@cylinder.csl.sri.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <14655.50486.355042.478626@cylinder.csl.sri.com>; from Jean-Christophe Filliatre on Thu, Jun 08, 2000 at 09:09:26AM -0700
Sender: weis

> It seems that the properties
> 	(eq_num n1 n2)  =>  (hash n1) = (hash n2)
> 	(eq_num n1 n2)  =>  (compare n1 n2) = 0
> are now true in ocaml  3.00

Not quite.  All rationals hash to the same value, and all big integers
to the same value (a different one).  Comparisons still fails on
nums that are not small integers and that are not physically equal:

  # open Num;;
  # compare (num_of_string "1/2") (num_of_string "2/4");;
  Uncaught exception: Failure "equal: abstract value".

The new "custom blocks" in OCaml 3.00 would allow proper comparison and
hashing functions to be defined on the type nat (the lowest-level big
integer type), because this type is directly implemented in C.

However, higher-level numerical types such as big_int, ratio and num
are defined as Caml data structures, and thus we can't associate the
right comparison and hashing functions on them. E.g. for rationals,
the generic equality code would still compare 1/2 and 2/4 by comparing
1 with 2 and 2 with 4, without doing any normalization.

So, we chose not to put comparison and hashing functions on the type
"nat", because this would only lead to misleading results on the other
numerical types.  (However, "nat" can now be serialized and
deserialized, and so are the other bignum types.)

It's only for bignum libraries where all numerical types are defined
in C, such as GMP, that we could attach the right comparison and
hashing operators to bignums.

- Xavier Leroy



