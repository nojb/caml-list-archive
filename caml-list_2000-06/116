Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA18078 for caml-red; Fri, 23 Jun 2000 16:18:54 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA15550 for <caml-list@pauillac.inria.fr>; Fri, 23 Jun 2000 10:10:12 +0200 (MET DST)
Received: from echidna.ota.fr.socgen.com ([194.3.173.12])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e5N8ABX23408
	for <caml-list@inria.fr>; Fri, 23 Jun 2000 10:10:11 +0200 (MET DST)
Received: from erebus.ota.fr.socgen.com by echidna.ota.fr.socgen.com (8.9.1a/8.9.1)
	id KAA12537; Fri, 23 Jun 2000 10:12:03 +0200 (MET DST)
Received: by erebus.ota.fr.socgen.com (8.8.8/8.8.8)
           id KAA00983; Fri, 23 Jun 2000 10:08:45 +0200 (MET DST)
From: emmanuel.engel@ota.fr.socgen.com
Received: from ota.marc.societe-generale.fr 
	by nyx.ota.marc.societe-generale.fr (8.8.8/8.8.8)
	id KAA24934; Fri, 23 Jun 2000 10:04:31 +0200 (MET DST)
Received: from pouilly.ota.marc.societe-generale.fr by ota.marc.societe-generale.fr (8.8.8+Sun/SMI-SVR4)
	id KAA18142; Fri, 23 Jun 2000 10:04:29 +0200 (MET DST)
Received: by pouilly.ota.marc.societe-generale.fr(Lotus SMTP MTA v4.6.6  (890.1 7-16-1999))  id C1256907.002C59EA ; Fri, 23 Jun 2000 10:04:26 +0200
X-Lotus-FromDomain: SOCGEN
To: Don Syme <dsyme@microsoft.com>
cc: "'David.Mentre@irisa.fr'" <David.Mentre@irisa.fr>, caml-list@inria.fr
Message-ID: <C1256907.002C586C.00@pouilly.ota.marc.societe-generale.fr>
Date: Fri, 23 Jun 2000 10:04:14 +0200
Subject: Re[2]: How to cleanly encode "quasi-constants"?
Mime-Version: 1.0
Content-type: text/plain; charset=us-ascii
Content-Disposition: inline
Sender: weis@pauillac.inria.fr



What prevent you from doing arbitrary computations at initialization time ?
These computations can be used to initialize your quasi-constants.

eg :

let s =
  let arg1 = ref false
  in  Arg.parse  [("arg1", Arg.Set arg1)] (fun _ -> ()) "" ;
      if arg1 then "arg1 is set" else "arg1 is not set"


let main () =
   print_string s ;

let _ = main ()


Theses initalizations can be done in different modules. As long as i can
remember the order
of modules on command line at link time is relevent for initialization order.


Emmanuel Engel

______________________________ Reply Separator _________________________________



Don Syme <dsyme@microsoft.com>
06/21/2000 07:59:22 PM GMT



|-----------------------------------------------------------+------------------|
|                                                           |Return Receipt: No|
| To:  "'David.Mentre@irisa.fr'" <David.Mentre@irisa.fr>    |Importance: Normal|
|      caml-list@inria.fr                                   |                  |
| cc:   (bcc: Emmanuel ENGEL/eqty/fr/socgen)                |                  |
|                                                           |                  |
|-----------------------------------------------------------+------------------|




SUBJECT: RE: How to cleanly encode "quasi-constants"?




You have spotted a problem with ML-style type systems - they are not great
at encoding the kind of "phasing" of initialization that you refer to
(neither most are other type systems, though of course one could imagine a
type system that allowed you to express this sort of thing).  However, the
"constants" you refer to can encode quite complex computations (including
allocation of data structures, e.g. let x = [2;3;5]]), which is a big
advantage compared to, say, C, but it does not cover everything.  So in
practice people tend to make do with constant values until the
initialization sequence gets too complicated, then move to references, but
with the knowledge that these references are set once-for-all.  Hiding the
references behind functions is, as you say, often a good idea.

Basically, don't be afraid of using references for this kind of thing - it's
one of the reasons they are in the language.

Cheers,
Don


-----Original Message-----
From: David.Mentre@irisa.fr [mailto:David.Mentre@irisa.fr]
Sent: 20 June 2000 17:00
To: caml-list@inria.fr
Subject: How to cleanly encode "quasi-constants"?


Hello dear camlists,

I'm still learning caml and functionnal programming, so this is maybe a
newbie question. Please don't be too rude.

In my program, I have variables that can only be modified once
(potentially at initialization time after parsing command line and done
some computation) and then are never modified for a very long time (rest
of program execution). I call them "quasi-constants", they have a
write-once semantic. They are used throught the program so it is very
painfull to propagate them along function calls (i.e. these variables
need a global scope, at least from a programmer point of view).

Right now, I'm using constants (let var = ...) or mutable references
(let var := ...) to encode such things.

However I'm not satisfied. With constants, I obviously can only modify
them at compile time. With mutables, I can modify them but potentially
at any time, meaning potential bugs. So my question is:

 What is the Right Way(tm) to encode such a thing in an ML like
 language and more specifically in OCaml?

I was thinking of using a functor (return a module with functions
referencing these quasi-constants and quasi-constants values given at
module creation). Is it right? It is also possible to use functions,
however is seems impracticable for a real program (this approach creates
a function many pages long):

# let create_manipulator v =
  let f1 () = v
  and f2 x = v+x in (f1, f2);;
  val create_manipulator : int -> (unit -> int) * (int -> int) = <fun>
# let (g1, g2) = create_manipulator 3;;
val g1 : unit -> int = <fun>
val g2 : int -> int = <fun>
# g1 ();;
- : int = 3


Two side questions:

 - is there such a problem tackled in a big program ? (ocaml compiler?)

 - it seems to me that Arg.Set and Arg.Clear types have this semantic
   (an option is only set at parse time).



Best regards,
david
--
 David.Mentre@irisa.fr -- http://www.irisa.fr/prive/dmentre/
 Opinions expressed here are only mine.





