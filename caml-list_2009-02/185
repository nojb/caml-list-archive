Return-Path: <westlifezs@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 864AFBBAF
	for <caml-list@yquem.inria.fr>; Sun, 22 Feb 2009 15:50:07 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AowCAPH0oElKfVwZi2dsb2JhbACCQi6KH4cOPwEBAQoLCgcPBbEVgQWNLwEDAQOEDAY
X-IronPort-AV: E=Sophos;i="4.38,250,1233529200"; 
   d="scan'208";a="35575747"
Received: from qw-out-2122.google.com ([74.125.92.25])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 22 Feb 2009 15:50:06 +0100
Received: by qw-out-2122.google.com with SMTP id 3so449845qwe.15
        for <caml-list@yquem.inria.fr>; Sun, 22 Feb 2009 06:50:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=M5cjIZjVYD+LfYcGVoaOCycTDsnex8o1IHYKF/NlHD0=;
        b=t/Q5aT03cDHXzecQS5JdaCJim0IFsYg0rKBN6ZI2USqtFopeoRmxqDfVTW04tflNnn
         eTa3EyjMLT89ztoR79+yuTaQ7rHKG6YpoS+iTvgEtHLyLtas7mExij/hnegNmsBlqAHf
         K4nb7ivP2edFsCoHrVCij3j9aUmvofvlVMf6c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=qd4FCvFjWi3ZeZ5+DWwPuguM/X6+T/c515qXTLPo9MGkiTrzgLpoE9H54Of+u9TpMt
         KjdfqbsZF93HZq2J4xRe1u+1SFtGRo1iPx196ur3mte19KufstHeE74pFPPSGLRj1+1L
         FFsc2pyL7j9mj52e8ERDJcR5vxdpJX+or/8No=
MIME-Version: 1.0
Received: by 10.229.110.14 with SMTP id l14mr1087550qcp.12.1235314205495; Sun, 
	22 Feb 2009 06:50:05 -0800 (PST)
In-Reply-To: <e2842950902220647m655729dew918962deec232c1@mail.gmail.com>
References: <e2842950902212227p467f8df1n14e66a4b50d90580@mail.gmail.com>
	 <a58674cc0902212303w70a8b5eas956ef2a91968fb@mail.gmail.com>
	 <e2842950902220647m655729dew918962deec232c1@mail.gmail.com>
Date: Sun, 22 Feb 2009 08:50:05 -0600
Message-ID: <e2842950902220650j562822fr1d9b2800233ee390@mail.gmail.com>
Subject: Fwd: [Caml-list] a problem about type recongnition
From: Su Zhang <westlifezs@gmail.com>
To: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016363b810667912204638300c4
X-Spam: no; 0.00; ocaml:01 recursive:01 rebuilt:01 rebuilt:01 recursive:01 compiler:01 parens:01 ocaml:01 beginner's:01 compiler:01 parens:01 beginner's:01 2009:98 2009:98 W8:98 

--0016363b810667912204638300c4
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

---------- Forwarded message ----------
From: Su Zhang <westlifezs@gmail.com>
Date: 2009/2/22
Subject: Re: [Caml-list] a problem about type recongnition
To: William Neumann <wneumann@gmail.com>


thank you very much, because my gmail mailbox can not be verified by yahoo
and I use yahoo mailbox to join the group, yet it is still pending, since
it's almost the deadline for me, so would you please take a look at the
following two questions if possible?

1 I would like to use a comparision function to sort my list and provide a
final result, so this is the comparision function I have:
let rec comparision xs ys
      if hd(third(xs))> hd(third(ys))
        then 1
      else if hd(third(xs))= hd(third(ys))
         then 0
      else -1
I want to use this compariasion which means the list of triples should be
sorted based on the first element of the third value in each triple,yet it
seems it has some problems which I really donot understand, it  says the if
has some problems... would you please give me some ideas, and if I can
figure out this problem, can i use the sort function to sort a list and
output an ordered result? like this: ys=let rec sort comparision ys ? and
here ys is a list of triples.
thanks
2009/2/22 William Neumann <wneumann@gmail.com>

 2009/2/22 Su Zhang <westlifezs@gmail.com>
>
>> Hi all,
>>
>> I have a problem while executing ocaml, did you see any problem in my
>> code?
>>
>
> Yes, a few.  See below.
>
>
>> and do I need to give each variable a type before I use it ?
>>
>
> Generally speaking, no.  There are a few cases where it needs to be done,
> or it helps to specify types, but most of the time the types will be
> inferred for you.
>
>
>> my code is in the following, you can take a look at the code and the info
>> of the errors
>>
>>
>> let rec first(x, y, z)=x
>>
>> let rec second(x,y,z)=y
>>
>> let rec third(x,y,z)=z
>>
>
> It's not an error, but there's no need for rec here.  These aren't
> recursive functions.
>
>
>>   let rec rebuilt anss  (m,n,ys)= match anss with
>>
>>         []           ->       (m,n,ys)
>>
>> |element::anss ->
>>
>>          if m>first(element ) and n< second(element)
>>
>>          then rebuilt anss (m,n,ys)
>>
>>          else element::(rebuild anss (m,n,ys))
>>
>
> Three problems here:
> 1: You alternate between calling this function rebuilt and rebuild.
> 2: The "and" in the fourth line should be "&&".  The "and" keyword is used
> for recursive definitions.
> 3: You have a type error in this definition.  in the first pattern, the
> return type of the function is 'a * 'b * 'c, but in the else branch of the
> second pattern, you return an ('a * 'b * 'c) list.
>
> Assuming that you want to return a list, a more idiomatic way to write this
> function is:
>
> let rec rebuild anss ((m,n,_) as tup) =
>   match anss with
>   | [] -> [tup]
>   | (x,y,_)::t when m > x && n < y -> rebuild t tup
>   | h::t -> h::(rebuild t tup)
> ;;
>
> Note how you can use pattern matching to eliminate the need for your first,
> second, and third functions.
>
> Of course, you may also want to look at the functions in the standard
> library's List module (in particular List.filter) which likely make writing
> functions like his much easier.
>
>
>>   let rec sum anss cur n ys= match cur with
>>
>>            None   ->
>>
>>              (match ys with
>>
>> []-> anss
>>
>> |y::ys->
>>
>> if y=0
>>
>> then sum(rebuild anss (n,n,0)) None n+1 ys
>>
>> else sum anss (Some(n, y, [y])) (n + 1) ys)
>>
>>
>> the red area is shown has an error, and the error info is like this:"This
>> expression has type int list -> 'a but is here used with type int", so would
>> you please let me know if possible how can I let the compiler know the type
>> of anss is a list but not an integrer?
>>
>
> The problem here is that the part in red is being parsed as (sum ( rebuild
> anss (n,n,0)) None n) + 1 ys.  To fix this, you need to put the n+1 in
> parens.
>
> Finally, questions like this are better asked on the OCaml Beginner's list<http://groups.yahoo.com/group/ocaml_beginners/> .
>  You may want to join that list as well and use it for your questions while
> you learn OCaml.
>
> William D. Neumann
>



-- 
Su Zhang
PHD Student
Computer Information and Science
Kansas State University



-- 
Su Zhang
PHD Student
Computer Information and Science
Kansas State University

--0016363b810667912204638300c4
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br><br>
<div class=3D"gmail_quote">---------- Forwarded message ----------<br>From:=
 <b class=3D"gmail_sendername">Su Zhang</b> <span dir=3D"ltr">&lt;<a href=
=3D"mailto:westlifezs@gmail.com">westlifezs@gmail.com</a>&gt;</span><br>Dat=
e: 2009/2/22<br>
Subject: Re: [Caml-list] a problem about type recongnition<br>To: William N=
eumann &lt;<a href=3D"mailto:wneumann@gmail.com">wneumann@gmail.com</a>&gt;=
<br><br><br>
<div>thank you very much, because my gmail mailbox can not be verified by y=
ahoo and I use yahoo mailbox to join the group, yet it is still pending, si=
nce it&#39;s almost the deadline for me,&nbsp;so would you please take a lo=
ok at the following two questions if possible?</div>

<div>&nbsp;</div>
<div>1 I would like to use a comparision function to sort my list and provi=
de a final result, so this is the comparision function I have:</div>
<div>let rec comparision xs ys<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font colo=
r=3D"#ff0000">if</font> hd(third(xs))&gt; hd(third(ys))<br>&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp; then 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if=
 hd(third(xs))=3D hd(third(ys))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp; then 0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else -1</div>
<div>I want to use this compariasion which means the list of triples should=
 be sorted based on the first element of the third value in each triple,yet=
 it seems it has some problems which I really donot understand, it&nbsp; sa=
ys the if has some problems... would you please give me some ideas, and if =
I can figure out this problem, can i use the sort function to sort a list a=
nd output an ordered result? like this: ys=3D<span lang=3D"EN-US" style=3D"=
FONT-SIZE: 10.5pt">let rec sort comparision ys ? and here ys is a list of t=
riples.</span><br>
</div>
<div>thanks<br></div>
<div class=3D"gmail_quote">2009/2/22 William Neumann <span dir=3D"ltr">&lt;=
<a href=3D"mailto:wneumann@gmail.com" target=3D"_blank">wneumann@gmail.com<=
/a>&gt;</span>=20
<div>
<div></div>
<div class=3D"Wj3C7c"><br>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<div class=3D"gmail_quote">2009/2/22 Su Zhang <span dir=3D"ltr">&lt;<a href=
=3D"mailto:westlifezs@gmail.com" target=3D"_blank">westlifezs@gmail.com</a>=
&gt;</span>=20
<div><br>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<div>Hi all,</div>
<div>&nbsp;</div>
<div>I have a problem while executing ocaml, did you see any problem in my =
code?</div></blockquote>
<div><br></div></div>
<div>Yes, a few. &nbsp;See below.</div>
<div>
<div>&nbsp;</div>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<div>and do I need to give each variable a type before I use it ?</div></bl=
ockquote>
<div><br></div></div>
<div>Generally speaking, no. &nbsp;There are a few cases where it needs to =
be done, or it helps to specify types, but most of the time the types will =
be inferred for you.</div>
<div>
<div>&nbsp;</div>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<div>my code is in the following, you can take a look at the code and the i=
nfo of the errors</div>
<div>&nbsp;</div>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri">let rec first(x, y, z)=3Dx<span></span></font></font></s=
pan></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font face=3D"Calibri=
" size=3D"3">let rec second(x,y,z)=3Dy</font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font face=3D"Calibri=
" size=3D"3">let rec third(x,y,z)=3Dz</font></span></p></blockquote>
<div><br></div></div>
<div>It&#39;s not an error, but there&#39;s no need for rec here. &nbsp;The=
se aren&#39;t recursive functions.</div>
<div>
<div>&nbsp;</div>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font face=3D"Calibri=
" size=3D"3"></font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font face=3D"Calibri=
" size=3D"3">&nbsp;let rec rebuilt anss <span>&nbsp;</span>(m,n,ys)=3D matc=
h anss with</font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>&nbsp;&nbsp;=
&nbsp;</span>[]<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp; </span>-&gt;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(m,n,y=
s)<span>&nbsp; </span></font></font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 36.75pt"><span lang=3D"EN-US"=
><font face=3D"Calibri" size=3D"3">|element::anss -&gt; </font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <=
/span>if m&gt;first(element ) and n&lt; second(element)</font></font></span=
></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <=
/span>then rebuilt anss (m,n,ys)</font></font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <=
/span>else element::(rebuild anss (m,n,ys))</font></font></span></p></block=
quote>
<div><br></div></div>
<div>Three problems here:</div>
<div>1: You alternate between calling this function rebuilt and rebuild.</d=
iv>
<div>2: The &quot;and&quot; in the fourth line should be &quot;&amp;&amp;&q=
uot;. &nbsp;The &quot;and&quot; keyword is used for recursive definitions.<=
/div>
<div>3: You have a type error in this definition. &nbsp;in the first patter=
n, the return type of the function is &#39;a * &#39;b * &#39;c, but in the =
else branch of the second pattern, you return an (&#39;a * &#39;b * &#39;c)=
 list.</div>

<div><br></div>
<div>Assuming that you want to return a list, a more idiomatic way to write=
 this function is:</div>
<div><br></div>
<div>let rec rebuild anss ((m,n,_) as tup) =3D</div>
<div>&nbsp;&nbsp;match anss with&nbsp;</div>
<div>&nbsp;&nbsp;| [] -&gt; [tup]</div>
<div>&nbsp;&nbsp;| (x,y,_)::t when m &gt; x &amp;&amp; n &lt; y -&gt; rebui=
ld t tup</div>
<div>&nbsp;&nbsp;| h::t -&gt; h::(rebuild t tup)</div>
<div>;;</div>
<div><br></div>
<div>Note how you can use pattern matching to eliminate the need for your f=
irst, second, and third functions.</div>
<div><br></div>
<div>Of course, you may also want to look at the functions in the standard =
library&#39;s List module (in particular List.filter) which likely make wri=
ting functions like his much easier.</div>
<div>
<div>&nbsp;</div>
<blockquote class=3D"gmail_quote" style=3D"PADDING-LEFT: 1ex; MARGIN: 0px 0=
px 0px 0.8ex; BORDER-LEFT: #ccc 1px solid">
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"></font></font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font face=3D"Calibri=
" size=3D"3">&nbsp;let rec sum anss cur n ys=3D match cur with</font></span=
></p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; </span>None<span>&nbsp;&nbsp; </span>-&gt;</font></font></span><=
/p>
<p style=3D"MARGIN: 0cm 0cm 0pt"><span lang=3D"EN-US"><font size=3D"3"><fon=
t face=3D"Calibri"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp; </span><span>&nbsp;</span>(match ys with </font></font></s=
pan></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 120.75pt"><span lang=3D"EN-US=
"><font face=3D"Calibri" size=3D"3">[]-&gt; anss</font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 120.75pt"><span lang=3D"EN-US=
"><font face=3D"Calibri" size=3D"3">|y::ys-&gt; </font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 120.75pt"><span lang=3D"EN-US=
"><font face=3D"Calibri" size=3D"3">if y=3D0</font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 120.75pt"><span lang=3D"EN-US=
"><font face=3D"Calibri" size=3D"3">then <font color=3D"#ff0000">sum(rebuil=
d anss (n,n,0)) None n+1 ys</font></font></span></p>
<p style=3D"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 120.75pt"><span lang=3D"EN-US=
"><font face=3D"Calibri" size=3D"3">else sum anss (Some(n, y, [y])) (n + 1)=
 ys)</font></span></p>
<p>&nbsp;</p>
<div>the red area is shown has an error, and the error info is like this:&q=
uot;This expression has type int list -&gt; &#39;a but is here used with ty=
pe int&quot;, so would you please let me know if possible how can I let the=
 compiler know the type of anss is a list but not an integrer?</div>
</blockquote>
<div><br></div></div>
<div>The problem here is that the part in red is being parsed as (sum ( reb=
uild anss (n,n,0)) None n) + 1 ys. &nbsp;To fix this, you need to put the n=
+1 in parens.&nbsp;</div>
<div><br></div>
<div>Finally, questions like this are better asked on <a href=3D"http://gro=
ups.yahoo.com/group/ocaml_beginners/" target=3D"_blank">the OCaml Beginner&=
#39;s list</a>&nbsp;. &nbsp;You may want to join that list as well and use =
it for your questions while you learn OCaml.</div>

<div><br></div>
<div>William D. Neumann</div></div></blockquote></div></div></div><br><br c=
lear=3D"all">
<div>
<div></div>
<div class=3D"Wj3C7c"><br>-- <br>Su Zhang<br>PHD Student <br>Computer Infor=
mation and Science<br>Kansas State University <br></div></div></div><br><br=
 clear=3D"all"><br>-- <br>Su Zhang<br>PHD Student <br>Computer Information =
and Science<br>
Kansas State University <br>

--0016363b810667912204638300c4--

