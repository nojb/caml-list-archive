Return-Path: <philou@philou.ch>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 41180BBAF
	for <caml-list@yquem.inria.fr>; Sun, 22 Feb 2009 12:26:18 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAI/FoEk+3IZh/2dsb2JhbADUPIQPBg
X-IronPort-AV: E=Sophos;i="4.38,249,1233529200"; 
   d="scan'208";a="23338734"
Received: from philou.ch ([62.220.134.97])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 22 Feb 2009 12:26:17 +0100
Received: by philou.ch (Postfix, from userid 1000)
	id 2DBB42A144; Sun, 22 Feb 2009 12:26:14 +0100 (CET)
Date: Sun, 22 Feb 2009 12:26:14 +0100
From: Philippe Strauss <philou@philou.ch>
To: Caml List <caml-list@yquem.inria.fr>
Subject: ocaml garbage collector_S_
Message-ID: <20090222112614.GA14473@philou.ch>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
X-NCC-RegID: ch.innet
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Spam: no; 0.00; ocaml:01 ocaml:01 runtimes:01 url's:98 02.:98 02.:98 garbage:01 garbage:01 constraint:01 constraint:01 functional:02 python:03 seems:03 numerical:03 languages:03 

Hello ocaml'ers,

I've been long thinking about programming languages others than C, Perl, Python, the .Net family, java etc.
Anytime I discover a language come to mind a rather "niche" but interesting field: audio signal processing,
i.e. soft real time constraint and good numerical/overall performance.
Ocaml was not designed/targetted with such constraint in head (RT), but actually fit the bill not too badly with
a relatively simple and efficient GC, designed to be good at tasks functional prog. languages are used
to: lots of small sized values to allocate and free frequently.

industrial control process, audio processing share a need for others pattern of allocation, solved using pools
of memory range of various size.

Those 3 URL's point to a really interesting garbage collector project for real-time software,
using memory pools.
Initial versions of this project used "two level segregate fit" rather than pools and is still
available in later revision it seems:

http://www.notam02.no/index.php?/nor/Teknologi-og-tekst/Programvare/Audio-Rollendurchmesserzeitsammler
http://www.notam02.no/index.php?/nor/Teknologi-og-tekst/Programvare/Audio-Rollendurchmesserzeitsammler-Updates
http://archive.notam02.no/arkiv/src/?M=D

Remembering other needs like a concurrent GC and the multicore GC project of the OSP 2008, does the
idea of modifiying the GC of ocaml to make it a "pluggable" subsystem, with 3 runtimes you may choose from,
the "traditional" GC, the "real-time, pool based", and the "concurrent" one sounds reasonable?

Did this kind of need often pop-up in your mind?

-- 
Philippe Strauss
http://philou.ch

