Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p4RGa0mA031350;
	Fri, 27 May 2011 18:36:00 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqsCAI7S303RVdy2mGdsb2JhbAA+AQMJCZd8MoYxAYZ3XAgUAQEBAQEICQ0HFCWIcKBnjB6CN4Q5OYhiAQEDBoMcgnwEgjaODYshO4M7
X-IronPort-AV: E=Sophos;i="4.65,281,1304287200"; 
   d="scan'208";a="100016117"
Received: from mail-vx0-f182.google.com ([209.85.220.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 27 May 2011 18:35:41 +0200
Received: by vxc34 with SMTP id 34so2812440vxc.27
        for <multiple recipients>; Fri, 27 May 2011 09:35:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc:content-type;
        bh=cE6DbOvYEk5xzYaZ6jnWhXVtWx0cnAxkkQvsKltypfw=;
        b=pOdGo8zDcRjNfyX2qMBLpLEhLzNtWTb0QAKQAGbJefxQtpgsowMv7hJWypMfRS91FY
         5rKC04G2iP6y3QnS1kpp0EkJyCuusv8q1UIGWkijoWlBaSTRa/6PB3d0LdS1oD9vpCBc
         j7iH4pdxocNei4Qu/S/tpMmi0ua3ONoRMYfEE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=Irs/NogUyrrTjFA3YgBCr0rZtfTAVExtqhRQwQV5S4wApltGkmlQSL8t8oH7mR7hyN
         ljfFgMBsLCsBeq8AGJDKvx5N0S79NBO4lR/fxxivQb4gjad+ecapcr+ZFQXm11cxc4TI
         WspgjjC4wm7stPbGlsFzditeqxj+SXf2jdVHk=
Received: by 10.52.100.7 with SMTP id eu7mr3040479vdb.296.1306514140070; Fri,
 27 May 2011 09:35:40 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.52.165.74 with HTTP; Fri, 27 May 2011 09:35:19 -0700 (PDT)
In-Reply-To: <BANLkTimuggp1vcfCiOEpujVmVqKx8hAjTw@mail.gmail.com>
References: <BANLkTimuggp1vcfCiOEpujVmVqKx8hAjTw@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 27 May 2011 18:35:19 +0200
Message-ID: <BANLkTim_o0N6rcowCz50D9cxn6Pfj5N3-Q@mail.gmail.com>
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>
Cc: caml-list@inria.fr, caml-hump@inria.fr
Content-Type: multipart/alternative; boundary=bcaec501618f36820e04a4448790
Subject: Re: [Caml-list] [ANN] Cmdliner 0.9.0


--bcaec501618f36820e04a4448790
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank for sharing, that's very interesting.

Here are various remarks I had while browsing your documentation (which is
very good; thanks for taking the time to do something polished).

- The way I understand it, the big change of the Arg interface is that this
interface is "pure". In Arg, you define *actions* for the parameters that,
when parsing the arguments, have the effect of updating a mutable
"configuration state" of the program. In your presentation, you define
values for  the parameters (with some corresponding metadata), but can be
used in the program as the *values* set for those parameters. You explain
this concisely at the beginning, but I think the comparison with the Arg
interface is enlightening and could help the user understand the advantages
of your approach.

- I'm not sure the presentation "oh it's just an applicative functor" is the
most accessible to the wider OCaml community. That said, your examples do a
rather good job at explaining how it's used, so maybe the scary words
upfront are not so much of a problem.

- I wasn't able to understand why you specifically chose an applicative
functor. Intuitively I would see this rather as a Reader (or Env) monad over
the (parsed, typed) "parameter state" of the program. Given that monads are
more popular and widely used, and that the monadic interface is richer than
the applicative functor one, I'm wondering why you made that choice. It
would be ok if this is not a monad (I think only structures that are
explicitely *not* monads should be presented as applicative functors), but I
don't see why your type isn't. Maybe this should be documented.

- Term.eval_choice use a (info * 'a) associative list, while varg_* use ('a
* info) lists. I'm not sure why you made different choices. Actually I don't
understand what "vflag" is. I find the documentation confusing (and am not
able to parse the last sentence). Maybe a different explanation and/or a
usage example would help. My vague idea after re-reading this documentation
is that it is somehow meant to allow a sum type to be set by parameters
(with different possible parameters for the different cases of the sum).

- This seems related to the "parameters combinators" of Eliom :
  http://ocsigen.org/eliom/dev/api/server/Eliom_parameters
  There are small variations (in particular Eliom uses some specific
metadata regarding how the parameter is passed in the URL, as a GET
parameter, an URL suffix etc.), but the main difference is that Eliom
parameters, as Scanf, are in continuation style (you pass the parameters
plus a continuation that take the "values" as argument(s)), while you use a
direct style encoded in a monad / applicative functor. It might be fruitful
to explain the difference in the documentation.

- I think the "predefined converters" are mostly orthogonal to the rest of
the interface, and would possibly benefit of being factored out as a
separate module, or even an external "extra" library; they should certainly
be in any reasonable "extra standard library" (Extlib, Core, Batteries,
whichever you like) and you could/should propose them upstream to those
libraries if they are not. There may however be an issue with conventions
here (maybe for command-line parameters a certain syntax is usual for
sequence of elements that is not what those libraries would naturally
choose).

- The converter interface seems a bit simplistic and unsatisfying. In
particular, parsers being (string -> 'a) functions, I'm not sure how you
compose different parsers. I just had a look at the implementation and, for
pairs for example, if I understand correctly you split the input string on
"," beforehand, then call the parser on both parts. This seems wrong:
  - there seems to be an associativity issue, if I build (pair (pair int
int) int) and pass "1,2,3", it will try to parse "1" with (pair int int); so
we would need delimiters here
  - what if I pass a quoted string that contains a comma?

- Your build system (handcoded make-like script) is a bit unusual. Maybe it
be better for the principle-of-least-surprise if you had a Makefile just
redirecting the obvious actions to your funny build script. I first tried
(yes, I should read the README first) to run "oasis", but this failed as the
_oasis file is syntactically invalid due to the %%FOO%% configuration
variables. I'm unsure what is the benefit of having those configuration
variables in your build script rather than in the _oasis, but I understand
this is a highly subjective thing.

On a more open-ended side, I wanted to report that I have done a related
thing for a prototype, with a slightly different twist: I needed a
description of configuration options that would support both a command-line
interface (for which I reused the Arg module), and configuration directives
in an interactive toplevel: "#set +debug;;". I don't suppose you would or
should be interested in extending your interface to support such a thing,
but this is food for thought anyway.
One difference it makes is that I needed to handle changes in the parameters
state during the life of the program. I used simple side-effects on global
reference, but I suppose you could also handle this with your
applicative/monadic interface, provided the user correctly threads the
functor through the parts of her program where the configuration may be
changed.

Two other differences are that I used hierarchical options rather than a
plain option list, and that I needed to support dependencies between
configurations; some flags don't make any sense unless others are enabled,
eg. --dot-output --dot-renderer=3Dtwopi. Also, when I get the value of a
parameter, I don't want to get a meaningful output if a flag on which it
depends was disabled (by changing the configuration options): if I disable
"dot-output" I want "dot-renderer" to return None even if not directly
changed (otherwise the client code would have to first check dot-output,
then match on dot-renderer).

Finally, I had a different approach wrt. option/commands spelling. If I
understand correctly, you accept an input if and only if it is a valid
prefix of only one valid option/command. I didn't use prefixes (you have to
type the whole string), but allowed small typing mistakes by computing an
"edit distance" and trying to make a reasonable but arbitrary heuristic
choice if there was no perfect fit. Included below is my code for doing
this, that may be of interest (though I'm not sure if it can be usefully
combined with a prefix-is-ok approach). I only tested it lightly, so no
guarantee of being bug-free.
This works well for a toplevel use, but I understand that you may want to be
stricter for command-line parameters. It may still be useful to suggest the
correct option when rejecting the spelling, =E0 la git "Did you mean this ?=
".

(** Edition distance between two strings (dynamic algorithm) *)
> let edit_distance sa sb =3D
>   let la, lb =3D String.length sa, String.length sb in
>   let t =3D Array.create_matrix (la + 1) (lb + 1) (-1) in
>   for i =3D 0 to la do
>     t.(i).(lb) <- (la - i)
>   done;
>   for j =3D 0 to lb do
>     t.(la).(j) <- (lb - j)
>   done;
>   for i =3D la - 1 downto 0 do
>     for j =3D lb - 1 downto 0 do
>       t.(i).(j) <- min
>     (1 + min t.(i+1).(j) t.(i).(j+1))
>     (t.(i+1).(j+1) + if sa.[i] =3D sb.[j] then 0 else 1)
>     done
>   done;
>   t.(0).(0)
>
> (** Spell-correcting choice in a string association list
>
>     If the given key is not found in the assoc list, use edit distance
>     to determine the likely candidate. First, sort the assoc by
>     increasing order of edit distance to the key. Next, we could
>     choose the first candidate (minimal edit distance), but that could
>     lead to absurd choices :
>
>     - if the list is a singleton, we would always choose the first, no
>     matter how big the error is. If it's really not what the user
>     typed, it can be more helpful to report the mistake instead of
>     making a dumb choice.
>
>     - if they are different candidates of nearby edit distances to the
>     key, we cannot make a meaningful choice : any of the first items
>     would be as good.
>
>     Therefore :
>
>     - if the list is a singleton, we only choose its element if the
>     edit distance is inferior to a fixed constant (3).
>
>     - if there are a least two elements, we only choose the first one
>     if its edit distance is twice shorter than the second one
>     (unambiguous choice).
> *)
> let select_nearest key_string get_string list =3D
>   let list' =3D
>     let weight elem =3D
>       (edit_distance key_string (get_string elem), elem) in
>     List.map weight list in
>   let list' =3D List.sort (fun (k1, _) (k2, _) -> compare k1 k2) list' in
>   match list' with
>     | [] -> None
>     | (key, elem)::[] -> if key <=3D 3 then Some elem else None
>     | (k1, elem)::(k2, _)::_ -> if 2 * k1 < k2 then Some elem else None
>


On Fri, May 27, 2011 at 4:54 PM, Daniel B=FCnzli
<daniel.buenzli@erratique.ch>wrote:

> Hello,
>
> I grew tired of the Arg module. For a quick and easy way to make your
> functions available from the command line you may be interested in
> Cmdliner :
>
> Cmdliner is a module for the declarative definition of command line
> interfaces.
>
> It provides a simple and compositional mechanism to convert command
> line arguments to OCaml values and pass them to your functions. The
> module automatically handles syntax errors, help messages and UNIX man
> page generation. It supports programs with single or multiple commands
> (like darcs or git) and respect most of the POSIX and GNU conventions.
>
> Cmdliner is made of a single, independent, module and distributed
> under the BSD3 license.
>
> Project home page : http://erratique.ch/software/cmdliner
>
>
> The basics section of the documentation can be read as tutorial
> introduction:
>
> http://erratique.ch/software/cmdliner/doc/Cmdliner#basics
>
> Your feedback is welcome.
>
> Daniel
>
> P.S. The examples use syntactic constructs only available in 3.12
> however I took care not to use them in the implementation of Cmdliner
> itself.
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--bcaec501618f36820e04a4448790
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank for sharing, that&#39;s very interesting.<br><br>Here are various rem=
arks I had while browsing your documentation (which is very good; thanks fo=
r taking the time to do something polished).<br><br>- The way I understand =
it, the big change of the Arg interface is that this interface is &quot;pur=
e&quot;. In Arg, you define *actions* for the parameters that, when parsing=
 the arguments, have the effect of updating a mutable &quot;configuration s=
tate&quot; of the program. In your presentation, you define values for=A0 t=
he parameters (with some corresponding metadata), but can be used in the pr=
ogram as the *values* set for those parameters. You explain this concisely =
at the beginning, but I think the comparison with the Arg interface is enli=
ghtening and could help the user understand the advantages of your approach=
.<br>

<br>- I&#39;m not sure the presentation &quot;oh it&#39;s just an applicati=
ve functor&quot; is the most accessible to the wider OCaml community. That =
said, your examples do a rather good job at explaining how it&#39;s used, s=
o maybe the scary words upfront are not so much of a problem.<br>

<br>- I wasn&#39;t able to understand why you specifically chose an applica=
tive functor. Intuitively I would see this rather as a Reader (or Env) mona=
d over the (parsed, typed) &quot;parameter state&quot; of the program. Give=
n that monads are more popular and widely used, and that the monadic interf=
ace is richer than the applicative functor one, I&#39;m wondering why you m=
ade that choice. It would be ok if this is not a monad (I think only struct=
ures that are explicitely *not* monads should be presented as applicative f=
unctors), but I don&#39;t see why your type isn&#39;t. Maybe this should be=
 documented.<br>

<br>- Term.eval_choice use a (info * &#39;a) associative list, while varg_*=
 use (&#39;a * info) lists. I&#39;m not sure why you made different choices=
. Actually I don&#39;t understand what &quot;vflag&quot; is. I find the doc=
umentation confusing (and am not able to parse the last sentence). Maybe a =
different explanation and/or a usage example would help. My vague idea afte=
r re-reading this documentation is that it is somehow meant to allow a sum =
type to be set by parameters (with different possible parameters for the di=
fferent cases of the sum).<br>

<br>- This seems related to the &quot;parameters combinators&quot; of Eliom=
 :<br>=A0 <a href=3D"http://ocsigen.org/eliom/dev/api/server/Eliom_paramete=
rs">http://ocsigen.org/eliom/dev/api/server/Eliom_parameters</a><br>=A0 The=
re are small variations (in particular Eliom uses some specific metadata re=
garding how the parameter is passed in the URL, as a GET parameter, an URL =
suffix etc.), but the main difference is that Eliom parameters, as Scanf, a=
re in continuation style (you pass the parameters plus a continuation that =
take the &quot;values&quot; as argument(s)), while you use a direct style e=
ncoded in a monad / applicative functor. It might be fruitful to explain th=
e difference in the documentation.<br>

<br>- I think the &quot;predefined converters&quot; are mostly orthogonal t=
o the rest of the interface, and would possibly benefit of being factored o=
ut as a separate module, or even an external &quot;extra&quot; library; the=
y should certainly be in any reasonable &quot;extra standard library&quot; =
(Extlib, Core, Batteries, whichever you like) and you could/should propose =
them upstream to those libraries if they are not. There may however be an i=
ssue with conventions here (maybe for command-line parameters a certain syn=
tax is usual for sequence of elements that is not what those libraries woul=
d naturally choose).<br>

<br>- The converter interface seems a bit simplistic and unsatisfying. In p=
articular, parsers being (string -&gt; &#39;a) functions, I&#39;m not sure =
how you compose different parsers. I just had a look at the implementation =
and, for pairs for example, if I understand correctly you split the input s=
tring on &quot;,&quot; beforehand, then call the parser on both parts. This=
 seems wrong:<br>

=A0 - there seems to be an associativity issue, if I build (pair (pair int =
int) int) and pass &quot;1,2,3&quot;, it will try to parse &quot;1&quot; wi=
th (pair int int); so we would need delimiters here<br>=A0 - what if I pass=
 a quoted string that contains a comma?<br>

<br>- Your build system (handcoded make-like script) is a bit unusual. Mayb=
e it be better for the principle-of-least-surprise if you had a Makefile ju=
st redirecting the obvious actions to your funny build script. I first trie=
d (yes, I should read the README first) to run &quot;oasis&quot;, but this =
failed as the _oasis file is syntactically invalid due to the %%FOO%% confi=
guration variables. I&#39;m unsure what is the benefit of having those conf=
iguration variables in your build script rather than in the _oasis, but I u=
nderstand this is a highly subjective thing.<br>

<br>On a more open-ended side, I wanted to report that I have done a relate=
d thing for a  prototype, with a slightly different twist: I needed a descr=
iption of configuration options that would support both a command-line inte=
rface (for which I reused the Arg module), and configuration directives in =
an interactive toplevel: &quot;#set +debug;;&quot;. I don&#39;t suppose you=
 would or should be interested in extending your interface to support such =
a thing, but this is food for thought anyway.<br>

One difference it makes is that I needed to handle changes in the parameter=
s state during the life of the program. I used simple side-effects on globa=
l reference, but I suppose you could also handle this with your applicative=
/monadic interface, provided the user correctly threads the functor through=
 the parts of her program where the configuration may be changed.<br>

<br>Two other differences are that I used hierarchical options rather than =
a plain option list, and that I needed to support dependencies between conf=
igurations; some flags don&#39;t make any sense unless others are enabled, =
eg. --dot-output --dot-renderer=3Dtwopi. Also, when I get the value of a pa=
rameter, I don&#39;t want to get a meaningful output if a flag on which it =
depends was disabled (by changing the configuration options): if I disable =
&quot;dot-output&quot; I want &quot;dot-renderer&quot; to return None even =
if not directly changed (otherwise the client code would have to first chec=
k dot-output, then match on dot-renderer).<br>

<br>Finally, I had a different approach wrt. option/commands spelling. If I=
 understand correctly, you accept an input if and only if it is a valid pre=
fix of only one valid option/command. I didn&#39;t use prefixes (you have t=
o type the whole string), but allowed small typing mistakes by computing an=
 &quot;edit distance&quot; and trying to make a reasonable but arbitrary he=
uristic choice if there was no perfect fit. Included below is my code for d=
oing this, that may be of interest (though I&#39;m not sure if it can be us=
efully combined with a prefix-is-ok approach). I only tested it lightly, so=
 no guarantee of being bug-free.<br>

This works well for a toplevel use, but I understand that you may want to b=
e stricter for command-line parameters. It may still be useful to suggest t=
he correct option when rejecting the spelling, =E0 la git &quot;Did you mea=
n this ?&quot;.<br>

<br><blockquote style=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid =
rgb(204, 204, 204); padding-left: 1ex;" class=3D"gmail_quote">(** Edition d=
istance between two strings (dynamic algorithm) *)<br>let edit_distance sa =
sb =3D<br>

=A0 let la, lb =3D String.length sa, String.length sb in<br>=A0 let t =3D A=
rray.create_matrix (la + 1) (lb + 1) (-1) in<br>=A0 for i =3D 0 to la do<br=
>=A0=A0=A0 t.(i).(lb) &lt;- (la - i)<br>=A0 done;<br>=A0 for j =3D 0 to lb =
do<br>=A0=A0=A0 t.(la).(j) &lt;- (lb - j)<br>

=A0 done;<br>=A0 for i =3D la - 1 downto 0 do<br>=A0=A0=A0 for j =3D lb - 1=
 downto 0 do<br>=A0=A0=A0=A0=A0 t.(i).(j) &lt;- min<br>=A0=A0=A0 (1 + min t=
.(i+1).(j) t.(i).(j+1))<br>=A0=A0=A0 (t.(i+1).(j+1) + if sa.[i] =3D sb.[j] =
then 0 else 1)<br>=A0=A0=A0 done<br>=A0 done;<br>

=A0 t.(0).(0)<br><br>(** Spell-correcting choice in a string association li=
st<br>=A0=A0=A0 <br>=A0=A0=A0 If the given key is not found in the assoc li=
st, use edit distance<br>=A0=A0=A0 to determine the likely candidate. First=
, sort the assoc by<br>

=A0=A0=A0 increasing order of edit distance to the key. Next, we could<br>=
=A0=A0=A0 choose the first candidate (minimal edit distance), but that coul=
d<br>=A0=A0=A0 lead to absurd choices :<br><br>=A0=A0=A0 - if the list is a=
 singleton, we would always choose the first, no<br>

=A0=A0=A0 matter how big the error is. If it&#39;s really not what the user=
<br>=A0=A0=A0 typed, it can be more helpful to report the mistake instead o=
f<br>=A0=A0=A0 making a dumb choice.<br><br>=A0=A0=A0 - if they are differe=
nt candidates of nearby edit distances to the<br>

=A0=A0=A0 key, we cannot make a meaningful choice : any of the first items<=
br>=A0=A0=A0 would be as good.<br><br>=A0=A0=A0 Therefore :<br><br>=A0=A0=
=A0 - if the list is a singleton, we only choose its element if the<br>=A0=
=A0=A0 edit distance is inferior to a fixed constant (3).<br>

<br>=A0=A0=A0 - if there are a least two elements, we only choose the first=
 one<br>=A0=A0=A0 if its edit distance is twice shorter than the second one=
<br>=A0=A0=A0 (unambiguous choice).<br>*)<br>let select_nearest key_string =
get_string list =3D<br>

=A0 let list&#39; =3D<br>=A0=A0=A0 let weight elem =3D<br>=A0=A0=A0=A0=A0 (=
edit_distance key_string (get_string elem), elem) in<br>=A0=A0=A0 List.map =
weight list in<br>=A0 let list&#39; =3D List.sort (fun (k1, _) (k2, _) -&gt=
; compare k1 k2) list&#39; in<br>

=A0 match list&#39; with<br>=A0=A0=A0 | [] -&gt; None<br>=A0=A0=A0 | (key, =
elem)::[] -&gt; if key &lt;=3D 3 then Some elem else None<br>=A0=A0=A0 | (k=
1, elem)::(k2, _)::_ -&gt; if 2 * k1 &lt; k2 then Some elem else None<br></=
blockquote><br><br>

<div class=3D"gmail_quote">On Fri, May 27, 2011 at 4:54 PM, Daniel B=FCnzli=
 <span dir=3D"ltr">&lt;<a href=3D"mailto:daniel.buenzli@erratique.ch">danie=
l.buenzli@erratique.ch</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_=
quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
ex;">

Hello,<br>
<br>
I grew tired of the Arg module. For a quick and easy way to make your<br>
functions available from the command line you may be interested in<br>
Cmdliner :<br>
<br>
Cmdliner is a module for the declarative definition of command line interfa=
ces.<br>
<br>
It provides a simple and compositional mechanism to convert command<br>
line arguments to OCaml values and pass them to your functions. The<br>
module automatically handles syntax errors, help messages and UNIX man<br>
page generation. It supports programs with single or multiple commands<br>
(like darcs or git) and respect most of the POSIX and GNU conventions.<br>
<br>
Cmdliner is made of a single, independent, module and distributed<br>
under the BSD3 license.<br>
<br>
Project home page : <a href=3D"http://erratique.ch/software/cmdliner" targe=
t=3D"_blank">http://erratique.ch/software/cmdliner</a><br>
<br>
<br>
The basics section of the documentation can be read as tutorial introductio=
n:<br>
<br>
<a href=3D"http://erratique.ch/software/cmdliner/doc/Cmdliner#basics" targe=
t=3D"_blank">http://erratique.ch/software/cmdliner/doc/Cmdliner#basics</a><=
br>
<br>
Your feedback is welcome.<br>
<br>
Daniel<br>
<br>
P.S. The examples use syntactic constructs only available in 3.12<br>
however I took care not to use them in the implementation of Cmdliner<br>
itself.<br>
<font color=3D"#888888"><br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></blockquote></div><br>

--bcaec501618f36820e04a4448790--
