Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p49GSG8K004108
	for <caml-list@sympa-roc.inria.fr>; Mon, 9 May 2011 18:28:16 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao0CAP8UyE3RVaE2kGdsb2JhbACXYYZahz0IFAEBAQEJCQ0HFAQhiHGha4wZCoInhG02iF8BAQMGhgYEgimNPIUEgzyCMTsrgyI
X-IronPort-AV: E=Sophos;i="4.64,341,1301868000"; 
   d="scan'208";a="82691692"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 09 May 2011 18:28:11 +0200
Received: by fxm11 with SMTP id 11so8001031fxm.27
        for <caml-list@inria.fr>; Mon, 09 May 2011 09:28:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:reply-to:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=xBYv+P2iB/LEx56RF6TCXVZePPqzz1oeH7gSFCrEM6A=;
        b=DInujmfamImXmxxBYu21JVHr+vgmNR+JOGItomyzV7VIRHeEXFp+wxkFX7YKQhZ+uC
         bxIlVq8l/+vywb17+fosCFrE+M2TKuMChp9o1LX9zqx5mf04SHkCP+IXRVTyMC5D1ZyE
         59wd332sXyiZvVPJMhkYO6I5kZBiXS+pFqID8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:reply-to:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        b=jD2WOL/+62hfVSuG2sDIoIjbzLgwyXzWqDyOYePyUl5TmTKjOJALtWyPMYn+y8WuUS
         7o13CMSEWmRum5rIBFsEaNwLQyVIK3bcKmsSQ2W4J3NRB9dV8e20/9p/VKQVVZeK8LO3
         EUSI9x4zstWo+8pWpTOkW8/KfOHg7odckk5rc=
MIME-Version: 1.0
Received: by 10.223.24.153 with SMTP id v25mr177065fab.29.1304958396076; Mon,
 09 May 2011 09:26:36 -0700 (PDT)
Received: by 10.223.72.5 with HTTP; Mon, 9 May 2011 09:26:36 -0700 (PDT)
Reply-To: yminsky@gmail.com
In-Reply-To: <BANLkTimAASzV3nVkHoN5whTKFjKqJ6i6yg@mail.gmail.com>
References: <20110509142702.GZ28842@janestreet.com>
	<BANLkTimAASzV3nVkHoN5whTKFjKqJ6i6yg@mail.gmail.com>
Date: Mon, 9 May 2011 12:26:36 -0400
Message-ID: <BANLkTimBEkg7wQHo6k7xjWELxFdB9d9Bgg@mail.gmail.com>
From: Yaron Minsky <yminsky@gmail.com>
To: Markus Mottl <markus.mottl@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00151747342ca5153204a2da4d09
Subject: Re: [Caml-list] "with module" surprises


--00151747342ca5153204a2da4d09
Content-Type: text/plain; charset=ISO-8859-1

I agree that specializing modules is a reasonable thing to do in general.
But that's not what I think the "with" syntax is usually for.  It's usually
for adding sharing constraints, and this kind of modification of a module is
not the same thing as adding a constraint.  Note that the following code
fails, as I think it should:

  module type S' = sig end
  with type t = int

Do you by any chance have a use-case that you think benefits from these
semantics?

y

On Mon, May 9, 2011 at 11:12 AM, Markus Mottl <markus.mottl@gmail.com>wrote:

> The current semantics seems to make sense to me.  E.g.
>
>  module type M' = sig type t end
>
> specifies that M' needs a type t.  It doesn't say that a module
> matching this signature needs to keep t abstract.  You can hence
> specialize this signature using "with" to e.g. require that it be an
> "int".
>
> Module constraints work similarly.  If a signature is empty, this
> doesn't mean that a module matching it must not contain anything,
> rather the opposite: any module can match it.  You can again
> specialize the signature using "with" to require further entries.  The
> module passed to "with" only needs to match the first signature, which
> is trivially true in this case.  Its own (possibly inferred) signature
> will then specialize the previous signature, potentially adding more
> entries.
>
> A maybe more intuitive way to think about this is following: in OCaml
> you can only make things more strict, never less strict.  An empty
> signature is less strict (can be matched by more modules) than a
> non-empty one.  Hence extending it is the right "direction".
>
> Markus
>
> On Mon, May 9, 2011 at 10:27, Yaron Minsky <yminsky@janestreet.com> wrote:
> > I've gotten bitten recently by the semantics of "with module", and after
> > getting an explanation about how this seems to work in OCaml, I'm now
> > deeply confused.  Here's the example I was shown:
> >
> >  module M = struct
> >    let x = 13
> >  end
> >
> >  module type S = sig
> >    module M' : sig end
> >  end
> >  with module M' = M
> >
> > The inferred types for this will be:
> >
> >  module M : sig val x : int end
> >  module type S = sig module M' : sig val x : int end end
> >
> > Whereas I would have expected this:
> >
> >  module M : sig val x : int end
> >  module type S = sig module M' : sig end end
> >
> > In other words, the "with module" constraint has added new structure to
> > the signature S, rather than just adding constraints.  This strikes me
> > as deeply strange, and indeed, has caused a bunch of head-scratching
> > here when using "with module".  Is this a bug?  Or is this really the
> > desired semantics.  My understanding is that in SML, "with module"
> > simply adds in a bunch of type-level sharing constraints.  From that
> > point of view, this behavior is pretty surprising.
> >
> > Not only that, it's what the OCaml manual says.  From section 6.10.4
> >
> >  The constraint [module module-path = extended-module-path] adds type
> >  equations to all type components of the sub-structure denoted by
> >  [module-path], making them equivalent to the corresponding type
> >  components of the structure denoted by [extended-module-path].
> >
> > y
> >
> > --
> > Yaron Minsky
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
> >
>
>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--00151747342ca5153204a2da4d09
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I agree that specializing modules is a reasonable thing to do in general.=
=A0 But that&#39;s not what I think the &quot;with&quot; syntax is usually =
for.=A0 It&#39;s usually for adding sharing constraints, and this kind of m=
odification of a module is not the same thing as adding a constraint.=A0 No=
te that the following code fails, as I think it should:<br>
<br>=A0 module type S&#39; =3D sig end<br>=A0 with type t =3D int<br><br>Do=
 you by any chance have a use-case that you think benefits from these seman=
tics?<br><br>y<br><br><div class=3D"gmail_quote">On Mon, May 9, 2011 at 11:=
12 AM, Markus Mottl <span dir=3D"ltr">&lt;<a href=3D"mailto:markus.mottl@gm=
ail.com">markus.mottl@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">The current seman=
tics seems to make sense to me. =A0E.g.<br>
<br>
 =A0module type M&#39; =3D sig type t end<br>
<br>
specifies that M&#39; needs a type t. =A0It doesn&#39;t say that a module<b=
r>
matching this signature needs to keep t abstract. =A0You can hence<br>
specialize this signature using &quot;with&quot; to e.g. require that it be=
 an<br>
&quot;int&quot;.<br>
<br>
Module constraints work similarly. =A0If a signature is empty, this<br>
doesn&#39;t mean that a module matching it must not contain anything,<br>
rather the opposite: any module can match it. =A0You can again<br>
specialize the signature using &quot;with&quot; to require further entries.=
 =A0The<br>
module passed to &quot;with&quot; only needs to match the first signature, =
which<br>
is trivially true in this case. =A0Its own (possibly inferred) signature<br>
will then specialize the previous signature, potentially adding more<br>
entries.<br>
<br>
A maybe more intuitive way to think about this is following: in OCaml<br>
you can only make things more strict, never less strict. =A0An empty<br>
signature is less strict (can be matched by more modules) than a<br>
non-empty one. =A0Hence extending it is the right &quot;direction&quot;.<br>
<br>
Markus<br>
<div><div></div><div class=3D"h5"><br>
On Mon, May 9, 2011 at 10:27, Yaron Minsky &lt;<a href=3D"mailto:yminsky@ja=
nestreet.com">yminsky@janestreet.com</a>&gt; wrote:<br>
&gt; I&#39;ve gotten bitten recently by the semantics of &quot;with module&=
quot;, and after<br>
&gt; getting an explanation about how this seems to work in OCaml, I&#39;m =
now<br>
&gt; deeply confused. =A0Here&#39;s the example I was shown:<br>
&gt;<br>
&gt; =A0module M =3D struct<br>
&gt; =A0 =A0let x =3D 13<br>
&gt; =A0end<br>
&gt;<br>
&gt; =A0module type S =3D sig<br>
&gt; =A0 =A0module M&#39; : sig end<br>
&gt; =A0end<br>
&gt; =A0with module M&#39; =3D M<br>
&gt;<br>
&gt; The inferred types for this will be:<br>
&gt;<br>
&gt; =A0module M : sig val x : int end<br>
&gt; =A0module type S =3D sig module M&#39; : sig val x : int end end<br>
&gt;<br>
&gt; Whereas I would have expected this:<br>
&gt;<br>
&gt; =A0module M : sig val x : int end<br>
&gt; =A0module type S =3D sig module M&#39; : sig end end<br>
&gt;<br>
&gt; In other words, the &quot;with module&quot; constraint has added new s=
tructure to<br>
&gt; the signature S, rather than just adding constraints. =A0This strikes =
me<br>
&gt; as deeply strange, and indeed, has caused a bunch of head-scratching<b=
r>
&gt; here when using &quot;with module&quot;. =A0Is this a bug? =A0Or is th=
is really the<br>
&gt; desired semantics. =A0My understanding is that in SML, &quot;with modu=
le&quot;<br>
&gt; simply adds in a bunch of type-level sharing constraints. =A0From that=
<br>
&gt; point of view, this behavior is pretty surprising.<br>
&gt;<br>
&gt; Not only that, it&#39;s what the OCaml manual says. =A0From section 6.=
10.4<br>
&gt;<br>
&gt; =A0The constraint [module module-path =3D extended-module-path] adds t=
ype<br>
&gt; =A0equations to all type components of the sub-structure denoted by<br>
&gt; =A0[module-path], making them equivalent to the corresponding type<br>
&gt; =A0components of the structure denoted by [extended-module-path].<br>
&gt;<br>
&gt; y<br>
&gt;<br>
&gt; --<br>
&gt; Yaron Minsky<br>
&gt;<br>
&gt; --<br>
&gt; Caml-list mailing list. =A0Subscription management and archives:<br>
&gt; <a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_b=
lank">https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
&gt;<br>
<br>
<br>
<br>
</div></div><font color=3D"#888888">--<br>
Markus Mottl=A0 =A0 =A0 =A0 <a href=3D"http://www.ocaml.info" target=3D"_bl=
ank">http://www.ocaml.info</a>=A0 =A0 =A0 =A0 <a href=3D"mailto:markus.mott=
l@gmail.com">markus.mottl@gmail.com</a><br>
</font><div><div></div><div class=3D"h5"><br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</div></div></blockquote></div><br>

--00151747342ca5153204a2da4d09--
