Return-Path: <Tiphaine.Turpin@free.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id D7FD37EE94
	for <caml-list@sympa.inria.fr>; Fri,  4 Jan 2013 16:26:15 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  Tiphaine.Turpin@free.fr) identity=pra; client-ip=212.27.42.1;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="Tiphaine.Turpin@free.fr";
  x-sender="Tiphaine.Turpin@free.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  Tiphaine.Turpin@free.fr) identity=mailfrom;
  client-ip=212.27.42.1;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="Tiphaine.Turpin@free.fr";
  x-sender="Tiphaine.Turpin@free.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@smtp1-g21.free.fr) identity=helo;
  client-ip=212.27.42.1;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="Tiphaine.Turpin@free.fr";
  x-sender="postmaster@smtp1-g21.free.fr";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AioBAAj05lDUGyoBlGdsb2JhbABFjBexNhYOAQEBAQkLCQkUAySCHgEBBScsJRELGAkWCAcJAwIBAgEPJRETBgIBAYd9AQMTCK1BCUENhjkEi2iFLQOUNYFWhWuFTIgH
X-IronPort-AV: E=Sophos;i="4.84,411,1355094000"; 
   d="scan'208,217";a="167444292"
Received: from smtp1-g21.free.fr ([212.27.42.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 04 Jan 2013 16:26:14 +0100
Received: from [192.168.0.1] (bur91-2-82-231-161-160.fbx.proxad.net [82.231.161.160])
	(Authenticated sender: tiphaine.turpin)
	by smtp1-g21.free.fr (Postfix) with ESMTPA id 41FEE940217
	for <caml-list@inria.fr>; Fri,  4 Jan 2013 16:26:10 +0100 (CET)
Message-ID: <50E701D3.9070008@free.fr>
Date: Fri, 04 Jan 2013 17:22:43 +0100
From: Tiphaine Turpin <Tiphaine.Turpin@free.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120501 Thunderbird/10.0.3
MIME-Version: 1.0
To: caml-list@inria.fr
References: <CAOOOohSPem8vpMbDCs3GG3nHGQutoq8xiGXcRc62fgeO3EL8rQ@mail.gmail.com> <CAEDxudyF8tXkoLc5a8XoSOUfGvH01VKBAHOmLQ5XbZAPrGkkBw@mail.gmail.com> <CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com>
In-Reply-To: <CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------070700080002050304030105"
Subject: Re: [Caml-list] [GADT noob question] Building a GADT from an
 untyped representation

This is a multi-part message in MIME format.
--------------070700080002050304030105
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

Hi Philippe,

I don't think that you can achieve what you are you are asking exactly,
unless ressorting to an existential type. You can do it using GADT too,
as described in the "existential types" section of

https://sites.google.com/site/ocamlgadt/

For your example, you can write:

type any_expr =
  | Expr : _ expr -> any_expr
;;

let parse_expr x =
  try Expr (Int (int_of_string x))
  with _ ->
    Expr (Float (float_of_string x))
;;

Cheers,

Tiphaine


On 01/04/13 16:05, Philippe Veber wrote:
> Hi Yury,
>
> Thanks for your answer! It is true your fix is accepted by the
> compiler, but this is not what I was looking for: in the end I'd like
> to have an 'a expr such that 'a is the type of the value obtained when
> evaluating the expression. With the polymorphic variants, I cannot
> write an eval function of type 'a eval -> 'a, which is the main
> motivation behind using GADT in that (canonical) case. Sorry for
> ommiting this point!
>
> ph.
>
>
> 2013/1/4 Yury Sulsky <yury.sulsky@gmail.com
> <mailto:yury.sulsky@gmail.com>>
>
>     Hi Philippe,
>
>     I think you can do this by using a polymorphic variant as the type
>     variable:
>
>     type _ expr =
>     | Int : int -> [> `int ] expr
>     | Float : float -> [> `float ] expr
>
>     let parse_expr : string -> [ `int | `float ] expr = fun x -> 
>       try Int (int_of_string x) 
>       with _ -> 
>         Float (float_of_string x)
>     ;;         
>
>     - Yury
>
>
>
>     On Fri, Jan 4, 2013 at 8:32 AM, Philippe Veber
>     <philippe.veber@gmail.com <mailto:philippe.veber@gmail.com>> wrote:
>
>         Dear list,
>
>         Suppose I define a GADT for expressions:
>
>         type _ expr =
>         | Int : int -> int expr
>         | Float : float -> float expr
>
>         Now I want to write a parser, that will build an ['a expr]
>         from a string. Without thinking much, I tried the following:
>
>         let parse_expr : type s. string -> s expr = fun x ->
>           try Int (int_of_string x)
>           with _ ->
>             Float (float_of_string x)
>         ;;
>
>         Which fails with the following error message:
>
>         Error: This expression has type int expr but an expression was
>         expected of type s expr
>
>         That makes sense, since [s] is a locally abstract type. I
>         tried a couple of variants and finally realised that I could
>         not even write the type of [parse_expr]: it should be [string
>         -> 'a expr] for some ['a], but I'm not sure that really means
>         something.
>
>         So to put it simple, how does one construct a GADT value from
>         a string ?
>
>         Cheers,
>           ph.
>
>
>



--------------070700080002050304030105
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    Hi Philippe,<br>
    <br>
    I don't think that you can achieve what you are you are asking
    exactly, unless ressorting to an existential type. You can do it
    using GADT too, as described in the "existential types" section of<br>
    <br>
    <a class="moz-txt-link-freetext"
      href="https://sites.google.com/site/ocamlgadt/">https://sites.google.com/site/ocamlgadt/</a><br>
    <br>
    For your example, you can write:<br>
    <br>
    type any_expr =<br>
    &nbsp; | Expr : _ expr -&gt; any_expr<br>
    ;;<br>
    <br>
    let parse_expr x =<br>
    &nbsp; try Expr (Int (int_of_string x))<br>
    &nbsp; with _ -&gt;<br>
    &nbsp;&nbsp;&nbsp; Expr (Float (float_of_string x))<br>
    ;;<br>
    <br>
    Cheers,<br>
    <br>
    Tiphaine<br>
    <br>
    <br>
    On 01/04/13 16:05, Philippe Veber wrote:
    <blockquote
cite="mid:CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com"
      type="cite">Hi Yury,<br>
      <br>
      Thanks for your answer! It is true your fix is accepted by the
      compiler, but this is not what I was looking for: in the end I'd
      like to have an 'a expr such that 'a is the type of the value
      obtained when evaluating the expression. With the polymorphic
      variants, I cannot write an eval function of type 'a eval -&gt;
      'a, which is the main motivation behind using GADT in that
      (canonical) case. Sorry for ommiting this point!<br>
      <br>
      ph.<br>
      <br>
      <br>
      <div class="gmail_quote">2013/1/4 Yury Sulsky <span dir="ltr">&lt;<a
            moz-do-not-send="true" href="mailto:yury.sulsky@gmail.com"
            target="_blank">yury.sulsky@gmail.com</a>&gt;</span><br>
        <blockquote class="gmail_quote" style="margin:0 0 0
          .8ex;border-left:1px #ccc solid;padding-left:1ex">
          <div dir="ltr">Hi Philippe,
            <div><br>
            </div>
            <div>I think you can do this by using a polymorphic variant
              as the type variable:</div>
            <div class="im">
              <div><br>
              </div>
              <div>type _ expr =</div>
              <div>| Int : int -&gt; [&gt; `int ] expr</div>
              <div>| Float : float -&gt; [&gt; `float ] expr</div>
              <div><br>
              </div>
            </div>
            <div>
              <div>let parse_expr : string -&gt; [ `int | `float ] expr
                = fun x -&gt;&nbsp;</div>
              <div class="im">
                <div>&nbsp; try Int (int_of_string x)&nbsp;</div>
                <div>&nbsp; with _ -&gt;&nbsp;</div>
                <div>&nbsp; &nbsp; Float (float_of_string x)</div>
                <div>;; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div>
                <div><br>
                </div>
              </div>
              <span class="HOEnZb"><font color="#888888">
                  <div>- Yury</div>
                  <div><br>
                  </div>
                </font></span></div>
          </div>
          <div class="HOEnZb">
            <div class="h5">
              <div class="gmail_extra"><br>
                <br>
                <div class="gmail_quote">On Fri, Jan 4, 2013 at 8:32 AM,
                  Philippe Veber <span dir="ltr">&lt;<a
                      moz-do-not-send="true"
                      href="mailto:philippe.veber@gmail.com"
                      target="_blank">philippe.veber@gmail.com</a>&gt;</span>
                  wrote:<br>
                  <blockquote class="gmail_quote" style="margin:0 0 0
                    .8ex;border-left:1px #ccc solid;padding-left:1ex">Dear

                    list,<br>
                    <br>
                    Suppose I define a GADT for expressions:<br>
                    <br>
                    <span style="font-family:courier new,monospace">type
                      _ expr = </span><br style="font-family:courier
                      new,monospace">
                    <span style="font-family:courier new,monospace">|
                      Int : int -&gt; int expr </span><br
                      style="font-family:courier new,monospace">
                    <span style="font-family:courier new,monospace">|
                      Float : float -&gt; float expr</span><br
                      style="font-family:courier new,monospace">
                    <br>
                    Now I want to write a parser, that will build an ['a
                    expr] from a string. Without thinking much, I tried
                    the following:<br>
                    <br>
                    <span style="font-family:courier new,monospace">let
                      parse_expr : type s. string -&gt; s expr = fun x
                      -&gt; </span><br style="font-family:courier
                      new,monospace">
                    <span style="font-family:courier new,monospace">&nbsp;
                      try Int (int_of_string x) </span><br
                      style="font-family:courier new,monospace">
                    <span style="font-family:courier new,monospace">&nbsp;
                      with _ -&gt; </span><br
                      style="font-family:courier new,monospace">
                    <span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;
                      Float (float_of_string x)<br>
                      ;;</span><br>
                    <br>
                    Which fails with the following error message:<br>
                    <br>
                    <span style="font-family:courier new,monospace">Error:

                      This expression has type int expr but an
                      expression was expected of type s expr</span><br>
                    <br>
                    That makes sense, since [s] is a locally abstract
                    type. I tried a couple of variants and finally
                    realised that I could not even write the type of
                    [parse_expr]: it should be [string -&gt; 'a expr]
                    for some ['a], but I'm not sure that really means
                    something.<br>
                    <br>
                    So to put it simple, how does one construct a GADT
                    value from a string ?<br>
                    <br>
                    Cheers,<br>
                    &nbsp; ph.<br>
                  </blockquote>
                </div>
                <br>
              </div>
            </div>
          </div>
        </blockquote>
      </div>
      <br>
    </blockquote>
    <br>
    <br>
  </body>
</html>

--------------070700080002050304030105--
