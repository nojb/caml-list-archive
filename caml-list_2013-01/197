Return-Path: <smimram@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id E22777EEAF
	for <caml-list@sympa.inria.fr>; Sun, 27 Jan 2013 17:23:49 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  smimram@gmail.com) identity=pra; client-ip=209.85.212.43;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="smimram@gmail.com";
  x-sender="smimram@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  smimram@gmail.com designates 209.85.212.43 as permitted
  sender) identity=mailfrom; client-ip=209.85.212.43;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="smimram@gmail.com";
  x-sender="smimram@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vb0-f43.google.com) identity=helo;
  client-ip=209.85.212.43;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="smimram@gmail.com";
  x-sender="postmaster@mail-vb0-f43.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap0CAA1UBVHRVdQrk2dsb2JhbAArGoZGpTyJQAGJFQgWDgEBAQEJCQsJFAQjgh4BAQQBIwQZARsSDAMBCwYDAgsaHQICIgERAQUBChIZCQkJh2MBAwkGDCyRN48Zi2RPgnuDYwoZJwMKWYh2AQUMjQiCeYETA5YNgRyNSxYpglGBSYFl
X-IronPort-AV: E=Sophos;i="4.84,547,1355094000"; 
   d="scan'208";a="191583524"
Received: from mail-vb0-f43.google.com ([209.85.212.43])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 27 Jan 2013 17:23:48 +0100
Received: by mail-vb0-f43.google.com with SMTP id fr13so1379336vbb.2
        for <caml-list@inria.fr>; Sun, 27 Jan 2013 08:23:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=x-received:mime-version:in-reply-to:references:from:date:message-id
         :subject:to:content-type;
        bh=smWRc7XKt4ItA1/0NKxBDlZpzRJH93MNyKF6M8IlrPk=;
        b=jx++VAkjqkIuqVacHz3oNE4Ih1tiTS8LCqjn4/p3hC9Js95pugApheDP+jC3fcVARj
         Dr0HcQ+mZ3VBEO+FhSLuiS0JbH2/mUYtVx09icubElCWM+rZNUJvsgZlFstccFo7HwJs
         DrSmSy5Rop9R69P5WS8qKjn3sQPkI3iiiQh70zfm5lUFaellhatFbUb607KORNtLeH9Z
         FVrcxkzgLROCi8fFqvwjgW0qr7n7DwuJlHqpyZkipYDeTadgpnXGnG9ovpI471ggmkIh
         Qyka+89k+TfatCyhfEN1t5ZACtTdMqLsU+daBU2DBbvEz+gPViZde5YBF91hArZARlYo
         vH0Q==
X-Received: by 10.220.219.204 with SMTP id hv12mr12044992vcb.71.1359303827843;
 Sun, 27 Jan 2013 08:23:47 -0800 (PST)
MIME-Version: 1.0
Received: by 10.58.247.137 with HTTP; Sun, 27 Jan 2013 08:23:26 -0800 (PST)
In-Reply-To: <1358953405.30715.2@samsung>
References: <CA+7PP=Fd3Am2ZF5KPy+Bd7wWqnJgqdd86WG4ajPvGd8oD1G-NA@mail.gmail.com>
 <1358953405.30715.2@samsung>
From: Samuel Mimram <smimram@gmail.com>
Date: Sun, 27 Jan 2013 17:23:26 +0100
Message-ID: <CA+7PP=Etrpj6Ppg=0jPupxu2JPyhjG+AgQs3FV6ELgh_i-mGMQ@mail.gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=14dae9cfcea4cce90704d44795d1
X-Validation-by: smimram@gmail.com
Subject: Re: [Caml-list] Portable timeout function


--14dae9cfcea4cce90704d44795d1
Content-Type: text/plain; charset=UTF-8

Thanks for all your answers! I really appreciated the Gc.create_alarm hack,
which does the job alright for now, but is quite imprecise. I have
submitted a feature request for addition to the standard library [1], we'll
see...

Cheers,

Samuel.

[1] http://caml.inria.fr/mantis/view.php?id=5908


On Wed, Jan 23, 2013 at 4:03 PM, Gerd Stolpmann <info@gerd-stolpmann.de>wrote:

> Am 22.01.2013 19:57:15 schrieb(en) Samuel Mimram:
>
>  Hi,
>>
>> I would like to implement a "timeout" function of type:
>>
>> float -> ('a -> 'b) -> 'a -> 'b option
>>
>> which takes a maximum number n of seconds to run, a function f, an
>> argument
>> x, and returns Some (f x) if the computation ends before n seconds and
>> None
>> otherwise. Of course, there is a simple implementation using
>> Unix.setitimer, but apparently it does not work under windows because of
>> signals implementation (and I don't have access to a windows machine...).
>> Since this is a pretty standard idom I expected to find it implemented in
>> some library, but could not find one. Also, I'd rather not heavily change
>> the code (i.e. monadic threads are not really an option here, and a small
>> function would be appreciated).
>>
>
> I think this is not possible without changes in the OCaml runtime - what
> we would need here is an emulation of signals under Windows, so that a
> timer thread could be started that finally sends the signal to the compute
> thread. However, such an emulation would be limited to pure computations,
> and would not be able to interrupt system calls (no support from Windows).
>
> As long as you know that your compute functions allocate memory, it will
> do garbage collections, and you could set a GC hook:
>
>
> exception Timeout
>
> let timer tmo f x =
>   let t0 = Unix.gettimeofday() in
>   let alarm = ref None in
>   Gc.major();
>   try
>     let al =
>       Gc.create_alarm
>         (fun () ->
>            let t1 = Unix.gettimeofday() in
>            if t1 -. t0 > tmo then raise Timeout
>         ) in
>     alarm := Some al;
>     let r = f x in
>     Gc.delete_alarm al;
>     alarm := None;
>     Some r
>   with Timeout ->
>     ( match !alarm with
>         | Some al -> Gc.delete_alarm al
>         | None -> ()
>     );
>     None
>
> But this does not work if the function does not allocate enough memory
> (and also note that there are several race conditions in "timer").
>
>
>  Extra points if your solution also works with js_of_ocaml! :)
>>
>
> I don't think that there is any support in js_of_ocaml for completely
> asynchronous events (i.e. something like the regular check for signals the
> standard runtime does).
>
> Gerd
>
>
>> Thanks!
>>
>> Regards,
>>
>> Samuel.
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/**arc/caml-list<https://sympa.inria.fr/sympa/arc/caml-list>
>> Beginner's list: http://groups.yahoo.com/group/**ocaml_beginners<http://groups.yahoo.com/group/ocaml_beginners>
>> Bug reports: http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bin/caml-bugs>
>>
>
>
>
> --
> ------------------------------**------------------------------
> Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
> Creator of GODI and camlcity.org.
> Contact details:        http://www.camlcity.org/**contact.html<http://www.camlcity.org/contact.html>
> Company homepage:       http://www.gerd-stolpmann.de
> ------------------------------**------------------------------

--14dae9cfcea4cce90704d44795d1
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks for all your answers! I really appreciated the Gc.c=
reate_alarm hack, which does the job alright for now, but is quite imprecis=
e. I have submitted a feature request for addition to the standard library =
[1], we&#39;ll see...<div>

<br></div><div>Cheers,</div><div><br></div><div>Samuel.<br><div><br></div><=
div>[1]=C2=A0<a href=3D"http://caml.inria.fr/mantis/view.php?id=3D5908">htt=
p://caml.inria.fr/mantis/view.php?id=3D5908</a><br></div></div></div><div c=
lass=3D"gmail_extra">

<br><br><div class=3D"gmail_quote">On Wed, Jan 23, 2013 at 4:03 PM, Gerd St=
olpmann <span dir=3D"ltr">&lt;<a href=3D"mailto:info@gerd-stolpmann.de" tar=
get=3D"_blank">info@gerd-stolpmann.de</a>&gt;</span> wrote:<br><blockquote =
class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
;padding-left:1ex">

Am 22.01.2013 19:57:15 schrieb(en) Samuel Mimram:<div class=3D"im"><br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Hi,<br>
<br>
I would like to implement a &quot;timeout&quot; function of type:<br>
<br>
float -&gt; (&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b option<br>
<br>
which takes a maximum number n of seconds to run, a function f, an argument=
<br>
x, and returns Some (f x) if the computation ends before n seconds and None=
<br>
otherwise. Of course, there is a simple implementation using<br>
Unix.setitimer, but apparently it does not work under windows because of<br>
signals implementation (and I don&#39;t have access to a windows machine...=
).<br>
Since this is a pretty standard idom I expected to find it implemented in<b=
r>
some library, but could not find one. Also, I&#39;d rather not heavily chan=
ge<br>
the code (i.e. monadic threads are not really an option here, and a small<b=
r>
function would be appreciated).<br>
</blockquote>
<br></div>
I think this is not possible without changes in the OCaml runtime - what we=
 would need here is an emulation of signals under Windows, so that a timer =
thread could be started that finally sends the signal to the compute thread=
. However, such an emulation would be limited to pure computations, and wou=
ld not be able to interrupt system calls (no support from Windows).<br>


<br>
As long as you know that your compute functions allocate memory, it will do=
 garbage collections, and you could set a GC hook:<br>
<br>
<br>
exception Timeout<br>
<br>
let timer tmo f x =3D<br>
=C2=A0 let t0 =3D Unix.gettimeofday() in<br>
=C2=A0 let alarm =3D ref None in<br>
=C2=A0 Gc.major();<br>
=C2=A0 try<br>
=C2=A0 =C2=A0 let al =3D<br>
=C2=A0 =C2=A0 =C2=A0 Gc.create_alarm<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 (fun () -&gt;<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0let t1 =3D Unix.gettimeofday() in<=
br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0if t1 -. t0 &gt; tmo then raise Ti=
meout<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 ) in<br>
=C2=A0 =C2=A0 alarm :=3D Some al;<br>
=C2=A0 =C2=A0 let r =3D f x in<br>
=C2=A0 =C2=A0 Gc.delete_alarm al;<br>
=C2=A0 =C2=A0 alarm :=3D None;<br>
=C2=A0 =C2=A0 Some r<br>
=C2=A0 with Timeout -&gt;<br>
=C2=A0 =C2=A0 ( match !alarm with<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 | Some al -&gt; Gc.delete_alarm al<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 | None -&gt; ()<br>
=C2=A0 =C2=A0 );<br>
=C2=A0 =C2=A0 None<br>
<br>
But this does not work if the function does not allocate enough memory (and=
 also note that there are several race conditions in &quot;timer&quot;).<di=
v class=3D"im"><br>
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Extra points if your solution also works with js_of_ocaml! :)<br>
</blockquote>
<br></div>
I don&#39;t think that there is any support in js_of_ocaml for completely a=
synchronous events (i.e. something like the regular check for signals the s=
tandard runtime does).<br>
<br>
Gerd<br>
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<br>
Thanks!<br>
<br>
Regards,<br>
<br>
Samuel.<span class=3D"HOEnZb"><font color=3D"#888888"><br>
<br>
--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/<u></u>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
</font></span></blockquote><span class=3D"HOEnZb"><font color=3D"#888888">
<br>
<br>
<br>
-- <br>
------------------------------<u></u>------------------------------<br>
Gerd Stolpmann, Darmstadt, Germany =C2=A0 =C2=A0<a href=3D"mailto:gerd@gerd=
-stolpmann.de" target=3D"_blank">gerd@gerd-stolpmann.de</a><br>
Creator of GODI and <a href=3D"http://camlcity.org" target=3D"_blank">camlc=
ity.org</a>.<br>
Contact details: =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://www.camlcity.=
org/contact.html" target=3D"_blank">http://www.camlcity.org/<u></u>contact.=
html</a><br>
Company homepage: =C2=A0 =C2=A0 =C2=A0 <a href=3D"http://www.gerd-stolpmann=
.de" target=3D"_blank">http://www.gerd-stolpmann.de</a><br>
------------------------------<u></u>------------------------------</font><=
/span></blockquote></div><br></div>

--14dae9cfcea4cce90704d44795d1--
