Return-Path: <jeannin@cs.cornell.edu>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 1F5907EEAF
	for <caml-list@sympa.inria.fr>; Fri, 18 Jan 2013 18:46:51 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  jeannin@cs.cornell.edu) identity=pra;
  client-ip=128.84.103.138;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="jeannin@cs.cornell.edu";
  x-sender="jeannin@cs.cornell.edu";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  jeannin@cs.cornell.edu) identity=mailfrom;
  client-ip=128.84.103.138;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="jeannin@cs.cornell.edu";
  x-sender="jeannin@cs.cornell.edu";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@exch-hub1.cs.cornell.edu) identity=helo;
  client-ip=128.84.103.138;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="jeannin@cs.cornell.edu";
  x-sender="postmaster@exch-hub1.cs.cornell.edu";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ag4CAPeJ+VCAVGeKiWdsb2JhbABEgkipBpMADgEBARUSFAUiD4IPAQEBBEklCgEQCxgJBBIBBwcJAwIBAgEPJAERBg0BBQIBAQ6HdQMPDK89hEkDCkyHfowJgRWEGwOILDWLVYJyhE+FTIglgUo
X-IronPort-AV: E=Sophos;i="4.84,494,1355094000"; 
   d="scan'208,217";a="168955476"
Received: from mail-hub-1.cs.cornell.edu (HELO exch-hub1.cs.cornell.edu) ([128.84.103.138])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 18 Jan 2013 18:46:49 +0100
Received: from [128.84.98.62] (128.84.98.62) by mail.cs.cornell.edu
 (128.84.103.140) with Microsoft SMTP Server (TLS) id 8.3.279.5; Fri, 18 Jan
 2013 12:46:48 -0500
Message-ID: <50F98A81.6080902@cs.cornell.edu>
Date: Fri, 18 Jan 2013 12:46:41 -0500
From: Jean-Baptiste Jeannin <jeannin@cs.cornell.edu>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.2) Gecko/20120216 Thunderbird/10.0.2
MIME-Version: 1.0
To: Nicholas Lucaroni <nicholas.r.lucaroni@gmail.com>
CC: Edgar Friendly <thelema314@gmail.com>, "caml-list@inria.fr"
	<caml-list@inria.fr>
References: <50F81A48.4080901@cs.cornell.edu> <CAB6W5F5ZKD0UT5opfQydKs2XQWeHDdb904XUdh9HS=MgO9rNZg@mail.gmail.com> <CAL-jcAmC_Jb1x3AvLJvQVA-BtEynds31mGh+VsN5DfJe8LAJbQ@mail.gmail.com> <CAB6W5F4-jfWgem1+f+khsbzD-b6ZG4+F8X7VYDjQM7ax8gTimw@mail.gmail.com>
In-Reply-To: <CAB6W5F4-jfWgem1+f+khsbzD-b6ZG4+F8X7VYDjQM7ax8gTimw@mail.gmail.com>
Content-Type: multipart/alternative;
	boundary="------------050308010900000404020105"
Subject: Re: [Caml-list] Hash function: complexity and circular structures


--------------050308010900000404020105
Content-Type: text/plain; charset="ISO-8859-1"; format=flowed
Content-Transfer-Encoding: 7bit

Thank you for your answers and suggestions. I upgraded to ocaml 4.00, 
and the update to the hash function is great and appreciated. I haven't 
studied closely hash.c yet, but I am very curious about it and will look 
at it, thanks for pointing it.

However, the hope was to be able to use a hash table with (potentially) 
circular lists as keys. And, interestingly, this does not quite work, 
even with the update of the hashing function:

let t1 = Hashtbl.create 10;;
let rec ones = 1 :: ones;;
let rec twos = 2 :: twos;;
let ones2 = 1 :: 1 :: ones;;
let rec ones3 = 1 :: 1 :: ones3;;
(* ones, ones2 and ones3 are observationally equivalent, and their hash 
is the same: *)
Hashtbl.hash ones;;
- : int = 312056965
Hashtbl.hash ones2;;
- : int = 312056965
Hashtbl.hash ones3;;
- : int = 312056965

Hashtbl.add t1 ones 1;;
Hashtbl.add t1 twos 2;;
Hashtbl.find t1 ones;;
- : int = 1 (* as expected *)

Hashtbl.add t1 ones2 11;;
Hashtbl.find t1 ones;;
- : int = 11 (* as expected *)
Hashtbl.find t1 ones2;;
- : int = 11 (* as expected *)

(* However this does not work and runs forever *)
Hashtbl.find t1 ones3;;

Looking a little bit further into the implementation of Hashtbl.find 
(available at 
https://github.com/ocaml/ocaml/blob/trunk/stdlib/hashtbl.ml), it appears 
that inside each bucket, the keys are compared using Pervasives.compare. 
Pervasives.compare halts on ones and ones2 (probably because they have 
sublists that are physically equal, though I haven't checked the 
implementation of compare), but it does not halt on ones and ones3, or 
on ones2 and ones3:

compare ones ones2;;
- : int = 0
compare ones ones3;; (* runs forever *)
compare ones2 ones3;; (* runs forever *)

I would be curious to know if this is by design (it is supposed not to 
work), or if it is a problem with the implementation of compare, or of 
Hashtbl.find. In particular, if it is by design, why have updated the 
hash function to support circular lists?
I am also now stuck on creating an (efficient) hashtable supporting 
circular data structures as keys. Any idea on this?

Thank you,
Jean-Baptiste Jeannin

On 01/17/2013 12:05 PM, Nicholas Lucaroni wrote:
> You should update to OCaml 4.xx I don't think the hash function works 
> at all on lists in 3.12.1 (in the sense that it, as you've found, it 
> always returns 0).
>
> in ocaml 4.00+rc1
> # Hashtbl.hash (6 :: 7 :: 8 :: 9 :: 10 :: 11 :: 12 :: 13:: 14 :: 15 :: 
> []);;
> - : int = 418135511
>
> in ocaml 3.12.1
> # Hashtbl.hash (6 :: 7 :: 8 :: 9 :: 10 :: 11 :: 12 :: 13:: 14 :: 15 :: 
> []);;
> - : int = 0
>
>
>
> On Thu, Jan 17, 2013 at 11:41 AM, Edgar Friendly <thelema314@gmail.com 
> <mailto:thelema314@gmail.com>> wrote:
>
>     The source is quite easy to read, and is available here:
>
>     https://github.com/ocaml/ocaml/blob/trunk/byterun/hash.c
>
>     It turns out that even seeded MurmurHash3 does not prevent
>     algorithmic attacks as expected, as demonstrated and explained at
>     29c3:
>     http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html
>     and www.youtube.com/watch?v=Vdrab3sB7MU
>     <http://www.youtube.com/watch?v=Vdrab3sB7MU>.
>
>     E.
>
>
>     On Thu, Jan 17, 2013 at 10:46 AM, Nicholas Lucaroni
>     <nicholas.r.lucaroni@gmail.com
>     <mailto:nicholas.r.lucaroni@gmail.com>> wrote:
>
>         https://sympa.inria.fr/sympa/arc/caml-list/2011-07/msg00117.html
>
>         That thread talks about the previous and a better alternative
>         (which is in 4.x).
>
>         Xavier had said,
>         /The SVN trunk for OCaml contains a complete reimplementation of the/
>         /generic hash function that addresses both issues: lists and other
>         complex keys are traversed breadth-first in a more cautious manner
>         than before, and the mixing functions are based on MurmurHash 3, which
>         exhibits very good statistical properties.  All this should go in the
>         next major release 3.13.  So, everyone with an interest in efficient
>         hash tables is welcome to try the trunk sources and let me know of any
>         problems encountered./
>
>         On Thu, Jan 17, 2013 at 10:35 AM, Jean-Baptiste Jeannin
>         <jeannin@cs.cornell.edu <mailto:jeannin@cs.cornell.edu>> wrote:
>
>             Hello,
>
>             The default OCaml function (Hashtbl.hash) says that it
>             "always terminates, even on cyclic structures.". I would
>             be curious to know what its complexity is, both on a
>             finite list and on a cyclic list (created by let rec l = 1
>             :: l for example). Is the algorithm that is being used
>             published anywhere?
>
>             Also, this hashing function seems to be returning 0 on any
>             cyclic list (at least the ones I tried). Is this normal?
>             Does anyone know any better hashing function on cyclic lists?
>
>             # Hashtbl.hash [ 1 ; 2 ];;
>             - : int = 131199
>             # let rec ones = 1 :: ones;;
>             val ones : int list =
>               [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1; 1;
>                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
>             1; 1; 1; 1; 1; 1;
>                ...]
>             # Hashtbl.hash ones;;
>             - : int = 0
>             # Hashtbl.hash (5 :: 4 :: ones);;
>             - : int = 0
>
>             Thank you,
>             Jean-Baptiste Jeannin
>
>             -- 
>             Caml-list mailing list.  Subscription management and archives:
>             https://sympa.inria.fr/sympa/arc/caml-list
>             Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>             Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>
>


--------------050308010900000404020105
Content-Type: text/html; charset="ISO-8859-1"
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Thank you for your answers and suggestions. I upgraded to ocaml
    4.00, and the update to the hash function is great and appreciated.
    I haven't studied closely hash.c yet, but I am very curious about it
    and will look at it, thanks for pointing it.<br>
    <br>
    However, the hope was to be able to use a hash table with
    (potentially) circular lists as keys. And, interestingly, this does
    not quite work, even with the update of the hashing function:<br>
    <br>
    let t1 = Hashtbl.create 10;;<br>
    let rec ones = 1 :: ones;;<br>
    let rec twos = 2 :: twos;;<br>
    let ones2 = 1 :: 1 :: ones;;<br>
    let rec ones3 = 1 :: 1 :: ones3;;<br>
    (* ones, ones2 and ones3 are observationally equivalent, and their
    hash is the same: *)<br>
    Hashtbl.hash ones;;<br>
    - : int = 312056965<br>
    Hashtbl.hash ones2;;<br>
    - : int = 312056965<br>
    Hashtbl.hash ones3;;<br>
    - : int = 312056965<br>
    <br>
    Hashtbl.add t1 ones 1;;<br>
    Hashtbl.add t1 twos 2;;<br>
    Hashtbl.find t1 ones;;<br>
    - : int = 1 (* as expected *)<br>
    <br>
    Hashtbl.add t1 ones2 11;;<br>
    Hashtbl.find t1 ones;;<br>
    - : int = 11 (* as expected *)<br>
    Hashtbl.find t1 ones2;;<br>
    - : int = 11 (* as expected *)<br>
    <br>
    (* However this does not work and runs forever *)<br>
    Hashtbl.find t1 ones3;;<br>
    <br>
    Looking a little bit further into the implementation of Hashtbl.find
    (available at
    <a class="moz-txt-link-freetext" href="https://github.com/ocaml/ocaml/blob/trunk/stdlib/hashtbl.ml">https://github.com/ocaml/ocaml/blob/trunk/stdlib/hashtbl.ml</a>), it
    appears that inside each bucket, the keys are compared using
    Pervasives.compare. Pervasives.compare halts on ones and ones2
    (probably because they have sublists that are physically equal,
    though I haven't checked the implementation of compare), but it does
    not halt on ones and ones3, or on ones2 and ones3:<br>
    <br>
    compare ones ones2;;<br>
    - : int = 0<br>
    compare ones ones3;; (* runs forever *)<br>
    compare ones2 ones3;; (* runs forever *)<br>
    <br>
    I would be curious to know if this is by design (it is supposed not
    to work), or if it is a problem with the implementation of compare,
    or of Hashtbl.find. In particular, if it is by design, why have
    updated the hash function to support circular lists?<br>
    I am also now stuck on creating an (efficient) hashtable supporting
    circular data structures as keys. Any idea on this?<br>
    <br>
    Thank you,<br>
    Jean-Baptiste Jeannin<br>
    <br>
    On 01/17/2013 12:05 PM, Nicholas Lucaroni wrote:
    <blockquote
cite="mid:CAB6W5F4-jfWgem1+f+khsbzD-b6ZG4+F8X7VYDjQM7ax8gTimw@mail.gmail.com"
      type="cite">You should update to OCaml 4.xx I don't think the hash
      function works at all on lists in 3.12.1 (in the sense that it, as
      you've found, it always returns 0).
      <div><br>
      </div>
      <div>in ocaml 4.00+rc1</div>
      <div>
        <div># Hashtbl.hash (6 :: 7 :: 8 :: 9 :: 10 :: 11 :: 12 :: 13::
          14 :: 15 :: []);;</div>
        <div>- : int = 418135511</div>
      </div>
      <div>
        <div><br>
        </div>
        <div>in ocaml 3.12.1</div>
        <div># Hashtbl.hash (6 :: 7 :: 8 :: 9 :: 10 :: 11 :: 12 :: 13::
          14 :: 15 :: []);;</div>
        <div>- : int = 0</div>
      </div>
      <div><br>
      </div>
      <div><br>
      </div>
      <div><br>
      </div>
      <div>
        <div>
          <div class="gmail_quote">On Thu, Jan 17, 2013 at 11:41 AM,
            Edgar Friendly <span dir="ltr">&lt;<a
                moz-do-not-send="true"
                href="mailto:thelema314@gmail.com" target="_blank">thelema314@gmail.com</a>&gt;</span>
            wrote:<br>
            <blockquote class="gmail_quote" style="margin:0 0 0
              .8ex;border-left:1px #ccc solid;padding-left:1ex">
              <div dir="ltr">
                <div>
                  <div>The source is quite easy to read, and is
                    available here:<br>
                    <br>
                    <a moz-do-not-send="true"
                      href="https://github.com/ocaml/ocaml/blob/trunk/byterun/hash.c"
                      target="_blank">https://github.com/ocaml/ocaml/blob/trunk/byterun/hash.c</a><br>
                    <br>
                  </div>
                  It turns out that even seeded MurmurHash3 does not
                  prevent algorithmic attacks as expected, as
                  demonstrated and explained at 29c3: <a
                    moz-do-not-send="true"
                    href="http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html"
                    target="_blank">http://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html</a>
                  and <a moz-do-not-send="true"
                    href="http://www.youtube.com/watch?v=Vdrab3sB7MU"
                    target="_blank">www.youtube.com/watch?v=Vdrab3sB7MU</a>.<span
                    class="HOEnZb"><font color="#888888"><br>
                      <br>
                      E.<cite><br>
                      </cite></font></span></div>
              </div>
              <div class="HOEnZb">
                <div class="h5">
                  <div class="gmail_extra"><br>
                    <br>
                    <div class="gmail_quote">On Thu, Jan 17, 2013 at
                      10:46 AM, Nicholas Lucaroni <span dir="ltr">&lt;<a
                          moz-do-not-send="true"
                          href="mailto:nicholas.r.lucaroni@gmail.com"
                          target="_blank">nicholas.r.lucaroni@gmail.com</a>&gt;</span>
                      wrote:<br>
                      <blockquote class="gmail_quote" style="margin:0 0
                        0 .8ex;border-left:1px #ccc
                        solid;padding-left:1ex"><a
                          moz-do-not-send="true"
                          href="https://sympa.inria.fr/sympa/arc/caml-list/2011-07/msg00117.html"
                          target="_blank">https://sympa.inria.fr/sympa/arc/caml-list/2011-07/msg00117.html</a>
                        <div>
                          <br>
                        </div>
                        <div>That thread talks about the previous and a
                          better alternative (which is in 4.x).&nbsp;</div>
                        <div><br>
                        </div>
                        <div>Xavier had said,</div>
                        <div><i><span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">The&nbsp;SVN&nbsp;trunk&nbsp;for&nbsp;OCaml&nbsp;contains&nbsp;a&nbsp;complete&nbsp;reimplementation&nbsp;of&nbsp;the</span></i><br>
                          <i><span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">generic&nbsp;hash&nbsp;function&nbsp;that&nbsp;addresses&nbsp;both&nbsp;issues:&nbsp;lists&nbsp;and&nbsp;other</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">complex&nbsp;keys&nbsp;are&nbsp;traversed&nbsp;breadth-first&nbsp;in&nbsp;a&nbsp;more&nbsp;cautious&nbsp;manner</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">than&nbsp;before,&nbsp;and&nbsp;the&nbsp;mixing&nbsp;functions&nbsp;are&nbsp;based&nbsp;on&nbsp;MurmurHash&nbsp;3,&nbsp;which</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">exhibits&nbsp;very&nbsp;good&nbsp;statistical&nbsp;properties.&nbsp;&nbsp;All&nbsp;this&nbsp;should&nbsp;go&nbsp;in&nbsp;the</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">next&nbsp;major&nbsp;release&nbsp;3.13.&nbsp;&nbsp;So,&nbsp;everyone&nbsp;with&nbsp;an&nbsp;interest&nbsp;in&nbsp;efficient</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">hash&nbsp;tables&nbsp;is&nbsp;welcome&nbsp;to&nbsp;try&nbsp;the&nbsp;trunk&nbsp;sources&nbsp;and&nbsp;let&nbsp;me&nbsp;know&nbsp;of&nbsp;any</span><br
                              style="color:rgb(51,51,51);font-size:11px;margin:0px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif;padding:0px;border:0px
                              solid rgb(153,153,153)">
                            <span
                              style="color:rgb(51,51,51);font-size:11px;font-family:'Trebuchet
                              MS',Myriad,'Gill Sans','Century
                              Gothic','Bitstream Vera
                              Sans',verdana,lucida,arial,helvetica,sans-serif">problems&nbsp;encountered.</span></i></div>
                        <div>
                          <div>
                            <br>
                            <div class="gmail_quote">On Thu, Jan 17,
                              2013 at 10:35 AM, Jean-Baptiste Jeannin <span
                                dir="ltr">&lt;<a moz-do-not-send="true"
                                  href="mailto:jeannin@cs.cornell.edu"
                                  target="_blank">jeannin@cs.cornell.edu</a>&gt;</span>
                              wrote:<br>
                              <blockquote class="gmail_quote"
                                style="margin:0 0 0 .8ex;border-left:1px
                                #ccc solid;padding-left:1ex">
                                Hello,<br>
                                <br>
                                The default OCaml function
                                (Hashtbl.hash) says that it "always
                                terminates, even on cyclic structures.".
                                I would be curious to know what its
                                complexity is, both on a finite list and
                                on a cyclic list (created by let rec l =
                                1 :: l for example). Is the algorithm
                                that is being used published anywhere?<br>
                                <br>
                                Also, this hashing function seems to be
                                returning 0 on any cyclic list (at least
                                the ones I tried). Is this normal? Does
                                anyone know any better hashing function
                                on cyclic lists?<br>
                                <br>
                                # Hashtbl.hash [ 1 ; 2 ];;<br>
                                - : int = 131199<br>
                                # let rec ones = 1 :: ones;;<br>
                                val ones : int list =<br>
                                &nbsp; [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
                                1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;<br>
                                &nbsp; &nbsp;...]<br>
                                # Hashtbl.hash ones;;<br>
                                - : int = 0<br>
                                # Hashtbl.hash (5 :: 4 :: ones);;<br>
                                - : int = 0<br>
                                <br>
                                Thank you,<br>
                                Jean-Baptiste Jeannin<span><font
                                    color="#888888"><br>
                                    <br>
                                    -- <br>
                                    Caml-list mailing list.
                                    &nbsp;Subscription management and
                                    archives:<br>
                                    <a moz-do-not-send="true"
                                      href="https://sympa.inria.fr/sympa/arc/caml-list"
                                      target="_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
                                    Beginner's list: <a
                                      moz-do-not-send="true"
                                      href="http://groups.yahoo.com/group/ocaml_beginners"
                                      target="_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
                                    Bug reports: <a
                                      moz-do-not-send="true"
                                      href="http://caml.inria.fr/bin/caml-bugs"
                                      target="_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
                                  </font></span></blockquote>
                            </div>
                            <br>
                          </div>
                        </div>
                      </blockquote>
                    </div>
                    <br>
                  </div>
                </div>
              </div>
            </blockquote>
          </div>
          <br>
        </div>
      </div>
    </blockquote>
    <br>
  </body>
</html>

--------------050308010900000404020105--
