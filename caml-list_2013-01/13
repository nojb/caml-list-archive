Return-Path: <nanaki@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 84C477EE94
	for <caml-list@sympa.inria.fr>; Fri,  4 Jan 2013 23:00:12 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  nanaki@gmail.com) identity=pra; client-ip=209.85.212.41;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="nanaki@gmail.com";
  x-sender="nanaki@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  nanaki@gmail.com designates 209.85.212.41 as permitted
  sender) identity=mailfrom; client-ip=209.85.212.41;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="nanaki@gmail.com";
  x-sender="nanaki@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vb0-f41.google.com) identity=helo;
  client-ip=209.85.212.41;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="nanaki@gmail.com";
  x-sender="postmaster@mail-vb0-f41.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuoBAK5P51DRVdQpk2dsb2JhbABFuWGDZAgWDgEBAQEJCQsJFAQjgh4BAQQBJxkBGx0BAwELBgULDS4hAQERAQUBHAYTiAEBAwYDBgyYTIwzgnuEQQoZJwwBWYV9AQEEDItchS0DiGGLVIFWizeDMRYphDc
X-IronPort-AV: E=Sophos;i="4.84,412,1355094000"; 
   d="scan'208";a="188512613"
Received: from mail-vb0-f41.google.com ([209.85.212.41])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Jan 2013 23:00:11 +0100
Received: by mail-vb0-f41.google.com with SMTP id l22so17169143vbn.28
        for <caml-list@inria.fr>; Fri, 04 Jan 2013 14:00:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=+JFZ1/MGSIB2R08qhiGpC1UvMUYo4WD0mOZn0bzAyRQ=;
        b=PPZj1UsciCe6GtAfeMHapmtJq/GzLki9Q+Iur9E20DSxqcImk8Yn6lCtsF66eJtXyl
         bFz+wkXhw7V7NVjRwt1cRJW3nA/opAT8YyglhhfDXrS7+acUbEEMC0Cgr6XaLTOjavog
         j1pC3WxxanPfEG6AIPxC33G0OfNUgrFv+DrGlI5hdOGf54lI+T8DlRlxgvLwb8R7Egr1
         tXKJcj5iBqEyEpvGRbfyuAvRMpll23x7vbXPnlJPtEr4w8qXpskYZYbmHUf0fRE/0bkS
         Ub6+HbHenSE5R+DSolg+NjMoFBxz4ee+JuHlDsws2swS61H8F7JYNIkufM84vJRdQkBr
         EiaA==
MIME-Version: 1.0
Received: by 10.221.2.69 with SMTP id nt5mr77782649vcb.68.1357336810420; Fri,
 04 Jan 2013 14:00:10 -0800 (PST)
Received: by 10.58.161.170 with HTTP; Fri, 4 Jan 2013 14:00:10 -0800 (PST)
In-Reply-To: <CAOOOohRJhF2Fxy0XhNbzSS+aFXpK04zRDjqeSJtKXaB0MYwsuw@mail.gmail.com>
References: <CAOOOohSPem8vpMbDCs3GG3nHGQutoq8xiGXcRc62fgeO3EL8rQ@mail.gmail.com>
	<CAEDxudyF8tXkoLc5a8XoSOUfGvH01VKBAHOmLQ5XbZAPrGkkBw@mail.gmail.com>
	<CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com>
	<50E701D3.9070008@free.fr>
	<CAOOOohRJhF2Fxy0XhNbzSS+aFXpK04zRDjqeSJtKXaB0MYwsuw@mail.gmail.com>
Date: Fri, 4 Jan 2013 14:00:10 -0800
Message-ID: <CAHaHOqQkG1VXwn+DqDd6kwuKYta4jhsG07aUQJqWSa-gt-qD0g@mail.gmail.com>
From: Jeff Meister <nanaki@gmail.com>
To: Philippe Veber <philippe.veber@gmail.com>
Cc: Tiphaine Turpin <Tiphaine.Turpin@free.fr>, Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=90e6ba211fbf6cfb2504d27d9a68
Subject: Re: [Caml-list] [GADT noob question] Building a GADT from an
 untyped representation


--90e6ba211fbf6cfb2504d27d9a68
Content-Type: text/plain; charset=ISO-8859-1

However, by using an existential type like that, you're losing the
additional type checking benefits of GADTs. The return type of parse_expr
is now any_expr, not 'a expr. You can write e.g. the function
extract_int_value : int expr -> int, where OCaml knows you don't need to
match the Float case, but you'll never have an int expr to pass to this
function, at least not as a result of parsing. Anything handling a parsed
any_expr must match the Expr case, which of course can have any expr
inside. At this point, it seems like just a cumbersome way to write the
traditional expr type.

I went through basically this same thought process while trying to
understand how I could apply the new OCaml GADT features, and I concluded
that GADTs weren't providing any extra utility in the case where they must
be constructed by parsing an input string. That's a shame since parsing and
transformation is such a canonical use of OCaml, so I would love to be
proven wrong here!


On Fri, Jan 4, 2013 at 9:25 AM, Philippe Veber <philippe.veber@gmail.com>wrote:

> This is pretty much what I asked for, thanks Tiphaine!
> ph.
>
>
> 2013/1/4 Tiphaine Turpin <Tiphaine.Turpin@free.fr>
>
>>  Hi Philippe,
>>
>> I don't think that you can achieve what you are you are asking exactly,
>> unless ressorting to an existential type. You can do it using GADT too, as
>> described in the "existential types" section of
>>
>> https://sites.google.com/site/ocamlgadt/
>>
>> For your example, you can write:
>>
>> type any_expr =
>>   | Expr : _ expr -> any_expr
>> ;;
>>
>> let parse_expr x =
>>   try Expr (Int (int_of_string x))
>>   with _ ->
>>     Expr (Float (float_of_string x))
>> ;;
>>
>> Cheers,
>>
>> Tiphaine
>>
>>
>> On 01/04/13 16:05, Philippe Veber wrote:
>>
>> Hi Yury,
>>
>> Thanks for your answer! It is true your fix is accepted by the compiler,
>> but this is not what I was looking for: in the end I'd like to have an 'a
>> expr such that 'a is the type of the value obtained when evaluating the
>> expression. With the polymorphic variants, I cannot write an eval function
>> of type 'a eval -> 'a, which is the main motivation behind using GADT in
>> that (canonical) case. Sorry for ommiting this point!
>>
>> ph.
>>
>>
>> 2013/1/4 Yury Sulsky <yury.sulsky@gmail.com>
>>
>>> Hi Philippe,
>>>
>>>  I think you can do this by using a polymorphic variant as the type
>>> variable:
>>>
>>>  type _ expr =
>>> | Int : int -> [> `int ] expr
>>> | Float : float -> [> `float ] expr
>>>
>>>   let parse_expr : string -> [ `int | `float ] expr = fun x ->
>>>    try Int (int_of_string x)
>>>   with _ ->
>>>     Float (float_of_string x)
>>> ;;
>>>
>>>   - Yury
>>>
>>>
>>>
>>> On Fri, Jan 4, 2013 at 8:32 AM, Philippe Veber <philippe.veber@gmail.com
>>> > wrote:
>>>
>>>> Dear list,
>>>>
>>>> Suppose I define a GADT for expressions:
>>>>
>>>> type _ expr =
>>>> | Int : int -> int expr
>>>> | Float : float -> float expr
>>>>
>>>> Now I want to write a parser, that will build an ['a expr] from a
>>>> string. Without thinking much, I tried the following:
>>>>
>>>> let parse_expr : type s. string -> s expr = fun x ->
>>>>   try Int (int_of_string x)
>>>>   with _ ->
>>>>     Float (float_of_string x)
>>>> ;;
>>>>
>>>> Which fails with the following error message:
>>>>
>>>> Error: This expression has type int expr but an expression was expected
>>>> of type s expr
>>>>
>>>> That makes sense, since [s] is a locally abstract type. I tried a
>>>> couple of variants and finally realised that I could not even write the
>>>> type of [parse_expr]: it should be [string -> 'a expr] for some ['a], but
>>>> I'm not sure that really means something.
>>>>
>>>> So to put it simple, how does one construct a GADT value from a string ?
>>>>
>>>> Cheers,
>>>>   ph.
>>>>
>>>
>>>
>>
>>
>>
>

--90e6ba211fbf6cfb2504d27d9a68
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>However, by using an existential type like that, you&=
#39;re losing the additional type checking benefits of GADTs. The return ty=
pe of parse_expr is now any_expr, not &#39;a expr. You can write e.g. the f=
unction extract_int_value : int expr -&gt; int, where OCaml knows you don&#=
39;t need to match the Float case, but you&#39;ll never have an int expr to=
 pass to this function, at least not as a result of parsing. Anything handl=
ing a parsed any_expr must match the Expr case, which of course can have an=
y expr inside. At this point, it seems like just a cumbersome way to write =
the traditional expr type.<br>
<br></div>I went through basically this same thought process while trying t=
o understand how I could apply the new OCaml GADT features, and I concluded=
 that GADTs weren&#39;t providing any extra utility in the case where they =
must be constructed by parsing an input string. That&#39;s a shame since pa=
rsing and transformation is such a canonical use of OCaml, so I would love =
to be proven wrong here!<br>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri,=
 Jan 4, 2013 at 9:25 AM, Philippe Veber <span dir=3D"ltr">&lt;<a href=3D"ma=
ilto:philippe.veber@gmail.com" target=3D"_blank">philippe.veber@gmail.com</=
a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">This is pretty much what I asked for, thanks=
 Tiphaine!<br>ph.<div class=3D"HOEnZb"><div class=3D"h5"><br><br><div class=
=3D"gmail_quote">
2013/1/4 Tiphaine Turpin <span dir=3D"ltr">&lt;<a href=3D"mailto:Tiphaine.T=
urpin@free.fr" target=3D"_blank">Tiphaine.Turpin@free.fr</a>&gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
=20=20
=20=20=20=20
=20=20
  <div text=3D"#000000" bgcolor=3D"#FFFFFF"><div>
    Hi Philippe,<br>
    <br>
    I don&#39;t think that you can achieve what you are you are asking
    exactly, unless ressorting to an existential type. You can do it
    using GADT too, as described in the &quot;existential types&quot; secti=
on of<br>
    <br>
    <a href=3D"https://sites.google.com/site/ocamlgadt/" target=3D"_blank">=
https://sites.google.com/site/ocamlgadt/</a><br>
    <br>
    For your example, you can write:<br>
    <br>
    type any_expr =3D<br>
    =A0 | Expr : _ expr -&gt; any_expr<br>
    ;;<br>
    <br>
    let parse_expr x =3D<br>
    =A0 try Expr (Int (int_of_string x))<br>
    =A0 with _ -&gt;<br>
    =A0=A0=A0 Expr (Float (float_of_string x))<br>
    ;;<br>
    <br>
    Cheers,<br>
    <br>
    Tiphaine<br>
    <br>
    <br>
    On 01/04/13 16:05, Philippe Veber wrote:
    </div><div><div><blockquote type=3D"cite">Hi Yury,<br>
      <br>
      Thanks for your answer! It is true your fix is accepted by the
      compiler, but this is not what I was looking for: in the end I&#39;d
      like to have an &#39;a expr such that &#39;a is the type of the value
      obtained when evaluating the expression. With the polymorphic
      variants, I cannot write an eval function of type &#39;a eval -&gt;
      &#39;a, which is the main motivation behind using GADT in that
      (canonical) case. Sorry for ommiting this point!<br>
      <br>
      ph.<br>
      <br>
      <br>
      <div class=3D"gmail_quote">2013/1/4 Yury Sulsky <span dir=3D"ltr">&lt=
;<a href=3D"mailto:yury.sulsky@gmail.com" target=3D"_blank">yury.sulsky@gma=
il.com</a>&gt;</span><br>
        <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border=
-left:1px #ccc solid;padding-left:1ex">
          <div dir=3D"ltr">Hi Philippe,
            <div><br>
            </div>
            <div>I think you can do this by using a polymorphic variant
              as the type variable:</div>
            <div>
              <div><br>
              </div>
              <div>type _ expr =3D</div>
              <div>| Int : int -&gt; [&gt; `int ] expr</div>
              <div>| Float : float -&gt; [&gt; `float ] expr</div>
              <div><br>
              </div>
            </div>
            <div>
              <div>let parse_expr : string -&gt; [ `int | `float ] expr
                =3D fun x -&gt;=A0</div>
              <div>
                <div>=A0 try Int (int_of_string x)=A0</div>
                <div>=A0 with _ -&gt;=A0</div>
                <div>=A0 =A0 Float (float_of_string x)</div>
                <div>;; =A0 =A0 =A0 =A0=A0</div>
                <div><br>
                </div>
              </div>
              <span><font color=3D"#888888">
                  <div>- Yury</div>
                  <div><br>
                  </div>
                </font></span></div>
          </div>
          <div>
            <div>
              <div class=3D"gmail_extra"><br>
                <br>
                <div class=3D"gmail_quote">On Fri, Jan 4, 2013 at 8:32 AM,
                  Philippe Veber <span dir=3D"ltr">&lt;<a href=3D"mailto:ph=
ilippe.veber@gmail.com" target=3D"_blank">philippe.veber@gmail.com</a>&gt;<=
/span>
                  wrote:<br>
                  <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex">Dear

                    list,<br>
                    <br>
                    Suppose I define a GADT for expressions:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">type
                      _ expr =3D </span><br style=3D"font-family:courier ne=
w,monospace">
                    <span style=3D"font-family:courier new,monospace">|
                      Int : int -&gt; int expr </span><br style=3D"font-fam=
ily:courier new,monospace">
                    <span style=3D"font-family:courier new,monospace">|
                      Float : float -&gt; float expr</span><br style=3D"fon=
t-family:courier new,monospace">
                    <br>
                    Now I want to write a parser, that will build an [&#39;a
                    expr] from a string. Without thinking much, I tried
                    the following:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">let
                      parse_expr : type s. string -&gt; s expr =3D fun x
                      -&gt; </span><br style=3D"font-family:courier new,mon=
ospace">
                    <span style=3D"font-family:courier new,monospace">=A0
                      try Int (int_of_string x) </span><br style=3D"font-fa=
mily:courier new,monospace">
                    <span style=3D"font-family:courier new,monospace">=A0
                      with _ -&gt; </span><br style=3D"font-family:courier =
new,monospace">
                    <span style=3D"font-family:courier new,monospace">=A0=
=A0=A0
                      Float (float_of_string x)<br>
                      ;;</span><br>
                    <br>
                    Which fails with the following error message:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">Error:

                      This expression has type int expr but an
                      expression was expected of type s expr</span><br>
                    <br>
                    That makes sense, since [s] is a locally abstract
                    type. I tried a couple of variants and finally
                    realised that I could not even write the type of
                    [parse_expr]: it should be [string -&gt; &#39;a expr]
                    for some [&#39;a], but I&#39;m not sure that really mea=
ns
                    something.<br>
                    <br>
                    So to put it simple, how does one construct a GADT
                    value from a string ?<br>
                    <br>
                    Cheers,<br>
                    =A0 ph.<br>
                  </blockquote>
                </div>
                <br>
              </div>
            </div>
          </div>
        </blockquote>
      </div>
      <br>
    </blockquote>
    <br>
    <br>
  </div></div></div>

</blockquote></div><br>
</div></div></blockquote></div><br></div>

--90e6ba211fbf6cfb2504d27d9a68--
