Return-Path: <trigger0219@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id D848D7EEB3
	for <caml-list@sympa.inria.fr>; Fri, 18 Jan 2013 21:11:55 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  trigger0219@gmail.com) identity=pra;
  client-ip=209.85.220.177;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="trigger0219@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  trigger0219@gmail.com designates 209.85.220.177 as permitted
  sender) identity=mailfrom; client-ip=209.85.220.177;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="trigger0219@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vc0-f177.google.com) identity=helo;
  client-ip=209.85.220.177;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="postmaster@mail-vc0-f177.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqIBADSs+VDRVdyxm2dsb2JhbABEvjIIFg4BAQEBAQgJCwkUJ4IeAQEEAUABGx0BAwELAQUFBAcNLiEBAREBBQEcBhOIBgEDCQaeeIw0gnuFBAoZJw1Zh38BBQyLfYUwA4hhi1WBVos3gzEWKYFYgl0
X-IronPort-AV: E=Sophos;i="4.84,494,1355094000"; 
   d="scan'208";a="168965002"
Received: from mail-vc0-f177.google.com ([209.85.220.177])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Jan 2013 21:11:55 +0100
Received: by mail-vc0-f177.google.com with SMTP id fo14so3755703vcb.8
        for <caml-list@inria.fr>; Fri, 18 Jan 2013 12:11:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=x-received:mime-version:sender:in-reply-to:references:from:date
         :x-google-sender-auth:message-id:subject:to:cc:content-type;
        bh=sbj4jyqYJJgftZIQVN4BS3XM/14Q2VPkhPK/SpOoE/U=;
        b=rmTFeZVxnx62QvoflUWSYiyDYnzTN319Ed9TOqrjjP4lhXt3g4kOS8avpdQ4TaxSmD
         6AXjoC3mQDjsd86iSbgPbS4lylUi6GJgdFEvm/I7nhNlsYBHl+Nm6xWzCOumSLNN8vqe
         SwUEbLAgTW1X5ifj1IVpROSkmn883wko8QfYVOYt7Gny3zQhuDXH1KocYx4BFh6s8v97
         IvA0jPCERBrWFOmSjiMWhRxq1uqQxlLMxWPQ0NBRe1+jtkE4PwDZHvtPY/zpLQJx9MXC
         wzn1MTTGVgxYpvcxLcpc1HvcAY1lfy/b4v3uM8Qv8Cannu4B6FQ7LkYnjYqTS6WxeCno
         ssfg==
X-Received: by 10.220.142.74 with SMTP id p10mr11045607vcu.63.1358539913828;
 Fri, 18 Jan 2013 12:11:53 -0800 (PST)
MIME-Version: 1.0
Sender: trigger0219@gmail.com
Received: by 10.220.115.81 with HTTP; Fri, 18 Jan 2013 12:11:13 -0800 (PST)
In-Reply-To: <CAPFanBGqAdTe2uujQGtxYVrj-W5Y_Ez0Xu0_fgrY2OttekYzgw@mail.gmail.com>
References: <50F81A48.4080901@cs.cornell.edu> <CAB6W5F5ZKD0UT5opfQydKs2XQWeHDdb904XUdh9HS=MgO9rNZg@mail.gmail.com>
 <CAL-jcAmC_Jb1x3AvLJvQVA-BtEynds31mGh+VsN5DfJe8LAJbQ@mail.gmail.com>
 <CAB6W5F4-jfWgem1+f+khsbzD-b6ZG4+F8X7VYDjQM7ax8gTimw@mail.gmail.com>
 <50F98A81.6080902@cs.cornell.edu> <CAPFanBGqAdTe2uujQGtxYVrj-W5Y_Ez0Xu0_fgrY2OttekYzgw@mail.gmail.com>
From: Nick Lucaroni <nicholas.r.lucaroni@gmail.com>
Date: Fri, 18 Jan 2013 15:11:13 -0500
X-Google-Sender-Auth: 7iFVJTEYqwBM685Kxj9pzeWOYW8
Message-ID: <CAADdkeKekiKqpLXpNKk9Eo3AhGSdnH1aMq58xsSc+60gE5_5VQ@mail.gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: Jean-Baptiste Jeannin <jeannin@cs.cornell.edu>, Edgar Friendly <thelema314@gmail.com>, 
	"caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0434bf54fa196404d395b827
Subject: Re: [Caml-list] Hash function: complexity and circular structures


--f46d0434bf54fa196404d395b827
Content-Type: text/plain; charset=ISO-8859-1

Calling find from the values ones and ones2 work because the compare
function does a physical comparison before structural comparison and both
of these values are derived from the same list you used as the key. So as
the structural comparison affirms the physical differences between the two
types, a physical comparison ends the loop of the recursive structure. And
this is also why looking up ones3 will result in an infinite loop of
comparisons.

You can implement your own comparison algorithm in the equal function of
the Hashtbl.HashedType module for the Hashtbl.Make functor if you must
proceed with cyclic lists in this fashion as keys. But as Gabriel has said,
you should look at a different data-structures.


On Fri, Jan 18, 2013 at 1:27 PM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> A blunt point of view: comparing implicitly circular structures is a
> sure road to hell, and you should use an explicit representation of
> circularity (eg. with a element that just means "nothing here, you
> should rewind to the other side") that will not blow up at each
> occasion it gets -- and is generally much more flexible.
>
> On Fri, Jan 18, 2013 at 6:46 PM, Jean-Baptiste Jeannin
> <jeannin@cs.cornell.edu> wrote:
> >
> > I would be curious to know if this is by design (it is supposed not to
> > work), or if it is a problem with the implementation of compare, or of
> > Hashtbl.find. In particular, if it is by design, why have updated the
> hash
> > function to support circular lists?
> > I am also now stuck on creating an (efficient) hashtable supporting
> circular
> > data structures as keys. Any idea on this?
>

--f46d0434bf54fa196404d395b827
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div>Calling find from the values ones and ones2 work because the compare f=
unction does a physical comparison before structural comparison and both of=
 these values are derived from the same list you used as the key. So as the=
 structural comparison affirms the physical differences between the two typ=
es, a physical comparison ends the loop of the recursive structure. And thi=
s is also why looking up ones3 will result in an infinite loop of compariso=
ns.</div>

<div>
<div><br></div><div>You can implement your own comparison algorithm in the =
equal function of the Hashtbl.HashedType module for the Hashtbl.Make functo=
r if you must proceed with cyclic lists in this fashion as keys. But as Gab=
riel has said, you should look at a different data-structures.</div>

<div><br></div>

<div><br><div class=3D"gmail_quote">On Fri, Jan 18, 2013 at 1:27 PM, Gabrie=
l Scherer <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.scherer@gmail.com=
" target=3D"_blank">gabriel.scherer@gmail.com</a>&gt;</span> wrote:<br><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #c=
cc solid;padding-left:1ex">



A blunt point of view: comparing implicitly circular structures is a<br>
sure road to hell, and you should use an explicit representation of<br>
circularity (eg. with a element that just means &quot;nothing here, you<br>
should rewind to the other side&quot;) that will not blow up at each<br>
occasion it gets -- and is generally much more flexible.<br>
<div><div><br>
On Fri, Jan 18, 2013 at 6:46 PM, Jean-Baptiste Jeannin<br>
&lt;<a href=3D"mailto:jeannin@cs.cornell.edu" target=3D"_blank">jeannin@cs.=
cornell.edu</a>&gt; wrote:<br>
&gt;<br>
&gt; I would be curious to know if this is by design (it is supposed not to=
<br>
&gt; work), or if it is a problem with the implementation of compare, or of=
<br>
&gt; Hashtbl.find. In particular, if it is by design, why have updated the =
hash<br>
&gt; function to support circular lists?<br>
&gt; I am also now stuck on creating an (efficient) hashtable supporting ci=
rcular<br>
&gt; data structures as keys. Any idea on this?<br>
</div></div></blockquote></div><br></div>
</div>

--f46d0434bf54fa196404d395b827--
