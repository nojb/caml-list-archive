Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 573777F2E5
	for <caml-list@sympa.inria.fr>; Tue,  8 Jan 2013 12:01:20 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=209.85.223.170;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  philippe.veber@gmail.com designates 209.85.223.170 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.223.170;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ie0-f170.google.com) identity=helo;
  client-ip=209.85.223.170;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-ie0-f170.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmgBACb761DRVd+qm2dsb2JhbABEvU4IFg4BAQEBAQgJCwkUJ4IeAQEEAScZARsdAQMBCwYFCw0uIQEBEQEFARwGE4gEAQMJBptkjDOBcYEKhH8KGScNWYV2AQUMi1yFLQOUNYFWizeDMRYphBc
X-IronPort-AV: E=Sophos;i="4.84,430,1355094000"; 
   d="scan'208";a="188892530"
Received: from mail-ie0-f170.google.com ([209.85.223.170])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Jan 2013 12:01:19 +0100
Received: by mail-ie0-f170.google.com with SMTP id k10so302440iea.29
        for <caml-list@inria.fr>; Tue, 08 Jan 2013 03:01:18 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=x-received:mime-version:in-reply-to:references:from:date:message-id
         :subject:to:cc:content-type;
        bh=ZCMcn1yzykhAcKJKhqK2RpEFIyLiLZqW1wL8ESuEzb8=;
        b=0YKqiVNPUnYOE3ZDOIw28v/WbQru3q2IvTgDkvf1OrBcJz0v4lV9TMa/mbhTJKvLHR
         D1L8QySkt85ubD+fpThoOyUSxjICMgJQ4d/E38as8wLMsF9GozYdYbAjotz29lRIyHBq
         G5bGCBdsCTrpgagu8PJRHT1e8vnzCwnGoppaRcUMY/PS9zMo6/mlFkz/YvukwxtiS5E7
         7ocfXC/fbhTpjjMHXpCdVKltsp1BJtH1kG0dX3rvHVzESC5w0Im0QCvMv11Ei2cUES6E
         ww1qG3vkiWUIWb5tFptG0K23QVUsjUh+nwW5GGI25dHwcYHTuPG99bJCtyP4Stx14kkK
         kQTA==
X-Received: by 10.50.53.175 with SMTP id c15mr8410646igp.106.1357642878028;
 Tue, 08 Jan 2013 03:01:18 -0800 (PST)
MIME-Version: 1.0
Received: by 10.64.6.226 with HTTP; Tue, 8 Jan 2013 03:00:57 -0800 (PST)
In-Reply-To: <CAAxsn=HnM9szid1o5hkRTjvS79_8OJh+TeJ77V2A+r76Ordg4Q@mail.gmail.com>
References: <CAOOOohSPem8vpMbDCs3GG3nHGQutoq8xiGXcRc62fgeO3EL8rQ@mail.gmail.com>
 <CAEDxudyF8tXkoLc5a8XoSOUfGvH01VKBAHOmLQ5XbZAPrGkkBw@mail.gmail.com>
 <CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com>
 <50E701D3.9070008@free.fr> <CAOOOohRJhF2Fxy0XhNbzSS+aFXpK04zRDjqeSJtKXaB0MYwsuw@mail.gmail.com>
 <CAHaHOqQkG1VXwn+DqDd6kwuKYta4jhsG07aUQJqWSa-gt-qD0g@mail.gmail.com>
 <CAAxsn=G+CtAHhzOqmgxN=fo+VGFg2QzAxiHxTQC8ncKavuhRAw@mail.gmail.com>
 <CAOOOohSbMJYR8n1wDBHysf-1GqrquOkG-dt0yAV9E3vQBCEfdw@mail.gmail.com> <CAAxsn=HnM9szid1o5hkRTjvS79_8OJh+TeJ77V2A+r76Ordg4Q@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Tue, 8 Jan 2013 12:00:57 +0100
Message-ID: <CAOOOohQi9XpOmmwDMJgoOCrDV4ONN4kEYkzUG8Dh+NfoUYG+-Q@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: Jeff Meister <nanaki@gmail.com>, Tiphaine Turpin <Tiphaine.Turpin@free.fr>, 
	Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d04339b147a0aca04d2c4ddb4
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] [GADT noob question] Building a GADT from an
 untyped representation


--f46d04339b147a0aca04d2c4ddb4
Content-Type: text/plain; charset=ISO-8859-1

Now it looks super nice!
Thanks a lot Jeremy, your explanations were really helpful!
ph.

2013/1/5 Jeremy Yallop <yallop@gmail.com>

> On 5 January 2013 13:40, Philippe Veber <philippe.veber@gmail.com> wrote:
> > I still have a question though: what is the exact meaning of the _
> > character in the polymorphic type "< rn : 'a. int * 'a expr -> _>"
> > and how is it useful/necessary for your example to run?
>
> It's analogous to '_' in patterns: a kind of anonymous type variable
> that you can use to avoid giving a name to a type.  (As with "_" in
> patterns, there"s no connection between occurrences of "_", so "_ *
> int -> _" means "'a * int -> 'b", not "'a * int -> 'a", for example.)
>
> It's not doing anything special here: you could equally give a name to
> the type without changing the meaning of the code.
>
> > Could your example be written without a record/object type using
> > polymorphic type annotations for functions?
>
> I don't believe it's possible to make function arguments polymorphic
> using annotations.  However, the code can be significantly simplified
> to remove that bit of polymorphism altogether.  As written it mixes
> two techniques for hiding the type index in the expression GADT during
> parsing: CPS (in the inner 'parse' function) and an existential type
> (in the return type of 'parse_expr').  In fact, either of these
> approaches in isolation is sufficient.  Here's a more direct
> implementation using only the existential:
>
> (* Well-typed parser.  Incomplete -- it doesn't handle fst and snd -- and a
>    bit careless about error-checking.  Perhaps sufficient to give a
> flavour.
> *)
> let parse_expr : string -> any_expr =
>   let rec parse s pos =
>     match s.[pos] with
>       | 'T' -> pos + 1, Expr True
>       | 'F' -> pos + 1, Expr False
>       | '!' -> let pos', Expr e = parse s (pos + 1) in
>                (* Check that 'e' has boolean type before we can parse it to
>                   Not.  This is more than just good practice: without the
>                   type-checking step the parser won't compile. *)
>                begin match type_of e with
>                  | TBool -> pos', Expr (Not e)
>                  | t -> typing_failure (pos + 1) pos' s TBool t
>                end
>       | '(' -> let pos, Expr l = parse s (pos + 1) in
>                if s.[pos] <> ',' then parsing_failure pos ',' s else
>                  let pos, Expr r = parse s (pos + 1) in
>                  if s.[pos] <> ')' then parsing_failure pos ')' s else
>                    pos + 1, Expr (Pair (l, r))
>   in
>   fun s -> snd (parse s 0)
>

--f46d04339b147a0aca04d2c4ddb4
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Now it looks super nice!<br>Thanks a lot Jeremy, your explanations were rea=
lly helpful!<br>ph.<br><br><div class=3D"gmail_quote">2013/1/5 Jeremy Yallo=
p <span dir=3D"ltr">&lt;<a href=3D"mailto:yallop@gmail.com" target=3D"_blan=
k">yallop@gmail.com</a>&gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">On 5 January 2013 13:40, P=
hilippe Veber &lt;<a href=3D"mailto:philippe.veber@gmail.com">philippe.vebe=
r@gmail.com</a>&gt; wrote:<br>


&gt; I still have a question though: what is the exact meaning of the _<br>
&gt; character in the polymorphic type &quot;&lt; rn : &#39;a. int * &#39;a=
 expr -&gt; _&gt;&quot;<br>
&gt; and how is it useful/necessary for your example to run?<br>
<br>
</div>It&#39;s analogous to &#39;_&#39; in patterns: a kind of anonymous ty=
pe variable<br>
that you can use to avoid giving a name to a type. =A0(As with &quot;_&quot=
; in<br>
patterns, there&quot;s no connection between occurrences of &quot;_&quot;, =
so &quot;_ *<br>
int -&gt; _&quot; means &quot;&#39;a * int -&gt; &#39;b&quot;, not &quot;&#=
39;a * int -&gt; &#39;a&quot;, for example.)<br>
<br>
It&#39;s not doing anything special here: you could equally give a name to<=
br>
the type without changing the meaning of the code.<br>
<div class=3D"im"><br>
&gt; Could your example be written without a record/object type using<br>
&gt; polymorphic type annotations for functions?<br>
<br>
</div>I don&#39;t believe it&#39;s possible to make function arguments poly=
morphic<br>
using annotations. =A0However, the code can be significantly simplified<br>
to remove that bit of polymorphism altogether. =A0As written it mixes<br>
two techniques for hiding the type index in the expression GADT during<br>
parsing: CPS (in the inner &#39;parse&#39; function) and an existential typ=
e<br>
(in the return type of &#39;parse_expr&#39;). =A0In fact, either of these<b=
r>
approaches in isolation is sufficient. =A0Here&#39;s a more direct<br>
implementation using only the existential:<br>
<br>
(* Well-typed parser. =A0Incomplete -- it doesn&#39;t handle fst and snd --=
 and a<br>
<div class=3D"im">=A0 =A0bit careless about error-checking. =A0Perhaps suff=
icient to give a flavour.<br>
*)<br>
let parse_expr : string -&gt; any_expr =3D<br>
</div>=A0 let rec parse s pos =3D<br>
=A0 =A0 match s.[pos] with<br>
=A0 =A0 =A0 | &#39;T&#39; -&gt; pos + 1, Expr True<br>
=A0 =A0 =A0 | &#39;F&#39; -&gt; pos + 1, Expr False<br>
=A0 =A0 =A0 | &#39;!&#39; -&gt; let pos&#39;, Expr e =3D parse s (pos + 1) =
in<br>
<div class=3D"im">=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0(* Check that &#39;e&#39; =
has boolean type before we can parse it to<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 Not. =A0This is more than just good pra=
ctice: without the<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 type-checking step the parser won&#39;t=
 compile. *)<br>
</div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0begin match type_of e with<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0| TBool -&gt; pos&#39;, Expr (Not e)<br>
<div class=3D"im">=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0| t -&gt; typing_failu=
re (pos + 1) pos&#39; s TBool t<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0end<br>
</div>=A0 =A0 =A0 | &#39;(&#39; -&gt; let pos, Expr l =3D parse s (pos + 1)=
 in<br>
<div class=3D"im">=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0if s.[pos] &lt;&gt; &#39;,=
&#39; then parsing_failure pos &#39;,&#39; s else<br>
</div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0let pos, Expr r =3D parse s (pos +=
 1) in<br>
<div class=3D"im">=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0if s.[pos] &lt;&gt; &#=
39;)&#39; then parsing_failure pos &#39;)&#39; s else<br>
</div>=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0pos + 1, Expr (Pair (l, r))<br>
=A0 in<br>
=A0 fun s -&gt; snd (parse s 0)<br>
</blockquote></div><br>

--f46d04339b147a0aca04d2c4ddb4--
