Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id D54097EE94
	for <caml-list@sympa.inria.fr>; Fri,  4 Jan 2013 18:25:29 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=209.85.210.172;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  philippe.veber@gmail.com designates 209.85.210.172 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.210.172;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ia0-f172.google.com) identity=helo;
  client-ip=209.85.210.172;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-ia0-f172.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqYBAAoQ51DRVdKsm2dsb2JhbABFuWGDZAgWDgEBAQEBCAkLCRQngh4BAQQBJxkBGx0BAwELBgULDS4hAQERAQUBHAYTiAEBAwYDBgyZbIwzgnuETgoZJwwBWYVeAQEEDItchS0DlDWBVos3gzEWKYQX
X-IronPort-AV: E=Sophos;i="4.84,411,1355094000"; 
   d="scan'208";a="167453511"
Received: from mail-ia0-f172.google.com ([209.85.210.172])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Jan 2013 18:25:28 +0100
Received: by mail-ia0-f172.google.com with SMTP id z13so13835916iaz.17
        for <caml-list@inria.fr>; Fri, 04 Jan 2013 09:25:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=+Sletv/ppV2qH3ewF8trj64kVNUT4bzb3wnlbMabS/Y=;
        b=V1C2sAtLc7rjbPpT3myNR4ph8Kfm2zp5v2A3UsYCJEj0K+Ik9gQJEdAbponzm+Am7k
         sFHSuQ75LA/8zFBn8FAwS3CxGv6xWDBat40bY25+RM838ThwCfnclO4ksJBrF92x57wr
         7foCgUQD0LgHUOnFZu7IBa5c0d8V4iRQodQgn+R8qiTuqcS8MrH7Ls8u43sdkI+xhrav
         4/RXfGDaU+QhmxELk+P8KFN0/vO9W/YN22MsrYWyxSiVV2PHUzSWIV7UpuEM2BLYuW6J
         6APtawtnt7QHkjkagAU0cnmb+4QT1UIAdRt03eACQ7oiMBq1c+ymHf9RrtUPgbLPpL+s
         aRxA==
Received: by 10.50.13.162 with SMTP id i2mr46215875igc.38.1357320327118; Fri,
 04 Jan 2013 09:25:27 -0800 (PST)
MIME-Version: 1.0
Received: by 10.64.6.226 with HTTP; Fri, 4 Jan 2013 09:25:07 -0800 (PST)
In-Reply-To: <50E701D3.9070008@free.fr>
References: <CAOOOohSPem8vpMbDCs3GG3nHGQutoq8xiGXcRc62fgeO3EL8rQ@mail.gmail.com>
 <CAEDxudyF8tXkoLc5a8XoSOUfGvH01VKBAHOmLQ5XbZAPrGkkBw@mail.gmail.com>
 <CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com> <50E701D3.9070008@free.fr>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Fri, 4 Jan 2013 18:25:07 +0100
Message-ID: <CAOOOohRJhF2Fxy0XhNbzSS+aFXpK04zRDjqeSJtKXaB0MYwsuw@mail.gmail.com>
To: Tiphaine Turpin <Tiphaine.Turpin@free.fr>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=f46d044469eff1bfaf04d279c369
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] [GADT noob question] Building a GADT from an
 untyped representation


--f46d044469eff1bfaf04d279c369
Content-Type: text/plain; charset=ISO-8859-1

This is pretty much what I asked for, thanks Tiphaine!
ph.

2013/1/4 Tiphaine Turpin <Tiphaine.Turpin@free.fr>

>  Hi Philippe,
>
> I don't think that you can achieve what you are you are asking exactly,
> unless ressorting to an existential type. You can do it using GADT too, as
> described in the "existential types" section of
>
> https://sites.google.com/site/ocamlgadt/
>
> For your example, you can write:
>
> type any_expr =
>   | Expr : _ expr -> any_expr
> ;;
>
> let parse_expr x =
>   try Expr (Int (int_of_string x))
>   with _ ->
>     Expr (Float (float_of_string x))
> ;;
>
> Cheers,
>
> Tiphaine
>
>
> On 01/04/13 16:05, Philippe Veber wrote:
>
> Hi Yury,
>
> Thanks for your answer! It is true your fix is accepted by the compiler,
> but this is not what I was looking for: in the end I'd like to have an 'a
> expr such that 'a is the type of the value obtained when evaluating the
> expression. With the polymorphic variants, I cannot write an eval function
> of type 'a eval -> 'a, which is the main motivation behind using GADT in
> that (canonical) case. Sorry for ommiting this point!
>
> ph.
>
>
> 2013/1/4 Yury Sulsky <yury.sulsky@gmail.com>
>
>> Hi Philippe,
>>
>>  I think you can do this by using a polymorphic variant as the type
>> variable:
>>
>>  type _ expr =
>> | Int : int -> [> `int ] expr
>> | Float : float -> [> `float ] expr
>>
>>   let parse_expr : string -> [ `int | `float ] expr = fun x ->
>>    try Int (int_of_string x)
>>   with _ ->
>>     Float (float_of_string x)
>> ;;
>>
>>   - Yury
>>
>>
>>
>> On Fri, Jan 4, 2013 at 8:32 AM, Philippe Veber <philippe.veber@gmail.com>wrote:
>>
>>> Dear list,
>>>
>>> Suppose I define a GADT for expressions:
>>>
>>> type _ expr =
>>> | Int : int -> int expr
>>> | Float : float -> float expr
>>>
>>> Now I want to write a parser, that will build an ['a expr] from a
>>> string. Without thinking much, I tried the following:
>>>
>>> let parse_expr : type s. string -> s expr = fun x ->
>>>   try Int (int_of_string x)
>>>   with _ ->
>>>     Float (float_of_string x)
>>> ;;
>>>
>>> Which fails with the following error message:
>>>
>>> Error: This expression has type int expr but an expression was expected
>>> of type s expr
>>>
>>> That makes sense, since [s] is a locally abstract type. I tried a couple
>>> of variants and finally realised that I could not even write the type of
>>> [parse_expr]: it should be [string -> 'a expr] for some ['a], but I'm not
>>> sure that really means something.
>>>
>>> So to put it simple, how does one construct a GADT value from a string ?
>>>
>>> Cheers,
>>>   ph.
>>>
>>
>>
>
>
>

--f46d044469eff1bfaf04d279c369
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

This is pretty much what I asked for, thanks Tiphaine!<br>ph.<br><br><div c=
lass=3D"gmail_quote">2013/1/4 Tiphaine Turpin <span dir=3D"ltr">&lt;<a href=
=3D"mailto:Tiphaine.Turpin@free.fr" target=3D"_blank">Tiphaine.Turpin@free.=
fr</a>&gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
=20=20
=20=20=20=20
=20=20
  <div text=3D"#000000" bgcolor=3D"#FFFFFF"><div class=3D"im">
    Hi Philippe,<br>
    <br>
    I don&#39;t think that you can achieve what you are you are asking
    exactly, unless ressorting to an existential type. You can do it
    using GADT too, as described in the &quot;existential types&quot; secti=
on of<br>
    <br>
    <a href=3D"https://sites.google.com/site/ocamlgadt/" target=3D"_blank">=
https://sites.google.com/site/ocamlgadt/</a><br>
    <br>
    For your example, you can write:<br>
    <br>
    type any_expr =3D<br>
    =A0 | Expr : _ expr -&gt; any_expr<br>
    ;;<br>
    <br>
    let parse_expr x =3D<br>
    =A0 try Expr (Int (int_of_string x))<br>
    =A0 with _ -&gt;<br>
    =A0=A0=A0 Expr (Float (float_of_string x))<br>
    ;;<br>
    <br>
    Cheers,<br>
    <br>
    Tiphaine<br>
    <br>
    <br>
    On 01/04/13 16:05, Philippe Veber wrote:
    </div><div><div class=3D"h5"><blockquote type=3D"cite">Hi Yury,<br>
      <br>
      Thanks for your answer! It is true your fix is accepted by the
      compiler, but this is not what I was looking for: in the end I&#39;d
      like to have an &#39;a expr such that &#39;a is the type of the value
      obtained when evaluating the expression. With the polymorphic
      variants, I cannot write an eval function of type &#39;a eval -&gt;
      &#39;a, which is the main motivation behind using GADT in that
      (canonical) case. Sorry for ommiting this point!<br>
      <br>
      ph.<br>
      <br>
      <br>
      <div class=3D"gmail_quote">2013/1/4 Yury Sulsky <span dir=3D"ltr">&lt=
;<a href=3D"mailto:yury.sulsky@gmail.com" target=3D"_blank">yury.sulsky@gma=
il.com</a>&gt;</span><br>
        <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border=
-left:1px #ccc solid;padding-left:1ex">
          <div dir=3D"ltr">Hi Philippe,
            <div><br>
            </div>
            <div>I think you can do this by using a polymorphic variant
              as the type variable:</div>
            <div>
              <div><br>
              </div>
              <div>type _ expr =3D</div>
              <div>| Int : int -&gt; [&gt; `int ] expr</div>
              <div>| Float : float -&gt; [&gt; `float ] expr</div>
              <div><br>
              </div>
            </div>
            <div>
              <div>let parse_expr : string -&gt; [ `int | `float ] expr
                =3D fun x -&gt;=A0</div>
              <div>
                <div>=A0 try Int (int_of_string x)=A0</div>
                <div>=A0 with _ -&gt;=A0</div>
                <div>=A0 =A0 Float (float_of_string x)</div>
                <div>;; =A0 =A0 =A0 =A0=A0</div>
                <div><br>
                </div>
              </div>
              <span><font color=3D"#888888">
                  <div>- Yury</div>
                  <div><br>
                  </div>
                </font></span></div>
          </div>
          <div>
            <div>
              <div class=3D"gmail_extra"><br>
                <br>
                <div class=3D"gmail_quote">On Fri, Jan 4, 2013 at 8:32 AM,
                  Philippe Veber <span dir=3D"ltr">&lt;<a href=3D"mailto:ph=
ilippe.veber@gmail.com" target=3D"_blank">philippe.veber@gmail.com</a>&gt;<=
/span>
                  wrote:<br>
                  <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex">Dear

                    list,<br>
                    <br>
                    Suppose I define a GADT for expressions:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">type
                      _ expr =3D </span><br style=3D"font-family:courier ne=
w,monospace">
                    <span style=3D"font-family:courier new,monospace">|
                      Int : int -&gt; int expr </span><br style=3D"font-fam=
ily:courier new,monospace">
                    <span style=3D"font-family:courier new,monospace">|
                      Float : float -&gt; float expr</span><br style=3D"fon=
t-family:courier new,monospace">
                    <br>
                    Now I want to write a parser, that will build an [&#39;a
                    expr] from a string. Without thinking much, I tried
                    the following:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">let
                      parse_expr : type s. string -&gt; s expr =3D fun x
                      -&gt; </span><br style=3D"font-family:courier new,mon=
ospace">
                    <span style=3D"font-family:courier new,monospace">=A0
                      try Int (int_of_string x) </span><br style=3D"font-fa=
mily:courier new,monospace">
                    <span style=3D"font-family:courier new,monospace">=A0
                      with _ -&gt; </span><br style=3D"font-family:courier =
new,monospace">
                    <span style=3D"font-family:courier new,monospace">=A0=
=A0=A0
                      Float (float_of_string x)<br>
                      ;;</span><br>
                    <br>
                    Which fails with the following error message:<br>
                    <br>
                    <span style=3D"font-family:courier new,monospace">Error:

                      This expression has type int expr but an
                      expression was expected of type s expr</span><br>
                    <br>
                    That makes sense, since [s] is a locally abstract
                    type. I tried a couple of variants and finally
                    realised that I could not even write the type of
                    [parse_expr]: it should be [string -&gt; &#39;a expr]
                    for some [&#39;a], but I&#39;m not sure that really mea=
ns
                    something.<br>
                    <br>
                    So to put it simple, how does one construct a GADT
                    value from a string ?<br>
                    <br>
                    Cheers,<br>
                    =A0 ph.<br>
                  </blockquote>
                </div>
                <br>
              </div>
            </div>
          </div>
        </blockquote>
      </div>
      <br>
    </blockquote>
    <br>
    <br>
  </div></div></div>

</blockquote></div><br>

--f46d044469eff1bfaf04d279c369--
