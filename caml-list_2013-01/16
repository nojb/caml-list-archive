Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id CE8E47EE94
	for <caml-list@sympa.inria.fr>; Sat,  5 Jan 2013 14:40:26 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=209.85.214.180;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  philippe.veber@gmail.com designates 209.85.214.180 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.180;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f180.google.com) identity=helo;
  client-ip=209.85.214.180;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-ob0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ak0CAK0s6FDRVda0jmdsb2JhbABFvU4IFg4BAQEBCQsJCRIGI4IeAQEEAScZARsdAQMBCwYFCw0uIQEBEQEFARwGExqHagEDCQaZQowzgnuEKwoZJw1ZhhABBQyLXIUtA5Q1gVaLN4MxFimEFw
X-IronPort-AV: E=Sophos;i="4.84,415,1355094000"; 
   d="scan'208";a="188554572"
Received: from mail-ob0-f180.google.com ([209.85.214.180])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Jan 2013 14:40:25 +0100
Received: by mail-ob0-f180.google.com with SMTP id wd20so15333773obb.39
        for <caml-list@inria.fr>; Sat, 05 Jan 2013 05:40:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=4jD5fvHL33WObI8ffC76CNL7Waegn4Uqua2iO5bVHVw=;
        b=VsgQW+7IJ5mJWFDfJFdiRtCth7CQHzbqzSekOcCXUS/V4i8SzWvQ9P8QkLj/kwSnL4
         z9RkuWbw5ecBoS5z7yeoRpejTprR1oVHy0ihA2yFJhJj8LCLLk5GplsU7+hdInogMz4W
         qJRA/mfFofCz6QazQXVN9WAFxI0+13sga4ST5LkbqqdvuYtOlIrBrlL0C5ELmgS5lxqu
         EGxpgDiIN6NxrJQUevwxFSm2SKlh16JfJEYx2LR5B+9a2QUxzbgBb6XIyPOXB8noKhKG
         2PAwLmyt1NAFK+zDpvddiaCPKnXTAjhYMkbFsBK1E2ctnCRvrCKmi+MPKjFtOa9+eVfb
         vNug==
Received: by 10.60.10.227 with SMTP id l3mr30837118oeb.119.1357393224247; Sat,
 05 Jan 2013 05:40:24 -0800 (PST)
MIME-Version: 1.0
Received: by 10.76.151.102 with HTTP; Sat, 5 Jan 2013 05:40:03 -0800 (PST)
In-Reply-To: <CAAxsn=G+CtAHhzOqmgxN=fo+VGFg2QzAxiHxTQC8ncKavuhRAw@mail.gmail.com>
References: <CAOOOohSPem8vpMbDCs3GG3nHGQutoq8xiGXcRc62fgeO3EL8rQ@mail.gmail.com>
 <CAEDxudyF8tXkoLc5a8XoSOUfGvH01VKBAHOmLQ5XbZAPrGkkBw@mail.gmail.com>
 <CAOOOohQLZu0oCpDC5KvUXY_SV_Ah+qEYv-mhTEEbChVcpBBg6w@mail.gmail.com>
 <50E701D3.9070008@free.fr> <CAOOOohRJhF2Fxy0XhNbzSS+aFXpK04zRDjqeSJtKXaB0MYwsuw@mail.gmail.com>
 <CAHaHOqQkG1VXwn+DqDd6kwuKYta4jhsG07aUQJqWSa-gt-qD0g@mail.gmail.com> <CAAxsn=G+CtAHhzOqmgxN=fo+VGFg2QzAxiHxTQC8ncKavuhRAw@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sat, 5 Jan 2013 14:40:03 +0100
Message-ID: <CAOOOohSbMJYR8n1wDBHysf-1GqrquOkG-dt0yAV9E3vQBCEfdw@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: Jeff Meister <nanaki@gmail.com>, Tiphaine Turpin <Tiphaine.Turpin@free.fr>, 
	Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=e89a8fb1f674f3ab5a04d28abc81
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] [GADT noob question] Building a GADT from an
 untyped representation


--e89a8fb1f674f3ab5a04d28abc81
Content-Type: text/plain; charset=ISO-8859-1

Thanks Jeremy for this enlightening post! I had not seen the possibility to
actually build the type of the expression, using another GADT. This is
sufficient to extract expressions of a given type, for instance. I still
have a question though: what is the exact meaning of the _ character in the
polymorphic type "< rn : 'a. int * 'a expr -> _>" and how is it
useful/necessary for your example to run? Could your example be written
without a record/object type using polymorphic type annotations for
functions?

Thanks again for your explanations, they are very valuable!
ph.

2013/1/5 Jeremy Yallop <yallop@gmail.com>

> Dear Jeff,
>
> On 4 January 2013 22:00, Jeff Meister <nanaki@gmail.com> wrote:
> > However, by using an existential type like that, you're losing the
> > additional type checking benefits of GADTs. The return type of
> parse_expr is
> > now any_expr, not 'a expr. You can write e.g. the function
> extract_int_value
> > : int expr -> int, where OCaml knows you don't need to match the Float
> case,
> > but you'll never have an int expr to pass to this function, at least not
> as
> > a result of parsing. Anything handling a parsed any_expr must match the
> Expr
> > case, which of course can have any expr inside. At this point, it seems
> like
> > just a cumbersome way to write the traditional expr type.
> >
> > I went through basically this same thought process while trying to
> > understand how I could apply the new OCaml GADT features, and I concluded
> > that GADTs weren't providing any extra utility in the case where they
> must
> > be constructed by parsing an input string. That's a shame since parsing
> and
> > transformation is such a canonical use of OCaml, so I would love to be
> > proven wrong here!
>
> The good news is that you can still enjoy the benefits of GADTs, even
> when you need to construct values at runtime whose types you don't
> know at compile time.  In fact, that's perhaps the situation where
> GADTs are of most benefit: well-typed evaluators (to take the
> canonical example) are much more useful when the set of input
> expressions can vary at runtime.
>
> Even the type string -> any_expr is sufficient to give a useful
> guarantee about parse_expr, namely that if it returns at all, it
> returns a well-typed AST, wrapped in an "Expr".  The actual type of
> the AST can't be written down in the program, since it isn't known
> until runtime, but you know nevertheless that it's a well-typed
> expression whose subexpressions are likewise well-typed.  Importantly,
> the compiler knows that too, and so you can pass your well-typed AST
> to all the usual GADT-processing functions like 'eval', and enjoy all
> the usual guarantees: if evaluation terminates then it produces a
> value of the correct type, and so on.
>
> Here's some code that demonstrates the idea.  It has all the pieces
> for a toy interpreter with pairs and booleans, and you get GADT-based
> guarantees all the way through: the parser either produces a
> well-typed AST or raises an exception, the evaluator takes a
> well-typed AST and produces a value of the same type, etc.  The types
> guarantee that ill-typed input is detected during parsing; there's no
> attempt to evaluate it.
>
>   # read_eval_print "((!!T,F),(!T,F))";;
>   - : string = "((T,F),(F,F))"
>   # read_eval_print "((!!T,F),!(!T,F))";;
>   Exception:
>   Failure
>    "Parsing failed at characters 10-16:
>     Expected an expression of type bool
>     but found (!T,F) of type (bool * bool)".
>
>
> (* A well-typed AST for an expression language of booleans and pairs.
> *)
> type _ expr =
>   | Fst  : ('a * 'b) expr -> 'a expr
>   | Snd  : ('a * 'b) expr -> 'b expr
>   | Pair : 'a expr * 'b expr -> ('a * 'b) expr
>   | True : bool expr
>   | False : bool expr
>   | Not  : bool expr -> bool expr
>
> (* A concrete representation for types that can encode all the types
>    for which we can build expressions.
>
>    A value of type 't typ represents the type 't. For example, TPair
> (TBool,
>    TBool) of type (bool * bool) typ represents the type bool * bool.
> *)
> type _ typ =
>   | TBool : bool typ
>   | TPair : 'a typ * 'b typ -> ('a * 'b) typ
>
> (* `printer' takes a representation for a type 't and gives you a
> printer for 't,
>    i.e. a function from 't to string
> *)
> let rec printer : 'a. 'a typ -> 'a -> string =
>   fun (type a) (t : a typ) ->
>     match t with
>       | TBool -> fun (b: a) -> if b then "T" else "F"
>       | TPair (l, r) -> let print_l = printer l
>                         and print_r = printer r in
>                         fun (l, r) -> "("^ print_l l ^","^ print_r r ^")"
>
> (* show_type formats type representations as strings
> *)
> let rec show_type : 'a. 'a typ -> string =
>   fun (type a) (e : a typ) ->
>     match e with
>       | TBool -> "bool"
>       | TPair (l, r) -> "( "^ show_type l ^" * "^ show_type r ^")"
>
> (* The famous well-typed evaluator
> *)
> let rec eval : 'a. 'a expr -> 'a  =
>   fun (type a) (e : a expr) ->
>     match e with
>       | Fst pair    -> fst (eval pair)
>       | Snd pair    -> snd (eval pair)
>       | Pair (l, r) -> (eval l, eval r)
>       | True        -> true
>       | False       -> false
>       | Not e       -> not (eval e)
>
> (* Construct a representation of the type of an expression
> *)
> let rec type_of : 'a. 'a expr -> 'a typ =
>   fun (type a) (e : a expr) ->
>     match e with
>       | Fst pair    -> (match type_of pair with TPair (l, _) -> l)
>       | Snd pair    -> (match type_of pair with TPair (_, r) -> r)
>       | Pair (l, r) -> TPair (type_of l, type_of r)
>       | True        -> TBool
>       | False       -> TBool
>       | Not _       -> TBool
>
> (* An existential to hide the type index of a well-typed AST, making
>    it possible to write functions that return constructed ASTs whose
>    type is not statically known.
> *)
> type any_expr =
>   | Expr : 'a expr -> any_expr
>
> (* Raise an error indicating that the parser encountered an unexpected
>    character.
> *)
> let parsing_failure pos expected s =
>   failwith (Printf.sprintf
>               "Parsing failed at character %d: expected to find %c,
> but found %c"
>               pos expected s.[pos])
>
> (* Raise an error indicating that the parser determined that part of
>    the input string contained an ill-typed expression.
> *)
> let typing_failure start_pos end_pos s expected_type found_type =
>   failwith (Printf.sprintf
>               "Parsing failed at characters %d-%d:
> Expected an expression of type %s
> but found %s of type %s"
>               start_pos end_pos (show_type expected_type) (String.sub
> s start_pos (end_pos - start_pos))
>               (show_type found_type))
>
> (* Well-typed parser.  Rather hairy due to continuation-passing style with
>    polymorphic continuation functions, represented as objects with
> polymorphic
>    methods.  Also incomplete -- it doesn't handle fst and snd -- and a bit
>    careless about error-checking.  Perhaps sufficient to give a flavour.
> *)
> let parse_expr : string -> any_expr =
>   let rec parse s pos (ret : < rn : 'a. int * 'a expr -> _>) =
>     match s.[pos] with
>       | 'T' -> ret#rn (pos + 1, True)
>       | 'F' -> ret#rn (pos + 1, False)
>       | '!' -> parse s (pos + 1) (object method rn : 'a. int * 'a expr -> _
>         = fun (type a) (pos', (e : a expr)) ->
>           (* Check that 'e' has boolean type before we can parse it to Not.
>              This is more than just good practice: without the
> type-checking
>              step the parser won't compile. *)
>           match type_of e with
>             | TBool -> ret#rn (pos', Not e)
>             | t    -> typing_failure (pos + 1) pos' s TBool t end)
>       | '(' -> parse s (pos + 1) (object method rn : 'a. int * 'a expr
> -> _ = fun (pos, l) ->
>         if s.[pos] <> ',' then parsing_failure pos ',' s
>         else parse s (pos + 1) (object method rn : 'a. int * 'a expr
> -> _ = fun (pos, r) ->
>           if s.[pos] <> ')' then parsing_failure pos ')' s
>           else ret#rn (pos + 1, Pair (l, r)) end) end)
>   in
>   fun s -> parse s 0 (object method rn : 'a. int * 'a expr -> _ =
>                                fun (_, l) -> Expr l end)
>
>
> (* read_eval_print "((!!T,F),(!T,F))" =>
>    "((T,F),(F,F))"
> *)
> let read_eval_print s =
>   let Expr e = parse_expr s in
>   let ty = type_of e in
>   let print_e = printer ty in
>   print_e (eval e)
>

--e89a8fb1f674f3ab5a04d28abc81
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks Jeremy for this enlightening post! I had not seen the possibility to=
 actually build the type of the expression, using another GADT. This is suf=
ficient to extract expressions of a given type, for instance. I still have =
a question though: what is the exact meaning of the _ character in the poly=
morphic type &quot;&lt; rn : &#39;a. int * &#39;a expr -&gt; _&gt;&quot; an=
d how is it useful/necessary for your example to run? Could your example be=
 written without a record/object type using polymorphic type annotations fo=
r functions?<br>

<br>Thanks again for your explanations, they are very valuable!<br>ph.<br><=
br><div class=3D"gmail_quote">2013/1/5 Jeremy Yallop <span dir=3D"ltr">&lt;=
<a href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&=
gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Dear Jeff,<br>
<div class=3D"im"><br>
On 4 January 2013 22:00, Jeff Meister &lt;<a href=3D"mailto:nanaki@gmail.co=
m">nanaki@gmail.com</a>&gt; wrote:<br>
&gt; However, by using an existential type like that, you&#39;re losing the=
<br>
&gt; additional type checking benefits of GADTs. The return type of parse_e=
xpr is<br>
&gt; now any_expr, not &#39;a expr. You can write e.g. the function extract=
_int_value<br>
&gt; : int expr -&gt; int, where OCaml knows you don&#39;t need to match th=
e Float case,<br>
&gt; but you&#39;ll never have an int expr to pass to this function, at lea=
st not as<br>
&gt; a result of parsing. Anything handling a parsed any_expr must match th=
e Expr<br>
&gt; case, which of course can have any expr inside. At this point, it seem=
s like<br>
&gt; just a cumbersome way to write the traditional expr type.<br>
&gt;<br>
&gt; I went through basically this same thought process while trying to<br>
&gt; understand how I could apply the new OCaml GADT features, and I conclu=
ded<br>
&gt; that GADTs weren&#39;t providing any extra utility in the case where t=
hey must<br>
&gt; be constructed by parsing an input string. That&#39;s a shame since pa=
rsing and<br>
&gt; transformation is such a canonical use of OCaml, so I would love to be=
<br>
&gt; proven wrong here!<br>
<br>
</div>The good news is that you can still enjoy the benefits of GADTs, even=
<br>
when you need to construct values at runtime whose types you don&#39;t<br>
know at compile time. =A0In fact, that&#39;s perhaps the situation where<br>
GADTs are of most benefit: well-typed evaluators (to take the<br>
canonical example) are much more useful when the set of input<br>
expressions can vary at runtime.<br>
<br>
Even the type string -&gt; any_expr is sufficient to give a useful<br>
guarantee about parse_expr, namely that if it returns at all, it<br>
returns a well-typed AST, wrapped in an &quot;Expr&quot;. =A0The actual typ=
e of<br>
the AST can&#39;t be written down in the program, since it isn&#39;t known<=
br>
until runtime, but you know nevertheless that it&#39;s a well-typed<br>
expression whose subexpressions are likewise well-typed. =A0Importantly,<br>
the compiler knows that too, and so you can pass your well-typed AST<br>
to all the usual GADT-processing functions like &#39;eval&#39;, and enjoy a=
ll<br>
the usual guarantees: if evaluation terminates then it produces a<br>
value of the correct type, and so on.<br>
<br>
Here&#39;s some code that demonstrates the idea. =A0It has all the pieces<b=
r>
for a toy interpreter with pairs and booleans, and you get GADT-based<br>
guarantees all the way through: the parser either produces a<br>
well-typed AST or raises an exception, the evaluator takes a<br>
well-typed AST and produces a value of the same type, etc. =A0The types<br>
guarantee that ill-typed input is detected during parsing; there&#39;s no<b=
r>
attempt to evaluate it.<br>
<br>
=A0 # read_eval_print &quot;((!!T,F),(!T,F))&quot;;;<br>
=A0 - : string =3D &quot;((T,F),(F,F))&quot;<br>
=A0 # read_eval_print &quot;((!!T,F),!(!T,F))&quot;;;<br>
=A0 Exception:<br>
=A0 Failure<br>
=A0 =A0&quot;Parsing failed at characters 10-16:<br>
=A0 =A0 Expected an expression of type bool<br>
=A0 =A0 but found (!T,F) of type (bool * bool)&quot;.<br>
<br>
<br>
(* A well-typed AST for an expression language of booleans and pairs.<br>
*)<br>
type _ expr =3D<br>
=A0 | Fst =A0: (&#39;a * &#39;b) expr -&gt; &#39;a expr<br>
=A0 | Snd =A0: (&#39;a * &#39;b) expr -&gt; &#39;b expr<br>
=A0 | Pair : &#39;a expr * &#39;b expr -&gt; (&#39;a * &#39;b) expr<br>
=A0 | True : bool expr<br>
=A0 | False : bool expr<br>
=A0 | Not =A0: bool expr -&gt; bool expr<br>
<br>
(* A concrete representation for types that can encode all the types<br>
=A0 =A0for which we can build expressions.<br>
<br>
=A0 =A0A value of type &#39;t typ represents the type &#39;t. For example, =
TPair (TBool,<br>
=A0 =A0TBool) of type (bool * bool) typ represents the type bool * bool.<br>
*)<br>
type _ typ =3D<br>
=A0 | TBool : bool typ<br>
=A0 | TPair : &#39;a typ * &#39;b typ -&gt; (&#39;a * &#39;b) typ<br>
<br>
(* `printer&#39; takes a representation for a type &#39;t and gives you a<b=
r>
printer for &#39;t,<br>
=A0 =A0i.e. a function from &#39;t to string<br>
*)<br>
let rec printer : &#39;a. &#39;a typ -&gt; &#39;a -&gt; string =3D<br>
=A0 fun (type a) (t : a typ) -&gt;<br>
=A0 =A0 match t with<br>
=A0 =A0 =A0 | TBool -&gt; fun (b: a) -&gt; if b then &quot;T&quot; else &qu=
ot;F&quot;<br>
=A0 =A0 =A0 | TPair (l, r) -&gt; let print_l =3D printer l<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 and print_r =3D printer r i=
n<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 fun (l, r) -&gt; &quot;(&qu=
ot;^ print_l l ^&quot;,&quot;^ print_r r ^&quot;)&quot;<br>
<br>
(* show_type formats type representations as strings<br>
*)<br>
let rec show_type : &#39;a. &#39;a typ -&gt; string =3D<br>
=A0 fun (type a) (e : a typ) -&gt;<br>
=A0 =A0 match e with<br>
=A0 =A0 =A0 | TBool -&gt; &quot;bool&quot;<br>
=A0 =A0 =A0 | TPair (l, r) -&gt; &quot;( &quot;^ show_type l ^&quot; * &quo=
t;^ show_type r ^&quot;)&quot;<br>
<br>
(* The famous well-typed evaluator<br>
*)<br>
let rec eval : &#39;a. &#39;a expr -&gt; &#39;a =A0=3D<br>
=A0 fun (type a) (e : a expr) -&gt;<br>
=A0 =A0 match e with<br>
=A0 =A0 =A0 | Fst pair =A0 =A0-&gt; fst (eval pair)<br>
=A0 =A0 =A0 | Snd pair =A0 =A0-&gt; snd (eval pair)<br>
=A0 =A0 =A0 | Pair (l, r) -&gt; (eval l, eval r)<br>
=A0 =A0 =A0 | True =A0 =A0 =A0 =A0-&gt; true<br>
=A0 =A0 =A0 | False =A0 =A0 =A0 -&gt; false<br>
=A0 =A0 =A0 | Not e =A0 =A0 =A0 -&gt; not (eval e)<br>
<br>
(* Construct a representation of the type of an expression<br>
*)<br>
let rec type_of : &#39;a. &#39;a expr -&gt; &#39;a typ =3D<br>
=A0 fun (type a) (e : a expr) -&gt;<br>
=A0 =A0 match e with<br>
=A0 =A0 =A0 | Fst pair =A0 =A0-&gt; (match type_of pair with TPair (l, _) -=
&gt; l)<br>
=A0 =A0 =A0 | Snd pair =A0 =A0-&gt; (match type_of pair with TPair (_, r) -=
&gt; r)<br>
=A0 =A0 =A0 | Pair (l, r) -&gt; TPair (type_of l, type_of r)<br>
=A0 =A0 =A0 | True =A0 =A0 =A0 =A0-&gt; TBool<br>
=A0 =A0 =A0 | False =A0 =A0 =A0 -&gt; TBool<br>
=A0 =A0 =A0 | Not _ =A0 =A0 =A0 -&gt; TBool<br>
<br>
(* An existential to hide the type index of a well-typed AST, making<br>
=A0 =A0it possible to write functions that return constructed ASTs whose<br>
=A0 =A0type is not statically known.<br>
*)<br>
type any_expr =3D<br>
=A0 | Expr : &#39;a expr -&gt; any_expr<br>
<br>
(* Raise an error indicating that the parser encountered an unexpected<br>
=A0 =A0character.<br>
*)<br>
let parsing_failure pos expected s =3D<br>
=A0 failwith (Printf.sprintf<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 &quot;Parsing failed at character %d: expected =
to find %c,<br>
but found %c&quot;<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 pos expected s.[pos])<br>
<br>
(* Raise an error indicating that the parser determined that part of<br>
=A0 =A0the input string contained an ill-typed expression.<br>
*)<br>
let typing_failure start_pos end_pos s expected_type found_type =3D<br>
=A0 failwith (Printf.sprintf<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 &quot;Parsing failed at characters %d-%d:<br>
Expected an expression of type %s<br>
but found %s of type %s&quot;<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 start_pos end_pos (show_type expected_type) (St=
ring.sub<br>
s start_pos (end_pos - start_pos))<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 (show_type found_type))<br>
<br>
(* Well-typed parser. =A0Rather hairy due to continuation-passing style wit=
h<br>
=A0 =A0polymorphic continuation functions, represented as objects with poly=
morphic<br>
=A0 =A0methods. =A0Also incomplete -- it doesn&#39;t handle fst and snd -- =
and a bit<br>
=A0 =A0careless about error-checking. =A0Perhaps sufficient to give a flavo=
ur.<br>
*)<br>
let parse_expr : string -&gt; any_expr =3D<br>
=A0 let rec parse s pos (ret : &lt; rn : &#39;a. int * &#39;a expr -&gt; _&=
gt;) =3D<br>
=A0 =A0 match s.[pos] with<br>
=A0 =A0 =A0 | &#39;T&#39; -&gt; ret#rn (pos + 1, True)<br>
=A0 =A0 =A0 | &#39;F&#39; -&gt; ret#rn (pos + 1, False)<br>
=A0 =A0 =A0 | &#39;!&#39; -&gt; parse s (pos + 1) (object method rn : &#39;=
a. int * &#39;a expr -&gt; _<br>
=A0 =A0 =A0 =A0 =3D fun (type a) (pos&#39;, (e : a expr)) -&gt;<br>
=A0 =A0 =A0 =A0 =A0 (* Check that &#39;e&#39; has boolean type before we ca=
n parse it to Not.<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0This is more than just good practice: without th=
e type-checking<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0step the parser won&#39;t compile. *)<br>
=A0 =A0 =A0 =A0 =A0 match type_of e with<br>
=A0 =A0 =A0 =A0 =A0 =A0 | TBool -&gt; ret#rn (pos&#39;, Not e)<br>
=A0 =A0 =A0 =A0 =A0 =A0 | t =A0 =A0-&gt; typing_failure (pos + 1) pos&#39; =
s TBool t end)<br>
=A0 =A0 =A0 | &#39;(&#39; -&gt; parse s (pos + 1) (object method rn : &#39;=
a. int * &#39;a expr<br>
-&gt; _ =3D fun (pos, l) -&gt;<br>
=A0 =A0 =A0 =A0 if s.[pos] &lt;&gt; &#39;,&#39; then parsing_failure pos &#=
39;,&#39; s<br>
=A0 =A0 =A0 =A0 else parse s (pos + 1) (object method rn : &#39;a. int * &#=
39;a expr<br>
-&gt; _ =3D fun (pos, r) -&gt;<br>
=A0 =A0 =A0 =A0 =A0 if s.[pos] &lt;&gt; &#39;)&#39; then parsing_failure po=
s &#39;)&#39; s<br>
=A0 =A0 =A0 =A0 =A0 else ret#rn (pos + 1, Pair (l, r)) end) end)<br>
=A0 in<br>
=A0 fun s -&gt; parse s 0 (object method rn : &#39;a. int * &#39;a expr -&g=
t; _ =3D<br>
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0fun (_, l) -=
&gt; Expr l end)<br>
<br>
<br>
(* read_eval_print &quot;((!!T,F),(!T,F))&quot; =3D&gt;<br>
=A0 =A0&quot;((T,F),(F,F))&quot;<br>
*)<br>
let read_eval_print s =3D<br>
=A0 let Expr e =3D parse_expr s in<br>
=A0 let ty =3D type_of e in<br>
=A0 let print_e =3D printer ty in<br>
=A0 print_e (eval e)<br>
</blockquote></div><br>

--e89a8fb1f674f3ab5a04d28abc81--
