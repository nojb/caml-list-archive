Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA31728; Thu, 6 Jun 2002 11:57:13 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA31729 for <caml-list@pauillac.inria.fr>; Thu, 6 Jun 2002 11:57:12 +0200 (MET DST)
Received: from mailb.telia.com (mailb.telia.com [194.22.194.6])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g569vAr24016
	for <caml-list@inria.fr>; Thu, 6 Jun 2002 11:57:11 +0200 (MET DST)
Received: from d1o902.telia.com (d1o902.telia.com [62.20.254.241])
	by mailb.telia.com (8.11.6/8.11.6) with ESMTP id g569uwh12763
	for <caml-list@inria.fr>; Thu, 6 Jun 2002 11:57:06 +0200 (CEST)
Received: from [212.181.191.224] (t6o902p104.telia.com [212.181.191.224])
	by d1o902.telia.com (8.10.2/8.10.1) with ESMTP id g569ule01736
	for <caml-list@inria.fr>; Thu, 6 Jun 2002 11:56:47 +0200 (CEST)
User-Agent: Microsoft-Outlook-Express-Macintosh-Edition/5.02.2022
Date: Thu, 06 Jun 2002 12:01:02 +0200
Subject: [Caml-list] look operator
From: Winfried Dreckmann <wd@lidingo.mail.telia.com>
To: =?ISO-8859-1?B?gA==?= caml list <caml-list@inria.fr>
Message-ID: <B924FF7D.B917%wd@lidingo.mail.telia.com>
Mime-version: 1.0
Content-type: text/plain; charset="US-ASCII"
Content-transfer-encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Dear everyone,

I can't resist to ask for people's opinion on a certain compromise between
imperative and functional programming which a found in the "numerix" library
of Michel Quercia. Of course, if you read this, Michel, I would be
particularly grateful for your own opinion.

It's about abstracting the ! operator by introducing a function

val look : tref -> t

which coerces a mutable object into a non-mutable one. Using this function
is dangerous because, with this function, the non-mutable type t is not
strictly non-mutable anymore. As the manual says, the result of "look r" is
volatile, it is only guaranteed to be valid until the next in-place
operation involving r. In my own experience, mistakes occur faster than
expected. But this is a great and elegant trick. Using "look", every single
function with arguments of type t, say

val add_in : tref -> t -> t -> unit,

replaces two or more functions which would otherwise be necessary, in this
case

val add_in1 : tref -> t -> t -> unit
val add_in2 : tref -> tref -> t -> unit
val add_in3 : tref -> tref -> tref -> unit

at least. This would certainly blow up the library to impractical
dimensions. Of course, overloading would help, and "look" might become
obsolete in this way.
However, I think the problem is not mainly about overloading, but about
reintroducing imperative features in an abstract and controlled way. I
could, for instance, also imagine an abstract assign operator

val set : tref -> t -> unit

where the contents of t is not copied but assigned to tref, and thus made
mutable, which could be useful in certain restricted ways.

My question to the caml list: Would you accept such constructions as decent
Caml programming, if applied carefully and only in cases where it allows
what is otherwise impossible (e. g. integrating mutable and non-mutable
objects as it is done in "numerix"). Or is it all just a silent
reintroduction of C pointers, and principally a bad thing?

Regards,
Winfried Dreckmann

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

