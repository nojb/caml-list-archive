Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA28526; Thu, 27 Jun 2002 08:45:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA28413 for <caml-list@pauillac.inria.fr>; Thu, 27 Jun 2002 08:45:54 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g5R6jpb01149
	for <caml-list@inria.fr>; Thu, 27 Jun 2002 08:45:52 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id PAA19744;
	Thu, 27 Jun 2002 15:45:43 +0900 (JST)
To: warplayer@free.fr
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Exported Types
In-Reply-To: <009401c21d35$12334fa0$a500a8c0@warp>
References: <009401c21d35$12334fa0$a500a8c0@warp>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020627154543J.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 27 Jun 2002 15:45:43 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 47
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Nicolas Cannasse" <warplayer@free.fr>

> I got some problem using an "exported type" ( shared between modules ).
> I know that I can avoid them by using polymorphic types but that'ld be nicer
> without them.
> I would also like of course to keep the files separated.

The order of dependencies between modules is something strict: there
cannot be mutual recursion between two modules (at least, not
without doing some unsafe forward declarations using mutables).

Technically speaking, types do not depend on this order as long as you
provide .mli files (that is .mli and .ml order may be distinct), but
this is not a good idea to depend on it.
So I would rather suggest you forget about doing this.
What forces you so strongly to introduce such type level recursion?
Your example is too abstract to understand your goal.

In general, a reasonable approach would be to define A and B sharing
their types, and then define more abstract interfaces for them, to
call from outside.  With type abstraction, this should be possible.

But my experience of ML programming is that crafting interfaces is not
the point. The real point is using the right types.  Then you can
organize your code as you wish, anyway you cannot break it!

> -- a.mli ---
> type t (* exported *)
> 
> -- b.mli --
> type t
> val f : A.t -> t (* module B is using the type A.t but won't directly call
> any A functions *)
> 
> -- b.ml --
> type t = A.t (* quite stupid , but that's a sample ! *)
> let f x = x
> 
> -- a.ml --
> type t = int;;
> ignore( B.f  (0:t) )
>                  ---
> (* This expression has type t = int but is here used with type A.t *)

---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

