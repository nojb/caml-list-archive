Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id HAA30810; Thu, 20 Jun 2002 07:09:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id HAA31002 for <caml-list@pauillac.inria.fr>; Thu, 20 Jun 2002 07:09:10 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g5K598502389
	for <caml-list@inria.fr>; Thu, 20 Jun 2002 07:09:09 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id OAA08556;
	Thu, 20 Jun 2002 14:08:57 +0900 (JST)
To: berke@altern.org
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Marshalling objects (was: French interactive
 fiction, anyone ?)
In-Reply-To: <20020619175654.A14466@gogol.zorgol>
References: <20020617233800.C16032@gogol.zorgol>
	<20020618065723.GJ4232@alan-schm1p>
	<20020619175654.A14466@gogol.zorgol>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020620140857P.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 20 Jun 2002 14:08:57 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 53
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Berke Durak <berke@altern.org>

> Well, this is not exactly about marshalling code : I'm not asking
> Ocaml to be able to transfer pieces of code between different
> programs. Just being able to save an object and reload it in the same
> executable later would suffice : since Caml can save closures under
> the same constraints, the reason why objects can't be saved must be
> something else.

Actually I cannot remember any such reason.
I actually tried, just commenting out the Object_tag case in
byterun/extern.c, and it works!
There's a single glitch: as it just handles objects as normal data,
oid's are not updated. This means that equality on objects (which is
oid based) will be incorrect.
Can somebody comment about other possible problems?
I join some test code at the end of this mail, to run after commenting
out Object_tag.

On the other hand, objects are not just closures, and it would be nice
to be able to serialize their data in a code-independent way. Not so
unreasonable: class names are unique. This would require a bit of
runtime support, to be able to retrieve method tables.

Jacques Garrigue

(* objext.ml *)
class c (n : int) =
  object (self)
    method private n = n
    method get_n = self#n
    method show = string_of_int self#n
  end

let () =
  let o =
    if Sys.file_exists "objext.dat" then
      let ic = open_in "objext.dat" in
      let o : c = input_value ic in
      close_in ic;
      Printf.printf "old value: %s\n" o#show;
      let o' = new c (o#get_n + 1) in
      Printf.printf "new value: %s\n" o'#show;
      Printf.printf "old %s new\n" (if o = o' then "=" else "<>");
      o'
    else begin
      print_endline "created objext.dat";
      new c 0
    end
  in
  let oc = open_out "objext.dat" in
  Marshal.to_channel oc o [Marshal.Closures];
  close_out oc
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

