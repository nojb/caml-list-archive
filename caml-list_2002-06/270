Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA00141; Fri, 21 Jun 2002 19:54:46 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA00333 for <caml-list@pauillac.inria.fr>; Fri, 21 Jun 2002 19:54:45 +0200 (MET DST)
Received: from cs.bu.edu (cs.bu.edu [128.197.12.2])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g5LHsiP27207;
	Fri, 21 Jun 2002 19:54:44 +0200 (MET DST)
Received: from csa.bu.edu (zhudp@csa [128.197.12.3])
	by cs.bu.edu (8.12.2/8.12.2) with ESMTP id g5LHsgF2014411;
	Fri, 21 Jun 2002 13:54:42 -0400 (EDT)
Received: from localhost (zhudp@localhost)
	by csa.bu.edu (8.10.1/8.10.1) with ESMTP id g5LHsdl06084;
	Fri, 21 Jun 2002 13:54:40 -0400 (EDT)
X-Authentication-Warning: csa.bu.edu: zhudp owned process doing -bs
Date: Fri, 21 Jun 2002 13:54:39 -0400 (EDT)
From: dengping zhu <zhudp@cs.bu.edu>
X-Sender: zhudp@csa.bu.edu
To: Daniel de Rauglaudre <daniel.de_rauglaudre@inria.fr>
cc: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] infix precedence
In-Reply-To: <Pine.SOL.4.20.0205282247140.28396-100000@csa.bu.edu>
Message-ID: <Pine.SOL.4.20.0206211334510.28082-100000@csa.bu.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi, Daniel, I have to raise some questions about infix declaration in
camlp4 again.

Now I defined some infix as follows:
------------------------------------
let add_infix lev op = 
  EXTEND
      GLOBAL: Pcaml.expr;
          Pcaml.expr: LEVEL $lev$    
	      [ [ x = SELF; $op$; y = SELF -> <:expr< $lid:op$ $x$ $y$
	      >> ] ];   
	        END;; 

let _ = add_infix "*" ">>*"
let _ = add_infix "<" "wth"
let _ = add_infix "||" "|||"
------------------------------------

Then I have a following function:

  let f = number ||| literal '-' >>* number wth (fun x -> -x)

(where number and literal are some function I defined before.)

According to the infix definition above, this function should 
work as:

  let f = number ||| (literal '-' >>* number wth (fun x -> -x))

because the precedence of 'wth' is higher than that of '|||'.
But, it turns out to evaluate as:

  let f = (number ||| literal '-' >>* number) wth (fun x -> -x)

So, I have to add parenthesis so that it can work properly.
Can you help me to figure out this problem because I want to get rid of
the parenthesis so that my code is more readable? 

Thanks a lot!
Dengping


On Tue, 28 May 2002, dengping zhu wrote:

>Hi, Daniel, it works very well.
>Thanks a lot!
>
>Dengping
>
>
>
>
>On Wed, 29 May 2002, Daniel de Rauglaudre wrote:
>
>>Hi,
>>
>>On Tue, May 28, 2002 at 02:48:42PM -0400, dengping zhu wrote:
>>> 
>>> I tried camlp4 before. I got the example from the camlp4 tutorial and
>>> modified a little bit. 
>>
>>Your code cannot work: you are defining a new entry, you are not using
>>the entry of OCaml expressions, which is Pcaml.expr.
>>
>>  $ cat foo.ml
>>  let add_infix lev op =
>>  EXTEND
>>    GLOBAL: Pcaml.expr;
>>    Pcaml.expr: LEVEL $lev$
>>      [ [ x = SELF; $op$; y = SELF -> <:expr< $lid:op$ $x$ $y$ >> ] ];
>>  END;;
>>  $ ocaml
>>	  Objective Caml version 3.04+11 (2002-05-16)
>>  
>>  # #load "camlp4o.cma";;
>>	  Camlp4s Parsing version 3.04+11
>>  
>>  # #load "pa_extend.cmo";;    
>>  # #load "q_MLast.cmo";;  
>>  # #use "foo.ml";;
>>  val add_infix : string -> string -> unit = <fun>
>>
>>Type:
>>   Grammar.Entry.print Pcaml.expr;;
>>to see the current entry of expressions.
>>
>>The available levels are "top", "expr1", ":=", "||", "&&", "<", "^",
>>"+", "*", "**", "unary minus", "apply", "label", ".", "~-", "simple".
>>They are the one you can use as first parameter of add_infix:
>>
>>  # add_infix "*" "op1";;
>>
>>If you type
>>   Grammar.Entry.print Pcaml.expr;;
>>then you see that the rule with "op1" has been added in the level "*".
>>
>>  # let op1 x y = x + y + 1;;
>>  Toplevel input:
>>  # let op1 x y = x + y + 1;;
>>	^^^
>>  Parse error: 'module' uppercase identifier expected after 'let' (in
>>    [str_item])
>>
>>Normal, since "op1" is now a keyword. Mmmm... the normal form should be:
>>   let (op1) x y = x + y + 1;;
>>But it does not work... this is a bug in Camlp4 that I am going to fix.
>>
>>A solution should be to define it before the "add_infix"...
>>
>>But, in the meantime, this works:
>>   # let \op1 x y = x + y + 1;;
>>   val op1 : int -> int -> int = <fun>
>>   # 3 op1 4;;
>>   - : int = 8
>>
>>-- 
>>Daniel de RAUGLAUDRE
>>daniel.de_rauglaudre@inria.fr
>>http://cristal.inria.fr/~ddr/
>>-------------------
>>To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
>>Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
>>Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>
>
>-------------------
>To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
>Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
>Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

