Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA01227; Wed, 12 Jun 2002 13:20:15 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA01226 for <caml-list@pauillac.inria.fr>; Wed, 12 Jun 2002 13:20:14 +0200 (MET DST)
Received: from leia.mandrakesoft.com (office.mandrakesoft.com [195.68.114.34])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g5CBKEj29716
	for <caml-list@inria.fr>; Wed, 12 Jun 2002 13:20:14 +0200 (MET DST)
Received: by leia.mandrakesoft.com (Postfix, from userid 505)
	id AA44D44F0; Wed, 12 Jun 2002 13:17:48 +0200 (CEST)
To: "Mattias Waldau" <mattias.waldau@abc.se>
Cc: <caml-list@inria.fr>
Subject: Re: Ocaml debugging (Was [Caml-list] Unix.file_descr -> int ???)
References: <005901c211e5$bbe0cc90$0900a8c0@gateway>
From: Pixel <pixel@mandrakesoft.com>
Date: 12 Jun 2002 13:17:48 +0200
In-Reply-To: <005901c211e5$bbe0cc90$0900a8c0@gateway>
Message-ID: <lysn3ssq3n.fsf@leia.mandrakesoft.com>
Lines: 30
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.2
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

"Mattias Waldau" <mattias.waldau@abc.se> writes:

> ocamldebug is very good, and if you sprinkle your code with asserts, 
> and use the backwards stepping function, you find almost all your
> bugs within minutes.
> 
> However, this only works if you don't use signatures and objects.
> Therefor, I do not use them! 
> 
> It would really be an improved to O'Caml if 
> - Functions can be called in the debugger
> - The signatures can be by-passed (so that you can see all
>   elements in your Set)
> - instance variables can be shown.
> 
> I know that you can define printers for the debugger, but currently
> it is too clumsy. Why is this done by ocamlc (isn't it that what -g
> means :-)?

i totally agree! 

i would also add:

- variables occuring only once are not available in debugger. which is
bad when you debug-develop (add a pattern, debug to see exactly what
is happening, add the body of the pattern)

- polymorphic values are not shown (eg: stepping through "map" only
gives you things like <poly>). I sometimes instantiate some parametric
polymorphism functions to get back debug-ability
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

