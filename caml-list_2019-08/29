Return-Path: <frederic.bour@lakaban.net>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 2C1E17ED21
	for <caml-list@sympa.inria.fr>; Fri,  9 Aug 2019 16:56:47 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=frederic.bour@lakaban.net; spf=Pass smtp.mailfrom=frederic.bour@lakaban.net; spf=None smtp.helo=postmaster@mail.lakaban.net
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  frederic.bour@lakaban.net) identity=pra;
  client-ip=213.251.185.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="frederic.bour@lakaban.net";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  frederic.bour@lakaban.net designates 213.251.185.180 as
  permitted sender) identity=mailfrom;
  client-ip=213.251.185.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="frederic.bour@lakaban.net";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail.lakaban.net) identity=helo;
  client-ip=213.251.185.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="postmaster@mail.lakaban.net";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3A1mQwoBA1XHLf2KHQKyZYUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPT5p8bcNUDSrc9gkEXOFd2Cra4d0ayP6v+rBj1IyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfK1+IA+roQnMtMQajolvJ6IswRbVv3VEfP?=
 =?us-ascii?q?hby3l1LlyJhRb84cmw/J9n8ytOvv8q6tBNX6bncakmVLJUFDspPXw7683trhnD?=
 =?us-ascii?q?UBCA5mAAXWUMkxpHGBbK4RfnVZrsqCT6t+592C6HPc3qSL0/RDqv47t3RBLulS?=
 =?us-ascii?q?wKLCAy/n3JhcNsjaJbuBOhqAJ5w47Ie4GeKf5ycrrAcd8GWWZNW8BcXDFDDIyh?=
 =?us-ascii?q?dYsCF+UOPehaoIf9qVUArgawCxewC+700DBEmmX70Lcm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKccUfqvy6bV1zLDdfJW1ivg44XVdRAhvOuMVq93fMrf00kgCR7KgUuK?=
 =?us-ascii?q?qYzkIzyZzP8Cs2+G7+p6Tu+vj3QoqwJrrTe03MgsjJPFhoQLxVDY7Ch0xps+K9?=
 =?us-ascii?q?6gSENjf9KoDZVduzuEO4Z2X88uWXxktSU6x7EcpJK2fzQGxIw5yxLDb/GLaYuF?=
 =?us-ascii?q?7xL5WOqMIDp1hmhpdb2wihu07EOu0PfzVtOu31ZPtidFksfDtnQK1xHL78iIUP?=
 =?us-ascii?q?p9/kO71TaLzQ/T6ftLLlsumqrdMZIhxKA/loYLvUTCGC/5hln2gbeIekk59OWk?=
 =?us-ascii?q?8frrb7X7qpOGKoN5iQHzPr4zlsG8Heg0Kg0OUHKa+eS42r3j50r5QLBSg/04iK?=
 =?us-ascii?q?nWro3VKtoBpq64HwBZyJ0s6xGiDze8y9kYmWMILFFfdx2clYfpPUvCIPbmAvej?=
 =?us-ascii?q?m1isiitkx+jaPr39BZXANmTMn63kfbZ58kJczAszzctD559PEbEAIPfzWlfru9?=
 =?us-ascii?q?DCDx85NRa0w+f9B9ln2IMeQzHHPqjMepnTul+B/O5nHK+pIsc3vzDwMLJts+Tv?=
 =?us-ascii?q?hn8RkFkbcLmo1N0Qcn/uTdp8JEDMT2BtjlYbEGxClA0jVqS+hkePXTNJZn30Va?=
 =?us-ascii?q?Uh/Bk/AYGvB47FAIagnOrSj2+AApRKazUeWRi3GnDyetDBAq9UMXPAEopaijUB?=
 =?us-ascii?q?EIOZZcok3BCquhX9zuM8fO7d+SQSvJSl0tVptbSKyEMCsAdsBsHY6FmjCmF5mm?=
 =?us-ascii?q?RRF20z1aF750h0yV6J2K4+hfFER4QKu6F5FzwiPJuZ9NRUTsjoU1uaLNOAS1+s?=
 =?us-ascii?q?S9PgBzwtHIo8?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAQB0iE1d/7S5+9VmHQEBBQEHBQGBV?=
 =?us-ascii?q?gUBCwGDViASKoQegR2HX4g4ilaIMYgDCQEDAQwvAQGEPwKCfAcBBDMGDgEEAQE?=
 =?us-ascii?q?EAQEEAQMHAWyFJwyCOikBgmcBBAEjBBkBATcBBAsLBAc3AgIiEgEFARwGE4UeD?=
 =?us-ascii?q?wSfYjyKMHJ/M4J6AQEFhjeBBwmBNAGKRoMzhCM+h0+CWJ0djT9tBwKCH5QvG5g?=
 =?us-ascii?q?4pWkPIYFFIoFYTS5FMQaCNYJCiEuFfD0zjw8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ARAQB0iE1d/7S5+9VmHQEBBQEHBQGBVgUBCwGDViASKoQ?=
 =?us-ascii?q?egR2HX4g4ilaIMYgDCQEDAQwvAQGEPwKCfAcBBDMGDgEEAQEEAQEEAQMHAWyFJ?=
 =?us-ascii?q?wyCOikBgmcBBAEjBBkBATcBBAsLBAc3AgIiEgEFARwGE4UeDwSfYjyKMHJ/M4J?=
 =?us-ascii?q?6AQEFhjeBBwmBNAGKRoMzhCM+h0+CWJ0djT9tBwKCH5QvG5g4pWkPIYFFIoFYT?=
 =?us-ascii?q?S5FMQaCNYJCiEuFfD0zjw8BAQ?=
X-IronPort-AV: E=Sophos;i="5.64,364,1559512800"; 
   d="scan'208,217";a="394971347"
X-MGA-submission: =?us-ascii?q?MDFHBtW/8ekZkt9DHs7Jc0+A9ngq3YdAGtZUfc?=
 =?us-ascii?q?OiHMRddyq++0NHnUd1pgCiQ4zmKIhmKojOKIlH7eJUoPf8UlscpK55VH?=
 =?us-ascii?q?s+dwaHXvfXKKgNjmgynPvFVEcQYlO9dJJ5IhMfMLZkd2M8MO+A10WYHn?=
 =?us-ascii?q?Qux9kgmbv0E7QsjwXqDZUR/w=3D=3D?=
Received: from lakaban.net (HELO mail.lakaban.net) ([213.251.185.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 09 Aug 2019 16:56:46 +0200
Received: from mail-lf1-f44.google.com (mail-lf1-f44.google.com [209.85.167.44])
	(Authenticated sender: defre@ygg-drasil.fr)
	by mail.lakaban.net (Postfix) with ESMTPSA id B0E3AC60348
	for <caml-list@inria.fr>; Fri,  9 Aug 2019 16:56:45 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=lakaban.net;
	s=default; t=1565362605;
	bh=Qi+a+PWZkNw/ptgkiVwXNjGceIK2P7FyHnaK+TtcCI0=;
	h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
	b=dCReoDtJp5VrG6gLzQskuIIx5n0buvnPh2XKBeTwFJXnkkvK/WLtO1GDYq6cNqPKX
	 g/ouvIvfX9r6npTtQsAVkchaBTgn14rq5ZAu94cRBDiuKJpAlzaK0Hx1Kcg488KjIk
	 esDJFlSZbHbu8DdGBQvSocGIzASiUihHZALyxjys=
Received: by mail-lf1-f44.google.com with SMTP id v16so15865475lfg.11
        for <caml-list@inria.fr>; Fri, 09 Aug 2019 07:56:45 -0700 (PDT)
X-Gm-Message-State: APjAAAW+zLwEqaVUXzaBj6hRdKNdyOcMl8HefWlE4YrOl/7nLAhi7QyM
	hwJzG+6bqBpws7Nt97KDLnvESv5TDIy1uLo1oCo=
X-Google-Smtp-Source: APXvYqx4CScL90O89vwH2uxonvlTyQpaPQZut7ngOVFsrHlItGPIS+XZtafO0TvRGnoGH8LMKG7R9XnoCZmyTy55RNk=
X-Received: by 2002:ac2:410e:: with SMTP id b14mr4614954lfi.123.1565362604892;
 Fri, 09 Aug 2019 07:56:44 -0700 (PDT)
MIME-Version: 1.0
References: <20190809142719.ff4kogz4fq6r7vfr@annexia.org>
In-Reply-To: <20190809142719.ff4kogz4fq6r7vfr@annexia.org>
From: =?UTF-8?B?RnLDqWTDqXJpYyBCb3Vy?= <frederic.bour@lakaban.net>
Date: Fri, 9 Aug 2019 16:56:33 +0200
X-Gmail-Original-Message-ID: <CAMp_u=cZ++7o5LtUXGy6jQKxwKRMAbA5-bnmpM1DWOmRO5cGMw@mail.gmail.com>
Message-ID: <CAMp_u=cZ++7o5LtUXGy6jQKxwKRMAbA5-bnmpM1DWOmRO5cGMw@mail.gmail.com>
To: "Richard W.M. Jones" <rich@annexia.org>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary="0000000000000268c6058fb06213"
Subject: Re: [Caml-list] Syntax puzzle / suggestion

--0000000000000268c6058fb06213
Content-Type: text/plain; charset="UTF-8"

Abusing list notations and GADTs to keep track of length and ensure
exhaustive matching:

module M = struct type ('a, 'b) t = [] : (_, unit) t | (::) : 'a * ('a, 'b)
t -> ('a, unit * 'b) t end;;
let rec to_list : type a b. (a, b) M.t -> a list = function | M.[] -> [] |
M.(x :: xs) -> x :: to_list xs;;
let decompose x = (to_list x, x);;

# let all_items, M.[item1; item2] = decompose M.["hello"; "world"];;
val all_items : string list = ["hello"; "world"]
val item1 : string = "hello"
val item2 : string = "world"

On Fri, Aug 9, 2019 at 4:27 PM Richard W.M. Jones <rich@annexia.org> wrote:

> Let's imagine you have a list of named things, but you also want to
> collect them up into a single list.  For example:
>
>   let item1 = "hello"
>   let item2 = "world"
>   let all_items = [ item1; item2 ]
>
>   let () =
>     printf "item1 = %s\n" item1;
>     printf "all_items = %s\n" (String.concat ", " all_items)
>
> This is fine, but there's a danger that a programmer could add item3
> but forget to add it to the "all_items" list.  (In the real world
> problem to which this applies, my items are complex and lengthy
> structures, and the "all-things-list" is well off the bottom of the
> page when you're viewing the top item).
>
> My idea to fix this was to write:
>
>   let all_items = [
>     ("hello" as item1);
>     ("world" as item2);
>   ]
>
> Actually I was slightly surprised to find this doesn't compile.  I
> guess because "as" can only be used like this in patterns, not
> expressions.  Also the scoping is wrong because the "as item1" if it
> worked probably wouldn't apply outside the list.
>
> I haven't worked out if it's possible to write this in ordinary OCaml,
> although I suppose ppx could solve it.  Any ideas if this is possible?
>
> Rich.
>

--0000000000000268c6058fb06213
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Abusing list notations and GADTs to keep track of len=
gth and ensure exhaustive matching:</div><div><br></div><div>module M =3D s=
truct type (&#39;a, &#39;b) t =3D [] : (_, unit) t | (::) : &#39;a * (&#39;=
a, &#39;b) t -&gt; (&#39;a, unit * &#39;b) t end;;</div><div>let rec to_lis=
t : type a b. (a, b) M.t -&gt; a list =3D function | M.[] -&gt; [] | M.(x :=
: xs) -&gt; x :: to_list xs;;</div><div>let decompose x =3D (to_list x, x);=
;</div><div><br></div><div># let all_items, M.[item1; item2] =3D decompose =
M.[&quot;hello&quot;; &quot;world&quot;];;<br>val all_items : string list =
=3D [&quot;hello&quot;; &quot;world&quot;]<br>val item1 : string =3D &quot;=
hello&quot;<br>val item2 : string =3D &quot;world&quot;</div></div><br><div=
 class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Fri, Aug 9,=
 2019 at 4:27 PM Richard W.M. Jones &lt;<a href=3D"mailto:rich@annexia.org"=
>rich@annexia.org</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote"=
 style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);p=
adding-left:1ex">Let&#39;s imagine you have a list of named things, but you=
 also want to<br>
collect them up into a single list.=C2=A0 For example:<br>
<br>
=C2=A0 let item1 =3D &quot;hello&quot;<br>
=C2=A0 let item2 =3D &quot;world&quot;<br>
=C2=A0 let all_items =3D [ item1; item2 ]<br>
<br>
=C2=A0 let () =3D<br>
=C2=A0 =C2=A0 printf &quot;item1 =3D %s\n&quot; item1;<br>
=C2=A0 =C2=A0 printf &quot;all_items =3D %s\n&quot; (String.concat &quot;, =
&quot; all_items)<br>
<br>
This is fine, but there&#39;s a danger that a programmer could add item3<br>
but forget to add it to the &quot;all_items&quot; list.=C2=A0 (In the real =
world<br>
problem to which this applies, my items are complex and lengthy<br>
structures, and the &quot;all-things-list&quot; is well off the bottom of t=
he<br>
page when you&#39;re viewing the top item).<br>
<br>
My idea to fix this was to write:<br>
<br>
=C2=A0 let all_items =3D [<br>
=C2=A0 =C2=A0 (&quot;hello&quot; as item1);<br>
=C2=A0 =C2=A0 (&quot;world&quot; as item2);<br>
=C2=A0 ]<br>
<br>
Actually I was slightly surprised to find this doesn&#39;t compile.=C2=A0 I=
<br>
guess because &quot;as&quot; can only be used like this in patterns, not<br>
expressions.=C2=A0 Also the scoping is wrong because the &quot;as item1&quo=
t; if it<br>
worked probably wouldn&#39;t apply outside the list.<br>
<br>
I haven&#39;t worked out if it&#39;s possible to write this in ordinary OCa=
ml,<br>
although I suppose ppx could solve it.=C2=A0 Any ideas if this is possible?=
<br>
<br>
Rich.<br>
</blockquote></div>

--0000000000000268c6058fb06213--
