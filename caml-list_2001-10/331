Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA00331; Wed, 31 Oct 2001 04:05:26 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA32634 for <caml-list@pauillac.inria.fr>; Wed, 31 Oct 2001 04:05:25 +0100 (MET)
Received: from smtp4-cm.mail.eni.net (smtp4-cm.mail.eni.net [216.133.226.137])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f9V35Nb22347
	for <caml-list@inria.fr>; Wed, 31 Oct 2001 04:05:23 +0100 (MET)
Received: from checkerlap.d6.com (node-d8e9cca2.powerinter.net [216.233.204.162])
	by smtp4-cm.mail.eni.net (8.9.3/8.9.3) with ESMTP id TAA31019
	for <caml-list@inria.fr>; Tue, 30 Oct 2001 19:05:21 -0800
Message-Id: <4.3.2.7.2.20011030174718.02888870@arda.pair.com>
X-Sender: checker@arda.pair.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Tue, 30 Oct 2001 19:08:37 -0800
To: caml-list@inria.fr
From: Chris Hecker <checker@d6.com>
Subject: [Caml-list] native code optimization priorities
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Hi, this is just a general question about the caml development team's priorities with respect to the native code compiler's optimized code generation (and bytecode where appropriate), and some specific questions that go along with that.  

I think optimizations are far less important than new features since Moore's law works on the former but not the latter.  So, in some sense, I hope adding new features[*] is prioritized much higher than optimization.

However, I have a bunch of small things I'd like to implement (or see implemented) for making native numerical code faster.  This is primarily for my video game work, but the kinds of things I have in mind will also help any numerically intensive application.  So, here are my questions:

0.  How important is optimization to the team?

1.  Are there any new (big or small) optimizations planned or in the works?

2.  What's the relative priority of new features versus compiler optimizations?

3.  Is there some kind of standard suite of test applications the caml team runs to figure out whether an optimization is worth it to include?  

4.  Are numerical operations an important area for ocaml to succeed?  Put another way, if an optimization helps numerical code but does not help other code (or even slightly hurts it), how would that patch be received?  What about command line options for optimization (of which there very few now) to offset this affect?

5.  How does the team feel about optimizations added to the x86 code generator that don't help other platforms?

Thanks,
Chris

* My personal favorites one more time: overloading, module recursion, generics!

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

