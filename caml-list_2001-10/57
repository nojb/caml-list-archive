Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA27291; Mon, 8 Oct 2001 11:17:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA27314 for <caml-list@pauillac.inria.fr>; Mon, 8 Oct 2001 11:17:20 +0200 (MET DST)
Received: from comtv.ru (mail.comtv.ru [217.10.32.3])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f989HJv05881
	for <caml-list@inria.fr>; Mon, 8 Oct 2001 11:17:19 +0200 (MET DST)
Received: from [10.2.64.72] (HELO oyster2)
  by comtv.ru (CommuniGate Pro SMTP 3.4.7)
  with ESMTP id 923645; Mon, 08 Oct 2001 13:17:13 +0400
Date: Mon, 8 Oct 2001 13:18:26 +0400 (MSD)
From: malc <malc@pulsesoft.com>
X-Sender: malc@oyster
To: Jeff Henrikson <jehenrik@yahoo.com>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Shared object generation patch feedback
In-Reply-To: <002901c14fa0$73f85220$0b01a8c0@mit.edu>
Message-ID: <Pine.LNX.4.21.0110081259490.531-100000@oyster>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sun, 7 Oct 2001, Jeff Henrikson wrote:

> > At http://algol.prosalg.no/~malc/scaml you will find a patch against
> > OCaml 3.02 and some information suitable for producing shared objects
> > on i386 ELF systems.
> 
> Nice!  It compiled right out of the box, no unexpected difficulties.
> 
> Is there a way to get a asm runtime in a shared lib?  (Either for the purposes of having small executables or for calling from
> non-caml)
Yes. (ocamlopt -shared ... -ccopt "-L`ocamlc -where` -lasmrun -u caml_main")

> 
> I am having a hard time understanding how this works due to the fact that I don't understand the ocaml calling/symbol naming
> convention.  I've been reading some assembly intermediary files and nm dumps, but I am still confused and am wondering if there's
> some general documentation somewhere.
> 
> Here's an example of something that confuses me.  I make a file testlib.ml:
> 
> > open Printf;;
> >
> > let rec print_int_list x =
> >   match x with
> >     [] -> ()
> >   | hd::tl -> printf "%d " hd; (print_int_list tl);;
> >
> > let rec mymap f l =
> >   match l with
> >     [] -> []
> >   | hd::tl -> (f hd)::(mymap f tl);;
> 
> and I nm testlib.so and get
> 
> > 000010c0 T Testlib_code_begin
> > 0000118a T Testlib_code_end
> > 000023f4 D Testlib_data_begin
> > 00002424 D Testlib_data_end
> > 00001170 T Testlib_entry
> > 00002428 D Testlib_frametable
> > 00001100 T Testlib_mymap_53
> > 000010c0 T Testlib_print_int_list_49
> 
> So I wonder:
> 
> 1) where do the numbers 53 and 49 come from, and do I care?  For example, if they are arbitrary (as I surmise) and socked away in
> testlib.so.cmxa, then don't I get screwed if I try to build an program linked against testlib.so.cmxa and then decide that I want
> to change the implementation of testlib?  If so, is there a way to define a symbol table just from an mli?  (A .so.cmi file or
> something?)  This command only produces a .cmi:
OCaml add those suffixes for variety of reasons, something must be done
about it (on the linking stage), if people want -shared to take off.

> 
> ocamlopt -shared -o foo.so foo.mli
Naturally. There is nothing to compile, leave alone link here :)

> 
> 2) what do the other entry points mean, eg Testlib_entry, and do I care?
Those are module toplevel forms. _frametable, _code[data]_begin[end] are
used by GC, equality comparisions, marshaling etc.

> 
> Great work if this actually is heading down the path to real system deployment with ocaml!
There is still a lot to be done, to make it really useful. But thanks for
encouragment, i needed it.
> 
> 
> Jeff Henrikson

-- 
mailto:malc@pulsesoft.com

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

