Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id D20C6BC6B
	for <caml-list@yquem.inria.fr>; Tue,  8 Jan 2008 03:46:35 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CALdygkeCNhAB/2dsb2JhbACoUA
X-IronPort-AV: E=Sophos;i="4.24,255,1196636400"; 
   d="scan'208";a="20998999"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 08 Jan 2008 03:46:34 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m082kSQ0001649;
	Tue, 8 Jan 2008 11:46:28 +0900 (JST)
Date: Tue, 08 Jan 2008 11:46:23 +0900 (JST)
Message-Id: <20080108.114623.191488419.garrigue@math.nagoya-u.ac.jp>
To: jon@ffconsultancy.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Native-code ocamlbrowser
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200801071246.48230.jon@ffconsultancy.com>
References: <200801071246.48230.jon@ffconsultancy.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; native-code:01 native-code:01 ocaml's:01 ocaml:01 gtk:01 caml-list:01 garrigue:03 garrigue:03 widget:03 widget:03 apis:03 jacques:03 jacques:03 nagoya-u:04 problem:05 

From: Jon Harrop <jon@ffconsultancy.com>

> May I put in a request for a native-code implementation of the ocamlbrowser 
> tool. It is a great tool for browsing OCaml's many APIs but it gets very slow 
> on big ones, like GLCaml.

Actually, the problem is not the speed of ocaml code, but of Tk's text
widget. Ocamlbrowser uses lots of tags for text coloring, and this
slows the text widget. If somebody knows of a more efficient way to do
it...
Another approach would be to port ocamlbrowser to GTK, but I never
found the time to finish it.

Jacques Garrigue

