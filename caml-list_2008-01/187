Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id CD09DBC69
	for <caml-list@yquem.inria.fr>; Tue, 15 Jan 2008 10:01:54 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAN0FjEeCNhAB/2dsb2JhbACqZg
X-IronPort-AV: E=Sophos;i="4.24,286,1196636400"; 
   d="scan'208";a="6656152"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 15 Jan 2008 10:01:53 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m0F91mfg014273;
	Tue, 15 Jan 2008 18:01:48 +0900 (JST)
Date: Tue, 15 Jan 2008 18:01:42 +0900 (JST)
Message-Id: <20080115.180142.123979196.garrigue@math.nagoya-u.ac.jp>
To: jon@ffconsultancy.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: Hash clash in polymorphic variants
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200801150459.03896.jon@ffconsultancy.com>
References: <200801140956.25449.ober.14@osu.edu>
	<20080115.123621.184910428.garrigue@math.nagoya-u.ac.jp>
	<200801150459.03896.jon@ffconsultancy.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; hash:01 variants:01 marshalling:01 variants:01 caching:01 run-time:01 lablgl:01 lablgl:01 wrappers:01 doable:01 cpp:01 polymorphic:01 polymorphic:01 wrote:01 compile:01 

From: Jon Harrop <jon@ffconsultancy.com>
> On Tuesday 15 January 2008 03:36:21 Jacques Garrigue wrote:
> > Unfortunately, this would make marshalling between different programs
> > much more complicated...
> 
> Do people marshal polymorphic variants between different programs?

Do people marshal data between different programs (or different
versions of the same program)?

> For 3-16 tags on AMD64, jump tables (ordinary variants) are 2x slower than 
> decision trees (polymorphic variants) when branches are taken at random. 
> However, jump tables are consistently up to 2x faster when a single branch is 
> taken repeatedly. So caching jump tables is more effective at run-time 
> optimizing pattern matches over ordinary variants than branch prediction is 
> at optimizing decision trees for pattern matches over polymorphic variants.
> 
> So the advantage of a decision tree is probably insignificant on real code 
> because it will lie between these two extremes.

Since the goal was never to be faster than ordinary variants, but just
obtain comparable speed, this seems good :-)

> > Now concerning the risks of name conflicts. The main point of
> > polymorphic variants is that there is only a conflict if the two tags
> > appear in the same type. And logically the type should stay small.
> > If you want to put all GLenum's inside the same type, then you may
> > well end up with conflicts. But what LablGL shows is that in practice
> > only a small number of tags are used together.
> 
> Can LablGL's design support OpenGL extensions?

I'm not sure what this means.
Since LablGL was coded by hand, adding extensions would mean modifying
it.
One might want to add a way to detect whether an extension is
available or not, but making it static does not seem a good idea: one
wouldn't even be able to compile code using an extension that is not
available.
Also, one might want to make code generation automatic, particularly
for C wrappers, to allow adding cases to functions easily. This should
be doable, but there is no infrastructure for that currently
(using CPP macros was simpler to start with...)

Jacques Garrigue

