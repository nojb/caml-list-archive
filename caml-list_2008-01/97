Return-Path: <rich@annexia.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 441FFBC6B
	for <caml-list@yquem.inria.fr>; Wed,  9 Jan 2008 17:04:32 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAAR/hEdQRFuw/2dsb2JhbACpdw
X-IronPort-AV: E=Sophos;i="4.24,263,1196636400"; 
   d="scan'208";a="6459244"
Received: from furbychan.cocan.org ([80.68.91.176])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 09 Jan 2008 17:04:32 +0100
Received: from rich by furbychan.cocan.org with local (Exim 4.63)
	(envelope-from <rich@annexia.org>)
	id 1JCdPm-0005Mj-Rc; Wed, 09 Jan 2008 16:04:27 +0000
Date: Wed, 9 Jan 2008 16:04:26 +0000
To: Daniel Andor <danielandor@gmail.com>
Cc: Brian Hurt <bhurt@janestcapital.com>, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Parallelism with threads
Message-ID: <20080109160423.GA20285@annexia.org>
References: <200801081456.49677.jon@ffconsultancy.com> <4d5f7bec0801081131u2ebfae8aia0b13564d13b03c6@mail.gmail.com> <4783D640.7080800@janestcapital.com> <4d5f7bec0801090646q2e6320b8wc3f3d196066bf414@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <4d5f7bec0801090646q2e6320b8wc3f3d196066bf414@mail.gmail.com>
User-Agent: Mutt/1.5.13 (2006-08-11)
From: Richard Jones <rich@annexia.org>
X-Spam: no; 0.00; parallelism:01 sockets:01 erlang:01 model:01 ocaml:01 yup:01 shm:98 threads:01 wrote:01 wrote:01 caml-list:01 data:02 sys:03 typed:04 mpi:04 

On Wed, Jan 09, 2008 at 09:46:39AM -0500, Daniel Andor wrote:
> On Jan 8, 2008 3:00 PM, Brian Hurt <bhurt@janestcapital.com> wrote:
> >  The heaps wouldn't be able to see each other, but they'd be able to
> > communicate via light weight (and strongly typed) message passing, and you
> > wouldn't have to dink around with sockets, pipes, MPI, or simiar "heavy
> > weight" solutions, so it'd be simpler, and possibly faster.  This is not
> > unlike the Erlang model, in fact.
> 
> Are there any solutions that do not involve message passing?  I have
> heaps of data that barely fits into memory, and sharing that memory is
> the most straightforward way to process it.
> 
> If sharing process space is out, are there other ways to share memory?
>  How about sys V SHM or MMAP, or variations -- how would that work
> under OCaml?

Yup, see:

http://merjis.com/developers/ancient

Rich.

-- 
Richard Jones
Red Hat

