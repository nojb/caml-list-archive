Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id F304FBC6B
	for <caml-list@yquem.inria.fr>; Thu, 10 Jan 2008 23:29:47 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAEsqhkfAXQInh2dsb2JhbACQHgEBAQgKKZkn
X-IronPort-AV: E=Sophos;i="4.24,268,1196636400"; 
   d="scan'208";a="7657727"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 10 Jan 2008 23:29:47 +0100
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m0AMTlPF013484
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Thu, 10 Jan 2008 23:29:47 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAEsqhkfAbSoIh2dsb2JhbACQHgEBAQgKKZkn
X-IronPort-AV: E=Sophos;i="4.24,268,1196636400"; 
   d="scan'208";a="5923704"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 10 Jan 2008 23:29:46 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from einhorn.in-berlin.de (localhost [127.0.0.1])
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id m0AMTjTX000916
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@inria.fr>; Thu, 10 Jan 2008 23:29:45 +0100
Received: (from www-data@localhost)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Submit) id m0AMTjlr000910
	for caml-list@inria.fr; Thu, 10 Jan 2008 23:29:45 +0100
X-Authentication-Warning: einhorn.in-berlin.de: www-data set sender to oliver@first.in-berlin.de using -f
Received: from dslb-088-073-077-156.pools.arcor-ip.net (dslb-088-073-077-156.pools.arcor-ip.net [88.73.77.156]) 
	by webmail.in-berlin.de (IMP) with HTTP 
	for <first@localhost>; Thu, 10 Jan 2008 23:29:45 +0100
Message-ID: <1200004185.47869c59a1bc4@webmail.in-berlin.de>
Date: Thu, 10 Jan 2008 23:29:45 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Annoying behaviour of OCaml
References: <447544.64925.qm@web30511.mail.mud.yahoo.com>
In-Reply-To: <447544.64925.qm@web30511.mail.mud.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Miltered: at concorde with ID 47869C5B.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bandel:01 in-berlin:01 ocaml:01 bandel:01 in-berlin:01 bug:01 kde:01 gui-design:01 bug:01 overriding:01 haskell:01 ocaml:01 haskell:01 guideline:98 imho:01 

Zitat von David Thomas <david_hd@yahoo.com>:

>
> --- Oliver Bandel <oliver@first.in-berlin.de> wrote:
> > Even if this would be the case, not what we expect
> > is of importance, but what the documentation says.
> > If there's a difference between documentation and
> > bahaviour, then there is a bug (in the
> documentation,
> > or in the implementation, or both).
>
> I disagree that expectations are of no importance.
> Principle of least surprise and all that...
[...]

Principle of least surprise is fine.
But it depends on the view of the one
who is surprised or not.

When I start to use Blender for example,
with the principle of least surprise,
I will be very surprised not to have
the typical Windows-GUI (and KDE and such stuff)
when using it.
I could blame the developers for using completely
different ways of GUI-design, writing hate-mails to them,
why they didn't used the menues that every person expects,
when using a GUI-based application, ...
...or I could try to learn how to use and see, that
it's the best GUI (IMHO), that was ever invented.

Or there are expectations to three mouse-buttons and
for a long time the expectation was, that only the
left button has to be used; since a while the right one
also became popular, and later then the middle button.

But some years ago I wanted to provide a GUI as frontend to
sendfile; I used left button for "add file", right
for "remove file" (or other way around, don't know).
The sendmail developer than said, this is against
the expectations, so he would not encourage it.

To go that way every time IMHO is nonsesne...
...expectations can (and WILL) be changed by the
programs that people use. Habituating to them
means changing the expectations.

Expectations are based on habits.
And habits can change (even if sometimes slowly).



OK, this is not OCaml-discussion, but you started an abstract
discussion, so I can use the arguments on other software too.


> Violation
> of expectations is a bug not in documentation or
> implementation, but design.  That said, there may very
> well be overriding concerns that force us to introduce
> behavior contrary to expectations in certain instances
> - it's one guideline of many.

So, OK, then these "overridings" are at work here. ;-)

When one knows them, this is OK, IMHO.
The perfect world can possibly be found at http://www.haskell.org/

I'm now very habituated to OCaml. And it's "imperfection"
(compared to Haskell) is a plus for me, because I like the
multi-paradigm way.

I also have moaned about non-functional strings
years ago (when starting with OCaml), but now my expectations have
been ocamlized ;-) and today it's ok for me. There are good reasons for
them and I could go to the Haskell-universe if I don't want them.
And I didn't had problems with the imparative strings so far,
so my experiences confirmed the design of OCaml.
This might be different for other people, depending on needs and
expectations ;-) (needs might also be habituated).

And if compare does not fit the needs, one can write special
compare-functions. I'm sure, in OCaml, this can be done with
a hand of lines of Code.

Ciao,
   Oliver

