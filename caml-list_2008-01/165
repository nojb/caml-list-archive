Return-Path: <toots@rastageeks.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 46E50BC69
	for <caml-list@yquem.inria.fr>; Sun, 13 Jan 2008 14:58:25 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CALaniUdYvxGE/2dsb2JhbACmJw
X-IronPort-AV: E=Sophos;i="4.24,278,1196636400"; 
   d="scan'208";a="7752353"
Received: from www.rastageeks.org (HELO mail.rastageeks.org) ([88.191.17.132])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 13 Jan 2008 14:58:25 +0100
Received: from [192.168.0.2] (rob92-9-88-161-115-205.fbx.proxad.net [88.161.115.205])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.rastageeks.org (Postfix) with ESMTP id 53AF295451
	for <caml-list@yquem.inria.fr>; Sun, 13 Jan 2008 14:58:24 +0100 (CET)
From: Romain Beauxis <toots@rastageeks.org>
To: caml-list@yquem.inria.fr
Subject: bug in object type inference ?
Date: Sun, 13 Jan 2008 14:58:21 +0100
User-Agent: KMail/1.9.7
MIME-Version: 1.0
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200801131458.21400.toots@rastageeks.org>
X-Spam: no; 0.00; bug:01 inference:01 foo:01 instanciate:01 foo:01 inference:01 incompatible:01 semantic:02 define:02 expression:02 argument:02 argument:02 parameter:02 string:02 objects:02 

	Hi all !

While preparing a function that takes an object as parameter, I encountered a 
type issue on which I'd like to have some feedback..

Let's consider this very simple example:

* We got a class of objects:
class test =
  object(self)
  method test ?(foo="bar") () = ()
end

* We instanciate one of them:
let p = new test

* We define a function that takes one of them, plus additional argument, and 
apply to the method test:
let f = fun p foo -> p#test ~foo ()

* Then, we got a type error:
This expression has type test but is here used with type
  < test : foo:'a -> unit -> 'b; .. >
Types for method test are incompatible

This means that the optional argument for method test in class test is infered 
as mandatory argument for the object passed to f.

Or course, this can be solved by writing directly:
let f : test -> string -> unit  = fun p foo -> p#test ~foo ()

But I'm wondering why the type inference could not just say "either optional 
either mandatory argument". After all, this confusion comes from the fact the 
the semantic for applying optional and mandatory arguments are the same...

Or perhaps this is a well known subject and I'm not documented enough ?


Romain

