Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 933DFBC6C
	for <caml-list@yquem.inria.fr>; Fri, 18 Jan 2008 10:12:24 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAGr8j0eCNhAB/2dsb2JhbACtaw
X-IronPort-AV: E=Sophos;i="4.25,215,1199660400"; 
   d="scan'208";a="6272886"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 18 Jan 2008 10:12:23 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m0I9CDAR001555;
	Fri, 18 Jan 2008 18:12:13 +0900 (JST)
Date: Fri, 18 Jan 2008 18:12:06 +0900 (JST)
Message-Id: <20080118.181206.85503086.garrigue@math.nagoya-u.ac.jp>
To: till.varoquaux@gmail.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Strange performances
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <9d3ec8300801172339j38bf734dm5b84f951a4342188@mail.gmail.com>
References: <1200619933.6383.47.camel@benjamin-laptop>
	<20080118.111503.185813743.garrigue@math.nagoya-u.ac.jp>
	<9d3ec8300801172339j38bf734dm5b84f951a4342188@mail.gmail.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; segfaults:01 segfaults:01 segfault:01 ocaml's:01 out-of-bound:01 wrote:01 stack:01 stack:01 caml-list:01 unsafe:01 behaviour:01 native:03 garrigue:03 garrigue:03 seems:03 

From: "Till Varoquaux" <till.varoquaux@gmail.com>
> On Jan 18, 2008 2:15 AM, Jacques Garrigue <garrigue@math.nagoya-u.ac.jp> wrote:
> ...
> > By the way, on my machine your version doesn't even work in native
> > code, I only get segfaults. This is allowed behaviour for
> > out-of-bounds access.
> 
> Could you please clarify? This seems a little scary to me, I thought
> segfaults where acceptable only when you used unsafe features (or ran
> out of stack).

This is why I sent an erratum. The cause for the segfault was not the
array access, but the stack overflow, which occured due to ocaml's
peculiar evaluation order.
Still, I maintain that intentionally raising and catching out-of-bound
accesses is not good programming style...

Jacques Garrigue

