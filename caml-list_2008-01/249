Return-Path: <Christian.Sternagel@uibk.ac.at>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 4CC9ABC6C
	for <caml-list@yquem.inria.fr>; Fri, 18 Jan 2008 18:08:55 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAPtrkEeK6AGOn2dsb2JhbACQFAEBAQEHBAYJCBidGw
X-IronPort-AV: E=Sophos;i="4.25,217,1199660400"; 
   d="scan'208";a="8051058"
Received: from lmr1.uibk.ac.at (HELO smtp.uibk.ac.at) ([138.232.1.142])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 18 Jan 2008 18:08:54 +0100
Received: from localhost (lwm2.uibk.ac.at [138.232.1.161] Christian.Sternagel@uibk.ac.at)
        by smtp.uibk.ac.at (8.13.8/8.13.8/F1) with ESMTP id m0IH8qAY014945
        for <caml-list@yquem.inria.fr>; Fri, 18 Jan 2008 18:08:52 +0100
Received: from chello213047188176.tirol.surfer.at (chello213047188176.tirol.surfer.at [213.47.188.176]) 
	by web-mail2.uibk.ac.at (IMP) with HTTP 
	for <c703350@mail1.uibk.ac.at>; Fri, 18 Jan 2008 18:08:52 +0100
Message-ID: <1200676132.4790dd24bfca9@web-mail2.uibk.ac.at>
Date: Fri, 18 Jan 2008 18:08:52 +0100
From: Christian Sternagel <Christian.Sternagel@uibk.ac.at>
To: caml-list@yquem.inria.fr
Subject: camlp4
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.8
X-Originating-IP: 213.47.188.176
X-Forwarded-For: 
X-Scanned-By: MIMEDefang 2.61 at uibk.ac.at on 138.232.1.140
X-Spam: no; 0.00; camlp:01 camlp:01 flatten:01 appends:01 cheers:01 preprocessor:01 optimization:03 naive:03 cons:04 translation:07 fun:08 fun:08 minimize:10 resulting:11 using:15 

When using `camlp4o -parser Camlp4ListComprehension' as preprocessor,
is the resulting code the naive translation, like in,

 [(x, y) | x <- xs, even xs, y <- ys]

=>

 List.flatten (
  List.map (fun x -> List.map (fun y -> (x, y)) ys) (List.filter even xs)
 )

or is there an optimization in order to avoid appends and minimize the
number of cons?

cheers

christian

