Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id CDD2DBC6B
	for <caml-list@yquem.inria.fr>; Tue,  8 Jan 2008 03:30:48 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAKpvgkeCNhAB/2dsb2JhbACoTg
X-IronPort-AV: E=Sophos;i="4.24,255,1196636400"; 
   d="scan'208";a="6391249"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 08 Jan 2008 03:30:47 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m082Ubv0026376;
	Tue, 8 Jan 2008 11:30:37 +0900 (JST)
Date: Tue, 08 Jan 2008 11:30:31 +0900 (JST)
Message-Id: <20080108.113031.162099765.garrigue@math.nagoya-u.ac.jp>
To: jon@ffconsultancy.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] "OCaml gives you only monomorphic methods in
 classes."
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200712290711.34066.jon@ffconsultancy.com>
References: <200712282337.23952.jon@ffconsultancy.com>
	<Pine.LNX.4.58.0712282223460.10344@shell2.speakeasy.net>
	<200712290711.34066.jon@ffconsultancy.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocaml:01 milner:01 inference:01 ocaml:01 haskell:01 overloading:01 polymorphism:01 odersky:01 touted:01 olabl:01 olabl:01 polymorphism:01 odersky:01 non-trivial:01 co-author:01 

From: Jon Harrop <jon@ffconsultancy.com>
> I just read this quote and I do not understand what it means:
> 
>   "In particular, the Hindley/Milner style of type inference used in languages 
> such as OCaml or Haskell is incompatible with lots of assumptions of OO 
> languages. One incompatibility is with overloading. That's why OCaml does not 
> let you write + for both integer and floating point addition. Another 
> incompatibility is with higher order polymorphism. That's why OCaml gives you 
> only monomorphic methods in classes." - Martin Odersky
> 
> In what way must methods be monomorphic in OCaml classes?

They don't. With the restriction that the types of polymorphic
methods cannot be inferred. There is also another subtle
limitation, that object are only allowed to have regular
types. As a result, one cannot write a polymorphic map method in
ocaml, but this is possible in Java 2 or Scala.

> On Saturday 29 December 2007 06:30:48 brogoff wrote:
> > What's the date that quote was made?
> 
> Yesterday, by the professor heading the group at Lausanne who are developing 
> one of the most widely touted modern statically-typed functional programming 
> languages (Scala).
> 
> > It was probably made before polymorphic methods were added to OCaml from
> > OLabl. 
> 
> Looks like polymorphic methods have been in OCaml for 5 years now:
> 
> http://caml.inria.fr/pub/ml-archives/caml-list/2002/07/0efd71474f4d41a39e4250aeddcf08e5.en.html

Actually, this is now close to 10 years if you include the OLabl
distribution... The original paper on adding semi-implicit first-class
polymorphism to HM was published in 1997.

I'm quite sure that Martin Odersky is aware of this. I would rather
interpret his quote as meaning that you have to extend HM in a
non-trivial way to allow this. He was co-author of two papers
about extending HM with first-class polymorphism ("putting type
annotations to work") and OO (the HM(X) framework), a long time
ago too. All these extensions (including the one used in ocaml) have
drawbacks, in particular they are either verbose or have bad error
messages, or both...

Anyway, you should not underestimate his contribution to this area of
work.

> This is really ossifying my impression that the Scala developers (let alone 
> the community) are not aware of the current state-of-the-art in statically 
> typed functional programming languages despite the fact that their sole 
> purpose is to improve upon them.
> 
> Unfortunately, this is rubbing off on the Scala community who keep publishing 
> articles making silly claims like "Scala is the first impure functional 
> programming language".

This is maybe not fully correct, but at least one can say that Scala
is "the most impure of functional languages" :-)

Cheers,

Jacques Garrigue

