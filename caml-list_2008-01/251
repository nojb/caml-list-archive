Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 2AB47BC6C
	for <caml-list@yquem.inria.fr>; Fri, 18 Jan 2008 18:50:09 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAFt1kEfUnw6Fg2dsb2JhbACCNY1fAQEBCAQGEREHnVU
X-IronPort-AV: E=Sophos;i="4.25,217,1199660400"; 
   d="scan'208";a="8052081"
Received: from pih-relay06.plus.net ([212.159.14.133])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 18 Jan 2008 18:50:08 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay06.plus.net with esmtp (Exim) id 1JFvLy-0006M1-Vm
	for caml-list@yquem.inria.fr; Fri, 18 Jan 2008 17:50:07 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Strange performances
Date: Fri, 18 Jan 2008 17:43:22 +0000
User-Agent: KMail/1.9.7
References: <1200619933.6383.47.camel@benjamin-laptop> <20080118.181206.85503086.garrigue@math.nagoya-u.ac.jp> <1200675314.6345.32.camel@benjamin-laptop>
In-Reply-To: <1200675314.6345.32.camel@benjamin-laptop>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200801181743.22912.jon@ffconsultancy.com>
X-Spam: no; 0.00; mutable:01 downto:01 frog:98 wrote:01 rec:01 caml-list:01 imperative:01 benjamin:01 data:02 argument:02 bounds:02 structures:02 string:02 string:02 let:03 

On Friday 18 January 2008 16:55:14 Benjamin Canou wrote:
> This code works perfectly :
>
> let list_of_string s =
>   let rec list_of_string s i =
>     try let e = s.[i] in e :: list_of_string s (succ i)
>     with Invalid_argument "index out of bounds" -> []
>   in list_of_string s 0

As an aside, I would recommend using an imperative style with mutable data 
structures like "string" are involved:

  let list_of_string string =
    let list = ref [] in
    for i = String.length string - 1 downto 0 do
      list := string.[i] :: !list
    done;
    !list;;

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

