Return-Path: <christophe.raffalli@univ-savoie.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 5DAD5BC6B
	for <caml-list@yquem.inria.fr>; Thu, 24 Jan 2008 23:34:00 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAGShmEfAXQImh2dsb2JhbACBV45NAQEBCAopnlc
X-IronPort-AV: E=Sophos;i="4.25,246,1199660400"; 
   d="scan'208";a="6543849"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 24 Jan 2008 23:34:00 +0100
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id m0OMXxYg020519
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Thu, 24 Jan 2008 23:34:00 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAGShmEfUGypAimdsb2JhbACBV45NAQEBCAIIBwoICQeeVw
X-IronPort-AV: E=Sophos;i="4.25,246,1199660400"; 
   d="scan'208";a="7191920"
Received: from smtp7-g19.free.fr ([212.27.42.64])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 24 Jan 2008 23:33:59 +0100
Received: from smtp7-g19.free.fr (localhost [127.0.0.1])
	by smtp7-g19.free.fr (Postfix) with ESMTP id 805D232284E
	for <caml-list@inria.fr>; Thu, 24 Jan 2008 23:33:59 +0100 (CET)
Received: from macbookpro.local (lns-bzn-48f-81-56-220-129.adsl.proxad.net [81.56.220.129])
	by smtp7-g19.free.fr (Postfix) with ESMTP id 4ECCC32283D
	for <caml-list@inria.fr>; Thu, 24 Jan 2008 23:33:59 +0100 (CET)
Message-ID: <47991356.9030307@univ-savoie.fr>
Date: Thu, 24 Jan 2008 23:38:14 +0100
From: Christophe Raffalli <christophe.raffalli@univ-savoie.fr>
User-Agent: Thunderbird 2.0.0.9 (Macintosh/20071031)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: disjoint test in set.
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 47991257.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; christophe:01 raffalli:01 christophe:01 raffalli:01 univ-savoie:01 intersection:01 node:01 node:01 ord:01 subset:01 symmetric:01 rec:01 signatures:01 heap:01 match:02 


Dear list member,

I think a function testing if two sets are disjoint is really simple, 
more efficient than building the intersection, and missing in the 
standard library ?
I may be wrong ?

Here it is if someone wants to copy it in set.ml :

    let rec disjoint t1 t2 =
      match (t1, t2) with
        (Empty, _) | (_, Empty) ->
          true
      | (Node (l1, v1, r1, _), Node (l2, v2, r2, _)) ->
          let c = Ord.compare v1 v2 in
          if c = 0 then
            false
          else if c < 0 then
            disjoint (Node (l1, v1, Empty, 0)) l2 && disjoint r1 t2
          else
            disjoint l1 (Node (l2, v2, Empty, 0)) && disjoint t1 r2

+ the necessary lignes in signatures ...

Then, a small question:

Can we make disjoint (and subset) do no allocation in the heap (That is 
remove Node (l1, v1, Empty, 0) and the symmetric
from the code without loss of performance ? (checking v1 and l1 
separately is surely a bad idea) ...

Best Regards,
Christophe

