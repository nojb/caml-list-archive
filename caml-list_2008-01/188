Return-Path: <daniel.c.buenzli@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.8 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 675F1BC69
	for <caml-list@yquem.inria.fr>; Tue, 15 Jan 2008 12:20:09 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAACcmjEfRVYC8mGdsb2JhbACQBwEBAQEHBAYnky2HHA
X-IronPort-AV: E=Sophos;i="4.24,286,1196636400"; 
   d="scan'208";a="21241548"
Received: from fk-out-0910.google.com ([209.85.128.188])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 15 Jan 2008 12:20:09 +0100
Received: by fk-out-0910.google.com with SMTP id b27so1804453fka.11
        for <caml-list@yquem.inria.fr>; Tue, 15 Jan 2008 03:20:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:from:to:content-type:content-transfer-encoding:mime-version:subject:date:x-mailer:sender;
        bh=suldb3Ouv/CUJCZ5SFHrDjIUtMnepMv+mXHvvvFlF74=;
        b=oLd1Qi8bvnf/MAqTHLkjggego6iNoShpCDcZZc3l+jLl2uz1KPlCg25cCm3iKIlc6PC+fwyE9jrFaJBAXt74+a/LfzYPcK9IykXfh8Njrz8M4ANG7x8NMaYesdvPFYs4OYrS5oOto4uiB+6iqsGTlM4rqTjqmMqObda+4IsxrNE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:from:to:content-type:content-transfer-encoding:mime-version:subject:date:x-mailer:sender;
        b=U6CPgRuPJLqHpX91yDMqnpiNcw6qsb+6xBp+A+gSNKGHZA34wN2mT8KEtpS9ukWFZs1UMOoFIHHJQbYN8zTF42pire54+VoI65ofK7l6lWI/oO3QJp9OYd/RBI7syTnYR1m3hN5y4siASygs55Vrfg/z829NH4UaZi4YXZqJT8U=
Received: by 10.78.177.3 with SMTP id z3mr8601672hue.51.1200396006863;
        Tue, 15 Jan 2008 03:20:06 -0800 (PST)
Received: from ?192.168.1.58? ( [85.2.82.46])
        by mx.google.com with ESMTPS id k5sm12954005nfd.23.2008.01.15.03.20.06
        (version=TLSv1/SSLv3 cipher=OTHER);
        Tue, 15 Jan 2008 03:20:06 -0800 (PST)
Message-Id: <92920466-3BCE-4A9F-9742-3396B07006F7@erratique.ch>
From: =?ISO-8859-1?Q?B=FCnzli_Daniel?= <daniel.buenzli@erratique.ch>
To: caml-list caml-list <caml-list@yquem.inria.fr>
Content-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0 (Apple Message framework v915)
Subject: On module distribution
Date: Tue, 15 Jan 2008 12:20:04 +0100
X-Mailer: Apple Mail (2.915)
Sender: =?ISO-8859-1?Q?Daniel=20B=FCnzli?= <daniel.c.buenzli@gmail.com>
X-Spam: no; 0.00; bunzli:01 buenzli:01 fwiw:01 dependencies:01 dependencies:01 ocaml:01 stubs:01 unices:01 caml-list:01 semantic:02 modules:02 modules:02 caml:02 hump:02 tagged:02 

A few month ago, after a discussion on cherry-picking modules in the  
reins library I thought a little bit about devising a system to  
facilitate module sharing. A system to simplify the tedious and  
uninteresting actions needed to be able to use and publish modules. At  
that time I started a design document for it, but as is expected in  
such cases the effort didn't last long.

However since people will be meeting in Paris in a few week to discuss  
these things I thought there may be some ideas to take in this very  
rough and incomplete draft of a system that I will never implement. So  
FWIW here's a link [1] to this document. In summary the main ideas  
were :

1. A decentralized system, anyone who can publish on a web server can  
publish a package. A central authority is a bottleneck to publication.

2. Use atom feeds [2] as the distribution medium. Atom feeds contain  
all the semantic information (authors, contributors, entries, rights,  
link to enclosure, labels etc.) needed to represent a package and its  
versions with release notes. Shortly a package is a feed, a version is  
an entry with an enclosure link to an archive. The only extensions  
needed (Atom allows this via xml name spaces) are new link attributes  
to describe version dependencies. Packages as feeds allow to follow  
their evolution with a plain newsfeed reader (which would also  
facilitates the maintenance of repositories like the hump). To avoid  
angle brackets, package feeds are generated from a tagged plain text  
README file.

3. Manage packages per project (vs. per machine) to make project  
dependencies explicit. Thus a single command can install you the  
(OCaml + C stubs only) dependencies of your project on a fresh system.  
If your project is a package itself, it facilitates its packaging .

4. Rely on ocamlbuild to do the hard work. Grosso modo in the way  
described here [3], which may be unrealistic for big projects, but on  
unices ressource consumption could be mitigated by making hard links  
to a cache maintained per user or machine (inspired by ideas in this  
message [4]).

Best,

Daniel

[1] http://erratique.ch/writings/mod.pdf
[2] http://tools.ietf.org/html/rfc4287
[3] http://brion.inria.fr/gallium/index.php/Working_on_dependent_projects_with_ocamlbuild
[4] http://caml.inria.fr/pub/ml-archives/caml-list/2007/04/ea46e76c646854347ad02dc10862a6ee.fr.html

