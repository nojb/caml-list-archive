Return-Path: <david.baelde@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.4 required=5.0 tests=SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id BD419BC69
	for <caml-list@yquem.inria.fr>; Sun, 13 Jan 2008 15:19:18 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAN6siUdIDtyYgWdsb2JhbACQCQEBCAUEKY91hXY
X-IronPort-AV: E=Sophos;i="4.24,278,1196636400"; 
   d="scan'208";a="21178389"
Received: from fg-out-1718.google.com ([72.14.220.152])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 13 Jan 2008 15:19:13 +0100
Received: by fg-out-1718.google.com with SMTP id l27so2305595fgb.43
        for <caml-list@yquem.inria.fr>; Sun, 13 Jan 2008 06:19:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        bh=AA1skLd4HU3c6uN4X7yEVTEJn5aIz5YQ6tf3XrQVnoQ=;
        b=h8T4At0Lw8ad+R3Wa45odZgDfNAnmlPH6QZi+KNXxiJP3mJ+V6w2cRAb64CiLsTkkxZuAFkSuWewoKvHn2TYzCj7S56WmLHu+NZHPCnn15hjYR69cFNtzxUS8eWZgaSlI/sG3Hx/waock+6v27nolCYV989cgbPzmxv44zw2tLg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=EWrmDTexGnArzWc+vjZgdPFYqgBOkZbgVupBmEka7sl/h8b4VpClcgIRGb7h6FoCiH+mU9I0Z0HGWT9JUttGJ9tilImtO6B7vXaFAkH7QLEhYNqYHKq7ozgDpA5z4jbPNgaY30gisdO6sZS2LzC26QHOcTqWkn9WJMp0FsgRWJo=
Received: by 10.78.142.14 with SMTP id p14mr5977176hud.75.1200233952721;
        Sun, 13 Jan 2008 06:19:12 -0800 (PST)
Received: by 10.78.150.14 with HTTP; Sun, 13 Jan 2008 06:19:12 -0800 (PST)
Message-ID: <53c655920801130619w7114d6caw5b5da72f3be02b43@mail.gmail.com>
Date: Sun, 13 Jan 2008 15:19:12 +0100
From: "David Baelde" <david.baelde@gmail.com>
Reply-To: david.baelde@ens-lyon.org
To: "Romain Beauxis" <toots@rastageeks.org>
Subject: Re: [Caml-list] bug in object type inference ?
Cc: caml-list@yquem.inria.fr
In-Reply-To: <200801131458.21400.toots@rastageeks.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <200801131458.21400.toots@rastageeks.org>
X-Spam: no; 0.00; bug:01 inference:01 bug:01 inference:01 val:01 val:01 caml-list:01 expression:02 parameter:02 declaration:02 annotation:02 labels:03 unit:03 unit:03 let:03 

Hi Romain,

This is not a bug, but just a limitation of type inference on labels
-- it is independent from OO. If a type is unknown and is used for a
labelled application, the parameter will be supposed to be mandatory.
I guess inference goes too wild without that restriction -- because
with types where the optionality is unknown, it is also unknown when
an application is total.

A simpler example of that:

# let g f a = f ~a () ;;
val g : (a:'a -> unit -> 'b) -> 'a -> 'b = <fun>

The type of f is infered with a mandatory param labelled a.

# let f ?a b = b ;;
val f : ?a:'a -> 'b -> 'b = <fun>
# g f ;;
This expression has type ?a:'a -> 'b -> 'b but is here used with type
  a:'c -> unit -> 'd

This would work with an annotation in the declaration of g:

# let g (f : ?a:'a -> unit -> 'b) a = f ~a () ;;
val g : (?a:'a -> unit -> 'b) -> 'a -> 'b = <fun>

-- 
David

