Return-Path: <gclci-caml-list@m.gmane.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_FAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 70F5CBC6C
	for <caml-list@yquem.inria.fr>; Wed, 30 Jan 2008 10:22:29 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAANzQn0fAXQInh2dsb2JhbACQJwEBAQgKKYEUnjI
X-IronPort-AV: E=Sophos;i="4.25,276,1199660400"; 
   d="scan'208";a="21968581"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Jan 2008 10:22:29 +0100
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m0U9MSKt019361
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Wed, 30 Jan 2008 10:22:28 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAErQn0dQW+UCh2dsb2JhbACQJwEBAQgKKYEUnjE
X-IronPort-AV: E=Sophos;i="4.25,276,1199660400"; 
   d="scan'208";a="6733804"
Received: from main.gmane.org (HELO ciao.gmane.org) ([80.91.229.2])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 30 Jan 2008 10:22:28 +0100
Received: from list by ciao.gmane.org with local (Exim 4.43)
	id 1JK99D-0006FI-99
	for caml-list@inria.fr; Wed, 30 Jan 2008 09:22:23 +0000
Received: from ks300734.kimsufi.com ([91.121.65.225])
        by main.gmane.org with esmtp (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Wed, 30 Jan 2008 09:22:23 +0000
Received: from sylvain by ks300734.kimsufi.com with local (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Wed, 30 Jan 2008 09:22:23 +0000
X-Injected-Via-Gmane: http://gmane.org/
To: caml-list@inria.fr
From: Sylvain Le Gall <sylvain@le-gall.net>
Subject:  Re: The OCaml Community (aka back from the Developer Days)
Date: Wed, 30 Jan 2008 09:22:16 +0000 (UTC)
Lines: 97
Message-ID:  <slrnfq0ge8.nki.sylvain@gallu.homelinux.org>
References:  <1201439362.6302.15.camel@Blefuscu>
 <1201480729.479d2419c2f08@webmail.in-berlin.de>
 <1201519661.6747.27.camel@Blefuscu>
 <slrnfprmtl.hmr.sylvain@gallu.homelinux.org>
 <479E050B.3010306@fmf.uni-lj.si>
 <f8560b80801281626m1f714029r2b6c21b2844f7b21@mail.gmail.com>
Mime-Version:  1.0
Content-Type:  text/plain; charset=us-ascii
Content-Transfer-Encoding:  7bit
X-Complaints-To: usenet@ger.gmane.org
X-Gmane-NNTP-Posting-Host: ks300734.kimsufi.com
User-Agent: slrn/0.9.8.1pl2 (Debian)
Sender: news <news@ger.gmane.org>
X-Miltered: at concorde with ID 47A041D4.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; le-gall:01 ocaml:01 markus:01 mottl:01 markus:01 mottl:01 tarball:01 recompile:01 c-library:01 dependencies:01 packagers:01 dependencies:01 recompiled:01 ocaml:01 developping:01 

On 29-01-2008, Markus Mottl <markus.mottl@gmail.com> wrote:
> However, the other roles are much worse off.  It seems one design
> decision of Godi was to separate software developers and package
> maintainers.  In practice, however, package maintainers are usually
> also the developers, and they are most often also package users.  If I
> want to roll out and work with an updated Godi-package, I have to jump
> through several hoops before I can do so: upload my updated tarball to
> my webserver, update the package metadata in the Godi SVN-repository,
> point my browser to the Godi website to update the Godi distribution,
> go to my local Godi-installation, update and recompile the package,
> and finally, when I try to use it, I may find out that I had made a
> mistake somewhere and have to start all over.  The build system used
> by Godi, which is based on NetBSD's package management, is arcane to
> say the least.  I still don't quite understand how to e.g. correctly
> make packages check for C-library dependencies, etc.

I do think separation between software developers and package
maintainers are a good point. Because, if you consider that there is a
lot of distribution (talking about Linux), you will also have a lot of
different ways to do package. If you are the developper and the package
maintainer, most of the time pieces of information are only available
in the packaging metadata, because it will allow you to build as you do
in Debian/Fedora/Suse... Unfortunately, this kind of information will
automatically be missing for other distribution.

The best software developper can do about this is to provide a way to
build their package the best they can (and accept patches from
packagers). Then it would be easy to package for every distribution.

>
> As a software developer and package maintainer, I'd ideally like to be
> able to work on a source tree containing the complete code of all
> packages (and their dependencies), make changes wherever I want (fix
> bugs, add features, add new libraries, etc.), share patches or full
> versions with other maintainers, and all of this with a minimum amount
> of overhead.  Since Godi only tracks dependencies between packages, it
> is not possible to just update code and let the build system figure
> out what needs to be recompiled.  One needs to build new packages
> instead, which is way too much effort.  As installation administrator
> I'd like to be able to use a straightforward user interface and easily
> add 3rd party libraries without having to manually make sure that
> dependencies are not violated.
>

I think you have a good point of improvement here, that should not be
too complicated:
* make GODI use a directory containing uncompressed software
* prevents using a particular VCS (just consider GODI package as
 metadata)
* allow GODI to track fine changes into packages

The last point is probably the most complicated one, since we are not
yet able to do it in Debian. But i really think that this is feasable.

Using uncompressed software + GODI metadata should allow you to have a
full source tree uncompressed on your local computer. This should, maybe,
solve some of your issues.

> It is still a point of discussion at our company how to replace Godi,
> and also how we could find a solution that would integrate well with
> the OCaml-community.  We have developed a fair amount of
> infrastructure to improve our team productivity (we have around 20
> full time developers now working in three different locations) by
> lowering turnaround times associated with code changes.  The use of
> distributed version control, compile daemons and omake has made it
> very easy for us to share code that is guaranteed to compile and
> allows making modifications quickly with a minimum amount of time
> required for recompilations.
>

It would be a pity. GODI is the most advanced PM for OCaml. Contributing
to its development is something that can leverage a lot of things. I
think this should shorten the delay of creating 

> It seems likely that focusing on a high degree of standardization
> around the usage of software development tools (which version control
> to use, how to guarantee compilability, what build tools to use,
> standards enforcing easy combination and modularity of build
> processes) would lower development barriers and thus boost the
> productivity of the OCaml community.  But it seems rather unlikely to
> most of us that Godi will be a suitable foundation for moving forward.
>  We greatly appreciate Gerd's tireless efforts to contribute tools
> like Godi, which is a lot of hard work that nobody else wanted to do
> before.  We have certainly benefited from it in the past and hope that
> a new approach will alleviate the problems that Godi-developers often
> run into.
>

Talking about standardization around the usage of software development
tools will just lead to a boost of FLAMEWARE productivity. There is no
best way to do things. We should just accept any proposition and try to
make things work in most case. Believing that everybody will accept to
use the same way of developping software, is just a dream (but you are
allowed to dream).

Regards,
Sylvain Le Gall

