Return-Path: <agarwal1975@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id D7EA47FF9F
	for <caml-list@sympa.inria.fr>; Mon,  7 Mar 2016 15:26:01 +0100 (CET)
IronPort-PHdr: 9a23:Xqhl0hXyeiNeHVc4erJDFg/tQ/HV8LGtZVwlr6E/grcLSJyIuqrYZh2Ot8tkgFKBZ4jH8fUM07OQ6PC/HzxZqsva+Fk5M7VyFDY9wf0MmAIhBMPXQWbaF9XNKxIAIcJZSVV+9Gu6O0UGUOz3ZlnVv2HgpWVKQka3CwN5K6zPF5LIiIzvjqbpq8KVM1wD2WH1SIgxBSv1hD2ZjtMRj4pmJ/R54TryiVwMRd5rw3h1L0mYhRf265T41pdi9yNNp6BprJYYAu3SNp41Rr1ADTkgL3t9pIiy7UGCHj20+2AEX24Kvh1NCgnDpFGmD9ai+hf949t6xCCfdef/V7YzSHz2/qB3QRrigT0BMC8R/2Tei8g2h6Ve9kGPvRt6lqfPYICONLJXcarHYtoeDT5IUc9LSCVFW9LjMqMACuMAOaBTqIyr9AhGlge3GQT5XLCn8TRPnHKjmPBj3g==
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=agarwal1975@gmail.com; spf=Pass smtp.mailfrom=agarwal1975@gmail.com; spf=None smtp.helo=postmaster@mail-qg0-f52.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  agarwal1975@gmail.com) identity=pra; client-ip=209.85.192.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  agarwal1975@gmail.com designates 209.85.192.52 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f52.google.com) identity=helo;
  client-ip=209.85.192.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="postmaster@mail-qg0-f52.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CQBQBxjt1WeTTAVdFcgm6BHm0GqgsqiGqHKYFpIYVuAoEhBzoSAQEBAQEBAQEQAQEJCwwIIS+CLYIUAQEBAwESER0BGxILAQMBCwYFCw0NHQICIQEBEQEFAQoSBhMSAg6HagEDCggOokKBMT4xizaBaoJXhRoKGScDClGDdgEBAQEGAQEBAQEBAQESAQUKBIpGgj2BTF6CU4E6BYYcDId8iH4IgRiES4YVgXWCLoxMhwyGCxEegQ8PGAqCJwocgWYeLgGJPAEBAQ
X-IPAS-Result: A0CQBQBxjt1WeTTAVdFcgm6BHm0GqgsqiGqHKYFpIYVuAoEhBzoSAQEBAQEBAQEQAQEJCwwIIS+CLYIUAQEBAwESER0BGxILAQMBCwYFCw0NHQICIQEBEQEFAQoSBhMSAg6HagEDCggOokKBMT4xizaBaoJXhRoKGScDClGDdgEBAQEGAQEBAQEBAQESAQUKBIpGgj2BTF6CU4E6BYYcDId8iH4IgRiES4YVgXWCLoxMhwyGCxEegQ8PGAqCJwocgWYeLgGJPAEBAQ
X-IronPort-AV: E=Sophos;i="5.22,551,1449529200"; 
   d="scan'208,217";a="167456321"
Received: from mail-qg0-f52.google.com ([209.85.192.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 07 Mar 2016 15:26:00 +0100
Received: by mail-qg0-f52.google.com with SMTP id t4so96904178qge.0
        for <caml-list@inria.fr>; Mon, 07 Mar 2016 06:26:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=z1nh0XdBADwbAPfxEskmCteEnM4/OLOxwBa1OlXte3I=;
        b=kF7rlTfLeQOH8CeAFiEf4emZdSrXp7A5HnyLzuEkFZSc5YbQBptLFwPJRklM4lKHa1
         M8t+VkqiBFzUoJMIpN8c1SSO0exRaGi7WFgt5G3eLOEFRj0h5wtyrUXAnRWyyXe6F8NG
         CFnipLRmtQ+lSj4osyTl7xyNh449FoQfORiFaWHAufRbVKLBARsA3lavrjrE+MQBdFkM
         kqbIJCUU2G1SvV8Yq8voUOhLuLJCrttgtjSEeoiYZJCY8GLD5XbiikYW9MgXs4REcDV4
         z5GoRPHTV1yPigf1/3FCczx2g1f2aSZJ79zYZW0USOA1cVjkWPQ4v1zJVCJ3XOTQUPy/
         SMnQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=z1nh0XdBADwbAPfxEskmCteEnM4/OLOxwBa1OlXte3I=;
        b=cZdAI84oXMAyDWAN4IoD9O6GRaITTRp6bxVw4J5lObGAKeapNPBMFG+13OIBoMfHzQ
         qvLohCdNS00WKyXBm1V/kV9eEx3VNj3MfxcKAWiQM31og5LATmRSQ8qwbXh3939QwDeA
         uOvWi/PU2JVMx9eBopm7T02Hk2MTfBPEYCNEA5XpNdu9TLnhnxE/HYlLO4G+D6ff5GAG
         EvCeTjzjANV+9xj+VemvrAba3ufBGA4Lu2ohA2/I4BNtK2Ckx6B4E6CsMLWG3dREjzy0
         yG6JPlwL85+xPkOyry/OBpNDdWSRjcNhxri1BNmTuCJ8GgMHBgVsTCBdp1NxdoiQ67oQ
         ixzQ==
X-Gm-Message-State: AD7BkJKAfksQKB89yFbz/RwG0nRyuSPvQOcAcE/5RdoDWtqwXtraSS5J200/VLHFcd9uXbduAInIgzz97huHVA==
X-Received: by 10.140.38.104 with SMTP id s95mr27856551qgs.7.1457360758806;
 Mon, 07 Mar 2016 06:25:58 -0800 (PST)
MIME-Version: 1.0
Received: by 10.55.158.82 with HTTP; Mon, 7 Mar 2016 06:25:39 -0800 (PST)
In-Reply-To: <CAN6ygOnzpsWj52Be1WJxUOK-h8pBNrL96T1FzfJFjSWuo7t04g@mail.gmail.com>
References: <CAN6ygO=ocZ9q_p75g=h1d+8zvqCQFPQW_AqM=2D5ZBvjAjQMmQ@mail.gmail.com>
 <86oaaqahc1.fsf@gmail.com> <20160307090859.GF30630@nunchakus.loria.fr> <CAN6ygOnzpsWj52Be1WJxUOK-h8pBNrL96T1FzfJFjSWuo7t04g@mail.gmail.com>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Mon, 7 Mar 2016 09:25:39 -0500
Message-ID: <CAMu2m2J3orKU5q6Wg7Kf-+xOBYn7JKuC_gLOb_hT4DEpxWtkmg@mail.gmail.com>
To: Yotam Barnoy <yotambarnoy@gmail.com>
Cc: Simon Cruanes <simon.cruanes.2007@m4x.org>, Malcolm Matalka <mmatalka@gmail.com>, 
	Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c1303256a2a5052d763e65
Subject: Re: [Caml-list] Question about Lwt/Async

--001a11c1303256a2a5052d763e65
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

> Also, what happens to general utility functions that aren't rewritten for
Async/Lwt -- as far as I can tell, being in non-monadic code, they will
always starve other threads, since they cannot yield to another Async/Lwt
thread.

There is Lwt_preemptive.detach and Async's In_thread.run to get around this.


> It seems that Lwt is more popular in the community outside JaneStreet
than Async (if only by looking at its reverse dependencies on opam.ocaml.or=
g).
There has been posts about this, for instance
http://rgrinberg.com/blog/2014/12/11/abandoning-async/ .

I'd be wary of drawing conclusions from one blog post and even from opam. I
think the answer is: both are used a lot. Also depends on what you mean by
"a user". It's not too useful to count Jane Street's packages and one
barely used package on opam both as 1. A lot of code is not on opam.


> Is there an existing compatibility library functorized over the
intersection of Async and Lwt? That would make being compatible with both
much easier.

Most people provide this internally for each of their projects, e.g. Cohttp=
's
IO signature <https://github.com/mirage/ocaml-cohttp/blob/master/lib/s.mli>.
However, we have quite a few projects that needed this abstraction, so
duplicating this code in each repo seemed wrong. Thus we developed future
<https://github.com/solvuu/future>, which was recently released in opam.



On Mon, Mar 7, 2016 at 9:06 AM, Yotam Barnoy <yotambarnoy@gmail.com> wrote:

> Is there an existing compatibility library functorized over the
> intersection of Async and Lwt? That would make being compatible with both
> much easier.
>
> On Mon, Mar 7, 2016 at 4:08 AM, Simon Cruanes <simon.cruanes.2007@m4x.org>
> wrote:
>
>> Hi,
>>
>> It seems that Lwt is more popular in the community
>> outside JaneStreet than Async (if only by looking at its reverse
>> dependencies on opam.ocaml.org). There has been posts about this, for
>> instance http://rgrinberg.com/blog/2014/12/11/abandoning-async/ .
>> However, if you're writing a library, it is good taste (if possible) to
>> parametrize you code over an "IO" monad that will be easy to instantiate
>> with either Async or Lwt (or the trivial blocking monad where 'a t =3D 'a
>> and (>>=3D) x f =3D f x) along with the required IO primitives.
>>
>> Regarding general utility functions, if they do not perform IO or depend
>> on (blocking) IO they can be used directly with Async/Lwt (unless they
>> really take a very long time to complete).
>>
>> Le Mon, 07 Mar 2016, Malcolm Matalka a =C3=A9crit :
>> > Yotam Barnoy <yotambarnoy@gmail.com> writes:
>> > > Hi all
>> > >
>> > > I'm thinking about my next project in OCaml, and I'm wondering how
>> many
>> > > users of OCaml currently use Lwt or Async regularly.
>> > >
>> > > One of the advantages of OCaml over Haskell (which I'm not crazy
>> about) is
>> > > the fact that you don't have to constantly be stuck inside a monad.
>> > > However, once you want to use these user-level threading libraries,
>> you're
>> > > essentially tied to a monad. It also means that the usage of any oth=
er
>> > > monad from Lwt/Async code is out -- OCaml doesn't have the monad
>> > > transformer infrastructure to layer monads easily as far as I can
>> tell (am
>> > > I wrong?). I mean, even in Haskell using Monad Transformers is a pain
>> (IMO).
>> > >
>> > > Also, what happens to general utility functions that aren't rewritten
>> for
>> > > Async/Lwt -- as far as I can tell, being in non-monadic code, they
>> will
>> > > always starve other threads, since they cannot yield to another
>> Async/Lwt
>> > > thread. Is this perception correct? If so, this seems to imply that
>> you
>> > > either write your code to cooperate within these frameworks and
>> suffer the
>> > > monad, or don't, and make it near-impossible for Lwt/Async users to
>> make
>> > > use of your code.
>> > >
>> > > I would like to get an idea of the usage level of these libraries, as
>> well
>> > > as the burden of writing compatible code, any difficulties etc. Also,
>> I'd
>> > > like to get a sense of the domains that benefit from these libraries.
>> Some
>> > > domains (such as gaming) traditionally involve a continuous main
>> loop, and
>> > > would thus only suffer from the additional overhead of queuing in
>> these
>> > > libraries.
>> > >
>> > > -Yotam
>> >
>> > I mostly use Async.  However, I think most usage of Lwt or Async
>> > requires doing as little as possible in these frameworks and using them
>> > to orchestrate other functions.  For example, I usually try to separate
>> > parsing of a network protocol from the reading and writing of the byte=
s.
>> >
>> > --
>> > Caml-list mailing list.  Subscription management and archives:
>> > https://sympa.inria.fr/sympa/arc/caml-list
>> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>>
>> --
>> Simon Cruanes
>>
>> http://weusepgp.info/
>> key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3  7D8D 4AC0 1D08 49AA
>> 62B6
>>
>
>

--001a11c1303256a2a5052d763e65
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">&gt;=C2=A0<span style=3D"font-size:12.8px">Also, what happ=
ens to general utility functions that aren&#39;t rewritten for Async/Lwt --=
 as far as I can tell, being in non-monadic code, they will always starve o=
ther threads, since they cannot yield to another Async/Lwt thread.</span><d=
iv><span style=3D"font-size:12.8px"><br></span></div><div>There is Lwt_pree=
mptive.detach and Async&#39;s In_thread.run to get around this.</div><div><=
br></div><div><div><br></div><div>&gt; It seems that Lwt is more popular in=
 the community outside JaneStreet than Async (if only by looking at its rev=
erse dependencies on <a href=3D"http://opam.ocaml.org">opam.ocaml.org</a>).=
 There has been posts about this, for instance <a href=3D"http://rgrinberg.=
com/blog/2014/12/11/abandoning-async/">http://rgrinberg.com/blog/2014/12/11=
/abandoning-async/</a> .</div></div><div><br></div><div>I&#39;d be wary of =
drawing conclusions from one blog post and even from opam. I think the answ=
er is: both are used a lot. Also depends on what you mean by &quot;a user&q=
uot;. It&#39;s not too useful to count Jane Street&#39;s packages and one b=
arely used package on opam both as 1. A lot of code is not on opam.</div><d=
iv><br></div><div><br></div><div>&gt;=C2=A0<span style=3D"font-size:12.8px"=
>Is there an existing compatibility library functorized over the intersecti=
on of Async and Lwt? That would make being compatible with both much easier=
.</span></div><div><span style=3D"font-size:12.8px"><br></span></div><div>M=
ost people provide this internally for each of their projects, e.g. <a href=
=3D"https://github.com/mirage/ocaml-cohttp/blob/master/lib/s.mli">Cohttp&#3=
9;s IO signature</a>. However, we have quite a few projects that needed thi=
s abstraction, so duplicating this code in each repo seemed wrong. Thus we =
developed <a href=3D"https://github.com/solvuu/future">future</a>, which wa=
s recently released in opam.</div><div><br></div><div><span style=3D"font-s=
ize:12.8px"><br></span></div></div><div class=3D"gmail_extra"><br><div clas=
s=3D"gmail_quote">On Mon, Mar 7, 2016 at 9:06 AM, Yotam Barnoy <span dir=3D=
"ltr">&lt;<a href=3D"mailto:yotambarnoy@gmail.com" target=3D"_blank">yotamb=
arnoy@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" =
style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><di=
v dir=3D"ltr">Is there an existing compatibility library functorized over t=
he intersection of Async and Lwt? That would make being compatible with bot=
h much easier.</div><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"g=
mail_extra"><br><div class=3D"gmail_quote">On Mon, Mar 7, 2016 at 4:08 AM, =
Simon Cruanes <span dir=3D"ltr">&lt;<a href=3D"mailto:simon.cruanes.2007@m4=
x.org" target=3D"_blank">simon.cruanes.2007@m4x.org</a>&gt;</span> wrote:<b=
r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex">Hi,<br>
<br>
It seems that Lwt is more popular in the community<br>
outside JaneStreet than Async (if only by looking at its reverse<br>
dependencies on <a href=3D"http://opam.ocaml.org" rel=3D"noreferrer" target=
=3D"_blank">opam.ocaml.org</a>). There has been posts about this, for<br>
instance <a href=3D"http://rgrinberg.com/blog/2014/12/11/abandoning-async/"=
 rel=3D"noreferrer" target=3D"_blank">http://rgrinberg.com/blog/2014/12/11/=
abandoning-async/</a> .<br>
However, if you&#39;re writing a library, it is good taste (if possible) to=
<br>
parametrize you code over an &quot;IO&quot; monad that will be easy to inst=
antiate<br>
with either Async or Lwt (or the trivial blocking monad where &#39;a t =3D =
&#39;a<br>
and (&gt;&gt;=3D) x f =3D f x) along with the required IO primitives.<br>
<br>
Regarding general utility functions, if they do not perform IO or depend<br>
on (blocking) IO they can be used directly with Async/Lwt (unless they<br>
really take a very long time to complete).<br>
<div><div><br>
Le Mon, 07 Mar 2016, Malcolm Matalka a =C3=A9crit :<br>
&gt; Yotam Barnoy &lt;<a href=3D"mailto:yotambarnoy@gmail.com" target=3D"_b=
lank">yotambarnoy@gmail.com</a>&gt; writes:<br>
&gt; &gt; Hi all<br>
&gt; &gt;<br>
&gt; &gt; I&#39;m thinking about my next project in OCaml, and I&#39;m wond=
ering how many<br>
&gt; &gt; users of OCaml currently use Lwt or Async regularly.<br>
&gt; &gt;<br>
&gt; &gt; One of the advantages of OCaml over Haskell (which I&#39;m not cr=
azy about) is<br>
&gt; &gt; the fact that you don&#39;t have to constantly be stuck inside a =
monad.<br>
&gt; &gt; However, once you want to use these user-level threading librarie=
s, you&#39;re<br>
&gt; &gt; essentially tied to a monad. It also means that the usage of any =
other<br>
&gt; &gt; monad from Lwt/Async code is out -- OCaml doesn&#39;t have the mo=
nad<br>
&gt; &gt; transformer infrastructure to layer monads easily as far as I can=
 tell (am<br>
&gt; &gt; I wrong?). I mean, even in Haskell using Monad Transformers is a =
pain (IMO).<br>
&gt; &gt;<br>
&gt; &gt; Also, what happens to general utility functions that aren&#39;t r=
ewritten for<br>
&gt; &gt; Async/Lwt -- as far as I can tell, being in non-monadic code, the=
y will<br>
&gt; &gt; always starve other threads, since they cannot yield to another A=
sync/Lwt<br>
&gt; &gt; thread. Is this perception correct? If so, this seems to imply th=
at you<br>
&gt; &gt; either write your code to cooperate within these frameworks and s=
uffer the<br>
&gt; &gt; monad, or don&#39;t, and make it near-impossible for Lwt/Async us=
ers to make<br>
&gt; &gt; use of your code.<br>
&gt; &gt;<br>
&gt; &gt; I would like to get an idea of the usage level of these libraries=
, as well<br>
&gt; &gt; as the burden of writing compatible code, any difficulties etc. A=
lso, I&#39;d<br>
&gt; &gt; like to get a sense of the domains that benefit from these librar=
ies. Some<br>
&gt; &gt; domains (such as gaming) traditionally involve a continuous main =
loop, and<br>
&gt; &gt; would thus only suffer from the additional overhead of queuing in=
 these<br>
&gt; &gt; libraries.<br>
&gt; &gt;<br>
&gt; &gt; -Yotam<br>
&gt;<br>
&gt; I mostly use Async.=C2=A0 However, I think most usage of Lwt or Async<=
br>
&gt; requires doing as little as possible in these frameworks and using the=
m<br>
&gt; to orchestrate other functions.=C2=A0 For example, I usually try to se=
parate<br>
&gt; parsing of a network protocol from the reading and writing of the byte=
s.<br>
&gt;<br>
</div></div><span><font color=3D"#888888">&gt; --<br>
&gt; Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferr=
er" target=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group=
/ocaml_beginners</a><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"nor=
eferrer" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
<br>
--<br>
Simon Cruanes<br>
<br>
<a href=3D"http://weusepgp.info/" rel=3D"noreferrer" target=3D"_blank">http=
://weusepgp.info/</a><br>
key 49AA62B6, fingerprint 949F EB87 8F06 59C6 D7D3=C2=A0 7D8D 4AC0 1D08 49A=
A 62B6<br>
</font></span></blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--001a11c1303256a2a5052d763e65--
