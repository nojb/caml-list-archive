Return-Path: <markus.mottl@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 17EF37FFB2
	for <caml-list@sympa.inria.fr>; Fri, 11 Mar 2016 17:58:45 +0100 (CET)
IronPort-PHdr: 9a23:KCF6qBFFvrdxGT6Ro/S9SZ1GYnF86YWxBRYc798ds5kLTJ74p86wAkXT6L1XgUPTWs2DsrQf27WQ4/GrCDVIyK3CmU5BWaQEbwUCh8QSkl5oK+++Imq/EsTXaTcnFt9JTl5v8iLzG0FUHMHjew+a+SXqvnYsExnyfTB4Ov7yUtaLyZ/niKbiqtaCOk1hv3mUX/BbFF2OtwLft80b08NJC50a7V/3mEZOYPlc3mhyJFiezF7W78a0+4N/oWwL46pyv+YJa6jxfrw5QLpEF3xmdjltvIy4gyLeVhOC7WcwVWAfkxwAQ1SUrUKyYpCklyLgtaJG2CicIsDySfhgXC+i7qF0RRvsoCUOMTMi7Hvah9A2h6Ve9kGPvRt6lqvdeoKIL7Jbeb/BeZtOQGNbXdtKESlGHp+4R4QKBusFe+1fqt+u9BM1sRKiCFz0V6vUwThSiyqzgPQ3
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=markus.mottl@gmail.com; spf=Pass smtp.mailfrom=markus.mottl@gmail.com; spf=None smtp.helo=postmaster@mail-ob0-f175.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  markus.mottl@gmail.com) identity=pra;
  client-ip=209.85.214.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="markus.mottl@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  markus.mottl@gmail.com designates 209.85.214.175 as permitted
  sender) identity=mailfrom; client-ip=209.85.214.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="markus.mottl@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f175.google.com) identity=helo;
  client-ip=209.85.214.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="postmaster@mail-ob0-f175.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0DUAAB2+OJWi6/WVdFdg1w0bQaoHYFOiQCFKoIPAQ2BbRcKhWwCgSoHOBQBAQEBAQEBARABAQEICwsJHzGCLYIVAQEEEhEdARQHEgsBAwwGBQsDCgICCR0CAiEBAREBBQEKEgYTCQkJB4dsAQMSDqBMgTE+MYs2gWqCV4VIChknAwpRg24BAQEBAQEBAwEBAQEBAQEBEgEFCgVthRyDRH6CPYFMDDCCPQstE4EnBYYgDIEzhkuJGYFPhB6GGgOBcoFkS4cjhTCHIIYTER6BDx4BAYI4HoFuHi4BiRUBHwSBFwEBAQ
X-IPAS-Result: A0DUAAB2+OJWi6/WVdFdg1w0bQaoHYFOiQCFKoIPAQ2BbRcKhWwCgSoHOBQBAQEBAQEBARABAQEICwsJHzGCLYIVAQEEEhEdARQHEgsBAwwGBQsDCgICCR0CAiEBAREBBQEKEgYTCQkJB4dsAQMSDqBMgTE+MYs2gWqCV4VIChknAwpRg24BAQEBAQEBAwEBAQEBAQEBEgEFCgVthRyDRH6CPYFMDDCCPQstE4EnBYYgDIEzhkuJGYFPhB6GGgOBcoFkS4cjhTCHIIYTER6BDx4BAYI4HoFuHi4BiRUBHwSBFwEBAQ
X-IronPort-AV: E=Sophos;i="5.24,321,1454972400"; 
   d="scan'208";a="207269973"
Received: from mail-ob0-f175.google.com ([209.85.214.175])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 11 Mar 2016 17:58:43 +0100
Received: by mail-ob0-f175.google.com with SMTP id fp4so118982222obb.2
        for <caml-list@inria.fr>; Fri, 11 Mar 2016 08:58:43 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc;
        bh=PWpF3w5O5Dzr7gFKrJru6G1lJbFiU6+HBH6eOhSSaWA=;
        b=ED1IkyZ7pu7hihQw1+OiiUBxrRKkHE1NC2/7KW5amk1H91vhVurwTPPtaztv//bbN6
         khrlBUp33f/jwVVrnxOp9zNH77qUNMKHwR7yaMelgMC0bCC4YxKXhVb4O/6qQfzGDlqT
         OghyNsFEdRnBrX/jPzDYxiEr90EUvCmT1hgy/ouRfIpUpdDta3Lchnu0xWeOh5SFy0jW
         S+tOQavnV2De54jJb8vm0StknGXByCh1LVfctNgeyOrhvMydRPbjZZbO1/fjERvMYw0y
         +D7iEmuX5z7L0RDXZpPsThQoNR2qjBTexQsVsbhvlEQ+1w7Ug0wfuTOPnvZstccsi7jQ
         XPrQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc;
        bh=PWpF3w5O5Dzr7gFKrJru6G1lJbFiU6+HBH6eOhSSaWA=;
        b=jzQcmmR9v5qrqirBTQR3DQGGYlVtC8D39Y3IqrBO0DIiiermmEiu2CZm8c2fHa3KLX
         T6xJeMLVi4dwMsPlufWHau2oZJ8wQRlonp5RozqAq91Zl3Mgg7LFiNF053RBUJlDjE5S
         8wqhtRZG6tXj66drrxmtkxPHbkJ0bdjCO2+4CxU295BHpNdGnzm5LdtY1fV/p4mUEXEN
         yoO78gfFqdOgF7V4EDyPD01ug1yicxNqBHYwjNKLhUcmGPYvgegHFgNUEw8gY4xddoFy
         HNMOBxD5ec+762EgyM8PQWKKKaEt0wkN5mgc7B1kGWg2XPm78lC6TRSwZ1lkmhGrblcT
         Ddnw==
X-Gm-Message-State: AD7BkJIVFdRlTi2xg11KuL74gh/NVmWATY2slQtnEKJXGhQiVViCY78i6DJXST2SljmxMt77tpHiiICuWVjDIA==
MIME-Version: 1.0
X-Received: by 10.182.24.8 with SMTP id q8mr6143271obf.67.1457715522008; Fri,
 11 Mar 2016 08:58:42 -0800 (PST)
Received: by 10.182.128.164 with HTTP; Fri, 11 Mar 2016 08:58:41 -0800 (PST)
In-Reply-To: <CAM3Ki76Fe-A2+nxaZeZt3rQ8P3m-wh9FmAsyoQ2Qp7WedUcoRA@mail.gmail.com>
References: <CAP_800qWG6ZB-6an2axntKXG2aJEjAFmPie7-U1CYz73-_qz+A@mail.gmail.com>
	<56DF57FA.9070309@lexifi.com>
	<CAP_800pAmWvghdoq5EkOJ_nw5YN9sEXv_4abCZkmV=B32ig7fQ@mail.gmail.com>
	<CAM3Ki75qx_ULu=PdGC08ZAH_oCMGz=M5PjJbDkzEv9tZuxi_LA@mail.gmail.com>
	<CAP_800qkSEETKu8bkYY3wDNLfRUVSsecA2Hh3Dp0bt7DYEsF4Q@mail.gmail.com>
	<CAN6ygOn-xCckB4BdyxstWNa9fMau97kW0VYdt+LCbz5neCL7dw@mail.gmail.com>
	<CAP_800pnJRxLatZmtMTu=xMfdreGV4XmnhW9T5KMa7U2uPRRcg@mail.gmail.com>
	<CAM3Ki77_C2_KFKxAEhn+FwAYqWpVVdhPK2o8vD---7R6Frd9AQ@mail.gmail.com>
	<CAP_800qG=c_uwTDjHj9U4V6K1qX+Amh8LGLhevtHWE6gL1U1nw@mail.gmail.com>
	<56E1D523.7000701@laposte.net>
	<1457650315.13223.42.camel@e130.lan.sumadev.de>
	<CAM3Ki76Fe-A2+nxaZeZt3rQ8P3m-wh9FmAsyoQ2Qp7WedUcoRA@mail.gmail.com>
Date: Fri, 11 Mar 2016 11:58:41 -0500
Message-ID: <CAP_800p_VWbsMrzrSoDvsBQ2Q+vYcpiaDa56=BH-tLNxmmg=BQ@mail.gmail.com>
From: Markus Mottl <markus.mottl@gmail.com>
To: Mark Shinwell <mshinwell@janestreet.com>
Cc: Gerd Stolpmann <info@gerd-stolpmann.de>, Pierre Chambart <pierre.chambart@laposte.net>, 
	OCaml List <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] <DKIM> Re: Status of Flambda in OCaml 4.03

Mark: thanks to OPAM, a package management solution might be
worthwhile trying.  It would certainly be less intrusive to the
compiler and hence at least a temporary improvement.

Given the obviously significant impact of Flambda on compilation, it
might be time for a more general overhaul of the compilation process.
Producing more files has already crept into the compiler anyway, e.g.
typed syntax tree files (.cmt).  I don't really see much of a problem
with generating more files.  Yes, it could slow things down a bit, but
only if you actually had to generate or read all of them all of the
time.  The whole point of having more files is that you only
regenerate and/or read those that you actually care about for your use
case.  For example, I would be perfectly happy if OCaml had an option
to only produce .cmi files, i.e. only syntax- + type-checked your
code.  The likely majority of recompilations happen, because
developers want to have their code checked, not to actually produce
executables.

I'd rather not package things up in one file even if we could
efficiently access parts of the file only.  What if some part suddenly
became too big to fit into its slot after recompilation?  We'd
essentially be implementing our own file system at that point.  One
could argue that with that approach we might as well put everything
(.cmi, .cmx, .cmo, etc.) in one file, which is probably not what
anybody wants.  Splitting up compilation output into several files for
different compiler use cases (just type check code, quickly produce an
executable for testing, heavily optimize an executable for tuning or
applications, etc.) seems like the easiest approach.


On Fri, Mar 11, 2016 at 3:59 AM, Mark Shinwell <mshinwell@janestreet.com> wrote:
> Markus: I think we should at least consider whether package management
> can help with multiple installations of libraries at different
> optimisation levels.  As regards multiple files, I suppose it could be
> configurable, but I worry that for large source trees the overhead of
> having that many more compilation artifacts may be non-negligible.
> Perhaps another option would be to arrange the .cmx files so that they
> could be read without importing the full information for optimisation
> unless requested.
>
> Gerd: Unless you have unlimited source files, there shouldn't be
> unlimited code size blowup, because there are parameters that restrict
> inlining.  In particular (unless the user forces behaviour via an
> attribute) there is always a calculation that weighs up the change in
> code size resulting from a proposed inlining against the expected
> runtime performance benefit based on which operations will be
> simplified away as a result of doing such inlining.
>
> Also, for a function like the one you gave containing:
>
>   if <cond> then <small expr> else <big expr>
>
> one of the reasons this should be kept in the .cmx files is because,
> when the compiler comes to examine whether to inline it, it may be
> able to fully evaluate <cond>.  In particular when it's true then the
> large expression can be eliminated completely (so long as <cond> is
> not side-effecting).  Another example is functions containing a large
> match, where we may end up knowing which case is to be taken.
>
> Mark
>
> On 10 March 2016 at 22:51, Gerd Stolpmann <info@gerd-stolpmann.de> wrote:
>> Am Donnerstag, den 10.03.2016, 21:12 +0100 schrieb Pierre Chambart:
>>> It is realistic when using the -Oclassic option that Mark mentioned.
>>> By default the flambda inlining heuristic is decided at call site. Hence
>>> all the information about a function needs to be available to correctly
>>> decide. That means that the size of the cmx file is approximatively
>>> linearly related to the .o file size. It is not easy to decide that some
>>> function will never be inlined, so the information is always kept,
>>> even on function annotated with [@inline never].
>>
>> This assumes that the user is fine with an unlimited code size blow-up.
>> So, to make an example, when you have
>>
>> let f() =
>>   if <expr1> then <short-expr2> else <very-long-expr3>
>>
>> there is the chance that the "if-then" part can be inlined and leads to
>> a speed-up at the price that the unproductive "else" part is also
>> inlined. In total, there is a good chance that you see some
>> acceleration. However, the question is whether the code duplication is
>> acceptable or not. I guess, you need to also draw a line at the callee
>> site, and disregard functions that are too large in total (though this
>> limit can be way higher than the limit for "classic" inlining).
>>
>> Surely this will also limit the cmx size somewhat.
>>
>> Gerd
>>
>>>  But I wouldn't
>>> expect that to benefit that much. But for the -Oclassic mode where
>>> the decision is made at the definition, it is possible to decide not
>>> to include some information in the cmx. This is what happens in
>>> non-flambda mode, and in flambda mode it also reduce a bit the
>>> cmx size, but not as much as it could. This will probably improve
>>> in 4.04 if there is sufficient interest in this -Oclassic mode.
>>> --
>>> Pierre
>>>
>>> On 10/03/2016 16:32, Markus Mottl wrote:
>>> > Ok, that explains things.  Is it realistic to assume that the size of
>>> > .cmx files can be substantially reduced?  It seems there is a natural
>>> > tradeoff between "optimize well" and "compile fast".  I suspect it may
>>> > be inevitable to add more compilation files.  We actually already have
>>> > that situation with native code libraries: the .cmxa file is enough to
>>> > compile a project, but if the .cmx files of contained modules are
>>> > visible in the path, too, then, and only then, the compiler can and
>>> > will do cross-module inlining - which takes longer, of course.
>>> >
>>> > What about the following approach? - There is one "minimal" set of
>>> > compilation files that always allows you to quickly obtain a running
>>> > (albeit slow / large) executable.   Additional compilation files then
>>> > monotonically augment this information and can be produced and
>>> > consumed optionally depending on compilation flags.  The nice thing
>>> > about this approach is that you don't necessarily have to recompile
>>> > the whole project with different flags whenever you need a different
>>> > compile time / performance tradeoff.  E.g. if Flambda information is
>>> > available for an unchanged file, you don't have to rebuild it when
>>> > needed.  If you just want to compile quickly, you don't have to read
>>> > data you don't need.  Separate compilation files would also integrate
>>> > much better with build tools (timestamping, etc.).
>>> >
>>> > I guess we would already be looking at OCaml version 5 for such a change :)
>>> >
>>> > On Thu, Mar 10, 2016 at 2:20 AM, Mark Shinwell <mshinwell@janestreet.com> wrote:
>>> >> By "enabled at configure time" I mean that you need to pass the
>>> >> "-flambda" option to the configure script when building the compiler.
>>> >>
>>> >> The main reason Flambda isn't enabled by default is because we need to
>>> >> do further work to improve compile-time performance.  There are also
>>> >> concerns about .cmx file size.  Flambda produces larger .cmx files: it
>>> >> stores the entire intermediate representation of the compilation unit
>>> >> so that no subsequent cross-module inlining decision is compromised.
>>> >>
>>> >> There is a mode, -Oclassic, which uses Flambda but mimics the
>>> >> behaviour of the existing compiler; unfortunately this isn't really
>>> >> fast enough yet either and .cmx sizes aren't small enough.
>>> >>
>>> >> When we manage to address some of these issues further, hopefully for
>>> >> 4.04, we will revisit whether Flambda should be enabled by default.
>>> >>
>>> >> One of the main reasons there is a configure option rather than a
>>> >> runtime switch is to avoid having to re-engineer the compiler's build
>>> >> system to permit multiple builds of the various libraries (the stdlib,
>>> >> for example) with differing options that affect what appears in the
>>> >> .cmx files (e.g. with and without Flambda).  Even if code were used to
>>> >> allow Flambda to read non-Flambda .cmx files, performance degradation
>>> >> would result.
>>> >>
>>> >> Mark
>>> >>
>>> >> On 10 March 2016 at 01:43, Markus Mottl <markus.mottl@gmail.com> wrote:
>>> >>> I agree with Yotam.  Assuming that Flambda produces correct code and
>>> >>> doesn't cause any serious performance issues either with the generated
>>> >>> code or with excessive compile times, I'd prefer building it into the
>>> >>> compiler by default.  I'd be fine if I had to pass an extra flag at
>>> >>> compile time to actually run Flambda optimizers, but it should at
>>> >>> least be available.  It doesn't have to be perfect to be useful.
>>> >>>
>>> >>> On Wed, Mar 9, 2016 at 8:32 PM, Yotam Barnoy <yotambarnoy@gmail.com> wrote:
>>> >>>> While we await the manual, can you explain what you mean by 'enabled at
>>> >>>> configure time'? Will a -flambda -O-something argument passed to the normal
>>> >>>> 4.03 compiler enable flambda optimizations? Flambda is clearly the star of
>>> >>>> the 4.03 release, so not enabling it using command line options seems
>>> >>>> counter-intuitive (if this is the case).
>>> >>>>
>>> >>>> -Yotam
>>> >>>>
>>> >>>> On Wed, Mar 9, 2016 at 7:59 PM, Markus Mottl <markus.mottl@gmail.com> wrote:
>>> >>>>> I've just tested Flambda, and it seems to already be doing a pretty
>>> >>>>> decent job on some non-trivial examples (e.g. inlining combinations of
>>> >>>>> functors and first class functions).  I hope there will be a stable
>>> >>>>> 4.03 OPAM switch that enables it.  I'm looking forward to being able
>>> >>>>> to write more elegant, abstract code that's still efficient.
>>> >>>>>
>>> >>>>> Regards,
>>> >>>>> Markus
>>> >>>>>
>>> >>>>> On Wed, Mar 9, 2016 at 2:14 AM, Mark Shinwell <mshinwell@janestreet.com>
>>> >>>>> wrote:
>>> >>>>>> It will not be enabled by default in 4.03.  For the majority of
>>> >>>>>> programs, in the current state, it should improve performance (mainly
>>> >>>>>> by lowering allocation).  It should never generate wrong code.
>>> >>>>>> However we know of examples that don't improve as much as we would
>>> >>>>>> like, which we will try to address for 4.04.
>>> >>>>>>
>>> >>>>>> There will be a draft version of the new Flambda manual chapter
>>> >>>>>> available shortly (hopefully this week).  Amongst other things this
>>> >>>>>> documents what you found about the configure options and the flags'
>>> >>>>>> operation.
>>> >>>>>>
>>> >>>>>> Mark
>>> >>>>>>
>>> >>>>>> On 9 March 2016 at 03:55, Markus Mottl <markus.mottl@gmail.com> wrote:
>>> >>>>>>> Hi Alain,
>>> >>>>>>>
>>> >>>>>>> I see, thanks.  It was a little confusing, because the command line
>>> >>>>>>> options for tuning flambda were still available even without Flambda
>>> >>>>>>> being enabled.
>>> >>>>>>>
>>> >>>>>>> Will Flambda be enabled by default in OCaml 4.03 or is it still
>>> >>>>>>> considered to be too experimental?  It could turn out to become one of
>>> >>>>>>> the most impactful new features in terms of how I write code.
>>> >>>>>>>
>>> >>>>>>> Regards,
>>> >>>>>>> Markus
>>> >>>>>>>
>>> >>>>>>> On Tue, Mar 8, 2016 at 5:53 PM, Alain Frisch <alain.frisch@lexifi.com>
>>> >>>>>>> wrote:
>>> >>>>>>>> Hi Markus,
>>> >>>>>>>>
>>> >>>>>>>> flambda needs to be enabled explicitly at configure time with the
>>> >>>>>>>> "-flambda"
>>> >>>>>>>> flag.  The new optimizer will then be used unconditionally, and you
>>> >>>>>>>> can
>>> >>>>>>>> tweak it using command-line parameters passed to ocamlopt (see
>>> >>>>>>>> "ocamlopt
>>> >>>>>>>> -h").
>>> >>>>>>>>
>>> >>>>>>>>
>>> >>>>>>>> Alain
>>> >>>>>>>>
>>> >>>>>>>>
>>> >>>>>>>> On 08/03/2016 23:10, Markus Mottl wrote:
>>> >>>>>>>>> Hi,
>>> >>>>>>>>>
>>> >>>>>>>>> I'm trying out OCaml 4.03.0+beta1 right now and wanted to test
>>> >>>>>>>>> Flambda
>>> >>>>>>>>> optimizations.  But looking at the generated assembly, it doesn't
>>> >>>>>>>>> seem
>>> >>>>>>>>> to be doing much if anything on the simple test examples that I
>>> >>>>>>>>> thought would benefit.
>>> >>>>>>>>>
>>> >>>>>>>>> To give an example of what I expected to see, lets consider this
>>> >>>>>>>>> code:
>>> >>>>>>>>>
>>> >>>>>>>>> -----
>>> >>>>>>>>> let map_pair f (x, y) = f x, f y
>>> >>>>>>>>>
>>> >>>>>>>>> let succ x = x + 1
>>> >>>>>>>>> let map_pair_succ1 pair = map_pair succ pair
>>> >>>>>>>>> let map_pair_succ2 (x, y) = succ x, succ y
>>> >>>>>>>>> -----
>>> >>>>>>>>>
>>> >>>>>>>>> I would have thought that the "succ" function would be inlined in
>>> >>>>>>>>> "map_pair_succ1" as the compiler would do for "map_pair_succ2".
>>> >>>>>>>>> But the generated code looks like this:
>>> >>>>>>>>>
>>> >>>>>>>>> -----
>>> >>>>>>>>> L101:
>>> >>>>>>>>>    movq  %rax, %rdi
>>> >>>>>>>>>    movq  %rdi, 8(%rsp)
>>> >>>>>>>>>    movq  %rbx, (%rsp)
>>> >>>>>>>>>    movq  8(%rbx), %rax
>>> >>>>>>>>>    movq  (%rdi), %rsi
>>> >>>>>>>>>    movq  %rdi, %rbx
>>> >>>>>>>>>    call  *%rsi
>>> >>>>>>>>> L102:
>>> >>>>>>>>>    movq  %rax, 16(%rsp)
>>> >>>>>>>>>    movq  (%rsp), %rax
>>> >>>>>>>>>    movq  (%rax), %rax
>>> >>>>>>>>>    movq  8(%rsp), %rbx
>>> >>>>>>>>>    movq  (%rbx), %rdi
>>> >>>>>>>>>    call  *%rdi
>>> >>>>>>>>> -----
>>> >>>>>>>>>
>>> >>>>>>>>> Is Flambda supposed to work out of the box with the current beta?
>>> >>>>>>>>> What flags or annotations should I use for testing?  Any showcase
>>> >>>>>>>>> examples I should try out that are expected to be improved?
>>> >>>>>>>>>
>>> >>>>>>>>> Regards,
>>> >>>>>>>>> Markus
>>> >>>>>>>>>
>>> >>>>>>>
>>> >>>>>>>
>>> >>>>>>> --
>>> >>>>>>> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>>> >>>>>>>
>>> >>>>>>> --
>>> >>>>>>> Caml-list mailing list.  Subscription management and archives:
>>> >>>>>>> https://sympa.inria.fr/sympa/arc/caml-list
>>> >>>>>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>> >>>>>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>> >>>>>
>>> >>>>>
>>> >>>>> --
>>> >>>>> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>>> >>>>>
>>> >>>>> --
>>> >>>>> Caml-list mailing list.  Subscription management and archives:
>>> >>>>> https://sympa.inria.fr/sympa/arc/caml-list
>>> >>>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>> >>>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>> >>>>
>>> >>>
>>> >>>
>>> >>> --
>>> >>> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>>> >
>>> >
>>>
>>>
>>
>> --
>> ------------------------------------------------------------
>> Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
>> My OCaml site:          http://www.camlcity.org
>> Contact details:        http://www.camlcity.org/contact.html
>> Company homepage:       http://www.gerd-stolpmann.de
>> ------------------------------------------------------------
>>



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
