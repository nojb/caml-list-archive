Return-Path: <markus.mottl@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 9DB857F026
	for <caml-list@sympa.inria.fr>; Thu, 10 Mar 2016 16:32:03 +0100 (CET)
IronPort-PHdr: 9a23:sjcwyBH3j/2WZLhlvQgrDZ1GYnF86YWxBRYc798ds5kLTJ74p86wAkXT6L1XgUPTWs2DsrQf27WQ4/CrBjdIyK3CmU5BWaQEbwUCh8QSkl5oK+++Imq/EsTXaTcnFt9JTl5v8iLzG0FUHMHjew+a+SXqvnYsExnyfTB4Ov7yUtaLyZ/niKbiq9aMOE1hv3mUX/BbFF2OtwLft80b08NJC50a7V/3mEZOYPlc3mhyJFiezF7W78a0+4N/oWwL46pyv+YJa6jxfrw5QLpEF3xmdjltvIy4gyLeVhOC7WcwVWAfkxwAQ1SUrUKyYpCklyLgtaJG2CicIsDySfhgXC+i7qF0RRvsoCUOMTMi7Hvah9A2h6Ve9kGPvRt6lqvdeoKIL7Jbeb/BeZtOQGNbXdtKESlGHp+4R4QKBusFe+1fqt+u9BM1sRKiCFz0V6vUwThSiyqzgPQ3
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=markus.mottl@gmail.com; spf=Pass smtp.mailfrom=markus.mottl@gmail.com; spf=None smtp.helo=postmaster@mail-ob0-f180.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  markus.mottl@gmail.com) identity=pra;
  client-ip=209.85.214.180;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="markus.mottl@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  markus.mottl@gmail.com designates 209.85.214.180 as permitted
  sender) identity=mailfrom; client-ip=209.85.214.180;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="markus.mottl@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f180.google.com) identity=helo;
  client-ip=209.85.214.180;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="markus.mottl@gmail.com";
  x-sender="postmaster@mail-ob0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CuAACLkuFWkrTWVdFeg1w0bQaoUIFOkDoBDYFtIYVuAoE5BzgUAQEBAQEBAQEQAQEBAQcLCwkhL4ItghUBAQQSER0BFAcSCwEDDAYFCwMKAgIJHQICIQEBEQEFAQoSBhMSEIdsAQMSDqBDgTE+MYs2gWqCV4VHChknAwpRg3QBAQEBAQEEAQEBAQEBFAEFCgVthRyDRH6CPYR9gToFhh4Mh32JFYFOhByGGYF1gWRLhyGFL4cahhIRHoEPHgEBgjgegW4eLolTAQEB
X-IPAS-Result: A0CuAACLkuFWkrTWVdFeg1w0bQaoUIFOkDoBDYFtIYVuAoE5BzgUAQEBAQEBAQEQAQEBAQcLCwkhL4ItghUBAQQSER0BFAcSCwEDDAYFCwMKAgIJHQICIQEBEQEFAQoSBhMSEIdsAQMSDqBDgTE+MYs2gWqCV4VHChknAwpRg3QBAQEBAQEEAQEBAQEBFAEFCgVthRyDRH6CPYR9gToFhh4Mh32JFYFOhByGGYF1gWRLhyGFL4cahhIRHoEPHgEBgjgegW4eLolTAQEB
X-IronPort-AV: E=Sophos;i="5.24,316,1454972400"; 
   d="scan'208";a="168033927"
Received: from mail-ob0-f180.google.com ([209.85.214.180])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 10 Mar 2016 16:32:02 +0100
Received: by mail-ob0-f180.google.com with SMTP id fz5so84331433obc.0
        for <caml-list@inria.fr>; Thu, 10 Mar 2016 07:32:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc;
        bh=cssYC33Uzj2p/1ZsOU3AsBRtpmfwjxUPrOXfG+lo+mI=;
        b=N+4KGKoJJUDFLkqmyCRz0DGJdphBdkYX/CpLC0MNn7OdVL2DYENrlatRhsxpY2/UQC
         9N+2R6oyCE7zvMkYhf2jwtD+ApNxU6W/Or6f6Rnfet1KjQHkHVnXBJYfMEqJhXHnxDKq
         xTYST7y0JleSMOIJCt6fJi8daxI4Nj4VA2I3YV1EWlIuJjGUIXhrFwqejuIj0GDW6elE
         OV3OldHrIX2KIBRZ/quTgjfkZ4x+oZdY/9HvvXviqdZroqxOYeXHt2u3ucJlbWJhVQdc
         GojqbCmSA7Ph6dy0sRVaIWHCYdeDzB2GtVWMirC/VJMhK/m/meZiiohbK4kHes9Anfli
         XGCQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc;
        bh=cssYC33Uzj2p/1ZsOU3AsBRtpmfwjxUPrOXfG+lo+mI=;
        b=lyuTK21jJM6yGm1ENwkBbeKGa760TCOezEX9ufoXbmO/+IkpnGvjt8Hb8npSpOPMzT
         J8ai1a0WFtsuU32WXqe6FNNQ2zbKuJppiN1yis+clPcYV31S+nSlOeBNQlqEGIhbo6eK
         2ZRZMAXO9S/b9Yeh/HYCCYbEcV2zstSqIJikxRnwQkG64r3O9mUaNM30hobgBjeNy50j
         6CfHBeo1vAk0T/MM+g6tkZ3m0N3ZjpryRrgl+1uZpBWazrslMDIQ6++8zHKoFOnhkcgW
         6b7PB3ff95hkJko4/Na0jQv0DLlBcSR40o1IldmFOk+5UjEGO+Z6z/L4x8IpPMOk2exG
         5a3g==
X-Gm-Message-State: AD7BkJJ1mEZLFTEAoTXR+EKBO+ng/NCfofWOLodSLsLuvsV25acirrzh7ZgCWODf0fTwLKznznqBTzj68SOyMA==
MIME-Version: 1.0
X-Received: by 10.182.24.8 with SMTP id q8mr2429629obf.67.1457623920675; Thu,
 10 Mar 2016 07:32:00 -0800 (PST)
Received: by 10.182.128.164 with HTTP; Thu, 10 Mar 2016 07:32:00 -0800 (PST)
In-Reply-To: <CAM3Ki77_C2_KFKxAEhn+FwAYqWpVVdhPK2o8vD---7R6Frd9AQ@mail.gmail.com>
References: <CAP_800qWG6ZB-6an2axntKXG2aJEjAFmPie7-U1CYz73-_qz+A@mail.gmail.com>
	<56DF57FA.9070309@lexifi.com>
	<CAP_800pAmWvghdoq5EkOJ_nw5YN9sEXv_4abCZkmV=B32ig7fQ@mail.gmail.com>
	<CAM3Ki75qx_ULu=PdGC08ZAH_oCMGz=M5PjJbDkzEv9tZuxi_LA@mail.gmail.com>
	<CAP_800qkSEETKu8bkYY3wDNLfRUVSsecA2Hh3Dp0bt7DYEsF4Q@mail.gmail.com>
	<CAN6ygOn-xCckB4BdyxstWNa9fMau97kW0VYdt+LCbz5neCL7dw@mail.gmail.com>
	<CAP_800pnJRxLatZmtMTu=xMfdreGV4XmnhW9T5KMa7U2uPRRcg@mail.gmail.com>
	<CAM3Ki77_C2_KFKxAEhn+FwAYqWpVVdhPK2o8vD---7R6Frd9AQ@mail.gmail.com>
Date: Thu, 10 Mar 2016 10:32:00 -0500
Message-ID: <CAP_800qG=c_uwTDjHj9U4V6K1qX+Amh8LGLhevtHWE6gL1U1nw@mail.gmail.com>
From: Markus Mottl <markus.mottl@gmail.com>
To: Mark Shinwell <mshinwell@janestreet.com>
Cc: Yotam Barnoy <yotambarnoy@gmail.com>, Alain Frisch <alain.frisch@lexifi.com>, 
	OCaml List <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] Status of Flambda in OCaml 4.03

Ok, that explains things.  Is it realistic to assume that the size of
.cmx files can be substantially reduced?  It seems there is a natural
tradeoff between "optimize well" and "compile fast".  I suspect it may
be inevitable to add more compilation files.  We actually already have
that situation with native code libraries: the .cmxa file is enough to
compile a project, but if the .cmx files of contained modules are
visible in the path, too, then, and only then, the compiler can and
will do cross-module inlining - which takes longer, of course.

What about the following approach? - There is one "minimal" set of
compilation files that always allows you to quickly obtain a running
(albeit slow / large) executable.   Additional compilation files then
monotonically augment this information and can be produced and
consumed optionally depending on compilation flags.  The nice thing
about this approach is that you don't necessarily have to recompile
the whole project with different flags whenever you need a different
compile time / performance tradeoff.  E.g. if Flambda information is
available for an unchanged file, you don't have to rebuild it when
needed.  If you just want to compile quickly, you don't have to read
data you don't need.  Separate compilation files would also integrate
much better with build tools (timestamping, etc.).

I guess we would already be looking at OCaml version 5 for such a change :)

On Thu, Mar 10, 2016 at 2:20 AM, Mark Shinwell <mshinwell@janestreet.com> wrote:
> By "enabled at configure time" I mean that you need to pass the
> "-flambda" option to the configure script when building the compiler.
>
> The main reason Flambda isn't enabled by default is because we need to
> do further work to improve compile-time performance.  There are also
> concerns about .cmx file size.  Flambda produces larger .cmx files: it
> stores the entire intermediate representation of the compilation unit
> so that no subsequent cross-module inlining decision is compromised.
>
> There is a mode, -Oclassic, which uses Flambda but mimics the
> behaviour of the existing compiler; unfortunately this isn't really
> fast enough yet either and .cmx sizes aren't small enough.
>
> When we manage to address some of these issues further, hopefully for
> 4.04, we will revisit whether Flambda should be enabled by default.
>
> One of the main reasons there is a configure option rather than a
> runtime switch is to avoid having to re-engineer the compiler's build
> system to permit multiple builds of the various libraries (the stdlib,
> for example) with differing options that affect what appears in the
> .cmx files (e.g. with and without Flambda).  Even if code were used to
> allow Flambda to read non-Flambda .cmx files, performance degradation
> would result.
>
> Mark
>
> On 10 March 2016 at 01:43, Markus Mottl <markus.mottl@gmail.com> wrote:
>> I agree with Yotam.  Assuming that Flambda produces correct code and
>> doesn't cause any serious performance issues either with the generated
>> code or with excessive compile times, I'd prefer building it into the
>> compiler by default.  I'd be fine if I had to pass an extra flag at
>> compile time to actually run Flambda optimizers, but it should at
>> least be available.  It doesn't have to be perfect to be useful.
>>
>> On Wed, Mar 9, 2016 at 8:32 PM, Yotam Barnoy <yotambarnoy@gmail.com> wrote:
>>> While we await the manual, can you explain what you mean by 'enabled at
>>> configure time'? Will a -flambda -O-something argument passed to the normal
>>> 4.03 compiler enable flambda optimizations? Flambda is clearly the star of
>>> the 4.03 release, so not enabling it using command line options seems
>>> counter-intuitive (if this is the case).
>>>
>>> -Yotam
>>>
>>> On Wed, Mar 9, 2016 at 7:59 PM, Markus Mottl <markus.mottl@gmail.com> wrote:
>>>>
>>>> I've just tested Flambda, and it seems to already be doing a pretty
>>>> decent job on some non-trivial examples (e.g. inlining combinations of
>>>> functors and first class functions).  I hope there will be a stable
>>>> 4.03 OPAM switch that enables it.  I'm looking forward to being able
>>>> to write more elegant, abstract code that's still efficient.
>>>>
>>>> Regards,
>>>> Markus
>>>>
>>>> On Wed, Mar 9, 2016 at 2:14 AM, Mark Shinwell <mshinwell@janestreet.com>
>>>> wrote:
>>>> > It will not be enabled by default in 4.03.  For the majority of
>>>> > programs, in the current state, it should improve performance (mainly
>>>> > by lowering allocation).  It should never generate wrong code.
>>>> > However we know of examples that don't improve as much as we would
>>>> > like, which we will try to address for 4.04.
>>>> >
>>>> > There will be a draft version of the new Flambda manual chapter
>>>> > available shortly (hopefully this week).  Amongst other things this
>>>> > documents what you found about the configure options and the flags'
>>>> > operation.
>>>> >
>>>> > Mark
>>>> >
>>>> > On 9 March 2016 at 03:55, Markus Mottl <markus.mottl@gmail.com> wrote:
>>>> >> Hi Alain,
>>>> >>
>>>> >> I see, thanks.  It was a little confusing, because the command line
>>>> >> options for tuning flambda were still available even without Flambda
>>>> >> being enabled.
>>>> >>
>>>> >> Will Flambda be enabled by default in OCaml 4.03 or is it still
>>>> >> considered to be too experimental?  It could turn out to become one of
>>>> >> the most impactful new features in terms of how I write code.
>>>> >>
>>>> >> Regards,
>>>> >> Markus
>>>> >>
>>>> >> On Tue, Mar 8, 2016 at 5:53 PM, Alain Frisch <alain.frisch@lexifi.com>
>>>> >> wrote:
>>>> >>> Hi Markus,
>>>> >>>
>>>> >>> flambda needs to be enabled explicitly at configure time with the
>>>> >>> "-flambda"
>>>> >>> flag.  The new optimizer will then be used unconditionally, and you
>>>> >>> can
>>>> >>> tweak it using command-line parameters passed to ocamlopt (see
>>>> >>> "ocamlopt
>>>> >>> -h").
>>>> >>>
>>>> >>>
>>>> >>> Alain
>>>> >>>
>>>> >>>
>>>> >>> On 08/03/2016 23:10, Markus Mottl wrote:
>>>> >>>>
>>>> >>>> Hi,
>>>> >>>>
>>>> >>>> I'm trying out OCaml 4.03.0+beta1 right now and wanted to test
>>>> >>>> Flambda
>>>> >>>> optimizations.  But looking at the generated assembly, it doesn't
>>>> >>>> seem
>>>> >>>> to be doing much if anything on the simple test examples that I
>>>> >>>> thought would benefit.
>>>> >>>>
>>>> >>>> To give an example of what I expected to see, lets consider this
>>>> >>>> code:
>>>> >>>>
>>>> >>>> -----
>>>> >>>> let map_pair f (x, y) = f x, f y
>>>> >>>>
>>>> >>>> let succ x = x + 1
>>>> >>>> let map_pair_succ1 pair = map_pair succ pair
>>>> >>>> let map_pair_succ2 (x, y) = succ x, succ y
>>>> >>>> -----
>>>> >>>>
>>>> >>>> I would have thought that the "succ" function would be inlined in
>>>> >>>> "map_pair_succ1" as the compiler would do for "map_pair_succ2".
>>>> >>>> But the generated code looks like this:
>>>> >>>>
>>>> >>>> -----
>>>> >>>> L101:
>>>> >>>>    movq  %rax, %rdi
>>>> >>>>    movq  %rdi, 8(%rsp)
>>>> >>>>    movq  %rbx, (%rsp)
>>>> >>>>    movq  8(%rbx), %rax
>>>> >>>>    movq  (%rdi), %rsi
>>>> >>>>    movq  %rdi, %rbx
>>>> >>>>    call  *%rsi
>>>> >>>> L102:
>>>> >>>>    movq  %rax, 16(%rsp)
>>>> >>>>    movq  (%rsp), %rax
>>>> >>>>    movq  (%rax), %rax
>>>> >>>>    movq  8(%rsp), %rbx
>>>> >>>>    movq  (%rbx), %rdi
>>>> >>>>    call  *%rdi
>>>> >>>> -----
>>>> >>>>
>>>> >>>> Is Flambda supposed to work out of the box with the current beta?
>>>> >>>> What flags or annotations should I use for testing?  Any showcase
>>>> >>>> examples I should try out that are expected to be improved?
>>>> >>>>
>>>> >>>> Regards,
>>>> >>>> Markus
>>>> >>>>
>>>> >>>
>>>> >>
>>>> >>
>>>> >>
>>>> >> --
>>>> >> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>>>> >>
>>>> >> --
>>>> >> Caml-list mailing list.  Subscription management and archives:
>>>> >> https://sympa.inria.fr/sympa/arc/caml-list
>>>> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>>> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>>>
>>>>
>>>>
>>>> --
>>>> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>>>>
>>>> --
>>>> Caml-list mailing list.  Subscription management and archives:
>>>> https://sympa.inria.fr/sympa/arc/caml-list
>>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>>
>>>
>>
>>
>>
>> --
>> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com



-- 
Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
