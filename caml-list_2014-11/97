Return-Path: <arthur@chargueraud.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 0BE557FB0A
	for <caml-list@sympa.inria.fr>; Tue, 25 Nov 2014 17:43:02 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.07,456,1413237600"; 
   d="scan'208,217";a="109520768"
Received: from dhcp-rocq-82.inria.fr (HELO [128.93.62.82]) ([128.93.62.82])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 25 Nov 2014 17:43:01 +0100
Message-ID: <5474B195.3040108@chargueraud.org>
Date: Tue, 25 Nov 2014 17:43:01 +0100
From: =?UTF-8?B?QXJ0aHVyIENoYXJndcOpcmF1ZA==?= <arthur@chargueraud.org>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.1.2
MIME-Version: 1.0
To: caml-list@inria.fr
Content-Type: multipart/alternative;
 boundary="------------020803080106070600000607"
X-Validation-by: arthur@chargueraud.org
Subject: [Caml-list]  teaching OCaml

This is a multi-part message in MIME format.
--------------020803080106070600000607
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Hi Bob,

I have been teaching OCaml for a while, and like you I found error
messages to be a major issue. This motivated my recent work on
improving type error messages for OCaml.

My patch is ready for action.

opam switch 4.03.0+pr102
ocamlc -new-type-errors -strict-sequence test.ml

For more information: http://arthur.chargueraud.org/teach/ocaml/

If you have a chance to try it on beginners, please share your feedback!

Best,
Arthur Charguéraud


PS: I know of on-going efforts to try and improve parsing errors too
---it be great to have those fixed too.

PPS: although my patch is usable, I have planned to fix a few things.
- Have a two-column display for type errors on applications,
     with expected types and provided types.
- Remove bracket delimiters around types and use newlines instead.
- Have "-new-type-errors" imply "-strict-sequence",
- Document the fact it does not support GADTs, and does not
    typecheck with "-principal", in particular code that uses overloading
    of record fields.
- Isolate the code associated with "-new-type-errors" so that the patch
    may have a chance of being considered for integration in OCaml.


>
> Greetings. Bob Muller here, in the CS dept. at Boston College. I've set out to
> develop an intro CS course in ML that I hope will be well-suited for similar
> universities in the US. My original plan was to teach the course in SML but
> after talking with a few people at neighboring schools, I switched to OCaml. I
> am now in the final weeks of the first run of the course.  I plan to document
> my experience more fully at some point but I wanted to touch base with the
> OCaml community because I'm teaching the course again in the spring and I am
> leaning toward switching to F#.
>
> While OCaml has in many respects been great and it's easy to see that my
> students find the OCaml style of coding very compelling, there are significant
> problems. Of course, OCaml wasn't designed for teaching but I'm hoping that
> someone on this list might be able to advise me about solutions to some of
> these that I just don't know about.
>
> 1. Error messages: It's difficult to give good type errors for ML but I was
> hoping that the state-of-the-art of type error reporting had improved. When my
> students receive a type error, they are utterly mystified,
>
> 2. GUIs: several of my problem sets work with simple graphics (e.g., rendering
> tessellations) or animations (e.g., a maze walk or a simplified form of
> tetris, or the game "Flow"). We have been hobbling along with the Graphics and
> Labltk modules for this but it has been more pain than my students ought to
> know. We also have some problem sets that work with audio so I would like
> support for that.
>
> Any thoughts, ideas and/or leads on either of these would be much appreciated.
> I already plan to look at js_of_ocaml more closely.
> Thank you,
> Bob Muller
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs


--------------020803080106070600000607
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>

    <meta http-equiv="content-type" content="text/html; charset=utf-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <div class="moz-cite-prefix">Hi Bob,<br>
      <br>
      I have been teaching OCaml for a while, and like you I found error<br>
      messages to be a major issue. This motivated my recent work on<br>
      improving type error messages for OCaml. <br>
      <br>
      My patch is ready for action.<br>
      <meta http-equiv="content-type" content="text/html; charset=utf-8">
      <pre style="font-family: 'Courier New', monospace; color: rgb(0, 0, 0); font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">opam switch 4.03.0+pr102
ocamlc -new-type-errors -strict-sequence test.ml 
</pre>
      For more information: <a class="moz-txt-link-freetext" href="http://arthur.chargueraud.org/teach/ocaml/">http://arthur.chargueraud.org/teach/ocaml/</a><br>
      <br>
      If you have a chance to try it on beginners, please share your
      feedback!<br>
      <br>
      Best,<br>
      Arthur Charguéraud<br>
      <br>
      <br>
      PS: I know of on-going efforts to try and improve parsing errors
      too<br>
      ---it be great to have those fixed too.<br>
      <br>
      PPS: although my patch is usable, I have planned to fix a few
      things.<br>
      - Have a two-column display for type errors on applications,<br>
          with expected types and provided types.<br>
      - Remove bracket delimiters around types and use newlines instead.<br>
      - Have "-new-type-errors" imply "-strict-sequence",<br>
      - Document the fact it does not support GADTs, and does not <br>
         typecheck with "-principal", in particular code that uses
      overloading <br>
         of record fields.<br>
      - Isolate the code associated with "-new-type-errors" so that the
      patch<br>
         may have a chance of being considered for integration in OCaml.<br>
      <br>
      <br>
    </div>
    <blockquote
cite="mid:CAPFanBEyJ2+wk-hVJ=aagruYWRPOrvYu4Z0WdjEvkw32N4f9Pw@mail.gmail.com"
      type="cite">
      <pre wrap="">

Greetings. Bob Muller here, in the CS dept. at Boston College. I've set out to
develop an intro CS course in ML that I hope will be well-suited for similar
universities in the US. My original plan was to teach the course in SML but
after talking with a few people at neighboring schools, I switched to OCaml. I
am now in the final weeks of the first run of the course.  I plan to document
my experience more fully at some point but I wanted to touch base with the
OCaml community because I'm teaching the course again in the spring and I am
leaning toward switching to F#.

While OCaml has in many respects been great and it's easy to see that my
students find the OCaml style of coding very compelling, there are significant
problems. Of course, OCaml wasn't designed for teaching but I'm hoping that
someone on this list might be able to advise me about solutions to some of
these that I just don't know about.

1. Error messages: It's difficult to give good type errors for ML but I was
hoping that the state-of-the-art of type error reporting had improved. When my
students receive a type error, they are utterly mystified,

2. GUIs: several of my problem sets work with simple graphics (e.g., rendering
tessellations) or animations (e.g., a maze walk or a simplified form of
tetris, or the game "Flow"). We have been hobbling along with the Graphics and
Labltk modules for this but it has been more pain than my students ought to
know. We also have some problem sets that work with audio so I would like
support for that.

Any thoughts, ideas and/or leads on either of these would be much appreciated.
I already plan to look at js_of_ocaml more closely.
Thank you,
Bob Muller

--
Caml-list mailing list.  Subscription management and archives:
<a class="moz-txt-link-freetext" href="https://sympa.inria.fr/sympa/arc/caml-list">https://sympa.inria.fr/sympa/arc/caml-list</a>
Beginner's list: <a class="moz-txt-link-freetext" href="http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group/ocaml_beginners</a>
Bug reports: <a class="moz-txt-link-freetext" href="http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a>
</pre>
    </blockquote>
    <br>
  </body>
</html>

--------------020803080106070600000607--
