Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 1CD2F7FAEE
	for <caml-list@sympa.inria.fr>; Tue, 18 Nov 2014 10:08:57 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.214.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.214.178 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f178.google.com) identity=helo;
  client-ip=209.85.214.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-ob0-f178.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao0GAAoMa1TRVdaym2dsb2JhbABbg2NZBIMCuQGOLoFeAQ2HRQIoYQcWAQEBAQERAQEBAQEGCwsJFC6DegkBAQQSER0BGx0BAwwGBQsNKgICIQEBEQEFARwZIoVUgjUBAxINrRg9MYs7gXODEYpMChknDWiFeAEBAQEGAQEBAQEBARUBBQ6KYoNdHYIaBAeCNkEPA4FCBYUpAoZrii9nhRaCFIEzPY1MSIJsgg4YKYVTHzABgkoBAQU
X-IPAS-Result: Ao0GAAoMa1TRVdaym2dsb2JhbABbg2NZBIMCuQGOLoFeAQ2HRQIoYQcWAQEBAQERAQEBAQEGCwsJFC6DegkBAQQSER0BGx0BAwwGBQsNKgICIQEBEQEFARwZIoVUgjUBAxINrRg9MYs7gXODEYpMChknDWiFeAEBAQEGAQEBAQEBARUBBQ6KYoNdHYIaBAeCNkEPA4FCBYUpAoZrii9nhRaCFIEzPY1MSIJsgg4YKYVTHzABgkoBAQU
X-IronPort-AV: E=Sophos;i="5.07,408,1413237600"; 
   d="scan'208";a="107828152"
Received: from mail-ob0-f178.google.com ([209.85.214.178])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Nov 2014 10:08:55 +0100
Received: by mail-ob0-f178.google.com with SMTP id gq1so3631495obb.23
        for <caml-list@inria.fr>; Tue, 18 Nov 2014 01:08:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:cc
         :content-type;
        bh=ry8W6HODSzF8iYlVECB6TIPik5cVwAaCVDDeYUT5Naw=;
        b=Jg9R6qDB/9oS9OzU0AanpFV5Q6yWFyQwboTuhOKIp7RED6shBdcPhbEkePXMLqXrlm
         WP+94gYiVHnzDaZ5afnrdwoez8yRo1FeZBEWdz7LSPpGs6eEDEpFaof1tJSi7mT0kcJG
         mdRmrnc69GOT2BVUQSWgRDuEAxm0D46yqKqDN9YJF5gTFJsEAVaQE7+FiXmK/Un4P567
         lqt/0d32VGwfjHmVqmQ2k+LgRilnuQikZB81esl3tfDRwhqjyug8IM3ShLlFnrnmh5ts
         gCuXlQWUdvLHXP/7ZgjnJI60+MuiJRrkSgxtVc4V17PtiChD2OHqe/AryhIekis7BSPj
         YpqQ==
MIME-Version: 1.0
X-Received: by 10.182.33.67 with SMTP id p3mr29387308obi.15.1416301734656;
 Tue, 18 Nov 2014 01:08:54 -0800 (PST)
Received: by 10.182.197.1 with HTTP; Tue, 18 Nov 2014 01:08:54 -0800 (PST)
In-Reply-To: <CAPFanBG+TkpdorCAyE0OOCHWJXnD8WYm2JWC6gej5x0st-yxWw@mail.gmail.com>
References: <CAK7rcp-TENReRAON1-=gHHdd6t3SHfrE0KceDT8EZ32AfXd0cg@mail.gmail.com>
	<CAPFanBG+TkpdorCAyE0OOCHWJXnD8WYm2JWC6gej5x0st-yxWw@mail.gmail.com>
Date: Tue, 18 Nov 2014 04:08:54 -0500
Message-ID: <CAK7rcp_qbDs7dh1Agid4eB5M=Q+umyMuhrdz97mbc=+__H4nQQ@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c1e8d0ca017c05081e71ac
Subject: Re: [Caml-list] Go Oracle like facility for Ocaml?

--001a11c1e8d0ca017c05081e71ac
Content-Type: text/plain; charset=UTF-8

Wow, you did a fantastic job fielding this question. I only even found one
of those tools, OCamlspotter and some etags, otags and cscope
functionality! :)

On Tue, Nov 18, 2014 at 4:06 AM, Gabriel Scherer <gabriel.scherer@gmail.com>
wrote:

> (One can find a description of Go oracle's design in
>
> https://docs.google.com/document/d/1WmMHBUjQiuy15JfEnT8YBROQmEv-7K6bV-Y_K53oi5Y/view
> and its user manual in
>
> https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view#heading=h.kthq8ap0mdwi
> )
>
> The ecosystem of OCaml tooling is not as refined as Go's (but
> contributions are welcome). There is no centralized tool provider with
> a common interface, but several contributors have developped separate
> tool to anayze different aspects of OCaml programs:
>
> - ocamlspotter: https://bitbucket.org/camlspotter/ocamlspot
> - ocp-index: http://typerex.ocamlpro.com/ocp-index.html
> - pfff: https://github.com/facebook/pfff
> - merlin: http://the-lambda-church.github.io/merlin/
>
> These tool provide a relatively complete coverage of the information
> that can easily be retrieved from the typedtree of a program (>=4.01
> versions of the OCaml compiler have the option to generate a reified
> typedtree for external tools): the occurences of a declared/defined
> name, the definition place of a name, the type of an expression, etc.
> As far as I'm aware, there is not much in the direction of the more
> advanced static analysis feature Go's oracle supports: points-to
> information, "who may update this mutable field", etc. I'm not
> familiar with Pfff's capabilities, it may be the more advanced in this
> regard.
>
> (There is also more experimental work going on, for example Thomas
> Blanc's work on static analysis of exception flow at OCamlPro:
> https://github.com/OCamlPro/socaml-analyzer )
>
> I think merlin is the best-positioned tool to deal with
> partially-incorrect files (typical of an edition session) and
> incrementality. It also incorporates some query/analysis feature, but
> it's unclear whether those should grow inside a monolithic tool (eg.
> it could encompass the current feature set of ocp-index and
> ocamlspotter, if it does not already), or rather try to communicate
> with external analysis/query plugins. It also interacts with existing
> editors through a reasonable query-answer interface, but does not
> provide a direct command-line interface (anyone interested in this
> could work on it, it may be relatively easy to implement).
>
> There are fairly orthogonal aspects to a "answering questions about
> programs" toolbox, among which:
> 1) user-interface, interactive use, and interface with existing editors
> 2) support for incrementality and robustness under partially-incorrect
> files
> 3) knowledge of what the "project", or whole program, is; which
> dependencies are required to understand the work? (build system
> knowledge)
> 4) implementation of various program analyses and transformations
>
> Is it possible to provide them in separate programs and have them
> interact to form a useful whole? Or would it be easier, faster and
> more robust to implement them all in a monolithic program? What are
> the necessary interdependence between these aspects and what interface
> should them provide to each other?
>
> On Tue, Nov 18, 2014 at 6:00 AM, Kenneth Adam Miller
> <kennethadammiller@gmail.com> wrote:
> > If anybody knows what Go's oracle is you'll know that its a great
> > accelerator for your time; it allows expressive and meaningful searches
> to
> > be done over a source repository. It's fast and dead useful. Opengrok is
> > much the same, but to a lesser extent (having links is nice, but not
> quite
> > as powerful as oracle, I could be wrong).
> >
> > Is there anything like this for OCaml?
>

--001a11c1e8d0ca017c05081e71ac
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Wow, you did a fantastic job fielding this question. I onl=
y even found one of those tools, OCamlspotter and some etags, otags and csc=
ope functionality! :)</div><div class=3D"gmail_extra"><br><div class=3D"gma=
il_quote">On Tue, Nov 18, 2014 at 4:06 AM, Gabriel Scherer <span dir=3D"ltr=
">&lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=3D"_blank">gabrie=
l.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quo=
te" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"=
>(One can find a description of Go oracle&#39;s design in<br>
=C2=A0 <a href=3D"https://docs.google.com/document/d/1WmMHBUjQiuy15JfEnT8YB=
ROQmEv-7K6bV-Y_K53oi5Y/view" target=3D"_blank">https://docs.google.com/docu=
ment/d/1WmMHBUjQiuy15JfEnT8YBROQmEv-7K6bV-Y_K53oi5Y/view</a><br>
and its user manual in<br>
=C2=A0 <a href=3D"https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRz=
OPYEDe0Y_WQNRv-EiFYUyw/view#heading=3Dh.kthq8ap0mdwi" target=3D"_blank">htt=
ps://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUy=
w/view#heading=3Dh.kthq8ap0mdwi</a><br>
)<br>
<br>
The ecosystem of OCaml tooling is not as refined as Go&#39;s (but<br>
contributions are welcome). There is no centralized tool provider with<br>
a common interface, but several contributors have developped separate<br>
tool to anayze different aspects of OCaml programs:<br>
<br>
- ocamlspotter: <a href=3D"https://bitbucket.org/camlspotter/ocamlspot" tar=
get=3D"_blank">https://bitbucket.org/camlspotter/ocamlspot</a><br>
- ocp-index: <a href=3D"http://typerex.ocamlpro.com/ocp-index.html" target=
=3D"_blank">http://typerex.ocamlpro.com/ocp-index.html</a><br>
- pfff: <a href=3D"https://github.com/facebook/pfff" target=3D"_blank">http=
s://github.com/facebook/pfff</a><br>
- merlin: <a href=3D"http://the-lambda-church.github.io/merlin/" target=3D"=
_blank">http://the-lambda-church.github.io/merlin/</a><br>
<br>
These tool provide a relatively complete coverage of the information<br>
that can easily be retrieved from the typedtree of a program (&gt;=3D4.01<b=
r>
versions of the OCaml compiler have the option to generate a reified<br>
typedtree for external tools): the occurences of a declared/defined<br>
name, the definition place of a name, the type of an expression, etc.<br>
As far as I&#39;m aware, there is not much in the direction of the more<br>
advanced static analysis feature Go&#39;s oracle supports: points-to<br>
information, &quot;who may update this mutable field&quot;, etc. I&#39;m no=
t<br>
familiar with Pfff&#39;s capabilities, it may be the more advanced in this<=
br>
regard.<br>
<br>
(There is also more experimental work going on, for example Thomas<br>
Blanc&#39;s work on static analysis of exception flow at OCamlPro:<br>
<a href=3D"https://github.com/OCamlPro/socaml-analyzer" target=3D"_blank">h=
ttps://github.com/OCamlPro/socaml-analyzer</a> )<br>
<br>
I think merlin is the best-positioned tool to deal with<br>
partially-incorrect files (typical of an edition session) and<br>
incrementality. It also incorporates some query/analysis feature, but<br>
it&#39;s unclear whether those should grow inside a monolithic tool (eg.<br>
it could encompass the current feature set of ocp-index and<br>
ocamlspotter, if it does not already), or rather try to communicate<br>
with external analysis/query plugins. It also interacts with existing<br>
editors through a reasonable query-answer interface, but does not<br>
provide a direct command-line interface (anyone interested in this<br>
could work on it, it may be relatively easy to implement).<br>
<br>
There are fairly orthogonal aspects to a &quot;answering questions about<br>
programs&quot; toolbox, among which:<br>
1) user-interface, interactive use, and interface with existing editors<br>
2) support for incrementality and robustness under partially-incorrect file=
s<br>
3) knowledge of what the &quot;project&quot;, or whole program, is; which<b=
r>
dependencies are required to understand the work? (build system<br>
knowledge)<br>
4) implementation of various program analyses and transformations<br>
<br>
Is it possible to provide them in separate programs and have them<br>
interact to form a useful whole? Or would it be easier, faster and<br>
more robust to implement them all in a monolithic program? What are<br>
the necessary interdependence between these aspects and what interface<br>
should them provide to each other?<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Tue, Nov 18, 2014 at 6:00 AM, Kenneth Adam Miller<br>
&lt;<a href=3D"mailto:kennethadammiller@gmail.com">kennethadammiller@gmail.=
com</a>&gt; wrote:<br>
&gt; If anybody knows what Go&#39;s oracle is you&#39;ll know that its a gr=
eat<br>
&gt; accelerator for your time; it allows expressive and meaningful searche=
s to<br>
&gt; be done over a source repository. It&#39;s fast and dead useful. Openg=
rok is<br>
&gt; much the same, but to a lesser extent (having links is nice, but not q=
uite<br>
&gt; as powerful as oracle, I could be wrong).<br>
&gt;<br>
&gt; Is there anything like this for OCaml?<br>
</div></div></blockquote></div><br></div>

--001a11c1e8d0ca017c05081e71ac--
