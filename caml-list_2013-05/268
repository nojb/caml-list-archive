Return-Path: <berenger@riken.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C99877EE6A
	for <caml-list@sympa.inria.fr>; Fri, 31 May 2013 08:26:14 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  berenger@riken.jp) identity=pra; client-ip=134.160.33.161;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="berenger@riken.jp";
  x-sender="berenger@riken.jp"; x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  berenger@riken.jp designates 134.160.33.161 as permitted
  sender) identity=mailfrom; client-ip=134.160.33.161;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="berenger@riken.jp";
  x-sender="berenger@riken.jp"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@postman.riken.jp designates 134.160.33.161 as
  permitted sender) identity=helo; client-ip=134.160.33.161;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="berenger@riken.jp";
  x-sender="postmaster@postman.riken.jp";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgQBAONBqFGGoCGhh2dsb2JhbABZgzq+aIEZDgEBAQgNCQcWKIIjAQEEAScRRgsLGAklDwJGEwYCAQGIAwa7PI8jFoNBA4keik+DUYYejHqBRg
X-IPAS-Result: AgQBAONBqFGGoCGhh2dsb2JhbABZgzq+aIEZDgEBAQgNCQcWKIIjAQEEAScRRgsLGAklDwJGEwYCAQGIAwa7PI8jFoNBA4keik+DUYYejHqBRg
X-IronPort-AV: E=Sophos;i="4.87,777,1363129200"; 
   d="scan'208";a="19723860"
Received: from postman1.riken.jp (HELO postman.riken.jp) ([134.160.33.161])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 31 May 2013 08:26:13 +0200
Received: from postman.riken.jp (postman1.riken.jp [127.0.0.1])
	by postman.riken.jp (Postfix) with SMTP id 97F2B32C015E
	for <caml-list@inria.fr>; Fri, 31 May 2013 15:26:11 +0900 (JST)
Received: from [172.27.98.103] (rikad98.riken.jp [134.160.214.98])
	by postman.riken.jp (Postfix) with ESMTPA id 5310432A008B
	for <caml-list@inria.fr>; Fri, 31 May 2013 15:26:11 +0900 (JST)
Message-ID: <51A84283.80309@riken.jp>
Date: Fri, 31 May 2013 15:26:11 +0900
From: Francois Berenger <berenger@riken.jp>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:17.0) Gecko/20130510 Thunderbird/17.0.6
MIME-Version: 1.0
To: caml-list@inria.fr
References: <51A81C67.50902@riken.jp> <87bo7rogub.fsf@gmail.com>
In-Reply-To: <87bo7rogub.fsf@gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-PMX-Version: 6.0.0.2142326, Antispam-Engine: 2.7.2.2107409, Antispam-Data: 2013.5.31.61516
Subject: Re: [Caml-list] automatic extaction of the .mli (and a little more)
 from the .ml

On 05/31/2013 02:31 PM, Malcolm Matalka wrote:
> I know of no such tool, but in counter to your premise: I used to think
> maintaining a .ml and .mli was foolish, however I no longer do.

It itches me and it won't stop.

>  .mli is
> effectively documentation for me.  It contains a lot of comments and is
> generally written to reflect how the API should be used rather than the
> order in which I must express functions to get ta .ml to compile.

I'm proposing to add some number to tags so that things can
be reordered when dumped to the .mli.

>  On
> top of that, ocamlc will fail to compile if your .ml and .mli don't
> match,

The tool I am thinking about is a preprocessor.
It would be used to generate all .mli files before the compilation
of the .ml ones (at least in _MY_ OCaml projects).

 > so it's a valuable check that what I think my module does is also
> what the compiler does.  I also tend to write the .mli first, then write
> the .ml.  I find it to be a great way to develop.

I don't.

> In short, I think it's a good thing to maintain these things by hand.

I don't:
dumb_job + error_prone + can_be_automated + duplication_of_information 
--> the computer will do it for me.

I'm thinking about something small.
It may not work on all cases people can come up with.
I don't do very elaborated things usually so it will work for me,
at least.

> But as for your original question I'm completely useless, sorry.
>
> /M
>
> Francois Berenger <berenger@riken.jp> writes:
>
>> Hello,
>>
>> Is there some recommended tool/script to generate a .mli
>> from the corresponding .ml?
>>
>> I want a little more than ocamlc -i:
>>
>> - I think there should be tags in the .ml file as comments
>>    that say "export this" to the .mli.
>>    By default, things are not exported.
>> - maybe it should have an option to say to replicate
>>    the ocamldoc comments in the .mli.
>> - it could be nice if the order in which things are exported
>>    to the .mli can be specified, maybe as an argument of the tag.
>>    So that the .mli can be more readable (only backward references
>>    to concepts, etc.)
>>
>> If there is a need to create a tool, let's call it "nomli". :)
>>
>> Regards,
>> F.
>>
>> PS: I'm not going to maintain both a .mli and a .ml.
>>      I feel it is a dumb and error-prone job and that
>>      itches me.
>

