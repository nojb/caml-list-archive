Return-Path: <michael.lienhardt@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 6DA4F7EE51
	for <caml-list@sympa.inria.fr>; Sat,  4 May 2013 18:01:51 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.87,611,1363129200"; 
   d="scan'208";a="13201460"
Received: from 69.24.87.79.rev.sfr.net (HELO [192.168.1.26]) ([79.87.24.69])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-CAMELLIA256-SHA; 04 May 2013 18:01:50 +0200
Message-ID: <518530ED.7040700@inria.fr>
Date: Sat, 04 May 2013 18:01:49 +0200
From: =?ISO-8859-1?Q?Micha=EBl_Lienhardt?= <michael.lienhardt@inria.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:17.0) Gecko/20130422 Thunderbird/17.0.5
MIME-Version: 1.0
To: caml-list@inria.fr
References: <5184FDB0.30406@inria.fr> <492B4A0C-06A9-4B72-83E7-5DC585690EC3@math.nagoya-u.ac.jp>
In-Reply-To: <492B4A0C-06A9-4B72-83E7-5DC585690EC3@math.nagoya-u.ac.jp>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
Subject: Re: [Caml-list] recursive module type

Thanks

I also thought about the SetConverter solution.
This is what I will use.

I was asking if such a recursive definition was possible because I have a tendency to compare the ocaml module system with Java-like objects.
 From that point of view, signatures are like tree-structured Java interfaces that can declare types, values and functions in addition to methods (functors).
While typing in object-oriented languages is recursive by default, I understand that it is not the case in ocaml because of type inference:
  annotating modules with their signatures then enable recursive modules.
Then, because signatures are types, and also have some similarities with Java interfaces, I imagined that some kind of recursion is possible.

Michael Lienhardt


Le 04/05/2013 14:47, Jacques Garrigue a écrit :
>
> On 2013/05/04, at 21:23, Michaël Lienhardt <michael.lienhardt@inria.fr> wrote:
>
>> Hello,
>>
>> I would like to define some recursive module type in caml, like
>> module type S = sig
>> ...
>> module Toto(M : S) : sig
>>   ...
>> end
>> end
>>
>> More precisely, I'd like to extend the Set module available in the ocaml distribution with a function that convert a set into another set.
>> Intuitively, I came up with the following signature S, which is not accepted by ocaml (Error: Unbound module type S):
>>
>>   module type S = sig
>>
>>     include Set.S
>>
>>     module Convert : functor(SetTarget : S) -> sig
>>       val convert : (elt -> SetTarget.elt) -> t -> SetTarget.t
>>     end
>>   end
>
> You first problem is syntactic.
> You cannot define recursive signatures, just recursive modules.
> But the signature may refer recursively to the module.
> So you can attempt to write the following:
>
> module rec M : sig
>    module type S = sig
>       include Set.S
>       module Convert : functor(SetTarget :M.S) -> sig
>         val convert : (elt -> SetTarget.elt) -> t -> SetTarget.t
>       end
>     end
> end = M;;
>
> unfortunately, this does not work:
> Fatal error: exception Env.Recmodule
>
> And this is not surprising, because this would let you indeed define
> a recursive signature (i.e. a signature that unfolds infinitely).
>
> Jacques Garrigue
>

