Return-Path: <johan.grande@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 81F137EE51
	for <caml-list@sympa.inria.fr>; Fri, 24 May 2013 17:02:16 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.87,736,1363129200"; 
   d="scan'208";a="15599285"
Received: from raj.inria.fr (HELO [138.96.201.66]) ([138.96.201.66])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-CAMELLIA256-SHA; 24 May 2013 17:02:16 +0200
Message-ID: <519F80F8.3030907@inria.fr>
Date: Fri, 24 May 2013 17:02:16 +0200
From: Johan Grande <johan.grande@inria.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:17.0) Gecko/20130510 Thunderbird/17.0.6
MIME-Version: 1.0
To: caml-list@inria.fr
References: <CAC3Lx=aj0HxPYvQKpt2yFzcQMXZOc2NKnB56DezQheMHjUPdag@mail.gmail.com> <519F1CF6.7050007@riken.jp> <20130524144706.GG2007@siouxsie>
In-Reply-To: <20130524144706.GG2007@siouxsie>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
Subject: Re: [Caml-list] French study on security and functional languages

Le 24/05/2013 16:47, oliver a écrit :
> On Fri, May 24, 2013 at 04:55:34PM +0900, Francois Berenger wrote:
>> The document "État des lieux des langages fonctionnels"
>> is interesting even out of the context of computer security.
>>
>> http://www.ssi.gouv.fr/IMG/pdf/LaFoSec_-_Etat_des_lieux_des_langages_fonctionnels.pdf
>>
>> PS: and, most importantly, page 55 gives good marks to OCaml
>>      compared to other languages (so that we can start to troll now) :-)
> [...]
>
> What about Haskell?
> Did it "perform" well?

Same as OCaml except difficult :-)

Here is a rough translation of the subitems of the table on page 55:

** Teaching material
** Integration in IDEs
** Simple syntax
** Easy to write in

** Type inference
** Complex data structures
** Modularity
** Polymorphism

** Strong static typing
** Pattern matching
** Rich pure functional core

Efficiency
* native code production

Interoperability
* with C
* virtual machines

Security

-- 
Johan

