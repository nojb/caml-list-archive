Return-Path: <info@gerd-stolpmann.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 9D8FA7FCCB
	for <caml-list@sympa.inria.fr>; Wed, 29 Apr 2015 14:00:28 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=pra;
  client-ip=212.227.126.187;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  info@gerd-stolpmann.de) identity=mailfrom;
  client-ip=212.227.126.187;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="info@gerd-stolpmann.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mout.kundenserver.de) identity=helo;
  client-ip=212.227.126.187;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="info@gerd-stolpmann.de";
  x-sender="postmaster@mout.kundenserver.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0BbAQBix0BVlLt+49RcgyE+XMYJgUkMhUQ+AoFBOhIBAQEBAQEBEQEBAQEHCwsJHzCEIAEBAQMBVSQFCwsYLlcGEwkShWCCKAwJswwhbw2SaAEBAQEBAQQBAQEBAR2LOIJrgXQmB4ItTYEzBYZIi3ECgziEboFRhzkDjjyCCIIRbQEEgkABAQE
X-IPAS-Result: A0BbAQBix0BVlLt+49RcgyE+XMYJgUkMhUQ+AoFBOhIBAQEBAQEBEQEBAQEHCwsJHzCEIAEBAQMBVSQFCwsYLlcGEwkShWCCKAwJswwhbw2SaAEBAQEBAQQBAQEBAR2LOIJrgXQmB4ItTYEzBYZIi3ECgziEboFRhzkDjjyCCIIRbQEEgkABAQE
X-IronPort-AV: E=Sophos;i="5.11,670,1422918000"; 
   d="asc'?scan'208";a="138116525"
Received: from mout.kundenserver.de ([212.227.126.187])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 29 Apr 2015 14:00:27 +0200
Received: from office1.lan.sumadev.de ([178.4.18.152]) by
 mrelayeu.kundenserver.de (mreue004) with ESMTPSA (Nemesis) id
 0MJ09d-1YpuZH1YZF-002WGN; Wed, 29 Apr 2015 14:00:26 +0200
Received: from [192.168.65.10] (unknown [192.168.65.10])
	by office1.lan.sumadev.de (Postfix) with ESMTPSA id ED87DDC05D;
	Wed, 29 Apr 2015 14:00:24 +0200 (CEST)
Message-ID: <1430308813.22412.75.camel@e130.lan.sumadev.de>
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: =?ISO-8859-1?Q?Fran=E7ois?= Bobot <francois.bobot@cea.fr>, 
	=?ISO-8859-1?Q?St=E9phane?= Glondu
	 <steph@glondu.net>, OCaml Mailing List <caml-list@inria.fr>
Date: Wed, 29 Apr 2015 14:00:13 +0200
In-Reply-To: <CAPFanBG5rviKu6=Gf2=iYpOetUCYv8G3dRRX7viK2kWae45-DQ@mail.gmail.com>
References: <54F5B3F7.3030705@cea.fr>
	 <1425394551.4056.1.camel@thinkpad.lan.sumadev.de> <54F6D731.3090004@cea.fr>
	 <CALdWJ+zHfRORxQ-LjFa2f1SG4eLEZABhgHc_S8MWd2L_cPktJw@mail.gmail.com>
	 <1428953391.22412.40.camel@e130.lan.sumadev.de> <552CD705.9000508@cea.fr>
	 <552CE242.9050307@glondu.net> <552D0BFE.7000904@cea.fr>
	 <1430128317.3427.70.camel@zotac>
	 <CAPFanBG5rviKu6=Gf2=iYpOetUCYv8G3dRRX7viK2kWae45-DQ@mail.gmail.com>
Content-Type: multipart/signed; micalg="pgp-sha1"; protocol="application/pgp-signature";
	boundary="=-mqUY5751X9d6M1J6JhQe"
X-Mailer: Evolution 3.10.4-0ubuntu2 
Mime-Version: 1.0
X-Provags-ID:  V03:K0:WbasnVpAlCgeOpGC+mFmOIV2WIFjl0T+h5yFTGdA4qVzHf62cnd
 BdSuJlL252HzTWmnsprpAHOiVwe6MK7Qj3sy9v+OWReL0EJLYkHCynv0K0Jna56t0FpAef2
 dNO10MntT9waHRTYsvPIY001Hzgp3K8CjjrDn0rYRV529x+AmjgwJDGKcvip4Un98cuzu4z
 4ngGCqPSY6GZNsZ5MZfxg==
X-UI-Out-Filterresults: notjunk:1;
Subject: Re: [Caml-list] Dependencies between plugins


--=-mqUY5751X9d6M1J6JhQe
Content-Type: text/plain; charset="ISO-8859-15"
Content-Transfer-Encoding: quoted-printable

Well, I was quickly thinking about this obvious alternative, but I think
it is even a more ad-hoc solution. We are changing the rules until they
are matching the META files... Defaults have the disadvantage that they
are somewhat invisible to the user, and make it harder to understand
what's actually going on.

I have another idea. Maybe the wrong starting point of all previous
suggestions is to reuse the "archive" variable for plugins. We could
also have a separate variable for this, e.g. "plugin":

archive(byte) =3D "file.cma"
archive(native) =3D "file.cmxa"
plugin(byte) =3D "file.cma"
plugin(native) =3D "file.cmxs"

This is even a bit simpler than my previous suggestion. We would need a
little bit of magic for a transition phase, but I think this could be
somewhat more attractive in the long term.

Am Montag, den 27.04.2015, 12:16 +0200 schrieb Gabriel Scherer:
> Another (more general, less ad-hoc) way to have this semantics would
> be to introduce a "default value" for predicates that do not explictly
> appear in rules.
> ...
> I can see a use for another default variable (ocaml=3Dtrue) allowing
> people that could want to use ocamlfind for non-ocaml stuff to disable
> it explicitly, and then reuse the rule names for their own stuff. (In
> ocamlbuild it is useful to be able to talk about compilation problems
> that are not about OCaml).

Basically you can already do that if you avoid the variables that are
used for ocaml. E.g. you have a script language "dofoo" and want to
manage deps with ocamlfind. You would just not reuse "archive", but a
different variable, let's say dofoo_script. There is already quite good
support for such alternate variables, e.g.

ocamlfind query -format '%+(dofoo_script)' -recursive pkg...

would print all such script names (with absolute path) of pkg, including
the predecessors.

Gerd



>=20
>=20
> On Mon, Apr 27, 2015 at 11:51 AM, Gerd Stolpmann
> <info@gerd-stolpmann.de> wrote:
>         Fran=E7ois,
>=20=20=20=20=20=20=20=20=20
>         I was thinking again about this issue. Introducing a third
>         category
>         "shared" in addition to byte and native seems to be a bit odd.
>         Actually,
>         what we really want to have is a second dimension
>         plugin/executable in
>         addition to the already existing byte/native dimension, so
>         that we can
>         have:
>=20=20=20=20=20=20=20=20=20
>          - byte + executable (cmo)
>          - native + executable (cmx)
>          - byte + plugin (cmo, too)
>          - native + plugin (cmxs)
>=20=20=20=20=20=20=20=20=20
>         That way we can have a separate cmo for byte+plugin, which may
>         be useful
>         here and there. Also, byte and native are again symmetric.
>=20=20=20=20=20=20=20=20=20
>         A typical META file would now specify
>=20=20=20=20=20=20=20=20=20
>         archive(byte,executable) =3D "..."
>         archive(native,executable) =3D "..."
>=20=20=20=20=20=20=20=20=20
>         if it doesn't support plugins, and specify
>=20=20=20=20=20=20=20=20=20
>         archive(byte,executable) =3D "..."
>         archive(native,executable) =3D "..."
>         archive(byte,plugin) =3D "..."
>         archive(native,plugin) =3D "..."
>=20=20=20=20=20=20=20=20=20
>         if it does so. (NB. "executable" because these are the objects
>         for
>         creating executables.)
>=20=20=20=20=20=20=20=20=20
>         The only remaining question is how to handle existing META
>         files that
>         don't make this distinction. We don't have a version number in
>         META
>         files, so we have to watch out for another criterion. I am
>         thinking
>         about understanding
>=20=20=20=20=20=20=20=20=20
>         archive(native) =3D "..."
>=20=20=20=20=20=20=20=20=20
>         as
>=20=20=20=20=20=20=20=20=20
>         archive(native,executable) =3D "..."
>=20=20=20=20=20=20=20=20=20
>         if there is no other reference to the executable predicate.
>         This would
>         be a special fixup after parsing META. After a transition
>         phase (say,
>         two years from now on) we would consider archive(native) as an
>         error.
>         The upcoming META lint will report this issue.
>=20=20=20=20=20=20=20=20=20
>         This way, the existing META files can still be used for some
>         time,
>         including those specifying plugins. There is no hurry in
>         changing this
>         detail. However, you are absolutely right that the current use
>         of
>         "plugin" breaks the way the predicates are defined, and in the
>         long term
>         this is worth fixing.
>=20=20=20=20=20=20=20=20=20
>         Gerd
>=20=20=20=20=20=20=20=20=20
>=20=20=20=20=20=20=20=20=20
>=20=20=20=20=20=20=20=20=20
>         Am Dienstag, den 14.04.2015, 14:45 +0200 schrieb Fran=E7ois
>         Bobot:
>         > On 14/04/2015 11:47, St=E9phane Glondu wrote:
>         > > Le 14/04/2015 10:59, Fran=E7ois Bobot a =E9crit :
>         > >>>> Are there any movement in this direction, or this
>         patches will die?
>         > >>>
>         > >>> Don't think so. Slowness on my side.
>         > >>
>         > >> On my side, I haven't yet written the documentation. My
>         main impediment
>         > >> is to choose which predicates to use for the cmxs in the
>         META file:
>         > >> 1) to keep archive(plugin,native) because it is the
>         defacto standard
>         > >> 2) to move to something that is semantically right:
>         > >> archive(native_plugin) or archive(shared).
>         > >
>         > > Sorry, I didn't follow the whole discussion but... this
>         looks like
>         > > hardcoding a special treatment of plugins for the native
>         case,
>         > > forgetting the bytecode case. Would you introduce
>         byte_plugin (or a
>         > > bytecode counterpart to "shared" which looks bad to me) as
>         well?
>         >
>         > The fact is that native and bytecode are not symmetric:
>         >               | byte  | native
>         > static link  | cmo   | cmx
>         > dynamic link | cmo   | cmxs
>         >
>         > So for bytecode we can still use `archive(byte)`. If someone
>         wants its library to be loaded
>         > differently in static linking and dynamic linking e can use
>         `archive(byte,plugin)`.
>         >
>         > You are right that I should give a full proposal (I'm going
>         to go with `shared` instead of
>         > `native_plugin` because it is short and correspond to the
>         ocamlopt option):
>         >
>         > 1. In META file:
>         >    1.1 use `archive(byte)` and `archive(native)` for the
>         files to statically link
>         >    1.2 use `archive(byte,plugin)` for the files to
>         dynamically link in bytecode if they are
>         > different from the static one
>         >    1.3 use `archive(shared)` for the files that are
>         dynamically linked in native code
>         >
>         > 2. During dynamic loading:
>         >    2.1. in bytecode: look for variable `archive` with
>         predicates `byte`,`plugin` and the other
>         > predicates used during compilation (`mt`, `mt_posix`,
>         `mt_vm`, `gprof`, ...)
>         >    2.2  in native: look for variable `archive` with
>         predicates `shared`, `plugin` and the other
>         > predicates used during static linking except `native`
>         >
>         >
>         > My goal is just that when you ask in native code "Does this
>         library define files for dynamic
>         > linking" the answer is not "yes, it defines these cmx".
>         There are other solutions (like asking that
>         > file to statically link are define with
>         `archive(native,-plugin)`) but they seem to be less
>         > conservative.
>         >
>         >  > Even
>         >  > code using Dynlink should be as generic (w.r.t.
>         native/bytecode) as
>         >  > possible...
>         >
>         >
>         > The examples of tools that use dependencies between plugins
>         gathered at the start of the discussion
>         > are already not generic (w.r.t. native/bytecode) :
>         >
>         > The following code makes a differences between bytecode and
>         native code:
>         >
>         https://github.com/ocsigen/ocsigenserver/blob/master/src/baselib/=
ocsigen_loader.ml#L165
>         >
>         https://github.com/zoggy/stog/blob/e83c363c83465a7bfd1595816b3d9b=
c8331af560/stog_dyn.ml#L119-L146
>         >
>         > This one works only for native code, it seems:
>         >
>         https://github.com/hammerlab/ketrew/blob/master/src/lib/pure/ketr=
ew_plugin.ml#L52
>         >
>         > The proposed modification is to replace (for example in
>         ocsigen):
>         >
>         > ```ocaml
>         > (if Ocsigen_config.is_native then "native" else "byte")
>         > ```
>         >
>         > by
>         >
>         > ```ocaml
>         > (if Ocsigen_config.is_native then "shared" else "byte")
>         > ```
>         >
>         > --
>         > Fran=E7ois
>         >
>         >
>=20=20=20=20=20=20=20=20=20
>         --
>=20=20=20=20=20=20=20=20=20
>         ------------------------------------------------------------
>         Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
>         My OCaml site:          http://www.camlcity.org
>         Contact details:        http://www.camlcity.org/contact.html
>         Company homepage:       http://www.gerd-stolpmann.de
>         ------------------------------------------------------------
>=20=20=20=20=20=20=20=20=20
>=20
>=20

--=20
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
My OCaml site:          http://www.camlcity.org
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
------------------------------------------------------------


--=-mqUY5751X9d6M1J6JhQe
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAABAgAGBQJVQMfNAAoJEAaM4b9ZLB5T8IAH/1HTl2DNDdatL4zoEjlp+9yM
W8IdDYltCuIMpTdYsyBwK9K7tBjFs8Up28jDrD52BP4bo6KDxlVBlOX4L8jExY5d
mliJYLod42kHYQeBcbdDl+THXrnWdRk3Dis2yATPyf3Bj8ZixAYIhgpezVWOEZ+g
1H3S/2HsBEh/KVlyUrm35qZknVHst/vT2C2IxDlM4Lf7qQuTAHo7GugHHpdLM7sa
cXfDjm6S50FnqiY9cuKr3f7pLpM3UyIm+q+Q1uej/28aMcilD8es5+WaNOobGh5r
Fs6XckcGXr241H+tKIQqyhechbTv65OwNxRIRQaRrCSYsK1Zq9LbBmQmPfu/bOs=
=Kt3R
-----END PGP SIGNATURE-----

--=-mqUY5751X9d6M1J6JhQe--

