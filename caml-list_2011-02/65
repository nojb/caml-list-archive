Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p19JBdU2006715
	for <caml-list@sympa-roc.inria.fr>; Wed, 9 Feb 2011 20:11:39 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap4GAKJ1Uk1XaqLJgWdsb2JhbACXL44dFgEWIiS8BIVcBI8i
X-IronPort-AV: E=Sophos;i="4.60,446,1291590000"; 
   d="scan'208";a="75651153"
Received: from ka.mail.enyo.de ([87.106.162.201])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES256-SHA; 09 Feb 2011 20:11:34 +0100
Received: from [172.17.135.4] (helo=deneb.enyo.de)
	by ka.mail.enyo.de with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	id 1PnFRq-0003qr-DN; Wed, 09 Feb 2011 20:11:30 +0100
Received: from fw by deneb.enyo.de with local (Exim 4.72)
	(envelope-from <fw@deneb.enyo.de>)
	id 1PnFRq-00037n-68; Wed, 09 Feb 2011 20:11:30 +0100
From: Florian Weimer <fw@deneb.enyo.de>
To: rossberg@mpi-sws.org
Cc: orbitz@ezabel.com, caml-list@inria.fr
References: <50AF76A1-30E0-4735-AFB2-88BB603899CE@ezabel.com>
	<77df810e993b3002f8b97622102da8dd.squirrel@mail.mpi-sws.org>
Date: Wed, 09 Feb 2011 20:11:30 +0100
In-Reply-To: <77df810e993b3002f8b97622102da8dd.squirrel@mail.mpi-sws.org>
	(rossberg@mpi-sws.org's message of "Wed, 9 Feb 2011 13:01:58 +0100
	(CET)")
Message-ID: <87hbcdvx99.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Subject: Re: [Caml-list] Scoped Bound Resource Management just for C++?

> Scope-bound resource management is inherently broken, at least
> without sophisticated type system support.

If the environment supports communicating processes with separate
execution pointers, it is straightforward to bypass restrictions, no
matter how evolved the type system is.

> 2) or it is unsafe, i.e. you can access an object after its life time has
> ended, with potentially desastrous effects.

This can be made safe with type-safe memory and run-time checks.  I
don't think this is a good excuse.

In the end, this is about making it as easy as possible for
programmers to write resource-aware programs.  After all, the
challenge is that code without proper resource management seems to be
correct for small sample inputs, so problems are likely noticed only
much, much later.
