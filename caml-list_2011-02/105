Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p1I9CZee017388
	for <caml-list@sympa-roc.inria.fr>; Fri, 18 Feb 2011 10:12:36 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtsKADHHXU3RVdg0k2dsb2JhbACYF4YDg1eDXEsIFQEBAQEJCQoJEQQgiDiZP4oYghyEUS+IWgEBAwWFWQSBZ4oqhkmBfTo
X-IronPort-AV: E=Sophos;i="4.62,186,1297033200"; 
   d="scan'208";a="88254123"
Received: from mail-qw0-f52.google.com ([209.85.216.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Feb 2011 10:12:18 +0100
Received: by qwi4 with SMTP id 4so3048892qwi.39
        for <caml-list@yquem.inria.fr>; Fri, 18 Feb 2011 01:12:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc:content-type;
        bh=zBMYTiDn9jFUw8+arV1jQPnsLaHZ98V1atQiiMgxhoA=;
        b=WKzKV3UtknmoaReRH9DRKl+MOBXXmwIb9P2p96q2RymP4H9PAOx5BaaQ0o+RS/rjeu
         bRTMiKjLy3F5+gNIlUSSAo1a+pnc1Qns5VPUx7j+LEd7nc7nZrEnwIUpp8+vRQg8M7Ep
         8iTfxke5HqHCwyipFyRUvzu/GTTWql7blzvKo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=DR4v69AciNIGg6PoHzjnoo5HnFpqCG0tLTlGlsMmz9nswOtZRISWWfSm/VfA+XaLbW
         KYystBsoRJsW70MEC2F/dTvvQhS/DeHqpS4dOAKFqcTjachc6PTD7KJ453OzxM+YM05L
         /qj5YmZm5Zq5Odj0MRaovB9uydTMj2c8Ze+EM=
Received: by 10.229.229.209 with SMTP id jj17mr329215qcb.273.1298020336224;
 Fri, 18 Feb 2011 01:12:16 -0800 (PST)
MIME-Version: 1.0
Received: by 10.229.236.69 with HTTP; Fri, 18 Feb 2011 01:11:56 -0800 (PST)
In-Reply-To: <AANLkTi=zPa35Wza-q1+XLennZ89sCzS8j+4rWgwz10w9@mail.gmail.com>
References: <AANLkTi=zPa35Wza-q1+XLennZ89sCzS8j+4rWgwz10w9@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 18 Feb 2011 10:11:56 +0100
Message-ID: <AANLkTinYgUYPW-6L74DHVO=+CLq3mxBY4FkqeVcjKyTr@mail.gmail.com>
To: Anthony Tavener <anthony.tavener@gmail.com>
Cc: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016363b8c960d4a71049c8ae9c3
Subject: Re: [Caml-list] Common code over different fields of a record, using macros?


--0016363b8c960d4a71049c8ae9c3
Content-Type: text/plain; charset=ISO-8859-1

1. This discontinuity (field names in access position get replaced, but not
in a "with ...") is a bug of the current macro extension of Camlp4. I have
just written a patch that fixes this precise issue.
The good news is that you don't need to patch and recompile the whole OCaml
distribution to benefit from the fix. The "macro parser" (the part of camlp4
that supports DEFINE and so on) is a camlp4 extension like any other, so you
just have to compile the modified code somewhere and pass the ".cmo" to the
camlp4* preprocessor you run on your source code.
The bad news is that while the proposed patch fixes your particular use
case, I have found other similar inconsistencies -- eg. use in pattern
position -- that are harder to fix and would require a deeper
re-implementation of this syntax extension logic. I know how I should do
that but, unless someone is specifically interested in fixing this, I'm not
sure I will actually do it.

My patch is distributed as an individual source file, which is a modified
version of the original Camlp4Parsers/Camlp4MacroParser.ml file of the ocaml
distribution :
  http://bluestorm.info/camlp4/dev/define_and_fields_bug/macro.ml.html
I use a small test file exhibiting your use case, an other use fixed by the
change, an unrelated bug, and an issue which isn't fixed by the change.
  http://bluestorm.info/camlp4/dev/define_and_fields_bug/test.ml.html
All source files are available directly
  http://bluestorm.info/camlp4/dev/define_and_fields_bug/list.php

It's easy to compare test.ml against both the original and the modified
macro parser. After compilation of macro.ml (ocamlfind-using compilation
command given at the top of the file), use :
  `camlp4of test.ml` for processing with the original macro parser
  `camlp4o macro.cmo` for processing with the modifier macro parser

Hope this helps.

PS : I will eventually file a ticket on the ocaml bug tracker on this
Camlp4MacroParser issue. Xavier Clerc is quite responsive on these kind of
things, and if I (or someone else; don't hesitate!) come with a reasonable
fix it may get into 3.13.


2. As a more general answer to your post, you should keep in mind that the
macro facility, as implemented by Camlp4Parsers/Camlp4MacroParser.ml , is
not intended to be an all-powerful syntax extension facility for OCaml. It
is rather a simple example of the power of writing Camlp4 extensions, that
provides simple substitute-and-replace facilities for expressions in
patterns. The particular misbehavior you encountered should be considered a
bug and it is legitimate to try to fix it, but it doesn't mean that this
macro definition facility ever will suit all your potential needs of clever
metaprogramming. Don't expect a much finer support for syntactic classes ("i
want this parameter to accept all syntactically valid patterns, and nothing
more") or hygienic macros any time soon.
If you want a powerful syntactical metaprogramming tool, your best bet would
be to use Camlp4 directly. While still limited, it is much more powerful
that the simple Camlp4MacroParser facility. I'm not sure however that
relying heavily on such syntactic facilities is a good idea in the long
turn; at least, you shouldn't expect other developers to easily accept to
use your non-standard extensions. However, for projects that you develop
alone, or where you have strong control on the compilation chain, camlp4 (or
camlp5) can be a nice tool.


3. In your specific example, a good compromise would be to use a hashtable
indexed by an algebraic datatype.

  type field = Strength | Agility

  type stats_table = (field, int) Hashtbl.t

  let age_state _ _ = failwith "not implemented"

  let _AGE field = fun (state, age) ->
    let s,a = age_state (Hashtbl.find state field) (Hashtbl.find age field)
in
    Hashtbl.add state field s;
    Hashtbl.add age field a;
    (state, age)

  let age_character input = function
    | n when n < 2 -> input
    | 2 -> _AGE(Strength) input
    | _ -> _AGE(Agility) input

In my example, an impure data structure is used (Hashtbl) and updated
imperatively; if you want to keep a pure update-by-copy operation like the
{... with ..} facility of records, you should rather use Map instead of
Hashtbl. As thread all state through a state monad, I considered this was
not an issue.

If you want a more concise syntax for hasthable access (and do not use the
related syntax extension), you can define infix operators, following an idea
from Paolo Donadeo:

  let (-->) table key = Hashtbl.find table key
  let (<--) table (key, value) = Hashtbl.add table key value

The downside of associative data structure instead of records here is that
force each field to have the same type. You couldn't have strength be an int
and agility be a float. It is fine however in the common situation where you
can have a uniform operation over field names because they are all used with
the same type.

Finally, it can be a good idea to determine a confined part of your program
where you need that indexing flexibility, where you would use that
"stats_table" representation, and convert in and out to a record "stats"
type so that the rest of your program see the more standard record type.
In my experience, the less typed but more flexible representations are often
only useful in the "ends" of your application, typically the place where you
do input-output; a common case is when constructing the data by parsing a
configuration file.


On Thu, Feb 17, 2011 at 12:53 AM, Anthony Tavener <anthony.tavener@gmail.com
> wrote:

> I find that records often result in redundant code... the same operation
> being specified for different fields (of the same type). I could use arrays
> in these cases, but then lose meaningful (to programmers) field names.
>
> I tried using camlp4 (and camlp5) macros to get the effect of passing a
> field "name" to a "function". I could get my example to work if I update
> mutable fields (record.field <- x), but using the functional record-update
> {record with field=x} doesn't work...
>
>
> --- Simplified mock-up of my current situation (not enough to compile) ---
>
> (* a record with some fields of the same type... imagine there might be
> many more fields *)
> type stats = { strength: int; agility: int }
>
> (* macro which doesn't work... "field" which follows "with" doesn't get
> replaced *)
> DEFINE AGE(field) = fun (state,age) ->
>   let s,a = age_stat state.field age.field in
>   {state with field=s}, {age with field=a}
>
> (* val f : (stats * stats) -> int -> (stats * stats) *)
> let age_character input = function
>   | n when n < 2 -> input
>   | 2 -> AGE(strength) input
>   | 3 -> AGE(agility) input
>   | _ -> AGE2(strength,agility) input
>
> (* a mock-up of usage... *)
> let state = { strength=3; agility=1 } in
> let age = { strength=0; agility=0 } in
> let state',age' = age_character (state,age) (rand 8) in ...
>
> ---
>
> After processing by camlp4 with macros this is what the first case becomes:
>
>   | 1 -> let s,a = age_stat state.strength age.strength in
>          {state with field=s}, {age with field=a}
>
> "field" isn't replaced with "strength" in the record-update. I tried
> looking at Camlp4MacroParser.ml... but it makes my head swim. It must be
> doing something much more careful than literal text replacement, but perhaps
> too careful... or incomplete? Does anyone know how these macros work? Is
> this proper behavior for some reason, or an unhandled edge case?
>
> The problem is I don't want a block of code like this to be repeated 10
> times with only a field-name change for each (and 4 field names each time!).
> That's not well readable, prone to error, and harder to maintain properly.
>
> Sometimes I wish I could present an alternative view of the same data, such
> as having an array "view" into part of a record... verified to be typesafe
> by the compiler... and compiled into the same simple offsets in the end.
> Maybe it's my asm/C origins which I never seem to escape. I mention this in
> hope that someone says "Oh, that's exactly what you can do... like this!" :)
>
> Thank-you for any help caml-list!
>
>  Tony
>
>

--0016363b8c960d4a71049c8ae9c3
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

1. This discontinuity (field names in access position get replaced, but not=
 in a &quot;with ...&quot;) is a bug of the current macro extension of Caml=
p4. I have just written a patch that fixes this precise issue.<br>The good =
news is that you don&#39;t need to patch and recompile the whole OCaml dist=
ribution to benefit from the fix. The &quot;macro parser&quot; (the part of=
 camlp4 that supports DEFINE and so on) is a camlp4 extension like any othe=
r, so you just have to compile the modified code somewhere and pass the &qu=
ot;.cmo&quot; to the camlp4* preprocessor you run on your source code.<br>

The bad news is that while the proposed patch fixes your particular use cas=
e, I have found other similar inconsistencies -- eg. use in pattern positio=
n -- that are harder to fix and would require a deeper re-implementation of=
 this syntax extension logic. I know how I should do that but, unless someo=
ne is specifically interested in fixing this, I&#39;m not sure I will actua=
lly do it.<br>

<br>My patch is distributed as an individual source file, which is a modifi=
ed version of the original Camlp4Parsers/Camlp4MacroParser.ml file of the o=
caml distribution :<br>=A0 <a href=3D"http://bluestorm.info/camlp4/dev/defi=
ne_and_fields_bug/macro.ml.html">http://bluestorm.info/camlp4/dev/define_an=
d_fields_bug/macro.ml.html</a><br>

I use a small test file exhibiting your use case, an other use fixed by the=
 change, an unrelated bug, and an issue which isn&#39;t fixed by the change=
.<br>=A0 <a href=3D"http://bluestorm.info/camlp4/dev/define_and_fields_bug/=
test.ml.html">http://bluestorm.info/camlp4/dev/define_and_fields_bug/test.m=
l.html</a><br>

All source files are available directly<br>=A0 <a href=3D"http://bluestorm.=
info/camlp4/dev/define_and_fields_bug/list.php">http://bluestorm.info/camlp=
4/dev/define_and_fields_bug/list.php</a><br><br>It&#39;s easy to compare <a=
 href=3D"http://test.ml">test.ml</a> against both the original and the modi=
fied macro parser. After compilation of <a href=3D"http://macro.ml">macro.m=
l</a> (ocamlfind-using compilation command given at the top of the file), u=
se :<br>

=A0 `camlp4of <a href=3D"http://test.ml">test.ml</a>` for processing with t=
he original macro parser<br>=A0 `camlp4o macro.cmo` for processing with the=
 modifier macro parser<br><br>Hope this helps.<br><br>PS : I will eventuall=
y file a ticket on the ocaml bug tracker on this Camlp4MacroParser issue. X=
avier Clerc is quite responsive on these kind of things, and if I (or someo=
ne else; don&#39;t hesitate!) come with a reasonable fix it may get into 3.=
13.<br>

<br><br>2. As a more general answer to your post, you should keep in mind t=
hat the macro facility, as implemented by Camlp4Parsers/Camlp4MacroParser.m=
l , is not intended to be an all-powerful syntax extension facility for OCa=
ml. It is rather a simple example of the power of writing Camlp4 extensions=
, that provides simple substitute-and-replace facilities for expressions in=
 patterns. The particular misbehavior you encountered should be considered =
a bug and it is legitimate to try to fix it, but it doesn&#39;t mean that t=
his macro definition facility ever will suit all your potential needs of cl=
ever metaprogramming. Don&#39;t expect a much finer support for syntactic c=
lasses (&quot;i want this parameter to accept all syntactically valid patte=
rns, and nothing more&quot;) or hygienic macros any time soon.<br>

If you want a powerful syntactical metaprogramming tool, your best bet woul=
d be to use Camlp4 directly. While still limited, it is much more powerful =
that the simple Camlp4MacroParser facility. I&#39;m not sure however that r=
elying heavily on such syntactic facilities is a good idea in the long turn=
; at least, you shouldn&#39;t expect other developers to easily accept to u=
se your non-standard extensions. However, for projects that you develop alo=
ne, or where you have strong control on the compilation chain, camlp4 (or c=
amlp5) can be a nice tool.<br>

<br><br>3. In your specific example, a good compromise would be to use a ha=
shtable indexed by an algebraic datatype.<br><br>=A0 type field =3D Strengt=
h | Agility<br>=A0 <br>=A0 type stats_table =3D (field, int) Hashtbl.t<br>=
=A0 <br>
=A0 let age_state _ _ =3D failwith &quot;not implemented&quot;<br>
=A0 <br>=A0 let _AGE field =3D fun (state, age) -&gt;<br>=A0=A0=A0 let s,a =
=3D age_state (Hashtbl.find state field) (Hashtbl.find age field) in<br>=A0=
=A0=A0 Hashtbl.add state field s;<br>=A0=A0=A0 Hashtbl.add age field a;<br>=
=A0=A0=A0 (state, age)<br>=A0 <br>

=A0 let age_character input =3D function<br>=A0=A0=A0 | n when n &lt; 2 -&g=
t; input<br>=A0=A0=A0 | 2 -&gt; _AGE(Strength) input<br>=A0=A0=A0 | _ -&gt;=
 _AGE(Agility) input<br><br>In my example, an impure data structure is used=
 (Hashtbl) and updated imperatively; if you want to keep a pure update-by-c=
opy operation like the {... with ..} facility of records, you should rather=
 use Map instead of Hashtbl. As thread all state through a state monad, I c=
onsidered this was not an issue.<br>

<br>If you want a more concise syntax for hasthable access (and do not use =
the related syntax extension), you can define infix operators, following an=
 idea from Paolo Donadeo:<br><br>=A0 let (--&gt;) table key =3D Hashtbl.fin=
d table key<br>

=A0 let (&lt;--) table (key, value) =3D Hashtbl.add table key value<br><br>=
The downside of associative data structure instead of records here is that =
force each field to have the same type. You couldn&#39;t have strength be a=
n int and agility be a float. It is fine however in the common situation wh=
ere you can have a uniform operation over field names because they are all =
used with the same type.<br>

<br>Finally, it can be a good idea to determine a confined part of your pro=
gram where you need that indexing flexibility, where you would use that &qu=
ot;stats_table&quot; representation, and convert in and out to a record &qu=
ot;stats&quot; type so that the rest of your program see the more standard =
record type.<br>

In my experience, the less typed but more flexible representations are ofte=
n only useful in the &quot;ends&quot; of your application, typically the pl=
ace where you do input-output; a common case is when constructing the data =
by parsing a configuration file.<br>

<br><br><div class=3D"gmail_quote">On Thu, Feb 17, 2011 at 12:53 AM, Anthon=
y Tavener <span dir=3D"ltr">&lt;<a href=3D"mailto:anthony.tavener@gmail.com=
">anthony.tavener@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"g=
mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
eft:1ex;">

I find that records often result in redundant code... the same operation be=
ing specified for different fields (of the same type). I could use arrays i=
n these cases, but then lose meaningful (to programmers) field names.<br>


<br>I tried using camlp4 (and camlp5) macros to get the effect of passing a=
 field &quot;name&quot; to a &quot;function&quot;. I could get my example t=
o work if I update mutable fields (record.field &lt;- x), but using the fun=
ctional record-update {record with field=3Dx} doesn&#39;t work...<br>


<br><br>--- Simplified mock-up of my current situation (not enough to compi=
le) ---<br><br>(* a record with some fields of the same type... imagine the=
re might be many more fields *)<br>type stats =3D { strength: int; agility:=
 int }<br>


<br>(* macro which doesn&#39;t work... &quot;field&quot; which follows &quo=
t;with&quot; doesn&#39;t get replaced *)<br>DEFINE AGE(field) =3D fun (stat=
e,age) -&gt;<br>=A0 let s,a =3D age_stat state.field age.field in<br>=A0 {s=
tate with field=3Ds}, {age with field=3Da}<br>


<br>(* val f : (stats * stats) -&gt; int -&gt; (stats * stats) *)<br>let ag=
e_character input =3D function<br>=A0 | n when n &lt; 2 -&gt; input<br>=A0 =
| 2 -&gt; AGE(strength) input<br>=A0 | 3 -&gt; AGE(agility) input<br>=A0 | =
_ -&gt; AGE2(strength,agility) input<br>


<br>(* a mock-up of usage... *)<br>let state =3D { strength=3D3; agility=3D=
1 } in<br>let age =3D { strength=3D0; agility=3D0 } in<br>let state&#39;,ag=
e&#39; =3D age_character (state,age) (rand 8) in ...<br><br>---<br><br>Afte=
r processing by camlp4 with macros this is what the first case becomes:<br>


<br>=A0 | 1 -&gt; let s,a =3D age_stat state.strength age.strength in<br>=
=A0=A0=A0=A0=A0=A0=A0=A0 {state with field=3Ds}, {age with field=3Da}<br><b=
r>&quot;field&quot; isn&#39;t replaced with &quot;strength&quot; in the rec=
ord-update. I tried looking at Camlp4MacroParser.ml... but it makes my head=
 swim. It must be doing something much more careful than literal text repla=
cement, but perhaps too careful... or incomplete? Does anyone know how thes=
e macros work? Is this proper behavior for some reason, or an unhandled edg=
e case?<br>


<br>The problem is I don&#39;t want a block of code like this to be repeate=
d 10 times with only a field-name change for each (and 4 field names each t=
ime!). That&#39;s not well readable, prone to error, and harder to maintain=
 properly.<br>


<br>Sometimes I wish I could present an alternative view of the same data, =
such as having an array &quot;view&quot; into part of a record... verified =
to be typesafe by the compiler... and compiled into the same simple offsets=
 in the end. Maybe it&#39;s my asm/C origins which I never seem to escape. =
I mention this in hope that someone says &quot;Oh, that&#39;s exactly what =
you can do... like this!&quot; :)<br>


<br>Thank-you for any help caml-list!<br><br>=A0Tony<br><br>
</blockquote></div><br>

--0016363b8c960d4a71049c8ae9c3--
