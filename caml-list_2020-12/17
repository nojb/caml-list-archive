Return-Path: <florian.angeletti@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 7D72EE020B
	for <caml-list@sympa.inria.fr>; Fri, 18 Dec 2020 09:31:35 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.78,429,1599516000"; 
   d="scan'208";a="483676725"
X-MGA-submission: =?us-ascii?q?MDH1OpXYTWwKWAubs1VYUyQHGCT8VERHspLEhB?=
 =?us-ascii?q?07cBb4TS07FXdt/m5AfM0Bba/Ndm+T1J5nmIsdPtjLkOx+Z6F9x1Fn3x?=
 =?us-ascii?q?dCLGEvYk1NB8gbgPKDYZpQzIy6dIqR1MjJz9LByyTShLdi2GoQIOo4YN?=
 =?us-ascii?q?FaV3Fo2THG9oE8QLUn8bsdpA=3D=3D?=
Received: from zcs-store1.inria.fr ([128.93.142.28])
  by mail2-relais-roc.national.inria.fr with ESMTP; 18 Dec 2020 09:31:35 +0100
Date: Fri, 18 Dec 2020 09:31:35 +0100 (CET)
From: Florian Angeletti <florian.angeletti@inria.fr>
To: caml-list <caml-list@inria.fr>
Message-ID: <695788234.25188042.1608280295194.JavaMail.zimbra@inria.fr>
In-Reply-To: <1918117305.106893276.1606818845424.JavaMail.zimbra@inria.fr>
References: <21bbad4a-a932-0213-3bb4-6ab7e92b054a@inria.fr> <1918117305.106893276.1606818845424.JavaMail.zimbra@inria.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Originating-IP: [92.163.89.136]
X-Mailer: Zimbra 8.8.15_GA_3980 (ZimbraWebClient - FF83 (Linux)/8.8.15_GA_3980)
Thread-Topic: OCaml 4.12.0, third alpha release
Thread-Index: V9S5Gj3X2dFFYFebpy0G3MuP7uhoi5mmP6Pi
Subject: [Caml-list] OCaml 4.12.0, third alpha release

Dear OCaml users,

The release of OCaml 4.12.0 is approaching. We have released a third alpha
version to help fellow hackers join us early in our bug hunting and
opam ecosystem fixing fun.

Beyond the usual bug fixes, this new alpha version contains two small API f=
ixes
for statmemprof and the Unix module. (Keen-eyed readers might notice a brea=
king
change in the change log below but this concerns a corner case of a corner =
case
of the type system that should not affect anyone.)

The base compiler can be installed as an opam switch with the following com=
mands

opam update
opam switch create 4.12.0~alpha3 --repositories=3Ddefault,beta=3Dgit+https:=
//github.com/ocaml/ocaml-beta-repository.git

If you want to tweak the configuration of the compiler, you can pick config=
uration options with

opam update
opam switch create <switch_name> --packages=3Docaml-variants.4.12.0~alpha3+=
options,<option_list> --repositories=3Ddefault,beta=3Dgit+https://github.co=
m/ocaml/ocaml-beta-repository.git

where <option_list> is a comma separated list of ocaml-option-* packages. F=
or
instance, for a flambda and afl enabled switch:

opam switch create 4.12.0~alpha3+flambda+afl --packages=3Docaml-variants.4.=
12.0~alpha3+options,ocaml-option-flambda,ocaml-option-afl --repositories=3D=
default,beta=3Dgit+https://github.com/ocaml/ocaml-beta-repository.git

All available options can be listed with "opam search ocaml-option".

The source code for the alpha is also available at these addresses:

 https://github.com/ocaml/ocaml/archive/4.12.0-alpha3.tar.gz
 https://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0~alpha3.tar.gz

If you want to test this version, it is advised to install the alpha opam r=
epository

https://github.com/kit-ty-kate/opam-alpha-repository

with

opam repo add alpha git://github.com/kit-ty-kate/opam-alpha-repository.git

This alpha repository contains various packages patched with fixes in the
process of being upstreamed. Once the repository installed, these patched
packages will take precedence over the non-patched version.

If you find any bugs, please report them here:
 https://github.com/ocaml/ocaml/issues

Happy hacking,

-- Florian Angeletti for the OCaml team.

Changes from the second alpha:
------------------------------

+ #1128, #7503, #9036, #9722, +#10069: EINTR-based signal handling.
   When a signal arrives, avoid running its OCaml handler in the middle
   of a blocking section. Instead, allow control to return quickly to
   a polling point where the signal handler can safely run, ensuring that

- #9907: Fix native toplevel on native Windows.
  (David Allsopp, review by Florian Angeletti)

- #10056: Memprof: ensure young_trigger is within the bounds of the minor
  heap in caml_memprof_renew_minor_sample (regression from #8684)
  (David Allsopp, review by Guillaume Munch-Maccagnoni and
  Jacques-Henri Jourdan)

- #10062: set ARCH_INT64_PRINTF_FORMAT correctly for both modes of mingw-w6=
4
  (David Allsopp, review by Xavier Leroy)

- #10025: Track custom blocks (e.g. Bigarray) with Statmemprof
  (Stephen Dolan, review by Leo White, Gabriel Scherer and Jacques-Henri
   Jourdan)

- #10070: Fix Float.Array.blit when source and destination arrays coincide.
  (Nicol=E1s Ojeda B=E4r, review by Alain Frisch and Xavier Leroy)

+ #9869, +#10073: Add Unix.SO_REUSEPORT
  (Yishuai Li, review by Xavier Leroy, amended by David Allsopp)

- #9877: manual, warn that multi-index indexing operators should be defined=
 in
  conjunction of single-index ones.
  (Florian Angeletti, review by Hezekiah M. Carty, Gabriel Scherer,
   and Marcello Seri)

- #10046: Link all DLLs with -static-libgcc on mingw32 to prevent dependenc=
y
  on libgcc_s_sjlj-1.dll with mingw-w64 runtime 8.0.0 (previously this was
  only needed for dllunix.dll).
  (David Allsopp, report by Andreas Hauptmann, review by Xavier Leroy)

- #9896: Share the strings representing scopes, fixing some regression
  on .cmo/.cma sizes
  (Alain Frisch and Xavier Clerc, review by Gabriel Scherer)

- #10044: Always report the detected ARCH, MODEL and SYSTEM, even for bytec=
ode-
  only builds (fixes a "configuration regression" from 4.08 for the Windows
  builds)
  (David Allsopp, review by Xavier Leroy)

- #10071: Fix bug in tests/misc/weaklifetime.ml that was reported in #10055
  (Damien Doligez and Gabriel Scherer, report by David Allsopp)

* #8907, #9878: `Typemod.normalize_signature` uses wrong environment
  Does not treat submodules differently when normalizing conjunctive types
  in polymorphic variants.
  This may break code that expose conjunctive types in inferred interface.
  (Jacques Garrigue, report and review by Leo White)

- #9739, #9747: Avoid calling type variables, types that are not variables =
in
  recursive occurence error messages
  (for instance, "Type variable int occurs inside int list")
  (Florian Angeletti, report by Stephen Dolan, review by Arma=EBl Gu=E9neau=
)

- #10048: Fix bug with generalized local opens.
  (Leo White, review by Thomas Refis)

