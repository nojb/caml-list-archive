Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA12411; Wed, 25 Feb 2004 04:30:25 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA13359 for <caml-list@pauillac.inria.fr>; Wed, 25 Feb 2004 04:30:23 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i1P3UMIq018543
	for <caml-list@inria.fr>; Wed, 25 Feb 2004 04:30:23 +0100
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id MAA08571;
	Wed, 25 Feb 2004 12:30:14 +0900 (JST)
To: ijtrotts@ucdavis.edu
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] [ANNOUNCE] ECaml 0.3 : a simple object system
In-Reply-To: <20040224141811.GA4398@manzanita>
References: <20040224141811.GA4398@manzanita>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20040225123014F.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 25 Feb 2004 12:30:14 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 60
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 issac:01 trotts:01 ijtrotts:01 camlp:01 3.07:01 2004:99 val:01 unions:01 val:01 runtime:01 koji:01 kagawa:01 jacques:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Issac Trotts" <ijtrotts@ucdavis.edu>

> ECaml is a simple object system for OCaml, based on polymorphic variants
> and a Camlp4 syntax extension.
> 
> ECaml can
>   o create objects (entities) of anonymous class
>   o create new classes within functions or other classes.
>   o very easily define methods having polymorphic arguments

Interesting.
I shall have a look at your encoding.

You may also be interested by having a look at the current CVS version
of objective caml, because it actually has all the features you
describe. (This doesn't reduce your merit.)
Just a one line example:
        Objective Caml version 3.07+13 (2004-01-04)

# let o = object method id x = x end;;
val o : < id : 'a -> 'a > = <obj>

And if you like experiments, you may even try the objvariants branch.
Just get the CVS version, and then do:
  cvs update -r objvariants typing
It allows you to use unions of object types.
This is a quick hack (2 hours coding), and there may be bugs, but it
can be funny. Here is an example session.

# let f (x : [> ]) = x#m 3;;
val f : [>  as < m : int -> 'a; .. > ] -> 'a = <fun>
# let o = object method m x = x+2 end;;
val o : < m : int -> int > = <obj>
# f (`A o);;
- : int = 5
# let l = [`A o; `B(object method m x = x -2 method y = 3 end)];;
val l :
  [> `A of < m : int -> int > | `B of < m : int -> int; y : int > ] list =
  [`A <obj>; `B <obj>]
# List.map f l;;
- : int list = [5; 1]
# let g = function `A x -> x#m 3 | `B x -> x#y;;
val g : [< `A of < m : int -> 'a; .. > | `B of < y : 'a; .. > ] -> 'a = <fun>
# List.map g l;;
- : int list = [5; 3]

The type annotation (x : [> ]) is necessary: # is actually overloaded
on objects (the default) and variants of objects. You can view the
variant tag here a bit like a runtime type: you can pattern-match on
it when needed, but you can also call a method common to all cases
without looking at the tag.

I got the idea in a paper (in Japanese) by Hideshi Nagira and Atsushi
Igarashi, but actually this trick was first suggested to me by Koji
Kagawa about 5 years ago.

(Disclaimer: this kind of experiment is for fun, don't expect it in
the main branch anytime soon or ever.)

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

