Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA15482; Mon, 9 Feb 2004 08:24:25 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA17399 for <caml-list@pauillac.inria.fr>; Mon, 9 Feb 2004 08:24:24 +0100 (MET)
Received: from mail-in-03.arcor-online.net (mail-in-03.arcor-online.net [151.189.21.43])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id i197OOv25188
	for <caml-list@inria.fr>; Mon, 9 Feb 2004 08:24:24 +0100 (MET)
Received: from diebuntekuh.de (dialin-212-144-208-063.arcor-ip.net [212.144.208.63])
	by mail-in-03.arcor-online.net (Postfix) with ESMTP id 2A8517E1A67
	for <caml-list@inria.fr>; Mon,  9 Feb 2004 08:24:21 +0100 (CET)
Received: by diebuntekuh.de (Postfix, from userid 500)
	id 60079608EC0; Mon,  9 Feb 2004 08:29:03 +0100 (CET)
To: OCaml List <caml-list@inria.fr>
Subject: [Caml-list] Announce: schoca-0.2.0
From: Christoph Bauer <c_bauer@informatik.uni-kl.de>
Date: Mon, 09 Feb 2004 08:29:03 +0100
Message-ID: <m3wu6wn22o.fsf@diebuntekuh.de>
User-Agent: Gnus/5.1002 (Gnus v5.10.2) Emacs/21.3 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; bauer:01 bauer:01 sourceforge:01 retry:99 factorial:01 retry:99 factorial:01 usr:01 foreach:01 expr:01 bin:01 ocaml:01 ocaml:01 patch:02 binary:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1570
Lines: 56

Hi,

there is a new release of schoca at
http://sourceforge.net/project/showfiles.php?group_id=2598

Schoca --- Scheme for OCaml
---------------------------

Schoca is an implementation of the Scheme language. The primary
purpose of Schoca is the use as an embedded extension language in
OCaml applications (e.g. the ibgsclient).

Changes for 0.2.0
   
   o Fix for call/cc. The implementation in schoca 0.1.0
     made use of a simple try/catch-block.

     Franklin Chen wrote this demo to show a general problem
     with this approach:

     (define retry #f)

     (define factorial
       (lambda (x)
          (if (= x 0)
            (call/cc (lambda (k) (set! retry k) 1))
            (* x (factorial (- x 1))))))

     (factorial 4)
     (display (retry 2))
     (newline)
   
   o apply Philippe Audebaud's patch (typos/make clean)
   o Fix typos in read_ini_file.ml (reported by Benjamin Geer)
   o you can now write schoca-Scripts like

       #!/usr/bin/schoca

      (display "Hello World!\n")
      (newline)
     
     This was suggested by Benjamin Geer.
  

Christoph Bauer


-- 
proc self {} {foreach c [split [info body self] ""] d {14 -7 0 0 4 -67 4 73 11
69 24 -83 -15 6 -4 -84 78 20 11 -78 -1 -1 79 19 -8 4} { binary scan $c c c
if {[catch {append r [format %c [expr $c+$d]]}]} {return $r};}};puts [self]

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

