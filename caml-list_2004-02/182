Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA14368; Thu, 26 Feb 2004 05:40:05 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA12698 for <caml-list@pauillac.inria.fr>; Thu, 26 Feb 2004 05:40:04 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i1Q4e4Iq002538
	for <caml-list@inria.fr>; Thu, 26 Feb 2004 05:40:05 +0100
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id NAA29819;
	Thu, 26 Feb 2004 13:39:56 +0900 (JST)
To: ecc@cmu.edu
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] References to polymorphic variants
In-Reply-To: <20040226015355.GC4099@localhost>
References: <20040225230719.GA1148@manzanita>
	<20040226014937.GB4099@localhost>
	<20040226015355.GC4099@localhost>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20040226133956V.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 26 Feb 2004 13:39:56 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 29
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 ocamlc:01 foo:01 val:01 bug:01 bug:01 mli:01 foo:01 mli:01 val:01 checker:01 jacques:01 compiler:01 compiler:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Eric C. Cooper" <ecc@cmu.edu>

> Please ignore my last post.  I thought that since
> 
> > $ ocamlc -i -c foo.ml
> > val x : _[> `Apple | `Cheese | `Pair of int * string ] option ref
> 
> didn't complain, the compiler had accepted it, but it does complain when I
> omit the -i. (Is this a bug?)

It's not a bug: -i does the type checking, but does not actually
compile.
It's useful, because you can use this information to write your .mli.
In the above case, you would have to write in foo.mli:
  val x : [ `Apple | `Cheese | `Pair of int * string ] option ref
This makes sure your reference is no longer polymorphic, and makes the
compiler happy.

To go back to the original question, a polymorphic variant is just a
more refined way to the described the possible values of a sum type.
This is not a universal type, like variants in Visual Basic.
As the above example shows, you can still use polymorphic variants to
have the type checker compute the contents of a reference inside a
compilation unit, but this will not work across compilation units.
If you need a universal type, you can use [exn], the type of
exceptions, as exceptions defined in different modules can be
distinguished (whereas polymorphic variant tags cannot).

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

