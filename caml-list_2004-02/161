Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA12210; Tue, 24 Feb 2004 15:18:33 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA12482 for <caml-list@pauillac.inria.fr>; Tue, 24 Feb 2004 15:18:30 +0100 (MET)
Received: from host1.stonesfair.com (host1.stonesfair.com [208.184.191.145])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i1OEITIq008948
	for <caml-list@inria.fr>; Tue, 24 Feb 2004 15:18:30 +0100
Received: from manzanita (63-217-154-71.greystoneapts.com [63.217.154.71])
	by host1.stonesfair.com (8.12.8/8.12.8) with SMTP id i1OE8mdP005496
	for <caml-list@inria.fr>; Tue, 24 Feb 2004 06:08:48 -0800
Received: by manzanita (sSMTP sendmail emulation); Tue, 24 Feb 2004 06:18:11 -0800
From: "Issac Trotts" <ijtrotts@ucdavis.edu>
Date: Tue, 24 Feb 2004 06:18:11 -0800
To: caml-list@inria.fr
Subject: [Caml-list] [ANNOUNCE] ECaml 0.3 : a simple object system
Message-ID: <20040224141811.GA4398@manzanita>
Mail-Followup-To: ijtrotts@ucdavis.edu, caml-list@inria.fr
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.4i
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; issac:01 trotts:01 ijtrotts:01 camlp:01 bug:01 invocation:01 issac:01 trotts:01 redwood:99 invoke:01 ocaml:01 ocaml:01 variants:01 polymorphic:01 polymorphic:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

ECaml is a simple object system for OCaml, based on polymorphic variants
and a Camlp4 syntax extension.

ECaml can
  o create objects (entities) of anonymous class
  o create new classes within functions or other classes.
  o very easily define methods having polymorphic arguments

NEWS:
  o Removed a bug resulting from the use of colon (:) as the method
    invocation operator.  Of course this was conflicting with the type
    casting syntax, so now I am using the operator '#'.  Users can still
    access methods on standard OCaml objects using the word "invoke" in
    place of '#'.
  o Added a way to concisely describe entity types, for module signatures.

-- 
Issac Trotts
http://redwood.ucdavis.edu/~issac

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

