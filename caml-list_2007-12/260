Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id CC2FCBC69
	for <caml-list@yquem.inria.fr>; Sat, 29 Dec 2007 01:36:46 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAHoldUfUnw7Xi2dsb2JhbACCNY1dAQEBCAQGBwganDc
X-IronPort-AV: E=Sophos;i="4.24,218,1196636400"; 
   d="scan'208";a="5589686"
Received: from fhw-relay07.plus.net ([212.159.14.215])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 29 Dec 2007 01:36:46 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by fhw-relay07.plus.net with esmtp (Exim) id 1J8Pgz-0005Y2-TC
	for caml-list@yquem.inria.fr; Sat, 29 Dec 2007 00:36:46 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] "OCaml gives you only monomorphic methods in classes."
Date: Sat, 29 Dec 2007 00:27:26 +0000
User-Agent: KMail/1.9.7
References: <200712282337.23952.jon@ffconsultancy.com> <4F8745F4-A1C4-4896-BC1E-0C10E82BFB02@mac.com>
In-Reply-To: <4F8745F4-A1C4-4896-BC1E-0C10E82BFB02@mac.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200712290027.26471.jon@ffconsultancy.com>
X-Spam: no; 0.00; ocaml:01 overloading:01 inference:01 foo:01 foo:01 statically:01 frog:98 wrote:01 caml-list:01 monomorphic:01 int:01 int:01 generics:01 inferred:02 match:02 

On Friday 28 December 2007 23:55:32 Gordon Henriksen wrote:
> Jon, consider the case of Java or C++ method (and function)
> overloading. This form of static dispatch is quite distinct from
> virtual method dispatch, and is indeed at odds with type inference.

I see. Still, the solution seems easy enough. Just treat the overloaded types 
as part of the function name:

  foo(int n)
  foo(float x)
  foo(string s)

becomes:

  foo_int n
  foo_float x
  foo_string s

When you come across:

  foo(a)

you look up the statically inferred type of "a" and just bail if it fails to 
match any of the overloads.

Generics are left alone:

  foo<T>(T x)

becomes:

  foo (x : 'T)

Would that work?

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

