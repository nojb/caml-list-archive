Return-Path: <keiko@kurims.kyoto-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 31BA4BC69
	for <caml-list@yquem.inria.fr>; Fri, 28 Dec 2007 14:42:53 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAPeLdEeCNhAB/2dsb2JhbACtBg
X-IronPort-AV: E=Sophos;i="4.24,216,1196636400"; 
   d="scan'208";a="7295965"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 28 Dec 2007 14:42:51 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id lBSDglV6003444;
	Fri, 28 Dec 2007 22:42:47 +0900 (JST)
Date: Fri, 28 Dec 2007 22:42:46 +0900 (JST)
Message-Id: <20071228.224246.68533044.keiko@kurims.kyoto-u.ac.jp>
To: zoltan.s.mark@dravanet.hu
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Type visibility limitation in recursive modules
From: Keiko Nakata <keiko@kurims.kyoto-u.ac.jp>
In-Reply-To: <4774F02F.4070506@dravanet.hu>
References: <47743194.1080801@dravanet.hu>
	<20071228.190210.68534327.keiko@kurims.kyoto-u.ac.jp>
	<4774F02F.4070506@dravanet.hu>
X-Mailer: Mew version 4.2 on Emacs 20.7 / Mule 4.1 (AOI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; recursive:01 checker:01 sig:01 val:01 struct:01 checker:01 struct:01 sig:01 val:01 abbreviation:01 abstraction:01 escapes:01 rec:01 caml-list:01 int:01 

> Unless you are talking about some other kind of hack, in which case I'd 
> be very grateful to hear more details.

Probably I was talking about something else.
(Please bear in mind that I've got this way of understanding the type checker 
via hacking the implementation; so it is likely that my understanding 
is incorrect.)

Let me consider:

module rec M : sig type t val x: t end = struct type t = int let x = M.x end

The type checker type checks the body of M, 
i.e., struct type t = int let x = M.x end, while the type environment records
M's signature as "sig type t val x: t end". But in fact one could perhaps 
enrich the signature to "sig type t = t val x: t end", 
where the right-hand side of the abbreviation t = t is the type t 
in the structure, not in the signature. 
As you may know, the type checker can distinguish the two types named t, 
since they internally carry different identities.
Since the type environments used to type check the body of M 
and the rest of the program are distinct, there is no possibility that 
type abstraction can be broken. 

This is not beautiful, since the type t in the right side of "t = t" 
escapes from its scope. 

I should note that this is not my original idea :-)

Thank you for the program. I will take it back home and look at it 
during the coming new year holidays.

Best,
Keiko 

