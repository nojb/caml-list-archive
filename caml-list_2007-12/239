Return-Path: <mle+ocaml@mega-nerd.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 6321DBC69
	for <caml-list@yquem.inria.fr>; Mon, 24 Dec 2007 18:19:30 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAFx5b0fAXQImh2dsb2JhbACQDgEBAQgKKZgIBA
X-IronPort-AV: E=Sophos;i="4.24,204,1196636400"; 
   d="scan'208";a="6004335"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 24 Dec 2007 18:19:30 +0100
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id lBOHJSCm028526
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Mon, 24 Dec 2007 18:19:29 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAId5b0fa1uFinmdsb2JhbACQDgEBAQEHBAYHIpgJBA
X-IronPort-AV: E=Sophos;i="4.24,204,1196636400"; 
   d="scan'208";a="7214351"
Received: from smtp.syd.people.net.au ([218.214.225.98])
  by mail3-smtp-sop.national.inria.fr with SMTP; 24 Dec 2007 18:19:12 +0100
Received: (qmail 15834 invoked from network); 24 Dec 2007 17:19:30 -0000
Received: from unknown (HELO hendrix.mega-nerd.net) (218.214.64.136)
  by smtp.syd.people.net.au with SMTP; 24 Dec 2007 17:19:30 -0000
Received: from hendrix (hendrix [192.168.200.99])
	by hendrix.mega-nerd.net (Postfix) with SMTP id A135CAB3F6
	for <caml-list@inria.fr>; Tue, 25 Dec 2007 04:19:07 +1100 (EST)
Date: Tue, 25 Dec 2007 04:19:06 +1100
From: Erik de Castro Lopo <mle+ocaml@mega-nerd.com>
To: caml-list@inria.fr
Subject: Fw:
Message-Id: <20071225041906.83e44ca2.mle+ocaml@mega-nerd.com>
Reply-To: caml-list@inria.fr
Organization: Erik Conspiracy Secret Labs
X-Mailer: Sylpheed 2.4.5 (GTK+ 2.12.0; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 476FEA20.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 compiler:01 ocamllex:01 ocaml:01 ocamllex:01 ocamlyacc:01 lexing:01 lexer:01 lexer:01 lexing:01 ocamlyacc:01 backtracking:01 parser:01 lexbuf:01 glebe:01 



Begin forwarded message:

Date: 24 Aug 2004 19:21:21 +1000
From: skaller <skaller@users.sourceforge.net>
To: SooHyoung Oh <shoh@compiler.kaist.ac.kr>
Cc: caml-list <caml-list@pauillac.inria.fr>
Subject: Re: [Caml-list] (Release) ocamllex tutorial (ver 0.1)


On Tue, 2004-08-24 at 18:07, SooHyoung Oh wrote:

> Any comment will be appreciated.

It looks very good!

> This tutorial is work-in-progress. The latest version can be found at
> http://pllab.kaist.ac.kr/~shoh/ocaml/ocamllex_ocamlyacc/ocamllex-tutorial/index.html.

First -- you haven't explained how to use the new argument
feature. A good example would be to take the non-reentrant
line counting example and show how to make it re-entrant
by passing an object containing the counters.

To justify not using a global variable, you can extend
the example to allow for recursively counting #include
files (or something similar :)

The second thing I'd like to see here is an example
showing the common technique of lexing an identifier
and then using a lookup table to see if it is keyword:
this is done because (a) it is possible and (b) it
simplifies the lexer which otherwise needs a huge
number of states.

The third thing I'd like to see is a more functional example
where the lexer isn't just executing code for side effects.
All your examples have the lexer tail calling itself: but
most real lexing applications do not do this, instead
you call the lexer repeatedly from a driver loop.

In particular Ocamlyacc calls Ocamllex to lex one
token at a time.

Finally -- since your tutorial is Ocaml specific,
I'd like to see some information on lexbufs.
Are they functional? Can I write a backtracking
functional parser that just 'goes backwards'
in the input stream using a lexbuf to allow
re-lexing some input? 

How do i cope with the fact
that lexbufs think they're reading named
files with lines in them .. what if this isn't so?

This is actually a design fault which is unfortunately
propagated to Ocamlyacc.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners





Begin forwarded message:

Date: Tue, 24 Aug 2004 16:56:17 +0200
From: Nicolas Rougnon-Glasson <nicolas.rougnon-glasson@libertysurf.fr>
To: caml-list <caml-list@pauillac.inria.fr>
Subject: Re: [Caml-list] (Release) ocamllex tutorial (ver 0.1)


another interesting example is the use of several lexer functions (like 
in the ocaml lexer itself...), to analyse properly string literals and 
nested comments.

skaller wrote:

>On Tue, 2004-08-24 at 18:07, SooHyoung Oh wrote:
>
>  
>
>>Any comment will be appreciated.
>>    
>>
>
>It looks very good!
>
>  
>
>>This tutorial is work-in-progress. The latest version can be found at
>>http://pllab.kaist.ac.kr/~shoh/ocaml/ocamllex_ocamlyacc/ocamllex-tutorial/index.html.
>>    
>>
>
>First -- you haven't explained how to use the new argument
>feature. A good example would be to take the non-reentrant
>line counting example and show how to make it re-entrant
>by passing an object containing the counters.
>
>To justify not using a global variable, you can extend
>the example to allow for recursively counting #include
>files (or something similar :)
>
>The second thing I'd like to see here is an example
>showing the common technique of lexing an identifier
>and then using a lookup table to see if it is keyword:
>this is done because (a) it is possible and (b) it
>simplifies the lexer which otherwise needs a huge
>number of states.
>
>The third thing I'd like to see is a more functional example
>where the lexer isn't just executing code for side effects.
>All your examples have the lexer tail calling itself: but
>most real lexing applications do not do this, instead
>you call the lexer repeatedly from a driver loop.
>
>In particular Ocamlyacc calls Ocamllex to lex one
>token at a time.
>
>Finally -- since your tutorial is Ocaml specific,
>I'd like to see some information on lexbufs.
>Are they functional? Can I write a backtracking
>functional parser that just 'goes backwards'
>in the input stream using a lexbuf to allow
>re-lexing some input? 
>
>How do i cope with the fact
>that lexbufs think they're reading named
>files with lines in them .. what if this isn't so?
>
>This is actually a design fault which is unfortunately
>propagated to Ocamlyacc.
>
>  
>


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners



-- 
-----------------------------------------------------------------
Erik de Castro Lopo
-----------------------------------------------------------------
Think of XML as Lisp for COBOL programmers.
	-- Tony-A (some guy on /.)

