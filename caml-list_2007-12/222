Return-Path: <zoltan.s.mark@dravanet.hu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.6 required=5.0 tests=AWL,DNS_FROM_RFC_POST,
	HTML_10_20,HTML_MESSAGE autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 14CF2BC69
	for <caml-list@yquem.inria.fr>; Sun, 23 Dec 2007 16:20:06 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAKoLbkfUKEUHfGdsb2JhbACBV4EYjRsBAQkKKYEUlzA
X-IronPort-AV: E=Sophos;i="4.24,201,1196636400"; 
   d="scan'208,217";a="5982206"
Received: from mail.dravanet.hu (HELO arwen.dravanet.hu) ([212.40.69.7])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 23 Dec 2007 16:20:05 +0100
Received: from arwen-vbmailshield (localhost.localdomain [127.0.0.1])
	by arwen-vbmailshield (Postfix) with SMTP id 01286B23
	for <caml-list@yquem.inria.fr>; Sun, 23 Dec 2007 16:20:04 +0100 (CET)
Received: from arwen.dravanet.hu ([127.0.0.1])
	by arwen ([192.168.69.23])
	with SMTP (gateway) id A02B43DBA33; Sun, 23 Dec 2007 16:20:04 +0100
Received: from [127.0.0.1] (unknown [212.40.85.9])
	by arwen.dravanet.hu (Postfix) with ESMTP id 91D0EB23
	for <caml-list@yquem.inria.fr>; Sun, 23 Dec 2007 16:20:04 +0100 (CET)
Message-ID: <476E7CA1.6000501@dravanet.hu>
Date: Sun, 23 Dec 2007 16:20:01 +0100
From: =?ISO-8859-1?Q?=22M=E1rk_S=2E_Zolt=E1n=22?= <zoltan.s.mark@dravanet.hu>
User-Agent: Thunderbird 2.0.0.9 (Windows/20071031)
MIME-Version: 1.0
To: Caml Mailing List <caml-list@yquem.inria.fr>
Subject: Re: Re: [Caml-list] Re: MinGW port w/o Cygwin?
References: <200712200930.29585.ober.14@osu.edu>	<87sl1xgzkp.fsf@pps.jussieu.fr> <200712201518.20487.ober.14@osu.edu> <90823c940712210606h24f7617eh4e20745cd3e4782a@mail.gmail.com>
In-Reply-To: <90823c940712210606h24f7617eh4e20745cd3e4782a@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------060507090108090502050600"
X-Antivirus: avast! (VPS 071215-0, 12/15/2007), Outbound message
X-Antivirus-Status: Clean
X-VBMailShield: version 1.57.6 at arwen - template: default
X-Spam: no; 0.00; mingw:01 cygwin:01 cygwin:01 ocaml:01 mingw:01 ocaml:01 clashes:01 -mno-cygwin:01 compiler:01 tarballs:01 -mno-cygwin:01 clashes:01 variants:01 ccomp:01 camlp:01 

This is a multi-part message in MIME format.
--------------060507090108090502050600
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Dmitry Bely wrote:
> On Dec 20, 2007 11:18 PM, Kuba Ober <ober.14@osu.edu> wrote:
>
>   
>> Tried it and sure enough - it works!!! (On an XP machine that never saw Cygwin
>> either).
>>
>> That's *extremely* good news to me.
>>
>> I guess that Ocaml maintainers should just drop that Cygwin requirement, and
>> tweak their build process to work "out of the box" with MSYS/MinGW.
>>     
>
> If MSYS become mandatory I strongly disagree. Cygwin is a common
> requirement for building any Ocaml distribution on Windows (even if
> you use Microsoft Visual Studio). I see absolutely no problem to
> install and use it. Why I should bother to install another Cygwin fork
> (MSYS) and handle name clashes etc.?
>
> - Dmitry Bely
>
>   

I am using my clandestine MSys + MinGW OCaml since about 3.0, and I have 
originally switched to MSys because the configuration scripts of a 
number of other apps and libraries did not handle the -mno-cygwin flag, 
or any other flag for that matter: the 'supply extra compiler flags' 
feature seemed to be thoroughly broken in all configure scripts, I 
wonder if anyone ever uses it. When it comes to building apps from 
tarballs, the best bet is to use Cygwin alone, if you can abide by 
having to carry cygwin1.dll around - I cannot. Next best is MSys, and 
the worst is Cygwin with -mno-cygwin, supported by very few apps. On the 
positive side, I have kept MSys and Cygwin side-by-side for years and 
never had any name clashes. If you want two variants of the same app, 
e.g. a Cygwin ocaml (for debugging, which does not work in the MinGW 
variant) and an MSys + MinGW ocaml (for release builds without a need 
for cygwin1.dll), AND you want the same home directory for both systems, 
THEN you need to make sure your .profile or .bashrc 'sed-its' the path 
to point to the correct app depending on the system being fired up; I 
did it and never ran into name clashes or anything similar.

I don't think the MinGW-over-Cygwin variant must actually be dropped, 
since a pure MSys + MinGW version would be relatively easy to maintain 
alongside it. As an illustration, pretty much all I ever needed to do is 
comment out a code snippet in ccomp.ml (to prevent a responsefile from 
being even used, see below) and then build ocaml on MSys according to 
the same procedure one would use for MinGW over Cygwin. With v3.10 this 
works like a charm (some much earlier versions required extra setup 
because the camlp4 Win32 build used to be slightly aberrant).

====================================

MSys howto:  edit utils\ccomp.ml by commenting-out the following code:

let quote_files lst =
  let s =
    String.concat " "
      (List.map (fun f -> if f = "" then f else Filename.quote f) lst) in
  (*if Sys.os_type = "Win32" && String.length s >= 256
  then build_diversion lst
  else*) s

Copy config\Makefile.mingw to config\Makefile and edit it to set your 
preferences (e.g. I always disable shared libs - maybe they wouldn't 
work with this method at all, I don't know). Copy config\m-nt.h to 
config\m.h and config\s-nt.h to config\s.h. I also usually copy the main 
Makefile.nt onto Makefile, such that I don't have to remember to type -f 
Makefile.nt on the make command line. Works without a hitch.


--------------060507090108090502050600
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
Dmitry Bely wrote:
<blockquote
 cite="mid:%3C90823c940712210606h24f7617eh4e20745cd3e4782a@mail.gmail.com%3E"
 type="cite">
  <pre wrap="">On Dec 20, 2007 11:18 PM, Kuba Ober <a class="moz-txt-link-rfc2396E" href="mailto:ober.14@osu.edu">&lt;ober.14@osu.edu&gt;</a> wrote:

  </pre>
  <blockquote type="cite">
    <pre wrap="">Tried it and sure enough - it works!!! (On an XP machine that never saw Cygwin
either).

That's *extremely* good news to me.

I guess that Ocaml maintainers should just drop that Cygwin requirement, and
tweak their build process to work "out of the box" with MSYS/MinGW.
    </pre>
  </blockquote>
  <pre wrap=""><!---->
If MSYS become mandatory I strongly disagree. Cygwin is a common
requirement for building any Ocaml distribution on Windows (even if
you use Microsoft Visual Studio). I see absolutely no problem to
install and use it. Why I should bother to install another Cygwin fork
(MSYS) and handle name clashes etc.?

- Dmitry Bely

  </pre>
</blockquote>
<br>
I am using my clandestine MSys + MinGW OCaml since about 3.0, and I
have originally switched to MSys because the configuration scripts of a
number of other apps and libraries did not handle the -mno-cygwin flag,
or any other flag for that matter: the 'supply extra compiler flags'
feature seemed to be thoroughly broken in all configure scripts, I
wonder if anyone ever uses it. When it comes to building apps from
tarballs, the best bet is to use Cygwin alone, if you can abide by
having to carry cygwin1.dll around - I cannot. Next best is MSys, and
the worst is Cygwin with -mno-cygwin, supported by very few apps. On
the positive side, I have kept MSys and Cygwin side-by-side for years
and never had any name clashes. If you want two variants of the same
app, e.g. a Cygwin ocaml (for debugging, which does not work in the
MinGW variant) and an MSys + MinGW ocaml (for release builds without a
need for cygwin1.dll), AND you want the same home directory for both
systems, THEN you need to make sure your .profile or .bashrc 'sed-its'
the path to point to the correct app depending on the system being
fired up; I did it and never ran into name clashes or anything similar.<br>
<br>
I don't think the MinGW-over-Cygwin variant must actually be dropped,
since a pure MSys + MinGW version would be relatively easy to maintain
alongside it. As an illustration, pretty much all I ever needed to do
is comment out a code snippet in ccomp.ml (to prevent a responsefile
from being even used, see below) and then build ocaml on MSys according
to the same procedure one would use for MinGW over Cygwin. With v3.10
this works like a charm (some much earlier versions required extra
setup because the camlp4 Win32 build used to be slightly aberrant).<br>
<br>
====================================<br>
<br>
MSys howto:&nbsp; edit utils\ccomp.ml by commenting-out the following code:<br>
<br>
let quote_files lst =<br>
&nbsp; let s =<br>
&nbsp;&nbsp;&nbsp; String.concat " "<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (List.map (fun f -&gt; if f = "" then f else Filename.quote f)
lst) in<br>
&nbsp; (*if Sys.os_type = "Win32" &amp;&amp; String.length s &gt;= 256<br>
&nbsp; then build_diversion lst<br>
&nbsp; else*) s <br>
<br>
Copy config\Makefile.mingw to config\Makefile and edit it to set your
preferences (e.g. I always disable shared libs - maybe they wouldn't
work with this method at all, I don't know). Copy config\m-nt.h to
config\m.h and config\s-nt.h to config\s.h. I also usually copy the
main Makefile.nt onto Makefile, such that I don't have to remember to
type -f Makefile.nt on the make command line. Works without a hitch.<br>
<br>
</body>
</html>

--------------060507090108090502050600--

