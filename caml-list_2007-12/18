Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 49A98BC69
	for <caml-list@yquem.inria.fr>; Tue,  4 Dec 2007 15:00:06 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAC/sVEeCNhAB/2dsb2JhbAA
X-IronPort-AV: E=Sophos;i="4.23,248,1194217200"; 
   d="scan'208";a="6462663"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 04 Dec 2007 15:00:06 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id lB4DvTJ8017812;
	Tue, 4 Dec 2007 22:57:29 +0900 (JST)
Date: Tue, 04 Dec 2007 22:57:12 +0900 (JST)
Message-Id: <20071204.225712.186423247.garrigue@math.nagoya-u.ac.jp>
To: steph@glondu.net
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Union of polymorphic variants...
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <47554A47.0@glondu.net>
References: <47554A47.0@glondu.net>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; variants:01 bool:01 bool:01 variants:01 ocamlduce:01 steph:98 polymorphic:01 polymorphic:01 char:01 char:01 caml-list:01 constructor:01 variant:02 parameter:02 declaration:02 

From: Stephane Glondu <steph@glondu.net>
> Why isn't possible to do the following?
> 
> type b = [`A of [`B of bool]]
> type c = [`A of [`C of char]]
> type a = [b|c]
> 
> I expect the last declaration to be equivalent to:
> 
> type a = [`A of [`B of bool | `C of char]]

Because union of polymorphic variant is flat.
So the above requires the parameter of `A to be of type both
[`B of bool] and [`C of char].

The reason is that dispatch only looks at the head constructor:

let f = function
  | #b as x -> fb x
  | #c as x -> fc x

is actually

let f = function
  | `A _ as x -> fb x
  | `A _ as x -> fc x

which only types if both parameters have the same type.

Polymorphic variants are _not_ XML types.
Use ocamlduce for that :-)

    Jacques

