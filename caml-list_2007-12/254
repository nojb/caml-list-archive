Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id D9275BC69
	for <caml-list@yquem.inria.fr>; Fri, 28 Dec 2007 05:19:10 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aq4HAD4IdEfUnw7WeGdsb2JhbACCNY1YAQoEBg8anHs
X-IronPort-AV: E=Sophos;i="4.24,213,1196636400"; 
   d="scan'208";a="6092720"
Received: from ptb-relay03.plus.net ([212.159.14.214])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 28 Dec 2007 05:19:04 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1J86gZ-0002TV-FD
	for caml-list@yquem.inria.fr; Fri, 28 Dec 2007 04:19:03 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Another try/finally idea
Date: Fri, 28 Dec 2007 04:09:34 +0000
User-Agent: KMail/1.9.7
References: <47747393.7040800@ramenlabs.com>
In-Reply-To: <47747393.7040800@ramenlabs.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200712280409.35078.jon@ffconsultancy.com>
X-Spam: no; 0.00; hof:01 emacs:01 emacs:01 camlp:01 notation:01 frog:98 wrote:01 readable:01 homogeneous:01 exception:01 caml-list:01 functions:01 benjamin:01 bin:01 bin:01 

On Friday 28 December 2007 03:54:59 Dave Benjamin wrote:
> Here's another way of writing a HOF to do try/finally-like behavior to
> handle the allocation and disposal of resources. It's pretty similar to
> the one in Extlib, but it's designed to work well with the existing
> library functions:
>
> let using resource finalize process =
>    try
>      let result = process resource in
>      finalize resource;
>      result
>    with e ->
>      finalize resource;
>      raise e
>
> With this, I can print the first line of my .emacs file in one line:
>
> using (open_in ".emacs") close_in input_line
>
> Common cases can be wrapped easily:
>
> let with_open_in filename = using (open_in filename) close_in
> let with_open_in_bin filename = using (open_in_bin filename) close_in
> let with_open_out filename = using (open_out filename) close_out
> let with_open_out_bin filename = using (open_out_bin filename) close_out
>
> Now, getting the first line is even simpler (and more readable):
>
> with_open_in ".emacs" input_line

Yes, that is essentially what I use except I discard any exception thrown by 
your second call to "finalize".

However, perhaps an even better solution would be a camlp4 macro and emacs 
support for F#'s "use" notation:

  use ch = open_in ".emacs" in
  input_line ch

This closes at the end of scope. Of course, we'd need some kind of homogeneous 
disposal and the easiest solution would be to copy .NET again by wrapping 
resources in an object that has a dispose method.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

