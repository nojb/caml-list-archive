Return-Path: <loup.vaillant@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id C124ABC69
	for <caml-list@yquem.inria.fr>; Mon, 24 Dec 2007 16:59:18 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAE5mb0fRVYT2i2dsb2JhbACQDgEBAQgEBAkbBZQ4g04
X-IronPort-AV: E=Sophos;i="4.24,204,1196636400"; 
   d="scan'208";a="20666097"
Received: from an-out-0708.google.com ([209.85.132.246])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 24 Dec 2007 16:59:18 +0100
Received: by an-out-0708.google.com with SMTP id b15so411722ana.102
        for <caml-list@yquem.inria.fr>; Mon, 24 Dec 2007 07:59:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        bh=pGBIwdbvguFBTgAmM1GBGOh2yPk7mPRn2p+zi38t2Yw=;
        b=hAYskU1m3aEJuTNpoJdeUvhbvL+3R3YZlnkagGFOKFVoyM1Ul5QoFwFU8cY2HcI3JwZ47SswQg+Zr/RTM9vgVi+OkGlrEI+ndZfGCZkaQMpbzsSr2OsxEWcWT9OhwJ+i76x0eHMZ9d6UaCZbonxV0zptegJzQn1WTtp5goDJM5Y=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=SEYNzJfgReAEZgDAIR4WN9pECfFqWoDY9GfME4eGctd4O5FxYl6h7HJ5rR2KAk3fPzzn3ihWhm7+pLcEFtjlVd6k4GKFYo3PODeSMYnTQTjUZt3hj15mFcFUpgK3iBhX9NYjW6qn68n63+u22Aawouhrqak0lPpjBER2NxUe0Yk=
Received: by 10.100.201.16 with SMTP id y16mr9766535anf.83.1198511957141;
        Mon, 24 Dec 2007 07:59:17 -0800 (PST)
Received: by 10.101.1.17 with HTTP; Mon, 24 Dec 2007 07:59:17 -0800 (PST)
Message-ID: <6f9f8f4a0712240759w6e1715aeg5a7bf9d642f9a737@mail.gmail.com>
Date: Mon, 24 Dec 2007 16:59:17 +0100
From: "Loup Vaillant" <loup.vaillant@gmail.com>
To: "Caml mailing list" <caml-list@yquem.inria.fr>
Subject: Lost Polymorphism. Can we force the compiler not to?
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Spam: no; 0.00; polymorphism:01 compiler:01 polymorphism:01 transforming:01 foo:01 baz:01 foo:01 baz:01 compiler:01 inference:01 1.0:98 partial:01 functions:01 namely:02 cps:02 

Hello,

I am currently writing a FRP-like system, stealing the ides previously
exposed in this list (I have chosen the CPS style). The issue is a
loss of polymorphism when I write a signal function in terms of
other's. Namely:


(* type ('a, 'b) sf = SF of ('a -> 'a * ('a, 'b) sf) *)
(* integral : ('a, float) sf ('a float) sf *)
(* lift : ('a -> 'b) -> ('a, 'b) sf *)

let time = integral (lift (fun x -> 1.0))
(* time : ('_a float) sf *)


I think it this loss is due to a partial application. Usually, transforming

let foo arg = bar baz

into

let foo arg x = bar baz x

works around this problem. However, I can't do this in the case of
signal functions, unless I accept to break the abstractness of my
type.

Is there a neater workaround, or a compiler option to tweak the type inference?

Thanks,

Loup Vaillant

