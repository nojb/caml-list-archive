Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 52A1BBB81
	for <caml-list@yquem.inria.fr>; Sat, 18 Feb 2006 22:49:11 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id k1ILnAWW010514
	for <caml-list@yquem.inria.fr>; Sat, 18 Feb 2006 22:49:10 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA20004 for <caml-list@pauillac.inria.fr>; Sat, 18 Feb 2006 22:49:10 +0100 (MET)
Received: from uproxy.gmail.com (uproxy.gmail.com [66.249.92.193])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k1ILn917031963
	for <caml-list@inria.fr>; Sat, 18 Feb 2006 22:49:09 +0100
Received: by uproxy.gmail.com with SMTP id q2so446183uge
        for <caml-list@inria.fr>; Sat, 18 Feb 2006 13:49:09 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=hglb1QozY5tiIiT07uEdB8wnj3mPxBPS5vDclGmfKeA76vWfi+ul3dMMDb1+sBYtf6BiH/jwv0Bzw5YSL2NoNZ2UfUxuNKK+oshs/rwjvuRdWWiIFR4y/0C/mY/F6OXHQmEL9+jjX/D86O2AUR16BqNerppCskxfoL4KKrZFizY=
Received: by 10.66.252.6 with SMTP id z6mr985821ugh;
        Sat, 18 Feb 2006 13:49:09 -0800 (PST)
Received: by 10.67.21.20 with HTTP; Sat, 18 Feb 2006 13:49:09 -0800 (PST)
Message-ID: <3dd983220602181349x6d61a072obf677b0c923da8cb@mail.gmail.com>
Date: Sat, 18 Feb 2006 13:49:09 -0800
From: "Brendan Miller" <catphive.lists@gmail.com>
To: caml-list@inria.fr
Subject: osx caml bindings?
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
X-Miltered: at concorde with ID 43F79656.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 43F79655.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; osx:01 bindings:01 bindings:01 ocaml:01 ocaml:01 syntax:01 brendan:98 cocoa:98 carbon:98 cocoa:98 partial:01 partial:01 preprocessor:01 int:01 int:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_BY_IP autolearn=disabled 
	version=3.0.3

does anyone know if there are working caml cocoa bindings or caml
carbon bindings available? preferably cocoa bindings.

on a tangent, since objective-c has labeled arguments, it would be
cool if the binding recognized this and took a objective c method of
the form
doSomthingWith: (int)a and: (int)b and:(int)c

and turned it into the ocaml method
method doSomethingWith_and_and ~arg1 ~arg2 ~arg3

THEN a preprocessor could be used (I don't know much about caml4p,
hopefully it could do this) to regularly convert objective c style
calls in ocaml to the ocaml method call so that
[my_object doSomethingWith: a and: b and: c]

becomes
(my_object#doSomethingWith_and_and ~arg1:a ~arg2:b ~arg3: c)

the problem comes when you want to take advantage of the labeled
arguements to make a partial call. with the objective c syntax there
is ambiguity.

[my_object doSomethingWith: a]

could mean
(my_object#doSomethingWith_and_and ~arg1:a)

or it could mean
(my_object#doSomethingWith ~arg1:a)

and practically speaking cocoa has a lot of methods of that form... so
partial calls would maybe require that the ocaml call format is used.

