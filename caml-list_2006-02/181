Return-Path: <brogoff@speakeasy.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 68C1CBBBB
	for <caml-list@yquem.inria.fr>; Tue, 21 Feb 2006 04:55:53 +0100 (CET)
Received: from mail3.sea5.speakeasy.net (mail3.sea5.speakeasy.net [69.17.117.5])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id k1L3tpLl011102
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@yquem.inria.fr>; Tue, 21 Feb 2006 04:55:52 +0100
Received: (qmail 5369 invoked from network); 21 Feb 2006 03:55:50 -0000
Received: from shell2.sea5.speakeasy.net ([69.17.116.3])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail3.sea5.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <coop@cs.utah.edu>; 21 Feb 2006 03:55:50 -0000
Date: Mon, 20 Feb 2006 19:55:50 -0800 (PST)
From: brogoff <brogoff@speakeasy.net>
To: Nathan Cooprider <coop@cs.utah.edu>
Cc: ocaml_beginners@yahoogroups.com, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Rephrasing of dynamic module selection problem
In-Reply-To: <43FA64C8.1050704@cs.utah.edu>
Message-ID: <Pine.LNX.4.58.0602201950230.17102@shell2.speakeasy.net>
References: <43FA64C8.1050704@cs.utah.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde with ID 43FA8F47.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 run-time:01 statically:01 compile-time:01 ocaml:01 mls:01 ocaml:01 nathan:98 selectable:98 wrote:01 dynamically:01 functions:01 speakeasy:01 modules:01 modules:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.8 required=5.0 tests=SPF_SOFTFAIL 
	autolearn=disabled version=3.0.3

On Mon, 20 Feb 2006, Nathan Cooprider wrote:
> So I am still trying to get modules to be dynamically (run-time)
> selectable instead of only statically (compile-time).

You can't do that in OCaml. Why don't you use objects or records to hold
the functions, instead of modules?

There are other MLs where you can pack a module into some manipulable
entity, but OCaml isn't one of them. Once you go there I wonder why not
just remove all differences between modules and records, since the two
things seem very similar.

-- Brian

