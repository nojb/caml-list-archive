Return-Path: <kfisher@research.att.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id A044EBB81
	for <caml-list@yquem.inria.fr>; Tue, 14 Feb 2006 03:11:06 +0100 (CET)
Received: from mail-white.research.att.com (mail-red.research.att.com [192.20.225.110])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k1E2B4gl022575
	for <caml-list@yquem.inria.fr>; Tue, 14 Feb 2006 03:11:05 +0100
Received: from [172.24.78.42] (vpn-16.research.att.com [135.207.240.16])
	by bigmail.research.att.com (8.13.3+Sun/8.11.6) with ESMTP id k1E2B2ac025786
	for <caml-list@yquem.inria.fr>; Mon, 13 Feb 2006 21:11:02 -0500 (EST)
Mime-Version: 1.0 (Apple Message framework v746.2)
To: caml-list@yquem.inria.fr
Message-Id: <C65F37ED-AF69-4B8F-9286-984C93F21E6F@research.att.com>
Content-Type: multipart/alternative; boundary=Apple-Mail-34-514588143
From: Kathleen Fisher <kfisher@research.att.com>
Subject: Summary: Using the "o" in "ocaml"
Date: Mon, 13 Feb 2006 18:11:01 -0800
X-Mailer: Apple Mail (2.746.2)
X-Miltered: at nez-perce with ID 43F13C38.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 abstractions:01 inference:01 annotations:01 polymorphism:01 caml-list:01 reppy:01 uchicago:01 caml-list:01 reppy:01 object-:01 summarize:01 beginner's:01 beginners:01 


--Apple-Mail-34-514588143
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	delsp=yes;
	format=flowed

A few weeks ago I sent email to ocaml mailing list asking about  
experiences with the "o" part of "ocaml".  I include below the  
responses that I received.

There are a lot of different opinions! The summary seems to be that  
people use objects
  1. to wrap oo libraries from other languages
  2. to wrap long-lived imperative abstractions behind a clean interface
  3. when dynamic code selection is important

There is some difference of opinion on how easy the features are to  
use: some say they are easy, others too difficult to bother with.

The most difficult element seems to be with type inference being too  
generous, making programs more polymorphic than intended and delaying  
error messages.  The workaround is to add type annotations to limit  
the polymorphism of the code.

Kathleen


Begin forwarded message:

> From: Kathleen Fisher <kfisher@research.att.com>
> Date: January 23, 2006 11:37:14 AM PST
> To: caml-list@yquem.inria.fr
> Cc: John Reppy <jhr@cs.uchicago.edu>
> Subject: [Caml-list] (no subject)
>
> As part of our work on Moby, John Reppy and I are collecting
> experiences people have had using the object-oriented features of
> Ocaml, as it has been available long enough for people to use it "for
> real."
>
> We are interested in understanding what people use the object- 
> oriented features for.  What works really well?  What doesn't work  
> so smoothly?  How do you decide when to use the object-oriented  
> features?  Do you have other observations you'd like to share?
>
> I'm happy to summarize responses sent directly to me for the list.
>
> Thanks in advance!
> Kathleen Fisher
>
>
>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
Begin forwarded message:

> From: Anil Madhavapeddy <avsm2@cam.ac.uk>
> Date: January 23, 2006 12:12:19 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Re: [Caml-list] (no subject)
>
> [off-list]
>
> Kathleen,
>
> I use the OO features as part of a data description language I've
> developed called MPL, for writing high-performance OCaml network
> servers (not yet released).  The language is similar to PacketTypes,
> but outputs OCaml code instead of C code.
>
> The generated OCaml code has a unique OCaml object type for each
> packet type (separated in the namespace by modules).  Each object
> contains the functions to marshal and prettyprint that packet and
> accessor functions to retrieve and set individual fields.  Unmarshal
> functions convert network traffic into variant data types, so that
> ML pattern matching can be used on received data.
>
> I've developed quite a few apps with this so far (SSH, DNS, DHCP,
> IPv4 router, others have done Plan9FS and are implementing a TCP
> stack) in pure OCaml, and its been quite effective.  Packet parsing
> code in OCaml which generates minimal garbage is pretty ugly/ 
> imperative,
> and its nice to hide it away inside the object interface.
>
> The most painful thing about objects and polymorphic variants in
> OCaml are the error messages if the objects aren't annotated properly;
> but this really isn't a problem if the objects are all _generated_,
> annotated with types and stuck in a library.  Objects are much more
> pleasant to actually use than a combination of the module system
> and records, since they dont require prefixing the module name to
> access fields inside records (a real pain in previous versions of
> my network servers that didnt use objects).
>
> I've read your work on PADS with interest; it's really useful for
> interfacing with configuration files and log files for the OCaml
> servers we've developed, so I was quite keen to look into writing
> an OCaml version of it instead of C.  But one step at a time;
> finishing the PhD dissertation first :-)
>
> best regards,
>
> -- 
> Anil Madhavapeddy                                 http:// 
> anil.recoil.org
> University of Cambridge                          http:// 
> www.cl.cam.ac.uk
>
>
Begin forwarded message:

> From: Martin Jambon <martin_jambon@emailuser.net>
> Date: January 23, 2006 12:21:34 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Re: [Caml-list] (no subject)
>
> Hi Kathleen,
>
> In my experience, objects in OCaml are mostly appropriate to  
> represent complex mutable data that does not have to be combined  
> with other objects of the same kind and when there is no problem of  
> efficiency (since method calls are not as fast as record field  
> access).
>
> Examples include:
>
> - representing a mechanical object which contains position, velocity,
> forces, masses, etc. Forces, translations, speed limits, and so on  
> can be changed at each timestep, and all fields become updated  
> according to specific rules. The high number of internal fields and  
> the long life of such an object are the factor that decided me to  
> use objects in this situation. In this case, inheritance was also  
> used to derive subclasses of objects, but I could have done without  
> it. In general, the use of sum types to represent variants of a  
> given core type is much easier than using class inheritance in my  
> opinion.
> - I/O objects: creating the object is equivalent to opening the  
> resource for reading, writing or both. Again, this is an object  
> which has a long life with a highly mutable internal state. See  
> http://ocaml-programming.de/rec/IO-Classes.html which is proposed  
> standard for I/O classes.
>
> As for polymorphic variants, my feeling is that developing  
> libraries which provide an object-oriented interface is more  
> difficult, but from the user's point of view it is often easier  
> than using a library which is based only on the core OCaml language.
>
>
> Martin
> Martin Jambon, PhD
> http://martin.jambon.free.fr
>
> Visit http://wikiomics.org, the Bioinformatics Howto Wiki
Begin forwarded message:

> From: David MENTRE <dmentre@linux-france.org>
> Date: January 23, 2006 12:23:13 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Re: [Caml-list] (no subject)
>
> Hello,
>
> Kathleen Fisher <kfisher@research.att.com> writes:
>
>> As part of our work on Moby, John Reppy and I are collecting
>> experiences people have had using the object-oriented features of
>> Ocaml, as it has been available long enough for people to use it "for
>> real."
>
> I'm using Lablgtk for the client of the demexp software.
>
>> We are interested in understanding what people use the object-
>> oriented features for.
>
> To use a OO toolkit, Lablgtk.
>
>>  What works really well?
>
> Objects are typed, so no bad surprises *if* it compiles. Other than
> that, I can't really say, sorry.
>
>>  What doesn't work so smoothly?
>
> - combination of OCaml objects with a functional programming style: in
>   case of typing error the error messages are too far from the  
> original
>   cause and too verbose[1].
>
> - syntax and subtyping: certain mandatory casting are like "black  
> magic"
>   to me. I've just copy/pasted from Lablgtk examples. But maybe I
>   haven't investigated enough the type system.
>
> - complexity. Compared to SmallTalk or even Python, OCaml objects are
>   quite complicated (to say the least).
>
>> How do you decide when to use the object-oriented  features?
>
> - because Lablgtk uses it, so I'm forced to use it.
>
> - as an experiment, to try an object oriented application in
>   OCaml. Until now, I've only been convinced that the OCaml objects  
> are
>   not for the casual programmer.
>
>
>> Do you have other observations you'd like to share?
>
> - documentation, documentation and documentation, with
>   *examples*. Current documentation is probably sufficient but far too
>   light in my humble opinion. Especially on those strange corners,
>   e.g. in "class [[> Gtk.widget ]] widget_impl : ([> Gtk.widget ]  
> as 'a)
>   Gtk.obj -> object .. end"[2], why "as 'a"?
>
>
> Feel free to ask for more information if I'm not clear enough.
>
> Best wishes,
> david
>
>
> Footnotes:
> [1]  This is the first time I had one page long error message in  
> OCaml,
>      without having any idea of why.
>
> [2]  liblablgtk2-ocaml-doc/html/GObj.html
>
> -- 
> pub  1024D/A3AD7A2A 2004-10-03 David MENTRE <dmentre@linux-france.org>
>  5996 CC46 4612 9CA4 3562  D7AC 6C67 9E96 A3AD 7A2A
>
Begin forwarded message:

> From: Diego Olivier Fernandez Pons <Diego.FERNANDEZ_PONS@etu.upmc.fr>
> Date: January 23, 2006 12:24:19 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Use of objects in Caml
>
>     Bonjour,
>
>> We are interested in understanding what people use the object-  
>> oriented
>> features for.  What works really well?  What doesn't work so  
>> smoothly?
>> How do you decide when to use the object-oriented features?  Do  
>> you have
>> other observations you'd like to share?
>
> Long time ago I wrote a data structure library containing functorial,
> polymorphic and object versions of each data structure/algorithm.  
> It was
> intented for combinatorial optimization problems.
>
> I never used the object layer.
>
> I had a few request of people asking how to do this or that. They  
> never
> needed the object layer.
>
> Dynamically changing the underlying data structure representation  
> which
> was purpose of the object layer remained a dream in all the  
> applications I
> developped with it : in a typical program (including performance
> intensive) there are a ton of improvements that lead to more  
> significant
> wins.
>
> - By the way, Pascal Brisset and Nicolas Barnier who wrote the  
> constraint
> programming system FaCiLe also removed all the objects they were  
> using -
>
>> What doesn't work so smoothly ?
>
> Bad integration with Caml functional core, both semantic and  
> syntactic.
> Too much redundancy without clear benefits. In some cases variants  
> are as
> good. In others the functor/module system is enough.
>
>> How do you decide when to use the object-oriented features?
>
> I just stopped using objects.
>
>
>         Diego Olivier Fernandez Pons
>
Begin forwarded message:

> From: David Baelde <david.baelde@gmail.com>
> Date: January 23, 2006 1:39:29 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Re: [Caml-list] (no subject)
> Reply-To: david.baelde@ens-lyon.org
>
> Hi,
>
> I've been coding in OCaml for a long time, and I know many people
> coding in OCaml, but I think I'm one of the few to have used objects
> -- and to like it. That's why I felt I should answer. However I don't
> have so much to say :p
>
> I use OCaml for hobby projects and more usual academic stuff. I often
> end up with objects on hobby projects, more "real-life" applications,
> like audio processing software or text editors. My biggest project is
> liquidsoap (http://savonet.sf.net) where I decided from the beginning
> to use objects. There, abstract classes, (multiple) inheritance,
> overriding, private declarations, are used a lot and are very helpful.
> I'm not a OO guru, neither an OCaml OO guru, so I guess I don't use
> many advanced features here.. in particular I rarely need to have
> polymorphic classes.
>
> I think the major reason for choosing objects is abstract classes,
> inheritance and structural subtyping. It makes it natural to define
> step by step some values which fit in some role. Again, I'm no guru
> and haven't thought to this such a lot, but I believe that the
> prototype-based choice in OCaml instead of class-based has something
> to do with this ease. At least, I think it makes things simple and
> easy to understand.
>
> In general, I find that using objects in OCaml is very easy:
> lightweight syntax, clear semantics and powerful constructs. I don't
> have much too complain about.
>
> Cheers,
>
> David
>
Begin forwarded message:

> From: skaller <skaller@users.sourceforge.net>
> Date: January 23, 2006 10:44:44 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Cc: caml-list@yquem.inria.fr, John Reppy <jhr@cs.uchicago.edu>
> Subject: Re: [Caml-list] (no subject)
>
> On Mon, 2006-01-23 at 11:37 -0800, Kathleen Fisher wrote:
>> As part of our work on Moby, John Reppy and I are collecting
>> experiences people have had using the object-oriented features of
>> Ocaml, as it has been available long enough for people to use it "for
>> real."
>>
>> We are interested in understanding what people use the object-
>> oriented features for.  What works really well?  What doesn't work so
>> smoothly?  How do you decide when to use the object-oriented
>> features?  Do you have other observations you'd like to share?
>
> OO features provide dynamic binding, which is more powerful
> than polymorphism provided by any other feature other than
> higher order polymorphism (which doesn't work properly in Ocaml).
>
> However, the utility is heavily constrained by the variance
> requirements.
>
> The effect is that OO is often the best solution for
> sources and sinks, and cannot be used for most relationships
> (since they're usually covariant).
>
> Thus, I am using Ocaml OO as sources and
> for relationships where one type is invariant. In particular,
> I am using it in the lexer phase of my compiler, with classes
> to handle and factorise the state of the preprocessor/lexer,
> parameterising Ocamllex action code.
>
> Secondly, it is used to manage the inputs supplied to the
> Ocamlyacc parser mainly to feed a stream of tokens to it.
>
> In both cases the type of a token is invariant, and so
> amenable to an OO solution. In both cases the technology
> being leveraged -- Ocamllex and Ocamlyacc -- forces me
> to control invert my logic and program reactively instead
> of actively -- user actions of both tools are callbacks
> driven by tool generated logic which provide no or very
> limited ability to interact actively.
>
> These uses are not intended to provide any abstraction,
> they're just a convenient way to package up the functionality
> and pass it around as a single value.
>
> My back end would also benefit from use of classes.
> The output data type involved -- strings -- is invariant.
> Classes would provide abstraction which may assist in
> making the code generator pluggable: at present it can
> only generate ISO C++, it would be useful to generate C,
> C--, Ocaml, or some other languages too.
>
> This is not done at the moment, because using classes
> requires knowing in advance what your abstractions are:
> classes break badly with design changes. Algebraic data
> structures are more flexible, adapt more easily, but it
> is harder to reason about correctness when operating
> directly on low level representations.
>
> In fact, in the lexer classes, the enforced abstraction
> (variables can't be accessed, you have to write get/set
> methods) is actually a pain. As the system developed
> I've had to add more variables and get/set methods ..
> and declare separately the types in *.mli files ..
> because much of the time I'm *really* working directly
> with the representation. Refactoring would be a nightmare ;(
>
> In another project I used classes much more heavily.
> That project (Vyper) was an Ocaml program which implemented
> the Python programming language. This was not only convenient
> to model the Python objects as classes, it was also useful for
> constructing lookup scopes, with methods representing the various
> lookup rules.
>
> There I used abstraction heavily, as a way of separating my
> Ocaml implementation from the semantics, and this was tenable
> because the semantics were well specified (by the Python language),
> which itself is object based.
>
> One final comment: classes would be MUCH more useful if, as
> in C++, one had dynamically loadable code. In that case
> algorithms can work with class types instantiated at run time,
> the dynamic binding is fundamental, and the enforced abstraction
> vital. I exploit this heavily in Felix, which generates shared
> libraries which are dynamically loaded by a driver program,
> which runs the code using C++ abstract base methods.
>
> In Ocaml you have to link all the instances in anyhow..
> so the dynamic binding isn't nearly as useful. For Vyper this
> was one of the major factors killing the project: there
> was a need to model all the C extension to Python -- and there
> are a LOT of them -- the same way Python does: by dynamic loading.
> The Ocaml emulation had to statically link every extension,
> which apart from being a pain, introduces the possibility that
> the intended bindings are not fully abstracted.
>
> -- 
> John Skaller <skaller at users dot sf dot net>
> Felix, successor to C++: http://felix.sf.net
>
Begin forwarded message:

> From: Gilles FALCON <gilles.falcon@francetelecom.com>
> Date: January 24, 2006 2:35:15 AM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Cc: John Reppy <jhr@cs.uchicago.edu>
> Subject: Re: [Caml-list] (no subject)
>
> For my part i use object when it is easier than functionnal  
> programming.
> I like in the functionnal programming the strong typing.
>
> The Narbel's book (in french sorry) http://www.amazon.fr/exec/ 
> obidos/ASIN/271174843X/403-9058959-5653236
> explain the different programming style, the advantage and  
> inconvenient.
>
> Of course if it is not the look and feel of a lambda programmer,  
> he's book is pleasant to read. It is also a book is very close to  
> your subjet and without too much theory.
>
> Hope this help
>
Begin forwarded message:

> From: brogoff <brogoff@speakeasy.net>
> Date: January 24, 2006 4:40:37 PM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Cc: John Reppy <jhr@cs.uchicago.edu>
> Subject: Re: [Caml-list] (no subject)
>
> Hi,
>     I use the OO features of OCaml mostly to get around annoying
> restrictions of the record system. That means I avoid late binding and
> open recursion, but I use classes as polymorphic records (minus
> pattern matching). If OCaml had a sufficiently powerful record system,
> and a mixin module system which would allow programming by  
> extension, I'd
> be fine if there were no classes, or direct support for open  
> recursion.
>
>     In the cases where I thought I could make use of true OO (late  
> binding and
> open recursion) I would have wanted multimethods anyways, and as I  
> find the
> simulation with visitor classes too complicated compared to just using
> algebraic data types and explicit dispatch, I designed without OO.
>
>     OCaml's OO is very powerful compared to many other OO  
> languages, but
> it doesn't fit with the ML way, and until very recently (with  
> private row
> types) the interaction with the module system was difficult. While I
> was initially enthusiastic, I've program mostly without it now. More
> polymorphism for records is what I'd like to see in the next ML.
>
>
> -- Brian
>
>>
Begin forwarded message:

> From: Philippe Narbel <narbel@labri.fr>
> Date: February 10, 2006 5:55:37 AM PST
> To: Kathleen Fisher <kfisher@research.att.com>
> Subject: Re: [Caml-list] (no subject)
>
>
>>
>> We are interested in understanding what people use the object- 
>> oriented features for.  What works really well?  What doesn't work  
>> so smoothly?  How do you decide when to use the object-oriented  
>> features?  Do you have other observations you'd like to share?
>>
>
>
> Hello Kathleen,
>
> I recently run through your caml-list message, and here
> are shortly some general points about your questions...
>
> There are at least two main practical needs which make
> me to use the object system in place of the module
> system in ocaml:
>
>   - dynamical choice of code (this is what is mostly
>     missing in the ocaml module system -- even if local
>     modules mixed with imperative features make possible
>     to somewhat overcome this, but in an awkward way...).
>
>   - quite easy application of inclusion polymorphism
>     with of sophisticated first class values (modules
>     or ``polymorphic variants'' do not give the same
>     comfort as objects).
>     Also, inheritance can be combined with dynamic
>     binding, so that method redefinitions really work
>     (modules just allow for plain redefinitions).
>
>     Of course, mutual recursive relationships are also
>     possible for classes in a natural way (recursive
>     modules in ocaml are not bad, but I never felt the
>     need to use them: it seems that they mostly happen
>     when modules are defined at a too fine grain).
>
> However,
>
>   - type abstraction means are missing in the ocaml
>     object system (type definitions -- e.g. in Scala --
>     are not possible in classes and objects, but also
>     nested-inner classes are not available). Thus, a
>     usual technique is to embed classes into modules/
>     functors (a technique which works quite well, but
>     can become cumbersome).
>
> On the other hand,
>
>   - A very good point to the ocaml object system is the
>     ``open object types'' which make type inference
>     fully operational on any program where method
>     invocations occur. As a result, it is very easy to
>     mix styles : classes are not a definitive modeling
>     choice. There are just a powerful construction of
>     new types, and the module system may remain mostly
>     in charge.
>
>
> I'll be quite interested in your summary about these
> questions (and by the way, in new versions of Moby...)
>
> Yours,
> Ph. Narbel
>


--Apple-Mail-34-514588143
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=ISO-8859-1

<HTML><BODY style=3D"word-wrap: break-word; -khtml-nbsp-mode: space; =
-khtml-line-break: after-white-space; ">A few weeks ago I sent email to =
ocaml mailing list asking about experiences with the "o" part of =
"ocaml".=A0 I include below the responses that I received.=A0=A0<DIV><BR =
class=3D"khtml-block-placeholder"></DIV><DIV>There are a lot of =
different opinions!=A0The summary seems to be that people use =
objects</DIV><DIV>=A01. to wrap oo libraries from other =
languages</DIV><DIV>=A02. to wrap long-lived imperative abstractions =
behind a clean interface</DIV><DIV>=A03. when dynamic code selection is =
important</DIV><DIV><BR class=3D"khtml-block-placeholder"></DIV><DIV>There=
 is some difference of opinion on how easy the features are to use: some =
say they are easy, others too difficult to bother with.=A0=A0</DIV><DIV><B=
R class=3D"khtml-block-placeholder"></DIV><DIV>The most difficult =
element seems to be with type inference being too generous, making =
programs more polymorphic than intended and delaying error messages.=A0 =
The workaround is to add type annotations to limit the polymorphism of =
the code.=A0</DIV><DIV><BR =
class=3D"khtml-block-placeholder"></DIV><DIV>Kathleen</DIV><DIV><BR><DIV><=
BR><DIV>Begin forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 11:37:14 AM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><A =
href=3D"mailto:caml-list@yquem.inria.fr">caml-list@yquem.inria.fr</A></FON=
T></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" =
color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Cc: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">John Reppy &lt;<A =
href=3D"mailto:jhr@cs.uchicago.edu">jhr@cs.uchicago.edu</A>&gt;</FONT></DI=
V><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Subject: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica"><B>[Caml-list] (no subject)</B></FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">As part =
of our work on Moby, John Reppy and I are collecting</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">experiences people have had using the =
object-oriented features of</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Ocaml, as it =
has been available long enough for people to use it "for</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">real."</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">We are interested in =
understanding what people use the object-oriented features for.<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>What works really well?<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>What doesn't work so =
smoothly?<SPAN class=3D"Apple-converted-space">=A0 </SPAN>How do you =
decide when to use the object-oriented features?<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>Do you have other =
observations you'd like to share?</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I'm happy to summarize responses =
sent directly to me for the list.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Thanks in advance!</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Kathleen Fisher</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; =
">_______________________________________________</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Caml-list mailing list. Subscription =
management:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><A =
href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">http://y=
quem.inria.fr/cgi-bin/mailman/listinfo/caml-list</A></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Archives: <A =
href=3D"http://caml.inria.fr">http://caml.inria.fr</A></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Beginner's list: <A =
href=3D"http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo=
.com/group/ocaml_beginners</A></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Bug reports: =
<A =
href=3D"http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-=
bugs</A></DIV> </BLOCKQUOTE><DIV>Begin forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">Anil Madhavapeddy &lt;<A =
href=3D"mailto:avsm2@cam.ac.uk">avsm2@cam.ac.uk</A>&gt;</FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Date: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">January 23, 2006 12:12:19 PM PST</FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>To: </B></FONT><FONT =
face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px Helvetica">Kathleen =
Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Re: [Caml-list] (no =
subject)</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV> <DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">[off-list]</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">Kathleen,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">I use the OO features as part of a data description =
language I've</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">developed called MPL, for =
writing high-performance OCaml network</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">servers =
(not yet released).<SPAN class=3D"Apple-converted-space">=A0 </SPAN>The =
language is similar to PacketTypes,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">but outputs =
OCaml code instead of C code.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">The generated OCaml code has a =
unique OCaml object type for each</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">packet type =
(separated in the namespace by modules).<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>Each object</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">contains the functions to marshal and prettyprint =
that packet and</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">accessor functions to retrieve =
and set individual fields.<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>Unmarshal</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">functions convert network =
traffic into variant data types, so that</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">ML =
pattern matching can be used on received data.</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I've =
developed quite a few apps with this so far (SSH, DNS, DHCP,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">IPv4 router, others have done Plan9FS and are =
implementing a TCP</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">stack) in pure OCaml, and =
its been quite effective.<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>Packet parsing</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">code in OCaml which =
generates minimal garbage is pretty ugly/imperative,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">and its nice to hide it away inside the object =
interface.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">The most painful thing about objects and polymorphic =
variants in</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">OCaml are the error messages if =
the objects aren't annotated properly;</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">but this =
really isn't a problem if the objects are all _generated_,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">annotated with types and stuck in a library.<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>Objects are much =
more</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">pleasant to actually use than a =
combination of the module system</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">and records, =
since they dont require prefixing the module name to</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">access fields inside records (a real pain in =
previous versions of</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">my network servers that =
didnt use objects).</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I've read your work on PADS with =
interest; it's really useful for</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">interfacing =
with configuration files and log files for the OCaml</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">servers we've developed, so I was quite keen to look =
into writing</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">an OCaml version of it instead =
of C.<SPAN class=3D"Apple-converted-space">=A0 </SPAN>But one step at a =
time;</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">finishing the PhD dissertation =
first :-)</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">best regards,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">--<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Anil =
Madhavapeddy <SPAN class=3D"Apple-converted-space">=A0 =A0 =A0 =A0 =A0 =A0=
 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 </SPAN><A =
href=3D"http://anil.recoil.org">http://anil.recoil.org</A></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">University of Cambridge<SPAN =
class=3D"Apple-converted-space">=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =
=A0 =A0 =A0 </SPAN><A =
href=3D"http://www.cl.cam.ac.uk">http://www.cl.cam.ac.uk</A></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV> </BLOCKQUOTE><DIV>Begin forwarded =
message:</DIV><BR class=3D"Apple-interchange-newline"><BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>From: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Martin Jambon &lt;<A =
href=3D"mailto:martin_jambon@emailuser.net">martin_jambon@emailuser.net</A=
>&gt;</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 12:21:34 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Re: [Caml-list] (no =
subject)</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV> <DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Hi Kathleen,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">In my =
experience, objects in OCaml are mostly appropriate to represent complex =
mutable data that does not have to be combined with other objects of the =
same kind and when there is no problem of efficiency (since method calls =
are not as fast as record field access).</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Examples =
include:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">- representing a mechanical object which contains =
position, velocity,</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">forces, masses, etc. =
Forces, translations, speed limits, and so on can be changed at each =
timestep, and all fields become updated according to specific rules. The =
high number of internal fields and the long life of such an object are =
the factor that decided me to use objects in this situation. In this =
case, inheritance was also used to derive subclasses of objects, but I =
could have done without it. In general, the use of sum types to =
represent variants of a given core type is much easier than using class =
inheritance in my opinion.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">- I/O =
objects: creating the object is equivalent to opening the resource for =
reading, writing or both. Again, this is an object which has a long life =
with a highly mutable internal state. See <A =
href=3D"http://ocaml-programming.de/rec/IO-Classes.html">http://ocaml-prog=
ramming.de/rec/IO-Classes.html</A> which is proposed standard for I/O =
classes.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">As for polymorphic variants, my feeling is that =
developing libraries which provide an object-oriented interface is more =
difficult, but from the user's point of view it is often easier than =
using a library which is based only on the core OCaml =
language.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">Martin</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Martin Jambon, PhD</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><A =
href=3D"http://martin.jambon.free.fr">http://martin.jambon.free.fr</A></DI=
V><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Visit <A =
href=3D"http://wikiomics.org">http://wikiomics.org</A>, the =
Bioinformatics Howto Wiki</DIV> </BLOCKQUOTE><DIV>Begin forwarded =
message:</DIV><BR class=3D"Apple-interchange-newline"><BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>From: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">David MENTRE &lt;<A =
href=3D"mailto:dmentre@linux-france.org">dmentre@linux-france.org</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 12:23:13 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Re: [Caml-list] (no =
subject)</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV> <DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Hello,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Kathleen =
Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt; =
writes:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">As part of our work on =
Moby, John Reppy and I are collecting</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">experiences people have had using the object-oriented features =
of</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; ">Ocaml, as it has been available long enough for =
people to use it "for</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">real."</DIV> =
</BLOCKQUOTE><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">I'm using Lablgtk for the client of the demexp =
software.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">We are interested in =
understanding what people use the object-</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">oriented =
features for.</DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">To use a OO toolkit, =
Lablgtk.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0</SPAN>What works really well?</DIV> =
</BLOCKQUOTE><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Objects are typed, so no bad surprises *if* it =
compiles. Other than</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">that, I can't really say, =
sorry.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0</SPAN>What doesn't work so =
smoothly?</DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">- combination of OCaml objects =
with a functional programming style: in</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>case of typing error the =
error messages are too far from the original</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>cause and too verbose[1].</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">- syntax and subtyping: certain =
mandatory casting are like "black magic"</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>to me. I've just copy/pasted =
from Lablgtk examples. But maybe I</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>haven't investigated enough =
the type system.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">- complexity. Compared to SmallTalk or even Python, =
OCaml objects are</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>quite complicated (to say the =
least).<SPAN class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">How do you decide when to use =
the object-oriented<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>features?</DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">- because Lablgtk uses it, so =
I'm forced to use it.</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">- as an experiment, to try an =
object oriented application in</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>OCaml. Until now, I've only =
been convinced that the OCaml objects are</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>not for the casual =
programmer.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Do you have other observations =
you'd like to share?</DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">- documentation, documentation =
and documentation, with</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>*examples*. Current =
documentation is probably sufficient but far too</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>light in my humble opinion. Especially on those strange =
corners,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>e.g. in "class [[&gt; =
Gtk.widget ]] widget_impl : ([&gt; Gtk.widget ] as 'a)</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>Gtk.obj -&gt; object .. end"[2], why "as 'a"?<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Feel free to ask for more =
information if I'm not clear enough.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Best wishes,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">david</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Footnotes:<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">[1]<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>This is the first time I had =
one page long error message in OCaml,</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0=A0 =A0 </SPAN>without having any =
idea of why.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">[2]<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>liblablgtk2-ocaml-doc/html/GObj.html</DIV><DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">--<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">pub<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>1024D/A3AD7A2A 2004-10-03 =
David MENTRE &lt;<A =
href=3D"mailto:dmentre@linux-france.org">dmentre@linux-france.org</A>&gt;<=
/DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0</SPAN>5996 CC46 4612 9CA4 3562<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>D7AC 6C67 9E96 A3AD =
7A2A</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
</BLOCKQUOTE><DIV>Begin forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">Diego Olivier Fernandez Pons &lt;<A =
href=3D"mailto:Diego.FERNANDEZ_PONS@etu.upmc.fr">Diego.FERNANDEZ_PONS@etu.=
upmc.fr</A>&gt;</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 12:24:19 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Use of objects in =
Caml</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =
</SPAN>Bonjour,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">We are interested in =
understanding what people use the object- oriented</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">features for.<SPAN class=3D"Apple-converted-space">=A0=
 </SPAN>What works really well?<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>What doesn't work so smoothly?</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">How do =
you decide when to use the object-oriented features?<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>Do you have</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">other observations you'd like to share?</DIV> =
</BLOCKQUOTE><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Long time ago I wrote a data structure library =
containing functorial,</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">polymorphic and object =
versions of each data structure/algorithm. It was</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">intented for combinatorial optimization =
problems.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">I never used the object layer.</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I had a =
few request of people asking how to do this or that. They =
never</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">needed the object =
layer.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Dynamically changing the underlying data structure =
representation which</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">was purpose of the object =
layer remained a dream in all the applications I</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">developped with it : in a typical program (including =
performance</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">intensive) there are a ton of =
improvements that lead to more significant</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">wins.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">- By the way, Pascal Brisset and Nicolas Barnier who =
wrote the constraint</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">programming system FaCiLe =
also removed all the objects they were using -</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">What doesn't work so smoothly =
?</DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Bad integration with Caml functional core, both =
semantic and syntactic.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Too much =
redundancy without clear benefits. In some cases variants are =
as</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; ">good. In others the functor/module system is =
enough.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">How do you decide when to =
use the object-oriented features?</DIV> </BLOCKQUOTE><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I just =
stopped using objects.</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =A0 =A0 =
</SPAN>Diego Olivier Fernandez Pons</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV> </BLOCKQUOTE><DIV>Begin forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">David Baelde &lt;<A =
href=3D"mailto:david.baelde@gmail.com">david.baelde@gmail.com</A>&gt;</FON=
T></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" =
color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 1:39:29 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Re: [Caml-list] (no =
subject)</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Reply-To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><A =
href=3D"mailto:david.baelde@ens-lyon.org">david.baelde@ens-lyon.org</A></F=
ONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Hi,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I've been coding in OCaml for a =
long time, and I know many people</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">coding in =
OCaml, but I think I'm one of the few to have used objects</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">-- and to like it. That's why I felt I should =
answer. However I don't</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">have so much =
to say :p</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">I use OCaml for hobby projects and more usual =
academic stuff. I often</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">end up with =
objects on hobby projects, more "real-life" applications,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">like audio processing software or text editors. My =
biggest project is</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">liquidsoap (<A =
href=3D"http://savonet.sf.net">http://savonet.sf.net</A>) where I =
decided from the beginning</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">to use =
objects. There, abstract classes, (multiple) inheritance,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">overriding, private declarations, are used a lot and =
are very helpful.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I'm not a OO guru, neither an =
OCaml OO guru, so I guess I don't use</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">many =
advanced features here.. in particular I rarely need to have</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">polymorphic classes.</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I think the =
major reason for choosing objects is abstract classes,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">inheritance and structural subtyping. It makes it =
natural to define</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">step by step some values which =
fit in some role. Again, I'm no guru</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">and haven't =
thought to this such a lot, but I believe that the</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">prototype-based choice in OCaml instead of =
class-based has something</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">to do with =
this ease. At least, I think it makes things simple and</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">easy to understand.</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">In general, I =
find that using objects in OCaml is very easy:</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">lightweight syntax, clear semantics and powerful =
constructs. I don't</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">have much too complain =
about.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Cheers,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">David</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> </BLOCKQUOTE><DIV>Begin =
forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">skaller &lt;<A =
href=3D"mailto:skaller@users.sourceforge.net">skaller@users.sourceforge.ne=
t</A>&gt;</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 23, 2006 10:44:44 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Cc: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><A =
href=3D"mailto:caml-list@yquem.inria.fr">caml-list@yquem.inria.fr</A>, =
John Reppy &lt;<A =
href=3D"mailto:jhr@cs.uchicago.edu">jhr@cs.uchicago.edu</A>&gt;</FONT></DI=
V><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Subject: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica"><B>Re: [Caml-list] (no subject)</B></FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">On Mon, =
2006-01-23 at 11:37 -0800, Kathleen Fisher wrote:</DIV> <BLOCKQUOTE =
type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">As part of our work on Moby, =
John Reppy and I are collecting</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">experiences =
people have had using the object-oriented features of</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Ocaml, as it has been available long enough for =
people to use it "for</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">real."</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">We are =
interested in understanding what people use the object-<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">oriented =
features for.<SPAN class=3D"Apple-converted-space">=A0 </SPAN>What works =
really well?<SPAN class=3D"Apple-converted-space">=A0 </SPAN>What =
doesn't work so <SPAN class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV=
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">smoothly?<SPAN class=3D"Apple-converted-space">=A0 =
</SPAN>How do you decide when to use the object-oriented <SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">features?<SPAN class=3D"Apple-converted-space">=A0 </SPAN>Do you have =
other observations you'd like to share?</DIV> </BLOCKQUOTE><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">OO =
features provide dynamic binding, which is more powerful</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">than polymorphism provided by any other feature =
other than</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">higher order polymorphism (which =
doesn't work properly in Ocaml).</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">However, the utility is heavily =
constrained by the variance</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">requirements.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">The effect is that OO is often the best solution =
for</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">sources and sinks, and cannot be =
used for most relationships</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">(since =
they're usually covariant).</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Thus, I am using Ocaml OO as =
sources and</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">for relationships where one type =
is invariant. In particular,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I am using it =
in the lexer phase of my compiler, with classes</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">to handle and factorise the state of the =
preprocessor/lexer,</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">parameterising Ocamllex =
action code.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Secondly, it is used to manage the inputs supplied =
to the</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Ocamlyacc parser mainly to feed =
a stream of tokens to it.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">In both cases the type of a =
token is invariant, and so</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">amenable to =
an OO solution. In both cases the technology</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">being leveraged -- Ocamllex and Ocamlyacc -- forces =
me</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; ">to control invert my logic and program =
reactively instead</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">of actively -- user actions =
of both tools are callbacks</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">driven by =
tool generated logic which provide no or very</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">limited ability to interact actively.</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">These =
uses are not intended to provide any abstraction,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">they're just a convenient way to package up the =
functionality</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">and pass it around as a single =
value.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">My back end would also benefit from use of =
classes.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">The output data type involved -- =
strings -- is invariant.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Classes would =
provide abstraction which may assist in</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">making =
the code generator pluggable: at present it can</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">only generate ISO C++, it would be useful to =
generate C,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">C--, Ocaml, or some other =
languages too.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">This is not done at the moment, because using =
classes</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">requires knowing in advance what =
your abstractions are:</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">classes break badly with =
design changes. Algebraic data</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">structures =
are more flexible, adapt more easily, but it</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">is harder to reason about correctness when =
operating</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">directly on low level =
representations.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">In fact, in the lexer classes, the enforced =
abstraction</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">(variables can't be accessed, =
you have to write get/set</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">methods) is =
actually a pain. As the system developed</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I've had =
to add more variables and get/set methods ..</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">and declare separately the types in *.mli files =
..</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; ">because much of the time I'm *really* working =
directly</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">with the representation. =
Refactoring would be a nightmare ;(</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">In another project I used =
classes much more heavily.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">That project =
(Vyper) was an Ocaml program which implemented</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">the Python programming language. This was not only =
convenient</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">to model the Python objects as =
classes, it was also useful for</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">constructing =
lookup scopes, with methods representing the various</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">lookup rules.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">There I used abstraction =
heavily, as a way of separating my</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Ocaml =
implementation from the semantics, and this was tenable</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">because the semantics were well specified (by the =
Python language),</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">which itself is object =
based.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">One final comment: classes would be MUCH more useful =
if, as</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">in C++, one had dynamically =
loadable code. In that case</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">algorithms =
can work with class types instantiated at run time,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">the dynamic binding is fundamental, and the enforced =
abstraction</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">vital. I exploit this heavily in =
Felix, which generates shared</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">libraries =
which are dynamically loaded by a driver program,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">which runs the code using C++ abstract base =
methods.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">In Ocaml you have to link all the instances in =
anyhow..</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">so the dynamic binding isn't =
nearly as useful. For Vyper this</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">was one of =
the major factors killing the project: there</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">was a need to model all the C extension to Python -- =
and there</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">are a LOT of them -- the same =
way Python does: by dynamic loading.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">The Ocaml =
emulation had to statically link every extension,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">which apart from being a pain, introduces the =
possibility that</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">the intended bindings are not =
fully abstracted.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">--<SPAN =
class=3D"Apple-converted-space">=A0</SPAN></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">John =
Skaller &lt;skaller at users dot sf dot net&gt;</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Felix, successor to C++: <A =
href=3D"http://felix.sf.net">http://felix.sf.net</A></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> </BLOCKQUOTE><DIV>Begin =
forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">Gilles FALCON &lt;<A =
href=3D"mailto:gilles.falcon@francetelecom.com">gilles.falcon@franceteleco=
m.com</A>&gt;</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 24, 2006 2:35:15 AM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Cc: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">John Reppy &lt;<A =
href=3D"mailto:jhr@cs.uchicago.edu">jhr@cs.uchicago.edu</A>&gt;</FONT></DI=
V><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Subject: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica"><B>Re: [Caml-list] (no subject)</B></FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">For my =
part i use object when it is easier than functionnal =
programming.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I like in the functionnal =
programming the strong typing.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">The Narbel's book (in french =
sorry) <A =
href=3D"http://www.amazon.fr/exec/obidos/ASIN/271174843X/403-9058959-56532=
36">http://www.amazon.fr/exec/obidos/ASIN/271174843X/403-9058959-5653236</=
A></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; ">explain the different programming style, the =
advantage and inconvenient.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Of course if it is not the look =
and feel of a lambda programmer, he's book is pleasant to read. It is =
also a book is very close to your subjet and without too much =
theory.</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Hope this help</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV></BLOCKQUOTE><DIV>Begin forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">brogoff &lt;<A =
href=3D"mailto:brogoff@speakeasy.net">brogoff@speakeasy.net</A>&gt;</FONT>=
</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
0px; margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" =
color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Date: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">January 24, 2006 4:40:37 PM =
PST</FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>To: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">Kathleen Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Cc: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica">John Reppy &lt;<A =
href=3D"mailto:jhr@cs.uchicago.edu">jhr@cs.uchicago.edu</A>&gt;</FONT></DI=
V><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Subject: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica"><B>Re: [Caml-list] (no subject)</B></FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> <DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">Hi,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>I use the OO features of =
OCaml mostly to get around annoying</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">restrictions =
of the record system. That means I avoid late binding and</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">open recursion, but I use classes as polymorphic =
records (minus</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">pattern matching). If OCaml had =
a sufficiently powerful record system,</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">and a =
mixin module system which would allow programming by extension, =
I'd</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">be fine if there were no =
classes, or direct support for open recursion.</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>In the cases where I =
thought I could make use of true OO (late binding and</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">open recursion) I would have wanted multimethods =
anyways, and as I find the</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">simulation =
with visitor classes too complicated compared to just using</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">algebraic data types and explicit dispatch, I =
designed without OO.</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>OCaml's OO is very =
powerful compared to many other OO languages, but</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">it doesn't fit with the ML way, and until very =
recently (with private row</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">types) the =
interaction with the module system was difficult. While I</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">was initially enthusiastic, I've program mostly =
without it now. More</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; ">polymorphism for records is =
what I'd like to see in the next ML.</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">-- Brian</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV> </BLOCKQUOTE></BLOCKQUOTE><DIV>Begin =
forwarded message:</DIV><BR =
class=3D"Apple-interchange-newline"><BLOCKQUOTE type=3D"cite"><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>From: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">Philippe Narbel &lt;<A =
href=3D"mailto:narbel@labri.fr">narbel@labri.fr</A>&gt;</FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>Date: =
</B></FONT><FONT face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px =
Helvetica">February 10, 2006 5:55:37 AM PST</FONT></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; "><FONT face=3D"Helvetica" size=3D"3" color=3D"#000000" =
style=3D"font: 12.0px Helvetica; color: #000000"><B>To: </B></FONT><FONT =
face=3D"Helvetica" size=3D"3" style=3D"font: 12.0px Helvetica">Kathleen =
Fisher &lt;<A =
href=3D"mailto:kfisher@research.att.com">kfisher@research.att.com</A>&gt;<=
/FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><FONT face=3D"Helvetica" =
size=3D"3" color=3D"#000000" style=3D"font: 12.0px Helvetica; color: =
#000000"><B>Subject: </B></FONT><FONT face=3D"Helvetica" size=3D"3" =
style=3D"font: 12.0px Helvetica"><B>Re: [Caml-list] (no =
subject)</B></FONT></DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV> <DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV> =
<BLOCKQUOTE type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">We are interested in =
understanding what people use the object-oriented features for.<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>What works really well?<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>What doesn't work so =
smoothly?<SPAN class=3D"Apple-converted-space">=A0 </SPAN>How do you =
decide when to use the object-oriented features?<SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>Do you have other =
observations you'd like to share?</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV> </BLOCKQUOTE><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">Hello Kathleen,</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">I recently run through your =
caml-list message, and here</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">are shortly =
some general points about your questions...</DIV><DIV style=3D"margin-top:=
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">There are at =
least two main practical needs which make</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">me to =
use the object system in place of the module</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">system in ocaml:</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>- dynamical choice of code =
(this is what is mostly</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>missing in the ocaml =
module system -- even if local</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>modules mixed with =
imperative features make possible</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>to somewhat overcome =
this, but in an awkward way...).</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>- quite easy application of =
inclusion polymorphism</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>with of sophisticated =
first class values (modules</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>or ``polymorphic =
variants'' do not give the same</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>comfort as =
objects).</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>Also, inheritance can be =
combined with dynamic</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>binding, so that method =
redefinitions really work</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>(modules just allow for =
plain redefinitions).</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>Of course, mutual =
recursive relationships are also</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>possible for classes in a =
natural way (recursive</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>modules in ocaml are not =
bad, but I never felt the</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>need to use them: it =
seems that they mostly happen</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>when modules are defined =
at a too fine grain).</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
"><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">However,</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>- type abstraction means are =
missing in the ocaml</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>object system (type =
definitions -- e.g. in Scala --</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>are not possible in =
classes and objects, but also</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>nested-inner classes are =
not available). Thus, a</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>usual technique is to =
embed classes into modules/</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>functors (a technique =
which works quite well, but</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>can become =
cumbersome).</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; ">On the other hand,</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 </SPAN>- A very good point to the =
ocaml object system is the</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>``open object types'' =
which make type inference</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>fully operational on any =
program where method</DIV><DIV style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>invocations occur. As a =
result, it is very easy to</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>mix styles : classes are =
not a definitive modeling</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>choice. There are just a =
powerful construction of</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>new types, and the module =
system may remain mostly</DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
class=3D"Apple-converted-space">=A0 =A0 </SPAN>in charge.</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">I'll be quite =
interested in your summary about these</DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">questions (and by the way, in new versions of Moby...)</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
">Yours,</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
margin-bottom: 0px; margin-left: 0px; ">Ph. Narbel</DIV><DIV =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px; min-height: 14px; "><BR></DIV> =
</BLOCKQUOTE></DIV><BR></DIV></BODY></HTML>=

--Apple-Mail-34-514588143--

