Return-Path: <merijn.de.jonge@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 679BBBBBB
	for <caml-list@yquem.inria.fr>; Mon, 27 Feb 2006 15:49:53 +0100 (CET)
Received: from pproxy.gmail.com (pproxy.gmail.com [64.233.166.183])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k1REnqfH009006
	for <caml-list@yquem.inria.fr>; Mon, 27 Feb 2006 15:49:52 +0100
Received: by pproxy.gmail.com with SMTP id s49so745415pyc
        for <caml-list@yquem.inria.fr>; Mon, 27 Feb 2006 06:49:52 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:mime-version:content-type;
        b=bjeqmd8YcLUZSIgIQQu1sVnWz8b3cOQWFtdm/xbSAk8kRzOIK4BP5R7XxXJSLxVvahEUSqtW/JZjU6mJPU4egmyWNnENkiLQpBOX+Fbgm1q2SAF+rSaBpnWz9GfDaW01WCzx8hfhdCLIHHYHYcmwImfkGPt3/4AiHmEzFW6Hq3Q=
Received: by 10.65.188.15 with SMTP id q15mr4902193qbp;
        Mon, 27 Feb 2006 06:49:51 -0800 (PST)
Received: by 10.64.253.4 with HTTP; Mon, 27 Feb 2006 06:49:51 -0800 (PST)
Message-ID: <f40e02a60602270649w5959ac06ldf2bf1f9820bbb72@mail.gmail.com>
Date: Mon, 27 Feb 2006 15:49:51 +0100
From: "Merijn de Jonge" <merijn.de.jonge@gmail.com>
To: caml-list@yquem.inria.fr
Subject: Writing Identity Functors (or Wrapper modules) in OCAML
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_3370_2096655.1141051791204"
X-Miltered: at nez-perce with ID 44031190.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; functors:01 ocaml:01 functor:01 ocaml:01 functor:01 sig:01 val:01 struct:01 struct:01 compiler:01 ocamlc:01 mismatch:01 sig:01 val:01 compiler:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.9 required=5.0 tests=HTML_40_50,HTML_MESSAGE,
	RCVD_BY_IP,RCVD_IN_BL_SPAMCOP_NET autolearn=disabled version=3.0.3

------=_Part_3370_2096655.1141051791204
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hi,

I've problems in writing an Identity Functor in OCAML that I want to use as
a wrapper module.

Consider the following OCAML definition containing the type IHelloWorld, th=
e
module World, an Identity functor
defined in the module Wrapper, and the binding of World to Wrapper in the
module TestWrapper:

      module type IHelloWorld =3D
      sig
         type helloWorldType =3D Hello | World
        val hello : unit -> helloWorldType
      end

      module Wrapper (X: IHelloWorld) : IHelloWorld =3D
      struct
        type helloWorldType =3D X.helloWorldType
        let hello =3D X.hello
      end

      module World : IHelloWorld =3D
      struct
         type helloWorldType =3D Hello | World
         let hello () =3D Hello
      end

      module TestWrapper =3D Wrapper(World)

If I compile this module I get the following output from the OCAML compiler

      mdejonge> ocamlc wrapper-demo.ml
      File "wrapper-demo.ml", line 8, characters 3-85:
      Signature mismatch:
      Modules do not match:
        sig
          type helloWorldType =3D X.helloWorldType
          val hello : unit -> X.helloWorldType
        end
      is not included in
        IHelloWorld
     Type declarations do not match:
        type helloWorldType =3D X.helloWorldType
      is not included in
        type helloWorldType =3D Hello | World

If I change helloWorldType into "int" and let the definition of hello yield
(say) 10:

      type helloWorldType =3D int
      let hello () =3D 10

Then the compiler issues no error at all!

Using a "with type" construct in the module definition of Wrapper does not
work:

      module Wrapper (X: IHelloWorld) : IHelloWorld  with type
helloWorldType =3D X.helloWorldType =3D

I don't understand what is going on. Can anyone help me understanding this
problem and help me
writing a wrapper module as above?

Many thanks in advance

Best regards,
Merijn de Jonge

------=_Part_3370_2096655.1141051791204
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hi,<br><br>I've problems in writing an Identity Functor in OCAML that I wan=
t to use as a wrapper module. <br><br>Consider the following OCAML definiti=
on containing the type IHelloWorld, the module World, an Identity functor=
=20
<br>defined in the module Wrapper, and the binding of World to Wrapper in t=
he module TestWrapper:<br><br>&nbsp; &nbsp; &nbsp; module type IHelloWorld =
=3D<br>&nbsp; &nbsp; &nbsp; sig<br>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; t=
ype helloWorldType =3D Hello | World<br>&nbsp; &nbsp; &nbsp; &nbsp; val hel=
lo : unit -&gt; helloWorldType
<br>&nbsp; &nbsp; &nbsp; end<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; module W=
rapper (X: IHelloWorld) : IHelloWorld =3D<br>&nbsp; &nbsp; &nbsp; struct<br=
>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; type helloWorldType =3D X.helloWorldType<=
br>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; let hello =3D X.hello<br>&nbsp; &nbsp; =
&nbsp; end<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; module World : IHelloWorld=
 =3D
<br>&nbsp; &nbsp; &nbsp; struct<br>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; type h=
elloWorldType =3D Hello | World<br>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; l=
et hello () =3D Hello<br>&nbsp; &nbsp; &nbsp; end<br><br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp; module TestWrapper =3D Wrapper(World)<br><br>If I compile this=
 module I get the following output from the OCAML compiler
<br><br>&nbsp; &nbsp; &nbsp; mdejonge&gt; ocamlc <a href=3D"http://wrapper-=
demo.ml">wrapper-demo.ml</a><br>&nbsp; &nbsp; &nbsp; File &quot;<a href=3D"=
http://wrapper-demo.ml">wrapper-demo.ml</a>&quot;, line 8, characters 3-85:=
<br>&nbsp; &nbsp; &nbsp; Signature mismatch:<br>
&nbsp; &nbsp; &nbsp; Modules do not match:<br>&nbsp; &nbsp;&nbsp; &nbsp;&nb=
sp; sig<br>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; type helloWorldType =3D =
X.helloWorldType<br>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; val hello : uni=
t -&gt; X.helloWorldType<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; end<br>&nbsp; =
&nbsp; &nbsp; is not included in<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; IHello=
World<br>&nbsp;&nbsp; &nbsp; Type declarations do not match:
<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; type helloWorldType =3D X.helloWorldTy=
pe<br>&nbsp; &nbsp; &nbsp; is not included in<br>&nbsp; &nbsp;&nbsp; &nbsp;=
&nbsp; type helloWorldType =3D Hello | World<br><br>If I change helloWorldT=
ype into &quot;int&quot; and let the definition of hello yield (say) 10:
<br><br>&nbsp; &nbsp; &nbsp; type helloWorldType =3D int<br>&nbsp; &nbsp; &=
nbsp; let hello () =3D 10<br><br>Then the compiler issues no error at all!<=
br><br>Using a &quot;with type&quot; construct in the module definition of =
Wrapper does not work:<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; module Wrapper (X: IHelloWorld) : IHelloWorl=
d&nbsp; with type helloWorldType =3D X.helloWorldType =3D<br><br>I don't un=
derstand what is going on. Can anyone help me understanding this problem an=
d help me <br>writing a wrapper module as above?
<br><br>Many thanks in advance<br><br>Best regards,<br>Merijn de Jonge<br><=
br><br><br><br><br><br>

------=_Part_3370_2096655.1141051791204--

