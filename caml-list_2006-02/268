Return-Path: <micha-1@fantasymail.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 4B162BBBB
	for <caml-list@yquem.inria.fr>; Sun, 26 Feb 2006 21:21:14 +0100 (CET)
Received: from mail.gmx.net (mail.gmx.net [213.165.64.20])
	by nez-perce.inria.fr (8.13.0/8.13.0) with SMTP id k1QKLD7G026134
	for <caml-list@yquem.inria.fr>; Sun, 26 Feb 2006 21:21:13 +0100
Received: (qmail invoked by alias); 26 Feb 2006 20:21:13 -0000
Received: from p54A31AFB.dip0.t-ipconnect.de (EHLO [192.168.2.136]) [84.163.26.251]
  by mail.gmx.net (mp029) with SMTP; 26 Feb 2006 21:21:13 +0100
X-Authenticated: #20477425
From: Michael Wohlwend <micha-1@fantasymail.de>
To: OCaml Mailing List <caml-list@yquem.inria.fr>
Subject: algorithm question
Date: Sun, 26 Feb 2006 21:21:52 +0100
User-Agent: KMail/1.9.1
X-Face: S)[vu%Bha1d&ej9GfwAq~7C}A,y[B.uS}+D6'hb~xPwsxymw$fnCOaMe<*bnUajSBR_m?R
	@V3;iX8[A}z`.%pEQ1r7iZhN8#ktTCBQ}&mkx>=RH&l|l6\]NZI@
MIME-Version: 1.0
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200602262121.52645.micha-1@fantasymail.de>
X-Y-GMX-Trusted: 0
X-Miltered: at nez-perce with ID 44020DB9.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; knuth:01 dancing:98 algorithm:01 algorithm:01 shorter:02 functional:02 seems:03 structure:04 implement:05 papers:05 edu:07 michael:08 michael:08 execution:10 solve:10 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_FAIL autolearn=disabled 
	version=3.0.3


I want to implement the dancing link algorithm as described here:
http://www-cs-faculty.stanford.edu/~knuth/papers/dancing-color.ps.gz

has someone an idea if there is an equally fast way to implent this more 
functional? The method in the paper seems pretty good, just adjusting a the 
linksfields of the structure...

you can solve puzzle problems with this algorithm and shorter (execution time) 
is really better here :-)

thanks
 Michael


