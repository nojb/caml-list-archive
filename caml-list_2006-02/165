Return-Path: <shutej@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id EDEBCBBBB
	for <caml-list@yquem.inria.fr>; Sun, 19 Feb 2006 18:21:44 +0100 (CET)
Received: from wproxy.gmail.com (wproxy.gmail.com [64.233.184.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k1JHLh2E002671
	for <caml-list@yquem.inria.fr>; Sun, 19 Feb 2006 18:21:43 +0100
Received: by wproxy.gmail.com with SMTP id 50so733022wri
        for <caml-list@yquem.inria.fr>; Sun, 19 Feb 2006 09:21:43 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=mAy6fui1w24vm9iV0DrH+Cm28dLAVtP5dyY7o5dNu2hy2aV18zgyZ7E1bu50aiZA6CbDMQlzib+oLTP4HvYLdqfucMXchnd9EkknV4J3s7s3Y+LRxgKMr4Bs8ue4kKGTRJwKiq7yGf1gwEkZxGjm34CGYF/5OY2pydbN6goBNuY=
Received: by 10.64.150.16 with SMTP id x16mr251817qbd;
        Sun, 19 Feb 2006 09:21:42 -0800 (PST)
Received: by 10.65.193.14 with HTTP; Sun, 19 Feb 2006 09:21:42 -0800 (PST)
Message-ID: <8c64de0a0602190921y557577f8pc3114e0bbeb1aa56@mail.gmail.com>
Date: Sun, 19 Feb 2006 12:21:42 -0500
From: "Jeremy Shute" <shutej@gmail.com>
To: "Brian Hurt" <bhurt@spnz.org>
Subject: Re: [Caml-list] What library to use for arbitrary precision decimals
Cc: "Joshua Smith" <kognate@gmail.com>, caml-list@yquem.inria.fr
In-Reply-To: <Pine.LNX.4.63.0602190934300.17832@localhost.localdomain>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_10215_2912414.1140369702896"
References: <d68fa980602190543g46a86620xfdd584ca2110768d@mail.gmail.com>
	 <Pine.LNX.4.63.0602190934300.17832@localhost.localdomain>
X-Miltered: at nez-perce with ID 43F8A927.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 computations:01 milliseconds:01 skipping:01 profiler:01 rounding:01 integers:01 computations:01 caml-list:01 beginner's:01 ocaml:01 beginners:01 bug:01 milliseconds:01 skipping:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.9 required=5.0 tests=HTML_20_30,HTML_MESSAGE,
	RCVD_BY_IP,US_DOLLARS_3 autolearn=disabled version=3.0.3

------=_Part_10215_2912414.1140369702896
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

If you use the Int64 module as the basis for your computations, you can
hold values up to $184,467,440,737,095.51 in size.

How many Vietnamese Dongs is that?  Some CIA factbook estimates of the GDP
of the world:

$US 5.938e+13

One dollar will buy you a lot of Vietnamese Dongs:

$VND 1.5838e+4

So, the GDP of the world (a popular number, to be sure) is about:

$VND 9.4046e+17

...and the the max signed int64 is around...

9.2234e+18

This is not an isolated case, there are quite a few currencies in the $? 10=
K
/ $US 1 range.  Point: you're one locale change and some depreciation away
from overflowing when someone wants to calculate a ratio for analysis.  Why
not use a big int?

If you're keeping things in a database, you're going to be spending
milliseconds skipping across the disk for this and that -- what's the point
of placing an arbitrary limit on the size?  If the profiler shows that
you're eating cycles like candy, optimize your routine back down.

Jeremy



On 2/19/06, Brian Hurt <bhurt@spnz.org> wrote:
>
>
>
> On Sun, 19 Feb 2006, Joshua Smith wrote:
>
> > There are a couple of ways to handle money transactions without
> > rounding errors.
> >
> > You could use the Nums library, which provides arbitrary precision
> > calculations and numbers.   But even with arbitrary precision numbers,
> > you still can have the situation where you get 405.0345 which if this
> > were USD, you would still have to round if you wanted to pay someone
> > this amount.  You will still have the arbitrary precision this way,
> > however.
> >
> > The best way to handle money (in my experience) is to use integers.
> > Then you can define conversion functions but only have to convert it
> > to decimal for display purposes.  That way, even if you do a million
> > transactions you won't lose any information.   You can also handle
> > non-decimal based currencies/instruments/transactions that way[1]
>
> I agree with this recommendation.  The basic idea is that you use fixed
> point.  Say you want to be accurate to one thousandth of a cent (0.001
> cents).  You simply do all calculations in terms of millicents.  So the
> integer 1 represents one millicent.  One penny is represented as the
> integer 1,000- one thousand millicents.  The amount $2,345.67 is
> represented by the integer 234,567,000.
>
> If you use the Int64 module as the basis for your computations, you can
> hold values up to $184,467,440,737,095.51 in size.  This is larger than
> the world's GDP, so it should be large enough.  32 bits isn't enough- tha=
t
> only allows you to hold values up to $42,949.67.
>
> Brian
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_10215_2912414.1140369702896
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

<span><span style=3D"font-style: italic;">If you use the Int64 module as th=
e basis for your computations, you can</span><br style=3D"font-style: itali=
c;"><span style=3D"font-style: italic;">hold values up to $184,467,440,737,=
095.51
 in size.</span><br><br>How many Vietnamese Dongs is that?&nbsp; Some CIA f=
actbook estimates of the GDP of the world:<br><br>$US 5.938e+13<br><br>One =
dollar will buy you a lot of Vietnamese Dongs:<br><br>$VND 1.5838e+4<br><br=
>
So, the GDP of the world (a popular number, to be sure) is about:<br><br>$V=
ND 9.4046e+17<br><br>...and the the max signed int64 is around...<br><br>9.=
2234e+18<br><br>This is not an isolated case, there are quite a few currenc=
ies in the $? 10K / $US 1 range.&nbsp; Point: you're one locale change and =
some depreciation away from overflowing when someone wants to calculate a r=
atio for analysis.&nbsp; Why not use a big int?
<br><br>If you're keeping things in a database, you're going to be spending=
 milliseconds skipping across the disk for this and that -- what's the poin=
t of placing an arbitrary limit on the size?&nbsp; </span><span>If the prof=
iler shows that you're eating cycles like candy, optimize your routine back=
 down.
</span><br><span><br></span>Jeremy<br><br><br><br><div><span class=3D"gmail=
_quote">On 2/19/06, <b class=3D"gmail_sendername">Brian Hurt</b> &lt;<a hre=
f=3D"mailto:bhurt@spnz.org">bhurt@spnz.org</a>&gt; wrote:</span><blockquote=
 class=3D"gmail_quote" style=3D"border-left: 1px solid rgb(204, 204, 204); =
margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br><br>On Sun, 19 Feb 2006, Joshua Smith wrote:<br><br>&gt; There are a co=
uple of ways to handle money transactions without<br>&gt; rounding errors.<=
br>&gt;<br>&gt; You could use the Nums library, which provides arbitrary pr=
ecision
<br>&gt; calculations and numbers.&nbsp;&nbsp; But even with arbitrary prec=
ision numbers,<br>&gt; you still can have the situation where you get 405.0=
345 which if this<br>&gt; were USD, you would still have to round if you wa=
nted to pay someone
<br>&gt; this amount.&nbsp;&nbsp;You will still have the arbitrary precisio=
n this way,<br>&gt; however.<br>&gt;<br>&gt; The best way to handle money (=
in my experience) is to use integers.<br>&gt; Then you can define conversio=
n functions but only have to convert it
<br>&gt; to decimal for display purposes.&nbsp;&nbsp;That way, even if you =
do a million<br>&gt; transactions you won't lose any information.&nbsp;&nbs=
p; You can also handle<br>&gt; non-decimal based currencies/instruments/tra=
nsactions that way[1]
<br><br>I agree with this recommendation.&nbsp;&nbsp;The basic idea is that=
 you use fixed<br>point.&nbsp;&nbsp;Say you want to be accurate to one thou=
sandth of a cent (0.001<br>cents).&nbsp;&nbsp;You simply do all calculation=
s in terms of millicents.&nbsp;&nbsp;So the
<br>integer 1 represents one millicent.&nbsp;&nbsp;One penny is represented=
 as the<br>integer 1,000- one thousand millicents.&nbsp;&nbsp;The amount $2=
,345.67 is<br>represented by the integer 234,567,000.<br><br>If you use the=
 Int64 module as the basis for your computations, you can
<br>hold values up to $184,467,440,737,095.51 in size.&nbsp;&nbsp;This is l=
arger than<br>the world's GDP, so it should be large enough.&nbsp;&nbsp;32 =
bits isn't enough- that<br>only allows you to hold values up to $42,949.67.=
<br><br>Brian<br>
<br>_______________________________________________<br>Caml-list mailing li=
st. Subscription management:<br><a href=3D"http://yquem.inria.fr/cgi-bin/ma=
ilman/listinfo/caml-list">http://yquem.inria.fr/cgi-bin/mailman/listinfo/ca=
ml-list
</a><br>Archives: <a href=3D"http://caml.inria.fr">http://caml.inria.fr</a>=
<br>Beginner's list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs">http://groups.yahoo.com/group/ocaml_beginners</a><br>Bug reports: <a hr=
ef=3D"http://caml.inria.fr/bin/caml-bugs">
http://caml.inria.fr/bin/caml-bugs</a><br></blockquote></div><br>

------=_Part_10215_2912414.1140369702896--

