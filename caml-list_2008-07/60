Return-Path: <info@gerd-stolpmann.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id BF49DBBAF
	for <caml-list@yquem.inria.fr>; Thu, 10 Jul 2008 21:16:33 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsgCAEj9dUjU436zgWdsb2JhbACBWpBLAQEQIAOfMwE
X-IronPort-AV: E=Sophos;i="4.30,339,1212357600"; 
   d="scan'208";a="27214400"
Received: from moutng.kundenserver.de ([212.227.126.179])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 10 Jul 2008 21:16:33 +0200
Received: from gate.lan.gerd-stolpmann.de (dslb-088-068-196-079.pools.arcor-ip.net [88.68.196.79])
	by mrelayeu.kundenserver.de (node=mrelayeu1) with ESMTP (Nemesis)
	id 0MKwpI-1KH1cT1Du3-0001iU; Thu, 10 Jul 2008 21:15:57 +0200
Received: from [192.168.0.32] (fw.lan.gerd-stolpmann.de [192.168.1.1])
	by gate.lan.gerd-stolpmann.de (Postfix) with ESMTP id D9E22C077;
	Thu, 10 Jul 2008 21:15:56 +0200 (CEST)
Subject: Re: [Caml-list] thousands of CPU cores
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: J C <jhc0033@gmail.com>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <c6c368760807092257v7a125fey534fbc6d5444d14@mail.gmail.com>
References: <c6c368760807092257v7a125fey534fbc6d5444d14@mail.gmail.com>
Content-Type: text/plain
Date: Thu, 10 Jul 2008 21:15:56 +0200
Message-Id: <1215717356.24773.17.camel@flake.lan.gerd-stolpmann.de>
Mime-Version: 1.0
X-Mailer: Evolution 2.12.1 
Content-Transfer-Encoding: 7bit
X-Provags-ID: V01U2FsdGVkX1+bUcS6WVNr/oIki5v+YphbNmwZI7wAHz2Mppu
 o2stFPJEtu6k0kAMdhe+Yldmstv+elgIr6lPbZk/tJB+q3nAJp
 71dmFhBj1XtU05ih567dHODTPkjyYdk
X-Spam: no; 0.00; gerd:01 stolpmann:01 haskell:01 ocaml:01 ocaml:01 gerd:01 stolpmann:01 viktoriastr:01 64293:01 darmstadt:01 6151:01 6151:01 cnet:98 propaganda:98 ...,:98 


Am Mittwoch, den 09.07.2008, 22:57 -0700 schrieb J C:
> I know that Caml team wanted to see if many-core shared-memory systems
> were going to stick around before bothering with Caml development that
> takes advantage of them.
> 
> Well, it looks like they are here to stay, after all:
> 
> http://news.cnet.com/8301-13924_3-9981760-64.html
> 
> As much as I hate to look a gift horse in the mouth, and I think Caml
> has been a great and grossly underappreciated product, I need to see
> if writing Caml is a viable code investment for the coming years or
> something like Haskell, SML, F# or even Ada will be a better long-term
> alternative.
> 
> Are there plans to make Caml threads OS-native threads, or add
> OpenMP-style primitives, or otherwise support multiple CPU cores? And
> if so, roughly in what time frame?

I wouldn't take this article too seriously. It's just speculation.
Actually, the whole multi-core technology is a challenge for software
development. You cannot simply take a program that runs well on 4 cores
and expect that it scales up to 400. Software must be designed from
grounds up differently for such architectures. 

Just open up your mind to this perspective: It's a big risk for the CPU
vendors to haven taken the direction to multi-core. Except for some
standard components and some specially-adapted programs multi-core is
more or less not exploited today. So these vendors are trying to push
the software developers into this direction, and hope they find new
ideas for designing multi-core-capable programs. This article is just
propaganda for this hidden agenda. It can also happen that multi-core
with too many cores turns out as failure - in the sense that the mass
market is not ready for it.

In Ocaml you can exploit multi-core currently only by using
multi-processing parallel programs that communicate over message passing
(and only on Unix). Actually, it's an excellent language for this style.
I've written (with some other guys) a big distributed system using
Ocamlnet's netplex and sunrpc libraries (actually, a search engine...,
http://wink.com). Ocaml is an excellent choice because you can quickly
develop working programs that run 24/7. In the distributed world
stability is quite important.

For a quick introduction to the technology I'm talking about, see my
blog article here: http://blog.camlcity.org/blog/parallelmm.html

Gerd
-- 
------------------------------------------------------------
Gerd Stolpmann * Viktoriastr. 45 * 64293 Darmstadt * Germany 
gerd@gerd-stolpmann.de          http://www.gerd-stolpmann.de
Phone: +49-6151-153855                  Fax: +49-6151-997714
------------------------------------------------------------


