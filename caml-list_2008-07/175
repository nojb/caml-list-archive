Return-Path: <andre@digirati.com.br>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id D7577BB84
	for <caml-list@yquem.inria.fr>; Wed, 16 Jul 2008 02:41:36 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAHzgfEjAXQIn/2dsb2JhbACwXA
X-IronPort-AV: E=Sophos;i="4.30,369,1212357600"; 
   d="scan'208";a="13147091"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 16 Jul 2008 02:41:36 +0200
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m6G0fa3n024158
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Wed, 16 Jul 2008 02:41:36 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkQDAD/gfEjIuX5CiGdsb2JhbACSPQEBAQ8gnWc
X-IronPort-AV: E=Sophos;i="4.30,369,1212357600"; 
   d="scan'208";a="15144009"
Received: from mta19.f3.k8.com.br ([200.185.126.66])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 16 Jul 2008 02:41:35 +0200
Received: from localhost (localhost [127.0.0.1])
	by smtpa.f3.k8.com.br (Postfix) with ESMTP id 67CBB28000A2;
	Wed, 16 Jul 2008 00:41:32 +0000 (GMT)
X-Virus-Scanned: amavisd-new at k8.com.br
Received: from smtpa.f3.k8.com.br ([127.0.0.1])
	by localhost (mta19.f3.k8.com.br [127.0.0.1]) (amavisd-new, port 10024)
	with LMTP id YhjTeqP9i1hV; Wed, 16 Jul 2008 00:41:32 +0000 (GMT)
Received: from [189.25.240.37] (unknown [189.25.240.37])
	by smtpa.f3.k8.com.br (Postfix) with ESMTP id 4E09A2800088;
	Wed, 16 Jul 2008 00:41:31 +0000 (GMT)
Subject: Re: [Caml-list] Another question about modules
From: Andre Nathan <andre@digirati.com.br>
To: Ashish Agarwal <agarwal1975@gmail.com>
Cc: caml-list@inria.fr
In-Reply-To: <d8be5ae20807151718l56ed70f0s7005801a19ccdb2a@mail.gmail.com>
References: <1216154495.5294.9.camel@homesick>
	 <1216162299.5294.22.camel@homesick>
	 <d8be5ae20807151718l56ed70f0s7005801a19ccdb2a@mail.gmail.com>
Content-Type: text/plain
Date: Tue, 15 Jul 2008 21:44:35 -0300
Message-Id: <1216169075.5294.32.camel@homesick>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 487D43C0.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocamlc:01 mli:01 ocamlc:01 mli:01 ocamlopt:01 endline:01 val:01 val:01 beginner's:01 ocaml:01 bug:01 nathan:98 nathan:98 beginners:01 wrote:01 

Hi

I've run this:

ocamlc -c a.mli
ocamlc -c b.mli
ocamlopt -c a.ml

The third command gives the error. I thought that the circular
dependency problem was related only to mutually-dependent types on
separate modules, but I guess I was wrong.

Searching the archives, it seems that the solution is to eliminate the
references to B in A by passing a function argument to A.f, as in

  type t = { id: int }
  let f bfun x = print_int x.id; bfun x

and then in b.ml something like

  let f x = print_endline (string_of_int 42)
  let _ = let a = { A.id = 1 } in A.f f a

That appears to solve the issue, although in my actual code it means
adding an extra parameter to many functions, since the call to what was
B.f here is somewhat deep in the call stack, so maybe there is a better
solution.

Thanks,
Andre

On Tue, 2008-07-15 at 20:18 -0400, Ashish Agarwal wrote:
> Firstly, you have a circular dependency. How are you compiling? That
> should be the first error you get.
> 
> 
> On Tue, Jul 15, 2008 at 6:51 PM, Andre Nathan <andre@digirati.com.br>
> wrote:
>         I think this is similar to this simpler problem:
>         
>         a.ml:
>         
>          type t = { id: int }
>          let f x = print_int x.id; B.f x
>         
>         a.mli:
>         
>          type t
>          val f : t -> unit
>         
>         
>         b.ml:
>         
>          let f x = print_int 42
>         
>         b.mli:
>         
>          val f : A.t -> unit
>         
>         
>         Which results in "This expression has type t but is here used
>         with type
>         A.t" in a.ml, even though t and A.t are the same type. Is
>         there a
>         general solution for this kind of situation?
>         
>         Thanks,
>         
>         Andre
>         
>         _______________________________________________
>         Caml-list mailing list. Subscription management:
>         http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>         Archives: http://caml.inria.fr
>         Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>         Bug reports: http://caml.inria.fr/bin/caml-bugs
>         
> 
> 

