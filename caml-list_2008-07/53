Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 04163BBAF
	for <caml-list@yquem.inria.fr>; Thu, 10 Jul 2008 13:37:13 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av0EAHiRdUjUnw6DZWdsb2JhbACCOZAjEiADnXs
X-IronPort-AV: E=Sophos;i="4.30,338,1212357600"; 
   d="scan'208";a="27197608"
Received: from pih-relay04.plus.net ([212.159.14.131])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/AES256-SHA; 10 Jul 2008 13:37:13 +0200
Received: from [90.192.139.4] (helo=beast.local)
	 by pih-relay04.plus.net with esmtpa (Exim) id 1KGuSW-0005JZ-1n
	for caml-list@yquem.inria.fr; Thu, 10 Jul 2008 12:37:12 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] thousands of CPU cores
Date: Thu, 10 Jul 2008 12:35:42 +0100
User-Agent: KMail/1.9.9
References: <c6c368760807092257v7a125fey534fbc6d5444d14@mail.gmail.com>
In-Reply-To: <c6c368760807092257v7a125fey534fbc6d5444d14@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200807101235.42602.jon@ffconsultancy.com>
X-Plusnet-Relay: 6cdb479c2396766c4c652500a581bcfb
X-Spam: no; 0.00; haskell:01 ocaml:01 openmp:01 ocaml:01 haskell:01 frog:98 threads:01 threads:01 sml:01 sml:01 wrote:01 caml-list:01 primitives:01 caml:02 caml:02 

On Thursday 10 July 2008 06:57:44 J C wrote:
> As much as I hate to look a gift horse in the mouth, and I think Caml
> has been a great and grossly underappreciated product, I need to see
> if writing Caml is a viable code investment for the coming years or
> something like Haskell, SML, F# or even Ada will be a better long-term
> alternative.
>
> Are there plans to make Caml threads OS-native threads, or add
> OpenMP-style primitives, or otherwise support multiple CPU cores? And
> if so, roughly in what time frame?

OCaml already has OS native threads (albeit with a global lock), already 
supports OpenMP and can already be used to write parallel programs that 
exploit multiple cores.

While F# can be up to 100x faster than OCaml for some parallel tasks, there is 
no evidence indicating that SML, Haskell and Ada will be as good as OCaml, 
let alone better.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

