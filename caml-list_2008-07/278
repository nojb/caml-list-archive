Return-Path: <Xavier.Leroy@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id C69F9BBAF
	for <caml-list@yquem.inria.fr>; Fri, 25 Jul 2008 18:20:01 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.31,253,1215381600"; 
   d="scan'208";a="13454316"
Received: from estephe.inria.fr (HELO [128.93.11.95]) ([128.93.11.95])
  by mail2-relais-roc.national.inria.fr with ESMTP; 25 Jul 2008 18:20:01 +0200
Message-ID: <4889FD30.9070005@inria.fr>
Date: Fri, 25 Jul 2008 18:20:00 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
User-Agent: Thunderbird 1.5.0.7 (X11/20060915)
MIME-Version: 1.0
To: Dawid Toton <dawid.toton@uj.edu.pl>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] 'Nondeterministic' evaluation wrt exceptions
References: <4889F16B.3020903@uj.edu.pl>
In-Reply-To: <4889F16B.3020903@uj.edu.pl>
X-Enigmail-Version: 0.94.0.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; exception:01 caml-list:01 computation:01 computation:01 exceptions:01 lazy:02 lazy:02 lisp:02 construct:02 parallel:05 parallel:05 xavier:06 xavier:06 underlying:06 inria:06 

> Could you give me some advice how to evaluate really all applications
> that precede throwing an exception?

I'm not sure I fully understand what you're trying to achieve, but I'm
reminded of "futures", a construct for parallel computation that
was popular in the Lisp world in the 80's.  The classic reference
is Halstead's Multilisp system:
   http://www.cs.wisc.edu/~fischer/cs538.s04/multilisp.pdf

In a nutshell, a future is like a lazy value, but the underlying
computation is evaluated speculatively in parallel with the main
program, rather than waiting until its value is needed as in the case
of lazy evaluation.

Hope this might help,

- Xavier Leroy

