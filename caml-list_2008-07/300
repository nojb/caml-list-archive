Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id A1C34BBB7
	for <caml-list@yquem.inria.fr>; Sat, 26 Jul 2008 13:39:59 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiUEAGiqikjAXQInYWdsb2JhbACCOZALFwUGBhSbNQ
X-IronPort-AV: E=Sophos;i="4.31,255,1215381600"; 
   d="scan'208";a="15524582"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 26 Jul 2008 13:39:59 +0200
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m6QBdwog003114
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Sat, 26 Jul 2008 13:39:58 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ar4AAHepikjUnw7Vmmdsb2JhbACCOZAVAQEBAQEIBQgHEQObMw
X-IronPort-AV: E=Sophos;i="4.31,255,1215381600"; 
   d="scan'208";a="27700827"
Received: from ptb-relay02.plus.net ([212.159.14.213])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/AES256-SHA; 26 Jul 2008 13:39:58 +0200
Received: from [90.192.139.40] (helo=beast.local)
	 by ptb-relay02.plus.net with esmtpa (Exim) id 1KMi7x-0002Xq-Bl
	for caml-list@inria.fr; Sat, 26 Jul 2008 12:39:57 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@inria.fr
Subject: Re: [Caml-list] New Ocaml Plug-in for NetBeans
Date: Sat, 26 Jul 2008 12:40:10 +0100
User-Agent: KMail/1.9.9
References: <1217062966.488ae8367f0d2@webmail.inescporto.pt> <20080726200312.7cfde7ef.mle+ocaml@mega-nerd.com>
In-Reply-To: <20080726200312.7cfde7ef.mle+ocaml@mega-nerd.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200807261240.10757.jon@ffconsultancy.com>
X-Plusnet-Relay: 021193025394d8f73047f4705c03d655
X-Miltered: at concorde with ID 488B0D0E.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 autoconf:01 libtool:01 emacs:01 emacs:01 nedit:01 syntax:01 nedit:01 guis:01 solvers:01 lablgtk:01 trivial:01 lablgtk:01 bindings:01 

On Saturday 26 July 2008 11:03:12 Erik de Castro Lopo wrote:
> The same can be said for the Unix IDE, but the UNIX IDE is 100
> times more flexible and more capable than any other IDE in
> existance.

Yet we cannot even get basic documentation about potential completions from 
any Unix development environment for OCaml.

> I know Make well enough to whip up a complex make file in minutes.

Yet Make is not expressive enough so we have OMake, OCamlBuild...

> I am also intimately familair with the automake/ 
> autoconf/libtool set. Since these tools are so flexible they
> adapt to my requirements and never force me to work the way they
> are designed.

That's great but it is the writing of OCaml code that is unnecessarily 
cumbersome, not the building of it.

> > In fact mastering
> > emacs, vi, etc. with all those "modes" also requires a lot of
> > work.
>
> I don't like emacs and vi. My editor of choice for the last 13
> years has been nedit (Nirvana Editor) which has syntax highlighting
> for dozens of languages (and it easy to add new ones or modify
> existing ones), regex search/replace and macros. Its configurable
> so over the years I have bent it into the shape I  want. The same
> goes for my Unix shell.

I assume nedit does not even have basic type throwback, let alone 
documentation throwback?

> I suspect that a lot of the people who think Ocaml needs an IDE
> are people whose primay development platform is windows.

Diversifying to Windows has certainly shown me just how far behind Unix is in 
terms of usability, productivity and modern computing environments like GUIs.

Here is an example: programming the GUI Sudoku solvers in OCaml and F# for the 
OCaml and F#.NET Journal articles. I had years of experience with OCaml but 
little experience of LablGTK2 (I did not know its API at all). I had little 
experience with F# and none with Windows Forms. Yet I wrote the F# 
implementation 10x faster because the Visual Studio mode makes it trivial to 
explore unfamiliar APIs with complete graphical throwback of documentation. 
In contrast, developing the OCaml required me to use "grep" to search the 
LablGTK2 source code distribution from the command line and ocamlbrowser to 
find definitions (but there is no way to jump to related definitions and no 
way to jump back to previous definitions). That is unbelievably tedious in 
comparison.

Provided you only want to write programs that manipulate text and maybe do 
some custom OpenGL, OCaml is awesome. But if you want to write even the most 
mundane GUI application, OCaml is a world of pain compared to the 
alternatives. This could be solved by a decent graphical development 
environment.

Mathematica has by far the best GUI I have ever seen. I think it would be 
fantastic to have such an interface available for OCaml but, as I say, the 
front-end requires tight bindings to the compiler and top-level which is not 
easy with OCaml.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

