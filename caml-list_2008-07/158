Return-Path: <tab@snarc.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 5A500BB84
	for <caml-list@yquem.inria.fr>; Tue, 15 Jul 2008 09:12:04 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEACfqe0jUVZsV/2dsb2JhbACtTkM
X-IronPort-AV: E=Sophos;i="4.30,364,1212357600"; 
   d="scan'208";a="15108834"
Received: from cerberus.snarc.org ([212.85.155.21])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 15 Jul 2008 09:12:04 +0200
Received: by cerberus.snarc.org (Postfix, from userid 1000)
	id 02154129E7; Tue, 15 Jul 2008 08:11:00 +0100 (BST)
Date: Tue, 15 Jul 2008 08:11:00 +0100
From: Vincent Hanquez <tab@snarc.org>
To: Jake Donham <jake@donham.org>
Cc: Raj Bandyopadhyay <rajb@rice.edu>, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Q: Profiling ocaml using gprof
Message-ID: <20080715071100.GA10540@snarc.org>
References: <CD0FE529-ADED-4484-AD8A-9BBB227D21FC@rice.edu> <c7e4e9f0807142109q212f2f11o779156fab31a7a93@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <c7e4e9f0807142109q212f2f11o779156fab31a7a93@mail.gmail.com>
X-Warning: Email may contain unsmilyfied humor and/or satire.
User-Agent: Mutt/1.5.17+20080114 (2008-01-14)
X-Spam: no; 0.00; ocaml:01 allocates:01 blits:01 buffer:01 blit:01 wrote:01 wrote:01 caml-list:01 strings:01 argument:02 string:02 string:02 gprof:03 module:03 concat:03 

On Mon, Jul 14, 2008 at 09:09:01PM -0700, Jake Donham wrote:
>  On Mon, Jul 14, 2008 at 6:52 PM, Raj Bandyopadhyay <rajb@rice.edu> wrote:
> > 'camlPervasives__$5e_136'.
> 
> It's the string concatenation function (ASCII 5E is ^).
> 
> It allocates a new string and blits the two argument strings into it,
> so you can probably do much better with explicit use of the Buffer
> module.

or the explicit String.concat that can account for multiple
concatenations in one go (allocate once, and blit everything).

-- 
Vincent

