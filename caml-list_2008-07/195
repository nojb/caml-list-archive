Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id CD0C4BB84
	for <caml-list@yquem.inria.fr>; Thu, 17 Jul 2008 02:43:53 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAHMyfkiCNhAB/2dsb2JhbACwYQ
X-IronPort-AV: E=Sophos;i="4.31,199,1215381600"; 
   d="scan'208";a="27394860"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 17 Jul 2008 02:43:52 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m6H0hP1r009878;
	Thu, 17 Jul 2008 09:43:25 +0900 (JST)
Date: Thu, 17 Jul 2008 09:43:28 +0900 (JST)
Message-Id: <20080717.094328.191385811.garrigue@math.nagoya-u.ac.jp>
To: jeremy.yallop@ed.ac.uk
Cc: darioteixeira@yahoo.com, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Troublesome nodes
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <487BAB0B.6030000@ed.ac.uk>
References: <831.74975.qm@web54604.mail.re2.yahoo.com>
	<487BAB0B.6030000@ed.ac.uk>
X-Mailer: Mew version 5.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; nodes:01 node:01 generative:01 datatypes:01 generative:01 wrote:01 abstract:01 abstract:01 defines:01 caml-list:01 constraint:01 implemented:02 garrigue:03 garrigue:03 jacques:03 

From: Jeremy Yallop <jeremy.yallop@ed.ac.uk>
> Dario Teixeira wrote:
> >     type ('a, 'b) t = private 'a constraint 'a = [< super_node_t ]
> 
> I don't think this is quite what you want yet, although it's getting
> close!
> 
> The first problem is that phantom types must be implemented in terms
> of abstract (or at least generative) types.

This is actually the other way round: abstract and private types allow
phantom types, but abbreviations and normal datatypes (generative
ones) don't.
So the above code really defines a phantom type.

Jacques Garrigue

