Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 142CCBBAF
	for <caml-list@yquem.inria.fr>; Fri, 11 Jul 2008 19:29:57 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AogGAHc1d0jUnw6DZWdsb2JhbACCOY9vEgIeA50E
X-IronPort-AV: E=Sophos;i="4.30,346,1212357600"; 
   d="scan'208";a="13042040"
Received: from pih-relay04.plus.net ([212.159.14.131])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 11 Jul 2008 19:29:56 +0200
Received: from [90.192.139.241] (helo=beast.local)
	 by pih-relay04.plus.net with esmtpa (Exim) id 1KHMRQ-0002gW-0B
	for caml-list@yquem.inria.fr; Fri, 11 Jul 2008 18:29:56 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] thousands of CPU cores
Date: Fri, 11 Jul 2008 18:28:34 +0100
User-Agent: KMail/1.9.9
References: <c6c368760807092257v7a125fey534fbc6d5444d14@mail.gmail.com> <200807111443.53853.jon@ffconsultancy.com> <48776844.3050708@starynkevitch.net>
In-Reply-To: <48776844.3050708@starynkevitch.net>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200807111828.34619.jon@ffconsultancy.com>
X-Plusnet-Relay: 39028c0fd8d923d014e8b1b1291e7166
X-Spam: no; 0.00; basile:01 ocaml:01 bytecode:01 nativecode:01 ocaml:01 multithread:01 extensively:01 boehm:01 frog:98 wrote:01 caml-list:01 motivation:02 allocated:02 likely:08 break:08 

On Friday 11 July 2008 15:03:48 Basile STARYNKEVITCH wrote:
> As a case in point, I suggest an experiment (which unfortunately I don't
> have the time or motivation to realize). Replace the current Ocaml GC
> either in bytecode or in nativecode ocaml by Boehm's collector (which is
> multithread compatible).

Now that I come to think of it, doesn't OCaml extensively break Boehm's 
assumptions, e.g. that pointer-like values refer to the start of an allocated 
block? So Boehm is likely to not collect anything.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

