Return-Path: <vincent.aravantinos@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,
	HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 6ED72BC37
	for <caml-list@yquem.inria.fr>; Thu, 17 Sep 2009 09:31:48 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiMCAM+CsUrRVdvbkGdsb2JhbACCKC6PDYkEPwEBAQEJCQwHEwOwbIEwkDsBAwIEhBQF
X-IronPort-AV: E=Sophos;i="4.44,402,1249250400"; 
   d="scan'208,217";a="34450749"
Received: from mail-ew0-f219.google.com ([209.85.219.219])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 17 Sep 2009 09:31:47 +0200
Received: by ewy19 with SMTP id 19so130346ewy.44
        for <caml-list@yquem.inria.fr>; Thu, 17 Sep 2009 00:31:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:cc:message-id:from:to
         :in-reply-to:content-type:mime-version:subject:date:references
         :x-mailer;
        bh=U/k3LEMbcUAbpqbMAzhDupffhmhmG0/YgKK9ySzRSno=;
        b=U+NiFGaPDzExOWWt+gqLhb3nxAEyL0AXCi0nB4q/qWSmMbN6IbZAdeWcOwrSb5s7IA
         ERY9oXnyVpB968d3G2tz3KqOwe1G4UwjVoz8aB1GF4AurDBzNJmNsJQzkPJnaFFsELqH
         xUVlZsDu/S0gRbXFHwjQuvMWMEthomrPPQrhk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=cc:message-id:from:to:in-reply-to:content-type:mime-version:subject
         :date:references:x-mailer;
        b=pzo7T5hc9uSwQ0SZYa7+OS7IBg3QOW4koZgZyKbJQKqKAHSO0Yn5y4V2jfuDHz9xz9
         igWbgscDrVjSAZTaYuqx0SGVbGAwIHGlMbQKhc6mj+0O+xFh5cRMuZCKMc191v+EGzp7
         oe9mqC1GeCM4VN8l2ALwkpj+Hz2M3JOvaMXg4=
Received: by 10.211.132.3 with SMTP id j3mr179938ebn.81.1253172707256;
        Thu, 17 Sep 2009 00:31:47 -0700 (PDT)
Received: from ?172.16.16.12? (AGrenoble-257-1-104-59.w90-27.abo.wanadoo.fr [90.27.23.59])
        by mx.google.com with ESMTPS id 7sm914878eyb.12.2009.09.17.00.31.43
        (version=TLSv1/SSLv3 cipher=RC4-MD5);
        Thu, 17 Sep 2009 00:31:45 -0700 (PDT)
Cc: caml-list@yquem.inria.fr
Message-Id: <710694E5-BA66-4B84-AE91-9CC5289EF3D6@gmail.com>
From: Vincent Aravantinos <vincent.aravantinos@gmail.com>
To: Matthias Puech <puech@cs.unibo.it>
In-Reply-To: <4AB15AD4.4030809@cs.unibo.it>
Content-Type: multipart/alternative; boundary=Apple-Mail-6--12406284
Mime-Version: 1.0 (Apple Message framework v936)
Subject: Re: [Caml-list] Sets and home-made ordered types
Date: Thu, 17 Sep 2009 09:31:40 +0200
References: <4AB11511.2050506@cs.unibo.it> <002e01ca36fd$37656c60$a6304520$@metastack.com> <4AB15AD4.4030809@cs.unibo.it>
X-Mailer: Apple Mail (2.936)
X-Spam: no; 0.00; home-made:01 intersection:01 pervasives:01 cstr:01 cstr:01 cheers:01 intersection:01 pervasives:01 cheers:01 caml-list:01 constructor:01 constructor:01 undefined:01 undefined:01 pair:01 


--Apple-Mail-6--12406284
Content-Type: text/plain;
	charset=ISO-8859-1;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: quoted-printable


Le 16 sept. 09 =E0 23:38, Matthias Puech a =E9crit :

>> In terms of a strictly pure implementation of a functional Set, it =20=

>> would be
>> odd to have a "find" function - you'll also get some interesting =20
>> undefined
>> behaviour with these sets if you try to operations like union and
>> intersection but I guess you're already happy with that!
>
> It seems to me rather natural to have it: otherwise, what's the =20
> point of
> being able to provide your own compare, beside just checking for
> membership of the class?

I think that the ability to define your own 'compare' function in the =20=

original
Set module is more there to deal with different *orders* rather than =20
different
equalities.

> type t =3D F of t | G of t * t | A | B
> I want to index values of type t according to their first constructor.
> So in my set structure, there will be at most one term starting with
> each constructor, and:
> find (F(A)) (add (F(B)) empty) will return F(B)
>
> With a Set.find, it's easy:
>
> let compare x y =3D match x,y with
> | (F,F | G,G | A,A | B,B) -> 0
> | _ -> Pervasives.compare x y
>
> module S =3D Set.Make ...
>
> With the Map solution, i'm obliged to define:
>
> type cstr =3D F' | G' | A' | B'
> let cstr_of x =3D F _ -> F' | G _ -> G' etc.
>
> and then make a Map : cstr |--> t, which duplicates the occurrence of
> the constructor (F' in the key, F in the element). Besides, I'm
> responsible for making sure that the pair e.g. (G', F(A)) is not =20
> added.

But maybe that's not so much of a duplicate that you think.
Actually cstr is the type of your class equivalence on type t.
It happens that you can have a representative for each class
equivalence, which you store in your map, but that's not the class
equivalence itself.

What I mean is that if you see this through this particular
interpretation, it's rather natural to have two types for two different
kinds of objects. I think furthermore that this is easier to reason
about. For instance the 'compare' function you define is actually not
meant to compare objects of type t but their equivalence class
representatives. Defining a good compare when reasoning about type t
may be hard while when you are aware that you actually want a compare
between class representatives this can turn out to be much easier
(I ran recently in this kind of problem and this was definitely the
case). Actually that's just one of the usual advantages of using
distinct types to represent distinct notions. But your problem being
trivially solved by your extension of Set with a 'find' function I
understand that you would prefer this solution.

Cheers,
--
Vincent Aravantinos
PhD Student - LIG - CAPP Team
Grenoble, France
+33.6.11.23.34.72
vincent.aravantinos@imag.fr
http://membres-lig.imag.fr/aravantinos/


--Apple-Mail-6--12406284
Content-Type: text/html;
	charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; "><div><br></div><div><div>Le 16 =
sept. 09 =E0 23:38, Matthias Puech a =E9crit :</div><br =
class=3D"Apple-interchange-newline"><blockquote =
type=3D"cite"><div><blockquote type=3D"cite">In terms of a strictly pure =
implementation of a functional Set, it would =
be<br></blockquote><blockquote type=3D"cite">odd to have a "find" =
function - you'll also get some interesting =
undefined<br></blockquote><blockquote type=3D"cite">behaviour with these =
sets if you try to operations like union and<br></blockquote><blockquote =
type=3D"cite">intersection but I guess you're already happy with =
that!&nbsp;<br></blockquote><br>It seems to me rather natural to have =
it: otherwise, what's the point of<br>being able to provide your own =
compare, beside just checking for<br>membership of the =
class?</div></blockquote><div><br></div><div>I think that the ability to =
define your own 'compare' function in the original</div><div>Set module =
is more there to deal&nbsp;with different *orders* rather than =
different</div><div>equalities.</div><div><br></div><blockquote =
type=3D"cite"><div>type t =3D F of t | G of t * t | A | B<br>I want to =
index values of type t according to their first constructor.<br>So in my =
set structure, there will be at most one term starting with<br>each =
constructor, and:<br>find (F(A)) (add (F(B)) empty) will return =
F(B)<br><br>With a Set.find, it's easy:<br><br>let compare x y =3D match =
x,y with<br>| (F,F | G,G | A,A | B,B) -&gt; 0<br>| _ -&gt; =
Pervasives.compare x y<br><br>module S =3D Set.Make ...<br><br>With the =
Map solution, i'm obliged to define:<br><br>type cstr =3D F' | G' | A' | =
B'<br>let cstr_of x =3D F _ -&gt; F' | G _ -&gt; G' etc.<br><br>and then =
make a Map : cstr |--&gt; t, which duplicates the occurrence of<br>the =
constructor (F' in the key, F in the element). Besides, =
I'm<br>responsible for making sure that the pair e.g. (G', F(A)) is not =
added.<br></div></blockquote></div><br><div>But maybe that's not so much =
of a duplicate that you think.&nbsp;</div><div>Actually cstr is the type =
of your class equivalence on type t.</div><div>It happens that you can =
have a representative for each class&nbsp;</div><div>equivalence, which =
you store in your map, but that's not the =
class&nbsp;</div><div>equivalence itself.</div><div><br></div><div>What =
I mean is that if you see this through this =
particular</div><div>interpretation, it's rather natural to have two =
types for two different</div><div>kinds of objects. I think furthermore =
that this is easier to reason</div><div>about. For instance the =
'compare' function you define is actually not</div><div>meant to compare =
objects of type t but their equivalence =
class&nbsp;</div><div>representatives. Defining a good compare when =
reasoning about type t</div><div>may be hard while when you are aware =
that you actually want a compare</div><div>between class representatives =
this can turn out to be much easier</div><div>(I ran recently in this =
kind of problem and this was definitely the</div><div>case). Actually =
that's just one of the usual advantages of =
using&nbsp;</div><div>distinct types&nbsp;to represent distinct notions. =
But your problem being</div><div>trivially solved&nbsp;by your =
extension&nbsp;of Set with a 'find'&nbsp;function I</div><div>understand =
that you&nbsp;would prefer =
this&nbsp;solution.</div><div><br></div><div>Cheers,</div><div><span =
class=3D"Apple-style-span" style=3D"font-family: Helvetica; font-size: =
12px; ">--</span></div><div apple-content-edited=3D"true"><span =
class=3D"Apple-style-span" style=3D"border-collapse: separate; color: =
rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: =
normal; font-variant: normal; font-weight: normal; letter-spacing: =
normal; line-height: normal; orphans: 2; text-align: auto; text-indent: =
0px; text-transform: none; white-space: normal; widows: 2; word-spacing: =
0px; -webkit-border-horizontal-spacing: 0px; =
-webkit-border-vertical-spacing: 0px; =
-webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0; "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 12px; font-style: normal; font-variant: normal; =
font-weight: normal; letter-spacing: normal; line-height: normal; =
orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; =
widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; =
-webkit-border-vertical-spacing: 0px; =
-webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0px; "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 12px; font-style: normal; font-variant: normal; =
font-weight: normal; letter-spacing: normal; line-height: normal; =
orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; =
widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; =
-webkit-border-vertical-spacing: 0px; =
-webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0px; "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Helvetica; font-size: 12px; font-style: normal; font-variant: normal; =
font-weight: normal; letter-spacing: normal; line-height: normal; =
orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; =
widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; =
-webkit-border-vertical-spacing: 0px; =
-webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
auto; -webkit-text-stroke-width: 0px; "><div style=3D"word-wrap: =
break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><div>Vincent Aravantinos</div><div>PhD Student - =
LIG - CAPP Team</div><div>Grenoble, =
France</div><div>+33.6.11.23.34.72</div><div><a =
href=3D"mailto:vincent.aravantinos@imag.fr">vincent.aravantinos@imag.fr</a=
></div><div><a =
href=3D"http://membres-lig.imag.fr/aravantinos/">http://membres-lig.imag.f=
r/aravantinos/</a></div></div></span></div></span></div></span></div></spa=
n> </div><div><br></div></body></html>=

--Apple-Mail-6--12406284--

