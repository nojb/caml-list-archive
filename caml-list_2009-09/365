Return-Path: <zack@upsilon.cc>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.9 required=5.0 tests=AWL,SPF_FAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id C19B2BC37
	for <caml-list@yquem.inria.fr>; Wed, 30 Sep 2009 15:40:13 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEABb8wkpDz4He/2dsb2JhbADZJIQnBA
X-IronPort-AV: E=Sophos;i="4.44,480,1249250400"; 
   d="scan'208";a="37179093"
Received: from fettunta.fettunta.org ([67.207.129.222])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 30 Sep 2009 15:40:13 +0200
Received: from usha.takhisis.invalid (unknown [10.17.0.10])
	by fettunta.fettunta.org (Postfix) with ESMTPS id F2B1A181C8;
	Wed, 30 Sep 2009 13:40:11 +0000 (UTC)
Received: by usha.takhisis.invalid (Postfix, from userid 1000)
	id 502B96119; Wed, 30 Sep 2009 15:39:57 +0200 (CEST)
Date: Wed, 30 Sep 2009 15:39:57 +0200
From: Stefano Zacchiroli <zack@upsilon.cc>
To: caml-list@inria.fr
Cc: PXP Users ML <ocaml-pxp-users@orcaware.com>
Subject: Re: [Caml-list] xpath or alternatives
Message-ID: <20090930133957.GA32052@usha.takhisis.invalid>
Mail-Followup-To: caml-list@inria.fr,
	PXP Users ML <ocaml-pxp-users@orcaware.com>
References: <20090928121745.GA19803@annexia.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20090928121745.GA19803@annexia.org>
User-Agent: Mutt/1.5.20 (2009-06-14)
X-Spam: no; 0.00; zacchiroli:01 zack:01 0100,:01 ocaml:01 compiler:01 pxp:01 pxp:01 node:01 node:01 cheers:01 zacchiroli:01 postdoc:01 zack:01 28,:98 2009:98 

On Mon, Sep 28, 2009 at 01:17:45PM +0100, Richard Jones wrote:
> I need to do some relatively simple extraction of fields from an XML
> document.  In Perl I would use xpath, very specifically if $xml was an
> XML document[1] stored as a string, then:
> 
>     my $p = XML::XPath->new (xml => $xml);
>     my @disks = $p->findnodes ('//devices/disk/source/@dev');
>     push (@disks, $p->findnodes ('//devices/disk/source/@file'));

I've just realized that this thread can look a bit ridiculous, at least
for people used to other languages where XPath implementations can even
be found in the language standard library (the best solutions we have
thus far are: a 40-line xml-light solution, the need to use a modified
version of the OCaml compiler [yes, I know, it is compatible, but still
...], Galax with unreachable homepage, ...).

So, I was wondering, has anybody ever tried to develop an XPath
implementation on top of, say, PXP? The original announcement page of
PXP (now archived) mentions "rumors" about people which, back then, were
developing it. Has anything ever been released?

At first glance, it doesn't seem to exist any specific typing problem,
at least with XPath 1.0, since the PXP node interface is already common
for all node types. Sure XPath 2.0, when static typing is in use, can be
better integrated with the language, but that's probably already
happening in Galax.

[ Cc-ing the PXP mailing list ]

Cheers.

-- 
Stefano Zacchiroli -o- PhD in Computer Science \ PostDoc @ Univ. Paris 7
zack@{upsilon.cc,pps.jussieu.fr,debian.org} -<>- http://upsilon.cc/zack/
Dietro un grande uomo c'è ..|  .  |. Et ne m'en veux pas si je te tutoie
sempre uno zaino ...........| ..: |.... Je dis tu à tous ceux que j'aime

