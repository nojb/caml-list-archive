Return-Path: <cedilla@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id E22877ED5C
	for <caml-list@sympa.inria.fr>; Sun,  5 Aug 2012 04:47:11 +0200 (CEST)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  cedilla@gmail.com) identity=pra; client-ip=209.85.160.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  cedilla@gmail.com designates 209.85.160.54 as permitted
  sender) identity=mailfrom; client-ip=209.85.160.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-pb0-f54.google.com) identity=helo;
  client-ip=209.85.160.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="postmaster@mail-pb0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AusCABfdHVDRVaA2jWdsb2JhbABFhXuzOwgiAQEBAQcLFBIGI4IgAQEBAwESAg8EGQEbHQEDAQsGBQs3AgICHwEBEQEFARwGEx4Eh1sBAwYGnDMJA4tUT4JxhBoKGScNV4hxAQUMildnhXKBEgOITYYMgSCDfYFTiwmDJj6EHoE2BQ
X-IronPort-AV: E=Sophos;i="4.77,714,1336341600"; 
   d="ml'?scan'208";a="169097102"
Received: from mail-pb0-f54.google.com ([209.85.160.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Aug 2012 04:47:10 +0200
Received: by pbbro2 with SMTP id ro2so4398571pbb.27
        for <caml-list@inria.fr>; Sat, 04 Aug 2012 19:47:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=vZY4ktVhzxJ04ITMy1a1pr8d2mwzQW4X728MXT5UhFk=;
        b=Z+YsizfUIE9aO9rlAgxdhpd723HX/aQw1riXNZbCW8fgt97DfQlzHJShXqk2Hcd3EN
         XCWoj9mhGtuC5pwz+gTcD8OrOCbGZyfkV9EzbmDMRpcgXkxDbIqmxuTgnXXwzjg8Y53H
         oSi07U5crkUgXb7bYEQll0fy9DlIjuh2kHOkb4X+bzzTgiFrXtQQD87UzaxO7TTqxdy9
         7OwVhkQqFhMXa33UDA9ogx9uIXCiiNkzxkxyLdx1v1DPj4XhAQ4HH9yzrhOwe7Hvgx7X
         K59c52NfHZLdC5cZphswHfzSE7Tq25ysNsOjuZmCxvk8PxzugwRaY5DTvgl+zSLw8mPE
         3rNQ==
MIME-Version: 1.0
Received: by 10.68.134.161 with SMTP id pl1mr8628268pbb.29.1344134829282; Sat,
 04 Aug 2012 19:47:09 -0700 (PDT)
Received: by 10.142.173.15 with HTTP; Sat, 4 Aug 2012 19:47:09 -0700 (PDT)
In-Reply-To: <CAPFanBE0DY5gaoJxep3pG8He3+ON7Z64ZoE+xLT_0CeZXWcc5w@mail.gmail.com>
References: <CALLFq5Tz5G+A8-a8zXdNpj-gnugcPVg+1Kn610AfWW0C4dD8cQ@mail.gmail.com>
	<Prayer.1.3.5.1208041021040.3861@hermes-2.csi.cam.ac.uk>
	<CALLFq5SWTGDuS5-Z7aN_UOqtTJ0sMvghWQTGqXUshUURiOoWcg@mail.gmail.com>
	<CALLFq5Q-3pxQgcZa1H1+AA=sjyBzdQSNkHJ_q67s_-BQ6q0Faw@mail.gmail.com>
	<CAPFanBE0DY5gaoJxep3pG8He3+ON7Z64ZoE+xLT_0CeZXWcc5w@mail.gmail.com>
Date: Sat, 4 Aug 2012 19:47:09 -0700
Message-ID: <CALLFq5TCFtHE9TdsOJOPu4kd+Jf+BQEsbsrg_78ymfB51iE7wA@mail.gmail.com>
From: Reed Wilson <cedilla@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/mixed; boundary=047d7b10cec30793e104c67bc75b
X-Validation-by: cedilla@gmail.com
Subject: Re: [Caml-list] creating GADTs


--047d7b10cec30793e104c67bc75b
Content-Type: multipart/alternative; boundary=047d7b10cec30793d604c67bc759


--047d7b10cec30793d604c67bc759
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Again, thanks for all the assistance.

The warning and Match_failure in your post are what I expected in my
program, but I didn't receive either. The print_samplerate function just
returns the wrong answer. I tested it on 4.00.0 Win 32- and 64-bit, Linux
64-bit, and 4.01.0+dev6_2012-07-30 Linux 64-bit.

Even in the toplevel it runs fine:

# let print_samplerate : type id chan. (id,chan) frame_t -> unit =3D functi=
on
| {header_id =3D MPEG1; header_samplerate =3D S48000} -> Printf.printf
"M1_S48000\n"
| {header_id =3D MPEG1; header_samplerate =3D S44100} -> Printf.printf
"M1_S44100\n"
| {header_id =3D MPEG2; header_samplerate =3D S24000} -> Printf.printf
"M2_S24000\n"
| {header_id =3D MPEG2; header_samplerate =3D S22050} -> Printf.printf
"M2_S22050\n"
;;
val print_samplerate : ('id, 'chan) frame_t -> unit =3D <fun>

# let test_frame =3D frame_of_sr_id_chan (samplerate_of_int 3) (mpeg_of_int
0, channel_mode_of_int 0);;
val test_frame : (mpeg_tag_t, channel_tag_t) frame_t =3D
  {header_id =3D MPEG1; header_crc =3D true; header_samplerate =3D S22050;
   header_channel_mode =3D Channel_mono; side_bits =3D Bits_1_mono <abstr>}

# print_samplerate test_frame;;
M1_S44100
- : unit =3D ()


The exact file I ran is attached (hopefully -- are attachments good on this
list?), and it prints "M1_S44100" with no errors or warnings on all my
computers, even though I think it should give an exception or otherwise
fail. Does it do something different on yours?

Thanks,
Reed

On Sat, Aug 4, 2012 at 4:45 PM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> > I was happy to notice that this did not complain about being
> > incomplete, correctly seeing that the samplerates can only be used
> > with a matching header_id;
> >
> > However, if I then I make an invalid frame using the *_of_int functions:
> >
> > let test_frame =3D frame_of_sr_id_chan (samplerate_of_int 3)
> > (mpeg_of_int 0, channel_mode_of_int 0);;
> > print_samplerate test_frame;;
>
> Here is what I observe on my machine:
>
> # let print_samplerate : type id chan. (id,chan) frame_t -> unit =3D func=
tion
> [...]
> Warning 8: this pattern-matching is not exhaustive.
> Here is an example of a value that is not matched:
> {header_id=3DMPEG2; header_samplerate=3DS48000}
>
> # let test_frame =3D frame_of_sr_id_chan (samplerate_of_int 3)
> (mpeg_of_int 0, channel_mode_of_int 0);;
>   val test_frame : (mpeg_tag_t, channel_tag_t) frame_t =3D
>   {header_id =3D MPEG1; header_crc =3D true; header_samplerate =3D S22050;
>    header_channel_mode =3D Channel_mono; side_bits =3D Bits_1_mono <abstr=
>}
>
> # print_samplerate test_frame;;
> Exception: Match_failure ("//toplevel//", 43, -733).
>

--=20
=C3=A7

--047d7b10cec30793d604c67bc759
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Again, thanks for all the assistance.<div><br></div><div>The warning and Ma=
tch_failure in your post are what I expected in my program, but I didn&#39;=
t receive either. The print_samplerate function just returns the wrong answ=
er. I tested it on 4.00.0 Win 32- and 64-bit, Linux 64-bit, and 4.01.0+dev6=
_2012-07-30 Linux 64-bit.</div>
<div><br></div><div>Even in the toplevel it runs fine:</div><div><div><br><=
/div><div><div># let print_samplerate : type id chan. (id,chan) frame_t -&g=
t; unit =3D function</div><div>| {header_id =3D MPEG1; header_samplerate =
=3D S48000} -&gt; Printf.printf &quot;M1_S48000\n&quot;</div>
<div>| {header_id =3D MPEG1; header_samplerate =3D S44100} -&gt; Printf.pri=
ntf &quot;M1_S44100\n&quot;</div><div>| {header_id =3D MPEG2; header_sample=
rate =3D S24000} -&gt; Printf.printf &quot;M2_S24000\n&quot;</div><div>| {h=
eader_id =3D MPEG2; header_samplerate =3D S22050} -&gt; Printf.printf &quot=
;M2_S22050\n&quot;</div>
<div>;;</div><div>val print_samplerate : (&#39;id, &#39;chan) frame_t -&gt;=
 unit =3D &lt;fun&gt;</div></div><div><br></div><div># let test_frame =3D f=
rame_of_sr_id_chan (samplerate_of_int 3) (mpeg_of_int 0, channel_mode_of_in=
t 0);;</div>
<div>val test_frame : (mpeg_tag_t, channel_tag_t) frame_t =3D</div><div>=C2=
=A0 {header_id =3D MPEG1; header_crc =3D true; header_samplerate =3D S22050=
;</div><div>=C2=A0 =C2=A0header_channel_mode =3D Channel_mono; side_bits =
=3D Bits_1_mono &lt;abstr&gt;}</div>
<div><br></div><div># print_samplerate test_frame;;</div><div>M1_S44100</di=
v><div>- : unit =3D ()</div></div><div><br></div><div><br></div><div>The ex=
act file I ran is attached (hopefully -- are attachments good on this list?=
), and it prints &quot;M1_S44100&quot; with no errors or warnings on all my=
 computers, even though I think it should give an exception or otherwise fa=
il. Does it do something different on yours?</div>
<div><br></div><div>Thanks,</div><div>Reed<br><br><div class=3D"gmail_quote=
">On Sat, Aug 4, 2012 at 4:45 PM, Gabriel Scherer <span dir=3D"ltr">&lt;<a =
href=3D"mailto:gabriel.scherer@gmail.com" target=3D"_blank">gabriel.scherer=
@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">&gt; I was happy to notice=
 that this did not complain about being<br>
&gt; incomplete, correctly seeing that the samplerates can only be used<br>
&gt; with a matching header_id;<br>
&gt;<br>
&gt; However, if I then I make an invalid frame using the *_of_int function=
s:<br>
&gt;<br>
&gt; let test_frame =3D frame_of_sr_id_chan (samplerate_of_int 3)<br>
&gt; (mpeg_of_int 0, channel_mode_of_int 0);;<br>
&gt; print_samplerate test_frame;;<br>
<br>
</div>Here is what I observe on my machine:<br>
<br>
# let print_samplerate : type id chan. (id,chan) frame_t -&gt; unit =3D fun=
ction<br>
[...]<br>
Warning 8: this pattern-matching is not exhaustive.<br>
Here is an example of a value that is not matched:<br>
{header_id=3DMPEG2; header_samplerate=3DS48000}<br>
<br>
# let test_frame =3D frame_of_sr_id_chan (samplerate_of_int 3)<br>
(mpeg_of_int 0, channel_mode_of_int 0);;<br>
=C2=A0 val test_frame : (mpeg_tag_t, channel_tag_t) frame_t =3D<br>
=C2=A0 {header_id =3D MPEG1; header_crc =3D true; header_samplerate =3D S22=
050;<br>
=C2=A0 =C2=A0header_channel_mode =3D Channel_mono; side_bits =3D Bits_1_mon=
o &lt;abstr&gt;}<br>
<br>
# print_samplerate test_frame;;<br>
Exception: Match_failure (&quot;//toplevel//&quot;, 43, -733).<br></blockqu=
ote></div><div><br></div>-- <br>=C3=A7<br>
</div>

--047d7b10cec30793d604c67bc759--

--047d7b10cec30793e104c67bc75b
Content-Type: application/octet-stream; name="typetest2.ml"
Content-Disposition: attachment; filename="typetest2.ml"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_h5hilpa10

dHlwZSBtcGVnX3RhZ190ID0gWyBgTXBlZzEgfCBgTXBlZzIgXTs7DQoNCnR5
cGUgXyBtcGVnX3QgPQ0KfCBNUEVHMSA6IFs8IG1wZWdfdGFnX3QgPiBgTXBl
ZzFdIG1wZWdfdA0KfCBNUEVHMiA6IFs8IG1wZWdfdGFnX3QgPiBgTXBlZzJd
IG1wZWdfdA0KOzsNCg0KdHlwZSBfIHNhbXBsZXJhdGVfdCA9DQp8IFM0ODAw
MCA6IFs8IG1wZWdfdGFnX3QgPiBgTXBlZzFdIHNhbXBsZXJhdGVfdA0KfCBT
NDQxMDAgOiBbPCBtcGVnX3RhZ190ID4gYE1wZWcxXSBzYW1wbGVyYXRlX3QN
CnwgUzI0MDAwIDogWzwgbXBlZ190YWdfdCA+IGBNcGVnMl0gc2FtcGxlcmF0
ZV90DQp8IFMyMjA1MCA6IFs8IG1wZWdfdGFnX3QgPiBgTXBlZzJdIHNhbXBs
ZXJhdGVfdA0KOzsNCg0KdHlwZSBjaGFubmVsX3RhZ190ID0gWyBgTW9ubyB8
IGBTdGVyZW8gXTs7DQoNCnR5cGUgXyBjaGFubmVsX3QgPQ0KfCBDaGFubmVs
X21vbm8gOiBbPCBjaGFubmVsX3RhZ190ID4gYE1vbm9dIGNoYW5uZWxfdA0K
fCBDaGFubmVsX3N0ZXJlbyA6IFs8IGNoYW5uZWxfdGFnX3QgPiBgU3RlcmVv
XSBjaGFubmVsX3QNCjs7DQoNCnR5cGUgKF8sXykgc2lkZV9iaXRzX3QgPQ0K
fCBCaXRzXzFfbW9ubyA6IChpbnQgKiBpbnQpIC0+IChbYE1wZWcxXSwgW2BN
b25vXSkgc2lkZV9iaXRzX3QNCnwgQml0c18xX3N0ZXJlbyA6IChpbnQgKiBp
bnQgKiBpbnQgKiBpbnQpIC0+IChbYE1wZWcxXSwgW2BTdGVyZW9dKSBzaWRl
X2JpdHNfdA0KfCBCaXRzXzJfbW9ubyA6IGludCAtPiAoW2BNcGVnMl0sIFtg
TW9ub10pIHNpZGVfYml0c190DQp8IEJpdHNfMl9zdGVyZW8gOiAoaW50ICog
aW50KSAtPiAoW2BNcGVnMl0sIFtgU3RlcmVvXSkgc2lkZV9iaXRzX3QNCjs7
DQoNCnR5cGUgKCdpZCwnY2hhbikgZnJhbWVfdCA9IHsNCmhlYWRlcl9pZCA6
ICdpZCBtcGVnX3Q7DQpoZWFkZXJfY3JjIDogYm9vbDsNCmhlYWRlcl9zYW1w
bGVyYXRlIDogJ2lkIHNhbXBsZXJhdGVfdDsNCmhlYWRlcl9jaGFubmVsX21v
ZGUgOiAnY2hhbiBjaGFubmVsX3Q7DQpzaWRlX2JpdHMgOiAoJ2lkLCdjaGFu
KSBzaWRlX2JpdHNfdDsNCn07Ow0KDQpsZXQgbXBlZ19vZl9pbnQgPSBmdW5j
dGlvbg0KfCAwIC0+IE1QRUcxDQp8IDEgLT4gTVBFRzINCnwgXyAtPiBmYWls
d2l0aCAiQmFkIg0KOzsNCg0KbGV0IHNhbXBsZXJhdGVfb2ZfaW50ID0gZnVu
Y3Rpb24NCnwgMCAtPiBTNDgwMDANCnwgMSAtPiBTNDQxMDANCnwgMiAtPiBT
MjQwMDANCnwgMyAtPiBTMjIwNTANCnwgXyAtPiBmYWlsd2l0aCAiQmFkIg0K
OzsNCg0KbGV0IGNoYW5uZWxfbW9kZV9vZl9pbnQgPSBmdW5jdGlvbg0KfCAw
IC0+IENoYW5uZWxfbW9ubw0KfCAxIC0+IENoYW5uZWxfc3RlcmVvDQp8IF8g
LT4gZmFpbHdpdGggIkJhZCINCjs7DQoNCg0KDQoNCg0KbGV0IGZyYW1lX29m
X3NyX2lkX2NoYW4gOiB0eXBlIGlkIGNoYW4uIGlkIHNhbXBsZXJhdGVfdCAt
PiBpZCBtcGVnX3QgKiBjaGFuIGNoYW5uZWxfdCAtPiAoaWQsY2hhbikgZnJh
bWVfdCA9IGZ1biBzciAtPiBmdW5jdGlvbg0KfCAoTVBFRzEsIENoYW5uZWxf
bW9ubykgLT4ge2hlYWRlcl9pZCA9IE1QRUcxOyBoZWFkZXJfY3JjID0gdHJ1
ZTsgaGVhZGVyX3NhbXBsZXJhdGUgPSBzcjsgaGVhZGVyX2NoYW5uZWxfbW9k
ZSA9IENoYW5uZWxfbW9ubzsgc2lkZV9iaXRzID0gQml0c18xX21vbm8gKDEs
MSl9DQp8IChNUEVHMSwgQ2hhbm5lbF9zdGVyZW8pIC0+IHtoZWFkZXJfaWQg
PSBNUEVHMTsgaGVhZGVyX2NyYyA9IHRydWU7IGhlYWRlcl9zYW1wbGVyYXRl
ID0gc3I7IGhlYWRlcl9jaGFubmVsX21vZGUgPSBDaGFubmVsX3N0ZXJlbzsg
c2lkZV9iaXRzID0gQml0c18xX3N0ZXJlbyAoMSwxLDEsMSl9DQp8IChNUEVH
MiwgQ2hhbm5lbF9tb25vKSAtPiB7aGVhZGVyX2lkID0gTVBFRzI7IGhlYWRl
cl9jcmMgPSB0cnVlOyBoZWFkZXJfc2FtcGxlcmF0ZSA9IHNyOyBoZWFkZXJf
Y2hhbm5lbF9tb2RlID0gQ2hhbm5lbF9tb25vOyBzaWRlX2JpdHMgPSBCaXRz
XzJfbW9ubyAoMSl9DQp8IChNUEVHMiwgQ2hhbm5lbF9zdGVyZW8pIC0+IHto
ZWFkZXJfaWQgPSBNUEVHMjsgaGVhZGVyX2NyYyA9IHRydWU7IGhlYWRlcl9z
YW1wbGVyYXRlID0gc3I7IGhlYWRlcl9jaGFubmVsX21vZGUgPSBDaGFubmVs
X3N0ZXJlbzsgc2lkZV9iaXRzID0gQml0c18yX3N0ZXJlbyAoMSwxKX0NCjs7
DQogDQpsZXQgcHJpbnRfc2FtcGxlcmF0ZSA6IHR5cGUgaWQgY2hhbi4gKGlk
LGNoYW4pIGZyYW1lX3QgLT4gdW5pdCA9IGZ1bmN0aW9uDQp8IHtoZWFkZXJf
aWQgPSBNUEVHMTsgaGVhZGVyX3NhbXBsZXJhdGUgPSBTNDgwMDB9IC0+IFBy
aW50Zi5wcmludGYgIk0xX1M0ODAwMFxuIg0KfCB7aGVhZGVyX2lkID0gTVBF
RzE7IGhlYWRlcl9zYW1wbGVyYXRlID0gUzQ0MTAwfSAtPiBQcmludGYucHJp
bnRmICJNMV9TNDQxMDBcbiINCnwge2hlYWRlcl9pZCA9IE1QRUcyOyBoZWFk
ZXJfc2FtcGxlcmF0ZSA9IFMyNDAwMH0gLT4gUHJpbnRmLnByaW50ZiAiTTJf
UzI0MDAwXG4iDQp8IHtoZWFkZXJfaWQgPSBNUEVHMjsgaGVhZGVyX3NhbXBs
ZXJhdGUgPSBTMjIwNTB9IC0+IFByaW50Zi5wcmludGYgIk0yX1MyMjA1MFxu
Ig0KOzsNCg0KbGV0IHRlc3RfZnJhbWUgPSBmcmFtZV9vZl9zcl9pZF9jaGFu
IChzYW1wbGVyYXRlX29mX2ludCAzKSAobXBlZ19vZl9pbnQgMCwgY2hhbm5l
bF9tb2RlX29mX2ludCAwKTs7DQpwcmludF9zYW1wbGVyYXRlIHRlc3RfZnJh
bWU7Ow0KDQo=

--047d7b10cec30793e104c67bc75b--
