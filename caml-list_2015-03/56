Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 2D4BC7EEE0
	for <caml-list@sympa.inria.fr>; Sat,  7 Mar 2015 06:28:13 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.214.171;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.214.171 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.171;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f171.google.com) identity=helo;
  client-ip=209.85.214.171;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-ob0-f171.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0AjAQA/i/pUlKvWVdFcg1haBIMGvHSBcAELhW6BLwdNAQEBAQEBEAEBAQEHCwsJEjCEKBEdARseAxIDDQcwAiQBEQEFAQ4UNYd4AQMRDZgVjSSDKz4xiy6Ba4J3j04KGScNVIRsGgEFDo1qgTZTgjgMLxKBMQWKZYkFhWqBGjmFQYZMgk2BeBIjgQwJhC8gMYEDgUABAQE
X-IPAS-Result: A0AjAQA/i/pUlKvWVdFcg1haBIMGvHSBcAELhW6BLwdNAQEBAQEBEAEBAQEHCwsJEjCEKBEdARseAxIDDQcwAiQBEQEFAQ4UNYd4AQMRDZgVjSSDKz4xiy6Ba4J3j04KGScNVIRsGgEFDo1qgTZTgjgMLxKBMQWKZYkFhWqBGjmFQYZMgk2BeBIjgQwJhC8gMYEDgUABAQE
X-IronPort-AV: E=Sophos;i="5.11,356,1422918000"; 
   d="scan'208";a="102431083"
Received: from mail-ob0-f171.google.com ([209.85.214.171])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 07 Mar 2015 06:28:11 +0100
Received: by obcva8 with SMTP id va8so13479209obc.8
        for <caml-list@inria.fr>; Fri, 06 Mar 2015 21:28:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=6Uz3RnBofbxMfFSGLSB25XFY6goP0Xur68Ayn3LkZp8=;
        b=WokkFUeS/qvSM9Gj6H4ZSNOBlRrJ/eoEuV06RM1cZrjzavoqjY8wy/2VJ+E4sMRM+C
         W7+RlYsX89z2FakA9R42i3qSJnIJRSAx/h+XUxX2a5Hj0vvfYAIbgms7d5BKi8H8oosB
         gyPaF1fo87PDlQUHDWcg/0qb4Mlun6r9FHUcK50kkdOpxl4KUlPhWUqVV7kbUiiC8TC8
         9PC1L1oNK89n4r0p7v+73SCftI+nNpPyXZkX9PTu1/oPAiWD8QIqSqBsJOAtRUy1Xg6k
         shRs3ir2nvgzYsC8zP3UI6LeD4EiSQEBpZOFCniS6YbAIK7hzQSinxUy7VVHKZLGHbsW
         8xKw==
MIME-Version: 1.0
X-Received: by 10.182.165.70 with SMTP id yw6mr13701706obb.13.1425706090561;
 Fri, 06 Mar 2015 21:28:10 -0800 (PST)
Received: by 10.202.0.211 with HTTP; Fri, 6 Mar 2015 21:28:10 -0800 (PST)
Date: Sat, 7 Mar 2015 00:28:10 -0500
Message-ID: <CAK7rcp--hrwAsOD9Yo8bvOPTjXY7q0or-E0pGCpo0TCVdh-S3A@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
To: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c30c621508e30510ac1141
Subject: [Caml-list] Error with and Proper Library Usage

--001a11c30c621508e30510ac1141
Content-Type: text/plain; charset=UTF-8

So, I want to use CMU's BAP to do some internal processing for a task that
I have been assigned. One of the pertinent parts is transforming assembler
representations of CPU instructions into the BAP Intermediate Language, or
BIL. It's kind of difficult, because there's only so much documentation
that is really anything more than just the MLI interface and the OCaml Doc
generated stuff. I have a lot of questions about how to proceed, but before
I begin eliciting the problem and all, let me explain about how I got where
I am.

You can install BAP through opam, but you don't get the documentation I
don't think. So,

git clone github.com/BinaryAnalysisPlatform/bap/

and then just follow the instructions on how to build it, it's not hard at
all, I got it going on Ubuntu 14.04. The only thing I ran into was an error
on a llvm dependency, which required that I edit the opam file so that I do
"--with-llvm-version=3.4" on the configure command line as an option. After
that everything ran smoothly.

Once you run bapbuild and make and all that, if you read the Makefile you
can see that you can generate all the documentation with:

make doc

which will place the HTML files at:

_build/bap.docdir

Opening up the index file at _build/bap.docdir/index.html, you can see that
the documentation starts off with a note about using Bap.Std as everything
else is interface files. What confused me is the seeming repetition of the
documentation that is generated. It seems that some of the documentation on
some of the very same pages is duplicated for certain sections. Why does it
do so much duplication?

The next question I have has to do with code organization. It seems that
ocamldoc derives the documentation from MLI files, and I know, I know-you
can limit or edit the exposure and type definition of your ml files so that
they form modules that control access from the outside. But I don't see how
to combine usage of the modules that the BAP author has done (I haven't
read the BAP code itself in terms of the ml, just searched around, consumed
the documentation, the examples directory contents (meager) and read over
readbin.ml and bap_mc.ml

Most important regarding proper consumption of the code that I have is are
the two avenues that I think would have made it the easiest for me to make
use of the library.

First, using the toplevel I tried to construct a BIL set of statements. But
the way the code works, you actually have to compose a disassembler that is
specific to your architecture (x32/64 and ARM vs Intel or whatever). You
then have to construct memory, and from that memory construct an Insn type,
which is meant to be the canonical, cross disassembler type representation
of an instruction. I can see how module use makes for great reusability of
code. Problem is, the type definitions that the toplevel reports (baptop)
and those of which are reported in the documentation seem to differ often.
TL;DR here, I tried to get as close to the front page mention of how to use
module Disasm, which meant Disasm.insn_at_mem function, but I had a hard
time navigating the modules to create what I wanted. It seems like each one
thing depends on some other portion of the library, and at one point I hit
a dead end. The documentation mentions the same functions being exposed
copiously, but that's when the type definitions wouldn't match up or
something.

Lastly, and ultimately even more confusing is that of bap_mc.ml, which I
saw as my second easiest avenue for usage of the BAP library. I saw
bap_mc.ml line 55 as my chance;

https://github.com/BinaryAnalysisPlatform/bap/blob/master/src/bap_mc/bap_mc.ml#L55

If I just were to modify it so that it, instead of watering down the string
constructed, were to just pipe the insn object to a BIL constructor, and
then use the sexp_of_bil transformer, then I could just drop it from there
to be printed or converted to string and then printed.

Naturally, I tried with several different module's bil constructor. But
most notably I think that the Std bil constructor blew up, so here's what I
replaced that line with:

  let s = (* Sexp.to_string @@ Sexp.List (List.rev res) in*)
    sexp_of_bil (Bap.Std.Insn.bil insn) in

But then even that blew up with:

Error: This expression has type ('a, 'b) Insn.t
       but an expression was expected of type insn

Anyway that describes the past two days of jumping into the biggest ocaml
project that I've even been into. I'm really excited to become more
proficient, but I think there's something I'm missing about OCaml library
organization strategies writ large.

--001a11c30c621508e30510ac1141
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>So, I want to use CMU&#39;s BAP to do some internal p=
rocessing for a task that I have been assigned. One of the pertinent parts =
is transforming assembler representations of CPU instructions into the BAP =
Intermediate Language, or BIL. It&#39;s kind of difficult, because there&#3=
9;s only so much documentation that is really anything more than just the M=
LI interface and the OCaml Doc generated stuff. I have a lot of questions a=
bout how to proceed, but before I begin eliciting the problem and all, let =
me explain about how I got where I am.</div><div><br></div><div>You can ins=
tall BAP through opam, but you don&#39;t get the documentation I don&#39;t =
think. So,</div><div><br></div><div>git clone=C2=A0<a href=3D"http://github=
.com/BinaryAnalysisPlatform/bap/">github.com/BinaryAnalysisPlatform/bap/</a=
></div><div><br></div><div>and then just follow the instructions on how to =
build it, it&#39;s not hard at all, I got it going on Ubuntu 14.04. The onl=
y thing I ran into was an error on a llvm dependency, which required that I=
 edit the opam file so that I do &quot;--with-llvm-version=3D3.4&quot; on t=
he configure command line as an option. After that everything ran smoothly.=
</div><div><br></div><div>Once you run bapbuild and make and all that, if y=
ou read the Makefile you can see that you can generate all the documentatio=
n with:</div><div><br></div><div>make doc</div><div><br></div><div>which wi=
ll place the HTML files at:</div><div><br></div><div>_build/bap.docdir</div=
><div><br></div><div>Opening up the index file at _build/bap.docdir/index.h=
tml, you can see that the documentation starts off with a note about using =
Bap.Std as everything else is interface files. What confused me is the seem=
ing repetition of the documentation that is generated. It seems that some o=
f the documentation on some of the very same pages is duplicated for certai=
n sections. Why does it do so much duplication?</div><div><br></div><div>Th=
e next question I have has to do with code organization. It seems that ocam=
ldoc derives the documentation from MLI files, and I know, I know-you can l=
imit or edit the exposure and type definition of your ml files so that they=
 form modules that control access from the outside. But I don&#39;t see how=
 to combine usage of the modules that the BAP author has done (I haven&#39;=
t read the BAP code itself in terms of the ml, just searched around, consum=
ed the documentation, the examples directory contents (meager) and read ove=
r <a href=3D"http://readbin.ml">readbin.ml</a> and <a href=3D"http://bap_mc=
.ml">bap_mc.ml</a></div><div><br></div><div>Most important regarding proper=
 consumption of the code that I have is are the two avenues that I think wo=
uld have made it the easiest for me to make use of the library.</div><div><=
br></div><div>First, using the toplevel I tried to construct a BIL set of s=
tatements. But the way the code works, you actually have to compose a disas=
sembler that is specific to your architecture (x32/64 and ARM vs Intel or w=
hatever). You then have to construct memory, and from that memory construct=
 an Insn type, which is meant to be the canonical, cross disassembler type =
representation of an instruction. I can see how module use makes for great =
reusability of code. Problem is, the type definitions that the toplevel rep=
orts (baptop) and those of which are reported in the documentation seem to =
differ often. TL;DR here, I tried to get as close to the front page mention=
 of how to use module Disasm, which meant Disasm.insn_at_mem function, but =
I had a hard time navigating the modules to create what I wanted. It seems =
like each one thing depends on some other portion of the library, and at on=
e point I hit a dead end. The documentation mentions the same functions bei=
ng exposed copiously, but that&#39;s when the type definitions wouldn&#39;t=
 match up or something.</div><div><br></div><div>Lastly, and ultimately eve=
n more confusing is that of <a href=3D"http://bap_mc.ml">bap_mc.ml</a>, whi=
ch I saw as my second easiest avenue for usage of the BAP library. I saw <a=
 href=3D"http://bap_mc.ml">bap_mc.ml</a> line 55 as my chance;</div><div><b=
r></div><a href=3D"https://github.com/BinaryAnalysisPlatform/bap/blob/maste=
r/src/bap_mc/bap_mc.ml#L55">https://github.com/BinaryAnalysisPlatform/bap/b=
lob/master/src/bap_mc/bap_mc.ml#L55</a><br><div><br></div><div>If I just we=
re to modify it so that it, instead of watering down the string constructed=
, were to just pipe the insn object to a BIL constructor, and then use the =
sexp_of_bil transformer, then I could just drop it from there to be printed=
 or converted to string and then printed.</div><div><br></div><div>Naturall=
y, I tried with several different module&#39;s bil constructor. But most no=
tably I think that the Std bil constructor blew up, so here&#39;s what I re=
placed that line with:</div><div><br></div><div><div>=C2=A0 let s =3D (* Se=
xp.to_string @@ Sexp.List (List.rev res) in*)</div><div>=C2=A0 =C2=A0 sexp_=
of_bil (Bap.Std.Insn.bil insn) in</div></div><div><br></div><div>But then e=
ven that blew up with:</div><div><br></div><div><div>Error: This expression=
 has type (&#39;a, &#39;b) Insn.t</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0but =
an expression was expected of type insn</div></div><div><br></div><div>Anyw=
ay that describes the past two days of jumping into the biggest ocaml proje=
ct that I&#39;ve even been into. I&#39;m really excited to become more prof=
icient, but I think there&#39;s something I&#39;m missing about OCaml libra=
ry organization strategies writ large.</div></div>

--001a11c30c621508e30510ac1141--
