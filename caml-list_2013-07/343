Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 0A1AB81799
	for <caml-list@sympa.inria.fr>; Sat, 27 Jul 2013 22:08:24 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=74.125.82.49;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  philippe.veber@gmail.com designates 74.125.82.49 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.49;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f49.google.com) identity=helo;
  client-ip=74.125.82.49;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-wg0-f49.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AukBAHAo9FFKfVIxjWdsb2JhbABbDoN9vVaBEggWDgEBAQEHCwsJEgYkgiQBAQQBQAEbHQEDAQsGBQQHDS4hAQERAQUBHAYTh30BAwkGmxSMT4J/g3YKGScNZId0AQUMjQmCaAeEBQOVdoFpjCaDQRYpg3xAOg
X-IPAS-Result: AukBAHAo9FFKfVIxjWdsb2JhbABbDoN9vVaBEggWDgEBAQEHCwsJEgYkgiQBAQQBQAEbHQEDAQsGBQQHDS4hAQERAQUBHAYTh30BAwkGmxSMT4J/g3YKGScNZId0AQUMjQmCaAeEBQOVdoFpjCaDQRYpg3xAOg
X-IronPort-AV: E=Sophos;i="4.89,758,1367964000"; 
   d="scan'208";a="22477336"
Received: from mail-wg0-f49.google.com ([74.125.82.49])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 27 Jul 2013 22:08:13 +0200
Received: by mail-wg0-f49.google.com with SMTP id y10so3213644wgg.16
        for <caml-list@inria.fr>; Sat, 27 Jul 2013 13:08:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=WbPJ5pRz9MJWZTDWpMmVpz/MxkJyY6FIXrHw//oPMso=;
        b=uoMHUNkrDz5DBhNKyeiA3m04huhdhKbw+LGyUFuI6EsvwNeybc+4RUWZp6xqXBj/eB
         tMvYEh6kVh17DrggKtYozdoQkm2pG6O6p+gBiIPQiMWZMqUAH+zCuiMskESvHor9XDSE
         yQLc12SG4Mz9RUp/frV/wBDwEifzTSNAT1o8HI60j/KRix8rUet4Ov40RLaE+hk5WhKV
         IANmoruqFKV4HjlBrqW9zxVXh0KnxndP4abowQjHCQAIaqNmDf0cIXsBEZl9nqTXs8jh
         SKcsRN0c9dVPmGWIjS+tY3mUPGQ++qfN6cmqZqNbK9ggIXkds68qpK4vUalbLc7CC2FE
         H/lw==
X-Received: by 10.194.8.99 with SMTP id q3mr1995158wja.91.1374955693280; Sat,
 27 Jul 2013 13:08:13 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.41.138 with HTTP; Sat, 27 Jul 2013 13:07:53 -0700 (PDT)
In-Reply-To: <059C2901-8AFE-4E28-B1D2-BC1D660CCA3A@math.nagoya-u.ac.jp>
References: <CAOOOohToApXavb6iD01xR==MwCcVg=NZa4w_0qo69KwLdSkiNg@mail.gmail.com>
 <059C2901-8AFE-4E28-B1D2-BC1D660CCA3A@math.nagoya-u.ac.jp>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sat, 27 Jul 2013 22:07:53 +0200
Message-ID: <CAOOOohSr3gz69v8CpWUqLP8mfxpXxVc9ve9v-H0+6_S+fCFayQ@mail.gmail.com>
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7b5d6592ae156e04e283d1e0
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Narrowing a signature with a constrained type


--047d7b5d6592ae156e04e283d1e0
Content-Type: text/plain; charset=ISO-8859-1

Thanks for the explanation Jacques!

To be honest I was expecting the difficulty to lie in comparing two
constrained definitions (in my example, that would mean that type 'a format
would already be constrained and I'd be trying to narrow it further with
another constrained type). I thought the particular case where the original
type is unconstrained would be easier, but yeah, this is certainly more
difficult than it looks!

ph.


2013/7/27 Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>

> On 2013/07/26, at 22:32, Philippe Veber <philippe.veber@gmail.com> wrote:
>
> > Dear camlers,
> >
> > Out of curiosity, I'd be happy to understand why the following
> definition is rejected:
> >
> > # module type T = sig type 'a format end;;
> > module type T = sig type 'a format end
> > # module F(X : T with type 'a format = 'a list constraint 'a = < .. >) =
> struct end;;
> > File "", line 1, characters 13-67:
>                                                     Error: In this `with'
> constraint, the new definition of format does not match its original
> definition in the constrained signature:
> > Type declarations do not match: type 'a format = 'a0 list is not
> included in type 'a format
> >        Their constraints differ.
> >
> > Would it be unsound to allow it?
>
> Well, to ensure the coherence of the with constraints, we require that
> the new signature be a subtype of the original one (as a module, not as an
> object).
> This is where your code gets rejected.
>
> Now why is it deemed unsafe to allow a constrained type definition to be a
> subtype of
> an unconstrained one?
> Actually, I don't know.
> The unconstrained type does not enforce the invariants of the constrained
> one,
> but they will be checked as soon as you try to unify the two.
> So it may be possible to lift this restriction.
>
> However, there are technical difficulties in comparing a constrained
> definition
> with an unconstrained one, so this might just be the main reason.
> This would also have an impact on the invariants of types through
> abstraction.
>
> Jacques

--047d7b5d6592ae156e04e283d1e0
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks for the explanation Jacques!<br><br>To be honest I =
was expecting the difficulty to lie in comparing two constrained definition=
s (in my example, that would mean that type &#39;a format would already be =
constrained and I&#39;d be trying to narrow it further with another constra=
ined type). I thought the particular case where the original type is uncons=
trained would be easier, but yeah, this is certainly more difficult than it=
 looks!<br>

<br>ph.<br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quo=
te">2013/7/27 Jacques Garrigue <span dir=3D"ltr">&lt;<a href=3D"mailto:garr=
igue@math.nagoya-u.ac.jp" target=3D"_blank">garrigue@math.nagoya-u.ac.jp</a=
>&gt;</span><br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><div class=3D"h5">On 2=
013/07/26, at 22:32, Philippe Veber &lt;<a href=3D"mailto:philippe.veber@gm=
ail.com">philippe.veber@gmail.com</a>&gt; wrote:<br>


<br>
&gt; Dear camlers,<br>
&gt;<br>
&gt; Out of curiosity, I&#39;d be happy to understand why the following def=
inition is rejected:<br>
&gt;<br>
&gt; # module type T =3D sig type &#39;a format end;;<br>
&gt; module type T =3D sig type &#39;a format end<br>
&gt; # module F(X : T with type &#39;a format =3D &#39;a list constraint &#=
39;a =3D &lt; .. &gt;) =3D struct end;;<br>
&gt; File &quot;&quot;, line 1, characters 13-67: =A0 =A0 =A0 =A0 =A0 =A0 =
=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0=
 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =
=A0 =A0 Error: In this `with&#39; constraint, the new definition of format =
does not match its original definition in the constrained signature:<br>


&gt; Type declarations do not match: type &#39;a format =3D &#39;a0 list is=
 not included in type &#39;a format<br>
&gt; =A0 =A0 =A0 =A0Their constraints differ.<br>
&gt;<br>
&gt; Would it be unsound to allow it?<br>
<br>
</div></div>Well, to ensure the coherence of the with constraints, we requi=
re that<br>
the new signature be a subtype of the original one (as a module, not as an =
object).<br>
This is where your code gets rejected.<br>
<br>
Now why is it deemed unsafe to allow a constrained type definition to be a =
subtype of<br>
an unconstrained one?<br>
Actually, I don&#39;t know.<br>
The unconstrained type does not enforce the invariants of the constrained o=
ne,<br>
but they will be checked as soon as you try to unify the two.<br>
So it may be possible to lift this restriction.<br>
<br>
However, there are technical difficulties in comparing a constrained defini=
tion<br>
with an unconstrained one, so this might just be the main reason.<br>
This would also have an impact on the invariants of types through abstracti=
on.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
Jacques</font></span></blockquote></div><br></div>

--047d7b5d6592ae156e04e283d1e0--
