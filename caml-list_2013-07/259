Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 3FF728179A
	for <caml-list@sympa.inria.fr>; Wed, 24 Jul 2013 19:05:46 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.214.50;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.214.50 as
  permitted sender) identity=mailfrom; client-ip=209.85.214.50;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-bk0-f50.google.com) identity=helo;
  client-ip=209.85.214.50;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-bk0-f50.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtQBAB4I8FHRVdYyk2dsb2JhbABagztQqziSKoEOCBYOAQEBAQcLCwkUBCSCJAEBAQMBAQEBPQEbEgsBAwELBgULDQ0hIQEBBAEMAQUBChIGExKHawEDCQYMm0OMT4J/hEkKGScDCmSHdAEFDI0JGYEKgUUHhAADlRhegWmBKYp+g0EWKYQ8Og
X-IPAS-Result: AtQBAB4I8FHRVdYyk2dsb2JhbABagztQqziSKoEOCBYOAQEBAQcLCwkUBCSCJAEBAQMBAQEBPQEbEgsBAwELBgULDQ0hIQEBBAEMAQUBChIGExKHawEDCQYMm0OMT4J/hEkKGScDCmSHdAEFDI0JGYEKgUUHhAADlRhegWmBKYp+g0EWKYQ8Og
X-IronPort-AV: E=Sophos;i="4.89,736,1367964000"; 
   d="scan'208";a="22153039"
Received: from mail-bk0-f50.google.com ([209.85.214.50])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 24 Jul 2013 19:05:45 +0200
Received: by mail-bk0-f50.google.com with SMTP id ik5so282819bkc.37
        for <multiple recipients>; Wed, 24 Jul 2013 10:05:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=xO5lWaeorwS8LfHGt4T5TdK7eLqhefXcENggcMhkZzA=;
        b=NPN36AgW3jE9TzlD/B6E4U7sADepDMzYl4MO+7FqbrPmaYfKuqr9DdyngXAXdHlEAH
         tyip5UuDOAhN79ubXMXKIviiWytAvzWG/+qLSU0WM6k+FqP92wxSiW/jxl23MPsZ1FoL
         hypV9QQ2QZbsNBxmM8nw4IDzpW/NtgquInloC/VrgnhaO/r5UL59n9oUa/Psml41p6JU
         TOV2Egd7BcI9TF2PCmaqBxir0AlzCjs1hVtvBmv+xaLcm2RzPVKKVDI1X9elzBiPg5+g
         qrmcbUPdmL6FOfqPH7BjssqZDhOvphu8RJypGjBdk2l/ikY4Y2PMgZsZdcUUGdW3/baM
         iM4g==
X-Received: by 10.205.34.14 with SMTP id sq14mr5696570bkb.100.1374685544767;
 Wed, 24 Jul 2013 10:05:44 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.204.20.131 with HTTP; Wed, 24 Jul 2013 10:05:04 -0700 (PDT)
In-Reply-To: <7F8931D5-E65D-49EB-B54D-A50716F3EFDD@recoil.org>
References: <1374669368.25411.5@samsung> <1B6BB035-9909-4F0C-9DEA-F713B977A467@ocamlpro.com>
 <CAP_800qRrLs4Bc-4-2wB7+UC-s-S8fEirrz0tgm-q-AOX2fraw@mail.gmail.com> <7F8931D5-E65D-49EB-B54D-A50716F3EFDD@recoil.org>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Wed, 24 Jul 2013 19:05:04 +0200
Message-ID: <CAPFanBHSK=We1cobJS=AX9BsVqUWi52Yg9fR2aaWQmvYwmsgwg@mail.gmail.com>
To: Anil Madhavapeddy <anil@recoil.org>
Cc: Markus Mottl <markus.mottl@gmail.com>, Thomas Gazagnaire <thomas@ocamlpro.com>, 
	Gerd Stolpmann <info@gerd-stolpmann.de>, Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>, 
	Francois Berenger <berenger@riken.jp>, Ocaml Mailing List <caml-list@inria.fr>
Content-Type: text/plain; charset=ISO-8859-1
Subject: Re: [Caml-list] GODI is shutting down

> I think that's fair, but the devil is in the details. The core of OASIS
> is sound, but is hampered by its need to build on top of ocamlfind
> and ocamlbuild, and the ensuing impedance mismatches that follow (e.g.
> manually editing _tags files, and trying to debug which tool a failure
> happens in is an advanced operation). OPAM packages represent an output
> collection of (several optionally built) ocamlfind packages, and
> OASIS sits awkwardly in between these two right now, with ocamlbuild
> crashing the party and getting drunk in the kitchen.

While we're at it (and hoping a diversion might restores some
constructiveness in this discussion), I have also been thinking about
this aspect of OASIS that I don't really like. I use ocamlbuild
-use-ocamlfind, but I'd rather build my _tags and myocamlbuild.ml
files completely separately from OASIS, and avoid that intermixing of
several tools. OASIS could decide which files to build (by calling
whichever build system I use with those as targets) and include in the
user installation, but I'd rather have full control of the build
system independently.

In fact, that's more or less what there is in Batteries; we use
ocamlbuild, with a Makefile on top of it (to easily integrate some
hacks such as inline tests using
https://github.com/vincent-hugot/iTeML ), and use the XCustomBuild
option of OASIS to tell it to use the makefile. This avoids having
autogenerated stuff in the ocamlbuild setup, but currently OASIS has
no say on which files to build (it gets what "make all" produces).

In theory, integrating OASIS and the build system would allow OASIS to
diffuse best practices at the build system level as well. In practice
as a package developer I'm not fond on this combination, and I would
rather let a QA pass do the kind of checks to avoid what a tight OASIS
+ build system integration would have made impossible in the first
place (missing .cmt or what not).

PS: ocamlbuild has been getting bugfixes and improvements relatively
fast these last few months, in particular thanks to the completely
benevolous efforts of Wojchiech Meyer. I'm confident it will continue
to improve on the known-problematic fronts (terse documentation,
unfriendly failure behaviours, disappointing parallelization, etc) in
the future, which may help for some of your "fast Mirage" goals.

On Wed, Jul 24, 2013 at 6:39 PM, Anil Madhavapeddy <anil@recoil.org> wrote:
> On 24 Jul 2013, at 08:58, Markus Mottl <markus.mottl@gmail.com> wrote:
>
>> My guess is that you are not totally happy with Oasis at this point so
>> this may be a topic to address.  Being an Oasis user, I would say that
>> the Oasis tools may not be as mature yet as one would hope, but the
>> Cabal-like package specification syntax seems decent enough to be
>> supported by OPAM.  It really shouldn't be that hard to automate the
>> process of updating OPAM metadata (including version constraints)
>> based on changes in Oasis package specifications.
>
> I think that's fair, but the devil is in the details. The core of OASIS
> is sound, but is hampered by its need to build on top of ocamlfind
> and ocamlbuild, and the ensuing impedance mismatches that follow (e.g.
> manually editing _tags files, and trying to debug which tool a failure
> happens in is an advanced operation). OPAM packages represent an output
> collection of (several optionally built) ocamlfind packages, and
> OASIS sits awkwardly in between these two right now, with ocamlbuild
> crashing the party and getting drunk in the kitchen.
>
> OASIS is structured very well to help get around this situation though.
> It has a library that takes care of parsing the _oasis file, and then a
> plugin generator that currently uses ocamlbuild to drive this specification
> into concrete outputs.  Meanwhile, the OCaml compiler has been exposing
> more of its innards via compiler-libs. Leo and I are taking advantage of
> this by trying to folding all of these layers into a new "packaging-friendly"
> OCaml driver that statically links:
>
> - all the camlp4 libraries required for a project, and directly calls it
>   instead of going via -pp (avoiding a fork/marshal).
> - links to OPAM/findlib to find dependencies directly, avoiding a shell
>   out to ocamlfind.
> - can publish a static schedule of its activities to help Makefiles
>   figure out what actually got built (similar to the recent ocamlbuild
>   request).
>
> The idea is to have a "ocamlmkcompiler" that builds a binary for-purpose,
> as "ocamlmktop" does today for toplevels.  It shouldn't even need any
> patches to the official compiler, thanks to compiler-libs.  More to the
> point, it should make it far easier to build a camlp4-aware js_of_ocaml
> toplevel, to fit into the experiments that OCamlPro is doing with web
> IDE interfaces.
>
> Anyway, these are still experiments and quite likely to run into unexpected
> issues as we build them, and we'll have to consider all the alternatives
> before folding them all into OPAM.
>
> Right now, OPAM dictates the *minimal* possible set of requirements for
> a package since it just uses shell commands.  It should be possible to
> specialise this for common cases such as a OASIS library, but it does
> require some careful thought first.  Luckily, we can use OPAM itself to
> conduct such experiments [1].
>
> All such discussions and experiments are very welcome on the mailing
> list (http://lists.ocaml.org/listinfo/opam-devel) to help establish
> everyone's use cases.  Daniel Buenzli's input has been particularly
> interesting to date, as his libraries adopt a very minimal shell-script
> driven approach that doesn't use OASIS, but still distributes META files.
> That's just one example of someone that doesn't use OASIS directly.
> The Core OASIS files are also a bit special due to their configuration
> requirements.  Xen/Mirage is also quite demanding in terms of the
> compilation environment.
>
> Here's my goal: I want to have near instant-rebuilds of Mirage packages.
> I know it's possible to pull this off with the existing compiler tools,
> since the monolithic Mirage tree (with lovingly crafted ocamlbuild rules
> and judicious use of native code compiler binaries) could rebuild the
> entire webserver in ~10s in parallel.  Nowadays, with OPAM, ocamlbuild,
> ocamlfind and camlp4, it takes around 2-3 minutes, which just isn't
> good enough.
>
> -anil
>
> [1] http://opam.ocamlpro.com/pkg/debug-camlp4-log.base.html: I hacked
> up a debug camlp4 to trace all the uses of camlp4 in the OPAM repository,
> during the wg-camlp4 discussion on the topic of where to go next with it.
> This just required doing a mass OPAM install, drinking some coffee, and
> reading the resulting trace logs.
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
