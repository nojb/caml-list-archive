Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA12632; Thu, 2 Aug 2001 11:42:14 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA12605 for <caml-list@pauillac.inria.fr>; Thu, 2 Aug 2001 11:42:13 +0200 (MET DST)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f729gCX18081
	for <caml-list@inria.fr>; Thu, 2 Aug 2001 11:42:12 +0200 (MET DST)
Received: from kastanie.ai.univie.ac.at (root@kastanie.ai.univie.ac.at [131.130.174.141])
	by fichte.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) with ESMTP id LAA11918;
	Thu, 2 Aug 2001 11:42:11 +0200
Received: (from markus@localhost)
	by kastanie.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id LAA16143;
	Thu, 2 Aug 2001 11:42:11 +0200
Date: Thu, 2 Aug 2001 11:42:11 +0200
From: Markus Mottl <markus@mail4.ai.univie.ac.at>
To: John R Harrison <johnh@ichips.intel.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] "super-compaction" of values
Message-ID: <20010802114211.C15610@kastanie.ai.univie.ac.at>
References: <200108011606.JAA29019@dhpc0010.pdx.intel.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <200108011606.JAA29019@dhpc0010.pdx.intel.com>; from johnh@ichips.intel.com on Wed, Aug 01, 2001 at 09:06:04 -0700
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 01 Aug 2001, John R Harrison wrote:
> About 5 years ago I became very enthusiastic about using hash-consing in
> the HOL Light prover to share common subterms of theorems. I was
> convinced it would cut space usage dramatically.

Well, it's actually not so much space savings that I am interested in,
but mostly exploiting (sub-)program equivalences to speed up expensive
computations.

> I ended up writing a naive implementation, without making stuff
> garbage-collectible, but only using it for structures I knew were
> persistent. To my chagrin, it turned out that Malcolm was absolutely
> right. Space usage actually went *up*, presumably because the hashing
> datastructures were large enough to overwhelm the small amount of
> sharing.

I can well imagine this. In my case it's not "real" programming languages
that I have to deal with, but rather quite confined ones, and there are
likely to be hundreds of not-so-large programs that mostly differ by a
few subtrees only (= lots of opportunities for sharing). It seems worth
a try...

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

