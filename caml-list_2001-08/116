Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA14765; Wed, 15 Aug 2001 04:28:47 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA14770 for <caml-list@pauillac.inria.fr>; Wed, 15 Aug 2001 04:28:46 +0200 (MET DST)
Received: from str12.sobor.org (adsl-63-198-183-99.dsl.snfc21.pacbell.net [63.198.183.99])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f7F2SiP14163;
	Wed, 15 Aug 2001 04:28:45 +0200 (MET DST)
Received: from quasar.ipa.nw.ru (anza.sobor.org [192.168.123.51])
	by str12.sobor.org (Postfix) with ESMTP
	id 0AFADAEFB7; Tue, 14 Aug 2001 19:19:45 -0700 (PDT)
Message-ID: <3B79DDC7.36D40AC3@quasar.ipa.nw.ru>
Date: Tue, 14 Aug 2001 19:26:15 -0700
From: "Alexander V. Voinov" <avv@quasar.ipa.nw.ru>
Organization: Fear of the Lord is the beginning of wisdom
X-Mailer: Mozilla 4.75 [en] (Windows NT 5.0; U)
X-Accept-Language: en
MIME-Version: 1.0
To: Xavier Leroy <Xavier.Leroy@inria.fr>
Cc: Chris Hecker <checker@d6.com>, caml-list@inria.fr
Subject: Re: [Caml-list] register_global_root, malloc, etc.
References: <4.3.2.7.2.20010726013540.027fa990@shell16.ba.best.com> <20010814102537.A4081@pauillac.inria.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi All,

Xavier Leroy wrote:
> 
> [I see that your message was left unanswered.  Hope the following late
> answer will help.]
> 
> > If I'm writing a module in C and want to have an abstract type that
> > corresponds to that struct (allocated with new/malloc/etc. from C),
> > is the following code correct?
> >
> > CAMLlocal1(result);
> > foo *p = new foo;
> > p->callback = Val_unit;
> > register_global_root(&(p->callback));
> > result = alloc_small(1,Abstract_tag);
> > Field(result,0) = (value)p;
> > CAMLreturn(result);
> >
> > Then, later, I can just assign another closure passed to a C function (and CAMLparam'ed) to p->callback without worrying about it, like this:
> >
> > value set_callback( value fooval, value callback )
> > {
> >       CAMLparam2(fooval,callback);
> >       foo *p = (foo *)Field(fooval,0);
> >       p->callback = callback;
> >       CAMLreturn(Val_unit);
> > }
> >
> > Is that correct?
> 
> Yes.
> 
> > Should I use Custom_tag and register all the finalization functions
> > and whatnot for my abstract type, or is Abstract_tag good enough
> > assuming I've got a free_foo function that users of the module are
> > supposed to call to deallocate the abstract type?  free_foo should
> > call remove_global_root before deleting the memory, right?  But I
> > don't need to do anything to explicitly delete the callback or the
> > Abstract_tag block that was passed in since the GC will handle it?
> 
> You're 100% correct.  The only advantage of Custom_tag over
> Abstract_tag is that finalization can be handled by the GC instead of
> by the user (via free_foo).  GC-based finalization is safer in the
> sense that you're certain that the object cannot be reached again by
> Caml code.  With user-managed finalization, there is always the risk
> that the program will call free_foo, then still use the "foo" value
> afterwards.

I can't understand who will delete `foo *', allocated via `foo *p = new
foo'? As I understood from the manual, Custom_tag is the only way to
assign free_foo with the resulting Caml object. And I'm surprised by
your statement that after calling free_foo the program can still use
this reference. This sounds as if I bought a train ticket but the
railway station clerk warned me that despite of the fact that I paid
there still is a risk that my seat will be sold to somebody else :-).

Alexander
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

