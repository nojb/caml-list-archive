Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA05230; Mon, 6 Aug 2001 05:04:22 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA05229 for <caml-list@pauillac.inria.fr>; Mon, 6 Aug 2001 05:04:21 +0200 (MET DST)
Received: from leia.mandrakesoft.com (office.mandrakesoft.com [195.68.114.34])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f7634LH26573
	for <caml-list@inria.fr>; Mon, 6 Aug 2001 05:04:21 +0200 (MET DST)
Received: by leia.mandrakesoft.com (Postfix, from userid 505)
	id 986D55745; Mon,  6 Aug 2001 05:04:16 +0200 (CEST)
To: Luke Gorrie <luke@bluetail.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Newbie Ocaml performance questions
References: <lhitg1lxm0.fsf@cockatoo.bluetail.com>
From: Pixel <pixel@mandrakesoft.com>
In-Reply-To: Luke Gorrie's message of "06 Aug 2001 04:40:23 +0200"
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.0.104
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Lines: 26
Message-Id: <20010806030416.986D55745@leia.mandrakesoft.com>
Date: Mon,  6 Aug 2001 05:04:16 +0200 (CEST)
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Luke Gorrie <luke@bluetail.com> writes:

[...]

> - Is there an easy way to measure the number of milliseconds it takes
>   to evaluate a certain expression?

As for me, the best solution to find out which program part takes time is to
call the part twice or thrice and note the difference on the whole program
execution time.
- ocamlcp is nice but doesn't give timings
- the output of gprof is usually very hard to use (mainly due to "cycles")

[...]

> - Can I increase the stack size (for native and bytecode)? It seems to
>   blow out on me at a depth of about 70,000 in simple functions - I'd
>   like to be able to get about 100x deeper.

haha. 

We (Equipe de merd team) had to remove quite a few non tail-recursive
functions to help stay in the stack.

For bytecode, this works:
Gc.set { (Gc.get()) with Gc.stack_limit = 50 * 1024 * 1024 }
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

