Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA27810; Mon, 13 Aug 2001 17:03:15 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA27816 for <caml-list@pauillac.inria.fr>; Mon, 13 Aug 2001 17:03:14 +0200 (MET DST)
Received: from femail41.sdc1.sfba.home.com (femail41.sdc1.sfba.home.com [24.254.60.35])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f7DF3Dv01387
	for <caml-list@inria.fr>; Mon, 13 Aug 2001 17:03:13 +0200 (MET DST)
Received: from null ([65.6.36.87]) by femail41.sdc1.sfba.home.com
          (InterMail vM.4.01.03.20 201-229-121-120-20010223) with ESMTP
          id <20010813150311.EIVU2348.femail41.sdc1.sfba.home.com@null>
          for <caml-list@inria.fr>; Mon, 13 Aug 2001 08:03:11 -0700
Date: Mon, 13 Aug 2001 10:02:47 -0500
From: Rick Bischoff <bischoff@rickjr.org>
X-Mailer: The Bat! (v1.53d) Personal
Reply-To: Rick Bischoff <bischoff@rickjr.org>
Organization: rickjr.org
X-Priority: 3 (Normal)
Message-ID: <7278206975.20010813100247@rickjr.org>
To: caml-list@inria.fr
Subject: [Caml-list] Ocaml in depth?
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello all,

      I'm a undergrad student with my nose in a lot of languages, but
      unfortunately i was raised on C/C++...  OCaml and the other
      ML dialects are very interesting to me, but
      I have a few doubts and questions!

      (1) The only "real" examples I see in the tutorials and books,
      etc, are "parsing" problems.  This seems to be the topic at the
      functional programming contests at lot (with a high probability
      at least);  are there any other good examples?

      (2) How can I learn better to escape my simpleton method of
      writing C code in Caml?

      (3) Why do functions return (int -> int) -> int -> int when
      the real type is (int -> int) -> (int -> int).  I find that
      confusing (again, I am a simpleton)

      (4) What is the difference between saying:

          let bob =
              function [] -> []
                       h :: t -> h
          ;;

          and

          let fun john lst =
              match lst with
                    [] -> []
              |     h::t -> h
          ;;

          (I don't know if my syntax is right here, but I am a....)
-- 
Best regards,
 Rick                          mailto:bischoff@rickjr.org

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

