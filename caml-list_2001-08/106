Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA28356; Mon, 13 Aug 2001 17:21:48 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA28288 for <caml-list@pauillac.inria.fr>; Mon, 13 Aug 2001 17:21:47 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f7DFLjX05026;
	Mon, 13 Aug 2001 17:21:45 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA28320; Mon, 13 Aug 2001 17:21:45 +0200 (MET DST)
Date: Mon, 13 Aug 2001 17:21:45 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: Kai Kaminski <kok@wtal.de>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Integer arithmetic: mod
Message-ID: <20010813172145.C26750@pauillac.inria.fr>
References: <20010804124945.A354@alpha2.tabu.stw-bonn.de> <20010806111000.N7188@pauillac.inria.fr> <20010811002942.E4854@alpha2.tabu.stw-bonn.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0i
In-Reply-To: <20010811002942.E4854@alpha2.tabu.stw-bonn.de>; from kok@wtal.de on Sat, Aug 11, 2001 at 12:29:42AM +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> > So does Ada, I think.  It's probably a good idea to have two sets of
> > operators, and document that one of them (those that truncate downwards)
> > is a bit less efficient.
> I agree. Is there a chance that this will really happen in a future
> release of OCaml?

There is a chance, yes.  It takes a bit of implementation work, and I
consider this a low-priority feature, but yes it will probably be
implemented once the higher-priority stuff is dealt with.

> Is there a roadmap for OCaml-development?

<JOKE>
I'm glad you asked this, because it's time to reveal to the world that
the development of OCaml is actually entirely handled by a collection of
super-advanced genetic algorithms that simply mutate the sources until
cool features emerge.  We just sit and watch.  The mutations can be
directed by some sample code fragments written in any other language;
the genetic algorithms then try to extract new language features that
match the sample code.  For instance, the object system in OCaml
started to emerge when we fed it some Java and Smalltalk sources.
Later, Jacques Garrigue threw in some Ada and Visual Basic code, and
bingo! we got the labels of OCaml 3.00.  The next step will probably
be some Cobol fragments.  I fully expect to get some interesting
concepts out of this, such as BCD arithmetic, or even cool new syntax
such as "divide a by b giving c in ..."
</JOKE>

(But see http://www.technologyreview.com/web/knorr/knorr080301.asp
for similar ideas being actually experimented for producing patent
applications.)

More seriously: yes, there is a roadmap, at least for important
changes (in the language or in the basic architecture of the
implementation); no, we don't normally discuss it publicly.  Small
changes such as adding new library functions are generally dealt on a
"by need" basis.

- Xavier Leroy
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

