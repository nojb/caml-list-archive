Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA26250; Fri, 24 Aug 2001 11:24:59 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA26267 for <caml-list@pauillac.inria.fr>; Fri, 24 Aug 2001 11:24:59 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f7O9Opj24551;
	Fri, 24 Aug 2001 11:24:51 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA26246; Fri, 24 Aug 2001 11:23:11 +0200 (MET DST)
Date: Fri, 24 Aug 2001 11:23:11 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: Lionel Fourquaux <lionel.fourquaux@wanadoo.fr>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] dynamic loading and OS interface
Message-ID: <20010824112311.C25250@pauillac.inria.fr>
References: <Pine.BSF.4.21.0108231211450.17462-100000@shell5.ba.best.com> <000001c12c17$6b7d2c80$132480d9@fourquauche3ay>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0i
In-Reply-To: <000001c12c17$6b7d2c80$132480d9@fourquauche3ay>; from lionel.fourquaux@wanadoo.fr on Thu, Aug 23, 2001 at 11:06:00PM +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> What is the current status of dynamic loading? I've seen a lot
> of implementations for Unix, and it shouldn't be too difficult to
> port them to Win32 (I tried it once), although it requires some design
> choices. Are there plans to add it in the near future?

I'm working on it right now (when not replying to the numerous
messages on this list :-).  If you're curious, you can look at the
"dynamic_loading" branch on the OCaml development sources
(camlcvs.inria.fr).  I'll post more information about it once I'm
happy with the result, to get some feedback on the design.

> > A better apporach might be to ape Python and the SML Basis Library by
> > providing a
> > generic "OS" module which abstracts at least Unix/Win/Mac away. I
> would
> > prefer this, since I feel silly using Unix.<blah> on a Windows box
> :-).

In a way, that's how the OCaml library is structured already:
the OS-independent stuff is in Pervasives and Sys, and corresponds
roughly to what ANSI C offers; Unix is the OS-dependent stuff,
corresponding roughly to Posix + BSD sockets.

But of course users want all functions to be available in an
OS-independent manner, for easy porting of their programs, and that's
how we ended up with an emulation of the Unix module under Windows.  
Still, there are limits to what an OS-independent interface can
provide if you want to remain truly portable.

- Xavier Leroy
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

