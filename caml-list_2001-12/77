Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA16709; Wed, 12 Dec 2001 20:05:21 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA16645 for <caml-list@pauillac.inria.fr>; Wed, 12 Dec 2001 20:05:20 +0100 (MET)
Received: from fledge.watson.org (fledge.watson.org [204.156.12.50])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id fBCJ5Eb02130;
	Wed, 12 Dec 2001 20:05:14 +0100 (MET)
Received: from localhost (patrick@localhost)
	by fledge.watson.org (8.11.6/8.11.5) with ESMTP id fBCJ4vv51163;
	Wed, 12 Dec 2001 14:04:57 -0500 (EST)
	(envelope-from patrick@watson.org)
Date: Wed, 12 Dec 2001 14:04:56 -0500 (EST)
From: Patrick M Doane <patrick@watson.org>
To: Chris Hecker <checker@d6.com>
cc: Francois.Pottier@inria.fr, <caml-list@inria.fr>
Subject: Re: [Caml-list] Function call with a list of parameters
In-Reply-To: <4.3.2.7.2.20011212103956.00e4ced0@arda.pair.com>
Message-ID: <20011212140001.R47912-100000@fledge.watson.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 12 Dec 2001, Chris Hecker wrote:

>
> It does seem like there's an asymmetry in parameters versus return
> values that might be worth looking into (in languages in general, not
> just caml).  Bruce's example was interesting to me because I didn't
> know that lisp had tuples (as opposed to just lists).  That
> reintroduces the asymmetry that I'm talking about, where if everything
> was just a list (both returns and params) then it would be symmetric
> and apply would just work.  Even with tuples, lisp is still more
> symmetric since you can convert a tuple to a list generically and then
> pass it in with apply (according to Bruce's example).

I understand your point and mostly agree with it, but keep in mind that:

  let f x y = (x,y)

is not a function that takes 2 parameters. So, I would say that Caml is
symmetric if you don't curry the arguments.

Also, the style of currying everything is a little different in the SML
community. Their compilers often expect (and optimize for) multiple
parameters as tuples.

Patrick

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

