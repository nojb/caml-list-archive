Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA14584; Wed, 5 Dec 2001 21:56:25 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA14478 for caml-list@pauillac.inria.fr; Wed, 5 Dec 2001 21:56:24 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA11811 for <caml-list@pauillac.inria.fr>; Wed, 5 Dec 2001 19:41:53 +0100 (MET)
Received: from tcsnpop1.tcsn.uswest.net (tcsnpop1.tcsn.uswest.net [207.108.112.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id fB5IfqT20352
	for <caml-list@inria.fr>; Wed, 5 Dec 2001 19:41:52 +0100 (MET)
Received: (qmail 89719 invoked by uid 50); 5 Dec 2001 18:41:24 -0000
Delivered-To: fixup-caml-list@inria.fr@fixme
Received: (qmail 88982 invoked by uid 0); 5 Dec 2001 18:41:05 -0000
Received: from 216-161-147-134.customers.uswest.net (HELO dylan) (216.161.147.134)
  by tcsnpop1.tcsn.uswest.net with SMTP; 5 Dec 2001 18:41:05 -0000
Message-ID: <011701c17dbc$86d25720$210148bf@dylan>
From: "David McClain" <barabh@qwest.net>
To: <caml-list@inria.fr>
Subject: [Caml-list] Unreliable Threading?
Date: Wed, 5 Dec 2001 11:42:00 -0700
MIME-Version: 1.0
Content-Type: text/plain;
	charset="Windows-1252"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2919.6600
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6600
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Ealier, when developing a mixed C/C++ and OCaml program, it looked as
thought the OCaml threading code was "unreliable" in that I would get
crashes under the MSVC++ debugger of "Invalid Handle" errors. But running
the code outside of the debugger works just fine.

I now believe the problem has nothing to do with OCaml or its threading
code, but rather the way the M$ debugger attempts to walk stack frames
looking for contexts to report. Since OCaml threading does its own thing, M$
appears to get lost in this process and ends up crashing on its own --
incorrectly attributing the error to the code under test.

All efforts to use OCaml multithreading and Channels for inter-thread
coordination HAVE been quite reliable outside of the M$ development
environment.

- D. McClain, Sr. Scientist, Raytheon Systems Co., Tucson, AZ
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

