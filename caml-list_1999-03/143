Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA06927 for caml-redistribution; Mon, 29 Mar 1999 20:04:31 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA25040 for <caml-list@pauillac.inria.fr>; Mon, 29 Mar 1999 18:10:59 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id SAA15525;
	Mon, 29 Mar 1999 18:10:56 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA10808; Mon, 29 Mar 1999 18:10:56 +0200 (MET DST)
Message-ID: <19990329181056.50745@pauillac.inria.fr>
Date: Mon, 29 Mar 1999 18:10:56 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: Manuel Fahndrich <maf@microsoft.com>,
        "'caml-list@inria.fr'" <caml-list@inria.fr>
Subject: Re: file permission integer
References: <25983782061AD111B0800000F86310FE1026CBB2@RED-MSG-42>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <25983782061AD111B0800000F86310FE1026CBB2@RED-MSG-42>; from Manuel Fahndrich on Fri, Mar 26, 1999 at 12:33:35PM -0800
Sender: weis

> The OCAML core contains a function
> 	open_out_gen : open_flag list -> int -> string -> out_channel
> where the integer corresponds to the file permissions set when a new file is
> created. How is this integer interpreted? Does it vary from platform to
> platform? (Unix vs Windows).
> If this information is described in the doc, I apologize, but I couldn't
> find it.

No need to apologize, this is indeed not documented (oops!).

The integer argument to open_*_gen follows the Unix semantics,
i.e. 0oABC, where A are the user permissions, B the group permissions,
C the permissions for others.  A, B, C are single octal digits
obtained by or-ing individual permission bits: 1 for execute permission,
2 for write permission, and 4 for read permission.

Under Windows, only the "write permission" bit of the "user
permission" digit is consulted, and determines if the file is created
read-write or read-only.  (The other permission bits don't have any
equivalent in Win32, at least on a FAT file system.)

So, if you pass the correct permissions for Unix, your code should
work just fine under Windows.

In Caml Light, we used to have symbolic names for the various
permission bits.  I removed them in OCaml after realizing that the
Unix bit-patterns work just fine in Windows as well.  However, the
Unix encoding is a bit cryptic, so maybe those symbolic names were a
good idea after all.

All the best,

- Xavier Leroy



