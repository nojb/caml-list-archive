Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA15381 for caml-redistribution; Mon, 8 Mar 1999 16:12:44 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA06643 for <weis@pauillac.inria.fr>; Mon, 8 Mar 1999 10:24:49 +0100 (MET)
Received: from julie.univ-savoie.fr (univax.univ-savoie.fr [193.48.120.32])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA21027
	for <Pierre.Weis@inria.fr>; Mon, 8 Mar 1999 10:24:48 +0100 (MET)
Received: from univ-savoie.fr (raffalli@lama-d134.univ-savoie.fr [193.48.123.134])
          by julie.univ-savoie.fr (8.9.3/jtpda-5.3.1) with ESMTP id KAA12184
          for <Pierre.Weis@inria.fr>; Mon, 8 Mar 1999 10:26:30 +0100 (CET)
Sender: weis
Message-ID: <36E3980B.DD19C015@univ-savoie.fr>
Date: Mon, 08 Mar 1999 10:27:39 +0100
From: Christophe Raffalli <Christophe.Raffalli@univ-savoie.fr>
Organization: =?iso-8859-1?Q?Université?= de Savoie
X-Mailer: Mozilla 4.5 [en] (X11; I; Linux 2.0.33 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Pierre Weis <Pierre.Weis@inria.fr>
Subject: Re: Suggestions pour les modules
References: <199903080745.IAA23583@pauillac.inria.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


Voici le message (en francais uniquement)

--


Voici quelques suggestions qui me paraissent utiles pour
ameliorer la puissance du systeme de modules:

1) Les contraintes devraient pouvoir lier des champs du module dans le
membre droit d'une contrainte.

exemple:
 
module type V = 
  sig
    type t
    type t' 
  end

module type SV = V with type t = t'

module F = functor (M : V with type t = t') -> ....

Le second est simulable en faisant

module type Un_Type = 
  sig
    type t
  end

module F = functor (T : Un_Type) ->
           functor (M : V with type t = T.t and type t' = T.t) ->

Je me dis que cela ne doit donc pas etre tres dur a implementer ?

2) La commande include devrait etre documentee et accepter un "with
constraints" (Deja subgere par d'autres). On aurait ainsi de
l'heritage multiple sur les "modules types"

3) Le include devrait aussi marcher pour les structures afin d'avoir
aussi de l'heritage sur les modules (les contraintes n'ont pas de sens
dans ce cas, il s'agit donc d'un simple sucre syntaxique).

Exemple: il est penible d'ecrire

module T = struct
  let x = ...
  let y = ... 
end

module T' =
  let x = x.T
  let y = y.T
  let z = ...
end 

au lieu de

module T' =
  include T
  let z = ...
end 
 

4) Moins important : on devrait pouvoir passer une valeur ou un type a
un functor sans l'encapsuler a la main dans un module

Ainsi au lieu d'ecrire

module type Un_Int =
  sig
    val n : int
  end

module F = functor (N : Un_Int) -> ....

on pourrait ecrire

module F = functor (n : int) -> ....


Il suffit d'ajouter les sucres syntaxiques suivants:

  functor (type t) ->  :=  functor (T : sig type t end) -> 
    avec t = T.t dans la suite

  functor (v : t) ->   :=  functor (V : sig val v : t end) -> 
    avec v = V.v dans la suite

et les abbreviations similaires pour l'application et les declaration
de types (il me semble que cette syntaxe n'est pas ambigue ?)


5) Encore moins important: Pouvoir utiliser les symboles infix d'un
module en notation infix (C'est la moindre des choses ?)

genre  x Q.R.+ y  ou  x +.Q.R y  pour  Q.R.(+) x y



