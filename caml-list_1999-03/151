Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA13473 for caml-redistribution; Wed, 31 Mar 1999 09:12:28 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA18529 for <caml-list@pauillac.inria.fr>; Tue, 30 Mar 1999 20:13:16 +0200 (MET DST)
Received: from mail1.microsoft.com (mail1.microsoft.com [131.107.3.125])
	by nez-perce.inria.fr (8.8.7/8.8.7) with SMTP id UAA10406
	for <caml-list@inria.fr>; Tue, 30 Mar 1999 20:13:15 +0200 (MET DST)
Received: by mail2.microsoft.com with Internet Mail Service (5.5.2524.0)
	id <H70T6D0B>; Tue, 30 Mar 1999 10:13:14 -0800
Message-ID: <25983782061AD111B0800000F86310FE1026CBBA@RED-MSG-42>
From: Manuel Fahndrich <maf@microsoft.com>
To: "'caml-list@inria.fr'" <caml-list@inria.fr>
Subject: RE: file permission integer
Date: Tue, 30 Mar 1999 10:13:11 -0800
X-Mailer: Internet Mail Service (5.5.2524.0)
Sender: weis


Thanks for the reply.

I thought about the bit encoding vs. datatype as well. What would be useful
is simply a function that creates the correct bit pattern from a more
descriptive data type list. Then power users can give the bit-pattern
directly, and standard users can go through the encoding function.

-Manuel 

-----Original Message-----
From: Xavier Leroy [mailto:Xavier.Leroy@inria.fr]
Sent: Monday, March 29, 1999 8:11 AM
To: Manuel Fahndrich; 'caml-list@inria.fr'
Subject: Re: file permission integer


> The OCAML core contains a function
> 	open_out_gen : open_flag list -> int -> string -> out_channel
> where the integer corresponds to the file permissions set when a new file
is
> created. How is this integer interpreted? Does it vary from platform to
> platform? (Unix vs Windows).
> If this information is described in the doc, I apologize, but I couldn't
> find it.

No need to apologize, this is indeed not documented (oops!).

The integer argument to open_*_gen follows the Unix semantics,
i.e. 0oABC, where A are the user permissions, B the group permissions,
C the permissions for others.  A, B, C are single octal digits
obtained by or-ing individual permission bits: 1 for execute permission,
2 for write permission, and 4 for read permission.

Under Windows, only the "write permission" bit of the "user
permission" digit is consulted, and determines if the file is created
read-write or read-only.  (The other permission bits don't have any
equivalent in Win32, at least on a FAT file system.)

So, if you pass the correct permissions for Unix, your code should
work just fine under Windows.

In Caml Light, we used to have symbolic names for the various
permission bits.  I removed them in OCaml after realizing that the
Unix bit-patterns work just fine in Windows as well.  However, the
Unix encoding is a bit cryptic, so maybe those symbolic names were a
good idea after all.

All the best,

- Xavier Leroy



