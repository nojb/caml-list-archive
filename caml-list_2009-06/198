Return-Path: <yitzhak@research.att.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.2 required=5.0 tests=AWL,HTML_MESSAGE,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 2281EBC37
	for <caml-list@yquem.inria.fr>; Tue, 30 Jun 2009 20:58:22 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: An8CAFP9SUrAFOFwmWdsb2JhbACCVItxij4BAQEBAQgLCgcTuC6EDwU
X-IronPort-AV: E=Sophos;i="4.42,318,1243807200"; 
   d="scan'208,217";a="32240208"
Received: from mail-dark.research.att.com (HELO mail-yellow.research.att.com) ([192.20.225.112])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 30 Jun 2009 20:58:21 +0200
Received: from YitzhakMac.client.research.att.com (YitzhakMac.client.research.att.com [135.207.174.180])
	by bigmail.research.att.com (8.13.7+Sun/8.11.6) with ESMTP id n5UIwIlN015262;
	Tue, 30 Jun 2009 14:58:19 -0400 (EDT)
Cc: Andrej Bauer <Andrej.Bauer@andrej.com>, caml-list@inria.fr
Message-Id: <E47AC31E-BF02-4440-A0BD-EB4B2D90182A@research.att.com>
From: Yitzhak Mandelbaum <yitzhak@research.att.com>
To: Andreas Rossberg <rossberg@mpi-sws.org>
In-Reply-To: <FBA1153F-776B-47FF-B267-22504D045671@mpi-sws.org>
Content-Type: multipart/alternative; boundary=Apple-Mail-18--354358359
Mime-Version: 1.0 (Apple Message framework v935.3)
Subject: Re: [Caml-list] ocamllex and python-style indentation
Date: Tue, 30 Jun 2009 14:58:17 -0400
References: <7d8707de0906110557n6a1511a2k9f4f00827f954cb6@mail.gmail.com> <4A310A5B.9010404@ens-lyon.org> <7d8707de0906120120x10cc8fe0p54adbd189003f3da@mail.gmail.com> <FBA1153F-776B-47FF-B267-22504D045671@mpi-sws.org>
X-Mailer: Apple Mail (2.935.3)
X-Spam: no; 0.00; yitzhak:01 mandelbaum:01 yitzhak:01 ocamllex:01 parens:01 rossberg:01 andrej:01 inserting:01 tokens:01 separators:01 separators:01 haskell:01 haskell's:01 parser:01 lexer:01 


--Apple-Mail-18--354358359
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: 7bit

To restart this thread, do your solutions handle the following (legal)  
variation of the original example?

if True:
    x = 3+4
    y = (2 +
4 + 5)
    z = 5
else:
    x = 5
    if False:
        x = 8
        z = 2


Notice that the assignment of y wraps onto the next line at an  
*earlier* column. This is legal b/c it is surrounded by parens.  
However, it seems that the preprocessing approaches will fail for this  
example. Do you have a workaround?

--Yitzhak


On Jun 12, 2009, at 11:43 AM, Andreas Rossberg wrote:

> On Jun 12, 2009, at 10.20 h, Andrej Bauer wrote:
>
>> I think I understand the general idea of inserting "virtual" tokens,
>> but the details confuse me still. So starting with
>>
>>> if True:
>>>    x = 3
>>>    y = (2 +
>>>      4 + 5)
>>> else:
>>>    x = 5
>>>    if False:
>>>        x = 8
>>>        z = 2
>>
>> Martin suggests the following:
>>
>>> {
>>> if True:
>>> ;
>>>   {
>>>   x = 3
>>>   ;
>>>   y = (2 +
>>>   ;
>>>     {
>>>     4 + 5)
>>>     }
>>>   }
>>> ;
>>> else:
>>> ;
>>>   {
>>>   x = 5
>>>   ;
>>>   if False:
>>>   ;
>>>       {
>>>       x = 8
>>>       ;
>>>       z = 2
>>>       }
>>>   }
>>> }
>>
>> I have two questions. Notice that the { ... } and ( ... ) need not be
>> correctly nested (in the top half), so how are we going to deal with
>> this? The second question is, why are there the separators after and
>> just before "else:". I would expect separators inside { .... }, but
>> not around "else".
>
> It depends on how exactly you define your layout rules. The usual  
> approach is to tie start of layout-sensitive blocks to particular  
> keywords -- this is essentially what Python and Haskell do. In that  
> case, the binding to y is not affected. Haskell's rules for optional  
> layout would rewrite your original program as
>
>>> if True:
>>>    {x = 3
>>>    ;y = (2 +
>>>      4 + 5)
>>> }else:
>>>    {x = 5
>>>    ;if False:
>>>        {x = 8
>>>        ;z = 2
>>> }}
>
> The basic rules are fairly simple:
>
> 1. Insert "{" (assume width 0) before the first token following a  
> layout keyword (usually ":" in Python). This opens a block.
>
> 2. As long as inside a block, insert ";" before each token that is  
> on the _same_ column as the current (i.e. innermost) "{".
>
> 3. A block ends as soon as you see a line whose first token is  
> _left_ of the current "{". Insert "}" before that token.
>
> Blocks can be nested, so you need to maintain a stack of starting  
> columns in the parser. Note that rule 3 may end several blocks at  
> once. EOF is treated as a token at column 0.
>
> The way I implemented this is by wrapping the ocamllex-generated  
> lexer with a function that compares each token's column with the top  
> of the layout stack and inserts auxiliary tokens as necessary.
>
> Haskell has another rule for inserting "}" if there would be a parse  
> error without it (this is to allow inline blocks). This rule is  
> pretty fudgy, and almost impossible to implement properly with a  
> conventional parser generator. IMO, the only sane way to reformulate  
> this rule is again to tie it to specific keywords, e.g. insert "}"  
> before "else" if missing. This can be implemented in the parser by  
> making closing braces optional in the right places.
>
> - Andreas
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--------------------------------------------------
Yitzhak Mandelbaum
AT&T Labs - Research

http://www.research.att.com/~yitzhak



--Apple-Mail-18--354358359
Content-Type: text/html;
	charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; ">To restart this thread, do your =
solutions handle the following (legal) variation of the original =
example?<div><br></div><div><div>if True:</div><div>&nbsp;&nbsp; x =3D =
3+4</div><div>&nbsp;&nbsp; y =3D (2 +</div><div>4 + =
5)</div><div>&nbsp;&nbsp; z =3D 5</div><div>else:</div><div>&nbsp;&nbsp; =
x =3D 5</div><div>&nbsp;&nbsp; if False:</div><div>&nbsp;&nbsp; &nbsp; =
&nbsp; x =3D 8</div><div>&nbsp;&nbsp; &nbsp; &nbsp; z =3D =
2</div><div><br></div><div><br></div><div>Notice that the assignment of =
y wraps onto the next line at an *earlier* column. This is legal b/c it =
is surrounded by parens. However, it seems that the preprocessing =
approaches will fail for this example. Do you have a =
workaround?</div><div><br></div><div>--Yitzhak</div><div><br></div><div><b=
r></div><div><div>On Jun 12, 2009, at 11:43 AM, Andreas Rossberg =
wrote:</div><br class=3D"Apple-interchange-newline"><blockquote =
type=3D"cite"><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: =
space; -webkit-line-break: after-white-space; "><div><div>On Jun 12, =
2009, at 10.20 h, Andrej Bauer wrote:</div><br =
class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div>I =
think I understand the general idea of inserting "virtual" =
tokens,<br>but the details confuse me still. So starting =
with<br><br><blockquote type=3D"cite">if =
True:<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;&nbsp;x =3D =
3<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;&nbsp;y =3D (2 =
+<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 + 5)<br></blockquote><blockquote =
type=3D"cite">else:<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;x =3D 5<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;if False:<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x =3D =
8<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z =3D =
2<br></blockquote><br>Martin suggests the following:<br><br><blockquote =
type=3D"cite">{<br></blockquote><blockquote type=3D"cite">if =
True:<br></blockquote><blockquote =
type=3D"cite">;<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;{<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;x =3D=
 3<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;;<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;y =3D=
 (2 +<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;;<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;{<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;4 + 5)<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;}<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;}<br></blockquote><blockquote =
type=3D"cite">;<br></blockquote><blockquote =
type=3D"cite">else:<br></blockquote><blockquote =
type=3D"cite">;<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;{<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;x =3D=
 5<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;;<br></blockquote><blockquote type=3D"cite"> &nbsp;&nbsp;if =
False:<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;;<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br></blockquote><blockquote =
type=3D"cite"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x =3D =
8<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br></blockquote><blockquote =
type=3D"cite"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z =3D =
2<br></blockquote><blockquote type=3D"cite"> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br></blockquote><blockquote =
type=3D"cite"> &nbsp;&nbsp;}<br></blockquote><blockquote =
type=3D"cite">}<br></blockquote><br>I have two questions. Notice that =
the { ... } and ( ... ) need not be<br>correctly nested (in the top =
half), so how are we going to deal with<br>this? The second question is, =
why are there the separators after and<br>just before "else:". I would =
expect separators inside { .... }, but<br>not around =
"else".<br></div></blockquote><div><br></div><div>It depends on how =
exactly you define your layout rules. The usual approach is to tie start =
of layout-sensitive blocks to particular keywords -- this is essentially =
what Python and Haskell do. In that case, the binding to y is not =
affected.&nbsp;Haskell's rules for optional layout would rewrite your =
original program as</div><div><br></div><div><blockquote =
type=3D"cite"><div><blockquote type=3D"cite">if =
True:<br></blockquote><blockquote type=3D"cite">&nbsp;&nbsp; {x =3D =
3<br></blockquote><blockquote type=3D"cite">&nbsp;&nbsp; ;y =3D (2 =
+<br></blockquote><blockquote =
type=3D"cite">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 + =
5)<br></blockquote><blockquote =
type=3D"cite">}else:<br></blockquote><blockquote =
type=3D"cite">&nbsp;&nbsp; {x =3D 5<br></blockquote><blockquote =
type=3D"cite">&nbsp;&nbsp; ;if False:<br></blockquote><blockquote =
type=3D"cite">&nbsp;&nbsp; &nbsp; &nbsp; {x =3D =
8<br></blockquote><blockquote type=3D"cite">&nbsp;&nbsp; &nbsp; &nbsp; =
;z =3D 2<br></blockquote></div></blockquote><blockquote =
type=3D"cite"><div><blockquote =
type=3D"cite">}}<br></blockquote></div></blockquote><div><font =
class=3D"Apple-style-span" color=3D"#006312"><br></font></div><div><font =
class=3D"Apple-style-span" color=3D"#006312">The basic rules are fairly =
simple:</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">1. Insert "{" (assume width 0) before the first token =
following a layout keyword (usually ":" in Python). This opens a =
block.</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">2. As long as inside a block, insert ";" before each =
token that is on the _same_ column as the current (i.e. innermost) =
"{".</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">3. A block ends as soon as you see a line whose first =
token is _left_ of the current "{". Insert "}" before that =
token.</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">Blocks can be nested, so you need to maintain a stack =
of starting columns in the parser. Note that rule 3 may end several =
blocks at once.&nbsp;EOF is treated as a token at column =
0.</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">The way I implemented this is by wrapping the =
ocamllex-generated lexer with a function that compares each token's =
column with the top of the layout stack and inserts auxiliary tokens as =
necessary.</font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div>Haskell has another rule for =
inserting "}" if there would be a parse error without it (this is to =
allow inline blocks). This rule is pretty fudgy, and almost impossible =
to implement properly with a conventional parser generator. IMO, the =
only sane way to reformulate this rule is again to tie it to specific =
keywords, e.g. insert "}" before "else" if missing. This can be =
implemented in the parser by making closing braces optional in the right =
places.</div><div><font class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div><div><font class=3D"Apple-style-span" =
color=3D"#006312">- Andreas</font></div><div><font =
class=3D"Apple-style-span" =
color=3D"#006312"><br></font></div></div></div></div>_____________________=
__________________________<br>Caml-list mailing list. Subscription =
management:<br><a =
href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">http://y=
quem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: =
http://caml.inria.fr<br>Beginner's list: =
http://groups.yahoo.com/group/ocaml_beginners<br>Bug reports: =
http://caml.inria.fr/bin/caml-bugs<br></blockquote></div><br><div =
apple-content-edited=3D"true"> <span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; border-spacing: 0px 0px; color: =
rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: =
normal; font-variant: normal; font-weight: normal; letter-spacing: =
normal; line-height: normal; text-align: auto; =
-khtml-text-decorations-in-effect: none; text-indent: 0px; =
-apple-text-size-adjust: auto; text-transform: none; orphans: 2; =
white-space: normal; widows: 2; word-spacing: 0px; "><div =
style=3D"word-wrap: break-word; -khtml-nbsp-mode: space; =
-khtml-line-break: after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; border-spacing: 0px 0px; color: =
rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: =
normal; font-variant: normal; font-weight: normal; letter-spacing: =
normal; line-height: normal; text-align: auto; =
-khtml-text-decorations-in-effect: none; text-indent: 0px; =
-apple-text-size-adjust: auto; text-transform: none; orphans: 2; =
white-space: normal; widows: 2; word-spacing: 0px; "><span =
class=3D"Apple-style-span" style=3D"border-collapse: separate; =
border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; =
font-size: 12px; font-style: normal; font-variant: normal; font-weight: =
normal; letter-spacing: normal; line-height: normal; text-align: auto; =
-khtml-text-decorations-in-effect: none; text-indent: 0px; =
-apple-text-size-adjust: auto; text-transform: none; orphans: 2; =
white-space: normal; widows: 2; word-spacing: 0px; "><span =
class=3D"Apple-style-span" style=3D"border-collapse: separate; =
border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; =
font-size: 12px; font-style: normal; font-variant: normal; font-weight: =
normal; letter-spacing: normal; line-height: normal; text-align: auto; =
-khtml-text-decorations-in-effect: none; text-indent: 0px; =
-apple-text-size-adjust: auto; text-transform: none; orphans: 2; =
white-space: normal; widows: 2; word-spacing: 0px; =
"><div>--------------------------------------------------</div><div>Yitzha=
k Mandelbaum</div><div>AT&amp;T Labs - Research</div><div><br =
class=3D"khtml-block-placeholder"></div><div><a =
href=3D"http://www.research.att.com/~yitzhak">http://www.research.att.com/=
~yitzhak</a></div><br =
class=3D"Apple-interchange-newline"></span></span></span></div></span> =
</div><br></div></body></html>=

--Apple-Mail-18--354358359--

