Return-Path: <angelo@icorsaro.net>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 4073081792
	for <caml-list@sympa.inria.fr>; Sat, 14 Jul 2018 16:35:08 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=angelo@icorsaro.net; spf=None smtp.mailfrom=angelo@icorsaro.net; spf=None smtp.helo=postmaster@mail-wr1-f44.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  angelo@icorsaro.net) identity=pra; client-ip=209.85.221.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="angelo@icorsaro.net";
  x-sender="angelo@icorsaro.net"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  angelo@icorsaro.net) identity=mailfrom;
  client-ip=209.85.221.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="angelo@icorsaro.net";
  x-sender="angelo@icorsaro.net"; x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wr1-f44.google.com) identity=helo;
  client-ip=209.85.221.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="angelo@icorsaro.net";
  x-sender="postmaster@mail-wr1-f44.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Aq3sDER3XGOeoR39ZsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?se0fL/ad9pjvdHbS+e9qxAeQG9mDtbQc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYghEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUMVNWCNOH42y?=
 =?us-ascii?q?YYkAAfQPPehftITyvUcCrR6kCAmsGO/iyDlFjWL2060g1OQhFBnL0RAmH9IBrn?=
 =?us-ascii?q?vUqNL1P7oMXOCy1qnI1i/Mb+lR2Tzg74XHaBYhof6SUrJ0dsrc0kgvGB/CjlWK?=
 =?us-ascii?q?sozqJSmV1uMXv2id8eVgSfuihmg6oA9yujii3tkghpXNi44PyV3J9T91zJgrKd?=
 =?us-ascii?q?GlUkJ2btGpHINTuiybLYd6XMwvTmBytCony7ALtoS3cDYXxJg5wRPUduaJfJKS?=
 =?us-ascii?q?4h35UeacOTd4i2xheLK4nxuy9FKvyuz4VsWt3ldKtDdJnsDCtn0C2BHf8MeHSv?=
 =?us-ascii?q?x6/keu3TaAyRrf5f1DIUAxjabbKpghzaAslpcLr0jPAiv7lF/1gaKWbEko5Pak?=
 =?us-ascii?q?5/n9brjpqZKQL4p0hRv/MqQqlMy/G+M4Mg0WUmeB/+S826Ps/Un+QLhRj/05jq?=
 =?us-ascii?q?7ZsIrBJcsBvK65BBVZ0oA95BajFzumysgXnWEbLFJZfxKKl5TmNEvLIPD8FPu/?=
 =?us-ascii?q?h1WskCx3x/3dJb3gApDNLmDZn7v7fLZ97VRcyAspwtxF6ZJUEOJJHPWmdUb7rt?=
 =?us-ascii?q?3VClcCOAy52ev9QIFy34kEWG+LRLSSMK7IvEWg6ecmIu3Kb4gQ7mXTMf8gstfo?=
 =?us-ascii?q?gnI9nhc2erOy1IEQICSxGPtrJ0KxYHHrmMwIC2BMuAciGr+5wGaeWCJeMi7hF5?=
 =?us-ascii?q?k34Ss2Xcf/Vd+aF9KdxYeZ1SL+JaV4I2VPC1SCC3DtLtnWWvwLcjmbOMgnlDEY?=
 =?us-ascii?q?B+D4F90RkCq2vQq/8IJJa/LO83RE55Po08Ju7vfU0xc/6W4sVpnP4yS2V2hx21?=
 =?us-ascii?q?gwaXo20aR4+xEvz16C1e1nmaUdG4APofxOVQg+ONjXyOkoU90=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DaAgC4CUpbhizdVdFcGgEBAQEBAgEBA?=
 =?us-ascii?q?QEIAQEBAYVTg3uIY4tbggyIOYdxhSOBEANTCyyEQAKCTxkGBjUTAQIBAQIBAQE?=
 =?us-ascii?q?BARMBAQEICwsIKSMMgjUkAYJcAQEBAQIBIx0BATcBBAsJAhgcDgICIRMBBQECG?=
 =?us-ascii?q?gYTFIMMgWgDDQgEjSqQAjyKG26BLoJxAQEFgWOCNw2DHQgJAQiIcIIWgTiCaoJ?=
 =?us-ascii?q?WgW2DOTGCJIxZhRqHQCsJiEGDWoNwhymFWIsIhDKCMwIEAgQFAgUPIYE4gXIzG?=
 =?us-ascii?q?ggmCjsqAYI+PoFbDA4Jg0WKVG0BbQsbi18BAQ?=
X-IPAS-Result: =?us-ascii?q?A0DaAgC4CUpbhizdVdFcGgEBAQEBAgEBAQEIAQEBAYVTg3u?=
 =?us-ascii?q?IY4tbggyIOYdxhSOBEANTCyyEQAKCTxkGBjUTAQIBAQIBAQEBARMBAQEICwsIK?=
 =?us-ascii?q?SMMgjUkAYJcAQEBAQIBIx0BATcBBAsJAhgcDgICIRMBBQECGgYTFIMMgWgDDQg?=
 =?us-ascii?q?EjSqQAjyKG26BLoJxAQEFgWOCNw2DHQgJAQiIcIIWgTiCaoJWgW2DOTGCJIxZh?=
 =?us-ascii?q?RqHQCsJiEGDWoNwhymFWIsIhDKCMwIEAgQFAgUPIYE4gXIzGggmCjsqAYI+PoF?=
 =?us-ascii?q?bDA4Jg0WKVG0BbQsbi18BAQ?=
X-IronPort-AV: E=Sophos;i="5.51,352,1526335200"; 
   d="scan'208,217";a="338905676"
Received: from mail-wr1-f44.google.com ([209.85.221.44])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 14 Jul 2018 16:34:47 +0200
Received: by mail-wr1-f44.google.com with SMTP id r16-v6so27687018wrt.11
        for <caml-list@inria.fr>; Sat, 14 Jul 2018 07:34:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=icorsaro-net.20150623.gappssmtp.com; s=20150623;
        h=from:message-id:mime-version:subject:date:in-reply-to:cc:to
         :references;
        bh=vh5Q46EvWWlOUcH8lrSr8spE9g6d7nT7nxzyAyYKk4k=;
        b=yjLz1RE2YCKHs88f/94VNRtJpLeLdCqHLCY/nXqqjfxHfe7g1NUuxikUrneB+J7quJ
         TqhWU5R0SsR/VF29dt8nrIWCVDrXkWyoP6pWXWji2DcQ6CoMIq+sNRJScoNlL7+N2FvT
         qjlmKivPjMfAVv3BCl6UhkGpeXU0QZE1dnJ6saH6xG5SfuEIbmWtI7SLhXizlvWsnqPV
         ShgE0vgUYar7V8rUlt+v75hHcJ9SQJF/ik52BpTG4XV4fuPpCJvBoddLkr5nsF+rbVqM
         EavO/BPq8YltehBgVnzGrEQizQGvAKwEPW2YyrZoBbc4wKyVCc8NJ89/EVlL7v4NbL1Y
         ankQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:message-id:mime-version:subject:date
         :in-reply-to:cc:to:references;
        bh=vh5Q46EvWWlOUcH8lrSr8spE9g6d7nT7nxzyAyYKk4k=;
        b=oE72ncZWw7t8zuty8gg8Q4WcI08fnWhyuCDyDjw5Ix+ohem/3WkGYS9Jkb/LXLeDLz
         ly43oIo9OiVOMVDM6I5uepVKemKWLmYqi21tY2U8uzNFaUP3Kfssi0I2wK4Gu983naTj
         sFJ4QLzvdZdl/FcG1bvk0uG1fIKlUbPVpVOFZtbzrqXB3FmcsrcHqlUQIFFEY+diXVfo
         1ZN/4wNWGExXxoPiX+hHLoEkziFXtXoqxcC9qd+3/aZtPVhxq8YKsTeLMK2n9pheAdGU
         TguptXbyzw4HQ/+RprScl36wvVPGTHnw8vQc9u7PwHJgJJnwx7oO/H07q9WBF2S5LU8H
         Gc4A==
X-Gm-Message-State: AOUpUlHHpIz0pXTjdIZZhoLxTrJG77zL94BCbfDa0y+R+htOv0RMSFeD
	xU4wLEurqWmNo3ALO1slXrJclA==
X-Google-Smtp-Source: AAOMgpdLnX5lLromEp6vUnOG2mQUNUznyd4XXW6aRAuS6HH4cF13x4M+6OpBW6s0iXbhUlV7z37h7g==
X-Received: by 2002:adf:9aa3:: with SMTP id a32-v6mr8009009wrc.75.1531578887554;
        Sat, 14 Jul 2018 07:34:47 -0700 (PDT)
Received: from ekam.home (LFbn-1-687-212.w86-246.abo.wanadoo.fr. [86.246.164.212])
        by smtp.gmail.com with ESMTPSA id d7-v6sm8532386wro.92.2018.07.14.07.34.45
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sat, 14 Jul 2018 07:34:46 -0700 (PDT)
From: Angelo Corsaro <angelo@icorsaro.net>
Message-Id: <604AB611-E9ED-48D3-A746-D665EC15003B@icorsaro.net>
Content-Type: multipart/alternative;
	boundary="Apple-Mail=_AF313FDE-D77F-4E30-82AA-F88CD349FF91"
Mime-Version: 1.0 (Mac OS X Mail 11.4 \(3445.8.2\))
Date: Sat, 14 Jul 2018 16:34:44 +0200
In-Reply-To: <CAPFanBHOQfqJd9T4tEpSo390_poPLac5uS-YAsuuQxCXjppUKA@mail.gmail.com>
Cc: caml users <caml-list@inria.fr>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
References: <EDBE5195-32FB-4BFB-B803-07EAA91BBB92@icorsaro.net>
 <CAPFanBHOQfqJd9T4tEpSo390_poPLac5uS-YAsuuQxCXjppUKA@mail.gmail.com>
X-Mailer: Apple Mail (2.3445.8.2)
Subject: Re: [Caml-list] Recursive Types and -rectypes


--Apple-Mail=_AF313FDE-D77F-4E30-82AA-F88CD349FF91
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Hello Gabriel,


> On 13 Jul 2018, at 14:34, Gabriel Scherer <gabriel.scherer@gmail.com> wro=
te:
>=20
> -rectypes is not the default because it leads to the type-checker
> accepting code that is a programmer mistake but makes sense using
> recursive types. This leads to hard-to-understand errors down the line
> when you try to use the name at the type you think it has.
>=20
> I would just go for the variant. I am not sure what kind of
> readability overhead you have in mind, do you have a concrete example?
> In my experience, the ability to use pattern-matching in function
> arguments and let declarations makes this very smooth
>=20
>=20
>  type =E2=80=98msg actor_queue =3D Act of ( =E2=80=98msg actor_queue opti=
on * =E2=80=98msg)
> some_queue_type
>=20
>  let queue (Act q) =3D q

Yes, this is similar to what I did. I shared your concerns on the use of -r=
ectypes this is why I was looking for advises. We are a bit new to OCaml an=
d from time to time it is good to get some advise from the community. Thank=
s again for the valuable feedback!

Enjoy the weekend.

Ciao,
	Angelo
=20

>=20
> On Fri, Jul 13, 2018 at 12:10 PM Angelo Corsaro <angelo@icorsaro.net> wro=
te:
>>=20
>> Dear All,
>>=20
>> I am looking for some advices and suggestions on the use of recursive ty=
pes that  OCaml makes available through the -rectypes option.
>>=20
>> To give you some context we have built a simple Agent framework for Ocam=
l that provides primitives similar to those of Erlang =E2=80=94 with the di=
fference that at the present time we care only on using actors to control c=
oncurrency on the same process. As you can probably imagine the recursive t=
ype definition comes out from the actor message queue. The most straight fo=
rward definition would look like (removing some details to keep the essence=
):
>>=20
>> type =E2=80=98msg actor_queue =3D ( =E2=80=98msg actor_queue option * =
=E2=80=98msg) some_queue_type
>>=20
>> This is a simplified version, but let=E2=80=99s say that the intuition i=
s that we need to post on the receiving actor queue the message along to po=
ssibly the queue of the agent we may reply to. This gives rise to a recursi=
ve type definition which clearly would only be usable with the -rectypes op=
tion.
>>=20
>> The traditional way of breaking things kind of recursive types is to use=
 variant types recursion. Which is what I=E2=80=99ve done. Yet that comes a=
t some cost w.r.t. the readability of the code. Thus the question, would yo=
u suggest using -rectypes to enable recursive data types? Use classes to re=
present this type, as they allow for recursive type definition? Or just sti=
ck with the variant type trick?
>>=20
>> Thanks very much in advance for sharing your thoughts!
>>=20
>> Ciao,
>>    Angelo
>>=20
>> P.S. =E2=80=98msg is actually bound with some polymorphic variant to all=
ow the actor to accept any user defined type as in Erlang. We also have a v=
ersion that leverages functors to define the messages that may be exchanged=
 between actors =E2=80=94 if a strict control is required on the set of mes=
sages exchanged.
>>=20
>> =E2=80=94
>> =E2=80=9CSimplicity is the ultimate sophistication." ~ Leonardo da Vinci
>>=20

=E2=80=94
=E2=80=9CSimplicity is the ultimate sophistication." ~ Leonardo da Vinci


--Apple-Mail=_AF313FDE-D77F-4E30-82AA-F88CD349FF91
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3Dutf-8"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: s=
pace; line-break: after-white-space;" class=3D"">Hello Gabriel,<div class=
=3D""><br class=3D""><div><br class=3D""><blockquote type=3D"cite" class=3D=
""><div class=3D"">On 13 Jul 2018, at 14:34, Gabriel Scherer &lt;<a href=3D=
"mailto:gabriel.scherer@gmail.com" class=3D"">gabriel.scherer@gmail.com</a>=
&gt; wrote:</div><br class=3D"Apple-interchange-newline"><div class=3D""><d=
iv class=3D"">-rectypes is not the default because it leads to the type-che=
cker<br class=3D"">accepting code that is a programmer mistake but makes se=
nse using<br class=3D"">recursive types. This leads to hard-to-understand e=
rrors down the line<br class=3D"">when you try to use the name at the type =
you think it has.<br class=3D""><br class=3D"">I would just go for the vari=
ant. I am not sure what kind of<br class=3D"">readability overhead you have=
 in mind, do you have a concrete example?<br class=3D"">In my experience, t=
he ability to use pattern-matching in function<br class=3D"">arguments and =
let declarations makes this very smooth<br class=3D""><br class=3D""><br cl=
ass=3D""> &nbsp;type =E2=80=98msg actor_queue =3D Act of ( =E2=80=98msg act=
or_queue option * =E2=80=98msg)<br class=3D"">some_queue_type<br class=3D""=
><br class=3D""> &nbsp;let queue (Act q) =3D q<br class=3D""></div></div></=
blockquote><div><br class=3D""></div>Yes, this is similar to what I did. I =
shared your concerns on the use of -rectypes this is why I was looking for =
advises. We are a bit new to OCaml and from time to time it is good to get =
some advise from the community. Thanks again for the valuable feedback!</di=
v><div><br class=3D""></div><div>Enjoy the weekend.</div><div><br class=3D"=
"></div><div>Ciao,</div><div><span class=3D"Apple-tab-span" style=3D"white-=
space:pre">	</span>Angelo</div><div>&nbsp;</div><div><br class=3D""><blockq=
uote type=3D"cite" class=3D""><div class=3D""><div class=3D""><br class=3D"=
">On Fri, Jul 13, 2018 at 12:10 PM Angelo Corsaro &lt;<a href=3D"mailto:ang=
elo@icorsaro.net" class=3D"">angelo@icorsaro.net</a>&gt; wrote:<br class=3D=
""><blockquote type=3D"cite" class=3D""><br class=3D"">Dear All,<br class=
=3D""><br class=3D"">I am looking for some advices and suggestions on the u=
se of recursive types that &nbsp;OCaml makes available through the -rectype=
s option.<br class=3D""><br class=3D"">To give you some context we have bui=
lt a simple Agent framework for Ocaml that provides primitives similar to t=
hose of Erlang =E2=80=94 with the difference that at the present time we ca=
re only on using actors to control concurrency on the same process. As you =
can probably imagine the recursive type definition comes out from the actor=
 message queue. The most straight forward definition would look like (remov=
ing some details to keep the essence):<br class=3D""><br class=3D"">type =
=E2=80=98msg actor_queue =3D ( =E2=80=98msg actor_queue option * =E2=80=98m=
sg) some_queue_type<br class=3D""><br class=3D"">This is a simplified versi=
on, but let=E2=80=99s say that the intuition is that we need to post on the=
 receiving actor queue the message along to possibly the queue of the agent=
 we may reply to. This gives rise to a recursive type definition which clea=
rly would only be usable with the -rectypes option.<br class=3D""><br class=
=3D"">The traditional way of breaking things kind of recursive types is to =
use variant types recursion. Which is what I=E2=80=99ve done. Yet that come=
s at some cost w.r.t. the readability of the code. Thus the question, would=
 you suggest using -rectypes to enable recursive data types? Use classes to=
 represent this type, as they allow for recursive type definition? Or just =
stick with the variant type trick?<br class=3D""><br class=3D"">Thanks very=
 much in advance for sharing your thoughts!<br class=3D""><br class=3D"">Ci=
ao,<br class=3D""> &nbsp;&nbsp;&nbsp;Angelo<br class=3D""><br class=3D"">P.=
S. =E2=80=98msg is actually bound with some polymorphic variant to allow th=
e actor to accept any user defined type as in Erlang. We also have a versio=
n that leverages functors to define the messages that may be exchanged betw=
een actors =E2=80=94 if a strict control is required on the set of messages=
 exchanged.<br class=3D""><br class=3D"">=E2=80=94<br class=3D"">=E2=80=9CS=
implicity is the ultimate sophistication." ~ Leonardo da Vinci<br class=3D"=
"><br class=3D""></blockquote></div></div></blockquote></div><br class=3D""=
><div class=3D"">
<div style=3D"color: rgb(0, 0, 0); letter-spacing: normal; orphans: auto; t=
ext-align: start; text-indent: 0px; text-transform: none; white-space: norm=
al; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; word-w=
rap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-=
space;" class=3D""><div class=3D""><div style=3D"orphans: 2; widows: 2;" cl=
ass=3D""><div style=3D"margin: 0cm 0cm 0.0001pt;" class=3D""><font color=3D=
"#333333" face=3D"Helvetica, sans-serif" class=3D"">=E2=80=94</font></div><=
/div><div style=3D"orphans: 2; widows: 2; margin: 0cm 0cm 0.0001pt;" class=
=3D"">=E2=80=9CSimplicity is the ultimate sophistication." ~&nbsp;<span sty=
le=3D"text-align: -webkit-auto;" class=3D"">Leonardo da Vinci</span></div><=
/div></div>
</div>
<br class=3D""></div></body></html>=

--Apple-Mail=_AF313FDE-D77F-4E30-82AA-F88CD349FF91--
