Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p6FE1XOA005038
	for <caml-list@sympa-roc.inria.fr>; Fri, 15 Jul 2011 16:01:34 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AskAAH9HIE7RVaG+i2dsb2JhbABTmCdDjnIIFAEBAQoLCwcSBiGvEowrhyg7iG+GOgSHVINrk2M8g3s
X-IronPort-AV: E=Sophos;i="4.65,535,1304287200"; 
   d="scan'208";a="87160697"
Received: from mail-gx0-f190.google.com ([209.85.161.190])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 15 Jul 2011 16:01:28 +0200
Received: by gxk7 with SMTP id 7so985431gxk.27
        for <caml-list@inria.fr>; Fri, 15 Jul 2011 07:01:27 -0700 (PDT)
Received: by 10.90.20.38 with SMTP id 38mr473343agt.24.1310738487112; Fri, 15
 Jul 2011 07:01:27 -0700 (PDT)
Path: glegroupsg2000goo.googlegroups.com!not-for-mail
Newsgroups: fa.caml
Date: Fri, 15 Jul 2011 07:01:26 -0700 (PDT)
In-Reply-To: <fa.mytTzuC/urRZYFkpPYr+9ZKcYVw@ifi.uio.no>
Reply-To: fa.caml@googlegroups.com
Complaints-To: groups-abuse@google.com
Injection-Info: glegroupsg2000goo.googlegroups.com; posting-host=138.37.88.134;
 posting-account=e5mzsQoAAAB7g9y7Bkgam0zJDHRr7bCB
NNTP-Posting-Host: 138.37.88.134
User-Agent: G2/1.0
X-Google-Web-Client: true
MIME-Version: 1.0
Message-ID: <a643af35-db1b-4978-8d5a-103e41a511c6@glegroupsg2000goo.googlegroups.com>
From: Radu Grigore <radugrigore@gmail.com>
To: fa.caml@googlegroups.com
Cc: caml-list@inria.fr
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by walapai.inria.fr id p6FE1XOA005038
Subject: Re: RE: RE: RE: [Caml-list] Priority queues, reloaded

On Thursday, July 14, 2011 6:34:16 PM UTC+1, Jon Harrop wrote:
> Yes. That shows that it can be done but not that it is worth doing. What are
> the practical applications (if any) of heap-based MST algorithms?

From the same file:

"Conclusions. The winning algorithm, of the four methods considered here, on problems of the size considered here, is clearly Jarn{\'\i}k/Prim with binary heaps. Second is Kruskal with radix sorting, on sparse graphs, but the Fibonacci heap method beats it on dense graphs."

