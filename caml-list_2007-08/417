Return-Path: <daniel.buenzli@epfl.ch>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 97892BC6B
	for <caml-list@yquem.inria.fr>; Mon, 27 Aug 2007 01:47:42 +0200 (CEST)
Received: from mail21.bluewin.ch (mail21.bluewin.ch [195.186.18.66])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l7QNlg7I005288
	for <caml-list@yquem.inria.fr>; Mon, 27 Aug 2007 01:47:42 +0200
Received: from [10.0.1.3] (85.2.65.141) by mail21.bluewin.ch (Bluewin 7.3.121)
        id 46C9BFD10017EAA8 for caml-list@yquem.inria.fr; Sun, 26 Aug 2007 23:47:41 +0000
Mime-Version: 1.0 (Apple Message framework v752.2)
In-Reply-To: <1188055755.10796.37.camel@rosella.wigram>
References: <9FA25C33-04DD-46BD-8959-873DDD2FFF82@epfl.ch> <1188055755.10796.37.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <D6A4296A-A9A2-4621-A6F7-7AD58E8764EB@epfl.ch>
Content-Transfer-Encoding: quoted-printable
From: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
Subject: Re: [Caml-list] Has the thread cancellation problem evolved ?
Date: Mon, 27 Aug 2007 01:47:42 +0200
To: caml-list@yquem.inria.fr
X-Mailer: Apple Mail (2.752.2)
X-Miltered: at concorde with ID 46D2111E.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bunzli:01 buenzli:01 ocaml:01 runtime:01 computations:01 computations:01 runtime:01 denying:98 misused:98 invoke:01 caml-list:01 computation:01 epfl:02 parameter:02 programming:03 


Le 25 ao=FBt 07 =E0 17:29, skaller a =E9crit :

> There is something I don't understand here.

What you don't understand is that ocaml has a runtime system which =20
leaves some room for designing around what exists at the os level.

> If the source of the problem is a blocking operation, the solution
> is simple: don't use blocking operations!

This is not the source of the problem. What I want is to allow users =20
to initiate and cancel computations whenever they want. Computations =20
can be lengthy even tough they do not invoke a blocking operation.

The problem is that libraries are not -- and should not -- be =20
designed with cancellation in mind, say every function has an =20
optional parameter that allows to stop the computation. Cancellation =20
should be a service of the runtime system, and denying its usefulness =20=

because it could be misused makes no sense, I can also open a file =20
and never close it, it is a matter of programming discipline.

Daniel

