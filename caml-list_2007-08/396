Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 82915BC6B
	for <caml-list@yquem.inria.fr>; Fri, 24 Aug 2007 12:23:40 +0200 (CEST)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l7OANcbd006246
	for <caml-list@inria.fr>; Fri, 24 Aug 2007 12:23:39 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAK5NzkY7pw2h/2dsb2JhbAAM
X-IronPort-AV: E=Sophos;i="4.19,304,1183300200"; 
   d="scan'208";a="178713407"
Received: from ppp59-167-13-161.lns2.syd7.internode.on.net (HELO [192.168.1.201]) ([59.167.13.161])
  by ipmail01.adl2.internode.on.net with ESMTP; 24 Aug 2007 19:53:33 +0930
Subject: Re: [Caml-list] pm variant type question
From: skaller <skaller@users.sourceforge.net>
To: Jeremy Yallop <jeremy.yallop@ed.ac.uk>
Cc: caml-list@inria.fr
In-Reply-To: <46CEAF76.20006@ed.ac.uk>
References: <1187931704.7202.9.camel@rosella.wigram>
	 <46CEAF76.20006@ed.ac.uk>
Content-Type: text/plain
Date: Fri, 24 Aug 2007 20:23:32 +1000
Message-Id: <1187951012.9885.3.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 46CEB1AA.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; 0100,:01 regexp:01 regexp:01 seq:01 seq:01 sourceforge:01 wrote:01 wrote:01 caml-list:01 closure:01 closure:01 variant:02 string:02 string:02 epsilon:04 

On Fri, 2007-08-24 at 11:14 +0100, Jeremy Yallop wrote:
> skaller wrote:
> > type 'a regexp_t' =
> >   [
> >   | `REGEXP_seq of 'a regexp_t' * 'a regexp_t' (** concatenation *)
> >   | `REGEXP_alt of 'a regexp_t' * 'a regexp_t' (** alternation *)
> >   | `REGEXP_aster of 'a regexp_t'  (** Kleene closure *)
> >   | `REGEXP_string of string   (** concatenation of chars of string *)
> >   | `REGEXP_epsilon            (** epsilon: null string *)
> >   ]
> 
> If I understand rightly, then this should be
> 
>    type 'a regexp_t' =
>      [
>      | `REGEXP_seq of 'a * 'a (** concatenation *)
>      | `REGEXP_alt of 'a * 'a (** alternation *)
>      | `REGEXP_aster of 'a  (** Kleene closure *)
>      | `REGEXP_string of string   (** concatenation of chars of string *)
>      | `REGEXP_epsilon            (** epsilon: null string *)
>      ]

Ouch .. yes of course. Thanks! Can't see the wood for the trees ..


-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

