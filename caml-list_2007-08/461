Return-Path: <ls-ocaml-2006@m-e-leypold.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 0E201BC69
	for <caml-list@yquem.inria.fr>; Thu, 30 Aug 2007 23:34:53 +0200 (CEST)
Received: from server2.thinkcrime.de (server2.thinkcrime.de [213.133.110.149])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l7ULYqUq005024
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Thu, 30 Aug 2007 23:34:52 +0200
Received: from hod-sarge-2005-10.lan.m-e-leypold.de (dslb-088-072-225-167.pools.arcor-ip.net [88.72.225.167])
	(Authenticated sender: hod-sarge-2005-10@server2)
	by server2.thinkcrime.de (Postfix) with ESMTP id 18F0F9002C8
	for <caml-list@inria.fr>; Thu, 30 Aug 2007 23:34:35 +0200 (CEST)
Received: by hod-sarge-2005-10.lan.m-e-leypold.de (Postfix, from userid 1003)
	id 38BB9A8F; Thu, 30 Aug 2007 23:47:03 +0200 (CEST)
To: caml-list@inria.fr
Subject: Unix.getuid() int overflow
From: Markus E L <ls-ocaml-2006@m-e-leypold.de>
Organization: N/A
Date: Thu, 30 Aug 2007 23:47:03 +0200
Message-ID: <6cd4x4ae5k.fsf@hod.lan.m-e-leypold.de>
User-Agent: Some cool user agent (SCUG)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Miltered: at discorde with ID 46D737FC.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; markus:01 otherlibs:01 ocaml:01 ocaml:01 baz:01 baz:01 foo:01 foo:01 integers:01 bug:01 markus:01 unix:01 unix:01 compile:01 integer:01 



Hi Caml-Riders,

When reading the sources of otherlibs/unix I saw that the
implementation just maps the result of getuid (and similar calls) to
ints. Remembering that (s) Ocaml has 32bit ints and (b) the Linux
kernel got changed to support 32bit UIDs some longer time ago I saw
the first beginnings of a problem.

Indeed I have create users with UIDs 2^31-1^ ... 2^31+1 and executed
this program 

  print_int (Unix.getuid ());
  print_newline();

under the respective accounts:

  # id bar
  uid=2147483647(bar) gid=2147483647 groups=2147483647
  # su bar
  $ ocaml unix.cma /tmp/x.ml
  -1

(hm ...)

  # id baz
  uid=2147483648(baz) gid=2147483648(bar) groups=2147483648(bar)
  # su baz
  su: Authentication service cannot retrieve authentication info.
  (Ignored)
  $ ocaml unix.cma /tmp/x.ml
  0

(gasp!)

  # id foo
  uid=2147483649(foo) gid=2147483649 groups=2147483649
  # su foo
  su: Authentication service cannot retrieve authentication info.
  (Ignored)
  $ ocaml unix.cma /tmp/x.ml
  1

(arrgs ...)

I could live with negative user ids, but the aliasing from 2^31 on is
certainly annoying.

Furthermore I admit that many of the system tools have problems with
user ids this large anyway: adduser silently truncates uid to 2^31-1
and su also seems to have some funny problems (as illustrated above).

Still, I find the situation unsatisfactory, esp. when one wants to
write system management tools with OCaml.

A check in the Unix library would be nice, in the long run I think
using 32bit native integers is absolutely required. 

BTW: I also had a look into the current POSIX and at the first glance
couldn't discover a constant that describes the maximum of uid_t (the
result type of getuid()). It only guaranteed to be "of integer type"
which in my eyes makes using everything smaller than long long int as
variable type for processing UIDs unportable and prone to break on
some other platform (admitted: this is not probably now, it's just
annoying that the standard doesn't give enough guarantees or at least
a constant for compile time configuration to make any decisions here).

Back to the topic: 
 
 (a) I'm just reporting this here for dicumentation.

 (b) Shall I report this as bug? And at the INRIA team: Is a reworking
     of Unix planned in the forseeable time or would interested
     parties have to it themselves? I'm just asking to avoid
     duplication of work: At the moment this is not high on my list of
     priorities anyway.

Regards -- Markus

