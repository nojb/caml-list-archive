Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id F2113BC6B
	for <caml-list@yquem.inria.fr>; Sat,  4 Aug 2007 15:49:53 +0200 (CEST)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l74Dnps4010131
	for <caml-list@yquem.inria.fr>; Sat, 4 Aug 2007 15:49:52 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAI4etEZ5LGJp/2dsb2JhbAAN
X-IronPort-AV: E=Sophos;i="4.19,220,1183300200"; 
   d="scan'208";a="167061172"
Received: from ppp121-44-98-105.lns10.syd6.internode.on.net (HELO [192.168.1.201]) ([121.44.98.105])
  by ipmail01.adl2.internode.on.net with ESMTP; 04 Aug 2007 23:19:50 +0930
Subject: Re: [Caml-list] Sorted list
From: skaller <skaller@users.sourceforge.net>
To: Brian Hurt <bhurt@spnz.org>
Cc: tmp123@menta.net, caml-list@yquem.inria.fr
In-Reply-To: <Pine.LNX.4.64.0708040827540.20887@localhost>
References: <46B4485B.7040406@menta.net>
	 <Pine.LNX.4.64.0708040754370.20887@localhost>
	 <Pine.LNX.4.64.0708040827540.20887@localhost>
Content-Type: text/plain
Date: Sat, 04 Aug 2007 23:49:49 +1000
Message-Id: <1186235389.32211.16.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 46B483FF.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; threading:01 model:01 sourceforge:01 wrote:01 caml-list:01 data:02 data:02 brian:05 queue:07 structure:07 structure:07 john:08 felix:09 felix:09 analysis:11 

On Sat, 2007-08-04 at 08:36 -0400, Brian Hurt wrote:
> I forgot a bit of analysis as to why I recommend that data structure, and 
> not others.  

The priority queue here is a good data structure for 
amortising performance. A plain list is better if the interrupt
handling is time critical (whilst the inserts and deletes are not).

However, your threading model matters a lot here.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

