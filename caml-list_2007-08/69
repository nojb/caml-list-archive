Return-Path: <bhurt@spnz.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 3FF50BC6B
	for <caml-list@yquem.inria.fr>; Sat,  4 Aug 2007 16:42:19 +0200 (CEST)
Received: from bsd4.nyct.net (mail-out8.nyct.net [216.139.141.8])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l74EgIVe019812
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sat, 4 Aug 2007 16:42:18 +0200
Received: from [192.168.42.2] (adsl-216-139-154-52.nyct.net [216.139.154.52])
	by bsd4.nyct.net (8.13.4/8.13.4) with ESMTP id l74Eg7TF082193;
	Sat, 4 Aug 2007 10:42:09 -0400 (EDT)
	(envelope-from bhurt@spnz.org)
Date: Sat, 4 Aug 2007 10:52:55 -0400 (EDT)
From: Brian Hurt <bhurt@spnz.org>
X-X-Sender: bhurt@localhost
To: Oliver Bandel <oliver@first.in-berlin.de>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Warning on not-tail recursive functions
In-Reply-To: <1186230861.46b4724d1561e@webmail.in-berlin.de>
Message-ID: <Pine.LNX.4.64.0708041051240.9657@localhost>
References: <46B45BE3.9040403@menta.net> <Pine.LNX.4.64.0708040817060.20887@localhost>
 <1186230861.46b4724d1561e@webmail.in-berlin.de>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
X-Miltered: at concorde with ID 46B4904A.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 bandel:01 tailcall:01 tail-call:01 tailcall:01 2007,:98 wrote:01 oliver:01 caml-list:01 functions:01 tail:01 brian:05 brian:05 throws:05 aug:07 



On Sat, 4 Aug 2007, Oliver Bandel wrote:

> What ist with a
>
>  ...
>   ignore (maybe_tailcall())
>  ...
>

That is not a tail call.  You're using the value it returns.

Brian

> Does ignore REALLY ignore the values (does not generate them), so that
> this call is like a true tail-call, or will the maybe_tailcall
> generate and give back results to the ignore-call and then
> ignore throws away the stuff (then it would be NO tailcall).

Throwing away the result is using the result.

Brian

