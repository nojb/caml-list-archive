Return-Path: <lists@philippewang.info>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,MAILTO_TO_SPAM_ADDR 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 1EC59BC6C
	for <caml-list@yquem.inria.fr>; Sat,  4 Aug 2007 14:23:25 +0200 (CEST)
Received: from 30.mail-out.ovh.net (30.mail-out.ovh.net [213.186.62.213])
	by discorde.inria.fr (8.13.6/8.13.6) with SMTP id l74CNO0A019992
	for <caml-list@inria.fr>; Sat, 4 Aug 2007 14:23:24 +0200
Received: (qmail 11133 invoked by uid 503); 4 Aug 2007 12:23:48 -0000
Received: (QMFILT: 1.0); 04 Aug 2007 12:23:48 -0000
Received: from b7.ovh.net (HELO mail93.ha.ovh.net) (213.186.33.57)
  by 30.mail-out.ovh.net with SMTP; 4 Aug 2007 12:23:48 -0000
Received: from b0.ovh.net (HELO queue-out) (213.186.33.50)
	by b0.ovh.net with SMTP; 4 Aug 2007 12:23:33 -0000
Received: from vil93-4-82-227-140-227.fbx.proxad.net (HELO ?192.168.1.222?) (82.227.140.227)
  by ns0.ovh.net with SMTP; 4 Aug 2007 12:23:31 -0000
Message-ID: <46B46FB3.3090606@philippewang.info>
Date: Sat, 04 Aug 2007 14:23:15 +0200
From: Philippe Wang <lists@philippewang.info>
User-Agent: Thunderbird 1.5.0.12 (Macintosh/20070509)
MIME-Version: 1.0
To: skaller <skaller@users.sourceforge.net>
Cc: tmp123@menta.net, ocaml ml <caml-list@inria.fr>
Subject: Re: [Caml-list] Sorted list
References: <46B4485B.7040406@menta.net>  <46B454ED.700@philippewang.info> <1186226538.14440.105.camel@rosella.wigram>
In-Reply-To: <1186226538.14440.105.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Ovh-Remote: 82.227.140.227 (vil93-4-82-227-140-227.fbx.proxad.net)
X-Ovh-Local: 213.186.33.20 (ns0.ovh.net)
X-Miltered: at discorde with ID 46B46FBC.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; 0200,:01 elt:01 sugestion:01 functor:01 sig:01 val:01 struct:01 elt:01 val:01 abstr:01 bool:01 bool:01 subset:01 iter:01 abstr:01 

skaller wrote:
> On Sat, 2007-08-04 at 12:29 +0200, Philippe Wang wrote:
>   
>> tmp123@menta.net wrote:
>>     
>
>   
>>> Of the standard modules, the most similar seems "set", because allows 
>>> insertion and has the funcion "min_elt". However, the problem is, if 
>>> two timers have the same time, addition of the second one removes the 
>>> first.
>>>
>>> Please, has someone any sugestion?
>>>
>>> Thanks a lot.
>>>       
>> Hello,
>>
>> Let's remind that Set.Make is a functor that takes a module with
>> sig
>>   type t
>>   val compare : t -> t -> int
>> end
>>
>> If you simply give him a compare function that never returns 0, then you 
>> can add multiple elements that are the same.
>>     
>
> You cannot do that! compare function must be a total order.
>   
Why not ?



        Objective Caml version 3.10.0

# include Set.Make(struct type t = int let compare : t -> t -> int = fun 
a b -> match compare a b with 0 -> 1 | n -> n end);;
type elt = int
type t
val empty : t = <abstr>
val is_empty : t -> bool = <fun>
val mem : elt -> t -> bool = <fun>
val add : elt -> t -> t = <fun>
val singleton : elt -> t = <fun>
val remove : elt -> t -> t = <fun>
val union : t -> t -> t = <fun>
val inter : t -> t -> t = <fun>
val diff : t -> t -> t = <fun>
val compare : t -> t -> int = <fun>
val equal : t -> t -> bool = <fun>
val subset : t -> t -> bool = <fun>
val iter : (elt -> unit) -> t -> unit = <fun>
val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a = <fun>
val for_all : (elt -> bool) -> t -> bool = <fun>
val exists : (elt -> bool) -> t -> bool = <fun>
val filter : (elt -> bool) -> t -> t = <fun>
val partition : (elt -> bool) -> t -> t * t = <fun>
val cardinal : t -> int = <fun>
val elements : t -> elt list = <fun>
val min_elt : t -> elt = <fun>
val max_elt : t -> elt = <fun>
val choose : t -> elt = <fun>
val split : elt -> t -> t * bool * t = <fun>

# let x = empty ;;
val x : t = <abstr>
# let x = add 1 x ;;
val x : t = <abstr>
# let x = add 1 x ;;
val x : t = <abstr>
# let x = add 1 x ;;
val x : t = <abstr>
# let x = add 42 x ;;
val x : t = <abstr>
# let x = add 45 x ;;
val x : t = <abstr>
# elements x ;;
- : elt list = [1; 1; 1; 42; 45]

It works ! ... Or did I miss something ?

