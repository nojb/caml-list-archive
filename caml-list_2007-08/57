Return-Path: <daniel.buenzli@epfl.ch>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL,MAILTO_TO_SPAM_ADDR 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id A07A9BC6B
	for <caml-list@yquem.inria.fr>; Sat,  4 Aug 2007 14:15:59 +0200 (CEST)
Received: from mail17.bluewin.ch (mail17.bluewin.ch [195.186.18.64])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l74CFxse024889
	for <caml-list@yquem.inria.fr>; Sat, 4 Aug 2007 14:15:59 +0200
Received: from [10.0.1.2] (85.1.101.75) by mail17.bluewin.ch (Bluewin 7.3.121)
        id 46A545730025ED0D; Sat, 4 Aug 2007 12:15:58 +0000
In-Reply-To: <46B4485B.7040406@menta.net>
References: <46B4485B.7040406@menta.net>
Mime-Version: 1.0 (Apple Message framework v752.2)
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <E1D56FCB-112D-46AD-A4CA-464A060C9FAE@epfl.ch>
Cc: caml-list@yquem.inria.fr
Content-Transfer-Encoding: quoted-printable
From: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
Subject: Re: [Caml-list] Sorted list
Date: Sat, 4 Aug 2007 14:16:02 +0200
To: tmp123@menta.net
X-Mailer: Apple Mail (2.752.2)
X-Miltered: at concorde with ID 46B46DFF.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bunzli:01 buenzli:01 sugestion:01 mutable:01 struct:01 node:01 node:01 abstract:01 rec:01 heap:01 heap:01 caml-list:01 int:01 data:02 epfl:02 


Le 4 ao=FBt 07 =E0 11:35, tmp123@menta.net a =E9crit :

> Please, has someone any sugestion?

I once did that by using a leftist heap. Your abstract timerid can =20
have a mutable field that indicates if it was cancelled. When you =20
peek/pop for the minimal one do it until you get on a timer that was =20
not cancellled.

Daniel

P.S. You can use the following code for the heap. Public domain no =20
license, no copyright.

(* A leftist heap data structure. *)
module Heap =3D struct
   type priority =3D float
   type 'a t =3D
     | Empty
     | Node of 'a t * int * priority * 'a * 'a t

   let rank =3D function
     | Empty -> 0
     | Node (_, r, _, _, _) -> r

   let make_node p v h h' =3D
     let r =3D rank h in
     let r' =3D rank h' in
     if r >=3D r' then Node(h, r' + 1, p, v, h')
     else Node(h', r + 1, p, v, h)

   let rec merge h h' =3D match h, h' with
   | h, Empty -> h
   | Empty, h -> h'
   | Node(a, _, p, v, b), Node (a', _, p', v', b') ->
       if p <=3D p' then make_node p v a (merge b h')
       else make_node p' v' a' (merge b' h)

   let empty =3D Empty

   let is_empty =3D function
     | Empty -> true
     | _ -> false

   let add h p v =3D merge (Node(Empty, 1, p, v, Empty)) h

   let min =3D function
     | Empty -> raise Not_found
     | Node(_, _, p, v, _) -> p, v

   let remove_min =3D function
     | Empty -> raise Not_found
     | Node(a, _, _, _, b) -> merge a b
end

