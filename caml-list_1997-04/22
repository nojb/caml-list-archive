Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA26080 for caml-redistribution; Mon, 14 Apr 1997 15:58:25 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA18985 for <caml-list@pauillac.inria.fr>; Mon, 14 Apr 1997 11:35:17 +0200 (MET DST)
Received: from heaton.cl.cam.ac.uk (exim@heaton.cl.cam.ac.uk [128.232.32.11]) by nez-perce.inria.fr (8.7.6/8.7.3) with SMTP id LAA13489 for <caml-list@inria.fr>; Mon, 14 Apr 1997 11:35:15 +0200 (MET DST)
Received: from cl.cam.ac.uk [128.232.33.49] (ptw20)
	by heaton.cl.cam.ac.uk with esmtp (Exim 1.59 #2)
	id 0wGiAL-0003qE-00; Mon, 14 Apr 1997 10:35:13 +0100
X-Mailer: exmh version 1.6.9+cl+PEM 96/8/21
To: caml-list@inria.fr
cc: Pawel.Wojciechowski@cl.cam.ac.uk
Subject: threads library in Objective Caml
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Mon, 14 Apr 1997 10:35:10 +0100
From: Pawel Wojciechowski <Pawel.Wojciechowski@cl.cam.ac.uk>
Message-Id: <E0wGiAL-0003qE-00@heaton.cl.cam.ac.uk>
Sender: weis


The potential advantage of threads is that on a multiprocessor shared memory 
machine, each thread can run on a different processor. However, in the (O)Caml 
documentation is written as follows: "The `threads' library is implemented
by time-sharing on a single processor. It will not take advantage of multi-
-processor machines. Using this library will therefore never make programs 
run faster".

When writing concurrent porgrams, it is essential to handle concurrency 
properly, and that means assigning threads dynamically.  It is vital that
the threads are recognised at kernel level for independent allocation of
processor resource (otherwise it's "block one, block all", which is
intolerable). 

Assuming that the threads library of the (O)Caml is implemented by using 
the POSIX Unix thread library, in the light of the previous paragraph, it 
seems to me that using threads in programs written purely in Caml is less
powerful (in terms of the program behaviour on multi-processor architecures)
that using threads in a program written in C. Could you briefly explain 
this ?

On the other hand, on a single processor architecture, programs written
in Caml or C should take advantage of using threads library in exactly the 
same way. Am I right?

Pawel






