Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA06848 for caml-redistribution; Tue, 1 Apr 1997 12:57:47 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA06831 for <caml-list@pauillac.inria.fr>; Tue, 1 Apr 1997 12:57:29 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35]) by concorde.inria.fr (8.7.6/8.7.3) with ESMTP id MAA12809; Tue, 1 Apr 1997 12:57:29 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA06827; Tue, 1 Apr 1997 12:57:27 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <199704011057.MAA06827@pauillac.inria.fr>
Subject: Re: Weak pointers
In-Reply-To: <199703301713.AA04100@peray.inria.fr> from Daniel de Rauglaudre at "Mar 30, 97 07:13:46 pm"
To: ddr@peray.inria.fr (Daniel de Rauglaudre)
Date: Tue, 1 Apr 1997 12:57:27 +0200 (MET DST)
Cc: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> I would like to use weak pointers in my code, and I wrote a little test
> to check its behavior... It does not work. Why? Maybe I did not
> understand them...
[...] 
> let w = Weak.create 1;;
> let r = ref "hello";;
> 
> Weak.set w 0 (Some !r);;
> print_weak w 0;;
> 
> Gc.full_major ();;
> print_weak w 0;;
> 
> r := "world";;
> print_weak w 0;;
[...] 

> Some ...
> Some ...
> 
>   I do not understand why the very last print is "Some ..." and not "None".

The problem here is that you use constant string data: these citations
are global references that are never garbage collected, since there
really exists a pointer to them from the global symbol table.

Use strings allocated by make_string (== String.create) instead: you
should observe what you expected to observe.

However, weak pointers are far from being simple to use: you should be
aware of fine grain details about the compiler and the memory manager

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://pauillac.inria.fr/~weis/






