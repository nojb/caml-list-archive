Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id CF3E4801CD
	for <caml-list@sympa.inria.fr>; Fri, 18 Aug 2017 16:36:50 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qk0-f169.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.220.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.220.169 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.220.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk0-f169.google.com) identity=helo;
  client-ip=209.85.220.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qk0-f169.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3ASoaXExehKE/VsSGaThRsVOPdlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc66YB7h7PlgxGXEQZ/co6odzbGJ4+a9ASQp2tWojjMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpQgpBw7nOAFp?=
 =?us-ascii?q?CuPwE4/Ux4TrhqHhs6HUNixMiSqwcPtfIxKsqhuZ4sASjJskLaA1213FinRNcu?=
 =?us-ascii?q?VSg2hvIATAsQz745Kf9ZR58ilU88kq98NaXL+yK6sxR6ZZATBgKGs16dfmrzHM?=
 =?us-ascii?q?SAKO4j0XVWBAwUkAOBTM8ByvBsS5iSD9rOcohHiX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BGAgCL+pZZh6ncVdFcHAEBBAEBCgEBF?=
 =?us-ascii?q?gEBAQMBAQEJAQEBg1Q/gQITB4UmmHiBboJGk1aCEiyFGwKDZQdBFgEBAQEBAQE?=
 =?us-ascii?q?BAQEBEgEBAQgNCQgoL4IzBQMEHoI8AQICASMdARsSCwEDAQsGAwILAxcdAgIhA?=
 =?us-ascii?q?QERAQUBChIGExKKBQEDDQgQjk2RGz+MC4IEBQEcgwkFg2EKGScDClaDSgEBAQE?=
 =?us-ascii?q?BAQEDAQEBAQEBAQEYAgYSgxaCAoFMgWODJ4JXgkmCZoJhBYgZDIFgjhiHdDyCK?=
 =?us-ascii?q?IUsh3iEdoIQWYESh3GGcow3iB4VH4EVDxcIgTMyISReGoREKh+BdT42AQGIdoE?=
 =?us-ascii?q?/AQEB?=
X-IPAS-Result: =?us-ascii?q?A0BGAgCL+pZZh6ncVdFcHAEBBAEBCgEBFgEBAQMBAQEJAQE?=
 =?us-ascii?q?Bg1Q/gQITB4UmmHiBboJGk1aCEiyFGwKDZQdBFgEBAQEBAQEBAQEBEgEBAQgNC?=
 =?us-ascii?q?QgoL4IzBQMEHoI8AQICASMdARsSCwEDAQsGAwILAxcdAgIhAQERAQUBChIGExK?=
 =?us-ascii?q?KBQEDDQgQjk2RGz+MC4IEBQEcgwkFg2EKGScDClaDSgEBAQEBAQEDAQEBAQEBA?=
 =?us-ascii?q?QEYAgYSgxaCAoFMgWODJ4JXgkmCZoJhBYgZDIFgjhiHdDyCKIUsh3iEdoIQWYE?=
 =?us-ascii?q?Sh3GGcow3iB4VH4EVDxcIgTMyISReGoREKh+BdT42AQGIdoE/AQEB?=
X-IronPort-AV: E=Sophos;i="5.41,393,1498514400"; 
   d="scan'208,217";a="234754505"
Received: from mail-qk0-f169.google.com ([209.85.220.169])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 18 Aug 2017 16:36:49 +0200
Received: by mail-qk0-f169.google.com with SMTP id 130so19077554qkg.2
        for <caml-list@inria.fr>; Fri, 18 Aug 2017 07:36:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=M9EeOlF7IGaXrWsVwb2NvD4U8T5RILzVMWf429UwfZ0=;
        b=A53s0ZUG2cwlkYF+5YB0pVKGRe0CJ/zg6ZVKK/BLDDdCLAY0my7R14leCUpgJg+ND3
         qfI599MxDncLUSRx7qX3LcrdOkh/8iGjAsFAOa/x/vwjAfOkl96Intl+8PQFB7AfYikj
         UGPVtmRDSaPSrhBFzEYPx/iGeQ8T83xjBHvVh0FTO+ItmAIBISjwwdq290m1CCuPdEEP
         twqULwZhBo3SXeOitCWvYNvoOiv8vURBCFVwMfbDQSMeUQ34UWOH0nIq1LKRaxpgn1HO
         mNUZf1hARjs7TNYLlYUIwg9nEcG9Az0BHH79gdmsoIcoOv+ihRvMsBOhZYKj40w8gKm2
         X95Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=M9EeOlF7IGaXrWsVwb2NvD4U8T5RILzVMWf429UwfZ0=;
        b=KYnDBuzQKAvpF2lGJu3Y9w0F6DEs7d9oJ8AUuv33ytx11GWJ37cocjZeu1SiNu3o2Q
         GYanWKMVwwFKDjOS6B8N9BIIEm3RFTlUwMMwOr/6p8YV2FFDFRn1WQxV8ls3roON6sVT
         y+vJFe1fnaesxFLh0R02vcho15QnBfNaEF3lC6jutftXWLSlQ/KprdvI6b4ChcE8Qe4V
         COwE2q0Cm2z15F+lgrl0j9N2s+t2wT7u9Oyt+RgnBxZOaZ0gxm96SQE6xuT5OnpM6eHC
         Z5EIEtDI1k2ozUNHIULAoRM+2+wVBaBSlAOxFn5Z9xQOZ1KBqb1j/zCLhnMtKC11nju+
         1u2Q==
X-Gm-Message-State: AHYfb5hoCIiRFpyqjn7P2O9ne4jAjGZ4qLMGmBcRb/goUxSXxi9t9Xr9
	62cPZ44FCBO8Gu4Kb342TYGF/oAI6w==
X-Received: by 10.55.161.131 with SMTP id k125mr5299042qke.321.1503067008267;
 Fri, 18 Aug 2017 07:36:48 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.12.184.148 with HTTP; Fri, 18 Aug 2017 07:36:07 -0700 (PDT)
In-Reply-To: <CAJannG6JRWv_BqTR_pDMLWhxmOYFtSHLWR7pOCU_G2j_qaPWHg@mail.gmail.com>
References: <CAJannG6JRWv_BqTR_pDMLWhxmOYFtSHLWR7pOCU_G2j_qaPWHg@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 18 Aug 2017 16:36:07 +0200
Message-ID: <CAPFanBFerr62Uv43q9ewRsDKT+geHZXnN+8cHuFZk=pBsrF5sw@mail.gmail.com>
To: Alexey Egorov <alex.only.d@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="94eb2c07710c19fad80557080fb0"
Subject: Re: [Caml-list] strange type error with -principal

--94eb2c07710c19fad80557080fb0
Content-Type: text/plain; charset="UTF-8"

These errors on "ambiguous" types come from GADT type checking, which
requires annotations in certain places (-principal is more picky about
requiring more annotations; instead sometimes the type-checker makes
guesses).

Currently the syntactic forms
  let <variable> : <type> = <expr> in <expr>
and
  let <pattern> : <type> = <expr> in <expr>
are not desugared in the same way. The first is turned into
  let <variable> = (<expr> : <type>) in <expr>
and the second into
  let (<pattern> : <type>) = <expr> in <expr>

In the first case (let <variable>), the body of the definition gets the
annotation. This is required, in your code, for this body to compile under
-principal. In the second case (let <pattern>), the body does not get the
annotation, so type-checking fails (under -principal).

You can fix it yourself by adding the annotation on the right-hand-side
directly

  let (op, idx) = (begin match ... end : int op * int)

in fact it suffices to write (op : int op), 2 in the second clause's
right-hand-side.

I don't know whether (let <pattern> : <type> = <expr> in <expr>) could
instead be desugared into
(let (<pattern> : <type) = (<expr> : <type>) in <expr>), which would also
fix the issue. The specifics of how type information is propagated in the
type-checker is a delicate design aspect of the type-checker which may
still evolve in the future.

If you wonder what the error message means, you should read the GADT
section in the Reference Manual, and in particular the "type inference"
subsection (but it depends on the text before it):
  http://caml.inria.fr/pub/docs/manual-ocaml-4.05/extn.html#sec236

The problem is that within the Op clause, we know the type equality (a =
int), but this is not true outside the clause; so when a value that has
both types (a op) and (int op) is returned by the clause, the type-checker
cannot know which type to give to the outside (a op, or int op?), and it
needs an explicit annotation to not make an arbitrary (non-principal)
choice.

On Fri, Aug 18, 2017 at 4:09 PM, Alexey Egorov <alex.only.d@gmail.com>
wrote:

> Hello,
>
> I'm getting very confusing error when compiling with -principal:
>
> > Error: This expression has type int op
> >       but an expression was expected of type 'a
> >       This instance of int is ambiguous:
> >       it would escape the scope of its equation
>
> What is the "instance of int"?
>
> Here is the code - https://pastebin.com/T74haahx
> I'm mostly confused by the fact that changing pattern from (op, idx)
> to simple value binding eliminates this error.
>
> Thanks!
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--94eb2c07710c19fad80557080fb0
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div>These errors on &quot;ambiguous&quot; =
types come from GADT type checking, which requires annotations in certain p=
laces (-principal is more picky about requiring more annotations; instead s=
ometimes the type-checker makes guesses).<br><br></div>Currently the syntac=
tic forms<br>=C2=A0 let &lt;variable&gt; : &lt;type&gt; =3D &lt;expr&gt; in=
 &lt;expr&gt;<br></div>and<br></div>=C2=A0 let &lt;pattern&gt; : &lt;type&g=
t; =3D &lt;expr&gt; in &lt;expr&gt;<br></div><div>are not desugared in the =
same way. The first is turned into<br></div><div>=C2=A0 let &lt;variable&gt=
; =3D (&lt;expr&gt; : &lt;type&gt;) in &lt;expr&gt;<br></div><div>and the s=
econd into<br></div><div>=C2=A0 let (&lt;pattern&gt; : &lt;type&gt;) =3D &l=
t;expr&gt; in &lt;expr&gt;<br><br></div><div>In the first case (let &lt;var=
iable&gt;), the body of the definition gets the annotation. This is require=
d, in your code, for this body to compile under -principal. In the second c=
ase (let &lt;pattern&gt;), the body does not get the annotation, so type-ch=
ecking fails (under -principal).<br><br></div><div>You can fix it yourself =
by adding the annotation on the right-hand-side directly<br><br>=C2=A0 let =
(op, idx) =3D (begin match ... end : int op * int)<br></div><div><br>in fac=
t it suffices to write (op : int op), 2 in the second clause&#39;s right-ha=
nd-side.<br><br></div><div>I don&#39;t know whether (let &lt;pattern&gt; : =
&lt;type&gt; =3D &lt;expr&gt; in &lt;expr&gt;) could instead be desugared i=
nto<br></div><div>(let (&lt;pattern&gt; : &lt;type) =3D (&lt;expr&gt; : &lt=
;type&gt;) in &lt;expr&gt;), which would also fix the issue. The specifics =
of how type information is propagated in the type-checker is a delicate des=
ign aspect of the type-checker which may still evolve in the future.<br><br=
></div><div>If you wonder what the error message means, you should read the=
 GADT section in the Reference Manual, and in particular the &quot;type inf=
erence&quot; subsection (but it depends on the text before it):<br>=C2=A0 <=
a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml-4.05/extn.html#sec236"=
>http://caml.inria.fr/pub/docs/manual-ocaml-4.05/extn.html#sec236</a><br><b=
r></div><div>The problem is that within the Op clause, we know the type equ=
ality (a =3D int), but this is not true outside the clause; so when a value=
 that has both types (a op) and (int op) is returned by the clause, the typ=
e-checker cannot know which type to give to the outside (a op, or int op?),=
 and it needs an explicit annotation to not make an arbitrary (non-principa=
l) choice.<br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmai=
l_quote">On Fri, Aug 18, 2017 at 4:09 PM, Alexey Egorov <span dir=3D"ltr">&=
lt;<a href=3D"mailto:alex.only.d@gmail.com" target=3D"_blank">alex.only.d@g=
mail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hello,<b=
r>
<br>
I&#39;m getting very confusing error when compiling with -principal:<br>
<br>
&gt; Error: This expression has type int op<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0but an expression was expected of type &#39;=
a<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0This instance of int is ambiguous:<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0it would escape the scope of its equation<br>
<br>
What is the &quot;instance of int&quot;?<br>
<br>
Here is the code - <a href=3D"https://pastebin.com/T74haahx" rel=3D"norefer=
rer" target=3D"_blank">https://pastebin.com/T74haahx</a><br>
I&#39;m mostly confused by the fact that changing pattern from (op, idx)<br>
to simple value binding eliminates this error.<br>
<br>
Thanks!<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/<wbr=
>ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>bugs</a><br>
</font></span></blockquote></div><br></div>

--94eb2c07710c19fad80557080fb0--
