Return-Path: <frederic.bour@lakaban.net>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 8FA327F747
	for <caml-list@sympa.inria.fr>; Fri,  8 Aug 2014 20:28:49 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  frederic.bour@lakaban.net) identity=pra;
  client-ip=94.23.239.155;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="frederic.bour@lakaban.net";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  frederic.bour@lakaban.net designates 94.23.239.155 as
  permitted sender) identity=mailfrom; client-ip=94.23.239.155;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="frederic.bour@lakaban.net";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail.lakaban.net) identity=helo;
  client-ip=94.23.239.155;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="frederic.bour@lakaban.net";
  x-sender="postmaster@mail.lakaban.net";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuIZAAUW5VNeF++b/2dsb2JhbABagmItAU9Xgl0agmCrK4QulV2BY4dIAYErd4QDAQEEASMEGQEBExkLAQ8LGA0dAgIhJBIGExIJiBMDCQwJrnt3hQIBBYsJAwqFYBEGjR+BRWQEB4J5gVKFBQWNDIMqhGWCCYFWhVCHIAOGL4FGgn0
X-IPAS-Result: AuIZAAUW5VNeF++b/2dsb2JhbABagmItAU9Xgl0agmCrK4QulV2BY4dIAYErd4QDAQEEASMEGQEBExkLAQ8LGA0dAgIhJBIGExIJiBMDCQwJrnt3hQIBBYsJAwqFYBEGjR+BRWQEB4J5gVKFBQWNDIMqhGWCCYFWhVCHIAOGL4FGgn0
X-IronPort-AV: E=Sophos;i="5.01,826,1400018400"; 
   d="scan'208";a="74341462"
Received: from lakaban.net (HELO mail.lakaban.net) ([94.23.239.155])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 08 Aug 2014 20:28:48 +0200
Received: from [192.168.0.31] (cpc27-cmbg15-2-0-cust159.5-4.cable.virginm.net [86.27.188.160])
	(Authenticated sender: defre@ygg-drasil.fr)
	by mail.lakaban.net (Postfix) with ESMTPSA id EDF5F1200019;
	Fri,  8 Aug 2014 20:25:17 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=lakaban.net;
	s=default; t=1407522318;
	bh=i0PzF6OrWJYrhZzBs4qTgRETARg399us7lE95kiYMR0=;
	h=Date:From:Subject:To:Cc:Message-Id:In-Reply-To:References:
	 MIME-Version:Content-Type;
	b=Mnh9CXIyX2TP73s8pDRGra9Hvq6DEtWCL2Hro6fsNaGd14wpxjFPF3+VyOGbbaSKC
	 wh66fQwkwAq56ifaAEhsi8jTNTNgz3AxbP5VATTI5lYyYLXRoMsGbqKOdFbbywCB9w
	 hhKpRBnGpe6rHawE8Mr1I4xe/CTqlMR8nj+iMooY=
Date: Fri, 08 Aug 2014 18:29:03 +0001
From: =?iso-8859-1?b?RnLpZOlyaWM=?= Bour <frederic.bour@lakaban.net>
To: Markus Mottl <markus.mottl@gmail.com>
Cc: Gabriel Scherer <gabriel.scherer@gmail.com>, Ben Millwood
	<bmillwood@janestreet.com>, Philippe Veber <philippe.veber@gmail.com>,
	caml users <caml-list@inria.fr>
Message-Id: <1407522483.1213.2@mail.lakaban.net>
In-Reply-To: 
 <CAP_800pFWMPeuzevz1uRTQeYyjujrr6yGVL3mU8MoyVfsuw2QA@mail.gmail.com>
References:
	<CAOOOohRCFcHLsgkpVrknKcQG1asP6WwUwvwmMuZbPV72gitL+g@mail.gmail.com>
	<CA+MHO53k186F3cAAHdsKmxWEXFt-Qg0_B8eL5OvAkW1jZaDg2A@mail.gmail.com>
	<CA+MHO52gGgVHU7CjmSf9zUixourShH59eEPRTLVQ9sNm2K1tnw@mail.gmail.com>
	<CAP_800q-q8_vcWofCZ4_mRcCm=JrE+BWUxLCAOP9N5vdWz8SiA@mail.gmail.com>
	<CA+MHO53O_RAxkFHfOQ9EjQSQDe-CF4ZSD1XPm0cWh_5PxwwV7Q@mail.gmail.com>
	<CAP_800p2+Ej0_biuWBRASEJ2E-xKGtsmcngaBXuH_qS8XJDFxQ@mail.gmail.com>
	<CAPFanBEbBN4po5qE4uzWWK2qUC0BBPdBaEjx6Mga53ftPaTM0Q@mail.gmail.com>
	<CAP_800pFWMPeuzevz1uRTQeYyjujrr6yGVL3mU8MoyVfsuw2QA@mail.gmail.com>
X-Mailer: geary/0.6.1
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-aGRjbgCoaTbE28Gu9jhE"
Subject: Re: [Caml-list] Not letting channels escape.

--=-aGRjbgCoaTbE28Gu9jhE
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: quoted-printable

ST.input_line is just a reified effect, it can't be executed outside of=20
the ST monad.
You can make the value escape, but you can't do anything with it.=20

And because of the existential variable being propagated, it can't be=20
executed outside of this run of the ST value.

Le ven. 8 ao=C3=BBt 2014 =C3=A0 19:23, Markus Mottl <markus.mottl@gmail.com=
> a=20
=C3=A9crit :
> How would you implement this safely with ST here?  I wasn't using the
> standard input_line but "ST.input_line", which already returns a
> monadic type.  The trick here was to use the monadic "return" to
> return a closure that captures the existential variable, allowing me
> to execute the computation outside of the safe region.
>=20
> Regards,
> Markus
>=20
> On Fri, Aug 8, 2014 at 1:37 PM, Gabriel Scherer
> <gabriel.scherer@gmail.com> wrote:
>>  The ST trick only works when all primitives affecting resource are=20
>> in the
>>  monadic abstraction (they mention the ST region variable in their
>>  computation type). This is not the case in Markus example as=20
>> "input_line" is
>>  a non-typed effect. Using ST safely would be possible in OCaml, but=20
>> you
>>  would have to completely eschew the standard library and use a=20
>> different
>>  base where all effectful functions have a monadic type. It is the=20
>> library,
>>  not the language itself, that allows this.
>>=20
>>  On the contrary, linear types are distinctly a language feature.=20
>> Using
>>  monads to encapsulate a form of linearity is an old trick. If you=20
>> want to
>>  have a taste of built-in linear typing, you may want to give Mezzo=20
>> a try (
>>  http://protz.github.io/mezzo/ ).
>>=20
>>=20
>>  On Fri, Aug 8, 2014 at 7:21 PM, Markus Mottl=20
>> <markus.mottl@gmail.com> wrote:
>>>=20
>>>  I see, I was replying to the "reference problem" and hadn't read=20
>>> your
>>>  implementation, which, besides existentials, already requires=20
>>> monads
>>>  as return values.
>>>=20
>>>  Actually, it just occurred to me that one can even break the=20
>>> monadic
>>>  approach in a purely functional way.  You are just one "return"=20
>>> away
>>>  from disaster:
>>>=20
>>>    let f =3D
>>>      ST.with_file "foo.txt" ~f:{
>>>        ST.f =3D fun c -> ST.return (fun () -> ignore (ST.input_line=20
>>> c))
>>>      }
>>>    in
>>>    f ()
>>>=20
>>>  You'd have to eliminate "return", in which case it wouldn't be a=20
>>> monad
>>>  anymore and not general enough for realistic uses of "with_file".
>>>=20
>>>  Regards,
>>>  Markus
>>>=20
>>>  On Fri, Aug 8, 2014 at 12:01 PM, Ben Millwood=20
>>> <bmillwood@janestreet.com>
>>>  wrote:
>>>  > I protected against that in my module by carrying the=20
>>> existential type
>>>  > variable in the result of input_line as well, because I stumbled=20
>>> into
>>>  > exactly that example while originally drafting my e-mail :)
>>>  >
>>>  > In a sense I'm reinventing monadic IO but in a bit of a=20
>>> half-hearted
>>>  > way. It
>>>  > wouldn't take much work to make it a bit more fully-hearted, but=20
>>> it
>>>  > would
>>>  > still be inconvenient to actually use.
>>>  >
>>>  >
>>>  > On 8 August 2014 16:44, Markus Mottl <markus.mottl@gmail.com>=20
>>> wrote:
>>>  >>
>>>  >> It doesn't even require references to screw things up here.=20=20
>>> Just
>>>  >> return the closure containing the channel from within "f":
>>>  >>
>>>  >>   In_channel.with_file "foo.txt" ~f:(fun ic () -> input_line ic)
>>>  >>   |> fun f -> f ()
>>>  >>
>>>  >> The initial Stream-example is basically just an instance of this
>>>  >> "returning a closure" problem.
>>>  >>
>>>  >> But the availability of references and exceptions arguably makes
>>>  >> things worse, because you cannot even use monadic I/O +=20
>>> existential
>>>  >> types to achieve guaranteed safety.
>>>  >>
>>>  >> Regards,
>>>  >> Markus
>>>  >>
>>>  >> On Fri, Aug 8, 2014 at 10:49 AM, Ben Millwood
>>>  >> <bmillwood@janestreet.com>
>>>  >> wrote:
>>>  >> > It's been pointed out to me that the above certainly isn't=20
>>> perfectly
>>>  >> > secure.
>>>  >> > E.g.
>>>  >> >
>>>  >> > let f =3D ref (fun () -> ()) in
>>>  >> > with_file "safe.ml" ~f:{ f =3D fun c ->
>>>  >> >   return (f :=3D fun () ->
>>>  >> >     Fn.ignore (map (input_line c) ~f:print_string_option)) };
>>>  >> > !f ()
>>>  >> >
>>>  >> > gets Exception: (Sys_error "Bad file descriptor"). Even=20
>>> though the
>>>  >> > channel
>>>  >> > and any operations on it can't escape the closure, the type=20
>>> of a
>>>  >> > function
>>>  >> > which uses them needn't mention them at all.
>>>  >> >
>>>  >> > It's pretty hard to do anything about this in the presence of
>>>  >> > unrestricted
>>>  >> > side effects, so perhaps there's a reason why the Haskellers=20
>>> are
>>>  >> > excited
>>>  >> > about this sort of thing and you don't see it in OCaml so=20
>>> much :)
>>>  >> >
>>>  >> > That said, you do seem to be forced to make a bit more of an=20
>>> effort
>>>  >> > to
>>>  >> > break
>>>  >> > things here, so I don't think the technique is completely=20
>>> without
>>>  >> > merit,
>>>  >> > perhaps in cases where you'd be defining all your own=20
>>> operations
>>>  >> > anyway,
>>>  >> > so
>>>  >> > the duplication isn't an issue.
>>>  >> >
>>>  >> >
>>>  >> > On 8 August 2014 12:30, Ben Millwood=20
>>> <bmillwood@janestreet.com>
>>>  >> > wrote:
>>>  >> >>
>>>  >> >> There's a trick with existential types, as used in e.g.=20
>>> Haskell's ST
>>>  >> >> monad. It uses the fact that an existentially-quantified type
>>>  >> >> variable
>>>  >> >> can't
>>>  >> >> escape its scope, so if your channel type and results that=20
>>> depend on
>>>  >> >> it
>>>  >> >> are
>>>  >> >> parametrised by an existential type variable, the=20
>>> corresponding
>>>  >> >> values
>>>  >> >> can't
>>>  >> >> escape the scope of the callback either.
>>>  >> >>
>>>  >> >> Something like:
>>>  >> >>
>>>  >> >> module ST : sig
>>>  >> >>   type ('a, 's) t
>>>  >> >>   include Monad.S2 with type ('a, 's) t :=3D ('a, 's) t
>>>  >> >>   type 's chan
>>>  >> >>   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
>>>  >> >>   val with_file : string -> f:'a f -> 'a
>>>  >> >>
>>>  >> >>   val input_line : 's chan -> (string option, 's) t
>>>  >> >> end =3D struct
>>>  >> >>   module T =3D struct
>>>  >> >>     type ('a, 's) t =3D 'a
>>>  >> >>     let return x =3D x
>>>  >> >>     let bind x f =3D f x
>>>  >> >>     let map x ~f =3D f x
>>>  >> >>   end
>>>  >> >>   include T
>>>  >> >>   include Monad.Make2(T)
>>>  >> >>   type 's chan =3D In_channel.t
>>>  >> >>   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
>>>  >> >>   let with_file fp ~f:{ f } =3D In_channel.with_file fp ~f
>>>  >> >>   let input_line c =3D In_channel.input_line c
>>>  >> >> end
>>>  >> >> ;;
>>>  >> >>
>>>  >> >> match ST.with_file "safe.ml" ~f:{ ST.f =3D fun c ->=20
>>> ST.input_line c }
>>>  >> >> with
>>>  >> >> | None -> print_endline "None"
>>>  >> >> | Some line -> print_endline line
>>>  >> >>
>>>  >> >>
>>>  >> >> On 8 August 2014 11:23, Philippe Veber=20
>>> <philippe.veber@gmail.com>
>>>  >> >> wrote:
>>>  >> >>>
>>>  >> >>> Dear all,
>>>  >> >>>
>>>  >> >>> many libraries like lwt, batteries or core provide a very=20
>>> nice
>>>  >> >>> idiom
>>>  >> >>> to
>>>  >> >>> be used when a function uses a resource (file, connection,=20
>>> mutex,
>>>  >> >>> et
>>>  >> >>> cetera), for instance in Core.In_channel, the function:
>>>  >> >>>
>>>  >> >>> val with_file : ?binary:bool -> string -> f:(t -> 'a) -> 'a
>>>  >> >>>
>>>  >> >>> opens a channel for [f] and ensures it is closed after the=20
>>> call to
>>>  >> >>> [f],
>>>  >> >>> even if it raises an exception. So these functions basically
>>>  >> >>> prevent
>>>  >> >>> from
>>>  >> >>> leaking resources. They fail, however, to prevent a user=20
>>> from using
>>>  >> >>> the
>>>  >> >>> resource after it has been released. For instance, writing:
>>>  >> >>>
>>>  >> >>> input_char (In_channel.with_file fn (fun x -> x))
>>>  >> >>>
>>>  >> >>> is perfectly legal type-wise, but will fail at run-time.=20
>>> There are
>>>  >> >>> of
>>>  >> >>> course less obvious situations, for instance if you define a
>>>  >> >>> function:
>>>  >> >>>
>>>  >> >>> val lines : in_channel -> string Stream.t
>>>  >> >>>
>>>  >> >>> then the following will also fail:
>>>  >> >>>
>>>  >> >>> Stream.iter f (In_channel.with_file fn lines)
>>>  >> >>>
>>>  >> >>> My question is the following: is there a way to have the=20
>>> compiler
>>>  >> >>> check
>>>  >> >>> resources are not used after they are closed? I presume=20
>>> this can
>>>  >> >>> only
>>>  >> >>> be
>>>  >> >>> achieved by strongly restricting the kind of function=20
>>> passed to
>>>  >> >>> [with_file].
>>>  >> >>> One simple restriction I see is to define a type of=20
>>> immediate
>>>  >> >>> value,
>>>  >> >>> that
>>>  >> >>> roughly correspond to "simple" datatypes (no closures, no=20
>>> lazy
>>>  >> >>> expressions):
>>>  >> >>>
>>>  >> >>> module Immediate : sig
>>>  >> >>>   type 'a t =3D private 'a
>>>  >> >>>   val int : int -> int t
>>>  >> >>>   val list : ('a -> 'a t) -> 'a list -> 'a list t
>>>  >> >>>   val tuple : ('a -> 'a t) -> ('b -> 'b t) -> ('a * 'b) ->=20
>>> ('a *
>>>  >> >>> 'b) t
>>>  >> >>>   (* for records, use the same trick than in
>>>  >> >>> http://www.lexifi.com/blog/dynamic-types *)
>>>  >> >>>   ...
>>>  >> >>> end
>>>  >> >>>
>>>  >> >>> and have the type of [with_file] changed to
>>>  >> >>>
>>>  >> >>> val with_file : string -> f:(in_channel -> 'a Immediate.t)=20
>>> -> 'a
>>>  >> >>>
>>>  >> >>> I'm sure there are lots of smarter solutions out there.=20
>>> Would
>>>  >> >>> anyone
>>>  >> >>> happen to know some?
>>>  >> >>>
>>>  >> >>> Cheers,
>>>  >> >>>   Philippe.
>>>  >> >>>
>>>  >> >>
>>>  >> >
>>>  >>
>>>  >>
>>>  >>
>>>  >> --
>>>  >> Markus Mottl        http://www.ocaml.info=20=20=20=20=20=20=20=20
>>> markus.mottl@gmail.com
>>>  >
>>>  >
>>>=20
>>>=20
>>>=20
>>>  --
>>>  Markus Mottl        http://www.ocaml.info=20=20=20=20=20=20=20=20
>>> markus.mottl@gmail.com
>>>=20
>>>  --
>>>  Caml-list mailing list.  Subscription management and archives:
>>>  https://sympa.inria.fr/sympa/arc/caml-list
>>>  Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>>  Bug reports: http://caml.inria.fr/bin/caml-bugs
>>=20
>>=20
>=20
>=20
>=20
> --=20
> Markus Mottl        http://www.ocaml.info=20=20=20=20=20=20=20=20
> markus.mottl@gmail.com
>=20
> --=20
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--=-aGRjbgCoaTbE28Gu9jhE
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div>ST.input_line is just a reified effect, it can't be executed outside o=
f the ST monad.</div><div>You can make the value escape, but you can't do a=
nything with it.&nbsp;</div><div><br></div><div>And because of the existent=
ial variable being propagated, it can't be executed outside of this run of =
the ST value.</div><br>Le ven. 8 ao=C3=BBt 2014 =C3=A0 19:23, Markus Mottl =
&lt;markus.mottl@gmail.com&gt; a =C3=A9crit&nbsp;:<br>
<blockquote type=3D"cite"><div class=3D"plaintext" style=3D"white-space: pr=
e-wrap;">How would you implement this safely with ST here?  I wasn't using =
the
standard input_line but "ST.input_line", which already returns a
monadic type.  The trick here was to use the monadic "return" to
return a closure that captures the existential variable, allowing me
to execute the computation outside of the safe region.

Regards,
Markus

On Fri, Aug 8, 2014 at 1:37 PM, Gabriel Scherer
&lt;gabriel.scherer@gmail.com&gt; wrote:
<blockquote> The ST trick only works when all primitives affecting resource=
 are in the
 monadic abstraction (they mention the ST region variable in their
 computation type). This is not the case in Markus example as "input_line" =
is
 a non-typed effect. Using ST safely would be possible in OCaml, but you
 would have to completely eschew the standard library and use a different
 base where all effectful functions have a monadic type. It is the library,
 not the language itself, that allows this.

 On the contrary, linear types are distinctly a language feature. Using
 monads to encapsulate a form of linearity is an old trick. If you want to
 have a taste of built-in linear typing, you may want to give Mezzo a try (
 <a href=3D"http://protz.github.io/mezzo/">http://protz.github.io/mezzo/</a=
> ).


 On Fri, Aug 8, 2014 at 7:21 PM, Markus Mottl &lt;markus.mottl@gmail.com&gt=
; wrote:
<blockquote>
 I see, I was replying to the "reference problem" and hadn't read your
 implementation, which, besides existentials, already requires monads
 as return values.

 Actually, it just occurred to me that one can even break the monadic
 approach in a purely functional way.  You are just one "return" away
 from disaster:

   let f =3D
     ST.with_file "foo.txt" ~f:{
       ST.f =3D fun c -&gt; ST.return (fun () -&gt; ignore (ST.input_line c=
))
     }
   in
   f ()

 You'd have to eliminate "return", in which case it wouldn't be a monad
 anymore and not general enough for realistic uses of "with_file".

 Regards,
 Markus

 On Fri, Aug 8, 2014 at 12:01 PM, Ben Millwood &lt;bmillwood@janestreet.com=
&gt;
 wrote:
 &gt; I protected against that in my module by carrying the existential type
 &gt; variable in the result of input_line as well, because I stumbled into
 &gt; exactly that example while originally drafting my e-mail :)
 &gt;
 &gt; In a sense I'm reinventing monadic IO but in a bit of a half-hearted
 &gt; way. It
 &gt; wouldn't take much work to make it a bit more fully-hearted, but it
 &gt; would
 &gt; still be inconvenient to actually use.
 &gt;
 &gt;
 &gt; On 8 August 2014 16:44, Markus Mottl &lt;markus.mottl@gmail.com&gt; w=
rote:
 &gt;&gt;
 &gt;&gt; It doesn't even require references to screw things up here.  Just
 &gt;&gt; return the closure containing the channel from within "f":
 &gt;&gt;
 &gt;&gt;   In_channel.with_file "foo.txt" ~f:(fun ic () -&gt; input_line i=
c)
 &gt;&gt;   |&gt; fun f -&gt; f ()
 &gt;&gt;
 &gt;&gt; The initial Stream-example is basically just an instance of this
 &gt;&gt; "returning a closure" problem.
 &gt;&gt;
 &gt;&gt; But the availability of references and exceptions arguably makes
 &gt;&gt; things worse, because you cannot even use monadic I/O + existenti=
al
 &gt;&gt; types to achieve guaranteed safety.
 &gt;&gt;
 &gt;&gt; Regards,
 &gt;&gt; Markus
 &gt;&gt;
 &gt;&gt; On Fri, Aug 8, 2014 at 10:49 AM, Ben Millwood
 &gt;&gt; &lt;bmillwood@janestreet.com&gt;
 &gt;&gt; wrote:
 &gt;&gt; &gt; It's been pointed out to me that the above certainly isn't p=
erfectly
 &gt;&gt; &gt; secure.
 &gt;&gt; &gt; E.g.
 &gt;&gt; &gt;
 &gt;&gt; &gt; let f =3D ref (fun () -&gt; ()) in
 &gt;&gt; &gt; with_file "safe.ml" ~f:{ f =3D fun c -&gt;
 &gt;&gt; &gt;   return (f :=3D fun () -&gt;
 &gt;&gt; &gt;     Fn.ignore (map (input_line c) ~f:print_string_option)) };
 &gt;&gt; &gt; !f ()
 &gt;&gt; &gt;
 &gt;&gt; &gt; gets Exception: (Sys_error "Bad file descriptor"). Even thou=
gh the
 &gt;&gt; &gt; channel
 &gt;&gt; &gt; and any operations on it can't escape the closure, the type =
of a
 &gt;&gt; &gt; function
 &gt;&gt; &gt; which uses them needn't mention them at all.
 &gt;&gt; &gt;
 &gt;&gt; &gt; It's pretty hard to do anything about this in the presence of
 &gt;&gt; &gt; unrestricted
 &gt;&gt; &gt; side effects, so perhaps there's a reason why the Haskellers=
 are
 &gt;&gt; &gt; excited
 &gt;&gt; &gt; about this sort of thing and you don't see it in OCaml so mu=
ch :)
 &gt;&gt; &gt;
 &gt;&gt; &gt; That said, you do seem to be forced to make a bit more of an=
 effort
 &gt;&gt; &gt; to
 &gt;&gt; &gt; break
 &gt;&gt; &gt; things here, so I don't think the technique is completely wi=
thout
 &gt;&gt; &gt; merit,
 &gt;&gt; &gt; perhaps in cases where you'd be defining all your own operat=
ions
 &gt;&gt; &gt; anyway,
 &gt;&gt; &gt; so
 &gt;&gt; &gt; the duplication isn't an issue.
 &gt;&gt; &gt;
 &gt;&gt; &gt;
 &gt;&gt; &gt; On 8 August 2014 12:30, Ben Millwood &lt;bmillwood@janestree=
t.com&gt;
 &gt;&gt; &gt; wrote:
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt; There's a trick with existential types, as used in e.g. =
Haskell's ST
 &gt;&gt; &gt;&gt; monad. It uses the fact that an existentially-quantified=
 type
 &gt;&gt; &gt;&gt; variable
 &gt;&gt; &gt;&gt; can't
 &gt;&gt; &gt;&gt; escape its scope, so if your channel type and results th=
at depend on
 &gt;&gt; &gt;&gt; it
 &gt;&gt; &gt;&gt; are
 &gt;&gt; &gt;&gt; parametrised by an existential type variable, the corres=
ponding
 &gt;&gt; &gt;&gt; values
 &gt;&gt; &gt;&gt; can't
 &gt;&gt; &gt;&gt; escape the scope of the callback either.
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt; Something like:
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt; module ST : sig
 &gt;&gt; &gt;&gt;   type ('a, 's) t
 &gt;&gt; &gt;&gt;   include Monad.S2 with type ('a, 's) t :=3D ('a, 's) t
 &gt;&gt; &gt;&gt;   type 's chan
 &gt;&gt; &gt;&gt;   type 'a f =3D { f : 's . 's chan -&gt; ('a, 's) t }
 &gt;&gt; &gt;&gt;   val with_file : string -&gt; f:'a f -&gt; 'a
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt;   val input_line : 's chan -&gt; (string option, 's) t
 &gt;&gt; &gt;&gt; end =3D struct
 &gt;&gt; &gt;&gt;   module T =3D struct
 &gt;&gt; &gt;&gt;     type ('a, 's) t =3D 'a
 &gt;&gt; &gt;&gt;     let return x =3D x
 &gt;&gt; &gt;&gt;     let bind x f =3D f x
 &gt;&gt; &gt;&gt;     let map x ~f =3D f x
 &gt;&gt; &gt;&gt;   end
 &gt;&gt; &gt;&gt;   include T
 &gt;&gt; &gt;&gt;   include Monad.Make2(T)
 &gt;&gt; &gt;&gt;   type 's chan =3D In_channel.t
 &gt;&gt; &gt;&gt;   type 'a f =3D { f : 's . 's chan -&gt; ('a, 's) t }
 &gt;&gt; &gt;&gt;   let with_file fp ~f:{ f } =3D In_channel.with_file fp =
~f
 &gt;&gt; &gt;&gt;   let input_line c =3D In_channel.input_line c
 &gt;&gt; &gt;&gt; end
 &gt;&gt; &gt;&gt; ;;
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt; match ST.with_file "safe.ml" ~f:{ ST.f =3D fun c -&gt; S=
T.input_line c }
 &gt;&gt; &gt;&gt; with
 &gt;&gt; &gt;&gt; | None -&gt; print_endline "None"
 &gt;&gt; &gt;&gt; | Some line -&gt; print_endline line
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;&gt; On 8 August 2014 11:23, Philippe Veber &lt;philippe.vebe=
r@gmail.com&gt;
 &gt;&gt; &gt;&gt; wrote:
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; Dear all,
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; many libraries like lwt, batteries or core provide a=
 very nice
 &gt;&gt; &gt;&gt;&gt; idiom
 &gt;&gt; &gt;&gt;&gt; to
 &gt;&gt; &gt;&gt;&gt; be used when a function uses a resource (file, conne=
ction, mutex,
 &gt;&gt; &gt;&gt;&gt; et
 &gt;&gt; &gt;&gt;&gt; cetera), for instance in Core.In_channel, the functi=
on:
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; val with_file : ?binary:bool -&gt; string -&gt; f:(t=
 -&gt; 'a) -&gt; 'a
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; opens a channel for [f] and ensures it is closed aft=
er the call to
 &gt;&gt; &gt;&gt;&gt; [f],
 &gt;&gt; &gt;&gt;&gt; even if it raises an exception. So these functions b=
asically
 &gt;&gt; &gt;&gt;&gt; prevent
 &gt;&gt; &gt;&gt;&gt; from
 &gt;&gt; &gt;&gt;&gt; leaking resources. They fail, however, to prevent a =
user from using
 &gt;&gt; &gt;&gt;&gt; the
 &gt;&gt; &gt;&gt;&gt; resource after it has been released. For instance, w=
riting:
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; input_char (In_channel.with_file fn (fun x -&gt; x))
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; is perfectly legal type-wise, but will fail at run-t=
ime. There are
 &gt;&gt; &gt;&gt;&gt; of
 &gt;&gt; &gt;&gt;&gt; course less obvious situations, for instance if you =
define a
 &gt;&gt; &gt;&gt;&gt; function:
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; val lines : in_channel -&gt; string Stream.t
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; then the following will also fail:
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; Stream.iter f (In_channel.with_file fn lines)
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; My question is the following: is there a way to have=
 the compiler
 &gt;&gt; &gt;&gt;&gt; check
 &gt;&gt; &gt;&gt;&gt; resources are not used after they are closed? I pres=
ume this can
 &gt;&gt; &gt;&gt;&gt; only
 &gt;&gt; &gt;&gt;&gt; be
 &gt;&gt; &gt;&gt;&gt; achieved by strongly restricting the kind of functio=
n passed to
 &gt;&gt; &gt;&gt;&gt; [with_file].
 &gt;&gt; &gt;&gt;&gt; One simple restriction I see is to define a type of =
immediate
 &gt;&gt; &gt;&gt;&gt; value,
 &gt;&gt; &gt;&gt;&gt; that
 &gt;&gt; &gt;&gt;&gt; roughly correspond to "simple" datatypes (no closure=
s, no lazy
 &gt;&gt; &gt;&gt;&gt; expressions):
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; module Immediate : sig
 &gt;&gt; &gt;&gt;&gt;   type 'a t =3D private 'a
 &gt;&gt; &gt;&gt;&gt;   val int : int -&gt; int t
 &gt;&gt; &gt;&gt;&gt;   val list : ('a -&gt; 'a t) -&gt; 'a list -&gt; 'a =
list t
 &gt;&gt; &gt;&gt;&gt;   val tuple : ('a -&gt; 'a t) -&gt; ('b -&gt; 'b t) =
-&gt; ('a * 'b) -&gt; ('a *
 &gt;&gt; &gt;&gt;&gt; 'b) t
 &gt;&gt; &gt;&gt;&gt;   (* for records, use the same trick than in
 &gt;&gt; &gt;&gt;&gt; <a href=3D"http://www.lexifi.com/blog/dynamic-types"=
>http://www.lexifi.com/blog/dynamic-types</a> *)
 &gt;&gt; &gt;&gt;&gt;   ...
 &gt;&gt; &gt;&gt;&gt; end
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; and have the type of [with_file] changed to
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; val with_file : string -&gt; f:(in_channel -&gt; 'a =
Immediate.t) -&gt; 'a
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; I'm sure there are lots of smarter solutions out the=
re. Would
 &gt;&gt; &gt;&gt;&gt; anyone
 &gt;&gt; &gt;&gt;&gt; happen to know some?
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;&gt; Cheers,
 &gt;&gt; &gt;&gt;&gt;   Philippe.
 &gt;&gt; &gt;&gt;&gt;
 &gt;&gt; &gt;&gt;
 &gt;&gt; &gt;
 &gt;&gt;
 &gt;&gt;
 &gt;&gt;
 &gt;&gt; --
 &gt;&gt; Markus Mottl        <a href=3D"http://www.ocaml.info">http://www.=
ocaml.info</a>        markus.mottl@gmail.com
 &gt;
 &gt;



 --
 Markus Mottl        <a href=3D"http://www.ocaml.info">http://www.ocaml.inf=
o</a>        markus.mottl@gmail.com

 --
 Caml-list mailing list.  Subscription management and archives:
 <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list">https://sympa.inria=
.fr/sympa/arc/caml-list</a>
 Beginner's list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginners"=
>http://groups.yahoo.com/group/ocaml_beginners</a>
 Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs">http://caml.in=
ria.fr/bin/caml-bugs</a>
</blockquote>

</blockquote>


<div>--=20
</div>Markus Mottl        <a href=3D"http://www.ocaml.info">http://www.ocam=
l.info</a>        markus.mottl@gmail.com

<div>--=20
</div>Caml-list mailing list.  Subscription management and archives:
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list">https://sympa.inria.=
fr/sympa/arc/caml-list</a>
Beginner's list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginners">=
http://groups.yahoo.com/group/ocaml_beginners</a>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs">http://caml.inr=
ia.fr/bin/caml-bugs</a>
</div></blockquote>=

--=-aGRjbgCoaTbE28Gu9jhE--

