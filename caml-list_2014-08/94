Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 342977EE11
	for <caml-list@sympa.inria.fr>; Fri, 22 Aug 2014 05:15:30 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  daniel.buenzli@erratique.ch) identity=pra;
  client-ip=74.55.86.74;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="daniel.buenzli@erratique.ch";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  daniel.buenzli@erratique.ch) identity=mailfrom;
  client-ip=74.55.86.74;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="daniel.buenzli@erratique.ch";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@smtp.webfaction.com) identity=helo;
  client-ip=74.55.86.74;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="postmaster@smtp.webfaction.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhACAAi19lNKN1ZKnGdsb2JhbABZhhGBIrNhnnYQAQEBAQEGDQkJFCmELQSBBwIZDQJJFhuIOgSfR48vlREXgSyRIDaBHQWSI5E5GJE8gzoBAQE
X-IPAS-Result: AhACAAi19lNKN1ZKnGdsb2JhbABZhhGBIrNhnnYQAQEBAQEGDQkJFCmELQSBBwIZDQJJFhuIOgSfR48vlREXgSyRIDaBHQWSI5E5GJE8gzoBAQE
X-IronPort-AV: E=Sophos;i="5.04,377,1406584800"; 
   d="scan'208";a="90459843"
Received: from mail6.webfaction.com (HELO smtp.webfaction.com) ([74.55.86.74])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 22 Aug 2014 05:15:29 +0200
Received: from [172.20.10.2] (188.29.165.213.threembb.co.uk [188.29.165.213])
	by smtp.webfaction.com (Postfix) with ESMTP id EC217212DACF
	for <caml-list@inria.fr>; Fri, 22 Aug 2014 03:11:28 +0000 (UTC)
Date: Fri, 22 Aug 2014 04:11:34 +0100
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Caml-list <caml-list@inria.fr>
Message-ID: <4060AF3441F149839C46804E64E2B9CE@erratique.ch>
X-Mailer: sparrow 1.6.4 (build 1178)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Subject: [Caml-list] Phantom types and variants

Hello,  

I'm pretty sure I have used the following pattern in the past. But the `coerce` function doesn't type. It's quite strange since the type variable is a phantom type so it should not enforce anything. Any hints ? 

--------
module M : sig
  type kind = [ `A | `B ]
  type +'a t constraint 'a = [< kind ]

  val a : unit -> [> `A] t
  val b : unit -> [> `B] t
  val coerce : ([> kind] as 'a) -> 'b t -> 'a t
end = struct                                                                                         
  type kind = [ `A | `B ]                                                                            
  type +'a t =                                                                                       
    { kind : kind }                                                                                  
    constraint 'a = [< kind]                                                                         
                                                                                                     
  let a () = { kind = `A }                                                                           
  let b () = { kind = `B }                                                                           
  let coerce k v = if v.kind <> k then invalid_arg "" else v                                         
end


let (vl : [`A | `B ] M.t list) = [M.a (); M.b ()]
let (v : [`A] M.t) = M.coerce `A (List.hd vl)


--------

Fails with:

Values do not match:
val coerce : kind -> ([< kind ] as 'a) t -> 'a t
is not included in
val coerce : kind -> [< kind ] t -> kind t



Best,

Daniel 


