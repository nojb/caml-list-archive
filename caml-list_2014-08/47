Return-Path: <bmillwood@janestreet.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 4CD2C7F75C
	for <caml-list@sympa.inria.fr>; Mon, 11 Aug 2014 11:08:03 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  bmillwood@janestreet.com) identity=pra;
  client-ip=38.105.200.112;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="bmillwood@janestreet.com";
  x-sender="bmillwood@janestreet.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  bmillwood@janestreet.com designates 38.105.200.112 as
  permitted sender) identity=mailfrom;
  client-ip=38.105.200.112;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="bmillwood@janestreet.com";
  x-sender="bmillwood@janestreet.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mxout1.mail.janestreet.com) identity=helo;
  client-ip=38.105.200.112;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="bmillwood@janestreet.com";
  x-sender="postmaster@mxout1.mail.janestreet.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkYCAIaH6FMmachwnGdsb2JhbABag19XBIIsSK4Ymg6BY4dIAYEPCBYQAQEBAQEIFAk9hAMBAQEDAQwGCAkEGQEBExkLAQQLCQILDQ0TCgICIQESAQUBChIGExIJB4gMAwkIAwqPP5Ahaooyd4UCAQWKCwMKhWARBgqNFR2BKGQEB4J5gVOFBwWQN4RoggmBV4VQhyIDhD0YKYUOaw
X-IPAS-Result: AkYCAIaH6FMmachwnGdsb2JhbABag19XBIIsSK4Ymg6BY4dIAYEPCBYQAQEBAQEIFAk9hAMBAQEDAQwGCAkEGQEBExkLAQQLCQILDQ0TCgICIQESAQUBChIGExIJB4gMAwkIAwqPP5Ahaooyd4UCAQWKCwMKhWARBgqNFR2BKGQEB4J5gVOFBwWQN4RoggmBV4VQhyIDhD0YKYUOaw
X-IronPort-AV: E=Sophos;i="5.01,840,1400018400"; 
   d="scan'208";a="74492939"
Received: from mxout1.mail.janestreet.com ([38.105.200.112])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 11 Aug 2014 11:08:00 +0200
Received: from tot-smtp.delacy.com ([172.27.22.15] helo=tot-smtp)
	by mxout1.mail.janestreet.com with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.82)
	(envelope-from <bmillwood@janestreet.com>)
	id 1XGlaB-0004kZ-0c
	for caml-list@inria.fr; Mon, 11 Aug 2014 05:07:59 -0400
Received: from [172.27.229.230] (helo=mxgoog1.mail.janestreet.com)
	by tot-smtp with esmtps (UNKNOWN:AES256-GCM-SHA384:256)
	(Exim 4.72)
	(envelope-from <bmillwood@janestreet.com>)
	id 1XGla7-0007C9-RD
	for caml-list@inria.fr; Mon, 11 Aug 2014 05:07:55 -0400
Received: from mail-qa0-f44.google.com ([209.85.216.44])
	by mxgoog1.mail.janestreet.com with esmtps (TLSv1:RC4-SHA:128)
	(Exim 4.72)
	(envelope-from <bmillwood@janestreet.com>)
	id 1XGla7-0007pb-L0
	for caml-list@inria.fr; Mon, 11 Aug 2014 05:07:55 -0400
Received: by mail-qa0-f44.google.com with SMTP id f12so7675777qad.31
        for <caml-list@inria.fr>; Mon, 11 Aug 2014 02:07:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=janestreet.com; s=google;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=xFHUwVlOwkwymN9BG+3sXFObk7PRp3tYgmjeKVMdaOo=;
        b=SUxbb0d9C6CPLDb/t3VkMmSsC1ym9GSkSTur8pFf8ZEa5IiHblUVdReXnCiGKww8CR
         FHDtEjSaANo0CsOiq+7KYw/awHIPbx2Z28zgiMSzB5tlheW/BFBj/X6HlGKBmeIjqbBt
         AVHf/w+FaJF0tmsCDlN+HYZujsxWSpDSQmO4Y=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=xFHUwVlOwkwymN9BG+3sXFObk7PRp3tYgmjeKVMdaOo=;
        b=mHmOVOgr3Afeip1eHejrZdiQfg+5WFv8qGWCUe3FcL38AoPxObf93NAExh4jh2Hfc4
         6t+U7QM5JngBqEjvSXB5Ht/0ieeRmxBESF3vPqpqETHyKeP3QZXywbRe1E0Caxd1bjXj
         2FPABr0z7CzrGd4mipVQIxQMArA1YftpNFfgzGloBZC+EEp2gh1PHkbTCWK0buJiFK8p
         s8RuuFU92wpof536oaIjrrfmIAqCjqsUFj8+EKJp2YxLQuHbVEorsZIc6kb4yjFiq0S9
         jTIkcqjvQRWOsFBLuQI99aVe9H8g/EX/OJ/PU0a8y2bFxCq553rQ5tW/8Msrs4TO0dn6
         Hhiw==
X-Gm-Message-State: ALoCoQnOmZQKx36GpNYMWXYQw9tt9Jfy8Ocz4pFKFtxL+LJY9KZAdBCjJ1IOYfVVo8HG2e59TFaNJ1Ipbj5h60aiMya4vhwM5f00xXPh00jiuOBQ/QHrA+pIDFjiHEyFRZnMoIwsKK1s
X-Received: by 10.140.88.243 with SMTP id t106mr43432368qgd.12.1407748075420;
        Mon, 11 Aug 2014 02:07:55 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.140.88.243 with SMTP id t106mr43432333qgd.12.1407748075027;
 Mon, 11 Aug 2014 02:07:55 -0700 (PDT)
Received: by 10.140.82.41 with HTTP; Mon, 11 Aug 2014 02:07:54 -0700 (PDT)
In-Reply-To: <1407527123.1213.3@mail.lakaban.net>
References: <CAOOOohRCFcHLsgkpVrknKcQG1asP6WwUwvwmMuZbPV72gitL+g@mail.gmail.com>
	<CA+MHO53k186F3cAAHdsKmxWEXFt-Qg0_B8eL5OvAkW1jZaDg2A@mail.gmail.com>
	<CA+MHO52gGgVHU7CjmSf9zUixourShH59eEPRTLVQ9sNm2K1tnw@mail.gmail.com>
	<CAP_800q-q8_vcWofCZ4_mRcCm=JrE+BWUxLCAOP9N5vdWz8SiA@mail.gmail.com>
	<CA+MHO53O_RAxkFHfOQ9EjQSQDe-CF4ZSD1XPm0cWh_5PxwwV7Q@mail.gmail.com>
	<CAP_800p2+Ej0_biuWBRASEJ2E-xKGtsmcngaBXuH_qS8XJDFxQ@mail.gmail.com>
	<CAPFanBEbBN4po5qE4uzWWK2qUC0BBPdBaEjx6Mga53ftPaTM0Q@mail.gmail.com>
	<CAP_800pFWMPeuzevz1uRTQeYyjujrr6yGVL3mU8MoyVfsuw2QA@mail.gmail.com>
	<1407522483.1213.2@mail.lakaban.net>
	<CAP_800pkVjNuReggqZf700wB=b5Y3gfZAimR38MSV8OQruEaHg@mail.gmail.com>
	<1407527123.1213.3@mail.lakaban.net>
Date: Mon, 11 Aug 2014 10:07:54 +0100
Message-ID: <CA+MHO50nwFOPN0jm66Km=5Dk-r0AOoCzdeE0kBgvnwxeW0xczw@mail.gmail.com>
From: Ben Millwood <bmillwood@janestreet.com>
To: =?UTF-8?B?RnLDqWTDqXJpYyBCb3Vy?= <frederic.bour@lakaban.net>
Cc: Markus Mottl <markus.mottl@gmail.com>, Gabriel Scherer <gabriel.scherer@gmail.com>, 
	Philippe Veber <philippe.veber@gmail.com>, caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c12cf0f269d7050056e360
Subject: Re: [Caml-list] Not letting channels escape.

--001a11c12cf0f269d7050056e360
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Yeah, that's roughly what I had in mind for a full-hearted approach,
although it turned out to be a bit simpler than I was expecting. Sorry, I
think my original not-quite-right approach probably only confused the issue
:)

Much more on the Haskell approaches:
http://okmij.org/ftp/Haskell/regions.html

I believe not all of them use type classes in an essential way, so may well
be translatable to OCaml.


On 8 August 2014 20:45, Fr=C3=A9d=C3=A9ric Bour <frederic.bour@lakaban.net>=
 wrote:

> But you can't do any meaningful computation with this value.
> It's just a blackbox.
>
> In your example, the (ST.input_line c) inside the closure just build a
> value of type (string option, '_s) t for a specific s.
> In particular you will never be able to execute any action on the input
> channel.
>
> This is not the case with the proposed implementation, because effects are
> executed immediately.
> To ensure isolation, all effects should be "frozen":
>
> module ST : sig
>   type ('a, 's) t
>   val return : 'a -> ('a, 's) t
>   val bind : ('a, 's) t -> ('a -> ('b, 's) t) -> ('b, 's) t
>   type 's chan
>   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
>   val with_file : string -> f:'a f -> 'a
>
>   val input_line : 's chan -> (string, 's) t
> end =3D struct
>   type ('a, 's) t =3D unit -> 'a
>   let return x =3D fun () -> x
>   let bind x f =3D fun () -> f (x ()) ()
>
>   type 's chan =3D in_channel
>   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
>   let with_file fp ~f:{ f } =3D
>     let ic =3D open_in fp in
>     try
>       let result =3D f ic () in
>       close_in_noerr ic;
>       result
>     with exn ->
>       close_in_noerr ic;
>       raise exn
>   let input_line c =3D fun () -> input_line c
> end
>
> Le ven. 8 ao=C3=BBt 2014 =C3=A0 20:30, Markus Mottl <markus.mottl@gmail.c=
om> a
> =C3=A9crit :
>
> The escaping value can still be manipulated through a closure, outside of
> "with_file". The goal was to prevent this. On Fri, Aug 8, 2014 at 2:28 PM,
> Fr=C3=A9d=C3=A9ric Bour <frederic.bour@lakaban.net> wrote:
>
> ST.input_line is just a reified effect, it can't be executed outside of
> the ST monad. You can make the value escape, but you can't do anything wi=
th
> it. And because of the existential variable being propagated, it can't be
> executed outside of this run of the ST value. Le ven. 8 ao=C3=BBt 2014 =
=C3=A0 19:23,
> Markus Mottl <markus.mottl@gmail.com> a =C3=A9crit : How would you implem=
ent
> this safely with ST here? I wasn't using the standard input_line but
> "ST.input_line", which already returns a monadic type. The trick here was
> to use the monadic "return" to return a closure that captures the
> existential variable, allowing me to execute the computation outside of t=
he
> safe region. Regards, Markus On Fri, Aug 8, 2014 at 1:37 PM, Gabriel
> Scherer <gabriel.scherer@gmail.com> wrote: The ST trick only works when
> all primitives affecting resource are in the monadic abstraction (they
> mention the ST region variable in their computation type). This is not the
> case in Markus example as "input_line" is a non-typed effect. Using ST
> safely would be possible in OCaml, but you would have to completely eschew
> the standard library and use a different base where all effectful functio=
ns
> have a monadic type. It is the library, not the language itself, that
> allows this. On the contrary, linear types are distinctly a language
> feature. Using monads to encapsulate a form of linearity is an old trick.
> If you want to have a taste of built-in linear typing, you may want to gi=
ve
> Mezzo a try ( http://protz.github.io/mezzo/ ). On Fri, Aug 8, 2014 at
> 7:21 PM, Markus Mottl <markus.mottl@gmail.com> wrote: I see, I was
> replying to the "reference problem" and hadn't read your implementation,
> which, besides existentials, already requires monads as return values.
> Actually, it just occurred to me that one can even break the monadic
> approach in a purely functional way. You are just one "return" away from
> disaster: let f =3D ST.with_file "foo.txt" ~f:{ ST.f =3D fun c -> ST.retu=
rn
> (fun () -> ignore (ST.input_line c)) } in f () You'd have to eliminate
> "return", in which case it wouldn't be a monad anymore and not general
> enough for realistic uses of "with_file". Regards, Markus On Fri, Aug 8,
> 2014 at 12:01 PM, Ben Millwood <bmillwood@janestreet.com> wrote: > I
> protected against that in my module by carrying the existential type >
> variable in the result of input_line as well, because I stumbled into >
> exactly that example while originally drafting my e-mail :) > > In a sense
> I'm reinventing monadic IO but in a bit of a half-hearted > way. It >
> wouldn't take much work to make it a bit more fully-hearted, but it > wou=
ld
>
> still be inconvenient to actually use. > > > On 8 August 2014 16:44,
>
> Markus Mottl <markus.mottl@gmail.com> wrote: >> >> It doesn't even
> require references to screw things up here. Just >> return the closure
> containing the channel from within "f": >> >> In_channel.with_file
> "foo.txt" ~f:(fun ic () -> input_line ic) >> |> fun f -> f () >> >> The
> initial Stream-example is basically just an instance of this >> "returning
> a closure" problem. >> >> But the availability of references and exceptio=
ns
> arguably makes >> things worse, because you cannot even use monadic I/O +
> existential >> types to achieve guaranteed safety. >> >> Regards, >> Mark=
us
> >> >> On Fri, Aug 8, 2014 at 10:49 AM, Ben Millwood >> <
> bmillwood@janestreet.com> >> wrote: >> > It's been pointed out to me that
> the above certainly isn't perfectly >> > secure. >> > E.g. >> > >> > let f
> =3D ref (fun () -> ()) in >> > with_file "safe.ml" ~f:{ f =3D fun c -> >>=
 >
> return (f :=3D fun () -> >> > Fn.ignore (map (input_line c)
> ~f:print_string_option)) }; >> > !f () >> > >> > gets Exception: (Sys_err=
or
> "Bad file descriptor"). Even though the >> > channel
>
> > and any operations on it can't escape the closure, the type of a >> >
>
> function >> > which uses them needn't mention them at all. >> > >> > It's
> pretty hard to do anything about this in the presence of >> > unrestricted
>
> > side effects, so perhaps there's a reason why the Haskellers are >> >
>
> excited >> > about this sort of thing and you don't see it in OCaml so
> much :) >> > >> > That said, you do seem to be forced to make a bit more =
of
> an effort >> > to >> > break >> > things here, so I don't think the
> technique is completely without >> > merit, >> > perhaps in cases where
> you'd be defining all your own operations >> > anyway, >> > so >> > the
> duplication isn't an issue. >> > >> > >> > On 8 August 2014 12:30, Ben
> Millwood <bmillwood@janestreet.com> >> > wrote: >> >> >> >> There's a
> trick with existential types, as used in e.g. Haskell's ST >> >> monad. It
> uses the fact that an existentially-quantified type >> >> variable >> >>
> can't >> >> escape its scope, so if your channel type and results that
> depend on >> >> it >> >> are >> >> parametrised by an existential type
> variable, the corresponding >> >> values >> >> can't >> >> escape the sco=
pe
> of the callback either. >> >> >> >> Something like: >> >> >> >> module ST=
 :
> sig >>
>
> type ('a, 's) t >> >> include Monad.S2 with type ('a, 's) t :=3D ('a, 's)=
 t
> >> type 's chan >> >> type 'a f =3D { f : 's . 's chan -> ('a, 's) t } >>=
 val
> with_file : string -> f:'a f -> 'a >> >> >> >> val input_line : 's
>
> chan -> (string option, 's) t >> >> end =3D struct >> >> module T =3D str=
uct
> >>
>
> type ('a, 's) t =3D 'a >> >> let return x =3D x >> >> let bind x f =3D f =
x >>
> let map x ~f =3D f x >> >> end >> >> include T >> >> include Monad.Make2(=
T)
> >> type 's chan =3D In_channel.t >> >> type 'a f =3D { f : 's . 's chan ->
>
> ('a, 's) t } >> >> let with_file fp ~f:{ f } =3D In_channel.with_file fp =
~f
> >>
>
> let input_line c =3D In_channel.input_line c >> >> end >> >> ;; >> >> >> =
>>
>
> match ST.with_file "safe.ml" ~f:{ ST.f =3D fun c -> ST.input_line c } >> =
>>
> with >> >> | None -> print_endline "None" >> >> | Some line ->
> print_endline line >> >> >> >> >> >> On 8 August 2014 11:23, Philippe Veb=
er
> <philippe.veber@gmail.com> >> >> wrote: >> >>> >> >>> Dear all, >> >>> >>
>
> many libraries like lwt, batteries or core provide a very nice >> >>>
>
> idiom >> >>> to >> >>> be used when a function uses a resource (file,
> connection, mutex, >> >>> et >> >>> cetera), for instance in
> Core.In_channel, the function: >> >>> >> >>> val with_file : ?binary:bool
> -> string -> f:(t -> 'a) -> 'a >> >>> >> >>> opens a channel for [f] and
> ensures it is closed after the call to >> >>> [f], >> >>> even if it rais=
es
> an exception. So these functions basically >> >>> prevent >> >>> from >>
> >>> leaking resources. They fail, however, to prevent a user from using >>
> >>> the >> >>> resource after it has been released. For instance, writing:
> >>
>
> >> >>> input_char (In_channel.with_file fn (fun x -> x)) >> >>> >> >>>
>
> is perfectly legal type-wise, but will fail at run-time. There are >> >>>
> of
>
> >>> course less obvious situations, for instance if you define a >> >>>
>
> function: >> >>> >> >>> val lines : in_channel -> string Stream.t >> >>>
> >>
>
> then the following will also fail: >> >>> >> >>> Stream.iter f
>
> (In_channel.with_file fn lines) >> >>> >> >>> My question is the
> following: is there a way to have the compiler >> >>> check >> >>>
> resources are not used after they are closed? I presume this can >> >>>
> only >> >>> be >> >>> achieved by strongly restricting the kind of functi=
on
> passed to >> >>> [with_file]. >> >>> One simple restriction I see is to
> define a type of immediate >> >>> value, >> >>> that >> >>> roughly
> correspond to "simple" datatypes (no closures, no lazy >> >>> expressions=
):
> >> >>> >> >>> module Immediate : sig >> >>> type 'a t =3D private 'a >> >=
>>
> val int : int -> int t
>
> >>> val list : ('a -> 'a t) -> 'a list -> 'a list t >> >>> val tuple :
>
> ('a -> 'a t) -> ('b -> 'b t) -> ('a * 'b) -> ('a * >> >>> 'b) t >> >>> (*
> for records, use the same trick than in >> >>>
> http://www.lexifi.com/blog/dynamic-types *) >> >>> ... >> >>> end >> >>>
> >>
>
> and have the type of [with_file] changed to >> >>> >> >>> val with_file
>
> : string -> f:(in_channel -> 'a Immediate.t) -> 'a >> >>> >> >>> I'm sure
> there are lots of smarter solutions out there. Would >> >>> anyone >> >>>
> happen to know some? >> >>> >> >>> Cheers, >> >>> Philippe. >> >>> >> >> =
>>
>
> >> >> >> >> -- >> Markus Mottl http://www.ocaml.info
>
> markus.mottl@gmail.com > > -- Markus Mottl http://www.ocaml.info
> markus.mottl@gmail.com -- Caml-list mailing list. Subscription management
> and archives: https://sympa.inria.fr/sympa/arc/caml-list Beginner's list:
> http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> http://caml.inria.fr/bin/caml-bugs -- Markus Mottl http://www.ocaml.info
> markus.mottl@gmail.com -- Caml-list mailing list. Subscription management
> and archives: https://sympa.inria.fr/sympa/arc/caml-list Beginner's list:
> http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> http://caml.inria.fr/bin/caml-bugs
>
> --
> Markus Mottl http://www.ocaml.info markus.mottl@gmail.com
> --
> Caml-list mailing list. Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list Beginner's list:
> http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> http://caml.inria.fr/bin/caml-bugs
>
>

--001a11c12cf0f269d7050056e360
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>Yeah, that&#39;s roughly what I had in mind for =
a full-hearted approach, although it turned out to be a bit simpler than I =
was expecting. Sorry, I think my original not-quite-right approach probably=
 only confused the issue :)<br>
<br></div>Much more on the Haskell approaches: <a href=3D"http://okmij.org/=
ftp/Haskell/regions.html">http://okmij.org/ftp/Haskell/regions.html</a><br>=
<br></div>I believe not all of them use type classes in an essential way, s=
o may well be translatable to OCaml.<br>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On 8 Au=
gust 2014 20:45, Fr=C3=A9d=C3=A9ric Bour <span dir=3D"ltr">&lt;<a href=3D"m=
ailto:frederic.bour@lakaban.net" target=3D"_blank">frederic.bour@lakaban.ne=
t</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">

But you can&#39;t do any meaningful computation with this value.<div>It&#39=
;s just a blackbox.</div><div><br></div><div>In your example, the (ST.input=
_line c) inside the closure just build a value of type (string option, &#39=
;_s) t for a specific s.</div>
<div>In particular you will never be able to execute any action on the inpu=
t channel.</div><div><br></div><div>This is not the case with the proposed =
implementation, because effects are executed immediately.</div><div>To ensu=
re isolation, all effects should be &quot;frozen&quot;:</div>
<div><br></div><div><div class=3D""><div>module ST : sig</div><div>=C2=A0 t=
ype (&#39;a, &#39;s) t</div></div><div>=C2=A0 val return : &#39;a -&gt; (&#=
39;a, &#39;s) t</div><div>=C2=A0 val bind : (&#39;a, &#39;s) t -&gt; (&#39;=
a -&gt; (&#39;b, &#39;s) t) -&gt; (&#39;b, &#39;s) t</div>
<div class=3D""><div>=C2=A0 type &#39;s chan</div><div>=C2=A0 type &#39;a f=
 =3D { f : &#39;s . &#39;s chan -&gt; (&#39;a, &#39;s) t }</div><div>=C2=A0=
 val with_file : string -&gt; f:&#39;a f -&gt; &#39;a</div><div><br></div><=
/div><div>=C2=A0 val input_line : &#39;s chan -&gt; (string, &#39;s) t</div>
<div>end =3D struct</div><div>=C2=A0 type (&#39;a, &#39;s) t =3D unit -&gt;=
 &#39;a</div><div>=C2=A0 let return x =3D fun () -&gt; x</div><div>=C2=A0 l=
et bind x f =3D fun () -&gt; f (x ()) ()</div><div><br></div><div>=C2=A0 ty=
pe &#39;s chan =3D in_channel</div>
<div class=3D""><div>=C2=A0 type &#39;a f =3D { f : &#39;s . &#39;s chan -&=
gt; (&#39;a, &#39;s) t }</div><div>=C2=A0 let with_file fp ~f:{ f } =3D</di=
v></div><div>=C2=A0 =C2=A0 let ic =3D open_in fp in</div><div>=C2=A0 =C2=A0=
 try</div><div>=C2=A0 =C2=A0 =C2=A0 let result =3D f ic () in</div>
<div>=C2=A0 =C2=A0 =C2=A0 close_in_noerr ic;</div><div>=C2=A0 =C2=A0 =C2=A0=
 result</div><div>=C2=A0 =C2=A0 with exn -&gt;</div><div>=C2=A0 =C2=A0 =C2=
=A0 close_in_noerr ic;</div><div>=C2=A0 =C2=A0 =C2=A0 raise exn</div><div>=
=C2=A0 let input_line c =3D fun () -&gt; input_line c</div><div>end</div><d=
iv>
<br></div>Le ven. 8 ao=C3=BBt 2014 =C3=A0 20:30, Markus Mottl &lt;<a href=
=3D"mailto:markus.mottl@gmail.com" target=3D"_blank">markus.mottl@gmail.com=
</a>&gt; a =C3=A9crit=C2=A0:<div><div class=3D"h5"><br>
<blockquote type=3D"cite"><div style=3D"white-space:pre-wrap">The escaping =
value can still be manipulated through a closure, outside
of &quot;with_file&quot;.  The goal was to prevent this.

On Fri, Aug 8, 2014 at 2:28 PM, Fr=C3=A9d=C3=A9ric Bour &lt;<a href=3D"mail=
to:frederic.bour@lakaban.net" target=3D"_blank">frederic.bour@lakaban.net</=
a>&gt; wrote:
<blockquote> ST.input_line is just a reified effect, it can&#39;t be execut=
ed outside of the
 ST monad.
 You can make the value escape, but you can&#39;t do anything with it.

 And because of the existential variable being propagated, it can&#39;t be
 executed outside of this run of the ST value.

 Le ven. 8 ao=C3=BBt 2014 =C3=A0 19:23, Markus Mottl &lt;<a href=3D"mailto:=
markus.mottl@gmail.com" target=3D"_blank">markus.mottl@gmail.com</a>&gt; a =
=C3=A9crit :

 How would you implement this safely with ST here? I wasn&#39;t using the
 standard input_line but &quot;ST.input_line&quot;, which already returns a=
 monadic
 type. The trick here was to use the monadic &quot;return&quot; to return a=
 closure
 that captures the existential variable, allowing me to execute the
 computation outside of the safe region. Regards, Markus On Fri, Aug 8, 2014
 at 1:37 PM, Gabriel Scherer &lt;<a href=3D"mailto:gabriel.scherer@gmail.co=
m" target=3D"_blank">gabriel.scherer@gmail.com</a>&gt; wrote:

 The ST trick only works when all primitives affecting resource are in the
 monadic abstraction (they mention the ST region variable in their
 computation type). This is not the case in Markus example as &quot;input_l=
ine&quot; is
 a non-typed effect. Using ST safely would be possible in OCaml, but you
 would have to completely eschew the standard library and use a different
 base where all effectful functions have a monadic type. It is the library,
 not the language itself, that allows this. On the contrary, linear types a=
re
 distinctly a language feature. Using monads to encapsulate a form of
 linearity is an old trick. If you want to have a taste of built-in linear
 typing, you may want to give Mezzo a try ( <a href=3D"http://protz.github.=
io/mezzo/" target=3D"_blank">http://protz.github.io/mezzo/</a> ).
 On Fri, Aug 8, 2014 at 7:21 PM, Markus Mottl &lt;<a href=3D"mailto:markus.=
mottl@gmail.com" target=3D"_blank">markus.mottl@gmail.com</a>&gt; wrote:

 I see, I was replying to the &quot;reference problem&quot; and hadn&#39;t =
read your
 implementation, which, besides existentials, already requires monads as
 return values. Actually, it just occurred to me that one can even break the
 monadic approach in a purely functional way. You are just one &quot;return=
&quot; away
 from disaster: let f =3D ST.with_file &quot;foo.txt&quot; ~f:{ ST.f =3D fu=
n c -&gt; ST.return
 (fun () -&gt; ignore (ST.input_line c)) } in f () You&#39;d have to elimin=
ate
 &quot;return&quot;, in which case it wouldn&#39;t be a monad anymore and n=
ot general
 enough for realistic uses of &quot;with_file&quot;. Regards, Markus On Fri=
, Aug 8,
 2014 at 12:01 PM, Ben Millwood &lt;<a href=3D"mailto:bmillwood@janestreet.=
com" target=3D"_blank">bmillwood@janestreet.com</a>&gt; wrote: &gt; I
 protected against that in my module by carrying the existential type &gt;
 variable in the result of input_line as well, because I stumbled into &gt;
 exactly that example while originally drafting my e-mail :) &gt; &gt; In a=
 sense
 I&#39;m reinventing monadic IO but in a bit of a half-hearted &gt; way. It=
 &gt;
 wouldn&#39;t take much work to make it a bit more fully-hearted, but it &g=
t; would
<blockquote> still be inconvenient to actually use. &gt; &gt; &gt; On 8 Aug=
ust 2014 16:44,
</blockquote> Markus Mottl &lt;<a href=3D"mailto:markus.mottl@gmail.com" ta=
rget=3D"_blank">markus.mottl@gmail.com</a>&gt; wrote: &gt;&gt; &gt;&gt; It =
doesn&#39;t even require
 references to screw things up here. Just &gt;&gt; return the closure conta=
ining
 the channel from within &quot;f&quot;: &gt;&gt; &gt;&gt; In_channel.with_f=
ile &quot;foo.txt&quot; ~f:(fun ic
 () -&gt; input_line ic) &gt;&gt; |&gt; fun f -&gt; f () &gt;&gt; &gt;&gt; =
The initial Stream-example is
 basically just an instance of this &gt;&gt; &quot;returning a closure&quot=
; problem. &gt;&gt; &gt;&gt;
 But the availability of references and exceptions arguably makes &gt;&gt; =
things
 worse, because you cannot even use monadic I/O + existential &gt;&gt; type=
s to
 achieve guaranteed safety. &gt;&gt; &gt;&gt; Regards, &gt;&gt; Markus &gt;=
&gt; &gt;&gt; On Fri, Aug 8,
 2014 at 10:49 AM, Ben Millwood &gt;&gt; &lt;<a href=3D"mailto:bmillwood@ja=
nestreet.com" target=3D"_blank">bmillwood@janestreet.com</a>&gt; &gt;&gt; w=
rote: &gt;&gt; &gt;
 It&#39;s been pointed out to me that the above certainly isn&#39;t perfect=
ly &gt;&gt; &gt;
 secure. &gt;&gt; &gt; E.g. &gt;&gt; &gt; &gt;&gt; &gt; let f =3D ref (fun =
() -&gt; ()) in &gt;&gt; &gt; with_file
 &quot;<a href=3D"http://safe.ml" target=3D"_blank">safe.ml</a>&quot; ~f:{ =
f =3D fun c -&gt; &gt;&gt; &gt; return (f :=3D fun () -&gt; &gt;&gt; &gt; F=
n.ignore (map
 (input_line c) ~f:print_string_option)) }; &gt;&gt; &gt; !f () &gt;&gt; &g=
t; &gt;&gt; &gt; gets
 Exception: (Sys_error &quot;Bad file descriptor&quot;). Even though the &g=
t;&gt; &gt; channel
<blockquote><blockquote> &gt; and any operations on it can&#39;t escape the=
 closure, the type of a &gt;&gt; &gt;
</blockquote></blockquote> function &gt;&gt; &gt; which uses them needn&#39=
;t mention them at all. &gt;&gt; &gt; &gt;&gt; &gt; It&#39;s
 pretty hard to do anything about this in the presence of &gt;&gt; &gt; unr=
estricted
<blockquote><blockquote> &gt; side effects, so perhaps there&#39;s a reason=
 why the Haskellers are &gt;&gt; &gt;
</blockquote></blockquote> excited &gt;&gt; &gt; about this sort of thing a=
nd you don&#39;t see it in OCaml so much
 :) &gt;&gt; &gt; &gt;&gt; &gt; That said, you do seem to be forced to make=
 a bit more of an
 effort &gt;&gt; &gt; to &gt;&gt; &gt; break &gt;&gt; &gt; things here, so =
I don&#39;t think the technique
 is completely without &gt;&gt; &gt; merit, &gt;&gt; &gt; perhaps in cases =
where you&#39;d be
 defining all your own operations &gt;&gt; &gt; anyway, &gt;&gt; &gt; so &g=
t;&gt; &gt; the duplication
 isn&#39;t an issue. &gt;&gt; &gt; &gt;&gt; &gt; &gt;&gt; &gt; On 8 August =
2014 12:30, Ben Millwood
 &lt;<a href=3D"mailto:bmillwood@janestreet.com" target=3D"_blank">bmillwoo=
d@janestreet.com</a>&gt; &gt;&gt; &gt; wrote: &gt;&gt; &gt;&gt; &gt;&gt; &g=
t;&gt; There&#39;s a trick with
 existential types, as used in e.g. Haskell&#39;s ST &gt;&gt; &gt;&gt; mona=
d. It uses the
 fact that an existentially-quantified type &gt;&gt; &gt;&gt; variable &gt;=
&gt; &gt;&gt; can&#39;t &gt;&gt; &gt;&gt;
 escape its scope, so if your channel type and results that depend on &gt;&=
gt; &gt;&gt;
 it &gt;&gt; &gt;&gt; are &gt;&gt; &gt;&gt; parametrised by an existential =
type variable, the
 corresponding &gt;&gt; &gt;&gt; values &gt;&gt; &gt;&gt; can&#39;t &gt;&gt=
; &gt;&gt; escape the scope of the
 callback either. &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; Something like: &gt;&=
gt; &gt;&gt; &gt;&gt; &gt;&gt; module ST : sig &gt;&gt;
<blockquote><blockquote> type (&#39;a, &#39;s) t &gt;&gt; &gt;&gt; include =
Monad.S2 with type (&#39;a, &#39;s) t :=3D (&#39;a, &#39;s) t
 &gt;&gt; type &#39;s chan &gt;&gt; &gt;&gt; type &#39;a f =3D { f : &#39;s=
 . &#39;s chan -&gt; (&#39;a, &#39;s) t } &gt;&gt;
 val with_file : string -&gt; f:&#39;a f -&gt; &#39;a &gt;&gt; &gt;&gt; &gt=
;&gt; &gt;&gt; val input_line : &#39;s
</blockquote></blockquote> chan -&gt; (string option, &#39;s) t &gt;&gt; &g=
t;&gt; end =3D struct &gt;&gt; &gt;&gt; module T =3D struct &gt;&gt;
<blockquote><blockquote> type (&#39;a, &#39;s) t =3D &#39;a &gt;&gt; &gt;&g=
t; let return x =3D x &gt;&gt; &gt;&gt; let bind x f =3D f x &gt;&gt;
 let map x ~f =3D f x &gt;&gt; &gt;&gt; end &gt;&gt; &gt;&gt; include T &gt=
;&gt; &gt;&gt; include Monad.Make2(T)
 &gt;&gt; type &#39;s chan =3D In_channel.t &gt;&gt; &gt;&gt; type &#39;a f=
 =3D { f : &#39;s . &#39;s chan -&gt;
</blockquote></blockquote> (&#39;a, &#39;s) t } &gt;&gt; &gt;&gt; let with_=
file fp ~f:{ f } =3D In_channel.with_file fp ~f &gt;&gt;
<blockquote><blockquote> let input_line c =3D In_channel.input_line c &gt;&=
gt; &gt;&gt; end &gt;&gt; &gt;&gt; ;; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt;
</blockquote></blockquote> match ST.with_file &quot;<a href=3D"http://safe.=
ml" target=3D"_blank">safe.ml</a>&quot; ~f:{ ST.f =3D fun c -&gt; ST.input_=
line c } &gt;&gt; &gt;&gt;
 with &gt;&gt; &gt;&gt; | None -&gt; print_endline &quot;None&quot; &gt;&gt=
; &gt;&gt; | Some line -&gt; print_endline
 line &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; On 8 August 201=
4 11:23, Philippe Veber
 &lt;<a href=3D"mailto:philippe.veber@gmail.com" target=3D"_blank">philippe=
.veber@gmail.com</a>&gt; &gt;&gt; &gt;&gt; wrote: &gt;&gt; &gt;&gt;&gt; &gt=
;&gt; &gt;&gt;&gt; Dear all, &gt;&gt; &gt;&gt;&gt; &gt;&gt;
<blockquote><blockquote><blockquote> many libraries like lwt, batteries or =
core provide a very nice &gt;&gt; &gt;&gt;&gt;
</blockquote></blockquote></blockquote> idiom &gt;&gt; &gt;&gt;&gt; to &gt;=
&gt; &gt;&gt;&gt; be used when a function uses a resource (file,
 connection, mutex, &gt;&gt; &gt;&gt;&gt; et &gt;&gt; &gt;&gt;&gt; cetera),=
 for instance in
 Core.In_channel, the function: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;=
 val with_file : ?binary:bool -&gt;
 string -&gt; f:(t -&gt; &#39;a) -&gt; &#39;a &gt;&gt; &gt;&gt;&gt; &gt;&gt=
; &gt;&gt;&gt; opens a channel for [f] and
 ensures it is closed after the call to &gt;&gt; &gt;&gt;&gt; [f], &gt;&gt;=
 &gt;&gt;&gt; even if it raises
 an exception. So these functions basically &gt;&gt; &gt;&gt;&gt; prevent &=
gt;&gt; &gt;&gt;&gt; from &gt;&gt; &gt;&gt;&gt;
 leaking resources. They fail, however, to prevent a user from using &gt;&g=
t; &gt;&gt;&gt;
 the &gt;&gt; &gt;&gt;&gt; resource after it has been released. For instanc=
e, writing: &gt;&gt;
<blockquote><blockquote><blockquote> &gt;&gt; &gt;&gt;&gt; input_char (In_c=
hannel.with_file fn (fun x -&gt; x)) &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt=
;&gt;
</blockquote></blockquote></blockquote> is perfectly legal type-wise, but w=
ill fail at run-time. There are &gt;&gt; &gt;&gt;&gt; of
<blockquote><blockquote> &gt;&gt;&gt; course less obvious situations, for i=
nstance if you define a &gt;&gt; &gt;&gt;&gt;
</blockquote></blockquote> function: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt=
;&gt; val lines : in_channel -&gt; string Stream.t &gt;&gt; &gt;&gt;&gt; &g=
t;&gt;
<blockquote><blockquote><blockquote> then the following will also fail: &gt=
;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Stream.iter f
</blockquote></blockquote></blockquote> (In_channel.with_file fn lines) &gt=
;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; My question is the following:
 is there a way to have the compiler &gt;&gt; &gt;&gt;&gt; check &gt;&gt; &=
gt;&gt;&gt; resources are not
 used after they are closed? I presume this can &gt;&gt; &gt;&gt;&gt; only =
&gt;&gt; &gt;&gt;&gt; be &gt;&gt; &gt;&gt;&gt;
 achieved by strongly restricting the kind of function passed to &gt;&gt; &=
gt;&gt;&gt;
 [with_file]. &gt;&gt; &gt;&gt;&gt; One simple restriction I see is to defi=
ne a type of
 immediate &gt;&gt; &gt;&gt;&gt; value, &gt;&gt; &gt;&gt;&gt; that &gt;&gt;=
 &gt;&gt;&gt; roughly correspond to &quot;simple&quot;
 datatypes (no closures, no lazy &gt;&gt; &gt;&gt;&gt; expressions): &gt;&g=
t; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; module
 Immediate : sig &gt;&gt; &gt;&gt;&gt; type &#39;a t =3D private &#39;a &gt=
;&gt; &gt;&gt;&gt; val int : int -&gt; int t
<blockquote><blockquote> &gt;&gt;&gt; val list : (&#39;a -&gt; &#39;a t) -&=
gt; &#39;a list -&gt; &#39;a list t &gt;&gt; &gt;&gt;&gt; val tuple :
</blockquote></blockquote> (&#39;a -&gt; &#39;a t) -&gt; (&#39;b -&gt; &#39=
;b t) -&gt; (&#39;a * &#39;b) -&gt; (&#39;a * &gt;&gt; &gt;&gt;&gt; &#39;b)=
 t &gt;&gt; &gt;&gt;&gt; (*
 for records, use the same trick than in &gt;&gt; &gt;&gt;&gt;
 <a href=3D"http://www.lexifi.com/blog/dynamic-types" target=3D"_blank">htt=
p://www.lexifi.com/blog/dynamic-types</a> *) &gt;&gt; &gt;&gt;&gt; ... &gt;=
&gt; &gt;&gt;&gt; end &gt;&gt; &gt;&gt;&gt; &gt;&gt;
<blockquote><blockquote><blockquote> and have the type of [with_file] chang=
ed to &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; val with_file
</blockquote></blockquote></blockquote> : string -&gt; f:(in_channel -&gt; =
&#39;a Immediate.t) -&gt; &#39;a &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt=
; I&#39;m sure
 there are lots of smarter solutions out there. Would &gt;&gt; &gt;&gt;&gt;=
 anyone &gt;&gt; &gt;&gt;&gt;
 happen to know some? &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Cheers, &=
gt;&gt; &gt;&gt;&gt; Philippe. &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &gt;=
&gt;
<blockquote> &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; -- &gt;&gt; Markus Mottl <=
a href=3D"http://www.ocaml.info" target=3D"_blank">http://www.ocaml.info</a>
</blockquote> <a href=3D"mailto:markus.mottl@gmail.com" target=3D"_blank">m=
arkus.mottl@gmail.com</a> &gt; &gt; -- Markus Mottl <a href=3D"http://www.o=
caml.info" target=3D"_blank">http://www.ocaml.info</a>
 <a href=3D"mailto:markus.mottl@gmail.com" target=3D"_blank">markus.mottl@g=
mail.com</a> -- Caml-list mailing list. Subscription management
 and archives: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" targe=
t=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a> Beginner&#39;s =
list:
 <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_blank=
">http://groups.yahoo.com/group/ocaml_beginners</a> Bug reports:
 <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank">http://ca=
ml.inria.fr/bin/caml-bugs</a>

 --
 Markus Mottl <a href=3D"http://www.ocaml.info" target=3D"_blank">http://ww=
w.ocaml.info</a> <a href=3D"mailto:markus.mottl@gmail.com" target=3D"_blank=
">markus.mottl@gmail.com</a>
 --
 Caml-list mailing list. Subscription management and archives:
 <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">h=
ttps://sympa.inria.fr/sympa/arc/caml-list</a> Beginner&#39;s list:
 <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_blank=
">http://groups.yahoo.com/group/ocaml_beginners</a> Bug reports:
 <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank">http://ca=
ml.inria.fr/bin/caml-bugs</a>
</blockquote>


<div>--=20
</div>Markus Mottl        <a href=3D"http://www.ocaml.info" target=3D"_blan=
k">http://www.ocaml.info</a>        <a href=3D"mailto:markus.mottl@gmail.co=
m" target=3D"_blank">markus.mottl@gmail.com</a>

<div>--=20
</div>Caml-list mailing list.  Subscription management and archives:
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a></div></blockquote></div></div></d=
iv></blockquote></div><br></div>

--001a11c12cf0f269d7050056e360--
