Return-Path: <trigger0219@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 656A17F747
	for <caml-list@sympa.inria.fr>; Thu,  7 Aug 2014 00:06:32 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  trigger0219@gmail.com) identity=pra;
  client-ip=209.85.220.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="trigger0219@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  trigger0219@gmail.com designates 209.85.220.182 as permitted
  sender) identity=mailfrom; client-ip=209.85.220.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="trigger0219@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vc0-f182.google.com) identity=helo;
  client-ip=209.85.220.182;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="trigger0219@gmail.com";
  x-sender="postmaster@mail-vc0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AicCACOm4lPRVdy2lGdsb2JhbABagkeBGE0KBIJzrlCDeJVZgV+IUwgWEAEBAQEHCwsJEiuEBAEBAwESEQQZARsdAQMBCwEFBQs3AgIhAQERAQUBHAYTGweICwEDCQihHWqLKYFygxCKVQoZJw1mhTMRAQUOjRGFLYFSBZIHgyWEYIIHgVSMZ4Q5GCmBa4M5IS8
X-IPAS-Result: AicCACOm4lPRVdy2lGdsb2JhbABagkeBGE0KBIJzrlCDeJVZgV+IUwgWEAEBAQEHCwsJEiuEBAEBAwESEQQZARsdAQMBCwEFBQs3AgIhAQERAQUBHAYTGweICwEDCQihHWqLKYFygxCKVQoZJw1mhTMRAQUOjRGFLYFSBZIHgyWEYIIHgVSMZ4Q5GCmBa4M5IS8
X-IronPort-AV: E=Sophos;i="5.01,814,1400018400"; 
   d="scan'208";a="88526405"
Received: from mail-vc0-f182.google.com ([209.85.220.182])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 07 Aug 2014 00:06:31 +0200
Received: by mail-vc0-f182.google.com with SMTP id hy4so5140247vcb.27
        for <caml-list@inria.fr>; Wed, 06 Aug 2014 15:06:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date:message-id:subject
         :from:to:cc:content-type;
        bh=Lv7H6hdnIU6j33wzDEojhHGgYS6glLsILqh55Sjp5Hc=;
        b=Li4G0HKrMmXVA3Vhtkfadyh0cUTJBs+AGEt+IZP/2wLYf8bLhmr+duxAhWy0AKiOZ6
         tBbS8zkkPjn2Gdz5e2gS7CS5DoFQwzPLCJ5bK8sg5j6PNyHUDI79aW9qDyIsBJtq/MiM
         qKkmlEJHkvLwOIQHmKmOOQrg7oVI0DJpC/u/R7xnpC6rw+Gaq4wFM9ABLzdzNQijwUKu
         CyxTBIE1idKDeBw+za8J+bb60c/jzYfGn5PqktL4hGqgCEjqgEmlwIjPvjfJ/o6votjf
         VwiJ2QCc9HkfzjBMPFBiy6oLST44TKK+qlKCQPLyAO4ZwJ/sps377ifudZaEYs/ILWXS
         /fCQ==
MIME-Version: 1.0
X-Received: by 10.220.118.136 with SMTP id v8mr4234555vcq.50.1407362790601;
 Wed, 06 Aug 2014 15:06:30 -0700 (PDT)
Sender: trigger0219@gmail.com
Received: by 10.220.15.3 with HTTP; Wed, 6 Aug 2014 15:06:30 -0700 (PDT)
Received: by 10.220.15.3 with HTTP; Wed, 6 Aug 2014 15:06:30 -0700 (PDT)
In-Reply-To: <CAG-KTt_4CUmxmpoww-5aAR_4o5WH7hq_Dah1ENrHzA1ZHq4ogA@mail.gmail.com>
References: <CAG-KTt_4CUmxmpoww-5aAR_4o5WH7hq_Dah1ENrHzA1ZHq4ogA@mail.gmail.com>
Date: Wed, 6 Aug 2014 18:06:30 -0400
X-Google-Sender-Auth: xH9fqX4r3tO_eYC0nMuHh13wu5E
Message-ID: <CAADdkeJgU8FH6O0D4iLwaN5yDNdsKKrY3jK7KDG-5VPSFec6PA@mail.gmail.com>
From: Nick Lucaroni <nicholas.r.lucaroni@gmail.com>
To: Trevor Smith <trevorsummerssmith@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=001a1133d66c34391f04fffd2fee
Subject: Re: [Caml-list] Type Constraints and .mli

--001a1133d66c34391f04fffd2fee
Content-Type: text/plain; charset=UTF-8

I had come to the same conclusion.
On Aug 6, 2014 8:14 AM, "Trevor Smith" <trevorsummerssmith@gmail.com> wrote:

> Hello,
>
> I have a question about using .mli files for increased readability. I
> think my question boils down to: "Can one tersely add type constraints to a
> signature defined in a .mli in that same .mli file?"
>
> Detailed problem: You want to have a read interface and a write interface
> for the same implementation.
>
> We'll use a trivial example with a character and a name.
>
> module type CharacterSig = sig
>   val t
>   val create : string -> t
>   val name : t -> string
> end
>
> module type MutableCharacterSig = sig
>   val t
>   val create : string -> t
>   val name : t -> string
>   val set_name : t -> string -> unit
> end
>
> module CharacterImpl = struct
>   type t = {name : string ref}
>   let create name  =
>     {name = ref name }
>   let name c = !(c.name)
>   let set_name c name =
>     c.name := name
> end
>
> module Character = (CharacterImpl : CharacterSig with type t =
> CharacterImpl.t)
> module MutableCharacter = (CharacterImpl : MutableCharacterSig with type t
> = CharacterImpl.t)
>
> But what I would like is to specify the read and write signatures in .mli
> files for a more readable codebase.
>
> So:
>
> character.mli:
>   val t
>   val create : string -> t
>   val name : t -> string
>
> mCharacter.mli:
>   val t
>   val create : string -> t
>   val name : t -> string
>   val set_name : t -> string -> unit
>
> characterImpl.ml (* ... implementation as above ... *)
>
> However, it is not clear to me that there is a way to attach the type
> constraint to character.mli and mCharacter.mli, while keeping the terse
> readability of the .mli file. One idea for a solution, would be to
> reference a "this" so that the interface could show that it was being
> implemented by CharacterImpl, and include the type constraint.
>
> The solution I've come to use, that is still pretty readable, is to define
> the signature in the .ml file (so no .mli file) and then defining an
> internal module which I include (so that I can still reference file name as
> the module). So:
>
> character.ml
>
> module type CharacterSig = sig
>     type t
>     val create : string -> t
>     val name : t -> string
> end
>
> module T = (CharacterImpl : CharacterSig with type t = CharacterImpl.t)
> include T
>
> However, it seems like there could be a slightly more readable way of
> doing this.
>
> Thoughts? Thank you.
>
> Trevor
>

--001a1133d66c34391f04fffd2fee
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">I had come to the same conclusion.</p>
<div class=3D"gmail_quote">On Aug 6, 2014 8:14 AM, &quot;Trevor Smith&quot;=
 &lt;<a href=3D"mailto:trevorsummerssmith@gmail.com">trevorsummerssmith@gma=
il.com</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_qu=
ote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex=
">
<div dir=3D"ltr"><font face=3D"arial, sans-serif">Hello,</font><div><font f=
ace=3D"arial, sans-serif"><br></font></div><div><font face=3D"arial, sans-s=
erif">I have a question about using .mli files for increased readability. I=
 think my question boils down to: &quot;Can one tersely add type constraint=
s to a signature defined in a .mli in that same .mli file?&quot;</font></di=
v>

<div><font face=3D"arial, sans-serif"><br></font></div><div><font face=3D"a=
rial, sans-serif">Detailed problem:=C2=A0</font><span style=3D"font-family:=
arial,sans-serif;font-size:13px">You want to have a read interface and a wr=
ite interface for the same implementation.</span></div>

<div><div style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><=
div style=3D"font-family:arial,sans-serif;font-size:13px">We&#39;ll use a t=
rivial example with a character and a name.</div><div style=3D"font-family:=
arial,sans-serif;font-size:13px">

<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><font =
face=3D"courier new, monospace">module type CharacterSig =3D sig</font></di=
v><div style=3D"font-family:arial,sans-serif;font-size:13px"><font face=3D"=
courier new, monospace">=C2=A0 val t</font></div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><font face=3D"co=
urier new, monospace">=C2=A0 val create : string -&gt; t</font></div><div s=
tyle=3D"font-family:arial,sans-serif;font-size:13px"><font face=3D"courier =
new, monospace">=C2=A0 val name : t -&gt; string</font></div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><font face=3D"co=
urier new, monospace">end</font></div><div style=3D"font-family:arial,sans-=
serif;font-size:13px"><font face=3D"courier new, monospace"><br></font></di=
v><div style=3D"font-family:arial,sans-serif;font-size:13px">

<font face=3D"courier new, monospace">module type MutableCharacterSig =3D s=
ig</font></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><=
div><font face=3D"courier new, monospace">=C2=A0 val t</font></div><div><fo=
nt face=3D"courier new, monospace">=C2=A0 val create : string -&gt; t</font=
></div>

<div><font face=3D"courier new, monospace">=C2=A0 val name : t -&gt; string=
</font></div></div><div style=3D"font-family:arial,sans-serif;font-size:13p=
x"><font face=3D"courier new, monospace">=C2=A0 val set_name : t -&gt; stri=
ng -&gt; unit</font></div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><font face=3D"co=
urier new, monospace">end</font></div><div style=3D"font-family:arial,sans-=
serif;font-size:13px"><br></div><div style=3D"font-family:arial,sans-serif;=
font-size:13px">

<div><font face=3D"courier new, monospace">module CharacterImpl =3D struct<=
/font></div><div><font face=3D"courier new, monospace">=C2=A0 type t =3D {n=
ame : string ref}</font></div><div><font face=3D"courier new, monospace">=
=C2=A0 let create name =C2=A0=3D</font></div>

<div><font face=3D"courier new, monospace">=C2=A0 =C2=A0 {name =3D ref name=
 }</font></div><div><font face=3D"courier new, monospace">=C2=A0 let name c=
 =3D !(<a href=3D"http://c.name/" target=3D"_blank">c.name</a>)</font></div=
><div><font face=3D"courier new, monospace">=C2=A0 let set_name c name =3D<=
/font></div>

<div><font face=3D"courier new, monospace">=C2=A0 =C2=A0=C2=A0<a href=3D"ht=
tp://c.name/" target=3D"_blank">c.name</a>=C2=A0:=3D name</font></div><div>=
<font face=3D"courier new, monospace">end</font></div></div><div style=3D"f=
ont-family:arial,sans-serif;font-size:13px">

<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><font =
face=3D"courier new, monospace">module Character =3D (CharacterImpl : Chara=
cterSig with type t =3D CharacterImpl.t)</font></div><div style=3D"font-fam=
ily:arial,sans-serif;font-size:13px">

<span style=3D"font-family:&#39;courier new&#39;,monospace">module MutableC=
haracter =3D (CharacterImpl : MutableCharacterSig with type t =3D Character=
Impl.t)</span><font face=3D"courier new, monospace"><br></font></div><div s=
tyle=3D"font-family:arial,sans-serif;font-size:13px">

<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px">But wh=
at I would like is to specify the read and write signatures in .mli files f=
or a more readable codebase.</div><div style=3D"font-family:arial,sans-seri=
f;font-size:13px">

<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px">So:</d=
iv><div style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><di=
v style=3D"font-family:arial,sans-serif;font-size:13px">character.mli:</div>
<div style=3D"font-family:arial,sans-serif;font-size:13px">
<div><font face=3D"courier new, monospace">=C2=A0 val t</font></div><div><f=
ont face=3D"courier new, monospace">=C2=A0 val create : string -&gt; t</fon=
t></div><div><font face=3D"courier new, monospace">=C2=A0 val name : t -&gt=
; string</font></div>

</div><div style=3D"font-family:arial,sans-serif;font-size:13px"><font face=
=3D"courier new, monospace"><br></font></div><div style=3D"font-family:aria=
l,sans-serif;font-size:13px">mCharacter.mli:<font face=3D"courier new, mono=
space"><br>

</font></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><di=
v><div><font face=3D"courier new, monospace">=C2=A0 val t</font></div><div>=
<font face=3D"courier new, monospace">=C2=A0 val create : string -&gt; t</f=
ont></div><div>

<font face=3D"courier new, monospace">=C2=A0 val name : t -&gt; string</fon=
t></div></div><div><font face=3D"courier new, monospace">=C2=A0 val set_nam=
e : t -&gt; string -&gt; unit</font></div></div><div style=3D"font-family:a=
rial,sans-serif;font-size:13px">

<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px">charac=
terImpl.ml (* ... implementation as above ... *)</div><div style=3D"font-fa=
mily:arial,sans-serif;font-size:13px"><br></div><div style=3D"font-family:a=
rial,sans-serif;font-size:13px">

However, it is not clear to me that there is a way to attach the type const=
raint to character.mli and mCharacter.mli, while keeping the terse readabil=
ity of the .mli file. One idea for a solution, would be to reference a &quo=
t;this&quot; so that the interface could show that it was being implemented=
 by CharacterImpl, and include the type constraint.</div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><div s=
tyle=3D"font-family:arial,sans-serif;font-size:13px">The solution I&#39;ve =
come to use, that is still pretty readable, is to define the signature in t=
he .ml file (so no .mli file) and then defining an internal module which I =
include (so that I can still reference file name as the module). So:</div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><div s=
tyle=3D"font-size:13px"><div style=3D"font-family:arial,sans-serif"><a href=
=3D"http://character.ml" target=3D"_blank">character.ml</a></div><div style=
=3D"font-family:arial,sans-serif">

<br></div><div><font face=3D"courier new, monospace">module type CharacterS=
ig =3D sig</font></div><div><font face=3D"courier new, monospace">=C2=A0 =
=C2=A0 type t</font></div><div><font face=3D"courier new, monospace">=C2=A0=
 =C2=A0 val create : string -&gt; t</font></div>

<div><font face=3D"courier new, monospace">=C2=A0 =C2=A0 val name : t -&gt;=
 string</font></div><div><font face=3D"courier new, monospace">end</font></=
div><div><font face=3D"courier new, monospace"><br></font></div><div><font =
face=3D"courier new, monospace">module T =3D (CharacterImpl : CharacterSig =
with type t =3D CharacterImpl.t)</font></div>

<div><font face=3D"courier new, monospace">include T</font></div></div><div=
 style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><div style=
=3D"font-family:arial,sans-serif;font-size:13px">However, it seems like the=
re could be a slightly more readable way of doing this.</div>

<div style=3D"font-family:arial,sans-serif;font-size:13px"><br></div><div s=
tyle=3D"font-family:arial,sans-serif;font-size:13px">Thoughts? Thank you.</=
div></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><br></=
div>

<div style=3D"font-family:arial,sans-serif;font-size:13px">Trevor</div></di=
v>
</blockquote></div>

--001a1133d66c34391f04fffd2fee--
