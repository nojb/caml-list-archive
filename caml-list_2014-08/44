Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 474EB7F75C
	for <caml-list@sympa.inria.fr>; Sun, 10 Aug 2014 20:07:12 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=74.125.82.175;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  philippe.veber@gmail.com designates 74.125.82.175 as
  permitted sender) identity=mailfrom; client-ip=74.125.82.175;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-we0-f175.google.com) identity=helo;
  client-ip=74.125.82.175;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-we0-f175.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ah8CALOz51NKfVKvlGdsb2JhbABag19XBLB6hC6VYIFjh0gBfwgWEAEBAQEHCwsJEiuEAwEBAQMBDAYIDRkBFAcSCwEDAQsGBQsNDRMOIQEBEQEFAQoSBhMSCQeICwEDCQgNoB1qjRuDEIkoChknAwpmhHoRAQUOjRGBRWQEB4RMBYUCBY0NgyqEaIIJgVeMcgOEPRgphQ87Lw
X-IPAS-Result: Ah8CALOz51NKfVKvlGdsb2JhbABag19XBLB6hC6VYIFjh0gBfwgWEAEBAQEHCwsJEiuEAwEBAQMBDAYIDRkBFAcSCwEDAQsGBQsNDRMOIQEBEQEFAQoSBhMSCQeICwEDCQgNoB1qjRuDEIkoChknAwpmhHoRAQUOjRGBRWQEB4RMBYUCBY0NgyqEaIIJgVeMcgOEPRgphQ87Lw
X-IronPort-AV: E=Sophos;i="5.01,837,1400018400"; 
   d="scan'208";a="74453983"
Received: from mail-we0-f175.google.com ([74.125.82.175])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 10 Aug 2014 20:07:10 +0200
Received: by mail-we0-f175.google.com with SMTP id t60so7710110wes.20
        for <caml-list@inria.fr>; Sun, 10 Aug 2014 11:07:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=os49mJGW/jw31K1FVxi3svW+hoY59qfPrBfRAXlU8K4=;
        b=aQLNsFK+FMv/ub82bVBaczY8Nsq96ruFpwx8GpvxldBVFqNYMBTsq7z2KegxjkWugf
         qWBdD6XXYjXyZmKaxoj1d81iA+87rMdz6e7ysAjMWxC3cPG0E+Y8JHMq0AwsO0ugiwDT
         fKZhxV0biZ5uNizND1JGpZ8WRt8c86b0fVwUkg2r87ZRMawuovlEwo5zb4dIoarYsJ56
         H3LdyZnoCpTPg5FR9mek6Iatah/lIE2M4xVEwHSBtUNH8BsjcfY/6670iwnyvoPhdhuy
         srRsz5RiWjQTya9Yki5Vu3d7nl8yPkG5Y0ZFqF8WYnw+gWncrpxOZsd3ey8opwh5FGkr
         0Ifg==
X-Received: by 10.180.90.11 with SMTP id bs11mr13551650wib.47.1407694030106;
 Sun, 10 Aug 2014 11:07:10 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.166.132 with HTTP; Sun, 10 Aug 2014 11:06:50 -0700 (PDT)
In-Reply-To: <CAP_800obQueRxzeWd51w+UG9_AEzhUkUjUBtB=YdyUWbnb=9EQ@mail.gmail.com>
References: <CAOOOohRCFcHLsgkpVrknKcQG1asP6WwUwvwmMuZbPV72gitL+g@mail.gmail.com>
 <CA+MHO53k186F3cAAHdsKmxWEXFt-Qg0_B8eL5OvAkW1jZaDg2A@mail.gmail.com>
 <CA+MHO52gGgVHU7CjmSf9zUixourShH59eEPRTLVQ9sNm2K1tnw@mail.gmail.com>
 <CAP_800q-q8_vcWofCZ4_mRcCm=JrE+BWUxLCAOP9N5vdWz8SiA@mail.gmail.com>
 <CA+MHO53O_RAxkFHfOQ9EjQSQDe-CF4ZSD1XPm0cWh_5PxwwV7Q@mail.gmail.com>
 <CAP_800p2+Ej0_biuWBRASEJ2E-xKGtsmcngaBXuH_qS8XJDFxQ@mail.gmail.com>
 <CAPFanBEbBN4po5qE4uzWWK2qUC0BBPdBaEjx6Mga53ftPaTM0Q@mail.gmail.com>
 <CAP_800pFWMPeuzevz1uRTQeYyjujrr6yGVL3mU8MoyVfsuw2QA@mail.gmail.com>
 <1407522483.1213.2@mail.lakaban.net> <CAP_800pkVjNuReggqZf700wB=b5Y3gfZAimR38MSV8OQruEaHg@mail.gmail.com>
 <1407527123.1213.3@mail.lakaban.net> <CAP_800obQueRxzeWd51w+UG9_AEzhUkUjUBtB=YdyUWbnb=9EQ@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Sun, 10 Aug 2014 20:06:50 +0200
Message-ID: <CAOOOohRkpkYLNtYM2_SY8NasbG+0cr_2Nwx5-C0XsYMr7Zq7LA@mail.gmail.com>
To: Markus Mottl <markus.mottl@gmail.com>
Cc: =?ISO-8859-1?Q?Fr=E9d=E9ric_Bour?= <frederic.bour@lakaban.net>, 
	Gabriel Scherer <gabriel.scherer@gmail.com>, Ben Millwood <bmillwood@janestreet.com>, 
	caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d043c7e1c9df8e505004a4e0b
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Not letting channels escape.

--f46d043c7e1c9df8e505004a4e0b
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks everyone for these particularly instructive answers! Now I
understand better why things are the way they are in OCaml. The litterature
on linear types also seems very interesting, thanks again!


2014-08-08 22:34 GMT+02:00 Markus Mottl <markus.mottl@gmail.com>:

> That's how the state monad should be correctly implemented :-)
>
> Only "with_file" should be able to actually run the monadic
> computation and execute its side effects.
>
> On Fri, Aug 8, 2014 at 3:45 PM, Fr=E9d=E9ric Bour <frederic.bour@lakaban.=
net>
> wrote:
> > But you can't do any meaningful computation with this value.
> > It's just a blackbox.
> >
> > In your example, the (ST.input_line c) inside the closure just build a
> value
> > of type (string option, '_s) t for a specific s.
> > In particular you will never be able to execute any action on the input
> > channel.
> >
> > This is not the case with the proposed implementation, because effects
> are
> > executed immediately.
> > To ensure isolation, all effects should be "frozen":
> >
> > module ST : sig
> >   type ('a, 's) t
> >   val return : 'a -> ('a, 's) t
> >   val bind : ('a, 's) t -> ('a -> ('b, 's) t) -> ('b, 's) t
> >   type 's chan
> >   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
> >   val with_file : string -> f:'a f -> 'a
> >
> >   val input_line : 's chan -> (string, 's) t
> > end =3D struct
> >   type ('a, 's) t =3D unit -> 'a
> >   let return x =3D fun () -> x
> >   let bind x f =3D fun () -> f (x ()) ()
> >
> >   type 's chan =3D in_channel
> >   type 'a f =3D { f : 's . 's chan -> ('a, 's) t }
> >   let with_file fp ~f:{ f } =3D
> >     let ic =3D open_in fp in
> >     try
> >       let result =3D f ic () in
> >       close_in_noerr ic;
> >       result
> >     with exn ->
> >       close_in_noerr ic;
> >       raise exn
> >   let input_line c =3D fun () -> input_line c
> > end
> >
> > Le ven. 8 ao=FBt 2014 =E0 20:30, Markus Mottl <markus.mottl@gmail.com> a
> =E9crit :
> >
> > The escaping value can still be manipulated through a closure, outside =
of
> > "with_file". The goal was to prevent this. On Fri, Aug 8, 2014 at 2:28
> PM,
> > Fr=E9d=E9ric Bour <frederic.bour@lakaban.net> wrote:
> >
> > ST.input_line is just a reified effect, it can't be executed outside of
> the
> > ST monad. You can make the value escape, but you can't do anything with
> it.
> > And because of the existential variable being propagated, it can't be
> > executed outside of this run of the ST value. Le ven. 8 ao=FBt 2014 =E0
> 19:23,
> > Markus Mottl <markus.mottl@gmail.com> a =E9crit : How would you impleme=
nt
> this
> > safely with ST here? I wasn't using the standard input_line but
> > "ST.input_line", which already returns a monadic type. The trick here
> was to
> > use the monadic "return" to return a closure that captures the
> existential
> > variable, allowing me to execute the computation outside of the safe
> region.
> > Regards, Markus On Fri, Aug 8, 2014 at 1:37 PM, Gabriel Scherer
> > <gabriel.scherer@gmail.com> wrote: The ST trick only works when all
> > primitives affecting resource are in the monadic abstraction (they
> mention
> > the ST region variable in their computation type). This is not the case
> in
> > Markus example as "input_line" is a non-typed effect. Using ST safely
> would
> > be possible in OCaml, but you would have to completely eschew the
> standard
> > library and use a different base where all effectful functions have a
> > monadic type. It is the library, not the language itself, that allows
> this.
> > On the contrary, linear types are distinctly a language feature. Using
> > monads to encapsulate a form of linearity is an old trick. If you want =
to
> > have a taste of built-in linear typing, you may want to give Mezzo a try
> (
> > http://protz.github.io/mezzo/ ). On Fri, Aug 8, 2014 at 7:21 PM, Markus
> > Mottl <markus.mottl@gmail.com> wrote: I see, I was replying to the
> > "reference problem" and hadn't read your implementation, which, besides
> > existentials, already requires monads as return values. Actually, it ju=
st
> > occurred to me that one can even break the monadic approach in a purely
> > functional way. You are just one "return" away from disaster: let f =3D
> > ST.with_file "foo.txt" ~f:{ ST.f =3D fun c -> ST.return (fun () -> igno=
re
> > (ST.input_line c)) } in f () You'd have to eliminate "return", in which
> case
> > it wouldn't be a monad anymore and not general enough for realistic uses
> of
> > "with_file". Regards, Markus On Fri, Aug 8, 2014 at 12:01 PM, Ben
> Millwood
> > <bmillwood@janestreet.com> wrote: > I protected against that in my
> module by
> > carrying the existential type > variable in the result of input_line as
> > well, because I stumbled into > exactly that example while originally
> > drafting my e-mail :) > > In a sense I'm reinventing monadic IO but in a
> bit
> > of a half-hearted > way. It > wouldn't take much work to make it a bit
> more
> > fully-hearted, but it > would
> >
> > still be inconvenient to actually use. > > > On 8 August 2014 16:44,
> >
> > Markus Mottl <markus.mottl@gmail.com> wrote: >> >> It doesn't even
> require
> > references to screw things up here. Just >> return the closure containi=
ng
> > the channel from within "f": >> >> In_channel.with_file "foo.txt"
> ~f:(fun ic
> > () -> input_line ic) >> |> fun f -> f () >> >> The initial
> Stream-example is
> > basically just an instance of this >> "returning a closure" problem. >>
> >>
> > But the availability of references and exceptions arguably makes >>
> things
> > worse, because you cannot even use monadic I/O + existential >> types to
> > achieve guaranteed safety. >> >> Regards, >> Markus >> >> On Fri, Aug 8,
> > 2014 at 10:49 AM, Ben Millwood >> <bmillwood@janestreet.com> >> wrote:
> >> >
> > It's been pointed out to me that the above certainly isn't perfectly >>=
 >
> > secure. >> > E.g. >> > >> > let f =3D ref (fun () -> ()) in >> > with_f=
ile
> > "safe.ml" ~f:{ f =3D fun c -> >> > return (f :=3D fun () -> >> > Fn.ign=
ore
> (map
> > (input_line c) ~f:print_string_option)) }; >> > !f () >> > >> > gets
> > Exception: (Sys_error "Bad file descriptor"). Even though the >> >
> channel
> >
> >> and any operations on it can't escape the closure, the type of a >> >
> >
> > function >> > which uses them needn't mention them at all. >> > >> > It=
's
> > pretty hard to do anything about this in the presence of >> >
> unrestricted
> >
> >> side effects, so perhaps there's a reason why the Haskellers are >> >
> >
> > excited >> > about this sort of thing and you don't see it in OCaml so
> much
> > :) >> > >> > That said, you do seem to be forced to make a bit more of =
an
> > effort >> > to >> > break >> > things here, so I don't think the
> technique
> > is completely without >> > merit, >> > perhaps in cases where you'd be
> > defining all your own operations >> > anyway, >> > so >> > the
> duplication
> > isn't an issue. >> > >> > >> > On 8 August 2014 12:30, Ben Millwood
> > <bmillwood@janestreet.com> >> > wrote: >> >> >> >> There's a trick with
> > existential types, as used in e.g. Haskell's ST >> >> monad. It uses the
> > fact that an existentially-quantified type >> >> variable >> >> can't >>
> >>
> > escape its scope, so if your channel type and results that depend on >>
> >>
> > it >> >> are >> >> parametrised by an existential type variable, the
> > corresponding >> >> values >> >> can't >> >> escape the scope of the
> > callback either. >> >> >> >> Something like: >> >> >> >> module ST : sig
> >>
> >
> > type ('a, 's) t >> >> include Monad.S2 with type ('a, 's) t :=3D ('a, '=
s)
> t >>
> > type 's chan >> >> type 'a f =3D { f : 's . 's chan -> ('a, 's) t } >> =
val
> > with_file : string -> f:'a f -> 'a >> >> >> >> val input_line : 's
> >
> > chan -> (string option, 's) t >> >> end =3D struct >> >> module T =3D s=
truct
> >>
> >
> > type ('a, 's) t =3D 'a >> >> let return x =3D x >> >> let bind x f =3D =
f x >>
> let
> > map x ~f =3D f x >> >> end >> >> include T >> >> include Monad.Make2(T)=
 >>
> > type 's chan =3D In_channel.t >> >> type 'a f =3D { f : 's . 's chan ->
> >
> > ('a, 's) t } >> >> let with_file fp ~f:{ f } =3D In_channel.with_file fp
> ~f >>
> >
> > let input_line c =3D In_channel.input_line c >> >> end >> >> ;; >> >> >=
> >>
> >
> > match ST.with_file "safe.ml" ~f:{ ST.f =3D fun c -> ST.input_line c } >>
> >>
> > with >> >> | None -> print_endline "None" >> >> | Some line ->
> print_endline
> > line >> >> >> >> >> >> On 8 August 2014 11:23, Philippe Veber
> > <philippe.veber@gmail.com> >> >> wrote: >> >>> >> >>> Dear all, >> >>>
> >>
> >
> > many libraries like lwt, batteries or core provide a very nice >> >>>
> >
> > idiom >> >>> to >> >>> be used when a function uses a resource (file,
> > connection, mutex, >> >>> et >> >>> cetera), for instance in
> > Core.In_channel, the function: >> >>> >> >>> val with_file :
> ?binary:bool ->
> > string -> f:(t -> 'a) -> 'a >> >>> >> >>> opens a channel for [f] and
> > ensures it is closed after the call to >> >>> [f], >> >>> even if it
> raises
> > an exception. So these functions basically >> >>> prevent >> >>> from >>
> >>>
> > leaking resources. They fail, however, to prevent a user from using >>
> >>>
> > the >> >>> resource after it has been released. For instance, writing: =
>>
> >
> >>> >>> input_char (In_channel.with_file fn (fun x -> x)) >> >>> >> >>>
> >
> > is perfectly legal type-wise, but will fail at run-time. There are >>
> >>> of
> >
> >>>> course less obvious situations, for instance if you define a >> >>>
> >
> > function: >> >>> >> >>> val lines : in_channel -> string Stream.t >> >>>
> >>
> >
> > then the following will also fail: >> >>> >> >>> Stream.iter f
> >
> > (In_channel.with_file fn lines) >> >>> >> >>> My question is the
> following:
> > is there a way to have the compiler >> >>> check >> >>> resources are n=
ot
> > used after they are closed? I presume this can >> >>> only >> >>> be >>
> >>>
> > achieved by strongly restricting the kind of function passed to >> >>>
> > [with_file]. >> >>> One simple restriction I see is to define a type of
> > immediate >> >>> value, >> >>> that >> >>> roughly correspond to "simpl=
e"
> > datatypes (no closures, no lazy >> >>> expressions): >> >>> >> >>> modu=
le
> > Immediate : sig >> >>> type 'a t =3D private 'a >> >>> val int : int ->
> int t
> >
> >>>> val list : ('a -> 'a t) -> 'a list -> 'a list t >> >>> val tuple :
> >
> > ('a -> 'a t) -> ('b -> 'b t) -> ('a * 'b) -> ('a * >> >>> 'b) t >> >>> =
(*
> > for records, use the same trick than in >> >>>
> > http://www.lexifi.com/blog/dynamic-types *) >> >>> ... >> >>> end >>
> >>> >>
> >
> > and have the type of [with_file] changed to >> >>> >> >>> val with_file
> >
> > : string -> f:(in_channel -> 'a Immediate.t) -> 'a >> >>> >> >>> I'm su=
re
> > there are lots of smarter solutions out there. Would >> >>> anyone >> >=
>>
> > happen to know some? >> >>> >> >>> Cheers, >> >>> Philippe. >> >>> >> >>
> >>
> >
> >>> >> >> >> -- >> Markus Mottl http://www.ocaml.info
> >
> > markus.mottl@gmail.com > > -- Markus Mottl http://www.ocaml.info
> > markus.mottl@gmail.com -- Caml-list mailing list. Subscription
> management
> > and archives: https://sympa.inria.fr/sympa/arc/caml-list Beginner's
> list:
> > http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> > http://caml.inria.fr/bin/caml-bugs -- Markus Mottl http://www.ocaml.info
> > markus.mottl@gmail.com -- Caml-list mailing list. Subscription
> management
> > and archives: https://sympa.inria.fr/sympa/arc/caml-list Beginner's
> list:
> > http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> > http://caml.inria.fr/bin/caml-bugs
> >
> > --
> > Markus Mottl http://www.ocaml.info markus.mottl@gmail.com
> > --
> > Caml-list mailing list. Subscription management and archives:
> > https://sympa.inria.fr/sympa/arc/caml-list Beginner's list:
> > http://groups.yahoo.com/group/ocaml_beginners Bug reports:
> > http://caml.inria.fr/bin/caml-bugs
>
>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>

--f46d043c7e1c9df8e505004a4e0b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks everyone for these particularly instructive answers=
! Now I understand better why things are the way they are in OCaml. The lit=
terature on linear types also seems very interesting, thanks again!<br></di=
v>

<div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">2014-08-08 22=
:34 GMT+02:00 Markus Mottl <span dir=3D"ltr">&lt;<a href=3D"mailto:markus.m=
ottl@gmail.com" target=3D"_blank">markus.mottl@gmail.com</a>&gt;</span>:<br=
><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1=
px #ccc solid;padding-left:1ex">

That&#39;s how the state monad should be correctly implemented :-)<br>
<br>
Only &quot;with_file&quot; should be able to actually run the monadic<br>
computation and execute its side effects.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Fri, Aug 8, 2014 at 3:45 PM, Fr=E9d=E9ric Bour &lt;<a href=3D"mailto:fre=
deric.bour@lakaban.net">frederic.bour@lakaban.net</a>&gt; wrote:<br>
&gt; But you can&#39;t do any meaningful computation with this value.<br>
&gt; It&#39;s just a blackbox.<br>
&gt;<br>
&gt; In your example, the (ST.input_line c) inside the closure just build a=
 value<br>
&gt; of type (string option, &#39;_s) t for a specific s.<br>
&gt; In particular you will never be able to execute any action on the inpu=
t<br>
&gt; channel.<br>
&gt;<br>
&gt; This is not the case with the proposed implementation, because effects=
 are<br>
&gt; executed immediately.<br>
&gt; To ensure isolation, all effects should be &quot;frozen&quot;:<br>
&gt;<br>
&gt; module ST : sig<br>
&gt; =A0 type (&#39;a, &#39;s) t<br>
&gt; =A0 val return : &#39;a -&gt; (&#39;a, &#39;s) t<br>
&gt; =A0 val bind : (&#39;a, &#39;s) t -&gt; (&#39;a -&gt; (&#39;b, &#39;s)=
 t) -&gt; (&#39;b, &#39;s) t<br>
&gt; =A0 type &#39;s chan<br>
&gt; =A0 type &#39;a f =3D { f : &#39;s . &#39;s chan -&gt; (&#39;a, &#39;s=
) t }<br>
&gt; =A0 val with_file : string -&gt; f:&#39;a f -&gt; &#39;a<br>
&gt;<br>
&gt; =A0 val input_line : &#39;s chan -&gt; (string, &#39;s) t<br>
&gt; end =3D struct<br>
&gt; =A0 type (&#39;a, &#39;s) t =3D unit -&gt; &#39;a<br>
&gt; =A0 let return x =3D fun () -&gt; x<br>
&gt; =A0 let bind x f =3D fun () -&gt; f (x ()) ()<br>
&gt;<br>
&gt; =A0 type &#39;s chan =3D in_channel<br>
&gt; =A0 type &#39;a f =3D { f : &#39;s . &#39;s chan -&gt; (&#39;a, &#39;s=
) t }<br>
&gt; =A0 let with_file fp ~f:{ f } =3D<br>
&gt; =A0 =A0 let ic =3D open_in fp in<br>
&gt; =A0 =A0 try<br>
&gt; =A0 =A0 =A0 let result =3D f ic () in<br>
&gt; =A0 =A0 =A0 close_in_noerr ic;<br>
&gt; =A0 =A0 =A0 result<br>
&gt; =A0 =A0 with exn -&gt;<br>
&gt; =A0 =A0 =A0 close_in_noerr ic;<br>
&gt; =A0 =A0 =A0 raise exn<br>
&gt; =A0 let input_line c =3D fun () -&gt; input_line c<br>
&gt; end<br>
&gt;<br>
&gt; Le ven. 8 ao=FBt 2014 =E0 20:30, Markus Mottl &lt;<a href=3D"mailto:ma=
rkus.mottl@gmail.com">markus.mottl@gmail.com</a>&gt; a =E9crit :<br>
&gt;<br>
&gt; The escaping value can still be manipulated through a closure, outside=
 of<br>
&gt; &quot;with_file&quot;. The goal was to prevent this. On Fri, Aug 8, 20=
14 at 2:28 PM,<br>
&gt; Fr=E9d=E9ric Bour &lt;<a href=3D"mailto:frederic.bour@lakaban.net">fre=
deric.bour@lakaban.net</a>&gt; wrote:<br>
&gt;<br>
&gt; ST.input_line is just a reified effect, it can&#39;t be executed outsi=
de of the<br>
&gt; ST monad. You can make the value escape, but you can&#39;t do anything=
 with it.<br>
&gt; And because of the existential variable being propagated, it can&#39;t=
 be<br>
&gt; executed outside of this run of the ST value. Le ven. 8 ao=FBt 2014 =
=E0 19:23,<br>
&gt; Markus Mottl &lt;<a href=3D"mailto:markus.mottl@gmail.com">markus.mott=
l@gmail.com</a>&gt; a =E9crit : How would you implement this<br>
&gt; safely with ST here? I wasn&#39;t using the standard input_line but<br>
&gt; &quot;ST.input_line&quot;, which already returns a monadic type. The t=
rick here was to<br>
&gt; use the monadic &quot;return&quot; to return a closure that captures t=
he existential<br>
&gt; variable, allowing me to execute the computation outside of the safe r=
egion.<br>
&gt; Regards, Markus On Fri, Aug 8, 2014 at 1:37 PM, Gabriel Scherer<br>
&gt; &lt;<a href=3D"mailto:gabriel.scherer@gmail.com">gabriel.scherer@gmail=
.com</a>&gt; wrote: The ST trick only works when all<br>
&gt; primitives affecting resource are in the monadic abstraction (they men=
tion<br>
&gt; the ST region variable in their computation type). This is not the cas=
e in<br>
&gt; Markus example as &quot;input_line&quot; is a non-typed effect. Using =
ST safely would<br>
&gt; be possible in OCaml, but you would have to completely eschew the stan=
dard<br>
&gt; library and use a different base where all effectful functions have a<=
br>
&gt; monadic type. It is the library, not the language itself, that allows =
this.<br>
&gt; On the contrary, linear types are distinctly a language feature. Using=
<br>
&gt; monads to encapsulate a form of linearity is an old trick. If you want=
 to<br>
&gt; have a taste of built-in linear typing, you may want to give Mezzo a t=
ry (<br>
&gt; <a href=3D"http://protz.github.io/mezzo/" target=3D"_blank">http://pro=
tz.github.io/mezzo/</a> ). On Fri, Aug 8, 2014 at 7:21 PM, Markus<br>
&gt; Mottl &lt;<a href=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail=
.com</a>&gt; wrote: I see, I was replying to the<br>
&gt; &quot;reference problem&quot; and hadn&#39;t read your implementation,=
 which, besides<br>
&gt; existentials, already requires monads as return values. Actually, it j=
ust<br>
&gt; occurred to me that one can even break the monadic approach in a purel=
y<br>
&gt; functional way. You are just one &quot;return&quot; away from disaster=
: let f =3D<br>
&gt; ST.with_file &quot;foo.txt&quot; ~f:{ ST.f =3D fun c -&gt; ST.return (=
fun () -&gt; ignore<br>
&gt; (ST.input_line c)) } in f () You&#39;d have to eliminate &quot;return&=
quot;, in which case<br>
&gt; it wouldn&#39;t be a monad anymore and not general enough for realisti=
c uses of<br>
&gt; &quot;with_file&quot;. Regards, Markus On Fri, Aug 8, 2014 at 12:01 PM=
, Ben Millwood<br>
&gt; &lt;<a href=3D"mailto:bmillwood@janestreet.com">bmillwood@janestreet.c=
om</a>&gt; wrote: &gt; I protected against that in my module by<br>
&gt; carrying the existential type &gt; variable in the result of input_lin=
e as<br>
&gt; well, because I stumbled into &gt; exactly that example while original=
ly<br>
&gt; drafting my e-mail :) &gt; &gt; In a sense I&#39;m reinventing monadic=
 IO but in a bit<br>
&gt; of a half-hearted &gt; way. It &gt; wouldn&#39;t take much work to mak=
e it a bit more<br>
&gt; fully-hearted, but it &gt; would<br>
&gt;<br>
&gt; still be inconvenient to actually use. &gt; &gt; &gt; On 8 August 2014=
 16:44,<br>
&gt;<br>
&gt; Markus Mottl &lt;<a href=3D"mailto:markus.mottl@gmail.com">markus.mott=
l@gmail.com</a>&gt; wrote: &gt;&gt; &gt;&gt; It doesn&#39;t even require<br>
&gt; references to screw things up here. Just &gt;&gt; return the closure c=
ontaining<br>
&gt; the channel from within &quot;f&quot;: &gt;&gt; &gt;&gt; In_channel.wi=
th_file &quot;foo.txt&quot; ~f:(fun ic<br>
&gt; () -&gt; input_line ic) &gt;&gt; |&gt; fun f -&gt; f () &gt;&gt; &gt;&=
gt; The initial Stream-example is<br>
&gt; basically just an instance of this &gt;&gt; &quot;returning a closure&=
quot; problem. &gt;&gt; &gt;&gt;<br>
&gt; But the availability of references and exceptions arguably makes &gt;&=
gt; things<br>
&gt; worse, because you cannot even use monadic I/O + existential &gt;&gt; =
types to<br>
&gt; achieve guaranteed safety. &gt;&gt; &gt;&gt; Regards, &gt;&gt; Markus =
&gt;&gt; &gt;&gt; On Fri, Aug 8,<br>
&gt; 2014 at 10:49 AM, Ben Millwood &gt;&gt; &lt;<a href=3D"mailto:bmillwoo=
d@janestreet.com">bmillwood@janestreet.com</a>&gt; &gt;&gt; wrote: &gt;&gt;=
 &gt;<br>
&gt; It&#39;s been pointed out to me that the above certainly isn&#39;t per=
fectly &gt;&gt; &gt;<br>
&gt; secure. &gt;&gt; &gt; E.g. &gt;&gt; &gt; &gt;&gt; &gt; let f =3D ref (=
fun () -&gt; ()) in &gt;&gt; &gt; with_file<br>
&gt; &quot;<a href=3D"http://safe.ml" target=3D"_blank">safe.ml</a>&quot; ~=
f:{ f =3D fun c -&gt; &gt;&gt; &gt; return (f :=3D fun () -&gt; &gt;&gt; &g=
t; Fn.ignore (map<br>
&gt; (input_line c) ~f:print_string_option)) }; &gt;&gt; &gt; !f () &gt;&gt=
; &gt; &gt;&gt; &gt; gets<br>
&gt; Exception: (Sys_error &quot;Bad file descriptor&quot;). Even though th=
e &gt;&gt; &gt; channel<br>
&gt;<br>
&gt;&gt; and any operations on it can&#39;t escape the closure, the type of=
 a &gt;&gt; &gt;<br>
&gt;<br>
&gt; function &gt;&gt; &gt; which uses them needn&#39;t mention them at all=
. &gt;&gt; &gt; &gt;&gt; &gt; It&#39;s<br>
&gt; pretty hard to do anything about this in the presence of &gt;&gt; &gt;=
 unrestricted<br>
&gt;<br>
&gt;&gt; side effects, so perhaps there&#39;s a reason why the Haskellers a=
re &gt;&gt; &gt;<br>
&gt;<br>
&gt; excited &gt;&gt; &gt; about this sort of thing and you don&#39;t see i=
t in OCaml so much<br>
&gt; :) &gt;&gt; &gt; &gt;&gt; &gt; That said, you do seem to be forced to =
make a bit more of an<br>
&gt; effort &gt;&gt; &gt; to &gt;&gt; &gt; break &gt;&gt; &gt; things here,=
 so I don&#39;t think the technique<br>
&gt; is completely without &gt;&gt; &gt; merit, &gt;&gt; &gt; perhaps in ca=
ses where you&#39;d be<br>
&gt; defining all your own operations &gt;&gt; &gt; anyway, &gt;&gt; &gt; s=
o &gt;&gt; &gt; the duplication<br>
&gt; isn&#39;t an issue. &gt;&gt; &gt; &gt;&gt; &gt; &gt;&gt; &gt; On 8 Aug=
ust 2014 12:30, Ben Millwood<br>
&gt; &lt;<a href=3D"mailto:bmillwood@janestreet.com">bmillwood@janestreet.c=
om</a>&gt; &gt;&gt; &gt; wrote: &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; There&#=
39;s a trick with<br>
&gt; existential types, as used in e.g. Haskell&#39;s ST &gt;&gt; &gt;&gt; =
monad. It uses the<br>
&gt; fact that an existentially-quantified type &gt;&gt; &gt;&gt; variable =
&gt;&gt; &gt;&gt; can&#39;t &gt;&gt; &gt;&gt;<br>
&gt; escape its scope, so if your channel type and results that depend on &=
gt;&gt; &gt;&gt;<br>
&gt; it &gt;&gt; &gt;&gt; are &gt;&gt; &gt;&gt; parametrised by an existent=
ial type variable, the<br>
&gt; corresponding &gt;&gt; &gt;&gt; values &gt;&gt; &gt;&gt; can&#39;t &gt=
;&gt; &gt;&gt; escape the scope of the<br>
&gt; callback either. &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; Something like: &=
gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; module ST : sig &gt;&gt;<br>
&gt;<br>
&gt; type (&#39;a, &#39;s) t &gt;&gt; &gt;&gt; include Monad.S2 with type (=
&#39;a, &#39;s) t :=3D (&#39;a, &#39;s) t &gt;&gt;<br>
&gt; type &#39;s chan &gt;&gt; &gt;&gt; type &#39;a f =3D { f : &#39;s . &#=
39;s chan -&gt; (&#39;a, &#39;s) t } &gt;&gt; val<br>
&gt; with_file : string -&gt; f:&#39;a f -&gt; &#39;a &gt;&gt; &gt;&gt; &gt=
;&gt; &gt;&gt; val input_line : &#39;s<br>
&gt;<br>
&gt; chan -&gt; (string option, &#39;s) t &gt;&gt; &gt;&gt; end =3D struct =
&gt;&gt; &gt;&gt; module T =3D struct &gt;&gt;<br>
&gt;<br>
&gt; type (&#39;a, &#39;s) t =3D &#39;a &gt;&gt; &gt;&gt; let return x =3D =
x &gt;&gt; &gt;&gt; let bind x f =3D f x &gt;&gt; let<br>
&gt; map x ~f =3D f x &gt;&gt; &gt;&gt; end &gt;&gt; &gt;&gt; include T &gt=
;&gt; &gt;&gt; include Monad.Make2(T) &gt;&gt;<br>
&gt; type &#39;s chan =3D In_channel.t &gt;&gt; &gt;&gt; type &#39;a f =3D =
{ f : &#39;s . &#39;s chan -&gt;<br>
&gt;<br>
&gt; (&#39;a, &#39;s) t } &gt;&gt; &gt;&gt; let with_file fp ~f:{ f } =3D I=
n_channel.with_file fp ~f &gt;&gt;<br>
&gt;<br>
&gt; let input_line c =3D In_channel.input_line c &gt;&gt; &gt;&gt; end &gt=
;&gt; &gt;&gt; ;; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>
&gt;<br>
&gt; match ST.with_file &quot;<a href=3D"http://safe.ml" target=3D"_blank">=
safe.ml</a>&quot; ~f:{ ST.f =3D fun c -&gt; ST.input_line c } &gt;&gt; &gt;=
&gt;<br>
&gt; with &gt;&gt; &gt;&gt; | None -&gt; print_endline &quot;None&quot; &gt=
;&gt; &gt;&gt; | Some line -&gt; print_endline<br>
&gt; line &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; On 8 August=
 2014 11:23, Philippe Veber<br>
&gt; &lt;<a href=3D"mailto:philippe.veber@gmail.com">philippe.veber@gmail.c=
om</a>&gt; &gt;&gt; &gt;&gt; wrote: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;=
&gt; Dear all, &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>
&gt;<br>
&gt; many libraries like lwt, batteries or core provide a very nice &gt;&gt=
; &gt;&gt;&gt;<br>
&gt;<br>
&gt; idiom &gt;&gt; &gt;&gt;&gt; to &gt;&gt; &gt;&gt;&gt; be used when a fu=
nction uses a resource (file,<br>
&gt; connection, mutex, &gt;&gt; &gt;&gt;&gt; et &gt;&gt; &gt;&gt;&gt; cete=
ra), for instance in<br>
&gt; Core.In_channel, the function: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;=
&gt; val with_file : ?binary:bool -&gt;<br>
&gt; string -&gt; f:(t -&gt; &#39;a) -&gt; &#39;a &gt;&gt; &gt;&gt;&gt; &gt=
;&gt; &gt;&gt;&gt; opens a channel for [f] and<br>
&gt; ensures it is closed after the call to &gt;&gt; &gt;&gt;&gt; [f], &gt;=
&gt; &gt;&gt;&gt; even if it raises<br>
&gt; an exception. So these functions basically &gt;&gt; &gt;&gt;&gt; preve=
nt &gt;&gt; &gt;&gt;&gt; from &gt;&gt; &gt;&gt;&gt;<br>
&gt; leaking resources. They fail, however, to prevent a user from using &g=
t;&gt; &gt;&gt;&gt;<br>
&gt; the &gt;&gt; &gt;&gt;&gt; resource after it has been released. For ins=
tance, writing: &gt;&gt;<br>
&gt;<br>
&gt;&gt;&gt; &gt;&gt;&gt; input_char (In_channel.with_file fn (fun x -&gt; =
x)) &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>
&gt;<br>
&gt; is perfectly legal type-wise, but will fail at run-time. There are &gt=
;&gt; &gt;&gt;&gt; of<br>
&gt;<br>
&gt;&gt;&gt;&gt; course less obvious situations, for instance if you define=
 a &gt;&gt; &gt;&gt;&gt;<br>
&gt;<br>
&gt; function: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; val lines : in_c=
hannel -&gt; string Stream.t &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>
&gt;<br>
&gt; then the following will also fail: &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;=
&gt;&gt; Stream.iter f<br>
&gt;<br>
&gt; (In_channel.with_file fn lines) &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt=
;&gt; My question is the following:<br>
&gt; is there a way to have the compiler &gt;&gt; &gt;&gt;&gt; check &gt;&g=
t; &gt;&gt;&gt; resources are not<br>
&gt; used after they are closed? I presume this can &gt;&gt; &gt;&gt;&gt; o=
nly &gt;&gt; &gt;&gt;&gt; be &gt;&gt; &gt;&gt;&gt;<br>
&gt; achieved by strongly restricting the kind of function passed to &gt;&g=
t; &gt;&gt;&gt;<br>
&gt; [with_file]. &gt;&gt; &gt;&gt;&gt; One simple restriction I see is to =
define a type of<br>
&gt; immediate &gt;&gt; &gt;&gt;&gt; value, &gt;&gt; &gt;&gt;&gt; that &gt;=
&gt; &gt;&gt;&gt; roughly correspond to &quot;simple&quot;<br>
&gt; datatypes (no closures, no lazy &gt;&gt; &gt;&gt;&gt; expressions): &g=
t;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; module<br>
&gt; Immediate : sig &gt;&gt; &gt;&gt;&gt; type &#39;a t =3D private &#39;a=
 &gt;&gt; &gt;&gt;&gt; val int : int -&gt; int t<br>
&gt;<br>
&gt;&gt;&gt;&gt; val list : (&#39;a -&gt; &#39;a t) -&gt; &#39;a list -&gt;=
 &#39;a list t &gt;&gt; &gt;&gt;&gt; val tuple :<br>
&gt;<br>
&gt; (&#39;a -&gt; &#39;a t) -&gt; (&#39;b -&gt; &#39;b t) -&gt; (&#39;a * =
&#39;b) -&gt; (&#39;a * &gt;&gt; &gt;&gt;&gt; &#39;b) t &gt;&gt; &gt;&gt;&g=
t; (*<br>
&gt; for records, use the same trick than in &gt;&gt; &gt;&gt;&gt;<br>
&gt; <a href=3D"http://www.lexifi.com/blog/dynamic-types" target=3D"_blank"=
>http://www.lexifi.com/blog/dynamic-types</a> *) &gt;&gt; &gt;&gt;&gt; ... =
&gt;&gt; &gt;&gt;&gt; end &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>
&gt;<br>
&gt; and have the type of [with_file] changed to &gt;&gt; &gt;&gt;&gt; &gt;=
&gt; &gt;&gt;&gt; val with_file<br>
&gt;<br>
&gt; : string -&gt; f:(in_channel -&gt; &#39;a Immediate.t) -&gt; &#39;a &g=
t;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I&#39;m sure<br>
&gt; there are lots of smarter solutions out there. Would &gt;&gt; &gt;&gt;=
&gt; anyone &gt;&gt; &gt;&gt;&gt;<br>
&gt; happen to know some? &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Cheer=
s, &gt;&gt; &gt;&gt;&gt; Philippe. &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; =
&gt;&gt;<br>
&gt;<br>
&gt;&gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; -- &gt;&gt; Markus Mottl <a href=3D=
"http://www.ocaml.info" target=3D"_blank">http://www.ocaml.info</a><br>
&gt;<br>
&gt; <a href=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail.com</a> &=
gt; &gt; -- Markus Mottl <a href=3D"http://www.ocaml.info" target=3D"_blank=
">http://www.ocaml.info</a><br>
&gt; <a href=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail.com</a> -=
- Caml-list mailing list. Subscription management<br>
&gt; and archives: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a> Beginner&#3=
9;s list:<br>
&gt; <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_b=
lank">http://groups.yahoo.com/group/ocaml_beginners</a> Bug reports:<br>
&gt; <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank">http:=
//caml.inria.fr/bin/caml-bugs</a> -- Markus Mottl <a href=3D"http://www.oca=
ml.info" target=3D"_blank">http://www.ocaml.info</a><br>
&gt; <a href=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail.com</a> -=
- Caml-list mailing list. Subscription management<br>
&gt; and archives: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a> Beginner&#3=
9;s list:<br>
&gt; <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_b=
lank">http://groups.yahoo.com/group/ocaml_beginners</a> Bug reports:<br>
&gt; <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank">http:=
//caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
&gt; --<br>
&gt; Markus Mottl <a href=3D"http://www.ocaml.info" target=3D"_blank">http:=
//www.ocaml.info</a> <a href=3D"mailto:markus.mottl@gmail.com">markus.mottl=
@gmail.com</a><br>
&gt; --<br>
&gt; Caml-list mailing list. Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blan=
k">https://sympa.inria.fr/sympa/arc/caml-list</a> Beginner&#39;s list:<br>
&gt; <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_b=
lank">http://groups.yahoo.com/group/ocaml_beginners</a> Bug reports:<br>
&gt; <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blank">http:=
//caml.inria.fr/bin/caml-bugs</a><br>
<br>
<br>
<br>
--<br>
Markus Mottl =A0 =A0 =A0 =A0<a href=3D"http://www.ocaml.info" target=3D"_bl=
ank">http://www.ocaml.info</a> =A0 =A0 =A0 =A0<a href=3D"mailto:markus.mott=
l@gmail.com">markus.mottl@gmail.com</a><br>
</div></div></blockquote></div><br></div>

--f46d043c7e1c9df8e505004a4e0b--
