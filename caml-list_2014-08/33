Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id EF8087F747
	for <caml-list@sympa.inria.fr>; Fri,  8 Aug 2014 19:38:25 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.220.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.220.173 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.220.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vc0-f173.google.com) identity=helo;
  client-ip=209.85.220.173;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-vc0-f173.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkABAFIK5VPRVdytlGdsb2JhbABag19XBIJzrguELpVdgWOHSAGBDQgWEAEBAQEHCwsJEiuEAwEBAQMBEhEEGQEUBxILAQMBCwYDAgsNDR0CAiEBAREBBQEKEgYTCAoJB4gLAQMJCA2TQZAhaospgXKDEIpEChknAwpmhHoRAQUOjRGBRWQEB4J5gVIFhQAFjQyDKoRlggmBVoxwA4Q9GCmFCjsv
X-IPAS-Result: AkABAFIK5VPRVdytlGdsb2JhbABag19XBIJzrguELpVdgWOHSAGBDQgWEAEBAQEHCwsJEiuEAwEBAQMBEhEEGQEUBxILAQMBCwYDAgsNDR0CAiEBAREBBQEKEgYTCAoJB4gLAQMJCA2TQZAhaospgXKDEIpEChknAwpmhHoRAQUOjRGBRWQEB4J5gVIFhQAFjQyDKoRlggmBVoxwA4Q9GCmFCjsv
X-IronPort-AV: E=Sophos;i="5.01,826,1400018400"; 
   d="scan'208";a="74339002"
Received: from mail-vc0-f173.google.com ([209.85.220.173])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Aug 2014 19:38:24 +0200
Received: by mail-vc0-f173.google.com with SMTP id hy10so8639842vcb.4
        for <caml-list@inria.fr>; Fri, 08 Aug 2014 10:38:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=ZeYrPtqshB83+RczFtyiFsf5s7vswIEDxO5ehKiORPU=;
        b=0WENW6DBBIPpZ64lBOeiD8PzkdNCyZdxkTXW37gdRsuls9CKNb0NRzO/kuNuwdbW8y
         oTbzgGZYGZ19uNFzgXaGkcFbqMM1TwR4rlxDo3mwp1ZoYSBwza1OL3nwACARMcrnC1M5
         xjpTO4iInAO26x9x7eY+VLzrl1GyZL+sfJfbNhKWR+OA47DGGVSGfDcww/qkIuwSYC0N
         FS85n6H9dL8VD5/kXwigVufjFuSVB0IfK01GR3u8Q8UA7g4cTepQRBNuh1XVSQUiqIz9
         eyVX9dOFAXtLySi7WbsjuCgoQ6/2BLsDuTB7aSorPPi3SZVinD+KejvjYqKNO/p4oKLR
         ptOg==
X-Received: by 10.221.42.135 with SMTP id ty7mr23133470vcb.14.1407519503110;
 Fri, 08 Aug 2014 10:38:23 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.58.210.202 with HTTP; Fri, 8 Aug 2014 10:37:43 -0700 (PDT)
In-Reply-To: <CAP_800p2+Ej0_biuWBRASEJ2E-xKGtsmcngaBXuH_qS8XJDFxQ@mail.gmail.com>
References: <CAOOOohRCFcHLsgkpVrknKcQG1asP6WwUwvwmMuZbPV72gitL+g@mail.gmail.com>
 <CA+MHO53k186F3cAAHdsKmxWEXFt-Qg0_B8eL5OvAkW1jZaDg2A@mail.gmail.com>
 <CA+MHO52gGgVHU7CjmSf9zUixourShH59eEPRTLVQ9sNm2K1tnw@mail.gmail.com>
 <CAP_800q-q8_vcWofCZ4_mRcCm=JrE+BWUxLCAOP9N5vdWz8SiA@mail.gmail.com>
 <CA+MHO53O_RAxkFHfOQ9EjQSQDe-CF4ZSD1XPm0cWh_5PxwwV7Q@mail.gmail.com> <CAP_800p2+Ej0_biuWBRASEJ2E-xKGtsmcngaBXuH_qS8XJDFxQ@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 8 Aug 2014 19:37:43 +0200
Message-ID: <CAPFanBEbBN4po5qE4uzWWK2qUC0BBPdBaEjx6Mga53ftPaTM0Q@mail.gmail.com>
To: Markus Mottl <markus.mottl@gmail.com>
Cc: Ben Millwood <bmillwood@janestreet.com>, Philippe Veber <philippe.veber@gmail.com>, 
	caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11339974ff5750050021ab12
Subject: Re: [Caml-list] Not letting channels escape.

--001a11339974ff5750050021ab12
Content-Type: text/plain; charset=UTF-8

The ST trick only works when all primitives affecting resource are in the
monadic abstraction (they mention the ST region variable in their
computation type). This is not the case in Markus example as "input_line"
is a non-typed effect. Using ST safely would be possible in OCaml, but you
would have to completely eschew the standard library and use a different
base where all effectful functions have a monadic type. It is the library,
not the language itself, that allows this.

On the contrary, linear types are distinctly a language feature. Using
monads to encapsulate a form of linearity is an old trick. If you want to
have a taste of built-in linear typing, you may want to give Mezzo a try (
http://protz.github.io/mezzo/ ).


On Fri, Aug 8, 2014 at 7:21 PM, Markus Mottl <markus.mottl@gmail.com> wrote:

> I see, I was replying to the "reference problem" and hadn't read your
> implementation, which, besides existentials, already requires monads
> as return values.
>
> Actually, it just occurred to me that one can even break the monadic
> approach in a purely functional way.  You are just one "return" away
> from disaster:
>
>   let f =
>     ST.with_file "foo.txt" ~f:{
>       ST.f = fun c -> ST.return (fun () -> ignore (ST.input_line c))
>     }
>   in
>   f ()
>
> You'd have to eliminate "return", in which case it wouldn't be a monad
> anymore and not general enough for realistic uses of "with_file".
>
> Regards,
> Markus
>
> On Fri, Aug 8, 2014 at 12:01 PM, Ben Millwood <bmillwood@janestreet.com>
> wrote:
> > I protected against that in my module by carrying the existential type
> > variable in the result of input_line as well, because I stumbled into
> > exactly that example while originally drafting my e-mail :)
> >
> > In a sense I'm reinventing monadic IO but in a bit of a half-hearted
> way. It
> > wouldn't take much work to make it a bit more fully-hearted, but it would
> > still be inconvenient to actually use.
> >
> >
> > On 8 August 2014 16:44, Markus Mottl <markus.mottl@gmail.com> wrote:
> >>
> >> It doesn't even require references to screw things up here.  Just
> >> return the closure containing the channel from within "f":
> >>
> >>   In_channel.with_file "foo.txt" ~f:(fun ic () -> input_line ic)
> >>   |> fun f -> f ()
> >>
> >> The initial Stream-example is basically just an instance of this
> >> "returning a closure" problem.
> >>
> >> But the availability of references and exceptions arguably makes
> >> things worse, because you cannot even use monadic I/O + existential
> >> types to achieve guaranteed safety.
> >>
> >> Regards,
> >> Markus
> >>
> >> On Fri, Aug 8, 2014 at 10:49 AM, Ben Millwood <bmillwood@janestreet.com
> >
> >> wrote:
> >> > It's been pointed out to me that the above certainly isn't perfectly
> >> > secure.
> >> > E.g.
> >> >
> >> > let f = ref (fun () -> ()) in
> >> > with_file "safe.ml" ~f:{ f = fun c ->
> >> >   return (f := fun () ->
> >> >     Fn.ignore (map (input_line c) ~f:print_string_option)) };
> >> > !f ()
> >> >
> >> > gets Exception: (Sys_error "Bad file descriptor"). Even though the
> >> > channel
> >> > and any operations on it can't escape the closure, the type of a
> >> > function
> >> > which uses them needn't mention them at all.
> >> >
> >> > It's pretty hard to do anything about this in the presence of
> >> > unrestricted
> >> > side effects, so perhaps there's a reason why the Haskellers are
> excited
> >> > about this sort of thing and you don't see it in OCaml so much :)
> >> >
> >> > That said, you do seem to be forced to make a bit more of an effort to
> >> > break
> >> > things here, so I don't think the technique is completely without
> merit,
> >> > perhaps in cases where you'd be defining all your own operations
> anyway,
> >> > so
> >> > the duplication isn't an issue.
> >> >
> >> >
> >> > On 8 August 2014 12:30, Ben Millwood <bmillwood@janestreet.com>
> wrote:
> >> >>
> >> >> There's a trick with existential types, as used in e.g. Haskell's ST
> >> >> monad. It uses the fact that an existentially-quantified type
> variable
> >> >> can't
> >> >> escape its scope, so if your channel type and results that depend on
> it
> >> >> are
> >> >> parametrised by an existential type variable, the corresponding
> values
> >> >> can't
> >> >> escape the scope of the callback either.
> >> >>
> >> >> Something like:
> >> >>
> >> >> module ST : sig
> >> >>   type ('a, 's) t
> >> >>   include Monad.S2 with type ('a, 's) t := ('a, 's) t
> >> >>   type 's chan
> >> >>   type 'a f = { f : 's . 's chan -> ('a, 's) t }
> >> >>   val with_file : string -> f:'a f -> 'a
> >> >>
> >> >>   val input_line : 's chan -> (string option, 's) t
> >> >> end = struct
> >> >>   module T = struct
> >> >>     type ('a, 's) t = 'a
> >> >>     let return x = x
> >> >>     let bind x f = f x
> >> >>     let map x ~f = f x
> >> >>   end
> >> >>   include T
> >> >>   include Monad.Make2(T)
> >> >>   type 's chan = In_channel.t
> >> >>   type 'a f = { f : 's . 's chan -> ('a, 's) t }
> >> >>   let with_file fp ~f:{ f } = In_channel.with_file fp ~f
> >> >>   let input_line c = In_channel.input_line c
> >> >> end
> >> >> ;;
> >> >>
> >> >> match ST.with_file "safe.ml" ~f:{ ST.f = fun c -> ST.input_line c }
> >> >> with
> >> >> | None -> print_endline "None"
> >> >> | Some line -> print_endline line
> >> >>
> >> >>
> >> >> On 8 August 2014 11:23, Philippe Veber <philippe.veber@gmail.com>
> >> >> wrote:
> >> >>>
> >> >>> Dear all,
> >> >>>
> >> >>> many libraries like lwt, batteries or core provide a very nice idiom
> >> >>> to
> >> >>> be used when a function uses a resource (file, connection, mutex, et
> >> >>> cetera), for instance in Core.In_channel, the function:
> >> >>>
> >> >>> val with_file : ?binary:bool -> string -> f:(t -> 'a) -> 'a
> >> >>>
> >> >>> opens a channel for [f] and ensures it is closed after the call to
> >> >>> [f],
> >> >>> even if it raises an exception. So these functions basically prevent
> >> >>> from
> >> >>> leaking resources. They fail, however, to prevent a user from using
> >> >>> the
> >> >>> resource after it has been released. For instance, writing:
> >> >>>
> >> >>> input_char (In_channel.with_file fn (fun x -> x))
> >> >>>
> >> >>> is perfectly legal type-wise, but will fail at run-time. There are
> of
> >> >>> course less obvious situations, for instance if you define a
> function:
> >> >>>
> >> >>> val lines : in_channel -> string Stream.t
> >> >>>
> >> >>> then the following will also fail:
> >> >>>
> >> >>> Stream.iter f (In_channel.with_file fn lines)
> >> >>>
> >> >>> My question is the following: is there a way to have the compiler
> >> >>> check
> >> >>> resources are not used after they are closed? I presume this can
> only
> >> >>> be
> >> >>> achieved by strongly restricting the kind of function passed to
> >> >>> [with_file].
> >> >>> One simple restriction I see is to define a type of immediate value,
> >> >>> that
> >> >>> roughly correspond to "simple" datatypes (no closures, no lazy
> >> >>> expressions):
> >> >>>
> >> >>> module Immediate : sig
> >> >>>   type 'a t = private 'a
> >> >>>   val int : int -> int t
> >> >>>   val list : ('a -> 'a t) -> 'a list -> 'a list t
> >> >>>   val tuple : ('a -> 'a t) -> ('b -> 'b t) -> ('a * 'b) -> ('a *
> 'b) t
> >> >>>   (* for records, use the same trick than in
> >> >>> http://www.lexifi.com/blog/dynamic-types *)
> >> >>>   ...
> >> >>> end
> >> >>>
> >> >>> and have the type of [with_file] changed to
> >> >>>
> >> >>> val with_file : string -> f:(in_channel -> 'a Immediate.t) -> 'a
> >> >>>
> >> >>> I'm sure there are lots of smarter solutions out there. Would anyone
> >> >>> happen to know some?
> >> >>>
> >> >>> Cheers,
> >> >>>   Philippe.
> >> >>>
> >> >>
> >> >
> >>
> >>
> >>
> >> --
> >> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
> >
> >
>
>
>
> --
> Markus Mottl        http://www.ocaml.info        markus.mottl@gmail.com
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a11339974ff5750050021ab12
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>The ST trick only works when all primitives affecting=
 resource are in the monadic abstraction (they mention the ST region variab=
le in their computation type). This is not the case in Markus example as &q=
uot;input_line&quot; is a non-typed effect. Using ST safely would be possib=
le in OCaml, but you would have to completely eschew the standard library a=
nd use a different base where all effectful functions have a monadic type. =
It is the library, not the language itself, that allows this.<br>

<br></div>On the contrary, linear types are distinctly a language feature. =
Using monads to encapsulate a form of linearity is an old trick. If you wan=
t to have a taste of built-in linear typing, you may want to give Mezzo a t=
ry ( <a href=3D"http://protz.github.io/mezzo/">http://protz.github.io/mezzo=
/</a> ).<br>

<div><div></div></div></div><div class=3D"gmail_extra"><br><br><div class=
=3D"gmail_quote">On Fri, Aug 8, 2014 at 7:21 PM, Markus Mottl <span dir=3D"=
ltr">&lt;<a href=3D"mailto:markus.mottl@gmail.com" target=3D"_blank">markus=
.mottl@gmail.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">I see, I was replying to the &quot;reference=
 problem&quot; and hadn&#39;t read your<br>
implementation, which, besides existentials, already requires monads<br>
as return values.<br>
<br>
Actually, it just occurred to me that one can even break the monadic<br>
approach in a purely functional way. =C2=A0You are just one &quot;return&qu=
ot; away<br>
from disaster:<br>
<br>
=C2=A0 let f =3D<br>
=C2=A0 =C2=A0 ST.with_file &quot;foo.txt&quot; ~f:{<br>
=C2=A0 =C2=A0 =C2=A0 ST.f =3D fun c -&gt; ST.return (fun () -&gt; ignore (S=
T.input_line c))<br>
=C2=A0 =C2=A0 }<br>
=C2=A0 in<br>
=C2=A0 f ()<br>
<br>
You&#39;d have to eliminate &quot;return&quot;, in which case it wouldn&#39=
;t be a monad<br>
anymore and not general enough for realistic uses of &quot;with_file&quot;.=
<br>
<br>
Regards,<br>
Markus<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Fri, Aug 8, 2014 at 12:01 PM, Ben Millwood &lt;<a href=3D"mailto:bmillwo=
od@janestreet.com">bmillwood@janestreet.com</a>&gt; wrote:<br>
&gt; I protected against that in my module by carrying the existential type=
<br>
&gt; variable in the result of input_line as well, because I stumbled into<=
br>
&gt; exactly that example while originally drafting my e-mail :)<br>
&gt;<br>
&gt; In a sense I&#39;m reinventing monadic IO but in a bit of a half-heart=
ed way. It<br>
&gt; wouldn&#39;t take much work to make it a bit more fully-hearted, but i=
t would<br>
&gt; still be inconvenient to actually use.<br>
&gt;<br>
&gt;<br>
&gt; On 8 August 2014 16:44, Markus Mottl &lt;<a href=3D"mailto:markus.mott=
l@gmail.com">markus.mottl@gmail.com</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; It doesn&#39;t even require references to screw things up here. =
=C2=A0Just<br>
&gt;&gt; return the closure containing the channel from within &quot;f&quot=
;:<br>
&gt;&gt;<br>
&gt;&gt; =C2=A0 In_channel.with_file &quot;foo.txt&quot; ~f:(fun ic () -&gt=
; input_line ic)<br>
&gt;&gt; =C2=A0 |&gt; fun f -&gt; f ()<br>
&gt;&gt;<br>
&gt;&gt; The initial Stream-example is basically just an instance of this<b=
r>
&gt;&gt; &quot;returning a closure&quot; problem.<br>
&gt;&gt;<br>
&gt;&gt; But the availability of references and exceptions arguably makes<b=
r>
&gt;&gt; things worse, because you cannot even use monadic I/O + existentia=
l<br>
&gt;&gt; types to achieve guaranteed safety.<br>
&gt;&gt;<br>
&gt;&gt; Regards,<br>
&gt;&gt; Markus<br>
&gt;&gt;<br>
&gt;&gt; On Fri, Aug 8, 2014 at 10:49 AM, Ben Millwood &lt;<a href=3D"mailt=
o:bmillwood@janestreet.com">bmillwood@janestreet.com</a>&gt;<br>
&gt;&gt; wrote:<br>
&gt;&gt; &gt; It&#39;s been pointed out to me that the above certainly isn&=
#39;t perfectly<br>
&gt;&gt; &gt; secure.<br>
&gt;&gt; &gt; E.g.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; let f =3D ref (fun () -&gt; ()) in<br>
&gt;&gt; &gt; with_file &quot;<a href=3D"http://safe.ml" target=3D"_blank">=
safe.ml</a>&quot; ~f:{ f =3D fun c -&gt;<br>
&gt;&gt; &gt; =C2=A0 return (f :=3D fun () -&gt;<br>
&gt;&gt; &gt; =C2=A0 =C2=A0 Fn.ignore (map (input_line c) ~f:print_string_o=
ption)) };<br>
&gt;&gt; &gt; !f ()<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; gets Exception: (Sys_error &quot;Bad file descriptor&quot;). =
Even though the<br>
&gt;&gt; &gt; channel<br>
&gt;&gt; &gt; and any operations on it can&#39;t escape the closure, the ty=
pe of a<br>
&gt;&gt; &gt; function<br>
&gt;&gt; &gt; which uses them needn&#39;t mention them at all.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; It&#39;s pretty hard to do anything about this in the presenc=
e of<br>
&gt;&gt; &gt; unrestricted<br>
&gt;&gt; &gt; side effects, so perhaps there&#39;s a reason why the Haskell=
ers are excited<br>
&gt;&gt; &gt; about this sort of thing and you don&#39;t see it in OCaml so=
 much :)<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; That said, you do seem to be forced to make a bit more of an =
effort to<br>
&gt;&gt; &gt; break<br>
&gt;&gt; &gt; things here, so I don&#39;t think the technique is completely=
 without merit,<br>
&gt;&gt; &gt; perhaps in cases where you&#39;d be defining all your own ope=
rations anyway,<br>
&gt;&gt; &gt; so<br>
&gt;&gt; &gt; the duplication isn&#39;t an issue.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; On 8 August 2014 12:30, Ben Millwood &lt;<a href=3D"mailto:bm=
illwood@janestreet.com">bmillwood@janestreet.com</a>&gt; wrote:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; There&#39;s a trick with existential types, as used in e.=
g. Haskell&#39;s ST<br>
&gt;&gt; &gt;&gt; monad. It uses the fact that an existentially-quantified =
type variable<br>
&gt;&gt; &gt;&gt; can&#39;t<br>
&gt;&gt; &gt;&gt; escape its scope, so if your channel type and results tha=
t depend on it<br>
&gt;&gt; &gt;&gt; are<br>
&gt;&gt; &gt;&gt; parametrised by an existential type variable, the corresp=
onding values<br>
&gt;&gt; &gt;&gt; can&#39;t<br>
&gt;&gt; &gt;&gt; escape the scope of the callback either.<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; Something like:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; module ST : sig<br>
&gt;&gt; &gt;&gt; =C2=A0 type (&#39;a, &#39;s) t<br>
&gt;&gt; &gt;&gt; =C2=A0 include Monad.S2 with type (&#39;a, &#39;s) t :=3D=
 (&#39;a, &#39;s) t<br>
&gt;&gt; &gt;&gt; =C2=A0 type &#39;s chan<br>
&gt;&gt; &gt;&gt; =C2=A0 type &#39;a f =3D { f : &#39;s . &#39;s chan -&gt;=
 (&#39;a, &#39;s) t }<br>
&gt;&gt; &gt;&gt; =C2=A0 val with_file : string -&gt; f:&#39;a f -&gt; &#39=
;a<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; =C2=A0 val input_line : &#39;s chan -&gt; (string option,=
 &#39;s) t<br>
&gt;&gt; &gt;&gt; end =3D struct<br>
&gt;&gt; &gt;&gt; =C2=A0 module T =3D struct<br>
&gt;&gt; &gt;&gt; =C2=A0 =C2=A0 type (&#39;a, &#39;s) t =3D &#39;a<br>
&gt;&gt; &gt;&gt; =C2=A0 =C2=A0 let return x =3D x<br>
&gt;&gt; &gt;&gt; =C2=A0 =C2=A0 let bind x f =3D f x<br>
&gt;&gt; &gt;&gt; =C2=A0 =C2=A0 let map x ~f =3D f x<br>
&gt;&gt; &gt;&gt; =C2=A0 end<br>
&gt;&gt; &gt;&gt; =C2=A0 include T<br>
&gt;&gt; &gt;&gt; =C2=A0 include Monad.Make2(T)<br>
&gt;&gt; &gt;&gt; =C2=A0 type &#39;s chan =3D In_channel.t<br>
&gt;&gt; &gt;&gt; =C2=A0 type &#39;a f =3D { f : &#39;s . &#39;s chan -&gt;=
 (&#39;a, &#39;s) t }<br>
&gt;&gt; &gt;&gt; =C2=A0 let with_file fp ~f:{ f } =3D In_channel.with_file=
 fp ~f<br>
&gt;&gt; &gt;&gt; =C2=A0 let input_line c =3D In_channel.input_line c<br>
&gt;&gt; &gt;&gt; end<br>
&gt;&gt; &gt;&gt; ;;<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; match ST.with_file &quot;<a href=3D"http://safe.ml" targe=
t=3D"_blank">safe.ml</a>&quot; ~f:{ ST.f =3D fun c -&gt; ST.input_line c }<=
br>
&gt;&gt; &gt;&gt; with<br>
&gt;&gt; &gt;&gt; | None -&gt; print_endline &quot;None&quot;<br>
&gt;&gt; &gt;&gt; | Some line -&gt; print_endline line<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; On 8 August 2014 11:23, Philippe Veber &lt;<a href=3D"mai=
lto:philippe.veber@gmail.com">philippe.veber@gmail.com</a>&gt;<br>
&gt;&gt; &gt;&gt; wrote:<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; Dear all,<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; many libraries like lwt, batteries or core provide a =
very nice idiom<br>
&gt;&gt; &gt;&gt;&gt; to<br>
&gt;&gt; &gt;&gt;&gt; be used when a function uses a resource (file, connec=
tion, mutex, et<br>
&gt;&gt; &gt;&gt;&gt; cetera), for instance in Core.In_channel, the functio=
n:<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; val with_file : ?binary:bool -&gt; string -&gt; f:(t =
-&gt; &#39;a) -&gt; &#39;a<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; opens a channel for [f] and ensures it is closed afte=
r the call to<br>
&gt;&gt; &gt;&gt;&gt; [f],<br>
&gt;&gt; &gt;&gt;&gt; even if it raises an exception. So these functions ba=
sically prevent<br>
&gt;&gt; &gt;&gt;&gt; from<br>
&gt;&gt; &gt;&gt;&gt; leaking resources. They fail, however, to prevent a u=
ser from using<br>
&gt;&gt; &gt;&gt;&gt; the<br>
&gt;&gt; &gt;&gt;&gt; resource after it has been released. For instance, wr=
iting:<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; input_char (In_channel.with_file fn (fun x -&gt; x))<=
br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; is perfectly legal type-wise, but will fail at run-ti=
me. There are of<br>
&gt;&gt; &gt;&gt;&gt; course less obvious situations, for instance if you d=
efine a function:<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; val lines : in_channel -&gt; string Stream.t<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; then the following will also fail:<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; Stream.iter f (In_channel.with_file fn lines)<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; My question is the following: is there a way to have =
the compiler<br>
&gt;&gt; &gt;&gt;&gt; check<br>
&gt;&gt; &gt;&gt;&gt; resources are not used after they are closed? I presu=
me this can only<br>
&gt;&gt; &gt;&gt;&gt; be<br>
&gt;&gt; &gt;&gt;&gt; achieved by strongly restricting the kind of function=
 passed to<br>
&gt;&gt; &gt;&gt;&gt; [with_file].<br>
&gt;&gt; &gt;&gt;&gt; One simple restriction I see is to define a type of i=
mmediate value,<br>
&gt;&gt; &gt;&gt;&gt; that<br>
&gt;&gt; &gt;&gt;&gt; roughly correspond to &quot;simple&quot; datatypes (n=
o closures, no lazy<br>
&gt;&gt; &gt;&gt;&gt; expressions):<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; module Immediate : sig<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 type &#39;a t =3D private &#39;a<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 val int : int -&gt; int t<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 val list : (&#39;a -&gt; &#39;a t) -&gt; &#39;=
a list -&gt; &#39;a list t<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 val tuple : (&#39;a -&gt; &#39;a t) -&gt; (&#3=
9;b -&gt; &#39;b t) -&gt; (&#39;a * &#39;b) -&gt; (&#39;a * &#39;b) t<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 (* for records, use the same trick than in<br>
&gt;&gt; &gt;&gt;&gt; <a href=3D"http://www.lexifi.com/blog/dynamic-types" =
target=3D"_blank">http://www.lexifi.com/blog/dynamic-types</a> *)<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 ...<br>
&gt;&gt; &gt;&gt;&gt; end<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; and have the type of [with_file] changed to<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; val with_file : string -&gt; f:(in_channel -&gt; &#39=
;a Immediate.t) -&gt; &#39;a<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; I&#39;m sure there are lots of smarter solutions out =
there. Would anyone<br>
&gt;&gt; &gt;&gt;&gt; happen to know some?<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;&gt; Cheers,<br>
&gt;&gt; &gt;&gt;&gt; =C2=A0 Philippe.<br>
&gt;&gt; &gt;&gt;&gt;<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; --<br>
&gt;&gt; Markus Mottl =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://www.ocam=
l.info" target=3D"_blank">http://www.ocaml.info</a> =C2=A0 =C2=A0 =C2=A0 =
=C2=A0<a href=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail.com</a><=
br>
&gt;<br>
&gt;<br>
<br>
<br>
<br>
--<br>
Markus Mottl =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://www.ocaml.info" t=
arget=3D"_blank">http://www.ocaml.info</a> =C2=A0 =C2=A0 =C2=A0 =C2=A0<a hr=
ef=3D"mailto:markus.mottl@gmail.com">markus.mottl@gmail.com</a><br>
<br>
</div></div><div class=3D"HOEnZb"><div class=3D"h5">--<br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

--001a11339974ff5750050021ab12--
