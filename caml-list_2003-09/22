Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA13656; Tue, 2 Sep 2003 18:17:56 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA13359 for <caml-list@pauillac.inria.fr>; Tue, 2 Sep 2003 18:17:55 +0200 (MET DST)
Received: from mail-in-02.arcor-online.net (mail-in-02.arcor-online.net [151.189.21.42])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h82GHsT03586
	for <caml-list@inria.fr>; Tue, 2 Sep 2003 18:17:54 +0200 (MET DST)
Received: from diebuntekuh.de (dialin-212-144-187-096.arcor-ip.net [212.144.187.96])
	by mail-in-02.arcor-online.net (Postfix) with ESMTP id 00EE398A5D
	for <caml-list@inria.fr>; Tue,  2 Sep 2003 18:19:02 +0200 (CEST)
Received: by diebuntekuh.de (Postfix, from userid 500)
	id 331F967E1A6; Tue,  2 Sep 2003 18:20:19 +0200 (CEST)
To: OCaml List <caml-list@inria.fr>
Subject: [Caml-list] Type inference + optional parameters
From: Christoph Bauer <c_bauer@informatik.uni-kl.de>
Date: Tue, 02 Sep 2003 18:20:18 +0200
Message-ID: <m3ptij88n1.fsf@diebuntekuh.de>
User-Agent: Gnus/5.1002 (Gnus v5.10.2) Emacs/21.3 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; inference:01 bauer:01 bauer:01 ocamls:01 inference:01 3.07:01 val:01 val:01 foreach:01 expr:01 caml:01 int:01 int:01 behaviour:01 binary:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi,

ocamls type inference uses information of optionl arguments. This
results in a strange behaviour. Here is an example:

        Objective Caml version 3.07+beta 2

# let do_with_conv ~conv a = conv a;;
do_with_conv ~conv:int_of_string "1" ;;
val do_with_conv : conv:('a -> 'b) -> 'a -> 'b = <fun>

This is ok.

# let do_with_opt_conv ?(conv = fun s -> s) a = conv a;;
do_with_opt_conv ~conv:string_of_int "1";;- : int = 1
# val do_with_opt_conv : ?conv:('a -> 'a) -> 'a -> 'a = <fun>
# do_with_opt_conv ~conv:string_of_int "1";;

Is there a solution? It is not possible to 
add the "right" type information:

# let do_with_opt_conv ?(conv : 'a -> 'b = fun s -> s) (a:'a) : 'b = conv a;;
val do_with_opt_conv : ?conv:('a -> 'a) -> 'a -> 'a = <fun>

Thanks,
Christoph Bauer

-- 
proc self {} {foreach c [split [info body self] ""] d {14 -7 0 0 4 -67 4 73 11
69 24 -83 -15 6 -4 -84 78 20 11 -78 -1 -1 79 19 -8 4} { binary scan $c c c
if {[catch {append r [format %c [expr $c+$d]]}]} {return $r};}};puts [self]

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

