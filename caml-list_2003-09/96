Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA04522; Wed, 10 Sep 2003 03:06:56 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA12916 for <caml-list@pauillac.inria.fr>; Wed, 10 Sep 2003 03:06:52 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h8A16of10777
	for <caml-list@inria.fr>; Wed, 10 Sep 2003 03:06:50 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2/3.7W) with ESMTP id KAA12708;
	Wed, 10 Sep 2003 10:06:44 +0900 (JST)
To: newton@MIT.EDU, caml-list@inria.fr
Subject: Re: [Caml-list] Is there a compact syntax for masking methods in
	an inherit
In-Reply-To: <1063148703.27949.43.camel@moremischief>
References: <1062887193.3773.2363.camel@ffh.ro>
	<20030907170300B.garrigue@kurims.kyoto-u.ac.jp>
	<1063148703.27949.43.camel@moremischief>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20030910100658A.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 10 Sep 2003 10:06:58 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 25
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 newton:99 newton:99 jacques:01 inherit:01 inherit:01 int:01 garrigue:01 garrigue:01 behaviour:01 syntax:02 syntax:02 imply:02 explicit:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: "Ryan R. Newton" <newton@MIT.EDU>
> 
> > >    class c =
> > >    object
> > >      inherit a
> >        method virtual g : int
> > >      inherit b  
> > >      method h = 99
> > >    end
> 
> > Would this avoid your problem?
> > Other solutions would imply new syntax, for something that is no more
> > than a warning.
> 
> Yes, that would be super cool.  That solution provides exactly what I
> wanted, which was an explicit articulation *in the code* of which
> methods are being overridden, for readabilities' sake.  (So I think I'll
> start doing that regardless of whether it disables the warnings.)

OK, I've commited the change, and the warning is now effectively
disabled in this case. Only the warning behaviour is changed.

This will be in 3.07, except if somebody has a good reason against it.

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

