Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA26084; Fri, 8 Jun 2001 18:33:57 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA25813 for <caml-list@pauillac.inria.fr>; Fri, 8 Jun 2001 18:33:55 +0200 (MET DST)
Received: from smtp9.xs4all.nl (smtp9.xs4all.nl [194.109.127.135])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f58GXsL23289
	for <caml-list@inria.fr>; Fri, 8 Jun 2001 18:33:54 +0200 (MET DST)
Received: from beertje.william.bogus (williamc.xs4all.nl [213.84.56.92])
	by smtp9.xs4all.nl (8.9.3/8.9.3) with ESMTP id SAA19541;
	Fri, 8 Jun 2001 18:33:49 +0200 (CEST)
Received: (from williamc@localhost)
	by beertje.william.bogus (8.11.2/8.11.2/SuSE Linux 8.11.1-0.5) id f58Gbuc31177;
	Fri, 8 Jun 2001 18:37:56 +0200
X-Authentication-Warning: beertje.william.bogus: williamc set sender to williamc@paneris.org using -f
From: William Chesters <williamc@paneris.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15136.65379.944119.752870@beertje.william.bogus>
Date: Fri, 8 Jun 2001 18:37:55 +0200 (CEST)
To: caml-list@inria.fr
Subject: Re: Why is Ocaml better than Java (WAS: [Caml-list] ocaml complexity)
In-Reply-To: <200106081331.PAA20496@pauillac.inria.fr>
References: <AAEBJHFJOIPMMIILCEPBCEBCCMAA.mattias.waldau@abc.se>
	<200106081331.PAA20496@pauillac.inria.fr>
X-Mailer: VM 6.75 under 21.1 (patch 14) "Cuyahoga Valley" XEmacs Lucid
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Pierre Weis writes:
 > The more interesting features Caml offers to the programmer are
 > 
 > - concrete data types (sum types) along with pattern matching
 > - abstraction facilities thanks to modules (providing abstract data types)

Yes, Java has only one mechanism for abstraction, viz dynamic dispatch
(virtual methods).*  They're quite handy sometimes, hence ocaml's
classes---but increasingly they are no longer seen as the be-all and
end-all of programming.  With C++ moving more and more towards
templates, i.e. modules in the ML sense, "selling" other paradigms can
only get easier.


* unless you count data hiding as such to be a mechanism which I
hardly do :)
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

