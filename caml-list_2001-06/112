Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA20651; Fri, 8 Jun 2001 15:31:18 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA20452 for <caml-list@pauillac.inria.fr>; Fri, 8 Jun 2001 15:31:16 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f58DV8n09039;
	Fri, 8 Jun 2001 15:31:08 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA20496; Fri, 8 Jun 2001 15:31:08 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <200106081331.PAA20496@pauillac.inria.fr>
Subject: Re: Why is Ocaml better than Java (WAS: [Caml-list] ocaml complexity)
In-Reply-To: <AAEBJHFJOIPMMIILCEPBCEBCCMAA.mattias.waldau@abc.se> from Mattias Waldau at "Jun 8, 101 12:05:43 pm"
To: mattias.waldau@abc.se (Mattias Waldau)
Date: Fri, 8 Jun 2001 15:31:08 +0200 (MET DST)
Cc: caml-list@inria.fr, leary@nwlink.com, jonathan@meanwhile.freeserve.co.uk
X-Mailer: ELM [version 2.4ME+ PL28 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> The real questions is how to convince a Java-programmer to start using
> Ocaml.
> 
> The arguments I can list is:
> - speed
> - polymorphism, no casting needed (will be solved in next generation of
> Java, so this
> argument will disappear)
> - closures (however can always be programmed using local class with
> ()-method)
> - better typechecking makes higher order functions simple to use (however, I
>   think that a local class in Java will be as good)
> - compact programs (Java programs are very long)
> - easy integration with C (easy in VB, I haven't tried it in Java)
> 
> Plz help me with more arguments
> /mattias
> 
> -------------------
> Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ:http://caml.inria.fr/FAQ/ 
> To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

The more interesting features Caml offers to the programmer are

- concrete data types (sum types) along with pattern matching
- abstraction facilities thanks to modules (providing abstract data types)

The salient feeling you have when using the compiler is its
strictness: it ``seems'' to be clever enough to track down your bugs
via typechecking and pattern matching analysis.

Best regards,

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://pauillac.inria.fr/~weis/


-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

