Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA14031; Wed, 6 Jun 2001 19:28:16 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA14025 for <caml-list@pauillac.inria.fr>; Wed, 6 Jun 2001 19:28:15 +0200 (MET DST)
Received: from mta5.snfc21.pbi.net (mta5.snfc21.pbi.net [206.13.28.241])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f56HSEL22569
	for <caml-list@inria.fr>; Wed, 6 Jun 2001 19:28:15 +0200 (MET DST)
Received: from checkerlap.d6.com ([64.163.212.163])
 by mta5.snfc21.pbi.net (Sun Internet Mail Server sims.3.5.2000.01.05.12.18.p9)
 with ESMTP id <0GEI00IP6R6QO9@mta5.snfc21.pbi.net> for caml-list@inria.fr;
 Wed,  6 Jun 2001 10:28:03 -0700 (PDT)
Date: Wed, 06 Jun 2001 10:30:16 -0700
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] ocaml complexity
In-reply-to: <20010606095041.A93623@caddr.com>
X-Sender: def6@shell16.ba.best.com
To: Miles Egan <miles@caddr.com>, caml-list@inria.fr
Message-id: <4.3.2.7.2.20010606101946.02a94b00@shell16.ba.best.com>
MIME-version: 1.0
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Content-type: text/plain; charset="us-ascii"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>Have others had similar experiences?  I suspect most of the readers of this list
>are better-than-average programmers.  How difficult have you found it to be to
>teach Ocaml to your colleagues?  Any suggestions on a simple pedagogy for
>bringing more junior people abreast of subjects as esoteric as polymorphic
>recursive types?

I agree that Ocaml is big and powerful, and I even think it's kind of ugly.  ;)  However, I've been learning it in stages so I don't agree with your statement about not being able to use subsets.

Features I'm using:  

closures, local and anonymous functions, libraries, imperative stuff, experimenting with higher order functions (but usually just 1st order (2nd?), where a function takes a function), tiny bit of currying, genlex parsers, nested data structures

Features I'm not using right now:

objects, heavy modules, functors, streams (besides simple genlex things), heavy duty polymorphism, threads, lazy

I haven't taught anyone to use Ocaml completely, but I've walked non-functional (!) programmers through my code and they seem like they could get it.

Chris


-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

