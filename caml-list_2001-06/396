Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA28696; Fri, 29 Jun 2001 09:10:40 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA28706 for <caml-list@pauillac.inria.fr>; Fri, 29 Jun 2001 09:10:39 +0200 (MET DST)
Received: from ext.lri.fr (ext.lri.fr [129.175.15.4])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f5T7Ad518669
	for <caml-list@inria.fr>; Fri, 29 Jun 2001 09:10:39 +0200 (MET DST)
Received: from pc803.lri.fr (IDENT:root@pc803 [129.175.8.114])
          by ext.lri.fr (8.11.1/jtpda-5.3.2) with ESMTP id f5T7AY521199
          ; Fri, 29 Jun 2001 09:10:34 +0200 (MET DST)
Received: by pc803.lri.fr
	(8.9.3/feuille) id JAA26437
	; Fri, 29 Jun 2001 09:10:26 +0200
X-Authentication-Warning: localhost.localdomain: filliatr set sender to filliatr@pc803 using -f
From: Jean-Christophe Filliatre <Jean-Christophe.Filliatre@lri.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15164.10722.844314.565021@pc803>
Date: Fri, 29 Jun 2001 09:10:26 +0200 (MEST)
To: "Bauer, Robert" <rbauer@rational.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] re: help with ocaml
In-Reply-To: <A3AF185A9D48B3489F7CD9FE0F6E63A0DCC78C@sus-ca3it10>
References: <A3AF185A9D48B3489F7CD9FE0F6E63A0DCC78C@sus-ca3it10>
X-Mailer: VM 6.49 under Emacs 20.4.1
Reply-To: Jean-Christophe.Filliatre@lri.fr (Jean-Christophe Filliatre)
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Bauer, Robert writes:
 > 
 > Also, I find that if try to use any capitalized variables, I get interesting
 > errors - for
 > example if I try let XYZ_ZYX = (false, false);; I get an error, whereas let
 > xyz_zyx = (false, false);;
 > works just fine. Or more simply, let XYZ = (false, false);; fails.  Again, I
 > am hoping for an explanation.

Ocaml distinguishes between capitalized and uncapitalized identifiers.
The former are used for  constructors, exceptions and modules, and the
latter for other kinds (values, types, etc.)

This helps  avoiding trivial mistakes,  like mispelling the name  of a
constructor (which  would therefore be  understood as a  variable). It
also  helps  when  reading  third-party  code, since  you  can  easily
discriminate between constructors and functions in an application, for
instance.

There is a page of ocaml reference manual about names:

      http://caml.inria.fr/ocaml/htmlman/manual010.html

Sincerely,
-- 
Jean-Christophe Filliatre
  mailto:Jean-Christophe.Filliatre@lri.fr
  http://www.lri.fr/~filliatr
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

