Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA24012; Sun, 10 Jun 2001 04:49:00 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA23670 for <caml-list@pauillac.inria.fr>; Sun, 10 Jun 2001 04:48:59 +0200 (MET DST)
Received: from fledge.watson.org (fledge.watson.org [204.156.12.50])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f5A2mwP16026
	for <caml-list@inria.fr>; Sun, 10 Jun 2001 04:48:58 +0200 (MET DST)
Received: from localhost (patrick@localhost)
	by fledge.watson.org (8.11.3/8.11.3) with SMTP id f5A2mfF16192;
	Sat, 9 Jun 2001 22:48:41 -0400 (EDT)
	(envelope-from patrick@watson.org)
Date: Sat, 9 Jun 2001 22:48:40 -0400 (EDT)
From: Patrick M Doane <patrick@watson.org>
To: David McClain <dmcclain1@mindspring.com>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Evaluation Order
In-Reply-To: <000901c0f157$41202b90$210148bf@dylan>
Message-ID: <Pine.BSF.3.96.1010609224559.6403A-100000@fledge.watson.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

It sounds like a lot of what you're describing comes with Haskell's
monadic IO system.  If you have an expression

  e1 +  e2

where e1 and e2 could be side effecting expressions, the type system
forces you to write:

do v1 <- e1
   v2 <- e2
   return v1 + v2

If you're already familiar with Haskell, were there additional properties
you were looking for?

Patrick

On Sat, 9 Jun 2001, David McClain wrote:

> Earlier, I stated that there were no reference vars in the program. That's
> strictly true only of the OCaml portion of the code. However, the C/C++ core
> does maintain a mutable state and that is the reason for evaluation order
> dependencies.
> 
> It would seem that the compiler could automatically spot side effecting
> functions and propagate that attribute by noticing when reference vars are
> modified, when arrays and structures are mutated, etc. Hence explicit
> declaration should be unnecessary -- except! for those declared "external"
> routines that have side effects. Those need to be flagged explicitly to the
> compiler.
> 
> - DM
> 
> 
> -------------------
> Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
> To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr
> 

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

