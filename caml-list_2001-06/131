Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA32743; Sat, 9 Jun 2001 00:46:28 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA32688 for <caml-list@pauillac.inria.fr>; Sat, 9 Jun 2001 00:46:27 +0200 (MET DST)
Received: from ip208.usw4.rb1.pdx.nwlink.com (ip208.usw4.rb1.pdx.nwlink.com [209.20.133.208])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id f58MkQL27177
	for <caml-list@inria.fr>; Sat, 9 Jun 2001 00:46:26 +0200 (MET DST)
Received: (qmail 15620 invoked by uid 500); 8 Jun 2001 22:46:23 -0000
Date: Fri, 8 Jun 2001 15:46:23 -0700
From: leary@nwlink.com
To: Jonathan Coupe <jonathan@meanwhile.freeserve.co.uk>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] ocaml complexity
Message-ID: <20010608154623.A15375@jean>
References: <20010607015821.B11344@jean> <002c01c0ef7f$e154f3e0$5d26883e@baby> <20010608024102.A13672@jean> <003601c0f016$7ac12940$a00bfea9@baby>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <003601c0f016$7ac12940$a00bfea9@baby>; from jonathan@meanwhile.freeserve.co.uk on Fri, Jun 08, 2001 at 01:27:33PM +0100
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, Jun 08, 2001 at 01:27:33PM +0100, Jonathan Coupe wrote:
> If this was the decisive issue, people would just use C++ with GC.
<snip>
> Finally, you don't really know the cost/benefit ratio for a technology until
> the day you manage to ship. You certainly won't be able to convince any
> sceptical colleagues or managers of it, and that's what governs the adoption
> rate for new technologies.

No one factor is decisive, of course, else people would be using OCaml
(more) already.  But it looks like you're saying that adoption is governed
by people who can't be convinced to adopt unless they've shipped something
using the untried technology.  Let's just give up now, ok? ;)  Seriously,
IMHO, there ought to be a compelling case for OCaml that can be made on
paper, and supplemented with some relatively small projects (examples?
exercises for the reader?) which demonstrate the value.

> Many programmers don't know what fp is;
> more are positively allergic to it because of bad academic intoductions.

One of my main points: there is a lack of good tutorials aimed at people
who don't give a rip about the theory and lingo of language design, beyond
knowing the basics: http://caml.inria.fr/FAQ/general-eng.html .

> It's not easy conveying the benefits of the OCaml type system to an
> industrial C programmer either.

Really?  I'm a pretty lightweight programmer (Perl and a bit of C) by
comparison, and I didn't have trouble grasping the benefits.

> Claiming benefit here is easy. Persuading
> someone else that it exists requires real intellectual effort on your part
> and theirs. I don't think anyone could this better than Mark Dominus did
> with his article, which is probably a good hour's read.

I guess you mean this?: http://perl.plover.com/yak/typing/typing.html

> If the benefits
> Ocaml provides here were obvious, I don't think you'd have written that
> trying to understand the type system makes your eyes "glaze over."

My apologies for being unclear; it's just that I'm... unclear.  Hmmm, let
me put it this way: I've read dozens of chapters in books on ML and OCaml,
yet I can't even figure out half the *questions* that are asked on this
list.  Some of that is surely that I haven't read far enough to have
covered some of the particulars, but a good part of that is the language
(of programming languages) that is quite new to me.  I guess what I'm after
is: Where is the HHGT deciphering FP discussions?  (see my reply to the
HHGT Typing)

> Perl is widely used. Ocaml, Scheme, CLOS and Smalltalk aren't, despite being
> better languages. The reason why is partly that Perl is a more marketable
> language - it fits into niches where new tools can spread more easily, and
> because its benefits are easily communicated, potential users can easily be
> persuaded to try it out.

Scheme and CLOS aren't more widely used because people don't like the
parentheses.  And a good number of the most visible people who advocate
them are rabid emacs zealots -- talk about losing half your audience at the
start.

I went to the GNU Smalltalk site -- where a lot of people are going to go
first, if they're curious.  No good tutorials that I could see, the manual
looked pretty unfriendly -- what I got a chance to see of it.  The html
manual is on an ftp server that allows 10 users, so people might not be
able to read up on it enough to want to download.  I wasn't.  There's also
no evidence of *why* I should want to learn and use Smalltalk.  And anyway,
I'm not a big fan of using OOP (and certainly not for everything), as many
people aren't.  OCaml doesn't seem to force it on the user.  That's a
selling point.

Anyway, you don't think the great numbers of Free Software and Open Source
hackers can get excited about FP and OCaml?  I think they can.  I think the
benefits are easily communicated ( see again:
http://caml.inria.fr/FAQ/general-eng.html )  Remember, these are the people
who enjoy the Unix command line; who have made PHP and Python into viable
solutions in the face of Perl, C++, and Java; who actually do use Scheme
and CLOS and Guile and Emacs Lisp.  Look at the language shootout page.
OCaml is #2 and #4.  Yeah, yeah, speed isn't everything, but it *is* a
selling point for geeks, esp. when OCaml is so far ahead of languages like
Perl, Python, Ruby, Emacs Lisp, TCL and PHP; all of which are far "cooler"
right now.  And now there is PCRE-OCaml; a gold-plated opportunity to
interest some Perl folks in looking more closely at OCaml.

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

