Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA23675; Fri, 8 Jun 2001 17:21:41 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA23647 for <caml-list@pauillac.inria.fr>; Fri, 8 Jun 2001 17:21:40 +0200 (MET DST)
Received: from shell5.ba.best.com (shell5.ba.best.com [206.184.139.136])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f58FLdn13670
	for <caml-list@inria.fr>; Fri, 8 Jun 2001 17:21:39 +0200 (MET DST)
Received: from localhost (bpr@localhost)
	by shell5.ba.best.com (8.9.3/8.9.2/best.sh) with ESMTP id IAA03754;
	Fri, 8 Jun 2001 08:21:29 -0700 (PDT)
Date: Fri, 8 Jun 2001 08:21:29 -0700 (PDT)
From: Brian Rogoff <bpr@best.com>
To: Ohad Rodeh <orodeh@cs.huji.ac.il>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] let mutable (was OCaml Speed for Block Convolutions)
In-Reply-To: <Pine.LNX.4.20_heb2.08.0106081114270.26290-100000@zigzag.cs.huji.ac.il>
Message-ID: <Pine.BSF.4.21.0106080803350.27414-100000@shell5.ba.best.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Since we are already on the "with list" thread, I'd like to add my 
> own wish. I'm going to teach the "Purely Functional Data Structures" book
> (Chris Okasaki) as a course next semester. To do the real nifty stuff, you
> need to have polymorphic recursion supported by the compiler. Can this be
> added to the next release? 

This has been discussed many times here, and Pierre Weis has given a 
few good summaries of past work which you can access from the archives. 
In particular, the forward declaration he proposed also fixed the 
module spanning recursive function definition issue, and so kills 
at least two birds with one stone. Here's the ref 

http://caml.inria.fr/archives/199902/msg00020.html

Supporting polymorphic recursion is really high on my wish list too even
though I'm not in school or teaching. In essence, I want more
recursion: polymorphic recursion, module spanning recursive types, etc. I
personally hadn't bumped into the case where module spanning recursive
function definitions were a pain, but I found Fergus Henderson's argument
from the Mercury compiler sources pretty convincing so I want that too. 

Anyways, that's the problem with that damned Okasaki book; once you read
it you start wanting all of these fancy features. I guess ignorance
really is bliss. :-)

-- Brian


-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

