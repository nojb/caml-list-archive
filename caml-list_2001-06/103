Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA13865; Fri, 8 Jun 2001 11:41:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA14282 for <caml-list@pauillac.inria.fr>; Fri, 8 Jun 2001 11:41:05 +0200 (MET DST)
Received: from ip208.usw4.rb1.pdx.nwlink.com (ip208.usw4.rb1.pdx.nwlink.com [209.20.133.208])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id f589f4L14687
	for <caml-list@inria.fr>; Fri, 8 Jun 2001 11:41:04 +0200 (MET DST)
Received: (qmail 13761 invoked by uid 500); 8 Jun 2001 09:41:02 -0000
Date: Fri, 8 Jun 2001 02:41:02 -0700
From: leary@nwlink.com
To: Jonathan Coupe <jonathan@meanwhile.freeserve.co.uk>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] ocaml complexity
Message-ID: <20010608024102.A13672@jean>
References: <20010607015821.B11344@jean> <002c01c0ef7f$e154f3e0$5d26883e@baby>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <002c01c0ef7f$e154f3e0$5d26883e@baby>; from jonathan@meanwhile.freeserve.co.uk on Thu, Jun 07, 2001 at 07:29:27PM +0100
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, Jun 07, 2001 at 07:29:27PM +0100, Jonathan Coupe wrote:
> 1. Perl was perceived by the adopters who gave it critical mass as being
> fundamentally like the languages they already knew (bash, C, Awk) It was a
> low risk, low effort, low fear choice.

A Hitchhiker's Guide to type theory (and all the other alien things my eyes
glaze over at on this list) aimed at the unwashed masses would go a long
way to making OCaml (and functional programming in general) more
accessible.  Did I pass over one somewhere?

> 2. Perl is aimed most of all at small projects. The risk of trying new tools
> in this space is low - throwing away a 200 lines of code is annoying, but
> not job threatening. And benefits are quickly perceiveable. Ocaml's best use
> is probably larger projects beyond the scope of scripting languages.
> Throwing a way an even quarter completed project is likely to mean the loss
> of several thousand lines of coding effort, and you're unlikely to have
> proveable benefits until the end of the first project, which is more likely
> to be months, not days or hours, after starting work.

How much time and money do development teams spend creating and tracking
down memory management errors in C and C++ starting on day one?  At least
some of the benefits are immediate and ongoing.

> 
> 3. Perl's regexp gave it a decisive edge in several rapidly expanding
> niches.

And OCaml has features which give it a decisive edge in markets too big to
be called mere niches.

> 4. Its easy to perceive Perl's strengths from an initial examination, and
> perhaps harder to pick up on its weaknesses.

I can say exactly the same of OCaml.

-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

