Return-Path: <julia.lawall@lip6.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id AEF2280161
	for <caml-list@sympa.inria.fr>; Sun, 18 Jun 2017 21:41:46 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="5.39,357,1493676000"; 
   d="scan'208";a="279499003"
Received: from 198.67.28.109.rev.sfr.net (HELO hadrien) ([109.28.67.198])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Jun 2017 21:41:46 +0200
Date: Sun, 18 Jun 2017 21:41:45 +0200 (CEST)
From: Julia Lawall <julia.lawall@lip6.fr>
X-X-Sender: jll@hadrien
To: caml-list@inria.fr
Message-ID: <alpine.DEB.2.20.1706182133490.30282@hadrien>
User-Agent: Alpine 2.20 (DEB 67 2015-01-07)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Subject: [Caml-list] segmentation fault

Hello,

I am trying to debug a segmentation fault in natively compiled ocaml code.
This blog says that the backtrace produced by gdb on a core file produced
by ocaml is not reliable:

https://incubaid.wordpress.com/2011/12/04/on-segmentation-faults-stack-overflows-gdb-and-ocaml/

Is that still the case?  The backtraces that I get look plausible, but
don't contain anything that looks like a stack overflow.  Over several
runs on two different laptops, the backtraces have nothing obvious in
common.  The bytecode version does not seem to stack overflow.  Adding
Gc.print_stat() at a periodic quiescent point in the execution did not
show a memory leak.  I am using OCaml 4.02.3.

thanks,
julia
