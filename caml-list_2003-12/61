Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA10455; Sun, 7 Dec 2003 03:59:23 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA13171 for <caml-list@pauillac.inria.fr>; Sun, 7 Dec 2003 03:59:21 +0100 (MET)
Received: from smtp.siren.ocn.ne.jp (siren.ocn.ne.jp [211.129.13.170])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id hB72xKr05531
	for <caml-list@inria.fr>; Sun, 7 Dec 2003 03:59:20 +0100 (MET)
Received: from PWARP (p2235-ipad07kyoto.kyoto.ocn.ne.jp [221.189.193.235])
	by smtp.siren.ocn.ne.jp (Postfix) with SMTP
	id 767541FE1; Sun,  7 Dec 2003 11:59:18 +0900 (JST)
Message-ID: <002201c3bc6e$195e49e0$0274a8c0@PWARP>
From: "Nicolas Cannasse" <warplayer@free.fr>
To: <caml-list@inria.fr>, "Nuutti Kotivuori" <naked+caml@naked.iki.fi>
References: <871xrhe4hb.fsf@iki.fi>
Subject: Re: [Caml-list] Object-oriented access bottleneck
Date: Sun, 7 Dec 2003 11:59:14 +0900
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2800.1158
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1165
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; cannasse:01 warplayer:01 caml-list:01 bottleneck:01 circumvent:01 inlined:01 inlining:01 cannasse:01 nicolas:01 nicolas:01 closure:01 lazy:02 modules:02 objects:02 binding:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

[...]
> So - I am asking if I'm correct in my deductions here, or if I missed
> some important point. Or if there's an alternative way to circumvent
> this restriction.
>
> To summarize - is there any way to have some function (or method or
> whatever) that is able to access object member data, without the
> overhead of a lazy binding function call? Preferably ofcourse such a
> function should be eligible to be inlined.
>
> Thanks in advance,
> -- Naked

There is good way : don't use objects :-)
For most of the cases, modules should be powerful enough and offer far
better performances... and inlining.
Even if you need some specialisation, you can always handle it using a
closure.

Nicolas Cannasse

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

