Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA24898; Wed, 24 Dec 2003 11:40:22 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA24794 for <caml-list@pauillac.inria.fr>; Wed, 24 Dec 2003 11:40:21 +0100 (MET)
Received: from pop19.ucdavis.edu (pop19.ucdavis.edu [169.237.105.29])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id hBOAeKb19658
	for <caml-list@inria.fr>; Wed, 24 Dec 2003 11:40:20 +0100 (MET)
Received: from 128.120.141.212 ([128.120.141.212])
	by pop19.ucdavis.edu (8.12.10/8.12.9/it-std-5.2.0) with ESMTP id hBOAeICT009513
	for <caml-list@inria.fr>; Wed, 24 Dec 2003 02:40:18 -0800 (PST)
From: Issac Trotts <ijtrotts@ucdavis.edu>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Frustrated Beginner
Date: Wed, 24 Dec 2003 02:41:26 -0800
User-Agent: KMail/1.5.4
References: <1072152186.59938.30.camel@tylere> <20031223165224.GB9202@davidb.org> <2FE5C370-3587-11D8-9A95-000393CB0F1E@spy.net>
In-Reply-To: <2FE5C370-3587-11D8-9A95-000393CB0F1E@spy.net>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200312240241.26130.ijtrotts@ucdavis.edu>
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; issac:01 trotts:01 ijtrotts:01 caml-list:01 32,:01 habit:01 unambiguous:01 struct:01 issac:01 cae:99 bug:01 faq:01 faq:01 beginner's:01 beginners:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tuesday 23 December 2003 12:32, Dustin Sallings wrote:
> On Dec 23, 2003, at 8:52, David Brown wrote:
> > Plus there are some places where let () = ... in makes things easier,
> > since it allows multiple expressions after a then or else without
> > needing a begin/end wrapping.
>
> 	I've been getting in the habit of doing this kind of thing:
>
> 	if (expression) then (
> 		stuff
> 	) else (
> 		other stuff
> 	)
>
> 	It gives me % matching in vim, allows me to insert debug statements
> when I'm screwing up, and looks fairly clean and unambiguous.

You can match begin/end and other things if you make a file called
$HOME/.vim/ftplugin/ocaml.vim with these lines:

let b:mw='\<let\>:\<and\>:\(\<in\>\|;;\),'
let b:mw=b:mw . '\<if\>:\<then\>:\<else\>,\<do\>:\<done\>,'
let b:mw=b:mw . '\<\(object\|sig\|struct\|begin\)\>:\<end\>'
let b:match_words=mw

Issac

>
> --
> SPY                      My girlfriend asked me which one I like better.
> pub  1024/3CAE01D5 1994/11/03 Dustin Sallings <dustin@spy.net>
>
> |    Key fingerprint =  87 02 57 08 02 D0 DA D6  C8 0F 3E 65 51 98 D8 BE
>
> L_______________________ I hope the answer won't upset her. ____________
>
> -------------------
> To unsubscribe, mail caml-list-request@inria.fr Archives:
> http://caml.inria.fr Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ:
> http://caml.inria.fr/FAQ/ Beginner's list:
> http://groups.yahoo.com/group/ocaml_beginners

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

