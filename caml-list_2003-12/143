Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA15622; Fri, 12 Dec 2003 22:31:24 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA15646 for <caml-list@pauillac.inria.fr>; Fri, 12 Dec 2003 22:31:23 +0100 (MET)
Received: from smtp3.pp.htv.fi (smtp3.pp.htv.fi [213.243.153.173])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hBCLVM108587
	for <caml-list@inria.fr>; Fri, 12 Dec 2003 22:31:22 +0100 (MET)
Received: from posti.pp.htv.fi (posti.pp.htv.fi [212.90.64.50])
	by smtp3.pp.htv.fi (Postfix) with ESMTP id 2B18727BAC4
	for <caml-list@inria.fr>; Fri, 12 Dec 2003 23:31:22 +0200 (EET)
Received: from oro (aka.pp.htv.fi [213.243.183.115])
	by posti.pp.htv.fi (8.11.1 (Revision 1.5+JAGae91741+JAGae92668) /8.11.1) with ESMTP id hBCLVLT28431
	for <caml-list@inria.fr>; Fri, 12 Dec 2003 23:31:21 +0200 (EET)
Received: from naked by oro with local (Exim 3.36 #1 (Debian))
	id 1AUusb-0008DL-00
	for <caml-list@inria.fr>; Fri, 12 Dec 2003 23:31:21 +0200
To: caml-list@inria.fr
Subject: [Caml-list] Co-existence of byterun and asmrun impossible?
From: Nuutti Kotivuori <naked+caml@naked.iki.fi>
Date: Fri, 12 Dec 2003 23:31:21 +0200
Message-ID: <87zndx7mfq.fsf@naked.iki.fi>
User-Agent: Gnus/5.1002 (Gnus v5.10.2) XEmacs/21.4 (Portable Code, linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; byterun:01 asmrun:01 byterun:01 asmrun:01 co-exist:01 ocamlrun:01 ocamlrun:01 natively:01 dynamically:01 camlrun:01 compiler:01 compiler:01 ocaml:01 ocaml:01 caml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

It took me a while to realize this - and I just wish to make sure that
I haven't misunderstood anything.

The byterun and asmrun parts cannot co-exist in a single executable?

It's possible to *compile* native code with a compiler in bytecode,
and to compile bytecode with a compiler in native code, but it is not
possible to *run* bytecode with an executable that isn't bytecode? 
That is, a native compiled version of ocamlrun could never exist -
eg. no ocamlrun.opt nor ocaml.opt (native toplevel)?

I never thought of this before - it seems rather natural, but it's
still a bit of a bummer. This means that if a program needs to
interpret bytecode, no ocaml code in it may be natively compiled -
which in turn means any performance sensitive code needs to be hand
written in C.

Well, I'm not counting in the possibility of dynamically loading both
camlrun and asmrun and calling them directly - but even still they
couldn't share values and there would be two separate garbage
collectors.

I expect that this is a rather fundamental restriction and not easily
removed?

Bummed out,
-- Naked

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

