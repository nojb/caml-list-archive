Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA18967; Mon, 22 Dec 2003 11:21:02 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA18682 for <caml-list@pauillac.inria.fr>; Mon, 22 Dec 2003 11:21:01 +0100 (MET)
Received: from newext.lri.fr (ext.lri.fr [129.175.15.4])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hBMAKxv08367
	for <caml-list@inria.fr>; Mon, 22 Dec 2003 11:20:59 +0100 (MET)
Received: from serveur-mail.lri.fr (serveur-mail [129.175.8.90])
          by newext.lri.fr (8.12.10/jtpda-5.4) with ESMTP id hBMAHA35001210
          ; Mon, 22 Dec 2003 11:17:10 +0100 (MET)
Received: from serveur-demons (mail@serveur-demons [129.175.8.130])
          by serveur-mail.lri.fr (8.11.6p2/jtpda-5.3.2) with ESMTP id hBMAHAq23285
          ; Mon, 22 Dec 2003 11:17:10 +0100 (MET)
Received: from localhost ([127.0.0.1] ident=signoles)
	by serveur-demons with esmtp (Exim 3.35 #1 (Debian))
	id 1AYN7d-0008Cu-00; Mon, 22 Dec 2003 11:17:09 +0100
Date: Mon, 22 Dec 2003 11:17:09 +0100 (MET)
From: Julien Signoles <Julien.Signoles@lri.fr>
X-X-Sender: signoles@serveur-demons
To: Brian Hurt <bhurt@spnz.org>
cc: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] Multiparameter functors?
In-Reply-To: <Pine.LNX.4.44.0312211927320.3749-100000@guestc.h0020780e8acd.ne.client2.attbi.com>
Message-ID: <Pine.LNX.4.44.0312221115090.28882-100000@serveur-demons>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-MailScanner: Found to be clean
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; signoles:01 signoles:01 lri:01 caml-list:01 functors:01 functors:01 orderedtype:01 orderedtype:01 struct:01 struct:01 lri:01 mcvoy:01 module:03 module:03 practice:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


> Is it possible to do multi-parameter functors?  What I want to be able to
> so is something like:
>
> module Make(Key: Map.OrderedType, Pri: Map.OrderedType) = struct
> 	type key = Key.t;;
> 	type pri = Pri.t;;
> 	...
> end;;

module Make(Key: Map.OrderedType)(Pri: Map.OrderedType) = struct
  type key = Key.t
  type pri = Pri.t
  (* ... *)
end

Julien Signoles
-- 
mailto:Julien.Signoles@lri.fr ; http://www.lri.fr/~signoles
"In theory, practice and theory are the same,
but in practice they are different" (Larry McVoy)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

