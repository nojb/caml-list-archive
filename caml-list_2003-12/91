Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA00096; Mon, 8 Dec 2003 22:06:18 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA01047 for <caml-list@pauillac.inria.fr>; Mon, 8 Dec 2003 22:06:16 +0100 (MET)
Received: from smtp1.pp.htv.fi (smtp1.pp.htv.fi [212.90.64.119])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hB8L6F123359
	for <caml-list@inria.fr>; Mon, 8 Dec 2003 22:06:15 +0100 (MET)
Received: from posti.pp.htv.fi (posti.pp.htv.fi [212.90.64.50])
	by smtp1.pp.htv.fi (Postfix) with ESMTP
	id 7016680C0C; Mon,  8 Dec 2003 23:06:15 +0200 (EET)
Received: from oro (aka.pp.htv.fi [213.243.183.115])
	by posti.pp.htv.fi (8.11.1 (Revision 1.5+JAGae91741+JAGae92668) /8.11.1) with ESMTP id hB8L6FT06293;
	Mon, 8 Dec 2003 23:06:15 +0200 (EET)
Received: from naked by oro with local (Exim 3.36 #1 (Debian))
	id 1ATSa6-00069W-00; Mon, 08 Dec 2003 23:06:14 +0200
To: Brian Hurt <bhurt@spnz.org>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] Object-oriented access bottleneck
References: <Pine.LNX.4.44.0312081514270.5009-101000@localhost.localdomain>
From: Nuutti Kotivuori <naked+caml@naked.iki.fi>
Date: Mon, 08 Dec 2003 23:06:14 +0200
In-Reply-To: <Pine.LNX.4.44.0312081514270.5009-101000@localhost.localdomain> (Brian
 Hurt's message of "Mon, 8 Dec 2003 15:37:17 -0600 (CST)")
Message-ID: <87d6azauk9.fsf@naked.iki.fi>
User-Agent: Gnus/5.1002 (Gnus v5.10.2) XEmacs/21.4 (Portable Code, linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 bottleneck:01 inlined:01 foo:01 ocaml's:01 c's:01 -inline:01 inlining:01 ocaml:01 caml:01 wrote:03 guess:06 brian:06 iki:07 despite:07 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Brian Hurt wrote:
> - Despite my best efforts, ocaml inlined (and removed) the call to
> foo.  In general this is good, but it did defeat my efforts to time
> how long a direct function call took.  For some reason it didn't
> also eliminate the for loops.  If I had to guess, Ocaml's call to a
> known function is about the same speed as C's.

I am not certain what it does, but did you try 'ocamlopt -inline -1 ...'?

For me, that seemed to prevent some inlining atleast.

-- Naked

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

