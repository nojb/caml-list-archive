Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: Caml-list@yquem.inria.fr
Delivered-To: Caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id EAF52BBCA
	for <Caml-list@yquem.inria.fr>; Mon, 17 Mar 2008 13:52:09 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAIwG3keCNhAB/2dsb2JhbACnDw
X-IronPort-AV: E=Sophos;i="4.25,512,1199660400"; 
   d="scan'208";a="9563594"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 17 Mar 2008 13:52:08 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m2HCpvUo013650;
	Mon, 17 Mar 2008 21:51:57 +0900 (JST)
Date: Mon, 17 Mar 2008 21:51:50 +0900 (JST)
Message-Id: <20080317.215150.241958851.garrigue@math.nagoya-u.ac.jp>
To: serp@stork.ru
Cc: Caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Polymorphic method and polymorphic type
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <47DE6364.4080204@stork.ru>
References: <47DE4635.7050101@stork.ru>
	<47DE6364.4080204@stork.ru>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; variants:01 syntax:01 variants:01 polymorphic:01 polymorphic:01 caml-list:01 variant:02 variables:02 confusing:02 supported:02 revised:02 garrigue:03 garrigue:03 jacques:03 jacques:03 

From: SerP <serp@stork.ru>

> but if we use simple variant type instead of polymorphic variants it 
> works perfect
> 
> 
> type 'a get_mode = [ Read | Watch of (#getter as 'a)];;

(Better to avoid revised syntax in such cases, it is confusing here)

I was not aware of that, but this is logical since the problem comes
from expansion, and simple variants do not need to be expanded.
So I should correct my phrasing: explicit polymorphic type variables
inside constrained type parameters of type abbreviations are not
supported.

Jacques Garrigue

