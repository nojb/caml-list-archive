Return-Path: <darioteixeira@yahoo.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 681D6BBCA
	for <caml-list@yquem.inria.fr>; Sun, 16 Mar 2008 22:34:42 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkgAAOou3UfOvjGtoWdsb2JhbACRAAEBAQEBAQUEBgkIAReUYg
X-IronPort-AV: E=Sophos;i="4.25,510,1199660400"; 
   d="scan'208";a="23838009"
Received: from web54603.mail.re2.yahoo.com ([206.190.49.173])
  by mail4-smtp-sop.national.inria.fr with SMTP; 16 Mar 2008 22:34:41 +0100
Received: (qmail 53990 invoked by uid 60001); 16 Mar 2008 21:34:39 -0000
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  h=X-YMail-OSG:Received:Date:From:Subject:To:In-Reply-To:MIME-Version:Content-Type:Content-Transfer-Encoding:Message-ID;
  b=ag1gcQbOLNfT1RWcWQDTkcTW35r9cXJiCSY6QDdpI5Vo6mepQ8025n+0rMqr+gR7aGno4EmDiAq/VzFJsjTw60yy4xngTZ4ep7SgD+B2z03XzYdRm2AhTZONWD5MapRg2X8aLL29Fojhq+bO3VSWFcOSszHnTNXazum1JBYAmMA=;
X-YMail-OSG: A4XyskYVM1l.lB71RbEiYwmeRCwO3kWFpy7X5sYL
Received: from [82.155.103.175] by web54603.mail.re2.yahoo.com via HTTP; Sun, 16 Mar 2008 21:34:39 GMT
Date: Sun, 16 Mar 2008 21:34:39 +0000 (GMT)
From: Dario Teixeira <darioteixeira@yahoo.com>
Subject: Re: [Caml-list] OSR: META files for packages containing syntax extensions (take 2)
To: caml-list@yquem.inria.fr
In-Reply-To: <98095.73991.qm@web54601.mail.re2.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Message-ID: <805980.53898.qm@web54603.mail.re2.yahoo.com>
X-Spam: no; 0.00; syntax:01 wiki:01 syntax:01 ocaml:01 camlp:01 ocamlfind:01 ocaml:01 findlib:01 camlp:01 findlib:01 makefiles:01 unify:01 subpackages:01 cmo:01 toploop:01 

Hi,

As promised, here's version 2.0 of the OSR.  Please make your voice
be heard concerning bugs/suggestions/criticisms/etc.  If everybody
is happy with it, it will be placed in the Wiki.

Best regards,
Dario Teixeira


================================================================
   OSR: META files for packages containing syntax extensions
================================================================

1. OBJECTIVE:
=============

This recommendation aims to ensure that the META files accompanying
Ocaml packages implementing some Camlp4-based syntax extension are
Findlib-compliant.


2. RATIONALE:
=============

Whether by invoking ocamlfind directly or by using the generic Ocamlbuild
plugin [1], the use of syntax extensions in Ocaml can be significantly
simplified if the package defining the extension includes a META file
that is Findlib+Camlp4 aware.  Despite this fact, not all packages
available via GODI are presently compliant.


3. WHOM IT CONCERNS:
====================

On the one hand, package maintainers, who should make sure the packages
under their wing follow the guidelines in this OSR.  On the other hand,
the users themselves: either by using the Ocamlbuild plugin [1], or
by manually using the findlib facilities for syntax extensions in their
makefiles, they can make life easier for others who wish to compile/modify
their code.


4. DESCRIPTION:
===============

The Findlib manual already contains a comprehensive reference concerning
Findlib's support for Camlp4 syntax extensions [2].  The material
contained here merely illustrates how the META file should be written for
a number of common scenarios.  The reader will note that the goal has been
to unify as much as possible the conventions used, even if at the expense
of always requiring the use of subpackages.  In particular, we always
mandate a subpackage called "syntax" to hold the syntax extension itself.


4.1. Package that IS A syntax extension:
========================================

Suppose we have a syntax extension "listcomp" for list comprehensions.
This extension does not rely on any other libraries, and is meant to be
packaged individually.  However, due to the requirement that all syntax
extension packages are named "syntax", it must be defined in a subpackage
and placed inside a container package.  Here's how its META file should
look like:

-----------------------------------------------
name "listcomp"
version = "1.0"
description = "Container for list comprehensions"

package "syntax"
   (
   version = "1.0"
   description = "Syntax extension for list comprehensions"
   requires = "camlp4"
   archive(syntax,preprocessor) = "pa_listcomp.cmo"
   archive(syntax,toploop) = "pa_listcomp.cmo"
   )
-----------------------------------------------


Another common occurrence is for the syntax extension to rely on a
runtime module or library included with the package.  Suppose listcomp
relied on a "runtime_listcomp" module; here's how its META file should
look like instead:

-----------------------------------------------
name "listcomp"
version = "1.0"
description = "Runtime support for list comprehensions"
archive(byte)="runtime_listcomp.cma"
archive(native)="runtime_listcomp.cmxa"

package "syntax"
   (
   version = "1.0"
   description = "Syntax extension for list comprehensions"
   requires = "listcomp,camlp4"
   archive(syntax,preprocessor) = "pa_listcomp.cmo"
   archive(syntax,toploop) = "pa_listcomp.cmo"
   )
-----------------------------------------------


4.2. Package with optional syntax extension:
============================================

A good example is PG'OCaml.  Users of this library can link against the
"pgocaml" package if they only intend to use the low-level functions.
However, there is also an optional syntax extension that enables the
embedding of SQL statements within Ocaml code.  This syntax extension
is enabled by using the "pgocaml.syntax" subpackage.  Note that this
case is essentially identical to the previously shown syntax extension
relying on a runtime library.  Here's the proposed META file:

-----------------------------------------------
name="pgocaml"
version="1.1"
description="PG'OCaml is a set of OCaml bindings for the PostgreSQL database."
requires="unix,extlib,csv,pcre,calendar"
archive(byte)="pgocaml.cma"
archive(native)="pgocaml.cmxa"

package "syntax"
   (
   version = "1.1"
   description = "Syntax extension: PostgreSQL statements checked at
compile-time"
   requires = "pgocaml,camlp4"
   archive(syntax,preprocessor) = "pa_pgsql.cmo"
   archive(syntax,toploop) = "pa_pgsql.cmo"
   )
-----------------------------------------------


4.3. Package that is a container for several syntax extensions:
===============================================================

I would place P4ck in this category, though it is presently not available
via GODI, and I don't know if its author would like to see it added as
a single godi-p4ck package or if split into individual packages.

Suppose we have a dummy package "foobar", which is simply a container
for two independent syntax extensions, "openin" and "memoization".
Users can refer to each extension as "foobar.openin.syntax" and
"foobar.memoization.syntax".  Moreover, and if applicable, the user may
wish to use all syntax extensions defined in package foobar.  In this
case, "foobar.syntax" should load them all.  Here's how the META file
for foobar should look like:

-----------------------------------------------
name "foobar"
version = "1.0"
description = "Collection of useful syntax extensions"

package "openin"
   (
   version = "1.0"
   description = "Container for openin syntax extension"
   package "syntax"
      (
      version = "1.0"
      requires = "camlp4"
      description = "Syntax extension for openin"
      archive(syntax,preprocessor) = "pa_openin.cmo"
      archive(syntax,toploop) = "pa_openin.cmo"
      )
   )

package "memoization"
   (
   version = "1.0"
   description = "Container for memoization syntax extension"
   package "syntax"
      (
      version = "1.0"
      requires = "camlp4"
      description = "Syntax extension for memoization"
      archive(syntax,preprocessor) = "pa_memoization.cmo"
      archive(syntax,toploop) = "pa_memoization.cmo"
      )
   )

package "syntax"
   (
   version = "1.0"
   requires = "foobar.openin.syntax,foobar.memoization.syntax"
   description = "All syntax extensions contained by foobar"
   )
-----------------------------------------------


REFERENCES:
===========

[1] Ocamlbuild Wiki - "Using ocamlfind with ocamlbuild":
http://brion.inria.fr/gallium/index.php/Using_ocamlfind_with_ocamlbuild

[2] The findlib User's Guide - "Does Findlib support camlp4?":
http://www.ocaml-programming.de/packages/documentation/findlib/guide-html/x412.html




      ___________________________________________________________ 
Rise to the challenge for Sport Relief with Yahoo! For Good  

http://uk.promotions.yahoo.com/forgood/

