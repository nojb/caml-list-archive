Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 7D31EBBC1
	for <caml-list@yquem.inria.fr>; Fri, 28 Mar 2008 13:09:07 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlUCAMp87EfAbSoIiGdsb2JhbACRMwEBAQ8mmUA
X-IronPort-AV: E=Sophos;i="4.25,569,1199660400"; 
   d="scan'208";a="24298547"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 28 Mar 2008 13:09:07 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@yquem.inria.fr>
Received: from einhorn.in-berlin.de (localhost [127.0.0.1])
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id m2SC965R004093
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@yquem.inria.fr>; Fri, 28 Mar 2008 13:09:06 +0100
Received: (from www-data@localhost)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Submit) id m2SC968b004091
	for caml-list@yquem.inria.fr; Fri, 28 Mar 2008 13:09:06 +0100
X-Authentication-Warning: einhorn.in-berlin.de: www-data set sender to oliver@first.in-berlin.de using -f
Received: from dslb-088-073-089-114.pools.arcor-ip.net (dslb-088-073-089-114.pools.arcor-ip.net [88.73.89.114]) 
	by webmail.in-berlin.de (IMP) with HTTP 
	for <first@localhost>; Fri, 28 Mar 2008 13:09:06 +0100
Message-ID: <1206706146.47ecdfe275806@webmail.in-berlin.de>
Date: Fri, 28 Mar 2008 13:09:06 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] The Bridge Pattern in OCaml
References: <4a051d930803190929q60d31012kb6c9d2b03a2d2ca6@mail.gmail.com> <1206703811.47ecd6c379853@webmail.in-berlin.de> <e16c7bcd0803280445g525c9788v3c75511d23be9943@mail.gmail.com> <200803281252.41824.micha-1@fantasymail.de>
In-Reply-To: <200803281252.41824.micha-1@fantasymail.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Spam: no; 0.00; bandel:01 in-berlin:01 ocaml:01 serialize:01 serialize:01 langauge:01 oliver:01 oliver:01 caml-list:01 functions:01 behaviour:01 data:02 ast:02 structures:02 pattern:04 

Zitat von Michael Wohlwend <micha-1@fantasymail.de>:

> Am Freitag, 28. März 2008 12:45:26 schrieb Jim Farrand:
> >
> > The opposite in fact.  I want to be able to serialize things I (the
> > framework designer) never even thought of.  I want the users of my
> > framework to have maximum flexibility to implement whatever
> behaviour
> > they like, without restricted them to the things I thought of
> putting
> > into the file format.
>
> couldn't the user implement and somehow register functions for
> serializing his
> own data structures?
[...]

When I hear "serialization", the term "AST" pop ups for me also.

Possibly I'm too biased here ;-)
but maybe that's the way to go?

Creating a datastrzucture, while creatzing the functionality.
And later, when you want to serialize what you have build up,
write that datastructure, you build by your own, to a file.
and when rereading it, this means: re-create the functionality from the
datastructure.

Isn't this, what is looked for, here?

This is in a way langauge implementation.
Isn't it?

Ciao,
   Oliver

