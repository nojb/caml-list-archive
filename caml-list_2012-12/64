Return-Path: <eric.jaeger@ssi.gouv.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 514E77F2AA
	for <caml-list@sympa.inria.fr>; Tue, 18 Dec 2012 09:37:51 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  eric.jaeger@ssi.gouv.fr) identity=pra;
  client-ip=86.65.182.16;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="eric.jaeger@ssi.gouv.fr";
  x-sender="eric.jaeger@ssi.gouv.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  eric.jaeger@ssi.gouv.fr) identity=mailfrom;
  client-ip=86.65.182.16;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="eric.jaeger@ssi.gouv.fr";
  x-sender="eric.jaeger@ssi.gouv.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@smtp.ssi.gouv.fr) identity=helo;
  client-ip=86.65.182.16;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="eric.jaeger@ssi.gouv.fr";
  x-sender="postmaster@smtp.ssi.gouv.fr";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av8EAGAq0FBWQbYQ/2dsb2JhbABEgkm7XhZzgiUIAh0BBTEoBWg/AQQeBYgHmFKREZBFjWuDKQOILIVRjWWKcIJ0
X-IronPort-AV: E=Sophos;i="4.84,308,1355094000"; 
   d="scan'208,217";a="186613053"
Received: from smtp.ssi.gouv.fr ([86.65.182.16])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 18 Dec 2012 09:37:50 +0100
Received: from smtp-switch.internet.local (smtp-switch [192.168.3.9])
	by smtp.ssi.gouv.fr (Postfix) with ESMTP id 3F1FF90B97F
	for <caml-list@inria.fr>; Tue, 18 Dec 2012 09:37:50 +0100 (CET)
From: "Eric Jaeger" <eric.jaeger@ssi.gouv.fr>
To: <caml-list@inria.fr>
Date: Tue, 18 Dec 2012 09:37:49 +0100
Message-ID: <003801cddcfa$f66325c0$e3297140$@jaeger@ssi.gouv.fr>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0039_01CDDD03.58278DC0"
X-Mailer: Microsoft Outlook
Thread-Index: Ac3c+vX/tIi4mSRoSeaiY8eS00MPkw==
Content-Language: fr
Subject: [Caml-list] Function returning recursive lists

This is a multi-part message in MIME format.

------=_NextPart_000_0039_01CDDD03.58278DC0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Hi everyone,

=20

There are various discussions on recursive lists in the archive, yet I was
wondering whether or not it was possible in pure OCaml to write a function
returning non-constant recursive lists.

=20

For example, I would like to have a function =93docycle:=92a list->=92a lis=
t=94 that
takes a non recursive list and transforms it into a recursive list
containing the same elements. That is, =93docycle [1;2;3]=94 would return a=
 list
structurally equivalent to =93let rec c=3D1::2::3::c in c=94. So far, my va=
rious
attempts (OCaml 3.12) have not been successful. Another good example is to
have a List.map compatible with recursive lists.

=20

Please note that it is, in a way, a theoretical (and possibly na=EFve)
question :

-          I do not consider recursive lists as the perfect implementation
for my problem

-          I do not care about efficiency

-          I do not want to use an ad hoc mutable/lazy list datatype (unless
I=92ve also a conversion function toward standard lists)

-          I do not want to use Obj or other similar tricks

It=92s just that I=92m curious whether or not what I=92m trying to achieve =
is
possible.

=20

  Regards, Eric

=20


------=_NextPart_000_0039_01CDDD03.58278DC0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<META HTTP-EQUIV=3D"Content-Type" CONTENT=3D"text/html; charset=3Diso-8859-=
1">
<html xmlns:v=3D"urn:schemas-microsoft-com:vml" xmlns:o=3D"urn:schemas-micr=
osoft-com:office:office" xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" xmlns=3D"http:=
//www.w3.org/TR/REC-html40"><head><meta name=3DGenerator content=3D"Microso=
ft Word 12 (filtered medium)"><style><!--
/* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-priority:34;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:612.0pt 792.0pt;
	margin:70.85pt 70.85pt 70.85pt 70.85pt;}
div.WordSection1
	{page:WordSection1;}
/* List Definitions */
@list l0
	{mso-list-id:2096852830;
	mso-list-type:hybrid;
	mso-list-template-ids:1125043152 1958383146 67895299 67895301 67895297 678=
95299 67895301 67895297 67895299 67895301;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:"Calibri","sans-serif";
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
--></style><!--[if gte mso 9]><xml>
<o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
<o:shapelayout v:ext=3D"edit">
<o:idmap v:ext=3D"edit" data=3D"1" />
</o:shapelayout></xml><![endif]--></head><body lang=3DFR link=3Dblue vlink=
=3Dpurple><div class=3DWordSection1><p class=3DMsoNormal><span lang=3DEN-US=
>Hi everyone,<o:p></o:p></span></p><p class=3DMsoNormal><span lang=3DEN-US>=
<o:p>&nbsp;</o:p></span></p><p class=3DMsoNormal><span lang=3DEN-US>There a=
re various discussions on recursive lists in the archive, yet I was wonderi=
ng whether or not it was possible in pure OCaml to write a function returni=
ng non-constant recursive lists.<o:p></o:p></span></p><p class=3DMsoNormal>=
<span lang=3DEN-US><o:p>&nbsp;</o:p></span></p><p class=3DMsoNormal><span l=
ang=3DEN-US>For example, I would like to have a function &#8220;docycle:&#8=
217;a list-&gt;&#8217;a list&#8221; that takes a non recursive list and tra=
nsforms it into a recursive list containing the same elements. That is, &#8=
220;docycle [1;2;3]&#8221; would return a list structurally equivalent to &=
#8220;let rec c=3D1::2::3::c in c&#8221;. So far, my various attempts (OCam=
l 3.12) have not been successful. Another good example is to have a List.ma=
p compatible with recursive lists.<o:p></o:p></span></p><p class=3DMsoNorma=
l><span lang=3DEN-US><o:p>&nbsp;</o:p></span></p><p class=3DMsoNormal><span=
 lang=3DEN-US>Please note that it is, in a way, a theoretical (and possibly=
 na&iuml;ve) question :<o:p></o:p></span></p><p class=3DMsoListParagraph st=
yle=3D'text-indent:-18.0pt;mso-list:l0 level1 lfo1'><![if !supportLists]><s=
pan lang=3DEN-US><span style=3D'mso-list:Ignore'>-<span style=3D'font:7.0pt=
 "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span></span></span><![endif]><span lang=3DEN-US>I do not consider recursi=
ve lists as the perfect implementation for my problem<o:p></o:p></span></p>=
<p class=3DMsoListParagraph style=3D'text-indent:-18.0pt;mso-list:l0 level1=
 lfo1'><![if !supportLists]><span lang=3DEN-US><span style=3D'mso-list:Igno=
re'>-<span style=3D'font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span lang=3DE=
N-US>I do not care about efficiency<o:p></o:p></span></p><p class=3DMsoList=
Paragraph style=3D'text-indent:-18.0pt;mso-list:l0 level1 lfo1'><![if !supp=
ortLists]><span lang=3DEN-US><span style=3D'mso-list:Ignore'>-<span style=
=3D'font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp; </span></span></span><![endif]><span lang=3DEN-US>I do not wa=
nt to use an ad hoc mutable/lazy list datatype (unless I&#8217;ve also a co=
nversion function toward standard lists)<o:p></o:p></span></p><p class=3DMs=
oListParagraph style=3D'text-indent:-18.0pt;mso-list:l0 level1 lfo1'><![if =
!supportLists]><span lang=3DEN-US><span style=3D'mso-list:Ignore'>-<span st=
yle=3D'font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp; </span></span></span><![endif]><span lang=3DEN-US>I do not=
 want to use Obj or other similar tricks<o:p></o:p></span></p><p class=3DMs=
oNormal><span lang=3DEN-US>It&#8217;s just that I&#8217;m curious whether o=
r not what I&#8217;m trying to achieve is possible.<o:p></o:p></span></p><p=
 class=3DMsoNormal><span lang=3DEN-US><o:p>&nbsp;</o:p></span></p><p class=
=3DMsoNormal><span lang=3DEN-US>&nbsp; Regards, Eric<o:p></o:p></span></p><=
p class=3DMsoNormal><span lang=3DEN-US><o:p>&nbsp;</o:p></span></p></div></=
body></html>=

------=_NextPart_000_0039_01CDDD03.58278DC0--

