Return-Path: <agarwal1975@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 716CC7FD27
	for <caml-list@sympa.inria.fr>; Fri,  6 Nov 2015 15:10:49 +0100 (CET)
IronPort-PHdr: 9a23:JeWY5hxvKeLmAl/XCy+O+j09IxM/srCxBDY+r6Qd0eIQIJqq85mqBkHD//Il1AaPBtWGraocw8Pt8IneGkU4qa6bt34DdJEeHzQksu4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2WVTerzWI4CIIHV2nbEwudrmzQtaapv/0/t7x0qWbWx9Piju5bOE6BzSNhiKViPMrh5B/IL060BrDrygAUe1XwWR1OQDbxE6ktY+YtaRu+CVIuv8n69UIEeCjJ/x5HvRkC2FsCGc469HxsgGHBS6O7XsVX2Fc2k5NAgPF5Rz+GIz2vyTmrO1l8CicIcDyC7szXGLxwb1sTUrBkycGLD5x2W7ekNN5iOoPqR2ovQN2x9eFP9y9O/93f6ebdtQfEzkSFv1NXjBMV9vvJ7AECPAMaKMB99Hw
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=agarwal1975@gmail.com; spf=Pass smtp.mailfrom=agarwal1975@gmail.com; spf=None smtp.helo=postmaster@mail-wm0-f47.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  agarwal1975@gmail.com) identity=pra; client-ip=74.125.82.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  agarwal1975@gmail.com designates 74.125.82.47 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wm0-f47.google.com) identity=helo;
  client-ip=74.125.82.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="postmaster@mail-wm0-f47.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0AEAQAYtDxWlC9SfUpegm6BIG8GhA+vd4wIIYVvAoEtBzsRAQEBAQEBAQEQAQEBAQcLCwkfMIIuggcBAQEDARIRBBkBCBMdAQMBCwYDAgsGBAEBKAMCAiIBEQEFAQsJCAYTFA6HdgEDCggNkziPTYExPjGLSIFqgnmGewoZJw1Wg2gBAQEBAQEBAQEBAQEBAQEBAQEBAQESAQUOij6BBoUICYJkgUQFjhGIMAeFHYgIgVtJli6CJRIkgRcRJoIwI4F7IDSFFAEBAQ
X-IPAS-Result: A0AEAQAYtDxWlC9SfUpegm6BIG8GhA+vd4wIIYVvAoEtBzsRAQEBAQEBAQEQAQEBAQcLCwkfMIIuggcBAQEDARIRBBkBCBMdAQMBCwYDAgsGBAEBKAMCAiIBEQEFAQsJCAYTFA6HdgEDCggNkziPTYExPjGLSIFqgnmGewoZJw1Wg2gBAQEBAQEBAQEBAQEBAQEBAQEBAQESAQUOij6BBoUICYJkgUQFjhGIMAeFHYgIgVtJli6CJRIkgRcRJoIwI4F7IDSFFAEBAQ
X-IronPort-AV: E=Sophos;i="5.20,252,1444687200"; 
   d="scan'208";a="186409909"
Received: from mail-wm0-f47.google.com ([74.125.82.47])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 06 Nov 2015 15:10:48 +0100
Received: by wmll128 with SMTP id l128so41840427wml.0
        for <caml-list@inria.fr>; Fri, 06 Nov 2015 06:10:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=9UDOenGeSbBT9uI/xuN2oYV00G+iig6Vx8YsIoflifc=;
        b=GlureVymeL1cQVSg1sV5yxDbG3E7BshpfB991/hB7PDM4QcK3cf2jOE+XorpwSFoe2
         3n2yIQYpBNXxZzJA8uSRAompZE1Cl4h6fYJVnSXUueExHL+BG9z+MZNki9kIeLdcizo0
         pvnawafvCHT/V57k6Xij4FkIBUrxuHSRw+l7WkizEgE8SboqM0aujr1e16+VPv6XAnSE
         cWD0uiBduAt3RR+V/rpV7DMPlYIidfw8BZXJSWVMv0GSv14Ib5xNd8DY2o4u2a0zYduG
         1es8JwKhncZrUe1bQy1dX974cjOOv3Ufsv3WvmYZCliK1pSLRK0IJEkSk6vT7r2H/iVn
         4AZQ==
X-Received: by 10.28.138.140 with SMTP id m134mr10361303wmd.74.1446819048222;
 Fri, 06 Nov 2015 06:10:48 -0800 (PST)
MIME-Version: 1.0
Received: by 10.27.82.65 with HTTP; Fri, 6 Nov 2015 06:10:28 -0800 (PST)
In-Reply-To: <0F7D3B1B3C4B894D824F5B822E3E5A172CE3E156@IRSMSX102.ger.corp.intel.com>
References: <0F7D3B1B3C4B894D824F5B822E3E5A172CE3E070@IRSMSX102.ger.corp.intel.com>
 <563C816B.7020604@inria.fr> <0F7D3B1B3C4B894D824F5B822E3E5A172CE3E0E1@IRSMSX102.ger.corp.intel.com>
 <CAPFanBF2dZdOKCdo4MZ9_Uss-kWmUMDiQVP-7+kEyG5SyusgTw@mail.gmail.com> <0F7D3B1B3C4B894D824F5B822E3E5A172CE3E156@IRSMSX102.ger.corp.intel.com>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Fri, 6 Nov 2015 09:10:28 -0500
Message-ID: <CAMu2m2J177ix0c-E61_-1Z8Gp6hrwjJWAXcnLa9VjmW_5d0O=g@mail.gmail.com>
To: "Soegtrop, Michael" <michael.soegtrop@intel.com>
Cc: Gabriel Scherer <gabriel.scherer@gmail.com>, "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a114436026c79770523dfcf26
Subject: Re: [Caml-list] Newbie comment on constructor syntax

--001a114436026c79770523dfcf26
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

You might be interested in:
https://github.com/janestreet/ppx_variants_conv

Example:

$ utop
utop # #require "ppx_deriving";;
utop # #require "ppx_variants_conv";;
utop # #require "variantslib";;

type t =3D A of int | C of int * int [@@deriving variants];;
type t =3D A of int | C of int * int
val c : int -> int -> t =3D <fun>
val a : int -> t =3D <fun>

module Variants :
  sig
    val c : (int -> int -> t) Variantslib.Variant.t
    val a : (int -> t) Variantslib.Variant.t
    val fold :
      init:'a ->
      a:('a -> (int -> t) Variantslib.Variant.t -> 'b) ->
      c:('b -> (int -> int -> t) Variantslib.Variant.t -> 'c) -> 'c
    val iter :
      a:((int -> t) Variantslib.Variant.t -> 'a) ->
      c:((int -> int -> t) Variantslib.Variant.t -> 'b) -> 'b
    val map :
      t ->
      a:((int -> t) Variantslib.Variant.t -> int -> 'a) ->
      c:((int -> int -> t) Variantslib.Variant.t -> int -> int -> 'a) -> 'a
    val descriptions : (string * int) list
  end

(I'm not quite sure why you have to do three #require statements manually.
Related to this <https://github.com/janestreet/ppx_sexp_conv/issues/1>.)


> Does everybody use camlp4/p5/ppx to customize the syntax to his liking

Note that the community is moving to ppx based syntax extensions, and away
from camlp4/5.

> 200k of code

Where do you see that much code? I only see 6000 lines of code.



On Fri, Nov 6, 2015 at 8:09 AM, Soegtrop, Michael <
michael.soegtrop@intel.com> wrote:

> Dear Gabriel,
>
>
>
> thanks for the link, an interesting idea and discussion! And I see that
> maybe I should come over to Paris to participate ;-) I would agree with
> Alain Frisch=E2=80=99s final comment that whenever a pattern synonym is u=
sed in the
> RHS, there should be an explicit binder. This would either solve the
> =E2=80=9Ctrouble=E2=80=9D case or make the similarity to (x, x) obvious.
>
>
>
> Best regards,
>
>
>
> Michael
>
>
>
> *From:* caml-list-request@inria.fr [mailto:caml-list-request@inria.fr] *On
> Behalf Of *Gabriel Scherer
> *Sent:* Friday, November 06, 2015 1:34 PM
> *To:* Soegtrop, Michael
> *Cc:* Francois Berenger; caml-list@inria.fr
> *Subject:* Re: [Caml-list] Newbie comment on constructor syntax
>
>
>
> The use of camlp{4,5} to change OCaml syntax has always had extremely low
> adoption, with some very specific exceptions (notably the lwt-support
> syntax of the Ocsigen project). I suspect that this is due to the fact th=
at
> integrating a new syntax extension to your project has historically caused
> more build-system and deployment trouble than people were willing to
> tolerate.
>
> ppx extensions are not designed to allow extending the OCaml syntax, and
> in particular I think they are not a good fit for what you are looking fo=
r.
> It is a large part of their appeal: by being less flexible, they are
> simpler and more robust.
>
> I personally believe that currified constructor syntax would be a better
> choice, and that using non-currified constructors is a historical mistake
> of SML/Caml. But I am also not convinced that efforts to change it today
> are worth the trouble, and prefer to concentrate on improving other parts
> of the OCaml ecosystem.
>
> Another thing that was touched by your comments is the usefulness of
> user-defined patterns (pattern synonyms). I have conflicted opinions on t=
he
> question of whether adding pattern synonyms would be a good thing, but
> described one aspect of a proposal that I like (but also highlights that
> the feature can be a source of implementation complexity) in
>   http://gallium.inria.fr/blog/pattern-synonyms-as-expressions/
>
> Intel Deutschland GmbH
> Registered Address: Am Campeon 10-12, 85579 Neubiberg, Germany
> Tel: +49 89 99 8853-0, www.intel.de
> Managing Directors: Christin Eisenschmid, Christian Lamprechter
> Chairperson of the Supervisory Board: Nicole Lau
> Registered Office: Munich
> Commercial Register: Amtsgericht Muenchen HRB 186928
>

--001a114436026c79770523dfcf26
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">You might be interested in:<div><a href=3D"https://github.=
com/janestreet/ppx_variants_conv">https://github.com/janestreet/ppx_variant=
s_conv</a><br></div><div><br></div><div>Example:</div><div><br></div><div>$=
 utop</div><div>utop # #require &quot;ppx_deriving&quot;;;<br></div><div>ut=
op # #require &quot;ppx_variants_conv&quot;;;<br></div><div>utop # #require=
 &quot;variantslib&quot;;;<br></div><div><br></div><div><div>type t =3D A o=
f int | C of int * int [@@deriving variants];;</div><div>type t =3D A of in=
t | C of int * int</div><div>val c : int -&gt; int -&gt; t =3D &lt;fun&gt;<=
/div><div>val a : int -&gt; t =3D &lt;fun&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0</div><div>module Variants :</div><div>=C2=A0 sig</div><di=
v>=C2=A0 =C2=A0 val c : (int -&gt; int -&gt; t) Variantslib.Variant.t</div>=
<div>=C2=A0 =C2=A0 val a : (int -&gt; t) Variantslib.Variant.t</div><div>=
=C2=A0 =C2=A0 val fold :</div><div>=C2=A0 =C2=A0 =C2=A0 init:&#39;a -&gt;</=
div><div>=C2=A0 =C2=A0 =C2=A0 a:(&#39;a -&gt; (int -&gt; t) Variantslib.Var=
iant.t -&gt; &#39;b) -&gt;</div><div>=C2=A0 =C2=A0 =C2=A0 c:(&#39;b -&gt; (=
int -&gt; int -&gt; t) Variantslib.Variant.t -&gt; &#39;c) -&gt; &#39;c</di=
v><div>=C2=A0 =C2=A0 val iter :</div><div>=C2=A0 =C2=A0 =C2=A0 a:((int -&gt=
; t) Variantslib.Variant.t -&gt; &#39;a) -&gt;</div><div>=C2=A0 =C2=A0 =C2=
=A0 c:((int -&gt; int -&gt; t) Variantslib.Variant.t -&gt; &#39;b) -&gt; &#=
39;b</div><div>=C2=A0 =C2=A0 val map :</div><div>=C2=A0 =C2=A0 =C2=A0 t -&g=
t;</div><div>=C2=A0 =C2=A0 =C2=A0 a:((int -&gt; t) Variantslib.Variant.t -&=
gt; int -&gt; &#39;a) -&gt;</div><div>=C2=A0 =C2=A0 =C2=A0 c:((int -&gt; in=
t -&gt; t) Variantslib.Variant.t -&gt; int -&gt; int -&gt; &#39;a) -&gt; &#=
39;a</div><div>=C2=A0 =C2=A0 val descriptions : (string * int) list</div><d=
iv>=C2=A0 end</div></div><div><br></div><div>(I&#39;m not quite sure why yo=
u have to do three #require statements manually. Related to=C2=A0<a href=3D=
"https://github.com/janestreet/ppx_sexp_conv/issues/1">this</a>.)</div><div=
><br></div><div><br></div><div>&gt;=C2=A0<span style=3D"font-size:12.8px">D=
oes everybody use camlp4/p5/ppx to customize the syntax to his liking</span=
></div><div><span style=3D"font-size:12.8px"><br></span></div><div><span st=
yle=3D"font-size:12.8px">Note that the community is moving to ppx based syn=
tax extensions, and away from camlp4/5.</span></div><div><span style=3D"fon=
t-size:12.8px"><br></span></div><div><span style=3D"font-size:12.8px">&gt;=
=C2=A0</span><span style=3D"font-size:12.8px">200k of code</span></div><div=
><span style=3D"font-size:12.8px"><br></span></div><div><span style=3D"font=
-size:12.8px">Where do you see that much code? I only see 6000 lines of cod=
e.</span></div><div><span style=3D"font-size:12.8px"><br></span></div><div>=
<br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">O=
n Fri, Nov 6, 2015 at 8:09 AM, Soegtrop, Michael <span dir=3D"ltr">&lt;<a h=
ref=3D"mailto:michael.soegtrop@intel.com" target=3D"_blank">michael.soegtro=
p@intel.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">





<div lang=3D"EN-US" link=3D"blue" vlink=3D"purple">
<div>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d">Dear Gabriel,<u></u><u></=
u></span></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d"><u></u>=C2=A0<u></u></spa=
n></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d">thanks for the link, an i=
nteresting idea and discussion! And I see that maybe I should come over to =
Paris to participate ;-) I would agree with Alain Frisch=E2=80=99s
 final comment that whenever a pattern synonym is used in the RHS, there sh=
ould be an explicit binder. This would either solve the =E2=80=9Ctrouble=E2=
=80=9D case or make the similarity to (x, x) obvious.<u></u><u></u></span><=
/p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d"><u></u>=C2=A0<u></u></spa=
n></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d">Best regards,<u></u><u></=
u></span></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d"><u></u>=C2=A0<u></u></spa=
n></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d">Michael<u></u><u></u></sp=
an></p>
<p class=3D"MsoNormal"><span style=3D"font-size:11.0pt;font-family:&quot;Ca=
libri&quot;,&quot;sans-serif&quot;;color:#1f497d"><u></u>=C2=A0<u></u></spa=
n></p>
<div style=3D"border:none;border-left:solid blue 1.5pt;padding:0in 0in 0in =
4.0pt">
<div>
<div style=3D"border:none;border-top:solid #b5c4df 1.0pt;padding:3.0pt 0in =
0in 0in">
<p class=3D"MsoNormal"><b><span style=3D"font-size:10.0pt;font-family:&quot=
;Tahoma&quot;,&quot;sans-serif&quot;">From:</span></b><span style=3D"font-s=
ize:10.0pt;font-family:&quot;Tahoma&quot;,&quot;sans-serif&quot;"> <a href=
=3D"mailto:caml-list-request@inria.fr" target=3D"_blank">caml-list-request@=
inria.fr</a> [mailto:<a href=3D"mailto:caml-list-request@inria.fr" target=
=3D"_blank">caml-list-request@inria.fr</a>]
<b>On Behalf Of </b>Gabriel Scherer<br>
<b>Sent:</b> Friday, November 06, 2015 1:34 PM<br>
<b>To:</b> Soegtrop, Michael<br>
<b>Cc:</b> Francois Berenger; <a href=3D"mailto:caml-list@inria.fr" target=
=3D"_blank">caml-list@inria.fr</a><br>
<b>Subject:</b> Re: [Caml-list] Newbie comment on constructor syntax<u></u>=
<u></u></span></p>
</div>
</div><span class=3D"">
<p class=3D"MsoNormal"><u></u>=C2=A0<u></u></p>
<div>
<div>
<div>
<div>
<p class=3D"MsoNormal" style=3D"margin-bottom:12.0pt">The use of camlp{4,5}=
 to change OCaml syntax has always had extremely low adoption, with some ve=
ry specific exceptions (notably the lwt-support syntax of the Ocsigen proje=
ct). I suspect that this is due to the
 fact that integrating a new syntax extension to your project has historica=
lly caused more build-system and deployment trouble than people were willin=
g to tolerate.<u></u><u></u></p>
</div>
<p class=3D"MsoNormal" style=3D"margin-bottom:12.0pt">ppx extensions are no=
t designed to allow extending the OCaml syntax, and in particular I think t=
hey are not a good fit for what you are looking for. It is a large part of =
their appeal: by being less flexible,
 they are simpler and more robust.<u></u><u></u></p>
</div>
<p class=3D"MsoNormal" style=3D"margin-bottom:12.0pt">I personally believe =
that currified constructor syntax would be a better choice, and that using =
non-currified constructors is a historical mistake of SML/Caml. But I am al=
so not convinced that efforts to change
 it today are worth the trouble, and prefer to concentrate on improving oth=
er parts of the OCaml ecosystem.<u></u><u></u></p>
</div>
<p class=3D"MsoNormal">Another thing that was touched by your comments is t=
he usefulness of user-defined patterns (pattern synonyms). I have conflicte=
d opinions on the question of whether adding pattern synonyms would be a go=
od thing, but described one aspect
 of a proposal that I like (but also highlights that the feature can be a s=
ource of implementation complexity) in<br>
=C2=A0 <a href=3D"http://gallium.inria.fr/blog/pattern-synonyms-as-expressi=
ons/" target=3D"_blank">http://gallium.inria.fr/blog/pattern-synonyms-as-ex=
pressions/</a><span style=3D"color:#1f497d"><u></u><u></u></span></p>
</div>
</span></div>
</div>
<p><font style=3D"font-size:9px">Intel Deutschland GmbH<span class=3D""><br>
Registered Address: Am Campeon 10-12, 85579 Neubiberg, Germany<br>
Tel: +49 89 99 8853-0, <a href=3D"http://www.intel.de" target=3D"_blank">ww=
w.intel.de</a><br>
Managing Directors: Christin Eisenschmid, Christian Lamprechter<br>
Chairperson of the Supervisory Board: Nicole Lau<br>
Registered Office: Munich<br>
Commercial Register: Amtsgericht Muenchen HRB 186928</span></font><br>
</p>
</div>

</blockquote></div><br></div>

--001a114436026c79770523dfcf26--
