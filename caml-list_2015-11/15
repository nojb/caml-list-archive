Return-Path: <agarwal1975@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 9BB407FD1E
	for <caml-list@sympa.inria.fr>; Thu,  5 Nov 2015 04:24:48 +0100 (CET)
IronPort-PHdr: 9a23:BdGbYBQwF0aY2IxmMmwRvC/vCdpsv+yvbD5Q0YIujvd0So/mwa64bRWN2/xhgRfzUJnB7Loc0qyN4/2mAjVLvM3JmUtBWaIPfidNsd8RkQ0kDZzNImzAB9muURYHGt9fXkRu5XCxPBsdMs//Y1rPvi/6tmZKSV3BPAZ4bt74BpTVx5zukbviptuIOk4V33KUWvBbElaflU3prM4YgI9veO4a6yDihT92QdlQ3n5iPlmJnhzxtY+a9Z9n9DlM6bp6r5YTGY2zRakzTKRZATI6KCh1oZSz7ViQBTeIs1kVWXwLnwEALAHf9hD1Q5q55iTzrPB81zSXFcj/UbByXz2t6LZiDQKugSxBNSZvo0/NjcklpblboQmh7zVwypTLaYXdYPNxd7nCdNdDFDUcdslUXi1FRIi7at1cXKI6Ie9Eotyl9BM1phykCFzpXbu3xw==
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=agarwal1975@gmail.com; spf=Pass smtp.mailfrom=agarwal1975@gmail.com; spf=None smtp.helo=postmaster@mail-wm0-f51.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  agarwal1975@gmail.com) identity=pra; client-ip=74.125.82.51;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  agarwal1975@gmail.com designates 74.125.82.51 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.51;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="agarwal1975@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wm0-f51.google.com) identity=helo;
  client-ip=74.125.82.51;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="agarwal1975@gmail.com";
  x-sender="postmaster@mail-wm0-f51.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CgAQCjyzpWlDNSfUpeDoNMNG8GrGSRIYFeGYV5AoE6BzoSAQEBAQEBAQEQAQEBAQcLCwkfMIIugggBAQQSEQQZARsdAQMBCwYFBAcNKgICIQEBEQEFARwGEyKHdgEDEqMegTE+MYtIgWqCeYZ8ChknDVaDZgEBAQEBBQEBAQEBAQEWAQUOi0SCU4UigUMFjhGIMAeFHYYSgXSUb4YFEiSBFxEXAoI9I4EfXCA0hR8BAQE
X-IPAS-Result: A0CgAQCjyzpWlDNSfUpeDoNMNG8GrGSRIYFeGYV5AoE6BzoSAQEBAQEBAQEQAQEBAQcLCwkfMIIugggBAQQSEQQZARsdAQMBCwYFBAcNKgICIQEBEQEFARwGEyKHdgEDEqMegTE+MYtIgWqCeYZ8ChknDVaDZgEBAQEBBQEBAQEBAQEWAQUOi0SCU4UigUMFjhGIMAeFHYYSgXSUb4YFEiSBFxEXAoI9I4EfXCA0hR8BAQE
X-IronPort-AV: E=Sophos;i="5.20,246,1444687200"; 
   d="scan'208";a="152693361"
Received: from mail-wm0-f51.google.com ([74.125.82.51])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 05 Nov 2015 04:24:22 +0100
Received: by wmeg8 with SMTP id g8so2881007wme.0
        for <caml-list@inria.fr>; Wed, 04 Nov 2015 19:24:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=qLtTY0YWD63B+yvqAZfKf4XUw1alRTWCZ8C2m64RxrA=;
        b=H3L4g1ouw5mxo3E6BRHZkb68qWdrYgirlLN6JDKdoxtn1Iz4UcuGMAGUTcw8onkQVc
         Mw8FbfLToW5Ns3agsb3iodiRLv9vSC72iweO1MSyn43SoE1glbpNKfe/3fwfUN61EUJd
         HfUk5tK38HwC/1GoipbuzwgNM/1mrVU3l/ItmR/nkwRCYPJpKVQ/Pwewdg1L/wSEQBE0
         IBWzf2tsNc80pPonEswyX/q+lqDJ6R4jKhxZr055cTqVjrM4HyLKa70QPIAGsnCgWSSc
         El7nD07wAqr97dGR2XugYO6E7uD4rF5y4VsGxRXbr4V/80YCUJzS5Z/y9lWnfVtrwgI5
         WKwA==
X-Received: by 10.28.15.136 with SMTP id 130mr655495wmp.36.1446693861842; Wed,
 04 Nov 2015 19:24:21 -0800 (PST)
MIME-Version: 1.0
Received: by 10.27.82.65 with HTTP; Wed, 4 Nov 2015 19:24:02 -0800 (PST)
In-Reply-To: <CAMu2m2JHbGxBpJrD3ifrF5VC6u3Jckf4tF1e5DBLw-XGe6rhww@mail.gmail.com>
References: <CAMu2m2L4jA3KeXQoTva=8UGYvsPHZ6FWEM=am3GkASGgkGhvzw@mail.gmail.com>
 <AC295BE4-9B35-41CA-9231-51FBDB92E34B@math.nagoya-u.ac.jp> <CAMu2m2JHbGxBpJrD3ifrF5VC6u3Jckf4tF1e5DBLw-XGe6rhww@mail.gmail.com>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Wed, 4 Nov 2015 22:24:02 -0500
Message-ID: <CAMu2m2JAHtSZx=nrKz2JLUPq+c4is4ChaAPKiSTp8RXHnLa0xw@mail.gmail.com>
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: OCaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1145b006bc04df0523c2a9c5
Subject: Re: [Caml-list] substituting recursive types inside a signature

--001a1145b006bc04df0523c2a9c5
Content-Type: text/plain; charset=UTF-8

I pasted the wrong code. Slightly less typing is possible by doing "include
M" in N's implementation.

On Wed, Nov 4, 2015 at 10:22 PM, Ashish Agarwal <agarwal1975@gmail.com>
wrote:

> On Wed, Nov 4, 2015 at 9:10 PM, Jacques Garrigue <
> garrigue@math.nagoya-u.ac.jp> wrote:
>
> the code you wrote is exactly equivalent to:
>>
>>    include (((module type of M) with type t = M.t) with type u = M.u)
>>
>
> And the parentheses here don't matter right, so this is the same as:
>
> include module type of M
>     with type t = M.t
>     with type u = M.u
>
> So then why do we have the "and" syntax at all?
>
> Well, I can use manifest types to work around this, at the expense of some
> manual typing. Here's what works:
>
> $ cat foo.ml
> module M = struct
>   type t = A | B of u
>   and u = C of t
> end
>
> module N : sig
>   type t = M.t = A | B of u
>   and u = M.u = C of t
>   val f : t -> t
> end = struct
>   type t = M.t = A | B of u
>   and u = M.u = C of t
>   let f x = x
> end
>
> let x : M.t = M.A
> let _ = N.f x
>
>

--001a1145b006bc04df0523c2a9c5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I pasted the wrong code. Slightly less typing is possible =
by doing &quot;include M&quot; in N&#39;s implementation.</div><div class=
=3D"gmail_extra"><br><div class=3D"gmail_quote">On Wed, Nov 4, 2015 at 10:2=
2 PM, Ashish Agarwal <span dir=3D"ltr">&lt;<a href=3D"mailto:agarwal1975@gm=
ail.com" target=3D"_blank">agarwal1975@gmail.com</a>&gt;</span> wrote:<br><=
blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
 #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra"><=
div class=3D"gmail_quote"><span class=3D"">On Wed, Nov 4, 2015 at 9:10 PM, =
Jacques Garrigue <span dir=3D"ltr">&lt;<a href=3D"mailto:garrigue@math.nago=
ya-u.ac.jp" target=3D"_blank">garrigue@math.nagoya-u.ac.jp</a>&gt;</span> w=
rote:<br><div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0=
px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);b=
order-left-style:solid;padding-left:1ex">the code you wrote is exactly equi=
valent to:<br>
<br>
=C2=A0 =C2=A0include (((module type of M) with type t =3D M.t) with type u =
=3D M.u)<br></blockquote><div><br></div></span><div>And the parentheses her=
e don&#39;t matter right, so this is the same as:</div><div><br></div><div>=
<span class=3D""><div>include module type of M</div><div>=C2=A0 =C2=A0 with=
 type t =3D M.t</div></span><div>=C2=A0 =C2=A0 with type u =3D M.u</div></d=
iv><div><br></div><div>So then why do we have the &quot;and&quot; syntax at=
 all?</div><div><br></div><div>Well, I can use manifest types to work aroun=
d this, at the expense of some manual typing. Here&#39;s what works:</div><=
div><br></div><div><span class=3D""><div>$ cat <a href=3D"http://foo.ml" ta=
rget=3D"_blank">foo.ml</a></div><div>module M =3D struct</div><div>=C2=A0 t=
ype t =3D A | B of u</div><div>=C2=A0 and u =3D C of t</div><div>end</div><=
div><br></div></span><div>module N : sig</div><div>=C2=A0 type t =3D M.t =
=3D A | B of u</div><div>=C2=A0 and u =3D M.u =3D C of t</div><div>=C2=A0 v=
al f : t -&gt; t</div><div>end =3D struct</div><div>=C2=A0 type t =3D M.t =
=3D A | B of u</div><div>=C2=A0 and u =3D M.u =3D C of t</div><div>=C2=A0 l=
et f x =3D x</div><div>end</div><div><br></div><div>let x : M.t =3D M.A</di=
v><div>let _ =3D N.f x</div></div><div><br></div></div></div></div>
</blockquote></div><br></div>

--001a1145b006bc04df0523c2a9c5--
