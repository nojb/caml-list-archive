Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA05604 for caml-redistribution; Tue, 6 May 1997 11:32:27 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA21108 for <caml-list@pauillac.inria.fr>; Wed, 30 Apr 1997 14:42:31 +0200 (MET DST)
Received: from fermi.cnam.fr (fermi.cnam.fr [163.173.128.60]) by nez-perce.inria.fr (8.8.5/8.7.3) with ESMTP id OAA13849 for <caml-list@inria.fr>; Wed, 30 Apr 1997 14:42:29 +0200 (MET DST)
Received: from localhost (localhost [127.0.0.1])
   by fermi.cnam.fr (8.8.5/jpm-961216)  with SMTP id OAA00827
   ; Wed, 30 Apr 1997 14:42:07 +0200 (MET DST)
From: Didier Rousseau <Didier.Rousseau@cnam.fr>
Message-Id: <199704301242.OAA00827@fermi.cnam.fr>
X-Authentication-Warning: fermi.cnam.fr: localhost [127.0.0.1] didn't use HELO protocol
To: luther@phivolcs.dost.gov.ph
cc: Didier Rousseau     <Didier.Rousseau@cnam.fr>,
        Caml List <caml-list@inria.fr>
Subject: Re: types recursifs ...  
In-reply-to: Your message of "Wed, 30 Apr 97 10:50:23 +0800."
             <3366B36F.32C5@phivolcs.dost.gov.ph> 
Date: Wed, 30 Apr 97 14:42:07 +0200
X-Mts: smtp
Sender: weis


Sven LUTHER wrote:

> ...
>	si ('a t as 'a) designe un type recursif alors 'a et 'a t devrait etre
> les memes types
> 
> 	et donc term t devient (term t as term) et donc term t et term sont les
> memes types.
> ...

Prenons un exemple :
le type predefini, list, est equivalent a cette definition :
	type 'a list = [] | :: of 'a*'a list

si l'on utilise ce type avec des "int" : int list
il est claire que "int" et "int list" sont deux types differents !!


> ...
> est-ce totalement errone, ai-je mal compris le manuel, ou est-ce
> seulement dans la 
> definition de la fonction viewt que je m'y suis mal pris.
> ...


le probleme est d'eviter que le typeur deduise de la focntion "viewt" que "l" et "r" de 
Arrow, sont du meme type que l'arg de "viewt" 
par consequent vous ne pouvez pas apeller "viewt" dans le cas Arrow, mais vous devez 
utiliser une autre fonction de type  'a->unit. 2 solutions :

	- soit ajouter un arg a "viewt" :
		let viewt f = function
			| Int -> print_string "Int"
			| Bool -> print_string "Bool"
			| Arrow (l, r) -> f r; print_string " -> "; f l


	- soit ajouter un arg a Arrow :
		type 'a t = Int | Bool | Arrow of ('a->unit) * 'a * 'a

		let viewt = function
			| Int -> print_string "Int"
			| Bool -> print_string "Bool"
			| Arrow (f, l, r) -> f r; print_string " -> "; f l

Prenons cette derniere solution, ce qui donne finalement :
	type 'a t = Int | Bool | Arrow of ('a->unit) * 'a * 'a

	let viewt = function
		| Int -> print_string "Int"
		| Bool -> print_string "Bool"
		| Arrow (f, l, r) -> f r; print_string " -> "; f l

	type term =
		| V of int
		| S of term t
		| Abs of term

	let rec view = function
		| V (x) -> print_string "V_"; print_int x
		| S (s) -> viewt s
		| Abs (l) -> print_string "\\."; view l

	let test = Abs (S (Arrow (view, V 1, S Int)))


ou un peu plus general :
	type 'a t = Int | Bool | Arrow of ('a->unit) * 'a * 'a

	let viewt = function
		| Int -> print_string "Int"
		| Bool -> print_string "Bool"
		| Arrow (f, l, r) -> f r; print_string " -> "; f l

	type 'a term =
		| V of int
		| S of 'a t
		| Abs of 'a term

	let rec view = function
		| V (x) -> print_string "V_"; print_int x
		| S (s) -> viewt s
		| Abs (l) -> print_string "\\."; view l

	let test1 = Abs (S (Arrow (view, V 1, S Int)))
	let test2 = Abs (S (Arrow (viewt, Int,Bool)))
------------------------------------------------------------

Didier Rousseau



