Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA07847 for caml-redistribution; Wed, 14 May 1997 08:48:29 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA07794 for <caml-list@pauillac.inria.fr>; Wed, 14 May 1997 08:44:10 +0200 (MET DST)
Received: from phivolcs.dost.gov.ph (root@[165.220.46.65]) by nez-perce.inria.fr (8.8.5/8.7.3) with ESMTP id IAA19112 for <caml-list@inria.fr>; Wed, 14 May 1997 08:43:11 +0200 (MET DST)
Received: from Iliana (luther@iliana.46.220.165.in-addr.arpa [165.220.46.17]) by phivolcs.dost.gov.ph (8.7.5/8.7.3) with SMTP id OAA00743; Wed, 14 May 1997 14:12:33 +0800
Message-ID: <33795E2D.7993B0CA@phivolcs.dost.gov.ph>
Date: Wed, 14 May 1997 14:39:41 +0800
From: Sven LUTHER <luther@phivolcs.dost.gov.ph>
X-Mailer: Mozilla 3.0Gold (X11; I; Linux 2.0.30 i586)
MIME-Version: 1.0
To: Didier Rousseau <Didier.Rousseau@cnam.fr>
CC: Caml List <caml-list@inria.fr>
Subject: Re: types recursifs ...
References: <199704301242.OAA00827@fermi.cnam.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis

Didier Rousseau wrote:
> 
> Sven LUTHER wrote:
> 
> > ...
> >       si ('a t as 'a) designe un type recursif alors 'a et 'a t devrait etre
> > les memes types
> >
> >       et donc term t devient (term t as term) et donc term t et term sont les
> > memes types.
> > ...
> 
> Prenons un exemple :
> le type predefini, list, est equivalent a cette definition :
>         type 'a list = [] | :: of 'a*'a list
> 
> si l'on utilise ce type avec des "int" : int list
> il est claire que "int" et "int list" sont deux types differents !!
> 

En fait ce que je voulais c'est bel et bien definir un type recursif,
c'est a dire du type :

'a t as 'a, ou peut etre 'a list as 'a.

cela est-il possible en Caml ?

d'apres la discution sur ce sujet, je ne pense pas que ce soit possible.

y a-t-il un autre mecanisme pour etendre un type, voir un module, un peu
a la facon
de l'heritage pour les objets, quelque choses qui permettrait d'etendre
un type ou un
module, eventuellement dynamiquement ?

Sven LUTHER



