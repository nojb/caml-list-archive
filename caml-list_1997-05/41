Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA06920 for caml-redistribution; Tue, 20 May 1997 16:34:28 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA03442 for <caml-list@pauillac.inria.fr>; Tue, 20 May 1997 14:15:32 +0200 (MET DST)
Received: from madiran.inria.fr (madiran.inria.fr [128.93.8.77]) by concorde.inria.fr (8.8.5/8.7.3) with ESMTP id OAA16932; Tue, 20 May 1997 14:15:03 +0200 (MET DST)
Received: from madiran.inria.fr (localhost.inria.fr [127.0.0.1]) by madiran.inria.fr (8.7.4/8.6.6) with ESMTP id OAA15792; Tue, 20 May 1997 14:14:57 +0200
Message-Id: <199705201214.OAA15792@madiran.inria.fr>
X-Mailer: exmh version 1.6.4 10/10/95
From: Francois Rouaix <Francois.Rouaix@inria.fr>
To: Lyn A Headley <laheadle@midway.uchicago.edu>
cc: caml-list@inria.fr
Subject: Re: functors vs classes 
In-reply-to: Your message of "Wed, 14 May 1997 17:01:48 CDT."
             <199705142201.RAA04549@kimbark.uchicago.edu> 
Reply-To: Francois.Rouaix@inria.fr
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Tue, 20 May 1997 14:14:56 +0200
Sender: weis


> In the caml programming language we are offered an (unprecedented) 
> choice between two varieties of modular polymorphism, classes and 
> functors.  Each offers distinct advantages, and yet in a way it seems 
> that each supports a different _style_ of programming.  In my limited 
> experience it seems that most people opt to focus on functors for 
> their modularization needs, and make little or no use of the 
> objective stuff.  How do others see this? 

A historical note:
Objects are pretty much orthogonal to the rest of the system, and were
only very recently made available in Caml. Functors are a bit older, and
also much more familiar in the ML community.

AFAIK, I use both functors and objects. I find objects most useful when
manipulating a (possibly complex) state through a set of (possibly recursive)
functions. This situation arises very frequently in the kind of code I'm
writing : lots of IO and threads.

Also, I got the impression that functors and inheritance are much more
useful when designing and writing a library than when writing an application.


Mes deux centimes,
--f






