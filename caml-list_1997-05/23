Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA10142 for caml-redistribution; Mon, 12 May 1997 20:12:32 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA22783 for <caml-list@pauillac.inria.fr>; Mon, 12 May 1997 10:30:28 +0200 (MET DST)
Received: from mail.rapidsite.net (mail.rapidsite.net [207.158.192.62]) by nez-perce.inria.fr (8.8.5/8.7.3) with SMTP id KAA12075 for <caml-list@inria.fr>; Mon, 12 May 1997 10:30:26 +0200 (MET DST)
Received: from rivalnet.com by mail.rapidsite.net via SMTP (950413.SGI.8.6.12/951211.SGI)
	for <caml-list@inria.fr> id EAA28166; Mon, 12 May 1997 04:30:18 -0400
Received: from cc.swm [192.168.0.2] by rivalnet.com [192.168.0.1] with SMTP (MDaemon.v2.1.rB.b1.32-R) for <caml-list@inria.fr>; Mon, 12 May 97 10:20:39 +0100
Received: by cc.swm with Microsoft Mail
	id <01BC5EBE.23367560@cc.swm>; Mon, 12 May 1997 10:20:38 +0200
Message-ID: <01BC5EBE.23367560@cc.swm>
From: Carsten Clasohm <clasohm@rivalnet.com>
To: "'Lyn A Headley'" <laheadle@midway.uchicago.edu>,
        "caml-list@inria.fr"
  <caml-list@inria.fr>
Subject: RE: ocaml needs users: native code for windows?
Date: Mon, 12 May 1997 10:20:37 +0200
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
X-MDMail-Server: MDaemon v2.1 rB b1 32-R
X-MDaemon-Deliver-To: caml-list@inria.fr
Sender: weis

> Given those goals, it seems that one step in the right
> direction would involve porting ocamlopt to Intel Win32 and binding
> the frightful but popular Windows API to it, thus allowing people to
> produce Windows binaries without leaving the comforts of ocaml.

I use OCaml for a commercial Win32 project and am quite happy with the
current integration of C(++) and OCaml. The GUI tasks in the program are
carried out by C++ classes, while the 'real' computations are done by
OCaml code.

IMHO it's best to implement the GUI part with C++ and the Microsoft
Foundation Classes (MFC). That's because

1. Microsoft VisualC++ offers a useable set of tools for designing the
GUI and linking code to it.
2. The Win32 API is encapsulated by an extensive class hierarchy (the
MFC) that offers a good representation of the GUI.
3. The GUI code's complexity is relatively low, i.e. I'm comfortable
doing it using C++.
4. Interfacing C++ and OCaml is quite easy if one uses C++ classes that
encapsulate the OCaml values and functions.


> Does anyone else think this is a goal worth pursuing?

Porting the MFC might be worth it. But then, it's a lot of work and I
don't think it would generate enough benefits.


Carsten






