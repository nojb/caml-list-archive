Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA23439 for caml-redistribution; Sat, 10 May 1997 15:57:30 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id HAA02713 for <caml-list@pauillac.inria.fr>; Fri, 9 May 1997 07:55:47 +0200 (MET DST)
Received: from enst.enst.fr (RwEk7CobMIsIjkXPhdGvhZwv9QJLrkaH@enst.enst.fr [137.194.2.16]) by nez-perce.inria.fr (8.8.5/8.7.3) with ESMTP id HAA14624 for <caml-list@inria.fr>; Fri, 9 May 1997 07:55:44 +0200 (MET DST)
Received: from liszt.enst.fr (liszt.enst.fr [137.194.4.32])
          by enst.enst.fr (8.8.4/8.8.4) with SMTP
   id HAA12053; Fri, 9 May 1997 07:55:27 +0200 (MET DST)
Received: from Montchapet (remote05.ac-dijon.fr) by liszt.enst.fr (MX V4.2 AXP)
          with SMTP; Fri, 09 May 1997 07:54:37 MET_DST
Message-ID: <3372BCAC.56088BFC@cal.enst.fr>
Date: Fri, 09 May 1997 07:57:00 +0200
From: Michel Quercia <quercia@cal.enst.fr>
X-Mailer: Mozilla 3.0 (X11; I; Linux 2.0.27 i486)
MIME-Version: 1.0
To: Christian Lindig <lindig@ips.cs.tu-bs.de>
CC: caml-list@inria.fr
Subject: Re: arity of type constructors
References: <199705071316.PAA14881@infbsst5.ips.cs.tu-bs.de>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis

Christian Lindig wrote:
> 
>         Objective Caml version 1.05
>         # type t = T of int * int;;
>         type t = | T of int * int
>         # let x = (3,4);;
>         val x : int * int = 3, 4
>         # T x;;
>         The constructor T expects 2 argument(s), but is here applied
>         to 1 argument(s)
>         # T (3,4);;
>         - : t = T (3, 4)
> 
> Applying T to x does not work, but applying it to (3,4) does. Why is
> the pair (3,4) counted as 2 arguments?
> 

here is the trick :

        Objective Caml version 1.05

# type t = T of int * int;;
type t = | T of int * int
# T(3,4);;
- : t = T (3, 4)
# let x = (3,4) in T(x);;
The constructor T expects 2 argument(s), but is here applied to 1
argument(s)
# type u = U of (int * int);;
type u = | U of (int * int)
# let x = (3,4) in U(x);;    
- : u = U (3, 4)
# 


-- 
Michel Quercia
Lycee Carnot  16 bd Thiers  21000 Dijon
mailto:quercia@cal.enst.fr



