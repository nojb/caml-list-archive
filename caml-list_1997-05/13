Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA28628 for caml-redistribution; Wed, 7 May 1997 11:20:02 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA28539 for <caml-list@pauillac.inria.fr>; Wed, 7 May 1997 11:18:49 +0200 (MET DST)
Received: from madiran.inria.fr (madiran.inria.fr [128.93.8.77]) by concorde.inria.fr (8.8.5/8.7.3) with ESMTP id LAA00425; Wed, 7 May 1997 11:18:40 +0200 (MET DST)
Received: from madiran.inria.fr (localhost.inria.fr [127.0.0.1]) by madiran.inria.fr (8.7.4/8.6.6) with ESMTP id LAA09046; Wed, 7 May 1997 11:18:36 +0200
Message-Id: <199705070918.LAA09046@madiran.inria.fr>
X-Mailer: exmh version 1.6.4 10/10/95
From: Francois Rouaix <Francois.Rouaix@inria.fr>
To: Lyn A Headley <laheadle@midway.uchicago.edu>
cc: caml-list@inria.fr
Subject: Re: functors in batch compilation 
In-reply-to: Your message of "Mon, 05 May 1997 18:51:26 CDT."
             <199705052351.SAA25987@kimbark.uchicago.edu> 
Reply-To: Francois.Rouaix@inria.fr
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Wed, 07 May 1997 11:18:36 +0200
Sender: weis

> but does this mean one is forced to declare a functorized struct
> in a signature as well as in the implementation file?

You are never forced to write .mli files, but it's good practice, both
for documentation purposes and for better separate compilation performance.

>  It would
> seem to make more sense for the compiler to realize that it was
> dealing with an implementation of a single module described in the
> implementation file and just allow the signature to describe the
> values of the (functorized) module that it wants to export.  This
> would avoid needing two names per module, one for the file and another
> for the module.  
When defining functors, there are usually two components in the implementation
file. One is the "module type" for the functor argument, the other is
the functor itself.

> I realize I might not be making sense but basically I don't understand
> how to compile a functorized module into a file, and I wanted to prove
> that I at least thought about it, thereby lessening the impression
> that I am a punk kid who don't know nothin.
Have you checked the library ? Several modules contain functors (e.g. Set
or Map).

--f





