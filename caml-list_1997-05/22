Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA20400 for caml-redistribution; Mon, 12 May 1997 09:18:17 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA07133 for <caml-list@pauillac.inria.fr>; Fri, 9 May 1997 13:53:18 +0200 (MET DST)
Received: from tobago.inria.fr (tobago.inria.fr [128.93.8.21]) by concorde.inria.fr (8.8.5/8.7.3) with ESMTP id NAA27953 for <caml-list@inria.fr>; Fri, 9 May 1997 13:53:16 +0200 (MET DST)
Received: (from doligez@localhost) by tobago.inria.fr (8.6.10/8.6.6) id NAA23508 for caml-list@inria.fr; Fri, 9 May 1997 13:53:15 +0200
Date: Fri, 9 May 1997 13:53:15 +0200
From: Damien Doligez <Damien.Doligez@inria.fr>
Message-Id: <199705091153.NAA23508@tobago.inria.fr>
To: caml-list@inria.fr
Subject: Re:  arity of type constructors
Sender: weis

>Applying T to x does not work, but applying it to (3,4) does. Why is
>the pair (3,4) counted as 2 arguments?

Constructors have an arity.  Here, T expects two arguments.  When you
write T(3,4), you're not applying T to a pair, but applying T to two
arguments, 3 and 4.  It happens that the syntax looks like a pair, but
this is more a misfeature of the syntax than anything else.

The alternative is to make all constructors take one argument, and use
a pair as argument when you want two arguments.  This approach is
harder to implement and it makes it possible to write horribly
obfuscated code.  Moreover, the pair has to be something special.  In
the current system, the pair is just another binary constructor.

We have tried both approaches in Caml Light, and I really think the
current one is the right one.


En Francais:

Les constructeurs ont une arite.  Quand on ecrit T(3,4), on n'applique
pas T a la paire (3,4), comme la syntaxe pourrait le faire croire,
mais on applique T a deux arguments, 3 et 4.

-- Damien




