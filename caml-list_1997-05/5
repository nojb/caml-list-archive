Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA02406 for caml-redistribution; Tue, 6 May 1997 09:38:13 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA26911 for <caml-list@pauillac.inria.fr>; Tue, 6 May 1997 01:53:37 +0200 (MET DST)
Received: from haven.uchicago.edu (root@haven.uchicago.edu [128.135.12.3]) by nez-perce.inria.fr (8.8.5/8.7.3) with ESMTP id BAA05080 for <caml-list@inria.fr>; Tue, 6 May 1997 01:53:33 +0200 (MET DST)
Received: from midway.uchicago.edu (root@midway.uchicago.edu [128.135.12.12])
	by haven.uchicago.edu (8.8.5/8.8.5) with ESMTP id SAA04944
	for <caml-list@inria.fr>; Mon, 5 May 1997 18:53:29 -0500 (CDT)
Received: from kimbark.uchicago.edu (root@kimbark.uchicago.edu [128.135.12.52]) by midway.uchicago.edu (8.8.5/8.8.3) with ESMTP id SAA23836 for <caml-list@inria.fr>; Mon, 5 May 1997 18:51:30 -0500 (CDT)
Received: from kimbark.uchicago.edu (4208@localhost [127.0.0.1]) by kimbark.uchicago.edu (8.8.5/8.8.3) with ESMTP id SAA25987 for <caml-list@inria.fr>; Mon, 5 May 1997 18:51:28 -0500 (CDT)
Message-Id: <199705052351.SAA25987@kimbark.uchicago.edu>
To: caml-list@inria.fr
Subject: functors in batch compilation
Date: Mon, 05 May 1997 18:51:26 -0500
From: Lyn A Headley <laheadle@midway.uchicago.edu>
Sender: weis

hello,

While I think the Ocaml manual gives a good general tutorial on the
subject of the Module system, I am still confused about the _details_
of functorizing a module in a file.  

The docs provide this hint:

Notice that only top-level structures can be mapped to
separately-compiled files, but not functors nor module types. However,
all module-class objects can appear as components of a structure, so
the solution is to put the functor or module type inside a structure,
which can then be mapped to a file.


but does this mean one is forced to declare a functorized struct
in a signature as well as in the implementation file?  It would
seem to make more sense for the compiler to realize that it was
dealing with an implementation of a single module described in the
implementation file and just allow the signature to describe the
values of the (functorized) module that it wants to export.  This
would avoid needing two names per module, one for the file and another
for the module.  

I realize I might not be making sense but basically I don't understand
how to compile a functorized module into a file, and I wanted to prove
that I at least thought about it, thereby lessening the impression
that I am a punk kid who don't know nothin.

Lyn




