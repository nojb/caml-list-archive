Return-Path: <luca@dealfaro.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.3 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 23677BDC1
	for <caml-list@yquem.inria.fr>; Fri, 20 Jul 2007 09:55:36 +0200 (CEST)
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.224])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l6JHDiZF025204
	for <caml-list@yquem.inria.fr>; Thu, 19 Jul 2007 19:13:46 +0200
Received: by wr-out-0506.google.com with SMTP id i21so534431wra
        for <caml-list@yquem.inria.fr>; Thu, 19 Jul 2007 10:13:44 -0700 (PDT)
Received: by 10.142.77.11 with SMTP id z11mr216835wfa.1184865222504;
        Thu, 19 Jul 2007 10:13:42 -0700 (PDT)
Received: by 10.142.72.4 with HTTP; Thu, 19 Jul 2007 10:13:42 -0700 (PDT)
Message-ID: <28fa90930707191013y11fa73abx617c5b813e72b646@mail.gmail.com>
Date: Thu, 19 Jul 2007 10:13:42 -0700
From: "Luca de Alfaro" <luca@dealfaro.org>
To: "Hugo Ferreira" <hmf@inescporto.pt>
Subject: Re: [Caml-list] Vec: a functional implementation of extensible arrays
Cc: "Loup Vaillant" <loup.vaillant@gmail.com>,
	caml-list@yquem.inria.fr
In-Reply-To: <469F1E32.3040502@inescporto.pt>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_91668_27897791.1184865222473"
References: <28fa90930707181032q7681340pc30fb47434aff5fc@mail.gmail.com>
	 <6f9f8f4a0707190045g609abca4kfa3bb39d93604081@mail.gmail.com>
	 <469F1E32.3040502@inescporto.pt>
X-Miltered: at concorde with ID 469F9BC8.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; arrays:01 nonstandard:01 filliatre:01 arrays:01 backtracking:01 nodes:01 backtracking:01 lri:01 filliatr:01 publis:01 ocaml:01 iterating:01 bounded:01 worst-case:01 amortized:01 

------=_Part_91668_27897791.1184865222473
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Reading the paper, I noticed that my name "put" for assigning a value to a
position is highly nonstandard.
I have changed it to "set" for version 1.1 of Vec.  Hopefully, changing so
soon will avoid confusion... sorry.

Luca

On 7/19/07, Hugo Ferreira <hmf@inescporto.pt> wrote:
>
> Hello,
>
> For those of you interested in functional array consider Sylvain Conchon
> and Jean-Christophe Filli=E2tre paper in [1]. The Union-Find (UF) uses
> persistent arrays as its base data structure. I have made tests with the
> UF using the code provided, an implementation of k-BUF data structure
> (delayed backtracking) and altered version of the persistent array (fat
> nodes + delayed backtracking). The tests I did show that this version of
> persistent arrays is very efficient (especially for single threaded
> backtracking).
>
> Maybe Luca could pit his implementation against that of the article and
> report on how they fare?
>
> Regards,
> Hugo Ferreira.
>
> [1] http://www.lri.fr/~filliatr/ftp/publis/puf-wml07.ps
>
> Loup Vaillant wrote:
> > 2007/7/18, Luca de Alfaro <luca@dealfaro.org>:
> >> Dear All,
> >>
> >> I would like to share with you an Ocaml implementation of extensible
> >> arrays.
> >>  The implementation is functional, based on balanced trees (and on the
> >> code
> >> for Set and Map); I called the module Vec (for vector - I like
> >> short names).  You can find it at
> >> http://www.dealfaro.com/home/vec.html
> >> Module Vec provides, in log-time:
> >>
> >>  Access and modification to arbitrary elements ( Vec.put n el v puts
> >> element
> >> el in position n of vector v, for instance).
> >> Concatenation
> >> Insertion and removal of elements from arbitrary positions
> >> (auto-enlarging
> >> and auto-shrinking the vector).
> >> as well as:
> >>
> >> All kind of iterators and some visitor functions.
> >> Efficient translation to/from lists and arrays.
> >> An advantage of Vec over List, for very large data structures, is that
> >> iterating over a Vec of size n requires always stack depth bounded by
> >> log n:
> >> with lists, non-tail-recursive functions can cause stack overflows.
> >>
> >> I have been using this data structure for some months, and it has been
> >> very
> >> handy in a large number of occasions.  I hope it can be as useful to
> you.
> >>
> >> I would appreciate all advice and feedback.  Also, is there a
> repository
> >> where I should upload it?  Do you think it is worth it?
> >>
> >> All the best,
> >>
> >> Luca
> >
> > Very interesting. I always felt uneasy about the presence of
> > imperative arrays without a functional counterpart. I can't wait to
> > try it.
> >
> > Looking at your array type definition, I assume that the timings you
> > specified are worst-case? Is it possible to achieve better (but
> > amortized) bounds? Do you think it would be worth the trouble?
> >
> > I didn't see in your specs the complexity of your iterators. Does
> > these work in linear time, like those of the List and Array module?
> >
> > Regards,
> > Loup
> >
> > _______________________________________________
> > Caml-list mailing list. Subscription management:
> > http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> > Archives: http://caml.inria.fr
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_91668_27897791.1184865222473
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Reading the paper, I noticed that my name &quot;put&quot; for assigning a v=
alue to a position is highly nonstandard. <br>I have changed it to &quot;se=
t&quot; for version 1.1 of Vec.&nbsp; Hopefully, changing so soon will avoi=
d confusion... sorry.=20
<br><br>Luca<br><br><div><span class=3D"gmail_quote">On 7/19/07, <b class=
=3D"gmail_sendername">Hugo Ferreira</b> &lt;<a href=3D"mailto:hmf@inescport=
o.pt">hmf@inescporto.pt</a>&gt; wrote:</span><blockquote class=3D"gmail_quo=
te" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt=
 0.8ex; padding-left: 1ex;">
Hello,<br><br>For those of you interested in functional array consider Sylv=
ain Conchon<br>and Jean-Christophe Filli=E2tre paper in [1]. The Union-Find=
 (UF) uses<br>persistent arrays as its base data structure. I have made tes=
ts with the
<br>UF using the code provided, an implementation of k-BUF data structure<b=
r>(delayed backtracking) and altered version of the persistent array (fat<b=
r>nodes + delayed backtracking). The tests I did show that this version of
<br>persistent arrays is very efficient (especially for single threaded<br>=
backtracking).<br><br>Maybe Luca could pit his implementation against that =
of the article and<br>report on how they fare?<br><br>Regards,<br>Hugo Ferr=
eira.
<br><br>[1] <a href=3D"http://www.lri.fr/~filliatr/ftp/publis/puf-wml07.ps"=
>http://www.lri.fr/~filliatr/ftp/publis/puf-wml07.ps</a><br><br>Loup Vailla=
nt wrote:<br>&gt; 2007/7/18, Luca de Alfaro &lt;<a href=3D"mailto:luca@deal=
faro.org">
luca@dealfaro.org</a>&gt;:<br>&gt;&gt; Dear All,<br>&gt;&gt;<br>&gt;&gt; I =
would like to share with you an Ocaml implementation of extensible<br>&gt;&=
gt; arrays.<br>&gt;&gt;&nbsp;&nbsp;The implementation is functional, based =
on balanced trees (and on the
<br>&gt;&gt; code<br>&gt;&gt; for Set and Map); I called the module Vec (fo=
r vector - I like<br>&gt;&gt; short names).&nbsp;&nbsp;You can find it at<b=
r>&gt;&gt; <a href=3D"http://www.dealfaro.com/home/vec.html">http://www.dea=
lfaro.com/home/vec.html
</a><br>&gt;&gt; Module Vec provides, in log-time:<br>&gt;&gt;<br>&gt;&gt;&=
nbsp;&nbsp;Access and modification to arbitrary elements ( Vec.put n el v p=
uts<br>&gt;&gt; element<br>&gt;&gt; el in position n of vector v, for insta=
nce).<br>
&gt;&gt; Concatenation<br>&gt;&gt; Insertion and removal of elements from a=
rbitrary positions<br>&gt;&gt; (auto-enlarging<br>&gt;&gt; and auto-shrinki=
ng the vector).<br>&gt;&gt; as well as:<br>&gt;&gt;<br>&gt;&gt; All kind of=
 iterators and some visitor functions.
<br>&gt;&gt; Efficient translation to/from lists and arrays.<br>&gt;&gt; An=
 advantage of Vec over List, for very large data structures, is that<br>&gt=
;&gt; iterating over a Vec of size n requires always stack depth bounded by
<br>&gt;&gt; log n:<br>&gt;&gt; with lists, non-tail-recursive functions ca=
n cause stack overflows.<br>&gt;&gt;<br>&gt;&gt; I have been using this dat=
a structure for some months, and it has been<br>&gt;&gt; very<br>&gt;&gt; h=
andy in a large number of occasions.&nbsp;&nbsp;I hope it can be as useful =
to you.
<br>&gt;&gt;<br>&gt;&gt; I would appreciate all advice and feedback.&nbsp;&=
nbsp;Also, is there a repository<br>&gt;&gt; where I should upload it?&nbsp=
;&nbsp;Do you think it is worth it?<br>&gt;&gt;<br>&gt;&gt; All the best,<b=
r>&gt;&gt;<br>&gt;&gt; Luca
<br>&gt;<br>&gt; Very interesting. I always felt uneasy about the presence =
of<br>&gt; imperative arrays without a functional counterpart. I can&#39;t =
wait to<br>&gt; try it.<br>&gt;<br>&gt; Looking at your array type definiti=
on, I assume that the timings you
<br>&gt; specified are worst-case? Is it possible to achieve better (but<br=
>&gt; amortized) bounds? Do you think it would be worth the trouble?<br>&gt=
;<br>&gt; I didn&#39;t see in your specs the complexity of your iterators. =
Does
<br>&gt; these work in linear time, like those of the List and Array module=
?<br>&gt;<br>&gt; Regards,<br>&gt; Loup<br>&gt;<br>&gt; ___________________=
____________________________<br>&gt; Caml-list mailing list. Subscription m=
anagement:
<br>&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>&gt; Arc=
hives: <a href=3D"http://caml.inria.fr">http://caml.inria.fr</a><br>&gt; Be=
ginner&#39;s list:=20
<a href=3D"http://groups.yahoo.com/group/ocaml_beginners">http://groups.yah=
oo.com/group/ocaml_beginners</a><br>&gt; Bug reports: <a href=3D"http://cam=
l.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a><br>&gt;<br=
>
<br>_______________________________________________<br>Caml-list mailing li=
st. Subscription management:<br><a href=3D"http://yquem.inria.fr/cgi-bin/ma=
ilman/listinfo/caml-list">http://yquem.inria.fr/cgi-bin/mailman/listinfo/ca=
ml-list
</a><br>Archives: <a href=3D"http://caml.inria.fr">http://caml.inria.fr</a>=
<br>Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beg=
inners">http://groups.yahoo.com/group/ocaml_beginners</a><br>Bug reports: <=
a href=3D"http://caml.inria.fr/bin/caml-bugs">
http://caml.inria.fr/bin/caml-bugs</a><br></blockquote></div><br>

------=_Part_91668_27897791.1184865222473--

