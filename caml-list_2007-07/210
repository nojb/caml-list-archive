Return-Path: <tom.primozic@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,HTML_MESSAGE,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 620DABC69
	for <caml-list@yquem.inria.fr>; Mon, 16 Jul 2007 19:57:34 +0200 (CEST)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.170])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l6GHvXqd011943
	for <caml-list@yquem.inria.fr>; Mon, 16 Jul 2007 19:57:34 +0200
Received: by ug-out-1314.google.com with SMTP id o2so1006721uge
        for <caml-list@yquem.inria.fr>; Mon, 16 Jul 2007 10:57:33 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=mXALkbbz1o2/UCEZTsNN9zofiS6SeKgCwRXHk5b9FXn4dkIRTwilW3te2SOCldJXHyFwmJCuONgyL8Z3t8Mb6g6ZFCt1MSlDVrFBUOpCgiqTrX6UX2yOWfBbMUtRklLPZon6Wt6mVIGpi0TPOfjCEiPGLDt0eYfm1q8Ju9/5heo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=fqaTgXId6sMzunmA6dB3xf+YNMhFlliag4QE7SaY87gYfdv+RegP00VVl6zZp8fE4CAZsVB+wf15meAhJjkWx2kD98tG46y4MHugECSGBZnDYQCppQDRXIe3IqrdWE0F/zz0LPDrkJ6wxRZAke2buurYlDFhG/vsoiHC+uD30HQ=
Received: by 10.78.159.7 with SMTP id h7mr1245628hue.1184608653064;
        Mon, 16 Jul 2007 10:57:33 -0700 (PDT)
Received: by 10.78.189.19 with HTTP; Mon, 16 Jul 2007 10:57:33 -0700 (PDT)
Message-ID: <c1490a380707161057p12e61b4bvb866c37ca7dd0c64@mail.gmail.com>
Date: Mon, 16 Jul 2007 19:57:33 +0200
From: Tom <tom.primozic@gmail.com>
To: skaller <skaller@users.sourceforge.net>
Subject: Re: [Caml-list] CallCC using fork (and garbage collected processes)
Cc: "Richard Jones" <rich@annexia.org>, caml-list@yquem.inria.fr
In-Reply-To: <1184606701.6231.28.camel@rosella.wigram>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_42565_12164230.1184608653039"
References: <200707160630.23737.jon@ffconsultancy.com>
	 <1184566043.8152.55.camel@rosella.wigram>
	 <20070716164643.GB26691@furbychan.cocan.org>
	 <1184606701.6231.28.camel@rosella.wigram>
X-j-chkmail-Score: MSGID : 469BB18D.000 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 469BB18D.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; stack:01 stack:01 sourceforge:01 sourceforge:01 garbage:01 garbage:01 imho:01 imho:01 wrote:01 wrote:01 caml-list:01 linear:02 linear:02 fork:05 extension:06 
X-Attachments: cset="UTF-8" cset="UTF-8" 

------=_Part_42565_12164230.1184608653039
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 16/07/07, skaller <skaller@users.sourceforge.net> wrote:
>
>
> The one to look at here is MLton IMHO .. since it uses
> a garbage collected (compacted) linear stack with mmap()
> extension .. hopefully obtaining the benefits of both
> linear performance from linear addresing and low
> resource usage from spaghetti stack implementation.
>

How exactly does that work? Is there any reference where I could read more
about that (except the MLton sources)? Is using mmap() crossplatform?

- Tom

------=_Part_42565_12164230.1184608653039
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<br><br><div><span class="gmail_quote">On 16/07/07, <b class="gmail_sendername">skaller</b> &lt;<a href="mailto:skaller@users.sourceforge.net">skaller@users.sourceforge.net</a>&gt; wrote:</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>The one to look at here is MLton IMHO .. since it uses<br>a garbage collected (compacted) linear stack with mmap()<br>extension .. hopefully obtaining the benefits of both<br>linear performance from linear addresing and low
<br>resource usage from spaghetti stack implementation.<br></blockquote></div><br>How exactly does that work? Is there any reference where I could read more about that (except the MLton sources)? Is using mmap() crossplatform?
<br><br>- Tom<br>

------=_Part_42565_12164230.1184608653039--

