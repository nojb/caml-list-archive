Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id BBEEFBC69
	for <caml-list@yquem.inria.fr>; Mon, 16 Jul 2007 04:06:10 +0200 (CEST)
Received: from ptb-relay02.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l6G26ABf008345
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Mon, 16 Jul 2007 04:06:10 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay02.plus.net with esmtp (Exim) id 1IAFyT-00065H-Kq
	for caml-list@yquem.inria.fr; Mon, 16 Jul 2007 03:06:09 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Recursive class+type definitions
Date: Mon, 16 Jul 2007 03:00:52 +0100
User-Agent: KMail/1.9.7
References: <11E0700C-4331-42AB-88F1-E6BD21D72F78@rice.edu>
In-Reply-To: <11E0700C-4331-42AB-88F1-E6BD21D72F78@rice.edu>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200707160300.52686.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 469AD292.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 recursive:01 getx:01 recursion:01 getx:01 ocaml:01 ocaml:01 frog:98 wrote:01 caml-list:01 define:01 data:02 types:03 float:03 float:03 

On Monday 16 July 2007 02:29:47 Raj B wrote:
> Hi all
>
> Can we have mutually recursive definitions mixing types and classes?
> For example, I want to define
> a class called mypoint, which contains another data structure (say, a
> custom list) of mypoints.
>
> class virtual mypoint =
> 	object
> 		method virtual getx : float
> 		method virtual getlist : mypointlist
> 	end
>
> type mypointlist = Empty | Cons of (mypoint * mypointlist)
>
> What is the best way to achieve this kind of mutual recursion?

Good question. No idea. But you can do this:

class virtual ['a] mypoint = object
  method virtual getx : float
  method virtual getlist : 'a
end;;

type mypointlist = Empty | Cons of (mypointlist mypoint * mypointlist);;

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The OCaml Journal
http://www.ffconsultancy.com/products/ocaml_journal/?e

