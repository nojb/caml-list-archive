Return-Path: <kania.oliver@googlemail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.4 required=5.0 tests=AWL,HTML_MESSAGE,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 8B481BC69
	for <caml-list@yquem.inria.fr>; Thu,  5 Jul 2007 22:43:52 +0200 (CEST)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.168])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l65KhpjG012180
	for <caml-list@yquem.inria.fr.>; Thu, 5 Jul 2007 22:43:51 +0200
Received: by ug-out-1314.google.com with SMTP id j3so566370ugf
        for <caml-list@yquem.inria.fr.>; Thu, 05 Jul 2007 13:43:51 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=googlemail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=hb3Qaf/QAIDeUz31GZyk53QFuEXJdEkcukRDVM8kg2SNoLzyWnaZZixxox5NIaR5Eyj+a87lxVFjgXKO2TRuit6W1gBwguYhAR6SDbshSxg8FRRj8tXHrBXy5Qr/U7N/DtsRqiXcGIU8d3eJba72Y3Gbv7NwCvkycwW5fu+ZYA8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=o7ikQxeRs/W8TZt51CTA5KRWVL2Rm0konFhvxCvcA7KnA4pbm1o7By+iC0ZdJfZ/zIzmwsjSIfW3lQ8aBxGlxnSoof0Ol6yd8cj0HRFR8wQWuUBzuM7ZcgBlDLaLGkMQY2sXfBEOY7EMo+A0soXGNyYDXdFUJAUrwImTo7VpUOg=
Received: by 10.82.156.12 with SMTP id d12mr20991650bue.1183668230529;
        Thu, 05 Jul 2007 13:43:50 -0700 (PDT)
Received: by 10.82.112.15 with HTTP; Thu, 5 Jul 2007 13:43:50 -0700 (PDT)
Message-ID: <1262c4ee0707051343q38ff9856ufddd2c716a374b1a@mail.gmail.com>
Date: Thu, 5 Jul 2007 22:43:50 +0200
From: "Oliver Kania" <kania.oliver@googlemail.com>
To: "Richard Jones" <rich@annexia.org>
Subject: Re: [Caml-list] embedding ocaml from C++ -- PODs
Cc: caml-list@yquem.inria.fr
In-Reply-To: <20070703085951.GA15238@furbychan.cocan.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_104398_3018280.1183668230482"
References: <1262c4ee0707020406s7da99e37mc6706db8d35342a0@mail.gmail.com>
	 <20070702114809.GA8908@furbychan.cocan.org>
	 <1262c4ee0707020509h48d43e24s5e8902810cae7985@mail.gmail.com>
	 <20070703085951.GA15238@furbychan.cocan.org>
X-j-chkmail-Score: MSGID : 468D5807.001 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 468D5807.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 0200,:01 ocaml-side:01 ocaml:01 printf:01 struct:01 mutable:01 unboxed:01 struct:01 mutable:01 memb:01 memb:01 enum:01 enum:01 printf:01 

------=_Part_104398_3018280.1183668230482
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

thanks !!

On 7/3/07, Richard Jones <rich@annexia.org> wrote:
>
> On Mon, Jul 02, 2007 at 02:09:41PM +0200, Oliver Kania wrote:
> > Hi there,
> > yes, basically I can use ocaml-types.
> > I guess I will have to "unwrap" them on the C-side.
> > I have a favor to ask from you:
> > Could you please post a small example with, lets say
> > a strucutre with 4 members, showing both the C and the ocaml-side
> > modifying it ? I do not find the Ocaml documentatino to be very
> instructive
> > concerning this topic.
>
> Please CC replies to the list.
>
> Here's an example showing a four element structure shared between C
> and OCaml.  All the fields except the float can be modified on the
> OCaml side (you can get around that restriction by keeping any floats
> you need in a separate float-only structure).  All fields can be
> modified on the C side.
>
> It's only very lightly tested, so probably contains bugs.
>
> Rich.
>
> ------------------------------------------------------------ st.ml
> open Printf
>
> (* All fields in struct4 are mutable from the OCaml side, except
> * the boxed float.  If you want to share and update floats, then
> * it's better to use a separate float-only array or structure
> * for them, so they are stored unboxed and can be directly
> * modified from OCaml.
> *)
> type struct4 = {
>   mutable memb1 : int;
>   mutable memb2 : enum4;
>   memb3 : float;
>   mutable memb4 : int;
> }
> and enum4 = Is0 | Is1 | Is2 | Is3
>
> let string_of_enum4 = function
>   | Is0 -> "Is0" | Is1 -> "Is1" | Is2 -> "Is2" | Is3 -> "Is3"
>
> let next_enum4 = function
>   | Is0 -> Is1 | Is1 -> Is2 | Is2 -> Is3 | Is3 -> Is0
>
> external create_struct4_from_c : unit -> struct4 = "create_struct4"
>
> external print_struct4_from_c : struct4 -> unit = "print_struct4"
>
> external update_struct4_from_c : struct4 -> unit = "update_struct4"
>
> let print_struct4_from_ocaml data =
>   printf "OCaml: memb1 = %d\n" data.memb1;
>   printf "OCaml: memb2 = %s\n" (string_of_enum4 data.memb2);
>   printf "OCaml: memb3 = %f\n" data.memb3;
>   printf "OCaml: memb4 = %d\n" data.memb4;
>   flush stdout
>
> let update_struct4_from_ocaml data =
>   data.memb1 <- data.memb1 + 1;
>   data.memb2 <- next_enum4 data.memb2;
>   data.memb4 <- data.memb4 + 2
>
> let () =
>   let data = create_struct4_from_c () in
>   while true do
>     print_struct4_from_c data;
>     print_struct4_from_ocaml data;
>     printf "* updating struct4 from C\n"; flush stdout;
>     update_struct4_from_c data;
>     print_struct4_from_c data;
>     print_struct4_from_ocaml data;
>     printf "* updating struct4 from OCaml\n"; flush stdout;
>     update_struct4_from_ocaml data;
>     Gc.compact ()
>   done
>
>
> ------------------------------------------------------------ st_c.c
> #include <stdio.h>
>
> #include <caml/config.h>
> #include <caml/mlvalues.h>
> #include <caml/memory.h>
>
> struct struct4 {
>   value header;                 /* CAML header word. */
>   value memb1;
>   value memb2;
>   value memb3;                  /* NB: boxed */
>   value memb4;
> };
>
> #if defined(ARCH_ALIGN_DOUBLE)
> #warn "this code probably won't work on 32 bit ARCH_ALIGN_DOUBLE
> platforms"
> #endif
> struct memb3 {                  /* Storage for a float. */
>   value header;                 /* CAML header word. */
>   double d;                     /* The float itself. */
> };
>
> CAMLprim value
> create_struct4 (value unitv)
> {
>   CAMLparam1 (unitv);
>   struct struct4 *data;
>   struct memb3 *memb3;
>
>   /* Allocate on the C heap and return a raw pointer.  For
>    * provisos about this, see:
>    * http://caml.inria.fr/pub/old_caml_site/caml-list/1415.html
>    *
> http://caml.inria.fr/pub/ml-archives/caml-list/2006/09/977818689f4ceb2178c592453df7a343.en.html
>    */
>   data = malloc (sizeof *data);
>
>   /* We must initialise at least the header and the boxed memb3.
>    * Best to do all fields.
>    */
>   data->header = 4 << 10;
>   data->memb1 = Val_int (0);
>   data->memb2 = Val_int (0);    /* Is0 */
>
>   memb3 = malloc (sizeof *memb3);
>   memb3->header = 1 << 10 | Double_tag;
>   memb3->d = 0.;
>   data->memb3 = (value) &memb3->d;
>
>   data->memb4 = Val_int (0);
>
>   CAMLreturn ((value) &data->memb1);
> }
>
> CAMLprim value
> print_struct4 (value datav)
> {
>   CAMLparam0 ();                /* datav isn't on the CAML heap. */
>   struct struct4 *data = (struct struct4 *) Hp_val (datav);
>   struct memb3 *memb3 = (struct memb3 *) Hp_val (data->memb3);
>
>   printf ("    C: memb1 = %d\n", Int_val (data->memb1));
>   printf ("    C: memb2 = Is%d\n", Int_val (data->memb2));
>   printf ("    C: memb3 = %f\n", memb3->d);
>   printf ("    C: memb4 = %d\n", Int_val (data->memb4));
>   fflush (stdout);
>
>   CAMLreturn (Val_unit);
> }
>
> CAMLprim value
> update_struct4 (value datav)
> {
>   CAMLparam0 ();                /* datav isn't on the CAML heap. */
>   struct struct4 *data = (struct struct4 *) Hp_val (datav);
>   struct memb3 *memb3 = (struct memb3 *) Hp_val (data->memb3);
>   int i;
>
>   data->memb1 = Val_int (Int_val (data->memb1) + 1);
>   i = Int_val (data->memb2);
>   i++;
>   if (i > 3) i = 0;
>   data->memb2 = Val_int (i);
>   memb3->d += 0.1;
>   data->memb4 = Val_int (Int_val (data->memb4) + 2);
>
>   CAMLreturn (Val_unit);
> }
>
> ------------------------------------------------------------ Makefile
> CC      := gcc
> CFLAGS  := -Wall -Werror -I$(shell ocamlc -where)
>
> all:    test
>
> test:   st.cmx st_c.o
>         ocamlopt -o $@ $^
>
> st.cmx: st.ml
>         ocamlopt -o $@ -c $^
>
> ----------------------------------------------------------------------
>
>
> --
> Richard Jones
> Red Hat
>

------=_Part_104398_3018280.1183668230482
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

thanks !!<br><br><div><span class="gmail_quote">On 7/3/07, <b class="gmail_sendername">Richard Jones</b> &lt;<a href="mailto:rich@annexia.org">rich@annexia.org</a>&gt; wrote:</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Mon, Jul 02, 2007 at 02:09:41PM +0200, Oliver Kania wrote:<br>&gt; Hi there,<br>&gt; yes, basically I can use ocaml-types.<br>&gt; I guess I will have to &quot;unwrap&quot; them on the C-side.<br>&gt; I have a favor to ask from you:
<br>&gt; Could you please post a small example with, lets say<br>&gt; a strucutre with 4 members, showing both the C and the ocaml-side<br>&gt; modifying it ? I do not find the Ocaml documentatino to be very instructive<br>
&gt; concerning this topic.<br><br>Please CC replies to the list.<br><br>Here&#39;s an example showing a four element structure shared between C<br>and OCaml.&nbsp;&nbsp;All the fields except the float can be modified on the<br>OCaml side (you can get around that restriction by keeping any floats
<br>you need in a separate float-only structure).&nbsp;&nbsp;All fields can be<br>modified on the C side.<br><br>It&#39;s only very lightly tested, so probably contains bugs.<br><br>Rich.<br><br>------------------------------------------------------------ 
<a href="http://st.ml">st.ml</a><br>open Printf<br><br>(* All fields in struct4 are mutable from the OCaml side, except<br> * the boxed float.&nbsp;&nbsp;If you want to share and update floats, then<br> * it&#39;s better to use a separate float-only array or structure
<br> * for them, so they are stored unboxed and can be directly<br> * modified from OCaml.<br> *)<br>type struct4 = {<br>&nbsp;&nbsp;mutable memb1 : int;<br>&nbsp;&nbsp;mutable memb2 : enum4;<br>&nbsp;&nbsp;memb3 : float;<br>&nbsp;&nbsp;mutable memb4 : int;<br>
}<br>and enum4 = Is0 | Is1 | Is2 | Is3<br><br>let string_of_enum4 = function<br>&nbsp;&nbsp;| Is0 -&gt; &quot;Is0&quot; | Is1 -&gt; &quot;Is1&quot; | Is2 -&gt; &quot;Is2&quot; | Is3 -&gt; &quot;Is3&quot;<br><br>let next_enum4 = function
<br>&nbsp;&nbsp;| Is0 -&gt; Is1 | Is1 -&gt; Is2 | Is2 -&gt; Is3 | Is3 -&gt; Is0<br><br>external create_struct4_from_c : unit -&gt; struct4 = &quot;create_struct4&quot;<br><br>external print_struct4_from_c : struct4 -&gt; unit = &quot;print_struct4&quot;
<br><br>external update_struct4_from_c : struct4 -&gt; unit = &quot;update_struct4&quot;<br><br>let print_struct4_from_ocaml data =<br>&nbsp;&nbsp;printf &quot;OCaml: memb1 = %d\n&quot; data.memb1;<br>&nbsp;&nbsp;printf &quot;OCaml: memb2 = %s\n&quot; (string_of_enum4 
data.memb2);<br>&nbsp;&nbsp;printf &quot;OCaml: memb3 = %f\n&quot; data.memb3;<br>&nbsp;&nbsp;printf &quot;OCaml: memb4 = %d\n&quot; data.memb4;<br>&nbsp;&nbsp;flush stdout<br><br>let update_struct4_from_ocaml data =<br>&nbsp;&nbsp;data.memb1 &lt;- data.memb1 + 1;
<br>&nbsp;&nbsp;data.memb2 &lt;- next_enum4 data.memb2;<br>&nbsp;&nbsp;data.memb4 &lt;- data.memb4 + 2<br><br>let () =<br>&nbsp;&nbsp;let data = create_struct4_from_c () in<br>&nbsp;&nbsp;while true do<br>&nbsp;&nbsp;&nbsp;&nbsp;print_struct4_from_c data;<br>&nbsp;&nbsp;&nbsp;&nbsp;print_struct4_from_ocaml data;
<br>&nbsp;&nbsp;&nbsp;&nbsp;printf &quot;* updating struct4 from C\n&quot;; flush stdout;<br>&nbsp;&nbsp;&nbsp;&nbsp;update_struct4_from_c data;<br>&nbsp;&nbsp;&nbsp;&nbsp;print_struct4_from_c data;<br>&nbsp;&nbsp;&nbsp;&nbsp;print_struct4_from_ocaml data;<br>&nbsp;&nbsp;&nbsp;&nbsp;printf &quot;* updating struct4 from OCaml\n&quot;; flush stdout;
<br>&nbsp;&nbsp;&nbsp;&nbsp;update_struct4_from_ocaml data;<br>&nbsp;&nbsp;&nbsp;&nbsp;Gc.compact ()<br>&nbsp;&nbsp;done<br><br><br>------------------------------------------------------------ st_c.c<br>#include &lt;stdio.h&gt;<br><br>#include &lt;caml/config.h&gt;<br>#include &lt;caml/mlvalues.h&gt;
<br>#include &lt;caml/memory.h&gt;<br><br>struct struct4 {<br>&nbsp;&nbsp;value header;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* CAML header word. */<br>&nbsp;&nbsp;value memb1;<br>&nbsp;&nbsp;value memb2;<br>&nbsp;&nbsp;value memb3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* NB: boxed */<br>&nbsp;&nbsp;value memb4;
<br>};<br><br>#if defined(ARCH_ALIGN_DOUBLE)<br>#warn &quot;this code probably won&#39;t work on 32 bit ARCH_ALIGN_DOUBLE platforms&quot;<br>#endif<br>struct memb3 {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Storage for a float. */<br>&nbsp;&nbsp;value header;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* CAML header word. */
<br>&nbsp;&nbsp;double d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* The float itself. */<br>};<br><br>CAMLprim value<br>create_struct4 (value unitv)<br>{<br>&nbsp;&nbsp;CAMLparam1 (unitv);<br>&nbsp;&nbsp;struct struct4 *data;<br>&nbsp;&nbsp;struct memb3 *memb3;<br><br>&nbsp;&nbsp;/* Allocate on the C heap and return a raw pointer.&nbsp;&nbsp;For
<br>&nbsp;&nbsp; * provisos about this, see:<br>&nbsp;&nbsp; * <a href="http://caml.inria.fr/pub/old_caml_site/caml-list/1415.html">http://caml.inria.fr/pub/old_caml_site/caml-list/1415.html</a><br>&nbsp;&nbsp; * <a href="http://caml.inria.fr/pub/ml-archives/caml-list/2006/09/977818689f4ceb2178c592453df7a343.en.html">
http://caml.inria.fr/pub/ml-archives/caml-list/2006/09/977818689f4ceb2178c592453df7a343.en.html</a><br>&nbsp;&nbsp; */<br>&nbsp;&nbsp;data = malloc (sizeof *data);<br><br>&nbsp;&nbsp;/* We must initialise at least the header and the boxed memb3.<br>&nbsp;&nbsp; * Best to do all fields.
<br>&nbsp;&nbsp; */<br>&nbsp;&nbsp;data-&gt;header = 4 &lt;&lt; 10;<br>&nbsp;&nbsp;data-&gt;memb1 = Val_int (0);<br>&nbsp;&nbsp;data-&gt;memb2 = Val_int (0);&nbsp;&nbsp;&nbsp;&nbsp;/* Is0 */<br><br>&nbsp;&nbsp;memb3 = malloc (sizeof *memb3);<br>&nbsp;&nbsp;memb3-&gt;header = 1 &lt;&lt; 10 | Double_tag;
<br>&nbsp;&nbsp;memb3-&gt;d = 0.;<br>&nbsp;&nbsp;data-&gt;memb3 = (value) &amp;memb3-&gt;d;<br><br>&nbsp;&nbsp;data-&gt;memb4 = Val_int (0);<br><br>&nbsp;&nbsp;CAMLreturn ((value) &amp;data-&gt;memb1);<br>}<br><br>CAMLprim value<br>print_struct4 (value datav)<br>
{<br>&nbsp;&nbsp;CAMLparam0 ();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* datav isn&#39;t on the CAML heap. */<br>&nbsp;&nbsp;struct struct4 *data = (struct struct4 *) Hp_val (datav);<br>&nbsp;&nbsp;struct memb3 *memb3 = (struct memb3 *) Hp_val (data-&gt;memb3);<br><br>&nbsp;&nbsp;printf (&quot;&nbsp;&nbsp;&nbsp;&nbsp;C: memb1 = %d\n&quot;, Int_val (data-&gt;memb1));
<br>&nbsp;&nbsp;printf (&quot;&nbsp;&nbsp;&nbsp;&nbsp;C: memb2 = Is%d\n&quot;, Int_val (data-&gt;memb2));<br>&nbsp;&nbsp;printf (&quot;&nbsp;&nbsp;&nbsp;&nbsp;C: memb3 = %f\n&quot;, memb3-&gt;d);<br>&nbsp;&nbsp;printf (&quot;&nbsp;&nbsp;&nbsp;&nbsp;C: memb4 = %d\n&quot;, Int_val (data-&gt;memb4));<br>&nbsp;&nbsp;fflush (stdout);
<br><br>&nbsp;&nbsp;CAMLreturn (Val_unit);<br>}<br><br>CAMLprim value<br>update_struct4 (value datav)<br>{<br>&nbsp;&nbsp;CAMLparam0 ();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* datav isn&#39;t on the CAML heap. */<br>&nbsp;&nbsp;struct struct4 *data = (struct struct4 *) Hp_val (datav);
<br>&nbsp;&nbsp;struct memb3 *memb3 = (struct memb3 *) Hp_val (data-&gt;memb3);<br>&nbsp;&nbsp;int i;<br><br>&nbsp;&nbsp;data-&gt;memb1 = Val_int (Int_val (data-&gt;memb1) + 1);<br>&nbsp;&nbsp;i = Int_val (data-&gt;memb2);<br>&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;if (i &gt; 3) i = 0;<br>
&nbsp;&nbsp;data-&gt;memb2 = Val_int (i);<br>&nbsp;&nbsp;memb3-&gt;d += 0.1;<br>&nbsp;&nbsp;data-&gt;memb4 = Val_int (Int_val (data-&gt;memb4) + 2);<br><br>&nbsp;&nbsp;CAMLreturn (Val_unit);<br>}<br><br>------------------------------------------------------------ Makefile
<br>CC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:= gcc<br>CFLAGS&nbsp;&nbsp;:= -Wall -Werror -I$(shell ocamlc -where)<br><br>all:&nbsp;&nbsp;&nbsp;&nbsp;test<br><br>test:&nbsp;&nbsp; st.cmx st_c.o<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ocamlopt -o $@ $^<br><br>st.cmx: <a href="http://st.ml">st.ml</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ocamlopt -o $@ -c $^
<br><br>----------------------------------------------------------------------<br><br><br>--<br>Richard Jones<br>Red Hat<br></blockquote></div><br>

------=_Part_104398_3018280.1183668230482--

