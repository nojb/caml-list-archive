Return-Path: <daniel.buenzli@epfl.ch>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id C50FBBC69
	for <caml-list@yquem.inria.fr>; Thu,  5 Jul 2007 09:45:20 +0200 (CEST)
Received: from mail15.bluewin.ch (mail15.bluewin.ch [195.186.18.63])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l657jKps031452
	for <caml-list@yquem.inria.fr>; Thu, 5 Jul 2007 09:45:20 +0200
Received: from [10.0.1.2] (85.2.25.144) by mail15.bluewin.ch (Bluewin 7.3.121)
        id 467A58C40040B7A4 for caml-list@yquem.inria.fr; Thu, 5 Jul 2007 07:45:20 +0000
Mime-Version: 1.0 (Apple Message framework v752.2)
In-Reply-To: <200707050405.12031.jon@ffconsultancy.com>
References: <002501c7be76$d0348630$ac01a8c0@johnyaya> <200707042222.13783.jon@ffconsultancy.com> <3E92B237-EEF9-48BF-A0B9-C3793C1B3D9D@epfl.ch> <200707050405.12031.jon@ffconsultancy.com>
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <1F16F766-1C00-4C69-9154-9A2A1528FB5C@epfl.ch>
Content-Transfer-Encoding: quoted-printable
From: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
Subject: Re: [Caml-list] ANN: Chess III Arena 0.5
Date: Thu, 5 Jul 2007 09:45:49 +0200
To: caml-list@yquem.inria.fr
X-Mailer: Apple Mail (2.752.2)
X-Miltered: at concorde with ID 468CA190.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bunzli:01 buenzli:01 sig:01 node:01 caml-list:01 epfl:02 ensuring:02 opengl:02 opengl:02 objects:02 objects:02 optimization:03 optimization:03 dependent:04 daniel:04 


Le 5 juil. 07 =E0 05:05, Jon Harrop a =E9crit :

> There's no way this optimization should slow the program down =20
> unless its
> software rendered,
[...]
> Yes but the performance difference between texture objects and =20
> display lists
> should be tiny compared to the difference with immediate mode, =20
> which is what
> we're comparing here.

No, it can result in a slow down even if it is harwdare rendered, the =20=

effect of your "optimization" is implementation dependent. The =20
problem is that glTexImage2d cannot be compiled efficently in a =20
display list (see the bottom of this page [1] for why this is the =20
case) and it may be that in the implementation of OpenGL he uses the =20
cpu to gpu texture transfer is done each time the display list is =20
called. In that case if your bottleneck is in the cpu to gpu transfer =20=

of textures, the performance advantage of retained vs immediate is =20
lost. The only platform independent way of ensuring that cpu to gpu =20
texture transfers are not performed each time the display list is =20
called is to use texture objects.

Daniel

[1] http://www.bluevoid.com/opengl/sig00/advanced00/notes/node60.html


