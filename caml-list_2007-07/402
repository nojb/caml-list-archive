Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 2DD50BC69
	for <caml-list@yquem.inria.fr>; Mon, 30 Jul 2007 21:34:01 +0200 (CEST)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l6UJY0Ri020768
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Mon, 30 Jul 2007 21:34:01 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay01.plus.net with esmtp (Exim) id 1IFb0A-0000ZK-33
	for caml-list@inria.fr; Mon, 30 Jul 2007 20:33:58 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@inria.fr
Subject: Re: [Caml-list] module interface?
Date: Mon, 30 Jul 2007 20:24:56 +0100
User-Agent: KMail/1.9.7
References: <1185777938.6753.7.camel@rosella.wigram> <4a051d930707300943h4d824dbxcc39b13db37cba46@mail.gmail.com> <1185815592.8102.12.camel@rosella.wigram>
In-Reply-To: <1185815592.8102.12.camel@rosella.wigram>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200707302024.56444.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 46AE3D28.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 functors:01 functors:01 hashtbl:01 frog:98 wrote:01 caml-list:01 measurements:01 modules:02 module:03 interface:06 discussion:06 discussion:06 describe:07 

On Monday 30 July 2007 18:13:12 skaller wrote:
> Maybe Jon Harrop covers this well in his book?

OCaml for Scientists and the latest article in the OCaml Journal describe how 
to consume functors (most notably the Set.Make and Map.Make functors) but not 
how to create functors. Future OCaml Journal articles will cover functors in 
more detail.

Also, OCaml for Scientists describes performance considerations and 
optimizations in great deal, with some discussion of defunctorization and 
measurements and discussion of the performance of the Set and Map modules 
(and Hashtbl).

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists/?e

