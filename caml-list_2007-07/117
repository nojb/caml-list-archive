Return-Path: <snna@spkdo.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=KAM_STOCKOTC 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id D583EBC6B
	for <caml-list@yquem.inria.fr>; Tue, 10 Jul 2007 02:32:09 +0200 (CEST)
Received: from bb219-74-71-202.singnet.com.sg (bb219-74-71-202.singnet.com.sg [219.74.71.202])
	by discorde.inria.fr (8.13.6/8.13.6) with SMTP id l6A0W7rN027389
	for <caml-list@inria.fr>; Tue, 10 Jul 2007 02:32:08 +0200
Received: from [209.220.196.29] (helo=xyd)
	by bb219-74-71-202.singnet.com.sg with smtp (Exim 4.62 (FreeBSD))
	id 1I84áp-0001OO-73; Tue, 10 Jul 2007 08:36:55 +0800
Message-ID: <4692D383.2070704@spkdo.de>
Date: Tue, 10 Jul 2007 08:32:03 +0800
From: wild <snna@spkdo.de>
User-Agent: Thunderbird 1.5.0.12 (Windows/20070509)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: I almost prefer the former option as it makes it more explicit what the step-by-step conversion is.
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 4692D387.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; semantics:01 semantics:01 implicitly:01 synchronous:01 notation:01 notation:01 oopsla:01 indirection:01 run-time:01 inherently:01 step-by-step:98 otc:98 despair:98 despair:98 incentives:98 

VPSN Has Wild Day as Stock climbs $0.019 (90.48%) GAIN!

VISION AIRSHIPS INC (Other OTC:VPSN.PK)

The 24 hrs has been a sky rocket for VPSN. With major news to be
released stirring interest has brought huge returns for investors. The
key is, knowing when to get on and when to get off a stock, for
successful day trading. VPSN has distinct patterns to watch for. This
ride is not over. Jump on now and ride the price up on the highest
return "Day Trade" we have featured this year.

Get on VPSN first thing Tuesday as we stired you in the right direction
for Monday.

But don't despair, we have not yet exhausted the creative possibilities
of the channel semantics.

EHLLAPI actually stands for Extended High Level Language Application
Programming Interface, which is a bit of a euphemism. For example, a
component that deals with credit card validations could be called the
CreditService and react to messages sent on a channel also named
CreditService.
Most of the discussion centered on the role of design techniques and
modeling languages and the way we design software. according to the
operation that is to be performed. Maybe the janitor came in at night
and did that. But don't despair, we have not yet exhausted the creative
possibilities of the channel semantics. Dangling the Carrot You should
also be cautious about which metric carrot you want to dangle in front
of the developers.

Essentially, the API provides a single method called hllc.

Calendar you have to specify all assumptions that are made implicitly by
Calendar, such as the time zone.
Eric has written an excellent  book on domain-driven design. However,
once we started talking we realized that there are a lot of nuances and
related topics to layering that are quite worthwhile discussing.

In combination, though, it makes for an inspiring mix of pragmatic
information and intellectual stimulation. Again, the assumptions between
the communicating parties have been reduced.
These questions rarely come up in the world of synchronous,
object-oriented applications. A friend of mine, who was involved in the
CORBA  spec work, once claimed that the "OMG takes over good work and
ruins it".

However, once we started talking we realized that there are a lot of
nuances and related topics to layering that are quite worthwhile
discussing. Sadly, the notation is rather hideous. An interesting theme
during the panel focused on how much a methodology and notation can help
developers come up with good designs. Winter also tends to be busy
because slide material for the developer conferences in Spring are due.

For example, this shift of attention from structure to interaction is at
the heart of many of the debates on service-oriented computing. Maybe
the janitor came in at night and did that.

Suddenly it matters a lot whether one component sends a single message
or a series of small messages.

A lot can be said about the dangers of incentives for developers but it
seems that incentives based on metrics are particularly dangerous
because a simple number can rarely represent the real intent.

As with most things in our field, the idea of domain languages is not
exactly new. Just make sure your boss does not read this blog. Code is
better off not having to ask such questions.
that sounds a little like the acquisition strategy used by Sun, so maybe
misery loves company.

Think that listening to layering is old news and everybody should know
anyway? A lot can be said about the dangers of incentives for developers
but it seems that incentives based on metrics are particularly dangerous
because a simple number can rarely represent the real intent. It always
feels odd to see a book that touches on our patterns without the authors
having taken advantage of this pattern author community.
Oddly these environments tend to use very clunky, XML-based languages.

How long does the sender have to wait?

And reliable sources also tell me that we might be seeing integration
patterns focused on conversations soon.

OOPSLA is in even bigger trouble as it has two O's. I think Dragos'
Orchestration Patterns might give us some better appreciation for these
types of  features. " The panel was dotted with memorable quotes from
some of the more memorable names in the history of software engineering:
"Software design is rarely the subject of a lawsuit.

Systems do not query other systems for information but instead keep
their own copy of the required data and listen to updates as they occur.

Just thinking a bit harder and putting special emphasis on the way your
code reads often gets you leaps and bounds ahead of hard-to-understand
everyday code. Now who would want to argue with Martin Fowler?
Interestingly, though, some talks also focused on areas where objects
would be very useful but are not utilized. The Time and Money library
does not hide these concepts but instead makes them explicit. It would
look at the current screen and find the label ADDRESS.

Now that we afforded ourselves the new level of indirection we have to
name it appropriately.

Now why couldn't this be part of the language run-time already rather
than proprietary vendor technology? All that it took was to take the
time to really understand the problem domain and to write code that
reflects this understanding.

Why would you want the source code of your program available as objects
from your program? To make matters worse, the biggest weakness of screen
scraping is that it is inherently brittle.

