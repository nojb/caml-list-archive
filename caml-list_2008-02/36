Return-Path: <Christophe.Troestler+ocaml@umh.ac.be>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 88349BC6C
	for <caml-list@yquem.inria.fr>; Fri,  1 Feb 2008 22:31:30 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAGceo0fUNQVbmWdsb2JhbACQLQEBAQEBBgIGCwgYngg
X-IronPort-AV: E=Sophos;i="4.25,292,1199660400"; 
   d="scan'208";a="7530605"
Received: from postbode01.versateladsl.be ([212.53.5.91])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 01 Feb 2008 22:31:30 +0100
Received: (qmail 31372 invoked by uid 0); 1 Feb 2008 21:31:19 -0000
Received: from unknown (HELO poincare.swapping.umh.ac.be) ([83.182.216.242])
          (envelope-sender <Christophe.Troestler+ocaml@umh.ac.be>)
          by smtp.versateladsl.be (qmail-ldap-1.03) with SMTP
          for < >; 1 Feb 2008 21:31:19 -0000
Received: from [127.0.0.1] (helo=localhost ident=trch)
	by poincare.swapping.umh.ac.be with esmtp (Exim 4.68)
	(envelope-from <Christophe.Troestler+ocaml@umh.ac.be>)
	id 1JL3Tn-0003Lc-Sd; Fri, 01 Feb 2008 22:31:23 +0100
Date: Fri, 01 Feb 2008 22:31:23 +0100 (CET)
Message-Id: <20080201.223123.562109690294574114.Christophe.Troestler+ocaml@umh.ac.be>
To: dthierbach@gmx.de
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Induction over types
From: Christophe TROESTLER <Christophe.Troestler+ocaml@umh.ac.be>
In-Reply-To: <20080131214336.GA11358@feanor>
References: <47A20799.4030706@wp.pl>
	<4a051d930801311018k6aa4b8bdge32400c6a36b9b78@mail.gmail.com>
	<20080131214336.GA11358@feanor>
X-Face: #2fb%mPx>rRL@4ff~TVgZ"<[:,oL"`TUEGK/[8/qb58~C>jR(x4A+v/n)7BgpEtIph_neoLKJBq0JBY9:<qMr[nclFSC*8GVW;&@q*7^R?u"i{y>}8v|j
Organization: University of Mons-Hainaut
X-Mailer: Mew version 5.2.52 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=iso-8859-15
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; christophe:01 troestler:01 christophe:01 troestler:01 ocaml:01 0100,:01 recursion:01 recursive:01 recursive:01 quantifiers:01 ocaml:01 sig:01 val:01 val:01 struct:01 

On Thu, 31 Jan 2008 22:43:36 +0100, Dirk Thierbach wrote:
> 
> type 'a deep_trie = Inner of 'a | Nest of ('a list) deep_trie
> 
> But to deal with this type, we need what is called polymorphic
> recursion -- inside a recursive definition, the recursive function
> must still have the quantifiers, so it can be used for a different
> type. This can only work if the type is known in advance, and the
> only way to encode this into OCaml at the moment is with a record-type.

Actually, a nice way to do the same and which is much more readable
(at heart, it is the very same solution) is to use recursive modules
(their semantic are not completely fixed but I guess the following
should work even in the future):

module rec Deep : sig
  type 'a trie = Inner of 'a | Nest of ('a list) trie
  val map : ('a -> 'b) -> 'a trie -> 'b trie
  val rev_map : ('a -> 'b) -> 'a trie -> 'b trie
end = struct
  type 'a trie = Inner of 'a | Nest of ('a list) trie
  let map f = function
    | Inner x -> Inner(f x)
    | Nest l -> Nest(Deep.map (List.map f) l)
  let rev_map f = function
    | Inner x -> Inner(f x)
    | Nest l -> Nest(Deep.map (List.rev_map f) l)
end;;

open Deep;;

> let y = Nest (Nest (Inner [[1;2]; [3;4]]))

# Deep.rev_map (fun x -> x) y;;
- : int Deep.trie = Nest (Nest (Inner [[4; 3]; [2; 1]]))

My 0.02¤,
ChriS

