Return-Path: <Tiphaine.Turpin@free.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 3E627BBCA
	for <caml-list@yquem.inria.fr>; Fri, 29 Feb 2008 15:39:30 +0100 (CET)
X-IronPort-AV: E=Sophos;i="4.25,426,1199660400"; 
   d="scan'208";a="7856303"
Received: from arvin.irisa.fr (HELO [131.254.11.86]) ([131.254.11.86])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 29 Feb 2008 15:39:30 +0100
Message-ID: <47C81829.4010505@free.fr>
Date: Fri, 29 Feb 2008 15:35:21 +0100
From: "Tiphaine.Turpin" <Tiphaine.Turpin@free.fr>
User-Agent: Thunderbird 1.5.0.10 (X11/20070303)
MIME-Version: 1.0
To: Keiko Nakata <keiko@kurims.kyoto-u.ac.jp>
Cc: garrigue@math.nagoya-u.ac.jp, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] OO programming
References: <20080226.151750.16504093.garrigue@math.nagoya-u.ac.jp>	<47C4AE08.5000604@free.fr>	<20080227.103733.43387508.garrigue@math.nagoya-u.ac.jp> <20080228.173429.68546494.keiko@kurims.kyoto-u.ac.jp>
In-Reply-To: <20080228.173429.68546494.keiko@kurims.kyoto-u.ac.jp>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; functors:01 functors:01 recursive:01 camlp:01 syntax:01 camlp:01 syntax:01 encodings:01 beginner's:01 ocaml:01 bug:01 beginners:01 caml-list:01 caml-list:01 bin:01 

Keiko Nakata a écrit :
> Hello,
>
>   
>>> As for extension, I'm fully satisfied. But the verbosity level is 
>>> annoying for scalability...
>>>       
>> Well, yes, that's always the problem with functors...
>>     
>
> Since there are some people (including me) 
> who are interested in using functors and recursive modules 
> in the style of object-oriented context, 
>   
Do you mean including classes in functors, as Jacques Garrigue 
described, or using modules like classes ?

> I thought that it could be useful to devise 
> a (camlp4) syntax extension which mitigates this a bit painful verbosity.
camlp4 extensions may help. I already used some for objects (related to 
initializers), and I plan to investigate it further, possibly borrowing 
code from Jacques Garrigue. In the context of functors, the problem is 
that a lot of code would probably remain specific and still need to be 
written by hand, for example, the row types for classes...

Tiphaine Turpin
>  
>
> At the moment, I have no idea which syntax is general enough and intuitive for us,
> but as far as I understand we always follow similar encodings. 
>
> With best regards,
> Keiko
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>   

