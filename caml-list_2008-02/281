Return-Path: <pierre.weis@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.8 required=5.0 tests=AWL,ML_MARKETING 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 79B12BBC1;
	Wed, 13 Feb 2008 19:04:12 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAKO/skfAXQInh2dsb2JhbACQPQEBAQgKKYEVm2I
X-IronPort-AV: E=Sophos;i="4.25,347,1199660400"; 
   d="scan'208";a="8037298"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 13 Feb 2008 19:04:12 +0100
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m1DI3tPC027420
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK);
	Wed, 13 Feb 2008 19:04:12 +0100
From: pierre.weis@inria.fr (Pierre Weis)
X-IronPort-AV: E=Sophos;i="4.25,347,1199660400"; 
   d="scan'208";a="7279620"
Received: from yquem.inria.fr ([128.93.8.37])
  by mail2-relais-roc.national.inria.fr with ESMTP; 13 Feb 2008 19:04:09 +0100
Received: by yquem.inria.fr (Postfix, from userid 24253)
	id E83BEBBC1; Wed, 13 Feb 2008 19:04:11 +0100 (CET)
To: caml-announce@inria.fr, caml-list@inria.fr
Subject: New release of moca
Message-Id: <20080213180411.E83BEBBC1@yquem.inria.fr>
Date: Wed, 13 Feb 2008 19:04:11 +0100 (CET)
X-Miltered: at concorde with ID 47B3310B.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; weis:01 weis:01 high-level:01 invariants:01 invariants:01 bazar-ocaml:01 constructors:01 implements:01 constructors:01 programmer's:01 programmer's:01 compilation:01 rewriting:01 compiler:01 compiler:01 


             Relational types in Caml

We are pleased to announce the 0.5.0 version of Moca, a general construction
functions generator for relational types in Objective Caml.

In short:
=========
  Moca allows the high-level definition and automatic management of
complex invariants for data types; Moca also supports the automatic generation
of maximally shared values, independantly or in conjunction with the 
declared invariants.

Moca's home page is http://moca.inria.fr/
Moca's source files can be found at
       ftp://ftp.inria.fr/INRIA/caml-light/bazar-ocaml/moca-0.5.0.tgz

Moca is developped by Pierre Weis and Frédéric Blanqui, Richard Bonichon and
Laura Lowenthal (see the file AUTHORS in the main directory of the
distribution).

In long:
========

  A relational type is a concrete type that declares invariants or relations
that are verified by its constructors. For each relational type definition,
Moca compiles a set of Caml construction functions that implements the
declared relations.

Moca supports two kinds of relations:
- algebraic relations (such as associativity or commutativity of a binary
  constructor),
- general rewrite rules that map some pattern of constructors and variables to
  some arbitrary user's defined expression.

Algebraic relations are primitive, so that Moca ensures the correctness of
their treatment. By contrast, the general rewrite rules are under the
programmer's responsability, so that the desired properties must be verified
by a programmer's proof before compilation (including for completeness,
termination, and confluence of the resulting term rewriting system).

What's new in this release ?
============================

* Lot of work on the documentation: a research paper has been published to
  described the framework at ESOP'07, talks about relational types and the
  internal of the compiler are included in the distribution.

* An automatic test generation facility has been developped to test the
  specifications written in Moca.

* Arbitrary Caml code can be written in the .mlm files (any sequence of Caml
  signature items are allowed as extra algebraic properties of
  generators). This ``external'' code is included as is in the resulting module.

* Commutativity relation gets an extra argument which gives the order used to sort
  the combs (or lists in case of a vary-adic generator).

* Source code of the compiler has been documented.

* No more shell scripts: the compiler is entirely written in Caml.

* User's defined rules have been generalized from pattern -> pattern
  to pattern -> expr.

An example
==========

The Moca compiler (named mocac) takes as input a file with extension .mlm
that contains the definition of a relational type (a type with ``private''
constructors, each constructor possibly decorated with a set of invariants or
algebraic relations).

For instance, consider peano.mlm, that defines the type peano with a binary
constructor Plus that is associative, treats the nullary constructor Zero as
its neutral element, and such that the rewrite rule Plus (Succ n, p) -> Succ
(Plus (n, p)) should be used whenever an instance of its left hand side
appears in a peano value:

     type peano = private
        | Zero
        | Succ of peano
        | Plus of peano * peano
        begin
          associative
          neutral (Zero)
          rule Plus (Succ n, p) -> Succ (Plus (n, p))
        end;;

>From this relational type definition, mocac will generate a regular Objective
Caml data type implementation, as a usual two files module.

>From peano.mlm, mocac produces the following peano.mli interface file:

     type peano = private
        | Zero
        | Succ of peano
        | Plus of peano * peano
     val plus : peano * peano -> peano
     val zero : peano
     val succ : peano -> peano

mocac also writes the following peano.ml file that implements this interface:

     type peano =
       | Zero
       | Succ of peano
       | Plus of peano * peano

     let rec plus z =
       match z with
       | Succ n, p -> succ (plus (n, p))
       | Zero, y -> y
       | x, Zero -> x
       | Plus (x, y), z -> plus (x, plus (y, z))
       | x, y -> insert_in_plus x y
     and insert_in_plus x u =
       match x, u with
       | _ -> Plus (x, u)
     and zero = Zero
     and succ x1 = Succ x1

To prove these construction functions to be correct, you would prove that
  - no Plus (Zero, x) nor Plus (x, Zero) can be a value in type peano,
  - for any x, y, z in peano. plus (plus (x, y), z) = plus (x, plus (y, z))
  - etc
  Hopefully, this is useless if mocac is correct: the construction functions
  respect all the declared invariants and relations.

To prove these construction functions to be incorrect, you would have to
  - find an example that violates the relations.
Hopefully, this is not possible (or please, report it!)

And, if you needed maximum sharing for peano values, you just have to compile
peano.mlm with the "--sharing" option of the mocac compiler:

$ mocac --sharing peano.mlm

would do the trick !

Conclusion:
===========
Moca is still evolving and a lot of proofs has still to be done about the
compiler and its algorithms.

Anyhow, we think Moca to be already usable and worth to give it a try.
Don't hesitate to send your constructive remarks and contributions !

Pierre Weis & Frédéric Blanqui.

