Return-Path: <Tiphaine.Turpin@free.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id BC119BBCA
	for <caml-list@yquem.inria.fr>; Wed, 27 Feb 2008 15:08:39 +0100 (CET)
X-IronPort-AV: E=Sophos;i="4.25,413,1199660400"; 
   d="scan'208";a="23107507"
Received: from arvin.irisa.fr (HELO [131.254.11.86]) ([131.254.11.86])
  by mail4-relais-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 27 Feb 2008 15:08:39 +0100
Message-ID: <47C56DEF.7010207@free.fr>
Date: Wed, 27 Feb 2008 15:04:31 +0100
From: "Tiphaine.Turpin" <Tiphaine.Turpin@free.fr>
User-Agent: Thunderbird 1.5.0.10 (X11/20070303)
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] OO programming
References: <47BD44FE.3050001@irisa.fr>	<20080226.151750.16504093.garrigue@math.nagoya-u.ac.jp>	<47C4AE08.5000604@free.fr> <20080227074029.GB1494@feanor>
In-Reply-To: <20080227074029.GB1494@feanor>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; 0100,:01 high-level:01 recursive:01 unstructured:01 unreadable:01 beginner's:01 ocaml:01 bug:01 beginners:01 wrote:01 abstract:01 caml-list:01 caml-list:01 bin:01 caml:02 

Dirk Thierbach a écrit :
> On Wed, Feb 27, 2008 at 01:25:44AM +0100, Tiphaine.Turpin wrote:
>   
>> First, my desired use of objects is not (reduced to) programming a gui. 
>>     
>
> When I said "let's look at a concrete example", I meant it. It might
> be very instructive. If your program is too long, just give an high-level
> overview of the situation, this should be enough for a start.
>   
I'm affraid my existing "real" code wouldn't be any usefull: it is very 
long indeed (>1000loc), fits mainly in one recursive definition of 
classes (with heavy and unstructured use of multiple inheritance and 
virtual classes), and is unreadable (application domain already complex, 
+ all features (gui, etc.) mixed in the same objects...), which led me 
to drop the project until I find new ideas for structuring it (which I 
am seeking here). The very abstract extension cases that stated earlier 
are the best solution that I can think of to put some structure in all 
that, and that's why I'm trying to get the possible best way of 
implementing this "pattern".

Tiphaine Turpin

> - Dirk
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>   

