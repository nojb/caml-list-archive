Return-Path: <yminsky@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.3 required=5.0 tests=AWL,HTML_MESSAGE,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 406D5BC6B
	for <caml-list@yquem.inria.fr>; Mon, 11 Feb 2008 03:16:31 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAACY/r0fAXQInh2dsb2JhbACCPDWNSgEBAQgKKZIog1Q
X-IronPort-AV: E=Sophos;i="4.25,331,1199660400"; 
   d="scan'208";a="7146755"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 11 Feb 2008 03:16:32 +0100
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m1B2GVVM015095
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Mon, 11 Feb 2008 03:16:31 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAOs+r0fRVca6mGdsb2JhbACCPDWNSgEBAQEBBgQECQoYkiiDVQ
X-IronPort-AV: E=Sophos;i="4.25,331,1199660400"; 
   d="scan'208";a="7882035"
Received: from rv-out-0910.google.com ([209.85.198.186])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 11 Feb 2008 03:16:27 +0100
Received: by rv-out-0910.google.com with SMTP id g11so2961408rvb.57
        for <caml-list@inria.fr>; Sun, 10 Feb 2008 18:16:25 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:references;
        bh=kq7fPVnkeXsMwplOQQ4yaU4drv4mHE/LvbRLRlCJF60=;
        b=wPZTjPpBr4Z0an/yVvltI+hMIKekK+71Yqzl8K+568hELZxkLSOzmJLAvkcKgA5pRfzedBpGHS6WiTwjycMAO/wMNs8EGYzTKWPdKHkqap8kfxxqNoJkw+Am2gELpauWvFKA7+lRtLaHb58AegKjY2bWeHev28dII4/jquDZmxg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=j8k9jmGgI4KO+LMe51bRSrblcv3EYltwm9DWYJvxCykd2W9Th8L9pWNCPfUqiEG4OI/ZZGp4MqLmIzZah0ks+yuy4U4Nn/HgR1FuSc61erA9IYWavP/oyoArCvAxjJcciCSghMocXBo74AoTGiLNMBJCCwWFZ1xtLXt7kLzQJlA=
Received: by 10.141.114.21 with SMTP id r21mr1562559rvm.154.1202696185661;
        Sun, 10 Feb 2008 18:16:25 -0800 (PST)
Received: by 10.141.153.18 with HTTP; Sun, 10 Feb 2008 18:16:25 -0800 (PST)
Message-ID: <891bd3390802101816r6812a574nc074abd67faf2039@mail.gmail.com>
Date: Sun, 10 Feb 2008 21:16:25 -0500
From: "Yaron Minsky" <yminsky@gmail.com>
Reply-To: yminsky@gmail.com
To: "David Teller" <David.Teller@univ-orleans.fr>
Subject: Re: [Caml-list] [OSR] Exceptionless error management, take 2
Cc: OCaml <caml-list@inria.fr>
In-Reply-To: <1202681123.6278.40.camel@Blefuscu>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_3994_16502546.1202696185638"
References: <1202396482.6084.5.camel@Blefuscu>
	 <891bd3390802101047o187a94fch8f66a6c8a457d391@mail.gmail.com>
	 <1202681123.6278.40.camel@Blefuscu>
X-Miltered: at concorde with ID 47AFAFFF.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; yaron:01 minsky:01 yminsky:01 univ-orleans:01 yaron:01 minsky:01 monadic:01 monadic:01 indirection:01 monads:01 univ-orleans:01 lifo:01 lifo:01 nomenclature:01 pipelines:01 

------=_Part_3994_16502546.1202696185638
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Feb 10, 2008 5:05 PM, David Teller <David.Teller@univ-orleans.fr> wrote:

> On Sun, 2008-02-10 at 13:47 -0500, Yaron Minsky wrote:
> > A couple of quick thoughts about the proposal:
> >       * I don't understand the motivation behind separating out
> >         may_fail and status.  In the case where no explicit error is
> >         returned, we're happy to return an ordinary option.  Why not
> >         return a status when we want to return an error condition? And
> >         I don't understand the argument about wanting to delay
> >         evaluation until the function result is called.  Why is that
> >         good, and if it's good, why do we still support functions that
> >         return options?  The whole thing seems to add verbosity with
> >         little gain.
>
> I agree that this is the most arguable part of this recommendation
> candidate. I introduced it because
> * it makes possible to decide at a later stage between several
> mechanisms for delivering errors from within libraries
> * some of these mechanisms make possible to use fully monadic
> exceptionless error management, without the usual high cost of fully
> monadic exceptionless error management


Unless I misunderstand (which is quite likely) you can do fully monadic
error handling without this extra level of indirection.  i.e.:

let bind v f = match v with Error _ as x -> x | Ok y -> f y
let return v = Ok v

There you go, a fully-functioning monad.  Or really a family of monads,
since you basically get a distinct monad for each type of value in the error
position.

I really think we should get far enough in thinking this through to get a
workable suggestion the first time, rather than add this extra bit of
pervasive syntactic noise to allow for some possible future change later.


>
> I have put together three different implementations for such mechanisms
> [1] and an example of fully monadic exceptionless error management [2].
>
> [1]
>
> http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/exceptionless.ml
> [2]
>
> http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/test_monad.ml
>      *
>      *
> >       * I think some attention on nomenclature is in order.  In the
> >         libraries Jane Street uses, we have something similar to
> >         status (called "result"), but the type is "Ok of 'a | Error of
> >         'b" rather than "Success of 'a | Error of 'b", simply for
> >         terseness.  Also, having a function called "result" which
> >         converts a "may_fail" into a "status" seems like one name too
> >         many.  I would call both the function and the type the same
> >         thing (either status or result).  Unless, of course, you want
> >         to imply something material about the operation, in which case
> >         calling it "eval" or somesuch would make sense.
>
> Interesting question. You are correct that "eval" might make more sense
> and I believe nobody would object to "Ok|Error" instead of "Success|
> Error". If terseness is a concern, "Bad" might even make a shorter
> replacement for "Error", although this would probably be harder to read.


I wouldn't mind type ('a,'b) Result = Ok of 'a | Err of 'b.  Bad seems,
well, bad.


> >       * I don't understand why this proposal is only for functional
> >         data types.  I didn't find the motivation given in the OSR for
> >         this convincing.  I feel like the use of exceptions involves
> >         roughly the same tradeoffs when you're using imperative and
> >         functional code.  If you have long functional pipelines, doing
> >         exception handling at each stage is a pain, much as it is if
> >         you do long sequences of imperative operations.  That's why I
> >         think the goal should not be for the interfaces to be
> >         "exceptionless" so much as to make it easier to keep track of
> >         where exceptions might and might not be thrown, so that the
> >         reader of a piece of code knows where to stop and worry about
> >         exceptions.
>
> My intuition is that managing errors with ('a, 'b) status (or whatever
> this name may become) is mostly functional in the first place. I have in
> mind functions such as Unix.rename, which return nothing but may fail.
> Without exceptions, one would need to stop at each step to check if no
> error has occurred.
>
> Of course, we can handle this with monadic operators, just as we would
> handle errors in functional code. I believe this monadic approach is as
> close as we can get to having errors tracked by the type system without
> requiring the user to handle them at each step along the road.
>
> Now, I admit that I usually write functional code, so input from people
> dealing in imperative code in OCaml would be interesting.


I really think the issue is the same for imperative or functional code.
It's easy enough, even in an imperative version, to have a function like
this:

let throw = function Ok x -> x | Error e -> failwith e

At least assuming that the thing inside the error is a string.  It could
also be an exception, which would then only need to be raised.

I do think it would be helpful to have examples of libraries using these
idioms.  For what it's worth, in a few weeks we hope to release a version of
Jane Street's standard library (which we call "core"), which has a bunch of
examples of these kinds of error-handling patterns.  One thing that's nice
about our library is that it has actually been used in anger, and so we're
pretty sure that the approaches we've taken are at least reasonably usable
in practice.

(As a side, note, I do think there is a lot of charm for using polymorphic
variants for error cases.  It's quite lightweight, and makes for very
pleasant and explicit function signatures.)

y


>
> > y
>
> Cheers,
>  David
> --
> David Teller
>  Security of Distributed Systems
>  http://www.univ-orleans.fr/lifo/Members/David.Teller
>  Angry researcher: French Universities need reforms, but the LRU act
> brings liquidations.
>
>

------=_Part_3994_16502546.1202696185638
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Feb 10, 2008 5:05 PM, David Teller &lt;<a href="mailto:David.Teller@univ-orleans.fr">David.Teller@univ-orleans.fr</a>&gt; wrote:<br><div class="gmail_quote"><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div class="Ih2E3d">On Sun, 2008-02-10 at 13:47 -0500, Yaron Minsky wrote:<br>&gt; A couple of quick thoughts about the proposal:<br>&gt; &nbsp; &nbsp; &nbsp; * I don&#39;t understand the motivation behind separating out<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; may_fail and status. &nbsp;In the case where no explicit error is<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; returned, we&#39;re happy to return an ordinary option. &nbsp;Why not<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; return a status when we want to return an error condition? And<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; I don&#39;t understand the argument about wanting to delay<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; evaluation until the function result is called. &nbsp;Why is that<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; good, and if it&#39;s good, why do we still support functions that<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; return options? &nbsp;The whole thing seems to add verbosity with<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; little gain.<br><br></div>I agree that this is the most arguable part of this recommendation<br>candidate. I introduced it because<br>* it makes possible to decide at a later stage between several<br>mechanisms for delivering errors from within libraries<br>
* some of these mechanisms make possible to use fully monadic<br>exceptionless error management, without the usual high cost of fully<br>monadic exceptionless error management</blockquote><div><br>Unless I misunderstand (which is quite likely) you can do fully monadic error handling without this extra level of indirection.&nbsp; i.e.:<br>
<br><div style="margin-left: 40px;"><span style="font-family: courier new,monospace;">let bind v f = match v with Error _ as x -&gt; x | Ok y -&gt; f y</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">let return v = Ok v</span><span style="font-family: courier new,monospace;"></span><br>
</div><br>There you go, a fully-functioning monad.&nbsp; Or really a family of monads, since you basically get a distinct monad for each type of value in the error position.<br><br>I really think we should get far enough in thinking this through to get a workable suggestion the first time, rather than add this extra bit of pervasive syntactic noise to allow for some possible future change later.<br>
&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>I have put together three different implementations for such mechanisms<br>[1] and an example of fully monadic exceptionless error management [2].<br>
<br>[1]<br><a href="http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/exceptionless.ml" target="_blank">http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/exceptionless.ml</a><br>
[2]<br><a href="http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/test_monad.ml" target="_blank">http://www.univ-orleans.fr/lifo/Members/David.Teller/software/exceptionless/test_monad.ml</a><br> &nbsp; &nbsp; &nbsp;*<br>
 &nbsp; &nbsp; &nbsp;*<br>&gt; &nbsp; &nbsp; &nbsp; * I think some attention on nomenclature is in order. &nbsp;In the<br><div class="Ih2E3d">&gt; &nbsp; &nbsp; &nbsp; &nbsp; libraries Jane Street uses, we have something similar to<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; status (called &quot;result&quot;), but the type is &quot;Ok of &#39;a | Error of<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; &#39;b&quot; rather than &quot;Success of &#39;a | Error of &#39;b&quot;, simply for<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; terseness. &nbsp;Also, having a function called &quot;result&quot; which<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; converts a &quot;may_fail&quot; into a &quot;status&quot; seems like one name too<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; many. &nbsp;I would call both the function and the type the same<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; thing (either status or result). &nbsp;Unless, of course, you want<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; to imply something material about the operation, in which case<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; calling it &quot;eval&quot; or somesuch would make sense.<br><br></div>Interesting question. You are correct that &quot;eval&quot; might make more sense<br>and I believe nobody would object to &quot;Ok|Error&quot; instead of &quot;Success|<br>
Error&quot;. If terseness is a concern, &quot;Bad&quot; might even make a shorter<br>replacement for &quot;Error&quot;, although this would probably be harder to read.</blockquote><div><br>I wouldn&#39;t mind <font face="courier new,monospace">type (&#39;a,&#39;b) Result = Ok of &#39;a | Err of &#39;b<font face="arial,sans-serif">.&nbsp; Bad seems, well, bad.</font></font><br>
<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>&gt; &nbsp; &nbsp; &nbsp; * I don&#39;t understand why this proposal is only for functional<br>
<div class="Ih2E3d">&gt; &nbsp; &nbsp; &nbsp; &nbsp; data types. &nbsp;I didn&#39;t find the motivation given in the OSR for<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; this convincing. &nbsp;I feel like the use of exceptions involves<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; roughly the same tradeoffs when you&#39;re using imperative and<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; functional code. &nbsp;If you have long functional pipelines, doing<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; exception handling at each stage is a pain, much as it is if<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; you do long sequences of imperative operations. &nbsp;That&#39;s why I<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; think the goal should not be for the interfaces to be<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; &quot;exceptionless&quot; so much as to make it easier to keep track of<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; where exceptions might and might not be thrown, so that the<br>
&gt; &nbsp; &nbsp; &nbsp; &nbsp; reader of a piece of code knows where to stop and worry about<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp; exceptions.<br><br></div>My intuition is that managing errors with (&#39;a, &#39;b) status (or whatever<br>this name may become) is mostly functional in the first place. I have in<br>
mind functions such as Unix.rename, which return nothing but may fail.<br>Without exceptions, one would need to stop at each step to check if no<br>error has occurred.<br><br>Of course, we can handle this with monadic operators, just as we would<br>
handle errors in functional code. I believe this monadic approach is as<br>close as we can get to having errors tracked by the type system without<br>requiring the user to handle them at each step along the road.<br><br>Now, I admit that I usually write functional code, so input from people<br>
dealing in imperative code in OCaml would be interesting.</blockquote><div><br>I really think the issue is the same for imperative or functional code.&nbsp; It&#39;s easy enough, even in an imperative version, to have a function like this:<br>
<br><span style="font-family: courier new,monospace;"></span><div style="margin-left: 40px;"><span style="font-family: courier new,monospace;">let throw = function Ok x -&gt; x | Error e -&gt; failwith e<br></span></div><font face="arial,sans-serif"><br>
At least assuming that the thing inside the error is a string.&nbsp; It could also be an exception, which would then only need to be raised.<br><br>I do think it would be helpful to have examples of libraries using these idioms.&nbsp; For what it&#39;s worth, in a few weeks we hope to release a version of Jane Street&#39;s standard library (which we call &quot;core&quot;), which has a bunch of examples of these kinds of error-handling patterns.&nbsp; One thing that&#39;s nice about our library is that it has actually been used in anger, and so we&#39;re pretty sure that the approaches we&#39;ve taken are at least reasonably usable in practice.<br>
<br>(As a side, note, I do think there is a lot of charm for using polymorphic variants for error cases.&nbsp; It&#39;s quite lightweight, and makes for very pleasant and explicit function signatures.)<br><br>y</font><span style="font-family: courier new,monospace;"></span><br>
<span style="font-family: courier new,monospace;"></span>&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>&gt; y<br><br>Cheers,<br>
<font color="#888888">&nbsp;David<br></font><div><div></div><div class="Wj3C7c">--<br>David Teller<br>&nbsp;Security of Distributed Systems<br> &nbsp;<a href="http://www.univ-orleans.fr/lifo/Members/David.Teller" target="_blank">http://www.univ-orleans.fr/lifo/Members/David.Teller</a><br>
&nbsp;Angry researcher: French Universities need reforms, but the LRU act brings liquidations.<br><br></div></div></blockquote></div><br>

------=_Part_3994_16502546.1202696185638--

