Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id D7CB3BC6C
	for <caml-list@yquem.inria.fr>; Thu,  7 Feb 2008 17:28:26 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAJrAqkfUnw6EhWdsb2JhbACCN416AQEBCAQGBwgTB5tu
X-IronPort-AV: E=Sophos;i="4.25,316,1199660400"; 
   d="scan'208";a="22365853"
Received: from pih-relay05.plus.net ([212.159.14.132])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 07 Feb 2008 17:28:26 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay05.plus.net with esmtp (Exim) id 1JN9bh-00050W-GZ
	for caml-list@yquem.inria.fr; Thu, 07 Feb 2008 16:28:18 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Performance-question
Date: Thu, 7 Feb 2008 16:23:54 +0000
User-Agent: KMail/1.9.7
References: <1202218433.47a865c1d3619@webmail.in-berlin.de> <CE49CA70-EEE5-4B54-9595-FB41B69E8BFF@inria.fr>
In-Reply-To: <CE49CA70-EEE5-4B54-9595-FB41B69E8BFF@inria.fr>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200802071623.54116.jon@ffconsultancy.com>
X-Plusnet-Relay: d87b1eb7666933c1a64f1cf30afa77d0
X-Spam: no; 0.00; damien:01 compactor:01 compactor:01 ocaml:01 ocaml:01 compaction:01 frog:98 doligez:01 wrote:01 caml-list:01 behaviour:01 module:03 generally:04 exhibit:07 certainly:09 

On Thursday 07 February 2008 16:13:25 Damien Doligez wrote:
> More generally, I'm looking for (small) programs that exhibit this
> kind of behaviour: they call the compactor frequently and their memory
> usage grows without bound when the compactor is disabled.

The "n"th-nearest neighbor example from OCaml for Scientists is certainly very 
allocation intensive because it makes extensive use of the Set module:

  http://www.ffconsultancy.com/products/ocaml_for_scientists/complete/

but I'm not sure that its memory use will grow unbounded if compaction is 
disabled though.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

