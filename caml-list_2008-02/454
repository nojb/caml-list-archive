Return-Path: <keiko@kurims.kyoto-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 55FADBBCB
	for <caml-list@yquem.inria.fr>; Thu, 28 Feb 2008 09:35:02 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAHsBxkeCNhAB/2dsb2JhbACuAw
X-IronPort-AV: E=Sophos;i="4.25,418,1199660400"; 
   d="scan'208";a="9693516"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 28 Feb 2008 09:35:00 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m1S8YT3q007228;
	Thu, 28 Feb 2008 17:34:29 +0900 (JST)
Date: Thu, 28 Feb 2008 17:34:29 +0900 (JST)
Message-Id: <20080228.173429.68546494.keiko@kurims.kyoto-u.ac.jp>
To: garrigue@math.nagoya-u.ac.jp
Cc: Tiphaine.Turpin@free.fr, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] OO programming
From: Keiko Nakata <keiko@kurims.kyoto-u.ac.jp>
In-Reply-To: <20080227.103733.43387508.garrigue@math.nagoya-u.ac.jp>
References: <20080226.151750.16504093.garrigue@math.nagoya-u.ac.jp>
	<47C4AE08.5000604@free.fr>
	<20080227.103733.43387508.garrigue@math.nagoya-u.ac.jp>
X-Mailer: Mew version 4.2 on Emacs 20.7 / Mule 4.1 (AOI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; functors:01 functors:01 recursive:01 camlp:01 syntax:01 syntax:01 encodings:01 caml-list:01 modules:02 programming:03 problem:05 style:93 extension:06 extension:06 context:06 

Hello,

> > As for extension, I'm fully satisfied. But the verbosity level is 
> > annoying for scalability...
> 
> Well, yes, that's always the problem with functors...

Since there are some people (including me) 
who are interested in using functors and recursive modules 
in the style of object-oriented context, 
I thought that it could be useful to devise 
a (camlp4) syntax extension which mitigates this a bit painful verbosity. 

At the moment, I have no idea which syntax is general enough and intuitive for us,
but as far as I understand we always follow similar encodings. 

With best regards,
Keiko

