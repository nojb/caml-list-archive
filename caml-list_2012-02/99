Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q1E0arC7024036
	for <caml-list@sympa-roc.inria.fr>; Tue, 14 Feb 2012 01:36:53 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhUBADyrOU/RVdS2kGdsb2JhbABDnx40iBkBiDAIIgEBAQEJCQ0HFAQjgXIBAQEDARICExkBGxILAQMBCwYFCw0NISEBAREBBQEKEgYTEhCHWgmcFwqLcYJwhSc/iHMCBQuIOYMKKwUFHx4Ig32EJASCXIVujGiLEIMVPYQi
X-IronPort-AV: E=Sophos;i="4.73,414,1325458800"; 
   d="scan'208";a="131217254"
Received: from mail-wi0-f182.google.com ([209.85.212.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 14 Feb 2012 01:36:47 +0100
Received: by wibhn14 with SMTP id hn14so6390358wib.27
        for <caml-list@inria.fr>; Mon, 13 Feb 2012 16:36:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=q76s1rkBgBX+ljome8kge/VaNZJYzuSBK3BQYX94eX4=;
        b=Xy3hi+TpGTWb43ivf5kghW0ZK+f1Y0TGUE2G1xqLA2dodyxLINaw5TeOZt9vAMxXHo
         3dSG9rZbumu4J8yzJJQwDHVtkl5+5W/HSlOlCfbPS5L96kEHFyIcplNnneeyEApmWRL9
         ETI7RAI4OZRo6EW8LABs/MKauM2nj/20NIla0=
MIME-Version: 1.0
Received: by 10.216.139.9 with SMTP id b9mr7030207wej.23.1329179807285; Mon,
 13 Feb 2012 16:36:47 -0800 (PST)
Received: by 10.223.7.69 with HTTP; Mon, 13 Feb 2012 16:36:47 -0800 (PST)
In-Reply-To: <CAJ7XQb49oD8dFBaPKC69rb4Q3n8A3eAyb9Djsu+J7w2ey7+cwg@mail.gmail.com>
References: <CAOOOohRwOdr4xtt1XH2y1-9_XQ10Fq_1ocGD8i8pUSVqkHvQng@mail.gmail.com>
	<CAJ7XQb49oD8dFBaPKC69rb4Q3n8A3eAyb9Djsu+J7w2ey7+cwg@mail.gmail.com>
Date: Mon, 13 Feb 2012 17:36:47 -0700
Message-ID: <CAN=ouMTQCqrvXF6iGu_a0HQr+qB4NobXbDwESQdj0LYM2bPyAw@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Raoul Duke <raould@gmail.com>
Cc: Philippe Veber <philippe.veber@gmail.com>, caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=0016e6da7d7641802604b8e1ca97
Subject: Re: [Caml-list] Functional GUI programming: looking for good practices


--0016e6da7d7641802604b8e1ca97
Content-Type: text/plain; charset=ISO-8859-1

I've been taking a stab at this too; for a video game. The approach I'm
taking is with delimited continuations (using Oleg's delimcc). This allows
me to run UI code as a coroutine. The UI code then looks like any other
code, where user inputs are results from a function. Really, the UI code
stops, waiting for input (while the mainline coroutine runs), then returns
the input value.

An example:

let act = user (menu_of_list
  [ ("Equip",`Equip);
    ("Spell",`Spell);
    ("End",`End) ] ) in

match act with
| Some `Spell ->
    try
      let spellList = (* build a list of casting options for this character
*) in
      let spell = ?.(user (menu_of_list spellList)) in
      let target = ?.(user (select (target_filter spell) scene)) in
      Cast.cast id spell target
    with OptionNone -> ()

This example creates a small menu of special options with the given string
labels "Equip", etc. The "user" function is a yield of the UI coroutine,
which means we await resuming with the input value. Interacting with GUI
elements is handled by querying the scene or OpenGL state based on SDL
input events. In this case clicking on the created "Spell" menu item will
return a value of Some `Spell.

Later in the code, more user interactions are handled for providing
specific spell options and then targets. (The "?." prefix operator is just
turning None values into exceptions, to implement user abort.)

I have a yield function, using Delimcc's shift and abort:

let yield level fn =
  shift level (fun k ->
    fn k;
    abort level () )

which is the basis of the 'user' function in the UI:

  let user fn = yield ui_process fn

So far, I'm not sure how well this works out for a complete project. I like
it so far, but I have complexity growing in some "update loop" stuff, which
are little closures I add to be run each frame-update for reacting to
mouse-over/hover.

I've tried dabbling with FRP, but it kept getting hairy too. I will
probably use it to replace my kludge of "update loop" closures. Someday,
someone will figure out something slick, whether it's a way to use these
tools, or something new. I'm at least happy not using "signals and slots"!

Good luck in the hunt for elegant UI (code)!

 Tony

Inside the UI code, the 'process' delimits the UI coroutine
On Mon, Feb 13, 2012 at 11:13 AM, Raoul Duke <raould@gmail.com> wrote:

> On Mon, Feb 13, 2012 at 3:01 AM, Philippe Veber
> <philippe.veber@gmail.com> wrote:
> > than expected, for example with layout management. In order to compute a
> > layout for the widgets, some information has to travel bottom up the
> widget
> > hierarchy, and some goes top down. While there is a well-founded order
> for
>
> academic thoughts from others:
>
> http://lambda-the-ultimate.org/node/2913
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--0016e6da7d7641802604b8e1ca97
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I&#39;ve been taking a stab at this too; for a video game. The approach I&#=
39;m taking is with delimited continuations (using Oleg&#39;s delimcc). Thi=
s allows me to run UI code as a coroutine. The UI code then looks like any =
other code, where user inputs are results from a function. Really, the UI c=
ode stops, waiting for input (while the mainline coroutine runs), then retu=
rns the input value.<div>
<br></div><div>An example:</div><div><br></div><div><div>let act =3D user (=
menu_of_list</div><div>=A0 [ (&quot;Equip&quot;,`Equip);</div><div>=A0 =A0 =
(&quot;Spell&quot;,`Spell);</div><div>=A0 =A0 (&quot;End&quot;,`End) ] ) in=
</div><div>
<br></div><div>match act with</div><div>| Some `Spell -&gt;</div><div>=A0 =
=A0 try</div><div>=A0 =A0 =A0 let spellList =3D (* build a list of casting =
options for this character *) in</div><div>=A0 =A0 =A0 let spell =3D ?.(use=
r (menu_of_list spellList)) in</div>
<div>=A0 =A0 =A0 let target =3D ?.(user (select (target_filter spell) scene=
)) in</div><div>=A0 =A0 =A0 Cast.cast id spell target</div><div>=A0 =A0 wit=
h OptionNone -&gt; ()</div><div><br></div><div>This example creates a small=
 menu of special options with the given string labels &quot;Equip&quot;, et=
c. The &quot;user&quot; function is a yield of the UI coroutine, which mean=
s we await resuming with the input value. Interacting with GUI elements is =
handled by querying the scene or OpenGL state based on SDL input events. In=
 this case clicking on the created &quot;Spell&quot; menu item will return =
a value of Some `Spell.</div>
<div><br></div><div>Later in the code, more user interactions are handled f=
or providing specific spell options and then targets. (The &quot;?.&quot; p=
refix operator is just turning None values into exceptions, to implement us=
er abort.)</div>
<div><br></div>I have a yield function, using Delimcc&#39;s shift and abort=
:</div><div><div><br></div><div>let yield level fn =3D</div><div>=A0 shift =
level (fun k -&gt;</div><div>=A0 =A0 fn k;</div><div>=A0 =A0 abort level ()=
 )</div>
<div><br></div><div>which is the basis of the &#39;user&#39; function in th=
e UI:</div><div><br></div><div>=A0 let user fn =3D yield ui_process fn</div=
><div><br></div><div>So far, I&#39;m not sure how well this works out for a=
 complete project. I like it so far, but I have complexity growing in some =
&quot;update loop&quot; stuff, which are little closures I add to be run ea=
ch frame-update for reacting to mouse-over/hover.</div>
<div><br></div><div>I&#39;ve tried dabbling with FRP, but it kept getting h=
airy too. I will probably use it to replace my kludge of &quot;update loop&=
quot; closures. Someday, someone will figure out something slick, whether i=
t&#39;s a way to use these tools, or something new. I&#39;m at least happy =
not using &quot;signals and slots&quot;!</div>
<div><br></div><div>Good luck in the hunt for elegant UI (code)!</div><div>=
<br></div><div>=A0Tony</div><div><br></div><div>Inside the UI code, the &#3=
9;process&#39; delimits the UI coroutine</div><div class=3D"gmail_quote">On=
 Mon, Feb 13, 2012 at 11:13 AM, Raoul Duke <span dir=3D"ltr">&lt;<a href=3D=
"mailto:raould@gmail.com">raould@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">On Mon, Feb 13, 2012 at 3:=
01 AM, Philippe Veber<br>
&lt;<a href=3D"mailto:philippe.veber@gmail.com">philippe.veber@gmail.com</a=
>&gt; wrote:<br>
&gt; than expected, for example with layout management. In order to compute=
 a<br>
&gt; layout for the widgets, some information has to travel bottom up the w=
idget<br>
&gt; hierarchy, and some goes top down. While there is a well-founded order=
 for<br>
<br>
</div>academic thoughts from others:<br>
<br>
<a href=3D"http://lambda-the-ultimate.org/node/2913" target=3D"_blank">http=
://lambda-the-ultimate.org/node/2913</a><br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</div></div></blockquote></div><br></div>

--0016e6da7d7641802604b8e1ca97--
