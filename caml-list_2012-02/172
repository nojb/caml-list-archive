Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q1MHZmOu010429
	for <caml-list@sympa-roc.inria.fr>; Wed, 22 Feb 2012 18:35:48 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnsCAOcmRU9KfVI0imdsb2JhbABDhSibZ4hIAYhkCCIBAQEKCQ0ZBiOBcwEBAQMBEgIPHQEbEgsBAwELBgULDQ0dAgIhAQERAQUBChIGExIJB4dfCZpRCosmTIJxhS0/iHMCBQuIdFiDCwFaEQEMCoRhASoGBEoGBQsKCAMEgheBFgSCXZJbhxeEAIMWPYQDgVMJ
X-IronPort-AV: E=Sophos;i="4.73,465,1325458800"; 
   d="scan'208";a="145483885"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 22 Feb 2012 18:35:42 +0100
Received: by wgbds10 with SMTP id ds10so291926wgb.9
        for <caml-list@inria.fr>; Wed, 22 Feb 2012 09:35:42 -0800 (PST)
Received-SPF: pass (google.com: domain of agarwal1975@gmail.com designates 10.180.8.164 as permitted sender) client-ip=10.180.8.164;
Authentication-Results: mr.google.com; spf=pass (google.com: domain of agarwal1975@gmail.com designates 10.180.8.164 as permitted sender) smtp.mail=agarwal1975@gmail.com; dkim=pass header.i=agarwal1975@gmail.com
Received: from mr.google.com ([10.180.8.164])
        by 10.180.8.164 with SMTP id s4mr37527164wia.6.1329932142486 (num_hops = 1);
        Wed, 22 Feb 2012 09:35:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=Zt5H5glRSzNnOcU6wsC64CzEajIIHNSTz/rkJh79CW0=;
        b=gx/3b/o2qWbCTBr2oZDTOvpA5++PcOWxzSKRm+fCzAaz8qRPXRSAp0pBUA32YQQmdj
         0FGIDCrcPpG93tqMAA5SFTHndHCn3rItfy/mtOK1J3ODGf6FinLqv9hX7fI6DZWI51LQ
         WsSCZWSxX9T1KQn8EewHVvg349ZPDUZaxx++M=
Received: by 10.180.8.164 with SMTP id s4mr31002999wia.6.1329932142312; Wed,
 22 Feb 2012 09:35:42 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.39.148 with HTTP; Wed, 22 Feb 2012 09:35:22 -0800 (PST)
In-Reply-To: <CAHJESt2Dhf0-3xQE8Tv_XAdFdcyrVViwk3y_-AOxOymbXGHZUA@mail.gmail.com>
References: <CAMu2m2L+JU2QHTAB=XuBoq8D4G_hg9NuKEW31rizyPB2+CvDVg@mail.gmail.com>
 <CAMu2m2+cyrU1N_iiOS1MjxncP00zQJ2by-y_JFDAnV7K1Yp_Yw@mail.gmail.com>
 <CAMfPyLAW_TO5A7c3HSRyxipMWFJs-pNE4rdjjRpKk4rOQi76pA@mail.gmail.com>
 <CAKR7PS8zcVqBsCvpTmNKUi1jLo6NeJh3mu5XRb-Bi7_2SBXpSg@mail.gmail.com> <CAHJESt2Dhf0-3xQE8Tv_XAdFdcyrVViwk3y_-AOxOymbXGHZUA@mail.gmail.com>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Wed, 22 Feb 2012 17:35:22 +0000
Message-ID: <CAMu2m2Ki6B_ZgYLQO-Ln5tGHYq0zrVVfOaznp9OE6+Rw1uDavg@mail.gmail.com>
To: Till Varoquaux <till@pps.jussieu.fr>
Cc: =?ISO-8859-2?Q?Milan_Stanojevi=E6?= <milanst@gmail.com>,
        "Hezekiah M. Carty" <hez@0ok.org>, Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0442807eeafc6804b990f4b4
Subject: Re: [Caml-list] Re: "module type of" on sub-module of functor result


--f46d0442807eeafc6804b990f4b4
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Here's an example I still don't know how to accomplish:

module Map =3D struct
  module Make (Ord : BatInterfaces.OrderedType) : sig
    include module type of BatMap.Make(Ord).Labels (* this line is invalid
*)
  end =3D struct
    include BatMap.Make(Ord)
    include Labels
  end
end

The idea is I only want "module type of Labels" for the functor's output,
but I need BatMap.Make(Ord) within the implementation (perhaps to implement
some other functions).

I thought I can simply replace the line "include BatMap.Make(Ord)" with
"open BatMap.Make(Ord)", and then not provide the explicit signature. But
"open BatMap.Make(Ord)" gives a syntax error.


2012/2/22 Till Varoquaux <till@pps.jussieu.fr>

> 2012/2/22 Milan Stanojevi=C4=87 <milanst@gmail.com>d
> > On Tue, Feb 21, 2012 at 3:32 PM, Hezekiah M. Carty <hez@0ok.org> wrote:
> >> On Tue, Feb 21, 2012 at 2:37 PM, Ashish Agarwal <agarwal1975@gmail.com>
> wrote:
> >>> I must've accidentally deleted part of my email before hitting send.
> The
> >>> point was to make the first code sample compile after removing the
> commented
> >>> line. But that is not allowed; I get a syntax error:
> >>>
> >>> $ ocamlfind ocamlc -c -package batteries a.ml
> >>> File "a.ml", line 6, characters 38-39:
> >>> Error: Syntax error: 'end' expected
> >>> File "a.ml", line 4, characters 16-19:
> >>> Error: This 'sig' might be unmatched
> >>>
> >>> I'm wondering if there is a better solution than my second code sampl=
e.
> >>>
> >
> > I would consider this a bug. I think than any module expression than
> > can be used with "include" should be usable with "include module type
> > of"
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa-roc.inria.fr/wws/info/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
>
> Milan is right: the language grammar does say that both [include] and
> [module type of] should work on module_expr. However, based upon the
> manual(*),  [A(B)] and  [A.B] are syntacticly valid module_expr's but
> [A(B).C] isn't. Is this because of an inherent limitation in the
> module system?
>
> [*]http://caml.inria.fr/pub/docs/manual-ocaml/manual019.html#module-expr
>

--f46d0442807eeafc6804b990f4b4
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Here&#39;s an example I still don&#39;t know how to accomplish:<div><br></d=
iv><div><div>module Map =3D struct</div><div>=C2=A0 module Make (Ord : BatI=
nterfaces.OrderedType) : sig</div><div>=C2=A0 =C2=A0 include module type of=
 BatMap.Make(Ord).Labels (* this line is invalid *)</div>

<div>=C2=A0 end =3D struct</div><div>=C2=A0 =C2=A0 include BatMap.Make(Ord)=
</div><div>=C2=A0 =C2=A0 include Labels</div><div>=C2=A0 end</div><div>end<=
/div></div><div><br></div><div>The idea is I only want &quot;module type of=
 Labels&quot; for the functor&#39;s output, but I need BatMap.Make(Ord) wit=
hin the implementation (perhaps to implement some other functions).</div>

<div><br></div><div>I thought I can simply replace the line &quot;include B=
atMap.Make(Ord)&quot; with &quot;open=C2=A0BatMap.Make(Ord)&quot;, and then=
 not provide the explicit signature. But &quot;open=C2=A0BatMap.Make(Ord)&q=
uot; gives a syntax error.</div>

<div><br><br><div class=3D"gmail_quote">2012/2/22 Till Varoquaux <span dir=
=3D"ltr">&lt;<a href=3D"mailto:till@pps.jussieu.fr" target=3D"_blank">till@=
pps.jussieu.fr</a>&gt;</span><br><blockquote class=3D"gmail_quote" style=3D=
"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">


2012/2/22 Milan Stanojevi=C4=87 &lt;<a href=3D"mailto:milanst@gmail.com" ta=
rget=3D"_blank">milanst@gmail.com</a>&gt;d<br>
<div><div>&gt; On Tue, Feb 21, 2012 at 3:32 PM, Hezekiah M. Carty &lt;<a hr=
ef=3D"mailto:hez@0ok.org" target=3D"_blank">hez@0ok.org</a>&gt; wrote:<br>
&gt;&gt; On Tue, Feb 21, 2012 at 2:37 PM, Ashish Agarwal &lt;<a href=3D"mai=
lto:agarwal1975@gmail.com" target=3D"_blank">agarwal1975@gmail.com</a>&gt; =
wrote:<br>
&gt;&gt;&gt; I must&#39;ve accidentally deleted part of my email before hit=
ting send. The<br>
&gt;&gt;&gt; point was to make the first code sample compile after removing=
 the commented<br>
&gt;&gt;&gt; line. But that is not allowed; I get a syntax error:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; $ ocamlfind ocamlc -c -package batteries <a href=3D"http://a.m=
l" target=3D"_blank">a.ml</a><br>
&gt;&gt;&gt; File &quot;<a href=3D"http://a.ml" target=3D"_blank">a.ml</a>&=
quot;, line 6, characters 38-39:<br>
&gt;&gt;&gt; Error: Syntax error: &#39;end&#39; expected<br>
&gt;&gt;&gt; File &quot;<a href=3D"http://a.ml" target=3D"_blank">a.ml</a>&=
quot;, line 4, characters 16-19:<br>
&gt;&gt;&gt; Error: This &#39;sig&#39; might be unmatched<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; I&#39;m wondering if there is a better solution than my second=
 code sample.<br>
&gt;&gt;&gt;<br>
&gt;<br>
&gt; I would consider this a bug. I think than any module expression than<b=
r>
&gt; can be used with &quot;include&quot; should be usable with &quot;inclu=
de module type<br>
&gt; of&quot;<br>
&gt;<br>
</div></div>&gt; --<br>
&gt; Caml-list mailing list. =C2=A0Subscription management and archives:<br>
&gt; <a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_b=
lank">https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
<br>
Milan is right: the language grammar does say that both [include] and<br>
[module type of] should work on module_expr. However, based upon the<br>
manual(*), =C2=A0[A(B)] and =C2=A0[A.B] are syntacticly valid module_expr&#=
39;s but<br>
[A(B).C] isn&#39;t. Is this because of an inherent limitation in the<br>
module system?<br>
<br>
[*]<a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml/manual019.html#mod=
ule-expr" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-ocaml/manu=
al019.html#module-expr</a><br>
</blockquote></div><br></div>

--f46d0442807eeafc6804b990f4b4--
