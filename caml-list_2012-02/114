Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q1EI2CKx005577
	for <caml-list@sympa-roc.inria.fr>; Tue, 14 Feb 2012 19:02:16 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AngBAHygOk9KfVI0imdsb2JhbABDp3cBiCcIIgEBAQoJDQcSBiOBcgEBAQMBEgITGQEbHQEDAQsGBQs7IQEBEQEFARwGEyKHWgmfTwqLcYJwhQ4/gQsCBQuIOYMTAwQICQEJBw8FhQuDSQSISoxoixCDFT2EIg
X-IronPort-AV: E=Sophos;i="4.73,417,1325458800"; 
   d="scan'208";a="131340950"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 14 Feb 2012 19:02:15 +0100
Received: by wgbds10 with SMTP id ds10so232421wgb.9
        for <caml-list@inria.fr>; Tue, 14 Feb 2012 10:02:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=7/imjnnOzeN6etC/J/nclQt00UydGO5KXiEmvvOh/KI=;
        b=pvreMbDMq7g9tta2vnrB9dTCsC1MvBXdrNNQP5A+2zpVqNJs6CK9BFQFQdsw9vqP6r
         xV+pY84+btFrjWSHedlEOyO7tcwajRBQ1xlYmrhBf9z8eYL4E/GrOgGPtJH81xI3CU8e
         D9xHw11VKWvA0w1C1krUYtbGg7XsDWwhWZC+4=
MIME-Version: 1.0
Received: by 10.216.139.197 with SMTP id c47mr1343684wej.15.1329242535345;
 Tue, 14 Feb 2012 10:02:15 -0800 (PST)
Received: by 10.223.7.69 with HTTP; Tue, 14 Feb 2012 10:02:15 -0800 (PST)
In-Reply-To: <CAOOOohS8pQxJS=VCfuRQg6OAJJkKi2w1KeHp+vcTOjsdApc8Nw@mail.gmail.com>
References: <CAOOOohRwOdr4xtt1XH2y1-9_XQ10Fq_1ocGD8i8pUSVqkHvQng@mail.gmail.com>
	<CAJ7XQb49oD8dFBaPKC69rb4Q3n8A3eAyb9Djsu+J7w2ey7+cwg@mail.gmail.com>
	<CAN=ouMTQCqrvXF6iGu_a0HQr+qB4NobXbDwESQdj0LYM2bPyAw@mail.gmail.com>
	<CAOOOohS8pQxJS=VCfuRQg6OAJJkKi2w1KeHp+vcTOjsdApc8Nw@mail.gmail.com>
Date: Tue, 14 Feb 2012 11:02:15 -0700
Message-ID: <CAN=ouMSeauccf_+3upwsmTCxNzyKJBMkvjmatbKaV=4j=AscmQ@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Philippe Veber <philippe.veber@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=0016e6de00b123bc8c04b8f0657b
Subject: Re: [Caml-list] Functional GUI programming: looking for good practices


--0016e6de00b123bc8c04b8f0657b
Content-Type: text/plain; charset=ISO-8859-1

Apologies Philippe, this is a bit long...

The "update loop" I mentioned might be a bit of a red-herring, as I'm only
using that for continuously active UI elements: such as changing cursor to
represent the action which would be taken on click. It has nothing to do
with the basic UI flow.

I didn't understand delimcc right away, and I hardly understand it now! :)

I was looking to write UI code much as your example of packing buttons
together with directly bound activation functions.

Here's my "menu_of_list", which takes a list of string * 'a pairs, calling
GUI code to make a menu using the strings as labels, and using the 'a
values as return values...

let menu_of_list lst return =
  (* snipped: preamble which handles positioning, stacking order, getting
font, etc *)
  Gui.add_widget gui
    (new Gui.vbox pos stacking spacing
      (lst |> List.map
        (fun (label,value) ->
          Gui.wit_fn gui
            (new Gui.rectangle_text w h fnt label)
            (fun () -> return (Some value) ) )))

The important part here is the "return" function. This will resume the UI
coroutine. It is given to "menu_of_list" by the UI code, then when the GUI
has an activation of a menu button this "return" is called... resuming the
UI where it left off, and with the "Some value" which was associated to the
button.

The magic of how this works is in delimcc capturing portions of the run
stack. Here I've extracted the relevant bits of code:


(* this runs as a coroutine with the "mainline" *)
let ui ui_process () =

  (* in actual code, this menu comes after a "right click", for special
actions *)
  let act = yield ui_process (menu_of_list coord
    [ ("Equip",`Equip);
      ("Spell",`Spell);
      ("End",`End) ] ) in
  (* ... handle whatever action the user chose! *)


(* given SDL events, calls activation functions of 'hit' widgets *)
let gui_react gui events =
  let hits = gui_select gui events in
  match hits with
  | h::t -> begin
    match get_binding gui h with
    | Some f -> f ()  (* runs activation function of widget, such as
"return" to coroutine! *)
    | None -> ()
    end
  | [] -> ()

let _ =
  (* A prompt is delimcc's mechanism for marking the stack to -limit- the
   * continuation, rather than creating whole-program continuations. *)
  (* So here, the "ui" is initially run, and will *resume* this mainline
continuation
   * at the end of the "user" function call. *)
  let ui_prompt = new_prompt () in
  push_prompt ui_prompt (ui ui_prompt);

  ...

  (* in mainloop *)
    gui_react gui events;

----------------------

Now I'm going to restate the yield function here, and try to explain...

let yield level fn =
  shift level (fun k ->
    fn k;
    abort level () )

"shift" and "abort" are delimcc. This runs the given function "fn" with a
continuation 'k'... so this continuation is the "return" function passed to
menu_of_list, and therefore bound to each menu-button. The abort exits the
"ui coroutine", resuming the mainline, hence the name: yield.

The continuation 'k' comes from the shift... the continuation is the code
"outside" of the shift call... so when it's called (by the mainline's
gui_react), it resume at the end of 'yield' and keep on going... in this
example, handling the returned action!

I hope this conveys at least the gist of what's going on... I read a lot of
papers over-and-over, not understanding... although none were specifically
GUI. Delimited continuations have numerous applications and a surprising
number of configurations for just a pair of functions! (Abort is really a
special case of "reset"... so it's shift and reset, in ump-teen
configurations.)

I'll try to explain if you have any further questions! However, I'm still
trying to sort out how best to write my GUI code -- there is a lot of room
for improvement. :)

 -Tony

PS. I'd like to blame X. Leroy ;)... for a post some 10 years ago replying
to someone's attempt to do a GUI in OCaml... Xavier casually replied
something like "oh, you can use coroutines". That was a wild goose chase
(or Dahu?)! Delimcc didn't exist at the time, and it's native-code
implementation came about just a few years ago (thank-you Oleg!). Even
then, I had no idea how I was supposed to use a coroutine to write GUI
code! Oh well, it was an adventure, and I still don't know if this is a
good thing, but I like it a lot more than "signals and slots" -- the usual
scattered GUI code which is connected by messages/events.


On Tue, Feb 14, 2012 at 3:17 AM, Philippe Veber <philippe.veber@gmail.com>wrote:

> Hi Anthony,
>
> This looks interesting, however as I'm not very familiar with delimcc
> (that's a shame, I admit), I fail to understand the flow of the program.
> Would you mind giving a snippet of the update loop you mentionned?
>
>
>> So far, I'm not sure how well this works out for a complete project. I
>> like it so far, but I have complexity growing in some "update loop" stuff,
>> which are little closures I add to be run each frame-update for reacting to
>> mouse-over/hover.
>>
>>
>
> Good luck in the hunt for elegant UI (code)!
>>
>
> Let's hope I'm not just Dahu hunting!
> (http://en.wikipedia.org/wiki/Dahu)
>
>
>
>>
>>  Tony
>>
>>
>

--0016e6de00b123bc8c04b8f0657b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Apologies Philippe, this is a bit long...<div><br><div><div>The &quot;updat=
e loop&quot; I mentioned might be a bit of a red-herring, as I&#39;m only u=
sing that for continuously active UI elements: such as changing cursor to r=
epresent the action which would be taken on click. It has nothing to do wit=
h the basic UI flow.</div>
<div><br></div><div>I didn&#39;t understand delimcc right away, and I hardl=
y understand it now! :)</div><div><br></div><div>I was looking to write UI =
code much as your example of packing buttons together with directly bound a=
ctivation functions.</div>
<div><br></div><div>Here&#39;s my &quot;menu_of_list&quot;, which takes a l=
ist of string * &#39;a pairs, calling GUI code to make a menu using the str=
ings as labels, and using the &#39;a values as return values...</div><div>
<br></div><div>let menu_of_list lst return =3D</div><div>=A0 (* snipped: pr=
eamble which handles positioning, stacking order, getting font, etc *)</div=
><div>=A0 Gui.add_widget gui</div><div>=A0 =A0 (new Gui.vbox pos stacking s=
pacing</div>
<div>=A0 =A0 =A0 (lst |&gt; List.map</div><div>=A0 =A0 =A0 =A0 (fun (label,=
value) -&gt;</div><div>=A0 =A0 =A0 =A0 =A0 Gui.wit_fn gui</div><div>=A0 =A0=
 =A0 =A0 =A0 =A0 (new Gui.rectangle_text w h fnt label)</div><div>=A0 =A0 =
=A0 =A0 =A0 =A0 (fun () -&gt; return (Some value) ) )))</div>
<div><br></div><div>The important part here is the &quot;return&quot; funct=
ion. This will resume the UI coroutine. It is given to &quot;menu_of_list&q=
uot; by the UI code, then when the GUI has an activation of a menu button t=
his &quot;return&quot; is called... resuming the UI where it left off, and =
with the &quot;Some value&quot; which was associated to the button.</div>
<div><br></div><div>The magic of how this works is in delimcc capturing por=
tions of the run stack. Here I&#39;ve extracted the relevant bits of code:<=
/div><div><br></div><div><br></div><div>(* this runs as a coroutine with th=
e &quot;mainline&quot; *)</div>
<div>let ui ui_process () =3D</div><div><br></div><div>=A0 (* in actual cod=
e, this menu comes after a &quot;right click&quot;, for special actions *)<=
/div><div>=A0 let act =3D yield ui_process (menu_of_list coord</div><div>=
=A0 =A0 [ (&quot;Equip&quot;,`Equip);</div>
<div>=A0 =A0 =A0 (&quot;Spell&quot;,`Spell);</div><div>=A0 =A0 =A0 (&quot;E=
nd&quot;,`End) ] ) in</div><div>=A0 (* ... handle whatever action the user =
chose! *)</div><div><br></div><div><br></div><div>(* given SDL events, call=
s activation functions of &#39;hit&#39; widgets *)</div>
<div>let gui_react gui events =3D</div><div>=A0 let hits =3D gui_select gui=
 events in</div><div>=A0 match hits with</div><div>=A0 | h::t -&gt; begin</=
div><div>=A0 =A0 match get_binding gui h with</div><div>=A0 =A0 | Some f -&=
gt; f () =A0(* runs activation function of widget, such as &quot;return&quo=
t; to coroutine! *)</div>
<div>=A0 =A0 | None -&gt; ()</div><div>=A0 =A0 end</div><div>=A0 | [] -&gt;=
 ()</div><div><br></div><div>let _ =3D</div><div>=A0 (* A prompt is delimcc=
&#39;s mechanism for marking the stack to -limit- the</div><div>=A0 =A0* co=
ntinuation, rather than creating whole-program continuations. *)</div>
<div>=A0 (* So here, the &quot;ui&quot; is initially run, and will *resume*=
 this mainline continuation</div><div>=A0 =A0* at the end of the &quot;user=
&quot; function call. *)</div><div>=A0 let ui_prompt =3D new_prompt () in</=
div><div>
=A0 push_prompt ui_prompt (ui ui_prompt);</div><div><br></div><div>=A0 ...<=
/div><div><br></div><div>=A0 (* in mainloop *)</div><div>=A0 =A0 gui_react =
gui events;</div><div>=A0=A0</div><div>----------------------</div><div><br=
></div><div>
Now I&#39;m going to restate the yield function here, and try to explain...=
</div><div><br></div><div>let yield level fn =3D</div><div>=A0 shift level =
(fun k -&gt;</div><div>=A0 =A0 fn k;</div><div>=A0 =A0 abort level () )</di=
v><div><br>
</div><div>&quot;shift&quot; and &quot;abort&quot; are delimcc. This runs t=
he given function &quot;fn&quot; with a continuation &#39;k&#39;... so this=
 continuation is the &quot;return&quot; function passed to menu_of_list, an=
d therefore bound to each menu-button. The abort exits the &quot;ui corouti=
ne&quot;, resuming the mainline, hence the name: yield.</div>
<div><br></div><div>The continuation &#39;k&#39; comes from the shift... th=
e continuation is the code &quot;outside&quot; of the shift call... so when=
 it&#39;s called (by the mainline&#39;s gui_react), it resume at the end of=
 &#39;yield&#39; and keep on going... in this example, handling the returne=
d action!</div>
<div><br></div><div>I hope this conveys at least the gist of what&#39;s goi=
ng on... I read a lot of papers over-and-over, not understanding... althoug=
h none were specifically GUI. Delimited continuations have numerous applica=
tions and a surprising number of configurations for just a pair of function=
s! (Abort is really a special case of &quot;reset&quot;... so it&#39;s shif=
t and reset, in ump-teen configurations.)</div>
<div><br></div><div>I&#39;ll try to explain if you have any further questio=
ns! However, I&#39;m still trying to sort out how best to write my GUI code=
 -- there is a lot of room for improvement. :)</div><div><br></div><div>
=A0-Tony</div><div><br></div><div>PS. I&#39;d like to blame X. Leroy ;)... =
for a post some 10 years ago replying to someone&#39;s attempt to do a GUI =
in OCaml... Xavier casually replied something like &quot;oh, you can use co=
routines&quot;. That was a wild goose chase (or Dahu?)! Delimcc didn&#39;t =
exist at the time, and it&#39;s native-code implementation came about just =
a few years ago (thank-you Oleg!). Even then, I had no idea how I was suppo=
sed to use a coroutine to write GUI code! Oh well, it was an adventure, and=
 I still don&#39;t know if this is a good thing, but I like it a lot more t=
han &quot;signals and slots&quot; -- the usual scattered GUI code which is =
connected by messages/events.</div>
<div><br></div><div><br></div><div class=3D"gmail_quote">On Tue, Feb 14, 20=
12 at 3:17 AM, Philippe Veber <span dir=3D"ltr">&lt;<a href=3D"mailto:phili=
ppe.veber@gmail.com">philippe.veber@gmail.com</a>&gt;</span> wrote:<br><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #c=
cc solid;padding-left:1ex">
Hi Anthony,<br><br>This looks interesting, however as I&#39;m not very fami=
liar with delimcc (that&#39;s a shame, I admit), I fail to understand the f=
low of the program. Would you mind giving a snippet of the update loop you =
mentionned?<br>


<div class=3D"gmail_quote"><div class=3D"im"><div>=A0</div><blockquote clas=
s=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;border-left:1px solid r=
gb(204,204,204);padding-left:1ex"><div><div>So far, I&#39;m not sure how we=
ll this works out for a complete project. I like it so far, but I have comp=
lexity growing in some &quot;update loop&quot; stuff, which are little clos=
ures I add to be run each frame-update for reacting to mouse-over/hover.</d=
iv>



<div><br></div></div></blockquote><div><br><br></div></div><div class=3D"im=
"><blockquote class=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;borde=
r-left:1px solid rgb(204,204,204);padding-left:1ex"><div><div></div><div>Go=
od luck in the hunt for elegant UI (code)!</div>


</div></blockquote></div><div><br>Let&#39;s hope I&#39;m not just Dahu hunt=
ing! <br>(<a href=3D"http://en.wikipedia.org/wiki/Dahu" target=3D"_blank">h=
ttp://en.wikipedia.org/wiki/Dahu</a>)<br><br>=A0<br></div><blockquote class=
=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt 0.8ex;border-left:1px solid rg=
b(204,204,204);padding-left:1ex">


<div><div><br></div><div>=A0Tony</div><br></div></blockquote></div><br>
</blockquote></div><br></div></div>

--0016e6de00b123bc8c04b8f0657b--
