Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q1LJbxU9022695
	for <caml-list@sympa-roc.inria.fr>; Tue, 21 Feb 2012 20:37:59 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvABAHLxQ09KfVI0imdsb2JhbABDhluiUgGJDQgiAQEBCgkNBxIGI4FzAQEBAwESAiwBGx4DAQsGBQQHOyEBAREBBQEcBhMbB4demnQKi3KCcYVCP4hzAgULiHFYgnwFAQ8ChA0CHIMtBIhPjGmHF4QAgxY9hCGBNQk
X-IronPort-AV: E=Sophos;i="4.73,459,1325458800"; 
   d="scan'208";a="132337314"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 21 Feb 2012 20:37:53 +0100
Received: by wgbds10 with SMTP id ds10so6469410wgb.9
        for <caml-list@inria.fr>; Tue, 21 Feb 2012 11:37:53 -0800 (PST)
Received-SPF: pass (google.com: domain of agarwal1975@gmail.com designates 10.216.137.230 as permitted sender) client-ip=10.216.137.230;
Authentication-Results: mr.google.com; spf=pass (google.com: domain of agarwal1975@gmail.com designates 10.216.137.230 as permitted sender) smtp.mail=agarwal1975@gmail.com; dkim=pass header.i=agarwal1975@gmail.com
Received: from mr.google.com ([10.216.137.230])
        by 10.216.137.230 with SMTP id y80mr1156272wei.21.1329853073445 (num_hops = 1);
        Tue, 21 Feb 2012 11:37:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        bh=poS+gk05PlUu3YhV75iwkw9poSDf22vsT8W/Gh2Xmys=;
        b=RkxQS0l8/7Vnu1sf4i4RsZ2faZaqx0xperfF/gh08LRlW7cB6r2YpHYnJJrg7GkPtA
         CWGqUIbLF6QBJtV5lZyBtutZI7QMixCUUpDGcDKE9Yqjr2g2GNh6tMZQN1YEKlIkbMph
         V/8rHc2sOI8u931EEPUJIk4IwASN7ECrWHJn4=
Received: by 10.216.137.230 with SMTP id y80mr958945wei.21.1329853071251; Tue,
 21 Feb 2012 11:37:51 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.39.148 with HTTP; Tue, 21 Feb 2012 11:37:31 -0800 (PST)
In-Reply-To: <CAMu2m2L+JU2QHTAB=XuBoq8D4G_hg9NuKEW31rizyPB2+CvDVg@mail.gmail.com>
References: <CAMu2m2L+JU2QHTAB=XuBoq8D4G_hg9NuKEW31rizyPB2+CvDVg@mail.gmail.com>
From: Ashish Agarwal <agarwal1975@gmail.com>
Date: Tue, 21 Feb 2012 14:37:31 -0500
Message-ID: <CAMu2m2+cyrU1N_iiOS1MjxncP00zQJ2by-y_JFDAnV7K1Yp_Yw@mail.gmail.com>
To: Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=0016e6d62583ea596404b97e8bde
Subject: [Caml-list] Re: "module type of" on sub-module of functor result


--0016e6d62583ea596404b97e8bde
Content-Type: text/plain; charset=ISO-8859-1

I must've accidentally deleted part of my email before hitting send. The
point was to make the first code sample compile after removing the
commented line. But that is not allowed; I get a syntax error:

$ ocamlfind ocamlc -c -package batteries a.ml
File "a.ml", line 6, characters 38-39:
Error: Syntax error: 'end' expected
File "a.ml", line 4, characters 16-19:
Error: This 'sig' might be unmatched

I'm wondering if there is a better solution than my second code sample.


On Tue, Feb 21, 2012 at 1:16 PM, Ashish Agarwal <agarwal1975@gmail.com>wrote:

> The following code compiles correctly:
>
> ----- a.ml -----
> open Batteries
> module Ord = struct type t=string let compare=compare end
>
> module type S = sig
>   include module type of Map.Make(Ord)
>   (* include module type of Map.Make(Ord).Labels *)
> end
> -----
>
> An easy workaround is to name the functor's result:
>
> ----- a.ml -----
> open Batteries
> module Ord = struct type t=string let compare=compare end
>
> module M = Map.Make(Ord)
>
> module type S = sig
>   include module type of M
>   include module type of M.Labels
> end
> -----
>
> The above compiles correctly, but is this the best/only solution?
>
>

--0016e6d62583ea596404b97e8bde
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I must&#39;ve accidentally deleted part of my email before hitting send. Th=
e point was to make the first code sample compile after removing the commen=
ted line. But that is not allowed; I get a syntax error:<div><br></div><div>

<div>$ ocamlfind ocamlc -c -package batteries <a href=3D"http://a.ml">a.ml<=
/a>=A0</div><div>File &quot;<a href=3D"http://a.ml">a.ml</a>&quot;, line 6,=
 characters 38-39:</div><div>Error: Syntax error: &#39;end&#39; expected</d=
iv>

<div>File &quot;<a href=3D"http://a.ml">a.ml</a>&quot;, line 4, characters =
16-19:</div><div>Error: This &#39;sig&#39; might be unmatched</div><div><br=
></div><div>I&#39;m wondering if there is a better solution than my second =
code sample.</div>

<div><br></div><br><div class=3D"gmail_quote">On Tue, Feb 21, 2012 at 1:16 =
PM, Ashish Agarwal <span dir=3D"ltr">&lt;<a href=3D"mailto:agarwal1975@gmai=
l.com">agarwal1975@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"=
gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-=
left:1ex">

<div>The following code compiles correctly:</div><div><br></div><div>----- =
<a href=3D"http://a.ml" target=3D"_blank">a.ml</a> -----</div><div>open Bat=
teries</div><div>module Ord =3D struct type t=3Dstring let compare=3Dcompar=
e end=A0</div>

<div><br></div>
<div>module type S =3D sig</div><div>=A0 include module type of Map.Make(Or=
d)</div><div>=A0 (* include module type of Map.Make(Ord).Labels *)</div><di=
v>end</div><div>-----</div><div><br></div><div>An easy workaround is to nam=
e the functor&#39;s result:</div>


<div><br></div><div><div>----- <a href=3D"http://a.ml" target=3D"_blank">a.=
ml</a> -----</div><div>open Batteries</div><div>module Ord =3D struct type =
t=3Dstring let compare=3Dcompare end=A0</div><div><br></div><div>module M =
=3D Map.Make(Ord)</div>

<div>
<br></div><div>module type S =3D sig</div><div>=A0 include module type of M=
</div><div>=A0 include module type of M.Labels</div><div>end</div></div><di=
v>-----</div><div><br></div><div>The above compiles correctly, but is this =
the best/only solution?</div>


<div><br></div>
</blockquote></div><br></div>

--0016e6d62583ea596404b97e8bde--
