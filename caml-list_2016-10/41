Return-Path: <shayne.fletcher.50@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 617587FFE1
	for <caml-list@sympa.inria.fr>; Sat,  8 Oct 2016 23:51:38 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=shayne.fletcher.50@gmail.com; spf=Pass smtp.mailfrom=shayne.fletcher.50@gmail.com; spf=None smtp.helo=postmaster@mail-yw0-f176.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  shayne.fletcher.50@gmail.com) identity=pra;
  client-ip=209.85.161.176;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  shayne.fletcher.50@gmail.com designates 209.85.161.176 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.161.176;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="shayne.fletcher.50@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-yw0-f176.google.com) identity=helo;
  client-ip=209.85.161.176;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="shayne.fletcher.50@gmail.com";
  x-sender="postmaster@mail-yw0-f176.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AJejHjBLDxqsD7wp60dmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUIvzxwZ3uMQTl6Ol3ixeRBMOAuqgC0Led6v29EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6anHS+4HYoFwnlMkIt?=
 =?us-ascii?q?f6KuS9SU1Jn8jr3vs7ToICxwzAKnZr1zKBjk5S7wjeIxxbVYF6Aq1xHSqWFJce?=
 =?us-ascii?q?kFjUlhJFaUggqurpzopM0r221qtvkg789NV7nhN+R9FOQATWduD2dgxsDxuBzS?=
 =?us-ascii?q?BTqG4n8bSi1CgxNMBw/dxB7/V5b19CD9s7wu9jOdOJjNTbklXznqwaNmVBTohT?=
 =?us-ascii?q?1PYyU5+XDRh4p+iK9HqxKsvVoim6bbZYiUMLx1eaaLLoBSfnZIQssED38JOYi7?=
 =?us-ascii?q?dYZaSrNZZes=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ApAAAyaflXhrChVdFdGgEBAQECAQEBA?=
 =?us-ascii?q?QgBAQEBFwEBBAEBCgEBgxEBAQEBAXRtDweNLJcCjEiHaYILHoYCAoFzBzgUAQE?=
 =?us-ascii?q?BAQEBAQEBAQESAQEBCAsLCRkvgjIEARUBBIIQAQEBAwESEQQZARsdAQMBCwYDA?=
 =?us-ascii?q?gsNIAoCAiEBAREBBQEcBhMiiBMBAw8IlXePTYEyPjKLQoFrgl8Fg14KGScNU4M?=
 =?us-ascii?q?RAQEBAQEFAQEBAQEBGQMGEIsCgkeFBIJbBYEhAY0YixArCAEBgSaLTIMLj3SIY?=
 =?us-ascii?q?4QUgj0THoERHoNdIIF6IjQBh0eBQQEBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ApAAAyaflXhrChVdFdGgEBAQECAQEBAQgBAQEBFwEBBAE?=
 =?us-ascii?q?BCgEBgxEBAQEBAXRtDweNLJcCjEiHaYILHoYCAoFzBzgUAQEBAQEBAQEBAQESA?=
 =?us-ascii?q?QEBCAsLCRkvgjIEARUBBIIQAQEBAwESEQQZARsdAQMBCwYDAgsNIAoCAiEBARE?=
 =?us-ascii?q?BBQEcBhMiiBMBAw8IlXePTYEyPjKLQoFrgl8Fg14KGScNU4MRAQEBAQEFAQEBA?=
 =?us-ascii?q?QEBGQMGEIsCgkeFBIJbBYEhAY0YixArCAEBgSaLTIMLj3SIY4QUgj0THoERHoN?=
 =?us-ascii?q?dIIF6IjQBh0eBQQEBAQ?=
X-IronPort-AV: E=Sophos;i="5.31,462,1473112800"; 
   d="scan'208,217";a="196100827"
Received: from mail-yw0-f176.google.com ([209.85.161.176])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 08 Oct 2016 23:51:36 +0200
Received: by mail-yw0-f176.google.com with SMTP id t193so51244773ywc.2
        for <caml-list@inria.fr>; Sat, 08 Oct 2016 14:51:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=EcsSe3sZGG5WFPJsBm++cr+SUXEaXwxWAu+4U+qQHNU=;
        b=aPPALOGSsWMuvuI+3JKq+xmho/u2EnHcgu3TLZKgq5H8o+K6roDLmvXVQaSAzW0fWL
         3MYY7ikcohxr4PEgqz/A0j8SKFgBGd96eh2bmAw2Bsvfi/EhMjYJ5FcHqySKhC9VoBc/
         ToVhq8EnpsaxGRikzl0MnWU598cjZmHaOws8VzCAnEF5sdtX1YmkTWYMzp9WahfH8yJT
         +rcqefeN8HMp8VuFJKoIEKxqIXoQADUaH/uryF8kWIceB/QpXBY9c7VieYUmj10VSd30
         o/bXIZoid+2tZnqgBFl9aFKhARBpLY/J61Y3xS1pASWJv+z0Pl+DrW/Yx5/w1g0JT8GK
         +EKQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=EcsSe3sZGG5WFPJsBm++cr+SUXEaXwxWAu+4U+qQHNU=;
        b=bCEgDdYJSZcIAhpXLOWkOZXHebDCviKD/9ITq1hR20NmZOm0FgeSAhQQA1UqFbtFId
         ndY72+q5gVVyWNWx+w40cdbDH1ncRxGMYT2iuVT/1JOd5sNK4x4YU5LoGnot5fFrNoJJ
         piMStdwJQvgfV1b4U7LXZRbBhPY5sT+Y1hI8J41URO6YoC/+zC79C7SwhNL/mCGogNP1
         c2GeSXroGjbayYxHpGhNuekxsJk0v534QlWLPW1sd2YaVWX51uX5Egugcu4k0fuoGMI0
         PnFTokcu2JBttCnnR8+U3Z12QtKhwQ5oY3A/M5NmHvr1zHbA9wBNCK9idvjG5QcAp6mB
         us1A==
X-Gm-Message-State: AA6/9RlVNLzmT1N+uJa4xShmmzIXSSZXKiNubKVi2lGOohzsiupZooExvLV7ZMNvYGWzsOhNAcyQnfJFzxvGsw==
X-Received: by 10.129.86.4 with SMTP id k4mr20657313ywb.103.1475963495148;
 Sat, 08 Oct 2016 14:51:35 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.37.39.202 with HTTP; Sat, 8 Oct 2016 14:51:14 -0700 (PDT)
In-Reply-To: <CAMsAzy-dTEjoiW7ZEjvKj_jJKgk316ch+Z6SAR2syrxOebg=TA@mail.gmail.com>
References: <86a4a20a-c5de-a3b3-85c0-621f09a56b81@digirati.com.br>
 <CAAxsn=HVX3CY1vq29hLLhHBMPPCmDOwvkjnTH2aUP2ezxhH5ug@mail.gmail.com> <CAMsAzy-dTEjoiW7ZEjvKj_jJKgk316ch+Z6SAR2syrxOebg=TA@mail.gmail.com>
From: Shayne Fletcher <shayne.fletcher.50@gmail.com>
Date: Sat, 8 Oct 2016 17:51:14 -0400
Message-ID: <CAMsAzy8k0=xa_y_vAQfGisNdWiaJ07+FkZcWAWcay-XNcwd8Ng@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: Andre Nathan <andre@digirati.com.br>, "caml-list@inria.fr users" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11432e0ad476ac053e6187cb
Subject: Re: [Caml-list] Encoding "links" with the type system

--001a11432e0ad476ac053e6187cb
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

On Fri, Oct 7, 2016 at 1:02 PM, Shayne Fletcher <
shayne.fletcher.50@gmail.com> wrote:

> On Wed, Sep 21, 2016 at 6:22 PM, Jeremy Yallop <yallop@gmail.com> wrote:
>
>> I'll describe an interface based on these ideas that maintains the
>> properties you stipulate.  I'll leave the problem of building an
>> implementation that satisfies the interface to you.  (In fact, the
>> interface is the tricky part and the implementation is straightforward
>> if you can treat all the type parameters as phantom.)
>>
>
> =E2=80=8BHow's this?
>
> module M : S =3D struct
> ...
>
=E2=80=8B
I've hit a problem with my attempt at an implementation actually :(

The issue is, the program below as written seems to work, but, if the type
[_ set] is made abstract in the signature [S], typing breaks. Can somebody
explain where I'm going wrong?

module type S =3D sig

  type _ sink
  type _ source
  type _ set =3D (string * string) list (*Why can't this be abstract?*)
  type ('source, 'sink) link

  type ('sink, 'set) accepts

  val mk_sink : string -> 'sink sink
  val mk_source : string -> 'source source
  val mk_link : 'source source * 'sink sink -> ('source, 'sink) link

  type 'sink fresh_set =3D
  | Fresh_set : {
    set : 'set set;
    accepts : ('sink, 'set) accepts;
  } -> 'sink fresh_set

  val create_set : 'sink sink -> 'sink fresh_set

  type ('sink, 'parent) augmented_set =3D
  | Augmented_set : {
    set : 'set set;
    accepts: ('sink, 'set) accepts;
    cc : 's. ('s, 'parent) accepts -> ('s, 'set) accepts
  } -> ('sink, 'parent) augmented_set

  val insert_link :
    ('source, 'sink) link ->
    'parent set ->
    ('sink, 'parent) accepts ->
    ('source, 'parent) augmented_set

end

module M : S =3D struct

  type 'sink sink =3D { name : string }
  type 'source source =3D { name : string }

  type 'set set =3D (string * string) list
  type ('source, 'sink) link =3D ('source source * 'sink sink)

  let mk_sink (name : string) : 'sink sink =3D {name}
  let mk_source (name : string) : 'source source =3D {name}
  let mk_link ((source, sink) : 'source source * 'sink sink)
      : ('source, 'sink) link =3D (source, sink)

  type ('sink, 'set) accepts =3D
  | Accepts : ('sink, 'set) accepts

  type 'sink fresh_set =3D
  | Fresh_set : {
    set : 'set set;
    accepts : ('sink, 'set) accepts;
    }                        -> 'sink fresh_set

  let create_set (s : 'sink sink) : 'sink fresh_set =3D
    Fresh_set { set =3D ([] : 'set set);
                accepts =3D (Accepts : ('sink, 'set) accepts) }

  type ('sink, 'parent) augmented_set =3D
  | Augmented_set : {
    set : 't set;
    accepts: ('sink, 't) accepts;
    cc : 's. ('s, 'parent) accepts -> ('s, 't) accepts
  } -> ('sink, 'parent) augmented_set

  let insert_link
      (l : ('source, 'sink) link)
      (s : 'parent set)
      (a : ('sink, 'parent) accepts)  : ('source, 'parent) augmented_set =3D
    let {name =3D src} : 'source source =3D fst l in
    let {name =3D dst} : 'sink sink  =3D snd l in
    Augmented_set {
      set : 't set =3D (src, dst) :: s;
      accepts =3D (Accepts : ('source, 't) accepts);
      cc =3D fun (_ : (_, 'parent) accepts) -> (Accepts : (_, 'parent)
accepts)
    }

end

module Test (E : S) =3D struct

  open E

  type t1 and t2 and t3 and t4

  let snk1 : t1 sink =3D mk_sink "sink1"
  let snk2 : t2 sink =3D mk_sink "sink2"
  let snk3 : t4 sink =3D mk_sink "sink3"

  let src1 : t2 source =3D mk_source "source1"
  let src2 : t3 source =3D mk_source "source2"

  let link1 : (t2,  t1) link =3D mk_link (src1, snk1) (*t2 src, t1 sink*)
  let link2 : (t3,  t1) link =3D mk_link (src2, snk1) (*t3 src, t1 sink*)
  let link3 : (t3,  t2) link =3D mk_link (src2, snk2) (*t3 src, t2 sink*)
  let link4 : (t3,  t4) link =3D mk_link (src2, snk3) (*t3 src, t4 sink*)

  let test () =3D

    (*Create a fresh set from a sink of type [t1]*)
    let (Fresh_set {set; accepts =3D a} : t1 fresh_set) =3D
      create_set snk1 in
    (*
      - [a] is evidence [set] accepts links with sink type [t1]
    *)

    (*Insert a [(t2, t1) link]*)
    let Augmented_set
        {set =3D set1; accepts =3D a1; cc =3D cc1} =3D
      insert_link link1 set a in
    (*
      - [a1] is evidence [set1] accepts links with sink type [t2] ([t2] is
        the source type of [link1])
      - [cc] says that [set1] accepts links with sink types that its
        parent [set] does:
        - [cc1 a] provides evidence that says that [set1] will accept
          [link2] which has sink type [t1] *)

    (*Insert a [(t3, t1)] link*)
    let Augmented_set
        {set =3D set2; accepts =3D a2; cc =3D cc2} =3D
      insert_link link2 set (cc1 a) in
    (*
      - [a2] says that [set2] accepts links with sink type [t3] ([t3] is
        the source type of [link2])
        - [cc2] says that [set2] accepts links with sink types that its
          parent does:
        - [cc2 a1] provides evidence that says that [set2] will accept
          [link3] which has sink type [t2]
    *)

    (*Insert a [(t3, t2)] link*)
    let (Augmented_set
        {set =3D set3; accepts =3D a3; cc =3D cc3} : (t3, _) augmented_set)=
 =3D
      insert_link link3 set (cc2 a1) in
    (*
      - [a3] says that [set3] accepts links with sink type [t3] ([t3]is
        the source type of [link3])
      - [cc3] says that [set3] accepts links with sink types that its
        parent does (that is, any links with sink types [t1], [t2] or [t3])
    *)

    (*There is just no way we can get insert [link4] into [set3]. The
      is no evidence we can produce that will allow a link with sink
      type [t4]. Try the below with any of [a1], [a2], [a3])*)
    (*
    let (Augmented_set
       {set =3D set4; accepts =3D a4; cc =3D cc4} =3D
       insert_link link4 set (cc3 a3) : (t3, _) augmented_set) in
    *)

    ()
end

let _ =3D let module T =3D Test (M) in T.test ()

--=20
Shayne Fletcher

--001a11432e0ad476ac053e6187cb
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">=
On Fri, Oct 7, 2016 at 1:02 PM, Shayne Fletcher <span dir=3D"ltr">&lt;<a hr=
ef=3D"mailto:shayne.fletcher.50@gmail.com" target=3D"_blank">shayne.fletche=
r.50@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);pad=
ding-left:1ex"><span class=3D"gmail-"><div class=3D"gmail_quote">On Wed, Se=
p 21, 2016 at 6:22 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a href=3D"mailt=
o:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;</span> wrote=
:<br><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;bo=
rder-left:1px solid rgb(204,204,204);padding-left:1ex"><div id=3D"gmail-m_-=
7831818497995876846gmail-:2ks" class=3D"gmail-m_-7831818497995876846gmail-a=
3s gmail-m_-7831818497995876846gmail-aXjCH gmail-m_-7831818497995876846gmai=
l-m1574ed7f1a5f2aa6">I&#39;ll describe an interface based on these ideas th=
at maintains the<br>
properties you stipulate.=C2=A0 I&#39;ll leave the problem of building an<b=
r>
implementation that satisfies the interface to you.=C2=A0 (In fact, the<br>
interface is the tricky part and the implementation is straightforward<br>
if you can treat all the type parameters as phantom.)<br></div></blockquote=
></div><br></span><div class=3D"gmail_default"><font face=3D"tahoma, sans-s=
erif">=E2=80=8BHow&#39;s this?</font><br><br><div class=3D"gmail_default"><=
font face=3D"tahoma, sans-serif">module M : S =3D struct</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">...</font></div></=
div></blockquote><div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">=E2=80=8B</font><br><font face=3D"tahoma, sans-serif">I&#39;ve hi=
t a problem with my attempt at an implementation actually :(<br><br>The iss=
ue is, the program below as written seems to work, but, if the type [_ set]=
 is made abstract in the signature [S], typing breaks. Can somebody explain=
 where I&#39;m going wrong?</font><br><br><div class=3D"gmail_default"><spa=
n style=3D"font-family:tahoma,sans-serif">module type S =3D sig</span><br><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></f=
ont></div><div class=3D"gmail_default"><span style=3D"font-family:tahoma,sa=
ns-serif">=C2=A0 type _ sink</span><br></div><div class=3D"gmail_default"><=
font face=3D"tahoma, sans-serif">=C2=A0 type _ source</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 type _ set =3D=
 (string * string) list (*Why can&#39;t this be abstract?*)</font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 type (&#=
39;source, &#39;sink) link</font></div><div class=3D"gmail_default"><font f=
ace=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_default"><s=
pan style=3D"font-family:tahoma,sans-serif">=C2=A0 type (&#39;sink, &#39;se=
t) accepts=C2=A0</span></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif"><br></font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 val mk_sink : string -&gt; &#39;sink sink</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 val mk_source : string -&gt; &#39;source source</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 val mk_link :=
 &#39;source source * &#39;sink sink -&gt; (&#39;source, &#39;sink) link</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><b=
r></font></div><div class=3D"gmail_default"><span style=3D"font-family:taho=
ma,sans-serif">=C2=A0 type &#39;sink fresh_set =3D=C2=A0</span><br></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 | Fresh=
_set : {</font></div><div class=3D"gmail_default"><font face=3D"tahoma, san=
s-serif">=C2=A0 =C2=A0 set : &#39;set set;</font></div><div class=3D"gmail_=
default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 accepts : (&#39;si=
nk, &#39;set) accepts;</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 } -&gt; &#39;sink fresh_set</font></div><div=
 class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div=
><div class=3D"gmail_default"><span style=3D"font-family:tahoma,sans-serif"=
>=C2=A0 val create_set : &#39;sink sink -&gt; &#39;sink fresh_set</span><br=
></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br><=
/font></div><div class=3D"gmail_default"><span style=3D"font-family:tahoma,=
sans-serif">=C2=A0 type (&#39;sink, &#39;parent) augmented_set =3D</span><b=
r></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 | Augmented_set : {</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 set : &#39;set set;</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 acc=
epts: (&#39;sink, &#39;set) accepts;</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 cc : &#39;s. (&#39;s, &#=
39;parent) accepts -&gt; (&#39;s, &#39;set) accepts</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 } -&gt; (&#39;s=
ink, &#39;parent) augmented_set</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_defaul=
t"><span style=3D"font-family:tahoma,sans-serif">=C2=A0 val insert_link :=
=C2=A0</span><br></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif">=C2=A0 =C2=A0 (&#39;source, &#39;sink) link -&gt;</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
&#39;parent set -&gt;=C2=A0</font></div><div class=3D"gmail_default"><font =
face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 (&#39;sink, &#39;parent) accepts =
-&gt;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-s=
erif">=C2=A0 =C2=A0 (&#39;source, &#39;parent) augmented_set</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">end</font=
></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br><=
/font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
module M : S =3D struct</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_default"><font=
 face=3D"tahoma, sans-serif">=C2=A0 type &#39;sink sink =3D { name : string=
 }</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 type &#39;source source =3D { name : string }</font></div><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 type &#=
39;set set =3D (string * string) list</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 type (&#39;source, &#39;sink) =
link =3D (&#39;source source * &#39;sink sink)</font></div><div class=3D"gm=
ail_default"><font face=3D"tahoma, sans-serif"><br></font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let mk_sink (na=
me : string) : &#39;sink sink =3D {name}</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 let mk_source (name : strin=
g) : &#39;source source =3D {name}</font></div><div class=3D"gmail_default"=
><font face=3D"tahoma, sans-serif">=C2=A0 let mk_link ((source, sink) : &#3=
9;source source * &#39;sink sink)=C2=A0</font></div><div class=3D"gmail_def=
ault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 : (&#39;source=
, &#39;sink) link =3D (source, sink)</font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 type (&#39;sink, &#39;set)=
 accepts =3D=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif">=C2=A0 | Accepts : (&#39;sink, &#39;set) accepts</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 type &#39;sink fresh_set =3D=C2=A0</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 | Fresh_set : {</font></di=
v><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 set : &#39;set set;</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 =C2=A0 accepts : (&#39;sink, &#39;set) accep=
ts;=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">=C2=A0 =C2=A0 } =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0-&gt; &#39;sink fresh_set</font></div><di=
v class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></di=
v><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let=
 create_set (s : &#39;sink sink) : &#39;sink fresh_set =3D</font></div><div=
 class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 Fr=
esh_set { set =3D ([] : &#39;set set);=C2=A0</font></div><div class=3D"gmai=
l_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 accepts =3D (Accepts : (&#39;sink, &#39;set) ac=
cepts) }</font></div><div class=3D"gmail_default"><font face=3D"tahoma, san=
s-serif">=C2=A0=C2=A0</font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 type (&#39;sink, &#39;parent) augmented_set =
=3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 | Augmented_set : {</font></div><div class=3D"gmail_default"><fo=
nt face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 set : &#39;t set;</font></div>=
<div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 accepts: (&#39;sink, &#39;t) accepts;</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 cc : &#39;s. (&#39;=
s, &#39;parent) accepts -&gt; (&#39;s, &#39;t) accepts</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 } -&gt; (&#39=
;sink, &#39;parent) augmented_set</font></div><div class=3D"gmail_default">=
<font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_defa=
ult"><font face=3D"tahoma, sans-serif">=C2=A0 let insert_link=C2=A0</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 (l : (&#39;source, &#39;sink) link)=C2=A0</font></div><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 (s : &#39;parent set)</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 (a : (&#39;sink, &#39;parent=
) accepts) =C2=A0: (&#39;source, &#39;parent) augmented_set =3D</font></div=
><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 let {name =3D src} : &#39;source source =3D fst l in</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 let =
{name =3D dst} : &#39;sink sink =C2=A0=3D snd l in</font></div><div class=
=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 Augmente=
d_set {</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans=
-serif">=C2=A0 =C2=A0 =C2=A0 set : &#39;t set =3D (src, dst) :: s;</font></=
div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 accepts =3D (Accepts : (&#39;source, &#39;t) accepts);</font>=
</div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0=
 =C2=A0 =C2=A0 cc =3D fun (_ : (_, &#39;parent) accepts) -&gt; (Accepts : (=
_, &#39;parent) accepts)</font></div><div class=3D"gmail_default"><font fac=
e=3D"tahoma, sans-serif">=C2=A0 =C2=A0 }</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gma=
il_default"><font face=3D"tahoma, sans-serif">end</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">module Test (E : S) =
=3D struct</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif"><br></font></div><div class=3D"gmail_default"><font face=3D"taho=
ma, sans-serif">=C2=A0 open E</font></div><div class=3D"gmail_default"><fon=
t face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_default"=
><font face=3D"tahoma, sans-serif">=C2=A0 type t1 and t2 and t3 and t4</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br>=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 let snk1 : t1 sink =3D mk_sink &quot;sink1&quot;</font></div><div c=
lass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 let snk2 : =
t2 sink =3D mk_sink &quot;sink2&quot;</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 let snk3 : t4 sink =3D mk_sink=
 &quot;sink3&quot;</font></div><div class=3D"gmail_default"><font face=3D"t=
ahoma, sans-serif"><br></font></div><div class=3D"gmail_default"><font face=
=3D"tahoma, sans-serif">=C2=A0 let src1 : t2 source =3D mk_source &quot;sou=
rce1&quot;</font></div><div class=3D"gmail_default"><font face=3D"tahoma, s=
ans-serif">=C2=A0 let src2 : t3 source =3D mk_source &quot;source2&quot;</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><b=
r></font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 let link1 : (t2, =C2=A0t1) link =3D mk_link (src1, snk1) (*t2 src=
, t1 sink*)</font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 let link2 : (t3, =C2=A0t1) link =3D mk_link (src2, snk1)=
 (*t3 src, t1 sink*)</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 let link3 : (t3, =C2=A0t2) link =3D mk_link (sr=
c2, snk2) (*t3 src, t2 sink*)</font></div><div class=3D"gmail_default"><fon=
t face=3D"tahoma, sans-serif">=C2=A0 let link4 : (t3, =C2=A0t4) link =3D mk=
_link (src2, snk3) (*t3 src, t4 sink*)</font></div><div class=3D"gmail_defa=
ult"><font face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 let test () =3D=C2=A0</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><b=
r></font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 (*Create a fresh set from a sink of type [t1]*)</font></di=
v><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 let (Fresh_set {set; accepts =3D a} : t1 fresh_set) =3D=C2=A0</font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 create_set snk1 in</font></div><div class=3D"gmail_default"><=
font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 (*</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 - [a=
] is evidence [set] accepts links with sink type [t1]</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 *)</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br>=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 (*Insert a [(t2, t1) link]*)</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 let Augmented_set=
=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-=
serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 {set =3D set1; accepts =3D a1; cc =3D cc=
1} =3D=C2=A0</font></div><div class=3D"gmail_default"><font face=3D"tahoma,=
 sans-serif">=C2=A0 =C2=A0 =C2=A0 insert_link link1 set a in</font></div><d=
iv class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =
(*</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-seri=
f">=C2=A0 =C2=A0 =C2=A0 - [a1] is evidence [set1] accepts links with sink t=
ype [t2] ([t2] is</font></div><div class=3D"gmail_default"><font face=3D"ta=
homa, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 the source type of [link1])</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 - [cc] says that [set1] accepts links with sink types =
that its</font></div><div class=3D"gmail_default"><font face=3D"tahoma, san=
s-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 parent [set] does:</font></div><div cl=
ass=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 - [cc1 a] provides evidence that says that [set1] will accept</f=
ont></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [link2] which has sink type [t1] *)</fon=
t></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br>=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 (*Insert a [(t3, t1)] link*)</font></div><div class=3D"gmail=
_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 let Augmented_set=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 =C2=A0 =C2=A0 {set =3D set2; accepts =3D a2; cc =3D cc2} =3D=
</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif"=
>=C2=A0 =C2=A0 =C2=A0 insert_link link2 set (cc1 a) in</font></div><div cla=
ss=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 (*</fo=
nt></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=
=A0 =C2=A0 =C2=A0 - [a2] says that [set2] accepts links with sink type [t3]=
 ([t3] is</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 the source type of [link2])</font></d=
iv><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 - [cc2] says that [set2] accepts links with sink types=
 that its</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 parent does:</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 - [cc2 a1] provides evidence that says that [set2] will accept</=
font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [link3] which has sink type [t2]</font><=
/div><div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =
=C2=A0 *)</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sa=
ns-serif"><br></font></div><div class=3D"gmail_default"><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 (*Insert a [(t3, t2)] link*)</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 let=
 (Augmented_set</font></div><div class=3D"gmail_default"><font face=3D"taho=
ma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 {set =3D set3; accepts =3D a3; =
cc =3D cc3} : (t3, _) augmented_set) =3D</font></div><div class=3D"gmail_de=
fault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 insert_link l=
ink3 set (cc2 a1) in</font></div><div class=3D"gmail_default"><font face=3D=
"tahoma, sans-serif">=C2=A0 =C2=A0 (*</font></div><div class=3D"gmail_defau=
lt"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 - [a3] says that=
 [set3] accepts links with sink type [t3] ([t3]is</font></div><div class=3D=
"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=
=A0 the source type of [link3])</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 - [cc3] says that [set=
3] accepts links with sink types that its</font></div><div class=3D"gmail_d=
efault"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 =C2=A0 paren=
t does (that is, any links with sink types [t1], [t2] or [t3])</font></div>=
<div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=
=A0 *)</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-=
serif"><br></font></div><div class=3D"gmail_default"><font face=3D"tahoma, =
sans-serif">=C2=A0 =C2=A0 (*There is just no way we can get insert [link4] =
into [set3]. The</font></div><div class=3D"gmail_default"><font face=3D"tah=
oma, sans-serif">=C2=A0 =C2=A0 =C2=A0 is no evidence we can produce that wi=
ll allow a link with sink</font></div><div class=3D"gmail_default"><font fa=
ce=3D"tahoma, sans-serif">=C2=A0 =C2=A0 =C2=A0 type [t4]. Try the below wit=
h any of [a1], [a2], [a3])*)</font></div><div class=3D"gmail_default"><font=
 face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 (*</font></div><div class=3D"gma=
il_default"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 let (Augmented_=
set</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0 =C2=A0{set =3D set4; accepts =3D a4; cc =3D cc4} =
=3D</font></div><div class=3D"gmail_default"><font face=3D"tahoma, sans-ser=
if">=C2=A0 =C2=A0 =C2=A0 =C2=A0insert_link link4 set (cc3 a3) : (t3, _) aug=
mented_set) in</font></div><div class=3D"gmail_default"><font face=3D"tahom=
a, sans-serif">=C2=A0 =C2=A0 *)</font></div><div class=3D"gmail_default"><f=
ont face=3D"tahoma, sans-serif"><br></font></div><div class=3D"gmail_defaul=
t"><font face=3D"tahoma, sans-serif">=C2=A0 =C2=A0 ()</font></div><div clas=
s=3D"gmail_default"><font face=3D"tahoma, sans-serif">end</font></div><div =
class=3D"gmail_default"><font face=3D"tahoma, sans-serif"><br></font></div>=
<div class=3D"gmail_default"><font face=3D"tahoma, sans-serif">let _ =3D le=
t module T =3D Test (M) in T.test ()</font></div></div></div></div><div><br=
></div>-- <br><div class=3D"gmail_signature">Shayne Fletcher</div>
</div></div>

--001a11432e0ad476ac053e6187cb--
