Return-Path: <jacques-henri.jourdan@normalesup.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id E5D4B7FA6B
	for <caml-list@sympa.inria.fr>; Tue, 25 Oct 2016 19:04:40 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=jacques-henri.jourdan@normalesup.org; spf=Neutral smtp.mailfrom=jacques-henri.jourdan@normalesup.org; spf=None smtp.helo=postmaster@ulminfo.fr
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jacques-henri.jourdan@normalesup.org) identity=pra;
  client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="jacques-henri.jourdan@normalesup.org";
  x-conformance=sidf_compatible
Received-SPF: Neutral (mail2-smtp-roc.national.inria.fr: domain
  of jacques-henri.jourdan@normalesup.org does not assert
  whether or not 5.135.188.139 is permitted sender)
  identity=mailfrom; client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="jacques-henri.jourdan@normalesup.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@ulminfo.fr) identity=helo;
  client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="postmaster@ulminfo.fr";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3A5QNJIhKVcuqzNGoHBtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUIvTxwZ3uMQTl6Ol3ixeRBMOAuqgC1bWd6vi9ESxYuNDa7yBEKMQNHzY+yu?=
 =?us-ascii?q?wo3CUYSPafDkP6KPO4JwcbJ+9lEGFfwnegLEJOE9z/bVCB6le77DoVBwmtfVEt?=
 =?us-ascii?q?fre9Msfogs+2z+G//YHIK0UN3WLlIOA6EBLjkRjXuYEonMNSN683gk/VpXpMcv?=
 =?us-ascii?q?hLw2w5fXqcmh/94oG7+5s1t2wagPUs+NJaVr2+N4E5RrxRATBsezQw5cbrvBTH?=
 =?us-ascii?q?CxCI63QASGIOuhtOHwXBqhr9W8GinDH9s79f0SKDIMDtCJA5Xy6jp4VsVQXkgS?=
 =?us-ascii?q?FPYzww+3jKh9c1jK9duhPnpRti2YLdZqmTM+B7d6fQZs4CA21bUZACBGR6Hoqg?=
 =?us-ascii?q?Yt5XXKI6NuFCoty4/gNWoA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BqRgDAjw9YZIu8hwVcGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBBwEBAQEBFAEBAQEBAQEBAQEBBwEBAQEBgkg8AQEBAQEdWBMXU6Qzh16OaB+?=
 =?us-ascii?q?GAgIIgWlCEQEBAQEBAQEBAQEBA0g+gjMEARUBBIIQAQEBAwEjJjAFCwkCGCcDA?=
 =?us-ascii?q?gIhJREGDQYCAog1Aw8IBJdenTaIfw2DbAEBAQcBAQEBAQEhiDqCWIJHgUcLEQF?=
 =?us-ascii?q?/giGCWwWSfwGBOIUpNYx6jQ+GEYhuhBqEATRwgyIcgVRwhXFfgUEBAQE?=
X-IPAS-Result: =?us-ascii?q?A0BqRgDAjw9YZIu8hwVcGQEBAQEBAQEBAQEBBwEBAQEBFAE?=
 =?us-ascii?q?BAQEBAQEBAQEBBwEBAQEBgkg8AQEBAQEdWBMXU6Qzh16OaB+GAgIIgWlCEQEBA?=
 =?us-ascii?q?QEBAQEBAQEBA0g+gjMEARUBBIIQAQEBAwEjJjAFCwkCGCcDAgIhJREGDQYCAog?=
 =?us-ascii?q?1Aw8IBJdenTaIfw2DbAEBAQcBAQEBAQEhiDqCWIJHgUcLEQF/giGCWwWSfwGBO?=
 =?us-ascii?q?IUpNYx6jQ+GEYhuhBqEATRwgyIcgVRwhXFfgUEBAQE?=
X-IronPort-AV: E=Sophos;i="5.31,546,1473112800"; 
   d="scan'208,217";a="242315564"
Received: from ulminfo.fr ([5.135.188.139])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 25 Oct 2016 19:04:40 +0200
Received: from [139.19.168.39] (wks-50-28.mpi-sws.org [139.19.168.39])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by ulminfo.fr (Postfix) with ESMTPSA id A2BCEC087A;
	Tue, 25 Oct 2016 19:04:39 +0200 (CEST)
To: Tung Vu Xuan <toilatung90@gmail.com>,
 "Soegtrop, Michael" <michael.soegtrop@intel.com>
References: <CAFxmOcR4uoy174N3HzGO6=NRvrQGbuse_RAwmjxqJD5v5zQ6tg@mail.gmail.com>
 <0F7D3B1B3C4B894D824F5B822E3E5A172CFA061B@IRSMSX102.ger.corp.intel.com>
 <25995371-4f79-352b-35fe-7edb92de8161@normalesup.org>
 <0F7D3B1B3C4B894D824F5B822E3E5A172CFA06ED@IRSMSX102.ger.corp.intel.com>
 <CAFxmOcQwFS-_46nEv6btOYdK82Pj=LtP3BNTvR4zxkTkjJE0SQ@mail.gmail.com>
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
From: Jacques-Henri Jourdan <jacques-henri.jourdan@normalesup.org>
Message-ID: <f1116b3f-471b-ef33-96fe-271f81123fd2@normalesup.org>
Date: Tue, 25 Oct 2016 19:04:39 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Icedove/45.4.0
MIME-Version: 1.0
In-Reply-To: <CAFxmOcQwFS-_46nEv6btOYdK82Pj=LtP3BNTvR4zxkTkjJE0SQ@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------A8AF9B21CCAC858BC31DB576"
Subject: Re: [Caml-list] Approximations when converting from string to float

This is a multi-part message in MIME format.
--------------A8AF9B21CCAC858BC31DB576
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Ok.

But really, you should use ZArith, which is much more modern, faster and 
well-maintained than Big_int.

On 10/25/2016 06:58 PM, Tung Vu Xuan wrote:
> Hi,
>
> Thanks for suggestions. Since I am using a library for interval 
> arithmetic [1], your idea becomes easier for me.
>
> let intv_of_big_int bi =
>     let n = Big_int.num_bits_big_int bi in
>     if n <= 53 then
>       let bi_float = Big_int.float_of_big_int bi in
>       {low=bi_float;high=bi_float}
>     else begin
>       let n = n - 53 in
>       (* Extract top 53 bits of x *)
>       let top = Big_int.shift_right_big_int bi n in
>
>       let top_float = Big_int.float_of_big_int top in
>       (* interval [2, 2] *)
>       let two_I = {low=2.;high=2.} in
>       (* interval: [2, 2]**n *)
>       let two_I_to_n = pow_I_i two_I n in
>
>       (* compute upper bound of mantissa, represented as an intv *)
>       (* interval arithmetic is needed because rounding error might 
> occur *)
>       let mantissa_upper_bound_intv = {low=top_float;high=top_float} 
> +$ one_I in
>
>       (* intv of mantissa *)
>       let mantissa_intv = {low=top_float; 
> high=mantissa_upper_bound_intv.high} in
>       (* compute final interval *)
>       mantissa_intv *$ two_I_to_n
>     end
>
> [1] Alliot, J.M., Gotteland, J.B., Vanaret, C., Durand, N., Gianazza, 
> D.: Implementing an interval computation library for OCaml on 
> x86/amd64 architectures. In: ICFP. ACM (2012)
>
> Thanks again,
> Tung.
>
> On Tue, Oct 25, 2016 at 5:28 PM, Soegtrop, Michael 
> <michael.soegtrop@intel.com <mailto:michael.soegtrop@intel.com>> wrote:
>
>     Dear Jacques-Henri,
>
>     if the number is cut off after n digits, the upper and lower
>     bounds I suggested are the (truncated
>     integer)*10^(#cut-off-digits) and (truncated
>     integer+1)*10^(#cut-off-digits). The true number is obviously
>     between these two. Since the integer has higher precision than the
>     mantissa in the case of cut off, this is only a fraction of a
>     mantissa bit. The errors you get by multiplying with the powers of
>     10 is likely larger in most cases.
>
>     In the case you mentioned, 2^70=1180591620717411303424 and 32 bit
>     one would truncate after
>
>     1180591620 * 10^12
>
>     Maxima gives
>
>     is(1180591620 * 10^12 <= 2^70);
>
>     true
>
>     is(1180591621 * 10^12 >= 2^70);
>
>     true
>
>     As I said, this method doesn’t give the tightest bounds possible,
>     but it gives you true upper and lower bounds without multi
>     precision arithmetic. It gives 0 intervals e.g. for integers which
>     fit in the mantissa, but not for large exact powers of 2.
>
>     > Moreover, it is not possible to implement interval arithmetic
>     with OCaml, since you cannot change the rounding mode without a
>     bit of C...
>
>     It should be possible to make the powers of 10 tables such that
>     this works even with round to nearest, but it would likely be
>     easier to make a C library for this.
>
>     Of cause it is a good question if I/O is the right place to save
>     performance and waste precision. On the other hand you lose only 2
>     or 3 bits and you know what the precision is. I would think most
>     applications are such that the required precision is not exactly
>     an IEEE precision, so that these 2 or 3 bits are ok. I used this
>     method once in an embedded platform, where multi precision
>     arithmetic was not an option, and this was a good compromise.
>
>     Best regards,
>
>     Michael
>
>     Intel Deutschland GmbH
>     Registered Address: Am Campeon 10-12, 85579 Neubiberg, Germany
>     Tel: +49 89 99 8853-0, www.intel.de <http://www.intel.de>
>     Managing Directors: Christin Eisenschmid, Christian Lamprechter
>     Chairperson of the Supervisory Board: Nicole Lau
>     Registered Office: Munich
>     Commercial Register: Amtsgericht Muenchen HRB 186928
>
>
>
>
> -- 
> Tung Vu Xuan,
> Japan Advanced Institute of Science and Technology,
> Mobile: (+81) 080 4259 9135 -  (+84) 01689934381
> Hometown: Bac Ninh
> Email: toilatung90@gmail.com <mailto:toilatung90@gmail.com>


--------------A8AF9B21CCAC858BC31DB576
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Ok.<br>
    <br>
    But really, you should use ZArith, which is much more modern, faster
    and well-maintained than Big_int.<br>
    <br>
    <div class="moz-cite-prefix">On 10/25/2016 06:58 PM, Tung Vu Xuan
      wrote:<br>
    </div>
    <blockquote
cite="mid:CAFxmOcQwFS-_46nEv6btOYdK82Pj=LtP3BNTvR4zxkTkjJE0SQ@mail.gmail.com"
      type="cite">
      <div dir="ltr">Hi, 
        <div><br>
        </div>
        <div>Thanks for suggestions. Since I am using a library for
          interval arithmetic [1], your idea becomes easier for me.</div>
        <div><br>
        </div>
        <div>
          <div>let intv_of_big_int bi = </div>
          <div>    let n = Big_int.num_bits_big_int bi in</div>
          <div>    if n &lt;= 53 then </div>
          <div>      let bi_float = Big_int.float_of_big_int bi in</div>
          <div>      {low=bi_float;high=bi_float}</div>
          <div>    else begin</div>
          <div>      let n = n - 53 in</div>
          <div>      (* Extract top 53 bits of x *)</div>
          <div>      let top = Big_int.shift_right_big_int bi n in</div>
          <div><br>
          </div>
          <div>      let top_float = Big_int.float_of_big_int top in</div>
          <div>      (* interval [2, 2] *)<br>
          </div>
          <div>      let two_I = {low=2.;high=2.} in</div>
          <div>      (* interval: [2, 2]**n *)</div>
          <div>      let two_I_to_n = pow_I_i two_I n in</div>
          <div><br>
          </div>
          <div>      (* compute upper bound of mantissa, represented as
            an intv *)</div>
          <div>      (* interval arithmetic is needed because rounding
            error might occur *)<br>
          </div>
          <div>      let mantissa_upper_bound_intv =
            {low=top_float;high=top_float} +$ one_I in</div>
          <div><br>
          </div>
          <div>      (* intv of mantissa *)</div>
          <div>      let mantissa_intv = {low=top_float;
            high=mantissa_upper_bound_<wbr>intv.high} in</div>
          <div>      </div>
          <div>      (* compute final interval *)</div>
          <div>      mantissa_intv *$ two_I_to_n</div>
          <div>    end</div>
        </div>
        <div><br>
        </div>
        <div>[1] Alliot, J.M., Gotteland, J.B., Vanaret, C., Durand, N.,
          Gianazza, D.: Implementing
          an interval computation library for OCaml on x86/amd64
          architectures. In: ICFP.
          ACM (2012)<br>
        </div>
        <div><br>
        </div>
        <div>Thanks again,</div>
        <div>Tung.</div>
      </div>
      <div class="gmail_extra"><br>
        <div class="gmail_quote">On Tue, Oct 25, 2016 at 5:28 PM,
          Soegtrop, Michael <span dir="ltr">&lt;<a
              moz-do-not-send="true"
              href="mailto:michael.soegtrop@intel.com" target="_blank">michael.soegtrop@intel.com</a>&gt;</span>
          wrote:<br>
          <blockquote class="gmail_quote" style="margin:0 0 0
            .8ex;border-left:1px #ccc solid;padding-left:1ex">
            <div bgcolor="white" link="blue" vlink="purple" lang="EN-US">
              <div class="m_7654056020040313884WordSection1">
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Dear
                    Jacques-Henri,</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">if
                    the number is cut off after n digits, the upper and
                    lower bounds I suggested are the (truncated
                    integer)*10^(#cut-off-digits) and (truncated
                    integer+1)*10^(#cut-off-<wbr>digits). The true
                    number is obviously between these two. Since the
                    integer has higher precision than the mantissa in
                    the case of cut off, this is only a fraction of a
                    mantissa bit. The errors you get by multiplying with
                    the powers of 10 is likely larger in most cases.</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">In
                    the case you mentioned, 2^70=1180591620717411303424
                    and 32 bit one would truncate after</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">1180591620
                    * 10^12</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Maxima
                    gives</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">is(1180591620
                    * 10^12 &lt;= 2^70);</span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">true</span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">is(1180591621
                    * 10^12 &gt;= 2^70);</span></p>
                <p class="MsoNormal" style="text-indent:.5in"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">true</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">As
                    I said, this method doesn’t give the tightest bounds
                    possible, but it gives you true upper and lower
                    bounds without multi precision arithmetic. It gives
                    0 intervals e.g. for integers which fit in the
                    mantissa, but not for large exact powers of 2.
                  </span></p>
                <span class="">
                  <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                  <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">&gt;
                      Moreover, it is not possible to implement interval
                      arithmetic with OCaml, since you cannot change the
                      rounding mode without a bit of C...</span></p>
                  <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                </span>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">It
                    should be possible to make the powers of 10 tables
                    such that this works even with round to nearest, but
                    it would likely be easier to make a C library for
                    this.</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Of
                    cause it is a good question if I/O is the right
                    place to save performance and waste precision. On
                    the other hand you lose only 2 or 3 bits and you
                    know what the precision is. I would think most
                    applications are such that the required precision is
                    not exactly an IEEE precision, so that these 2 or 3
                    bits are ok. I used this method once in an embedded
                    platform, where multi precision arithmetic was not
                    an option, and this was a good compromise.</span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Best
                    regards,<span class="HOEnZb"></span></span></p>
                <span class="HOEnZb"><font color="#888888">
                    <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d"> </span></p>
                    <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Michael</span></p>
                  </font></span></div>
              <span class="">
                <p><font style="font-size:9px">Intel Deutschland GmbH<br>
                    Registered Address: Am Campeon 10-12, 85579
                    Neubiberg, Germany<br>
                    Tel: +49 89 99 8853-0, <a moz-do-not-send="true"
                      href="http://www.intel.de" target="_blank">www.intel.de</a><br>
                    Managing Directors: Christin Eisenschmid, Christian
                    Lamprechter<br>
                    Chairperson of the Supervisory Board: Nicole Lau<br>
                    Registered Office: Munich<br>
                    Commercial Register: Amtsgericht Muenchen HRB 186928</font><br>
                </p>
              </span></div>
          </blockquote>
        </div>
        <br>
        <br clear="all">
        <div><br>
        </div>
        -- <br>
        <div class="gmail_signature" data-smartmail="gmail_signature">
          <div dir="ltr">
            <div>
              <div dir="ltr">Tung Vu Xuan,
                <div>Japan Advanced Institute of Science and Technology,</div>
                <div>
                  <div>Mobile: (+81) 080 4259 9135 -  (+84) 01689934381</div>
                  <div>Hometown: Bac Ninh</div>
                  <div>Email: <a moz-do-not-send="true"
                      href="mailto:toilatung90@gmail.com"
                      target="_blank">toilatung90@gmail.com</a></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </blockquote>
    <br>
  </body>
</html>

--------------A8AF9B21CCAC858BC31DB576--
