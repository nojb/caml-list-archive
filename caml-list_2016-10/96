Return-Path: <jacques-henri.jourdan@normalesup.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 7C0E17FA6B
	for <caml-list@sympa.inria.fr>; Tue, 25 Oct 2016 16:19:08 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=jacques-henri.jourdan@normalesup.org; spf=Neutral smtp.mailfrom=jacques-henri.jourdan@normalesup.org; spf=None smtp.helo=postmaster@ulminfo.fr
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jacques-henri.jourdan@normalesup.org) identity=pra;
  client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="jacques-henri.jourdan@normalesup.org";
  x-conformance=sidf_compatible
Received-SPF: Neutral (mail2-smtp-roc.national.inria.fr: domain
  of jacques-henri.jourdan@normalesup.org does not assert
  whether or not 5.135.188.139 is permitted sender)
  identity=mailfrom; client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="jacques-henri.jourdan@normalesup.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@ulminfo.fr) identity=helo;
  client-ip=5.135.188.139;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jacques-henri.jourdan@normalesup.org";
  x-sender="postmaster@ulminfo.fr";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3A9wmfGRLVgz5prRdz0dmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXI/vxwZ3uMQTl6Ol3ixeRBMOAuqgC1bWd7fioGTRZp83e4DZaKN0EfiRGoP?=
 =?us-ascii?q?tVtjRoONSCB0z/IayiRA0BN+MGamVY+WqmO1NeAsf0ag6aiHSz6TkPBke3blIt?=
 =?us-ascii?q?daymUrLV2s++0uT3/5zIfy1JgiC8aPV8NkaYtwLU4+sfipJ/J7106hbPuHoAWe?=
 =?us-ascii?q?NL329hIxrHnR/3/9q959tj/iJKurQj8NNaXaz8V6I/V7lRCDk9Lnhz49fk40qQ?=
 =?us-ascii?q?BTCT72cRBz1F2iFDBBLIuUn3?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CIVADAaA9YZIu8hwVcGgEBAQECAQEBA?=
 =?us-ascii?q?QgBAQEBFQEBAQECAQEBAQgBAQEBgkg8AQEBAQEdaxelBpQ/ggeGIQIIgWVBEgE?=
 =?us-ascii?q?BAQEBAQEBAQEBA0g+gjMYghcBAQEDASMKUQsLGCoCAlcTCAKIRwgEtQmMcwEBC?=
 =?us-ascii?q?AIBJIg6CIJQhCMBCX2CIYJbBZoWiTCDBoNjggOHbYYRjQiEASUCfYUShlIBJYI?=
 =?us-ascii?q?JAQEB?=
X-IPAS-Result: =?us-ascii?q?A0CIVADAaA9YZIu8hwVcGgEBAQECAQEBAQgBAQEBFQEBAQE?=
 =?us-ascii?q?CAQEBAQgBAQEBgkg8AQEBAQEdaxelBpQ/ggeGIQIIgWVBEgEBAQEBAQEBAQEBA?=
 =?us-ascii?q?0g+gjMYghcBAQEDASMKUQsLGCoCAlcTCAKIRwgEtQmMcwEBCAIBJIg6CIJQhCM?=
 =?us-ascii?q?BCX2CIYJbBZoWiTCDBoNjggOHbYYRjQiEASUCfYUShlIBJYIJAQEB?=
X-Spam-Status: Yes
X-IronPort-AV: E=Sophos;i="5.31,545,1473112800"; 
   d="scan'208,217";a="242282553"
Received: from ulminfo.fr ([5.135.188.139])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 25 Oct 2016 16:19:07 +0200
Received: from [139.19.168.39] (wks-50-28.mpi-sws.org [139.19.168.39])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by ulminfo.fr (Postfix) with ESMTPSA id 2CF63C087A
	for <caml-list@inria.fr>; Tue, 25 Oct 2016 16:19:07 +0200 (CEST)
To: caml-list@inria.fr
References: <CAFxmOcR4uoy174N3HzGO6=NRvrQGbuse_RAwmjxqJD5v5zQ6tg@mail.gmail.com>
 <0F7D3B1B3C4B894D824F5B822E3E5A172CFA061B@IRSMSX102.ger.corp.intel.com>
From: Jacques-Henri Jourdan <jacques-henri.jourdan@normalesup.org>
Message-ID: <25995371-4f79-352b-35fe-7edb92de8161@normalesup.org>
Date: Tue, 25 Oct 2016 16:19:06 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
 Icedove/45.4.0
MIME-Version: 1.0
In-Reply-To: <0F7D3B1B3C4B894D824F5B822E3E5A172CFA061B@IRSMSX102.ger.corp.intel.com>
Content-Type: multipart/alternative;
 boundary="------------A401B5C6C30618FEA33DF961"
Subject: Re: [Caml-list] Approximations when converting from string to float

This is a multi-part message in MIME format.
--------------A401B5C6C30618FEA33DF961
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Hi all,

On 10/25/2016 01:20 PM, Soegtrop, Michael wrote:
>
> Dear Tung,
>
> converting strings to floats and keeping exact bounds is not that 
> complicated. The steps are:
>
> 1.)Convert the digits to an integer. You can stop when you have 1 or 2 
> digits more than the mantissa can hold. E.g. if you create a 32 or 64 
> bit float, a 32 bit or 64 bit integer is enough, because it is quite a 
> bit longer than the float mantissa. The lower and upper bounds are the 
> truncated value and the truncated value + 1. If the decimal number 
> fits into the mantissa, the bounds are the same. For the truncated 
> digits you just have to count them to correct the decimal exponent. 
> Also you need to take care of the decimal point to get the proper 
> decimal exponent.
>

The issue is that values of the remaining digits *do* matter for the 
right result to be computed, not just the number of them.

Imagine if the integer you get is 2^70 or 2^70-1. Then the lower bounds 
of the intervals have to be different (2^70 is exactly a double 
precision float, so 2^70-1 maps to the preceding float), but notice that 
these two integers differ only by their last digit.


> 2.)Convert the integer to a float. If the integer is smaller than the 
> mantissa length, this is trivial. If it is longer, you divide by 2 
> until it fits. The lower limit from step 1 is rounded down, the upper 
> limit is rounded up while dividing. The number of divide steps is 
> limited by the difference of the integer size you used and the floats 
> mantissa size (that is the exponent size of the float +1). To make it 
> faster, you can also do a binary intersection search of the right 
> power of 2, but it might not be worth it, because dividing integers by 
> 2 is cheap and the max loop count is small.
>
> 3.)In order to handle the decimal point and decimal exponents, you 
> need tables of 10^(2^n). Use the binary representation of the decimal 
> exponent to find out which powers to multiply. For each power you need 
> a lower and upper bound value (as a floating point number). You can 
> compute these tables with libraries supporting higher precision 
> numbers and store the numbers (best in hex float notation – which is 
> standard C). In an IEEE floating point implementation, you can choose 
> the rounding direction (up down middle). When you multiply the factors 
> of the lower and upper bounds, you set the rounding direction 
> accordingly. The C function for this is fesetround. The exponent 
> tables are fairly small, because 10^(2^n) is larger than the maximal 
> floating point number for rather modest n (for double precision, n=8 = 
> 10^256 should be the largest value you need).
>
> That’s it. Since you multiply several numbers (at most 10), each of 
> which is rounded up /down, your range might be a bit larger than 
> necessary. For getting the minimum bound you need multi precision 
> arithmetic, but the method above works with just target precision 
> arithmetic and gives reliable bounds.
>

That's the point : if you really want the tight interval, then you need 
arbitrary precision arithmetic.

Moreover, it is not possible to implement interval arithmetic with 
OCaml, since you cannot change the rounding mode without a bit of C...

-- 
JH

--------------A401B5C6C30618FEA33DF961
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Hi all,<br>
    <br>
    <div class="moz-cite-prefix">On 10/25/2016 01:20 PM, Soegtrop,
      Michael wrote:<br>
    </div>
    <blockquote
cite="mid:0F7D3B1B3C4B894D824F5B822E3E5A172CFA061B@IRSMSX102.ger.corp.intel.com"
      type="cite">
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
      <meta name="Generator" content="Microsoft Word 14 (filtered
        medium)">
      <style><!--
/* Font Definitions */
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-priority:34;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.EmailStyle17
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:70.85pt 70.85pt 56.7pt 70.85pt;}
div.WordSection1
	{page:WordSection1;}
/* List Definitions */
@list l0
	{mso-list-id:1788741036;
	mso-list-type:hybrid;
	mso-list-template-ids:-343229666 427953994 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-text:"%1\.\)";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level4
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level7
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
--></style><!--[if gte mso 9]><xml>
<o:shapedefaults v:ext="edit" spidmax="1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
<o:shapelayout v:ext="edit">
<o:idmap v:ext="edit" data="1" />
</o:shapelayout></xml><![endif]-->
      <div class="WordSection1">
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">Dear
            Tung,<o:p></o:p></span></p>
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><o:p> </o:p></span></p>
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">converting
            strings to floats and keeping exact bounds is not that
            complicated. The steps are:<o:p></o:p></span></p>
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><o:p> </o:p></span></p>
        <p class="MsoListParagraph"
          style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><span
              style="mso-list:Ignore">1.)<span style="font:7.0pt
                &quot;Times New Roman&quot;">   
              </span></span></span><!--[endif]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">Convert
            the digits to an integer. You can stop when you have 1 or 2
            digits more than the mantissa can hold. E.g. if you create a
            32 or 64 bit float, a 32 bit or 64 bit integer is enough,
            because it is quite a bit longer than the float mantissa.
            The lower and upper bounds are the truncated value and the
            truncated value + 1. If the decimal number fits into the
            mantissa, the bounds are the same. For the truncated digits
            you just have to count them to correct the decimal exponent.
            Also you need to take care of the decimal point to get the
            proper decimal exponent.</span></p>
      </div>
    </blockquote>
    <br>
    The issue is that values of the remaining digits *do* matter for the
    right result to be computed, not just the number of them.<br>
    <br>
    Imagine if the integer you get is 2^70 or 2^70-1. Then the lower
    bounds of the intervals have to be different (2^70 is exactly a
    double precision float, so 2^70-1 maps to the preceding float), but
    notice that these two integers differ only by their last digit.<br>
    <br>
    <br>
    <blockquote
cite="mid:0F7D3B1B3C4B894D824F5B822E3E5A172CFA061B@IRSMSX102.ger.corp.intel.com"
      type="cite">
      <div class="WordSection1">
        <p class="MsoListParagraph"
          style="text-indent:-.25in;mso-list:l0 level1 lfo1"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><o:p></o:p></span></p>
        <p class="MsoListParagraph"
          style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><span
              style="mso-list:Ignore">2.)<span style="font:7.0pt
                &quot;Times New Roman&quot;">   
              </span></span></span><!--[endif]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">Convert
            the integer to a float. If the integer is smaller than the
            mantissa length, this is trivial. If it is longer, you
            divide by 2 until it fits. The lower limit from step 1 is
            rounded down, the upper limit is rounded up while dividing.
            The number of divide steps is limited by the difference of
            the integer size you used and the floats mantissa size (that
            is the exponent size of the float +1). To make it faster,
            you can also do a binary intersection search of the right
            power of 2, but it might not be worth it, because dividing
            integers by 2 is cheap and the max loop count is small.<o:p></o:p></span></p>
        <p class="MsoListParagraph"
          style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><span
              style="mso-list:Ignore">3.)<span style="font:7.0pt
                &quot;Times New Roman&quot;">   
              </span></span></span><!--[endif]--><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">In
            order to handle the decimal point and decimal exponents, you
            need tables of 10^(2^n). Use the binary representation of
            the decimal exponent to find out which powers to multiply.
            For each power you need a lower and upper bound value (as a
            floating point number). You can compute these tables with
            libraries supporting higher precision numbers and store the
            numbers (best in hex float notation – which is standard C).
            In an IEEE floating point implementation, you can choose the
            rounding direction (up down middle). When you multiply the
            factors of the lower and upper bounds, you set the rounding
            direction accordingly. The C function for this is
            fesetround. The exponent tables are fairly small, because
            10^(2^n) is larger than the maximal floating point number
            for rather modest n (for double precision, n=8 = 10^256
            should be the largest value you need).<o:p></o:p></span></p>
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D"><o:p> </o:p></span></p>
        <p class="MsoNormal"><span
style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D">That’s
            it. Since you multiply several numbers (at most 10), each of
            which is rounded up /down, your range might be a bit larger
            than necessary. For getting the minimum bound you need multi
            precision arithmetic, but the method above works with just
            target precision arithmetic and gives reliable bounds.</span></p>
      </div>
    </blockquote>
    <br>
    That's the point : if you really want the tight interval, then you
    need arbitrary precision arithmetic.<br>
    <br>
    Moreover, it is not possible to implement interval arithmetic with
    OCaml, since you cannot change the rounding mode without a bit of
    C...<br>
    <br>
    -- <br>
    JH<br>
  </body>
</html>

--------------A401B5C6C30618FEA33DF961--
