Return-Path: <Jocelyn.Serot@univ-bpclermont.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 692917FE44
	for <caml-list@sympa.inria.fr>; Tue,  5 Jul 2016 17:26:01 +0200 (CEST)
IronPort-PHdr: 9a23:RoPg5RPbcJa9HqEjEWUl6mtUPXoX/o7sNwtQ0KIMzox0KPT8rarrMEGX3/hxlliBBdydsKMczbCK+PC8EUU7or+5+EgYd5JNUxJXwe43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6anHS+4HYoFwnlMkItf6KuS9aU1Zj8h7z60qaQSj0AvCC6b7J2IUf+hiTqne5Sv7FfLL0swADCuHpCdrce72ppIVWOg0S0vZ/or9ZLuh5dsPM59sNGTb6yP+FhFeQZX3waNDUSz8TusVHmRAqL530TGkEXiQYAVwPM6RW/WpbqrgP7sPB80W+UJ5ulY6ozXGGA6KxmTA7uvxyGLTkluDX1jcd9iLNd5imsvRtj65PSYZ/QPuJ1eq7HeNQcWSxPRJACBGR6HoqgYt5XXKI6NuFCoty4/gNWoA==
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=Jocelyn.Serot@univ-bpclermont.fr; spf=None smtp.mailfrom=Jocelyn.Serot@univ-bpclermont.fr; spf=None smtp.helo=postmaster@mta02.udamail.fr
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  Jocelyn.Serot@univ-bpclermont.fr) identity=pra;
  client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="Jocelyn.Serot@univ-bpclermont.fr";
  x-sender="Jocelyn.Serot@univ-bpclermont.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  Jocelyn.Serot@univ-bpclermont.fr) identity=mailfrom;
  client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="Jocelyn.Serot@univ-bpclermont.fr";
  x-sender="Jocelyn.Serot@univ-bpclermont.fr";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mta02.udamail.fr) identity=helo;
  client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="Jocelyn.Serot@univ-bpclermont.fr";
  x-sender="postmaster@mta02.udamail.fr";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0C3AQBu0HtXhxV1McFcgnCBFw18AbQ/hn0ihys8EAEBAQEBAQEBEQEBAQoLCQkhL4IygkhrOmuIRwEJjheNO58tAQEBI4gfCIo5gi8FmROGCYExiUWHE4VfiBmHbwIPJoInEQuBTmyIeQEBAQ
X-IPAS-Result: A0C3AQBu0HtXhxV1McFcgnCBFw18AbQ/hn0ihys8EAEBAQEBAQEBEQEBAQoLCQkhL4IygkhrOmuIRwEJjheNO58tAQEBI4gfCIo5gi8FmROGCYExiUWHE4VfiBmHbwIPJoInEQuBTmyIeQEBAQ
X-IronPort-AV: E=Sophos;i="5.26,580,1459807200"; 
   d="scan'208,217";a="225685181"
Received: from mta02.udamail.fr ([193.49.117.21])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Jul 2016 17:26:00 +0200
Received: from mta02.udamail.fr (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTPS id 05B31160167
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:26:00 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTP id EC9E3160191
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
X-Virus-Scanned: amavisd-new at mta02.udamail.fr
Received: from mta02.udamail.fr ([127.0.0.1])
	by localhost (mta02.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id tJoFlmlVItzc for <caml-list@inria.fr>;
	Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
Received: from proxy02.udamail.fr (proxy02.udamail.fr [193.49.117.19])
	by mta02.udamail.fr (Postfix) with ESMTPS id D2AC9160167
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy02.udamail.fr (Postfix) with ESMTP id CFC911622F2
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
Received: from proxy02.udamail.fr ([127.0.0.1])
	by localhost (proxy02.udamail.fr [127.0.0.1]) (amavisd-new, port 10032)
	with ESMTP id LFKqLDd2OtSu for <caml-list@inria.fr>;
	Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy02.udamail.fr (Postfix) with ESMTP id 1D7C31622F4
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
X-Virus-Scanned: amavisd-new at proxy02.udamail.fr
Received: from proxy02.udamail.fr ([127.0.0.1])
	by localhost (proxy02.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id Hf46tPBi5AGF for <caml-list@inria.fr>;
	Tue,  5 Jul 2016 17:25:59 +0200 (CEST)
Received: from [192.168.0.42] (lav63-2-88-164-92-250.fbx.proxad.net [88.164.92.250])
	by proxy02.udamail.fr (Postfix) with ESMTPSA id 94DDB1622F2
	for <caml-list@inria.fr>; Tue,  5 Jul 2016 17:25:58 +0200 (CEST)
From: =?iso-8859-1?Q?Jocelyn_S=E9rot?= <Jocelyn.Serot@univ-bpclermont.fr>
Content-Type: multipart/alternative; boundary="Apple-Mail=_53BA7EBB-AE9A-40BE-955E-48A0D2E8C36F"
Message-Id: <64440D5D-1FC8-4C53-9520-D9D3D21F8FE5@univ-bpclermont.fr>
Date: Tue, 5 Jul 2016 17:25:56 +0200
To: OCaml Mailing List <caml-list@inria.fr>
Mime-Version: 1.0 (Mac OS X Mail 7.3 \(1878.6\))
X-Mailer: Apple Mail (2.1878.6)
Subject: [Caml-list] Q: functors and "has a" inheritance


--Apple-Mail=_53BA7EBB-AE9A-40BE-955E-48A0D2E8C36F
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=windows-1252

Dear all,=20

I=92m stuck with a problem related with the use of functors for implementin=
g a library.
The library concerns Labeled Transition Systems but i=92ll present it in a =
simplified version using sets.

Suppose i have a (very simplified !) Set module, which i will call Myset to=
 distinguish from that of the standard library :

=97=97=97=97 myset.mli
module type T =3D sig
  type elt=20
  type t=20
  val empty: t
  val add: elt -> t -> t
  val elems: t -> elt list
  val fold: (elt -> 'a -> 'a) -> t -> 'a -> 'a
end

module Make (E : Set.OrderedType) : T with type elt =3D E.t
=97=97=97=20

=97=97=97=97 myset.ml
module type T =3D sig =85 (* idem myset.mli *) end

module Make (E : Set.OrderedType) =3D struct
  module Elt =3D E
  type elt =3D E.t
  type t =3D { elems: elt list; }=20=20
  let empty =3D { elems =3D [] }
  let add q s =3D { elems =3D q :: s.elems }  (* obviously wrong, but does =
not matter here ! *)
  let elems s =3D s.elems
  let fold f s z =3D List.fold_left (fun z e -> f e z) z s.elems
end
=97=97=97=20

First, i add a functor for computing the product of two sets :

=97=97=97=97 myset.mli (cont=92d)
module Product (S1: T) (S2: T) :
sig
  include T with type elt =3D S1.elt * S2.elt
  val product: S1.t -> S2.t -> t
end
=97=97=97=20

=97=97=97=97 myset.ml (cont=92d)
module Product
  (S1: T)
  (S2: T) =3D
struct
  module R =3D
    Make (struct type t =3D S1.elt * S2.elt let compare =3D compare end)
    include R
    let product s1 s2 =3D
      S1.fold
        (fun q1 z ->
           S2.fold
             (fun q2 z -> R.add (q1,q2) z)
             s2
             z)
        s1
        R.empty
end
=97=97=97=20

Here=92s a typical usage of the Myset module :=20

=97=97 ex1.ml=20
module IntSet =3D Myset.Make (struct type t =3D int let compare =3D compare=
 end)
module StringSet =3D Myset.Make (struct type t =3D string let compare =3D c=
ompare end)

let s1 =3D IntSet.add 1 (IntSet.add 2 IntSet.empty)
let s2 =3D StringSet.add "a" (StringSet.add "b" StringSet.empty)

module IntStringSet =3D Myset.Product (IntSet) (StringSet)

let s3 =3D IntStringSet.product s1 s2
=97=97

So far, so good.=20

Now suppose i want to =AB augment =BB the Myset module so that some kind of=
 attribute is attached to each set element. I could of course just modify t=
he definition of type [t] and the related functions in the files [myset.ml]=
 and [myset.mli]. But suppose i want to reuse as much as possible the code =
already written. My idea is define a new module - let=92s call it [myseta] =
(=AB a =BB for attributes) - in which the type [t] will include a type [Mys=
et.t] and the definitions of this module will make use, as much as possible=
, of those defined in [Myset].

Here=92s a first proposal (excluding the Product functor for the moment) :=
=20

=97=97=97=97 myseta.mli
module type Attr =3D sig type t end

module type T =3D sig
  type elt=20
  type attr
  type t=20
  module S: Myset.T
  val empty: t
  val add: elt * attr -> t -> t
  val elems: t -> elt list
  val attrs: t -> (elt * attr) list
  val set_of: t -> S.t
  val fold: (elt * attr -> 'a -> 'a) -> t -> 'a -> 'a
end

module Make (E : Set.OrderedType) (A: Attr) : T with type elt =3D E.t and t=
ype attr =3D A.t
=97=97=97=20

=97=97=97=97 myseta.ml
module type Attr =3D sig type t end

module type T =3D sig (* idem myseta.mli *) end

module Make (E : Set.OrderedType) (A : Attr) =3D struct
  module Elt =3D E
  type elt =3D E.t
  type attr =3D A.t
  module S =3D Myset.Make(E)
  type t =3D { elems: S.t; attrs: (elt * attr) list }
  let empty =3D { elems =3D S.empty; attrs =3D [] }
  let add (e,a) s =3D { elems =3D S.add e s.elems; attrs =3D (e,a) :: s.att=
rs }
  let elems s =3D S.elems s.elems
  let attrs s =3D s.attrs
  let set_of s =3D s.elems
  let fold f s z =3D List.fold_left (fun z e -> f e z) z s.attrs
end
=97=97=97=20

In practice, of course the [Attr] signature will include other specificatio=
ns.
In a sense, this is a =AB has a =BB inheritance : whenever i build a [Myset=
a] module, i actually build a [Myset] sub-module and this module is used to=
 implement all the set-related operations.=20
Again, so far, so good.
The problem shows when i try to define the [Product] functor for the [Myset=
a] module :
It=92s signature is similar to that of the [Myset.Product] functor, with an=
 added sharing constraint for attributes (in fact, we could imagine a more =
sophisticated scheme for merging attributes but cartesian product is here) :

=97=97=97=97 myset.mli (cont=92d)
module Product (S1: T) (S2: T) :
sig
  include T with type elt =3D S1.elt * S2.elt
             and type attr =3D S1.attr * S2.attr
  val product: S1.t -> S2.t -> t
end
=97=97=97=20

Now, here=92s my current implementation

=97=97=97=97 myset.ml (cont=92d)
module Product
  (S1: T)
  (S2: T) =3D
struct
  module R =3D
    Make
      (struct type t =3D S1.elt * S2.elt let compare =3D compare end)
      (struct type t =3D S1.attr * S2.attr let compare =3D compare end)
  include R
  module P =3D Myset.Product(S1.S)(S2.S)
  let product s1 s2 =3D
    { elems =3D P.product (S1.set_of s1) (S2.set_of s2);
            attrs =3D
        List.fold_left
          (fun acc (e1,a1) ->
             List.fold_left (fun acc (e2,a2) -> ((e1,e2),(a1,a2))::acc) acc=
 (S2.attrs s2))
          []
          (S1.attrs s1) }
end
=97=97=97=20

I use the [Myseta.Make] functor for building the resulting module [named R =
here]. For defining the [product] function, i first use the [Myset.Product]=
 functor applied on the two related sub-modules [S1] and [S2] to build the =
product module (named P here) and re-use the [product] function of this mod=
ule to compute the [elems] component of the result. The other component is =
computed directly.=20
The problem is that when i try to compile this i get this message :=20

File "myseta.ml", line 44, characters 14-53:
Error: This expression has type P.t =3D Myset.Product(S1.S)(S2.S).t
       but an expression was expected of type S.t =3D R.S.t

My intuition is that a sharing constraint is missing somewhere but i just c=
annot figure out where to add it.=20
I tried to rewrite the signature of the [Myseta.Product] functor (in [myset=
a.mli]) as :

module Product (S1: T) (S2: T) :
sig
  include T with type elt =3D S1.elt * S2.elt
             and type attr =3D S1.attr * S2.attr
             and type S.t =3D Myset.Product(S1.S)(S2.S).t  (* added constra=
int *)
  val product: S1.t -> S2.t -> t
end

but it did not change anything..

So my question is : is my diagnostic correct and, if yes, which constraint(=
s) are missing and where; or, conversely, am i completely =AB misusing =BB =
the functor mechanisms for implementing this kind of =AB reuse by inclusion=
 =BB ?=20

Any help will be grealy appreciated : i=92ve been reading and re-reading ab=
out functors for the last two days but have the impression that at this ste=
p, things get more and more opaque.. :-S

In anycase, the source code is here : http://filez.univ-bpclermont.fr/lamue=
mlqpm

Jocelyn=

--Apple-Mail=_53BA7EBB-AE9A-40BE-955E-48A0D2E8C36F
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=windows-1252

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dwindows-1252"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-=
mode: space; -webkit-line-break: after-white-space;">Dear all,&nbsp;<div><b=
r></div><div>I=92m stuck with a problem related with the use of functors fo=
r implementing a library.</div><div>The library concerns Labeled Transition=
 Systems but i=92ll present it in a simplified version using sets.</div><di=
v><br></div><div>Suppose i have a (very simplified !) Set module, which i w=
ill call Myset to distinguish from that of the standard library :</div><div=
><br></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">=97=
=97=97=97&nbsp;myset.mli</span></font></div><div><div><font face=3D"Courier=
" style=3D"font-size: 11px;">module type T =3D sig</font></div><div><font f=
ace=3D"Courier" style=3D"font-size: 11px;">&nbsp; type elt&nbsp;</font></di=
v><div><font face=3D"Courier" style=3D"font-size: 11px;">&nbsp; type t&nbsp=
;</font></div><div><font face=3D"Courier" style=3D"font-size: 11px;">&nbsp;=
 val empty: t</font></div><div><font face=3D"Courier" style=3D"font-size: 1=
1px;">&nbsp; val add: elt -&gt; t -&gt; t</font></div><div><font face=3D"Co=
urier" style=3D"font-size: 11px;">&nbsp; val elems: t -&gt; elt list</font>=
</div><div><font face=3D"Courier" style=3D"font-size: 11px;">&nbsp; val fol=
d: (elt -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a</font></div><div><font=
 face=3D"Courier" style=3D"font-size: 11px;">end</font></div><div><font fac=
e=3D"Courier" style=3D"font-size: 11px;"><br></font></div><div><font face=
=3D"Courier" style=3D"font-size: 11px;">module Make (E : Set.OrderedType) :=
 T with type elt =3D E.t</font></div></div><div><font face=3D"Courier"><spa=
n style=3D"font-size: 11px;">=97=97=97&nbsp;</span></font></div><div><font =
face=3D"Courier"><span style=3D"font-size: 11px;"><br></span></font></div><=
div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">=97=97=97=
=97&nbsp;myset.ml</span></font></div><div><div><font face=3D"Courier"><span=
 style=3D"font-size: 11px;">module type T =3D sig&nbsp;=85 (* idem myset.ml=
i *) end</span></font></div><div><font face=3D"Courier"><span style=3D"font=
-size: 11px;"><br></span></font></div><div><font face=3D"Courier"><span sty=
le=3D"font-size: 11px;">module Make (E : Set.OrderedType) =3D struct</span>=
</font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&=
nbsp; module Elt =3D E</span></font></div><div><font face=3D"Courier"><span=
 style=3D"font-size: 11px;">&nbsp; type elt =3D E.t</span></font></div><div=
><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; type t =3D =
{ elems: elt list; } &nbsp;</span></font></div><div><font face=3D"Courier">=
<span style=3D"font-size: 11px;">&nbsp; let empty =3D { elems =3D [] }</spa=
n></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"=
>&nbsp; let add q s =3D { elems =3D q :: s.elems } &nbsp;(* obviously wrong=
, but does not matter here ! *)</span></font></div><div><font face=3D"Couri=
er"><span style=3D"font-size: 11px;">&nbsp; let elems s =3D s.elems</span><=
/font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&n=
bsp; let fold f s z =3D List.fold_left (fun z e -&gt; f e z) z s.elems</spa=
n></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"=
>end</span></font></div></div><div><span style=3D"font-size: 11px; font-fam=
ily: Courier;">=97=97=97&nbsp;</span></div></div><div><br></div><div>First,=
 i add a functor for computing the product of two sets :</div><div><br></di=
v><div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">=97=97=
=97=97&nbsp;myset.mli (cont=92d)</span></font></div><div><div><font face=3D=
"Courier"><span style=3D"font-size: 11px;">module Product (S1: T) (S2: T) :=
</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">sig</span></font></div><div><font face=3D"Courier"><span style=3D"fon=
t-size: 11px;">&nbsp; include T with type elt =3D S1.elt * S2.elt</span></f=
ont></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbs=
p; val product: S1.t -&gt; S2.t -&gt; t</span></font></div><div><font face=
=3D"Courier"><span style=3D"font-size: 11px;">end</span></font></div></div>=
<div><font face=3D"Courier"><span style=3D"font-size: 11px;">=97=97=97&nbsp=
;</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: =
11px;"><br></span></font></div><div><div><font face=3D"Courier"><span style=
=3D"font-size: 11px;">=97=97=97=97&nbsp;myset.ml (cont=92d)</span></font></=
div><div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">modul=
e Product</span></font></div><div><font face=3D"Courier"><span style=3D"fon=
t-size: 11px;">&nbsp; (S1: T)</span></font></div><div><font face=3D"Courier=
"><span style=3D"font-size: 11px;">&nbsp; (S2: T) =3D</span></font></div><d=
iv><font face=3D"Courier"><span style=3D"font-size: 11px;">struct</span></f=
ont></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbs=
p; module R =3D</span></font></div><div><font face=3D"Courier"><span style=
=3D"font-size: 11px;">&nbsp; &nbsp; Make&nbsp;</span></font><span style=3D"=
font-size: 11px; font-family: Courier;">(struct&nbsp;</span><span style=3D"=
font-size: 11px; font-family: Courier;">type t =3D S1.elt * S2.elt&nbsp;</s=
pan><span style=3D"font-size: 11px; font-family: Courier;">let compare =3D =
compare&nbsp;</span><span style=3D"font-size: 11px; font-family: Courier;">=
end)</span></div><div><font face=3D"Courier"><span style=3D"font-size: 11px=
;">&nbsp; &nbsp; include R</span></font></div><div><font face=3D"Courier"><=
span style=3D"font-size: 11px;">&nbsp; &nbsp; let product s1 s2 =3D</span><=
/font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&n=
bsp; &nbsp; &nbsp; S1.fold</span></font></div><div><font face=3D"Courier"><=
span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &nbsp; (fun q1 z -&gt;=
</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S2.fold</span></font></div><=
div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &=
nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(fun q2 z -&gt; R.add (q1,q2) z)</span></f=
ont></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbs=
p; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s2</span></font></div><div><fon=
t face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &n=
bsp; &nbsp; &nbsp; &nbsp;z)</span></font></div><div><font face=3D"Courier">=
<span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &nbsp; s1</span></fon=
t></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp;=
 &nbsp; &nbsp; &nbsp; R.empty</span></font></div><div><font face=3D"Courier=
"><span style=3D"font-size: 11px;">end</span></font></div></div><div><span =
style=3D"font-size: 11px; font-family: Courier;">=97=97=97&nbsp;</span></di=
v></div></div><div><span style=3D"font-size: 11px; font-family: Courier;"><=
br></span></div><div>Here=92s a typical usage of the Myset module :&nbsp;</=
div><div><br></div><div>=97=97 ex1.ml&nbsp;</div><div><div><font face=3D"Co=
urier"><span style=3D"font-size: 11px;">module IntSet =3D Myset.Make (struc=
t type t =3D int let compare =3D compare end)</span></font></div><div><font=
 face=3D"Courier"><span style=3D"font-size: 11px;">module StringSet =3D Mys=
et.Make (struct type t =3D string let compare =3D compare end)</span></font=
></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"><br></s=
pan></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px=
;">let s1 =3D IntSet.add 1 (IntSet.add 2 IntSet.empty)</span></font></div><=
div><font face=3D"Courier"><span style=3D"font-size: 11px;">let s2 =3D Stri=
ngSet.add "a" (StringSet.add "b" StringSet.empty)</span></font></div><div><=
br></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">modul=
e IntStringSet =3D Myset.Product (IntSet) (StringSet)</span></font></div><d=
iv><font face=3D"Courier"><span style=3D"font-size: 11px;"><br></span></fon=
t></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">let s3=
 =3D IntStringSet.product s1 s2</span></font></div><div>=97=97</div></div><=
div><br></div><div>So far, so good.&nbsp;</div><div><br></div><div>Now supp=
ose i want to =AB&nbsp;augment&nbsp;=BB the Myset module so that some kind =
of attribute is attached to each set element. I could of course just modify=
 the definition of type [t] and the related functions in the files [myset.m=
l] and [myset.mli]. But suppose i want to reuse as much as possible the cod=
e already written. My idea is define a new module - let=92s call it [myseta=
] (=AB&nbsp;a&nbsp;=BB for attributes) - in which the type [t] will include=
 a type [Myset.t] and the definitions of this module will make use, as much=
 as possible, of those defined in [Myset].</div><div><br></div><div>Here=92=
s a first proposal (excluding the Product functor for the moment) :&nbsp;</=
div><div><br></div><div><div><font face=3D"Courier"><span style=3D"font-siz=
e: 11px;">=97=97=97=97&nbsp;myseta.mli</span></font></div><div><div><font f=
ace=3D"Courier"><span style=3D"font-size: 11px;">module type Attr =3D sig t=
ype t end</span></font></div><div><font face=3D"Courier"><span style=3D"fon=
t-size: 11px;"><br></span></font></div><div><font face=3D"Courier"><span st=
yle=3D"font-size: 11px;">module type T =3D sig</span></font></div><div><fon=
t face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; type elt&nbsp;</=
span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11p=
x;">&nbsp; type attr</span></font></div><div><font face=3D"Courier"><span s=
tyle=3D"font-size: 11px;">&nbsp; type t&nbsp;</span></font></div><div><font=
 face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; module S: Myset.T=
</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">&nbsp; val empty: t</span></font></div><div><font face=3D"Courier"><s=
pan style=3D"font-size: 11px;">&nbsp; val add: elt * attr -&gt; t -&gt; t</=
span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11p=
x;">&nbsp; val elems: t -&gt; elt list</span></font></div><div><font face=
=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; val attrs: t -&gt; (el=
t * attr) list</span></font></div><div><font face=3D"Courier"><span style=
=3D"font-size: 11px;">&nbsp; val set_of: t -&gt; S.t</span></font></div><di=
v><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; val fold: =
(elt * attr -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a</span></font></div=
><div><font face=3D"Courier"><span style=3D"font-size: 11px;">end</span></f=
ont></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"><br>=
</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">module Make (E : Set.OrderedType) (A: Attr) : T with type elt =3D E.t=
 and type attr =3D A.t</span></font></div></div><div><font face=3D"Courier"=
><span style=3D"font-size: 11px;">=97=97=97&nbsp;</span></font></div><div><=
font face=3D"Courier"><span style=3D"font-size: 11px;"><br></span></font></=
div><div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">=97=
=97=97=97&nbsp;myseta.ml</span></font></div><div><div><font face=3D"Courier=
"><span style=3D"font-size: 11px;">module type Attr =3D sig type t end</spa=
n></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"=
><br></span></font></div><div><font face=3D"Courier"><span style=3D"font-si=
ze: 11px;">module type T =3D sig (* idem myseta.mli *) end</span></font></d=
iv><div><br></div><div><font face=3D"Courier"><span style=3D"font-size: 11p=
x;">module Make (E : Set.OrderedType) (A : Attr) =3D struct</span></font></=
div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; mod=
ule Elt =3D E</span></font></div><div><font face=3D"Courier"><span style=3D=
"font-size: 11px;">&nbsp; type elt =3D E.t</span></font></div><div><font fa=
ce=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; type attr =3D A.t</s=
pan></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px=
;">&nbsp; module S =3D Myset.Make(E)</span></font></div><div><font face=3D"=
Courier"><span style=3D"font-size: 11px;">&nbsp; type t =3D { elems: S.t; a=
ttrs: (elt * attr) list }</span></font></div><div><font face=3D"Courier"><s=
pan style=3D"font-size: 11px;">&nbsp; let empty =3D { elems =3D S.empty; at=
trs =3D [] }</span></font></div><div><font face=3D"Courier"><span style=3D"=
font-size: 11px;">&nbsp; let add (e,a) s =3D { elems =3D S.add e s.elems; a=
ttrs =3D (e,a) :: s.attrs }</span></font></div><div><font face=3D"Courier">=
<span style=3D"font-size: 11px;">&nbsp; let elems s =3D S.elems s.elems</sp=
an></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;=
">&nbsp; let attrs s =3D s.attrs</span></font></div><div><font face=3D"Cour=
ier"><span style=3D"font-size: 11px;">&nbsp; let set_of s =3D s.elems</span=
></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">=
&nbsp; let fold f s z =3D List.fold_left (fun z e -&gt; f e z) z s.attrs</s=
pan></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px=
;">end</span></font></div></div><div><span style=3D"font-size: 11px; font-f=
amily: Courier;">=97=97=97&nbsp;</span></div></div></div><div><br></div><di=
v>In practice, of course the [Attr] signature will include other specificat=
ions.</div><div>In a sense, this is a =AB&nbsp;has a&nbsp;=BB inheritance :=
 whenever i build a [Myseta] module, i actually build a [Myset] sub-module =
and this module is used to implement all the set-related operations.&nbsp;<=
/div><div>Again, so far, so good.</div><div>The problem shows when i try to=
 define the [Product] functor for the [Myseta] module :</div><div>It=92s si=
gnature is similar to that of the [Myset.Product] functor, with an added sh=
aring constraint for attributes (in fact, we could imagine a more sophistic=
ated scheme for merging attributes but cartesian product is here) :</div><d=
iv><br></div><div><div><font face=3D"Courier"><span style=3D"font-size: 11p=
x;">=97=97=97=97&nbsp;myset.mli (cont=92d)</span></font></div><div><div><fo=
nt face=3D"Courier"><span style=3D"font-size: 11px;">module Product (S1: T)=
 (S2: T) :</span></font></div><div><font face=3D"Courier"><span style=3D"fo=
nt-size: 11px;">sig</span></font></div><div><font face=3D"Courier"><span st=
yle=3D"font-size: 11px;">&nbsp; include T with type elt =3D S1.elt * S2.elt=
</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and type attr =3D S1.=
attr * S2.attr</span></font></div><div><span style=3D"font-size: 11px; font=
-family: Courier;">&nbsp; val product: S1.t -&gt; S2.t -&gt; t</span></div>=
<div><font face=3D"Courier"><span style=3D"font-size: 11px;">end</span></fo=
nt></div></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"=
>=97=97=97&nbsp;</span></font></div></div><div><font face=3D"Courier"><span=
 style=3D"font-size: 11px;"><br></span></font></div><div>Now, here=92s my c=
urrent implementation</div><div><br></div><div><div><font face=3D"Courier">=
<span style=3D"font-size: 11px;">=97=97=97=97&nbsp;myset.ml (cont=92d)</spa=
n></font></div><div><div><font face=3D"Courier"><span style=3D"font-size: 1=
1px;">module Product</span></font></div><div><font face=3D"Courier"><span s=
tyle=3D"font-size: 11px;">&nbsp; (S1: T)</span></font></div><div><font face=
=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; (S2: T) =3D</span></fo=
nt></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">struc=
t</span></font></div><div><font face=3D"Courier"><span style=3D"font-size: =
11px;">&nbsp; module R =3D</span></font></div><div><font face=3D"Courier"><=
span style=3D"font-size: 11px;">&nbsp; &nbsp; Make</span></font></div><div>=
<font face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp=
; (struct type t =3D S1.elt * S2.elt let compare =3D compare end)</span></f=
ont></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&nbs=
p; &nbsp; &nbsp; (struct type t =3D S1.attr * S2.attr let compare =3D compa=
re end)</span></font></div><div><font face=3D"Courier"><span style=3D"font-=
size: 11px;">&nbsp; include R</span></font></div><div><span style=3D"font-s=
ize: 11px; font-family: Courier;">&nbsp; module P =3D Myset.Product(S1.S)(S=
2.S)</span></div><div><span style=3D"font-size: 11px; font-family: Courier;=
">&nbsp; let product s1 s2 =3D</span></div><div><span style=3D"font-size: 1=
1px; font-family: Courier;">&nbsp; &nbsp; { elems =3D P.product (S1.set_of =
s1) (S2.set_of s2);</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp;&nbsp;<font face=3D"Courier"><span style=3D"font-size: 11px;">attrs =3D<=
/span></font></div><div><font face=3D"Courier"><span style=3D"font-size: 11=
px;">&nbsp; &nbsp; &nbsp; &nbsp; List.fold_left</span></font></div><div><fo=
nt face=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &=
nbsp; &nbsp; (fun acc (e1,a1) -&gt;</span></font></div><div><font face=3D"C=
ourier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
 &nbsp; &nbsp;List.fold_left&nbsp;</span></font><span style=3D"font-size: 1=
1px; font-family: Courier;">(fun acc (e2,a2) -&gt; ((e1,e2),(a1,a2))::acc)&=
nbsp;</span><span style=3D"font-size: 11px; font-family: Courier;">acc&nbsp=
;</span><span style=3D"font-size: 11px; font-family: Courier;">(S2.attrs s2=
))</span></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"=
>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; []</span></font></div><div><font face=
=3D"Courier"><span style=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &nbsp; &=
nbsp; (S1.attrs s1) }</span></font></div><div><font face=3D"Courier"><span =
style=3D"font-size: 11px;">end</span></font></div></div><div><span style=3D=
"font-size: 11px; font-family: Courier;">=97=97=97&nbsp;</span></div></div>=
<div><br></div><div>I use the [Myseta.Make] functor for building the result=
ing module [named R here]. For defining the [product] function, i first use=
 the [Myset.Product] functor applied on the two related sub-modules [S1] an=
d [S2] to build the product module (named P here) and re-use the [product] =
function of this module to compute the [elems] component of the result. The=
 other component is computed directly.&nbsp;</div><div>The problem is that =
when i try to compile this i get this message :&nbsp;</div><div><br></div><=
div><div><i>File "myseta.ml", line 44, characters 14-53:</i></div><div><i>E=
rror: This expression has type P.t =3D Myset.Product(S1.S)(S2.S).t</i></div=
><div><i>&nbsp; &nbsp; &nbsp; &nbsp;but an expression was expected of type =
S.t =3D R.S.t</i></div></div><div><i><br></i></div><div>My intuition is tha=
t a sharing constraint is missing somewhere but i just cannot figure out wh=
ere to add it.&nbsp;</div><div>I tried to rewrite the signature of the [Mys=
eta.Product] functor (in [myseta.mli]) as :</div><div><br></div><div><div><=
font face=3D"Courier"><span style=3D"font-size: 11px;">module Product (S1: =
T) (S2: T) :</span></font></div><div><font face=3D"Courier"><span style=3D"=
font-size: 11px;">sig</span></font></div><div><font face=3D"Courier"><span =
style=3D"font-size: 11px;">&nbsp; include T with type elt =3D S1.elt * S2.e=
lt</span></font></div><div><font face=3D"Courier"><span style=3D"font-size:=
 11px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and type attr =3D S=
1.attr * S2.attr</span></font></div><div><font face=3D"Courier"><span style=
=3D"font-size: 11px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and t=
ype S.t =3D Myset.Product(S1.S)(S2.S).t &nbsp;(* added constraint *)</span>=
</font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;">&=
nbsp; val product: S1.t -&gt; S2.t -&gt; t</span></font></div><div><font fa=
ce=3D"Courier"><span style=3D"font-size: 11px;">end</span></font></div></di=
v><div><br></div><div>but it did not change anything..</div><div><br></div>=
<div>So my question is : is my diagnostic correct and, if yes, which constr=
aint(s) are missing and where; or, conversely, am i completely =AB&nbsp;mis=
using&nbsp;=BB the functor mechanisms for implementing this kind of =AB&nbs=
p;reuse by inclusion&nbsp;=BB ?&nbsp;</div><div><br></div><div>Any help wil=
l be grealy appreciated : i=92ve been reading and re-reading about functors=
 for the last two days but have the impression that at this step, things ge=
t more and more opaque.. :-S</div><div><br></div><div>In anycase, the sourc=
e code is here :&nbsp;<a href=3D"http://filez.univ-bpclermont.fr/lamuemlqpm=
">http://filez.univ-bpclermont.fr/lamuemlqpm</a></div><div><br></div><div>J=
ocelyn</div></body></html>=

--Apple-Mail=_53BA7EBB-AE9A-40BE-955E-48A0D2E8C36F--
