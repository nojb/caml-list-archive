Return-Path: <SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C2394E0C27
	for <caml-list@sympa.inria.fr>; Tue,  1 Feb 2022 14:07:20 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=flst=SQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1";
  x-record-text="v=spf1 a -all"
IronPort-SDR: nLTU2yFf/9jFSP48UlCsuOY/DKT3s/uteeUYmIYa4uQrhPEN11wEWTw+OpXUsi4veTcJnKSnN+
 qZLrcItQXWrocWEd4BnKBy8xJXjBytEulNk2AN+q8q2Ty9QqBfrzFXuqGInOwfTkRIXSVRv+mf
 jFc9TdXcEcUK+yoFRwYQxyjh4uRERdbUusA4ZKDlaAPU4kWfkvlmoVMIsvxx7hqMY/fpF/CG/6
 2Tv+jy/kULwdgU/sX5eJ374kncsVygoDE9jS85BARalZ2jQzfr/oZCBywV4+1k+Ce/zHX3RzN5
 J3IQLZ+7L2/UcQNCR0vsVQTE
X-IPAS-Result: =?us-ascii?q?A0ApBQARMPlhhyIeaIFaFoNuWS4ZAWRSBRYVBwgxhEmJA?=
 =?us-ascii?q?4gQgRUBghWGIYZxiBeFeBABAwENKgEFDgECBAEBghCGVgIeBgEFMxMBAgQBA?=
 =?us-ascii?q?QEBAwIDAQEBAQEBAwEBBQEBAQIBAQIDBAETAQEBAQ0LDggMBRATPGRkBIFLB?=
 =?us-ascii?q?IF0CzQNgjUMDAODdwMBGAECBgQGOwMnIwMUAQYDAhEBFwEUChcBEhQGAQGCa?=
 =?us-ascii?q?AGDFgUKkmScDH8ygQGDTgEDAgECCwMBDgkmg3aBZA0CFIEAF4JCg0pUSgGDA?=
 =?us-ascii?q?AmDBHkCJxCBVUSBFYIpSgdugkYGFwEBAQEBF4EkAQGDOBeCTgSRVw4+AQEmB?=
 =?us-ascii?q?hAkGg4FCAwICAYBARMDCgINIQgFHhUBHx0EDgUEBAEQFg0HBQYFBAILL5FaB?=
 =?us-ascii?q?wwfJY0rileVCTQHg0mBOAYLh1wFO4Echn2Fc4RTg0yDcoFLhReFOoZakR8hl?=
 =?us-ascii?q?ikggieFcnwIgQcJgkKCA5IQFAQEhS2BTiqBTR4MBzMaMEOCNQEzCUUBAwINA?=
 =?us-ascii?q?QICAwECAQIJAQEChRqIYS4WgycogT6BAgqCDzuFSQJAMwIBATQCBgEKAQEDC?=
 =?us-ascii?q?YVjAQEFEwsBhH8tghcBAQ?=
IronPort-PHdr: A9a23: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
IronPort-Data: A9a23:d2lfJ6x3F2clhOv8KuJ6t+ezwCrEfRIJ4+MujC+fZmUNrF6WrkVVy
 DFOD2qBb//fZzbweNt0Pd6y8koG75SEzd9iTQFk+VhgHilAwSbnLYTAfx2oZ0t+DeWaERk5t
 51GAjXkBJppJpMJjk71atANlVEliefQAOOU5NfsYkidfyc9IMsaoU8ly75RbrJA24DjWVvX4
 Yqq+qUzBXf8s9JKGjJMg068gEg31BjCkGtwUosWOJinFHeH/5UkJMp3yZOZdxMUcaEIdgKOf
 Nsv+Znilo/vE7jBPfv++lrzWhVirrc/pmFigFIOM0SpqkAqSiDfTs/XOdJEAXq7hQllkPgom
 YlWuIWXbj4IZPKTxuAPaTBmIzBHaPguFL/veRBTsOSW3xSAa3zo0uljB0EwPJQF96BwG24mG
 f4wcWpcKEnb26TtmPTgFoGAhex7RCXvFLglgSk1wzXCEaMdeMXbRKHb+dJT3DExn91DW/HEa
 J8QbTNpKg/LYxhOJks/ApUjmuylnT/6Ly0er0iazUYyyzSNnVIti+iF3Nz9Reeae95zg02ip
 yHY7VXbDAMoNvu8xm/Qmp6rrraTzHKkCN16+KeD3vVjhVnWwm0IFDUNRF6jqL+4jFS/UpRRM
 SQpFjEGqLhrslSsSsjhUha4pn+doxNaXMBfewEn1O2T4vOFvx2UH08jdx8bN4N4sN0MbAIax
 2bcyrsFGgdTmLGSTHuc8JKdojWzJTUZIAc+icksEVZtDz7L/N9bs/7fcjpwOPLl0ICoSFkc1
 xjQ8HJm393/mOZSj82GEUb7byWEiKKhouQd3ATMG0W/5wV2ZZXNi2eAuAGCtq4owGqx5b+Fs
 T0Ilo2w9ukIBpzlqcBgaOAdRfex4PKULDDXgVhuBoQssTO39BZPnLy8AhkjdS+F0e5dJ1cFh
 XM/XysKvfe/21PxNsdKj3qZUZhC8EQZPY2NugroRtRPeINtUwSM4TtjY0Wdt0i0zhR3zPFhZ
 8vKLpfyZZr/NUiB5GfnLwv6+eFwrh3SOUuIHMuTI+mPjOLCNS7IF9/pznPXNbhpvMtoXzk5A
 /4Ga5rblEUAOAEPSjPa94cPIEpiEJTILc6eliCjTcbaelAOMDh4U5f5mOpxE6Q4wfg9vrqWr
 xmVBx8JoHKi1CavAVjbOhhehEbHBssXQYQTZnB3Yj5FGhELPe6S0UvoX8BmIOB6pLE/lqMco
 jtsU5zoP8mjgw/vo1w1BaQRZqQ4HPhyrQ7RbSejfhYleJtsG17A9tP+J1a9/i4TCCG6ro07/
 63m0RnUGMJRSwNnBcfQSfSu01Lg5ilGwLspBRLFcotJZUHh0Il2MCit3PU5FMcBdEfYzTyA2
 gfKXBoV/LGfo4I8/NTTq7qDqoOlT7l3EkZARjaJ9bGyJDXX9WqlwJZdXaCPZz+EDDH4/6CrZ
 ON0yfDgMaxezAYa6dIkS7sylPAw/driobNe3z9IJnSTYgT5EK5kL1mHwdJL6v9HyIhftFbkQ
 UmI4NRbZeiENc65Ql4cIA0pMraK2f0OwGCA6ORsZl394D5r8bGHV0RLIhTKjzZSdeMnPIQgy
 OYnmcgX9w3u00p6Yoze1nhZpzaWM3gNc6Q7rZVEUoXlvQoczA0Qa5LrDCKrsoqEbM9BMxVxL
 zLI1rDOga9QmhjLf3YpTyGf2PoEw4wJvAFWwVQCIVWQh9eDgeU4hUUD/TMyRwVT7xNGz+MiY
 zg7Zxctff2Dr2VymcxOf2GwAAUfVheXzUzGzQdbnmPuSUT1BHfGK3cwOLrW8U0Um46GkuO3I
 F1FJKfZvTfWkAXZ2ztrH1Zir+3/QNdx8Azbhc3hGN6Kd3X/SSSwmbegPALktDO+af7dRmWez
 QWpwAq0Qaf8KCgbrrZ9DtWKk7MKR3ho4URZWf87uvth8X70IVmPNPvnF6x1UttKI+3W/ES4D
 c13O88JUA6xvMpLhisDC/RKe9eYg9ZwjOc/lnjXyaLqfldRQveFcH4dy8QmuFIWfg==
IronPort-HdrOrdr: A9a23:R4hk6amfwsktl9b4+6q4EiEgOALpDfIr3DAbv31ZSRFFG/Fw9v
 rPoB1173DJYVoqMk3I+urgBEDjex3hHPdOiOF7AV7IZmXbUQWTQb1K3M/L/HnLGiH19OJRvJ
 0QEJRWOZnXFlY/qc775WCDYrMdKTS8gcKVuds=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-AV: E=Sophos;i="5.88,333,1635199200"; 
   d="scan'208,217";a="4696438"
X-MGA-submission: =?us-ascii?q?MDHDf9AiSj5sk+YrK6iPsV5iMDNiCUXuwUED1E?=
 =?us-ascii?q?q/a7ByW45FeYe86x0GLYSwi+z5RQ0krPi/MC3PIIiV9cQEiZwSNSN/n+?=
 =?us-ascii?q?elwSFDZ/K6nh75/S7rJ4XQcewqWY5DcdAT8GxWdAgqr5txEy7hfESBDE?=
 =?us-ascii?q?BFTjlOuAU05z82ebAdW7DTAw=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 01 Feb 2022 14:07:19 +0100
Received: from set (set.irisa.fr [131.254.10.170])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 40461566487;
	Tue,  1 Feb 2022 14:01:00 +0100 (CET)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 01 Feb 2022 14:00:57 +0100
Message-ID: <875ypykagm.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Feb  1 14:01:01 2022 +0100 (CET))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.332265, queueID=D6F3856648A
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of January 25 to
February 01, 2022.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

ppx_seq v0.1.1
OCaml Labs Joins Tarides
For Diversity and the OCaml Community: Get Involved in Outreachy Summer 2022
Set up OCaml 2.0.0-beta13
First release of scfg
Brr 0.0.3, a toolkit for programming browsers
(anonymous?) polymorphic records
2 postdoc positions on Runtime Verification at CEA LIST, Universit=C3=A9 Pa=
ris-Saclay, France
Old CWN


ppx_seq v0.1.1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-ppx-seq-v0-1-1/9227/1>


hyphenrf announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  Hello everyone, my first contribution to opam-repository has just been
  merged and is waiting to hit the caches of [opam.ocaml.org].

  [ppx_seq] is a cute un-intrusive literal syntax for `Seq'. The
  rewriter is simple and has very small surface area: just `[%seq x; y;
  z; ...]' and `[%seq.empty]'.  It tries to be maximally compatible with
  all OCaml releases from 4.07 (when `Seq' was introduced) to 4.14 and
  beyond

  The reason I created this rewriter is to make it an easier choice to
  reach first for `Seq' as a general data structure (instead of
  e.g. list). That wasn't quite attractive before because of how minimal
  the `Seq' module was, it was mostly used as an intermediate step
  between two types of collections, but now with 4.14 about to be
  released, `Seq' is becoming a first-class data structure with a very
  versatile API.

  I hope my little rewriter helps make it even more attractive to
  use. Check it out and maybe leave me some feedback.  Thanks <3


[opam.ocaml.org] <https://opam.ocaml.org>

[ppx_seq] <https://github.com/hyphenrf/ppx_seq>


OCaml Labs Joins Tarides
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ocaml-labs-joins-tarides/9229/1>


Thomas Gazagnaire announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  Gemma Gordon (@gemmag) and I are delighted to announce that OCaml
  Labs, a spinout from the University of Cambridge, is joining
  Tarides. After successfully collaborating on many OCaml projects over
  the last four years, this alliance will formally combine the expertise
  of both groups. Joining forces will accelerate OCaml development and
  its broader adoption, and enable us to continue with our shared goal
  of bringing OCaml into mainstream use. Furthermore, it will bring the
  security, portability and performance of OCaml to a large spectrum of
  use-cases: from academic endeavours such as formal methods and
  existing threats within cyber security, to real-world applications for
  climate change, sustainable agriculture, and even space exploration!

  All of OCaml Labs=E2=80=99 existing responsibilities and open source
  commitments will migrate over to Tarides, and thanks to how closely
  the teams already work, business will continue without interruption to
  continuity or delivery. Gemma Gordon will step up as CEO of Tarides,
  and I will lead the technological vision and strategy as CTO.

  The OCaml 5.0 release will support multicore and effects handlers,
  influencing every aspect of the language and its ecosystem. The update
  will significantly improve both performance and user experience,
  whilst maintaining existing features that the community loves. Using
  the teams=E2=80=99 combined experience and zest for innovation, Tarides is
  looking to the future of the OCaml language and community with
  excitement. Since Tarides=E2=80=99 inception we have envisioned a future =
where
  all OCaml applications are easily deployable as specialised, secure
  and energy-efficient MirageOS unikernels. We believe that this
  alliance is a step further in that direction.

  _This alliance will complement the commercial offerings of Tarides and
  contribute to Tarides' mission: empowering developers, communities and
  organisations to adopt OCaml as their primary programming experience
  by providing training, expertise and development services around the
  OCaml language._

  Read the full announcement [here], including details of our goals and
  the focus for 2022.  This alliance brings the headcount of Tarides up
  to 60+ people, all working towards making OCaml the best language for
  any, and every project. Join our team and reach out for commercial
  services at: [https://tarides.com/]


[here] <https://tarides.com/blog>

[https://tarides.com/] <https://tarides.com/company>


For Diversity and the OCaml Community: Get Involved in Outreachy Summer 2022
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/for-diversity-and-the-ocaml-community-get-in=
volved-in-outreachy-summer-2022/9234/1>


Sonja Heinze announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  As @patricoferris [has mentioned] previously, the Outreachy call for
  open-source communities and project submissions has started. As a
  reminder, [Outreachy] is an initiative that provides a framework
  through which open-source communities can offer three month
  internships directed at people from any kind of under-represented
  background in open source. With that, Outreachy helps open-source
  communities grow on several levels: diversity, experience, size, and
  popularity.

  The OCaml community participated in Outreachy in summer 2019, summer
  2020, [summer 2021], and currently in [winter 2021/22]. All our
  interns have done and are doing really amazing jobs, and summer 2022
  is just around the corner! The following timeline illustrates the
  process:

  <https://i.imgur.com/DbzeiMO.png>

  So let's start getting involved!


[has mentioned]
<https://discuss.ocaml.org/t/become-an-outreachy-mentor-support-the-growth-=
and-diversity-of-the-ocaml-community/8213/15?u=3Dpitag>

[Outreachy] <https://www.outreachy.org>

[summer 2021] <https://discuss.ocaml.org/t/outreachy-summer-2021/8438>

[winter 2021/22]
<https://discuss.ocaml.org/t/announcing-our-new-outreachy-interns/8932>

Ways to Get Involved
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Community members can take on different roles in the Outreachy effort,
  and all of them are very important! Maybe the most important (and most
  involved) role is being a mentor.


Mentoring
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84

  Mentors have two responsibilities: leading the project and guiding the
  interns/applicants.


Leading the Project
=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=
=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=
=88=E2=94=88=E2=94=88

  One responsability is leading the project. Concretely, that means
  outlining an internship project, submitting a project description to
  Outreachy, making sure that the context repo for that project gets
  ready for the application/"contribution" phase, and guiding the
  project throughout the internship, including reacting to changes.  All
  of that must match the Outreachy framework, which we [explained in
  detail] last round, based on the timeline structure shown above.


[explained in detail]
<https://discuss.ocaml.org/t/become-an-outreachy-mentor-support-the-growth-=
and-diversity-of-the-ocaml-community/8213#step-by-step-process-for-being-a-=
mentor-11>


Guiding the Intern and the Applicants
=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=
=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=
=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=
=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=94=88=E2=
=94=88=E2=94=88=E2=94=88=E2=94=88

  Their other responsibility is personal guidance. During the
  application/"contribution" period, mentors answer questions and review
  code for multiple applicants. During the internship, they also offer
  pair-programming sessions and facilitate more specific guidance, and
  general support for their interns.

  All of that is usually quite time-intensive, so it's important to have
  some support from other community members and strong support from a
  concrete co-mentor.


Co-mentoring
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84=E2=94=84=E2=94=84=E2=94=84

  A co-mentor does the same job as described in the "Guiding the Intern
  and the Applicants" tasks above, so having a co-mentor is very
  important! Of course, if a co-mentor also wants to take part in the
  project's direction, that's great as well! This means that the line
  between co-mentoring and mentoring isn't always clear.


Volunteering (aka "Acting as a Joker :bat:")
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=
=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=
=84=E2=94=84=E2=94=84

  Mentors and co-mentors receive a lot of general questions related to
  OCaml and programming in addition to specific questions about the
  project. That's where Outreachy volunteers can be very helpful! They
  help all applicants and interns across projects with (usually)
  project-unspecific questions and give a very important technical base
  support.


Point Out Potential Project Ideas
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=
=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84

  Apart from not having enough time, the main reason that stops folks
  from becoming a mentor is the lack of project ideas. So if you have
  potential project ideas, please point them out, even if you don't have
  time to mentor!  Generally, a self-contained, uncontroversial, and
  incremental project makes the most suitable project for Outreachy.
  It's also important for a project to be associated with a repo that
  can serve as a basis for easy contributions during the application
  phase. When in doubt, don't keep your ideas to yourself. Any idea can
  be helpful!


Prepare Your Repos
=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=
=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=84=E2=94=
=84=E2=94=84

  In general, if you maintain a repo, it's really nice to be welcoming
  to new contributors. Concretely, that means having clear contributing
  guidelines, good newcomer issues, and well-labeled issues. As a nice
  side-effect, this also makes your project a better target for future
  Outreachy projects.


Ready to Get Involved?
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  If you've gotten interested in any of those roles or have any other
  comments, please just answer here in the thread.  It would be super
  nice to get a discussion going and start our Outreachy efforts early!


Sudha Parimala then said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I along with @shakthimaan @gs0510 are submitting a project:

  =E2=80=A2 Extend OCaml 5's parallel benchmark suite.

  The idea is to gather parallel benchmarks available elsewhere and make
  them available in our benchmark suite, to aid the development of the
  OCaml compiler and parallel programming libraries. Relevant repos:
  [sandmark] and [current-bench].


[sandmark] <https://github.com/ocaml-bench/sandmark>

[current-bench] <https://github.com/ocurrent/current-bench>


Set up OCaml 2.0.0-beta13
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-beta13/9248/1>


Sora Morimoto announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

Changed
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Do not install opam-depext if it's not enabled.


Fixed
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Print a proper error if the version not found in the `.ocamlfor=
mat'
    file.

  <https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-beta13>


First release of scfg
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-first-release-of-scfg/9249/1>


zapashcanon announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I'm pleased to announce the first release of [scfg] on opam.

  It provides a library and an executable to work with the [scfg
  configuration file format]. (disclaimer: scfg has been created by my
  good friend @emersion)

  Here's an example of an scfg file taken from the specification:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 train "Shinkansen" {
  =E2=94=82 	model "E5" {
  =E2=94=82 		max-speed 320km/h
  =E2=94=82 		weight 453.5t
  =E2=94=82=20
  =E2=94=82 		lines-served "T=C5=8Dhoku" "Hokkaido"
  =E2=94=82 	}
  =E2=94=82=20
  =E2=94=82 	model "E7" {
  =E2=94=82 		max-speed 275km/h
  =E2=94=82 		weight 540t
  =E2=94=82=20
  =E2=94=82 		lines-served "Hokuriku" "J=C5=8Detsu"
  =E2=94=82 	}
  =E2=94=82 }
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Scfg is a file format designed to be simple and indeed the
  implementation was really straightforward. I'm planning to use it in
  small tools I wrote (mostly [sway] tools written in OCaml) but never
  released because I couldn't stand having to use TOML, YAML or JSON for
  them=E2=80=A6

  The library provides an executable to validate and pretty-print an
  scfg file. It'll indent it properly, remove useless quoting and
  whitespaces:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ scfg spec.scfg
  =E2=94=82 train Shinkansen {
  =E2=94=82   model E5 {
  =E2=94=82     max-speed 320km/h
  =E2=94=82     weight 453.5t
  =E2=94=82     lines-served T=C5=8Dhoku Hokkaido
  =E2=94=82   }
  =E2=94=82   model E7 {
  =E2=94=82     max-speed 275km/h
  =E2=94=82     weight 540t
  =E2=94=82     lines-served Hokuriku J=C5=8Detsu
  =E2=94=82   }
  =E2=94=82 }
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The library is made of four modules : `Types', `Parse', `Pp' and
  `Query'.

  The `Types' module simply defines the following types, which are all
  you need to deal with scfg:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 (** A directive has a name, a list of parameters and children (=
a list of directive). *)
  =E2=94=82 type directive =3D
  =E2=94=82   { name : string
  =E2=94=82   ; params : string list
  =E2=94=82   ; children : directive list
  =E2=94=82   }
  =E2=94=82=20
  =E2=94=82 (** A config is a list of directives. *)
  =E2=94=82 type config =3D directive list
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The others modules can be used as follow:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let file =3D {|
  =E2=94=82   train A-Train {
  =E2=94=82     bla bla bla
  =E2=94=82   }
  =E2=94=82   train "John Col Train" {
  =E2=94=82     tut tut tut
  =E2=94=82   }
  =E2=94=82 |}
  =E2=94=82=20
  =E2=94=82 (* parsing the file *)
  =E2=94=82 let config =3D
  =E2=94=82   (* there's also a `Parse.from_file` function that should be m=
ore useful *)
  =E2=94=82   match Scfg.Parse.from_string file with
  =E2=94=82   | Error e ->
  =E2=94=82     Format.eprintf "error: %s@." e;
  =E2=94=82     exit 1
  =E2=94=82   | Ok config -> config
  =E2=94=82=20
  =E2=94=82 (* printing the file *)
  =E2=94=82 let () =3D
  =E2=94=82   Format.printf "```scfg@.%a@.```@." Scfg.Pp.config config
  =E2=94=82=20
  =E2=94=82 (* querying the file *)
  =E2=94=82 let () =3D
  =E2=94=82   (* gets the first directive with the name `train` *)
  =E2=94=82   match Scfg.Query.get_dir "train" config with
  =E2=94=82   | None -> Format.printf "No train found.@."
  =E2=94=82   | Some train -> (
  =E2=94=82     (* get the parameter at index 0 in the `train` directive *)
  =E2=94=82     match Scfg.Query.get_param 0 train with
  =E2=94=82     | Error _e -> Format.printf "Train has no name.@."
  =E2=94=82     | Ok name -> Format.printf "The first train is `%s`.@." nam=
e )
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  For more have a look at the [project's README], the [documentation] or
  feel free to ask here ! :partying_face:


[scfg] <https://git.zapashcanon.fr/zapashcanon/scfg>

[scfg configuration file format] <https://git.sr.ht/~emersion/scfg>

[sway] <https://swaywm.org/>

[project's README]
<https://git.zapashcanon.fr/zapashcanon/scfg/src/branch/master#scfg>

[documentation] <https://doc.zapashcanon.fr/scfg/>


Brr 0.0.3, a toolkit for programming browsers
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-brr-0-0-3-a-toolkit-for-programming-brow=
sers/9252/1>


Daniel B=C3=BCnzli announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  It's my pleasure to announce the release `0.0.3' of [`Brr'], a toolkit
  for programming browsers in OCaml with the [`js_of_ocaml'] compiler.

  Once it has made it to the repo, install with `opam install brr' and
  consult the [API docs and manuals] (or via `odig doc brr').

  Among small additions and fixes, this release brings support for
  `js_of_ocaml' 4.0.0. Thanks to Hugo Heuzard (@hhugo) who has made the
  ground work in `js_of_ocaml' this means that:

  1. `Brr', `js_of_ocaml' and ([soon]) `gen_js_api' JavaScript bindings
     can now all be used in the same program without problems (issue
     [#2]).
  2. You no longer need to specify the `-no-check-prim' flag at
     bytecode link time. Linking against the `brr' library is
     sufficient, see the [build instructions].

  The [release notes] have all the details.


[`Brr'] <https://erratique.ch/software/brr>

[`js_of_ocaml'] <https://ocsigen.org/js_of_ocaml>

[API docs and manuals] <https://erratique.ch/software/brr/doc/>

[soon] <https://github.com/LexiFi/gen_js_api/pull/164>

[#2] <https://github.com/dbuenzli/brr/issues/2>

[build instructions]
<https://erratique.ch/software/brr/doc/web_page_howto.html>

[release notes]
<https://github.com/dbuenzli/brr/blob/master/CHANGES.md#v003-2022-01-30-la-=
forclaz-vs>


(anonymous?) polymorphic records
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/anonymous-polymorphic-records/9256/1>


nrolland asked
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Is there a way to avoid to create records only to preserve
  polymorphism ?

  Say, for this, in haskell style
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 h :: (forall r. (r -> a) -> (f r -> f b)) -> f a -> f b
  =E2=94=82 h malg =3D malg id
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


octachron replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

  You can use objects, they can have polymorphic methods:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let f (id:<f:'a. 'a -> 'a>) =3D id#f 0, id#f "zero"
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


Ma=C3=ABlan also replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  The following doesn=E2=80=99t help reducing the syntactic noise, but note=
 that
  when using a record for non-prenex polymorphism like this, your record
  has only one field and is immutable, so (with a recent enough OCaml)
  you can unbox it and get rid of the runtime overhead:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 type ('a, 'b) fwrap =3D { f : 'r. ('r -> 'a) -> 'r list -> 'b l=
ist } [@@unboxed]
  =E2=94=82=20
  =E2=94=82 let apply_id : type a b. (a, b) fwrap -> a list -> b list =3D
  =E2=94=82   fun w xs -> w.f Fun.id xs
  =E2=94=82 (* is compiled the same as just: *)
  =E2=94=82 let apply_id_magic : type a b. (a, b) fwrap -> a list -> b list=
 =3D
  =E2=94=82   fun w xs -> (Obj.magic w) Fun.id xs
  =E2=94=82=20
  =E2=94=82 let mwrap : type a. (a, a) fwrap =3D { f =3D List.map }
  =E2=94=82 (* is compiled to nothing at all (alias of List.map). *)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


2 postdoc positions on Runtime Verification at CEA LIST, Universit=C3=A9 Pa=
ris-Saclay, France
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://sympa.inria.fr/sympa/arc/caml-list/2022-02/msg00001.html>


Julien Signoles announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The Software Safety and Security Lab at CEA LIST, Universit=C3=A9
  Paris-Saclay, France has 2 open postdoc positions in the area of
  runtime verification for code safety and security:

  =E2=80=A2 Designing Compilation Techniques for Improving Efficiency of E-=
ACSL,
    a Runtime Assertion Checker for C Programs

    <http://julien-signoles.fr/positions/postdoc-eacsl.pdf>

  =E2=80=A2 Control Flow Integrity for Remote Attestation

    <http://julien-signoles.fr/positions/postdoc-cfi.pdf>

  The candidates will:
  =E2=80=A2 solve challenging research problems;
  =E2=80=A2 implement their results in Frama-C, an industrial-strength
    open-source framework for analyses of C code;
  =E2=80=A2 evaluate their solutions on concrete benchmarks or/and use case=
s;
  =E2=80=A2 publish their results in international conferences and journals.

  Strong knowledge in at least one of the following areas is welcome:
  =E2=80=A2 programming
    =E2=80=A2 OCaml and C
    =E2=80=A2 formal semantics
  =E2=80=A2 formal verification
    =E2=80=A2 runtime verification, static analysis, formal specification
      languages, =E2=80=A6
  =E2=80=A2 compilation
    =E2=80=A2 code generation, program transformation, type system, =E2=80=
=A6

  Interested applicants should send a CV and a motivation letter to
  Julien Signoles (julien dot signoles at cea dot fr).


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2022-02-01 Tue 13:57 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
// @license magnet:?xt=3Durn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&=
dn=3Dpublic-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2022.01.25.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2022.02.08.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of January 25 to Februar=
y 01, 2022.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">ppx_seq v0.1.1</a></li>
<li><a href=3D"#2">OCaml Labs Joins Tarides</a></li>
<li><a href=3D"#3">For Diversity and the OCaml Community: Get Involved in O=
utreachy Summer 2022</a></li>
<li><a href=3D"#4">Set up OCaml 2.0.0-beta13</a></li>
<li><a href=3D"#5">First release of scfg</a></li>
<li><a href=3D"#6">Brr 0.0.3, a toolkit for programming browsers</a></li>
<li><a href=3D"#7">(anonymous?) polymorphic records</a></li>
<li><a href=3D"#8">2 postdoc positions on Runtime Verification at CEA LIST,=
 Universit=C3=A9 Paris-Saclay, France</a></li>
<li><a href=3D"#org402b255">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">ppx_seq v0.1.1</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ppx-seq-v0-1-1/9227/1">=
https://discuss.ocaml.org/t/ann-ppx-seq-v0-1-1/9227/1</a>
</p>
</div>

<div id=3D"outline-container-org0c06cac" class=3D"outline-3">
<h3 id=3D"org0c06cac">hyphenrf announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0c06cac">
<p>
Hello everyone, my first contribution to opam-repository has just been merg=
ed and is waiting to hit the caches of
<a href=3D"https://opam.ocaml.org">opam.ocaml.org</a>.
</p>

<p>
<a href=3D"https://github.com/hyphenrf/ppx_seq">ppx_seq</a> is a cute un-in=
trusive literal syntax for <code>Seq</code>. The rewriter is
simple and has very small surface area: just <code>[%seq x; y; z; ...]</cod=
e> and <code>[%seq.empty]</code>.
It tries to be maximally compatible with all OCaml releases from 4.07 (when=
 <code>Seq</code> was introduced) to 4.14 and beyond
</p>

<p>
The reason I created this rewriter is to make it an easier choice to reach =
first for <code>Seq</code> as a general data
structure (instead of e.g. list). That wasn't quite attractive before becau=
se of how minimal the <code>Seq</code> module was, it
was mostly used as an intermediate step between two types of collections, b=
ut now with 4.14 about to be released,
<code>Seq</code> is becoming a first-class data structure with a very versa=
tile API.
</p>

<p>
I hope my little rewriter helps make it even more attractive to use. Check =
it out and maybe leave me some feedback.
Thanks &lt;3
</p>
</div>
</div>
</div>




<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">OCaml Labs Joins Tarides</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-labs-joins-tarides/92=
29/1">https://discuss.ocaml.org/t/ocaml-labs-joins-tarides/9229/1</a>
</p>
</div>

<div id=3D"outline-container-org5f2cbfb" class=3D"outline-3">
<h3 id=3D"org5f2cbfb">Thomas Gazagnaire announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5f2cbfb">
<p>
Gemma Gordon (@gemmag) and I are delighted to announce that OCaml Labs, a s=
pinout from the University of Cambridge,
is joining Tarides. After successfully collaborating on many OCaml projects=
 over the last four years, this alliance
will formally combine the expertise of both groups. Joining forces will acc=
elerate OCaml development and its broader
adoption, and enable us to continue with our shared goal of bringing OCaml =
into mainstream use. Furthermore, it will
bring the security, portability and performance of OCaml to a large spectru=
m of use-cases: from academic endeavours
such as formal methods and existing threats within cyber security, to real-=
world applications for climate change,
sustainable agriculture, and even space exploration!
</p>

<p>
All of OCaml Labs=E2=80=99 existing responsibilities and open source commit=
ments will migrate over to Tarides, and thanks to
how closely the teams already work, business will continue without interrup=
tion to continuity or delivery. Gemma
Gordon will step up as CEO of Tarides, and I will lead the technological vi=
sion and strategy as CTO.
</p>

<p>
The OCaml 5.0 release will support multicore and effects handlers, influenc=
ing every aspect of the language and its
ecosystem. The update will significantly improve both performance and user =
experience, whilst maintaining existing
features that the community loves. Using the teams=E2=80=99 combined experi=
ence and zest for innovation, Tarides is looking
to the future of the OCaml language and community with excitement. Since Ta=
rides=E2=80=99 inception we have envisioned a
future where all OCaml applications are easily deployable as specialised, s=
ecure and energy-efficient MirageOS
unikernels. We believe that this alliance is a step further in that directi=
on.
</p>

<p>
_This alliance will complement the commercial offerings of Tarides and cont=
ribute to Tarides' mission: empowering
developers, communities and organisations to adopt OCaml as their primary p=
rogramming experience by providing
training, expertise and development services around the OCaml language._
</p>

<p>
Read the full announcement <a href=3D"https://tarides.com/blog">here</a>, i=
ncluding details of our goals and the focus for 2022.
This alliance brings the headcount of Tarides up to 60+ people, all working=
 towards making OCaml the best language
for any, and every project. Join our team and reach out for commercial serv=
ices at:
<a href=3D"https://tarides.com/company">https://tarides.com/</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">For Diversity and the OCaml Community: Get Involved in Outreac=
hy Summer 2022</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/for-diversity-and-the-ocaml=
-community-get-involved-in-outreachy-summer-2022/9234/1">https://discuss.oc=
aml.org/t/for-diversity-and-the-ocaml-community-get-involved-in-outreachy-s=
ummer-2022/9234/1</a>
</p>
</div>

<div id=3D"outline-container-orga86b0ac" class=3D"outline-3">
<h3 id=3D"orga86b0ac">Sonja Heinze announced</h3>
<div class=3D"outline-text-3" id=3D"text-orga86b0ac">
<p>
As @patricoferris <a href=3D"https://discuss.ocaml.org/t/become-an-outreach=
y-mentor-support-the-growth-and-diversity-of-the-ocaml-community/8213/15?u=
=3Dpitag">has
mentioned</a>
previously, the Outreachy call for open-source communities and project subm=
issions has started. As a reminder,
<a href=3D"https://www.outreachy.org">Outreachy</a> is an initiative that p=
rovides a framework through which open-source
communities can offer three month internships directed at people from any k=
ind of under-represented background in
open source. With that, Outreachy helps open-source communities grow on sev=
eral levels: diversity, experience, size,
and popularity.
</p>

<p>
The OCaml community participated in Outreachy in summer 2019, summer 2020, =
<a href=3D"https://discuss.ocaml.org/t/outreachy-summer-2021/8438">summer
2021</a>, and currently in <a href=3D"https://discuss.ocaml.org/t/announcin=
g-our-new-outreachy-interns/8932">winter
2021/22</a>. All our interns have done and are
doing really amazing jobs, and summer 2022 is just around the corner! The f=
ollowing timeline illustrates the process:
</p>


<div id=3D"orgd1e5848" class=3D"figure">
<p><img src=3D"https://i.imgur.com/DbzeiMO.png" alt=3D"DbzeiMO.png" />
</p>
</div>

<p>
So let's start getting involved!
</p>
</div>

<div id=3D"outline-container-org3d33cd8" class=3D"outline-4">
<h4 id=3D"org3d33cd8">Ways to Get Involved</h4>
<div class=3D"outline-text-4" id=3D"text-org3d33cd8">
<p>
Community members can take on different roles in the Outreachy effort, and =
all of them are very important! Maybe the
most important (and most involved) role is being a mentor.
</p>
</div>

<div id=3D"outline-container-org3ea66b6" class=3D"outline-5">
<h5 id=3D"org3ea66b6">Mentoring</h5>
<div class=3D"outline-text-5" id=3D"text-org3ea66b6">
<p>
Mentors have two responsibilities: leading the project and guiding the inte=
rns/applicants.
</p>
</div>

<div id=3D"outline-container-org2261c91" class=3D"outline-6">
<h6 id=3D"org2261c91">Leading the Project</h6>
<div class=3D"outline-text-6" id=3D"text-org2261c91">
<p>
One responsability is leading the project. Concretely, that means outlining=
 an internship project, submitting a
project description to Outreachy, making sure that the context repo for tha=
t project gets ready for the
application/"contribution" phase, and guiding the project throughout the in=
ternship, including reacting to changes.
All of that must match the Outreachy framework, which we <a href=3D"https:/=
/discuss.ocaml.org/t/become-an-outreachy-mentor-support-the-growth-and-dive=
rsity-of-the-ocaml-community/8213#step-by-step-process-for-being-a-mentor-1=
1">explained in
detail</a>
last round, based on the timeline structure shown above.
</p>
</div>
</div>

<div id=3D"outline-container-org7324dc9" class=3D"outline-6">
<h6 id=3D"org7324dc9">Guiding the Intern and the Applicants</h6>
<div class=3D"outline-text-6" id=3D"text-org7324dc9">
<p>
Their other responsibility is personal guidance. During the application/"co=
ntribution" period, mentors answer
questions and review code for multiple applicants. During the internship, t=
hey also offer pair-programming sessions
and facilitate more specific guidance, and general support for their intern=
s.
</p>

<p>
All of that is usually quite time-intensive, so it's important to have some=
 support from other community members and
strong support from a concrete co-mentor.
</p>
</div>
</div>
</div>

<div id=3D"outline-container-org2f4804e" class=3D"outline-5">
<h5 id=3D"org2f4804e">Co-mentoring</h5>
<div class=3D"outline-text-5" id=3D"text-org2f4804e">
<p>
A co-mentor does the same job as described in the "Guiding the Intern and t=
he Applicants" tasks above, so having a
co-mentor is very important! Of course, if a co-mentor also wants to take p=
art in the project's direction, that's
great as well! This means that the line between co-mentoring and mentoring =
isn't always clear.
</p>
</div>
</div>

<div id=3D"outline-container-org8535889" class=3D"outline-5">
<h5 id=3D"org8535889">Volunteering (aka "Acting as a Joker :bat:")</h5>
<div class=3D"outline-text-5" id=3D"text-org8535889">
<p>
Mentors and co-mentors receive a lot of general questions related to OCaml =
and programming in addition to specific
questions about the project. That's where Outreachy volunteers can be very =
helpful! They help all applicants and
interns across projects with (usually) project-unspecific questions and giv=
e a very important technical base support.
</p>
</div>
</div>

<div id=3D"outline-container-org2215715" class=3D"outline-5">
<h5 id=3D"org2215715">Point Out Potential Project Ideas</h5>
<div class=3D"outline-text-5" id=3D"text-org2215715">
<p>
Apart from not having enough time, the main reason that stops folks from be=
coming a mentor is the lack of project
ideas. So if you have potential project ideas, please point them out, even =
if you don't have time to mentor!
Generally, a self-contained, uncontroversial, and incremental project makes=
 the most suitable project for Outreachy.
It's also important for a project to be associated with a repo that can ser=
ve as a basis for easy contributions
during the application phase. When in doubt, don't keep your ideas to yours=
elf. Any idea can be helpful!
</p>
</div>
</div>

<div id=3D"outline-container-org684aa5a" class=3D"outline-5">
<h5 id=3D"org684aa5a">Prepare Your Repos</h5>
<div class=3D"outline-text-5" id=3D"text-org684aa5a">
<p>
In general, if you maintain a repo, it's really nice to be welcoming to new=
 contributors. Concretely, that means
having clear contributing guidelines, good newcomer issues, and well-labele=
d issues. As a nice side-effect, this also
makes your project a better target for future Outreachy projects.
</p>
</div>
</div>
</div>

<div id=3D"outline-container-orgb774e38" class=3D"outline-4">
<h4 id=3D"orgb774e38">Ready to Get Involved?</h4>
<div class=3D"outline-text-4" id=3D"text-orgb774e38">
<p>
If you've gotten interested in any of those roles or have any other comment=
s, please just answer here in the thread.
It would be super nice to get a discussion going and start our Outreachy ef=
forts early!
</p>
</div>
</div>
</div>


<div id=3D"outline-container-org210b806" class=3D"outline-3">
<h3 id=3D"org210b806">Sudha Parimala then said</h3>
<div class=3D"outline-text-3" id=3D"text-org210b806">
<p>
I along with @shakthimaan @gs0510 are submitting a project:
</p>

<ul class=3D"org-ul">
<li>Extend OCaml 5's parallel benchmark suite.</li>
</ul>

<p>
The idea is to gather parallel benchmarks available elsewhere and make them=
 available in our benchmark suite, to aid
the development of the OCaml compiler and parallel programming libraries. R=
elevant repos:
<a href=3D"https://github.com/ocaml-bench/sandmark">sandmark</a> and <a hre=
f=3D"https://github.com/ocurrent/current-bench">current-bench</a>.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Set up OCaml 2.0.0-beta13</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-beta=
13/9248/1">https://discuss.ocaml.org/t/ann-set-up-ocaml-2-0-0-beta13/9248/1=
</a>
</p>
</div>

<div id=3D"outline-container-org48a3597" class=3D"outline-3">
<h3 id=3D"org48a3597">Sora Morimoto announced</h3>
<div class=3D"outline-text-3" id=3D"text-org48a3597">
</div>
<div id=3D"outline-container-org23567ca" class=3D"outline-4">
<h4 id=3D"org23567ca">Changed</h4>
<div class=3D"outline-text-4" id=3D"text-org23567ca">
<ul class=3D"org-ul">
<li>Do not install opam-depext if it's not enabled.</li>
</ul>
</div>
</div>

<div id=3D"outline-container-orge89ecff" class=3D"outline-4">
<h4 id=3D"orge89ecff">Fixed</h4>
<div class=3D"outline-text-4" id=3D"text-orge89ecff">
<ul class=3D"org-ul">
<li>Print a proper error if the version not found in the <code>.ocamlformat=
</code> file.</li>
</ul>

<p>
<a href=3D"https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-beta13"=
>https://github.com/ocaml/setup-ocaml/releases/tag/v2.0.0-beta13</a>
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">First release of scfg</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-first-release-of-scfg/9=
249/1">https://discuss.ocaml.org/t/ann-first-release-of-scfg/9249/1</a>
</p>
</div>

<div id=3D"outline-container-org8d8ad2a" class=3D"outline-3">
<h3 id=3D"org8d8ad2a">zapashcanon announced</h3>
<div class=3D"outline-text-3" id=3D"text-org8d8ad2a">
<p>
I'm pleased to announce the first release of <a href=3D"https://git.zapashc=
anon.fr/zapashcanon/scfg">scfg</a> on opam.
</p>

<p>
It provides a library and an executable to work with the <a href=3D"https:/=
/git.sr.ht/~emersion/scfg">scfg configuration file
format</a>. (disclaimer: scfg has been created by my good friend @emersion)
</p>

<p>
Here's an example of an scfg file taken from the specification:
</p>

<pre class=3D"example" id=3D"org2aa61c8">
train "Shinkansen" {
	model "E5" {
		max-speed 320km/h
		weight 453.5t

		lines-served "T=C5=8Dhoku" "Hokkaido"
	}

	model "E7" {
		max-speed 275km/h
		weight 540t

		lines-served "Hokuriku" "J=C5=8Detsu"
	}
}
</pre>

<p>
Scfg is a file format designed to be simple and indeed the implementation w=
as really straightforward. I'm planning to
use it in small tools I wrote (mostly <a href=3D"https://swaywm.org/">sway<=
/a> tools written in OCaml) but never released because
I couldn't stand having to use TOML, YAML or JSON for them&#x2026;
</p>

<p>
The library provides an executable to validate and pretty-print an scfg fil=
e. It'll indent it properly, remove
useless quoting and whitespaces:
</p>

<pre class=3D"example" id=3D"org6443008">
$ scfg spec.scfg
train Shinkansen {
  model E5 {
    max-speed 320km/h
    weight 453.5t
    lines-served T=C5=8Dhoku Hokkaido
  }
  model E7 {
    max-speed 275km/h
    weight 540t
    lines-served Hokuriku J=C5=8Detsu
  }
}
</pre>

<p>
The library is made of four modules : <code>Types</code>, <code>Parse</code=
>, <code>Pp</code> and <code>Query</code>.
</p>

<p>
The <code>Types</code> module simply defines the following types, which are=
 all you need to deal with scfg:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #8b2252;">(** A directiv=
e has a name, a list of parameters and children (a list of directive). *)</=
span>
<span style=3D"color: #000000; font-weight: bold;">type</span> <span style=
=3D"color: #228b22;">directive</span> =3D
  { name : string
  ; params : string list
  ; children : directive list
  }

<span style=3D"color: #8b2252;">(** A config is a list of directives. *)</s=
pan>
<span style=3D"color: #000000; font-weight: bold;">type</span> <span style=
=3D"color: #228b22;">config</span> =3D directive list
</pre>
</div>

<p>
The others modules can be used as follow:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">file</span> =3D <span style=
=3D"color: #8b2252;">{|</span>
<span style=3D"color: #8b2252;">  train A-Train {</span>
<span style=3D"color: #8b2252;">    bla bla bla</span>
<span style=3D"color: #8b2252;">  }</span>
<span style=3D"color: #8b2252;">  train "John Col Train" {</span>
<span style=3D"color: #8b2252;">    tut tut tut</span>
<span style=3D"color: #8b2252;">  }</span>
<span style=3D"color: #8b2252;">|}</span>

<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">p=
arsing the file </span><span style=3D"color: #b22222;">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">config</span> =3D
  <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;"=
>there's also a `Parse.from_file` function that should be more useful </spa=
n><span style=3D"color: #b22222;">*)</span>
  <span style=3D"color: #a020f0;">match</span> <span style=3D"color: #228b2=
2;">Scfg.Parse.</span>from_string file <span style=3D"color: #a020f0;">with=
</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">Error</span>=
 e -&gt;
    <span style=3D"color: #228b22;">Format.</span>eprintf <span style=3D"co=
lor: #8b2252;">"error: %s@."</span> e;
    <span style=3D"color: #483d8b;">exit</span> 1
  | <span style=3D"color: #000000; background-color: #ffffff;">Ok</span> co=
nfig -&gt; config

<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">p=
rinting the file </span><span style=3D"color: #b22222;">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> () =3D
  <span style=3D"color: #228b22;">Format.</span>printf <span style=3D"color=
: #8b2252;">"```scfg@.%a@.```@."</span> <span style=3D"color: #228b22;">Scf=
g.Pp.</span>config config

<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">q=
uerying the file </span><span style=3D"color: #b22222;">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> () =3D
  <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;"=
>gets the first directive with the name `train` </span><span style=3D"color=
: #b22222;">*)</span>
  <span style=3D"color: #a020f0;">match</span> <span style=3D"color: #228b2=
2;">Scfg.Query.</span>get_dir <span style=3D"color: #8b2252;">"train"</span=
> config <span style=3D"color: #a020f0;">with</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">None</span> =
-&gt; <span style=3D"color: #228b22;">Format.</span>printf <span style=3D"c=
olor: #8b2252;">"No train found.@."</span>
  | <span style=3D"color: #000000; background-color: #ffffff;">Some</span> =
train -&gt; (
    <span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222=
;">get the parameter at index 0 in the `train` directive </span><span style=
=3D"color: #b22222;">*)</span>
    <span style=3D"color: #a020f0;">match</span> <span style=3D"color: #228=
b22;">Scfg.Query.</span>get_param 0 train <span style=3D"color: #a020f0;">w=
ith</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">Error</spa=
n> _e -&gt; <span style=3D"color: #228b22;">Format.</span>printf <span styl=
e=3D"color: #8b2252;">"Train has no name.@."</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">Ok</span> =
name -&gt; <span style=3D"color: #228b22;">Format.</span>printf <span style=
=3D"color: #8b2252;">"The first train is `%s`.@."</span> name )
</pre>
</div>

<p>
For more have a look at the <a href=3D"https://git.zapashcanon.fr/zapashcan=
on/scfg/src/branch/master#scfg">project's README</a>,
the <a href=3D"https://doc.zapashcanon.fr/scfg/">documentation</a> or feel =
free to ask here ! :partying_face:
</p>
</div>
</div>
</div>




<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">Brr 0.0.3, a toolkit for programming browsers</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-brr-0-0-3-a-toolkit-for=
-programming-browsers/9252/1">https://discuss.ocaml.org/t/ann-brr-0-0-3-a-t=
oolkit-for-programming-browsers/9252/1</a>
</p>
</div>

<div id=3D"outline-container-orgc8f1df9" class=3D"outline-3">
<h3 id=3D"orgc8f1df9">Daniel B=C3=BCnzli announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc8f1df9">
<p>
It's my pleasure to announce the release <code>0.0.3</code> of <a href=3D"h=
ttps://erratique.ch/software/brr"><code>Brr</code></a>, a toolkit for
programming browsers in OCaml with the <a href=3D"https://ocsigen.org/js_of=
_ocaml"><code>js_of_ocaml</code></a> compiler.
</p>

<p>
Once it has made it to the repo, install with <code>opam install brr</code>=
 and consult the <a href=3D"https://erratique.ch/software/brr/doc/">API doc=
s and
manuals</a> (or via <code>odig doc brr</code>).
</p>

<p>
Among small additions and fixes, this release brings support for <code>js_o=
f_ocaml</code> 4.0.0. Thanks to Hugo Heuzard (@hhugo)
who has made the ground work in <code>js_of_ocaml</code> this means that:
</p>

<ol class=3D"org-ol">
<li><code>Brr</code>, <code>js_of_ocaml</code> and (<a href=3D"https://gith=
ub.com/LexiFi/gen_js_api/pull/164">soon</a>) <code>gen_js_api</code> JavaSc=
ript bindings can now all be used in the same program without problems (iss=
ue <a href=3D"https://github.com/dbuenzli/brr/issues/2">#2</a>).</li>
<li>You no longer need to specify the <code>-no-check-prim</code> flag at b=
ytecode link time. Linking against the <code>brr</code> library is sufficie=
nt, see the <a href=3D"https://erratique.ch/software/brr/doc/web_page_howto=
.html">build instructions</a>.</li>
</ol>

<p>
The <a href=3D"https://github.com/dbuenzli/brr/blob/master/CHANGES.md#v003-=
2022-01-30-la-forclaz-vs">release notes</a> have all
the details.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">(anonymous?) polymorphic records</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/anonymous-polymorphic-recor=
ds/9256/1">https://discuss.ocaml.org/t/anonymous-polymorphic-records/9256/1=
</a>
</p>
</div>

<div id=3D"outline-container-org018c48b" class=3D"outline-3">
<h3 id=3D"org018c48b">nrolland asked</h3>
<div class=3D"outline-text-3" id=3D"text-org018c48b">
<p>
Is there a way to avoid to create records only to preserve polymorphism ?
</p>

<p>
Say, for this, in haskell style
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-haskell">h :: (forall r. (r -&gt; a) -&gt; (f r -&gt;=
 f b)) -&gt; f a -&gt; f b
h malg =3D malg id
</pre>
</div>
</div>
</div>


<div id=3D"outline-container-org26c117f" class=3D"outline-3">
<h3 id=3D"org26c117f">octachron replied</h3>
<div class=3D"outline-text-3" id=3D"text-org26c117f">
<p>
You can use objects, they can have polymorphic methods:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">f</span> (<span style=3D"co=
lor: #a0522d;">id</span>:<span style=3D"color: #228b22;">&lt;f:'a. 'a -&gt;=
 'a&gt;</span>) =3D id#f 0, id#f <span style=3D"color: #8b2252;">"zero"</sp=
an>
</pre>
</div>
</div>
</div>


<div id=3D"outline-container-org58eb1d9" class=3D"outline-3">
<h3 id=3D"org58eb1d9">Ma=C3=ABlan also replied</h3>
<div class=3D"outline-text-3" id=3D"text-org58eb1d9">
<p>
The following doesn=E2=80=99t help reducing the syntactic noise, but note t=
hat when using a record for non-prenex
polymorphism like this, your record has only one field and is immutable, so=
 (with a recent enough OCaml) you can
unbox it and get rid of the runtime overhead:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">('a, 'b) fwrap</span> =3D =
{ f : 'r. ('r -&gt; 'a) -&gt; 'r list -&gt; 'b list } <span style=3D"color:=
 #483d8b;">[@@unboxed]</span>

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">apply_id</span> :<span style=3D"color: #228b22;"> </sp=
an><span style=3D"color: #a020f0;">type</span><span style=3D"color: #228b22=
;"> a b. (a, b) fwrap -&gt; a list -&gt; b list </span>=3D
  <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0522d;=
">w</span> <span style=3D"color: #a0522d;">xs</span> -&gt; w.f <span style=
=3D"color: #228b22;">Fun.</span>id xs
<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">i=
s compiled the same as just: </span><span style=3D"color: #b22222;">*)</spa=
n>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">apply_id_magic</span> :<span style=3D"color: #228b22;"=
> </span><span style=3D"color: #a020f0;">type</span><span style=3D"color: #=
228b22;"> a b. (a, b) fwrap -&gt; a list -&gt; b list </span>=3D
  <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0522d;=
">w</span> <span style=3D"color: #a0522d;">xs</span> -&gt; (<span style=3D"=
color: #228b22;">Obj.</span>magic w) <span style=3D"color: #228b22;">Fun.</=
span>id xs

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">mwrap</span> :<span style=3D"color: #228b22;"> </span>=
<span style=3D"color: #a020f0;">type</span><span style=3D"color: #228b22;">=
 a. (a, a) fwrap </span>=3D { f =3D <span style=3D"color: #228b22;">List.</=
span>map }
<span style=3D"color: #b22222;">(* </span><span style=3D"color: #b22222;">i=
s compiled to nothing at all (alias of List.map). </span><span style=3D"col=
or: #b22222;">*)</span>
</pre>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">2 postdoc positions on Runtime Verification at CEA LIST, Unive=
rsit=C3=A9 Paris-Saclay, France</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2022-02/msg0=
0001.html">https://sympa.inria.fr/sympa/arc/caml-list/2022-02/msg00001.html=
</a>
</p>
</div>

<div id=3D"outline-container-orge5a6abe" class=3D"outline-3">
<h3 id=3D"orge5a6abe">Julien Signoles announced</h3>
<div class=3D"outline-text-3" id=3D"text-orge5a6abe">
<p>
The Software Safety and Security Lab at CEA LIST, Universit=C3=A9 Paris-Sac=
lay,
France has 2 open postdoc positions in the area of runtime verification for
code safety and security:
</p>

<ul class=3D"org-ul">
<li><p>
Designing Compilation Techniques for Improving Efficiency of E-ACSL, a Runt=
ime Assertion Checker for C Programs
</p>

<p>
<a href=3D"http://julien-signoles.fr/positions/postdoc-eacsl.pdf">http://ju=
lien-signoles.fr/positions/postdoc-eacsl.pdf</a>
</p></li>

<li><p>
Control Flow Integrity for Remote Attestation
</p>

<p>
<a href=3D"http://julien-signoles.fr/positions/postdoc-cfi.pdf">http://juli=
en-signoles.fr/positions/postdoc-cfi.pdf</a>
</p></li>
</ul>

<p>
The candidates will:
</p>
<ul class=3D"org-ul">
<li>solve challenging research problems;</li>
<li>implement their results in Frama-C, an industrial-strength open-source =
framework for analyses of C code;</li>
<li>evaluate their solutions on concrete benchmarks or/and use cases;</li>
<li>publish their results in international conferences and journals.</li>
</ul>

<p>
Strong knowledge in at least one of the following areas is welcome:
</p>
<ul class=3D"org-ul">
<li>programming
<ul class=3D"org-ul">
<li>OCaml and C</li>
<li>formal semantics</li>
</ul></li>
<li>formal verification
<ul class=3D"org-ul">
<li>runtime verification, static analysis, formal specification languages, =
&#x2026;</li>
</ul></li>
<li>compilation
<ul class=3D"org-ul">
<li>code generation, program transformation, type system, &#x2026;</li>
</ul></li>
</ul>

<p>
Interested applicants should send a CV and a motivation letter to Julien
Signoles (julien dot signoles at cea dot fr).
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org402b255" class=3D"outline-2">
<h2 id=3D"org402b255">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org402b255">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname" id=3D"org8026c0a">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

