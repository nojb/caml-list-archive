Return-Path: <SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 67EAAE0035
	for <caml-list@sympa.inria.fr>; Tue,  6 Jul 2021 14:33:54 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=/xfW=L6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?A9a23=3A1jgrVx1CqchMmF1NsmDOGwIyDhhOgF0UFjAc5pd?=
 =?us-ascii?q?vsb9SaKPrp82kYBaHo601xweXFcWDsrQY0ruQ6/ihEUU7or+5+EgYd5JNUxJXw?=
 =?us-ascii?q?e43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgR?=
 =?us-ascii?q?pOOv1BpTSj8Oq3Oyu5pHfeQpFiCShbb9oMBm6sQrdutUXjIB/Lqo91gbFrmFHd?=
 =?us-ascii?q?uhLwW5kP06fkwr56syt4JNt7iNctu47+cVdS6v6ZaM4TbJZDDQiLW844dDguAf?=
 =?us-ascii?q?AQwWS+HYSS30anRVUDQfL6hH6RYrxvTDhtuVhwimaPNb5Qq4yVD+/8qpkUh7oi?=
 =?us-ascii?q?CMANz4k7GHaj9F7gaxHrB69oRF03onbbpyINPplZqPSY88VRXZCUMZUWCxPDIS?=
 =?us-ascii?q?8b44VAOoAO+ZTso3xqlUSoRe7AwSgBODhyjlWhn/3xq060v8uEQXY0wc9EdMOt?=
 =?us-ascii?q?27Uo8juNKwPVey4wrXEwTDFYvhL2zny9ZLIfwghr/+SQLx+f8nfxkYzGA7elFq?=
 =?us-ascii?q?ctZboMimJ2ugRsWWW6fdrW+K1i24grgF8uiSixsM2hYnPm4kb10zL9SV8wIY0O?=
 =?us-ascii?q?d24VFNwbNm+H5tUrS6aMZF6Qtg+TGFovSY6y6EGuYKgcSgSz5Qnwx7ea+CZfIe?=
 =?us-ascii?q?U4hLjUueRIS5lhH17Yr6/gAyy8Ue5x+D6S8K730pEoDBfndnQqnACyQbT6s6fR?=
 =?us-ascii?q?/dj8Uqs1zaC2h7O5+xLLk45lKjWJpEuzLMsipYeslrPEjH4lkj1kaObeUUp9+u?=
 =?us-ascii?q?s5urpbbvquJ+SOpJ3hw3gMqkjnNG0D+o/MggLRWeb+OK82aX7/ULnXLVKj+E2n?=
 =?us-ascii?q?bfBsJDdIMQbo7C2DxVT0ok99xazFzCm38gCknkCKFJJYhWHj5LmO13WL/D4DOu?=
 =?us-ascii?q?/g1C2nzhw3fzJIrrhApDVInjMkbfhYbZ961NHxwYp0d9f4JdUBqkbIPL0QUDxq?=
 =?us-ascii?q?cbYAgUlPAyzxObnEM1x1pkZWW2UH6+ZKrnesV6P5u43JemMa44VtCzjJPg4//L?=
 =?us-ascii?q?ugn45mUMdfam0xpQbcmq0EehhI0WceXbjnskOEX0QsQo7TezllF2CXiRPaHaxQ?=
 =?us-ascii?q?a08/Cs3B56hDYfGXoytm72B3Ci9HpJMYmBGEUqDEXH1eIWYW/cMcjydLdV8nTw?=
 =?us-ascii?q?fT7SuV4gh1RS2uADg0bpmIevU+jMCuZLkzth16PXflRAv+j10C8Sd13uBT2Zun?=
 =?us-ascii?q?mMHQTI9waNxoVRlx1uez6R1h+ZUGcFP6/5GSAs3O4LQw/Z0Bt39Qg7NY9mEREu?=
 =?us-ascii?q?8Ttm4ATw8Qcg9z8ISb0pnBtmvjAzP0iy3CLEPjbOLHoY78qfE0njxOcl9z3HG2?=
 =?us-ascii?q?bEkj1gpX8dDL3Wmhql79wnTG47GjVmWl6asdaQdxS7N6XmMwXCJvEFCXw58SaT?=
 =?us-ascii?q?FXXYBaUvKtdn1+13OQru0Bbg6LgdMxtSOJ6VWZtHzg1hLS+/vONHEbGKwn2ewC?=
 =?us-ascii?q?wyIxrSJbIfyZmsTwDjTBFQcngwI8neGOwgxCz+nrW/fFDFuDVXvY0fs8Olitny?=
 =?us-ascii?q?0Uk80zweLb014yrq65AQZhfuGS/Mcxr8LoiMhpC9yHFqnxNLZF9qApw9gfKVAf?=
 =?us-ascii?q?dMw+0xI1WXEtwx7IpOvMbtiikQbcwl4sELizRJ3Cp9PkcQytnMl0BJyKb6E0FN?=
 =?us-ascii?q?Gbz6XwYr/OrjTKmXr+BCvarXW2k3F3daN+qYP7ew4pE/5sAGoEEoi6XRn3MNP3?=
 =?us-ascii?q?3uS/JWZRDYVBNj1TUB9v0x+uLfyZjY7oYXZySsoeeO/rTmIk5p9D/Qj4hKhZMt?=
 =?us-ascii?q?EdqKIBQv2VcoACJ7qYOcjnlzsahMfIMhT8rQ1NoWobaiowqmuac9klTTutm9H5?=
 =?us-ascii?q?YFhzgrY/i51TKjT1JYAwu2E9hOAUybggVyhtMHuhI0CYisdSDnsgRP4DZJcM/U?=
 =?us-ascii?q?hNb0ADn2jdpPvrj2br4bqX29E+VWjAVIfxcLvfgCdPQWVNeJ430MKp3eqgm29k?=
 =?us-ascii?q?ywylCsm/PP3NM3mxvS7MgIAPn9XSWJii1b1PIXyiMoVDhHAUg=3D=3D?=
IronPort-HdrOrdr: =?us-ascii?q?A9a23=3AEitPMa4Rzs9RXJVXbgPXwM/XdLJyesId70hD?=
 =?us-ascii?q?6qkRc3xom6Oj+PxG8M5w6faWslcssRMb9+xoUZPoKRjhHPVOjbX5U43OYCDW/E?=
 =?us-ascii?q?OWaKti4YHhzzCIIVycysdtkYF6fexbAN30ZGIK6PoSDTPIceod/A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CAAgByTORgfSIeaIFahAVTRwFkVzoxh?=
 =?us-ascii?q?EiBX4cliFGBE4IUhW6GUod1hBCBEQNPEAEDAQ0qAQ4FAQIEAQGDHoQnAh4GAQU?=
 =?us-ascii?q?zEwIEFQEBBQEBAQIBAwMEARMBAQ8UCEOFaA2COAwMA4N3AwEYAQgKQAceIwMUA?=
 =?us-ascii?q?QYDAhEBFwEUChcBEhqCITeDBwUKinucCoEygQGDTAGETYFjDQIUgQAXhWxTOg4?=
 =?us-ascii?q?BgmgIg3ACJxCBVUSBFYIkSgduggNfAQEBAQGBIwQUAQEIgy8Xgk0Egh0vDjgIL?=
 =?us-ascii?q?B8LAgEGBxsMARMIDwEEEAwCNiMIDQEHAxkZBA0KFgYuCwsCLQORHA8li2+KK5Q?=
 =?us-ascii?q?yLAeDJIEsBguHFAU6gRWHN4MugVGHdoEXgkuBRooAlwMhlVeCGoZPCH0FCYIvh?=
 =?us-ascii?q?DiOZycEHBGEfoIUKoFqDAczGjBDgmkJYA6IIIYLFoNOEHGBY4F1O4Ijgyk/MgI?=
 =?us-ascii?q?BATQCBgEJAQEDCXUBAQUTCwGIJV4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0CAAgByTORgfSIeaIFahAVTRwFkVzoxhEiBX4cliFGBE4I?=
 =?us-ascii?q?UhW6GUod1hBCBEQNPEAEDAQ0qAQ4FAQIEAQGDHoQnAh4GAQUzEwIEFQEBBQEBA?=
 =?us-ascii?q?QIBAwMEARMBAQ8UCEOFaA2COAwMA4N3AwEYAQgKQAceIwMUAQYDAhEBFwEUChc?=
 =?us-ascii?q?BEhqCITeDBwUKinucCoEygQGDTAGETYFjDQIUgQAXhWxTOg4BgmgIg3ACJxCBV?=
 =?us-ascii?q?USBFYIkSgduggNfAQEBAQGBIwQUAQEIgy8Xgk0Egh0vDjgILB8LAgEGBxsMARM?=
 =?us-ascii?q?IDwEEEAwCNiMIDQEHAxkZBA0KFgYuCwsCLQORHA8li2+KK5QyLAeDJIEsBguHF?=
 =?us-ascii?q?AU6gRWHN4MugVGHdoEXgkuBRooAlwMhlVeCGoZPCH0FCYIvhDiOZycEHBGEfoI?=
 =?us-ascii?q?UKoFqDAczGjBDgmkJYA6IIIYLFoNOEHGBY4F1O4Ijgyk/MgIBATQCBgEJAQEDC?=
 =?us-ascii?q?XUBAQUTCwGIJV4BAQ?=
X-IronPort-AV: E=Sophos;i="5.83,328,1616454000"; 
   d="scan'208,217";a="387260667"
X-MGA-submission: =?us-ascii?q?MDGyf/dGTL4rwcxW5+OFEfnD1qbab46DFQ7Gde?=
 =?us-ascii?q?Ej7YQQZkbJDYwkqzDR7IKf7045YGv3Lc3Y2CRKg3nUFLs1HimJf7XNZi?=
 =?us-ascii?q?bwLZD7hT+7KHusA7e8vwaQfyU6R+XHPo6z5gyr6e9fNvSeASmiZz6r/Q?=
 =?us-ascii?q?2azNf0D1XPrkMDJnl4bhNVnA=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Jul 2021 14:33:50 +0200
Received: from set (set.irisa.fr [131.254.10.170])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id D652556482D;
	Tue,  6 Jul 2021 14:33:48 +0200 (CEST)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 06 Jul 2021 14:33:43 +0200
Message-ID: <878s2j8vvc.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Jul  6 14:33:49 2021 +0200 (CEST))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.003375, queueID=3BBA956482E
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of June 29 to July
06, 2021.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

LibreRef - LablGtk-based Digital Reference Tool Application
u2f - universal second factor
Reproducible OPAM packages / MirageOS
Dune 2.9.0
Hardcaml MIPS CPU Learning Project and Blog
dune-release 1.5.0
anders 0.7.1
Old CWN


LibreRef - LablGtk-based Digital Reference Tool Application
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-libreref-lablgtk-based-digital-reference=
-tool-application/8077/1>


Kiran Gopinathan announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80

  I'm not sure if this is that close to the typical uses of OCaml, but
  posting this here just in case anyone was interested in another
  end-user facing application using LablGtk.

  <https://aws1.discourse-cdn.com/standard11/uploads/ocaml/optimized/2X/b/b=
72b4bd7838e41dbaed2254350799c5e75245a3d_2_250x250.png>

        LibreRef is a free as in freedom digital referencing tool
        for artists.

  It's written in OCaml using LablGtk and Cairo to implement the GUI.

  You can find the source code at: [gitlab] ([github mirror])

  A picture is worth a thousand words, so before I continue, here are a
  few examples of it in action:

  <https://aws1.discourse-cdn.com/standard11/uploads/ocaml/original/2X/1/12=
6997c61b83b700feac41e380b42c560bdf2340.gif>

  <https://aws1.discourse-cdn.com/standard11/uploads/ocaml/original/2X/4/49=
b11ef943e491ba220332d257bc6a15b506ed6b.gif>

  Overall, getting LablGtk to work was fairly straightforward, although
  the documentation was a bit lacking (although the same might be said
  of Gtk itself).

  I was able to piece together the correct uses of most of the API calls
  by relying on either the examples from the repository or by
  translating snippets of code from online back into LablGtk.

  As for deploying it as an application, I found the AppImage &
  LinuxDeploy toolchain to work well with the resulting binary
  (admittedly I've only tested it with two devices so far), and it meant
  that I could publish the program without having to ask people to setup
  the full OCaml & Opam toolchain, which would probably be a large ask.

  As for the implementation, I think it was fairly elegant (if I say so
  myself :slight_smile:), although I may have gone overboard with
  functors (see this higher-order functor in the GUI interface:
  <https://gitlab.com/gopiandcode/libre-ref/-/blob/master/gui.mli#L175>)
  and some aspects of the separation of concerns weren't so well
  established.


[gitlab] <https://gitlab.com/gopiandcode/libre-ref>

[github mirror] <https://github.com/Gopiandcode/LibreRef>


u2f - universal second factor
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-u2f-universal-second-factor/8078/1>


Hannes Mehnert announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  it is our pleasure to announce the just released opam package u2f,
  which is a server side implementation of the FIDO standard for
  two-factor authentication using a special device (yubikey etc.). The
  device does challenge-response authentication with the server using
  public key cryptography.

  The implementation is stateless and does not use a specific IO
  library, but only achieves the logic for constructing a registration
  request, verifying a response thereof, and authorization requests with
  responses thereof. Please have a look at
  <https://github.com/roburio/u2f> if you're interested. It is licensed
  under the permissive 2-clause BSD license.

  We use this library in an example server (in the `bin' directory) that
  uses dream. The live server is online at <https://u2f-demo.robur.coop>
  =E2=80=93 please let us know if you run into any trouble, or open an issu=
e on
  the GitHub repository.

  One question though: we're unable to generate the documentation from
  the mli =E2=80=93 already asked on discord with no result. Anyone with a
  better understanding of odoc etc. can take a look why `dune build
  @doc' outputs a nearly empty file? Thanks a lot :)

  The development was sponsored by skolem.tech.


Reproducible OPAM packages / MirageOS
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/reproducible-opam-packages-mirageos/8079/1>


Hannes Mehnert announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  we are pleased to announce reproducible binary images for MirageOS
  unikernels (see the blog post at
  <https://hannes.robur.coop/Posts/Deploy>). The binaries are located at
  <https://builds.robur.coop> (all components are open source and linked
  from the page).

  Additionally, the required tools to achieve reproducible builds are
  released as binary packages for various operating systems as well on
  the same site. They are used by the infrastructure to run daily builds
  (always with the HEAD of opam-repository to not loose any updates /
  new releases). The custom overlay
  <https://git.robur.io/robur/unikernel-repo> is used that adds some
  development packages.

  Happy to hear your thoughts and feedback here. (Earlier post
  <https://discuss.ocaml.org/t/reproducible-builds-with-ocaml-opam-and-mira=
geos/4877>)

  This work was funded by the [NGI Pointer] project "Funding The Next
  Generation Ecosystem of Internet Architects".


[NGI Pointer] <https://pointer.ngi.eu>


Dune 2.9.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-dune-2-9-0/8087/1>


Emilio Jes=C3=BAs Gallego Arias announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80

  Dear all, on behalf of the Dune team I'm pleased to announce the
  release of Dune 2.9.0. This is the last release on the Dune 2.x series
  and could be considered a maintenance release as it mostly consists on
  bug fixes and miscellaneous tweaks and features for sites,
  instrumentation, and mdx support.

  Please find the full list of changes below:
  =E2=80=A2 Add `(enabled_if ...)' to `(mdx ...)'
    (<https://github.com/ocaml/dune/pull/4434>, @emillon)

  =E2=80=A2 Add support for instrumentation dependencies
    (<https://github.com/ocaml/dune/pull/4210>, fixes
    <https://github.com/ocaml/dune/issues/3983>, @nojb)

  =E2=80=A2 Add the possibility to use `locks' with the cram tests stanza
    (<https://github.com/ocaml/dune/pull/4480>, @voodoos)

  =E2=80=A2 Allow to set up merlin in a variant of the default context
    (<https://github.com/ocaml/dune/pull/4145>, @TheLortex, @voodoos)

  =E2=80=A2 Add `(package ...)' to `(mdx ...)'
    (<https://github.com/ocaml/dune/pull/4691>, fixes
    <https://github.com/ocaml/dune/issues/3756>, @emillon)

  =E2=80=A2 Handle renaming of `coq.kernel' library to `coq-core.kernel' in=
 Coq
    8.14 (<https://github.com/ocaml/dune/pull/4713>, @proux01)

  =E2=80=A2 Fix generation of merlin configuration when using `(include_sub=
dirs
    unqualified)' on Windows (<https://github.com/ocaml/dune/pull/4745>,
    @nojb)

  =E2=80=A2 Fix bug for the install of Coq native files when using
    `(include_subdirs qualified)'
    (<https://github.com/ocaml/dune/pull/4753>, @ejgallego)

  =E2=80=A2 Allow users to specify install target directories for `doc' and
    `etc' sections. We add new options `--docdir' and `--etcdir' to both
    Dune's configure and `dune install'
    command. (<https://github.com/ocaml/dune/pull/4744>, fixes
    <https://github.com/ocaml/dune/issues/4723>, @ejgallego, thanks to
    @JasonGross for reporting this issue)

  =E2=80=A2 Fix issue where Dune would ignore `(env ... (coq (flags ...)))'
    declarations appearing in `dune' files
    (<https://github.com/ocaml/dune/pull/4749>, fixes
    <https://github.com/ocaml/dune/issues/4566>, @ejgallego @rgrinberg)

  =E2=80=A2 Disable some warnings on Coq 8.14 and `(lang coq (>=3D 0.3))' d=
ue to
    the rework of the Coq "native" compilation system
    (<https://github.com/ocaml/dune/pull/4760>, @ejgallego)

  =E2=80=A2 Fix a bug where instrumentation flags would be added even if the
    instrumentatation was disabled (@nojb,
    <https://github.com/ocaml/dune/pull/4770>)

  =E2=80=A2 Fix <https://github.com/ocaml/dune/issues/4682>: option `-p' ta=
kes
    now precedence on environement variable `DUNE_PROFILE'
    (<https://github.com/ocaml/dune/pull/4730>,
    <https://github.com/ocaml/dune/pull/4774>, @bobot, reported by
    @dra27 <https://github.com/ocaml/dune/issues/4632>)

  =E2=80=A2 Fix installation with opam of package with dune sites. The
    `.install' file is now produced by a local `dune install' during the
    build phase (<https://github.com/ocaml/dune/pull/4730>,
    <https://github.com/ocaml/dune/pull/4645>, @bobot, reported by
    @kit-ty-kate <https://github.com/ocaml/dune/issues/4198>)

  =E2=80=A2 Fix multiple issues in the sites feature
    (<https://github.com/ocaml/dune/pull/4730>,
    <https://github.com/ocaml/dune/pull/4645> @bobot, reported by
    @Lelio-Brun <https://github.com/ocaml/dune/issues/4219>, by @Kakadu
    <https://github.com/ocaml/dune/issues/4325>, by @toots
    <https://github.com/ocaml/dune/issues/4415>)


Hardcaml MIPS CPU Learning Project and Blog
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/hardcaml-mips-cpu-learning-project-and-blog/=
8088/1>


"Alexander (Sasha) Skvortsov announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Tl;dr: I=E2=80=99m [writing a blog] about making a MIPS CPU in Hardcaml.

  Hi! My name is Sasha, and I=E2=80=99m a student at Penn State majoring in=
 CS
  and Math. Last semester, I took a computer engineering class where we
  built a pipelined MIPS CPU in Verilog as a semester-long project. I
  enjoyed the class, but a lot of frustration came from Verilog itself.

  A few months ago, I came across the [Signals and Threads Programmable
  Hardware episode]. I really liked the idea of [Hardcaml]: a library to
  write and test hardware designs in OCaml. Representing circuits as
  functions felt like a good abstraction, and I=E2=80=99ve been wanting to =
learn
  OCaml for a while.

  So this summer, a friend and I are rewriting the Verilog MIPS CPU we
  made last semester into Hardcaml.  We=E2=80=99re still working on the pro=
ject,
  but have made some good progress and wanted to share it in case anyone
  finds it interesting / useful. If anyone wants to take a look, it=E2=80=
=99s
  [up on GitHub].

  We=E2=80=99ve written some blog posts about our project:

  1. [Some more background on what we=E2=80=99re doing and why]
  2. [An ELI5 overview of how hardware, and pipelined CPUs in
     particular, work]
  3. [Another high-level overview of Verilog, hardware design, FPGAs,
     and why I think OCaml might be a great fit for hardware design]
  4. [How to set up a Hardcaml project, including testing and Verilog
     generation]
  5. [How to split Hardcaml circuits into multiple modules]

  There=E2=80=99s also a few more that we=E2=80=99ve written code for, but =
are still
  drafting blog posts about:

  =E2=80=A2 How to work with memory in Hardcaml
  =E2=80=A2 How to design stateful, sequential circuits in Hardcaml
  =E2=80=A2 A safer design pattern for Hardcaml circuits

  I=E2=80=99m new to both OCaml and blogging, and this has definitely been =
a fun
  experience so far! Would love to hear any feedback / comments.


[writing a blog] <https://ceramichacker.com/>

[Signals and Threads Programmable Hardware episode]
<https://signalsandthreads.com/programmable-hardware/>

[Hardcaml] <https://github.com/janestreet/hardcaml>

[up on GitHub] <https://github.com/askvortsov1/hardcaml-mips>

[Some more background on what we=E2=80=99re doing and why]
<https://ceramichacker.com/blog/1-1x-hardcaml-mips-intro-what-and-why>

[An ELI5 overview of how hardware, and pipelined CPUs in particular,
work]
<https://ceramichacker.com/blog/2-2x-a-bit-on-computers-hardware-and-cpus>

[Another high-level overview of Verilog, hardware design, FPGAs, and why
I think OCaml might be a great fit for hardware design]
<https://ceramichacker.com/blog/4-3x-verilog-fpgas-and-why-ocaml>

[How to set up a Hardcaml project, including testing and Verilog
generation]
<https://ceramichacker.com/blog/5-4x-ocaml-setup-hardcaml-basics-and-projec=
t-plan>

[How to split Hardcaml circuits into multiple modules]
<https://ceramichacker.com/blog/11-5x-multi-module-circuits-in-hardcaml>


dune-release 1.5.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-dune-release-1-5-0/8095/1>


Nathan Rebours announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  On behalf of the dune-release team I'm pleased to announce that we're
  releasing dune-release.1.5.0.

  It has been quite a while since the last release so there are numerous
  changes and improvements in this one, along with a lot of bug fixes.

  The two main new features in 1.5.0 are:
  =E2=80=A2 A draft release mode that creates a draft Github release and a =
draft
    PR to opam-repository. It comes with an `undraft' command that will
    undraft both and update the opam file's `url.src' field
    accordingly. We believe this feature will prove helpful to
    maintainers of tools such as `dune' which releases are often watched
    by distribution maintainers. Draft releases allow you to wait until
    you have opam-repository's CI approval to actually create a GH
    release that will notify anyone watching the repository. This
    feature is still a bit experimental, we have ideas on how to improve
    it but we wanted to get a first version out to collect feedback on
    how it is used and what you folks expect from it.
  =E2=80=A2 A `check' command that you can run ahead of a release to know if
    dune-release has all the information it needs in the repository,
    along with running the lint, build and test checks it normally runs
    after building the tarball. We're aware that it can be frustrating
    to see dune-release fail right in the middle of the release
    process. We're trying to improve this situation and this is a first
    step in that direction.

  You can see the full changelog [here]

  You'll note we also deprecated a few features such as delegates (as we
  announced in [this post]), opam 1.x and the `--user' option and
  corresponding config file field.  This release is likely to be the
  last 1.x release of `dune-release' except for important bug fixes as
  we'll start working on 2.0 soon.

  Our main goals for 2.0 are to make the experience for github users as
  seemless as possible. We want the tool to do the right thing for those
  users without them having to configure anything. Delegates got in the
  way there and that's why we're removing them.  We do care about our
  non github users and we've worked on making it as configurable as
  possible so that you can integrate it in your release workflow. The
  situation should already have improved quite a bit with this release
  as we fixed several bugs for non github hosted repositories. We want
  to make sure that these users will be happy with dune-release 2.0 as
  well.  Hopefully in the future dune-release will support other release
  workflows such as handling gitlab hosted repositories but we want to
  make sure our main user base is happy with the tool before adding
  this.

  We'll communicate a bit more on our plans for 2.0 in the next few
  months. Our hope is that it will hit opam before the end of this year.

  We hope that you'll like this new version and wish you all successful
  and happy releases!


[here] <https://github.com/ocamllabs/dune-release/releases/tag/1.5.0>

[this post]
<https://discuss.ocaml.org/t/replacing-dune-release-delegates/4767>


anders 0.7.1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-anders-0-7-1/8098/1>


Namdak Tonpa announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The HTS language proposed by Voevodsky exposes two different presheaf
  models of type theory: the inner one is homotopy type system presheaf
  that models HoTT and the outer one is traditional Martin-L=C3=B6f type
  system presheaf that models set theory with UIP. The motivation behind
  this doubling is to have an ability to express semisemplicial
  types. Theoretical work on merging meta-theoretical and homotopical
  languages was continued in [2LTT] [Anenkov, Capriotti, Kraus,
  Sattler].

  While we are on our road to HTS with Lean-like tactic language,
  currently we are at the stage of regular cubical (HoTT) type checker
  with CHM-style primitives, or more general CCHM type checker. You may
  try it at Github: [groupoid/anders].

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ opam install anders
  =E2=94=82 $ anders
  =E2=94=82 Anders theorem prover [PTS][MLTT][CCHM-4][HTS].
  =E2=94=82=20
  =E2=94=82    invoke =3D anders | anders list
  =E2=94=82      list =3D [] | command list
  =E2=94=82   command =3D check filename     | lex filename
  =E2=94=82           | parse filename     | help
  =E2=94=82           | cubicaltt filename | girard
  =E2=94=82           | trace
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Anders is idiomatic and educational. We carefully draw the favourite
  Lean-compatible syntax to fit 130 LOC in Menhir, the MLTT core (based
  on Mini-TT) is 500 LOC and pretypes presheaf is another 500 LOC.


[2LTT] <https://arxiv.org/pdf/1705.03307.pdf>

[groupoid/anders] <https://github.com/groupoid/anders>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2021-07-06 Tue 14:29 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
// @license magnet:?xt=3Durn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&=
dn=3Dpublic-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target =3D document.getElementById(id);
       if(null !=3D target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2021.06.29.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2021.07.13.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of June 29 to July 06, 2=
021.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">LibreRef - LablGtk-based Digital Reference Tool Applicat=
ion</a></li>
<li><a href=3D"#2">u2f - universal second factor</a></li>
<li><a href=3D"#3">Reproducible OPAM packages / MirageOS</a></li>
<li><a href=3D"#4">Dune 2.9.0</a></li>
<li><a href=3D"#5">Hardcaml MIPS CPU Learning Project and Blog</a></li>
<li><a href=3D"#6">dune-release 1.5.0</a></li>
<li><a href=3D"#7">anders 0.7.1</a></li>
<li><a href=3D"#org4fff275">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">LibreRef - LablGtk-based Digital Reference Tool Application</h=
2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-libreref-lablgtk-based-=
digital-reference-tool-application/8077/1">https://discuss.ocaml.org/t/ann-=
libreref-lablgtk-based-digital-reference-tool-application/8077/1</a>
</p>
</div>

<div id=3D"outline-container-orga2680dc" class=3D"outline-3">
<h3 id=3D"orga2680dc">Kiran Gopinathan announced</h3>
<div class=3D"outline-text-3" id=3D"text-orga2680dc">
<p>
I'm not sure if this is that close to the typical uses of OCaml, but postin=
g this here just in case
anyone was interested in another end-user facing application using LablGtk.
</p>


<div id=3D"org56ea0ee" class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/opti=
mized/2X/b/b72b4bd7838e41dbaed2254350799c5e75245a3d_2_250x250.png" alt=3D"b=
72b4bd7838e41dbaed2254350799c5e75245a3d_2_250x250.png" />
</p>
</div>

<blockquote>
<p>
LibreRef is a free as in freedom digital referencing tool for artists.
</p>
</blockquote>

<p>
It's written in OCaml using LablGtk and Cairo to implement the GUI.
</p>

<p>
You can find the source code at: <a href=3D"https://gitlab.com/gopiandcode/=
libre-ref">gitlab</a> (<a href=3D"https://github.com/Gopiandcode/LibreRef">=
github
mirror</a>)
</p>

<p>
A picture is worth a thousand words, so before I continue, here are a few e=
xamples of it in action:
</p>


<div id=3D"org641e8ee" class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/orig=
inal/2X/1/126997c61b83b700feac41e380b42c560bdf2340.gif" alt=3D"126997c61b83=
b700feac41e380b42c560bdf2340.gif" />
</p>
</div>


<div id=3D"orgb23985e" class=3D"figure">
<p><img src=3D"https://aws1.discourse-cdn.com/standard11/uploads/ocaml/orig=
inal/2X/4/49b11ef943e491ba220332d257bc6a15b506ed6b.gif" alt=3D"49b11ef943e4=
91ba220332d257bc6a15b506ed6b.gif" />
</p>
</div>

<p>
Overall, getting LablGtk to work was fairly straightforward, although the d=
ocumentation was a bit
lacking (although the same might be said of Gtk itself).
</p>

<p>
I was able to piece together the correct uses of most of the API calls by r=
elying on either the
examples from the repository or by translating snippets of code from online=
 back into LablGtk.
</p>

<p>
As for deploying it as an application, I found the AppImage &amp; LinuxDepl=
oy toolchain to work well with
the resulting binary (admittedly I've only tested it with two devices so fa=
r), and it meant that I
could publish the program without having to ask people to setup the full OC=
aml &amp; Opam toolchain, which
would probably be a large ask.
</p>

<p>
As for the implementation, I think it was fairly elegant (if I say so mysel=
f :slight_smile:), although
I may have gone overboard with functors (see this higher-order functor in t=
he GUI interface:
<a href=3D"https://gitlab.com/gopiandcode/libre-ref/-/blob/master/gui.mli#L=
175">https://gitlab.com/gopiandcode/libre-ref/-/blob/master/gui.mli#L175</a=
>) and some aspects of the separation
of concerns weren't so well established.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">u2f - universal second factor</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-u2f-universal-second-fa=
ctor/8078/1">https://discuss.ocaml.org/t/ann-u2f-universal-second-factor/80=
78/1</a>
</p>
</div>

<div id=3D"outline-container-org2d08696" class=3D"outline-3">
<h3 id=3D"org2d08696">Hannes Mehnert announced</h3>
<div class=3D"outline-text-3" id=3D"text-org2d08696">
<p>
it is our pleasure to announce the just released opam package u2f, which is=
 a server side
implementation of the FIDO standard for two-factor authentication using a s=
pecial device (yubikey
etc.). The device does challenge-response authentication with the server us=
ing public key cryptography.
</p>

<p>
The implementation is stateless and does not use a specific IO library, but=
 only achieves the logic for
constructing a registration request, verifying a response thereof, and auth=
orization requests with
responses thereof. Please have a look at <a href=3D"https://github.com/robu=
rio/u2f">https://github.com/roburio/u2f</a> if you're interested. It is
licensed under the permissive 2-clause BSD license.
</p>

<p>
We use this library in an example server (in the <code>bin</code> directory=
) that uses dream. The live server is
online at <a href=3D"https://u2f-demo.robur.coop">https://u2f-demo.robur.co=
op</a> &#x2013; please let us know if you run into any trouble, or open an
issue on the GitHub repository.
</p>

<p>
One question though: we're unable to generate the documentation from the ml=
i &#x2013; already asked on
discord with no result. Anyone with a better understanding of odoc etc. can=
 take a look why <code>dune build @doc</code> outputs a nearly empty file? =
Thanks a lot :)
</p>

<p>
The development was sponsored by skolem.tech.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">Reproducible OPAM packages / MirageOS</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/reproducible-opam-packages-=
mirageos/8079/1">https://discuss.ocaml.org/t/reproducible-opam-packages-mir=
ageos/8079/1</a>
</p>
</div>

<div id=3D"outline-container-org113b368" class=3D"outline-3">
<h3 id=3D"org113b368">Hannes Mehnert announced</h3>
<div class=3D"outline-text-3" id=3D"text-org113b368">
<p>
we are pleased to announce reproducible binary images for MirageOS unikerne=
ls (see the blog post at
<a href=3D"https://hannes.robur.coop/Posts/Deploy">https://hannes.robur.coo=
p/Posts/Deploy</a>). The binaries are located at <a href=3D"https://builds.=
robur.coop">https://builds.robur.coop</a> (all
components are open source and linked from the page).
</p>

<p>
Additionally, the required tools to achieve reproducible builds are release=
d as binary packages for
various operating systems as well on the same site. They are used by the in=
frastructure to run daily
builds (always with the HEAD of opam-repository to not loose any updates / =
new releases). The custom
overlay <a href=3D"https://git.robur.io/robur/unikernel-repo">https://git.r=
obur.io/robur/unikernel-repo</a> is used that adds some development package=
s.
</p>

<p>
Happy to hear your thoughts and feedback here. (Earlier post
<a href=3D"https://discuss.ocaml.org/t/reproducible-builds-with-ocaml-opam-=
and-mirageos/4877">https://discuss.ocaml.org/t/reproducible-builds-with-oca=
ml-opam-and-mirageos/4877</a>)
</p>

<p>
This work was funded by the <a href=3D"https://pointer.ngi.eu">NGI Pointer<=
/a> project "Funding The Next Generation
Ecosystem of Internet Architects".
</p>
</div>
</div>
</div>




<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Dune 2.9.0</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-dune-2-9-0/8087/1">http=
s://discuss.ocaml.org/t/ann-dune-2-9-0/8087/1</a>
</p>
</div>

<div id=3D"outline-container-orgafb6686" class=3D"outline-3">
<h3 id=3D"orgafb6686">Emilio Jes=C3=BAs Gallego Arias announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgafb6686">
<p>
Dear all, on behalf of the Dune team I'm pleased to announce the release of=
 Dune 2.9.0. This is the
last release on the Dune 2.x series and could be considered a maintenance r=
elease as it mostly consists
on bug fixes and miscellaneous tweaks and features for sites,
instrumentation, and mdx support.
</p>

<p>
Please find the full list of changes below:
</p>
<ul class=3D"org-ul">
<li>Add <code>(enabled_if ...)</code> to <code>(mdx ...)</code> (<a href=3D=
"https://github.com/ocaml/dune/pull/4434">https://github.com/ocaml/dune/pul=
l/4434</a>, @emillon)</li>

<li>Add support for instrumentation dependencies (<a href=3D"https://github=
.com/ocaml/dune/pull/4210">https://github.com/ocaml/dune/pull/4210</a>, fix=
es <a href=3D"https://github.com/ocaml/dune/issues/3983">https://github.com=
/ocaml/dune/issues/3983</a>, @nojb)</li>

<li>Add the possibility to use <code>locks</code> with the cram tests stanz=
a (<a href=3D"https://github.com/ocaml/dune/pull/4480">https://github.com/o=
caml/dune/pull/4480</a>, @voodoos)</li>

<li>Allow to set up merlin in a variant of the default context (<a href=3D"=
https://github.com/ocaml/dune/pull/4145">https://github.com/ocaml/dune/pull=
/4145</a>, @TheLortex, @voodoos)</li>

<li>Add <code>(package ...)</code> to <code>(mdx ...)</code> (<a href=3D"ht=
tps://github.com/ocaml/dune/pull/4691">https://github.com/ocaml/dune/pull/4=
691</a>, fixes <a href=3D"https://github.com/ocaml/dune/issues/3756">https:=
//github.com/ocaml/dune/issues/3756</a>, @emillon)</li>

<li>Handle renaming of <code>coq.kernel</code> library to <code>coq-core.ke=
rnel</code> in Coq 8.14 (<a href=3D"https://github.com/ocaml/dune/pull/4713=
">https://github.com/ocaml/dune/pull/4713</a>, @proux01)</li>

<li>Fix generation of merlin configuration when using <code>(include_subdir=
s unqualified)</code> on Windows (<a href=3D"https://github.com/ocaml/dune/=
pull/4745">https://github.com/ocaml/dune/pull/4745</a>, @nojb)</li>

<li>Fix bug for the install of Coq native files when using <code>(include_s=
ubdirs qualified)</code> (<a href=3D"https://github.com/ocaml/dune/pull/475=
3">https://github.com/ocaml/dune/pull/4753</a>, @ejgallego)</li>

<li>Allow users to specify install target directories for <code>doc</code> =
and <code>etc</code> sections. We add new options <code>--docdir</code> and=
 <code>--etcdir</code> to both Dune's configure and <code>dune install</cod=
e> command. (<a href=3D"https://github.com/ocaml/dune/pull/4744">https://gi=
thub.com/ocaml/dune/pull/4744</a>, fixes <a href=3D"https://github.com/ocam=
l/dune/issues/4723">https://github.com/ocaml/dune/issues/4723</a>, @ejgalle=
go, thanks to @JasonGross for reporting this issue)</li>

<li>Fix issue where Dune would ignore <code>(env ... (coq (flags ...)))</co=
de> declarations appearing in <code>dune</code> files (<a href=3D"https://g=
ithub.com/ocaml/dune/pull/4749">https://github.com/ocaml/dune/pull/4749</a>=
, fixes <a href=3D"https://github.com/ocaml/dune/issues/4566">https://githu=
b.com/ocaml/dune/issues/4566</a>, @ejgallego @rgrinberg)</li>

<li>Disable some warnings on Coq 8.14 and <code>(lang coq (&gt;=3D 0.3))</c=
ode> due to the rework of the Coq "native" compilation system (<a href=3D"h=
ttps://github.com/ocaml/dune/pull/4760">https://github.com/ocaml/dune/pull/=
4760</a>, @ejgallego)</li>

<li>Fix a bug where instrumentation flags would be added even if the instru=
mentatation was disabled (@nojb, <a href=3D"https://github.com/ocaml/dune/p=
ull/4770">https://github.com/ocaml/dune/pull/4770</a>)</li>

<li>Fix <a href=3D"https://github.com/ocaml/dune/issues/4682">https://githu=
b.com/ocaml/dune/issues/4682</a>: option <code>-p</code> takes now preceden=
ce on environement variable <code>DUNE_PROFILE</code> (<a href=3D"https://g=
ithub.com/ocaml/dune/pull/4730">https://github.com/ocaml/dune/pull/4730</a>=
, <a href=3D"https://github.com/ocaml/dune/pull/4774">https://github.com/oc=
aml/dune/pull/4774</a>, @bobot, reported by @dra27 <a href=3D"https://githu=
b.com/ocaml/dune/issues/4632">https://github.com/ocaml/dune/issues/4632</a>=
)</li>

<li>Fix installation with opam of package with dune sites. The <code>.insta=
ll</code> file is now produced by a local <code>dune install</code> during =
the build phase (<a href=3D"https://github.com/ocaml/dune/pull/4730">https:=
//github.com/ocaml/dune/pull/4730</a>, <a href=3D"https://github.com/ocaml/=
dune/pull/4645">https://github.com/ocaml/dune/pull/4645</a>, @bobot, report=
ed by @kit-ty-kate <a href=3D"https://github.com/ocaml/dune/issues/4198">ht=
tps://github.com/ocaml/dune/issues/4198</a>)</li>

<li>Fix multiple issues in the sites feature (<a href=3D"https://github.com=
/ocaml/dune/pull/4730">https://github.com/ocaml/dune/pull/4730</a>, <a href=
=3D"https://github.com/ocaml/dune/pull/4645">https://github.com/ocaml/dune/=
pull/4645</a> @bobot, reported by @Lelio-Brun <a href=3D"https://github.com=
/ocaml/dune/issues/4219">https://github.com/ocaml/dune/issues/4219</a>, by =
@Kakadu <a href=3D"https://github.com/ocaml/dune/issues/4325">https://githu=
b.com/ocaml/dune/issues/4325</a>, by @toots <a href=3D"https://github.com/o=
caml/dune/issues/4415">https://github.com/ocaml/dune/issues/4415</a>)</li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Hardcaml MIPS CPU Learning Project and Blog</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/hardcaml-mips-cpu-learning-=
project-and-blog/8088/1">https://discuss.ocaml.org/t/hardcaml-mips-cpu-lear=
ning-project-and-blog/8088/1</a>
</p>
</div>

<div id=3D"outline-container-org3a4eb5b" class=3D"outline-3">
<h3 id=3D"org3a4eb5b">"Alexander (Sasha) Skvortsov announced</h3>
<div class=3D"outline-text-3" id=3D"text-org3a4eb5b">
<p>
Tl;dr: I=E2=80=99m <a href=3D"https://ceramichacker.com/">writing a blog</a=
> about making a MIPS CPU in Hardcaml.
</p>

<p>
Hi! My name is Sasha, and I=E2=80=99m a student at Penn State majoring in C=
S and Math. Last semester, I took a
computer engineering class where we built a pipelined MIPS CPU in Verilog a=
s a semester-long project. I
enjoyed the class, but a lot of frustration came from Verilog itself.
</p>

<p>
A few months ago, I came across the <a href=3D"https://signalsandthreads.co=
m/programmable-hardware/">Signals and Threads Programmable Hardware
episode</a>. I really liked the idea of
<a href=3D"https://github.com/janestreet/hardcaml">Hardcaml</a>: a library =
to write and test hardware designs in
OCaml. Representing circuits as functions felt like a good abstraction, and=
 I=E2=80=99ve been wanting to learn
OCaml for a while.
</p>

<p>
So this summer, a friend and I are rewriting the Verilog MIPS CPU we made l=
ast semester into Hardcaml.
We=E2=80=99re still working on the project, but have made some good progres=
s and wanted to share it in case
anyone finds it interesting / useful. If anyone wants to take a look, it=E2=
=80=99s <a href=3D"https://github.com/askvortsov1/hardcaml-mips">up on
GitHub</a>.
</p>

<p>
We=E2=80=99ve written some blog posts about our project:
</p>

<ol class=3D"org-ol">
<li><a href=3D"https://ceramichacker.com/blog/1-1x-hardcaml-mips-intro-what=
-and-why">Some more background on what we=E2=80=99re doing and why</a></li>
<li><a href=3D"https://ceramichacker.com/blog/2-2x-a-bit-on-computers-hardw=
are-and-cpus">An ELI5 overview of how hardware, and pipelined CPUs in parti=
cular, work</a></li>
<li><a href=3D"https://ceramichacker.com/blog/4-3x-verilog-fpgas-and-why-oc=
aml">Another high-level overview of Verilog, hardware design, FPGAs, and wh=
y I think OCaml might be a great fit for hardware design</a></li>
<li><a href=3D"https://ceramichacker.com/blog/5-4x-ocaml-setup-hardcaml-bas=
ics-and-project-plan">How to set up a Hardcaml project, including testing a=
nd Verilog generation</a></li>
<li><a href=3D"https://ceramichacker.com/blog/11-5x-multi-module-circuits-i=
n-hardcaml">How to split Hardcaml circuits into multiple modules</a></li>
</ol>

<p>
There=E2=80=99s also a few more that we=E2=80=99ve written code for, but ar=
e still drafting blog posts about:
</p>

<ul class=3D"org-ul">
<li>How to work with memory in Hardcaml</li>
<li>How to design stateful, sequential circuits in Hardcaml</li>
<li>A safer design pattern for Hardcaml circuits</li>
</ul>

<p>
I=E2=80=99m new to both OCaml and blogging, and this has definitely been a =
fun experience so far! Would love to hear any feedback / comments.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">dune-release 1.5.0</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-dune-release-1-5-0/8095=
/1">https://discuss.ocaml.org/t/ann-dune-release-1-5-0/8095/1</a>
</p>
</div>

<div id=3D"outline-container-org5c4f99f" class=3D"outline-3">
<h3 id=3D"org5c4f99f">Nathan Rebours announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5c4f99f">
<p>
On behalf of the dune-release team I'm pleased to announce that we're relea=
sing dune-release.1.5.0.
</p>

<p>
It has been quite a while since the last release so there are numerous chan=
ges and improvements in this
one, along with a lot of bug fixes.
</p>

<p>
The two main new features in 1.5.0 are:
</p>
<ul class=3D"org-ul">
<li>A draft release mode that creates a draft Github release and a draft PR=
 to opam-repository. It comes with an <code>undraft</code> command that wil=
l undraft both and update the opam file's <code>url.src</code> field accord=
ingly. We believe this feature will prove helpful to maintainers of tools s=
uch as <code>dune</code> which releases are often watched by distribution m=
aintainers. Draft releases allow you to wait until you have opam-repository=
's CI approval to actually create a GH release that will notify anyone watc=
hing the repository. This feature is still a bit experimental, we have idea=
s on how to improve it but we wanted to get a first version out to collect =
feedback on how it is used and what you folks expect from it.</li>
<li>A <code>check</code> command that you can run ahead of a release to kno=
w if dune-release has all the information it needs in the repository, along=
 with running the lint, build and test checks it normally runs after buildi=
ng the tarball. We're aware that it can be frustrating to see dune-release =
fail right in the middle of the release process. We're trying to improve th=
is situation and this is a first step in that direction.</li>
</ul>

<p>
You can see the full changelog <a href=3D"https://github.com/ocamllabs/dune=
-release/releases/tag/1.5.0">here</a>
</p>

<p>
You'll note we also deprecated a few features such as delegates (as we anno=
unced in <a href=3D"https://discuss.ocaml.org/t/replacing-dune-release-dele=
gates/4767">this
post</a>), opam 1.x and the <code>--user</code>
option and corresponding config file field.
This release is likely to be the last 1.x release of <code>dune-release</co=
de> except for important bug fixes as
we'll start working on 2.0 soon.
</p>

<p>
Our main goals for 2.0 are to make the experience for github users as seeml=
ess as possible. We want the
tool to do the right thing for those users without them having to configure=
 anything. Delegates got in
the way there and that's why we're removing them.
We do care about our non github users and we've worked on making it as conf=
igurable as possible so that
you can integrate it in your release workflow. The situation should already=
 have improved quite a bit
with this release as we fixed several bugs for non github hosted repositori=
es. We want to make sure
that these users will be happy with dune-release 2.0 as well.
Hopefully in the future dune-release will support other release workflows s=
uch as handling gitlab
hosted repositories but we want to make sure our main user base is happy wi=
th the tool before adding
this.
</p>

<p>
We'll communicate a bit more on our plans for 2.0 in the next few months. O=
ur hope is that it will hit
opam before the end of this year.
</p>

<p>
We hope that you'll like this new version and wish you all successful and h=
appy releases!
</p>
</div>
</div>
</div>




<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">anders 0.7.1</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-anders-0-7-1/8098/1">ht=
tps://discuss.ocaml.org/t/ann-anders-0-7-1/8098/1</a>
</p>
</div>

<div id=3D"outline-container-org3b4777b" class=3D"outline-3">
<h3 id=3D"org3b4777b">Namdak Tonpa announced</h3>
<div class=3D"outline-text-3" id=3D"text-org3b4777b">
<p>
The HTS language proposed by Voevodsky exposes two different presheaf model=
s of type theory: the inner
one is homotopy type system presheaf that models HoTT and the outer one is =
traditional Martin-L=C3=B6f type
system presheaf that models set theory with UIP. The motivation behind this=
 doubling is to have an
ability to express semisemplicial types. Theoretical work on merging meta-t=
heoretical and homotopical
languages was continued in <a href=3D"https://arxiv.org/pdf/1705.03307.pdf"=
>2LTT</a> [Anenkov, Capriotti, Kraus,
Sattler].
</p>

<p>
While we are on our road to HTS with Lean-like tactic language, currently w=
e are at the stage of
regular cubical (HoTT) type checker with CHM-style primitives, or more gene=
ral CCHM type checker. You
may try it at Github: <a href=3D"https://github.com/groupoid/anders">groupo=
id/anders</a>.
</p>

<pre class=3D"example" id=3D"orga06892d">
$ opam install anders
$ anders
Anders theorem prover [PTS][MLTT][CCHM-4][HTS].

   invoke =3D anders | anders list
     list =3D [] | command list
  command =3D check filename     | lex filename
          | parse filename     | help
          | cubicaltt filename | girard
          | trace
</pre>

<p>
Anders is idiomatic and educational. We carefully draw the favourite Lean-c=
ompatible syntax to fit 130
LOC in Menhir, the MLTT core (based on Mini-TT) is 500 LOC and pretypes pre=
sheaf is another 500 LOC.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org4fff275" class=3D"outline-2">
<h2 id=3D"org4fff275">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org4fff275">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname" id=3D"org9a0c2c2">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

