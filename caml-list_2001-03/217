Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA08222; Tue, 27 Mar 2001 10:50:00 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA08217 for <caml-list@pauillac.inria.fr>; Tue, 27 Mar 2001 10:49:59 +0200 (MET DST)
Received: from tcs.inf.tu-dresden.de (tcs.inf.tu-dresden.de [141.76.75.101])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f2R8nwT26214
	for <caml-list@inria.fr>; Tue, 27 Mar 2001 10:49:58 +0200 (MET DST)
Received: from ithif51 (ithif51 [141.76.75.51])
	by tcs.inf.tu-dresden.de (8.11.1/8.11.1) with ESMTP id f2R8nw508685
	for <caml-list@inria.fr>; Tue, 27 Mar 2001 10:49:58 +0200 (MET DST)
Received: from tews by ithif51 with local (Exim 3.12 #1 (Debian))
	id 14hpAr-0006k2-00
	for <caml-list@inria.fr>; Tue, 27 Mar 2001 10:49:57 +0200
From: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: caml-list@inria.fr
Subject: Re: [Caml-list] recursive modules redux, & interface files
In-Reply-To: <3ABB0143.81FB4357@inria.fr>
References: <DD7356599083414BA450E3DCC4119B8B04100D@NT.kal.com>
	<3ABB0143.81FB4357@inria.fr>
X-Mailer: VM 6.34 under Emacs 20.7.2
Message-Id: <E14hpAr-0006k2-00@ithif51>
Date: Tue, 27 Mar 2001 10:49:57 +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi,

Tom Hirschowitz writes:
   Date: Fri, 23 Mar 2001 08:54:43 +0100
   Subject: Re: [Caml-list] recursive modules redux, & interface files
   
   Just curious, but how would you treat this?
   
   module type TEN = 
     sig 
       module PLAYER : sig 
                type t = Andre | Pete | Ivan | Cedric 
                val name : t -> string 
       end
       exception Not_Ex_No1 of PLAYER.t
       type u = PLAYER.t -> PLAYER.t
     end
   
   module Ten = 
     struct 
       includesig TEN
       ...
     end
   
   Reject?
   
Probably. I think we need a solution for the case where a big
variant type is defined in an .ml file and is exported in the
associated .mli file. 

The module language of ocaml is great. But I know only a few
people that are acquainted with it. If you can built expressions
like the above, then you surely find a way with several functor
applications that avoids any duplications. 

Bye,

Hendrik
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

