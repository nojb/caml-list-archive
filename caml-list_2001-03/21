Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA20175; Mon, 5 Mar 2001 20:14:03 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA20102 for <caml-list@pauillac.inria.fr>; Mon, 5 Mar 2001 20:14:02 +0100 (MET)
Received: from mta6.snfc21.pbi.net (mta6.snfc21.pbi.net [206.13.28.240])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f25JE0924707;
	Mon, 5 Mar 2001 20:14:01 +0100 (MET)
Received: from checkerlap.d6.com ([64.160.53.238])
 by mta6.snfc21.pbi.net (Sun Internet Mail Server sims.3.5.2000.01.05.12.18.p9)
 with ESMTP id <0G9Q00KXGJLFAZ@mta6.snfc21.pbi.net>; Mon,
 5 Mar 2001 09:36:52 -0800 (PST)
Date: Mon, 05 Mar 2001 09:37:36 -0800
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] bigarrays and toplevel on Win32?
In-reply-to: <20010305175715.B16895@pauillac.inria.fr>
X-Sender: def6@shell16.ba.best.com
To: Xavier Leroy <Xavier.Leroy@inria.fr>
Cc: caml-list@inria.fr
Message-id: <4.3.2.7.2.20010305091601.036cdef0@shell16.ba.best.com>
MIME-version: 1.0
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Content-type: text/plain; charset="us-ascii"
References: <4.3.2.7.2.20010304234009.00e1e220@shell16.ba.best.com>
 <4.3.2.7.2.20010304234009.00e1e220@shell16.ba.best.com>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>This is a known bug in OCaml 3.00.  A simple fix is described here:
>  http://caml.inria.fr/bin/caml-bugs/fixed?id=94
>and of course this will be fixed in OCaml 3.01.

Ack, sorry, the one place I didn't look was the bug list.  Sorry to waste your time.

>The party line on unsafe array accesses is unclear: on the one hand,
>we do not want to encourage their use, as it can break type safety and
>dramatically reduce the safety of the programs; on the other hand,
>they are handy when benchmarking against C or Fortran :-)

I'd like to have the choice.  I prefer unsafe_get/unsafe_set to -unsafe because it lets me choose where to be risky.  

It doesn't actually look like it would be too hard for me to make -unsafe work in the source (adding the unsafe_(set|get) would be harder, it seems).  Couldn't I just have ccmgen.ml's bigarray_indexing function not generate Ccheckbound ops if Clflags.fast is set?

>I'll keep that in mind for 3.02.

Cool.  Is there an autmated or semi-automated way to do these primitive additions, or do you manually do it?

Chris

-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

