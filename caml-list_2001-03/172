Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA23901; Thu, 22 Mar 2001 14:02:01 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA17242 for <caml-list@pauillac.inria.fr>; Thu, 22 Mar 2001 14:02:00 +0100 (MET)
Received: from miss.wu-wien.ac.at (miss.wu-wien.ac.at [137.208.107.17])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f2MD1xT08189
	for <caml-list@inria.fr>; Thu, 22 Mar 2001 14:01:59 +0100 (MET)
Received: (from mottl@localhost)
	by miss.wu-wien.ac.at (8.9.0/8.9.0) id OAA14574;
	Thu, 22 Mar 2001 14:01:58 +0100 (MET)
Date: Thu, 22 Mar 2001 14:01:57 +0100
From: Markus Mottl <mottl@miss.wu-wien.ac.at>
To: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
Cc: OCAML <caml-list@inria.fr>
Subject: Re: [Caml-list] recursive modules redux, & interface files
Message-ID: <20010322140157.A7070@miss.wu-wien.ac.at>
References: <4.3.2.7.2.20010318142842.00d85300@shell16.ba.best.com> <20010321194138.A29405@pauillac.inria.fr> <E14g3nW-0001gD-00@ithif51>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <E14g3nW-0001gD-00@ithif51>; from tews@tcs.inf.tu-dresden.de on Thu, Mar 22, 2001 at 13:02:34 +0100
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hendrik Tews schrieb am Thursday, den 22. March 2001:
> I would like to vote for solutions that work for the common case
> when writing large programs, even if they are hacks, considered
> from a theoretical point of view.

I am not so fond of sacrificing theoretical beauty: it usually seems
to be the case that there are working solutions that are also elegant -
it's only a matter of thinking about them long enough. You might speed
up development a bit by allowing hacks if you cannot immediately find
a sound solution, but IMHO it is hardly ever a good idea in the long run.

> I think that in this case the theoretical cleaness is overrated.

In general? Probably not. If there is a problem with expressiveness or
else, it seems to be better to first try harder to find a solution with
the existing system before crying for a hacky extension. And if this
doesn't work, let's try to find a more expressive theory rather than
abandoning theory completely.

> Cross module recursion of functions is soo useful, that it
> should be made to work --- even if the solution seems stupid with
> respect to the example above.

Nearly everytime I had thought "now I need recursive modules", I found
other, even elegant ways to do it. If we really want them, please
let's don't put aside theory but take existing clean solutions (e.g.
see Claudio Russo's thesis).

>    [duplications in signatures and structures]
> 
>    Is the practical value of this kludge enough to forget that it's a
>    kludge?  
> 
> Sure.

The solution to put the whole signature into a separate .ml-file requires
hardly any work and solves this problem neatly. Why introduce a kludge
if there are reasonable ways to do it?

> No, at least I cannot.

Do you have examples where the current system is just too awkward to use?

> Also here I would suggest to have a
> solution that works for the common case. What about changing
> include, such that including a signature into a structure
> includes all types and all exceptions?

But you can do this (and I do it regularly) by putting the signature stuff
into a separate module (or .ml-file): then you can "include" things in
your structures to your hearts delight (thanks to the new way of using
"include" with structures).

Regards,
Markus Mottl

-- 
Markus Mottl, mottl@miss.wu-wien.ac.at, http://miss.wu-wien.ac.at/~mottl
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

