Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA30973; Fri, 30 Mar 2001 14:41:12 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA31033; Fri, 30 Mar 2001 14:41:12 +0200 (MET DST)
Received: from saul.cis.upenn.edu (SAUL.CIS.UPENN.EDU [158.130.12.4])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f2UCfB917431;
	Fri, 30 Mar 2001 14:41:11 +0200 (MET DST)
Received: from localhost (localhost [127.0.0.1])
	by saul.cis.upenn.edu (8.10.1/8.10.1) with SMTP id f2UCfAv24194;
	Fri, 30 Mar 2001 07:41:10 -0500 (EST)
To: Francois.Pottier@inria.fr
cc: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>,
        caml-list@pauillac.inria.fr
Reply-to: bcpierce@cis.upenn.edu
Subject: Re: [Caml-list] Future of labels 
In-reply-to: Your message of Fri, 30 Mar 2001 13:22:03 +0200.
             <20010330132203.A29171@pauillac.inria.fr> 
Date: Fri, 30 Mar 2001 07:41:10 EST
Message-ID: <24190.985956070@saul.cis.upenn.edu>
From: "Benjamin C. Pierce" <bcpierce@saul.cis.upenn.edu>
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> This proposal sounds reasonable to me. But I'd support Judicaël and vote
> in favor of a single mode. If the designer of a particular library chose
> to include labels in its API, why should the user not comply? Who are the
> people who `don't want to hear of labels at all'?

I don't really have an opinion about whether classic mode, label mode, or
something else is best, but I'd like to add my strong support for having
just *one* mode that everybody uses.  

One thing to be careful of, though, is making the language a lot more
difficult to use for newcomers.  The present language design has the
advantage that people do not have to start out understanding labels to do
anything at all in OCaml -- they can learn about them much later, when
they start doing fancy GUI programming or whatever.

This property makes OCaml at the moment a much better language for
*teaching* than, say, Java, where there are about a dozen fairly deep
concepts that you have to understand before you can write even the
smallest program.  We use OCaml at Penn for teaching intro programming to
hundreds of undergraduates, and the main attraction is that you can write
significant programs in a tiny subset of the language.

     Benjamin
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

