Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA20837; Wed, 28 Mar 2001 05:38:53 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA20833 for <caml-list@pauillac.inria.fr>; Wed, 28 Mar 2001 05:38:52 +0200 (MET DST)
Received: from student.math.uwaterloo.ca (student.math.uwaterloo.ca [129.97.204.16])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f2S3coT24242
	for <caml-list@inria.fr>; Wed, 28 Mar 2001 05:38:50 +0200 (MET DST)
Received: from rees.math.uwaterloo.ca (apuvanan@rees.math.uwaterloo.ca [129.97.204.28])
	by student.math.uwaterloo.ca (8.8.8/8.8.8) with ESMTP id WAA26273
	for <caml-list@inria.fr>; Tue, 27 Mar 2001 22:38:49 -0500 (EST)
Received: from localhost (apuvanan@localhost)
	by rees.math.uwaterloo.ca (8.9.3/8.9.3) with ESMTP id WAA16471
	for <caml-list@inria.fr>; Tue, 27 Mar 2001 22:38:49 -0500 (EST)
X-Authentication-Warning: rees.math: apuvanan owned process doing -bs
Date: Tue, 27 Mar 2001 22:38:48 -0500 (EST)
From: Anjayan Puvananathan <apuvanan@student.math.uwaterloo.ca>
X-Sender: apuvanan@rees.math.uwaterloo.ca
To: caml-list@inria.fr
Subject: [Caml-list] OCaml, where art thou?
In-Reply-To: <001801c0b72d$7fd17a60$210148bf@dylan>
Message-ID: <Pine.SOL.4.05.10103272142440.6267-100000@rees.math.uwaterloo.ca>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello,

It is a great pleasure to participate in this list. I'm
returning to Caml after using having used it on my XT back in
high school. I remember trying to stretch 640k for all it was 
worth in those days. I'm glad to see all the work that has gone
into it. Keep up the excellent work!

There have been questions raised about threading in Caml under
BeOS, but however no one has responded with authority to these.
I have a few more pragmatic questions related to this. BeOS
treats threads and sockets in a fundamentally different
(better?) way than POSIX. I would like to use Caml purely as
code generator and interface the native BeOS libraries via C.
Can I be safe is assuming that the GC facilities and in general
Caml runtime are thread-safe. What would be required to ensure
thread safety, since building with -with-pthread is not an
option on BeOS? Could I, if desperate enough, initialize
separate Caml runtimes by calling caml_main in different threads
from a C main program to avoid synchronization issues? Ideally
I'd like to strip any extraneous code in Caml that is associated
with a UNIX view of the world. If OCaml is not a option, how
about Caml Light? The language itself is worth the tradeoff in
execution speed.

I hope you can help.

Once more, many thanks to the researchers at INRIA. With all
these discussions about libraries and the such, I hope you keep
the system code clean and simple as it is right now. Less is
more, although this email seems to be the antithesis of this.

Anjayan
--
Hire a talented student for a summer internship.
http://www.student.math.uwaterloo.ca/~apuvanan/

-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

