Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA10681; Fri, 30 Mar 2001 22:33:51 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA08532 for <caml-list@pauillac.inria.fr>; Fri, 30 Mar 2001 22:33:51 +0200 (MET DST)
Received: from ftp.filemaker.com (ftp.filemaker.com [192.35.50.27])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id f2UKXn924642
	for <caml-list@inria.fr>; Fri, 30 Mar 2001 22:33:49 +0200 (MET DST)
Received: from imap.filemaker.com (imap.filemaker.com [17.184.4.101])
	by ftp.filemaker.com (8.9.0/8.9.0) with ESMTP id MAA10939
	for <caml-list@inria.fr>; Fri, 30 Mar 2001 12:33:46 -0800 (PST)
Received: from [17.184.16.95] ([17.184.16.95])
	by imap.filemaker.com (8.9.3/8.9.0) with SMTP id MAA00807
	for <caml-list@inria.fr>; Fri, 30 Mar 2001 12:33:46 -0800 (PST)
Message-Id: <200103302033.MAA00807@imap.filemaker.com>
Subject: Re: Overloading again (Was Re: [Caml-list] Interfacing C++ and Ocaml)
Date: Fri, 30 Mar 2001 12:41:43 -0800
x-sender: hao-yang_wang@mail.filemaker.com
x-mailer: Claris Emailer 2.0v3, January 22, 1998
From: Hao-yang Wang <hywang@pobox.com>
To: <caml-list@inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

>An even longer time ago I asked about overloading and got a nice long
>reply from Francois Rouaix, describing the history of overloading in Caml
>and ending with something like "Jun Furuse is now working on it". You can
>read about the latest incarnation of his work by going to 
>
>http://pauillac.inria.fr/jfla/2001/actes/index.html
>
>and downloading 
>
>Generic Polymorphism in ML
>
>which as you can guess is in English unlike his paper last year. 
>
>I'd also love to know if and when this will make it into Ocaml since this
>is one of the few things that I dislike about ML style languages and
>even after quite a bit of Caml programming I still miss overloading. 
>
>-- Brian


Well, I re-read Francois Rouaix's long email, and at the end he said:
>In this type system, we still have static type-checking and inference,
>but there are some practical problems: coherence (as always when you do
>powerful overloading), true separate compilation, but more significantly,
>you have to define all "instances" of an overloaded function in a single
>"generic" definition. In most cases, this is not what the user wants.

>From Jun Furuse's paper, it seems that we still have to define all 
"instances" of an overloaded function in a single generic" definition. If 
so, we cannot extend an existing function/operator, such as (+), to 
parameters of new types.

Is this true, or did I miss something in Jun's paper?

Cheers,
Hao-yang Wang
-------------------
To unsubscribe, mail caml-list-request@inria.fr.  Archives: http://caml.inria.fr

