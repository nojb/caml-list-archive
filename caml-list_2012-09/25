Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 26EF87ED7A;
	Fri,  7 Sep 2012 18:46:27 +0200 (CEST)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  daniel.buenzli@erratique.ch) identity=pra;
  client-ip=74.55.86.74;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="daniel.buenzli@erratique.ch";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  daniel.buenzli@erratique.ch) identity=mailfrom;
  client-ip=74.55.86.74;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="daniel.buenzli@erratique.ch";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@smtp.webfaction.com) identity=helo;
  client-ip=74.55.86.74;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="daniel.buenzli@erratique.ch";
  x-sender="postmaster@smtp.webfaction.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnwBAO8jSlBKN1ZKnGdsb2JhbABFhge1VwEBAQEBCAsJCRQngkpWNQImAkkWG4YJgX8EB6hKkyaBIY8TMmADlnGEOBONI4Fh
X-IronPort-AV: E=Sophos;i="4.80,387,1344204000"; 
   d="scan'208";a="172307220"
Received: from mail6.webfaction.com (HELO smtp.webfaction.com) ([74.55.86.74])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 07 Sep 2012 18:46:26 +0200
Received: from [192.168.0.103] (89-234.197-178.cust.bluewin.ch [178.197.234.89])
	by smtp.webfaction.com (Postfix) with ESMTP id 03C9B20FFF09;
	Fri,  7 Sep 2012 11:46:22 -0500 (CDT)
Date: Fri, 7 Sep 2012 18:46:16 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Caml List <caml-list@inria.fr>
Cc: caml-hump@inria.fr
Message-ID: <66795E15E2E848A3ACAD71637B0C9518@erratique.ch>
X-Mailer: sparrow 1.6.3 (build 1172)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: [Caml-list] [ANN] Uunf 0.9.0 and Uucd 0.9.0

Hello,=20=20=20

I'd like to announce the following two modules. First Uunf:

  Uunf is an OCaml module for normalizing Unicode text. It supports all
  Unicode normalization forms and is independent from any IO
  mechanism or Unicode text data structure. Text can be processed
  without a complete in-memory representation.

  Uunf is made of a single independent module and distributed under the
  BSD3 license.

Project homepage: http://erratique.ch/software/uunf
API doc & examples: http://erratique.ch/software/uunf/doc/Uunf


Note that if you use `findlib` to install you'll need Uutf because it used =
by=20=20
the sample programs, but using Uunf itself doesn't actually require Uutf.


For those what wonder what this is about, Unicode normal forms are
needed if you want to test Unicode strings for equality via binary
equality or order them in a textually *unmeaningful* way via
binary comparison e.g. for Set.Make or Map.Make.

This is because in Unicode there is more than one way to represent the=20=
=20
same user perceived character, e.g. =C3=A9 can be represented by the sequen=
ce
<U+00E9> (precomposed character =C3=A9) or <U+0065, U+0301> (character e
followed by non-spacing mark =C2=B4). Normalizing all your strings to a
given normal form ensures that all equivalent subsequences in them=20=20
are represented the same way.



The second module is Uucd:

  Uucd is an OCaml module to decode the data of the Unicode Character
  Database from its XML representation. It provides high-level (but
  not necessarily efficient) access to the data so that efficient represent=
ations
  can be extracted.

  Uucd is made of a single module, depends on Xmlm and is
  distributed under the BSD3 license.



Project home page: http://erratique.ch/software/uucd
API doc: http://erratique.ch/software/uucd/doc/Uucd


If you want to install the modules via odb here are a few line
you can add to your odb package file:

http://erratique.ch/software/odb-packages.txt

(these things are still not in oasis-db because uploads of .tbz is
currently broken)

Best,

Daniel




