Return-Path: <bobzhang1988@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id A7BC67ED7A
	for <caml-list@sympa.inria.fr>; Thu, 20 Sep 2012 14:16:34 +0200 (CEST)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  bobzhang1988@gmail.com) identity=pra;
  client-ip=209.85.161.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="bobzhang1988@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  bobzhang1988@gmail.com designates 209.85.161.182 as permitted
  sender) identity=mailfrom; client-ip=209.85.161.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="bobzhang1988@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-gg0-f182.google.com) identity=helo;
  client-ip=209.85.161.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="postmaster@mail-gg0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ai4CACUIW1DRVaG2lGdsb2JhbABFi2mxIggjAQEBAQkLCQkUBCOCIAEBAQQSAgkjARscAQEDDAYFCw0JFg8JAwIBAgEREQEFARwTAQUCAQEeh04BAw8LmyAJA4wlgnSFAwoZJw1ZiHQBBQyRUQOVZIEUjS4/hCI
X-IronPort-AV: E=Sophos;i="4.80,453,1344204000"; 
   d="scan'208,217";a="156378280"
Received: from mail-gg0-f182.google.com ([209.85.161.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 20 Sep 2012 14:16:33 +0200
Received: by ggnk4 with SMTP id k4so581562ggn.27
        for <caml-list@inria.fr>; Thu, 20 Sep 2012 05:16:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:cc:subject
         :references:in-reply-to:content-type;
        bh=zA7AepHimgfcBi7yQIMf6DGpnn7iiJGU4o4wou8I2EM=;
        b=ZzyWPkU5REb+uy5U39Vmm2KfyC9abWDt7dJg0JMyYFhV3lkQLk+Edqxr5d62MMI4SI
         vr9uJOQaijG+ccrRHsI49I4fWLcp14CuKxpg1IfqUjeUXPyzA8h7oK9Twuy0vJuYkoe3
         /cOGukyqfS3jKohbjpWhzPchiJFYougdDu7olXrLdNohWI3DQ0aN4pTWfndxxEou8sAj
         pXt9o+feex52R0cMMqvAmEzb42zY67eIAhTnaGp2cMYBLUtz0ycIWOZRX6/ZTIY1LvvH
         Oa+8CMRYY7146i8JB0DmwzHczZWwQeRmu2BdQhE6EhhCidXq0tJRINXlLON2QsXypWdd
         Tf0Q==
Received: by 10.101.4.25 with SMTP id g25mr386948ani.44.1348143392027;
        Thu, 20 Sep 2012 05:16:32 -0700 (PDT)
Received: from Hongbos-MacBook-Air.local ([66.250.143.158])
        by mx.google.com with ESMTPS id y13sm5720925anj.5.2012.09.20.05.16.30
        (version=SSLv3 cipher=OTHER);
        Thu, 20 Sep 2012 05:16:31 -0700 (PDT)
Message-ID: <505B091A.7080806@gmail.com>
Date: Thu, 20 Sep 2012 08:16:26 -0400
From: Hongbo Zhang <bobzhang1988@gmail.com>
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:15.0) Gecko/20120907 Thunderbird/15.0.1
MIME-Version: 1.0
To: oleg@okmij.org
CC: caml-list@inria.fr
References: <20120920093643.26807.qmail@www1.g3.pair.com>
In-Reply-To: <20120920093643.26807.qmail@www1.g3.pair.com>
Content-Type: multipart/alternative;
 boundary="------------030406020809020704080609"
Subject: [Caml-list] Re: Call for collaboration on the future of camlp4

This is a multi-part message in MIME format.
--------------030406020809020704080609
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

On 9/20/12 5:36 AM, oleg@okmij.org wrote:
> Hongbo Zhang wrote:
>    > Meta-ocaml is orthogonal to camlp4 as well, but I did not see any hope
>    > that it will be pushed into ocaml compiler,
>    > since the main purpose of meta-ocaml is to do some run-time
>    > optimization, without a native jit compiler support, It does
>    > not make sense.
>
> I believe you might be short-changing MetaOCaml. First of all, why
> MetaOCaml needs JIT? It is already possible in MetaOCaml to generate
> code at run-time, to compile it and link-in. The new code is generated
> by the OCaml compiler itself, and works as if it were part of the
> original code. Such run-time optimization can indeed be useful (e.g.,
> profile-based optimization). I don't see why we need JIT if we already
> have the original compiler itself.
>
> However viewing MetaOCaml as a run-time optimizer misses a
> lot. MetaOCaml is a code generator with certain assurances of
> correctness -- it generates code that one would not write by hand. The
> recent example of generating code for stencil computations in
> high-performance computing
Yes, it's a run-time optimizer with type safe assurance. It can do
partial evaluation to generate some optimized code. With the help
of compiler-library, I can do byte-code eval(not native eval), I agree
it would be useful to have a native eval, but this requires non-trivial
changes to the compiler which I don't expect it will be realized in a
short term.
> 	http://okmij.org/ftp/meta-programming/HPC.html#stencil
>
> was quite illustrative: MetaOCaml has generated code for edge
> cases that human really did not want to write (and did not actually
> write). Edge cases are really tedious and really difficult to get
> right; automation is of great help. The generated code can be
> printed-out and used in a project as any other code. MetaOCaml can be
> used to generate libraries of specialized high-performance code.
>
>    > Personally, I prefer common lisp's macros to scheme. It's painful
>    > to play with racket's macros as well
>
> Well, it is painful for some people to use typed languages
> too. Untyped languages offer so much freedom, some think. What is
> often forgotten is that the benefit of the type system is not in what
> code you can write, but what code you cannot. Likewise, a syntax
> extension should be evaluated not only on what it allows but also on
> what it prevents.
Well, as I said, it's a personal taste. People are /*too cautiou*/s about
the safety the code generated, if you take a look at other languages,
like D, they *even use "string concatenation" to generate code*,*/we 
manipulate/**/
/**/the Ast instead of strings, and finally it's type checked, in 
practice, it works/**/
/**/pretty well/* and I wrote tens of thousands of code on top of 
camlp4, none of the bugs
can be detected by type checking. If you take a look at the
history of Template Haskell, they finally step back from type checking 
everything to
give up type checking some quasi-quotations. We don't want to sacrifice 
too much
experssivity for type safety, this is especially important in macros. In 
common lisp,
there is also a kind of macros called "Anaphoric macros" which you will 
find painful to
do in Scheme. To overcome the un-hygenic problem, if you have a look at 
the book "let over lambda",
there's best practice to avoid such problems. And you take a look at the 
compiler of opa,
  they override the module Stream to make use of the syntax extension 
what camlp4 can provide,
that's the beauty of syntax meta-programming, instead of a bug.

I really appreciate that ocaml's type checker can finally type check the 
generated code, but do
we really need to type check the macros? Would the cost be too high?
>
> As I general remark: it is not clear why so much fixation on
> camlp4. Other people have tried extensible syntaxes. For example:
>
> 	- Felix
Some ideas of Felix are neat that we should borrow from.
> 	- Notation of Coq
This is built on top of Camlp5

	- Stratego
	http://strategoxt.org/
In particular, see
	http://strategoxt.org/Sdf/SdfLanguage

Stratego could do program transformations in concrete syntax. Maybe
that would be a better approach? Maybe Stratego would satisfy all our
needs?

Well, this is definitely not true. The beauty of Camlp4 is that it is a 
growing macro system instead of
only a program transformation tool.

Thanks for your message.
>
>


--------------030406020809020704080609
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    <div class="moz-cite-prefix">On 9/20/12 5:36 AM, <a class="moz-txt-link-abbreviated" href="mailto:oleg@okmij.org">oleg@okmij.org</a>
      wrote:<br>
    </div>
    <blockquote cite="mid:20120920093643.26807.qmail@www1.g3.pair.com"
      type="cite">
      <pre wrap="">Hongbo Zhang wrote:
  &gt; Meta-ocaml is orthogonal to camlp4 as well, but I did not see any hope
  &gt; that it will be pushed into ocaml compiler,
  &gt; since the main purpose of meta-ocaml is to do some run-time
  &gt; optimization, without a native jit compiler support, It does
  &gt; not make sense.

I believe you might be short-changing MetaOCaml. First of all, why
MetaOCaml needs JIT? It is already possible in MetaOCaml to generate
code at run-time, to compile it and link-in. The new code is generated
by the OCaml compiler itself, and works as if it were part of the
original code. Such run-time optimization can indeed be useful (e.g.,
profile-based optimization). I don't see why we need JIT if we already
have the original compiler itself.

However viewing MetaOCaml as a run-time optimizer misses a
lot. MetaOCaml is a code generator with certain assurances of
correctness -- it generates code that one would not write by hand. The
recent example of generating code for stencil computations in
high-performance computing
</pre>
    </blockquote>
    Yes, it's a run-time optimizer with type safe assurance. It can do <br>
    partial evaluation to generate some optimized code. With the help<br>
    of compiler-library, I can do byte-code eval(not native eval), I
    agree<br>
    it would be useful to have a native eval, but this requires
    non-trivial<br>
    changes to the compiler which I don't expect it will be realized in
    a <br>
    short term.<br>
    <blockquote cite="mid:20120920093643.26807.qmail@www1.g3.pair.com"
      type="cite">
      <pre wrap="">
	<a class="moz-txt-link-freetext" href="http://okmij.org/ftp/meta-programming/HPC.html#stencil">http://okmij.org/ftp/meta-programming/HPC.html#stencil</a>

was quite illustrative: MetaOCaml has generated code for edge
cases that human really did not want to write (and did not actually
write). Edge cases are really tedious and really difficult to get
right; automation is of great help. The generated code can be
printed-out and used in a project as any other code. MetaOCaml can be
used to generate libraries of specialized high-performance code.

  &gt; Personally, I prefer common lisp's macros to scheme. It's painful
  &gt; to play with racket's macros as well

Well, it is painful for some people to use typed languages
too. Untyped languages offer so much freedom, some think. What is
often forgotten is that the benefit of the type system is not in what
code you can write, but what code you cannot. Likewise, a syntax
extension should be evaluated not only on what it allows but also on
what it prevents.
</pre>
    </blockquote>
    Well, as I said, it's a personal taste. People are <i><b>too
        cautiou</b></i>s about <br>
    the safety the code generated, if you take a look at other
    languages,<br>
    like D, they <b>even use "string concatenation" to generate code</b>,<b><i>
        we manipulate</i></b><b><i><br>
      </i></b><b><i>the Ast instead of strings, and finally it's type
        checked, in practice, it works</i></b><b><i><br>
      </i></b><b><i>pretty well</i></b> and I wrote tens of thousands of
    code on top of camlp4, none of the bugs<br>
    can be detected by type checking. If you take a look at the<br>
    history of Template Haskell, they finally step back from type
    checking everything to <br>
    give up type checking some quasi-quotations. We don't want to
    sacrifice too much <br>
    experssivity for type safety, this is especially important in
    macros. In common lisp,<br>
    there is also a kind of macros called "Anaphoric macros" which you
    will find painful to<br>
    do in Scheme. To overcome the un-hygenic problem, if you have a look
    at the book "let over lambda",<br>
    there's best practice to avoid such problems. And you take a look at
    the compiler of opa,<br>
    &nbsp;they override the module Stream to make use of the syntax extension
    what camlp4 can provide,<br>
    that's the beauty of syntax meta-programming, instead of a bug.<br>
    <br>
    I really appreciate that ocaml's type checker can finally type check
    the generated code, but do<br>
    we really need to type check the macros? Would the cost be too high?
    <br>
    <blockquote cite="mid:20120920093643.26807.qmail@www1.g3.pair.com"
      type="cite">
      <pre wrap="">

As I general remark: it is not clear why so much fixation on
camlp4. Other people have tried extensible syntaxes. For example:

	- Felix</pre>
    </blockquote>
    Some ideas of Felix are neat that we should borrow from.<br>
    <blockquote cite="mid:20120920093643.26807.qmail@www1.g3.pair.com"
      type="cite">
      <pre wrap="">
	- Notation of Coq</pre>
    </blockquote>
    This is built on top of Camlp5<br>
    <pre wrap="">	- Stratego
	<a class="moz-txt-link-freetext" href="http://strategoxt.org/">http://strategoxt.org/</a>
In particular, see
	<a class="moz-txt-link-freetext" href="http://strategoxt.org/Sdf/SdfLanguage">http://strategoxt.org/Sdf/SdfLanguage</a>

Stratego could do program transformations in concrete syntax. Maybe
that would be a better approach? Maybe Stratego would satisfy all our
needs?
</pre>
    Well, this is definitely not true. The beauty of Camlp4 is that it
    is a growing macro system instead of <br>
    only a program transformation tool. <br>
    <br>
    Thanks for your message.<br>
    <blockquote cite="mid:20120920093643.26807.qmail@www1.g3.pair.com"
      type="cite">
      <pre wrap="">


</pre>
    </blockquote>
    <br>
  </body>
</html>

--------------030406020809020704080609--
