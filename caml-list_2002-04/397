Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA24064; Sun, 28 Apr 2002 06:42:23 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA23613 for <caml-list@pauillac.inria.fr>; Sun, 28 Apr 2002 06:42:21 +0200 (MET DST)
Received: from sunny.pacific.net.au (sunny.pacific.net.au [203.25.148.40])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g3S4gJT28834
	for <caml-list@inria.fr>; Sun, 28 Apr 2002 06:42:20 +0200 (MET DST)
Received: from wisma.pacific.net.au (wisma.pacific.net.au [210.23.129.72])
          by sunny.pacific.net.au with ESMTP
          id g3S4g6Xt017828; Sun, 28 Apr 2002 14:42:06 +1000 (EST)
Received: from ozemail.com.au (ppp213.dyn20.pacific.net.au [61.8.20.213])
        by wisma.pacific.net.au with ESMTP
        id OAA09835; Sun, 28 Apr 2002 14:42:04 +1000 (EST)
Message-ID: <3CCB7D97.2040006@ozemail.com.au>
Date: Sun, 28 Apr 2002 14:41:59 +1000
From: John Max Skaller <skaller@ozemail.com.au>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.2.1) Gecko/20010901
X-Accept-Language: en-us
MIME-Version: 1.0
To: Brian Rogoff <bpr@bpr.best.vwh.net>
CC: Nadji.Gauthier@lip6.fr, caml-list@inria.fr
Subject: Re: [Caml-list] Polymorphic Variants and Number Parameterized Types
References: <Pine.BSF.4.40.0204272230580.78333-100000@bpr.best.vwh.net>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Brian Rogoff wrote:

>> Of course, C++ is ahead here, it already admits generics parameterised
>>by both types and integers ..  <Ducks for cover ... >
>>
>
>I don't think C++ or Ada generics (which also parameterize over values)
>help you much there. Besides, ML uses the module system to parameterize
>over values.
>
Yeah, you're right.  Although, there aren't many types that can use that 
information.
(No fixed lenth arrays for example).

Hmmm... beginnners question on module system .. can you recurse on it?
I'm guessing not, since there are neither specialisations nor overloading,
there's be no way to stop the recursion. ..??

[In C++, you can recurse on an integer parameter, using a 
specialisation/overload
to terminate the recursion... its a turing complete functional programming
language .. slightly messy though :]

-- 
John Max Skaller, mailto:skaller@ozemail.com.au
snail:10/1 Toxteth Rd, Glebe, NSW 2037, Australia.
voice:61-2-9660-0850




-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

