Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA20428; Thu, 18 Apr 2002 14:09:37 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA20424 for <caml-list@pauillac.inria.fr>; Thu, 18 Apr 2002 14:09:36 +0200 (MET DST)
Received: from leia.mandrakesoft.com (office.mandrakesoft.com [195.68.114.34])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g3IC9ZL03407
	for <caml-list@inria.fr>; Thu, 18 Apr 2002 14:09:35 +0200 (MET DST)
Received: by leia.mandrakesoft.com (Postfix, from userid 505)
	id 719545B15; Thu, 18 Apr 2002 14:09:29 +0200 (CEST)
To: John Max Skaller <skaller@ozemail.com.au>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Is a Cow an Animal?
References: <lyzo01q4gq.fsf@leia.mandrakesoft.com>
	<3CBE2CC8.1030407@ozemail.com.au>
	<lyelhdpavj.fsf@leia.mandrakesoft.com>
From: Pixel <pixel@mandrakesoft.com>
Date: 18 Apr 2002 14:09:29 +0200
In-Reply-To: <lyelhdpavj.fsf@leia.mandrakesoft.com>
Message-ID: <lyads1p5s6.fsf@leia.mandrakesoft.com>
Lines: 44
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.2
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Pixel <pixel@mandrakesoft.com> writes:

[...]

> http://merd.net/pixel/language-study/various/is-a-cow-an-animal/ocaml.listing
> uses a variant for the kind (I just changed it, it was a string)
> 
> I've still kept the class to allow sharing of fields.
> 
> BUT this solution doesn't allow a stricter checking alike ocaml2.listing or
> c++2.listing. The reason is that you can't parameter the class with values
> (like (Vegetable Carrot)) only types. 
> 
> Maybe this is possible with polymorphic variants (?), I'll try...

done: http://merd.net/pixel/language-study/various/is-a-cow-an-animal/ocaml3.listing

it's quite nice. The advantage over the all-in-class solution is that it's
easier to check the types:

* one pb was:

let is_meat_ = function
  | `Beef | `Dead_rabbit | `Dead_human -> true
  | _ -> false

which type "[> `Beef | `Dead_rabbit | `Dead_human] -> bool" doesn't allow 
  is_meat_ (food : [`Grass])

whereas
  let is_meat e = is_meat_ (e :> food_kind)
  is_meat (food : [`Grass])
is allowed (since is_meat : [< food_kind] -> bool)



* I still can't manage to have:

 new_human : int -> ([ `Dead_human], [< food_kind]) animal
all i got is
 new_human : int -> ([ `Dead_human], _[< food_kind]) animal


Please help!
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

