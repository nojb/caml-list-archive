Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA28413 for caml-redistribution; Tue, 1 Sep 1998 19:09:29 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA24618 for <caml-list@pauillac.inria.fr>; Tue, 1 Sep 1998 13:33:13 +0200 (MET DST)
Received: from phedre.inria.fr (phedre.inria.fr [128.93.39.3])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id NAA02289;
	Tue, 1 Sep 1998 13:33:09 +0200 (MET DST)
Received: from phedre (localhost [127.0.0.1])
	by phedre.inria.fr (8.8.5/8.8.7) with SMTP id NAA13521;
	Tue, 1 Sep 1998 13:33:09 +0200 (MET DST)
Sender: weis
Message-ID: <35EBDB72.2781E494@inria.fr>
Date: Tue, 01 Sep 1998 13:33:06 +0200
From: Ping Hu <Ping.Hu@inria.fr>
X-Mailer: Mozilla 3.0Gold (X11; I; SunOS 4.1.4 sun4m)
MIME-Version: 1.0
To: Todd Graham Lewis <tlewis@mindspring.net>, caml-list@inria.fr
Subject: Re: VLIW & caml: how?
References: <Pine.LNX.3.96.980828011145.1695L-100000@reflections.eng.mindspring.net>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Todd Graham Lewis wrote:
> 
> I've been reading that VLIW as implemented on the IA-64/Merced will post
> problems for conventional compilers such as gcc which don't have a very
> expansive view of the code they're compiling.  How well will o'caml deal
> with optimizing for this sort of architecture?  Any thoughts?
> 


If you can describe the IA-64/Merced at assembly language and hardware
level, 
such as

-- the lexical and syntactical structure of the assembly language used,
-- the hardware resources(say register, memories, functional units etc),
...

in the environment SALTO(a retargetable System for Assembly Language
Transformation and Optimization,
http://www.irisa.fr/caps/PROJECTS/Salto/),
which has already offered several desciption examples for realistic
architectures(Sparc, TM1000(VLIW), etc),

then the compiler back-ends can handle the local and global optimization
(even Software pipelining) provided in SALTO. Ofcource,
the compilers can also implement  theirs own optimizing algorithms with
the support of SALTO.   

--
Ping Hu




