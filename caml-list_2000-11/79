Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA10210 for caml-red; Wed, 8 Nov 2000 18:35:10 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA27939 for <caml-list@pauillac.inria.fr>; Wed, 8 Nov 2000 02:02:48 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eA812kv25359
	for <caml-list@inria.fr>; Wed, 8 Nov 2000 02:02:47 +0100 (MET)
Received: from localhost (sansho.kurims.kyoto-u.ac.jp [130.54.16.90])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id KAA17468;
	Wed, 8 Nov 2000 10:02:38 +0900 (JST)
To: checker@d6.com
Cc: caml-list@inria.fr
Subject: Re: anonymous function + lable bug?
In-Reply-To: Your message of "Tue, 07 Nov 2000 11:03:16 -0800"
	<4.3.2.7.2.20001107105936.00ac6710@shell16.ba.best.com>
References: <4.3.2.7.2.20001107105936.00ac6710@shell16.ba.best.com>
X-Mailer: Mew version 1.93 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20001108100129X.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 08 Nov 2000 10:01:29 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 33
Sender: weis@pauillac.inria.fr

From: Chris Hecker <checker@d6.com>

> >> I thought these two were equivalent?
> >They are not:
> 
> Right, I didn't mean to say they're completely equivalent (I've read
> the FAQ), just that I expected equivalence in that case.
> 
> >It would be possible to add special rules to allow
> >        function ~l:p1 -> e1 | ... | ~l:pn -> en
> 
> Ah, now I see, it's because the parameter in function is actually
> the pattern in an implicit match?

Exactly.

> Is there ever a reason to use function (assuming you don't mind
> parenthesizing constructors and whatnot in fun arguments)?  Does the
> implied match allow some simplification or optimization or
> something?  Why do they both exist?

function is not necessary: you can replace it everywhere with fun and
match, and the code is exactly optimized the same way. Actually some
pass of the compiler expands function in fun+match.

However, in many cases function is a nice and intuitive short-hand for
directly matching on an argument. The reason for it to be here seems
mostly historical: one can define let in terms of fun (+ special
typing), and match in terms of function (no special typing
required). As I remember it, SML (/NJ?) was actually seeing case
(=match) as syntactic sugar for fn(=function).

Jacques Garrigue


