Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA26043 for caml-red; Wed, 8 Nov 2000 18:15:48 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA27428 for <caml-list@pauillac.inria.fr>; Tue, 7 Nov 2000 14:20:34 +0100 (MET)
Received: from dpt-info.u-strasbg.fr (dpt-info.u-strasbg.fr [130.79.6.1])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eA7DKXv17113
	for <caml-list@inria.fr>; Tue, 7 Nov 2000 14:20:33 +0100 (MET)
Received: from lambda.u-strasbg.fr (lambda.u-strasbg.fr [130.79.90.63])
	by dpt-info.u-strasbg.fr (8.9.3/8.9.3) with ESMTP id PAA22172;
	Tue, 7 Nov 2000 15:19:33 +0100
Received: from luther by lambda.u-strasbg.fr with local (Exim 3.16 #1 (Debian))
	id 13t8mm-0008PV-00; Tue, 07 Nov 2000 14:27:36 +0100
Date: Tue, 7 Nov 2000 14:27:36 +0100
To: Julian Assange <proff@iq.org>
Cc: caml-list@inria.fr
Subject: Re: modules and recursive types
Message-ID: <20001107142736.A30034@lambda.u-strasbg.fr>
References: <wxu29o2tky.fsf@foo.iq.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <wxu29o2tky.fsf@foo.iq.org>; from proff@iq.org on Sat, Nov 04, 2000 at 04:29:33PM +1100
From: Sven LUTHER <luther@dpt-info.u-strasbg.fr>
Sender: weis@pauillac.inria.fr

On Sat, Nov 04, 2000 at 04:29:33PM +1100, Julian Assange wrote:
> 
> I'd like to do something like the following:
> 
> type snode = Empty | Snode of CharSet.t
> and
> module CharSet = Set.Make(struct type t = char * snode
> 		            let compare (x,_) (y,_) = Pervasives.compare x y
> 			  end)
> 
> That is define an inter-dependent typing relationship between two
> modules (although there is only one module here, the other can be
> viewed as the `null' module). Is this possible?  If not is there
> another way to achieve the effect?

Try using functors for that.

That said, i don't think it is possible to have mutually dependant
modules/functors/whatever. At leats i didn't manage to get some, but then
maybe it is possible, and i don't know how.

A workaround would be to do as follows :


type 'a snode = Empty | Snode of 'a 

module Charset = Set.Make (struct
  type t = One of char * t snode
  let compare ...
end

Notice the type t = One ...

You cannot have a recursive type without a variant constructor in it.

Hope this help, 

Friendly,

Sven Luther


