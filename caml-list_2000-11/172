Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA04375 for caml-red; Mon, 27 Nov 2000 12:17:50 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA09664 for <caml-list@pauillac.inria.fr>; Sun, 26 Nov 2000 01:10:12 +0100 (MET)
Received: from sirius-b.ihep.su (sirius-b.ihep.su [194.190.161.4])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eAQ0A5j16651
	for <caml-list@inria.fr>; Sun, 26 Nov 2000 01:10:05 +0100 (MET)
Received: from ihep.su (ihep.ihep.su [194.190.161.127])
	by sirius-b.ihep.su (8.10.0/8.10.0) with SMTP id eAQ09uc21043
	for <caml-list@inria.fr>; Sun, 26 Nov 2000 03:09:56 +0300 (MSK)
X-Sender: vsl@ontil.ihep.su
Received: from ontil.ihep.su by ihep.su (5.65v4.0/RELCOM-IHEPv4.7)
	id AA16021; Sun, 26 Nov 2000 03:09:55 +0300
Date: Sun, 26 Nov 2000 03:09:26 +0300 (MSK)
From: Vitaly Lugovsky <vsl@ontil.ihep.su>
To: caml-list@inria.fr
Subject: Dynamic loading. Again.
Message-Id: <Pine.LNX.4.10.10011260300170.18840-100000@ontil.ihep.su>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis@pauillac.inria.fr


 I think there is a reason to implement dynamic loading of native compiled
code for Ocaml (e.g. PIC code generation for some platforms),
as well as dynamycally linked runtime code (I just managed to link
bytecode runtime dynamically, so, it's not so impossible). It's just a
way to kill Java. I'm using JSP->Oracle BC4J->Oracle for now, and I hate
it. Ocaml in this kind of tasks will be much better, but to implement 
JSP-like engine we need dynamic loading. Ocaml is pretty fast in native
code, so it will be a greate argument against Java for application
servers. And, sure, it's a way for ocaml to Enterprise. Let's beat'em all.
"Real world" must be turned to use real technologies.

 For now, I'm trying to implement engine using bytecode only, just to
proove a concept.

--

   V.S.Lugovsky aka Mauhuur (http://ontil.ihep.su/~vsl) (UIN=45482254)



