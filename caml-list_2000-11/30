Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA31685 for caml-red; Fri, 3 Nov 2000 16:37:31 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA19014 for <caml-list@pauillac.inria.fr>; Fri, 3 Nov 2000 11:09:10 +0100 (MET)
Received: from mx1.informatik.uni-tuebingen.de (mx1.Informatik.Uni-Tuebingen.De [134.2.12.5])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eA3A99j03284;
	Fri, 3 Nov 2000 11:09:09 +0100 (MET)
Received: from informatik.uni-tuebingen.de (sams [134.2.12.50])
	by mx1.informatik.uni-tuebingen.de (Postfix) with ESMTP
	id 3B3D84A7; Fri,  3 Nov 2000 11:09:05 +0100 (MET)
Received: (from sperber@localhost)
	by informatik.uni-tuebingen.de (8.9.3/8.9.3) id LAA03881;
	Fri, 3 Nov 2000 11:09:04 +0100 (CET)
	(envelope-from sperber)
To: caml-list@inria.fr
Cc: Pierre Weis <Pierre.Weis@inria.fr>, datta@math.berkeley.edu
Subject: Re: Redefinition doesn't work
References: <200011030921.KAA21301@pauillac.inria.fr>
From: sperber@informatik.uni-tuebingen.de (Michael Sperber [Mr. Preprocessor])
Date: 03 Nov 2000 11:09:03 +0100
In-Reply-To: Pierre Weis's message of "Fri, 3 Nov 2000 10:13:13 +0100 (MET)"
Message-ID: <y9l4s1pxt8g.fsf@sams.informatik.uni-tuebingen.de>
Lines: 53
User-Agent: Gnus/5.0807 (Gnus v5.8.7) XEmacs/21.2 (Notus)
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Sender: weis@pauillac.inria.fr

>>>>> "Pierre" == Pierre Weis <Pierre.Weis@inria.fr> writes:

>> Stefan Monnier wrote:
>> >>>>>> "Pierre" == Pierre Weis <Pierre.Weis@inria.fr> writes:
>> >> It is not only a question of type. As I mentioned in my previous
>> >> message, if you allow the user to ``rebind'' some basic functions,
>> >> such as map or iter, the behaviour of the compiler can be
>> >> unpredictable.
>> >
>> >It never seems to bother Lisp users.
>> 
>> It must have bothered some Lisp users, otherwise why does Scheme have
>> lexical scoping?
>> 
>> Ruchira Datta
>> datta@math.berkeley.edu

Pierre> Scheme has lexical scoping <EM>locally</EM>. It has dynamic binding
Pierre> globally,

No.

Pierre> just to address this redefinition problem (as far as I can
Pierre> imagine a clever justification to this extremely strange behaviour). I
Pierre> remember my surprise when I was porting to Scheme some fancy
Pierre> metacompilation stuff written in Caml: unfortunately the Caml code
Pierre> ended by redefining (globally) the functions load and compile; how
Pierre> strange errors messages when the internals of the Scheme compiler
Pierre> tried to use those functions in place of its original versions! I
Pierre> needed a long time to figure out what was happening, since I did not
Pierre> use directly any Scheme function named compile: I just tried to
Pierre> compile my Scheme files as usual, calling some primitive function
Pierre> named compile-file (or so), that unfortunately happened to use a
Pierre> global function also named compile.

What you're describing is not a binding issue, but an assignment
issue.  (Look in R5RS, 5.2.1 for an explanation.)  Moreover, what
you're describing is (at least not in spirit) not conformant with
R5RS.  Section 6 has this:

  [Global binding alterations] do not modify the behavior of Scheme's
  built-in procedures.

Pierre> That's an example of a user that does not want the functions to be
Pierre> redefined everywhere, since he cannot understand the consequences of
Pierre> the redefinition since he does not even know where the rebound
Pierre> function was used!

Sounds like an implementation bug to me.

-- 
Cheers =8-} Mike
Friede, Völkerverständigung und überhaupt blabla


