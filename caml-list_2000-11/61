Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA10149 for caml-red; Wed, 8 Nov 2000 17:22:32 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA10541 for <caml-list@pauillac.inria.fr>; Tue, 7 Nov 2000 01:15:58 +0100 (MET)
Received: from ftp.filemaker.com (ftp.filemaker.com [192.35.50.27])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eA70Fu120598
	for <caml-list@inria.fr>; Tue, 7 Nov 2000 01:15:57 +0100 (MET)
Received: from imap.filemaker.com (imap.filemaker.com [17.184.4.101])
	by ftp.filemaker.com (8.9.0/8.9.0) with ESMTP id QAA28751
	for <caml-list@inria.fr>; Mon, 6 Nov 2000 16:15:53 -0800 (PST)
Received: from [17.184.5.111] ([17.184.5.111])
	by imap.filemaker.com (8.9.3/8.9.0) with SMTP id QAA16361
	for <caml-list@inria.fr>; Mon, 6 Nov 2000 16:15:55 -0800 (PST)
Message-Id: <200011070015.QAA16361@imap.filemaker.com>
Subject: Re: practical functional programming books
Date: Mon, 6 Nov 2000 16:21:19 -0800
x-sender: hao-yang_wang@mail.filemaker.com
x-mailer: Claris Emailer 2.0v3, January 22, 1998
From: Hao-yang Wang <hao-yang_wang@filemaker.com>
To: "caml-list@inria.fr" <caml-list@inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Sender: weis@pauillac.inria.fr

>I ordered a book, The Functional Approach to Programming, and
>although it does help somewhat it is too theoretical/math
>oriented. So are most of the docs and examples I have seen. 

Did you imply that math is not practical? :-)

The Functional Approach to Programming is my favorite book on ML! And 
Chapter 8 Syntactic Analysis is my favorite chapter. However, as its 
title says, this is a book about programming, and it is not a language 
book.

(Structures and Interpretation of Computer Programs is my favorite book 
on Lisp. However, if somebody is reading SICP in order to quickly become 
productive with Scheme, s/he will be disappointed, too.)

Maybe we need a introductory book that (1) starts with examples in text 
processing and other "symbolic" stuffs, which nicely shows off caml's 
strong points in practical applications; (2) emphasize on how to solve 
problems using existing tools (i.e., using the algorithms and data 
structures from the standard library instead of writing our own versions, 
using camllex/camlyacc instead of writing our own parsers, etc.). The 
result will be a practical book that sells lots of copies and promotes 
o'caml to lots of new fans, although it might not be as "interesting" as 
the two books mentioned above.

Cheers,
Hao-yang Wang


