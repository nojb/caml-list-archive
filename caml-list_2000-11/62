Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA24486 for caml-red; Wed, 8 Nov 2000 17:24:44 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA19545 for <caml-list@pauillac.inria.fr>; Tue, 7 Nov 2000 03:54:04 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id eA72rtP06692
	for <caml-list@inria.fr>; Tue, 7 Nov 2000 03:53:59 +0100 (MET)
Received: from localhost (sansho.kurims.kyoto-u.ac.jp [130.54.16.90])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id LAA09987;
	Tue, 7 Nov 2000 11:53:44 +0900 (JST)
To: checker@d6.com
Cc: caml-list@inria.fr
Subject: Re: anonymous function + lable bug?
In-Reply-To: Your message of "Sun, 05 Nov 2000 05:11:11 -0800"
	<4.3.2.7.2.20001105044616.00ababc0@shell16.ba.best.com>
References: <4.3.2.7.2.20001105044616.00ababc0@shell16.ba.best.com>
X-Mailer: Mew version 1.93 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20001107115235U.garrigue@kurims.kyoto-u.ac.jp>
Date: Tue, 07 Nov 2000 11:52:35 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 51
Sender: weis@pauillac.inria.fr

From: Chris Hecker <checker@d6.com>

> Is this a bug?
> 
> # let f = fun ~x -> x;;
> val f : x:'a -> 'a = <fun>
> 
> # let g = function ~x -> x;;
> Characters 17-18:
> Syntax error
> 
> I thought these two were equivalent?

They are not:

Similar to the above example,
# let f = fun x y -> x;;
val f : 'a -> 'b -> 'a = <fun>
# let f = function x y -> x;;
Syntax error       ^

and the other way round,
# let f = fun Some x -> x;;
              ^^^^
The constructor Some expects 1 argument(s),
but is here applied to 0 argument(s)
# let f = function Some x -> x;;
val f : 'a option -> 'a = <fun>


The equivalence (in the no-label case) is between
        function p1 -> e1 | ... | pn -> en
and
        fun x -> match x with p1 -> e1 | ... | pn -> en

fun and function only become equivalent when the matching is trivial,
and there is no need to use an explicit match ... with
This is a true equivalence: the compiled code is identical, so you can
really think of function as a shorthand for the explicit form with
match, when you take only a single non-labelled argument.

It would be possible to add special rules to allow
        function ~l:p1 -> e1 | ... | ~l:pn -> en
This was actually the case in olabl, but it was very rarely used, and
complicates the parser and type checker.

Jacques
---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>


