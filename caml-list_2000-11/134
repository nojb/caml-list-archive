Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA00364 for caml-red; Mon, 20 Nov 2000 20:18:34 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA01101 for <caml-list@pauillac.inria.fr>; Sun, 19 Nov 2000 16:49:25 +0100 (MET)
Received: from tor.abc.se (ns.abc.se [195.17.72.11])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id eAJFnO500561
	for <caml-list@inria.fr>; Sun, 19 Nov 2000 16:49:25 +0100 (MET)
Received: from gateway (dialup-43 [195.17.73.43])
	by tor.abc.se (8.9.3+Sun/8.9.3) with SMTP id QAA11158
	for <caml-list@inria.fr>; Sun, 19 Nov 2000 16:49:23 +0100 (MET)
From: "Mattias Waldau" <mattias.waldau@abc.se>
To: <caml-list@inria.fr>
Subject: RE: Real excellent object oriented source code examples of Ocaml
Date: Sun, 19 Nov 2000 16:48:52 +0100
Message-ID: <HDEEKOMJILGEIHIMAPCDAEHIDKAA.mattias.waldau@abc.se>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
In-Reply-To: <0C682B70CE37BC4EADED9D375809768A48FC72@red-msg-04.redmond.corp.microsoft.com>
Sender: weis@pauillac.inria.fr

The reason I don't use the OO-features is not because I don't like OO, but
since Ocaml support for OO isn't as good as it could be.

The OO-features are just built on top of the normal environment. For
example, the toplevel don't understand objects, you just get the message "-
: with_oo = <obj>". The support for terms is much better. Thus, my
Caml-programs have the structure of OO, but I code them without the
OO-features of Ocaml. For example, I wouldn't normally write the
'with_oo'-class below, instead I code it as 'nooo' below.

However, if the support for showing/browsing objects on the toplevel would
be better (or maybe it is already there and I should just read the manual
better), I will start using OO in Ocaml.

The only problem with OO is that OO and functional programs don't mix well,
since OO is built on state-change. My background is from functionalal and
logic programming.

/mattias

P.s. How is the speed of methods calls, object creation compare to standard
calls and creating terms?

WITH OO:
========

class with_oo =
object
  val mutable x = 0
  val mutable y = 0
  method get_x = x
  method move d = x <- x + d; y <- y + d
end

(*

# let t = new with_oo;;
val t : with_oo = <obj>
# t;;
- : with_oo = <obj>
# t#get_x;;
- : int = 0
# t#move 10;;
- : unit = ()
# t#get_x;;
- : int = 10
#

*)

SAME CODE WITHOUT OO:
=====================

type nooo = {
  mutable x:int;
  mutable y:int;
  }

let nooo_init =
  { x=0; y=0 }

let nooo_get_x this = this.x

let nooo_move this d =
  this.x <- this.x + d;
  this.y <- this.y + d


(*

# let t = nooo_init;;
val t : nooo = {x=0; y=0}
# nooo_get_x t;;
- : int = 0
# nooo_move t 10;;
- : unit = ()
# t;;
- : nooo = {x=10; y=10}

*)


