Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA00226; Tue, 1 Jul 2003 09:43:30 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA00228 for <caml-list@pauillac.inria.fr>; Tue, 1 Jul 2003 09:43:29 +0200 (MET DST)
Received: from tcs.inf.tu-dresden.de (tcs.inf.tu-dresden.de [141.76.75.101])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h617hSf17811
	for <caml-list@inria.fr>; Tue, 1 Jul 2003 09:43:29 +0200 (MET DST)
Received: from ithif51 (ithif51 [141.76.75.51])
	by tcs.inf.tu-dresden.de (8.12.9/8.12.9) with ESMTP id h617hOg9006783
	for <caml-list@inria.fr>; Tue, 1 Jul 2003 09:43:24 +0200 (MET DST)
Received: from tews by ithif51 with local (Exim 3.36 #1 (Debian))
	id 19XFnQ-00080y-00
	for <caml-list@inria.fr>; Tue, 01 Jul 2003 09:43:24 +0200
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <16129.15260.246738.767412@ithif51.inf.tu-dresden.de>
Date: Tue, 1 Jul 2003 09:43:24 +0200
To: caml-list@inria.fr
Subject: Re: [Caml-list] syntax of private constructors in CVS version
In-Reply-To: <200306301839.UAA20778@pauillac.inria.fr>
References: <Pine.LNX.4.44.0306271917250.19568-100000@grace.speakeasy.net>
	<200306301839.UAA20778@pauillac.inria.fr>
X-Mailer: VM 7.14 under Emacs 21.2.1
From: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
X-Scanned-By: MIMEDefang 2.33 (www . roaringpenguin . com / mimedefang) at tcs.inf.tu-dresden.de
X-Spam: no; 0.00; hendrik:01 tews:01 caml-list:01 pierre:01 weis:01 fragment:01 nat:01 tu-dresden:01 ocaml:01 caml:01 rec:01 writes:01 constructors:01 syntax:02 recursive:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Pierre Weis writes:
   
   As you should already know, usual sum and product types in Caml
   correspond to the mathematical notion of free algebraic data
   structures. 

If you consider the ocaml fragment without recursive values.
For instance:

   type nat =
      | Zero
      | Succ of nat;;
   
   let rec x = Succ x;;

This x does not belong to the free algebra. 


(And BTW, the product types are not free, they are cofree or
terminal or final, whatever terminology you prefer.)


Sorry for nitpicking,

Hendrik Tews

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

