Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA11242; Fri, 25 Jul 2003 03:26:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA28137 for <caml-list@pauillac.inria.fr>; Fri, 25 Jul 2003 03:26:52 +0200 (MET DST)
Received: from woodstock.1969.ws (64-215-156-42.eosinc.net [64.215.156.42])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h6P1QmT08179
	for <caml-list@inria.fr>; Fri, 25 Jul 2003 03:26:51 +0200 (MET DST)
Received: (qmail 6550 invoked from network); 25 Jul 2003 01:01:54 -0000
Received: from karl.1969.ws (HELO 1969.ws) (10.3.2.15)
  by woodstock.1969.ws with SMTP; 25 Jul 2003 01:01:54 -0000
Message-ID: <3F2087BF.5080903@1969.ws>
Date: Thu, 24 Jul 2003 18:28:31 -0700
From: Karl Zilles <zilles@1969.ws>
Organization: 1969 Communications,  Inc.
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.4) Gecko/20030529
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: james woodyatt <jhw@wetware.com>
CC: Gerd Stolpmann <info@gerd-stolpmann.de>, The Trade <caml-list@inria.fr>
Subject: Re: [Caml-list] Re: findlib-0.8.1 and ocaml-3.07+beta1
References: <CBE74969-BE36-11D7-B682-000393BA7EBA@wetware.com>
In-Reply-To: <CBE74969-BE36-11D7-B682-000393BA7EBA@wetware.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 findlib-:01 3.07:01 woodyatt:01 covariant:01 expansive:01 forall:01 ocaml-:01 polymorphic:01 unit:03 wrote:03 let:04 simplify:06 wrap:06 generalized:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

james woodyatt wrote:
> I'm specifically excited about the polymorphic 
> generalization of covariant parts of expansive expressions.  

I read about this in the changes document, but I'm unable to wrap my 
head around it.

 > For instance, if f: unit -> 'a list, "let x = f ()"
 > gives "x" the generalized type forall 'a. 'a list, instead of '_a list
 > as before.

Can someone simplify this for me?  Under what circumstances would this 
be useful?

Karl

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

