Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA25541; Thu, 24 Jul 2003 12:18:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA03219 for <caml-list@pauillac.inria.fr>; Thu, 24 Jul 2003 12:18:19 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h6OAIHf23163
	for <caml-list@pauillac.inria.fr>; Thu, 24 Jul 2003 12:18:17 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2/3.7W) with ESMTP id TAA27767;
	Thu, 24 Jul 2003 19:18:11 +0900 (JST)
To: emmanuelfiliot@wanadoo.fr
Cc: caml-list@pauillac.inria.fr
Subject: Re: [Caml-list] .ml and .mli
In-Reply-To: <1059040469.26226.67.camel@sarcelle.grappa.fr>
References: <1059040469.26226.67.camel@sarcelle.grappa.fr>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20030724191811H.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 24 Jul 2003 19:18:11 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 52
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; jacques:01 caml-list:01 mli:01 toto:01 struct:01 sig:01 int:01 garrigue:01 exists:01 module:03 types:03 trick:03 let:04 reasonably:04 equivalent:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Emmanuel Filiot <emmanuelfiliot@wanadoo.fr>

> I have noticed that we must copy code between .ml and .mli, and I wonder
> if there exists a solution for this problem.

There is no 100% equivalent solution.

> toto.mli
> 
> 	module type S = sig type t end	
> 
> 	module A : S with type t = int
> 
> toto.ml
> 
> 	module type S = sig type t end
> 
> 	module A = struct type t = int let id x = x end	
> 
> tutu.ml
> 
>         open Toto
> 
> 	module B : S = struct .... end

A reasonably clean way to do that would be:

toto_s.mli
        module type S = sig type t end

toto.mli
        open Toto_s
        module A : S with type t = int

toto.ml
        open Toto_s
        module A = struct type t = int let id x = x end

tutu.ml
        open Toto_s
        module B : S = struct .... end

Note that you don't need a toto_s.ml, as it contains only types.
This is a nice trick when you have lots of type definitions.

By the way, one could do a bit closer to the original if
[include Toto_s] was allowed in toto.mli. Then, we could keep
[open Toto] in tutu.ml.
Unfortunately, a .mli does not define a signature, so this is not
allowed :-(

        Jacques

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

