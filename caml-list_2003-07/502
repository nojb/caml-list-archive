Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA29826; Fri, 18 Jul 2003 22:50:05 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA25241 for <caml-list@pauillac.inria.fr>; Fri, 18 Jul 2003 22:50:04 +0200 (MET DST)
Received: from smtp.mbg.ocn.ne.jp (mbg.ocn.ne.jp [210.190.142.181])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h6IKo2T17759
	for <caml-list@inria.fr>; Fri, 18 Jul 2003 22:50:03 +0200 (MET DST)
Received: from localhost (p25114-adsau12honb7-acca.tokyo.ocn.ne.jp [220.99.29.114])
	by smtp.mbg.ocn.ne.jp (Postfix) with ESMTP id BD3B91CE4
	for <caml-list@inria.fr>; Sat, 19 Jul 2003 05:50:00 +0900 (JST)
Date: Sat, 19 Jul 2003 05:49:51 +0900 (JST)
Message-Id: <20030719.054951.95890091.yoriyuki@mbg.ocn.ne.jp>
To: caml-list@inria.fr
Subject: Re: [Caml-list] CTAN/CPAN for Caml (COCAN ...?)
From: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <20030718154638.GH9003@fistandantilus.takhisis.org>
References: <3F17AC55.7050908@ozemail.com.au>
	<20030718084252.GA1284@redhat.com>
	<20030718154638.GH9003@fistandantilus.takhisis.org>
X-Mailer: Mew version 2.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; yamagata:01 yoriyuki:01 caml-list:01 cpan:01 bononia:01 camlimages:01 enforced:01 -pack:01 cmo:01 caml:01 modules:02 module:03 cma:03 zacchiroli:03 zack:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Stefano Zacchiroli <zack@bononia.it>
Subject: Re: [Caml-list] CTAN/CPAN for Caml (COCAN ...?)
Date: Fri, 18 Jul 2003 17:46:38 +0200

> Camlimages itself is a good example of this property _not_ enforced
> because it is named "camlimages", exports a lot of modules prefixed by
> "ci_" but internally uses an "Image" module which MD5 sum is present in
> all "ci_" modules.

What is the best practice to avoid such situation?  I can think of two
ways, but both are not satisfactory.

1) Obfuscate names of internal modules by hand.  I certainly do not
   want to do this.

2) Use pack option.  Until -pack generates cma files (not cmo), I am
   reluctant to employ this option.

Any other ways?

--
Yamagata Yoriyuki

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

