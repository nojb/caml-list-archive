Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA07703; Thu, 10 Jul 2003 13:33:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA07220 for <caml-list@pauillac.inria.fr>; Thu, 10 Jul 2003 13:33:05 +0200 (MET DST)
Received: from mallaury.noc.nerim.net (smtp-104-thursday.noc.nerim.net [62.4.17.104])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h6ABX4f03853
	for <caml-list@inria.fr>; Thu, 10 Jul 2003 13:33:04 +0200 (MET DST)
Received: from hector.lesours (lesours.starynkevitch.net [80.65.224.217])
	by mallaury.noc.nerim.net (Postfix) with ESMTP id 3190D62D2E
	for <caml-list@inria.fr>; Thu, 10 Jul 2003 13:33:03 +0200 (CEST)
Received: from basile by hector.lesours with local (Exim 3.36 #1 (Debian))
	id 19aZfb-0000Wi-00
	for <caml-list@inria.fr>; Thu, 10 Jul 2003 13:33:03 +0200
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Message-ID: <16141.20207.531689.793421@hector.lesours>
Date: Thu, 10 Jul 2003 13:33:03 +0200
To: <caml-list@inria.fr>
Subject: [Caml-list] adding data persistency in Ocaml...
X-Mailer: VM 7.16 under Emacs 21.3.2
From: Basile STARYNKEVITCH <basile@starynkevitch.net>
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; basile:01 persistency:01 orthogonal:01 filesystems:01 persist:01 marshalling:01 bug:01 internals:01 coder:01 theorist:01 faiencerie:01 92340:01 reine:01 nerim:01 tunes:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Dear All,

I should work (from mid-september 2003) one year at INRIA on adding
data persistency (as much as orthogonal as possible) to
Ocaml. Persistency would use existing support like filesystems or
RDBMS (like MySQL or PostgreSQL etc) or others.

If you have wishes or ideas on how to do it, potential applications in
need of it (CGIs are obvious candidates, but there are other
interested applications) or pitfalls to avoid, or relevant literature,
please feel free to discuss them on the list (or to send it to me if
you feel it is not of general interest).

Obviously the main problem I identified today is to be able to persist
(and share) data with a slight change in the program using it -
persistency for exactly the same program is partly achievable thru the
existing marshalling machinery. I mean that a program persist its
data, then the developer fix a bug and want the modified program to be
able to use the previously persisted data. Perhaps it might require
adding some reflective abilities inside the language, because the
persistence mechanism need to know about the types.

Note that I am not (yet) a persistency or Ocaml internals expert, and
that I am more a coder than a language theorist.

So comments & suggestions are welcome.

Regards.

NB: opinions here are mine only 

-- 

Basile STARYNKEVITCH         http://starynkevitch.net/Basile/ 
email: basile<at>starynkevitch<dot>net 
aliases: basile<at>tunes<dot>org = bstarynk<at>nerim<dot>net
8, rue de la Faïencerie, 92340 Bourg La Reine, France

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

