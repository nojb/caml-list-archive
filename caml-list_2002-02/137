Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA17102; Wed, 6 Feb 2002 21:41:45 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA16839 for <caml-list@pauillac.inria.fr>; Wed, 6 Feb 2002 21:41:44 +0100 (MET)
Received: from fichte.ai.univie.ac.at (fichte.ai.univie.ac.at [131.130.174.156])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g16Kfhn19898
	for <caml-list@inria.fr>; Wed, 6 Feb 2002 21:41:43 +0100 (MET)
Received: (from markus@localhost)
	by fichte.ai.univie.ac.at (8.9.3/8.9.3/Debian 8.9.3-21) id VAA01266
	for caml-list@inria.fr; Wed, 6 Feb 2002 21:41:42 +0100
Date: Wed, 6 Feb 2002 21:41:42 +0100
From: Markus Mottl <markus@oefai.at>
To: caml-list@inria.fr
Subject: Re: [Caml-list] syntax foo
Message-ID: <20020206204142.GB32204@fichte.ai.univie.ac.at>
Mail-Followup-To: caml-list@inria.fr
References: <20020205212131.GA1707@marant.org> <Pine.BSF.4.40.0202061519570.22416-100000@bpr.best.vwh.net> <20020206182555.GA32204@fichte.ai.univie.ac.at> <20020206215807.A18430@kruuna.Helsinki.FI>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20020206215807.A18430@kruuna.Helsinki.FI>
User-Agent: Mutt/1.3.26i
Organization: Austrian Research Institute for Artificial Intelligence
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 06 Feb 2002, Lauri Alanko wrote:
> Note that the layout rule in Haskell is _optional_. You can always use
> explicit braces and semicolons and forget about indentation. So at least
> your point on code generation doesn't hold.

Ok.

> Personally, I find Haskell's syntax (with or without the layout rule)
> infinitely more convenient than OCaml's. Anything that uses "end" to mark
> the end of a block is hopelessly clumsy and old-fashioned. :)

I agree that Haskell-code looks much nicer than OCaml-code. The question
is whether anybody would want to write an advanced parser for OCaml...

> The sorest lack in both the old and the revised syntax is the need for a
> let*-form, ie. a sequence of bindings, each of which is in the scope of the
> previous ones. I _so_ hate doing this:
> 
> let foo = bar in
>   let baz = quux in
>     let fnord = fnarp in
>       ...

Well, one doesn't have to indent each line, of course. It's still a bit
painful to have all those "let"s and "in"s.

Regards,
Markus Mottl

-- 
Markus Mottl                                             markus@oefai.at
Austrian Research Institute
for Artificial Intelligence                  http://www.oefai.at/~markus
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

