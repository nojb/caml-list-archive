Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA24090; Mon, 4 Feb 2002 03:30:33 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA26392 for <caml-list@pauillac.inria.fr>; Mon, 4 Feb 2002 03:30:32 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g142UVv07805
	for <caml-list@inria.fr>; Mon, 4 Feb 2002 03:30:31 +0100 (MET)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id LAA01285;
	Mon, 4 Feb 2002 11:30:25 +0900 (JST)
To: sacerdot@cs.unibo.it
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Recursive classes and subtyping
In-Reply-To: <20020201182057.C5484@cs.unibo.it>
References: <Pine.GSO.4.21.0202011722010.1159-100000@lawson.irisa.fr>
	<20020201180117.A5484@cs.unibo.it>
	<20020201182057.C5484@cs.unibo.it>
X-Mailer: Mew version 1.94.2 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020204113025C.garrigue@kurims.kyoto-u.ac.jp>
Date: Mon, 04 Feb 2002 11:30:25 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 18
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Claudio Sacerdoti Coen <sacerdot@cs.unibo.it>

>  Obviously, I was a bit too quick! I think that the trick works only up to
>  the point where the mutual recursion is fake. This is a slightly more
>  complex example:
> 
> # type -'a t;;
> 
> # let f (x : [> `A] t) = (x : [`A] t);;
> val f : [ `A] t -> [ `A] t = <fun>

If you just put two annotations, they will be unified.
You need an explicit coercion to get the type you expect:

# let f x = (x : [> `A] t :> [`A] t);;
val f : [> `A] t -> [ `A] t = <fun>

Jacques Garrigue
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

