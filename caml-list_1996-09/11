Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id JAA07235 for caml-redistribution; Fri, 13 Sep 1996 09:59:42 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id VAA29336 for <caml-list@pauillac.inria.fr>; Thu, 12 Sep 1996 21:22:55 +0200
Received: from vegemite.Stanford.EDU (vegemite.Stanford.EDU [171.65.76.158]) by concorde.inria.fr (8.7.1/8.7.1) with ESMTP id VAA00362 for <caml-list@pauillac.inria.fr>; Thu, 12 Sep 1996 21:22:49 +0200 (MET DST)
Received: (arc@localhost) by vegemite.Stanford.EDU (8.7.1/8.6.4) id MAA19250 for caml-list@pauillac.inria.fr; Thu, 12 Sep 1996 12:22:43 -0700 (PDT)
Date: Thu, 12 Sep 1996 12:22:43 -0700 (PDT)
From: Andrew Conway <arc@sequence.Stanford.EDU>
Message-Id: <199609121922.MAA19250@vegemite.Stanford.EDU>
To: caml-list@pauillac.inria.fr
Subject: Closed Objects
Sender: weis



Dear Caml Implementors,

I was wondering if you could give some comments upon the interactions
of classes returning self, type coercions, inheritance and closedness.

In particular, I do not understand the rules on closedness.

I was trying to make a "list like" class, and found the following
effects:

(* Base list class. Has no "head", but I am not interested about 
   storing data in it yet. This works in ocaml 1.00 and 1.01.

   The "myself" method will usually be "self", but occasionally 
   (in some subclasses) it will refer to something else.

 *)

class virtual runaround () as self : 'a =
    virtual null : bool
    virtual next : runaround
    virtual myself : runaround 
end;;

(* Add a method. This DOESN'T compile in ocaml 1.01, but 
   did compile in ocaml 1.00. The error message says that it
   is closed, but not marked closed. 

   I don't want it to be closed. Is it impossible to return "self"
   in a non-closed class?

 *)

class virtual run2 () as self =
    inherit runaround ()
    method myself = (self :> runaround)
end;;

(* the sort of way things would be used (works without "myself") *)

class stop () as self =
    inherit run2 ()
    method null = true
    method next = invalid_arg "stop"
    method junk = 6 
end;;

class go n as self =
    inherit runaround ()
    val storen = n
    method null = false
    method next = storen
    method myself = (self :> runaround)
end;;

let s = new stop ();;
let ss = (s :> runaround) ;;

let g = new go ss;;
let gg = new go g;;

let rec laps x =
	if x#null then 0 else 1 + laps x#next
;;

laps g;;
laps gg;;







