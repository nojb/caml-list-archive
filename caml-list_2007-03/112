Return-Path: <bhurt@janestcapital.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 6F01FBC69
	for <caml-list@yquem.inria.fr>; Thu,  8 Mar 2007 21:51:00 +0100 (CET)
Received: from smtp.janestcapital.com (janestcapital.com [66.155.124.107])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l28KoxWg005533
	for <caml-list@yquem.inria.fr>; Thu, 8 Mar 2007 21:50:59 +0100
Received: from [192.168.250.117] [209.213.205.130] by janestcapital.com with ESMTP
  (SMTPD-9.10) id A7320118; Thu, 08 Mar 2007 15:50:58 -0500
Message-ID: <45F07732.3020707@janestcapital.com>
Date: Thu, 08 Mar 2007 15:50:58 -0500
From: Brian Hurt <bhurt@janestcapital.com>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.2) Gecko/20040804 Netscape/7.2 (ax)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Michael Hicks <mwh@cs.umd.edu>
Cc: Robert Fischer <RFischer@RoomAndBoard.com>,
	caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Operator overloading
References: <200703082015.l28KFrfh003479@loompa.cs.umd.edu>
In-Reply-To: <200703082015.l28KFrfh003479@loompa.cs.umd.edu>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 45F07733.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; overloading:01 popl:01 haskell:01 dependencies:01 overloading:01 functor:01 haskell:01 equality:01 equality:01 wrote:01 caml-list:01 modules:02 essentially:02 implemented:02 latter:03 

Michael Hicks wrote:

>This discussion reminds of a paper that appeared at POPL 2007 about the
>relationship between ML modules and Haskell type classes.  The former are
>really good for organizing your namespace and making dependencies and
>operations explicit.  The latter are really good at (disciplined) operator
>overloading (which is convenient as many here have argued).  The paper looks
>at how the two can be combined (essentially, operator overloading is
>implicit functor instantiation), so you can have the best of both worlds.
>  
>

The reason type classes were implemented in Haskell was as a sane way to 
implement a generic equality operator.  Myself, I question the need for 
a generic equality operator.

Brian

