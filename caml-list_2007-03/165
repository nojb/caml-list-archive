Return-Path: <RFischer@RoomAndBoard.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 66E09BC6B
	for <caml-list@yquem.inria.fr>; Fri,  9 Mar 2007 16:35:32 +0100 (CET)
Received: from mail.roomandboard.com (mail.roomandboard.com [66.84.219.55])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l29FZUg4003014
	for <caml-list@inria.fr>; Fri, 9 Mar 2007 16:35:31 +0100
Received: from selma.roomandboard.com ([192.168.101.46]) by mail.roomandboard.com with Microsoft SMTPSVC(5.0.2195.6713);
	 Fri, 9 Mar 2007 09:35:29 -0600
X-MimeOLE: Produced By Microsoft Exchange V6.0.6603.0
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Subject: RE: [Caml-list] Interactive technical computing
Date: Fri, 9 Mar 2007 09:35:29 -0600
Message-ID: <3D1E4D9CA9BCE04D8F2B55F203AE4CE30666AB92@selma.roomandboard.com>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: [Caml-list] Interactive technical computing
Thread-Index: AcdiYJEZpDRTnRgKSR2EiLMFU42IwA==
From: "Robert Fischer" <RFischer@RoomAndBoard.com>
To: <caml-list@inria.fr>
X-OriginalArrivalTime: 09 Mar 2007 15:35:29.0476 (UTC) FILETIME=[91239840:01C76260]
X-Miltered: at concorde with ID 45F17EC2.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 bytecode:01 ocaml:01 bytecode:01 ocaml's:01 python's:01 statically:01 bindings:01 beginner's:01 bug:01 beginners:01 wrote:01 wrote:01 binaries:01 slower:01 

Performance of using F# linking into native applications is better than =
using OCaml bytecode and linking into native applications?  Is F# faster =
than OCaml bytecode these days?  Is the OCaml bytecode's link into =
dynamic libraries somehow slowing things down?

I'm still having trouble seeing what you're getting at -- sorry if I'm =
being dense.

~~ Robert.

-----Original Message-----
From: caml-list-bounces@yquem.inria.fr
[mailto:caml-list-bounces@yquem.inria.fr]On Behalf Of skaller
Sent: Friday, March 09, 2007 9:22 AM
To: Robert Fischer
Cc: caml-list@inria.fr
Subject: RE: [Caml-list] Interactive technical computing


On Fri, 2007-03-09 at 08:13 -0600, Robert Fischer wrote:
> Performance of Ocaml's bytecode is slower than F#?  Really?

I wrote:
> > As long as you play within the bounds of their VM.  This is no =
different than Ocaml.
>=20
> Performance is different :) That's why I use Ocaml native code
> exclusively, which doesn't support dynamic loading (yet :)

I have no idea about performance of F#: I'm talking about
using a Debian based Linux operating system which uses
dynamic loading of high performance machine binaries.

I once implement a Python interpreter in Ocaml, call Vyper.
One of the reasons I gave up was that to extend it with
the equivalent of Python's C modules, I had to write the
equivalent code in Ocaml and *statically* link it into
the program.

The main reason for doing this wasn't performance, but
to provide bindings to C libraries.

--=20
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

_______________________________________________
Caml-list mailing list. Subscription management:
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
Archives: http://caml.inria.fr
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs

