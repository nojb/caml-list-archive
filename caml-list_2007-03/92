Return-Path: <nicolas.pouillard@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 1DC53BC6D
	for <caml-list@yquem.inria.fr>; Thu,  8 Mar 2007 13:22:06 +0100 (CET)
Received: from nz-out-0506.google.com (nz-out-0506.google.com [64.233.162.232])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l28CM46U008678
	for <caml-list@inria.fr>; Thu, 8 Mar 2007 13:22:05 +0100
Received: by nz-out-0506.google.com with SMTP id l8so330379nzf
        for <caml-list@inria.fr>; Thu, 08 Mar 2007 04:22:04 -0800 (PST)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=juNvHOKaZ68EmQnv4pbzwCiIXNd3zcxGoSTGuau8uOn16pKCMeG+hTYrpQ8y5BRuY7ZBBvqugiAopw1wGcQQeZ9Pt7uthzLpdwIYq3SLed2CkEANPJ4fpvsVP25lp1eLbtnStmRhAqwTFsZeaDMYNJm4CBbrX7Fjd9Nuze6GnhE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=C/J02g3u8FcStt1KNxltjYevMOqKKA/8/EsTHpW9Cg+4wDfk0ENqCgWX3Y/GkyhIlrb35MC8vIgdv3pkK1GDvFIQ1JAMGC9NhjVehezxzghjcbsW8DngxFjVrAakqdUm1X8Cx33N0ndswA3SSegztr3WNqG1dMHba8KKpjdlicY=
Received: by 10.114.176.1 with SMTP id y1mr94838wae.1173356524292;
        Thu, 08 Mar 2007 04:22:04 -0800 (PST)
Received: by 10.114.181.18 with HTTP; Thu, 8 Mar 2007 04:22:04 -0800 (PST)
Message-ID: <cd67f63a0703080422h26166e50uf2fa4a9b97a6170b@mail.gmail.com>
Date: Thu, 8 Mar 2007 13:22:04 +0100
From: "Nicolas Pouillard" <nicolas.pouillard@inria.fr>
Sender: nicolas.pouillard@gmail.com
To: "William D. Neumann" <wneumann@cs.unm.edu>
Subject: Re: [Caml-list] ocamlbuild and C stubs
Cc: "Shivkumar Chandrasekaran" <shiv@ece.ucsb.edu>,
	caml-list@inria.fr
In-Reply-To: <Pine.LNX.4.62.0703071445510.23302@io.cs.unm.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <C0EA3AF9-8F12-4182-99E8-856488E931AA@ece.ucsb.edu>
	 <Pine.LNX.4.62.0703071445510.23302@io.cs.unm.edu>
X-Google-Sender-Auth: b2dfa9a90a298389
X-Miltered: at discorde with ID 45EFFFED.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; stubs:01 shivkumar:01 stub:01 zlib:01 -dhave:01 zlib:01 lib:01 libdir:01 usr:01 lib:01 libdir:01 usr:01 libname:01 arcfour:01 objs:01 

On 3/7/07, William D. Neumann <wneumann@cs.unm.edu> wrote:
> On Wed, 7 Mar 2007, Shivkumar Chandrasekaran wrote:
>
> > Is there any (easy) way to use ocamlbuild to handle the automatic
> > (re)-compilation of the C stub files to external libraries? Thanks,
>
> Well, I don't know if it's the best way (I wait for Nicolas to chime in),

Hi, thanks for your response :)

> but while playing around with it I tried to get cryptokit to build with
> ocamlbuild.  What I ended up with that worked was a myocamlbuild.ml that
> looks like:

Whooa, that's nice for a first try!

Let's me give some remarks and then propose a simpler solution.

> open Ocamlbuild_plugin
> open Command

> open Arch
Unused

>
> let static = false
>
> let zlib = "-DHAVE_ZLIB"
> let zlib_lib="-lz"
> let zlib_libdir="/usr/lib"
> (* let zlib_libdir=/usr/lib64  (* for x86-64 Linux *) *)
> let zlib_include="/usr/include"
>
> let libname = "cryptokit"
>
> let cc_map lst = List.fold_right (fun v b -> A"-ccopt"::(A v)::b) lst []
> let l_ x = "-L"^x
>
> let _a = "%.a"
>
> let c_files =
>    [ "rijndael-alg-fst";  "stubs-aes"
>    ; "d3des"; "stubs-des"
>    ; "arcfour"; "stubs-arcfour"
>    ; "sha1"; "stubs-sha1"
>    ; "sha2"; "stubs-sha2"
>    ; "sha256"; "stubs-sha256"
>    ; "ripemd160"; "stubs-ripemd160"
>    ; "pool"; "stubs-pool"
>    ; "stubs-md5" ; "stubs-zlib"; "stubs-misc"; "stubs-rng"
>    ]
>
> let c_objs = List.map (fun f -> f-.-"o") c_files
>
> let _ = dispatch begin function
> | Before_rules ->
>
>      rule  "create C library rule"
>          ~prod:_a
>          ~deps:c_objs
>          begin fun env build ->
>            let a = env _a in
>            let tags = tags_of_pathname a++"library"++"object"++"archive" in
>            Cmd(S([ !Options.ocamlmklib; A"-o"; A libname ]
>                  @ (List.map (fun o -> A o) c_objs) @
>                  [  A(l_ zlib_libdir); A zlib_lib; T tags ]
>                 )
>               )
>          end;

Here you define a custom rule, that's good but there is already a rule
to make C libraries.

For tags I'd have chosen "link" (a verb) "c" "library" (nouns).

>      flag  [ "c"; "compile"; ] (S(A"-I"::P".."::(cc_map [("-I"^zlib_include); zlib])));
>      flag  [ "library"; "ocaml" ] (S[A"-ccopt"; A(l_ zlib_libdir); A"-cclib"; A zlib_lib]);
>      flag  [ "ocaml"; "program" ] (S[A"-ccopt"; A"-L."]);
>      if static then flag  [ "byte"; "link" ] (A"-custom");
>      flag  [ "byte"; "library"; "link" ]  (S[A"-dllib"; A"-lcryptokit"; A"-cclib"; A"-lcryptokit"]);
>      flag  [ "native"; "library"; "link" ]  (S[A"-cclib"; A"-lcryptokit"]);

Good usage of `flag' declarations!

Having some `dep' declarations can help to sync flags and files that
need to be present.

> | _ -> ()
> end

Here is my solution:

$ cat myocamlbuild.ml
open Ocamlbuild_plugin
open Command

(* Configuration section *)
let have_zlib = "-DHAVE_ZLIB"
let zlib_lib = "-lz"
let zlib_libdir = "-L/usr/lib"
(* let zlib_libdir = "-L/usr/lib64"  (* for x86-64 Linux *) *)
let zlib_include = "-I/usr/include"

let static = true

(* List of headers *)
let headers =
  ["arcfour.h"; "d3des.h"; "rijndael-alg-fst.h";
   "ripemd160.h"; "sha1.h"; "sha256.h"]

;;

dispatch begin function
| After_rules ->

    (* When one make a C library that use the zlib with ocamlmklib,
       then issue these flags. *)
    flag ["ocamlmklib"; "c"; "use_zlib"]
         (S[A zlib_libdir; A zlib_lib]);

    (* When one compile C code using the zlib *)
    flag ["c"; "compile"; "include_zlib"]
         (S[A"-ccopt"; A zlib_include; A"-ccopt"; A have_zlib]);

    flag ["link"; "ocaml"; "library"; "use_zlib"]
         (S[A"-ccopt"; A zlib_libdir; A"-cclib"; A zlib_lib]);

    (* If `static' is true then every ocaml link in bytecode will add -custom *)
    if static then flag ["link"; "ocaml"; "byte"] (A"-custom");

    (* cryptokit is an ocaml library.
       This will declare use_cryptokit and include_cryptokit *)
    ocaml_lib "cryptokit";

    flag ["link"; "library"; "ocaml"; "byte"; "use_libcryptokit"]
         (S[A"-dllib"; A"-lcryptokit"; A"-cclib"; A"-lcryptokit"]);

    flag ["link"; "library"; "ocaml"; "native"; "use_libcryptokit"]
         (S[A"-cclib"; A"-lcryptokit"]);

    (* When ocaml link something that use the libcryptokit,
       then one need that file to be up to date. *)
    dep  ["link"; "ocaml"; "use_libcryptokit"] ["libcryptokit.a"];

    (* As an approximation all our C files use the headers.
       Note: This will import headers in the build directory. *)
    dep  ["compile"; "c"] headers;
| _ -> ()
end

$ cat _tags
<*.c>: include_zlib
"libcryptokit.a": use_zlib
<cryptokit.cm{x,}a>: use_zlib, use_libcryptokit
<{,speed}test.{byte,native}>: use_cryptokit, use_unix, use_nums

$ cat libcryptokit.clib
rijndael-alg-fst.o stubs-aes.o
d3des.o stubs-des.o
arcfour.o stubs-arcfour.o
sha1.o stubs-sha1.o
sha256.o stubs-sha256.o
ripemd160.o stubs-ripemd160.o
stubs-md5.o
stubs-zlib.o
stubs-misc.o
stubs-rng.o

$ cat cryptokit.mllib
Cryptokit

# Here it suffice to produce the test file.
$ ocamlbuild test.native
# [ ... some warnings ... ]
Finished, 26 targets (0 cached) in 00:00:04.

$ ocamlbuild test.native
Finished, 26 targets (26 cached) in 00:00:00.

$ ./test.native
# [ ... some output ... ]

$ cat all.itarget
cryptokit.cma
cryptokit.cmxa

$ cat tests.itarget
test.native
speedtest.native
test.byte
speedtest.byte

$ ocamlbuild tests.otarget
# [ ... some warnings ... ]
Finished, 35 targets (26 cached) in 00:00:01.

Hope this helps,

-- 
Nicolas Pouillard

