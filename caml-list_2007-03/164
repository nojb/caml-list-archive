Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 72761BC69
	for <caml-list@yquem.inria.fr>; Fri,  9 Mar 2007 16:22:10 +0100 (CET)
Received: from ipmail03.adl2.internode.on.net (ipmail03.adl2.internode.on.net [203.16.214.135])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l29FM8Lr031911
	for <caml-list@inria.fr>; Fri, 9 Mar 2007 16:22:09 +0100
Received: from ppp19-103.lns2.syd7.internode.on.net (HELO [192.168.1.201]) ([59.167.19.103])
  by ipmail03.adl2.internode.on.net with ESMTP; 10 Mar 2007 01:52:04 +1030
X-IronPort-AV: i="4.14,268,1170595800"; 
   d="scan'208"; a="60404942:sNHT23070558"
Subject: RE: [Caml-list] Interactive technical computing
From: skaller <skaller@users.sourceforge.net>
To: Robert Fischer <RFischer@RoomAndBoard.com>
Cc: caml-list@inria.fr
In-Reply-To: <3D1E4D9CA9BCE04D8F2B55F203AE4CE30666AB87@selma.roomandboard.com>
References: 
	 <3D1E4D9CA9BCE04D8F2B55F203AE4CE30666AB87@selma.roomandboard.com>
Content-Type: text/plain
Date: Sat, 10 Mar 2007 02:21:59 +1100
Message-Id: <1173453719.22738.103.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.8.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 45F17BA0.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml's:01 bytecode:01 ocaml:01 ocaml:01 python's:01 statically:01 bindings:01 sourceforge:01 wrote:01 wrote:01 binaries:01 slower:01 caml-list:01 modules:02 bounds:02 

On Fri, 2007-03-09 at 08:13 -0600, Robert Fischer wrote:
> Performance of Ocaml's bytecode is slower than F#?  Really?

I wrote:
> > As long as you play within the bounds of their VM.  This is no different than Ocaml.
> 
> Performance is different :) That's why I use Ocaml native code
> exclusively, which doesn't support dynamic loading (yet :)

I have no idea about performance of F#: I'm talking about
using a Debian based Linux operating system which uses
dynamic loading of high performance machine binaries.

I once implement a Python interpreter in Ocaml, call Vyper.
One of the reasons I gave up was that to extend it with
the equivalent of Python's C modules, I had to write the
equivalent code in Ocaml and *statically* link it into
the program.

The main reason for doing this wasn't performance, but
to provide bindings to C libraries.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

