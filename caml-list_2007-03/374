Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 306DCBC69
	for <caml-list@yquem.inria.fr>; Sat, 24 Mar 2007 07:48:14 +0100 (CET)
Received: from ipmail03.adl2.internode.on.net (ipmail03.adl2.internode.on.net [203.16.214.135])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2O6mB8T000325
	for <caml-list@inria.fr>; Sat, 24 Mar 2007 07:48:13 +0100
Received: from unknown (HELO [192.168.1.201]) ([121.44.236.93])
  by ipmail03.adl2.internode.on.net with ESMTP; 24 Mar 2007 17:18:08 +1030
X-IronPort-AV: i="4.14,322,1170595800"; 
   d="scan'208"; a="66946905:sNHT20199074"
Subject: Re: [Caml-list] lazy evaluation of combinator parsers
From: skaller <skaller@users.sourceforge.net>
To: Jeffrey Loren Shaw <shawjef3@msu.edu>
Cc: caml-list@inria.fr
In-Reply-To: <E1HUv3J-0002P1-Bt@sys29.mail.msu.edu>
References: <E1HUv3J-0002P1-Bt@sys29.mail.msu.edu>
Content-Type: text/plain
Date: Sat, 24 Mar 2007 17:48:03 +1100
Message-Id: <1174718883.7517.46.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.8.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 4604C9AB.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; combinator:01 parsers:01 seq:01 stack:01 seq:01 diverges:01 sourceforge:01 wrote:01 regex:01 regex:01 rec:01 rec:01 caml-list:01 functions:01 argument:02 

On Fri, 2007-03-23 at 21:28 -0400, Jeffrey Loren Shaw wrote:

> let alt p1 p2 xs = append (p1 xs) (p2 xs) 
> 
> (* regex ? *)
> let opt a = alt a epsilon 
> 
> let rec recseq a =
>  seq
>    a
>    (recseq a) 
> 
> (* regex * *)
> let rec star a =
>  recseq (opt a) 
> 
> However, "star (symbol 'a')" causes a stack overflow. I'm not sure why, 
> since my seq and alt functions are lazy. 

Arguments are evaluated right to left eagerly, so

let rec recseq a = seq a (recseq a) 

is instantly an infinite loop. seq is not called here,
it's second argument diverges.



-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

