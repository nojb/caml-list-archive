Return-Path: <carette@mcmaster.ca>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 9C129BC0A
	for <caml-list@yquem.inria.fr>; Mon, 12 Mar 2007 22:28:37 +0100 (CET)
Received: from sigma957.cis.mcmaster.ca (sigma957.CIS.McMaster.CA [130.113.64.83])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2CLSalF027126
	for <caml-list@inria.fr>; Mon, 12 Mar 2007 22:28:36 +0100
Received: from Dura7.UTS.McMaster.CA (dura7.UTS.mcmaster.ca [130.113.196.62])
	by sigma957.cis.mcmaster.ca (8.13.7/8.13.7) with ESMTP id l2CLCaaU023578;
	Mon, 12 Mar 2007 17:13:00 -0400 (EDT)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by Dura7.UTS.McMaster.CA (8.13.7/8.13.7) with ESMTP id l2CLCDck031056;
	Mon, 12 Mar 2007 17:12:13 -0400
Received: from [74.109.166.109] (account carette@univmail.cis.mcmaster.ca HELO [192.168.1.101])
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.1.8)
  with ESMTP-TLS id 165925901; Mon, 12 Mar 2007 17:12:13 -0400
Message-ID: <45F5C1B3.2040708@mcmaster.ca>
Date: Mon, 12 Mar 2007 17:10:11 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: OCaml <caml-list@inria.fr>,
	Haskell Cafe <haskell-cafe@haskell.org>, omdoc@mathweb.org,
	calculemus-ig@ags.uni-sb.de, seworld@cs.colorado.edu,
	SymbolicNet@mcs.kent.edu, om@openmath.org
Subject: CFP: Prog. Lang for Mechanized Mathematics Workshop
Content-Type: multipart/alternative;
 boundary="------------090401000901050503000808"
X-PMX-Version-Mac: 4.7.1.128075, Antispam-Engine: 2.4.0.264935, Antispam-Data: 2007.3.12.134934
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='__BAT_BOUNDARY 0, __CP_URI_IN_BODY 0, __CT 0, __CTYPE_HAS_BOUNDARY 0, __CTYPE_MULTIPART 0, __CTYPE_MULTIPART_ALT 0, __HAS_MSGID 0, __MIME_HTML 0, __MIME_VERSION 0, __SANE_MSGID 0, __TAG_EXISTS_HTML 0, __USER_AGENT 0'
X-Miltered: at discorde with ID 45F5C604.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; cfp:01 intersection:01 algebra:01 algebra:01 coq:01 avoided:01 coq:01 haskell:01 haskell:01 conversely:01 inference:01 inference:01 untyped:01 polymorphism:01 lennart:01 

This is a multi-part message in MIME format.
--------------090401000901050503000808
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit


  Programming Languages for Mechanized Mathematics Workshop

As part of Calculemus 2007 
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>

Hagenberg, Austria

[http://www.cas.mcmaster.ca/plmms07/]

The intent of this workshop is to examine more closely the intersection 
between programming languages and mechanized mathematics systems (MMS). 
By MMS, we understand computer algebra systems (CAS), [automated] 
theorem provers (TP/ATP), all heading towards the development of fully 
unified systems (the MMS), sometimes also called universal mathematical 
assistant systems (MAS) (see Calculemus 2007 
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>).

There are various ways in which these two subjects of /programming 
languages/ and /systems for mathematics/ meet:

    * Many systems for mathematics contain a dedicated programming
      language. For instance, most computer algebra systems contain a
      dedicated language (and are frequently built in that same
      language); some proof assistants (like the Ltac language for Coq)
      also have an embedded programming language. Note that in many
      instances this language captures only algorithmic content, and
      /declarative/ or /representational/ issues are avoided.
    * The /mathematical languages/ of many systems for mathematics are
      very close to a functional programming language. For instance the
      language of ACL2 is just Lisp, and the language of Coq is very
      close to Haskell. But even the mathematical language of the HOL
      system can be used as a functional programming language that is
      very close to ML and Haskell. On the other hand, these languages
      also contain very rich specification capabilities, which are
      rarely available in most computation-oriented programming
      languages. And even then, many specification languages ((B, Z,
      Maude, OBJ3, CASL, etc) can still teach MMSes a trick or two
      regarding representational power.
    * Conversely, functional programming languages have been getting
      "more mathematical" all the time. For instance, they seem to have
      discovered the value of dependent types rather recently. But they
      are still not quite ready to 'host' mathematics (the non-success
      of docon <http://www.haskell.org/docon/> being typical). There are
      some promising languages on the horizon (Epigram
      <http://www.e-pig.org/>, Omega
      <http://web.cecs.pdx.edu/%7Esheard/Omega/index.html>) as well as
      some hybrid systems (Agda <http://agda.sourceforge.net/>, Focal
      <http://focal.inria.fr/site/index.php>), although it is unclear if
      they are truly capable of expressing the full range of ideas
      present in mathematics.
    * Systems for mathematics are used to prove programs correct. (One
      method is to generate "correctness conditions" from a program that
      has been annotated in the style of Hoare logic and then prove
      those conditions in a proof assistant.) An interesting question is
      what improvements are needed for this both on the side of the
      mathematical systems and on the side of the programming languages.

We are interested in all these issues. We hope that a certain synergy 
will develop between those issues by having them explored in parallel.

These issues have a very colourful history. Many programming language 
innovations first appeared in either CASes or Proof Assistants, before 
migrating towards more mainstream languages. One can cite (in no 
particular order) type inference, dependent types, generics, 
term-rewriting, first-class types, first-class expressions, first-class 
modules, code extraction, and so on. However, a number of these 
innovations were never aggressively pursued by system builders, letting 
them instead be developped (slowly) by programming language researchers. 
Some, like type inference and generics have flourished. Others, like 
first-class types and first-class expressions, are not seemingly being 
researched by anyone.

We want to critically examine what has worked, and what has not. Why are 
all the current ``popular'' computer algebra systems untyped? Why are 
the (strongly typed) proof assistants so much harder to use than a 
typical CAS? But also look at question like what forms of polymorphism 
exists in mathematics? What forms of dependent types exist in 
mathematics? How can MMS regain the upper hand on issues of 
'genericity'? What are the biggest barriers to using a more mainstream 
language as a host language for a CAS or an ATP?

This workshop will accept two kinds of submissions: full research papers 
as well as position papers. Research papers should be nore more than 15 
pages in length, and positions papers no more than 3 pages. Submission 
will be through _EasyChair_. An informal version of the proceedings will 
be available at the workshop, with a more formal version to appear 
later. We are looking into having the best papers completed into full 
papers and published as a special issue of a Journal (details to follow).


    Important Dates

April 25, 2007: Submission Deadline
June 29-30, 2007: Workshop


    Program Committee

Lennart Augustsson <http://www.cs.chalmers.se/%7Eaugustss> [Credit Suisse]
Wieb Bosma <http://www.math.ru.nl/%7Ebosma/>[Radboud University 
Nijmegen, Netherlands]
Jacques Carette <http://www.cas.mcmaster.ca/%7Ecarette> (co-Chair) 
[McMaster University, Canada]
David Delahaye <http://cedric.cnam.fr/%7Edelahaye/> [CNAM, France]
Jean-Christophe Filliâtre <http://www.lri.fr/%7Efilliatr/> [CNRS and 
Université de Paris-Sud, France]
John Harrison <http://www.cl.cam.ac.uk/%7Ejrh13/> [Intel Corporation, USA]
Markus (Makarius) Wenzel <http://www4.in.tum.de/%7Ewenzelm/> [Technische 
Universität München, Germany]
Freek Wiedijk <http://www.cs.ru.nl/%7Efreek/> (co-Chair) [Radboud 
University Nijmegen, Netherlands]
Wolfgang Windsteiger <http://www.risc.uni-linz.ac.at/people/wwindste/> 
[University of Linz, Austria]


    Location and Registration

Location and registration information can be found on the Calculemus 
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/> web 
site.

--------------090401000901050503000808
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
<div class="moz-text-html" lang="x-western">
<h1>
<center>Programming Languages for Mechanized Mathematics Workshop</center>
</h1>
<center>As part of <a
 href="http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/">Calculemus
2007</a></center>
<center>Hagenberg, Austria</center>
<p>[<a class="moz-txt-link-freetext"
 href="http://www.cas.mcmaster.ca/plmms07/">http://www.cas.mcmaster.ca/plmms07/</a>]</p>
<p>The intent of this workshop is to examine more closely the
intersection
between programming languages and mechanized mathematics systems (MMS).
By MMS, we understand computer algebra systems (CAS), [automated]
theorem
provers (TP/ATP), all heading towards the development of
fully unified systems (the MMS), sometimes also called universal
mathematical
assistant systems (MAS) (see <a
 href="http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/">Calculemus
2007</a>).</p>
<p>There are various ways in which these two subjects of
<i>programming languages</i> and <i>systems for mathematics</i> meet:
</p>
<ul>
  <li>Many systems for mathematics contain a dedicated programming
language. For instance, most computer algebra systems contain a
dedicated language (and are frequently built in that same language);
some proof assistants (like the Ltac language for Coq) also have an
embedded programming language. Note that in many instances this
language captures only algorithmic content, and <i>declarative</i> or <i>representational</i>
issues are avoided.</li>
  <li>The <i>mathematical languages</i> of many systems for
mathematics are very close to a functional programming language. For
instance the language of ACL2 is just Lisp, and the language of Coq is
very close to Haskell. But even the mathematical language of the HOL
system can be used as a functional programming language that is very
close to ML and Haskell. On the other hand, these languages also
contain very rich specification capabilities, which are rarely
available in most computation-oriented programming languages. And even
then, many specification languages ((B, Z, Maude, OBJ3, CASL, etc) can
still teach MMSes a trick or two regarding representational power.</li>
  <li>Conversely, functional programming languages have been getting
"more mathematical" all the time. For instance, they seem to have
discovered the value of dependent types rather recently. But they are
still not quite ready to 'host' mathematics (the non-success of <a
 href="http://www.haskell.org/docon/">docon</a> being typical). There
are some promising languages on the horizon (<a
 href="http://www.e-pig.org/">Epigram</a>, <a
 href="http://web.cecs.pdx.edu/%7Esheard/Omega/index.html">Omega</a>)
as well as some hybrid systems (<a href="http://agda.sourceforge.net/">Agda</a>,
    <a href="http://focal.inria.fr/site/index.php">Focal</a>), although
it is unclear if they are truly capable of expressing the full range of
ideas present in mathematics.</li>
  <li> Systems for mathematics are used to prove programs correct. (One
method is to generate "correctness conditions" from a program that has
been annotated in the style of Hoare logic and then prove those
conditions in a proof assistant.) An interesting question is what
improvements are needed for this both on the side of the mathematical
systems and on the side of the programming languages.</li>
</ul>
We are interested in all these issues. We hope that a certain synergy
will develop between those issues by having them explored in parallel.
<p>These issues have a very colourful history. Many programming
language
innovations first appeared in either CASes or Proof Assistants, before
migrating towards more mainstream languages. One can cite (in no
particular
order) type inference, dependent types, generics, term-rewriting,
first-class
types, first-class expressions, first-class modules, code extraction,
and so
on. However, a number of these innovations were never aggressively
pursued by
system builders, letting them instead be developped (slowly) by
programming language researchers. Some, like type inference and
generics
have flourished. Others, like first-class types and first-class
expressions,
are not seemingly being researched by anyone.</p>
<p>We want to critically examine what has worked, and what has not.
Why are all the current ``popular'' computer algebra systems untyped?
Why
are the (strongly typed) proof assistants so much harder to use than a
typical CAS? But also look at question like what
forms of polymorphism exists in mathematics? What forms of dependent
types
exist in mathematics? How can MMS regain the upper hand on issues of
'genericity'? What are the biggest barriers to using a more mainstream
language as a host language for a CAS or an ATP? </p>
<p>This workshop will accept two kinds of submissions: full research
papers as well as position papers. Research papers should be nore more
than
15 pages in length, and positions papers no more than 3 pages.
Submission will be through <u>EasyChair</u>. An informal
version of the proceedings will be available at the workshop, with a
more
formal version to appear later. We are looking into having the best
papers completed into full papers
and published as a special issue of a Journal (details to follow).</p>
<h2>Important Dates</h2>
April 25, 2007: Submission Deadline<br>
June 29-30, 2007: Workshop
<h2>Program Committee</h2>
<a href="http://www.cs.chalmers.se/%7Eaugustss">Lennart Augustsson</a>
[Credit Suisse]<br>
<a href="http://www.math.ru.nl/%7Ebosma/">Wieb Bosma</a>[Radboud
University Nijmegen, Netherlands]<br>
<a href="http://www.cas.mcmaster.ca/%7Ecarette">Jacques Carette</a>
(co-Chair) [McMaster University, Canada]<br>
<a href="http://cedric.cnam.fr/%7Edelahaye/">David Delahaye</a> [CNAM,
France]<br>
<a href="http://www.lri.fr/%7Efilliatr/">Jean-Christophe Filli&acirc;tre</a>
[CNRS and Universit&eacute; de Paris-Sud, France]<br>
<a href="http://www.cl.cam.ac.uk/%7Ejrh13/">John Harrison</a> [Intel
Corporation, USA]<br>
<a href="http://www4.in.tum.de/%7Ewenzelm/">Markus (Makarius) Wenzel</a>
[Technische Universit&auml;t M&uuml;nchen, Germany]<br>
<a href="http://www.cs.ru.nl/%7Efreek/">Freek Wiedijk</a> (co-Chair)
[Radboud University Nijmegen, Netherlands]<br>
<a href="http://www.risc.uni-linz.ac.at/people/wwindste/">Wolfgang
Windsteiger</a> [University of Linz, Austria]<br>
<h2>Location and Registration</h2>
Location and registration information can be found on the <a
 href="http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/">Calculemus</a>
web site.
</div>
</body>
</html>

--------------090401000901050503000808--

