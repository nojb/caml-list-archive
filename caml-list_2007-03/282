Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 4A8DBBC0A;
	Sat, 17 Mar 2007 01:18:37 +0100 (CET)
Received: from ipmail03.adl2.internode.on.net (ipmail03.adl2.internode.on.net [203.16.214.135])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2H0IYrH029106;
	Sat, 17 Mar 2007 01:18:35 +0100
Received: from ppp41-108.lns2.syd6.internode.on.net (HELO [192.168.1.201]) ([59.167.41.108])
  by ipmail03.adl2.internode.on.net with ESMTP; 17 Mar 2007 10:48:32 +1030
X-IronPort-AV: i="4.14,293,1170595800"; 
   d="scan'208"; a="63681697:sNHT20513080"
Subject: Re: [Caml-list] ocamlbuild and automatic dependencies
From: skaller <skaller@users.sourceforge.net>
To: Daniel de Rauglaudre <daniel.de_rauglaudre@inria.fr>
Cc: Caml List <caml-list@inria.fr>
In-Reply-To: <20070316142205.GB28353@yquem.inria.fr>
References: <80E2E3A7-2603-4706-8186-566C6DA14452@gmail.com>
	 <cd67f63a0703140524r142d3877h9740d12feab1a544@mail.gmail.com>
	 <729DDA34-5FBE-4570-B10F-B2443B58A2F1@gmail.com>
	 <cd67f63a0703140543p3596c0aetbf59b0da4f99c720@mail.gmail.com>
	 <8FC891E5-C8B6-410F-B2EB-5E06594A0165@gmail.com>
	 <cd67f63a0703140611g131f5056hbf1f641a9bb65b94@mail.gmail.com>
	 <FEDA1DA0-0C6F-4F21-810A-E668FFE04830@gmail.com>
	 <20070316142205.GB28353@yquem.inria.fr>
Content-Type: text/plain
Date: Sat, 17 Mar 2007 11:18:26 +1100
Message-Id: <1174090706.10421.29.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.8.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 45FB33DA.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; dependencies:01 0100,:01 rauglaudre:01 foo:01 foo:01 bug:01 2007,:98 sourceforge:01 wrote:01 wrote:01 imho:01 abstract:01 caml-list:01 define:01 module:03 

On Fri, 2007-03-16 at 15:22 +0100, Daniel de Rauglaudre wrote:
> Hi,
> 
> > On Mar 14, 2007, at 1:11 PM, Nicolas Pouillard wrote:
> > 
> >module F = Foo
> 
> This means : "define a module named F whose *implementation* is the
> implementation of Foo".
> 
> Therefore it is normal that at link time, the system asks for an
> implementation of foo.
> 
> IMHO, it is not a bug.

No, just hard to understand without an explanation such as
the one you gave which is good, thanks!

So actually, this F is distinct from Foo, even though all the
members are the same. In particular, if Foo has an abstract type t,
is F.t the same type as Foo.t?

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

