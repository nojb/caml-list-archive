Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id B065CBC69
	for <caml-list@yquem.inria.fr>; Thu, 29 Mar 2007 03:52:46 +0200 (CEST)
Received: from pih-relay05.plus.net (pih-relay05.plus.net [212.159.14.132])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2T1qklL018072
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 29 Mar 2007 03:52:46 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay05.plus.net with esmtp (Exim) id 1HWjoj-00027Q-K6
	for caml-list@yquem.inria.fr; Thu, 29 Mar 2007 02:52:45 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Interactive technical computing
Date: Thu, 29 Mar 2007 01:33:47 +0100
User-Agent: KMail/1.9.5
References: <3D1E4D9CA9BCE04D8F2B55F203AE4CE30666AB7C@selma.roomandboard.com> <20070310145546.GA9357@furbychan.cocan.org> <45F32C3F.9000501@cs.caltech.edu>
In-Reply-To: <45F32C3F.9000501@cs.caltech.edu>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200703290133.48162.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 460B1BEE.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; vanier:01 ocaml:01 ocaml:01 vastly:01 fascinating:98 frog:98 wrote:01 caml-list:01 concurrency:02 concurrency:02 fortran:02 inherits:03 computing:05 thread:05 michael:07 

On Saturday 10 March 2007 22:07, Michael Vanier wrote:
> I agree 100%.  This is the biggest limitation to using ocaml for large
> projects. If it were fixed, ocaml would become an unstoppable juggernaut
> ;-)

Concurrency has to be on that list as well though. F# inherits concurrency 
from .NET and it is vastly easier to use than the last time I tried 
concurrency (on a supercomputer, in Fortran).

However, a recent thread discussed the fledgling development of concurrency 
for OCaml and it sounded fascinating (although I still haven't found time to 
read it in detail!).

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

