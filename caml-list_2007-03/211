Return-Path: <david.baelde@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0263BBC0A
	for <caml-list@yquem.inria.fr>; Mon, 12 Mar 2007 22:41:29 +0100 (CET)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.175])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2CLfS3i032120
	for <caml-list@inria.fr>; Mon, 12 Mar 2007 22:41:28 +0100
Received: by ug-out-1314.google.com with SMTP id k3so11555ugf
        for <caml-list@inria.fr>; Mon, 12 Mar 2007 14:41:28 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=FbaBYkRHYJrO322YeOw/Or+3nQ0pNBVlzNrsvoTmQUf7eWpzASXJc9hvLxLSBZ296vZmu7fUcxvPkgvt5pi6p9OcK+dGZBxvXqIZbaOvZMpBR8U+QlKlGfhY6R5lwCewkjulv3WK6SIly+EDOFFRBAQBvX6oAZegb0nk0JgKUSM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=ssgegHB1xrdN0HVFsHT0/jFwhs3Z/nawTlHh6+RZNTsjAg4wh7LsQ0LS0X9TEC+C893DTOXNLjg19ix4q+x+YDW2S4/56qNdfOR7rT41411NtETLG6kXfYV2wCfachUcH08/fK502l6k38KgMLjywQOYah3Q8OkRRYeiU6Li9W4=
Received: by 10.115.61.1 with SMTP id o1mr2100899wak.1173735687067;
        Mon, 12 Mar 2007 14:41:27 -0700 (PDT)
Received: by 10.114.209.19 with HTTP; Mon, 12 Mar 2007 14:41:27 -0700 (PDT)
Message-ID: <53c655920703121441k5004991et194b046ebb601a8a@mail.gmail.com>
Date: Mon, 12 Mar 2007 22:41:27 +0100
From: "David Baelde" <david.baelde@gmail.com>
Reply-To: david.baelde@ens-lyon.org
To: Ocaml <caml-list@inria.fr>
Subject: Implementation of a prover
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-j-chkmail-Score: MSGID : 45F5C908.000 on concorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at concorde with ID 45F5C908.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; depth-first:01 tactics:98 functions:01 define:01 theorem:02 prover:02 prover:02 generally:03 logic:04 proving:05 style:93 core:08 rules:11 procedure:11 procedure:11 

Hi list,

There are well-known implementation techniques for depth-first theorem
proving, using continuation-passing style (success/failure
continuations). But these techniques do not easily allow the building
of a proof witness. This is nice when you have a working proof-search
procedure but not when you're still playing with a logic, trying to
find the right procedure or more generally when you just want an
interactive prover.

I've started to look for a way to define rules as tactics in such a
way that these core functions can be used with or without a proof
witness construction procedure. I've had enough for today and I wanted
to know if anyone done that or knows a link to anything like that.

Any idea?
-- 
David

