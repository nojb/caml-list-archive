Return-Path: <bhurt@janestcapital.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 1CA87BC69
	for <caml-list@yquem.inria.fr>; Thu,  8 Mar 2007 22:31:55 +0100 (CET)
Received: from smtp.janestcapital.com (www.janestcapital.com [66.155.124.107])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l28LVr5V012606
	for <caml-list@yquem.inria.fr>; Thu, 8 Mar 2007 22:31:54 +0100
Received: from [192.168.250.117] [209.213.205.130] by janestcapital.com with ESMTP
  (SMTPD-9.10) id A0C90880; Thu, 08 Mar 2007 16:31:53 -0500
Message-ID: <45F080C8.3070307@janestcapital.com>
Date: Thu, 08 Mar 2007 16:31:52 -0500
From: Brian Hurt <bhurt@janestcapital.com>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.2) Gecko/20040804 Netscape/7.2 (ax)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Tom <tom.primozic@gmail.com>
Cc: Robert Fischer <RFischer@roomandboard.com>,
	caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Operator overloading
References: <3D1E4D9CA9BCE04D8F2B55F203AE4CE30666AB74@selma.roomandboard.com> <c1490a380703081305m534dbb94oc1f97c443fd46844@mail.gmail.com>
In-Reply-To: <c1490a380703081305m534dbb94oc1f97c443fd46844@mail.gmail.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 45F080C9.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; overloading:01 overloading:01 pointers:01 pointers:01 ocaml:01 wrote:01 caml-list:01 exceptions:01 raise:03 leaks:04 brian:04 brian:04 null:05 memory:08 zero:10 

Tom wrote:

>
> Albeit Brian Hurt's comment about operator overloading making more 
> harm than good in C++, I believe that overloading simply has to be 
> used appropriately - it's like saying pointers are bad because they 
> can introduce memory leaks and null references, and division is bad 
> because it can raise Division_by_zero exceptions.
>
So maybe we should introduce pointers into Ocaml?

Brian

