Return-Path: <Christian.Sternagel@uibk.ac.at>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 165EABC0A
	for <caml-list@yquem.inria.fr>; Sat, 24 Mar 2007 16:11:32 +0100 (CET)
Received: from smtp.uibk.ac.at (lmr1.uibk.ac.at [138.232.1.142])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l2OFBVNH023662
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Sat, 24 Mar 2007 16:11:31 +0100
Received: from localhost (lwm1.uibk.ac.at [138.232.1.160] Christian.Sternagel@uibk.ac.at)
        by smtp.uibk.ac.at (8.13.8/8.13.1/F1) with ESMTP id l2OFBSen022156
        for <caml-list@inria.fr>; Sat, 24 Mar 2007 16:11:28 +0100
Received: from chello213047188176.tirol.surfer.at (chello213047188176.tirol.surfer.at [213.47.188.176]) 
	by web-mail1.uibk.ac.at (IMP) with HTTP 
	for <c703350@mail1.uibk.ac.at>; Sat, 24 Mar 2007 16:11:28 +0100
Message-ID: <1174749088.46053fa061126@web-mail1.uibk.ac.at>
Date: Sat, 24 Mar 2007 16:11:28 +0100
From: Christian Sternagel <Christian.Sternagel@uibk.ac.at>
To: caml-list@inria.fr
Subject: generating .cma-files with ocamlbuild 
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Originating-IP: 213.47.188.176
X-Forwarded-For: 
X-Scanned-By: MIMEDefang 2.58 at uibk.ac.at on 138.232.1.140
X-Miltered: at concorde with ID 46053FA3.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; mli:01 mli:01 util:01 cmo:01 cmo:01 cmi:01 cmi:01 util:01 cheers:01 cma:01 cma:01 modules:02 btw:02 module:03 problem:05 

Is there an easy way to tell ocamlbuild that it should
take some *.ml and *.mli files and build an archive
<name>.cma out of them?

Btw: I have another question concerning *.cma files.
Maybe an example is the easiest way to express this
question.

There are files:
set.mli set.ml setInternal.ml a.mli a.ml

I want to create the file util.cma which contains
set.cmo, setInternal.cmo, and a.cmo.

set.cmo uses setInternal.cmo but the user should
only be able to access modules Set and A but not
SetInternal. As far as I understud, this is done by
just providing set.cmi and a.cmi together with
util.cma.

Questions:
1) Is my understandung correct?
2) Can there be a problem if somebody using util.cma
(who does not know, that setInternal.cmo is part of
it) uses a self-made module by the name SetInternal
in his application?

cheers

christian

