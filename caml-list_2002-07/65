Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA03117; Thu, 4 Jul 2002 20:37:17 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA03624 for <caml-list@pauillac.inria.fr>; Thu, 4 Jul 2002 20:37:17 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from athlon.baretta.com (r-mi214-6a228.tin.it [62.211.4.228])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g64IbFH07346
	for <caml-list@inria.fr>; Thu, 4 Jul 2002 20:37:15 +0200 (MET DST)
Received: from baretta.com (localhost.localdomain [127.0.0.1])
	by athlon.baretta.com (Postfix) with ESMTP id 6B2202724D
	for <caml-list@inria.fr>; Thu,  4 Jul 2002 20:43:40 +0200 (CEST)
Message-ID: <3D24975C.2020003@baretta.com>
Date: Thu, 04 Jul 2002 20:43:40 +0200
From: Alessandro Baretta <alex@baretta.com>
Organization: Baretta srl -- www.baretta.com
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.0.0) Gecko/20020529
X-Accept-Language: it, en
MIME-Version: 1.0
To: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] XML, XSL, eXcetera
References: <24542c290fd7023473fa0a397374847c@caldo.demon.co.uk>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk



forsyth@caldo.demon.co.uk wrote:
 > http://gnosis.cx/publish/programming/xml_matters_14.html
 > discusses an alternative approach to XSLT for XML 
processing that might be of interest to
 > some on this list.  that page has URLs for the original 
papers.
 > worth a look.

This seems an interesting approach. XSLT is direct but weak
in its expressive power. What I really want is a "natural"
way to process XML files in O'Caml. IMHO, we need a "100%
pure O'Caml" approach to XML. PXP seems to be the "way to
go", from this standpoint, for DOM models built through C or
C++ libraries would basically be "wrapped" in their glue
code and untouchable from O'Caml, while PXP builds native
O'Caml datastructures.

The "hard" approach, which anyone can take directly, is to
parse an XML file with PXP and put it through an O'Caml hard
written function to process it. I think the main drawback of
this approach is the need to compile and link an executable
for every "XSLT-equivalent" filter/processor one might want
to create.

A "soft" approach, which I would prefer, would be to
implement an XSLT processor in O'Caml, with the ability to
define "extension functions" on the run, directly in the
XSLT stylesheet, compile them into the processor dynamically
(as is done in the toplevels), and call them upon activation
of the template within which they appear.

Until something like this appears, I might chose to give up
working with XSLT altogether and stick with the "hard"
O'Caml way, but I think the O'Caml community should move in
the "soft" direction. As far as I can see there have been
several partial attempts at XML management in O'Caml, the
most relevant probably being PXP, but there has been no
unifying view or project guiding these efforts. Do you not
think XML has gained enough momentum for us to start an
official "XML/O'Caml" project to define and implement the
*official* O'Caml API for XML and XML-related technologies
such as XPath and XSLT?

I would be happy to volunteer for such a project, if anyone
else is interested in it, and if the some consensus is
reached among the community on the APIs that the
to-be-formed team should work on.

Alex


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

