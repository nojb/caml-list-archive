Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA31018; Sun, 14 Jul 2002 22:47:27 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA31122 for <caml-list@pauillac.inria.fr>; Sun, 14 Jul 2002 22:47:26 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from FUSNWR01-LRS ([62.172.195.14])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g6EKf6f20678
	for <caml-list@inria.fr>; Sun, 14 Jul 2002 22:41:12 +0200 (MET DST)
Received: from [217.34.38.93] (helo=7p8420j)
	by FUSNWR01-LRS with smtp (Exim 4.05)
	id 17TqAh-00028W-00; Sun, 14 Jul 2002 21:40:48 +0100
Message-Id: <4.1.20020714213245.00a37f00@pop3.btclick.com>
X-Sender: daveb/pophost.tardis.ed.ac.uk@127.0.0.1
X-Mailer: QUALCOMM Windows Eudora Pro Version 4.1 
Date: Sun, 14 Jul 2002 21:44:11 +0100
To: Markus Mottl <markus@oefai.at>, Oleg <oleg_inconnu@myrealbox.com>
From: Dave Berry <daveb@tardis.ed.ac.uk>
Subject: Re: [Caml-list] Re: productivity improvement
Cc: OCaml <caml-list@inria.fr>
In-Reply-To: <20020712114311.GD684@fichte.ai.univie.ac.at>
References: <200207121133.HAA26986@dewberry.cc.columbia.edu>
 <200207081952.PAA28813@hickory.cc.columbia.edu>
 <200207121035.GAA26600@dewberry.cc.columbia.edu>
 <20020712112304.GC684@fichte.ai.univie.ac.at>
 <200207121133.HAA26986@dewberry.cc.columbia.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

At 13:43 12/07/2002, Markus Mottl wrote:
>I'd say that depending on the kind of the problem 1:3
>to 1:10 is reasonable and fits well to the experience of others. E.g.,
>the Erlang developers also report productivity gains in this range on
>large-scale commercial projects. OCaml will most likely have similar
>ratios.

I find it unlikely that OCaml would increase productivity as much as
Erlang. Erlang is designed primarily for concurrent programming (I
believe).  When people attempt concurrent programming in C, C++ or Java,
they typically use primitive notions such as threads and locks.  This is
noticeably harder and more error-prone than sequential programming.
Therefore any language that concentrates on this problem has more to gain
than a primarily sequential language.  AFAIK, OCaml uses threads and locks
for concurrent programming, and so is no better in this respect than
conventional languages (it could even be worse, depending on how its GC
interacts with threads and distributed code).

As a commercial manager, I've seen a productivity improvement of about 50%
using Java over C++ -- mainly arising from automatic memory management, and
a slightly cleaner language.  I would expect OCaml to have that 50%, and
perhaps another for a more expressive type system, making 2:1.  For some
problems, e.g. compilers, the increase might be more, say 3:1 or 4:1.  For
comparison, this is also the productivity improvement I'd expect to see
using Visual Basic over C/C++ for small GUI/Database problems.

Dave.
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

