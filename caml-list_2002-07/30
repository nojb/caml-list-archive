Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA00011; Wed, 3 Jul 2002 03:50:55 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA32338 for <caml-list@pauillac.inria.fr>; Wed, 3 Jul 2002 03:50:54 +0200 (MET DST)
Received: from favie.faith.gr.jp (favie.faith.gr.jp [61.127.175.250])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g631oqP03027
	for <caml-list@inria.fr>; Wed, 3 Jul 2002 03:50:52 +0200 (MET DST)
Received: from localhost (dhcp7.faith.gr.jp [192.168.1.17])
	by favie.faith.gr.jp (8.9.3/8.9.3) with ESMTP id KAA05582;
	Wed, 3 Jul 2002 10:49:46 +0900
To: pixel@mandrakesoft.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] simple typing question
In-Reply-To: <lyu1nhd4rd.fsf@leia.mandrakesoft.com>
References: <200207022059.WAA29845@pauillac.inria.fr>
	<lyu1nhd4rd.fsf@leia.mandrakesoft.com>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20020703104944V.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 03 Jul 2002 10:49:44 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 64
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Pixel <pixel@mandrakesoft.com>
> Pierre Weis <pierre.weis@inria.fr> writes:
> > > what about changing the semantic of partial application, restoring
> > > eta-equivalence: a function is not evaluated unless every arguments
> > > are given:
> > 
> > Could you precisely state this notion ? In the presence of higher
> > order functions and imperative features, this does not appear to be
> > simple and evident to me...
> 
> well, wrap every functions:
> 
> # let make_toggle_ () =
>     let r = ref [] in fun x -> let old = !r in r := x; old
> 
> with
> 
> # let make_toggle a b = make_toggle_ a b
> 
> based on the number of parameters of functions (given by the type).
> 
> This disables evaluation of a function until every parameters are
> provided.

Let's make it a bit clearer: what you're asking for is that everything
with a function type should be a value.
This is not completely unreasonable, but changes the semantics in a
not completely intuitive way, and would disallow some nice tricks.
Not completely trivial to implement either: as Pierre pointed out,
some functions returning a polymorphic result have by nature a
variable arity.  One should rewrap every time the arity changes, which
could be costly.

Another problem is that it is asymmetric: partial applications could
be polymorphic, but not results containing several functions:

let both f = (List.map f, List.iter f)

> The program transformation involved is something like:
>   let t = foo in fun x -> bar
> gives
>   fun x -> let t = foo in bar

This one is actually used for default values in optional parameters,
to make them more efficient (hence there should be no side-effects in
defaults).
Note that this rule alone would not be enough to do the needed
transformation:

let toggle r x = let old = !r in r := x; old
let make_toggle () = let r = ref [] in toggle r

You really have to look at the type, which is not very clean.
(Currently the semantics of Caml is completely independent of inferred
types)

So, this seems unlikely such changes would go through.

Without changing the semantics, there are ways to refine the current
typing, but you cannot allow List.map (fun x -> x) to be polymorphic
without giving a special typing to mutable values or side effects
(which has been shown to be a pain in ML).

Jacques Garrigue
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

