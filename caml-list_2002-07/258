Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA26677; Sun, 14 Jul 2002 14:27:09 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA26662 for <caml-list@pauillac.inria.fr>; Sun, 14 Jul 2002 14:27:02 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from gogol.zorgol (Mix-Montsouris-109-4-112.abo.wanadoo.fr [80.9.126.112])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id g6ECQvf24173
	for <caml-list@inria.fr>; Sun, 14 Jul 2002 14:26:58 +0200 (MET DST)
Received: (qmail 11593 invoked by uid 1001); 14 Jul 2002 12:25:40 -0000
Date: Sun, 14 Jul 2002 14:25:40 +0200
From: Berke Durak <berke@altern.org>
To: John Max Skaller <skaller@ozemail.com.au>
Cc: caml-list@inria.fr
Subject: [Caml-list] Statically detecting arrays bound exceptions ?? (was: Universal Serializer)
Message-ID: <20020714142540.A4150@gogol.zorgol>
References: <200207081952.PAA28813@hickory.cc.columbia.edu> <15657.61603.221054.289184@spike.artisan.com> <200207090442.AAA05638@hickory.cc.columbia.edu> <001f01c2271e$8037adf0$d100a8c0@warp> <3D2C5B77.6060303@ozemail.com.au> <200207102229.g6AMTKB22278@orchestra.cs.caltech.edu> <3D2ECE7F.5040108@ozemail.com.au>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <3D2ECE7F.5040108@ozemail.com.au>; from skaller@ozemail.com.au on Fri, Jul 12, 2002 at 10:41:35PM +1000
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, Jul 12, 2002 at 10:41:35PM +1000, John Max Skaller wrote:
[...]
> Ocaml run time errors include array (and string) bounds exceptions and 
> infinite recursions:
> static type checking could detect the first, but not the second.

Hey, wait a minute, how do you plan to statically detect bounds exceptions ?
It's as undecidable as detecting infinite recursions.

	let rec f () =
	   let a = [|1;2|] in
       if compiler_is_gonna_say_that_there_is_gonna_be_a_bounds_error f then
          a.(0)
       else
          a.(3)
-- 
Berke Durak
-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

