Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA26541; Fri, 26 Jul 2002 23:46:45 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA26233 for <caml-list@pauillac.inria.fr>; Fri, 26 Jul 2002 23:46:45 +0200 (MET DST)
Received: from relay.pair.com (relay1.pair.com [209.68.1.20])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id g6QLkiD18730
	for <caml-list@inria.fr>; Fri, 26 Jul 2002 23:46:44 +0200 (MET DST)
Received: (qmail 54585 invoked from network); 26 Jul 2002 21:46:42 -0000
Received: from node-d8e9cca2.powerinter.net (HELO checkerlap.d6.com) (216.233.204.162)
  by relay1.pair.com with SMTP; 26 Jul 2002 21:46:42 -0000
X-pair-Authenticated: 216.233.204.162
Message-Id: <4.3.2.7.2.20020726142932.02bedd60@mail.d6.com>
X-Sender: checker@mail.d6.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Fri, 26 Jul 2002 14:42:27 -0700
To: Pal-Kristian Engstad <mrengstad@yahoo.com>,
        Travis Bemann <bemann@execpc.com>
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] Caml productivity.
Cc: caml-list@inria.fr
In-Reply-To: <20020724094534.37196.qmail@web13303.mail.yahoo.com>
References: <20020723232036.A663@execpc.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


 > What is the
 > overhead for calling a function that is executing a
 > few assembly instructions?

I don't think inline assembly is a very valuable feature at this 
point.  Function call overhead on modern processors is very small, and 
enabling inline asm messes up a lot of compiler optimizations for 
surrounding code.

It's going to be another generation or two before a higher level language 
like caml is going to be appropriate for console games, and I don't think 
there's any way around that.  I think it's just starting to be okay for PC 
games, but even the next gen consoles are going to be too memory 
constrained and it's always much more cost-effective to super-optimize a 
console game (both memory- and cpu-wise), at least for the next few ship 
cycles.

On the original topic of this thread, I am still withholding judgment on 
caml for game programming until I actually finish my game, but I sincerely 
doubt it will be anywhere near 3x as productive for the kind of imperative 
simulation-y code that makes up a game.  If any game company could actually 
get 3x productivity out of their programmers, they'd retrain everybody in 
an instant.  3x is huge.  I think caml is definitely more fun to program 
with, but if it's at all more productive, it's going to be in the 10-40% 
range at best (and most of that is going to come from the gc).

Chris

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

