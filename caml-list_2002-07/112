Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA26121; Mon, 8 Jul 2002 03:00:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA26315 for <caml-list@pauillac.inria.fr>; Mon, 8 Jul 2002 03:00:10 +0200 (MET DST)
Received: from sunny.pacific.net.au (sunny.pacific.net.au [203.25.148.40])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g68108902822
	for <caml-list@inria.fr>; Mon, 8 Jul 2002 03:00:08 +0200 (MET DST)
Received: from wisma.pacific.net.au (wisma.pacific.net.au [210.23.129.72])
          by sunny.pacific.net.au with ESMTP
          id g68100Ss013011; Mon, 8 Jul 2002 11:00:00 +1000 (EST)
Received: from ozemail.com.au (ppp60.dyn18.pacific.net.au [61.8.18.60])
        by wisma.pacific.net.au with ESMTP
        id KAA16110; Mon, 8 Jul 2002 10:59:57 +1000 (EST)
Message-ID: <3D28E40C.3040302@ozemail.com.au>
Date: Mon, 08 Jul 2002 10:59:56 +1000
From: John Max Skaller <skaller@ozemail.com.au>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.2.1) Gecko/20010901
X-Accept-Language: en-us
MIME-Version: 1.0
To: Alessandro Baretta <alex@baretta.com>
CC: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] Re: generic programming
References: <200207030246.WAA28665@dewberry.cc.columbia.edu> <4.3.2.7.2.20020703102610.0248b280@mail.d6.com> <200207032004.QAA07689@dewberry.cc.columbia.edu> <3D235FDE.6080203@baretta.com> <3D246ABC.9010306@ozemail.com.au> <3D249B27.5080807@baretta.com> <3D25D27B.2020005@ozemail.com.au> <3D28A7AF.3010503@baretta.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Alessandro Baretta wrote:

> Dynamic loading? Hmmm... What about the Dynlink library? Is that not 
> what you are talking about? 

Yes, but it is bytecode. I want native code dynamic loading.
I never use bytecode.

Example: I want to build an extensible lexer. I can produce the Ocaml code
I want, but I can't compile it into a shared library which I can dlopen
and get the lex function out of.  So I have to generate C, including
the action functions :-(

I had the same problem with Vyper. I had to compile the whole
standard Python library (binary support parts) into the interpreter.
Very non-modular. By nature, all Python C modules have a
uniform interface, it would have been nice to be able to mimick
the Python technology and build the C support components
as dynamically loadable Ocaml.

-- 
John Max Skaller, mailto:skaller@ozemail.com.au
snail:10/1 Toxteth Rd, Glebe, NSW 2037, Australia.
voice:61-2-9660-0850




-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

