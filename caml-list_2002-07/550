Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA12187; Sun, 28 Jul 2002 03:46:42 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA12349 for <caml-list@pauillac.inria.fr>; Sun, 28 Jul 2002 03:46:41 +0200 (MET DST)
Received: from sunny.pacific.net.au (sunny.pacific.net.au [203.25.148.40])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id g6S1jmD13129
	for <caml-list@inria.fr>; Sun, 28 Jul 2002 03:45:55 +0200 (MET DST)
Received: from wisma.pacific.net.au (wisma.pacific.net.au [210.23.129.72])
          by sunny.pacific.net.au with ESMTP
          id g6S1jeSs028688; Sun, 28 Jul 2002 11:45:40 +1000 (EST)
Received: from ozemail.com.au (ppp136.dyn17.pacific.net.au [61.8.17.136])
        by wisma.pacific.net.au with ESMTP
        id LAA10510; Sun, 28 Jul 2002 11:45:38 +1000 (EST)
Message-ID: <3D434CC3.6030508@ozemail.com.au>
Date: Sun, 28 Jul 2002 11:45:39 +1000
From: John Max Skaller <skaller@ozemail.com.au>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.2.1) Gecko/20010901
X-Accept-Language: en-us
MIME-Version: 1.0
To: Alain Frisch <frisch@clipper.ens.fr>
CC: caml-list@inria.fr
Subject: Re: [Caml-list] equi-recursive Fold isomorphism
References: <Pine.SOL.4.44.0207272131260.18652-100000@clipper.ens.fr>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Alain Frisch wrote:

>My Recursive module uses the same technique; it may do what you want:
>http://www.eleves.ens.fr:8080/home/frisch/soft#recursive
>
Thanks!  

Hmmm: Ocaml 3.04+15 with -rectypes


# let rec x = (1,(1,(1,x)));;
val x : int * (int * (int * 'a)) as 'a =
 ....

Seem like Ocaml doesn't minimise the type, but:


let rec y = (1,y);;

x = y;;

Works correctly (so it knows the two types are comparable).
Interestingly, the answer is false: both data structures 
consist of an infinite stream of 1's, represented by
cycles of distinct lengths. No item by item comparison
could reveal any distinction: the infinite tree expansions
of the data structures are the same. Is Ocaml's answer correct?


-- 
John Max Skaller, mailto:skaller@ozemail.com.au
snail:10/1 Toxteth Rd, Glebe, NSW 2037, Australia.
voice:61-2-9660-0850




-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

