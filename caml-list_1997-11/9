Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA14529 for caml-redistribution; Tue, 18 Nov 1997 13:22:02 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA12581 for <caml-list@pauillac.inria.fr>; Tue, 18 Nov 1997 11:42:14 +0100 (MET)
Received: from pcmath65.unice.fr (pcmath65.unice.fr [134.59.10.65])
	by nez-perce.inria.fr (8.8.7/8.8.5) with ESMTP id LAA29136
	for <caml-list@inria.fr>; Tue, 18 Nov 1997 11:42:11 +0100 (MET)
Received: from math.unice.fr (localhost [127.0.0.1]) by pcmath65.unice.fr (8.8.3/8.8.3) with ESMTP id LAA04583 for <caml-list@inria.fr>; Tue, 18 Nov 1997 11:41:06 +0100
Message-ID: <347170C1.F92F478B@math.unice.fr>
Date: Tue, 18 Nov 1997 11:41:05 +0100
From: Vyskocil Vladimir <vyskocil@math.unice.fr>
Organization: UNSA
X-Mailer: Mozilla 4.04 [en] (X11; I; Linux 2.0.28 i686)
MIME-Version: 1.0
To: Caml list <caml-list@inria.fr>
Subject: Modules mutuellement recursifs ?
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis

Bonjour,

Est t'il possible de compiler des modules qui s'appelent mutuellement
en creant par exemple un module reunion ?

Soit

M1.ml :
let f x = if x = 0 then 0 else M2.g (x - 1)

M2.ml
let g x = if x = 0 then 1 else M1.f (x - 1)

Comment transformer ce petit exemple (en utilisant des foncteurs ?)
pour creer un module M qui donne acces aux fonctions M1.f et M2.g ?
(la solution triviale de tout mettre dans un seul fichier n'est pas
tres satisfaisante :)

				Merci par avance
 
-- 
Vyskocil Vladimir
vyskocil@math.unice.fr
http://pcmath65.unice.fr/~vyskocil
http://www.inria.fr/safir/WHOSWHO/Vladimir.html




