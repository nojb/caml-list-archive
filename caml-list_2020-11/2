Return-Path: <SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C4F75E02DA
	for <caml-list@sympa.inria.fr>; Tue,  3 Nov 2020 16:15:57 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=aBmF=EJ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3A58WB+hMa2mziwU7vb9sl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/jyr8bcNUDSrc9gkEXOFd2Cra4d1KyP6/urBTZIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfLF/IA+roQnNuMQajoRvJrgswRbVv3VEfP?=
 =?us-ascii?q?hby3l1LlyJhRb84cmw/J9n8ytOvv8q6tBNX6bncakmVLJUFDspPXw7683trhnD?=
 =?us-ascii?q?UBCA5mAAXWUMkxpHGBbK4RfnVZrsqCT6t+592C6HPc3qSL0/RDqv47t3RBLulS?=
 =?us-ascii?q?wIMCM38HzMisxokq1UvA6hqRJ4w47Reo6VNfx+db7Zcd4VQWdNW8BcWyxCDIO6?=
 =?us-ascii?q?cYsPDvEBPedDoIn5uVQFsBW/BQ62BOzy0T9Dm3v60KMm3+gkFwzNwQ4uEM8UsH?=
 =?us-ascii?q?nMrNv7KrocX+62wqbH0TrOdOlZ1Svn5YXSbhwtvfOBULRtesTR00kvEAbFg02M?=
 =?us-ascii?q?pIzhJTyV0PkGvXWH4OpgUOKvinInqx1sqTWo3MgsjpPGhoQPxlDf6Sp5wIM1Jd?=
 =?us-ascii?q?ykSE5netOkCJxQtyWaNotqXMwtX2FouCA7yr0fpJ60YjIGyJM9xx7QcvGKdZWD?=
 =?us-ascii?q?7R3/WuiLOzh4mG5ld6ylhxa06UWtyvHwWMmo3VtUsCZInNbCuH8O2hLc68WKVP?=
 =?us-ascii?q?Rz8lq/1DuAywzd6v1IL0AomKfVKJMswr49moYNvUnHECH7m1j7gamLfUsq/eio?=
 =?us-ascii?q?7v7oYrTgppKEL497lB3+MqUymsOhGeQ4NQ0OX22F9uim0r3s41H5TK1NjvIqiK?=
 =?us-ascii?q?bZtZTaKd4cpq6jDA9Zypoj6xGiADeh1dQYg2UIIEhZdxKAiojlI17OIPHkDfe/?=
 =?us-ascii?q?nlSjiy1nyOzBPr3kGpnCMGLDkK37crZh6k5c0Rczws5F651ICrENOOz8Wkv0tN?=
 =?us-ascii?q?DBCh82KQq0w+n9BNV6zIMeVnqDDbODP6PXq1OH/P4gL/ORZI8WoDr9KeIq5/jw?=
 =?us-ascii?q?gn8ihV8dZ7em0oULaHyiAvtmJECZbWLtgtcHC2cKvxAxQPbkiF2YSTJTYneyX7?=
 =?us-ascii?q?gm6TE0Fo2qF4bDRoe1jLObwCe7AodWZmFdBVCRDXfnaZiLV+0WZyKOOsNhnT0E?=
 =?us-ascii?q?VaShS488zh6irg76y71/IurT4C0YtJ3j1Nlz5+HKkRE97yd7D9+H322XU250mW?=
 =?us-ascii?q?YISycx3KBloEx9xVaD0a5hj/xcD9Nc/OhJXh0mOp7byux2E839VRjbfteKTFap?=
 =?us-ascii?q?WNOmAT4rQt0txN8OZl5xG9S/gRHD2yqqB6UZl7uRBJw79K/Xwnv/J95lxnrbyq?=
 =?us-ascii?q?Usi0MqTtZTOWCpnKJy+RTfC5THnkiWj6qnd6cR0DTT+GqM02aCplxUXQFqXanY?=
 =?us-ascii?q?Un0Tek3bpsnj6EzYVb+hE7EnPxNBycGcLqtKbcXkjVBJRfv+Itjee2Wxm2OwBB?=
 =?us-ascii?q?aU2LyDcIrqe2Mc3CXEFUgLjRof/XGcNQgxHiuhomTeAyJyFV/3fk/g7+1zpGmm?=
 =?us-ascii?q?QkMowAyGdUNs26av9hMbivGQU/YT0agFuCclpTV0BlG939fOBtSduwRvYblQbM?=
 =?us-ascii?q?sn71pa0GLXtxRwMJOkIa16nl4edAB3vkPy1xppFopAkc4qrHIzzApvN62UylRB?=
 =?us-ascii?q?dymX3Z3oILLXLnP9/Ba1Z67Nxl7e0NOW+qYT6PQksFjspwapFlck83p7zdZVyG?=
 =?us-ascii?q?GQ5pDFAQsdS57xVVw39xdiq7HAfiY9/5/U1WFrMaSsrjDNwdcpBO88xhakftdf?=
 =?us-ascii?q?K7+EGRTpE8waAsiuMPYll0KobhICJuBS9bQ7M9mod/uci+aXO7MqmC2gxywT5J?=
 =?us-ascii?q?97+kaT8Wx6R/Kem95PyO6elEPPAzzjin+ls9vrgsZFaSAWGiy40yeyQMZab6h2?=
 =?us-ascii?q?OIIKEnuGIsutx9w4iYSpE3Vf8UaLA1IdxNTvfgCYbkD02QNXxQIavC+Jgyy9mh?=
 =?us-ascii?q?VwmjdhlaGf2S3S36y2fR4OPChQT2lnjEvwCZCzi8EGUUOoaQkwiRbj4lz1kfsI?=
 =?us-ascii?q?7J9jJnXeFB8bNxP9KHtvB/Th7+vQU4t08Jot9B5vfqG5aFGeRKT6pkJFgSnkAm?=
 =?us-ascii?q?1VySt9cm26/JLjkE4j0T7PHDNItHPcPPpI61LH/tWFFKxJ2T4XWCRziT/WH0Wx?=
 =?us-ascii?q?ed6z8ofNzsqRgqWFT2ukE6ZrX2zrwIeH7nDp4H0zRwW4m+Gvl9bnFwkjzCK90M?=
 =?us-ascii?q?NlB3zF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BKAwDbc6FffSIeaIFYAQkWgkSBIVIGQ?=
 =?us-ascii?q?AFeUQUyLoQ9gWCHJYkaAYIQhUSNZYQEgREDTxABAwENGAEOBQECBAEBgVWBQHF?=
 =?us-ascii?q?EAoIKAh4GAQUzEwIQAQEFAQEBAgEDAwQBEwEBDxQIhhEMQwEQAYFiDAwDA4MiA?=
 =?us-ascii?q?wEYAQgEBj8GBBwUDwMUAQYDAhEBFwEUCgMUARIaAYJATIJ8BAEKlCacBX8zhD4?=
 =?us-ascii?q?BAwMEBwIDDy4Bg2uBQg0CE4EWAYVSToMGCIQLD4FNP4ERghRJB2yCQAYMCwEBA?=
 =?us-ascii?q?QEBARWBEAkBCgEBAgQETIJhgl8EkBQSHQWKWYk4giyQcCsHgnCBEAQLhmmBAoZ?=
 =?us-ascii?q?fhDqHCIMYgSqIaIVMjnYhkyyBfoIrg2AHdwiBaYIfg2+BcokbhFmBQSqBejMaM?=
 =?us-ascii?q?EOCNQEBMglgDY18LxeBAgEJghoogT6BJoF1O4Jmgl9AMwIBAQctAgYBCQEBAwl?=
 =?us-ascii?q?1AQEFEwsBgjCIOIJFAQE?=
X-IPAS-Result: =?us-ascii?q?A0BKAwDbc6FffSIeaIFYAQkWgkSBIVIGQAFeUQUyLoQ9gWC?=
 =?us-ascii?q?HJYkaAYIQhUSNZYQEgREDTxABAwENGAEOBQECBAEBgVWBQHFEAoIKAh4GAQUzE?=
 =?us-ascii?q?wIQAQEFAQEBAgEDAwQBEwEBDxQIhhEMQwEQAYFiDAwDA4MiAwEYAQgEBj8GBBw?=
 =?us-ascii?q?UDwMUAQYDAhEBFwEUCgMUARIaAYJATIJ8BAEKlCacBX8zhD4BAwMEBwIDDy4Bg?=
 =?us-ascii?q?2uBQg0CE4EWAYVSToMGCIQLD4FNP4ERghRJB2yCQAYMCwEBAQEBARWBEAkBCgE?=
 =?us-ascii?q?BAgQETIJhgl8EkBQSHQWKWYk4giyQcCsHgnCBEAQLhmmBAoZfhDqHCIMYgSqIa?=
 =?us-ascii?q?IVMjnYhkyyBfoIrg2AHdwiBaYIfg2+BcokbhFmBQSqBejMaMEOCNQEBMglgDY1?=
 =?us-ascii?q?8LxeBAgEJghoogT6BJoF1O4Jmgl9AMwIBAQctAgYBCQEBAwl1AQEFEwsBgjCIO?=
 =?us-ascii?q?IJFAQE?=
X-IronPort-AV: E=Sophos;i="5.77,448,1596492000"; 
   d="scan'208,217";a="475661380"
X-MGA-submission: =?us-ascii?q?MDGXfViTv0GjDQH5IdH1cJ3jG1Xe4rsHG2kg7/?=
 =?us-ascii?q?4z2eLRpcLVEhWi6mqaFtjGHs7N/HOY021v8pj9J+ZIUxO1MSQvvfzctd?=
 =?us-ascii?q?CeduuRvELWEXnPqDA1uwfVU3vPmu9PdU9u4TCd0sWApSpXWDPrX0trM9?=
 =?us-ascii?q?wPQ6d2DQ5YvQfX7E7LFneEqw=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Nov 2020 16:15:48 +0100
Received: from set (cbg35-2-78-242-14-140.fbx.proxad.net [78.242.14.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id C584F5613BA;
	Tue,  3 Nov 2020 16:15:46 +0100 (CET)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr,
 comp@lists.orbitalfox.eu
Date: Tue, 03 Nov 2020 16:15:46 +0100
Message-ID: <87pn4ujwt9.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Nov  3 16:15:47 2020 +0100 (CET))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.008323, queueID=771C05613BD
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of October 27 to
November 03, 2020.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Brr 0.0.1, a toolkit for programming browsers
New release of Monolith (20201026)
MirageOS 3.9.0 released
An AST typing problem
erlang 0.0.14, a toolkit to manipulate Erlang sources
opam-bin.1.0.0: binary packages for opam
Interesting OCaml Articles
Old CWN


Brr 0.0.1, a toolkit for programming browsers
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-brr-0-0-1-a-toolkit-for-programming-brow=
sers/6608/9>


Continuing this thread, Daniel B=C3=BCnzli said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

  One thing I forgot, is that there is a [todomvc] example in the repo,
  see `todomvc.{html,ml}' in [this directory].

  It doesn't use the UI toolkit you mentioned, just the basic reactive
  DOM support provided by [`Brr_note'] and [`Brr_note_kit']. But you can
  see how quickly you get reusable and composable components like
  [`bool_editor'] and [`string_editor'].

  The program structure in that example is quite similar to the one I
  had in the drawing app. You define a purely functional, non reactive
  [data model], [actions] over the data model, create small UI fragments
  that renders parts of your data model and generate actions events for
  it, gradually glue them together using note combinators and finally
  define a [fixed point signal] that holds the data model as massaged by
  the actions events of your UI (as mentioned I'd like to replace fix
  points by direct `let rec' and a lazy infinitesimal delay combinator).

  There are a few pitfalls like you should avoid retaining parts of your
  data model in the UI otherwise you could get outdated data come back
  in your model (makes for very fun and spooky bugs though).  Identity
  in the data model is also a bit tricky, it seems in todomvc I [used]
  `=3D=3D'. That didn't work in the drawing app where my surfaces had
  properties that could be updated but they could also be linked
  toghether (that window belongs to that wall etc.) so I needed stable
  identifiers for which I introduced a little abstraction to identify
  values and define relations between them.

  One thing I remember fondly when doing the drawing app is that I would
  still get the odd interaction glitches you get when coding direct
  mouse manipulation interactions (surface
  definition/selection/move/transform) however thanks to the ability to
  denotationally reason and act (left leaning [`E.select']) on the
  simultaneity of events, they were easy to understand and fix in an
  explicit way (that is via a defining *expression*).

  Also if you get into [`Note'] the denotational semantics notation is
  not yet explained there, refer to the [one of react] it's the same.


[todomvc] <http://todomvc.com/>

[this directory] <https://github.com/dbuenzli/brr/tree/master/test>

[`Brr_note'] <https://erratique.ch/software/brr/doc/Brr_note/index.html>

[`Brr_note_kit']
<https://erratique.ch/software/brr/doc/Brr_note_kit/index.html>

[`bool_editor']
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L229>

[`string_editor']
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L213-L214>

[data model]
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L36>

[actions]
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L101>

[fixed point signal]
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L314-L324>

[used]
<https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2ddd56b0712b=
411/test/todomvc.ml#L84>

[`E.select']
<https://erratique.ch/software/note/doc/Note/E/index.html#val-select>

[`Note'] <https://erratique.ch/software/note/doc/Note/>

[one of react]
<https://erratique.ch/software/react/doc/React/index.html#sem>


Yoann Padioleau asked and Daniel B=C3=BCnzli replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

        How hard would it be to build on top of Brr_note something
        like an Elm Architecture-style toolkit? I know there's a
        TEA-Bucklescript library, but I'd rather use something
        relying on dune/jsoo.

        I've read somewhere else that you were a bit skeptical
        about the advantage of MVU (movel-view-update) over MVC,
        but I personnaly find the counter UI example in ELM at
        <https://guide.elm-lang.org/architecture/buttons.html> far
        simpler than the corresponding one in Brr at
        <https://github.com/barko/brr-eg/blob/master/counter/counter.ml>

  I don't know. I didn't look into MVU too much, but to me it's largely
  a remix of MVC =E2=80=93 despite what its proponents try to tell you. Sin=
ce we
  now live in an age of software adverstising it's a bit hard to get
  frank assessments.

  As far as I'm concerned the compositionality story of MVU doesn't look
  great. Basically it enforces state machines on you, and composing
  state machines is a bit meh. In FRP state machines become signals (via
  `S.accum') which are highly composable entities with *fine
  granularity* (and bonus point, a well defined denotational semantics
  for equational reasoning).

  If you are looking for MVU I think you can simply jump on [LexiFI's
  vdom]. But when I see how you get to [compose two models] in that
  paradigm, I'm not convinced.

        There=E2=80=99s no need for those E.select. The UI is IMHO more
        declarative in ELM.

  That example could be rewritten (I didn't write the examples in this
  repo) to be more like the ELM one in it's declarations.

  But I think the ELM example is also more rigid. You may not like that
  `E.select' on this toy example, but you may get to enjoy it you when
  you start composing larger systems from smaller components.


[LexiFI's vdom] <https://github.com/LexiFi/ocaml-vdom>

[compose two models]
<https://github.com/LexiFi/ocaml-vdom/blob/9c5e42888ba72e69d5a018e38a4633e4=
00913bfb/examples/demo/demo.ml#L196-L223>


Yaron Minsky then said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  You might be interested in Bonsai! At some level, you can think of it
  as a library for building composable state machines. It uses
  [Incremental] as its engine for incrementalizing the computation of
  views, with a virtual-dom implementation underneath.

  <https://github.com/janestreet/bonsai>

  It's the primary tool we use for building UIs inside of Jane Street.

  In some ways, Bonsai is like Elm, but it has its own interesting
  ideas. Some of the concepts are borrowed from this paper:

  <https://www.cl.cam.ac.uk/~jdy22/papers/the-arrow-calculus.pdf>

  though I won't pretend to understand this paper myself!

  Bonsai doesn't yet have enough public-facing documentation, and really
  the bleeding edge version on github is considerably better and more
  usable than the one released into opam. But there's at least one
  public-facing UI that's built with it, if you want a real-world
  example.

  <https://blog.janestreet.com/finding-memory-leaks-with-memtrace/>


[Incremental] <https://github.com/janestreet/incremental>


Yoann Padioleau replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Thx for the links!

  The memtrace viewer example is pretty cool, but Bonsai looks far more
  complicated than ELM.  If you look at the counter example (the hello
  world of UI), here:
  <https://github.com/janestreet/bonsai/blob/master/examples/counters/lib/b=
onsai_web_counters_example.ml>

  and you compare it to the one in ocaml-vdom (thx @dbuenzli for the
  link) at
  <https://github.com/LexiFi/ocaml-vdom/blob/master/examples/counters/count=
ers.ml>

  there's a huge difference in simplicity.


Ty Overby then said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  Hi Aryx, I wrote the Bonsai example that you linked, and it certainly
  isn't the most concise, but that's because it was built for a tutorial
  on building small components (one counter is a single component), how
  to use more advanced combinators (Bonsai.assoc), and how to move data
  from one component to another (the add_counter_component into the
  associated counters component.)  I think it's a great example of the
  power of structuring an UI as a DAG rather than a tree, but it
  definitely doesn't make for the most concise code!

  In the example, the comments that look like "CODE_EXCERPT_BEGIN" are
  actually preprocessor definitions that are used in the (honestly,
  kinda out of date) [tutorial here].  A bonsai app that wasn't written
  for such a tutorial would look more like [this].


[tutorial here]
<https://github.com/janestreet/bonsai/blob/master/docs/getting_started/open=
_source/counters.mdx>

[this]
<https://gist.github.com/TyOverby/e0f7e944d002cdf7144aaf0102d16ed5>


New release of Monolith (20201026)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-new-release-of-monolith-20201026/6667/1>


Fran=C3=A7ois Pottier announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80

  It is my pleasure to announce a major new release of Monolith.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 opam update && opam install monolith
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Monolith offers facilities for testing an OCaml library (for instance,
  a data structure implementation) by comparing it against a reference
  implementation. It can be used to perform either random testing or
  fuzz testing. Fuzz testing relies on the external tool afl-fuzz.

  More information on Monolith is available [here] and in the draft
  paper [Strong Automated Testing of OCaml Libraries].


[here] <https://gitlab.inria.fr/fpottier/monolith>

[Strong Automated Testing of OCaml Libraries]
<http://cambium.inria.fr/~fpottier/publis/pottier-monolith-2021.pdf>


MirageOS 3.9.0 released
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-mirageos-3-9-0-released/6668/1>


Martin Lucina announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  We are pleased to announce the release of MirageOS 3.9.0.

  Our last release announcement was for [MirageOS 3.6.0], so we will
  also cover changes since 3.7.x and 3.8.x in this announcement.

  New features:

  =E2=80=A2 The Xen backend has been [re-written from scratch] to be based =
on
    Solo5, and now supports PVHv2 on Xen 4.10 or higher, and QubesOS
    4.0.
  =E2=80=A2 As part of this re-write, the existing Mini-OS based implementa=
tion
    has been retired, and all non-UNIX backends now use a unified OCaml
    runtime based on `ocaml-freestanding'.
  =E2=80=A2 OCaml runtime settings settable via the `OCAMLRUNPARAM' environ=
ment
    variable are now exposed as unikernel boot parameters. For details,
    refer to [#1180].

  Security posture improvements:

  =E2=80=A2 With the move to a unified Solo5 and ocaml-freestanding base
    MirageOS unikernels on Xen gain several notable improvements to
    their overall security posture such as SSP for all C code, W^X, and
    malloc heap canaries. For details, refer to the mirage-xen 6.0.0
    release [announcement].

  API breaking changes:

  =E2=80=A2 Several Xen-specific APIs have been removed or replaced, uniker=
nels
    using these may need to be updated. For details, refer to the
    mirage-xen 6.0.0 release [announcement].

  Other notable changes:

  =E2=80=A2 `Mirage_runtime' provides event loop enter and exit hook
    registration ([#1010]).
  =E2=80=A2 All MirageOS backends now behave similarly on a successful exit=
 of
    the unikernel: they call `exit' with the return value 0, thus
    `at_exit' handlers are now executed ([#1011]).
  =E2=80=A2 The unix backend used a toplevel exception handler, which has b=
een
    removed. All backends now behave equally with respect to exceptions.
  =E2=80=A2 Please note that the `Mirage_net.listen' function still install=
s an
    exception handler, which will be removed in a future release. The
    out of memory exception is no longer caught by `Mirage_net.listen'
    ([#1036]).
  =E2=80=A2 To reduce the number of OPAM packages, the `mirage-*-lwt' packa=
ges
    are now deprecated. `Mirage_net' (and others) now use `Lwt.t'
    directly, and their `buffer' type is `Cstruct.t' ([#1004]).
  =E2=80=A2 OPAM files generated by `mirage configure' now include opam bui=
ld
    and installation instructions, and also an URL to the Git `origin'
    ([#1022]).

  Known issues:

  =E2=80=A2 `mirage configure' fails if the unikernel is under version cont=
rol
    and no `origin' remote is present ([#1188]).
  =E2=80=A2 The Xen backend has issues with event delivery if built with an
    Alpine Linux GCC toolchain. As a work-around, please use a Fedora or
    Debian based toolchain.

  Acknowledgements:

  =E2=80=A2 Thanks to Roger Pau Monn=C3=A9, Andrew Cooper and other core Xen
    developers for help with understanding the specifics of how Xen
    PVHv2 works, and how to write an implementation from scratch.
  =E2=80=A2 Thanks to Marek Marczykowski-G=C3=B3recki for help with the Qub=
esOS
    specifics, and for forward-porting some missing parts of PVHv2 to
    QubesOS version of Xen.
  =E2=80=A2 Thanks to @palainp on Github for help with testing on QubesOS.


[MirageOS 3.6.0] <https://mirage.io/blog/announcing-mirage-36-release>

[re-written from scratch] <https://github.com/mirage/mirage/issues/1159>

[#1180] <https://github.com/mirage/mirage/pull/1180>

[announcement]
<https://github.com/mirage/mirage-xen/releases/tag/v6.0.0>

[#1010] <https://github.com/mirage/mirage/pull/1010>

[#1011] <https://github.com/mirage/mirage/pull/1011>

[#1036] <https://github.com/mirage/mirage/issues/1036>

[#1004] <https://github.com/mirage/mirage/issues/1004>

[#1022] <https://github.com/mirage/mirage/pull/1022>

[#1188] <https://github.com/mirage/mirage/issues/1188>


An AST typing problem
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/an-ast-typing-problem/3677/8>


Chet Murthy announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This note discusses the beginnings of an OCaml attribute-grammar
  evaluator generator.  You can find this code on github at
  `camlp5/pa_ppx_ag'.

  All of this code is implemented using `camlp5' and the `pa_ppx' suite
  of PPX rewriters.

  Caveat: this code is less than a week old, so it's changing fast.  In
  the unlkely event that anybody out there is actually interested in
  using this code, I'm happy to help in any way I can.  But just be
  aware that it's changing -really- fast.


Attribute Grammars for the multipass AST analysis problem
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  A year-and-a-half ago, the OP "An AST Typing Problem"
  (<https://discuss.ocaml.org/t/an-ast-typing-problem/3677>) raised the
  problem of how to deal with ASTs, in the presence of multiple passes
  of program-analysis, each of which will want to hang various bits of
  data off nodes.  The author of the OP pointed also at a couple of
  posts on Lambda-the-Ultimate (LtU), discussing related problems.

  The author notes:

        There=E2=80=99s a lot of passes, many of which depend on the
        previous ones, each one making some slight change to the
        AST which might or might not result in having to walk
        through the whole AST to catch all occurrences of that
        particular node. Clearly you=E2=80=99ll want to encode semantic
        errors in the types, so each pass ends up having its own
        unique AST, each depending on the previous one. To change
        a single node deep in the AST I have to write about a
        hundred lines of types and mapping functions=E2=80=99 worth of
        boilerplate. Any change in the lower levels of the AST
        bubbles up to the higher ones, and refactoring becomes a
        nightmare.

  I've been thinking about this problem ever since, and at the time, had
  suggested that while it seemed like attribute-grammars might be a
  workable solution, they were a pretty heavy hammer.  It doesn't help
  (of course) that there exist no attribute-grammar evaluator
  generators, for OCaml.  Also, at least in the LtU threads, there was
  discussion of modifying the AST, and having the analyses automatically
  be updated for the modified AST.  Obviously this would require an
  incremental re-attribution algorithm: more complexity and again,
  something that isn't implemented for OCaml.

  But imagine that there existed an attribute-grammar evaluator
  generator for OCaml.  So for a simple language of expressions, with an
  assignment-operator, we could write an evaluator as an
  attribute-grammar.  Imagine that you could write an ast like this
  (test1_ast.ml):
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 type expr =3D
  =E2=94=82     INT of int
  =E2=94=82   | BINOP of binop * expr * expr
  =E2=94=82   | UNOP of unop * expr
  =E2=94=82   | REF of string
  =E2=94=82   | ASSIGN of string * expr
  =E2=94=82   | SEQ of expr * expr
  =E2=94=82 and unop =3D UPLUS | UMINUS
  =E2=94=82 and binop =3D PLUS | MINUS | STAR | SLASH | PERCENT
  =E2=94=82 and prog =3D expr
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  and then (having elsewhere written parser/pretty-printer) declare
  attributes on those types (test1_variants.ml):
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 module Attributed =3D struct
  =E2=94=82   [%%import: Test1_ast.expr]
  =E2=94=82   [@@deriving attributed {
  =E2=94=82     attributed_module_name =3D AT
  =E2=94=82   ; normal_module_name =3D OK
  =E2=94=82   ; attributes =3D {
  =E2=94=82       expr =3D {
  =E2=94=82 	inh_env =3D [%typ: (string * int) list]
  =E2=94=82       ; syn_env =3D [%typ: (string * int) list]
  =E2=94=82       ; value_ =3D [%typ: int]
  =E2=94=82       }
  =E2=94=82     ; prog =3D {
  =E2=94=82 	value_ =3D [%typ: int]
  =E2=94=82       }
  =E2=94=82     ; binop =3D {
  =E2=94=82 	oper =3D [%typ: int -> int -> int]
  =E2=94=82       }
  =E2=94=82     ; unop =3D {
  =E2=94=82 	oper =3D [%typ: int -> int]
  =E2=94=82       }
  =E2=94=82     }
  =E2=94=82   }]
  =E2=94=82 end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  and then declare attribute equations (test1_ag.ml):
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 module REC =3D struct
  =E2=94=82 [%%import: Test1_variants.Attributed.AT.expr]
  =E2=94=82   [@@deriving ag {
  =E2=94=82     module_name =3D AG
  =E2=94=82   ; storage_mode =3D Records
  =E2=94=82   ; axiom =3D prog
  =E2=94=82   ; attributes =3D {
  =E2=94=82       expr =3D {
  =E2=94=82 	inh_env =3D [%typ: (string * int) list]
  =E2=94=82       ; syn_env =3D [%typ: (string * int) list]
  =E2=94=82       ; value_ =3D [%typ: int]
  =E2=94=82       }
  =E2=94=82     ; prog =3D {
  =E2=94=82 	value_ =3D [%typ: int]
  =E2=94=82       }
  =E2=94=82     ; binop =3D {
  =E2=94=82 	oper =3D [%typ: int -> int -> int]
  =E2=94=82       }
  =E2=94=82     ; unop =3D {
  =E2=94=82 	oper =3D [%typ: int -> int]
  =E2=94=82       }
  =E2=94=82     }
  =E2=94=82   ; attribution =3D {
  =E2=94=82       expr__INT =3D (
  =E2=94=82 	[%nterm 0].syn_env :=3D [%nterm 0].inh_env ;
  =E2=94=82 	[%nterm 0].value_ :=3D [%prim 1].intval
  =E2=94=82       )
  =E2=94=82     ; expr__BINOP =3D (
  =E2=94=82 	[%nterm expr.(1)].inh_env :=3D [%nterm expr].inh_env ;
  =E2=94=82 	[%nterm expr.(2)].inh_env :=3D [%nterm expr.(1)].syn_env ;
  =E2=94=82 	[%nterm expr].syn_env :=3D [%nterm expr.(2)].syn_env ;
  =E2=94=82 	[%nterm expr].value_ :=3D [%nterm binop.(1)].oper [%nterm expr=
.(1)].value_ [%nterm
  =E2=94=82 expr.(2)].value_
  =E2=94=82       )
  =E2=94=82     ; expr__UNOP =3D (
  =E2=94=82 	[%nterm expr.(1)].inh_env :=3D [%nterm expr].inh_env ;
  =E2=94=82 	[%nterm expr].syn_env :=3D [%nterm expr.(1)].syn_env ;
  =E2=94=82 	[%nterm expr].value_ :=3D [%nterm unop.(1)].oper [%nterm expr.=
(1)].value_
  =E2=94=82       )
  =E2=94=82     ; expr__REF =3D (
  =E2=94=82 	[%nterm 0].syn_env :=3D [%nterm 0].inh_env ;
  =E2=94=82 	[%nterm 0].value_ :=3D List.assoc [%prim 1].stringval [%nterm =
0].inh_env
  =E2=94=82       )
  =E2=94=82     ; expr__ASSIGN =3D (
  =E2=94=82 	[%nterm 0].syn_env :=3D ([%prim 1].stringval, [%nterm expr.(1)=
].value_) :: [%nterm
  =E2=94=82 expr.(1)].syn_env ;
  =E2=94=82 	[%nterm expr.(1)].inh_env :=3D [%nterm 0].inh_env ;
  =E2=94=82 	[%nterm 0].value_ :=3D [%nterm expr.(1)].value_
  =E2=94=82       )
  =E2=94=82     ; expr__SEQ =3D (
  =E2=94=82 	[%nterm 1].inh_env :=3D [%nterm 0].inh_env ;
  =E2=94=82 	[%nterm 2].inh_env :=3D [%nterm 1].syn_env ;
  =E2=94=82 	[%nterm 0].syn_env :=3D [%nterm 2].syn_env ;
  =E2=94=82 	[%nterm 0].value_ :=3D [%nterm 2].value_
  =E2=94=82       )
  =E2=94=82     ; prog =3D (
  =E2=94=82 	[%nterm 1].inh_env :=3D [] ;
  =E2=94=82 	[%nterm 0].value_ :=3D [%nterm 1].value_ ;
  =E2=94=82 	assert True
  =E2=94=82       )
  =E2=94=82     ; unop__UPLUS =3D (
  =E2=94=82 	[%nterm unop].oper :=3D fun x -> x
  =E2=94=82       )
  =E2=94=82     ; unop__UMINUS =3D (
  =E2=94=82 	[%nterm unop].oper :=3D fun x -> (- x)
  =E2=94=82       )
  =E2=94=82     ; binop__PLUS =3D (
  =E2=94=82 	[%nterm binop].oper :=3D (+)
  =E2=94=82       )
  =E2=94=82     ; binop__MINUS =3D (
  =E2=94=82 	[%nterm binop].oper :=3D (-)
  =E2=94=82       )
  =E2=94=82     ; binop__STAR =3D (
  =E2=94=82 	[%nterm binop].oper :=3D fun a b -> a*b
  =E2=94=82       )
  =E2=94=82     ; binop__SLASH =3D (
  =E2=94=82 	[%nterm binop].oper :=3D (/)
  =E2=94=82       )
  =E2=94=82     ; binop__PERCENT =3D (
  =E2=94=82 	[%nterm binop].oper :=3D (mod)
  =E2=94=82       )
  =E2=94=82     }
  =E2=94=82   }]
  =E2=94=82 end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  and then, turning a crank, you would get an evaluator:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let test_records ctxt =3D
  =E2=94=82   assert_equal 3 ({| x :=3D 1 ; x ; y :=3D 2 ; x + y |} |> pa_p=
rog_attributed |> REC.AG.evaluate)
  =E2=94=82 ; assert_equal 0 ({| x :=3D 1 ; y :=3D 2 ; x / y |} |> pa_prog_=
attributed |> REC.AG.evaluate)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  where `pa_prog_attributed' is a parser that parses the surface syntax
  into an AST, which has empty slots for all attributes, and
  `REC.AG.evaluate' evaluates attributes in its argument AST, and then
  returns a tuple of all the synthesized attributes of the root node.


Retaining familiar surface syntax for pattern-matching and constructing ASTs
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C

  Now, we don't want to give up easy pattern-matching and construction
  of the AST, just because the AST has attributes strewn throughout it.
  But we don't have to: with Camlp5's "quotations", once we define a
  surface syntax parser for the basic AST (unadorned with attributes =E2=80=
=93
  viz. `test1_ast.ml'), we can use that to bootstrap ourselves to a
  surface syntax parser for expressions and patterns over that AST, and
  then in a similar manner we can get them for the AST adorned with
  attributes.

  This has already been done for hashconsed ASTs, and ASTs with built-in
  unique-IDs, and and doing it for "attributed ASTs" isn't any harder.
  Those examples can be found in the github project
  `camlp5/pa_ppx_q_ast'.


Limitations
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C

  There are still limitations.

  1. The current code only implements topological-order evaluation.
     That is, it builds the entire dependency-graph, topologically-sorts
     it, and then evaluates attributes.  This is =E2=80=A6. suboptimal, whe=
n we
     well know that almost all interesting AGs are already in the class
     of ordered attribute-grammars (OAGs).  I plan to implement the OAG
     evaluation strategy next.

  2. Traditionally AGs are defined over "productions" which are
     sequences of nonterminals and terminals.  This doesn't correspond
     to the way we define OCaml constructor data-types.  So instead of a
     constructor like

     =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
     =E2=94=82 type expr =3D
     =E2=94=82   ... | Call of name * arg_list
     =E2=94=82 and arg_list =3D NoArgs | SomeArgs of expr * arg_list
     =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
     we might want to use ~ 'a list~
     =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
     =E2=94=82 type expr =3D
     =E2=94=82   ... | Call of name * expr list
     =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

     Problem is: defining attribute-equations for (effectively) an array
     of nodes, is not part of the standard lingo of AGs.  But I believe
     we can invent new syntax and make this succinct.

  3. Storage optimization.  A naive implementation of AGs can store all
     attributes ever computed, at all the nodes in the AST.  This can
     use a lot of memory.  But there are well-known techniques to
     discard attributes once they'll never more be needed in the rest of
     the attribute-evaluation, and I plan to implement these techniques.

  There's an entire literature on things like remote-references in
  attribute grammars, aggregates, and other things, all of which can
  probably be usefully employed.


Conclusion
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C

  I think that attribute-grammars could be a useful way to structure
  complex multipass program-analysis, just as they used to do back in
  the good ol' days.

  Maybe worth a look-see!


erlang 0.0.14, a toolkit to manipulate Erlang sources
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-erlang-0-0-14-a-toolkit-to-manipulate-er=
lang-sources/6694/1>


ostera announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hej, hope you're staying safe :raised_hands:

  I'm excited to share with you the first release of `erlang'.

  *tl;dr*: _parser/lexer/ast/printer for Erlang_


Description
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C

  `erlang' is a toolkit for manipulating Standard Erlang and Core Erlang
  sources and their abstract syntax trees according to the Erlang
  specifications.

  Version 0.0.14 provides:
  =E2=80=A2 A lexer/parser written in Menhir for Standard Erlang
  =E2=80=A2 ASTs for Core Erlang and Standard Erlang
  =E2=80=A2 An AST helper module for constructing Standard Erlang programs
  =E2=80=A2 A printer for the Standard Erlang AST (of highly volatile
    prettiness)
  =E2=80=A2 Support to turn ASTs to S-expressions
  =E2=80=A2 `erldump', a binary tool for reading Erlang sources and printing
    their concrete syntax trees as S-expressions.

  It is distributed under Apache-2.0 license, depends on Menhir and
  Cmdliner, and it is being developed as part of the Caramel project.

  =E2=80=A2 *PR*: <https://github.com/ocaml/opam-repository/pull/17553> =E2=
=80=93 should
     be on opam.ocaml.org sometime tomorrow :)
  =E2=80=A2 *Homepage*: <https://github.com/AbstractMachinesLab/caramel>
  =E2=80=A2 *Install*: `opam install erlang'
  =E2=80=A2 *API Docs & manuals*: maybe on next release, but _follow the ty=
pes_,
     and the `Erlang.Ast_helper' module is modeled after the
     `Parsing.Ast_helper' so it should feel familiar.

  I started writing `erlang' to let Caramel do an entirely symbolic
  compilation from the OCaml typedtree that would still allow for other
  passes/checks to be made cleanly. It's come with a decent number of
  tests, and it can parse some OTP modules with small modifications.

  There's [a few outstanding issues] regarding the parsing for the next
  release, but it should be a starting point for anyone wanting to read
  sources and _do something_ with them. I plan on cover these issues in
  the rest of the year, but as with all open source, it may take longer.

  I'd like to add a few other things, like an AST invariants module to
  check that ASTs are actually valid Erlang programs, and
  transformations more suitable for static analyses of the sources.

  My thanks go to @antron, @c-cube, @Drup, @rgrinberg, and @mseri for
  helping me get around the OCaml compiler, Menhir, and eventually to
  get this version split from Caramel and released independently.  Also
  a shoutout to the Js_of_ocaml project that served as a starting point
  for the parser/lexer work here.

  If you can give me some feedback on the design and implementation, I'd
  very much like to hear your thoughts :slight_smile:

  For those of you hoping to start using it, _do not_ let it crash.


[a few outstanding issues]
<https://github.com/AbstractMachinesLab/caramel/issues?q=3Dis%3Aissue+is%3A=
open+label%3Alib%3Aerlang>


opam-bin.1.0.0: binary packages for opam
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-opam-bin-1-0-0-binary-packages-for-opam/=
6696/1>


Fabrice Le Fessant announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80

  I am happy to announce the first stable release of `opam-bin', version
  1.0.0, a framework to CREATE, USE and SHARE binary relocatable
  packages with opam, to speed-up installation of packages. It is easily
  installable from opam-repository, and available on Github:

  <https://ocamlpro.github.io/opam-bin>

  With opam-bin, you can :

  =E2=80=A2 build binary packages while installing their source counterpart=
 with
    opam
  =E2=80=A2 automatically reuse previously created binary packages instead =
of
    compiling them again
  =E2=80=A2 export and share your binary packages as part of opam repositor=
ies
    for other users/computers to use

  `opam-bin' is a framework in 3 parts :
  =E2=80=A2 a tool `opam-bin' to create binary packages:
    <https://ocamlpro.github.io/opam-bin>
  =E2=80=A2 a set of patches to make some packages relocatable (`opam-bin' =
will
    apply them automatically when building packages), including patches
    to make the OCaml distribution relocatable from version 4.02.0 to
    4.11.1: <https://github.com/ocamlpro/relocation-patches>
  =E2=80=A2 a set of contributed repositories of binary packages. For now, =
there
    is only one contribution, during the summer, by Origin Labs :
    <https://www.origin-labs.com/opam-bin/debian10.4-amd64/> containing
    5 repos, among which the "4.10.0" repo contains more than 1800
    packages. These repos can be used DIRECTLY WITH opam, WITHOUT USING
    opam-bin.

  This is the first stable release:
  =E2=80=A2 Specific support has been added in the current `master' branch =
of
    `opam' to make working with this version more convenient, by
    printing pre- and post- installation messages. Yet, it will still
    work with previous version of opam, but with no output on the
    terminal when calling opam.
  =E2=80=A2 The `sharing' option can be enabled to share files with hard-li=
nks
    between switches, making the creation of new local switches almost
    costless in time and disk space.

  `opam-bin' is a collaborative work between OCamlPro and Origin Labs.

  `opam-bin' is particularly useful if you create many local switches,
  as they become unexpensive. Tools like Drom (an OCaml project
  scaffolder, <https://ocamlpro.github.io/drom>) can take advantage of
  that to provide a cargo-like experience.


Interesting OCaml Articles
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/63>


Ryan Slade announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80

  Anyone who's been following this blog probably saw this coming:

  <https://blog.darklang.com/leaving-ocaml/>

  It's an interesting read and hopefully can be used as constructive
  criticism in order to improve the state of the OCaml ecosystem.


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <http://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <http://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <http://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2020-11-03 Tue 16:08 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.10.27.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2020.11.10.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of October 27 to Novembe=
r 03, 2020.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">Brr 0.0.1, a toolkit for programming browsers</a></li>
<li><a href=3D"#2">New release of Monolith (20201026)</a></li>
<li><a href=3D"#3">MirageOS 3.9.0 released</a></li>
<li><a href=3D"#4">An AST typing problem</a></li>
<li><a href=3D"#5">erlang 0.0.14, a toolkit to manipulate Erlang sources</a=
></li>
<li><a href=3D"#6">opam-bin.1.0.0: binary packages for opam</a></li>
<li><a href=3D"#7">Interesting OCaml Articles</a></li>
<li><a href=3D"#orgcc2b37e">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-org9c4d55d" class=3D"outline-2">
<h2 id=3D"1">Brr 0.0.1, a toolkit for programming browsers</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-brr-0-0-1-a-toolkit-for=
-programming-browsers/6608/9">https://discuss.ocaml.org/t/ann-brr-0-0-1-a-t=
oolkit-for-programming-browsers/6608/9</a>
</p>
</div>

<div id=3D"outline-container-orgf70c794" class=3D"outline-3">
<h3 id=3D"orgf70c794">Continuing this thread, Daniel B=C3=BCnzli said</h3>
<div class=3D"outline-text-3" id=3D"text-orgf70c794">
<p>
One thing I forgot, is that there is a <a href=3D"http://todomvc.com/">todo=
mvc</a> example in the repo, see
<code>todomvc.{html,ml}</code> in <a href=3D"https://github.com/dbuenzli/br=
r/tree/master/test">this directory</a>.
</p>

<p>
It doesn't use the UI toolkit you mentioned, just the basic reactive DOM su=
pport provided by
<a href=3D"https://erratique.ch/software/brr/doc/Brr_note/index.html"><code=
>Brr_note</code></a> and
<a href=3D"https://erratique.ch/software/brr/doc/Brr_note_kit/index.html"><=
code>Brr_note_kit</code></a>. But you can see how
quickly you get reusable and composable components like
<a href=3D"https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2d=
dd56b0712b411/test/todomvc.ml#L229"><code>bool_editor</code></a>
and
<a href=3D"https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2d=
dd56b0712b411/test/todomvc.ml#L213-L214"><code>string_editor</code></a>.
</p>

<p>
The program structure in that example is quite similar to the one I had in =
the drawing app. You define
a purely functional, non reactive <a href=3D"https://github.com/dbuenzli/br=
r/blob/41580885f40bfd184c3d8e5be2ddd56b0712b411/test/todomvc.ml#L36">data
model</a>,
<a href=3D"https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2d=
dd56b0712b411/test/todomvc.ml#L101">actions</a>
over the data model, create small UI fragments that renders parts of your d=
ata model and generate
actions events for it, gradually glue them together using note combinators =
and finally define a <a href=3D"https://github.com/dbuenzli/brr/blob/415808=
85f40bfd184c3d8e5be2ddd56b0712b411/test/todomvc.ml#L314-L324">fixed
point
signal</a>
that holds the data model as massaged by the actions events of your UI (as =
mentioned I'd like to
replace fix points by direct <code>let rec</code> and a lazy infinitesimal =
delay combinator).
</p>

<p>
There are a few pitfalls like you should avoid retaining parts of your data=
 model in the UI otherwise
you could get outdated data come back in your model (makes for very fun and=
 spooky bugs though).
Identity in the data model is also a bit tricky, it seems in todomvc I
<a href=3D"https://github.com/dbuenzli/brr/blob/41580885f40bfd184c3d8e5be2d=
dd56b0712b411/test/todomvc.ml#L84">used</a>
<code>=3D=3D</code>. That didn't work in the drawing app where my surfaces =
had properties that could be updated but
they could also be linked toghether (that window belongs to that wall etc.)=
 so I needed stable
identifiers for which I introduced a little abstraction to identify values =
and define relations between
them.
</p>

<p>
One thing I remember fondly when doing the drawing app is that I would stil=
l get the odd interaction
glitches you get when coding direct mouse manipulation interactions (surface
definition/selection/move/transform) however thanks to the ability to denot=
ationally reason and act
(left leaning <a href=3D"https://erratique.ch/software/note/doc/Note/E/inde=
x.html#val-select"><code>E.select</code></a>) on the
simultaneity of events, they were easy to understand and fix in an explicit=
 way (that is via a defining
<b>expression</b>).
</p>

<p>
Also if you get into <a href=3D"https://erratique.ch/software/note/doc/Note=
/"><code>Note</code></a> the denotational semantics
notation is not yet explained there, refer to the <a href=3D"https://errati=
que.ch/software/react/doc/React/index.html#sem">one of
react</a> it's the same.
</p>
</div>
</div>


<div id=3D"outline-container-org6a11e9a" class=3D"outline-3">
<h3 id=3D"org6a11e9a">Yoann Padioleau asked and Daniel B=C3=BCnzli replied<=
/h3>
<div class=3D"outline-text-3" id=3D"text-org6a11e9a">
<blockquote>
<p>
How hard would it be to build on top of Brr_note something like an Elm Arch=
itecture-style toolkit? I
know there's a TEA-Bucklescript library, but I'd rather use something relyi=
ng on dune/jsoo.
</p>

<p>
I've read somewhere else that you were a bit skeptical about the advantage =
of MVU (movel-view-update)
over MVC, but I personnaly find the counter UI example in ELM at
<a href=3D"https://guide.elm-lang.org/architecture/buttons.html">https://gu=
ide.elm-lang.org/architecture/buttons.html</a>
far simpler than the corresponding one in Brr at
<a href=3D"https://github.com/barko/brr-eg/blob/master/counter/counter.ml">=
https://github.com/barko/brr-eg/blob/master/counter/counter.ml</a>
</p>
</blockquote>

<p>
I don't know. I didn't look into MVU too much, but to me it's largely a rem=
ix of MVC =E2=80=93 despite what its
proponents try to tell you. Since we now live in an age of software adverst=
ising it's a bit hard to get
frank assessments.
</p>

<p>
As far as I'm concerned the compositionality story of MVU doesn't look grea=
t. Basically it enforces
state machines on you, and composing state machines is a bit meh. In FRP st=
ate machines become signals
(via <code>S.accum</code>) which are highly composable entities with <b>fin=
e granularity</b> (and bonus point, a well
defined denotational semantics for equational reasoning).
</p>

<p>
If you are looking for MVU I think you can simply jump on <a href=3D"https:=
//github.com/LexiFi/ocaml-vdom">LexiFI's
vdom</a>. But when I see how you get to <a href=3D"https://github.com/LexiF=
i/ocaml-vdom/blob/9c5e42888ba72e69d5a018e38a4633e400913bfb/examples/demo/de=
mo.ml#L196-L223">compose two
models</a>
in that paradigm, I'm not convinced.
</p>

<blockquote>
<p>
There=E2=80=99s no need for those E.select. The UI is IMHO more declarative=
 in ELM.
</p>
</blockquote>

<p>
That example could be rewritten (I didn't write the examples in this repo) =
to be more like the ELM one
in it's declarations.
</p>

<p>
But I think the ELM example is also more rigid. You may not like that <code=
>E.select</code> on this toy example,
but you may get to enjoy it you when you start composing larger systems fro=
m smaller components.
</p>
</div>
</div>


<div id=3D"outline-container-orgfa6d2df" class=3D"outline-3">
<h3 id=3D"orgfa6d2df">Yaron Minsky then said</h3>
<div class=3D"outline-text-3" id=3D"text-orgfa6d2df">
<p>
You might be interested in Bonsai! At some level, you can think of it as a =
library for building
composable state machines. It uses <a href=3D"https://github.com/janestreet=
/incremental">Incremental</a> as its
engine for incrementalizing the computation of views, with a virtual-dom im=
plementation underneath.
</p>

<p>
<a href=3D"https://github.com/janestreet/bonsai">https://github.com/janestr=
eet/bonsai</a>
</p>

<p>
It's the primary tool we use for building UIs inside of Jane Street.
</p>

<p>
In some ways, Bonsai is like Elm, but it has its own interesting ideas. Som=
e of the concepts are
borrowed from this paper:
</p>

<p>
<a href=3D"https://www.cl.cam.ac.uk/~jdy22/papers/the-arrow-calculus.pdf">h=
ttps://www.cl.cam.ac.uk/~jdy22/papers/the-arrow-calculus.pdf</a>
</p>

<p>
though I won't pretend to understand this paper myself!
</p>

<p>
Bonsai doesn't yet have enough public-facing documentation, and really the =
bleeding edge version on
github is considerably better and more usable than the one released into op=
am. But there's at least one
public-facing UI that's built with it, if you want a real-world example.
</p>

<p>
<a href=3D"https://blog.janestreet.com/finding-memory-leaks-with-memtrace/"=
>https://blog.janestreet.com/finding-memory-leaks-with-memtrace/</a>
</p>
</div>
</div>


<div id=3D"outline-container-orgdc8734f" class=3D"outline-3">
<h3 id=3D"orgdc8734f">Yoann Padioleau replied</h3>
<div class=3D"outline-text-3" id=3D"text-orgdc8734f">
<p>
Thx for the links!
</p>

<p>
The memtrace viewer example is pretty cool, but Bonsai looks far more compl=
icated than ELM.
If you look at the counter example (the hello world of UI), here:
<a href=3D"https://github.com/janestreet/bonsai/blob/master/examples/counte=
rs/lib/bonsai_web_counters_example.ml">https://github.com/janestreet/bonsai=
/blob/master/examples/counters/lib/bonsai_web_counters_example.ml</a>
</p>

<p>
and you compare it to the one in ocaml-vdom (thx @dbuenzli for the link) at
<a href=3D"https://github.com/LexiFi/ocaml-vdom/blob/master/examples/counte=
rs/counters.ml">https://github.com/LexiFi/ocaml-vdom/blob/master/examples/c=
ounters/counters.ml</a>
</p>

<p>
there's a huge difference in simplicity.
</p>
</div>
</div>


<div id=3D"outline-container-org52bdb68" class=3D"outline-3">
<h3 id=3D"org52bdb68">Ty Overby then said</h3>
<div class=3D"outline-text-3" id=3D"text-org52bdb68">
<p>
Hi Aryx, I wrote the Bonsai example that you linked, and it certainly isn't=
 the most concise, but
that's because it was built for a tutorial on building small components (on=
e counter is a single
component), how to use more advanced combinators (Bonsai.assoc), and how to=
 move data from one
component to another (the add_counter_component into the associated counter=
s component.)  I think it's
a great example of the power of structuring an UI as a DAG rather than a tr=
ee, but it definitely
doesn't make for the most concise code!
</p>

<p>
In the example, the comments that look like "CODE_EXCERPT_BEGIN" are actual=
ly preprocessor definitions
that are used in the (honestly, kinda out of date) <a href=3D"https://githu=
b.com/janestreet/bonsai/blob/master/docs/getting_started/open_source/counte=
rs.mdx">tutorial
here</a>.
A bonsai app that wasn't written for such a tutorial would look more like
<a href=3D"https://gist.github.com/TyOverby/e0f7e944d002cdf7144aaf0102d16ed=
5">this</a>.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org299be7b" class=3D"outline-2">
<h2 id=3D"2">New release of Monolith (20201026)</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-new-release-of-monolith=
-20201026/6667/1">https://discuss.ocaml.org/t/ann-new-release-of-monolith-2=
0201026/6667/1</a>
</p>
</div>

<div id=3D"outline-container-org49a5c74" class=3D"outline-3">
<h3 id=3D"org49a5c74">Fran=C3=A7ois Pottier announced</h3>
<div class=3D"outline-text-3" id=3D"text-org49a5c74">
<p>
It is my pleasure to announce a major new release of Monolith.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam update &amp;&amp; opam install monolith
</pre>
</div>

<p>
Monolith offers facilities for testing an OCaml library (for instance, a da=
ta structure implementation)
by comparing it against a reference implementation. It can be used to perfo=
rm either random testing or
fuzz testing. Fuzz testing relies on the external tool afl-fuzz.
</p>

<p>
More information on Monolith is available <a href=3D"https://gitlab.inria.f=
r/fpottier/monolith">here</a> and in the
draft paper <a href=3D"http://cambium.inria.fr/~fpottier/publis/pottier-mon=
olith-2021.pdf">Strong Automated Testing of OCaml
Libraries</a>.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org6f65497" class=3D"outline-2">
<h2 id=3D"3">MirageOS 3.9.0 released</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-mirageos-3-9-0-released=
/6668/1">https://discuss.ocaml.org/t/ann-mirageos-3-9-0-released/6668/1</a>
</p>
</div>

<div id=3D"outline-container-org137976d" class=3D"outline-3">
<h3 id=3D"org137976d">Martin Lucina announced</h3>
<div class=3D"outline-text-3" id=3D"text-org137976d">
<p>
We are pleased to announce the release of MirageOS 3.9.0.
</p>

<p>
Our last release announcement was for <a href=3D"https://mirage.io/blog/ann=
ouncing-mirage-36-release">MirageOS
3.6.0</a>, so we will also cover changes since 3.7.x
and 3.8.x in this announcement.
</p>

<p>
New features:
</p>

<ul class=3D"org-ul">
<li>The Xen backend has been <a href=3D"https://github.com/mirage/mirage/is=
sues/1159">re-written from scratch</a> to be based on Solo5, and now suppor=
ts PVHv2 on Xen 4.10 or higher, and QubesOS 4.0.</li>
<li>As part of this re-write, the existing Mini-OS based implementation has=
 been retired, and all non-UNIX backends now use a unified OCaml runtime ba=
sed on <code>ocaml-freestanding</code>.</li>
<li>OCaml runtime settings settable via the <code>OCAMLRUNPARAM</code> envi=
ronment variable are now exposed as unikernel boot parameters. For details,=
 refer to <a href=3D"https://github.com/mirage/mirage/pull/1180">#1180</a>.=
</li>
</ul>

<p>
Security posture improvements:
</p>

<ul class=3D"org-ul">
<li>With the move to a unified Solo5 and ocaml-freestanding base MirageOS u=
nikernels on Xen gain several notable improvements to their overall securit=
y posture such as SSP for all C code, W^X, and malloc heap canaries. For de=
tails, refer to the mirage-xen 6.0.0 release <a href=3D"https://github.com/=
mirage/mirage-xen/releases/tag/v6.0.0">announcement</a>.</li>
</ul>

<p>
API breaking changes:
</p>

<ul class=3D"org-ul">
<li>Several Xen-specific APIs have been removed or replaced, unikernels usi=
ng these may need to be updated. For details, refer to the mirage-xen 6.0.0=
 release <a href=3D"https://github.com/mirage/mirage-xen/releases/tag/v6.0.=
0">announcement</a>.</li>
</ul>

<p>
Other notable changes:
</p>

<ul class=3D"org-ul">
<li><code>Mirage_runtime</code> provides event loop enter and exit hook reg=
istration (<a href=3D"https://github.com/mirage/mirage/pull/1010">#1010</a>=
).</li>
<li>All MirageOS backends now behave similarly on a successful exit of the =
unikernel: they call <code>exit</code> with the return value 0, thus <code>=
at_exit</code> handlers are now executed (<a href=3D"https://github.com/mir=
age/mirage/pull/1011">#1011</a>).</li>
<li>The unix backend used a toplevel exception handler, which has been remo=
ved. All backends now behave equally with respect to exceptions.</li>
<li>Please note that the <code>Mirage_net.listen</code> function still inst=
alls an exception handler, which will be removed in a future release. The o=
ut of memory exception is no longer caught by <code>Mirage_net.listen</code=
> (<a href=3D"https://github.com/mirage/mirage/issues/1036">#1036</a>).</li>
<li>To reduce the number of OPAM packages, the <code>mirage-*-lwt</code> pa=
ckages are now deprecated. <code>Mirage_net</code> (and others) now use <co=
de>Lwt.t</code> directly, and their <code>buffer</code> type is <code>Cstru=
ct.t</code> (<a href=3D"https://github.com/mirage/mirage/issues/1004">#1004=
</a>).</li>
<li>OPAM files generated by <code>mirage configure</code> now include opam =
build and installation instructions, and also an URL to the Git <code>origi=
n</code> (<a href=3D"https://github.com/mirage/mirage/pull/1022">#1022</a>)=
.</li>
</ul>

<p>
Known issues:
</p>

<ul class=3D"org-ul">
<li><code>mirage configure</code> fails if the unikernel is under version c=
ontrol and no <code>origin</code> remote is present (<a href=3D"https://git=
hub.com/mirage/mirage/issues/1188">#1188</a>).</li>
<li>The Xen backend has issues with event delivery if built with an Alpine =
Linux GCC toolchain. As a work-around, please use a Fedora or Debian based =
toolchain.</li>
</ul>

<p>
Acknowledgements:
</p>

<ul class=3D"org-ul">
<li>Thanks to Roger Pau Monn=C3=A9, Andrew Cooper and other core Xen develo=
pers for help with understanding the specifics of how Xen PVHv2 works, and =
how to write an implementation from scratch.</li>
<li>Thanks to Marek Marczykowski-G=C3=B3recki for help with the QubesOS spe=
cifics, and for forward-porting some missing parts of PVHv2 to QubesOS vers=
ion of Xen.</li>
<li>Thanks to @palainp on Github for help with testing on QubesOS.</li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-orgbe4072a" class=3D"outline-2">
<h2 id=3D"4">An AST typing problem</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/an-ast-typing-problem/3677/=
8">https://discuss.ocaml.org/t/an-ast-typing-problem/3677/8</a>
</p>
</div>

<div id=3D"outline-container-org514f74f" class=3D"outline-3">
<h3 id=3D"org514f74f">Chet Murthy announced</h3>
<div class=3D"outline-text-3" id=3D"text-org514f74f">
<p>
This note discusses the beginnings of an OCaml attribute-grammar
evaluator generator.  You can find this code on github at <code>camlp5/pa_p=
px_ag</code>.
</p>

<p>
All of this code is implemented using <code>camlp5</code> and the <code>pa_=
ppx</code> suite
of PPX rewriters.
</p>

<p>
Caveat: this code is less than a week old, so it's changing fast.  In
the unlkely event that anybody out there is actually interested in
using this code, I'm happy to help in any way I can.  But just be
aware that it's changing -really- fast.
</p>
</div>

<div id=3D"outline-container-orgf77f0de" class=3D"outline-4">
<h4 id=3D"orgf77f0de">Attribute Grammars for the multipass AST analysis pro=
blem</h4>
<div class=3D"outline-text-4" id=3D"text-orgf77f0de">
<p>
A year-and-a-half ago, the OP "An AST Typing Problem"
(<a href=3D"https://discuss.ocaml.org/t/an-ast-typing-problem/3677">https:/=
/discuss.ocaml.org/t/an-ast-typing-problem/3677</a>) raised the
problem of how to deal with ASTs, in the presence of multiple passes
of program-analysis, each of which will want to hang various bits of
data off nodes.  The author of the OP pointed also at a couple of
posts on Lambda-the-Ultimate (LtU), discussing related problems.
</p>

<p>
The author notes:
</p>

<blockquote>
<p>
There=E2=80=99s a lot of passes, many of which depend on the previous ones,
each one making some slight change to the AST which might or might
not result in having to walk through the whole AST to catch all
occurrences of that particular node. Clearly you=E2=80=99ll want to encode
semantic errors in the types, so each pass ends up having its own
unique AST, each depending on the previous one. To change a single
node deep in the AST I have to write about a hundred lines of types
and mapping functions=E2=80=99 worth of boilerplate. Any change in the
lower levels of the AST bubbles up to the higher ones, and
refactoring becomes a nightmare.
</p>
</blockquote>

<p>
I've been thinking about this problem ever since, and at the time, had
suggested that while it seemed like attribute-grammars might be a
workable solution, they were a pretty heavy hammer.  It doesn't help
(of course) that there exist no attribute-grammar evaluator
generators, for OCaml.  Also, at least in the LtU threads, there was
discussion of modifying the AST, and having the analyses automatically
be updated for the modified AST.  Obviously this would require an
incremental re-attribution algorithm: more complexity and again,
something that isn't implemented for OCaml.
</p>

<p>
But imagine that there existed an attribute-grammar evaluator
generator for OCaml.  So for a simple language of expressions, with an assi=
gnment-operator,
we could write an evaluator as an attribute-grammar.
Imagine that you could write an ast like this
(test1_ast.ml):
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">expr</span> =3D
    <span style=3D"color: #000000; background-color: #ffffff;">INT</span> <=
span style=3D"color: #a020f0;">of</span> int
  | <span style=3D"color: #000000; background-color: #ffffff;">BINOP</span>=
 <span style=3D"color: #a020f0;">of</span> binop * expr * expr
  | <span style=3D"color: #000000; background-color: #ffffff;">UNOP</span> =
<span style=3D"color: #a020f0;">of</span> unop * expr
  | <span style=3D"color: #000000; background-color: #ffffff;">REF</span> <=
span style=3D"color: #a020f0;">of</span> string
  | <span style=3D"color: #000000; background-color: #ffffff;">ASSIGN</span=
> <span style=3D"color: #a020f0;">of</span> string * expr
  | <span style=3D"color: #000000; background-color: #ffffff;">SEQ</span> <=
span style=3D"color: #a020f0;">of</span> expr * expr
<span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #a0522d;">unop</span> =3D <span style=3D"color: #000000; backgro=
und-color: #ffffff;">UPLUS</span> | <span style=3D"color: #000000; backgrou=
nd-color: #ffffff;">UMINUS</span>
<span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #a0522d;">binop</span> =3D <span style=3D"color: #000000; backgr=
ound-color: #ffffff;">PLUS</span> | <span style=3D"color: #000000; backgrou=
nd-color: #ffffff;">MINUS</span> | <span style=3D"color: #000000; backgroun=
d-color: #ffffff;">STAR</span> | <span style=3D"color: #000000; background-=
color: #ffffff;">SLASH</span> | <span style=3D"color: #000000; background-c=
olor: #ffffff;">PERCENT</span>
<span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #a0522d;">prog</span> =3D expr
</pre>
</div>
<p>
and then (having elsewhere written parser/pretty-printer) declare
attributes on those types (test1_variants.ml):
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">Attributed</span> =3D <s=
pan style=3D"color: #000000; font-weight: bold;">struct</span>
  <span style=3D"color: #483d8b; background-color: #ebebeb;">[%%import</spa=
n>: <span style=3D"color: #228b22;">Test1_ast.</span>expr<span style=3D"col=
or: #483d8b; background-color: #ebebeb;">]</span>
  <span style=3D"color: #483d8b;">[@@deriving attributed {</span>
<span style=3D"color: #483d8b;">    attributed_module_name =3D AT</span>
<span style=3D"color: #483d8b;">  ; normal_module_name =3D OK</span>
<span style=3D"color: #483d8b;">  ; attributes =3D {</span>
<span style=3D"color: #483d8b;">      expr =3D {</span>
<span style=3D"color: #483d8b;">        inh_env =3D [%typ: (string * int) l=
ist]</span>
<span style=3D"color: #483d8b;">      ; syn_env =3D [%typ: (string * int) l=
ist]</span>
<span style=3D"color: #483d8b;">      ; value_ =3D [%typ: int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; prog =3D {</span>
<span style=3D"color: #483d8b;">        value_ =3D [%typ: int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; binop =3D {</span>
<span style=3D"color: #483d8b;">        oper =3D [%typ: int -&gt; int -&gt;=
 int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; unop =3D {</span>
<span style=3D"color: #483d8b;">        oper =3D [%typ: int -&gt; int]</spa=
n>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    }</span>
<span style=3D"color: #483d8b;">  }]</span>
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>
<p>
and then declare attribute equations (test1_ag.ml):
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">REC</span> =3D <span sty=
le=3D"color: #000000; font-weight: bold;">struct</span>
<span style=3D"color: #483d8b; background-color: #ebebeb;">[%%import</span>=
: <span style=3D"color: #228b22;">Test1_variants.Attributed.AT.</span>expr<=
span style=3D"color: #483d8b; background-color: #ebebeb;">]</span>
  <span style=3D"color: #483d8b;">[@@deriving ag {</span>
<span style=3D"color: #483d8b;">    module_name =3D AG</span>
<span style=3D"color: #483d8b;">  ; storage_mode =3D Records</span>
<span style=3D"color: #483d8b;">  ; axiom =3D prog</span>
<span style=3D"color: #483d8b;">  ; attributes =3D {</span>
<span style=3D"color: #483d8b;">      expr =3D {</span>
<span style=3D"color: #483d8b;">        inh_env =3D [%typ: (string * int) l=
ist]</span>
<span style=3D"color: #483d8b;">      ; syn_env =3D [%typ: (string * int) l=
ist]</span>
<span style=3D"color: #483d8b;">      ; value_ =3D [%typ: int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; prog =3D {</span>
<span style=3D"color: #483d8b;">        value_ =3D [%typ: int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; binop =3D {</span>
<span style=3D"color: #483d8b;">        oper =3D [%typ: int -&gt; int -&gt;=
 int]</span>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    ; unop =3D {</span>
<span style=3D"color: #483d8b;">        oper =3D [%typ: int -&gt; int]</spa=
n>
<span style=3D"color: #483d8b;">      }</span>
<span style=3D"color: #483d8b;">    }</span>
<span style=3D"color: #483d8b;">  ; attribution =3D {</span>
<span style=3D"color: #483d8b;">      expr__INT =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm 0].syn_env :=3D [%nterm 0].=
inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].value_ :=3D [%prim 1].in=
tval</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; expr__BINOP =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm expr.(1)].inh_env :=3D [%nt=
erm expr].inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr.(2)].inh_env :=3D [%nt=
erm expr.(1)].syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr].syn_env :=3D [%nterm =
expr.(2)].syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr].value_ :=3D [%nterm b=
inop.(1)].oper [%nterm expr.(1)].value_ [%nterm</span>
<span style=3D"color: #483d8b;">expr.(2)].value_</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; expr__UNOP =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm expr.(1)].inh_env :=3D [%nt=
erm expr].inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr].syn_env :=3D [%nterm =
expr.(1)].syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr].value_ :=3D [%nterm u=
nop.(1)].oper [%nterm expr.(1)].value_</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; expr__REF =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm 0].syn_env :=3D [%nterm 0].=
inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].value_ :=3D List.assoc [=
%prim 1].stringval [%nterm 0].inh_env</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; expr__ASSIGN =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm 0].syn_env :=3D ([%prim 1].=
stringval, [%nterm expr.(1)].value_) :: [%nterm</span>
<span style=3D"color: #483d8b;">expr.(1)].syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm expr.(1)].inh_env :=3D [%nt=
erm 0].inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].value_ :=3D [%nterm expr=
.(1)].value_</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; expr__SEQ =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm 1].inh_env :=3D [%nterm 0].=
inh_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 2].inh_env :=3D [%nterm 1].=
syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].syn_env :=3D [%nterm 2].=
syn_env ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].value_ :=3D [%nterm 2].v=
alue_</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; prog =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm 1].inh_env :=3D [] ;</span>
<span style=3D"color: #483d8b;">        [%nterm 0].value_ :=3D [%nterm 1].v=
alue_ ;</span>
<span style=3D"color: #483d8b;">        assert True</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; unop__UPLUS =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm unop].oper :=3D fun x -&gt;=
 x</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; unop__UMINUS =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm unop].oper :=3D fun x -&gt;=
 (- x)</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; binop__PLUS =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm binop].oper :=3D (+)</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; binop__MINUS =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm binop].oper :=3D (-)</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; binop__STAR =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm binop].oper :=3D fun a b -&=
gt; a*b</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; binop__SLASH =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm binop].oper :=3D (/)</span>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    ; binop__PERCENT =3D (</span>
<span style=3D"color: #483d8b;">        [%nterm binop].oper :=3D (mod)</spa=
n>
<span style=3D"color: #483d8b;">      )</span>
<span style=3D"color: #483d8b;">    }</span>
<span style=3D"color: #483d8b;">  }]</span>
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>
<p>
and then, turning a crank, you would get an evaluator:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">test_records</span> <span s=
tyle=3D"color: #a0522d;">ctxt</span> =3D
  assert_equal 3 (<span style=3D"color: #8b2252;">{| x :=3D 1 ; x ; y :=3D =
2 ; x + y |}</span> <span style=3D"color: #a52a2a;">|&gt;</span> pa_prog_at=
tributed <span style=3D"color: #a52a2a;">|&gt;</span> <span style=3D"color:=
 #228b22;">REC.AG.</span>evaluate)
; assert_equal 0 (<span style=3D"color: #8b2252;">{| x :=3D 1 ; y :=3D 2 ; =
x / y |}</span> <span style=3D"color: #a52a2a;">|&gt;</span> pa_prog_attrib=
uted <span style=3D"color: #a52a2a;">|&gt;</span> <span style=3D"color: #22=
8b22;">REC.AG.</span>evaluate)
</pre>
</div>
<p>
where <code>pa_prog_attributed</code> is a parser that parses the surface s=
yntax
into an AST, which has empty slots for all attributes, and
<code>REC.AG.evaluate</code> evaluates attributes in its argument AST, and =
then
returns a tuple of all the synthesized attributes of the root node.
</p>
</div>
</div>

<div id=3D"outline-container-org64ae6bb" class=3D"outline-4">
<h4 id=3D"org64ae6bb">Retaining familiar surface syntax for pattern-matchin=
g and constructing ASTs</h4>
<div class=3D"outline-text-4" id=3D"text-org64ae6bb">
<p>
Now, we don't want to give up easy pattern-matching and construction
of the AST, just because the AST has attributes strewn throughout it.
But we don't have to: with Camlp5's "quotations", once we define a
surface syntax parser for the basic AST (unadorned with attributes &#x2013;
viz. <code>test1_ast.ml</code>), we can use that to bootstrap ourselves to a
surface syntax parser for expressions and patterns over that AST, and
then in a similar manner we can get them for the AST adorned with
attributes.
</p>

<p>
This has already been done for hashconsed ASTs, and ASTs with built-in
unique-IDs, and and doing it for "attributed ASTs" isn't any harder.
Those examples can be found in the github project
<code>camlp5/pa_ppx_q_ast</code>.
</p>
</div>
</div>

<div id=3D"outline-container-org8dda5a8" class=3D"outline-4">
<h4 id=3D"org8dda5a8">Limitations</h4>
<div class=3D"outline-text-4" id=3D"text-org8dda5a8">
<p>
There are still limitations.
</p>

<ol class=3D"org-ol">
<li>The current code only implements topological-order evaluation.
That is, it builds the entire dependency-graph, topologically-sorts
it, and then evaluates attributes.  This is &#x2026;. suboptimal, when
we well know that almost all interesting AGs are already in the
class of ordered attribute-grammars (OAGs).  I plan to implement
the OAG evaluation strategy next.</li>

<li><p>
Traditionally AGs are defined over "productions" which are
sequences of nonterminals and terminals.  This doesn't correspond
to the way we define OCaml constructor data-types.  So instead of a constru=
ctor like
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">expr</span> =3D
  ... | <span style=3D"color: #000000; background-color: #ffffff;">Call</sp=
an> <span style=3D"color: #a020f0;">of</span> name * arg_list
<span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #a0522d;">arg_list</span> =3D <span style=3D"color: #000000; bac=
kground-color: #ffffff;">NoArgs</span> | <span style=3D"color: #000000; bac=
kground-color: #ffffff;">SomeArgs</span> <span style=3D"color: #a020f0;">of=
</span> expr * arg_list
</pre>
</div>
<p>
we might want to use ~ 'a list~
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">expr</span> =3D
  ... | <span style=3D"color: #000000; background-color: #ffffff;">Call</sp=
an> <span style=3D"color: #a020f0;">of</span> name * expr list
</pre>
</div>

<p>
Problem is: defining attribute-equations for (effectively) an array of
nodes, is not part of the standard lingo of AGs.  But I believe we can
invent new syntax and make this succinct.
</p></li>

<li>Storage optimization.  A naive implementation of AGs can store all
attributes ever computed, at all the nodes in the AST.  This can
use a lot of memory.  But there are well-known techniques to
discard attributes once they'll never more be needed in the rest of
the attribute-evaluation, and I plan to implement these techniques.</li>
</ol>

<p>
There's an entire literature on things like remote-references in
attribute grammars, aggregates, and other things, all of which can
probably be usefully employed.
</p>
</div>
</div>

<div id=3D"outline-container-orgfc2cc4d" class=3D"outline-4">
<h4 id=3D"orgfc2cc4d">Conclusion</h4>
<div class=3D"outline-text-4" id=3D"text-orgfc2cc4d">
<p>
I think that attribute-grammars could be a useful way to structure
complex multipass program-analysis, just as they used to do back in
the good ol' days.
</p>

<p>
Maybe worth a look-see!
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-orgf369ba8" class=3D"outline-2">
<h2 id=3D"5">erlang 0.0.14, a toolkit to manipulate Erlang sources</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-erlang-0-0-14-a-toolkit=
-to-manipulate-erlang-sources/6694/1">https://discuss.ocaml.org/t/ann-erlan=
g-0-0-14-a-toolkit-to-manipulate-erlang-sources/6694/1</a>
</p>
</div>

<div id=3D"outline-container-org2ce414a" class=3D"outline-3">
<h3 id=3D"org2ce414a">ostera announced</h3>
<div class=3D"outline-text-3" id=3D"text-org2ce414a">
<p>
Hej, hope you're staying safe :raised_hands:
</p>

<p>
I'm excited to share with you the first release of <code>erlang</code>.
</p>

<p>
<b>tl;dr</b>: <span class=3D"underline">parser/lexer/ast/printer for Erlang=
</span>
</p>
</div>

<div id=3D"outline-container-orgbc0e761" class=3D"outline-4">
<h4 id=3D"orgbc0e761">Description</h4>
<div class=3D"outline-text-4" id=3D"text-orgbc0e761">
<p>
<code>erlang</code> is a toolkit for manipulating Standard Erlang and Core =
Erlang sources and their abstract
syntax trees according to the Erlang specifications.
</p>

<p>
Version 0.0.14 provides:
</p>
<ul class=3D"org-ul">
<li>A lexer/parser written in Menhir for Standard Erlang</li>
<li>ASTs for Core Erlang and Standard Erlang</li>
<li>An AST helper module for constructing Standard Erlang programs</li>
<li>A printer for the Standard Erlang AST (of highly volatile prettiness)</=
li>
<li>Support to turn ASTs to S-expressions</li>
<li><code>erldump</code>, a binary tool for reading Erlang sources and prin=
ting their concrete syntax trees as S-expressions.</li>
</ul>

<p>
It is distributed under Apache-2.0 license, depends on Menhir and Cmdliner,=
 and it is being developed
as part of the Caramel project.
</p>

<ul class=3D"org-ul">
<li><b>PR</b>: <a href=3D"https://github.com/ocaml/opam-repository/pull/175=
53">https://github.com/ocaml/opam-repository/pull/17553</a> &#x2013; should=
 be on opam.ocaml.org sometime tomorrow :)</li>
<li><b>Homepage</b>: <a href=3D"https://github.com/AbstractMachinesLab/cara=
mel">https://github.com/AbstractMachinesLab/caramel</a></li>
<li><b>Install</b>: <code>opam install erlang</code></li>
<li><b>API Docs &amp; manuals</b>: maybe on next release, but <span class=
=3D"underline">follow the types</span>, and the <code>Erlang.Ast_helper</co=
de> module is modeled after the <code>Parsing.Ast_helper</code> so it shoul=
d feel familiar.</li>
</ul>

<p>
I started writing <code>erlang</code> to let Caramel do an entirely symboli=
c compilation from the OCaml typedtree
that would still allow for other passes/checks to be made cleanly. It's com=
e with a decent number of
tests, and it can parse some OTP modules with small modifications.
</p>

<p>
There's <a href=3D"https://github.com/AbstractMachinesLab/caramel/issues?q=
=3Dis%3Aissue+is%3Aopen+label%3Alib%3Aerlang">a few outstanding
issues</a>
regarding the parsing for the next release, but it should be a starting poi=
nt for anyone wanting to
read sources and <span class=3D"underline">do something</span> with them. I=
 plan on cover these issues in the rest of the year, but as
with all open source, it may take longer.
</p>

<p>
I'd like to add a few other things, like an AST invariants module to check =
that ASTs are actually valid
Erlang programs, and transformations more suitable for static analyses of t=
he sources.
</p>

<p>
My thanks go to @antron, @c-cube, @Drup, @rgrinberg, and @mseri for helping=
 me get around the OCaml
compiler, Menhir, and eventually to get this version split from Caramel and=
 released independently.
Also a shoutout to the Js_of_ocaml project that served as a starting point =
for the parser/lexer work
here.
</p>

<p>
If you can give me some feedback on the design and implementation, I'd very=
 much like to hear your
thoughts :slight_smile:
</p>

<p>
For those of you hoping to start using it, <span class=3D"underline">do not=
</span> let it crash.
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org6c52a23" class=3D"outline-2">
<h2 id=3D"6">opam-bin.1.0.0: binary packages for opam</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-opam-bin-1-0-0-binary-p=
ackages-for-opam/6696/1">https://discuss.ocaml.org/t/ann-opam-bin-1-0-0-bin=
ary-packages-for-opam/6696/1</a>
</p>
</div>

<div id=3D"outline-container-orgcd91c9e" class=3D"outline-3">
<h3 id=3D"orgcd91c9e">Fabrice Le Fessant announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgcd91c9e">
<p>
I am happy to announce the first stable release of <code>opam-bin</code>,
version 1.0.0, a framework to CREATE, USE and SHARE binary relocatable
packages with opam, to speed-up installation of packages. It is easily
installable from opam-repository, and available on Github:
</p>

<p>
<a href=3D"https://ocamlpro.github.io/opam-bin">https://ocamlpro.github.io/=
opam-bin</a>
</p>

<p>
With opam-bin, you can :
</p>

<ul class=3D"org-ul">
<li>build binary packages while installing their source counterpart with op=
am</li>
<li>automatically reuse previously created binary packages instead of compi=
ling them again</li>
<li>export and share your binary packages as part of opam repositories for =
other users/computers to use</li>
</ul>

<p>
<code>opam-bin</code> is a framework in 3 parts :
</p>
<ul class=3D"org-ul">
<li>a tool <code>opam-bin</code> to create binary packages: <a href=3D"http=
s://ocamlpro.github.io/opam-bin">https://ocamlpro.github.io/opam-bin</a></l=
i>
<li>a set of patches to make some packages relocatable (<code>opam-bin</cod=
e> will apply them automatically when building packages), including patches=
 to make the OCaml distribution relocatable from version 4.02.0 to 4.11.1: =
<a href=3D"https://github.com/ocamlpro/relocation-patches">https://github.c=
om/ocamlpro/relocation-patches</a></li>
<li>a set of contributed repositories of binary packages. For now, there is=
 only one contribution, during the summer, by Origin Labs : <a href=3D"http=
s://www.origin-labs.com/opam-bin/debian10.4-amd64/">https://www.origin-labs=
.com/opam-bin/debian10.4-amd64/</a> containing 5 repos, among which the "4.=
10.0" repo contains more than 1800 packages. These repos can be used DIRECT=
LY WITH opam, WITHOUT USING opam-bin.</li>
</ul>

<p>
This is the first stable release:
</p>
<ul class=3D"org-ul">
<li>Specific support has been added in the current <code>master</code> bran=
ch of <code>opam</code> to make working with this version more convenient, =
by printing pre- and post- installation messages. Yet, it will still work w=
ith previous version of opam, but with no output on the terminal when calli=
ng opam.</li>
<li>The <code>sharing</code> option can be enabled to share files with hard=
-links between switches, making the creation of new local switches almost c=
ostless in time and disk space.</li>
</ul>

<p>
<code>opam-bin</code> is a collaborative work between OCamlPro and Origin L=
abs.
</p>

<p>
<code>opam-bin</code> is particularly useful if you create many local switc=
hes,
as they become unexpensive. Tools like Drom (an OCaml project
scaffolder, <a href=3D"https://ocamlpro.github.io/drom">https://ocamlpro.gi=
thub.io/drom</a>) can take advantage of
that to provide a cargo-like experience.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org2e2d6d6" class=3D"outline-2">
<h2 id=3D"7">Interesting OCaml Articles</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/interesting-ocaml-articles/=
1867/63">https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/63</a>
</p>
</div>

<div id=3D"outline-container-org06a14da" class=3D"outline-3">
<h3 id=3D"org06a14da">Ryan Slade announced</h3>
<div class=3D"outline-text-3" id=3D"text-org06a14da">
<p>
Anyone who's been following this blog probably saw this coming:
</p>

<p>
<a href=3D"https://blog.darklang.com/leaving-ocaml/">https://blog.darklang.=
com/leaving-ocaml/</a>
</p>

<p>
It's an interesting read and hopefully can be used as constructive criticis=
m in order to improve the
state of the OCaml ecosystem.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgcc2b37e" class=3D"outline-2">
<h2 id=3D"orgcc2b37e">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-orgcc2b37e">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

