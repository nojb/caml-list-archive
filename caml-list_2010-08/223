Return-Path: <jonathandeanharrop@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id E780EBC57
	for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 19:39:44 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgQCAFuJe0zRVde0mWdsb2JhbACBRJEzgU6DfAGHeggVAQEBAQEICwoHESKjPos6AQWPAAEEhTeBW4MY
X-IronPort-AV: E=Sophos;i="4.56,294,1280700000"; 
   d="scan'208,217";a="57994826"
Received: from mail-ey0-f180.google.com ([209.85.215.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 30 Aug 2010 19:39:44 +0200
Received: by eya25 with SMTP id 25so4131948eya.39
        for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 10:39:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:from:to:cc:references
         :in-reply-to:subject:date:organization:message-id:mime-version
         :content-type:x-mailer:thread-index:content-language;
        bh=H5umcyfu3gGw1TAGruzGzEmPhsbbXGxTNeLQvYw76pg=;
        b=ha1SN0KCiPDitkeTG/msNNtfOfxydRicxQ7BtnKXBUVPWH2YzLtJ6AyjNnOw8wKdcr
         n1lIzUGBFNquE3S1aZU7xdwKAHsdToxlttRAzr4wu0ZiwM09SDCKV+uyR5N9BrsjOek4
         XxD9qHhrvsdOTTTLQtBaMN29FJY4FudsEN+nw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=from:to:cc:references:in-reply-to:subject:date:organization
         :message-id:mime-version:content-type:x-mailer:thread-index
         :content-language;
        b=LhGqnqc9fH3whcd8d/tUcDsxb9FB6u8GzFqrwpFhtt18yVhqjVTwkWTDWBGhOTaDqb
         /hMmnPoigKILHK1p1vwvPhOGh63qvEIWUjHvfWu2wvKvWo2MzVXAnJd7A88+U3/3+iJ2
         94C21zgD+DW+VPqtGeCqoF0SrxwxKni3djyB4=
Received: by 10.216.188.81 with SMTP id z59mr5180607wem.106.1283189982370;
        Mon, 30 Aug 2010 10:39:42 -0700 (PDT)
Received: from WinEight ([87.113.136.121])
        by mx.google.com with ESMTPS id n40sm4621787weq.29.2010.08.30.10.39.39
        (version=SSLv3 cipher=RC4-MD5);
        Mon, 30 Aug 2010 10:39:41 -0700 (PDT)
From: Jon Harrop <jonathandeanharrop@googlemail.com>
To: "'ivan chollet'" <ivan.chollet@gmail.com>,
	"'Jon Harrop'" <jonathandeanharrop@googlemail.com>
Cc: "'Jeremy Bem'" <jeremy1@gmail.com>,
	"'caml-list List'" <caml-list@yquem.inria.fr>
References: <AANLkTin9S-d7jy1byqh_5wy69pVss_vxaiutTz7RSryO@mail.gmail.com>	<AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>	<AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com>	<AANLkTi=ptf2AnYV+1e66JHtwzbWQQvaUtdNvPbEsHJiA@mail.gmail.com>	<026901cb485b$ff1b8ad0$fd52a070$@com> <AANLkTi=e1dx+6YKw+k4+93cSwtSgY=YJpn-AfVy84duv@mail.gmail.com>
In-Reply-To: <AANLkTi=e1dx+6YKw+k4+93cSwtSgY=YJpn-AfVy84duv@mail.gmail.com>
Subject: RE: [Caml-list] Llama Light: a simple implementation of Caml
Date: Mon, 30 Aug 2010 18:39:20 +0100
Organization: Flying Frog Consultancy
Message-ID: <027401cb486a$48511e00$d8f35a00$@com>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0275_01CB4872.AA158600"
X-Mailer: Microsoft Office Outlook 12.0
Thread-Index: ActIZiCKqvJUmmSVSaG6vG4Vv2+0WwAAzKcA
Content-Language: en-gb
X-Spam: no; 0.00; parallelism:01 cheers:01 recursion:01 pointers:01 run-time:01 compiler:01 recursion:01 cheers:01 pointers:01 typechecker:01 ocaml:01 typechecker:01 runtime:01 bytecode:01 compiler:01 

This is a multi-part message in MIME format.

------=_NextPart_000_0275_01CB4872.AA158600
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

If you can keep it agnostic wrt boxing then you should be able to plug it
into HLVM easily for much faster numerics and parallelism.

 

Cheers,

Jon.

 

From: ivan chollet [mailto:ivan.chollet@gmail.com] 
Sent: 30 August 2010 18:10
To: Jon Harrop
Cc: Jeremy Bem; caml-list List
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml

 

clearly didn't plan to support polymorphic recursion in any way. I don't
even plan to support lexical scoping...
As for data representation I'm actually boxing everything except ints and
function pointers. I found out that it leads to the simplest design, which
is appropriate for a project that I don't want to take me more than a few
days.



On Tue, Aug 31, 2010 at 1:57 AM, Jon Harrop
<jonathandeanharrop@googlemail.com> wrote:

Try to remove all assumptions of uniform run-time representation from the
compiler because avoiding boxing gives huge performance gains and makes it
much easier to write a performant garbage collector. You'll need to
sacrifice polymorphic recursion though, which you probably already have
anyway.

 

Cheers,

Jon.

 

From: caml-list-bounces@yquem.inria.fr
[mailto:caml-list-bounces@yquem.inria.fr] On Behalf Of ivan chollet
Sent: 30 August 2010 11:57
To: Jeremy Bem
Cc: caml-list List
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml

 

OK.

This looks nice and I would be pleased if you could put a few pointers or
explanations on your webpage about your typechecker implementation and how
it differs with OCaml typechecker. 
I will get some free time this week and to implement yet another runtime and
bytecode compiler from scratch. Not sure if it will be completed at the end
of the week, but i'll be definitely interested to know more about the
theoretical motivations of works like yours!



On Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem <jeremy1@gmail.com> wrote:

bluestorm:

 

Thank you for the bug report.  The toplevel issue has been fixed in the
version now posted.

 

Do you see a nice way to add let-generalization without reintroducing "type
levels"?  I was pleased to remove those.

 

Ivan:

 

It was originally forked from Caml Light but now includes more code from
OCaml.  The typechecker is mostly original code at this point; the compiler
is OCaml's with minimal changes to accommodate the new typechecker; the
runtime is almost identical to OCaml's.

 

-Jeremy

 

On Sun, Aug 29, 2010 at 6:52 AM, bluestorm <bluestorm.dylc@gmail.com> wrote:

When using the toplevel, declaration phrases fail (looks like a linking
problem), but expressions work as intented :

$ llama

        Llama Light version 0.0828

# 1 + 1;;

- : int = 2

# let x = 1 + 1;;

Error: Reference to undefined global `Toploop'

 

I made my tests using "llamac -i foo.ml".

 


I found it startling that the most important difference to my eyes are
buried, on the web page, under lines of relatively boring documentation :

In Llama Light (and in contrast to other Caml implementations):

 

- let does not generalize.

- Phrases are generalized immediately. In particular, "let foo = ref []"
does not typecheck.

- The value restriction is not relaxed. (This is similar to Caml Light.)

 

These choices simplify the implementation while having relatively little
impact on the user.

 

You cite the "Let Should Not Be Generalised" paper. There is however a
difference in your application of the maxim : in the paper, local let that
have polymorphic type annotations are generalised, while in your system it
is not possible to force generalisation.

 

I had a look at the typer, and it's indeed rather simple; it seems it would
be quite simple to implement generalized let (when encountering annotations
or with a different syntaxic construct : "letg .. = .. in ..."), but the
added complexity is equivalent to adding let generalization by default.

 

Is the presence of let-generalization a real issue in your work ?

 


_______________________________________________
Caml-list mailing list. Subscription management:
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
Archives: http://caml.inria.fr
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs

 

 


------=_NextPart_000_0275_01CB4872.AA158600
Content-Type: text/html;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" =
xmlns:o=3D"urn:schemas-microsoft-com:office:office" =
xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-GB link=3Dblue vlink=3Dpurple>

<div class=3DWordSection1>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>If you can keep it agnostic wrt boxing then you should be =
able
to plug it into HLVM easily for much faster numerics and =
parallelism.<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>Cheers,<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>Jon.<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<div style=3D'border:none;border-left:solid blue 1.5pt;padding:0cm 0cm =
0cm 4.0pt'>

<div>

<div style=3D'border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt =
0cm 0cm 0cm'>

<p class=3DMsoNormal><b><span lang=3DEN-US =
style=3D'font-size:10.0pt;font-family:
"Tahoma","sans-serif"'>From:</span></b><span lang=3DEN-US =
style=3D'font-size:10.0pt;
font-family:"Tahoma","sans-serif"'> ivan chollet
[mailto:ivan.chollet@gmail.com] <br>
<b>Sent:</b> 30 August 2010 18:10<br>
<b>To:</b> Jon Harrop<br>
<b>Cc:</b> Jeremy Bem; caml-list List<br>
<b>Subject:</b> Re: [Caml-list] Llama Light: a simple implementation of =
Caml<o:p></o:p></span></p>

</div>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-bottom:12.0pt'>clearly didn't plan =
to support
polymorphic recursion in any way. I don't even plan to support lexical
scoping...<br>
As for data representation I'm actually boxing everything except ints =
and
function pointers. I found out that it leads to the simplest design, =
which is
appropriate for a project that I don't want to take me more than a few =
days.<br>
<br>
<o:p></o:p></p>

<div>

<p class=3DMsoNormal>On Tue, Aug 31, 2010 at 1:57 AM, Jon Harrop &lt;<a
href=3D"mailto:jonathandeanharrop@googlemail.com">jonathandeanharrop@goog=
lemail.com</a>&gt;
wrote:<o:p></o:p></p>

<div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'font-size:11.0pt;color:#1F497D'>Try to remove all assumptions =
of uniform
run-time representation from the compiler because avoiding boxing gives =
huge
performance gains and makes it much easier to write a performant garbage =
collector.
You&#8217;ll need to sacrifice polymorphic recursion though, which you =
probably
already have anyway&#8230;</span><o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'font-size:11.0pt;color:#1F497D'>&nbsp;</span><o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'font-size:11.0pt;color:#1F497D'>Cheers,</span><o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'font-size:11.0pt;color:#1F497D'>Jon.</span><o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'font-size:11.0pt;color:#1F497D'>&nbsp;</span><o:p></o:p></p>

<div style=3D'border:none;border-left:solid windowtext 1.5pt;padding:0cm =
0cm 0cm 4.0pt;
border-color:-moz-use-text-color -moz-use-text-color -moz-use-text-color =
blue'>

<div>

<div style=3D'border:none;border-top:solid windowtext =
1.0pt;padding:3.0pt 0cm 0cm 0cm;
border-color:-moz-use-text-color -moz-use-text-color'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
lang=3DEN-US style=3D'font-size:10.0pt'>From:</span></b><span =
lang=3DEN-US
style=3D'font-size:10.0pt'> <a =
href=3D"mailto:caml-list-bounces@yquem.inria.fr"
target=3D"_blank">caml-list-bounces@yquem.inria.fr</a> [mailto:<a
href=3D"mailto:caml-list-bounces@yquem.inria.fr" =
target=3D"_blank">caml-list-bounces@yquem.inria.fr</a>]
<b>On Behalf Of </b>ivan chollet<br>
<b>Sent:</b> 30 August 2010 11:57<br>
<b>To:</b> Jeremy Bem<br>
<b>Cc:</b> caml-list List<br>
<b>Subject:</b> Re: [Caml-list] Llama Light: a simple implementation of =
Caml</span><o:p></o:p></p>

</div>

</div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;margin-bottom:12.0pt'>OK.<br>
<br>
This looks nice and I would be pleased if you could put a few pointers =
or
explanations on your webpage about your typechecker implementation and =
how it
differs with OCaml typechecker. <br>
I will get some free time this week and to implement yet another runtime =
and
bytecode compiler from scratch. Not sure if it will be completed at the =
end of
the week, but i'll be definitely interested to know more about the =
theoretical
motivations of works like yours!<br>
<br>
<o:p></o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>On
Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem &lt;<a =
href=3D"mailto:jeremy1@gmail.com"
target=3D"_blank">jeremy1@gmail.com</a>&gt; wrote:<o:p></o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>bluestorm:<o=
:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>Thank
you for the bug report. &nbsp;The toplevel issue has been fixed in the =
version
now posted.<o:p></o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>Do
you see a nice way to add let-generalization without reintroducing =
&quot;type
levels&quot;? &nbsp;I was pleased to remove those.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>Ivan:<o:p></=
o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>It
was originally forked from Caml Light but now includes more code from =
OCaml.
&nbsp;The typechecker is mostly original code at this point; the =
compiler is
OCaml's with minimal changes to accommodate the new typechecker; the =
runtime is
almost identical to OCaml's.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style=3D'color:#888888'>-Jeremy</span><o:p></o:p></p>

</div>

<div>

<div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>On
Sun, Aug 29, 2010 at 6:52 AM, bluestorm &lt;<a
href=3D"mailto:bluestorm.dylc@gmail.com" =
target=3D"_blank">bluestorm.dylc@gmail.com</a>&gt;
wrote:<o:p></o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>When
using the toplevel, declaration phrases fail (looks like a linking =
problem),
but expressions work as intented :<o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>$
llama<o:p></o:p></p>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;&nbsp;=

&nbsp; &nbsp; &nbsp;Llama Light version 0.0828<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>#
1 + 1;;<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>-
: int =3D 2<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>#
let x =3D 1 + 1;;<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>Error:
Reference to undefined global `Toploop'<o:p></o:p></p>

</blockquote>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>I
made my tests using &quot;llamac -i <a href=3D"http://foo.ml" =
target=3D"_blank">foo.ml</a>&quot;.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;margin-bottom:12.0pt'><br>
I found it startling that the most important difference to my eyes are =
buried,
on the web page, under lines of relatively boring documentation =
:<o:p></o:p></p>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>In
Llama Light (and in contrast to other Caml =
implementations):<o:p></o:p></p>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>-
let&nbsp;does not generalize.<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>-
Phrases are generalized immediately. In particular, &quot;let foo =3D =
ref
[]&quot; does not typecheck.<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>-
The value restriction is not&nbsp;relaxed. (This is similar to Caml =
Light.)<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid windowtext =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-top:5.0pt;margin-right:0cm;margin-bottom:5.0pt;border-color:-moz-u=
se-text-color -moz-use-text-color -moz-use-text-color rgb(204, 204, =
204)'>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>These
choices simplify the implementation while having relatively little =
impact on
the user.<o:p></o:p></p>

</blockquote>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>You
cite the &quot;Let Should Not Be Generalised&quot; paper. There is =
however a
difference in your application of the maxim : in the paper, local let =
that have
polymorphic type annotations are generalised, while in your system it is =
not
possible to force generalisation.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>I
had a look at the typer, and it's indeed rather simple; it seems it =
would be
quite simple to implement generalized let (when encountering annotations =
or
with a different syntaxic construct : &quot;letg .. =3D .. in =
...&quot;), but the
added complexity is equivalent to adding let generalization by =
default.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>Is
the presence of let-generalization a real issue in your work =
?<o:p></o:p></p>

</div>

</div>

</div>

</div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

</div>

</div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;margin-bottom:12.0pt'><br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list"
target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t</a><br>
Archives: <a href=3D"http://caml.inria.fr" =
target=3D"_blank">http://caml.inria.fr</a><br>
Beginner's list: <a =
href=3D"http://groups.yahoo.com/group/ocaml_beginners"
target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" =
target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><o:p></o:p></p>

</div>

<p class=3DMsoNormal =
style=3D'mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'>&nbsp;<o:p><=
/o:p></p>

</div>

</div>

</div>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

</div>

</body>

</html>

------=_NextPart_000_0275_01CB4872.AA158600--

