Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id AF1FABC57
	for <caml-list@yquem.inria.fr>; Thu,  5 Aug 2010 18:11:16 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsIBAHJ/WkzRVda0mGdsb2JhbACTHI0VCBUBAQEBAQgJDAcRIqxQiQqCEIYPLohUAQEDBYIQgyUEiSw
X-IronPort-AV: E=Sophos;i="4.55,323,1278280800"; 
   d="scan'208";a="55134607"
Received: from mail-iw0-f180.google.com ([209.85.214.180])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 05 Aug 2010 18:11:15 +0200
Received: by iwn4 with SMTP id 4so337454iwn.39
        for <caml-list@yquem.inria.fr>; Thu, 05 Aug 2010 09:11:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:mime-version:received:in-reply-to
         :references:from:date:message-id:subject:to:cc:content-type;
        bh=5u6YYZ5ZODrrq5OizIkXr+Jd07nUmnpgAl/yN1AaqgI=;
        b=Wss+V7W9YS+PhMZn8fBv3/FKCvZMvYrCUBx5wQWsUMpggi5eJNuCANW0Gt6MX6TY7+
         iyZVag1LK3Ljjm5TIhbHT+eKLady1eWSfA6qSKJjn3TlcJ4LOgCb7u9LEBCn5+RzbbLa
         BmcqrEeVDDI0PIMM1odjVNawF8l5yTyH6nJeM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=ZpV/MvBZ+8D3BYaE7kDSKjC0fktX4RumRG4U+WL6by/zCG+7516fwJAQ+ZjrDewAMa
         MYXlQzT4k4JmIvqprJ1xVc0HgNFNZI7Rs1DV7zkdXP+vB2/9tyRgrtZxsQkMrMo3cBbF
         49nzzh/pv8R1wphWkOTtzA+ggOd+ynxaaERUM=
Received: by 10.231.190.149 with SMTP id di21mr12572712ibb.27.1281024674288; 
	Thu, 05 Aug 2010 09:11:14 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.231.187.75 with HTTP; Thu, 5 Aug 2010 09:10:54 -0700 (PDT)
In-Reply-To: <607998.18398.qm@web111514.mail.gq1.yahoo.com>
References: <607998.18398.qm@web111514.mail.gq1.yahoo.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Thu, 5 Aug 2010 18:10:54 +0200
Message-ID: <AANLkTimezHJhnwKaUgJ6VyvEc2qSnYXRtRncV-6iuoTB@mail.gmail.com>
Subject: Re: [Caml-list] Emulating width subtyping with 1st-class modules
To: Dario Teixeira <darioteixeira@yahoo.com>
Cc: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=001485e77336a8d667048d15ccf7
X-Spam: no; 0.00; subtyping:01 subtyping:01 ocaml's:01 sig:01 val:01 val:01 sig:01 printf:01 printf:01 struct:01 struct:01 verbose:01 camlp:01 beginner's:01 ocaml:01 

--001485e77336a8d667048d15ccf7
Content-Type: text/plain; charset=ISO-8859-1

I have a related question: the only reason why i'm not fully happy with
objects used as anonymous records is that i sometimes use them as mere data
containers and need to save (marshal) them at some point. Which is not
permitted as soon as you want to exchange marshalled values between two
different programs. Hopefully one can rely on json-static to cope with that
limitation in a quite elegant way. Are first-class modules distinct in that
respect ? That is, can they be marshalled if they do not contain closures ?

philippe.

PS For those who missed it, there was an interesting thread on this very
topic a year ago

http://groups.google.com/group/fa.caml/browse_thread/thread/1eb4bba668b27aa3/9192a2760ef97ca9


2010/8/5 Dario Teixeira <darioteixeira@yahoo.com>

> Hi,
>
> I have a problem where some form of width subtyping for records would be
> useful.  At the present I'm taking advantage of the structural subtyping
> nature
> of Ocaml's object system to emulate the width subtyping.  This works and is
> reasonably compact, but I'm still open to other approaches.  It has
> occurred
> to me that 3.12's modules-as-first-class-values provide yet another
> solution:
>
>
> module type BRIEF =
> sig
>        val a: int
>        val b: string
> end
>
>
> module type FULL =
> sig
>        include BRIEF
>        val c: float
> end
>
>
> let print_brief m =
>        let module M = (val m: BRIEF) in
>        Printf.printf "A: %d, B: %s\n" M.a M.b
>
>
> let print_full m =
>        let module M = (val m: FULL) in
>        Printf.printf "A: %d, B: %s, C: %f\n" M.a M.b M.c
>
>
> module Full =
> struct
>        let a = 1
>        let b = "full"
>        let c = 0.5
> end
>
>
> module Brief =
> struct
>        let a = 0
>        let b = "short"
> end
>
>
> let () =
>        print_brief (module Brief : BRIEF);
>        print_brief (module Full : BRIEF);
>        print_full (module Full : FULL)
>
>
> While this approach seems awfully verbose, I reckon it could be made much
> more palatable via some Camlp4 sugaring.  Nevertheless, I have a question:
> just how heavy would this approach be when compared to the object one?
> And how would it fare in comparison to regular records?
>
> Thanks for your attention!
> Best regards,
> Dario Teixeira
>
>
>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001485e77336a8d667048d15ccf7
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I have a related question: the only reason why i&#39;m not fully happy with=
 objects used as anonymous records is that i sometimes use them as mere dat=
a containers and need to save (marshal) them at some point. Which is not pe=
rmitted as soon as you want to exchange marshalled values between two diffe=
rent programs. Hopefully one can rely on json-static to cope with that limi=
tation in a quite elegant way. Are first-class modules distinct in that res=
pect ? That is, can they be marshalled if they do not contain closures ?<br=
>

<br>philippe.<br><br>PS For those who missed it, there was an interesting t=
hread on this very topic a year ago<br><br><a href=3D"http://groups.google.=
com/group/fa.caml/browse_thread/thread/1eb4bba668b27aa3/9192a2760ef97ca9">h=
ttp://groups.google.com/group/fa.caml/browse_thread/thread/1eb4bba668b27aa3=
/9192a2760ef97ca9</a><br>

<br><br><div class=3D"gmail_quote">2010/8/5 Dario Teixeira <span dir=3D"ltr=
">&lt;<a href=3D"mailto:darioteixeira@yahoo.com">darioteixeira@yahoo.com</a=
>&gt;</span><br><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt =
0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">

Hi,<br>
<br>
I have a problem where some form of width subtyping for records would be<br=
>
useful. =A0At the present I&#39;m taking advantage of the structural subtyp=
ing nature<br>
of Ocaml&#39;s object system to emulate the width subtyping. =A0This works =
and is<br>
reasonably compact, but I&#39;m still open to other approaches. =A0It has o=
ccurred<br>
to me that 3.12&#39;s modules-as-first-class-values provide yet another sol=
ution:<br>
<br>
<br>
module type BRIEF =3D<br>
sig<br>
 =A0 =A0 =A0 =A0val a: int<br>
 =A0 =A0 =A0 =A0val b: string<br>
end<br>
<br>
<br>
module type FULL =3D<br>
sig<br>
 =A0 =A0 =A0 =A0include BRIEF<br>
 =A0 =A0 =A0 =A0val c: float<br>
end<br>
<br>
<br>
let print_brief m =3D<br>
 =A0 =A0 =A0 =A0let module M =3D (val m: BRIEF) in<br>
 =A0 =A0 =A0 =A0Printf.printf &quot;A: %d, B: %s\n&quot; M.a M.b<br>
<br>
<br>
let print_full m =3D<br>
 =A0 =A0 =A0 =A0let module M =3D (val m: FULL) in<br>
 =A0 =A0 =A0 =A0Printf.printf &quot;A: %d, B: %s, C: %f\n&quot; M.a M.b M.c=
<br>
<br>
<br>
module Full =3D<br>
struct<br>
 =A0 =A0 =A0 =A0let a =3D 1<br>
 =A0 =A0 =A0 =A0let b =3D &quot;full&quot;<br>
 =A0 =A0 =A0 =A0let c =3D 0.5<br>
end<br>
<br>
<br>
module Brief =3D<br>
struct<br>
 =A0 =A0 =A0 =A0let a =3D 0<br>
 =A0 =A0 =A0 =A0let b =3D &quot;short&quot;<br>
end<br>
<br>
<br>
let () =3D<br>
 =A0 =A0 =A0 =A0print_brief (module Brief : BRIEF);<br>
 =A0 =A0 =A0 =A0print_brief (module Full : BRIEF);<br>
 =A0 =A0 =A0 =A0print_full (module Full : FULL)<br>
<br>
<br>
While this approach seems awfully verbose, I reckon it could be made much<b=
r>
more palatable via some Camlp4 sugaring. =A0Nevertheless, I have a question=
:<br>
just how heavy would this approach be when compared to the object one?<br>
And how would it fare in comparison to regular records?<br>
<br>
Thanks for your attention!<br>
Best regards,<br>
<font color=3D"#888888">Dario Teixeira<br>
</font><div class=3D"hm"><br>
<br>
<br>
<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></blockquote></div><br>

--001485e77336a8d667048d15ccf7--

