Return-Path: <jeff@mathgladiator.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 25ACFBBAF
	for <caml-list@yquem.inria.fr>; Mon, 23 Aug 2010 03:02:34 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlwCAOhlcUzRVdivkGdsb2JhbACScYU7h3gIFQEBAQEJCQwHEQMfnh+ZR4U3BIFWgl+FQQ
X-IronPort-AV: E=Sophos;i="4.56,254,1280700000"; 
   d="scan'208";a="65979486"
Received: from mail-qy0-f175.google.com ([209.85.216.175])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 23 Aug 2010 03:02:26 +0200
Received: by qyk8 with SMTP id 8so2383870qyk.6
        for <caml-list@inria.fr>; Sun, 22 Aug 2010 18:02:25 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.54.69 with SMTP id p5mr2833544qag.264.1282525345488; Sun,
 22 Aug 2010 18:02:25 -0700 (PDT)
Received: by 10.229.97.81 with HTTP; Sun, 22 Aug 2010 18:02:25 -0700 (PDT)
X-Originating-IP: [99.180.100.231]
In-Reply-To: <AANLkTi=oRNuvhHBd-WMn9G1+_enPd5CX-0XQenvqM3Sh@mail.gmail.com>
References: <AANLkTi=vo41hxuw_uwtCVD6YMHeUBfBR+YYNCxKrCjU0@mail.gmail.com>
	<1282434367.988.11.camel@mathias-ens>
	<AANLkTinJai4VJf0=X9_G1eBj1nfioztCe-9pMAr4EAGG@mail.gmail.com>
	<AANLkTi=oRNuvhHBd-WMn9G1+_enPd5CX-0XQenvqM3Sh@mail.gmail.com>
Date: Sun, 22 Aug 2010 20:02:25 -0500
Message-ID: <AANLkTik5f7v05hSWMNivZL1uMRdUarwW=Wc0hv9W+m9s@mail.gmail.com>
Subject: Re: [Caml-list] caml_copy_string
From: Jeffrey Barber <jeff@mathgladiator.com>
To: Till Varoquaux <till@pps.jussieu.fr>
Cc: Mathias Kende <mathias.kende@ens.fr>, caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0015175cdee2a22071048e73338a
X-Spam: no; 0.00; node:01 ocaml:01 alloc:01 allocator:01 alloc:01 buffer:01 ocaml:01 memcpy:01 malloc:01 byterun:01 mlvalues:01 val:01 val:01 ffi:01 byte:01 

--0015175cdee2a22071048e73338a
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

No known bottlenecks yet, just making a list of possible bottlenecks so I
can sleep on ways of optimizing them when I get node.ocaml to "feature
complete" status.

For this issue, I'm going to use Mathias's advice for caml_alloc_string and
try two things. I'm going to test giving libevent a custom memory allocator
that uses caml_alloc_string, and the other way is just focus on how I buffe=
r
strings and make a separate read_line that uses caml_alloc.

On Sun, Aug 22, 2010 at 7:42 PM, Till Varoquaux <till@pps.jussieu.fr> wrote=
:

> Actually Mathias is spot on: you need your string to be allocated in
> the memory region owned by the ocaml GC and tagged properly (that is
> wrapped with the correct GC info). After that you can pass it around
> in C as a string but you should never resize it. That being said you
> only save a call to what existentially is memcpy (unless you need to
> malloc your c string): this should be real fast. Are you  sure this is
> your bottleneck?
>
> Till
>
> On Sun, Aug 22, 2010 at 1:16 PM, Till Varoquaux <till@pps.jussieu.fr>
> wrote:
> > In byterun/mlvalues.h
> >
> > #define Bp_val(v) ((char *) (v))
> > ....
> > #define String_val(x) ((char *) Bp_val(x))
> >
> > Doesn't look like String_val is doing much copying to me....
> >
> >
> > Till
> >
> > On Sat, Aug 21, 2010 at 7:46 PM, Mathias Kende <mathias.kende@ens.fr>
> wrote:
> >> Le samedi 21 ao=FBt 2010 =E0 18:30 -0500, Jeffrey Barber a =E9crit :
> >>> Is there a way to get a string from C to OCaml without the
> >>> caml_copy_string
> >>> function, or is there a version that doesn't copy the string?
> >>
> >> There is no such function in the Caml FFI. You could write one yoursel=
f
> >> but then the string must have been specially allocated because you nee=
d
> >> to add a one word header to the string and maybe some byte at the end.
> >> So, if you have to exchange strings between OCaml and C, the easiest w=
ay
> >> is to always allocate them with the caml_alloc_string function. That w=
ay
> >> you can use the pointer returned by String_val in your C code and the
> >> string remains a valid Caml string (except caml does not use zero as t=
he
> >> end of string and will stick to its allocated size).
> >>
> >> Mathias
> >>
> >> _______________________________________________
> >> Caml-list mailing list. Subscription management:
> >> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> >> Archives: http://caml.inria.fr
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >
>

--0015175cdee2a22071048e73338a
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

No known bottlenecks yet, just making a list of possible bottlenecks so I c=
an sleep on ways of optimizing them when I get node.ocaml to &quot;feature =
complete&quot; status.<br><br>For this issue, I&#39;m going to use Mathias&=
#39;s advice for caml_alloc_string and try two things. I&#39;m going to tes=
t giving libevent a custom memory allocator that uses caml_alloc_string, an=
d the other way is just focus on how I buffer strings and make a separate r=
ead_line that uses caml_alloc.<br>
<br><div class=3D"gmail_quote">On Sun, Aug 22, 2010 at 7:42 PM, Till Varoqu=
aux <span dir=3D"ltr">&lt;<a href=3D"mailto:till@pps.jussieu.fr">till@pps.j=
ussieu.fr</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); p=
adding-left: 1ex;">
Actually Mathias is spot on: you need your string to be allocated in<br>
the memory region owned by the ocaml GC and tagged properly (that is<br>
wrapped with the correct GC info). After that you can pass it around<br>
in C as a string but you should never resize it. That being said you<br>
only save a call to what existentially is memcpy (unless you need to<br>
malloc your c string): this should be real fast. Are you =A0sure this is<br=
>
your bottleneck?<br>
<font color=3D"#888888"><br>
Till<br>
</font><div><div></div><div class=3D"h5"><br>
On Sun, Aug 22, 2010 at 1:16 PM, Till Varoquaux &lt;<a href=3D"mailto:till@=
pps.jussieu.fr">till@pps.jussieu.fr</a>&gt; wrote:<br>
&gt; In byterun/mlvalues.h<br>
&gt;<br>
&gt; #define Bp_val(v) ((char *) (v))<br>
&gt; ....<br>
&gt; #define String_val(x) ((char *) Bp_val(x))<br>
&gt;<br>
&gt; Doesn&#39;t look like String_val is doing much copying to me....<br>
&gt;<br>
&gt;<br>
&gt; Till<br>
&gt;<br>
&gt; On Sat, Aug 21, 2010 at 7:46 PM, Mathias Kende &lt;<a href=3D"mailto:m=
athias.kende@ens.fr">mathias.kende@ens.fr</a>&gt; wrote:<br>
&gt;&gt; Le samedi 21 ao=FBt 2010 =E0 18:30 -0500, Jeffrey Barber a =E9crit=
 :<br>
&gt;&gt;&gt; Is there a way to get a string from C to OCaml without the<br>
&gt;&gt;&gt; caml_copy_string<br>
&gt;&gt;&gt; function, or is there a version that doesn&#39;t copy the stri=
ng?<br>
&gt;&gt;<br>
&gt;&gt; There is no such function in the Caml FFI. You could write one you=
rself<br>
&gt;&gt; but then the string must have been specially allocated because you=
 need<br>
&gt;&gt; to add a one word header to the string and maybe some byte at the =
end.<br>
&gt;&gt; So, if you have to exchange strings between OCaml and C, the easie=
st way<br>
&gt;&gt; is to always allocate them with the caml_alloc_string function. Th=
at way<br>
&gt;&gt; you can use the pointer returned by String_val in your C code and =
the<br>
&gt;&gt; string remains a valid Caml string (except caml does not use zero =
as the<br>
&gt;&gt; end of string and will stick to its allocated size).<br>
&gt;&gt;<br>
&gt;&gt; Mathias<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; Caml-list mailing list. Subscription management:<br>
&gt;&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t" target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-li=
st</a><br>
&gt;&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http:=
//caml.inria.fr</a><br>
&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocam=
l_beginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginner=
s</a><br>
&gt;&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=
=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;&gt;<br>
&gt;<br>
</div></div></blockquote></div><br>

--0015175cdee2a22071048e73338a--

