Return-Path: <fw@deneb.enyo.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 2AAAEBBAF
	for <caml-list@yquem.inria.fr>; Sun,  8 Aug 2010 19:59:43 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: An8EAEKNXkxXaqLJgWdsb2JhbACgRBUBARYiIsAZhToE
X-IronPort-AV: E=Sophos;i="4.55,338,1278280800"; 
   d="scan'208";a="56861510"
Received: from ka.mail.enyo.de ([87.106.162.201])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 08 Aug 2010 19:59:42 +0200
Received: from [172.17.135.4] (helo=deneb.enyo.de)
	by ka.mail.enyo.de with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	id 1OiA9s-0003wQ-Eg; Sun, 08 Aug 2010 19:59:40 +0200
Received: from fw by deneb.enyo.de with local (Exim 4.72)
	(envelope-from <fw@deneb.enyo.de>)
	id 1OiA9s-0007dJ-7R; Sun, 08 Aug 2010 19:59:40 +0200
From: Florian Weimer <fw@deneb.enyo.de>
To: Jeremy Bem <jeremy1@gmail.com>
Cc: caml-list List <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] interest in a much simpler, but modern, Caml?
References: <AANLkTi=UuefVu9CmwwomimGzMqFrks5SZ+227Znv5r+z@mail.gmail.com>
Date: Sun, 08 Aug 2010 19:59:40 +0200
In-Reply-To: <AANLkTi=UuefVu9CmwwomimGzMqFrks5SZ+227Znv5r+z@mail.gmail.com>
	(Jeremy Bem's message of "Fri, 6 Aug 2010 00:04:34 -0400")
Message-ID: <877hk1m1df.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam: no; 0.00; ocaml:01 typechecker:01 mutable:01 type-safe:01 owing:98 equality:01 polymorphic:01 caml-list:01 strings:01 modules:02 modules:02 caml:02 caml:02 rewritten:02 supported:02 

* Jeremy Bem:

> To support my research, I've developed an implementation ("Llama Light") of
> the core Caml language. Modules, objects, labels etc are not supported
> (except for file-level modules). The system strongly resembles OCaml,
> however the completely rewritten typechecker is not only much smaller in
> terms of lines-of-code; it has a genuinely simpler design owing especially
> to the lack of first-class modules.

How do you deal with strings (are they mutable?) and polymorphic
equality (is it type-safe?)?

