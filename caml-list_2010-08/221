Return-Path: <jonathandeanharrop@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id C5EE4BC57
	for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 17:57:29 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmcCAG5xe0xKfVIuimdsb2JhbACBQ5EygU6DfAGHeggVAQEBCgkMBw8FH6InizoBBY5cAQSFN4Fbgxg
X-IronPort-AV: E=Sophos;i="4.56,293,1280700000"; 
   d="scan'208,217";a="68378444"
Received: from mail-ww0-f46.google.com ([74.125.82.46])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Aug 2010 17:57:29 +0200
Received: by wwb18 with SMTP id 18so2924634wwb.3
        for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 08:57:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:from:to:cc:references
         :in-reply-to:subject:date:organization:message-id:mime-version
         :content-type:x-mailer:thread-index:content-language;
        bh=2GtzX9/O9T7pp6hNZ2TCfOmUtVBv+IsUkTWXDHLlaGA=;
        b=cB2LtGa7hN13XeCwZ+leCczuk2U4mcg2uamfjGd8ctunU5slWIFfUKCNx9PdpoGjXq
         oRgMcsfWmwE8EPBbeLgBEqNoWpDG3J/r4IvCkh8ry80fDtRRQQjAydb3CGSw/7Xp5rx1
         XY4cTTjBDZZlCwlcOW/CQuIoIbe6aYZGiSnTc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=from:to:cc:references:in-reply-to:subject:date:organization
         :message-id:mime-version:content-type:x-mailer:thread-index
         :content-language;
        b=MFRpPXeEtHdXGFdSJRTGgMsnOtqUSctd3nZx3Sp+dCFnz+huXA1LI32JZf+c2FQ+7I
         wWl/8zc9fUvTisw/kcIp6+ugvl5cGklK/evvwVSQ/lLDt6nUCKXBV6vcoiLbUiORLD6F
         j0wBsnOrOf74zhhauD/wC0duZfSe4t7eMH8nA=
Received: by 10.227.208.85 with SMTP id gb21mr4544302wbb.167.1283183847172;
        Mon, 30 Aug 2010 08:57:27 -0700 (PDT)
Received: from WinEight ([87.113.136.121])
        by mx.google.com with ESMTPS id w1sm4549152weq.1.2010.08.30.08.57.23
        (version=SSLv3 cipher=RC4-MD5);
        Mon, 30 Aug 2010 08:57:24 -0700 (PDT)
From: Jon Harrop <jonathandeanharrop@googlemail.com>
To: "'ivan chollet'" <ivan.chollet@gmail.com>,
	"'Jeremy Bem'" <jeremy1@gmail.com>
Cc: "'caml-list List'" <caml-list@yquem.inria.fr>
References: <AANLkTin9S-d7jy1byqh_5wy69pVss_vxaiutTz7RSryO@mail.gmail.com>	<AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>	<AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com> <AANLkTi=ptf2AnYV+1e66JHtwzbWQQvaUtdNvPbEsHJiA@mail.gmail.com>
In-Reply-To: <AANLkTi=ptf2AnYV+1e66JHtwzbWQQvaUtdNvPbEsHJiA@mail.gmail.com>
Subject: RE: [Caml-list] Llama Light: a simple implementation of Caml
Date: Mon, 30 Aug 2010 16:57:04 +0100
Organization: Flying Frog Consultancy
Message-ID: <026901cb485b$ff1b8ad0$fd52a070$@com>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_026A_01CB4864.60DFF2D0"
X-Mailer: Microsoft Office Outlook 12.0
Thread-Index: ActIMjODNbUYxsFRRf2gzu8KyGQrCQAKOQVg
Content-Language: en-gb
X-Spam: no; 0.00; run-time:01 compiler:01 recursion:01 cheers:01 pointers:01 typechecker:01 ocaml:01 typechecker:01 runtime:01 bytecode:01 compiler:01 bug:01 toplevel:01 ocaml:01 ocaml's:01 

This is a multi-part message in MIME format.

------=_NextPart_000_026A_01CB4864.60DFF2D0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

Try to remove all assumptions of uniform run-time representation from the
compiler because avoiding boxing gives huge performance gains and makes it
much easier to write a performant garbage collector. You'll need to
sacrifice polymorphic recursion though, which you probably already have
anyway.

 

Cheers,

Jon.

 

From: caml-list-bounces@yquem.inria.fr
[mailto:caml-list-bounces@yquem.inria.fr] On Behalf Of ivan chollet
Sent: 30 August 2010 11:57
To: Jeremy Bem
Cc: caml-list List
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml

 

OK.

This looks nice and I would be pleased if you could put a few pointers or
explanations on your webpage about your typechecker implementation and how
it differs with OCaml typechecker. 
I will get some free time this week and to implement yet another runtime and
bytecode compiler from scratch. Not sure if it will be completed at the end
of the week, but i'll be definitely interested to know more about the
theoretical motivations of works like yours!




On Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem <jeremy1@gmail.com> wrote:

bluestorm:

 

Thank you for the bug report.  The toplevel issue has been fixed in the
version now posted.

 

Do you see a nice way to add let-generalization without reintroducing "type
levels"?  I was pleased to remove those.

 

Ivan:

 

It was originally forked from Caml Light but now includes more code from
OCaml.  The typechecker is mostly original code at this point; the compiler
is OCaml's with minimal changes to accommodate the new typechecker; the
runtime is almost identical to OCaml's.

 

-Jeremy

 

On Sun, Aug 29, 2010 at 6:52 AM, bluestorm <bluestorm.dylc@gmail.com> wrote:

When using the toplevel, declaration phrases fail (looks like a linking
problem), but expressions work as intented :

$ llama

        Llama Light version 0.0828

# 1 + 1;;

- : int = 2

# let x = 1 + 1;;

Error: Reference to undefined global `Toploop'

 

I made my tests using "llamac -i foo.ml".

 


I found it startling that the most important difference to my eyes are
buried, on the web page, under lines of relatively boring documentation :

In Llama Light (and in contrast to other Caml implementations):

 

- let does not generalize.

- Phrases are generalized immediately. In particular, "let foo = ref []"
does not typecheck.

- The value restriction is not relaxed. (This is similar to Caml Light.)

 

These choices simplify the implementation while having relatively little
impact on the user.

 

You cite the "Let Should Not Be Generalised" paper. There is however a
difference in your application of the maxim : in the paper, local let that
have polymorphic type annotations are generalised, while in your system it
is not possible to force generalisation.

 

I had a look at the typer, and it's indeed rather simple; it seems it would
be quite simple to implement generalized let (when encountering annotations
or with a different syntaxic construct : "letg .. = .. in ..."), but the
added complexity is equivalent to adding let generalization by default.

 

Is the presence of let-generalization a real issue in your work ?

 


_______________________________________________
Caml-list mailing list. Subscription management:
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
Archives: http://caml.inria.fr
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs

 


------=_NextPart_000_026A_01CB4864.60DFF2D0
Content-Type: text/html;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" =
xmlns:o=3D"urn:schemas-microsoft-com:office:office" =
xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-GB link=3Dblue vlink=3Dpurple>

<div class=3DWordSection1>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>Try to remove all assumptions of uniform run-time =
representation
from the compiler because avoiding boxing gives huge performance gains =
and
makes it much easier to write a performant garbage collector. =
You&#8217;ll need
to sacrifice polymorphic recursion though, which you probably already =
have
anyway&#8230;<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>Cheers,<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'>Jon.<o:p></o:p></span></p>

<p class=3DMsoNormal><span =
style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<div style=3D'border:none;border-left:solid blue 1.5pt;padding:0cm 0cm =
0cm 4.0pt'>

<div>

<div style=3D'border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt =
0cm 0cm 0cm'>

<p class=3DMsoNormal><b><span lang=3DEN-US =
style=3D'font-size:10.0pt;font-family:
"Tahoma","sans-serif"'>From:</span></b><span lang=3DEN-US =
style=3D'font-size:10.0pt;
font-family:"Tahoma","sans-serif"'> caml-list-bounces@yquem.inria.fr
[mailto:caml-list-bounces@yquem.inria.fr] <b>On Behalf Of </b>ivan =
chollet<br>
<b>Sent:</b> 30 August 2010 11:57<br>
<b>To:</b> Jeremy Bem<br>
<b>Cc:</b> caml-list List<br>
<b>Subject:</b> Re: [Caml-list] Llama Light: a simple implementation of =
Caml<o:p></o:p></span></p>

</div>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-bottom:12.0pt'>OK.<br>
<br>
This looks nice and I would be pleased if you could put a few pointers =
or
explanations on your webpage about your typechecker implementation and =
how it
differs with OCaml typechecker. <br>
I will get some free time this week and to implement yet another runtime =
and
bytecode compiler from scratch. Not sure if it will be completed at the =
end of
the week, but i'll be definitely interested to know more about the =
theoretical
motivations of works like yours!<br>
<br>
<br>
<o:p></o:p></p>

<div>

<p class=3DMsoNormal>On Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem &lt;<a
href=3D"mailto:jeremy1@gmail.com">jeremy1@gmail.com</a>&gt; =
wrote:<o:p></o:p></p>

<div>

<p class=3DMsoNormal>bluestorm:<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<p class=3DMsoNormal>Thank you for the bug report. &nbsp;The toplevel =
issue has
been fixed in the version now posted.<o:p></o:p></p>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>Do you see a nice way to add let-generalization =
without
reintroducing &quot;type levels&quot;? &nbsp;I was pleased to remove =
those.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>Ivan:<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>It was originally forked from Caml Light but now =
includes
more code from OCaml. &nbsp;The typechecker is mostly original code at =
this
point; the compiler is OCaml's with minimal changes to accommodate the =
new
typechecker; the runtime is almost identical to OCaml's.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal><span =
style=3D'color:#888888'>-Jeremy<o:p></o:p></span></p>

</div>

<div>

<div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<div>

<p class=3DMsoNormal>On Sun, Aug 29, 2010 at 6:52 AM, bluestorm &lt;<a
href=3D"mailto:bluestorm.dylc@gmail.com" =
target=3D"_blank">bluestorm.dylc@gmail.com</a>&gt;
wrote:<o:p></o:p></p>

<div>

<p class=3DMsoNormal>When using the toplevel, declaration phrases fail =
(looks like
a linking problem), but expressions work as intented :<o:p></o:p></p>

<p class=3DMsoNormal>$ llama<o:p></o:p></p>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Llama Light =
version 0.0828<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal># 1 + 1;;<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>- : int =3D 2<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal># let x =3D 1 + 1;;<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>Error: Reference to undefined global =
`Toploop'<o:p></o:p></p>

</blockquote>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<div>

<p class=3DMsoNormal>I made my tests using &quot;llamac -i <a =
href=3D"http://foo.ml"
target=3D"_blank">foo.ml</a>&quot;.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal style=3D'margin-bottom:12.0pt'><br>
I found it startling that the most important difference to my eyes are =
buried,
on the web page, under lines of relatively boring documentation =
:<o:p></o:p></p>

<p class=3DMsoNormal>In Llama Light (and in contrast to other Caml
implementations):<o:p></o:p></p>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>- let&nbsp;does not generalize.<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>- Phrases are generalized immediately. In =
particular,
&quot;let foo =3D ref []&quot; does not typecheck.<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>- The value restriction is not&nbsp;relaxed. (This =
is
similar to Caml Light.)<o:p></o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</blockquote>

<blockquote style=3D'border:none;border-left:solid #CCCCCC =
1.0pt;padding:0cm 0cm 0cm 6.0pt;
margin-right:0cm'>

<p class=3DMsoNormal>These choices simplify the implementation while =
having
relatively little impact on the user.<o:p></o:p></p>

</blockquote>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>You cite the &quot;Let Should Not Be =
Generalised&quot;
paper. There is however a difference in your application of the maxim : =
in the
paper, local let that have polymorphic type annotations are generalised, =
while
in your system it is not possible to force =
generalisation.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>I had a look at the typer, and it's indeed rather =
simple; it
seems it would be quite simple to implement generalized let (when =
encountering
annotations or with a different syntaxic construct : &quot;letg .. =3D =
.. in
...&quot;), but the added complexity is equivalent to adding let =
generalization
by default.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

<div>

<p class=3DMsoNormal>Is the presence of let-generalization a real issue =
in your
work ?<o:p></o:p></p>

</div>

</div>

</div>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

</div>

</div>

<p class=3DMsoNormal style=3D'margin-bottom:12.0pt'><br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list"
target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t</a><br>
Archives: <a href=3D"http://caml.inria.fr" =
target=3D"_blank">http://caml.inria.fr</a><br>
Beginner's list: <a =
href=3D"http://groups.yahoo.com/group/ocaml_beginners"
target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" =
target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><o:p></o:p></p>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

</div>

</body>

</html>

------=_NextPart_000_026A_01CB4864.60DFF2D0--

