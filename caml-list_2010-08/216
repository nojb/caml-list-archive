Return-Path: <ivan.chollet@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 55875BC57
	for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 12:57:26 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ai8CAB4re0zRVditkGdsb2JhbACScoVKAYd6CBUBAQEBCQkMBxEDH559iSeCE4VHLohUAQEDBYUyBIFXgxiFGg
X-IronPort-AV: E=Sophos;i="4.56,292,1280700000"; 
   d="scan'208";a="68362041"
Received: from mail-qy0-f173.google.com ([209.85.216.173])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Aug 2010 12:57:25 +0200
Received: by qyk5 with SMTP id 5so3356932qyk.18
        for <caml-list@yquem.inria.fr>; Mon, 30 Aug 2010 03:57:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=1aPv9PitwFJVj9Z07Ulp9fI84RriSY55KAgxGBku9SE=;
        b=WrY92/qNheHzE59ddGL7biGgtBCzB7JpNNX7vzq74bpE0J8xNM/LZU63bsn4TfqhxF
         QhqM5RqaCCrfVLxBdUFtvIu6ELVOMMXXgfh7tV/nztj5VKs/+VC99tIKp84aAK3Q4IuL
         XxRGoLy/L9HoktrqAZDeanxeeuaXgN9/zTxQY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=OwIf6Y/nBi1c77kIQ2QS9EPGOpaESzOdLxv17re32Qcdducyf6ovh4+iShyXsIIu8F
         hNnwWqxwTYbr9f3+jV8NHj4uAbdzHIHSqx0ejL14gdtuQ0l4eEowp1qKWfEotgkyYwea
         RXf5j5xrD974uI5cnOnUIUV79mqBMsjhFbSs4=
MIME-Version: 1.0
Received: by 10.229.251.210 with SMTP id mt18mr2949524qcb.151.1283165844039;
 Mon, 30 Aug 2010 03:57:24 -0700 (PDT)
Received: by 10.229.218.19 with HTTP; Mon, 30 Aug 2010 03:57:23 -0700 (PDT)
In-Reply-To: <AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com>
References: <AANLkTin9S-d7jy1byqh_5wy69pVss_vxaiutTz7RSryO@mail.gmail.com>
	<AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>
	<AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com>
Date: Mon, 30 Aug 2010 20:57:23 +1000
Message-ID: <AANLkTi=ptf2AnYV+1e66JHtwzbWQQvaUtdNvPbEsHJiA@mail.gmail.com>
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml
From: ivan chollet <ivan.chollet@gmail.com>
To: Jeremy Bem <jeremy1@gmail.com>
Cc: bluestorm <bluestorm.dylc@gmail.com>,
	caml-list List <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=00163631036f526806048f0854db
X-Spam: no; 0.00; pointers:01 typechecker:01 ocaml:01 typechecker:01 runtime:01 bytecode:01 compiler:01 bug:01 toplevel:01 ocaml:01 compiler:01 ocaml's:01 runtime:01 ocaml's:01 toplevel:01 

--00163631036f526806048f0854db
Content-Type: text/plain; charset=ISO-8859-1

OK.

This looks nice and I would be pleased if you could put a few pointers or
explanations on your webpage about your typechecker implementation and how
it differs with OCaml typechecker.
I will get some free time this week and to implement yet another runtime and
bytecode compiler from scratch. Not sure if it will be completed at the end
of the week, but i'll be definitely interested to know more about the
theoretical motivations of works like yours!



On Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem <jeremy1@gmail.com> wrote:

> bluestorm:
>
> Thank you for the bug report.  The toplevel issue has been fixed in the
> version now posted.
>
> Do you see a nice way to add let-generalization without reintroducing "type
> levels"?  I was pleased to remove those.
>
> Ivan:
>
> It was originally forked from Caml Light but now includes more code from
> OCaml.  The typechecker is mostly original code at this point; the compiler
> is OCaml's with minimal changes to accommodate the new typechecker; the
> runtime is almost identical to OCaml's.
>
> -Jeremy
>
> On Sun, Aug 29, 2010 at 6:52 AM, bluestorm <bluestorm.dylc@gmail.com>wrote:
>
>> When using the toplevel, declaration phrases fail (looks like a linking
>> problem), but expressions work as intented :
>>
>>> $ llama
>>
>>         Llama Light version 0.0828
>>
>> # 1 + 1;;
>>
>> - : int = 2
>>
>> # let x = 1 + 1;;
>>
>> Error: Reference to undefined global `Toploop'
>>
>>
>> I made my tests using "llamac -i foo.ml".
>>
>>
>> I found it startling that the most important difference to my eyes are
>> buried, on the web page, under lines of relatively boring documentation :
>>
>> In Llama Light (and in contrast to other Caml implementations):
>>
>>
>>> - let does not generalize.
>>
>> - Phrases are generalized immediately. In particular, "let foo = ref []"
>>> does not typecheck.
>>
>> - The value restriction is not relaxed. (This is similar to Caml Light.)
>>
>>
>>> These choices simplify the implementation while having relatively little
>>> impact on the user.
>>
>>
>> You cite the "Let Should Not Be Generalised" paper. There is however a
>> difference in your application of the maxim : in the paper, local let that
>> have polymorphic type annotations are generalised, while in your system it
>> is not possible to force generalisation.
>>
>> I had a look at the typer, and it's indeed rather simple; it seems it
>> would be quite simple to implement generalized let (when encountering
>> annotations or with a different syntaxic construct : "letg .. = .. in ..."),
>> but the added complexity is equivalent to adding let generalization by
>> default.
>>
>> Is the presence of let-generalization a real issue in your work ?
>>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--00163631036f526806048f0854db
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

OK.<br><br>This looks nice and I would be pleased if you could put a few po=
inters or explanations on your webpage about your typechecker implementatio=
n and how it differs with OCaml typechecker. <br>I will get some free time =
this week and to implement yet another runtime and bytecode compiler from s=
cratch. Not sure if it will be completed at the end of the week, but i&#39;=
ll be definitely interested to know more about the theoretical motivations =
of works like yours!<br>
<br><br><br><div class=3D"gmail_quote">On Mon, Aug 30, 2010 at 2:37 AM, Jer=
emy Bem <span dir=3D"ltr">&lt;<a href=3D"mailto:jeremy1@gmail.com">jeremy1@=
gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); p=
adding-left: 1ex;">
<div>bluestorm:</div><div><br></div>Thank you for the bug report. =A0The to=
plevel issue has been fixed in the version now posted.<br><div><br></div><d=
iv>Do you see a nice way to add let-generalization without reintroducing &q=
uot;type levels&quot;? =A0I was pleased to remove those.</div>

<div><br></div><div>Ivan:</div><div><br></div><div>It was originally forked=
 from Caml Light but now includes more code from OCaml. =A0The typechecker =
is mostly original code at this point; the compiler is OCaml&#39;s with min=
imal changes to accommodate the new typechecker; the runtime is almost iden=
tical to OCaml&#39;s.</div>

<div><br></div><font color=3D"#888888"><div>-Jeremy</div></font><div><div><=
/div><div class=3D"h5"><div><br><div class=3D"gmail_quote">On Sun, Aug 29, =
2010 at 6:52 AM, bluestorm <span dir=3D"ltr">&lt;<a href=3D"mailto:bluestor=
m.dylc@gmail.com" target=3D"_blank">bluestorm.dylc@gmail.com</a>&gt;</span>=
 wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;"><div>When using t=
he toplevel, declaration phrases fail (looks like a linking problem), but e=
xpressions work as intented :<br>

<blockquote class=3D"gmail_quote" style=3D"margin-top: 0px; margin-right: 0=
px; margin-bottom: 0px; border-left: 1px solid rgb(204, 204, 204); padding-=
left: 1ex;">

$ llama</blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top: =
0px; margin-right: 0px; margin-bottom: 0px; border-left: 1px solid rgb(204,=
 204, 204); padding-left: 1ex;">


=A0=A0 =A0 =A0 =A0Llama Light version 0.0828</blockquote><blockquote class=
=3D"gmail_quote" style=3D"margin-top: 0px; margin-right: 0px; margin-bottom=
: 0px; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">


# 1 + 1;;</blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top=
: 0px; margin-right: 0px; margin-bottom: 0px; border-left: 1px solid rgb(20=
4, 204, 204); padding-left: 1ex;">


- : int =3D 2</blockquote><blockquote class=3D"gmail_quote" style=3D"margin=
-top: 0px; margin-right: 0px; margin-bottom: 0px; border-left: 1px solid rg=
b(204, 204, 204); padding-left: 1ex;">


# let x =3D 1 + 1;;</blockquote><blockquote class=3D"gmail_quote" style=3D"=
margin-top: 0px; margin-right: 0px; margin-bottom: 0px; border-left: 1px so=
lid rgb(204, 204, 204); padding-left: 1ex;">


Error: Reference to undefined global `Toploop&#39;</blockquote><br><div>I m=
ade my tests using &quot;llamac -i <a href=3D"http://foo.ml" target=3D"_bla=
nk">foo.ml</a>&quot;.</div><div><br></div><div><br>I found it startling tha=
t the most important difference to my eyes are buried, on the web page, und=
er lines of relatively boring documentation :<br>



<br><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px; margin-righ=
t: 0px; margin-bottom: 0px; border-left: 1px solid rgb(204, 204, 204); padd=
ing-left: 1ex;">

In Llama Light (and in contrast to other Caml implementations):</blockquote=
><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; border-left: 1px solid rgb(204, 204, 204); padding=
-left: 1ex;">



<br></blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px=
; margin-right: 0px; margin-bottom: 0px; border-left: 1px solid rgb(204, 20=
4, 204); padding-left: 1ex;">


- let=A0does not generalize.</blockquote><blockquote class=3D"gmail_quote" =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; border-lef=
t: 1px solid rgb(204, 204, 204); padding-left: 1ex;">


- Phrases are generalized immediately. In particular, &quot;let foo =3D ref=
 []&quot; does not typecheck.</blockquote><blockquote class=3D"gmail_quote"=
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; border-le=
ft: 1px solid rgb(204, 204, 204); padding-left: 1ex;">



- The value restriction is not=A0relaxed. (This is similar to Caml Light.)<=
/blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px; mar=
gin-right: 0px; margin-bottom: 0px; border-left: 1px solid rgb(204, 204, 20=
4); padding-left: 1ex;">



<br></blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top: 0px=
; margin-right: 0px; margin-bottom: 0px; border-left: 1px solid rgb(204, 20=
4, 204); padding-left: 1ex;">


These choices simplify the implementation while having relatively little im=
pact on the user.</blockquote><div><br></div><div>You cite the &quot;Let Sh=
ould Not Be Generalised&quot; paper. There is however a difference in your =
application of the maxim : in the paper, local let that have polymorphic ty=
pe annotations are generalised, while in your system it is not possible to =
force generalisation.</div>



<div><br></div><div>I had a look at the typer, and it&#39;s indeed rather s=
imple; it seems it would be quite simple to implement generalized let (when=
 encountering annotations or with a different syntaxic construct : &quot;le=
tg .. =3D .. in ...&quot;), but the added complexity is equivalent to addin=
g let generalization by default.</div>



<div><br></div><div>Is the presence of let-generalization a real issue in y=
our work ?</div></div></div>
</blockquote></div><br></div>
</div></div><br>_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br></blockquote></div><br>

--00163631036f526806048f0854db--

