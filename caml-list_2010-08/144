Return-Path: <damien.doligez@inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 3784ABBAF
	for <caml-list@yquem.inria.fr>; Mon, 23 Aug 2010 16:36:20 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.56,257,1280700000"; 
   d="scan'208";a="57693821"
Received: from macadam.inria.fr ([128.93.8.130])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/AES128-SHA; 23 Aug 2010 16:36:20 +0200
Subject: Re: [Caml-list] Converting variants with only constant constructors  to integers
Mime-Version: 1.0 (Apple Message framework v1081)
Content-Type: text/plain; charset=us-ascii
From: Damien Doligez <damien.doligez@inria.fr>
In-Reply-To: <AANLkTikRe85mNn83G8zU6JCQzjj2VkRlQQN1DOy1146q@mail.gmail.com>
Date: Mon, 23 Aug 2010 16:36:19 +0200
Cc: caml-list caml-list <caml-list@yquem.inria.fr>
Content-Transfer-Encoding: quoted-printable
Message-Id: <D298892D-4AB3-4FE1-9FE3-21CEBCF2BD00@inria.fr>
References: <4C0D3557.1020200@gmail.com> <010d01cb0672$09f3eb90$1ddbc2b0$@romulus.metastack.com> <4C0D4C88.4070102@gmail.com> <AANLkTinsp9JgePfV6aZVyypOdjNHmNzz3E_i-U3Zvo9S@mail.gmail.com> <AANLkTikI4-YKT7A3AaNoippzvyAZBRU-HlhaGAh6QwrC@mail.gmail.com> <AANLkTimcF7VHWskWk3ZINn_ySH4oxIHFvFP1mXmqtw1x@mail.gmail.com> <AANLkTilJ6R6MPCY7d2E7IcjFzITMIJipHd2yyH-02TfD@mail.gmail.com> <AANLkTikRe85mNn83G8zU6JCQzjj2VkRlQQN1DOy1146q@mail.gmail.com>
To: Kaustuv Chaudhuri <kaustuv.chaudhuri@inria.fr>
X-Mailer: Apple Mail (2.1081)
X-Spam: no; 0.00; variants:01 constructors:01 integers:01 damien:01 damien:01 polymorphism:01 ocaml:01 val:01 ocamlrun:01 malloc:01 1.0:98 doligez:01 doligez:01 wrote:01 caml-list:01 

Hi Kaustuv,

On 2010-06-08, at 20:22, Kaustuv Chaudhuri wrote:

>> Of course intify can cause a segmentation fault!
>>=20
>> # let arr =3D Array.of_list [intify 1.0; 0];;
>> Segmentation fault
>=20
> This may be splitting hairs, but the reason that fails is that
> Array.of_list's ad hoc polymorphism heuristic assumes that if the
> first element of the list is allocated, then all elements are
> allocated. Merely changing the order works.


Then again, good old addition has the same kind of problem with
intify.

$ ocaml
        Objective Caml version 3.12.0

# external intify : 'a -> int =3D "%identity";;
external intify : 'a -> int =3D "%identity"
# let x =3D 1 + intify (1, 2);;
val x : int =3D 2147734445
# Gc.minor ();; =20
ocamlrun(11589) malloc: *** mmap(size=3D184834061894270976) failed =
(error code=3D12)
*** error: can't allocate region


-- Damien

