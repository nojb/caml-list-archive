Return-Path: <fw@deneb.enyo.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id EA24CBBAF
	for <caml-list@yquem.inria.fr>; Sun,  8 Aug 2010 20:52:55 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: An8EAHOZXkxXaqLJgWdsb2JhbACgRBUBARYiIr95hToE
X-IronPort-AV: E=Sophos;i="4.55,338,1278280800"; 
   d="scan'208";a="55210102"
Received: from ka.mail.enyo.de ([87.106.162.201])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES256-SHA; 08 Aug 2010 20:52:55 +0200
Received: from [172.17.135.4] (helo=deneb.enyo.de)
	by ka.mail.enyo.de with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	id 1OiAzN-00047b-Sk; Sun, 08 Aug 2010 20:52:53 +0200
Received: from fw by deneb.enyo.de with local (Exim 4.72)
	(envelope-from <fw@deneb.enyo.de>)
	id 1OiAzN-0007qR-L9; Sun, 08 Aug 2010 20:52:53 +0200
From: Florian Weimer <fw@deneb.enyo.de>
To: Jeremy Bem <jeremy1@gmail.com>
Cc: caml-list List <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] interest in a much simpler, but modern, Caml?
References: <AANLkTi=UuefVu9CmwwomimGzMqFrks5SZ+227Znv5r+z@mail.gmail.com>
	<877hk1m1df.fsf@mid.deneb.enyo.de>
	<AANLkTi=L07p_xN7DCZQn0j+iy=-_7FzCrTm6KOf6oaJU@mail.gmail.com>
Date: Sun, 08 Aug 2010 20:52:53 +0200
In-Reply-To: <AANLkTi=L07p_xN7DCZQn0j+iy=-_7FzCrTm6KOf6oaJU@mail.gmail.com>
	(Jeremy Bem's message of "Sun, 8 Aug 2010 14:44:11 -0400")
Message-ID: <87bp9dkkca.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam: no; 0.00; equality:01 polymorphic:01 syntactic:01 caml-list:01 caml:02 florian:03 overhead:04 fix:05 comparison:05 simpler:05 matching:05 probably:07 respectively:07 classes:08 function:08 

* Jeremy Bem:

> Yes and no, respectively.  In other words, nothing new here.

Oh.  I just happen to think that those two are very high on the list
of things you want to fix once you can start with a clean slate.

> Is there a better approach to polymorphic equality floating around?

Besides type classes?  I'm not sure.  It's probably possible to remove
this feature from the language, with a little bit of syntactic
overhead to pass around a matching comparison function.

