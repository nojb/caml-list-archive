Return-Path: <jeremy1@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 0EB19BC57
	for <caml-list@yquem.inria.fr>; Sun, 29 Aug 2010 18:37:52 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am0CAJQpekzRVdY0kGdsb2JhbACYPQGIBAgWAQEBCQkMBxEDH58eiSeCE4UoLohUAQEDBYUyBIRvhRo
X-IronPort-AV: E=Sophos;i="4.56,288,1280700000"; 
   d="scan'208";a="56148312"
Received: from mail-bw0-f52.google.com ([209.85.214.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 29 Aug 2010 18:37:51 +0200
Received: by bwz5 with SMTP id 5so3914373bwz.39
        for <caml-list@yquem.inria.fr>; Sun, 29 Aug 2010 09:37:51 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=PAs7fyj3sX9E4sQO236j4JIAY54aPTkOsjzBTddm/Xs=;
        b=RcJObACsSHhysyXy/Vju0sILBTZdkpB2GaohY0zBK6XYH52xzcrkfSFHl+tQB44NH0
         x4PrhNUpDnSECPUcIc2nlRUIZwEVqWVXHG12Rmt4siju7bNTG23IM+8IZB15zTCK6ysu
         5PU3C08949OmSASmKSkvlSgtbEY89VRcQQCSE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=CetFRgwdE5NMqQUnIEHl8f22YfMo1bdPRCTZ62pGsDhR137/ferfukI2XrEhNcfFPy
         Q3a7lhYOIR1zP/Zn4EExCaQJGo9MLaFwLG9R2oFAh35P+/BfP7VXv76z0nHzA953d+Rr
         XNX7tmqgvcKWuCnWmRKPzX6AYPCnaL4uRypv4=
MIME-Version: 1.0
Received: by 10.204.11.13 with SMTP id r13mr2392438bkr.96.1283099868214; Sun,
 29 Aug 2010 09:37:48 -0700 (PDT)
Received: by 10.204.54.68 with HTTP; Sun, 29 Aug 2010 09:37:48 -0700 (PDT)
In-Reply-To: <AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>
References: <AANLkTin9S-d7jy1byqh_5wy69pVss_vxaiutTz7RSryO@mail.gmail.com>
	<AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>
Date: Sun, 29 Aug 2010 12:37:48 -0400
Message-ID: <AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com>
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml
From: Jeremy Bem <jeremy1@gmail.com>
To: bluestorm <bluestorm.dylc@gmail.com>
Cc: caml-list List <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=00032555539edb344f048ef8f7d7
X-Spam: no; 0.00; bug:01 toplevel:01 ocaml:01 typechecker:01 compiler:01 ocaml's:01 typechecker:01 runtime:01 ocaml's:01 toplevel:01 foo:01 foo:01 typecheck:01 annotations:01 typer:01 

--00032555539edb344f048ef8f7d7
Content-Type: text/plain; charset=ISO-8859-1

bluestorm:

Thank you for the bug report.  The toplevel issue has been fixed in the
version now posted.

Do you see a nice way to add let-generalization without reintroducing "type
levels"?  I was pleased to remove those.

Ivan:

It was originally forked from Caml Light but now includes more code from
OCaml.  The typechecker is mostly original code at this point; the compiler
is OCaml's with minimal changes to accommodate the new typechecker; the
runtime is almost identical to OCaml's.

-Jeremy

On Sun, Aug 29, 2010 at 6:52 AM, bluestorm <bluestorm.dylc@gmail.com> wrote:

> When using the toplevel, declaration phrases fail (looks like a linking
> problem), but expressions work as intented :
>
>> $ llama
>
>         Llama Light version 0.0828
>
> # 1 + 1;;
>
> - : int = 2
>
> # let x = 1 + 1;;
>
> Error: Reference to undefined global `Toploop'
>
>
> I made my tests using "llamac -i foo.ml".
>
>
> I found it startling that the most important difference to my eyes are
> buried, on the web page, under lines of relatively boring documentation :
>
> In Llama Light (and in contrast to other Caml implementations):
>
>
>> - let does not generalize.
>
> - Phrases are generalized immediately. In particular, "let foo = ref []"
>> does not typecheck.
>
> - The value restriction is not relaxed. (This is similar to Caml Light.)
>
>
>> These choices simplify the implementation while having relatively little
>> impact on the user.
>
>
> You cite the "Let Should Not Be Generalised" paper. There is however a
> difference in your application of the maxim : in the paper, local let that
> have polymorphic type annotations are generalised, while in your system it
> is not possible to force generalisation.
>
> I had a look at the typer, and it's indeed rather simple; it seems it would
> be quite simple to implement generalized let (when encountering annotations
> or with a different syntaxic construct : "letg .. = .. in ..."), but the
> added complexity is equivalent to adding let generalization by default.
>
> Is the presence of let-generalization a real issue in your work ?
>

--00032555539edb344f048ef8f7d7
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div>bluestorm:</div><div><br></div>Thank you for the bug report. =A0The to=
plevel issue has been fixed in the version now posted.<br><div><br></div><d=
iv>Do you see a nice way to add let-generalization without reintroducing &q=
uot;type levels&quot;? =A0I was pleased to remove those.</div>
<div><br></div><div>Ivan:</div><div><br></div><div>It was originally forked=
 from Caml Light but now includes more code from OCaml. =A0The typechecker =
is mostly original code at this point; the compiler is OCaml&#39;s with min=
imal changes to accommodate the new typechecker; the runtime is almost iden=
tical to OCaml&#39;s.</div>
<div><br></div><div>-Jeremy</div><div><br><div class=3D"gmail_quote">On Sun=
, Aug 29, 2010 at 6:52 AM, bluestorm <span dir=3D"ltr">&lt;<a href=3D"mailt=
o:bluestorm.dylc@gmail.com">bluestorm.dylc@gmail.com</a>&gt;</span> wrote:<=
br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;"><div>When using the toplevel, declaration p=
hrases fail (looks like a linking problem), but expressions work as intente=
d :<br>
<blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margin-right:0px;=
margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;border-left-color=
:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex">

$ llama</blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top:0=
px;margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-width:1=
px;border-left-color:rgb(204, 204, 204);border-left-style:solid;padding-lef=
t:1ex">


=A0=A0 =A0 =A0 =A0Llama Light version 0.0828</blockquote><blockquote class=
=3D"gmail_quote" style=3D"margin-top:0px;margin-right:0px;margin-bottom:0px=
;margin-left:0,8ex;border-left-width:1px;border-left-color:rgb(204, 204, 20=
4);border-left-style:solid;padding-left:1ex">


# 1 + 1;;</blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top=
:0px;margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-width=
:1px;border-left-color:rgb(204, 204, 204);border-left-style:solid;padding-l=
eft:1ex">


- : int =3D 2</blockquote><blockquote class=3D"gmail_quote" style=3D"margin=
-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-w=
idth:1px;border-left-color:rgb(204, 204, 204);border-left-style:solid;paddi=
ng-left:1ex">


# let x =3D 1 + 1;;</blockquote><blockquote class=3D"gmail_quote" style=3D"=
margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-=
left-width:1px;border-left-color:rgb(204, 204, 204);border-left-style:solid=
;padding-left:1ex">


Error: Reference to undefined global `Toploop&#39;</blockquote><br><div>I m=
ade my tests using &quot;llamac -i <a href=3D"http://foo.ml" target=3D"_bla=
nk">foo.ml</a>&quot;.</div><div><br></div><div><br>I found it startling tha=
t the most important difference to my eyes are buried, on the web page, und=
er lines of relatively boring documentation :<br>


<br><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margin-right:=
0px;margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;border-left-c=
olor:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex">

In Llama Light (and in contrast to other Caml implementations):</blockquote=
><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margin-right:0px=
;margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;border-left-colo=
r:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex">


<br></blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;=
margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;=
border-left-color:rgb(204, 204, 204);border-left-style:solid;padding-left:1=
ex">


- let=A0does not generalize.</blockquote><blockquote class=3D"gmail_quote" =
style=3D"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0,8e=
x;border-left-width:1px;border-left-color:rgb(204, 204, 204);border-left-st=
yle:solid;padding-left:1ex">


- Phrases are generalized immediately. In particular, &quot;let foo =3D ref=
 []&quot; does not typecheck.</blockquote><blockquote class=3D"gmail_quote"=
 style=3D"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0,8=
ex;border-left-width:1px;border-left-color:rgb(204, 204, 204);border-left-s=
tyle:solid;padding-left:1ex">


- The value restriction is not=A0relaxed. (This is similar to Caml Light.)<=
/blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margi=
n-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;borde=
r-left-color:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex">


<br></blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;=
margin-right:0px;margin-bottom:0px;margin-left:0,8ex;border-left-width:1px;=
border-left-color:rgb(204, 204, 204);border-left-style:solid;padding-left:1=
ex">


These choices simplify the implementation while having relatively little im=
pact on the user.</blockquote><div><br></div><div>You cite the &quot;Let Sh=
ould Not Be Generalised&quot; paper. There is however a difference in your =
application of the maxim : in the paper, local let that have polymorphic ty=
pe annotations are generalised, while in your system it is not possible to =
force generalisation.</div>


<div><br></div><div>I had a look at the typer, and it&#39;s indeed rather s=
imple; it seems it would be quite simple to implement generalized let (when=
 encountering annotations or with a different syntaxic construct : &quot;le=
tg .. =3D .. in ...&quot;), but the added complexity is equivalent to addin=
g let generalization by default.</div>


<div><br></div><div>Is the presence of let-generalization a real issue in y=
our work ?</div></div></div>
</blockquote></div><br></div>

--00032555539edb344f048ef8f7d7--

