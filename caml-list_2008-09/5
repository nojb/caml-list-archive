Return-Path: <luca@dealfaro.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.3 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id CA444BBAF
	for <caml-list@yquem.inria.fr>; Mon,  1 Sep 2008 19:48:26 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgQCAOvHu0jRVciqlGdsb2JhbACCNDCPJj4BAQEBCQMKBxEDoF6BaQ
X-IronPort-AV: E=Sophos;i="4.32,308,1217800800"; 
   d="scan'208";a="16691916"
Received: from wf-out-1314.google.com ([209.85.200.170])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 01 Sep 2008 19:48:25 +0200
Received: by wf-out-1314.google.com with SMTP id 24so2041343wfg.15
        for <caml-list@yquem.inria.fr>; Mon, 01 Sep 2008 10:48:23 -0700 (PDT)
Received: by 10.142.43.7 with SMTP id q7mr2202225wfq.11.1220291303645;
        Mon, 01 Sep 2008 10:48:23 -0700 (PDT)
Received: by 10.143.165.3 with HTTP; Mon, 1 Sep 2008 10:48:23 -0700 (PDT)
Message-ID: <28fa90930809011048l60d1fb7fmc31a11e3f69c3f92@mail.gmail.com>
Date: Mon, 1 Sep 2008 10:48:23 -0700
From: "Luca de Alfaro" <luca@dealfaro.org>
To: peng.zang@gmail.com
Subject: Re: [Caml-list] Ocaml, a practical functional language?
Cc: caml-list@yquem.inria.fr, "circ ular" <circularfunc@gmail.com>
In-Reply-To: <200809011237.00069.peng.zang@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_36919_24481173.1220291303637"
References: <d5f6b0140808301250k2e240eb9l7cf17a280f60dcbb@mail.gmail.com>
	 <200809011237.00069.peng.zang@gmail.com>
X-Spam: no; 0.00; ocaml:01 ocaml:01 compiler:01 largish:01 debugger:01 hash:01 haskell:01 haskell:01 abstraction:01 overkill:01 statically:01 libs:01 workarounds:01 emacs:01 tuareg:01 

------=_Part_36919_24481173.1220291303637
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

I also cast my vote for Ocaml.
Ocaml is the best compromise between pleasure of coding, speed of code, the
compiler working for you (strong type checking = most bugs found at compile
time).  Memory management is much better than in Python.
I particularly favor Ocaml for largish projects.  There, the type system
helps you gain confidence that the part of the system that you did not touch
in a change (typically, 99%) is unaffected by the change.  This makes
debugging and development much easier and painless.  I certainly would not
imagine any more developing in languages where any change may break far-away
things without warning.

And where else can you find a debugger that can execute code (or give you
the impression it does) backwards?
This is invaluable when trying to find things like where an exception is
thrown: you simply run the code until it exits throwing the exception, then
you back off a few steps until you find what is throwing the exception and
why.  C programmers grappling with Segmentation Faults are very surprised to
see this style of debugging!
And even though Ocaml was born as a functional language, I am happy using it
even for code that has to access databases and interact with the web; see
http://trust.cse.ucsc.edu/WikiTrust .

The one drawback of Ocaml is that it is harder to find developers for it.
But this can be an advantage as well: since the barrier to entry is slightly
higher, a typical Ocaml programmer tends to be a better programmer than a
typical perl or C++ programmer, in my limited experience.

Luca

On Mon, Sep 1, 2008 at 9:36 AM, Peng Zang <peng.zang@gmail.com> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Saturday 30 August 2008 03:50:30 pm circ ular wrote:
> > I have tried a lot of languages but never really felt 100% satisfied.
> > I really like Python, it makes me very productive but Iwant something
> > a little more functionally oriented plus a static(optionally declared)
> > typesystem.
> >
> > I tried Haskell and I really like it but I find it hard to get used to
> > some things(like no destructive updates of datastructures outside the
> > IO Monad).
> > Ocaml seems a little bit more practical and it is aslo very fast(well
> > haskell is too).
> >
> > tried lisp at first but libraries and documentation just werent up to
> > standards there either.
> >
> > so far Pytho is the best Ive found (for me) but still isn't satisfied.
> >
> > could ocaml be what I look for?
>
> I think OCaml is what you are looking for.  I went through a similar search
> for a comfortable language.  My order was a bit different, lisp first, then
> python, then OCaml, then played a bit with Haskell but am sticking with
> OCaml.
>
> I find OCaml to be a great compromise.  Haskell is cool, but it forces you
> to
> do things in certain ways and use a lot of abstraction which often seems
> overkill, making simple things much harder than they should be.  I really
> like how easy things are in Python but large programs I find are impossible
> to maintain because it's not statically typed (it's also slow.. but that
> might have been ok).  Lisp is really great with what you can do and many
> simple things are simple, but it doesn't have the scaffolding to let you
> scale up to big stuff (missing libs and stuff).  OCaml has been great.  It
> has its drawbacks and yucky corner cases like all languages.  Overall
> though,
> it's been good and I've been able to find reasonable workarounds for things
> I
> don't like.  I encourage you to give it a serious try.
>
> There's a great book on OCaml here:
>
>  http://www.cs.caltech.edu/courses/cs134/cs134b/book.pdf
>
> The best emacs mode for ocaml is tuareg mode here:
>
>  http://www-rocq.inria.fr/~acohen/tuareg/<http://www-rocq.inria.fr/%7Eacohen/tuareg/>
>
> I also write some additional on top of tuareg mode to be more like the
> SLIME
> mode for lisp but it's alpha (mostly because I wrote it for myself and
> packaging it and making robust is a lot of work that I'm too busy to
> handle)
> so I don't really recommend it yet.
>
> Peng
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.7 (GNU/Linux)
>
> iD8DBQFIvBosfIRcEFL/JewRAv4kAJ40DMoR1GZd1LagWMwR1umbEglLVwCfaMoP
> F9jaCP+f2iJvqU/ZxVs+Czs=
> =k9FZ
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_36919_24481173.1220291303637
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<div dir="ltr">I also cast my vote for Ocaml.<br>Ocaml is the best compromise between pleasure of coding, speed of code, the compiler working for you (strong type checking = most bugs found at compile time).&nbsp; Memory management is much better than in Python. <br>
I particularly favor Ocaml for largish projects.&nbsp; There, the type system helps you gain confidence that the part of the system that you did not touch in a change (typically, 99%) is unaffected by the change.&nbsp; This makes debugging and development much easier and painless.&nbsp; I certainly would not imagine any more developing in languages where any change may break far-away things without warning. <br>
<br>And where else can you find a debugger that can execute code (or give you the impression it does) backwards?&nbsp; <br>This is invaluable when trying to find things like where an exception is thrown: you simply run the code until it exits throwing the exception, then you back off a few steps until you find what is throwing the exception and why.&nbsp; C programmers grappling with Segmentation Faults are very surprised to see this style of debugging! <br>
And even though Ocaml was born as a functional language, I am happy using it even for code that has to access databases and interact with the web; see <a href="http://trust.cse.ucsc.edu/WikiTrust">http://trust.cse.ucsc.edu/WikiTrust</a> . <br>
<br>The one drawback of Ocaml is that it is harder to find developers for it.&nbsp; But this can be an advantage as well: since the barrier to entry is slightly higher, a typical Ocaml programmer tends to be a better programmer than a typical perl or C++ programmer, in my limited experience. <br>
<br>Luca<br><br><div class="gmail_quote">On Mon, Sep 1, 2008 at 9:36 AM, Peng Zang <span dir="ltr">&lt;<a href="mailto:peng.zang@gmail.com">peng.zang@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
-----BEGIN PGP SIGNED MESSAGE-----<br>
Hash: SHA1<br>
<div class="Ih2E3d"><br>
<br>
On Saturday 30 August 2008 03:50:30 pm circ ular wrote:<br>
&gt; I have tried a lot of languages but never really felt 100% satisfied.<br>
&gt; I really like Python, it makes me very productive but Iwant something<br>
&gt; a little more functionally oriented plus a static(optionally declared)<br>
&gt; typesystem.<br>
&gt;<br>
&gt; I tried Haskell and I really like it but I find it hard to get used to<br>
&gt; some things(like no destructive updates of datastructures outside the<br>
&gt; IO Monad).<br>
&gt; Ocaml seems a little bit more practical and it is aslo very fast(well<br>
&gt; haskell is too).<br>
&gt;<br>
&gt; tried lisp at first but libraries and documentation just werent up to<br>
&gt; standards there either.<br>
&gt;<br>
&gt; so far Pytho is the best Ive found (for me) but still isn&#39;t satisfied.<br>
&gt;<br>
&gt; could ocaml be what I look for?<br>
<br>
</div>I think OCaml is what you are looking for. &nbsp;I went through a similar search<br>
for a comfortable language. &nbsp;My order was a bit different, lisp first, then<br>
python, then OCaml, then played a bit with Haskell but am sticking with<br>
OCaml.<br>
<br>
I find OCaml to be a great compromise. &nbsp;Haskell is cool, but it forces you to<br>
do things in certain ways and use a lot of abstraction which often seems<br>
overkill, making simple things much harder than they should be. &nbsp;I really<br>
like how easy things are in Python but large programs I find are impossible<br>
to maintain because it&#39;s not statically typed (it&#39;s also slow.. but that<br>
might have been ok). &nbsp;Lisp is really great with what you can do and many<br>
simple things are simple, but it doesn&#39;t have the scaffolding to let you<br>
scale up to big stuff (missing libs and stuff). &nbsp;OCaml has been great. &nbsp;It<br>
has its drawbacks and yucky corner cases like all languages. &nbsp;Overall though,<br>
it&#39;s been good and I&#39;ve been able to find reasonable workarounds for things I<br>
don&#39;t like. &nbsp;I encourage you to give it a serious try.<br>
<br>
There&#39;s a great book on OCaml here:<br>
<br>
 &nbsp;<a href="http://www.cs.caltech.edu/courses/cs134/cs134b/book.pdf" target="_blank">http://www.cs.caltech.edu/courses/cs134/cs134b/book.pdf</a><br>
<br>
The best emacs mode for ocaml is tuareg mode here:<br>
<br>
 &nbsp;<a href="http://www-rocq.inria.fr/%7Eacohen/tuareg/" target="_blank">http://www-rocq.inria.fr/~acohen/tuareg/</a><br>
<br>
I also write some additional on top of tuareg mode to be more like the SLIME<br>
mode for lisp but it&#39;s alpha (mostly because I wrote it for myself and<br>
packaging it and making robust is a lot of work that I&#39;m too busy to handle)<br>
so I don&#39;t really recommend it yet.<br>
<br>
Peng<br>
-----BEGIN PGP SIGNATURE-----<br>
Version: GnuPG v2.0.7 (GNU/Linux)<br>
<br>
iD8DBQFIvBosfIRcEFL/JewRAv4kAJ40DMoR1GZd1LagWMwR1umbEglLVwCfaMoP<br>
F9jaCP+f2iJvqU/ZxVs+Czs=<br>
=k9FZ<br>
-----END PGP SIGNATURE-----<br>
<div><div></div><div class="Wj3C7c"><br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href="http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target="_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>
Archives: <a href="http://caml.inria.fr" target="_blank">http://caml.inria.fr</a><br>
Beginner&#39;s list: <a href="http://groups.yahoo.com/group/ocaml_beginners" target="_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href="http://caml.inria.fr/bin/caml-bugs" target="_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

------=_Part_36919_24481173.1220291303637--

