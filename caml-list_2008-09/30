Return-Path: <alain@frisch.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id A46ACBBAF
	for <caml-list@yquem.inria.fr>; Wed,  3 Sep 2008 08:31:11 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AiABAI/LvUjUGyojmmdsb2JhbACSTwEBAQEBBgcIBxEDonyBaQ
X-IronPort-AV: E=Sophos;i="4.32,320,1217800800"; 
   d="scan'208";a="28749698"
Received: from smtp5-g19.free.fr ([212.27.42.35])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 03 Sep 2008 08:31:11 +0200
Received: from smtp5-g19.free.fr (localhost.localdomain [127.0.0.1])
	by smtp5-g19.free.fr (Postfix) with ESMTP id 160B41C72F4;
	Wed,  3 Sep 2008 08:31:11 +0200 (CEST)
Received: from [192.168.0.6] (rke75-3-82-229-183-156.fbx.proxad.net [82.229.183.156])
	by smtp5-g19.free.fr (Postfix) with ESMTP id D8FE61C71C2;
	Wed,  3 Sep 2008 08:31:10 +0200 (CEST)
Message-ID: <48BE2F2E.5020805@frisch.fr>
Date: Wed, 03 Sep 2008 08:31:10 +0200
From: Alain Frisch <alain@frisch.fr>
User-Agent: Thunderbird 2.0.0.16 (Windows/20080708)
MIME-Version: 1.0
To: peng.zang@gmail.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] on polymorphic compare and objects
References: <200809021909.35930.peng.zang@gmail.com>
In-Reply-To: <200809021909.35930.peng.zang@gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; frisch:01 frisch:01 ocaml:01 stdlib:01 well-typed:01 peng:98 polymorphic:01 wrote:01 caml-list:01 functions:01 functions:01 alain:01 alain:01 semantic:02 arbitrary:02 

Peng Zang wrote:
> For objects, we require that all objects
> implement an equal method that satisfies the semantic contract.

How do you ensure that the method is indeed implemented and has the 
correct type?

A more robust approach to attaching custom generic operations to 
arbitrary data would be to introduce the equivalent of custom blocks, 
but for OCaml data. This probably amounts to reserving a new GC tag and 
deciding on a memory layout (e.g. a block with this tag has two fields: 
the underlying value and a dictionary of generic functions). Then simple 
modules in stdlib could expose a well-typed interface (ensuring that the 
type of the dictionary's functions is compatible with the type of the 
underlying values). It would even be possible to expose the resulting 
blocks as values of a private record type with two fields, so as to 
preserve pattern matching on the underlying value.


   Alain

