Received: by margaux.inria.fr, Tue, 3 Nov 92 17:59:21 +0100
Received: by margaux.inria.fr, Tue, 3 Nov 92 17:32:27 +0100
From: menissie@margaux (Vale'rie Me'nissier-Morain)
Message-Id: <9209300722.AA26989@concorde.inria.fr>
Sender: weis@margaux
To: weis@margaux
In-Reply-To: HEDDEN@ESDSDF.dnet.ge.com's message of Tue, 3 Nov 92 10:44:11 EST <9211031543.AA06675@aitgw.ge.com>
Subject: BigNums in Caml Light 0.5
Status: O

You want to implement bigfloats but you seems to mix big integers
features (Fibonacci numbers, fact, mod and gcd) with really floating
point/real features (sqrt, exp, log, trig functions).

It is classical to work in a 2^b-basis (generally b=32). It costs more
to read or write a number but pure computation is much faster.

Here is some bibliography references which may interest you even if
they refer essentially to classical limited floating point numbers:

  David Goldberg "What every computer scientist should know about
  floating point arithmetic", Computing Surveys, 23 (1), March 1991.

  In proceedings of SIGPLAN '90 PLDI, there are two papers by Clinger,
  Steele and another one about how to read and write floating point
  numbers accurately

Otherwise, there exist arbitrarily large rational numbers in Caml V3.1
(the strong version on Unix) (numerator and denominator with less than
79803 decimal digits) with exact computation. In the other hand, we
have only built-in floating point numbers. It will be intesting to
have arbitrary large floating point numbers arithmetic . Furthermore,
it will be interesting to extend rational arithmetic to transcendantal
functions with the required precision as additional argument. 


------------------- Vale'rie ME'NISSIER - MORAIN -----------------------------
INRIA Projet Formel			        Tel: (33 1) (16 1) 39 63 55 98
Domaine de Voluceau		                Fax: (33 1) (16 1) 39 63 53 30
78153 Rocquencourt			     e-mail: menissie@margaux.inria.fr
BP 105
------------------------------------------------------------------------------



