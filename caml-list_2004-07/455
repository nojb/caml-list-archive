Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA28758; Thu, 29 Jul 2004 19:50:00 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA28223 for <caml-list@pauillac.inria.fr>; Thu, 29 Jul 2004 19:49:59 +0200 (MET DST)
X-SPAM-Warning: Sending machine is listed in blackholes.five-ten-sg.com
Received: from wetware.com (wetware.wetware.com [199.108.16.1])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6THnwEV027828
	for <caml-list@inria.fr>; Thu, 29 Jul 2004 19:49:59 +0200
Received: from [208.177.152.17] (helo=[10.0.1.9])
	by wetware.com with esmtp (Exim 4.20)
	id 1BqF2U-0007Zv-3T; Thu, 29 Jul 2004 10:49:58 -0700
In-Reply-To: <Pine.LNX.4.44.0407291110320.6739-100000@localhost.localdomain>
References: <Pine.LNX.4.44.0407291110320.6739-100000@localhost.localdomain>
Mime-Version: 1.0 (Apple Message framework v618)
Content-Type: text/plain; charset=ISO-2022-JP; format=flowed
Message-Id: <B449A1C2-E187-11D8-9C86-000A958FF2FE@wetware.com>
Content-Transfer-Encoding: 7bit
Cc: Ocaml Trade <caml-list@inria.fr>
From: james woodyatt <jhw@wetware.com>
Subject: Re: [Caml-list] looping recursion
Date: Thu, 29 Jul 2004 10:49:56 -0700
To: Brian Hurt <bhurt@spnz.org>
X-Mailer: Apple Mail (2.618)
X-Miltered: at nez-perce with ID 410938C6.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; woodyatt:01 jhw:01 wetware:01 caml-list:01 recursion:01 brogoff:01 catenable:01 deques:01 extlib:01 simplistic:01 deques:01 catenable:01 extlib:01 complexity:02 purely:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On 29 Jul 2004, at 09:12, Brian Hurt wrote:
> On Thu, 29 Jul 2004, brogoff wrote:
>>
>> Some problems are just way easier to solve with imperative programming
>> though. Have you ever taken a look at purely functional catenable 
>> deques?
>
> Just got added to extlib, for the record.  A simplistic version that
> actually isn't that much more complicated than the imperitive
> implementation.

This is extraordinary!  Do you really mean to say the deques are purely 
functional, catenable *and* offering the same complexity as the 
non-persistent implementation?  Which algorithm was added to extlib?


― ∴

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

