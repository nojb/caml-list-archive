Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA29536; Thu, 29 Jul 2004 14:56:43 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA30109 for <caml-list@pauillac.inria.fr>; Thu, 29 Jul 2004 14:56:41 +0200 (MET DST)
Received: from mail3.speakeasy.net (mail3.speakeasy.net [216.254.0.203])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i6TCudSH023555
	for <caml-list@inria.fr>; Thu, 29 Jul 2004 14:56:40 +0200
Received: (qmail 27530 invoked from network); 29 Jul 2004 12:56:38 -0000
Received: from shell1.speakeasy.net ([69.17.110.70])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail3.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <da209@cam.ac.uk>; 29 Jul 2004 12:56:38 -0000
Date: Thu, 29 Jul 2004 05:56:38 -0700 (PDT)
From: brogoff <brogoff@speakeasy.net>
To: Daniel Andor <da209@cam.ac.uk>
cc: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] looping recursion
In-Reply-To: <200407291144.11633.da209@cam.ac.uk>
Message-ID: <Pine.LNX.4.58.0407290542380.22555@shell1.speakeasy.net>
References: <200407291013.12467.da209@cam.ac.uk> <E1Bq7Aj-0001vn-00@mta1.cl.cam.ac.uk>
 <20040729095716.GC13419@yquem.inria.fr> <200407291144.11633.da209@cam.ac.uk>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde with ID 4108F407.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; brogoff:01 brogoff:01 caml-list:01 recursion:01 2004:99 vanilla:01 vanilla:01 extlib:01 speakeasy:01 benchmarking:02 suited:02 stack:02 thread:02 clearer:02 coding:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 29 Jul 2004, Daniel Andor wrote:

> On Thursday 29 July 2004 10:57 am, Xavier Leroy wrote:
> > Because for smaller list the "vanilla way" is more efficient.
>
> A little benchmarking with short lists shows that for lists that are near or
> smaller than my cache size (skaller's point), the stack map performs better;
> especially in the byte-code case.
>
> However, the thread was originally about long lists, and for that it is clear
> that algorithms other than the vanilla map are better suited.

It's not at all clear to me. Better how? Faster? Less coding effort? Clearer
to others maintaining the code?

> To me, this  just proves that there's no such thing as universal optimisation (yet!).

I agree with that. And I agree with Xavier's prioritization of a clean fix
to this as a "nice to have but not critical". For now, use ExtLib or roll your
own.

> One's got to actually think about the problem at hand. Damn. ;)

Yes. I'm going back to C and assembly code now, thanks to these arguments :-)

-- Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

