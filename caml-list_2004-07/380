Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA13194; Mon, 26 Jul 2004 18:48:19 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA13042 for <caml-list@pauillac.inria.fr>; Mon, 26 Jul 2004 18:48:17 +0200 (MET DST)
Received: from mproxy.gmail.com (rproxy.gmail.com [64.233.170.199])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6QGmGEV023862
	for <caml-list@inria.fr>; Mon, 26 Jul 2004 18:48:17 +0200
Received: by mproxy.gmail.com with SMTP id m69so81933rne
        for <caml-list@inria.fr>; Mon, 26 Jul 2004 09:48:16 -0700 (PDT)
Received: by 10.38.75.57 with SMTP id x57mr366774rna;
        Mon, 26 Jul 2004 09:48:15 -0700 (PDT)
Message-ID: <891bd33904072609484169f951@mail.gmail.com>
Date: Mon, 26 Jul 2004 12:48:15 -0400
From: Yaron Minsky <yminsky@gmail.com>
Reply-To: yminsky@cs.cornell.edu
To: Caml Mailing List <caml-list@inria.fr>
Subject: [Caml-list] Re: Size limitation on input_value
In-Reply-To: <891bd33904072212415292635c@mail.gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
References: <891bd33904072212415292635c@mail.gmail.com>
X-Miltered: at nez-perce with ID 410535D0.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; yaron:01 minsky:01 yminsky:01 foo:01 val:01 foo:01 val:01 bug:01 2004:99 0400,:01 yaron:01 minsky:01 yminsky:01 bug:01 bin:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

So, I've investigated this a little further, and it's a definite
regression.  Here's the function I used:

# let run ~save ~load n =
  let ar = Array.init n (fun i -> (i,i+1,i+2,i+3)) in
  if save then begin
    let f = open_out_bin "foo.val" in
    output_value f ar;
    close_out f
  end;
  if load then begin
    let f = open_in_bin "foo.val" in
    ignore (input_value f);
    close_in f 
  end;;
val run : save:bool -> load:bool -> int -> unit = <fun>

If I run this on 3.07, i get this:

# run ~save:true ~load:true 1000000;;
- : unit = ()

On 3.08, I get this:

# run ~save:true ~load:true 1000000;;
Out of memory during evaluation.
# run ~save:true ~load:false 1000000;;
Out of memory during evaluation.
# run ~save:false ~load:false 1000000;;
- : unit = ()
# 

So, the exception comes when saving, not when generating the data.

Is this a known bug?  Are there any patches available?

y


On Thu, 22 Jul 2004 15:41:44 -0400, Yaron Minsky <yminsky@gmail.com> wrote:
> It seems that there is a size limitation on input_value that was not
> there before 3.08.  Basically, I can't load things larger than the
> maximum string size.  Is this a bug?  Has anyone else hit this?
> 
> Yaron
>

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

