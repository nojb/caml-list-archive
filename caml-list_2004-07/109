Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA12796; Fri, 9 Jul 2004 00:56:40 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA13199 for <caml-list@pauillac.inria.fr>; Fri, 9 Jul 2004 00:56:40 +0200 (MET DST)
Received: from mailout01.sul.t-online.com (mailout01.sul.t-online.com [194.25.134.80])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i68MudEV021605
	for <caml-list@inria.fr>; Fri, 9 Jul 2004 00:56:39 +0200
Received: from fwd04.aul.t-online.de 
	by mailout01.sul.t-online.com with smtp 
	id 1Bihok-0004y6-04; Fri, 09 Jul 2004 00:56:38 +0200
Received: from t-online.de (bpkGTrZ6Qeok2x7pYbV6aI0Ja4+hsbqknk3l5sfGaiUZMSJFWgfS41@[217.95.164.6]) by fwd04.sul.t-online.com
	with esmtp id 1Bihod-1niFsW0; Fri, 9 Jul 2004 00:56:31 +0200
Message-ID: <40EDD11E.6030003@t-online.de>
Date: Fri, 09 Jul 2004 00:56:30 +0200
From: szegedy@t-online.de (Christian Szegedy)
User-Agent: Mozilla Thunderbird 0.5 (X11/20040611)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: caml <caml-list@inria.fr>
Subject: [Caml-list] Recursive class/class type
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Seen: false
X-ID: bpkGTrZ6Qeok2x7pYbV6aI0Ja4+hsbqknk3l5sfGaiUZMSJFWgfS41
X-Miltered: at nez-perce with ID 40EDD127.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; ocaml:01 interfaces:01 classes:03 recursive:03 recursive:03 object:03 object:03 types:03 types:03 type:07 type:07 mixed:07 declaration:09 something:09 self:10 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

I realiyed that I sometimes need not only recursive
classes but also mixed recursive types and interfaces.

Something like this:

class type a_t =
   object
      method f  : a
   end
and a =
    object(self)
         method f = self
         method g (x:a_t) = x#f
    end


The current Ocaml implementation does not allows this.
Are there plans to allow types and class types in the same
recursive declaration block?

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

