Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA19700; Mon, 19 Jul 2004 12:45:45 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA19208 for <caml-list@pauillac.inria.fr>; Mon, 19 Jul 2004 12:45:44 +0200 (MET DST)
Received: from ptb-relay03.plus.net (ptb-relay03.plus.net [212.159.14.214])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6JAjhEV003458
	for <caml-list@inria.fr>; Mon, 19 Jul 2004 12:45:44 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1BmVeQ-000CK5-B4
	for caml-list@inria.fr; Mon, 19 Jul 2004 10:45:42 +0000
From: Jon Harrop <postmaster@jdh30.plus.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] kprintf with user formatters
Date: Mon, 19 Jul 2004 11:43:12 +0100
User-Agent: KMail/1.6.2
References: <200407191010.MAA17211@pauillac.inria.fr>
In-Reply-To: <200407191010.MAA17211@pauillac.inria.fr>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200407191143.12082.postmaster@jdh30.plus.com>
X-Miltered: at nez-perce with ID 40FBA658.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; postmaster:99 caml-list:01 kprintf:01 formatters:01 2004:99 pierre:01 weis:01 endline:01 endline:01 val:01 bool:01 bool:01 irrelevant:01 string:03 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Monday 19 July 2004 11:10, Pierre Weis wrote:
> They also can have the wrong idea that arguments are not evaluated
> (since there is no need to convert them to string) which is wrong.

Forgive me if this is irrelevant (I've failed to understand all of your 
discussion) but can this be tied in with a general way to define functions 
with specified argument evaluation, e.g. to define your own, short-circuit-
evaluated && operator:

# (print_endline "1"; false) && (print_endline "2"; true);;
1
- : bool = false
# let (&&) a b = a && b;;
val ( && ) : bool -> bool -> bool = <fun>
# (print_endline "1"; false) && (print_endline "2"; true);;
2
1
- : bool = false

Not that I need such a thing...

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

