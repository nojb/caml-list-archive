Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA26037; Thu, 29 Jul 2004 12:44:14 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA25104 for <caml-list@pauillac.inria.fr>; Thu, 29 Jul 2004 12:44:13 +0200 (MET DST)
Received: from ppsw-5.csi.cam.ac.uk (ppsw-5.csi.cam.ac.uk [131.111.8.135])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6TAiCEV008369
	for <caml-list@inria.fr>; Thu, 29 Jul 2004 12:44:12 +0200
Received: from athena.jesus.cam.ac.uk ([131.111.243.130]:2113 helo=pooh)
	by ppsw-5.csi.cam.ac.uk (smtp.hermes.cam.ac.uk [131.111.8.155]:465)
	with esmtp (SSLv3:RC4-MD5:128) (Exim 4.34)
	id 1Bq8O8-00040Z-IX for caml-list@inria.fr; Thu, 29 Jul 2004 11:43:52 +0100
From: Daniel Andor <da209@cam.ac.uk>
To: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] looping recursion
Date: Thu, 29 Jul 2004 11:44:11 +0100
User-Agent: KMail/1.6.2
References: <200407291013.12467.da209@cam.ac.uk> <E1Bq7Aj-0001vn-00@mta1.cl.cam.ac.uk> <20040729095716.GC13419@yquem.inria.fr>
In-Reply-To: <20040729095716.GC13419@yquem.inria.fr>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200407291144.11633.da209@cam.ac.uk>
X-Cam-ScannerInfo: http://www.cam.ac.uk/cs/email/scanner/
X-Cam-AntiVirus: No virus found
X-Cam-SpamDetails: Not scanned
X-Miltered: at nez-perce with ID 4108D4FC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 recursion:01 2004:99 vanilla:01 vanilla:01 benchmarking:02 suited:02 stack:02 thread:02 wrote:03 algorithms:03 byte-code:04 efficient:05 daniel:06 daniel:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thursday 29 July 2004 10:57 am, Xavier Leroy wrote:
> Because for smaller list the "vanilla way" is more efficient.

A little benchmarking with short lists shows that for lists that are near or 
smaller than my cache size (skaller's point), the stack map performs better; 
especially in the byte-code case.  

However, the thread was originally about long lists, and for that it is clear 
that algorithms other than the vanilla map are better suited.  To me, this 
just proves that there's no such thing as universal optimisation (yet!).  
One's got to actually think about the problem at hand. Damn. ;)

Daniel.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

