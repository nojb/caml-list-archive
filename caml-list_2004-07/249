Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA13920; Thu, 15 Jul 2004 23:42:46 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA16973 for <caml-list@pauillac.inria.fr>; Thu, 15 Jul 2004 23:42:45 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6FLggEV019748
	for <caml-list@inria.fr>; Thu, 15 Jul 2004 23:42:43 +0200
Received: from [192.168.1.200] (ppp216-145.lns1.syd3.internode.on.net [203.122.216.145])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i6FLga4Y036052;
	Fri, 16 Jul 2004 07:12:37 +0930 (CST)
Subject: Re: [Caml-list] Unboxing options, was RE: assertions or exceptions?
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: John Prevost <j.prevost@gmail.com>
Cc: Brian Hurt <bhurt@spnz.org>, Ocaml Mailing List <caml-list@inria.fr>
In-Reply-To: <1089926230.29648.632.camel@pelican.wigram>
References: <Pine.LNX.4.44.0407151015180.4202-100000@localhost.localdomain>
	 <d849ad2a0407151020725c3fb9@mail.gmail.com>
	 <1089926230.29648.632.camel@pelican.wigram>
Content-Type: text/plain
Message-Id: <1089927755.29648.653.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 16 Jul 2004 07:42:35 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 40F6FA52.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 unboxing:01 sourceforge:01 2004:99 rephrase:01 unboxing:01 pointers:01 avoiding:01 ugg:99 9660:01 glebe:01 ocaml:01 ocaml:01 caml:01 caml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-07-16 at 07:17, skaller wrote:

I should rephrase this:

> This is wrong. The representation being suggested is:
> 
> None -> NULL
> Some 'a -> pointer to 'a
> 
> Clearly this represntation is faithful and nothing
> more than an interpretation of the corresponding C 
> concept.
> 
> Some Some 1 is obviously distinct from Some 1 as reqiuired:
> pointer to pointer to 1 is distinct from pointer to 1.
> Some None is a pointer to NULL, which is distinct from 
> None which is just NULL.

What I'm saying is that the idea is not unboxing,
but untagging. Some 'a isn't a pointer to an 'a heap
value, but a pointer to a CAML_VALUE which is a pointer
to a heap value 'a. I don't see how the GC could
support this in Ocaml, since Some 'a isn't a CAML_VALUE
since it points to a box, not a heap object -- 
but in Felix it would work because the GC uses 
RTTI to locate pointers.

So the idea is fine, but won't work with Ocaml GC.
There's be no saving dereferencing a Some value here.
The saving would be that simply loading the value
into a register would set a condition code in the
processor, avoiding any need to check the value
of a tag word.

Ugg .. sorry for the confusion :(

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

