Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA01073; Wed, 28 Jul 2004 09:21:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA00880 for <caml-list@pauillac.inria.fr>; Wed, 28 Jul 2004 09:21:53 +0200 (MET DST)
Received: from alex.baretta.com (h213-255-109-130.albacom.net [213.255.109.130] (may be forged))
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i6S7LoSH004766
	for <caml-list@inria.fr>; Wed, 28 Jul 2004 09:21:51 +0200
Received: from baretta.com (localhost [127.0.0.1])
	by alex.baretta.com (Postfix) with ESMTP
	id 6F9462D5B2E; Wed, 28 Jul 2004 03:22:52 -0400 (EDT)
Message-ID: <4107544C.4040502@baretta.com>
Date: Wed, 28 Jul 2004 09:22:52 +0200
From: Alex Baretta <alex@baretta.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040113
X-Accept-Language: it, en-us, en
MIME-Version: 1.0
To: brogoff <brogoff@speakeasy.net>, Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] looping recursion
References: <16646.64470.304530.264731@soggy.deldotd.com> <Pine.LNX.4.44.0407272035310.6739-100000@localhost.localdomain> <16647.5177.849829.421587@soggy.deldotd.com> <Pine.LNX.4.58.0407272244250.10739@shell1.speakeasy.net>
In-Reply-To: <Pine.LNX.4.58.0407272244250.10739@shell1.speakeasy.net>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4107540E.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; baretta:01 baretta:01 caml-list:01 recursion:01 brogoff:01 000,:01 sigkill:01 alex:01 alex:01 overflow:02 iterators:02 laziness:02 stack:02 stack:02 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

brogoff wrote:
> Sometimes lists are best. If lists are OK for 100, 1_000, or 10_000 items,
> why not 100_000 or 1_000_000? Map and friends shouldn't blow stack.
> 
> -- Brian

Actually, it's not that bad.

Sometimes I design an algorithm in terms of basic data structures, such 
as lists, and transformations applied through higher order iterators. 
Such "featurs" as the stack overflow in List.map or the Linux 
out-of-memory SIGKILL give me a clear indication of the simplemindedness 
of such algorithms and force me to rethink them in terms of more 
efficient structures and techniques, typically streams and laziness.

Alex

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

