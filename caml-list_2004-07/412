Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA24345; Wed, 28 Jul 2004 05:12:33 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA25606 for <caml-list@pauillac.inria.fr>; Wed, 28 Jul 2004 05:12:32 +0200 (MET DST)
Received: from herd.plethora.net (herd.plethora.net [205.166.146.1])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i6S3CUSH008624
	for <caml-list@inria.fr>; Wed, 28 Jul 2004 05:12:31 +0200
Received: from bhurt.plethora.net (bhurt.plethora.net [205.166.146.49])
	by herd.plethora.net (8.11.6/8.10.1) with ESMTP id i6S3CSo26822;
	Tue, 27 Jul 2004 22:12:28 -0500 (CDT)
Date: Tue, 27 Jul 2004 22:20:26 -0500 (CDT)
From: Brian Hurt <bhurt@spnz.org>
X-X-Sender: bhurt@localhost.localdomain
To: briand@aracnet.com
cc: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] looping recursion
In-Reply-To: <16647.5177.849829.421587@soggy.deldotd.com>
Message-ID: <Pine.LNX.4.44.0407272213220.6739-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde with ID 4107199E.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 recursion:01 2004:99 segfaults:01 milliseconds:01 inefficient:01 ocaml:01 wrote:03 scheme:03 redirect:95 horribly:04 efficient:05 seems:05 meant:05 jul:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Hit "send" before I meant too- sorry.

On Tue, 27 Jul 2004 briand@aracnet.com wrote:

> however, my larger point is the fact that the "standard" map blows up
> like that.  as a long time scheme user I just find that plain weird.
> Now Everybody else seems to think I'm weird because I think that's
> weird ;-)

I agree with you.  Or rather, I don't think it's weird so much as really 
bad.  The problem is correct, and (while not as efficient as it might be) 
it sounds like it's not horribly inefficient either.  It's certainly not a 
bad idea to get it working first, and then worry about algorithmic 
inefficiencies.  I'd much rather have a program that takes two minutes to 
return the right answer, than a program that returns the wrong answer in 2 
seconds (or segfaults in 2 milliseconds, but that isn't a danger in 
Ocaml).


-- 
"Usenet is like a herd of performing elephants with diarrhea -- massive,
difficult to redirect, awe-inspiring, entertaining, and a source of
mind-boggling amounts of excrement when you least expect it."
                                - Gene Spafford 
Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

