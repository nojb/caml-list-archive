Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id FAA25502; Sat, 31 Jul 2004 05:38:18 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA24346 for <caml-list@pauillac.inria.fr>; Sat, 31 Jul 2004 05:38:17 +0200 (MET DST)
Received: from mproxy.gmail.com (rproxy.gmail.com [64.233.170.198])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6V3cFEV027696
	for <caml-list@inria.fr>; Sat, 31 Jul 2004 05:38:16 +0200
Received: by mproxy.gmail.com with SMTP id 77so11141rnl
        for <caml-list@inria.fr>; Fri, 30 Jul 2004 20:38:15 -0700 (PDT)
Received: by 10.38.78.51 with SMTP id a51mr44220rnb;
        Thu, 29 Jul 2004 19:38:15 -0700 (PDT)
Message-ID: <c129123504072919381db86fef@mail.gmail.com>
Date: Thu, 29 Jul 2004 19:38:15 -0700
From: "Corey O'Connor" <coreyoconnor@gmail.com>
To: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] looping recursion
In-Reply-To: <41097D53.5050607@baretta.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
References: <16646.64470.304530.264731@soggy.deldotd.com> <Pine.LNX.4.44.0407272035310.6739-100000@localhost.localdomain> <16647.5177.849829.421587@soggy.deldotd.com> <Pine.LNX.4.58.0407272244250.10739@shell1.speakeasy.net> <4107544C.4040502@baretta.com> <Pine.LNX.4.58.0407280924150.10739@shell1.speakeasy.net> <410898F0.6030804@baretta.com> <Pine.LNX.4.58.0407290715410.22555@shell1.speakeasy.net> <41097D53.5050607@baretta.com>
X-Miltered: at nez-perce with ID 410B1427.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; corey:99 caml-list:01 recursion:01 threads:01 pushes:01 2004:99 baretta:01 baretta:01 mandated:99 deques:01 okasaki:01 bug:01 faq:01 faq:01 beginner's:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Is the connection due to persistance?=20
So given a data structure is persistant across operations, let's say a
stack. Suppose if two threads are working with the same instance of a
data structure. One thread pushes a value onto the stack, the other
does not. Due to persistance the other thread's instance of the stack
is unaffected?

-Corey

On Fri, 30 Jul 2004 00:42:27 +0200, Alex Baretta <alex@baretta.com> wrote:
>=20
> I didn't understand the connection between multithreading and
> persistence, but it's probably too late and I've been working far too
> much to follow you entirely. Let me just give you a couple eurocents of
> industrial experience: side-effects are utterly bad. My Xcaml
> application server was designed two years ago with one major flaw: one
> global state variable. I'm still fighting with the execution engine to
> take it away, but that won't happen before a major rewrite. I won't by
> imperative programming for anything at all. And, yes, in my company the
> mandated standard for deques is batched queues =E0 la Okasaki.
>=20
> Alex
>=20
>=20
>=20
> -------------------
> To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inr=
ia.fr
> Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr=
/FAQ/
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>=20


--=20
-Corey O'Connor

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

