Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA03131; Wed, 28 Jul 2004 10:06:46 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA03307; Wed, 28 Jul 2004 10:06:45 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6S86gEV005563;
	Wed, 28 Jul 2004 10:06:43 +0200
Received: from [192.168.1.200] (ppp205-61.lns1.syd3.internode.on.net [203.122.205.61])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i6S86XHY031726;
	Wed, 28 Jul 2004 17:36:34 +0930 (CST)
Subject: Re: lazyness in ocaml (was : [Caml-list] kprintf with user
	formatters)
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Pierre Weis <pierre.weis@inria.fr>
Cc: daniel.buenzli@epfl.ch, caml-list <caml-list@inria.fr>
In-Reply-To: <200407280726.JAA01775@pauillac.inria.fr>
References: <200407280726.JAA01775@pauillac.inria.fr>
Content-Type: text/plain
Message-Id: <1091001993.5870.891.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 28 Jul 2004 18:06:33 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 41075E92.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; lazyness:01 caml-list:01 kprintf:01 formatters:01 sourceforge:01 2004:99 pierre:01 weis:01 expr:01 expr:01 9660:01 glebe:01 ocaml:01 ocaml:01 caml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2004-07-28 at 17:26, Pierre Weis wrote:

> There is nothing such as your ``substitution principle'' in Caml,
> except if we restrict the language to truly trivial expressions (as
> soon as expressions may incoporate basic operators such as the integer
> addition your ``principle'' does not stand anymore).

I thought:

let x = expr in f x

and

f expr

are identical in all circumstances in Ocaml
for all terms 'expr', I must have missed
something .. do you have a counter example?

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

