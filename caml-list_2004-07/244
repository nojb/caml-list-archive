Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA15196; Thu, 15 Jul 2004 23:17:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA14856 for <caml-list@pauillac.inria.fr>; Thu, 15 Jul 2004 23:17:20 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i6FLHHEV016995
	for <caml-list@inria.fr>; Thu, 15 Jul 2004 23:17:18 +0200
Received: from [192.168.1.200] (ppp216-145.lns1.syd3.internode.on.net [203.122.216.145])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i6FLHBHY015796;
	Fri, 16 Jul 2004 06:47:12 +0930 (CST)
Subject: Re: [Caml-list] Unboxing options, was RE: assertions or exceptions?
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: John Prevost <j.prevost@gmail.com>
Cc: Brian Hurt <bhurt@spnz.org>, Ocaml Mailing List <caml-list@inria.fr>
In-Reply-To: <d849ad2a0407151020725c3fb9@mail.gmail.com>
References: <Pine.LNX.4.44.0407151015180.4202-100000@localhost.localdomain>
	 <d849ad2a0407151020725c3fb9@mail.gmail.com>
Content-Type: text/plain
Message-Id: <1089926230.29648.632.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 16 Jul 2004 07:17:10 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 40F6F45D.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 unboxing:01 sourceforge:01 2004:99 prevost:01 2004:99 cdt:99 boxing:01 unboxing:01 unboxed:01 runtime:01 9660:01 glebe:01 ocaml:01 null:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-07-16 at 03:20, John Prevost wrote:
> On Thu, 15 Jul 2004 10:38:14 -0500 (CDT), Brian Hurt <bhurt@spnz.org> wrote:
> > One of the problems with returning error conditions instead of throwing
> > exceptions is the cost of boxing a 'a option.  I'd like to advocate for
> > the idea of unboxing 'a options.
> 
> This has been discussed before.  The essential problem is this:
> 
> Currently:
> 
> type 'a option is not the same as type 'a option option
> Some Some 1 is not the same as Some 1
> Some None is not the same as None
> 
> With unboxed options:
> 
> type 'a option is the same as type 'a option option
> Some Some 1 is identical to Some 1
> Some None is identical to None

This is wrong. The representation being suggested is:

None -> NULL
Some 'a -> pointer to 'a

Clearly this represntation is faithful and nothing
more than an interpretation of the corresponding C 
concept.

Some Some 1 is obviously distinct from Some 1 as reqiuired:
pointer to pointer to 1 is distinct from pointer to 1.
Some None is a pointer to NULL, which is distinct from 
None which is just NULL.

Perhaps this won't work with the Ocaml runtime but
there is no problem with the typing.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

