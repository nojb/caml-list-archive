Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA03205; Thu, 8 Jul 2004 20:28:13 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA02266 for <caml-list@pauillac.inria.fr>; Thu, 8 Jul 2004 20:28:12 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i68IS9SH000623
	for <caml-list@inria.fr>; Thu, 8 Jul 2004 20:28:10 +0200
Received: from [192.168.1.200] (ppp214-48.lns1.syd2.internode.on.net [203.122.214.48])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i68IRlHY004298;
	Fri, 9 Jul 2004 03:58:03 +0930 (CST)
Subject: Re: [Caml-list] Does Caml have slow arithmetics ?
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Markus Mottl <markus@oefai.at>
Cc: Alex Baretta <alex@baretta.com>, ocaml <caml-list@inria.fr>
In-Reply-To: <20040708155148.GA21304@fichte.ai.univie.ac.at>
References: <Pine.A41.4.44.0407070835130.958588-100000@ibm1>
	 <20040707091308.GA26172@bourg.inria.fr> <m31xjngbsp.fsf@jah.m12.ru>
	 <20040707145803.GB27498@yquem.inria.fr>
	 <1089227778.29648.81.camel@pelican.wigram>
	 <20040708034455.GB29942@davidb.org> <40ED190E.3080005@ps.uni-sb.de>
	 <20040708140408.GA2386@davidb.org> <20040708163653.A1260@beaune.inria.fr>
	 <40ED6424.7090903@baretta.com>
	 <20040708155148.GA21304@fichte.ai.univie.ac.at>
Content-Type: text/plain
Message-Id: <1089311266.29648.310.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 09 Jul 2004 04:27:46 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 40ED9239.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 arithmetics:01 sourceforge:01 2004:99 closures:01 recursion:01 recursion:01 inlining:01 9660:01 glebe:01 compiler:01 ocaml:01 ocaml:01 caml:01 afaik:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-07-09 at 01:51, Markus Mottl wrote:
>  AFAIK,
> the OCaml compiler generates closures on the heap to work around this,
> but only in cases where the recursion is obvious (self-tail calls).
> Hm, shouldn't be too difficult to extend this to mutual recursion?
> Or does OCaml already do this?

one level of inlining would achieve this 
for two functions

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

