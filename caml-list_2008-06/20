Return-Path: <rathereasy@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id D23A7BB84
	for <caml-list@yquem.inria.fr>; Tue,  3 Jun 2008 05:09:21 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ak8DAKpSREjRVZKzc2dsb2JhbACCOTSPFQEMAwQECQ8FllWGIQ
X-IronPort-AV: E=Sophos;i="4.27,581,1204498800"; 
   d="scan'208";a="13402658"
Received: from wa-out-1112.google.com ([209.85.146.179])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 03 Jun 2008 05:09:20 +0200
Received: by wa-out-1112.google.com with SMTP id j4so627500wah.3
        for <caml-list@yquem.inria.fr>; Mon, 02 Jun 2008 20:09:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type;
        bh=q91VSJCbMZDYeRn+6Ox8mHPzb1w26aa814PrqGq8voE=;
        b=K4TO4FfB2qW7A4gPcXkpzW4TbgEaoja2HBVS21VJBRRJnn/njQTwXEukKo9BG0k7oDLVN/uOFksktRGfP1S68rOuWZyqZuLLFVbJgBeKS1zVldcnOqtO03xVzpxnSwKlcJV5aYKASbSf3HhEnsyhAKA9ueC+crgtqM1W6eud9R8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type;
        b=x+vRqbOxHTyeTT962fjle41p0cUqU4jURkj8U1TwCqYR1qWiLLYvjZt42hk1pHHJHaUN772WWOG03F5dUSzdGVVimsiRqvP6E55vjKLYzT2wcHNcJ0Cy5bPMx/hL/ltNUB6ejgAWU1MQ4xsDqsdE/NqkkK5KMwK0ir4B29sPa/k=
Received: by 10.114.89.1 with SMTP id m1mr5298269wab.146.1212462558164;
        Mon, 02 Jun 2008 20:09:18 -0700 (PDT)
Received: by 10.114.127.8 with HTTP; Mon, 2 Jun 2008 20:09:18 -0700 (PDT)
Message-ID: <f74178430806022009h6960bfc0tb5db497e4201a4af@mail.gmail.com>
Date: Mon, 2 Jun 2008 23:09:18 -0400
From: "Jacques Le Normand" <rathereasy@gmail.com>
To: caml-list@yquem.inria.fr
Subject: Segmentation fault
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_363_31274263.1212462558168"
X-Spam: no; 0.01; segfault:01 ocaml:01 segfault:01 foo:01 foo:01 endline:01 endline:01 ocaml:01 bottle:98 bottles:98 bottle:98 bottles:98 papa:98 papa:98 W6:98 

------=_Part_363_31274263.1212462558168
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hello caml-list,

I'm encountering a segfault on ocaml 3.09

The test case seems long, but if I remove any line from it it stops
segfaulting. The strangest thing is that get_right_sibling_specific is
called, though it appears nowhere. If you change it's name, the segfault
dissapears. Any help would be appreciated!
here's the code:

class virtual bottle_environment =
object
  method virtual gladiators : string list
  method virtual bottles : bottle list
end
and virtual bottle =
object
  method virtual action : (unit -> bottle_environment option)
end

type outer_space = {
    foo : int list
}
let empty_outer_space =
  {

    foo = [];

  }

class virtual  expression =
object
  method virtual get_silly_bottle : bottle
end
class virtual  expression_skel =
object(self)
  inherit  expression
  method bambam = empty_outer_space
  method get_silly_bottle =
  (object
     inherit bottle
     method action () =
       Some (object
           method gladiators =
         print_endline "entering bottles";
         ignore (self#bambam.foo);
         ["enter "]
           method bottles =

         []
         end)
   end)
end


class virtual baggy_expression_skel =
object(self)
  inherit expression_skel
  method get_bottle_environment =
  object
    method gladiators = ([]:string list)
    method bottles =       [self#get_silly_bottle]
  end
end

class virtual  papa_expression_skel =
object(self)
  method get_right_sibling_specific = print_endline "im being called, though
I shouldn't" ; (None:expression option)
  inherit  expression
end

class papa_baggy_expression =
object(self)
  inherit baggy_expression_skel
  inherit papa_expression_skel
end

class top_baggy_expression =
object(self)
  inherit baggy_expression_skel
end

let _ =
  let body_expression  = new top_baggy_expression   in
  let e = new papa_baggy_expression   in
    ignore ((body_expression#get_bottle_environment)#bottles);
    let sugg = e#get_silly_bottle in
      match sugg#action () with
    | None -> ()
    | Some y ->
        ignore (y#gladiators)

------=_Part_363_31274263.1212462558168
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hello caml-list,<br><br>I&#39;m encountering a segfault on ocaml 3.09<br><br>The test case seems long, but if I remove any line from it it stops segfaulting. The strangest thing is that get_right_sibling_specific is called, though it appears nowhere. If you change it&#39;s name, the segfault dissapears. Any help would be appreciated!<br>
here&#39;s the code:<br><br>class virtual bottle_environment = <br>object<br>&nbsp; method virtual gladiators : string list<br>&nbsp; method virtual bottles : bottle list<br>end<br>and virtual bottle = <br>object<br>&nbsp; method virtual action : (unit -&gt; bottle_environment option)<br>
end<br><br>type outer_space = {<br>&nbsp;&nbsp;&nbsp; foo : int list<br>}<br>let empty_outer_space = <br>&nbsp; {<br><br>&nbsp;&nbsp;&nbsp; foo = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp; }<br><br>class virtual&nbsp; expression = <br>object<br>&nbsp; method virtual get_silly_bottle : bottle<br>
end<br>class virtual&nbsp; expression_skel =<br>object(self)<br>&nbsp; inherit&nbsp; expression<br>&nbsp; method bambam = empty_outer_space<br>&nbsp; method get_silly_bottle = <br>&nbsp; (object<br>&nbsp;&nbsp;&nbsp;&nbsp; inherit bottle<br>&nbsp;&nbsp;&nbsp;&nbsp; method action () = <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Some (object<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method gladiators = &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;print_endline &quot;entering bottles&quot;;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ignore (self#bambam.foo);<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;[&quot;enter &quot;]<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method bottles = <br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;[]<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; end)<br>&nbsp;&nbsp; end)<br>end<br>&nbsp;<br><br>class virtual baggy_expression_skel =<br>object(self)<br>&nbsp; inherit expression_skel <br>&nbsp; method get_bottle_environment = <br>&nbsp; object<br>&nbsp;&nbsp;&nbsp; method gladiators = ([]:string list)<br>
&nbsp;&nbsp;&nbsp; method bottles =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [self#get_silly_bottle]<br>&nbsp; end<br>end<br>&nbsp; <br>class virtual&nbsp; papa_expression_skel =<br>object(self)<br>&nbsp; method get_right_sibling_specific = print_endline &quot;im being called, though I shouldn&#39;t&quot; ; (None:expression option)<br>
&nbsp; inherit&nbsp; expression<br>end<br><br>class papa_baggy_expression =<br>object(self)<br>&nbsp; inherit baggy_expression_skel <br>&nbsp; inherit papa_expression_skel <br>end<br>&nbsp;&nbsp;&nbsp; &nbsp; <br>class top_baggy_expression =<br>object(self)<br>
&nbsp; inherit baggy_expression_skel <br>end<br><br>let _ = <br>&nbsp; let body_expression&nbsp; = new top_baggy_expression&nbsp;&nbsp; in <br>&nbsp; let e = new papa_baggy_expression&nbsp;&nbsp; in <br>&nbsp;&nbsp;&nbsp; ignore ((body_expression#get_bottle_environment)#bottles);<br>
&nbsp;&nbsp;&nbsp; let sugg = e#get_silly_bottle in<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; match sugg#action () with<br>&nbsp;&nbsp;&nbsp; | None -&gt; ()<br>&nbsp;&nbsp;&nbsp; | Some y -&gt; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ignore (y#gladiators)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br><br><br><br>&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br><br>

------=_Part_363_31274263.1212462558168--

