Return-Path: <pasalic@cs.rice.edu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 47801BB84
	for <caml-list@yquem.inria.fr>; Wed, 18 Jun 2008 22:50:06 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aq0BAKgRWUgmaAAeiGdsb2JhbACSRQEBAQ8gnyI
X-IronPort-AV: E=Sophos;i="4.27,667,1204498800"; 
   d="scan'208";a="14055479"
Received: from vpn.predictix.com (HELO email.predictix.com) ([38.104.0.30])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 18 Jun 2008 22:50:05 +0200
Received: from localhost (localhost.localdomain [127.0.0.1])
	by email.predictix.com (Postfix) with ESMTP id 9081626283E4;
	Wed, 18 Jun 2008 16:50:03 -0400 (EDT)
X-Virus-Scanned: amavisd-new at 
Received: from email.predictix.com ([127.0.0.1])
	by localhost (email.predictix.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id ZYCpkFZRULMB; Wed, 18 Jun 2008 16:49:57 -0400 (EDT)
Received: from [192.168.1.2] (64_30_165_56.hyperband.com [64.30.165.56])
	by email.predictix.com (Postfix) with ESMTP id 99C7E26283B6;
	Wed, 18 Jun 2008 16:49:55 -0400 (EDT)
Message-Id: <A64BD465-4BC1-4ED4-A4EE-2AC4A5F93DE1@cs.rice.edu>
From: Emir Pasalic <pasalic@cs.rice.edu>
To: prog-lang@diku.dk, caml-list@yquem.inria.fr,
	boost@lists.boost.org, oon-list@oonumerics.org, planetmde@imag.fr,
	haskell-cafe@haskell.org,
	eCommerce List <eCommerce_List@noresponse.cl>, gpce-news@cs.rice.edu,
	aiia@di.unito.it, amast@cs.utwente.nl, announce@aosd.net,
	announcements@oopsla.acm.org, appiar@ncc.up.pt,
	cgn-talk@yahoogroups.com, clean-list@cs.kun.nl, clp@comp.nus.edu.sg,
	compulog@doc.imperial.ac.uk, compulognet-parimp@dia.fi.upm.es,
	compunode@compulog.org, compunode@dfki.de, concurrency@cwi.nl,
	coq-club@pauillac.inria.fr, cphc-conf@jiscmail.ac.uk,
	csl@dbai.tuwien.ac.at, cs-logic@cs.indiana.edu,
	curry@informatik.rwth-aachen.de, dbworld@cs.wisc.edu,
	eapls@jiscmail.ac.uk, ecoop-info@ecoop.org, forum@jsoftware.com,
	fsdm@cs.uq.oz.au, gnome-announce-list@gnome.org, gulp@di.unipi.it,
	haskell@haskell.org, lande@irisa.fr, lcs@cis.upenn.edu,
	lfcs-interest@dcs.ed.ac.uk, logic-list@cs.rice.edu,
	logic@theory.lcs.mit.edu, mercury-ads@cs.mu.oz.au,
	plt-scheme@fast.cs.utah.edu, pept@kb.ecei.tohoku.ac.jp,
	python-announce-list@python.org, seworld@cs.colorado.edu,
	stratego@cs.uu.nl, template-haskell@haskell.org,
	theory-logic@cs.cmu.edu, types-wg@durham.ac.uk, types@cis.upenn.edu
Content-Type: text/plain; charset=ISO-8859-2; format=flowed; delsp=yes
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Apple Message framework v924)
Subject: First Call for Papers: DSL WC
Date: Wed, 18 Jun 2008 16:49:54 -0400
X-Mailer: Apple Mail (2.924)
X-Spam: no; 0.00; ifip:01 notations:01 semantics:01 syntax:01 pointers:01 avayalabs:01 henzinger:01 kieburtz:01 ralf:01 sarkar:01 taha:01 weirich:01 javascript:98 macromedia:98 autocad:98 

IFIP Working Conference on Domain Specific Languages (DSL WC)
July 15-17, 2009, Oxford

CALL FOR PAPERS

Domain-specific languages are emerging as a fundamental component of =20
software engineering practice. DSLs are often introduced when new =20
domains such as web-scripting or markup come into existence, but it is =20=

also common to see DSLs being introduced and adopted for traditional =20
domains such as parsing and data description. Developing software =20
using DSLs has many benefits. DSLs are often designed based on =20
existing notations that are already in use by experts in a given =20
domain. As such, successful DSLs often reduce or eliminate the effort =20=

needed to transform the concept or innovation produced by the domain =20
expert into an executable artifact or even a deliverable software =20
product. DSL implementations can capture and mechanize a significant =20
portion of the repetitive and mechanical tasks that a domain expert =20
traditionally needed to perform in order to produce an executable. =20
DSLs can in many cases capture and make widely available special =20
expertise that only top specialists in a given domain might have. By =20
capturing expert knowledge and reducing repetitive tasks, DSLs often =20
also lead to software that is significantly more portable, more =20
reliable and more understandable than it would otherwise be.

DSLs can be viewed as having a dual role to general-purpose languages: =20=

whereas general purpose languages try to do everything as well as =20
possible, DSLs are designed to find a domain where they can solve some =20=

class of problems -- no matter how small -- in the best possible way. =20=

Widely known examples of DSLs include Matlab, Verilog, SQL, LINQ, =20
JavaScript, PERL, HTML, Open GL, Tcl/Tk, Macromedia Director, =20
Mathematica/Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX, =20=

PostScript, Excel, among many others. But while these tools have been =20=

widely successful, they still fall short of realizing the full idea =20
behind them. The goal of this conference is to explore the extent to =20
which incorporating modern principles of language design and software =20=

engineering can benefit existing and future domain-specific languages.

The ultimate goal of using DSLs is to improve programmer productivity =20=

and software quality. Often, this is achieved by reducing the cost of =20=

initial software development as well as maintenance costs. These =20
improvements - programs being easier to write and maintain - =20
materialize as a result of domain-specific guarantees, analyses, =20
testing techniques, verification techniques, and optimizations.

    * Paper Criteria
Papers are sought addressing the research problems, fundamental =20
principles, and practical techniques of DSLs, including but not =20
limited to:
       - Foundations, including semantics, formal methods, type =20
theory, and complexity theory
       - Language design, ranging from concrete syntax to semantic and =20=

typing issues
       - Software engineering, including domain analysis, software =20
design, and round-trip         engineering
       - Software processes, including metrics for software and =20
language evaluation
       - Implementation techniques, including parsing, compiling, and =20=

program generation
       - Program analysis and automated transformation
       - Reverse engineering, re-engineering, design discovery, =20
automated refactoring
       - Hardware/software codesign
       - Programming environments, including visual languages, =20
debuggers, and testing infrastructure
       - Teaching DSLs and the use of DSLs in teaching
       - Case studies, including engineering, bioinformatics, hardware =20=

specification languages, parallel computing languages, real-time and =20
embedded systems, and networked and distributed domains

Papers will be judged on the depth of their insight and the extent to =20=

which they translate specific experience into general lessons for =20
domain-specific language designers and implementers, and software =20
engineers. Papers can range from the practical to the theoretical; =20
where appropriate, they should refer to actual languages, tools, and =20
techniques, provide pointers to full definitions and implementations, =20=

and include empirical data on results.

    * Important Dates
       - December 14th, 2008: Abstract submission due. Firm, will not =20=

have any extensions
       - December 21st, 2008: Paper submission deadline. Firm, will =20
not have any extensions
       - February 23rd, 2009: Author notification of decisions
       - March 22nd, 2009: Camera ready manuscripts due

    * Program Committee
       - Jon Bentley, Avayalabs
       - Martin Erwig, Oregon State University
       - Jeff Gray, University of Alabama at Birmingham
       - Robert Grimm, New York University
       - Jim Grundy, Intel Strategic CAD Labs
       - Tom Henzinger, EPFL
       - Sam Kamin, UIUC
       - Dick Kieburtz, Portland State University
       - Ralf L=E4mmel, University of Koblenz
       - Julia Lawall, University of Copenhagen
       - Benjamin Pierce, University of Pennsylvania
       - Vivek Sarkar, Rice University
       - Jeremy Siek, University of Colorado at Boulder
       - Jos=E9 Nuno Oliveira, University of Minho
       - Doaitse Swierstra, Utrecht University
       - Walid Taha (Chair), Rice University
       - Eelco Visser, Delft University
       - William Waite, University of Colorado at Boulder
       - Stephanie Weirich, University of Pennsylvania

    * Organizers
       - General Chair: Jeremy Gibbons, Oxford University
       - Publicity Chair: Emir Pasalic, LogicBlox=

