Return-Path: <jjb@microsoft.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id E3404BBAF
	for <caml-list@yquem.inria.fr>; Wed, 11 Jun 2008 11:25:35 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AscAAJA2T0jVx4q1fGdsb2JhbACCQjGNdYEpAQELBQIGBxGeOQ
X-IronPort-AV: E=Sophos;i="4.27,623,1204498800"; 
   d="scan'208,217";a="11876679"
Received: from smtp-dub.microsoft.com ([213.199.138.181])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 11 Jun 2008 11:25:35 +0200
Received: from DUB-EXHUB-C301.europe.corp.microsoft.com (65.53.213.91) by
 DUB-EXGWY-E802.partners.extranet.microsoft.com (10.251.129.2) with Microsoft
 SMTP Server (TLS) id 8.1.240.5; Wed, 11 Jun 2008 10:25:32 +0100
Received: from EA-EXMSG-C332.europe.corp.microsoft.com ([169.254.2.240]) by
 DUB-EXHUB-C301.europe.corp.microsoft.com ([65.53.213.91]) with mapi; Wed, 11
 Jun 2008 10:25:32 +0100
From: Josh Berdine <jjb@microsoft.com>
To: Charles Hymans <charles.hymans@gmail.com>,
	"caml-list@yquem.inria.fr" <caml-list@yquem.inria.fr>
Date: Wed, 11 Jun 2008 10:25:30 +0100
Subject: RE: [Caml-list] typing of recursive modules in 3.10.2
Thread-Topic: [Caml-list] typing of recursive modules in 3.10.2
Thread-Index: AcjLMArKKJWVWroSQq6vRSAtguqt3gAclHxQ
Message-ID: <857DD0FDAC042B4485F9F5F4EA675104166C8EB605@EA-EXMSG-C332.europe.corp.microsoft.com>
References: <676aba050806101227m1696d555n6f23f55f57af0db2@mail.gmail.com>
In-Reply-To: <676aba050806101227m1696d555n6f23f55f57af0db2@mail.gmail.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach:
X-MS-TNEF-Correlator:
acceptlanguage: en-US
Content-Type: multipart/alternative;
	boundary="_000_857DD0FDAC042B4485F9F5F4EA675104166C8EB605EAEXMSGC332eu_"
MIME-Version: 1.0
X-Spam: no; 0.00; recursive:01 typecheck:01 typechecker:01 bug:01 cheers:01 recursive:01 ocaml:01 sig:01 val:01 functor:01 sig:01 val:01 struct:01 struct:01 checker:01 

--_000_857DD0FDAC042B4485F9F5F4EA675104166C8EB605EAEXMSGC332eu_
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

Hi Charles,

I don't know if it helps, and this doesn't address your concern over predic=
tability, but your example will also typecheck if you annotate the argument=
 of f with t:

let f (x : t) =3D A.g x

I can't claim to be able to explain just why that helps, but without the an=
notation it seems that when typechecking structure B, the typechecker needs=
 to know the type equality t =3D B.t directly, while either adding the anno=
tation or destructing the pair causes the type definitions to be unfolded o=
nce.

The following threads seem to be related:
http://caml.inria.fr/pub/ml-archives/caml-list/2007/05/d9414d45a9a6f30f2609=
e08c43f011a0.en.html
http://caml.inria.fr/pub/ml-archives/caml-list/2007/06/0d23465b5b04f72fedec=
dd3bbf2c9d72.en.html

There is also a related bug (4266) in the database.

Cheers,  Josh


From: caml-list-bounces@yquem.inria.fr [mailto:caml-list-bounces@yquem.inri=
a.fr] On Behalf Of Charles Hymans
Sent: Tuesday, June 10, 2008 8:27 PM
To: caml-list@yquem.inria.fr
Subject: [Caml-list] typing of recursive modules in 3.10.2

Hi,

I have encountered a behavior of the type checking of recursive modules whi=
ch is hard for me to understand.
Especially so, since the code used to compile with Ocaml 3.10.0 but does no=
t with 3.10.2.<http://3.10.2.> And, an almost similar piece of code compile=
s correctly.

I tried to extract the smallest piece of code that exhibits the problem, bu=
t it's still quite long. Sorry.

Here is the code that does not type with 3.10.2:
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

module type BSig =3D
sig
  type t
  val f: t -> unit
end

module type ASig =3D functor(B: BSig) ->
sig
  type t
  val g: B.t -> unit
end

module Make(C: BSig) =3D
struct
  type t =3D int
  let g _ =3D ()
end

module MakeA =3D (Make: ASig)

module rec A:
sig
  type t
  val g: B.t -> unit
end
=3D MakeA(B)

and B:
sig
  type t =3D int * A.t
  val f: t -> unit
end
=3D
struct
  type t =3D int * A.t

  let f x =3D A.g x   (* does not type *)
(*
  let f (a, b) =3D A.g (a, b)   (* types correctly *)
*)
end

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Note that if function f is replaced by the commented version, then the type=
 checker succeeds. Even though, this code modification is only giving the a=
dditional information that the argument of f is a pair.

It would be nice for both versions of the code to compile, because the curr=
ent behavior of the type checker seems to me not easily predictable.

Thank you in advance for your help,


--_000_857DD0FDAC042B4485F9F5F4EA675104166C8EB605EAEXMSGC332eu_
Content-Type: text/html; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" xmlns:o=3D"urn:schemas-micr=
osoft-com:office:office" xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:x=3D"urn:schemas-microsoft-com:office:excel" xmlns:p=3D"urn:schemas-m=
icrosoft-com:office:powerpoint" xmlns:a=3D"urn:schemas-microsoft-com:office=
:access" xmlns:dt=3D"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:s=3D"=
uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882" xmlns:rs=3D"urn:schemas-microsof=
t-com:rowset" xmlns:z=3D"#RowsetSchema" xmlns:b=3D"urn:schemas-microsoft-co=
m:office:publisher" xmlns:ss=3D"urn:schemas-microsoft-com:office:spreadshee=
t" xmlns:c=3D"urn:schemas-microsoft-com:office:component:spreadsheet" xmlns=
:oa=3D"urn:schemas-microsoft-com:office:activation" xmlns:html=3D"http://ww=
w.w3.org/TR/REC-html40" xmlns:q=3D"http://schemas.xmlsoap.org/soap/envelope=
/" xmlns:D=3D"DAV:" xmlns:x2=3D"http://schemas.microsoft.com/office/excel/2=
003/xml" xmlns:ois=3D"http://schemas.microsoft.com/sharepoint/soap/ois/" xm=
lns:dir=3D"http://schemas.microsoft.com/sharepoint/soap/directory/" xmlns:d=
s=3D"http://www.w3.org/2000/09/xmldsig#" xmlns:dsp=3D"http://schemas.micros=
oft.com/sharepoint/dsp" xmlns:udc=3D"http://schemas.microsoft.com/data/udc"=
 xmlns:xsd=3D"http://www.w3.org/2001/XMLSchema" xmlns:sub=3D"http://schemas=
.microsoft.com/sharepoint/soap/2002/1/alerts/" xmlns:ec=3D"http://www.w3.or=
g/2001/04/xmlenc#" xmlns:sp=3D"http://schemas.microsoft.com/sharepoint/" xm=
lns:sps=3D"http://schemas.microsoft.com/sharepoint/soap/" xmlns:xsi=3D"http=
://www.w3.org/2001/XMLSchema-instance" xmlns:udcxf=3D"http://schemas.micros=
oft.com/data/udc/xmlfile" xmlns:wf=3D"http://schemas.microsoft.com/sharepoi=
nt/soap/workflow/" xmlns:mver=3D"http://schemas.openxmlformats.org/markup-c=
ompatibility/2006" xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/o=
mml" xmlns:mrels=3D"http://schemas.openxmlformats.org/package/2006/relation=
ships" xmlns:ex12t=3D"http://schemas.microsoft.com/exchange/services/2006/t=
ypes" xmlns:ex12m=3D"http://schemas.microsoft.com/exchange/services/2006/me=
ssages" xmlns:Z=3D"urn:schemas-microsoft-com:" xmlns=3D"http://www.w3.org/T=
R/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-US link=3Dblue vlink=3Dpurple>

<div class=3DSection1>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>Hi Charles,<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>I don&#8217;t know if it helps, and this doesn&#8217;t addre=
ss
your concern over predictability, but your example will also typecheck if y=
ou
annotate the argument of f with t:<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>let f (x : t) =3D A.g x<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>I can&#8217;t claim to be able to explain just why that help=
s,
but without the annotation it seems that when typechecking structure B, the
typechecker needs to know the type equality t =3D B.t directly, while eithe=
r adding
the annotation or destructing the pair causes the type definitions to be
unfolded once.<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>The following threads seem to be related:<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><a
href=3D"http://caml.inria.fr/pub/ml-archives/caml-list/2007/05/d9414d45a9a6=
f30f2609e08c43f011a0.en.html">http://caml.inria.fr/pub/ml-archives/caml-lis=
t/2007/05/d9414d45a9a6f30f2609e08c43f011a0.en.html</a><o:p></o:p></span></p=
>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><a
href=3D"http://caml.inria.fr/pub/ml-archives/caml-list/2007/06/0d23465b5b04=
f72fedecdd3bbf2c9d72.en.html">http://caml.inria.fr/pub/ml-archives/caml-lis=
t/2007/06/0d23465b5b04f72fedecdd3bbf2c9d72.en.html</a><o:p></o:p></span></p=
>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>There is also a related bug (4266) in the database.<o:p></o:=
p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'>Cheers,&nbsp; Josh<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibri",=
"sans-serif";
color:#1F497D'><o:p>&nbsp;</o:p></span></p>

<div style=3D'border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0in =
0in 0in'>

<p class=3DMsoNormal><b><span style=3D'font-size:10.0pt;font-family:"Tahoma=
","sans-serif"'>From:</span></b><span
style=3D'font-size:10.0pt;font-family:"Tahoma","sans-serif"'>
caml-list-bounces@yquem.inria.fr [mailto:caml-list-bounces@yquem.inria.fr] =
<b>On
Behalf Of </b>Charles Hymans<br>
<b>Sent:</b> Tuesday, June 10, 2008 8:27 PM<br>
<b>To:</b> caml-list@yquem.inria.fr<br>
<b>Subject:</b> [Caml-list] typing of recursive modules in 3.10.2<o:p></o:p=
></span></p>

</div>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<div>

<p class=3DMsoNormal>Hi,<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>I have encountered a behavior of the type checking of
recursive modules which is hard for me to understand.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>Especially so, since the code used to compile with Oca=
ml
3.10.0 but does not with <a href=3D"http://3.10.2.">3.10.2.</a> And, an alm=
ost
similar piece of code compiles correctly. <o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>I tried to extract the smallest piece of code that exh=
ibits
the problem, but it's still quite long. Sorry.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>Here is the code that does not type with 3.10.2:<o:p><=
/o:p></p>

</div>

<div>

<p class=3DMsoNormal>=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<o:p></o:p><=
/p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>module type BSig =3D<br>
sig<br>
&nbsp; type t<br>
&nbsp; val f: t -&gt; unit<br>
end<br>
<br>
module type ASig =3D functor(B: BSig) -&gt;<br>
sig<br>
&nbsp; type t<br>
&nbsp; val g: B.t -&gt; unit<br>
end<br>
<br>
module Make(C: BSig) =3D<br>
struct<br>
&nbsp; type t =3D int<br>
&nbsp; let g _ =3D ()<br>
end<br>
<br>
module MakeA =3D (Make: ASig)<br>
<br>
module rec A:<br>
sig<br>
&nbsp; type t<br>
&nbsp; val g: B.t -&gt; unit<br>
end<br>
=3D MakeA(B)<br>
<br>
and B:<br>
sig<br>
&nbsp; type t =3D int * A.t<br>
&nbsp; val f: t -&gt; unit<br>
end<br>
=3D<br>
struct<br>
&nbsp; type t =3D int * A.t<br>
<br>
&nbsp; let f x =3D A.g x&nbsp;&nbsp; (* does not type *)<br>
(*<br>
&nbsp; let f (a, b) =3D A.g (a, b)&nbsp;&nbsp; (* types correctly&nbsp;*)<b=
r>
*)<br>
end<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal><br>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>Note that if function f is replaced by the
commented&nbsp;version, then&nbsp;the type checker succeeds. Even though, t=
his
code modification is&nbsp;only giving the additional information that the
argument of f is a pair.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>It would be nice for both versions of the&nbsp;code to
compile, because&nbsp;the current&nbsp;behavior&nbsp;of the type checker se=
ems
to me&nbsp;not easily predictable.<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>Thank you in advance for your help,<o:p></o:p></p>

</div>

<div>

<p class=3DMsoNormal>&nbsp;<o:p></o:p></p>

</div>

</div>

</body>

</html>

--_000_857DD0FDAC042B4485F9F5F4EA675104166C8EB605EAEXMSGC332eu_--

