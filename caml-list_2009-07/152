Return-Path: <ligia.nicoleta@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: ***
X-Spam-Status: No, score=3.3 required=5.0 tests=AWL,DNS_FROM_RFC_POST,
	HTML_10_20,HTML_MESSAGE,SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 457E1BBAF
	for <caml-list@yquem.inria.fr>; Thu, 30 Jul 2009 19:56:51 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnsDABB8cUrRVdzYmGdsb2JhbACCIzKWdkEBAQEICQwHE6gKgR+QLAEDAgSEDQU
X-IronPort-AV: E=Sophos;i="4.43,296,1246831200"; 
   d="scan'208";a="44162260"
Received: from mail-fx0-f216.google.com ([209.85.220.216])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Jul 2009 19:56:51 +0200
Received: by fxm12 with SMTP id 12so228020fxm.44
        for <caml-list@yquem.inria.fr>; Thu, 30 Jul 2009 10:56:50 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:date:message-id:subject
         :from:to:content-type;
        bh=IOJfGW7ImP0SzoismYF77OhRkBV/03gFJ2iwYFAkeJQ=;
        b=XKj7HdTHNYgvdo4sChakXmIB4CSDVq0RFDL/VGQ1E5ND8q1fHrH1AyCAMa5NF8/yCW
         aGvi38n2Ih6aCvDpMtHRfBr6W4pCmTiPml/g2y3ZdkFOcyXRVQZgfF+dFspdngePWzbC
         m6OVzlMBdNJQzYIyutm5msqBzTROpxG4kgV4Y=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:date:message-id:subject:from:to:content-type;
        b=iJS+Y/QhBRw/jGT6y7KLE3iwTerEYGSn82+2o7x0cEh4FnjaxDc8Oh9KGXbSkbJfGt
         zIrMvZvofh5Q0ek6JO+7HcMAT1IcWzRbQ+S6iAsdh7YQORPBky6EoUMK3JKarxKcwYsT
         ZngHqdtWe5oZhpmLwaQhJug7DHygVBNBDNtV8=
MIME-Version: 1.0
Received: by 10.239.172.18 with SMTP id y18mr144518hbe.72.1248976610205; Thu, 
	30 Jul 2009 10:56:50 -0700 (PDT)
Date: Thu, 30 Jul 2009 18:56:50 +0100
Message-ID: <8401c38a0907301056x470687aah94b2b1295c6d1068@mail.gmail.com>
Subject: Cartesian product
From: Ligia Nistor <ligia.nicoleta@gmail.com>
To: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=001636499fe72f21a6046ff00784
X-Spam: no; 0.00; ocaml:01 ocaml:01 defined:02 defined:02 implemented:02 implemented:02 module:03 module:03 cartesian:04 cartesian:04 types:05 types:05 product:89 product:89 type:14 

--001636499fe72f21a6046ff00784
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

Hi,

Is there an already implemented way of doing the Cartesian product of 2 sets
in OCaml? My sets are of type Set.Make(Types), where Types is a module I
have defined.

Thanks,

Ligia

--001636499fe72f21a6046ff00784
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

Hi,<br><br>Is there an already implemented way of doing the Cartesian product of 2 sets in OCaml? My sets are of type Set.Make(Types), where Types is a module I have defined.<br><br>Thanks,<br><br>Ligia<br>

--001636499fe72f21a6046ff00784--

