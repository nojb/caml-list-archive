Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q0UAq1dj019798
	for <caml-list@sympa-roc.inria.fr>; Mon, 30 Jan 2012 11:52:01 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AggDAM91Jk/ZSMDzlGdsb2JhbABDrlgiAQEBAQkLCQkUAyKBcgEBAwEBGCIrFAULCw4TJQ8BBCghE4d8Awa4PYhCAwsECwcDBDgGgn4dAgxvBYNnBJpdjQ8
X-IronPort-AV: E=Sophos;i="4.71,591,1320620400"; 
   d="scan'208";a="129375044"
Received: from fmmailgate05.web.de ([217.72.192.243])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Jan 2012 11:51:56 +0100
Received: from moweb001.kundenserver.de (moweb001.kundenserver.de [172.19.20.114])
	by fmmailgate05.web.de (Postfix) with ESMTP id F0446694F099
	for <caml-list@inria.fr>; Mon, 30 Jan 2012 11:51:55 +0100 (CET)
Received: from frosties.localnet ([95.208.118.96]) by smtp.web.de (mrweb002)
 with ESMTPA (Nemesis) id 0M6Df8-1Soiv32Duc-00yU2T; Mon, 30 Jan 2012 11:51:55
 +0100
Received: from mrvn by frosties.localnet with local (Exim 4.77)
	(envelope-from <goswin-v-b@web.de>)
	id 1Rroq2-0004Bn-U3; Mon, 30 Jan 2012 11:51:55 +0100
From: Goswin von Brederlow <goswin-v-b@web.de>
To: Gerd Stolpmann <info@gerd-stolpmann.de>
Cc: caml-list@inria.fr
References: <1325263446.5036.104.camel@samsung>
Date: Mon, 30 Jan 2012 11:51:54 +0100
In-Reply-To: <1325263446.5036.104.camel@samsung> (Gerd Stolpmann's message of
	"Fri, 30 Dec 2011 17:44:06 +0100")
Message-ID: <87zkd531kl.fsf@frosties.localnet>
User-Agent: Gnus/5.110009 (No Gnus v0.9) XEmacs/21.4.22 (linux, no MULE)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Provags-ID:  V02:K0:K7sFmi5THTUBq7lD/J2jOzRXgYznXCXGGZggHaamUZZ
 Htyc7rlPLWNkfUNA1lfMZNzdXlo21GCG5ooldxcbcXPmEF0F93
 ERSM90rLlIIvlfqKwnEAkgoFgONZcjELye4MBhief9IQGEnVle
 RC5RLDZy5btdEFGoGdcTW4tyzA7P0y41YWC6vvKDQv3NDOXVbR
 FHSvlXSh9Rm5RgQ2c5f1Q==
Subject: Re: [Caml-list] Hashtbl and security

Gerd Stolpmann <info@gerd-stolpmann.de> writes:

> Hi,
>
> there was recently a security alert for web services that use hash
> tables to store web form parameters sent via POST (so that millions of
> such parameters can be sent in a single request). It is possible to keep
> the web service busy for hours with such a DoS (denial of service)
> attack. The type of attack boils down to a problem in most hash table
> implementations, namely that the hash functions are invertible, and it
> is possible for a malicious user to construct lots of keys that all map
> to the same bucket of the hash table, creating a mass collision.
>
> The text of the alert: 
> http://www.nruns.com/_downloads/advisory28122011.pdf
>
> I'd like to discuss this issue, because it is not restricted to the
> processing of web requests, but may also occur for all other data coming
> from untrusted sources. The web is only the most exposed area where this
> issue exists.
>
> So how is Ocaml affected? The hash functions used in recent Ocaml
> releases are also insecure in the above mentioned sense (currently
> MurmurHash3, and even a simpler hash function in previous releases). A
> quick survey of the Internet revealed at least one site that tries to
> break it. Probably a good cryptographer could do it in minutes. 
>
> A pure Hashtbl.add of the constructed keys does not yet lead to the
> performance degradation, but a Hashtbl.replace, and of course
> Hashtbl.find after the table is built up will. So it depends very much
> of the details of the programs whether they are affected or not.
>
> I've just checked that Ocamlnet uses only Hashtbl.add to collect POST
> parameters, so it is not directly vulnerable. But if the crafted request
> is actually served by a handler, the handler would get a degraded table,
> and could show in turn bad performance (again leading to DoS).
>
> What are possible fixes?
>
> 1) Avoid hash tables in contexts where security is relevant. The
> alternative is Set (actually a balanced binary tree), which does not
> show this problem.

Unfortunately O(log n) > O(1) and that can be a deciding factor in the
overall runtime. Even for small n your code then runs 2,3,4,... times
slower.

> 2) Use cryptographically secure hash functions.
>
> 3) Use "randomized" hash tables. The trick here is that there is not a
> single hash function h anymore, but a family h(1)...h(n). When the hash
> table is created, one of the functions is picked randomly. This makes it
> impossible to craft an attack request, because you cannot predict the
> function.
>
> I don't think 1) is viable - hash tables are too wide spread, and are
> loved by programmers because of their good performance. 2) would be good
> in extremely critical contexts - although it is then again questionable,
> because it is likely to have worse performance than 1).
>
> So, the question is how to do 3). I see two problems here:
>
> a) how to define the family of hash functions. Is it e.g. sufficient to
> introduce an initialization vector for the Murmurhash algorithm, and
> fill it randomly? How to get a random number that is good enough?
>
> b) the Hashtbl in the standard library does not allow it to set the hash
> function dynamically. Maybe one can get this effect by using first-class
> modules (haven't checked).
>
> Anyway, I think these problems are difficult enough to deserve some
> discussion here. At least I cannot solve them immediately, and this
> problem may exist for lots of Ocaml applications.
>
> Gerd

You are forgetting a variable in this. To create a DOS in the hashtable
you need to hit the same bucket again and again. And bucket = hash % size.

You focused on the hash but lets talk about the size for a moment.

The size is rather limited and large hashtabels simply won't increate
size anymore and allways have lots of collisions. So even if someone
isn't actively trying to create DOS the performace still tanks as you
add more items.

And this isn't only a problem in ocaml. The glib hashtable also has a
maximum size in the 32bit range for example.


So for ocaml the first thing that needs to be fixed is to allow larger
size arrays of buckets.

MfG
        Goswin
