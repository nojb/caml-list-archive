Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q03MIkn0004085
	for <caml-list@sympa-roc.inria.fr>; Tue, 3 Jan 2012 23:18:46 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjACAFF+A09KfVI0imdsb2JhbABDggWqVAgiAQEBCgkNGQYhgXIBAQEEEgITGQEbHQEDDAYFBAc7IgERAQUBHAY1oFUKi2WCa4Q/P4hxAgULjAQElQKNfT2Dew
X-IronPort-AV: E=Sophos;i="4.71,452,1320620400"; 
   d="scan'208";a="125475496"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 03 Jan 2012 23:18:41 +0100
Received: by wgbdr12 with SMTP id dr12so32782706wgb.9
        for <caml-list@inria.fr>; Tue, 03 Jan 2012 14:18:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=bNOC6D8f5p1QMehgU2Tpts6X8DIGQ++N/eDG1FYtAe4=;
        b=bbroU2cPcit85IrYWY5+wbyHDA2JlDgKG7kSwlRMcilbF4F7OAHsRFim0L2SfVLnUF
         8FRzBZlPkadaGfBpRWscMCYBVBybn3vKeV9Jl0IgVLhWVWkxZzmPz5RNgefjyp50MlQn
         eF7D1F8XGKZ7tYa26/BHUQM9h7NdNGGRxEtuQ=
MIME-Version: 1.0
Received: by 10.227.200.206 with SMTP id ex14mr53666548wbb.11.1325629120904;
 Tue, 03 Jan 2012 14:18:40 -0800 (PST)
Received: by 10.216.65.129 with HTTP; Tue, 3 Jan 2012 14:18:40 -0800 (PST)
In-Reply-To: <wf4nwc38it.fsf@gmail.com>
References: <CAHqiZ-L3_qx4sWUrxw57usJkguCb2wuBtRx6d_Gz9aucV_bsqw@mail.gmail.com>
	<wf4nwc38it.fsf@gmail.com>
Date: Tue, 3 Jan 2012 23:18:40 +0100
Message-ID: <CAHqiZ-Je6-fkdvinEqZ5aLXf7jQpuZ6C6ac-G9gK0TpZK8hjag@mail.gmail.com>
From: Diego Olivier Fernandez Pons <dofp.ocaml@gmail.com>
To: Wojciech Meyer <wojciech.meyer@googlemail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=000e0cd5a0b0db002a04b5a71477
Subject: Re: [Caml-list] "Let"-less syntax for coreML


--000e0cd5a0b0db002a04b5a71477
Content-Type: text/plain; charset=ISO-8859-1

    Wojciech,


> - ambiguity with structure equivalence operator

- replacement of == would not be good as it is reserved for
> physical equality


Pointer equality is not coreML (not in SML, nor F#). Easy to fix anyway.

- ambiguity in the parser, e.g. the toplevel let bindings are separated
>  by "let", the local lets by pair "let" and "in"
>

I thought about this one... that's the interesting point of forcing a
single name on the left of the '=' sign

     f = fun x y -> x + y

you can deduce this meant LET f = fun x y -> x + y and therefore know where
the previous instruction ends because the two constructions are isomorphic.

Say

    let g = fun x -> x + 1 in let f = fun x -> let v = g 0 in x + v

becomes

   g = fun x -> x + 1 f = fun x -> v = g 0 in x + v

with a unique semantic

  g = fun x -> x + 1
  f = fun x ->
        v = g 0
     in x + v

You only need "in" for the return value of the function, all other elements
being separated by an implicit ";"

Notice that "fun" is also useless, the arrow alone shows it is a
function  g = x -> x + 1 but that feels a bit extreme.

- ignoring "rec" - no good too - please see the other thread, it
>  contradicts how the aliasing of values is now used e.g. for extending
>  modules via. include
>

Easy to fix as well.

        Diego Olivier

--000e0cd5a0b0db002a04b5a71477
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote"><div>=A0 =A0 Wojciech,</div><div>=A0</div><block=
quote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc=
 solid;padding-left:1ex">- ambiguity with structure equivalence operator=A0=
</blockquote>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">- replacement of =3D=3D would not be good as=
 it is reserved for physical=A0equality</blockquote><div>=A0</div>Pointer e=
quality is not coreML (not in SML, nor F#). Easy to fix anyway.</div>

<div class=3D"gmail_quote"><br><blockquote class=3D"gmail_quote" style=3D"m=
argin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">- ambiguity i=
n the parser, e.g. the toplevel let bindings are separated<br>
 =A0by &quot;let&quot;, the local lets by pair &quot;let&quot; and &quot;in=
&quot;<br></blockquote><div><br></div><div>I thought about this one... that=
&#39;s the interesting point of forcing a single name on the left of the &#=
39;=3D&#39; sign</div>

<div><br></div><div>=A0 =A0 =A0f =3D fun x y=A0<span>-&gt; x + y</span></di=
v><div><span><br></span></div><div><span>you can deduce this meant LET f =
=3D fun x y=A0</span><span>-&gt; x + y and therefore know where the previou=
s instruction ends because the two constructions are isomorphic.</span></di=
v>

<div><span><br></span></div><div><font color=3D"#222222" face=3D"arial, san=
s-serif">Say</font></div><div><font color=3D"#222222" face=3D"arial, sans-s=
erif"><br></font></div><div><font color=3D"#222222" face=3D"arial, sans-ser=
if">=A0 =A0 let g =3D fun x -</font><span>&gt; x + 1 in=A0</span><font colo=
r=3D"#222222" face=3D"arial, sans-serif">let f =3D fun x -</font><span>&gt;=
 let v =3D g 0 in x + v</span></div>

<div><br></div><div>becomes</div><div><br></div><div>=A0 =A0g =3D fun x -<s=
pan>&gt; x + 1 f =3D fun x -</span><span>&gt; v =3D g 0 in x + v</span></di=
v><div><br></div><div>with a unique semantic</div><div><br></div><div>
<div>=A0 g =3D fun x -<span>&gt; x + 1=A0</span></div><div><span>=A0 f =3D =
fun x -</span><span>&gt;=A0</span></div><div><span>=A0 =A0 =A0 =A0 v =3D g =
0=A0</span></div><div><span>=A0 =A0 =A0in x + v</span></div></div><div>
<br></div><div>You only need &quot;in&quot; for the return value of the fun=
ction, all other elements being separated by an implicit &quot;;&quot;</div=
><div><br></div><div>Notice that &quot;fun&quot; is also useless, the arrow=
 alone shows it is a function=A0=A0g =3D x -<span>&gt; x + 1 but that feels=
 a bit extreme.</span></div>

<div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex">- ignoring &quot;rec&quot; - =
no good too - please see the other thread, it<br>
 =A0contradicts how the aliasing of values is now used e.g. for extending<b=
r>
 =A0modules via. include<br></blockquote><div><br></div><div>Easy to fix as=
 well.</div><div><br></div><div>=A0 =A0 =A0 =A0 Diego Olivier</div></div>

--000e0cd5a0b0db002a04b5a71477--
