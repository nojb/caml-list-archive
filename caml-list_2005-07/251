Return-Path: <berke@free.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 9F612BB81
	for <caml-list@yquem.inria.fr>; Sun, 24 Jul 2005 10:35:42 +0200 (CEST)
Received: from postfix3-2.free.fr (postfix3-2.free.fr [213.228.0.169])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j6O8ZgaG005772
	for <caml-list@yquem.inria.fr>; Sun, 24 Jul 2005 10:35:42 +0200
Received: from quatre.invalid (vol75-1-81-57-79-249.fbx.proxad.net [81.57.79.249])
	by postfix3-2.free.fr (Postfix) with ESMTP id 41596C009;
	Sun, 24 Jul 2005 10:35:42 +0200 (CEST)
Received: from berke by quatre.invalid with local (Exim 4.50)
	id 1DwbxX-00027d-OL; Sun, 24 Jul 2005 10:35:43 +0200
Date: Sun, 24 Jul 2005 10:35:43 +0200
From: Berke Durak <obdurak@free.fr>
To: Matthieu Sozeau <mattam@mattam.org>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] How to do this properly with OCaml?
Message-ID: <20050724083543.GB4076@ara.zapto.org>
References: <Pine.LNX.4.61.0507221552070.27560@katrin.cip.physik.uni-muenchen.de> <42E2393B.5030209@inria.fr> <20050723131626.GB11661@ara.zapto.org> <200507230936.47352.Stephane.Glondu@crans.org> <20050723182709.GA4076@ara.zapto.org> <0B94AD49-0101-404F-AFCB-FFE72B56662F@mattam.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <0B94AD49-0101-404F-AFCB-FFE72B56662F@mattam.org>
User-Agent: Mutt/1.5.9i
X-Miltered: at concorde with ID 42E352DE.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; berke:01 durak:01 caml-list:01 ocaml:01 matthieu:01 berke:01 durak:01 type-safe:01 ocaml:01 wrote:01 arbitrary:01 ecrit:04 jul:05 mean:07 function:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3
Status: O
Content-Length: 351
Lines: 12

On Sat, Jul 23, 2005 at 08:50:04PM +0200, Matthieu Sozeau wrote:
> 
> Le 23 juil. 05 à 20:27, Berke Durak a écrit :
> >I mean that there could be a built-in, type-safe Ocaml function  
> >that would
> >yield a valid, yet arbitrary value of any type.
> 
> Find an inhabitant of `type t` (the empty type).

Good point.  That settles it.
-- 
Berke Durak

