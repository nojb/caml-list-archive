Return-Path: <roessler@rftp.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id B0897D179
	for <caml-list@yquem.inria.fr>; Wed, 27 Jul 2005 13:54:58 +0200 (CEST)
Received: from smtp112.sbc.mail.re2.yahoo.com (smtp112.sbc.mail.re2.yahoo.com [68.142.229.93])
	by concorde.inria.fr (8.13.0/8.13.0) with SMTP id j6RBsvwm015611
	for <caml-list@yquem.inria.fr>; Wed, 27 Jul 2005 13:54:58 +0200
Received: (qmail 40564 invoked from network); 27 Jul 2005 11:54:57 -0000
Received: from unknown (HELO ?192.168.1.100?) (rftp@pacbell.net@63.194.18.166 with plain)
  by smtp112.sbc.mail.re2.yahoo.com with SMTP; 27 Jul 2005 11:54:57 -0000
Message-ID: <42E77634.6020904@rftp.com>
Date: Wed, 27 Jul 2005 04:55:32 -0700
From: Robert Roessler <roessler@rftp.com>
Organization: Robert's High-performance Software
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.8) Gecko/20050511
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Some Clarifications
References: <6C6555DF5D075A4EA6D27706F4EC5975031677D4@EUR-MSG-10.europe.corp.microsoft.com> <200507271158.09619.jon@ffconsultancy.com>
In-Reply-To: <200507271158.09619.jon@ffconsultancy.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 42E77611.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 ocaml:01 compilers:01 stdlib:01 iirc:01 lablgtk:01 compilers:01 redesigned:01 ...:98 ...:98 wrote:01 typing:01 structures:01 data:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3
Status: O
Content-Length: 1104
Lines: 25

Jon Harrop wrote:

> ...
> Of the OCaml code which I have studied, the OCaml compilers make scarce use of 
> objects, the stdlib makes no use (IIRC), the third party data structures and 
> algorithms that I use also make no use of OO but lablgtk uses OO and I have 
> one friend who has tried using OO in his own OCaml work.

The body of the OCaml implementation itself may not represent the best 
sample set for making this type of observation: in historical context, 
the "O" of OCaml came along relatively late in the project's life, and 
I do not believe that the compilers and standard library code were 
redesigned and reimplemented from the ground up once the "O" was present.

> In my code, I have used an object once, in order to circumvent a typing 
> problem. I have never successfully used OO in OCaml.

An object certainly seems a natural and concise way to represent a 
"state-holder-with-structured-access" - and I have done just that in a 
small OCaml project... but that could be the Smalltalk and C++ in my 
background talking. :)

Robert Roessler
roessler@rftp.com
http://www.rftp.com

