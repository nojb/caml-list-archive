Return-Path: <will@exomi.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 29DF6D179
	for <caml-list@yquem.inria.fr>; Wed, 27 Jul 2005 15:53:06 +0200 (CEST)
Received: from will.iki.fi (will.iki.fi [217.169.64.20])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j6RDr5Jq028919
	for <caml-list@yquem.inria.fr>; Wed, 27 Jul 2005 15:53:05 +0200
Received: from [10.0.20.56] (fa-3-0-0.fw.exomi.com [217.169.64.99])
	by will.iki.fi (Postfix) with ESMTP id E2559BC;
	Wed, 27 Jul 2005 16:53:04 +0300 (EEST)
Message-ID: <42E791C0.9050506@exomi.com>
Date: Wed, 27 Jul 2005 16:53:04 +0300
From: Ville-Pertti Keinonen <will@exomi.com>
User-Agent: Mozilla Thunderbird 1.0.6 (X11/20050721)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: David Thomas <david_hd@yahoo.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Some Clarifications
References: <20050727133654.44519.qmail@web30515.mail.mud.yahoo.com>
In-Reply-To: <20050727133654.44519.qmail@web30515.mail.mud.yahoo.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 42E791C1.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 abstraction:01 abstractions:01 wrote:01 abstract:01 data:02 data:02 types:02 discipline:03 consistent:03 programming:03 quite:06 components:06 classes:06 written:06 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3
Status: O
Content-Length: 597
Lines: 14

David Thomas wrote:

> language features provided to make it easier.  Any
> time you write a program that focuses on the
> components as "data and operations on that data," you
> have written an OO program.  This can be done in any

Not according to traditional terminology.  What you've done is used 
Abstract Data Types, which is one of the most basic forms of abstraction 
that anyone should learn in any programming language.

Of course I've seen quite a few programmers who don't have enough 
discipline to use consistent abstractions unless they're forced to 
encapsulate things in classes.

