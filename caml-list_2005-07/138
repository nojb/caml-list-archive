Return-Path: <padiolea@irisa.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id BF2D1BCAF
	for <caml-list@yquem.inria.fr>; Mon, 18 Jul 2005 20:23:26 +0200 (CEST)
Received: from smtp.irisa.fr (smtp.irisa.fr [131.254.254.26])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j6IINQ5a018350
	for <caml-list@yquem.inria.fr>; Mon, 18 Jul 2005 20:23:26 +0200
Received: from localhost (localhost.localdomain [127.0.0.1])
	by localhost.irisa.fr (Postfix) with ESMTP id 47CFEFA94;
	Mon, 18 Jul 2005 20:23:26 +0200 (CEST)
Received: from smtp.irisa.fr ([131.254.254.26])
 by localhost (meli.irisa.fr [127.0.0.1]) (amavisd-new, port 10024) with ESMTP
 id 30543-07; Mon, 18 Jul 2005 20:23:25 +0200 (CEST)
Received: from mail.irisa.fr (melo.irisa.fr [131.254.254.28])
	by smtp.irisa.fr (Postfix) with ESMTP id 10113FA98;
	Mon, 18 Jul 2005 20:23:25 +0200 (CEST)
Received: from 82.233.141.201
        (SquirrelMail authenticated user padiolea)
        by mail.irisa.fr with HTTP;
        Mon, 18 Jul 2005 20:23:25 +0200 (CEST)
Message-ID: <1195.82.233.141.201.1121711005.squirrel@mail.irisa.fr>
In-Reply-To: <42DB6161.4030507@cs.utah.edu>
References: <9cc3782b05071411004b27b6a4@mail.gmail.com>
    <42DB6161.4030507@cs.utah.edu>
Date: Mon, 18 Jul 2005 20:23:25 +0200 (CEST)
Subject: Re: [Caml-list] (Mostly) Functional Design?
From: padiolea@irisa.fr
To: "Robert Morelli" <morelli@cs.utah.edu>
Cc: "Kyle Consalus" <consalus@gmail.com>, caml-list@yquem.inria.fr
User-Agent: SquirrelMail/1.4.5
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal
X-Virus-Scanned: by amavisd-new at irisa.fr
X-Miltered: at nez-perce with ID 42DBF39E.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 irisa:01 subtyping:01 parametric:01 polymorphism:01 garbage:01 functionnal:01 functionnal:01 haskell:01 verbose:01 ocaml:01 ocaml:01 caml-list:01 beginner's:01 beginners:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.2 required=5.0 tests=NO_REAL_NAME 
	autolearn=disabled version=3.0.2
X-Spam-Level: 
Status: O
Content-Length: 3456
Lines: 97

> I contend:
>    1.  The FP community tends to emphasize low level issues rather than
> the larger scale issues that concern most programmers.  It is also

what are large scale issues ?

> inept at practical documentation and advocacy.
>    2.  There isn't much of a theory of large scale functional design.

Because there is a theory of large scale design in OO world ?
I mean can we call drawing rectangles and lines a theory ?


> At least,  there is no consensus.
>    3.  Point 2. is not the consequence of point 1.;  it's not simply a
> matter of communication,  but an instrinsic void in the FP paradigm.
> The FP paradigm is intrinsically poorly adapted to the kind of large
> scale design concepts that concern most programmers.

Can you be more specific ?

> Object oriented
> programming is a much better match,  not because of a conspiracy of
> commercial giants in the software tool business,  but because of
> intrinsic technical reasons.

So what are those intrinsical technical reasons ?


> Functional programming is a niche
> technology ideally suited to simple domains like language tools and
> formal methods.

Do you really think that langage tools and formal methods are
"simple domains" ?


> It does not have much to say about complicated
> systems.

You mean overcomplicated system I guess.


I like some of the ideas that the oo community brings to the world.
I like objects, I think inheritance/subtyping are cool,
I like late binding. I just think they are overrated.
IMHO higher order functions, parametric polymorphism, pattern matching,
garbage collection, ... are equally important features.

In fact, in the OO world, many "design patterns" have direct
translation in fp construct, and in fact just imitates what
functionnal programmers have done for years.
For instance the strategy pattern is just an example of use of
higher order functions. Peter norvig have a talk on his webpage
where he says that 21 of the design patterns have
a direct translation in dylan.
Nevertheless, again, I like the fact that the oo community
brings to the world the idea of design patterns, of a catalogue.
In fact, there is now some design functionnal patterns (have
a look at the haskell wiki).

That said, I have read analysis books, I had a look at UML,
and I never saw anything useful in those books. Those books
are verbose, very long, and boring.



>
>
> Kyle Consalus wrote:
>> There are a wealth of resources related to object oriented design
>> techniques
>> (which can certainly be applied to OCaml), but I've been pretty much
>> unable
>> to find any good resources on large scale design of functional programs.
>> I realize that this is the sort of thing that develops over time with
>> experience.
>> Just the same, there is (most likely) a lot to learn and consider, and a
>> resource would be helpful. My recent uses of OCaml for fairly small
>> projects
>> have been effective, but a lot of things were cumbersome in the design
>> and I suspect that I may be thinking about it wrong.
>> So, could anyone suggest a good resource or perhaps weigh
>> in on their thoughts on the topic?
>>
>> Thanks,
>>
>> Kyle
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>


