Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 0F8ACD171
	for <caml-list@yquem.inria.fr>; Mon, 25 Jul 2005 21:19:13 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j6PJJCCE017395
	for <caml-list@yquem.inria.fr>; Mon, 25 Jul 2005 21:19:12 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA24975 for <caml-list@pauillac.inria.fr>; Mon, 25 Jul 2005 21:19:11 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j6PJJ9io017388
	for <caml-list@inria.fr>; Mon, 25 Jul 2005 21:19:10 +0200
Received: from rosella (ppp9-20.lns1.syd3.internode.on.net [59.167.9.20])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id j6PJJ4FL059323;
	Tue, 26 Jul 2005 04:49:05 +0930 (CST)
Subject: Re: [Caml-list] How to do this properly with OCaml?
From: skaller <skaller@users.sourceforge.net>
To: rose@acm.org
Cc: caml-list@inria.fr
In-Reply-To: <42E51FB1.3010700@tfb.com>
References: 
	 <Pine.LNX.4.61.0507221552070.27560@katrin.cip.physik.uni-muenchen.de>
	 <Pine.LNX.4.58.0507230057110.28297@ls01.fas.harvard.edu>
	 <42E2393B.5030209@inria.fr>
	 <1122226423.9027.23.camel@localhost.localdomain> <42E51FB1.3010700@tfb.com>
Content-Type: multipart/signed; micalg=pgp-sha1; protocol="application/pgp-signature"; boundary="=-FfgKgUi7WlgoURKALH+U"
Date: Tue, 26 Jul 2005 05:19:03 +1000
Message-Id: <1122319143.6773.38.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.2.1.1 
X-Miltered: at nez-perce with ID 42E53B30.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 42E53B2D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 ocaml:01 functor:01 hashtables:01 wrote:01 wrote:01 sourceforge:01 sourceforge:01 imperative:01 supported:01 data:02 implemented:02 variables:02 let:03 
X-Attachments: type="application/pgp-signature" name="signature.asc" 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3
Status: O
Content-Length: 1247
Lines: 44


--=-FfgKgUi7WlgoURKALH+U
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Mon, 2005-07-25 at 10:21 -0700, Ken Rose wrote:
> skaller wrote:
> >=20
> > I would appreciate an officially supported variable=20
> > length array a lot: it can't be efficiently implemented=20
> > *without* Obj.magic.=20
>=20
> I must be missing something obvious.  What's wrong with map?

It is not efficient, it is very
clumsy to use because it is an ocaml functor,
and it is not imperative.

I actually use Hashtables a lot, rather than Maps,
simply because the type variables are instantiated
automatically.

In any case, the point is that each data structure
has different properties and I would like a choice.
Don't say 'roll your own then' because the point
is that I can't: Ocaml won't let me (without magic:)

--=20
John Skaller <skaller at users dot sourceforge dot net>


--=-FfgKgUi7WlgoURKALH+U
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQBC5TsmsRp8/9aGVGsRArgoAJ92dwuH2Y/Xk/I595F71ZM8RrL/0ACfQPlN
TOjXxmgjJ2Et6Hy9xbJ8Kss=
=IHqP
-----END PGP SIGNATURE-----

--=-FfgKgUi7WlgoURKALH+U--

