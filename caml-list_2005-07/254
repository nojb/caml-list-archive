Return-Path: <morelli@cs.utah.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 6FDE9D15F
	for <caml-list@yquem.inria.fr>; Sun, 24 Jul 2005 16:51:14 +0200 (CEST)
Received: from rwcrmhc12.comcast.net (rwcrmhc13.comcast.net [204.127.198.39])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j6OEpDJd027318
	for <caml-list@yquem.inria.fr>; Sun, 24 Jul 2005 16:51:14 +0200
Received: from [192.168.1.4] (c-24-10-253-157.hsd1.ut.comcast.net[24.10.253.157])
          by comcast.net (rwcrmhc13) with ESMTP
          id <2005072414510601500a1p57e>; Sun, 24 Jul 2005 14:51:12 +0000
Message-ID: <42E3AADA.8030907@cs.utah.edu>
Date: Sun, 24 Jul 2005 08:51:06 -0600
From: Robert Morelli <morelli@cs.utah.edu>
User-Agent: Mozilla Thunderbird 1.0 (X11/20041206)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Damien Doligez <damien.doligez@inria.fr>
Cc: caml-list <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] Some Clarifications
References: <9cc3782b05071411004b27b6a4@mail.gmail.com>	<42DB6161.4030507@cs.utah.edu> <42DD5F41.8060801@cs.utah.edu> <C021B1D2-C7C3-4445-ADAA-33740312F1D8@inria.fr>
In-Reply-To: <C021B1D2-C7C3-4445-ADAA-33740312F1D8@inria.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 42E3AAE1.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; morelli:01 morelli:01 caml-list:01 damien:01 algebra:01 subset:01 ocaml's:01 algebra:01 subset:01 ocaml:01 foc:01 functors:01 foc:01 ocaml's:01 2005,:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.8 required=5.0 tests=SPF_SOFTFAIL 
	autolearn=disabled version=3.0.3
Status: O
Content-Length: 1868
Lines: 38

Damien Doligez wrote:
> On Jul 19, 2005, at 22:14, Robert Morelli wrote:
> 
> 
>> One of the areas where I do much of my programming is in mathematical
>> software.  I view this as one of the most difficult areas,  at the
>> opposite extreme from simple domains like formal methods and language
>> tools.
>>
> 
> Since computer algebra is clearly a subset of formal methods, and a
> pretty good match for OCaml's feature set, I'm rather curious to know
> exactly what kind of mathematical software you are writing, that can
> be so much more complex.

Computer algebra is not all of what mathematical software is about,  and
computer algebra is not,  in practice,  a subset of formal methods.  The
communities of researchers who work in the two fields are traditionally
quite distinct,  with distinct immediate goals,  and the research is
funded and evaluated differently.  For instance,  the NSF in the US
funds several different kinds of computational mathematics research
through several different programs,  and funds formal methods research
through several different programs.

In principle,  the two fields should be merged -- at least in part --
and that is very clearly the vision of some people (though not all).
In practice,  there have been initiatives to bring the two fields
together,  but up until now that has been considered a challenging
interdisciplinary endeavor.

Several years ago I read a paper about a computer algebra system
written in OCaml called FOC.  The title of the paper was something
like "Functors,  blah,  blah,  ... Is it Too Much?"  I think the
conclusion of the paper was that FOC naturally drew upon all of OCaml's
language facilities,  both functional and object oriented.  This paper
might speak to the demands of the domain for anyone who is curious
enough to look it up.  Of course,  we can equally well ask,  "Is it
Enough?"

