Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id UAA10177 for caml-redistribution; Fri, 18 Oct 1996 20:09:49 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id KAA27100 for <caml-list@pauillac.inria.fr>; Fri, 18 Oct 1996 10:42:06 +0200
Received: from margaux.inria.fr (margaux.inria.fr [128.93.8.2]) by concorde.inria.fr (8.7.6/8.7.1) with ESMTP id KAA05041 for <caml-list@pauillac.inria.fr>; Fri, 18 Oct 1996 10:42:06 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by margaux.inria.fr (8.6.10/8.6.6) with ESMTP id JAA23676 for <caml-list@margaux.inria.fr>; Fri, 18 Oct 1996 09:42:04 +0100
Received: from daedalus.epcc.ed.ac.uk (root@[129.215.56.21]) by concorde.inria.fr (8.7.6/8.7.1) with SMTP id KAA05029 for <caml-list@margaux.inria.fr>; Fri, 18 Oct 1996 10:41:56 +0200 (MET DST)
Received: from tufa.epcc.ed.ac.uk (jserot@tufa.epcc.ed.ac.uk [129.215.56.4]) by daedalus.epcc.ed.ac.uk (8.6.13/8.6.12) with ESMTP id JAA27273 for <caml-list@margaux.inria.fr>; Fri, 18 Oct 1996 09:41:37 +0100
Message-Id: <17349.199610180841@tufa.epcc.ed.ac.uk>
Subject: Yet another question about the module system
To: caml-list@margaux.inria.fr
Date: Fri, 18 Oct 1996 09:41:36 +0100 (BST)
From: Jocelyn Serot <jserot@epcc.ed.ac.uk>
X-Mailer: ELM [version 2.4 PL25]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis


Hello,

In a previous post i was asking a few questions about the relations between 
the module system and separate compilation. Thanks to the clever answers of
a few people, i thought i have understood the whole stuff. Until i encounter
the following pb:

Suppose i have 2 files:

A first one, specifying an interface for an abstract type Bar:

****** bar.mli **********
type t
val x :t
*************************

A second one, specifying a second abstract type built upon the first one
using functor application

****** foo.mli **********
module type FOO = sig type t val y : t end
module Make(B:Bar) : (FOO with type t = Bar.t)
*************************

Trying to compile this separately:

	> ocamlc -c bar.mli
	> ocamlc -c foo.mli

produces the following error message:
	> File "foo.mli", line 3, characters 14-17: Unbound module type Bar

BUT, if write foo.mli like that

****** foo.mli **********
module type FOO = sig type t val y : t end
val y : Bar.t
*************************

Everythings compiles ok.
So, it seems that the Bar interface is known when compiling Foo (i guess this
goes trough the bar.cmi file).
Why cannot it be used as a functor argument then ?

	Jocelyn Serot

Es-mail: jserot@epcc.ed.ac.uk  (->Nov 29/96) ...............................
S-mail: LASMEA - URA 1793 CNRS, Universite Blaise Pascal, 63177 Aubiere cedex
Tel: (33) 73.40.73.30 - Fax: (33) 73.40.72.62 ...............................
.... http://wwwlasmea.univ-bpclermont.fr/Personnel/Jocelyn.Serot/Welcome.html




