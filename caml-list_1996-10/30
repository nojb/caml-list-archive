Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id QAA07596 for caml-redistribution; Tue, 22 Oct 1996 16:30:48 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id RAA12541 for <caml-list@pauillac.inria.fr>; Mon, 21 Oct 1996 17:02:12 +0200
Received: from ad.com.ar (saturno.ad.net.ar [200.5.72.5]) by concorde.inria.fr (8.7.6/8.7.1) with ESMTP id RAA22720 for <caml-list@pauillac.inria.fr>; Mon, 21 Oct 1996 17:02:03 +0200 (MET DST)
Received: from hulley.ad.net.ar (200.5.72.3) by ad.com.ar
 with SMTP (Apple Internet Mail Server 1.1.1); Mon, 21 Oct 1996 12:01:12 -0300
Message-ID: <n1366223177.25655@hulley.ad.net.ar>
Date: 21 Oct 1996 11:41:57 -0300
From: "Matias Giovannini" <mgiovann@script.org.ar>
Subject: RE: caml/mac + alpha
To: "Bruno Petazzoni" <Bruno.Petazzoni@ac-idf.jussieu.fr>,
        caml-list@pauillac.inria.fr
X-Mailer: Mail*Link SMTP for Quarterdeck Mail; Version 4.0.0
Mime-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"; Name="Message Body"
Content-Transfer-Encoding: quoted-printable
Sender: weis


> quelqu'un a-t-il interface' caml-light/mac avec l'e'diteur alpha ? =
je n'ai
> pas le courage de plonger dans TCL pour faire le travail... et je =
suis
> certain que quelqu'un l'a de'ja` fait bien mieux que je serais =
capable de
> le faire...

I've written a (sort of) Caml mode definition for Alpha. It's kind of =
useable, though.
I hadn't the time to test the marking procedure. If somebody likes to =
build upon this mode, feel free to do so.

#######################################################################=
########
if {$startingUp} {
	addMode Caml dummyCaml {*.ml *.mli} {}
	return
}


newModeVar Caml leftFillColumn {4} 0
newModeVar Caml electricSemi {1} 1
newModeVar Caml wordBreak {\w+} 0
newModeVar Caml wordWrap {0} 1
newModeVar Caml funcExpr {^let(\s+rec)?(\s+prefix)?\s+\S+(\s+\w+)*\s*=
=3D} 0
newModeVar Caml wordBreakPreface {\W} 0
newModeVar Caml electricTab {1} 1
newModeVar Caml autoMark	0	1

set CamlCommentRegexp	{/\(\*([^\*]|\*[^)])*\*\)/}
set CamlPreRegexp		{^\#\s*\w+}
set CamlKeyWords		{
	and    as     begin       do      done      downto 
	else   end    exception   for     fun       function 
	if     in     let         match   mutable   not 
	of     or     prefix      rec     then      to 
	try    type   value       where   while     with
	ref
}
regModeKeywords -b {(*} {*)} -c red -k blue -s green Caml =
$CamlKeyWords
unset CamlKeyWords


#=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

proc dummyCaml {} {}

proc CamlMarkFile {} {
 	global CamlModeVars
 	set pos 0
 	while {![catch {search -s -f 1 -r 1 -m 0 -i 0 =
$CamlModeVars(funcExpr) $pos} res]} {
 		set start [lindex $res 0]
 		set end [expr [lindex $res 1] + 1]
 		set text [getText $start $end]
 		if {[regexp {let(\s+rec)?(\s+prefix)?\s+(\S+)} $text entire isrec =
ispref fname]} {
 			set tmp [expr $start + [string first $fname $text]]
 			set inds($fname) "$tmp [expr $tmp + [string length $fname]]"
 		}
 		set pos $end
 	}
 	if {[info exists inds]} {
 		foreach f [lsort -ignore [array names inds]] {
 			set res $inds($f)
 			setNamedMark $f [lineStart [lindex $res 0]] [lindex $res 0] =
[lindex $res 1]
 		}
 	}
}





