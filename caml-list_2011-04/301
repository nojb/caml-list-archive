Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p3UKvpmY007691
	for <caml-list@sympa-roc.inria.fr>; Sat, 30 Apr 2011 22:57:51 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgcDALx2vE3RVaE2kGdsb2JhbACmDwgUAQEBAQkJDQcUBCGIcaBBinwKgiCDfjSIXgEBAwaFegSOeYR0gyOCIzsqgx8
X-IronPort-AV: E=Sophos;i="4.64,294,1301868000"; 
   d="scan'208";a="98408277"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 30 Apr 2011 22:57:46 +0200
Received: by fxm11 with SMTP id 11so6411945fxm.27
        for <multiple recipients>; Sat, 30 Apr 2011 13:57:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:reply-to:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=ERS6XpLbqUbrOclh3GSGDVx0kikdO2+kbrM9s0lA/RM=;
        b=RNPCXaYZzHVIBB9EUDh8cWraVITK6xsEzbGiyARNveD4jwF15gKLVcCGwVAT0r71Dq
         PtmgNBH6tNKeZSTLcbXIHapJHiXoIhQriP+0Cow4HOG8Z3266I3X8M4RYRnYD7SUtKv4
         5OA27376iAy2Sv+aMl5AngXa3rKhJlBxgaEMU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:reply-to:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        b=EZlcpb5PwPrmCL9whvk0XFIoBVsxYbs68GEdg96BKIcg/SxSusECDh0k/hbvfLnbp/
         tbBTnpaUw1KUsL2vwsn4o8XEt5NphKMycLKtm/F8Fm3L6beMkk3WAL9hiBtAQEMOvwdc
         joom8Bz9KzYAcwhg3kt6d1CWCJUtJDeXYWLro=
MIME-Version: 1.0
Received: by 10.223.48.139 with SMTP id r11mr1390824faf.63.1304197065874; Sat,
 30 Apr 2011 13:57:45 -0700 (PDT)
Received: by 10.223.81.68 with HTTP; Sat, 30 Apr 2011 13:57:45 -0700 (PDT)
Reply-To: yminsky@gmail.com
In-Reply-To: <BANLkTinq3eZPzt3CwFD2P4mL1Te+ykEZdA@mail.gmail.com>
References: <BANLkTi=55g=rwiRm03_eS=uyGGDCoi4ezg@mail.gmail.com>
	<164004794.892685.1304067487325.JavaMail.root@zmbs2.inria.fr>
	<20110429093355.GA25892@yquem.inria.fr>
	<4746acd6-ddad-498c-a535-a3bfdcb5fec7@email.android.com>
	<BANLkTinq3eZPzt3CwFD2P4mL1Te+ykEZdA@mail.gmail.com>
Date: Sat, 30 Apr 2011 16:57:45 -0400
Message-ID: <BANLkTik_Lb2x7e7NR1uAJXean_GRcVUNQg@mail.gmail.com>
From: Yaron Minsky <yminsky@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: "craff73@gmail.com" <craff73@gmail.com>, luc.maranget@inria.fr,
        Dmitry Bely <dmitry.bely@gmail.com>, caml-list@inria.fr
Content-Type: multipart/alternative; boundary=00151747b8d8d41c2404a2290ae6
Subject: Re: [Caml-list] Comparing variant types


--00151747b8d8d41c2404a2290ae6
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

When I have to do this by hand, my favorite style is this:

type t =3D A of float | B of string

let compare x y =3D
   let tag_idx =3D function  A _ -> 0 | B _ -> 1 in
   match x, y with
   | A a1, A a2 -> Float.compare a1 a2
   | B b1, B b2 -> String.compare b1 b2
   | (B _ | A _), _ -> Int.compare (tag_idx x) (tag_idx y)

You will get the right kind of warnings when the type t changes, and it's
pleasantly explicit about the ordering implied by the tags.

That said, this is unpleasant boilerplate to have to write by hand.  My
expectation is that in the next release of Core, we will include a set of
macros for autogenerating equality, comparison and hash functions, as well
as type-hashes, all driven by the type definitions.

On Sat, Apr 30, 2011 at 4:19 PM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> You want to avoid code size quadratic in the number of constructors. Which
>> is possible:
>>
>
>
> let cmp x y =3D match x, y with
>> A, A -> true
>> | A, _ | _, A -> false
>> | B, B -> true
>> | B, _ | _, B -> false
>
>
> With one twist though: if done that way for (type foo =3D A | B), the last
> (_, B) pattern is actually redundant. If you want to avoid getting a warn=
ing
> here, you should comment it out or remove it:
>
>   let cmp x y =3D match x, y with
>   | A, A -> true
>   | A, _ | _, A -> false
>   | B, B -> true
>   | B, _ (*| _, B*) -> false
>
> That's the style I use.
>
> On Sat, Apr 30, 2011 at 3:43 PM, craff73@gmail.com <craff73@gmail.com>wro=
te:
>
>> Hello,
>>
>> You want to avoid code size quadratic in the number of constructors. Whi=
ch
>> is possible:
>>
>> let cmp x y =3D match x, y with
>> A, A -> true
>> | A, _ | _, A -> false
>> | B, B -> true
>> | B, _ | _, B -> false
>> ...
>>
>> Cheers
>> Christophe
>>
>> --
>> Envoy=E9 de mon t=E9l=E9phone Android avec K-9 Mail. Excusez la bri=E8ve=
t=E9.
>>
>>
>

--00151747b8d8d41c2404a2290ae6
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

When I have to do this by hand, my favorite style is this:<br><br>type t =
=3D A of float | B of string<br><br>let compare x y =3D <br>=A0=A0 let tag_=
idx =3D function=A0 A _ -&gt; 0 | B _ -&gt; 1 in<br>=A0=A0 match x, y with<=
br>=A0=A0 | A a1, A a2 -&gt; Float.compare a1 a2<br>
=A0=A0 | B b1, B b2 -&gt; String.compare b1 b2<br>=A0=A0 | (B _ | A _), _ -=
&gt; Int.compare (tag_idx x) (tag_idx y)<br><br>You will get the right kind=
 of warnings when the type t changes, and it&#39;s pleasantly explicit abou=
t the ordering implied by the tags.<br>
<br>That said, this is unpleasant boilerplate to have to write by hand.=A0 =
My expectation is that in the next release of Core, we will include a set o=
f macros for autogenerating equality, comparison and hash functions, as wel=
l as type-hashes, all driven by the type definitions.<br>
<br><div class=3D"gmail_quote">On Sat, Apr 30, 2011 at 4:19 PM, Gabriel Sch=
erer <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.scherer@gmail.com">gab=
riel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_=
quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
ex;">
<div class=3D"im"><div><blockquote class=3D"gmail_quote" style=3D"margin-to=
p:0px;margin-right:0px;margin-bottom:0px;margin-left:0.8ex;border-left-widt=
h:1px;border-left-color:rgb(204, 204, 204);border-left-style:solid;padding-=
left:1ex">


You want to avoid code size quadratic in the number of constructors. Which =
is possible:<br></blockquote><blockquote class=3D"gmail_quote" style=3D"mar=
gin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0.8ex;border-lef=
t-width:1px;border-left-color:rgb(204, 204, 204);border-left-style:solid;pa=
dding-left:1ex">


=A0</blockquote><blockquote class=3D"gmail_quote" style=3D"margin-top:0px;m=
argin-right:0px;margin-bottom:0px;margin-left:0.8ex;border-left-width:1px;b=
order-left-color:rgb(204, 204, 204);border-left-style:solid;padding-left:1e=
x">


let cmp x y =3D match x, y with<br>A, A -&gt; true<br>| A, _ | _, A -&gt; f=
alse<br>| B, B -&gt; true<br>| B, _ | _, B -&gt; false</blockquote></div><d=
iv><br></div></div>With one twist though: if done that way for (type foo =
=3D A | B), the last (_, B) pattern is actually redundant. If you want to a=
void getting a warning here, you should comment it out or remove it:<div>


<br></div><div><div class=3D"im"><div>=A0=A0let cmp x y =3D match x, y with=
</div><div>=A0=A0| A, A -&gt; true</div><div>=A0=A0| A, _ | _, A -&gt; fals=
e</div><div>=A0=A0| B, B -&gt; true</div><div>=A0=A0| B, _ (*| _, B*) -&gt;=
 false</div><div><br>
</div></div><div>That&#39;s the style I use.</div><div><div></div><div clas=
s=3D"h5">

<br><div class=3D"gmail_quote">On Sat, Apr 30, 2011 at 3:43 PM, <a href=3D"=
mailto:craff73@gmail.com" target=3D"_blank">craff73@gmail.com</a> <span dir=
=3D"ltr">&lt;<a href=3D"mailto:craff73@gmail.com" target=3D"_blank">craff73=
@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">

Hello,<br>
<br>
You want to avoid code size quadratic in the number of constructors. Which =
is possible:<br>
<br>
let cmp x y =3D match x, y with<br>
 A, A -&gt; true<br>
| A, _ | _, A -&gt; false<br>
| B, B -&gt; true<br>
| B, _ | _, B -&gt; false<br>
...<br>
<br>
Cheers<br>
Christophe<br><font color=3D"#888888">
<br>
-- <br>
Envoy=E9 de mon t=E9l=E9phone Android avec K-9 Mail. Excusez la bri=E8vet=
=E9.<br><br></font></blockquote></div><br></div></div></div>
</blockquote></div><br>

--00151747b8d8d41c2404a2290ae6--
