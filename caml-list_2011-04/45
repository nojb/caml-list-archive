Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p385ZWFL001508
	for <caml-list@sympa-roc.inria.fr>; Fri, 8 Apr 2011 07:35:32 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuQBADudnk3RVdc0kWdsb2JhbACmCggUAQEBAQkLCwcUBCGIeptsmyeFbQSXBDo
X-IronPort-AV: E=Sophos;i="4.63,322,1299452400"; 
   d="scan'208";a="96536958"
Received: from mail-ew0-f52.google.com ([209.85.215.52])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Apr 2011 07:35:27 +0200
Received: by ewy28 with SMTP id 28so1248389ewy.39
        for <caml-list@yquem.inria.fr>; Thu, 07 Apr 2011 22:35:26 -0700 (PDT)
Received: by 10.14.123.9 with SMTP id u9mr771810eeh.53.1302240926497;
        Thu, 07 Apr 2011 22:35:26 -0700 (PDT)
Received: from gloster.home (195-240-226-4.ip.telfort.nl [195.240.226.4])
        by mx.google.com with ESMTPS id r48sm1485029eei.16.2011.04.07.22.35.24
        (version=TLSv1/SSLv3 cipher=OTHER);
        Thu, 07 Apr 2011 22:35:24 -0700 (PDT)
Mime-Version: 1.0 (Apple Message framework v1084)
Content-Type: text/plain; charset=us-ascii
From: Stefan Holdermans <stefan@vectorfabrics.com>
In-Reply-To: <4D9E28D2.1050808@wp.pl>
Date: Fri, 8 Apr 2011 07:35:23 +0200
Cc: caml-list <caml-list@yquem.inria.fr>
Message-Id: <AC52E26B-80E8-4380-A4D8-D346D98A3132@vectorfabrics.com>
References: <4D9E28D2.1050808@wp.pl>
To: Dawid Toton <d0@wp.pl>
X-Mailer: Apple Mail (2.1084)
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by walapai.inria.fr id p385ZWFL001508
Subject: Re: [Caml-list] What is an applicative functor?

Dawid,

> What does it mean that a functor is applicative?
> Is there any analogy between applicative functors in OCaml and the Applicative type class of Haskell?

There is no analogy; functors in Caml are quite different from functors in Haskell. In Caml, a Functor is a higher-order module, i.e., a module that takes other modules as input in order to produce a proper module. In Haskell, Functor is a type class: essentially, the collection of types of kind * -> * that come with a structure preserving, covariant map operation. Applicative functors are members of this collection that fulfill some extra requirements.

Cheers,

  Stefan
