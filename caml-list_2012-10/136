Return-Path: <jacques.garrigue@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id EBCFE7EDE3
	for <caml-list@sympa.inria.fr>; Tue, 23 Oct 2012 15:54:09 +0200 (CEST)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jacques.garrigue@gmail.com) identity=pra;
  client-ip=209.85.214.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="jacques.garrigue@gmail.com";
  x-sender="jacques.garrigue@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  jacques.garrigue@gmail.com designates 209.85.214.182 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="jacques.garrigue@gmail.com";
  x-sender="jacques.garrigue@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f182.google.com) identity=helo;
  client-ip=209.85.214.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="jacques.garrigue@gmail.com";
  x-sender="postmaster@mail-ob0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgoBAJGghlDRVda2kGdsb2JhbABEDq9HB4kfAYhhCCMBAQEBCQkNBxQEI4IeAQEBAwESAhMZAS0LAQMBCwEFBQsNDSEiEgEFAQoSBhMSEIdQAwkGC51ICQOOFIEKhSonAwpMiQIBBQyLUxqGRAOIWI0ZgReNQRYpgViBfEyBVA
X-IronPort-AV: E=Sophos;i="4.80,635,1344204000"; 
   d="scan'208";a="178548723"
Received: from mail-ob0-f182.google.com ([209.85.214.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 23 Oct 2012 15:54:08 +0200
Received: by mail-ob0-f182.google.com with SMTP id wc20so6314443obb.27
        for <multiple recipients>; Tue, 23 Oct 2012 06:54:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type;
        bh=ecKd648f8wWn9mVi9ivQaBbHTlEhcG0zuh71Z+LkaWo=;
        b=NMWSGMCTcxh3aC/j0Bv8gv3d8EmeY+lAIujLt6n9yxYrCwuvRF7IovfUpzAQnlRhNd
         lMBCjg27QqW6XXTBpxq4nVhvSjcIXfNACUeZGUCORceM7iCRunhQc1bVfZIfX3dptlLz
         ZMBnVDBlzefFLfWhSZgaYuIG46Nwqj08jev80S+dCFxipvAuxvwm1qIcEuOd9FdUZuI7
         PHT0UWAHDAzLJdW+RwRA4H7m0vU1vO+kne7OMYnTLrOtwcQpKimuyFVrlmW3Rj+1TmWD
         e0uX/xuVlfLqtjkXfx3YyEBHTwMw9aZioc2O6fHyLE77JYXbocEuMEfQHpR8ufUQWBer
         tXCg==
MIME-Version: 1.0
Received: by 10.60.3.69 with SMTP id a5mr11322595oea.117.1351000447770; Tue,
 23 Oct 2012 06:54:07 -0700 (PDT)
Sender: jacques.garrigue@gmail.com
Received: by 10.182.71.130 with HTTP; Tue, 23 Oct 2012 06:54:07 -0700 (PDT)
Received: by 10.182.71.130 with HTTP; Tue, 23 Oct 2012 06:54:07 -0700 (PDT)
In-Reply-To: <Prayer.1.3.5.1210231331420.27886@hermes-1.csi.cam.ac.uk>
References: <508677C4.5040802@inria.fr>
	<Prayer.1.3.5.1210231331420.27886@hermes-1.csi.cam.ac.uk>
Date: Tue, 23 Oct 2012 22:54:07 +0900
X-Google-Sender-Auth: ua_YtkqMu9oKp4ySpLLtipqEZTI
Message-ID: <CA+p7B-z0vGWLC5Bv5_HHZxVWYM5yAX2ZLMk2163t-j7RFJ9=ZQ@mail.gmail.com>
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
To: Leo P White <lpw25@cam.ac.uk>
Cc: OCaML List Mailing <caml-list@inria.fr>, Romain Bardou <romain.bardou@inria.fr>
Content-Type: multipart/alternative; boundary=e89a8f83a5a5c7dfe004ccba4d44
Subject: Re: [Caml-list] Constrained existential types


--e89a8f83a5a5c7dfe004ccba4d44
Content-Type: text/plain; charset=ISO-8859-1

2012/10/23 21:32 "Leo P White" <lpw25@cam.ac.uk>:
>
> It is a bit convoluted, but you can achieve this by using a GADT:
>
>
> type 'a t constraint 'a = [< `A | `B ];;
>
> module type SIG =
> sig
>   type a = private [< `A | `B ]
>   val x: a t
> end;;
>
> type 'a aux = Aux: 'a t -> ([< `A | `B] as 'a) aux;;
>
> let create y =
>  let helper: type u. u aux -> unit =
>    fun (Aux y) ->        let module M: SIG =
>
>        struct
>          type a = u
>          let x = y
>        end
>        in
>        ()
>  in
>    helper (Aux y)
> ;;
>
> Regards,
>
> Leo

This is very interesting.
I was actually convinced that this was impossible.
The problem is that the (type u) syntax does not support abstract rows.
But you could avoid it by using a gadt which restores this abstract row
after abstracting the whole type.

Actually the type u. u aux->unit is hard to understand here.
The point is that it expand to 'u. 'u aux->unit, which really requires a
polymorphic row variable.
Unfortunately the following implicit (type u) does not capture it buy your
gadt does the trick.

Jacques Garrigue

> On Oct 23 2012, Romain Bardou wrote:
>
>> (This is the 4th time I send this e-mail because it does not seem to
work. I'm trying with another SMTP server.)
>>
>> Hello list,
>>
>> I'm trying to use first-class modules to have existential types. But my
existential type must be constrained. I have the following code:
>>
>> type 'a t constraint 'a = [< `A | `B ]
>>
>> module type SIG =
>> sig
>>   type a = private [< `A | `B ]
>>   val x: a t
>> end
>>
>> let create (type u) (y: u t) =
>>   let module M: SIG =
>>     struct
>>       type a = u
>>       let x = y
>>     end
>>   in
>>   ()
>>
>> It does not compile, because of the following error:
>>
>> Error: This type u should be an instance of type [< `A | `B ]
>>
>> In the manual I did not see any way to constrain type u. If I write
something like this instead:
>>
>> let create (y: 'a t) =
>>   let module M: SIG =
>>     struct
>>       type a = 'a
>>       let x = y
>>     end
>>   in
>>   ()
>>
>> Then the definition "type a = 'a" is not correct, because 'a is not
bound.
>>
>> Is there any way to have constrained existential types?
>>
>> Thanks,
>>
>>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--e89a8f83a5a5c7dfe004ccba4d44
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<p>2012/10/23 21:32 &quot;Leo P White&quot; &lt;<a href=3D"mailto:lpw25@cam=
.ac.uk">lpw25@cam.ac.uk</a>&gt;:<br>
&gt;<br>
&gt; It is a bit convoluted, but you can achieve this by using a GADT:<br>
&gt;<br>
&gt;<br>
&gt; type &#39;a t constraint &#39;a =3D [&lt; `A | `B ];;<br>
&gt;<br>
&gt; module type SIG =3D<br>
&gt; sig<br>
&gt; =A0 type a =3D private [&lt; `A | `B ]<br>
&gt; =A0 val x: a t<br>
&gt; end;;<br>
&gt;<br>
&gt; type &#39;a aux =3D Aux: &#39;a t -&gt; ([&lt; `A | `B] as &#39;a) aux=
;;<br>
&gt;<br>
&gt; let create y =3D<br>
&gt; =A0let helper: type u. u aux -&gt; unit =3D<br>
&gt; =A0 =A0fun (Aux y) -&gt; =A0 =A0 =A0 =A0let module M: SIG =3D<br>
&gt;<br>
&gt; =A0 =A0 =A0 =A0struct<br>
&gt; =A0 =A0 =A0 =A0 =A0type a =3D u<br>
&gt; =A0 =A0 =A0 =A0 =A0let x =3D y<br>
&gt; =A0 =A0 =A0 =A0end<br>
&gt; =A0 =A0 =A0 =A0in<br>
&gt; =A0 =A0 =A0 =A0()<br>
&gt; =A0in<br>
&gt; =A0 =A0helper (Aux y)<br>
&gt; ;;<br>
&gt;<br>
&gt; Regards,<br>
&gt;<br>
&gt; Leo</p>
<p>This is very interesting. <br>
I was actually convinced that this was impossible. <br>
The problem is that the (type u) syntax does not support abstract rows.<br>
But you could avoid it by using a gadt which restores this abstract row aft=
er abstracting the whole type.</p>
<p>Actually the type u. u aux-&gt;unit is hard to understand here. <br>
The point is that it expand to &#39;u. &#39;u aux-&gt;unit, which really re=
quires a polymorphic row variable.<br>
Unfortunately the following implicit (type u) does not capture it buy your =
gadt does the trick. </p>
<p>Jacques Garrigue </p>
<p>&gt; On Oct 23 2012, Romain Bardou wrote:<br>
&gt;<br>
&gt;&gt; (This is the 4th time I send this e-mail because it does not seem =
to work. I&#39;m trying with another SMTP server.)<br>
&gt;&gt;<br>
&gt;&gt; Hello list,<br>
&gt;&gt;<br>
&gt;&gt; I&#39;m trying to use first-class modules to have existential type=
s. But my existential type must be constrained. I have the following code:<=
br>
&gt;&gt;<br>
&gt;&gt; type &#39;a t constraint &#39;a =3D [&lt; `A | `B ]<br>
&gt;&gt;<br>
&gt;&gt; module type SIG =3D<br>
&gt;&gt; sig<br>
&gt;&gt; =A0 type a =3D private [&lt; `A | `B ]<br>
&gt;&gt; =A0 val x: a t<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; let create (type u) (y: u t) =3D<br>
&gt;&gt; =A0 let module M: SIG =3D<br>
&gt;&gt; =A0 =A0 struct<br>
&gt;&gt; =A0 =A0 =A0 type a =3D u<br>
&gt;&gt; =A0 =A0 =A0 let x =3D y<br>
&gt;&gt; =A0 =A0 end<br>
&gt;&gt; =A0 in<br>
&gt;&gt; =A0 ()<br>
&gt;&gt;<br>
&gt;&gt; It does not compile, because of the following error:<br>
&gt;&gt;<br>
&gt;&gt; Error: This type u should be an instance of type [&lt; `A | `B ]<b=
r>
&gt;&gt;<br>
&gt;&gt; In the manual I did not see any way to constrain type u. If I writ=
e something like this instead:<br>
&gt;&gt;<br>
&gt;&gt; let create (y: &#39;a t) =3D<br>
&gt;&gt; =A0 let module M: SIG =3D<br>
&gt;&gt; =A0 =A0 struct<br>
&gt;&gt; =A0 =A0 =A0 type a =3D &#39;a<br>
&gt;&gt; =A0 =A0 =A0 let x =3D y<br>
&gt;&gt; =A0 =A0 end<br>
&gt;&gt; =A0 in<br>
&gt;&gt; =A0 ()<br>
&gt;&gt;<br>
&gt;&gt; Then the definition &quot;type a =3D &#39;a&quot; is not correct, =
because &#39;a is not bound.<br>
&gt;&gt;<br>
&gt;&gt; Is there any way to have constrained existential types?<br>
&gt;&gt;<br>
&gt;&gt; Thanks,<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt; -- <br>
&gt; Caml-list mailing list. =A0Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list">https://sympa.i=
nria.fr/sympa/arc/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners">http://groups.yahoo.com/group/ocaml_beginners</a><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs">http://cam=
l.inria.fr/bin/caml-bugs</a></p>

--e89a8f83a5a5c7dfe004ccba4d44--
