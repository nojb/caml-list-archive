Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 7B27E7EC41
	for <caml-list@sympa.inria.fr>; Wed, 24 Oct 2012 12:46:06 +0200 (CEST)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=209.85.220.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  philippe.veber@gmail.com designates 209.85.220.54 as
  permitted sender) identity=mailfrom; client-ip=209.85.220.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-pa0-f54.google.com) identity=helo;
  client-ip=209.85.220.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-pa0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArEBAIrGh1DRVdw2m2dsb2JhbABEr2cziHMBiGYIIwEBAQEBCAkLHSeCHgEBAQMBEgITGQEbEgsBAwELBgUEBw0NISEBAREBBQEKEgYTEgkHh08BAwkGC5xRCQOMKIJ2hHAKGScDClmIdQEFDIptZ4ZrA5JBgV2BVYEXihKDLxYphBM
X-IronPort-AV: E=Sophos;i="4.80,639,1344204000"; 
   d="scan'208";a="160222075"
Received: from mail-pa0-f54.google.com ([209.85.220.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 24 Oct 2012 12:45:59 +0200
Received: by mail-pa0-f54.google.com with SMTP id bi1so350816pad.27
        for <caml-list@inria.fr>; Wed, 24 Oct 2012 03:45:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=pAqTf2jFRgvGT4/29aG5ikEEqwIxpunOhmtwN+ry7lc=;
        b=lBydPORiOx7q0xorjvOR7+jdEEt1wDlTMTS4kB8cNxSs5QWCsjgufu2WDv+ns9RnhO
         twStJu5ytnm2rEeXm3z0CIgWSHsr3B6uLETpbp5QjL7auDIruzKvwCvrrpCQDx4KAfzq
         Yzl9cyOKCyMkd1NoxDy7UroEGTg9I30EAsG67QXmY4XLMIoAR5d+IFJjaBiNY5YWF3v8
         geU1Qa+qhrGpB06i5TE9wpg+DbIGekb2ipGCxJImLi+Sh0DM0hAblSA25qGmEqRmm/rU
         B42quOB3WQ2UL4IkFI+94DI+zxeixAsDIS6tGaOzW8zMX5XAFC0owXb1OZwKWPVtogeN
         vXQA==
Received: by 10.68.125.230 with SMTP id mt6mr48794902pbb.110.1351075558038;
 Wed, 24 Oct 2012 03:45:58 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.66.241.169 with HTTP; Wed, 24 Oct 2012 03:45:37 -0700 (PDT)
In-Reply-To: <CAPFanBFCOaOtczaCiKskfVVmUhr8vz7Y3GBPSpLjBFydOn01nw@mail.gmail.com>
References: <CAOOOohRa8N9y88TZTHgOfGR4AtjB9q_37ehb4vruy_q68BPobw@mail.gmail.com>
 <CAAxsn=G6NNZ9gH4e1bY0PqGkT_adi5D-B2gshD40nV4T4uvhRw@mail.gmail.com> <CAPFanBFCOaOtczaCiKskfVVmUhr8vz7Y3GBPSpLjBFydOn01nw@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Wed, 24 Oct 2012 12:45:37 +0200
Message-ID: <CAOOOohSRz_U5u-bwAiyp6w+XFtdU7_ZuLYKYgLKy8uu3RLaBkw@mail.gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7b2e4446b39e8e04cccbcae2
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Parameterizing a function with a thread monad


--047d7b2e4446b39e8e04cccbcae2
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Gabriel,

well thanks, I had forgotten this interesting approach by Daniel. Indeed
for now I'd like to try a functor/first-class module -based solution.
Thanks for the suggestion anyway!
Cheers,
  ph.

2012/10/23 Gabriel Scherer <gabriel.scherer@gmail.com>

> If you want to parametrize over arbitrary monads, the modularized
> appraoch (using functors or first-class modules) is adapted. But note
> that for more specialized needs different interfaces are possible. For
> example, Daniel B=FCnzli experimented with explicit inversion of control
> instead of parametrization by monadic library, to solve the problem of
> being Lwt/Async/"event loop" agnostic:
>
>   [Caml-list] Non-blocking IO interface design
>   https://sympa.inria.fr/sympa/arc/caml-list/2012-04/msg00055.html
>
> I'm not sure how this worked out in the end, but this may be worth
> looking at if you're still at the general design step.
>
> On Tue, Oct 23, 2012 at 1:52 AM, Jeremy Yallop <yallop@gmail.com> wrote:
> > On 22 October 2012 23:09, Philippe Veber <philippe.veber@gmail.com>
> wrote:
> >> A couple of libraries, like pgocaml for instance, define a functor over
> a
> >> (monadic) thread implementation, like in the following:
> >>
> >> module type Thread =3D sig
> >>   type 'a t
> >>   val return : 'a -> 'a t
> >>   val bind : 'a t -> ('a -> 'b t) -> 'b t
> >> end
> >>
> >> module F(T : Thread) : sig
> >>   val v : string -> string T.t
> >> end
> >>
> >> Is it possible to define F as a function (ie at the value level)?
> >
> > Yes!  Mat=EDas Giovannini has a blog post showing how to do just that:
> >
> > http://alaska-kamtchatka.blogspot.co.uk/2011/09/higher-order-fun.html
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa.inria.fr/sympa/arc/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--047d7b2e4446b39e8e04cccbcae2
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Gabriel, <br><br>well thanks, I had forgotten this interesting approach =
by Daniel. Indeed for now I&#39;d like to try a functor/first-class module =
-based solution. Thanks for the suggestion anyway!<br>Cheers,<br>=A0 ph.<br>

<br><div class=3D"gmail_quote">2012/10/23 Gabriel Scherer <span dir=3D"ltr"=
>&lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=3D"_blank">gabriel=
.scherer@gmail.com</a>&gt;</span><br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">If you want to parametrize over arbitrary mo=
nads, the modularized<br>
appraoch (using functors or first-class modules) is adapted. But note<br>
that for more specialized needs different interfaces are possible. For<br>
example, Daniel B=FCnzli experimented with explicit inversion of control<br>
instead of parametrization by monadic library, to solve the problem of<br>
being Lwt/Async/&quot;event loop&quot; agnostic:<br>
<br>
=A0 [Caml-list] Non-blocking IO interface design<br>
=A0 <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2012-04/msg00055.=
html" target=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list/2012-04/=
msg00055.html</a><br>
<br>
I&#39;m not sure how this worked out in the end, but this may be worth<br>
looking at if you&#39;re still at the general design step.<br>
<div><div><br>
On Tue, Oct 23, 2012 at 1:52 AM, Jeremy Yallop &lt;<a href=3D"mailto:yallop=
@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt; wrote:<br>
&gt; On 22 October 2012 23:09, Philippe Veber &lt;<a href=3D"mailto:philipp=
e.veber@gmail.com" target=3D"_blank">philippe.veber@gmail.com</a>&gt; wrote=
:<br>
&gt;&gt; A couple of libraries, like pgocaml for instance, define a functor=
 over a<br>
&gt;&gt; (monadic) thread implementation, like in the following:<br>
&gt;&gt;<br>
&gt;&gt; module type Thread =3D sig<br>
&gt;&gt; =A0 type &#39;a t<br>
&gt;&gt; =A0 val return : &#39;a -&gt; &#39;a t<br>
&gt;&gt; =A0 val bind : &#39;a t -&gt; (&#39;a -&gt; &#39;b t) -&gt; &#39;b=
 t<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; module F(T : Thread) : sig<br>
&gt;&gt; =A0 val v : string -&gt; string T.t<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; Is it possible to define F as a function (ie at the value level)?<=
br>
&gt;<br>
&gt; Yes! =A0Mat=EDas Giovannini has a blog post showing how to do just tha=
t:<br>
&gt;<br>
&gt; <a href=3D"http://alaska-kamtchatka.blogspot.co.uk/2011/09/higher-orde=
r-fun.html" target=3D"_blank">http://alaska-kamtchatka.blogspot.co.uk/2011/=
09/higher-order-fun.html</a><br>
&gt;<br>
</div></div><span><font color=3D"#888888">&gt; --<br>
&gt; Caml-list mailing list. =A0Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blan=
k">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</font></span></blockquote></div><br>

--047d7b2e4446b39e8e04cccbcae2--
