Return-Path: <pdgroves@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 645057EC41
	for <caml-list@sympa.inria.fr>; Mon, 22 Oct 2012 23:22:30 +0200 (CEST)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  pdgroves@gmail.com) identity=pra; client-ip=209.85.212.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="pdgroves@gmail.com";
  x-sender="pdgroves@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  pdgroves@gmail.com designates 209.85.212.54 as permitted
  sender) identity=mailfrom; client-ip=209.85.212.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="pdgroves@gmail.com";
  x-sender="pdgroves@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vb0-f54.google.com) identity=helo;
  client-ip=209.85.212.54;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="pdgroves@gmail.com";
  x-sender="postmaster@mail-vb0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvoBAFy4hVDRVdQ2k2dsb2JhbABFwSoIIwEBAQEJCQsJFAQjgjkCLAEbHgMSCQddAREBBQFXh08BAw8LmmeCZwkDjCiCdoUMChknDVmIdQEBBAySQgOIWollgzKOWBYphC8
X-IronPort-AV: E=Sophos;i="4.80,632,1344204000"; 
   d="scan'208";a="159986934"
Received: from mail-vb0-f54.google.com ([209.85.212.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 22 Oct 2012 23:22:29 +0200
Received: by mail-vb0-f54.google.com with SMTP id v11so5942652vbm.27
        for <caml-list@inria.fr>; Mon, 22 Oct 2012 14:22:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=3q+LxxDMHL6+J4iZsq3Wz8FTn99rHNdIbDs2ORkIfcI=;
        b=g0uA4RHQC4JwCPX1EtX0gn9T76bhxRBkd3MAwf34NVEZWy4flmWV/T27pm5Jdn/RwU
         TlvZFxnwBmttsvFESpQEdI0MstS4YVgi4X9XjmVFmtcsbxHf/KK+BfeKnWc6ww15dwS1
         qLUkOjFfnFkSIkMcZdA6sliJSvitcpqYxHok++sp3RFQGyfgcX26gFlhXwApiSi/3f3D
         ELQPEbwQjm8hWqGv+afnLSD//fUPhMgLYMSNUlZjps5K4lz2Ow2onNnwk4Q5xFPlA6cr
         jK/X1HTokHp/ou2rYHJPqyaYIX/np5IJO2tnkP8G8V9NavUz0/FKN8tbIBk50f2gsZH2
         U7Xw==
MIME-Version: 1.0
Received: by 10.58.74.40 with SMTP id q8mr18739228vev.36.1350940948309; Mon,
 22 Oct 2012 14:22:28 -0700 (PDT)
Received: by 10.58.205.236 with HTTP; Mon, 22 Oct 2012 14:22:28 -0700 (PDT)
Date: Mon, 22 Oct 2012 16:22:28 -0500
Message-ID: <CAB1Vn3u4Q+PCC7J3d=Yw0iWq+f_=d11+3i+fMUhiix2zVyisTA@mail.gmail.com>
From: Peter Groves <pdgroves@gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=047d7b6d7ab45625e804ccac73a9
Subject: [Caml-list] [ANN] Ocuality v0.8


--047d7b6d7ab45625e804ccac73a9
Content-Type: text/plain; charset=ISO-8859-1

OCuality is an integrated logging, assertion, and unit testing library.

This is the first open source release after several years of development as
part of the designByRobots project.

The goal of Ocuality is to create a straightforward, yet minimal, way of
defining certain property's of an application's types so that assertions
don't require vast amounts of type-specific boilerplate to pack and unpack
data structures to run a compare() function against. Ocuality also tries to
remove problems that occur when unit testing libraries, built-in asserts
methods, and logging libraries do not work nicely together (such as java's
assert() method, junit library, and logging working against each other).

The key feature of Ocuality is the way assertions (via a module called
Verify) can be called from either application code or as part of a unit
test (via the TestCase module). When a Verify method fails or (optionally)
succeeds, an informative log message is generated. When a suite of unit
tests are run, the number of Verifications that succeed or fail are
summarized, as well as a detailed list of failing tests.

This approach to assertions requires a comparer ('a Comparer.t), which is
simply a toString() and compare() method for an abstract type ('a). The
Comparer module provides methods for composing higher order Comparer.t's
(e.g. create a ('a list Comparer.t) given a ('a Comparer.t))) which are
extremely powerful in creating simple yet complete assertions in unit tests.

Project Home and Readme:
https://github.com/pgroves/ocuality

Example Code (executable version of examples in the Readme):
https://github.com/pgroves/ocuality/blob/master/src/ReadmeExample.ml

Feedback and feature suggestions are welcome on the project's github issue
tracker:
https://github.com/pgroves/ocuality/issues

-Peter

--047d7b6d7ab45625e804ccac73a9
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

OCuality is an integrated logging, assertion, and unit testing library.=A0<=
div><br></div><div>This is the first open source release after several year=
s of development as part of the designByRobots project.</div><div><br></div>

<div>The goal of Ocuality is to create a straightforward, yet minimal, way =
of defining certain property&#39;s of an application&#39;s types so that as=
sertions don&#39;t require vast amounts of type-specific boilerplate to pac=
k and unpack data structures to run a compare() function against. Ocuality =
also tries to remove problems that occur when unit testing libraries, built=
-in asserts methods, and logging libraries do not work nicely together (suc=
h as java&#39;s assert() method, junit library, and logging working against=
 each other).</div>

<div><br></div><div>The key feature of Ocuality is the way assertions (via =
a module called Verify) can be called from either application code or as pa=
rt of a unit test (via the TestCase module). When a Verify method fails or =
(optionally) succeeds, an informative log message is generated. When a suit=
e of unit tests are run, the number of Verifications that succeed or fail a=
re summarized, as well as a detailed list of failing tests.</div>

<div><br></div><div>This approach to assertions requires a comparer (&#39;a=
 Comparer.t), which is simply a toString() and compare() method for an abst=
ract type (&#39;a). The Comparer module provides methods for composing high=
er order Comparer.t&#39;s (e.g. create a (&#39;a list Comparer.t) given a (=
&#39;a Comparer.t))) which are extremely powerful in creating simple yet co=
mplete assertions in unit tests.</div>

<div><br></div><div>Project Home and Readme:</div><div><a href=3D"https://g=
ithub.com/pgroves/ocuality" target=3D"_blank">https://github.com/pgroves/oc=
uality</a></div><div><br></div><div>Example Code (executable version of exa=
mples in the Readme):</div>

<div><a href=3D"https://github.com/pgroves/ocuality/blob/master/src/ReadmeE=
xample.ml" target=3D"_blank">https://github.com/pgroves/ocuality/blob/maste=
r/src/ReadmeExample.ml</a></div><div><br></div><div>Feedback and feature su=
ggestions are welcome on the project&#39;s github issue tracker:</div>

<div><a href=3D"https://github.com/pgroves/ocuality/issues" target=3D"_blan=
k">https://github.com/pgroves/ocuality/issues</a></div><div><br></div><div>=
-Peter</div>

--047d7b6d7ab45625e804ccac73a9--
