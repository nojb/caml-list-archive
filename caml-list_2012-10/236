Return-Path: <didier.cassirame@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id AF8797F249
	for <caml-list@sympa.inria.fr>; Tue, 30 Oct 2012 17:14:45 +0100 (CET)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  didier.cassirame@gmail.com) identity=pra;
  client-ip=209.85.219.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="didier.cassirame@gmail.com";
  x-sender="didier.cassirame@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  didier.cassirame@gmail.com designates 209.85.219.54 as
  permitted sender) identity=mailfrom; client-ip=209.85.219.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="didier.cassirame@gmail.com";
  x-sender="didier.cassirame@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oa0-f54.google.com) identity=helo;
  client-ip=209.85.219.54;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="didier.cassirame@gmail.com";
  x-sender="postmaster@mail-oa0-f54.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsQBAAX8j1DRVds2m2dsb2JhbABEhhirBoksAYh1CCMBAQEBAQgJCwkUJ4IeAQEBAwESAg8dARsSCwEDAQsGBQsaGgMCAiIBEQEFAQoBEQYTEhCHUQEDCQYLnWNiCQOLYU+BbIEKhQgKGScDClmIdQEFDItrhUqBEwOVdYEajUcWKYJQgUI
X-IronPort-AV: E=Sophos;i="4.80,680,1344204000"; 
   d="scan'208";a="179567431"
Received: from mail-oa0-f54.google.com ([209.85.219.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 30 Oct 2012 17:14:44 +0100
Received: by mail-oa0-f54.google.com with SMTP id n9so747427oag.27
        for <multiple recipients>; Tue, 30 Oct 2012 09:14:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=CQK3zSlLbhmOqxSDmZ9xRRElpUaYki5aV/2htUGraU8=;
        b=bS3uXHuaJkBfETi5RYZANicmhBKZwAgENJvZ8MZcVYJEcrHtTkpejsCdfRivPTrzIL
         rf1m08j/Y9Tyr6T387kz/0R3T2jjbMoQDoArzAUGhkfobCRh0o3kKbN1G4KQ8XAAi2fp
         ry8TFR1QlYEMKe909Qw0hGJV/xLVTuySWNkDl9bs5PoRDvG8ekzplnVbAjVSS9DNSgEV
         yzD8dxxBqVR+2TLXYRNNEMiwZOuaz44w5SSzBoNBk7wKAQtKisE60u4iYsbxpt7oYDxi
         kWVaAgezJqavKBKKNL19DXR4m4s1Bw9W6PC5YCsLaOzZyOj+7e1Nez0AtTL9NV9KqWt0
         ArNw==
Received: by 10.60.7.225 with SMTP id m1mr29968825oea.122.1351613683319; Tue,
 30 Oct 2012 09:14:43 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.60.137.198 with HTTP; Tue, 30 Oct 2012 09:14:23 -0700 (PDT)
In-Reply-To: <508FF8B2.8080209@inria.fr>
References: <508F22BD.7010103@riken.jp> <CA+Lkvyr=e9iXpcUhwPv+G90sq4zqTAKxJPNOAi-N284LYkNtyQ@mail.gmail.com>
 <508FF8B2.8080209@inria.fr>
From: Didier Cassirame <didier.cassirame@gmail.com>
Date: Tue, 30 Oct 2012 17:14:23 +0100
Message-ID: <CA+LkvyrwxX6Ci=FZpZdEOxurNr8ZE37i04u3pFyU31c_BGjw=g@mail.gmail.com>
To: Romain Bardou <romain.bardou@inria.fr>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=e89a8fb1ef4077c3e004cd49151f
Subject: Re: [Caml-list] Why should I use .mli files?


--e89a8fb1ef4077c3e004cd49151f
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Indeed, I didn't know the "module type of" construct!

didier

2012/10/30 Romain Bardou <romain.bardou@inria.fr>

> Maybe you can just write "include module type of X" where X is the module
> which already has the .mli. Or you define the signature as a module type
> Sig in a separate file "x.ml" and write "include X.Sig".
>
> Cheers,
>
> --
> Romain Bardou
>
> Le 30/10/2012 16:52, Didier Cassirame a =C3=A9crit :
>
>>
>> Thinking about it, there's at least one case where mli files are not so
>> useful: When you have several modules which must all comply with a
>> certain module type. In that case, all the mli files would be identical,
>> and a modification of the module type would necessitate to change all
>> the .mli.
>> What would be the best way to handle that situation?
>> I was thinking of making an inner module, coerce it to the desired type,
>> and open it afterwards, but the resulting module would still have a ref
>> to the inner module in its type.
>>
>> E.g.:
>>
>> in the file mymodule.ml <http://mymodule.ml>
>>
>>
>> -----------------------8<-----**--------------
>>
>> module Inner =3D (
>> struct
>>
>>    (* implementation *)
>>
>> end : Sig)
>>
>> open Inner
>>
>> -----------------------8<-----**--------------
>>
>> and the file sig.mli would be the required module type.
>>
>> didier
>>
>> 2012/10/30 Francois Berenger <berenger@riken.jp <mailto:berenger@riken.jp
>> >>
>>
>>
>>     Hello,
>>
>>     Here is my stupid question of the day:
>>     what's the use of those .mli files?
>>
>>     Is it just to separate interface from implementation
>>     so that the implementation of a module can be changed
>>     without clients of its interface to have to bother?
>>
>>     Does it make compilation of large software faster
>>     by allowing for more parallelization and maybe later on avoiding to
>>     recompile some parts?
>>
>>     Usually I program in a pure functional style, so my modules
>>     don't carry an internal state.
>>     I feel like "if someone want to re-use a function, so be it".
>>     If I really want to hide a function that I am afraid people
>>     may call in an incorrect manner, I declare it internally
>>     to some public function and use it correctly.
>>
>>     Also, maybe I only work on toy-size OCaml projects. So, I never
>>     bothrered to create any .mli file.
>>     I would like to know if I should bother about them.
>>
>>     Thanks a lot,
>>     Francois.
>>
>>     --
>>     Caml-list mailing list.  Subscription management and archives:
>>     https://sympa.inria.fr/sympa/_**_arc/caml-list<https://sympa.inria.f=
r/sympa/__arc/caml-list>
>>     <https://sympa.inria.fr/sympa/**arc/caml-list<https://sympa.inria.fr=
/sympa/arc/caml-list>
>> >
>>     Beginner's list: http://groups.yahoo.com/group/**__ocaml_beginners<h=
ttp://groups.yahoo.com/group/__ocaml_beginners>
>>     <http://groups.yahoo.com/**group/ocaml_beginners<http://groups.yahoo=
.com/group/ocaml_beginners>
>> >
>>     Bug reports: http://caml.inria.fr/bin/caml-**__bugs<http://caml.inri=
a.fr/bin/caml-__bugs>
>>     <http://caml.inria.fr/bin/**caml-bugs<http://caml.inria.fr/bin/caml-=
bugs>
>> >
>>
>>
>>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/**arc/caml-list<https://sympa.inria.fr/sympa=
/arc/caml-list>
> Beginner's list: http://groups.yahoo.com/group/**ocaml_beginners<http://g=
roups.yahoo.com/group/ocaml_beginners>
> Bug reports: http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bi=
n/caml-bugs>
>

--e89a8fb1ef4077c3e004cd49151f
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Indeed, I didn&#39;t know the &quot;module type of&quot; construct! <br><br=
>didier<br><br><div class=3D"gmail_quote">2012/10/30 Romain Bardou <span di=
r=3D"ltr">&lt;<a href=3D"mailto:romain.bardou@inria.fr" target=3D"_blank">r=
omain.bardou@inria.fr</a>&gt;</span><br>


<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Maybe you can just write &quot;include modul=
e type of X&quot; where X is the module which already has the .mli. Or you =
define the signature as a module type Sig in a separate file &quot;<a href=
=3D"http://x.ml" target=3D"_blank">x.ml</a>&quot; and write &quot;include X=
.Sig&quot;.<br>



<br>
Cheers,<br>
<br>
-- <br>
Romain Bardou<br>
<br>
Le 30/10/2012 16:52, Didier Cassirame a =C3=A9crit :<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div>
<br>
Thinking about it, there&#39;s at least one case where mli files are not so=
<br>
useful: When you have several modules which must all comply with a<br>
certain module type. In that case, all the mli files would be identical,<br>
and a modification of the module type would necessitate to change all<br>
the .mli.<br>
What would be the best way to handle that situation?<br>
I was thinking of making an inner module, coerce it to the desired type,<br>
and open it afterwards, but the resulting module would still have a ref<br>
to the inner module in its type.<br>
<br>
E.g.:<br>
<br></div>
in the file <a href=3D"http://mymodule.ml" target=3D"_blank">mymodule.ml</a=
> &lt;<a href=3D"http://mymodule.ml" target=3D"_blank">http://mymodule.ml</=
a>&gt;<div><br>
<br>
-----------------------8&lt;-----<u></u>--------------<br>
<br>
module Inner =3D (<br>
struct<br>
<br>
=C2=A0 =C2=A0(* implementation *)<br>
<br>
end : Sig)<br>
<br>
open Inner<br>
<br>
-----------------------8&lt;-----<u></u>--------------<br>
<br>
and the file sig.mli would be the required module type.<br>
<br>
didier<br>
<br></div>
2012/10/30 Francois Berenger &lt;<a href=3D"mailto:berenger@riken.jp" targe=
t=3D"_blank">berenger@riken.jp</a> &lt;mailto:<a href=3D"mailto:berenger@ri=
ken.jp" target=3D"_blank">berenger@riken.jp</a>&gt;&gt;<div><br>
<br>
=C2=A0 =C2=A0 Hello,<br>
<br>
=C2=A0 =C2=A0 Here is my stupid question of the day:<br>
=C2=A0 =C2=A0 what&#39;s the use of those .mli files?<br>
<br>
=C2=A0 =C2=A0 Is it just to separate interface from implementation<br>
=C2=A0 =C2=A0 so that the implementation of a module can be changed<br>
=C2=A0 =C2=A0 without clients of its interface to have to bother?<br>
<br>
=C2=A0 =C2=A0 Does it make compilation of large software faster<br>
=C2=A0 =C2=A0 by allowing for more parallelization and maybe later on avoid=
ing to<br>
=C2=A0 =C2=A0 recompile some parts?<br>
<br>
=C2=A0 =C2=A0 Usually I program in a pure functional style, so my modules<b=
r>
=C2=A0 =C2=A0 don&#39;t carry an internal state.<br>
=C2=A0 =C2=A0 I feel like &quot;if someone want to re-use a function, so be=
 it&quot;.<br>
=C2=A0 =C2=A0 If I really want to hide a function that I am afraid people<b=
r>
=C2=A0 =C2=A0 may call in an incorrect manner, I declare it internally<br>
=C2=A0 =C2=A0 to some public function and use it correctly.<br>
<br>
=C2=A0 =C2=A0 Also, maybe I only work on toy-size OCaml projects. So, I nev=
er<br>
=C2=A0 =C2=A0 bothrered to create any .mli file.<br>
=C2=A0 =C2=A0 I would like to know if I should bother about them.<br>
<br>
=C2=A0 =C2=A0 Thanks a lot,<br>
=C2=A0 =C2=A0 Francois.<br>
<br>
=C2=A0 =C2=A0 --<br>
=C2=A0 =C2=A0 Caml-list mailing list. =C2=A0Subscription management and arc=
hives:<br></div>
=C2=A0 =C2=A0 <a href=3D"https://sympa.inria.fr/sympa/__arc/caml-list" targ=
et=3D"_blank">https://sympa.inria.fr/sympa/_<u></u>_arc/caml-list</a><br>
=C2=A0 =C2=A0 &lt;<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" ta=
rget=3D"_blank">https://sympa.inria.fr/sympa/<u></u>arc/caml-list</a>&gt;<b=
r>
=C2=A0 =C2=A0 Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group=
/__ocaml_beginners" target=3D"_blank">http://groups.yahoo.com/group/<u></u>=
__ocaml_beginners</a><br>
=C2=A0 =C2=A0 &lt;<a href=3D"http://groups.yahoo.com/group/ocaml_beginners"=
 target=3D"_blank">http://groups.yahoo.com/<u></u>group/ocaml_beginners</a>=
&gt;<br>
=C2=A0 =C2=A0 Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-__bugs"=
 target=3D"_blank">http://caml.inria.fr/bin/caml-<u></u>__bugs</a><br>
=C2=A0 =C2=A0 &lt;<a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/<u></u>caml-bugs</a>&gt;<br>
<br>
<br>
</blockquote><div><div>
<br>
<br>
-- <br>
Caml-list mailing list. =C2=A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/<u></u>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
</div></div></blockquote></div><br>

--e89a8fb1ef4077c3e004cd49151f--
