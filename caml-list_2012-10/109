Return-Path: <bobzhang1988@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id 3F3517EC41
	for <caml-list@sympa.inria.fr>; Sun, 21 Oct 2012 03:59:12 +0200 (CEST)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  bobzhang1988@gmail.com) identity=pra;
  client-ip=209.85.210.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="bobzhang1988@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail1-smtp-roc.national.inria.fr: domain of
  bobzhang1988@gmail.com designates 209.85.210.182 as permitted
  sender) identity=mailfrom; client-ip=209.85.210.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="bobzhang1988@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ia0-f182.google.com) identity=helo;
  client-ip=209.85.210.182;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="bobzhang1988@gmail.com";
  x-sender="postmaster@mail-ia0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhQCADlWg1DRVdK2m2dsb2JhbABEDoYGunMIIwEBAQEBCAkLCRQngjkCDx0BGx0BAxIDBgc3AiQBEQEFASI1h08BAw8LnHoJA4tZT4J2hAgKGScNWYh1AQUMkTCBEgOVcY5YFimDVFk
X-IronPort-AV: E=Sophos;i="4.80,622,1344204000"; 
   d="scan'208,217";a="178164832"
Received: from mail-ia0-f182.google.com ([209.85.210.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 21 Oct 2012 03:59:11 +0200
Received: by mail-ia0-f182.google.com with SMTP id k10so2199661iag.27
        for <caml-list@inria.fr>; Sat, 20 Oct 2012 18:59:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:cc:content-type;
        bh=5CvB2DP3FM5ddq6zJMn2n8Zk7CXNPhcFMvSe0M2To5o=;
        b=S9ivXoKu3pQfbyvHK6nHyACg3xnjWKindtsqJgSitorLFZtBMaVh6Qt3t87qceKbOv
         dvQnB33y7K6YYI7xGfHB62IwzneFbWtEqkw3BqIIHuyEihqwfnKXOpQilMB12CPEdNzA
         1MiLOSyR4LDyp6BHT3qkl89kS7NfKWhHvtUoFud5GOYb0ufSi7Qn2KGcAFno9IGuLo49
         d9UTDA0swytjh9Cz2JjXIPUyGZDj2fHKepRTpQ+mLT5AGcsAJl7yzqTyQqlgZ0ZrCM/R
         Siy8cHc6Ninl1TpM7eqgOlPyuW4bWMzc9f8IPwafU67l9ENzk8OrQxsHalDZq6E0ex0Q
         uWwA==
MIME-Version: 1.0
Received: by 10.42.52.5 with SMTP id h5mr4665334icg.50.1350784750174; Sat, 20
 Oct 2012 18:59:10 -0700 (PDT)
Received: by 10.64.17.4 with HTTP; Sat, 20 Oct 2012 18:59:10 -0700 (PDT)
Date: Sat, 20 Oct 2012 21:59:10 -0400
Message-ID: <CANcqPu7yAw6My8htudU11Xc+T7z==+rfVfYrSmQuBfJfHnGeoQ@mail.gmail.com>
From: bob zhang <bobzhang1988@gmail.com>
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: Caml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=485b397dd1c933c1df04cc881534
Subject: [Caml-list] A problem about polymorphism variant


--485b397dd1c933c1df04cc881534
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Dear Jacques:
    I was reading the manual of chap4, it says
*tag-spec-full*::=3D`*tag-name<http://www.askra.de/software/ocaml-doc/4.00/=
manual011.html#tag-name>
*  [ of *typexpr<http://www.askra.de/software/ocaml-doc/4.00/types.html#typ=
expr>
* ]  { & *typexpr<http://www.askra.de/software/ocaml-doc/4.00/types.html#ty=
pexpr>
* }   =E2=88=A3 *typexpr<http://www.askra.de/software/ocaml-doc/4.00/types.=
html#typexpr>
*

    I don't follow the (&) operation here, it means intersection types ?

    I managed to make a working example:


          type 'a ab =3D [< `a|`b] as 'a ;;
          type 'a ac =3D 'a constraint 'a =3D [< `a | `c ]
          type ('a,'b) m =3D [< `m of 'a ab & 'a ac ] as 'b;;
          let u : ('a,'b) m =3D `m `a;;
          (* val u : ([ `a ], [ `m of [ `a ] ab ]) m =3D `m `a *)

   But still don't understand its use case, can you explain a bit about
this?

Many thanks
--=20
Regards
-- Bob

--485b397dd1c933c1df04cc881534
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<br clear=3D"all"><div>Dear Jacques:</div><div>=C2=A0 =C2=A0 I was reading =
the manual of chap4, it says</div><div><table class=3D"display dcenter" sty=
le=3D"width:auto;border:none;margin:0ex auto;font-family:Times"><tbody><tr =
valign=3D"middle">
<td class=3D"dcell" style=3D"white-space:nowrap;padding:0px;width:auto;bord=
er:none"><table cellspacing=3D"6" cellpadding=3D"0"><tbody><tr><td align=3D=
"right" nowrap><i><a name=3D"tag-spec-full" class=3D"syntax"><font color=3D=
"maroon">tag-spec-full</font></a></i></td>
<td align=3D"center" nowrap>::=3D</td><td align=3D"left" nowrap><font color=
=3D"blue"><tt>`</tt></font><i><a href=3D"http://www.askra.de/software/ocaml=
-doc/4.00/manual011.html#tag-name" class=3D"syntax" style=3D"color:maroon">=
<font color=3D"maroon">tag-name</font></a></i>=C2=A0=C2=A0[=C2=A0<font colo=
r=3D"blue"><tt>of</tt></font>=C2=A0<i><a href=3D"http://www.askra.de/softwa=
re/ocaml-doc/4.00/types.html#typexpr" class=3D"syntax" style=3D"color:maroo=
n"><font color=3D"maroon">typexpr</font></a></i>=C2=A0]=C2=A0=C2=A0{=C2=A0<=
font color=3D"blue"><tt>&amp;</tt></font>=C2=A0<i><a href=3D"http://www.ask=
ra.de/software/ocaml-doc/4.00/types.html#typexpr" class=3D"syntax" style=3D=
"color:maroon"><font color=3D"maroon">typexpr</font></a></i>=C2=A0} =C2=A0<=
/td>
</tr><tr><td align=3D"right" nowrap>=C2=A0</td><td align=3D"center" nowrap>=
=E2=88=A3</td><td align=3D"left" nowrap>=C2=A0<i><a href=3D"http://www.askr=
a.de/software/ocaml-doc/4.00/types.html#typexpr" class=3D"syntax" style=3D"=
color:maroon"><font color=3D"maroon">typexpr</font></a></i>=C2=A0<br>
<br></td></tr></tbody></table></td></tr></tbody></table></div><div>=C2=A0 =
=C2=A0 I don&#39;t follow the (&amp;) operation here, it means intersection=
 types ?</div><div><br></div><div>=C2=A0 =C2=A0 I managed to make a working=
 example:</div><div>
<br></div><div><br></div><div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 type =
&#39;a ab =3D [&lt; `a|`b] as &#39;a ;;</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 type &#39;a ac =3D &#39;a constraint &#39;a =3D [&lt; `a | `c ]<=
/div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 type (&#39;a,&#39;b) m =3D [&l=
t; `m of &#39;a ab &amp; &#39;a ac ] as &#39;b;;</div>
<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 let u : (&#39;a,&#39;b) m =3D `m `a=
;;</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (* val u : ([ `a ], [ `m of=
 [ `a ] ab ]) m =3D `m `a *)</div></div><div><br></div><div>=C2=A0 =C2=A0Bu=
t still don&#39;t understand its use case, can you explain a bit about this=
?</div>
<div><br></div><div>Many thanks</div>-- <br><div>Regards</div>-- Bob<br>

--485b397dd1c933c1df04cc881534--
