Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by sympa.inria.fr (Postfix) with ESMTPS id F30067EDE3
	for <caml-list@sympa.inria.fr>; Fri, 12 Oct 2012 07:42:50 +0200 (CEST)
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=pra;
  client-ip=133.6.130.5;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  garrigue@math.nagoya-u.ac.jp) identity=mailfrom;
  client-ip=133.6.130.5;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="garrigue@math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
Received-SPF: None (mail1-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mailhost.math.nagoya-u.ac.jp) identity=helo;
  client-ip=133.6.130.5;
  receiver=mail1-smtp-roc.national.inria.fr;
  envelope-from="garrigue@math.nagoya-u.ac.jp";
  x-sender="postmaster@mailhost.math.nagoya-u.ac.jp";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap0EAFWtd1CFBoIF/2dsb2JhbABEwGKCIAEBBAEnHAE1AgMLCzQSVwYTh34FpgOEOQGGI4kBB5EtYIhZjReQMIJ8
X-IronPort-AV: E=Sophos;i="4.80,576,1344204000"; 
   d="scan'208";a="176909457"
Received: from rabbit.math.nagoya-u.ac.jp (HELO mailhost.math.nagoya-u.ac.jp) ([133.6.130.5])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 12 Oct 2012 07:42:48 +0200
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id 8A5726360;
	Fri, 12 Oct 2012 14:42:45 +0900 (JST)
Received: from mailhost.math.nagoya-u.ac.jp (localhost [127.0.0.1])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTP id 4DCE139A3;
	Fri, 12 Oct 2012 14:42:45 +0900 (JST)
DomainKey-Signature: h=Received:Subject:Mime-Version:Content-Type:From:In-Reply-To:Date:Cc:Content-Transfer-Encoding:Message-Id:References:To:X-Mailer; b=; c=nofws; d=math.nagoya-u.ac.jp; q=; s=alpha
Received: from tet.garrigue.jp (58x158x128x157.ap58.ftth.ucom.ne.jp [58.158.128.157])
	by mailhost.math.nagoya-u.ac.jp (Postfix) with ESMTPSA id 3177439A2;
	Fri, 12 Oct 2012 14:42:45 +0900 (JST)
Mime-Version: 1.0 (Mac OS X Mail 6.2 \(1499\))
Content-Type: text/plain; charset=iso-8859-1
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <800E1F0B-8658-49A2-BA12-88F760F5E083@in.tum.de>
Date: Fri, 12 Oct 2012 14:42:44 +0900
Cc: OCaml mailing list <caml-list@inria.fr>
Content-Transfer-Encoding: quoted-printable
Message-Id: <5C30A81A-0466-4EE5-9502-EA6D16C4DA3E@math.nagoya-u.ac.jp>
References: <800E1F0B-8658-49A2-BA12-88F760F5E083@in.tum.de>
To: Markus Weissmann <markus.weissmann@in.tum.de>
X-Mailer: Apple Mail (2.1499)
Subject: Re: [Caml-list] Exhaustiveness, currying with GADTs

On 2012/10/12, at 2:30, Markus Weissmann <markus.weissmann@in.tum.de> wrote:

> Hello,
>=20
> while playing around with GADTs, I came across two issues I don't underst=
and: The exhaustiveness check and currying functions.
> 1.) I get a warning about my match (in function "componentwise") not bein=
g exhaustive, while imho it obviously is:
>=20
> --------8<----------
>  type d2
>  type d3
>=20
>  type _ t =3D
>    | Vector2 : (float * float) -> d2 t
>    | Vector3 : (float * float * float) -> d3 t
>=20
>  let componentwise : type d . (float -> float -> float) -> d t -> d t -> =
d t =3D fun f v1 v2 ->
>    match (v1, v2) with
>    | (Vector2 (x1, y1), Vector2 (x2, y2)) -> Vector2 (f x1 x2, f y1  y1)
>    | (Vector3 (x1, y1, z1), Vector3 (x2, y2, z2)) -> Vector3 (f x1 x2, f =
y1 y1, f z1 z2)
> -------->8----------

If you put all your code in the same module, as you have just done here,
you don't get such a warning.
What you have probably done is defining the types in a module,
and then defined componentwise in another module.
What happens then is that the type system cannot guarantee anymore
that d2 and d3 are distinct: they are just abstract types that could
be aliases to each other.

Simple workaround: just write

type d2 =3D D2
type d3 =3D D3

Then d2 and d3 are no longer abstract, and they are clearly different.

> 2.) When I use "componentwise" for other functions, I cannot do this:
>=20
>  let add =3D componentwise (+.)
>=20
> ("contains type variables that cannot be generalized")
> Fair enough. But I also cannot do this:
>=20
>  let add : type d . d t -> d t -> d t =3D componentwise (+.)=20
>=20
> ("This definition has type 'd t -> 'd t -> 'd t which is less general tha=
n 'd0. 'd0 t -> 'd0 t -> 'd0 t")
> Only the "full" version works:
>=20
>  let add : type d . d t -> d t -> d t =3D fun v1 v2 -> componentwise (+.)=
 v1 v2

As Jacques pointed out, this is just the value restriction at work.
The well known workaround is to eta-expand:

let add x =3D componentwise (+.) x


Jacques Garrigue=
