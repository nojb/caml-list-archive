Return-Path: <markus.weissmann@in.tum.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 8E1E37EDE4
	for <caml-list@sympa.inria.fr>; Thu, 11 Oct 2012 21:23:40 +0200 (CEST)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  markus.weissmann@in.tum.de) identity=pra;
  client-ip=131.159.0.8;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="markus.weissmann@in.tum.de";
  x-sender="markus.weissmann@in.tum.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  markus.weissmann@in.tum.de) identity=mailfrom;
  client-ip=131.159.0.8;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="markus.weissmann@in.tum.de";
  x-sender="markus.weissmann@in.tum.de";
  x-conformance=sidf_compatible
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-out1.informatik.tu-muenchen.de)
  identity=helo; client-ip=131.159.0.8;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="markus.weissmann@in.tum.de";
  x-sender="postmaster@mail-out1.informatik.tu-muenchen.de";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ak8CAAocd1CDnwAIkWdsb2JhbABErVGSBCMBAQEBFBIUJ4IgAQEEASdHCwULCxgNIUUSBhMSh2ADCQYEB7AoA4lei0eFQGADlwKETY09
X-IronPort-AV: E=Sophos;i="4.80,573,1344204000"; 
   d="scan'208";a="158749954"
Received: from mail-out1.informatik.tu-muenchen.de ([131.159.0.8])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 11 Oct 2012 21:23:39 +0200
Received: from [172.16.1.4] (178-27-32-88-dynip.superkabel.de [178.27.32.88])
	(using TLSv1 with cipher AES128-SHA (128/128 bits))
	(No client certificate requested)
	by mail.in.tum.de (Postfix) with ESMTPSA id 6F46724040C;
	Thu, 11 Oct 2012 21:23:38 +0200 (CEST)
Mime-Version: 1.0 (Apple Message framework v1283)
Content-Type: text/plain; charset=iso-8859-1
From: =?iso-8859-1?Q?=22Markus_W=2E_Wei=DFmann=22?= <markus.weissmann@in.tum.de>
In-Reply-To: <CAK0y-37vdU_FPBCPdPV_hF1+LE7QCoW2DQLARsfkOYr_3-rjyA@mail.gmail.com>
Date: Thu, 11 Oct 2012 21:23:37 +0200
Cc: OCaml mailing list <caml-list@inria.fr>
Content-Transfer-Encoding: quoted-printable
Message-Id: <EDC61743-081D-4235-801E-A4A5A0727323@in.tum.de>
References: <800E1F0B-8658-49A2-BA12-88F760F5E083@in.tum.de> <CAK0y-37vdU_FPBCPdPV_hF1+LE7QCoW2DQLARsfkOYr_3-rjyA@mail.gmail.com>
To: Jacques Le Normand <rathereasy@gmail.com>
X-Mailer: Apple Mail (2.1283)
Subject: Re: [Caml-list] Exhaustiveness, currying with GADTs

On 11 Oct 2012, at 21:04, Jacques Le Normand wrote:

> 2) seems to be the value restriction. basically, only constructors,
> composition of constructors and lambdas can generalize.
>=20
> What warning are you getting for 1) ?
>=20

File "min.ml", line 12, characters 4-187:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Vector3 (_, _, _), Vector2 _)


> On Thu, Oct 11, 2012 at 10:30 AM, Markus Weissmann
> <markus.weissmann@in.tum.de> wrote:
>> Hello,
>>=20
>> while playing around with GADTs, I came across two issues I don't unders=
tand: The exhaustiveness check and currying functions.
>> 1.) I get a warning about my match (in function "componentwise") not bei=
ng exhaustive, while imho it obviously is:
>>=20
>> --------8<----------
>>  type d2
>>  type d3
>>=20
>>  type _ t =3D
>>    | Vector2 : (float * float) -> d2 t
>>    | Vector3 : (float * float * float) -> d3 t
>>=20
>>  let componentwise : type d . (float -> float -> float) -> d t -> d t ->=
 d t =3D fun f v1 v2 ->
>>    match (v1, v2) with
>>    | (Vector2 (x1, y1), Vector2 (x2, y2)) -> Vector2 (f x1 x2, f y1  y1)
>>    | (Vector3 (x1, y1, z1), Vector3 (x2, y2, z2)) -> Vector3 (f x1 x2, f=
 y1 y1, f z1 z2)
>> -------->8----------
>>=20
>> 2.) When I use "componentwise" for other functions, I cannot do this:
>>=20
>>  let add =3D componentwise (+.)
>>=20
>> ("contains type variables that cannot be generalized")
>> Fair enough. But I also cannot do this:
>>=20
>>  let add : type d . d t -> d t -> d t =3D componentwise (+.)
>>=20
>> ("This definition has type 'd t -> 'd t -> 'd t which is less general th=
an 'd0. 'd0 t -> 'd0 t -> 'd0 t")
>> Only the "full" version works:
>>=20
>>  let add : type d . d t -> d t -> d t =3D fun v1 v2 -> componentwise (+.=
) v1 v2
>>=20
>>=20
>> I would be very happy if someone could shed some light especially on 1.).
>>=20
>>=20
>> Thanks & regards
>> -Markus
>>=20
>> --
>> Markus Wei=DFmann, M.Sc.
>> Technische Universit=E4t M=FCnchen
>> Institut f=FCr Informatik
>> Boltzmannstr. 3
>> D-85748 Garching
>> Germany
>> http://wwwknoll.in.tum.de/
>>=20
>>=20
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs

--=20
Markus Wei=DFmann, M.Sc.
Technische Universit=E4t M=FCnchen
Institut f=FCr Informatik
Boltzmannstr. 3
D-85748 Garching
Germany
Tel. +49 (89) 2 89-1 81 05
Mobil +49 151 58402057 (AUDI)
Fax +49 (89) 2 89-1 81 07
http://wwwknoll.in.tum.de/

