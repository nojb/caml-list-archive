Return-Path: <anthony.tavener@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id D9AD07F249
	for <caml-list@sympa.inria.fr>; Tue, 30 Oct 2012 04:26:12 +0100 (CET)
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  anthony.tavener@gmail.com) identity=pra;
  client-ip=209.85.210.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail4-smtp-sop.national.inria.fr: domain of
  anthony.tavener@gmail.com designates 209.85.210.182 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.210.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail4-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ia0-f182.google.com) identity=helo;
  client-ip=209.85.210.182;
  receiver=mail4-smtp-sop.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="postmaster@mail-ia0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnABAItHj1DRVdK2mGdsb2JhbAA6CrEfiSoBiG4IIwEBAQEBBgsNBxQngh4BAQEDARICLAEbEgsBAwELBgULDQ0hIgERAQUBChIGExIQh1EBAwkGC5xkYgkDjDCCdoRpChknAwpZiHUBBQyLaRCGTQOIWYlpgzKBGo1HFimCUIFg
X-IronPort-AV: E=Sophos;i="4.80,676,1344204000"; 
   d="scan'208";a="160829514"
Received: from mail-ia0-f182.google.com ([209.85.210.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 30 Oct 2012 04:26:11 +0100
Received: by mail-ia0-f182.google.com with SMTP id k10so7859950iag.27
        for <caml-list@inria.fr>; Mon, 29 Oct 2012 20:26:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=Jlf5VIxkSCmkRAbWVg9baeDqIC+2aFXGy8yivknuAtg=;
        b=HyIH2hrChGaNP/xRxayn5ZzvbXWruUGmgcfFBXj698FtQxrLkaPWHqYlQ2DG0limjS
         2l071p1UOo8rIS07e6G+8BQUr5Ksu6kEuuGlBqYPmEKCSPsLAfjpfJJiJp3IuD6/d56e
         t7SqMPrU4ViIV36px4V+8rb8b8AdfqBD7jBMoLxCCYIXgym3bkegLmLTDWlLlzlW1N0+
         /8OuiOFPurDuJIhHyZIR13ejLTb6XtlZpSzBtlIvks4fE6XAnctFcsnODR6Bsut+OauL
         qc0CgRY4KjznDxSMJ4dMXoSJ7IxQG0f+tJKx6UDcXWolCNOkcu5180hL86jPN8Whdwp3
         vwiw==
MIME-Version: 1.0
Received: by 10.50.196.193 with SMTP id io1mr215939igc.59.1351567570246; Mon,
 29 Oct 2012 20:26:10 -0700 (PDT)
Received: by 10.42.196.71 with HTTP; Mon, 29 Oct 2012 20:26:09 -0700 (PDT)
In-Reply-To: <508F3D3D.3070600@riken.jp>
References: <508F22BD.7010103@riken.jp>
	<F0636EA0C1564CDC9F5195243D7D5ADE@erratique.ch>
	<508F3D3D.3070600@riken.jp>
Date: Mon, 29 Oct 2012 21:26:09 -0600
Message-ID: <CAN=ouMTMQ8tO1mXP=4-BU4bz49HH82w5hD9xBLaSeJXJL7Bq6w@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Francois Berenger <berenger@riken.jp>
Cc: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@erratique.ch>, 
	caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=14dae93411f5ea1c8d04cd3e5811
Subject: Re: [Caml-list] Why should I use .mli files?


--14dae93411f5ea1c8d04cd3e5811
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Francois,

To add a different perspective, I usually start without mli files. I do
this for one of the reasons you give: leaving most typing up to inferencing.

But parts of my code move into the realm of libraries which are reused, and
here I'll make the mli files concrete. This aids in pinning down type
errors where they really are, forms a kind of documentation, and provides a
nice abstract view of a module suitable for functors.

When you pin down some types, it gives the type system more info to help
you, the programmer. So if you have a module which is fairly concrete and
not likely to change -- specifying the exact signature in an mli can
identify erroneous usage of this module, rather than throwing a more
obscure type error because the inference can't know if the problem is in
the module you're using or the way it's used.

If you are writing small programs and not much reused library-like code,
then you really might not benefit from explicit mli files. They can be a
minor pain, since you have to update them with additions or changes of the
corresponding ml.

Overall, mli's have their place, but I'm glad OCaml has implicit mli
files... so that in cases where they aren't needed, you can ignore them!

-Tony


On Mon, Oct 29, 2012 at 8:36 PM, Francois Berenger <berenger@riken.jp>wrote:

> On 10/30/2012 10:19 AM, Daniel B=FCnzli wrote:
>
>> Le mardi, 30 octobre 2012 =E0 01:43, Francois Berenger a =E9crit :
>>
>>> Also, maybe I only work on toy-size OCaml projects. So, I never
>>> bothrered to create any .mli file.
>>> I would like to know if I should bother about them.
>>>
>>
>> For me, a program that lacks mli files means lack of design, abstraction
>> and documentation and hence equates with rubbish.
>>
>
> Thanks for the compliment.
>
> To my defence, my main programming goal because of my employer
> and colleagues is to deliver fast and correct (software) in order to
> investigate research ideas.
> We don't deliver libraries or things targeting at a wide developer
> audience (we don't do research in computer science, also).
>
>
>  For example at a certain point you (or others) will read your code.
>>
>
> I don't have any problem reading my code.
> It reads like an English text usually.
>
>
> >At that moment simple things like being able to distinguish between
> functions/types that are local to a module and those that are used by oth=
er
> part of the program is immensely useful.
>
> Well, if I want to know this, I change the function parameters
> and let the compiler tell me where it was used with the initial parameter=
s.
> I also quite know my swiss knives (egrep and co).
>
>
> > And that's only one of the purpose of mli files.
>
>>
>> In fact mli files are the first thing I write when I design programs.
>>
>
> OK, so you too are a top-down design practitioner
> and use .mli files to this end.
>
> Thanks,
> F.
>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/**arc/caml-list<https://sympa.inria.fr/sympa=
/arc/caml-list>
> Beginner's list: http://groups.yahoo.com/group/**ocaml_beginners<http://g=
roups.yahoo.com/group/ocaml_beginners>
> Bug reports: http://caml.inria.fr/bin/caml-**bugs<http://caml.inria.fr/bi=
n/caml-bugs>
>

--14dae93411f5ea1c8d04cd3e5811
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Francois,<div><br></div><div>To add a different perspective, I usually s=
tart without mli files. I do this for one of the reasons you give: leaving =
most typing up to inferencing.</div><div><br></div><div>But parts of my cod=
e move into the realm of libraries which are reused, and here I&#39;ll make=
 the mli files concrete. This aids in pinning down type errors where they r=
eally are, forms a kind of documentation, and provides a nice abstract view=
 of a module suitable for functors.</div>
<div><br></div><div>When you pin down some types, it gives the type system =
more info to help you, the programmer. So if you have a module which is fai=
rly concrete and not likely to change -- specifying the exact signature in =
an mli can identify erroneous usage of this module, rather than throwing a =
more obscure type error because the inference can&#39;t know if the problem=
 is in the module you&#39;re using or the way it&#39;s used.</div>
<div><br></div><div>If you are writing small programs and not much reused l=
ibrary-like code, then you really might not benefit from explicit mli files=
. They can be a minor pain, since you have to update them with additions or=
 changes of the corresponding ml.</div>
<div><br></div><div>Overall, mli&#39;s have their place, but I&#39;m glad O=
Caml has implicit mli files... so that in cases where they aren&#39;t neede=
d, you can ignore them!</div><div><br></div><div>-Tony</div><div><br></div>
<div><br><div class=3D"gmail_quote">On Mon, Oct 29, 2012 at 8:36 PM, Franco=
is Berenger <span dir=3D"ltr">&lt;<a href=3D"mailto:berenger@riken.jp" targ=
et=3D"_blank">berenger@riken.jp</a>&gt;</span> wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex">
<div class=3D"im">On 10/30/2012 10:19 AM, Daniel B=FCnzli wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Le mardi, 30 octobre 2012 =E0 01:43, Francois Berenger a =E9crit :<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Also, maybe I only work on toy-size OCaml projects. So, I never<br>
bothrered to create any .mli file.<br>
I would like to know if I should bother about them.<br>
</blockquote>
<br>
For me, a program that lacks mli files means lack of design, abstraction an=
d documentation and hence equates with rubbish.<br>
</blockquote>
<br></div>
Thanks for the compliment.<br>
<br>
To my defence, my main programming goal because of my employer<br>
and colleagues is to deliver fast and correct (software) in order to invest=
igate research ideas.<br>
We don&#39;t deliver libraries or things targeting at a wide developer<br>
audience (we don&#39;t do research in computer science, also).<div class=3D=
"im"><br>
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
For example at a certain point you (or others) will read your code.<br>
</blockquote>
<br></div>
I don&#39;t have any problem reading my code.<br>
It reads like an English text usually.<div class=3D"im"><br>
<br>
&gt;At that moment simple things like being able to distinguish between fun=
ctions/types that are local to a module and those that are used by other pa=
rt of the program is immensely useful.<br>
<br></div>
Well, if I want to know this, I change the function parameters<br>
and let the compiler tell me where it was used with the initial parameters.=
<br>
I also quite know my swiss knives (egrep and co).<div class=3D"im"><br>
<br>
&gt; And that&#39;s only one of the purpose of mli files.<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<br>
In fact mli files are the first thing I write when I design programs.<br>
</blockquote>
<br></div>
OK, so you too are a top-down design practitioner<br>
and use .mli files to this end.<br>
<br>
Thanks,<br>
F.<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
<br>
-- <br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/<u></u>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/<u></u>ocaml_beginners<=
/a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-<u></u>bugs</a><br>
</div></div></blockquote></div><br></div>

--14dae93411f5ea1c8d04cd3e5811--
