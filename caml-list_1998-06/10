Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA31245 for caml-redistribution; Tue, 16 Jun 1998 02:19:56 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA25025 for <caml-list@pauillac.inria.fr>; Mon, 15 Jun 1998 20:07:46 +0200 (MET DST)
Received: from postbox.dai.ed.ac.uk (postbox.dai.ed.ac.uk [129.215.41.196])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id UAA22943
	for <caml-list@inria.fr>; Mon, 15 Jun 1998 20:07:45 +0200 (MET DST)
Received: from venus (venus.dai.ed.ac.uk [129.215.41.154])
	by postbox.dai.ed.ac.uk (8.8.7/8.8.7) with SMTP id TAA04866;
	Mon, 15 Jun 1998 19:07:40 +0100 (BST)
Date: Mon, 15 Jun 1998 19:07:38 +0100
Message-Id: <23811.199806151807@venus>
From: William Chesters <williamc@dai.ed.ac.uk>
To: caml-list@inria.fr
Subject: Functors ...
Sender: weis

J'ai récemment dû faire un logiciel en C++, et j'ai saisi l'occasion
de me renseigner sur le librairie "STL".  Il était facile une fois que
je m'étais rendu compte que les templates sont essentiellement
identiques aux "functors" ML :).

---Alors, me dis-je, pourquoi ne pas écrire la même utilitaire en ML,
et peut-être le logiciel entier?  (Il s'agit d'une librairie petite
pour manipuler les "sparse vectors" au moyen des "iterators" .)

Mais il semble que ocaml implément les functors au moyen des
"dispatch tables"; ça marche donc un peu lentement.  Est-ce qu'il y a
une raison pour laquelle les fonctions dans les functors ne peuvent
pas être mise "inline"?




I recently had to write a program in C++, and I took the opportunity
to learn about the STL.  It was easy once I realised that templates
are essentially identical to ML functors :).

"OK", I thought, "why not write the same utility in ML, and perhaps
the whole program?"  (It's a little library for manipulating sparse
vectors using iterators.)

But it seems that ocaml implements functors with dispatch tables, so
it runs a bit slowly.  Is there some reason why functors cannot be
treated as normal code, much as C++ treats templates, and functions
from functors treated as candidates for inlining?




