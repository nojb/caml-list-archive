Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA21568 for caml-red; Mon, 17 Jul 2000 00:07:04 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA26320 for <caml-list@pauillac.inria.fr>; Tue, 11 Jul 2000 18:14:00 +0200 (MET DST)
Received: from web5101.mail.yahoo.com (web5101.mail.yahoo.com [216.115.106.71])
	by concorde.inria.fr (8.10.0/8.10.0) with SMTP id e6BGDxT28072
	for <caml-list@inria.fr>; Tue, 11 Jul 2000 18:13:59 +0200 (MET DST)
Message-ID: <20000711161355.26204.qmail@web5101.mail.yahoo.com>
Received: from [134.10.2.10] by web5101.mail.yahoo.com; Tue, 11 Jul 2000 09:13:55 PDT
Date: Tue, 11 Jul 2000 09:13:55 -0700 (PDT)
From: x y <feuerfeuerfeuer@yahoo.com>
Subject: query: experience with object system
To: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: weis@pauillac.inria.fr

Like, I suspect, many ocaml users, I've read the
documentation for the object system, thought that it
looked neat, but not really used it too much.  Well,
what do people think?  I'm particularly interested in
what people who have worked with other object-oriented
languages have to say.  Does ocaml have any great
advantages over C++, smalltalk or CLOS?  Are there
features in those languages that you miss in ocaml?
The other question I have is whether you find it hard
to integrate object-oriented programming with a
traditional ML style.  Modules, higher-order
polymorphic functions, variants and records, objects,
and now polymorphic variants seem to provide a lot of
overlapping functionality.  Does this make it hard to
rationally design systems or reuse code?

__________________________________________________
Do You Yahoo!?
Get Yahoo! Mail – Free email you can access from anywhere!
http://mail.yahoo.com/


