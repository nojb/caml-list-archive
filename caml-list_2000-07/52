Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA00258 for caml-red; Mon, 17 Jul 2000 00:11:31 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA02909 for <caml-list@pauillac.inria.fr>; Thu, 13 Jul 2000 18:05:33 +0200 (MET DST)
Received: from ropas.kaist.ac.kr (ropas.kaist.ac.kr [143.248.92.105])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e6DG5VP02329
	for <caml-list@inria.fr>; Thu, 13 Jul 2000 18:05:31 +0200 (MET DST)
Received: from localhost (bskim@localhost)
	by ropas.kaist.ac.kr (8.9.3/8.9.3) with ESMTP id BAA08247
	for <caml-list@inria.fr>; Fri, 14 Jul 2000 01:04:57 +0900 (KST)
Date: Fri, 14 Jul 2000 01:04:57 +0900 (KST)
From: Bomshik Kim <bskim@ropas.kaist.ac.kr>
To: caml-list@inria.fr
Subject: [Q] inter_process communication in CamlTk,OCaml
Message-ID: <Pine.GSO.4.10.10007140103180.8245-100000@ropas.kaist.ac.kr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis@pauillac.inria.fr


Hello.

Now I'm making some application with CamlTk and OCaml.
Problem is how to communicate between GUI part and Working part.

In GUI part, there are start_work button, and stop_work button.
The work is started in a new_process (by fork) by clicking 
start_work button. But the work may take a long time 
(let's assume 10 min) and raise an exception. 
and I want to make the result of work shown on GUI Text.
So GUI part should receive the result from Work part.

Usually, socket is used for inter_process communication.
If recvfrom function is used for receiving the result 
from Work part by UDP, then any other input event is not
archieved. Because GUI waits the result(sleep until receiving the result).
That means user can't stop the work by clicking stop_work button
in the middle of Work processing .

If there is nice method to communicate between parent(GUI part) process
and child (Working part) process, let me know it.

Sincerely

--
Bomshik Kim, M.S. Candidate   
Programming Language Lab.
Division of CS, Dept. of EECS, KAIST
http://ropas.kaist.ac.kr/~bskim



