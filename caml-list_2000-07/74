Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA13617 for caml-red; Fri, 21 Jul 2000 10:22:34 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA01800 for <caml-list@pauillac.inria.fr>; Fri, 21 Jul 2000 10:05:34 +0200 (MET DST)
Received: from mail.is.titech.ac.jp (mail.is.titech.ac.jp [131.112.51.131])
	by nez-perce.inria.fr (8.10.0/8.10.0) with SMTP id e6L85WX04791
	for <caml-list@inria.fr>; Fri, 21 Jul 2000 10:05:32 +0200 (MET DST)
Received: (qmail 9312 invoked from network); 21 Jul 2000 08:04:15 -0000
Received: from dmznat-9.is.titech.ac.jp (HELO localhost) (131.112.51.189)
  by mail.is.titech.ac.jp with SMTP; 21 Jul 2000 08:04:15 -0000
To: point@chasm.org, caml-list@inria.fr
Subject: Re: Different GCs for OCaml
In-Reply-To: <4.3.2.7.0.20000719094927.00aaee20@chasm.org>
References: <4.3.2.7.0.20000719094927.00aaee20@chasm.org>
X-Mailer: Mew version 1.94.2 on Emacs 20.5 / Mule 4.1 (AOI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20000721165947J.wakita@is.titech.ac.jp>
Date: Fri, 21 Jul 2000 16:59:47 +0900
From: Ken Wakita <wakita@is.titech.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 24
Sender: weis@pauillac.inria.fr


We are developing a common testbed to compare various statistics of
different GC strateies on top of a modified O'Caml.  Using a prototype
system we have generational copying, mark & sweep, reference counting,
and their variants.  We are not sure if our approach conflicts with
systhread support, though.

The answer depends on what kind of GC and the quality of GC
performance you require.  If you are not concerned about the execution
performance, it is not so difficult, say two-four weeks.  If you need
optimized performance, you need to modify the compiler because many GC
strategies that can be accelerated by reducing the number of
read/write barrier execution.  If you are interested in modern GC
strategies such as tag-free GC then you probably modify almost all
part of O'Caml implementation.

Ken Wakita

In message (<4.3.2.7.0.20000719094927.00aaee20@chasm.org>)
from Jack Point <point@chasm.org>,
talking about "Different GCs for OCaml",
on Wed, 19 Jul 2000 09:50:27 -0700

point> How easy would it be to try different GC strategies with OCaml?


