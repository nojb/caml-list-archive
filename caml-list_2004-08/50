Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA27847; Tue, 3 Aug 2004 17:28:39 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA28943 for <caml-list@pauillac.inria.fr>; Tue, 3 Aug 2004 17:28:38 +0200 (MET DST)
Received: from mproxy.gmail.com (rproxy.gmail.com [64.233.170.193])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i73FSaSH012640
	for <caml-list@inria.fr>; Tue, 3 Aug 2004 17:28:37 +0200
Received: by mproxy.gmail.com with SMTP id 75so148179rnl
        for <caml-list@inria.fr>; Tue, 03 Aug 2004 08:28:36 -0700 (PDT)
Received: by 10.38.206.78 with SMTP id d78mr109678rng;
        Tue, 03 Aug 2004 08:28:36 -0700 (PDT)
Message-ID: <d849ad2a04080308285605bb7e@mail.gmail.com>
Date: Tue, 3 Aug 2004 11:28:36 -0400
From: John Prevost <j.prevost@gmail.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] Functors and classes
In-Reply-To: <d849ad2a04080308277a3dbf21@mail.gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
References: <20040803120244.GA22304@annexia.org> <20040803121049.GA22418@annexia.org> <20040803131716.GA22773@annexia.org> <d849ad2a04080308062629fb25@mail.gmail.com> <20040803151241.GA25124@annexia.org> <d849ad2a04080308277a3dbf21@mail.gmail.com>
X-Miltered: at concorde with ID 410FAF24.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; prevost:01 prevost:01 caml-list:01 functors:01 val:01 val:01 struct:01 sig:01 int:01 module:03 module:03 unit:03 classes:03 wrote:03 inline:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Oops.  A couple of errors in that last thing I wrote that weren't the
problem I was trying to illustrate (that's what I get for trying fixes
inline before giving up):

module type ThingPoolT =
  sig
    type connection
    val connect : unit -> connection
    val test : connection -> int
  end

module ThingPool (Thing : ThingIntf) :
    (ThingPoolT with type connection = Thing.connection) =
  struct
    type connection = Thing.connection
    let connect () = Thing.connect ()
    let test x = x#a + 1 
  end

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

