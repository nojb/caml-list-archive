Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA14973; Fri, 13 Aug 2004 16:28:31 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA15694 for <caml-list@pauillac.inria.fr>; Fri, 13 Aug 2004 16:28:30 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i7DESORM001966
	for <caml-list@inria.fr>; Fri, 13 Aug 2004 16:28:28 +0200
Received: from [192.168.1.200] (ppp197-3.lns1.syd2.internode.on.net [203.122.197.3])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i7DESDHY087783;
	Fri, 13 Aug 2004 23:58:15 +0930 (CST)
Subject: Re: AW: [Caml-list] The tag bit
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Christophe Raffalli <christophe.raffalli@univ-savoie.fr>
Cc: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>,
        Christoph.Bauer@lms-gmbh.de, caml-list <caml-list@inria.fr>
In-Reply-To: <411CBAF6.3010101@univ-savoie.fr>
References: <D981925B4F2CD611870300E0184CEE9B0157F260@mail.lms-gmbh.de>
	 <20040813.125329.74721093.garrigue@kurims.kyoto-u.ac.jp>
	 <411CBAF6.3010101@univ-savoie.fr>
Content-Type: text/plain
Message-Id: <1092407293.29139.219.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 14 Aug 2004 00:28:13 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 411CD008.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 raffalli:01 encodings:01 generational:01 9660:01 glebe:01 christophe:01 ocaml:01 ocaml:01 nsw:01 snail:02 collector:02 collector:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-08-13 at 22:58, Christophe Raffalli wrote:

> Does anyone have  a comparison between two identical GC except one 
> should have a tag bit and the other be conservative ?

The Boehm collector is quite efficient: if you compare it
to hand written encodings such as reference counting
for example.

The main problem with it is that it has to 'stop the world'
whilst it is doing its thing, and so isn't useful for
real time applications such as a game where you can easily
pay 20% of all CPU for the GC -- but you simply can't freeze
up the game for 10 seconds every few minutes.

The Ocaml generational collector is likely to be much better
at this -- some of the workload is spread over time, and
the remaining major collection when needed will also be
faster, and can be called manually at appropriate points.

A second point is -- Boehm cannot defragment memory.
Ocaml can (although the compaction is 'world stop').

So .. i don't think the 'overall CPU use' of the two collector
kinds is actually what you need to compare: the real time
performance and/or ability to operate with C/C++ code
are the likely issues.


-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

