Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA18594; Mon, 23 Aug 2004 19:21:33 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA18513 for <caml-list@pauillac.inria.fr>; Mon, 23 Aug 2004 19:21:32 +0200 (MET DST)
Received: from us17.unix.fas.harvard.edu (us17.unix.fas.harvard.edu [140.247.35.197])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i7NHLVmL013954
	for <caml-list@pauillac.inria.fr>; Mon, 23 Aug 2004 19:21:32 +0200
Received: from localhost (bs1-03.fas.harvard.edu [140.247.34.151])
	by us17.unix.fas.harvard.edu (8.12.11/8.12.11) with ESMTP id i7NHLVYR009017
	for <caml-list@pauillac.inria.fr>; Mon, 23 Aug 2004 13:21:31 -0400
Received: from 206.181.22.67 ( [206.181.22.67])
	as user hamburg@127.0.0.1 by webmail.fas.harvard.edu with HTTP;
	Mon, 23 Aug 2004 13:21:25 -0400
Message-ID: <1093281685.412a2795efb43@webmail.fas.harvard.edu>
Date: Mon, 23 Aug 2004 13:21:25 -0400
From: Michael Alexander Hamburg <hamburg@fas.harvard.edu>
To: caml-list@pauillac.inria.fr
Subject: Re: [Caml-list] Q: Correct locations for macro camlp4 extensions 
References: <m2657aw64q.fsf@biogw-ii-19.felk.cvut.cz>
In-Reply-To: <m2657aw64q.fsf@biogw-ii-19.felk.cvut.cz>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.0
X-Originating-IP: 206.181.22.67
X-Miltered: at nez-perce with ID 412A279B.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 camlp:01 haskell:01 camlp:01 haskell:01 quoting:01 implemented:01 420:99 ocaml:01 alexander:01 syntax:02 overhead:03 emulate:03 let:04 campl:04 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Which Haskell operator features does this emulate?  I know you can make an 
operator without any camlp4 that does right-associative application, basically 
let (@@) f x = f x.  Does this do it with less overhead? Or does it enable 
expressions like (/ 5) or (+ 3) as in Haskell (that would be cool...)?

Mike

Quoting Jan Kybic <kybic@fel.cvut.cz>:

> Hello,
>         I quite like some of the OCaml syntax extensions implemented
> with campl4 that I gathered so far, for example:
...
>     operator composition (like "$" in Haskell)
... 
> Jan
> 
> -- 
> -------------------------------------------------------------------------
> Jan Kybic <kybic@ieee.org>                  tel. +420 2 2435 7264
>        or <kybic@fel.cvut.cz>,     http://cmp.felk.cvut.cz/~kybic
> 




-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

