Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA04440; Fri, 27 Aug 2004 10:53:18 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA04613 for <caml-list@pauillac.inria.fr>; Fri, 27 Aug 2004 10:53:17 +0200 (MET DST)
Received: from mta1.cl.cam.ac.uk (mta1.cl.cam.ac.uk [128.232.0.15])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i7R8rGZw018151
	for <caml-list@inria.fr>; Fri, 27 Aug 2004 10:53:16 +0200
Received: from zonule.cl.cam.ac.uk
	([128.232.9.23] helo=cl.cam.ac.uk ident=[t8Qfmb/18/gLU5SznwiwYMGmlZ1FxBee])
	by mta1.cl.cam.ac.uk with esmtp (Exim 3.092 #1)
	id 1C0cTJ-0005dT-00; Fri, 27 Aug 2004 09:52:33 +0100
X-Mailer: exmh version 2.6.3-CL 04/04/2003 with nmh-1.0.4
X-Exmh-Isig-CompType: repl
X-Exmh-Isig-Folder: cslists/caml
To: mikel <mikel@evins.net>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Re: bytecode and native code at once 
In-reply-to: Your message of "Thu, 26 Aug 2004 08:52:52 PDT."
             <cgl10m$oav$1@sea.gmane.org> 
Mime-Version: 1.0
Content-Type: text/plain
Date: Fri, 27 Aug 2004 09:52:33 +0100
From: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Message-Id: <E1C0cTJ-0005dT-00@mta1.cl.cam.ac.uk>
X-Miltered: at concorde with ID 412EF67C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 2004:99 brandon:99 extensible:01 doable:01 haskell:01 runtime:01 haskell:01 run-time:01 mixed-mode:01 compiler:01 compiler:01 ocaml:01 bytecode:01 bytecode:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

mikel wrote:
> skaller wrote:
> > On Thu, 2004-08-26 at 14:26, Brandon J. Van Every wrote:
> >>I do wish bytecode and native code could be combined in the same
> >>application.  This is a typical game development scenario. 
> > This applies in many areas not just game development.
> > I'd very much like to build an extensible compiler ..
> 
> It's doable in principle. For example, the old MacScheme compiler used 
[..]
> 
> I don't know what implications such a scheme might have for type safety 
> in Ocaml.

GHCi, the interactive version of the Glasgow Haskell Compiler,
supports both interpreted and compiled code in the same runtime.  You
might want to look at some of their design documents here:

<http://www.haskell.org/ghc/documentation.html>

In particular, the Run-time System document discusses the mixed-mode
evaluation strategy.

--KW 8-)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

