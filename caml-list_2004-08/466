Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA19793; Sat, 28 Aug 2004 02:25:30 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA18393 for <caml-list@pauillac.inria.fr>; Sat, 28 Aug 2004 02:25:29 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i7S0PRBK009147
	for <caml-list@inria.fr>; Sat, 28 Aug 2004 02:25:28 +0200
Received: from [192.168.1.200] (ppp212-216.lns2.syd3.internode.on.net [203.122.212.216])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i7S0PHHY058389;
	Sat, 28 Aug 2004 09:55:18 +0930 (CST)
Subject: Re: [Caml-list] Alternative Bytecodes for OCaml
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: John Goerzen <jgoerzen@complete.org>
Cc: caml-list <caml-list@inria.fr>, Nicolas Cannasse <warplayer@free.fr>
In-Reply-To: <200408271556.44476.jgoerzen@complete.org>
References: <200408250926.28629.jgoerzen@complete.org>
	 <200408271349.25317.jgoerzen@complete.org>
	 <1093639193.15255.1543.camel@pelican.wigram>
	 <200408271556.44476.jgoerzen@complete.org>
Content-Type: text/plain
Message-Id: <1093652716.15255.1636.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 28 Aug 2004 10:25:17 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 412FD0F7.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 bytecodes:01 sourceforge:01 2004:99 syscalls:01 interfacing:01 api:01 9660:01 glebe:01 ocaml:01 ocaml:01 garbage:01 jvm:01 approaches:01 interfaces:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sat, 2004-08-28 at 06:56, John Goerzen wrote:

> > Two reasons. One: C is the portable interface
> > to almost all operating systems -- there are
> 
> This means that you could write an OCaml interface to syscalls.  
> Granted, that's an advantage, but one I rarely need.

Like when you read from a in_channel in Ocaml?

You don't need to access the system. But the
Ocaml team did, to give you that feature .. :)

> > Two: there are a lot of libraries written
> > in C with C interfaces, which are either
> > compliant with some standard or open source.
> 
> That's true.  At the same time, binding to C is just about the most 
> difficult language I could imagine to bind to.  

Yeah? Just try interfacing two diffent memory management
systems -- eg Ocaml and JVM garbage collectors :)
[At least C doesn't really *have* any memory management system :]

> I'm not disputing that at all.  Obviously this is true.  I'm just 
> suggesting that other approaches have utility, too, because they're 
> superior in some situations.

And I'm not disputing that -- in general. I'm just questioning
the utility of accessing inferior technology just
to interface inferior libraries.

My suggestion was the maximum utility would actually come
from this when needing to access *custom* codes -- that
is one off applications not worth rewriting, or, proprietary
codes you cannot rewrite.

> > Surely enhancing OcamlDBI is a viable option?
> 
> I have to talk to several databases who provide drivers only for Windows 
> ODBC and Java JDBC.  There is no hope of OCamlDBI supporting them, 
> ever.

Hmm .. but Windows ODBC is just another C API for databases isn't it?
So OcamlDBI can talk to it -- Ocaml does run on Windows :)

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

