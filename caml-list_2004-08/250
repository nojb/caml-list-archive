Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA02907; Sat, 14 Aug 2004 02:29:16 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA01882 for <caml-list@pauillac.inria.fr>; Sat, 14 Aug 2004 02:29:15 +0200 (MET DST)
Received: from ptb-relay02.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i7E0TEmL015161
	for <caml-list@inria.fr>; Sat, 14 Aug 2004 02:29:15 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay02.plus.net with esmtp (Exim) id 1BvmQ6-0007hh-IM
	for caml-list@inria.fr; Sat, 14 Aug 2004 00:29:14 +0000
From: Jon Harrop <jon@jdh30.plus.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] CFG's and OCaml
Date: Sat, 14 Aug 2004 01:25:59 +0100
User-Agent: KMail/1.6.2
References: <Pine.LNX.4.44.0408131342150.4282-100000@localhost.localdomain>
In-Reply-To: <Pine.LNX.4.44.0408131342150.4282-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Disposition: inline
Message-Id: <200408140125.59473.jon@jdh30.plus.com>
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 411D5CDA.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 disallow:01 coercing:01 productive:01 ocaml:01 ocaml:01 trivial:01 parsers:03 lex:04 lex:04 implement:05 probably:05 cheers:06 i'd:06 languages:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


I have some (probably trivial) questions about parsers:

1. Are most programming languages designed to be implementable using lex and 
yacc?

2. If so, are their designs restricted by this?

3. If so, is the fact that most languages disallow "a<b<c" due to this?

4. Could that be added to OCaml? ;-)

5. Is it productive to think in terms of coercing lex and yacc into doing as 
much of the work as possible and then using postprocessing to do the rest 
(e.g. this is the way I'd implement a<b<c)?

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

