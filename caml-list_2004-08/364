Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA19000; Tue, 24 Aug 2004 11:21:39 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA20159 for <caml-list@pauillac.inria.fr>; Tue, 24 Aug 2004 11:21:37 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i7O9LYmL018649
	for <caml-list@pauillac.inria.fr>; Tue, 24 Aug 2004 11:21:36 +0200
Received: from [192.168.1.200] (ppp212-216.lns2.syd3.internode.on.net [203.122.212.216])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i7O9LL4Y008375;
	Tue, 24 Aug 2004 18:51:22 +0930 (CST)
Subject: Re: [Caml-list] (Release) ocamllex tutorial (ver 0.1)
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: SooHyoung Oh <shoh@compiler.kaist.ac.kr>
Cc: caml-list <caml-list@pauillac.inria.fr>
In-Reply-To: <007d01c489b1$843acfc0$1501a8c0@hama>
References: <007d01c489b1$843acfc0$1501a8c0@hama>
Content-Type: text/plain
Message-Id: <1093339280.15255.495.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 24 Aug 2004 19:21:21 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 412B089E.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 passing:01 recursively:01 9660:01 glebe:01 ocaml:01 ocaml:01 token:01 nsw:01 cope:02 snail:02 parser:02 checkout:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 2004-08-24 at 18:07, SooHyoung Oh wrote:

> Any comment will be appreciated.

It looks very good!

> This tutorial is work-in-progress. The latest version can be found at
> http://pllab.kaist.ac.kr/~shoh/ocaml/ocamllex_ocamlyacc/ocamllex-tutorial/index.html.

First -- you haven't explained how to use the new argument
feature. A good example would be to take the non-reentrant
line counting example and show how to make it re-entrant
by passing an object containing the counters.

To justify not using a global variable, you can extend
the example to allow for recursively counting #include
files (or something similar :)

The second thing I'd like to see here is an example
showing the common technique of lexing an identifier
and then using a lookup table to see if it is keyword:
this is done because (a) it is possible and (b) it
simplifies the lexer which otherwise needs a huge
number of states.

The third thing I'd like to see is a more functional example
where the lexer isn't just executing code for side effects.
All your examples have the lexer tail calling itself: but
most real lexing applications do not do this, instead
you call the lexer repeatedly from a driver loop.

In particular Ocamlyacc calls Ocamllex to lex one
token at a time.

Finally -- since your tutorial is Ocaml specific,
I'd like to see some information on lexbufs.
Are they functional? Can I write a backtracking
functional parser that just 'goes backwards'
in the input stream using a lexbuf to allow
re-lexing some input? 

How do i cope with the fact
that lexbufs think they're reading named
files with lines in them .. what if this isn't so?

This is actually a design fault which is unfortunately
propagated to Ocamlyacc.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

