Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA06171; Fri, 27 Aug 2004 11:03:37 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA04244 for <caml-list@pauillac.inria.fr>; Fri, 27 Aug 2004 11:03:36 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i7R93YIO019491
	for <caml-list@inria.fr>; Fri, 27 Aug 2004 11:03:35 +0200
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id SAA11077;
	Fri, 27 Aug 2004 18:03:28 +0900 (JST)
Date: Fri, 27 Aug 2004 18:03:28 +0900 (JST)
Message-Id: <20040827.180328.128873320.garrigue@kurims.kyoto-u.ac.jp>
To: jon@jdh30.plus.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Phantom types
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
In-Reply-To: <200408231616.58139.jon@jdh30.plus.com>
References: <20040731163143.GB15775@fichte.ai.univie.ac.at>
	<200408231049.59342.jon@jdh30.plus.com>
	<200408231616.58139.jon@jdh30.plus.com>
X-Mailer: Mew version 4.0.64 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 412EF8E6.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 val:01 val:01 abstr:01 abstr:01 superset:01 variance:01 covariance:01 jacques:01 phantom:01 garrigue:01 garrigue:01 polymorphic:01 subset:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Jon Harrop <jon@jdh30.plus.com>

> I should add, using:
> 
>   val add_even_even : [> `Even ] t -> [> `Even ] t -> [> `Even ] t
>   val add_even_odd : [> `Even ] t -> [> `Odd ] t -> [> `Odd ] t
> 
> allows:
> 
> # PhantomInt.add_even_odd i j;;
> val k : _[> `Odd ] PhantomInt.t = <abstr>

This part is OK.

> which can then be misused:
> 
> # PhantomInt.add_even_even i k;;
> - : [ `Even ] PhantomInt.t = <abstr>

But this one is wrong.

> I think this is because [> `Even] means any superset of [ `Even ] whereas [< 
> `Even], which was probably intended, means any subset of [ `Even ]. Indeed, 
> the latter appears to work.

Indeed, one must be careful about variance.
So the right signature would be:
   type +'a t
   type any = [`Even|`Odd]
   val add_even_even : [ `Even ] t -> [ `Even ] t -> [> `Even ] t
   val add_even_odd : [ `Even ] t -> [ `Odd ] t -> [> `Odd ] t
   val add_unknown_unknown : any t -> any t -> any t
(Note the + indicating covariance)

Then you have
# let k = PhantomInt.add_even_odd i j;;
val k : [> `Odd ] PhantomInt.t = <abstr>
(polymorphic result!)
# PhantomInt.add_even_even i k;;
** type error
# PhantomInt.add_unknown_unknown i k;;
- : any t = <abstr>

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

