Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA30349; Thu, 19 Aug 2004 00:52:47 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA29811 for <caml-list@pauillac.inria.fr>; Thu, 19 Aug 2004 00:52:45 +0200 (MET DST)
Received: from smtp-bedford-dr.mitre.org (smtp-bedford-dr-x.mitre.org [192.160.51.65])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i7IMqiRM028394
	for <caml-list@inria.fr>; Thu, 19 Aug 2004 00:52:44 +0200
Received: from smtp-bedford-dr.mitre.org (localhost.localdomain [127.0.0.1])
	by smtp-bedford-dr.mitre.org (8.11.6/8.11.6) with SMTP id i7IMqhW21294
	for <caml-list@inria.fr>; Wed, 18 Aug 2004 18:52:43 -0400
Received: from smtp-bedford-dr.mitre.org (localhost.localdomain [127.0.0.1])
	by smtp-bedford-dr.mitre.org (Postfix) with ESMTP id B0C284F8D7
	for <caml-list@inria.fr>; Wed, 18 Aug 2004 18:52:43 -0400 (EDT)
Received: from MAILHUB2 (mailhub2.mitre.org [129.83.221.18])
	by smtp-bedford-dr.mitre.org (8.11.6/8.11.6) with ESMTP id i7IMqhv21271
	for <caml-list@inria.fr>; Wed, 18 Aug 2004 18:52:43 -0400
Received: from ??? (129.83.35.110) by mailhub2.mitre.org with SMTP
        id 4217460; Wed, 18 Aug 2004 18:52:39 -0400
Message-ID: <4123DDB3.8010504@mitre.org>
Date: Wed, 18 Aug 2004 18:52:35 -0400
From: Shaddin Doghmi <shaddin@mitre.org>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040413 Debian/1.6-5
X-Accept-Language: en
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: [Caml-list] including signature (mli) in struct (ml)
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4123DDBC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; mli:01 struct:01 functor:01 blahblah:01 functor:01 blahblah:01 mli:01 blah:01 sig:01 sig:01 module:03 module:03 annoying:03 let:04 define:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

let us say i have the following functor in a.ml:

module Make(In:sig blah end):Aout =blahblah

and the following functor in b.ml, which takes as input Aout:

module Make(In:Aout):Bout = blahblah

so basically, i have to be able to refer to Aout in b.ml . what im 
having to do is define Aout in a.ml using:

module type Aout = sig blahblah end

and then repeating that definition in a.mli in order to export Aout so i 
can refer to it in b.ml

this redundancy can be annoying, is there a way to declare Aout only 
once and still be able to refer to it in b.ml ? How about including 
a.mli in a.ml somehow? something along the lines of include in C would 
do it, where including a.h in a.c would make it unnecessary to define 
something in both...

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

