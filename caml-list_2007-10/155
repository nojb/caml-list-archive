Return-Path: <joelr1@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 0D086BC6B
	for <caml-list@yquem.inria.fr>; Sun,  7 Oct 2007 12:58:06 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAFpYCEfAXQInh2dsb2JhbACOOAEBAQgKKQ
X-IronPort-AV: E=Sophos;i="4.21,240,1188770400"; 
   d="scan'208";a="17383468"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 07 Oct 2007 12:58:06 +0200
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l97Aw50K001074
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Sun, 7 Oct 2007 12:58:06 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAP9XCEdC+VyrjGdsb2JhbACOOAEBAQgEBAsIEQU
X-IronPort-AV: E=Sophos;i="4.21,240,1188770400"; 
   d="scan'208";a="2249719"
Received: from ug-out-1314.google.com ([66.249.92.171])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 07 Oct 2007 12:58:05 +0200
Received: by ug-out-1314.google.com with SMTP id m3so628493ugc
        for <caml-list@inria.fr>; Sun, 07 Oct 2007 03:58:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:mime-version:content-transfer-encoding:message-id:content-type:to:from:subject:date:x-mailer;
        bh=E3xOXA4fyH93n6g9ba+YPsUvCsVdqj2VbpsPVuzMo9I=;
        b=OVn4/RAut9XgwclvioRvwegXjDrT7i1fN6aJuqu944Qenly7iGht8ukMfZpKjaNEjdeKzBN68rpcVdChIFKY8jd7x68OXRBjEmm3/6akPdGpVq/dKdTcQtSdlVfb16uyk7/q1BGeu7CyBBxCzHL8lB8svhZWgCFto3qb1SON51k=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:mime-version:content-transfer-encoding:message-id:content-type:to:from:subject:date:x-mailer;
        b=cw3tm+/xL4N0NvSxHAvZit/DPvHLN9yjrvM3NvV8UTOKIdFY4ZWnYm43hPI5ph0Q0bLvT2xRp3ECnoS4LXkspWjIrlfa1tIgXDDwd5Inp29U5fLLXSt0Zl7dFDX+zoJLgVrAmvcSy8FVIbpZIpBfA7zFvqGCL74Ix/6PMhM/j3A=
Received: by 10.67.103.20 with SMTP id f20mr5522870ugm.1191754685006;
        Sun, 07 Oct 2007 03:58:05 -0700 (PDT)
Received: from ?192.168.1.33? ( [83.52.235.32])
        by mx.google.com with ESMTPS id z34sm5876445ikz.2007.10.07.03.58.03
        (version=SSLv3 cipher=OTHER);
        Sun, 07 Oct 2007 03:58:04 -0700 (PDT)
Mime-Version: 1.0 (Apple Message framework v752.3)
Content-Transfer-Encoding: 7bit
Message-Id: <D7B6617B-21D9-45DF-8C3D-B164A9BACF84@gmail.com>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
To: Caml List <caml-list@inria.fr>
From: Joel Reymont <joelr1@gmail.com>
Subject: Design advice for declaring Objective-C classes in OCaml
Date: Sun, 7 Oct 2007 11:58:02 +0100
X-Mailer: Apple Mail (2.752.3)
X-Miltered: at concorde with ID 4708BBBD.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 parses:01 emits:01 camlp:01 runtime:01 wrappers:01 wrappers:01 runtime:01 camlp:01 graydon:01 graydon:01 cocoa:98 cocoa:98 invoke:01 

I'm thinking about a Cocoa bridge for OCaml. I think it's best to  
start by thinking how a Cocoa / Objective-C class would be declared  
in OCaml. Once this part is done, code could be created that parses  
Cocoa header files and emits proper OCaml declarations.

OCaml has classes and labels can be used to declare Objective-C  
keyword arguments.

Various types could be declared in OCaml to match Cocoa types such as  
NSRange, NSPoint, etc.

To declare a Cocoa class in OCaml it could be subclassed from  
ns_object or any other Cocoa class previously imported into OCaml  
(separate step). camlp4 could then be used to process classes in a  
given file and create code to register the class in the Objective C  
runtime based on method argument types and such.

There's a problem, though, that makes the whole process cumbersome.  
This is where I need your advice...

It looks like I will need to create C wrappers to invoke my OCaml  
code and register these wrappers with the Objective C runtime. The C  
wrappers will need to be generated during the camlp4 processing step  
and then compiled as part of the project. Could this be done  
seamlessly with ocamlbuild?

camlp4 is maddeningly complex for me but it looks like I could reuse  
the approach from http://www.venge.net/graydon/talks/mkc/html/ 
index.html where camlp4 is also used to generate the C AST, C code is  
generated from the AST and then compiled.

Any suggestions or ideas on how to make this whole process simple and  
transparent? Graydon uses a separate driver to compile C code, for  
example, something that I would like to avoid.

	Thanks, Joel

--
http://wagerlabs.com



