Return-Path: <dra-news@metastack.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 92DFEBC69
	for <caml-list@yquem.inria.fr>; Thu,  4 Oct 2007 13:28:28 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAL1qBEfAXQInemdsb2JhbACOOAEBCQo
X-IronPort-AV: E=Sophos;i="4.21,229,1188770400"; 
   d="scan'208";a="3742780"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 04 Oct 2007 13:28:28 +0200
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l94BSR8P008394
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Thu, 4 Oct 2007 13:28:27 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAL1qBEfC2fJZn2dsb2JhbACOOAEBAgcEBgcg
X-IronPort-AV: E=Sophos;i="4.21,229,1188770400"; 
   d="scan'208";a="17282849"
Received: from anchor-post-31.mail.demon.net ([194.217.242.89])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 04 Oct 2007 13:28:27 +0200
Received: from orion.metastack.com ([80.177.38.218])
	by anchor-post-31.mail.demon.net with esmtp (Exim 4.67)
	id 1IdOsQ-0000Zl-3Q
	for caml-list@inria.fr; Thu, 04 Oct 2007 11:28:23 +0000
Received: from countertenor (mobileweb02.london.02.net [193.113.235.168])
	(authenticated bits=0)
	by orion.metastack.com (8.13.4/8.13.3) with ESMTP id l94BPYmp005005
	(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NO)
	for <caml-list@inria.fr>; Thu, 4 Oct 2007 12:25:47 +0100
From: "David Allsopp" <dra-news@metastack.com>
To: <caml-list@inria.fr>
References: <20071003083529.40DA2A99F@Adric.metnet.fnmoc.navy.mil><e2d02be30710030427j20592efbjcfc495cf5ab3b747@mail.gmail.com><4703FDEF.7030900@univ-savoie.fr><1191451810.7218.86.camel@rosella.wigram><47042202.4070906@mcmaster.ca> <1191461066.7542.48.camel@rosella.wigram>
Subject: RE: [Caml-list] Unsoundness is essential
Date: Thu, 4 Oct 2007 12:26:53 +0100
Organization: MetaStack Solutions Ltd.
Message-ID: <018201c80679$86a2ba00$017ca8c0@countertenor>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Office Outlook 11
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3138
Thread-Index: AcgGJTTVhm2Se4dkSHit817erpgETwAPWnsw
In-Reply-To: <1191461066.7542.48.camel@rosella.wigram>
X-Miltered: at concorde with ID 4704CE5B.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; vastly:01 ocaml:01 pointer:01 python's:01 ocaml:01 worn:98 richards:98 typing:01 typing:01 exception:01 caml-list:01 python:03 strong:96 languages:03 programming:03 

> Ah, but that is what I *am* arguing for. The 'reasoning' is simply
> that 'the programmer knows best' -- when the type system doesn't.

"the programmer knows best" is one of the founding principles of BCPL!! I'm
not sure I agree, though - IMO Vincent is correct that being forced to
express things "properly" results in better code in the long run. Try
writing any substantial amount of BCPL[*]...

> The evidence is: programming languages with dynamic or unsound
> typing eg Python, C, are vastly more popular than those with 
> strong typing.

I'm not at all convinced that dynamic/unsound typing is the reason for the
popularity of C, etc - I've never met a C programmer whose eyes didn't pop
out on stalks when you explain that Ocaml cannot reference a null pointer
(not that that has ever caused a Damascene-road conversion to the language,
either!). <joke> C and Python's popularity is more down to needing ever more
programmers to debug the work of the previous programmers, right? :o)
</joke> Personally, whenever I go back to C, the novelty of the relaxed type
system is instantly worn away on the first tricky-to-repeat core dump... at
least an Ocaml exception has a cat in hell's chance of being found
systematically!


David


* With apologies and due deference to Martin Richards if he reads this list!

