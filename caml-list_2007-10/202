Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 452ECBC6B
	for <caml-list@yquem.inria.fr>; Tue,  9 Oct 2007 17:57:38 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAOZBC0fUnw6Gnmdsb2JhbACCN4wRAgEBBwQGERg
X-IronPort-AV: E=Sophos;i="4.21,249,1188770400"; 
   d="scan'208";a="17760317"
Received: from pih-relay08.plus.net ([212.159.14.134])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 09 Oct 2007 17:57:37 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay08.plus.net with esmtp (Exim) id 1IfHSj-0003tL-0x
	for caml-list@yquem.inria.fr; Tue, 09 Oct 2007 16:57:37 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Correct way of programming a CGI script
Date: Tue, 9 Oct 2007 16:48:47 +0100
User-Agent: KMail/1.9.7
References: <c1490a380710080808h521f88b0p340dcc761d71fd06@mail.gmail.com> <20071009135146.M36738@cs.unm.edu> <1191943545.5966.11.camel@rosella.wigram>
In-Reply-To: <1191943545.5966.11.camel@rosella.wigram>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200710091648.47587.jon@ffconsultancy.com>
X-Spam: no; 0.00; ocaml:01 buffer:01 ocaml:01 syntax:01 frog:98 char:01 wrote:01 caml-list:01 strings:01 strings:01 data:02 data:02 append:02 append:02 structures:02 

On Tuesday 09 October 2007 16:25:45 skaller wrote:
> It's not clear then you're using "strings".

It never was.

The concrete data structures used to represent strings in these languages are 
different. So you've just picked a concrete data structure with slow append 
and showed that its append is slower than a concrete data structure with slow 
random access and worse memory usage.

This is just swings and roundabouts.

You might like to compare the performance of setting a single char in a string 
in Python and OCaml...

> C++ strings provide all the operations of both String and Buffer
> and do not pay this cost. 

Can C++ escape a string using OCaml syntax?

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

