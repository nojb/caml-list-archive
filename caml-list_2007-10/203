Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 20AA3BC6B
	for <caml-list@yquem.inria.fr>; Tue,  9 Oct 2007 18:09:42 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CALZEC0fUnw6Elmdsb2JhbACCN4wRAgEBBwQGEREH
X-IronPort-AV: E=Sophos;i="4.21,249,1188770400"; 
   d="scan'208";a="4271959"
Received: from pih-relay05.plus.net ([212.159.14.132])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 09 Oct 2007 18:09:41 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay05.plus.net with esmtp (Exim) id 1IfHeO-0007qE-3M
	for caml-list@yquem.inria.fr; Tue, 09 Oct 2007 17:09:40 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Correct way of programming a CGI script
Date: Tue, 9 Oct 2007 17:00:50 +0100
User-Agent: KMail/1.9.7
References: <1191879429.28011.27.camel@rosella.wigram> <1191943756.5966.15.camel@rosella.wigram> <20071009154913.GA26282@snarc.org>
In-Reply-To: <20071009154913.GA26282@snarc.org>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200710091700.50663.jon@ffconsultancy.com>
X-Spam: no; 0.00; ocaml:01 compiler:01 10,:98 frog:98 wrote:01 wrote:01 caml-list:01 strings:01 strings:01 linear:02 data:02 match:02 match:02 optimizing:03 opengl:03 

On Tuesday 09 October 2007 16:49:13 Vincent Hanquez wrote:
> On Wed, Oct 10, 2007 at 01:29:16AM +1000, skaller wrote:
> > Of course that's nice, but Rope isn't the standard data structure.
> > Maybe it should be ..
>
> it should definitely not be standard, but be available as choice over
> ocaml strings. each implementation has some use cases when their perform
> better (memory/cpu wise).

Yes indeed. However, I'd like to pattern match over all of them.

Oh, and I'd like pattern matching over strings to be fast. Isn't there some 
sexy Gray code or something that isn't just usefully fast but also qualifies 
as research? Having the optimizing pattern match compiler generate linear 
searches is just silly.

Oh, and I want OpenGL integrated into the language. I don't know why, or what 
that's got to do with strings but I think its very important. And it must be 
faster than C++. ;-)

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

