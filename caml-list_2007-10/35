Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 7D0DDBC69
	for <caml-list@yquem.inria.fr>; Tue,  2 Oct 2007 23:19:56 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAMxRAkfUnw7Xnmdsb2JhbACCN4t/AQEBAQcEBg8Y
X-IronPort-AV: E=Sophos;i="4.21,221,1188770400"; 
   d="scan'208";a="2290540"
Received: from fhw-relay07.plus.net ([212.159.14.215])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 02 Oct 2007 23:19:56 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by fhw-relay07.plus.net with esmtp (Exim) id 1Icp9n-0001Cp-IM
	for caml-list@yquem.inria.fr; Tue, 02 Oct 2007 22:19:55 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] best and fastest way to read lines from a file?
Date: Tue, 2 Oct 2007 22:10:15 +0100
User-Agent: KMail/1.9.7
References: <779bf2730710011427g5983da4cw6ad8b715a9e38771@mail.gmail.com> <95513600710021323u762efd5k5ee6bdd03d7cc37@mail.gmail.com> <e2d02be30710021349m78417caakb3d1afd0714f1ebe@mail.gmail.com>
In-Reply-To: <e2d02be30710021349m78417caakb3d1afd0714f1ebe@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200710022210.15441.jon@ffconsultancy.com>
X-Spam: no; 0.00; inherently:01 hashtbl:01 stdlib:01 frog:98 wrote:01 caml-list:01 imperative:01 imperative:01 modules:02 implemented:02 functional:02 functional:02 construct:02 programming:03 fold:06 

On Tuesday 02 October 2007 21:49:41 kirillkh wrote:
> A little weird to see such inherently functional construct as fold
> implemented imperatively.

On the contrary, this is the core functionality of ML that makes it so 
practically useful: combining functional and imperative programming neatly 
and efficiently.

Look at the Array and Hashtbl modules of the stdlib for more examples of code 
that is both imperative and functional.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

