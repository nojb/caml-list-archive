Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA22532 for caml-redistribution@pauillac.inria.fr; Tue, 22 Feb 2000 18:54:45 +0100 (MET)
Resent-Message-Id: <200002221754.SAA22532@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA08384 for <caml-list@pauillac.inria.fr>; Tue, 22 Feb 2000 18:09:05 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id SAA09791;
	Tue, 22 Feb 2000 18:05:41 +0100 (MET)
Received: (from cuoq@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA10898; Tue, 22 Feb 2000 18:05:41 +0100 (MET)
Message-ID: <20000222180541.16173@pauillac.inria.fr>
Date: Tue, 22 Feb 2000 18:05:41 +0100
From: Pascal Cuoq <Pascal.Cuoq@inria.fr>
To: ohl@hep.tu-darmstadt.de, caml-list@inria.fr
Subject: Re: Preferred GUI Toolkit for O'Caml 3?
Reply-To: Pascal.Cuoq@inria.fr
References: <14509.20226.13985.265187@heplix4.ikp.physik.tu-darmstadt.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <14509.20226.13985.265187@heplix4.ikp.physik.tu-darmstadt.de>; from Thorsten Ohl on Fri, Feb 18, 2000 at 02:54:10PM +0100
Resent-From: weis@pauillac.inria.fr
Resent-Date: Tue, 22 Feb 2000 18:54:45 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

>    -  mlgtk      [ (+) Gtk+ is nicer than Tk (and no-Tcl is nicer than Tcl)
>                    (-) is it ported to everything but the kitchen sink? ]
> 
>    -  lablgtk    [ same a mlgtk, plus
>                    (-) still beta
>                    (+) appears(!) to have the slickest API ]

Since Jacques defines "beta" as "the API might change later",
I should point out that mlgtk has had its share of these changes in
the past, and some more may be required in the future.

Personally, I am still working on mlgtk although there are very competent
people working on lablgtk because:

1) it is fun.  It looks good when it works, and when you're tired
   of watching it look good and work well, you change your gtk theme 
   and it feels like you just wrote another toolkit interface, which
   looks good too.

2) some people are actually using it.

Sven, who maintains mlgtk too, told me once that he himself actually 
used it, so that's one more reason why mlgtk should last for a while.

This said, at the time I was recruited to work on mlgtk I had no 
opinion about labels and optional arguments, and now I do: they are
definitely the way to go for a widget library.

There are other differences between the two libraries, because
they were written completely independently.  mlgtk is less object-oriented
in the sense that it relies on module abstraction to be essentially
type-safe from the outside.  I think that lablgtk is completely
type safe, but it has more complicated object hierarchies (if I understood
correctly).

Pascal Brisset, who wrote the interface between mlgtk and native threads,
seemed to be saying that threads were better in mlgtk too :) but that
may have changed...

Pascal


