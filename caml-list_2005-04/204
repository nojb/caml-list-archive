Return-Path: <AndreasRossberg@web.de>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 7A392BC48
	for <caml-list@yquem.inria.fr>; Mon, 18 Apr 2005 14:11:24 +0200 (CEST)
Received: from smtp06.web.de (smtp06.web.de [217.72.192.224])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j3ICBOaw019905
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@yquem.inria.fr>; Mon, 18 Apr 2005 14:11:24 +0200
Received: from [217.235.113.81] (helo=wiko)
	by smtp06.web.de with smtp (WEB.DE 4.104 #268)
	id 1DNV60-0004HF-00
	for caml-list@yquem.inria.fr; Mon, 18 Apr 2005 14:11:21 +0200
Message-ID: <001901c5440f$ce1a5e80$14b2a8c0@wiko>
From: "Andreas Rossberg" <AndreasRossberg@web.de>
To: <caml-list@yquem.inria.fr>
References: <42637B63.1070608@ifp.fr> <200504181227.07108.jon@ffconsultancy.com>
Subject: Re: [Caml-list] type of ==
Date: Mon, 18 Apr 2005 14:11:51 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2800.1437
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441
Sender: AndreasRossberg@web.de
X-Sender: AndreasRossberg@web.de
X-Miltered: at concorde with ID 4263A3EC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; rossberg:01 caml-list:01 bool:01 abstraction:01 cheers:01 equality:01 equality:01 polymorphic:01 andreas:01 andreas:01 argument:01 represented:02 latter:03 depend:07 break:07 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

Jon Harrop <jon@ffconsultancy.com>:
>
> If there were an "'a -> 'b -> bool" physical equality test, how could it
ever
> return "true"?

Either when 'a and 'b happen to be instantiated to the same type, or when
the representation happens to be the same, e.g. 0 == false.

The latter also provides a good argument against making physical equality
too polymorphic. It would break abstraction, much worse than it does
already. In particular, a program's meaning could depend on implementation
details (like false being represented by 0) in very questionable ways.

Cheers,

  - Andreas

