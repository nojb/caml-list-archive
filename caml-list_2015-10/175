Return-Path: <wangshuai901@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id D14177FB5F
	for <caml-list@sympa.inria.fr>; Mon, 26 Oct 2015 00:11:38 +0100 (CET)
IronPort-PHdr: 9a23:hkZyCRyp+G7t2U3XCy+O+j09IxM/srCxBDY+r6Qd0eISIJqq85mqBkHD//Il1AaPBtWGraocw8Pt8IneGkU4qa6bt34DdJEeHzQksu4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2WVTerzWI4CIIHV2nbEwudrmzQtaapv/0/t7x0qWbWx9Piju5bOE6BzSNhiKViPMrh5B/IL060BrDrygAUe1XwWR1OQDbxE6ktY+YtaRu+CVIuv8n69UIEeCjJ/x5HvRkC2EFPmYz6dHr/TDPRA7Hw3oYVmgM2k5LDg7D4Q36V5v4ty77su5wwgGVOMT3SfY/XjH0vIlxTxq9sycaPj9xz2jRhYQkk6tdrwmhuhV+ktaNSI6QPft6OKjaeIVJFiJ6Qs9NWnkZUcuHZIwVAr9EZL4Aog==
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=wangshuai901@gmail.com; spf=Pass smtp.mailfrom=wangshuai901@gmail.com; spf=None smtp.helo=postmaster@mail-ob0-f172.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  wangshuai901@gmail.com) identity=pra;
  client-ip=209.85.214.172;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="wangshuai901@gmail.com";
  x-sender="wangshuai901@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  wangshuai901@gmail.com designates 209.85.214.172 as permitted
  sender) identity=mailfrom; client-ip=209.85.214.172;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="wangshuai901@gmail.com";
  x-sender="wangshuai901@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f172.google.com) identity=helo;
  client-ip=209.85.214.172;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="wangshuai901@gmail.com";
  x-sender="postmaster@mail-ob0-f172.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0BRAABgYS1WlKzWVdFTChaCU4EhYA8GhC2ob5AieAENgVojgkGBYIFZAoETBzgUAQEBAQEBAQEQAQEBAQcLCwkfMIIrggcBAQECAQESER0BGwwLBgEDAQsGBQsNIAoCAiEBAREBBQEcBhMJEgEGh3gBAwoIDaQVgTE+MYtJgWyCeYdbChknDVaEAAEBAQEBBQEBAQEBAQEBARQBBQ6EQIYhgQaCUIFgWQQHgmmBRQWSYoNNB4UcgnCDIYF1gVmEP4MkiySDX4IkEiOBFxEOAQGCRiOBeCI0AQEBAYcUAQEB
X-IPAS-Result: A0BRAABgYS1WlKzWVdFTChaCU4EhYA8GhC2ob5AieAENgVojgkGBYIFZAoETBzgUAQEBAQEBAQEQAQEBAQcLCwkfMIIrggcBAQECAQESER0BGwwLBgEDAQsGBQsNIAoCAiEBAREBBQEcBhMJEgEGh3gBAwoIDaQVgTE+MYtJgWyCeYdbChknDVaEAAEBAQEBBQEBAQEBAQEBARQBBQ6EQIYhgQaCUIFgWQQHgmmBRQWSYoNNB4UcgnCDIYF1gVmEP4MkiySDX4IkEiOBFxEOAQGCRiOBeCI0AQEBAYcUAQEB
X-IronPort-AV: E=Sophos;i="5.20,198,1444687200"; 
   d="scan'208";a="151711435"
Received: from mail-ob0-f172.google.com ([209.85.214.172])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 26 Oct 2015 00:11:34 +0100
Received: by obbwb3 with SMTP id wb3so130405984obb.0
        for <caml-list@inria.fr>; Sun, 25 Oct 2015 16:11:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=Sxj74nUzH1WNq/zAFDO07LKmjtoMacyI5WmSX3ea2rA=;
        b=HOZs/F96/8hCFFxHW/hsFdl7CUHfLSUZ1/rogpWMuSPD7pblV7JHN27vidfgHk7SRE
         uGSYq1IWTil2vJVC1Vv2WUjvQ+Zmx2cqTVoyblATPVxi4XR82rodQVTTdPUx0Hne3XST
         a8yZoASxSI/ocoTI/Bs2JrpDuHOc94lqZiI6LzIDo0NXzOvEf+p65uII2h2heEJuKuTz
         CvQlHNGH2kvjX0KqvCMX4hteniWn6dVmdosK5sNfGLxndXkEFTmjF0sDt4++Ha/kPKmj
         WjHEJ5LlWyFO6WiFA4+mP5IA126QhG3noHiFYNbpARd6navKIBKdDMhF8/rL35Qd03Lx
         1WkQ==
MIME-Version: 1.0
X-Received: by 10.60.144.231 with SMTP id sp7mr23560096oeb.7.1445814692821;
 Sun, 25 Oct 2015 16:11:32 -0700 (PDT)
Received: by 10.202.102.77 with HTTP; Sun, 25 Oct 2015 16:11:32 -0700 (PDT)
In-Reply-To: <CAK7rcp-13du8yZ_0cMbtjRrMqc1shEYy1pHscHXheLeNf6LeXQ@mail.gmail.com>
References: <CAEQMQonhJei_VT87QyarQWX=AufGmKEMBFDQ0o8EhmSF7U3Pmg@mail.gmail.com>
	<CALdWJ+z9BYF5foDvaL6DRPPDn_P5--k_t3VMtZkWDVd3QG+sFA@mail.gmail.com>
	<CAEQMQomg=14TrmQMjTx26xdh2qFwqPQpAio+1rtyEyhnvet9JA@mail.gmail.com>
	<CAK7rcp_6YxR7M0-e334oSjO_1+PFZ4nmabB+2Lx4AhmVU8o9Og@mail.gmail.com>
	<CAEQMQomoVX=jZ+k=b0dm4bxiF38cbS7BbnjFUCkK+PgrjY4mPA@mail.gmail.com>
	<CAK7rcp8rAdpY-KnjCKWPmwUpjv6kekvzMo6XDf0E0-RN_gjRjA@mail.gmail.com>
	<CAEQMQo=2M5bgoNzfg3QP+D68h++n9vbW7xrip7Bzj+ArGui_2Q@mail.gmail.com>
	<CAK7rcp-13du8yZ_0cMbtjRrMqc1shEYy1pHscHXheLeNf6LeXQ@mail.gmail.com>
Date: Sun, 25 Oct 2015 19:11:32 -0400
Message-ID: <CAEQMQomZ09w_X=HCpu-JFe0q_aj09okh9aaVkH=hA2pUCLaLXw@mail.gmail.com>
From: Shuai Wang <wangshuai901@gmail.com>
To: Kenneth Adam Miller <kennethadammiller@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7b47225e2d41c30522f5f7ef
Subject: Re: [Caml-list] [ANN] Uroboros 0.1

--047d7b47225e2d41c30522f5f7ef
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

I though "STIR" refers to Binary Stirring [1].

Leveraging coq to verify the instrumentation correctness sounds
very interesting to me, although I am not aware of any existing related
work.
Do you any existing work?

I think there do exist some static rewriter, such as DynInst.

[1] Binary Stirring: http://www.utdallas.edu/~hamlen/wartell12ccs.pdf
[2] DynInst : http://www.dyninst.org/



On Sun, Oct 25, 2015 at 5:23 PM, Kenneth Adam Miller <
kennethadammiller@gmail.com> wrote:

> I'm quite sure we are thinking of different things.
>
> STIR is a binary randomization technique used to mitigate rop, and was
> developed in sitsu with the binary rewriting techniques. The technique of
> retaining the original code section is a failback to guard against errors
> in rewriting, but to my knowledge doesn't impose a performance penalty.
> Size required is a constant multiple, so I don't consider it an adoption
> hurdle. But everybody has different use scenarios.
>
> Right. Correctness is critical. I think co program proof methodologies
> with tools like coq will shine here in proofs to remove required trust th=
at
> a rewrtten binary is conformant to certain execution properties.
>
> I hadn't know static rewriters even existed. I presume you are you talking
> about dynamic tools.
> On Oct 25, 2015 4:49 PM, "Shuai Wang" <wangshuai901@gmail.com> wrote:
>
>> Hello Kenneth,
>>
>> Yes, I agree Binary Stirring system can eliminate symbolization false
>> positive as well. Actually I believe
>> many research work, and  tools (DynInst, for instance) have implemented
>> this a so-called "replica-based"
>> binary instrumentation framework. This is a quite robust way to
>> instrument binary code, although size expansion and
>> performance penalty cannot be ignored in the instrumentation outputs.
>>
>> However, I found those solutions are all quite complex, and difficult to
>> understand. And it might not be inaccurate
>> to assume "aggressive" instrumentation methods can break the
>> functionality due to the limitation of design,
>> or challenges in bug-less implementation. I even found that some
>> the-state-of-the-art binary instrumentation tools
>> cannot preserve the correct functionality when employing them to
>> instrument some SPEC2006 test cases.
>>
>> I personally would like to find some cleaner solutions, which can
>> introduce very little overhead in terms of binary
>> size and execution. Besides, some research work reveals that binary
>> security applications built on top of previous
>> instrumentation framework do leave certain exploitable vulnerabilities
>> due to the design limitations.
>>
>> Sincerely,
>> Shuai
>>
>>
>>
>>
>>
>>
>> On Sun, Oct 25, 2015 at 3:25 PM, Kenneth Adam Miller <
>> kennethadammiller@gmail.com> wrote:
>>
>>> Replied inline
>>>
>>> On Sun, Oct 25, 2015 at 3:04 PM, Shuai Wang <wangshuai901@gmail.com>
>>> wrote:
>>>
>>>> Hello Kenneth,
>>>>
>>>> Sorry for the late reply. I have several deadlines during this weekend.
>>>>
>>>> To answer your question, our current approach cannot ensure 100%
>>>> "reposition" correct.
>>>> The most challenging part is to identify code pointers in global data
>>>> sections, as we discussed
>>>> in our paper, it is quite difficult to handle even with some static
>>>> analysis techniques
>>>> (type inference, for instance). We do have some false positive, as
>>>> shown in the appendix of our paper [1].
>>>> We will research more to eliminate the false positive.
>>>>
>>>> I believe it is doable to present a sound solution. It indeed requires
>>>> some additional
>>>> trampolines inserted in the binary code. You may refer to this paper
>>>> for some enlightens [2].
>>>>
>>>> As for the disassembling challenges, we directly adopt a disassembly
>>>> approach proposed
>>>> by an excellent work [3]. You can check out their evaluation section,
>>>> and find that their approach
>>>> can correctly disassemble large-size applications without any error. My
>>>> experience is that Linux ELF
>>>> binaries are indeed easier to disassemble, and typical compilers (gcc;
>>>> icc; llvm) would not
>>>> insert data into code sections (the embedded data can trouble linear
>>>> disassembler a lot).
>>>>
>>>>
>>> I remember reading about [3] when it came out. That was a year after the
>>> original REINS system came out that proposed re-writing binaries, along
>>> with it's companion STIR. Shingled disassembly originated with Wartell =
et
>>> al.'s seminal Distinguishing Code and Data PhD thesis. I'm currently
>>> working on the integration of a sheering and PFSM enhanced Shingled
>>> Disassembler into BAP. But if you've already implemented something like
>>> that, what would be really valuable is if you were to review my shingled
>>> disassembler implementation and I review yours that way we have some cr=
oss
>>> review feedback.
>>>
>>> Regarding the need for 100% accuracy, in the REINS and STIR papers, the
>>> approach taken is to obtain very very high classification accuracy, but=
 in
>>> the case that correctness cannot be established, to simply retain each
>>> interpretation of a byte sequence, so you are still correct in the inst=
ance
>>> that it's code by treating it as such. Then, a companion technique is
>>> introduced wherein the code section is retained in order that should su=
ch a
>>> data reference in code instance occur and interpretation was incorrect,
>>> such reference can read and write into the kept section. But if it's co=
de,
>>> it has been rewritten in the new section. Then it should remain correct=
 in
>>> any scenario.
>>>
>>>
>>>> However, if I am asked to work on PE binaries, then I will probably
>>>> start from IDA-Pro.
>>>> We consider the disassembling challenge is orthogonal to our research.
>>>>
>>>
>>> It is good to have good interoperabiblity with IDA as a guided
>>> disassembler and the actual new research tools. One of the most valuable
>>> things I can think of is to write some plugin that will mechanize data
>>> extraction as needed in order to accelerate manual intervention with the
>>> newer tools, such as in the case of training.
>>>
>>>
>>>>
>>>> IMHO, our research reveals the (important) fact that even though
>>>> theoretically relocation issue
>>>> is hard to solve with 100% accuracy, it might not be as troublesome as
>>>> it was assumed by previous work.
>>>> Simple solutions can achieve good results.
>>>>
>>>
>>> Agreed; there are failback stratagems.
>>>
>>>
>>>>
>>>> I hope it answers your questions, otherwise, please let me know :)
>>>>
>>>> Best,
>>>> Shuai
>>>>
>>>> [1] Shuai Wang, Pei Wang, Dinghao Wu, Reassembleable Disassembling.
>>>> [2] Zhui Deng, Xiangyu Zhang, Dongyan Xu, BISTRO: Binary Component
>>>> Extraction and Embedding for Software Security Applications
>>>> [3] Mingwei Zhang, Sekar, R, Control Flow Integrity for COTS Binaries.
>>>>
>>>>
>>>>
>>> There's a good utility for working with white papers and interacting
>>> with colleagues; mendeley.
>>>
>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Fri, Oct 23, 2015 at 6:31 PM, Kenneth Adam Miller <
>>>> kennethadammiller@gmail.com> wrote:
>>>>
>>>>> Well it's interesting that you've gone with a binary recompilation
>>>>> approach. How do you ensure that, statically, for any given edit, you
>>>>> reposition all the jump targets correctly? How do you deal with the
>>>>> difficulty of disassembly reducing to the halting problem?
>>>>>
>>>>> On Fri, Oct 23, 2015 at 4:59 PM, Shuai Wang <wangshuai901@gmail.com>
>>>>> wrote:
>>>>>
>>>>>> Hi guys,
>>>>>>
>>>>>> I am glad that you are interested in our work!!
>>>>>>
>>>>>> Actually this project starts over 1.5 years ago, and I believe at
>>>>>> that time, BAP (version 0.7 I believe?) is still a research prototyp=
e..
>>>>>>
>>>>>> I choose to implement from the stretch is because I want to have a
>>>>>> nice tool for my own research projects, also I can have an opportuni=
ty
>>>>>> to learn OCaml... :)
>>>>>>
>>>>>> Yes, I definitely would like to unite our efforts!!
>>>>>>
>>>>>> Best,
>>>>>> Shuai
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Fri, Oct 23, 2015 at 1:30 PM, Ivan Gotovchits <ivg@ieee.org>
>>>>>> wrote:
>>>>>>
>>>>>>> Hi Shuai,
>>>>>>>
>>>>>>> Nice work! But I'm curious, why didn't you use [bap][1] as a
>>>>>>> disassembler?
>>>>>>>
>>>>>>> Do you know, that we have a low-level interface to disassembling,
>>>>>>> like [linear_sweep][2] or even
>>>>>>> lower [Disasm_expert.Basic][3] interface, that can disassemble on
>>>>>>> instruction level granularity.
>>>>>>>
>>>>>>> It will be very interesting, if we can unite our efforts.
>>>>>>>
>>>>>>> Best wishes,
>>>>>>> Ivan Gotovchits
>>>>>>>
>>>>>>> [1]: https://github.com/BinaryAnalysisPlatform/bap
>>>>>>> [2]:
>>>>>>> http://binaryanalysisplatform.github.io/bap/api/master/Bap.Std.html=
#VALlinear_sweep
>>>>>>> [3]:
>>>>>>> http://binaryanalysisplatform.github.io/bap/api/master/Bap.Std.Disa=
sm_expert.Basic.html
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> On Fri, Oct 23, 2015 at 1:05 PM, Shuai Wang <wangshuai901@gmail.com>
>>>>>>> wrote:
>>>>>>>
>>>>>>>> Dear List,
>>>>>>>>
>>>>>>>> I=E2=80=99m glad to announce the first release of Uroboros:  an in=
frastructure
>>>>>>>> for reassembleable disassembling and transformation.
>>>>>>>>
>>>>>>>> You can find the code here: https://github.com/s3team/uroboros
>>>>>>>> You can find our research paper which describes the core technique
>>>>>>>> implemented in Uroboros here:
>>>>>>>>
>>>>>>>> https://www.usenix.org/system/files/conference/usenixsecurity15/se=
c15-paper-wang-shuai.pdf
>>>>>>>>
>>>>>>>> We will provide a project home page, as well as more detailed
>>>>>>>> documents in the near future.  Issues and pull requests welcomed.
>>>>>>>>
>>>>>>>> Happy hacking!
>>>>>>>>
>>>>>>>> Sincerely,
>>>>>>>> Shuai
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>
>>>>>
>>>>
>>>
>>

--047d7b47225e2d41c30522f5f7ef
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I though &quot;STIR&quot; refers to Binary Stirring [1].<d=
iv><br></div><div>Leveraging coq to verify the instrumentation correctness =
sounds=C2=A0</div><div>very interesting to me, although I am not aware of a=
ny existing related work.</div><div>Do you any existing work?</div><div><br=
></div><div>I think there do exist some static rewriter, such as DynInst.</=
div><div><br></div><div>[1] Binary Stirring:=C2=A0<a href=3D"http://www.utd=
allas.edu/~hamlen/wartell12ccs.pdf">http://www.utdallas.edu/~hamlen/wartell=
12ccs.pdf</a></div><div>[2] DynInst :=C2=A0<a href=3D"http://www.dyninst.or=
g/">http://www.dyninst.org/</a></div><div><br></div><div><br></div></div><d=
iv class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Sun, Oct 25, 201=
5 at 5:23 PM, Kenneth Adam Miller <span dir=3D"ltr">&lt;<a href=3D"mailto:k=
ennethadammiller@gmail.com" target=3D"_blank">kennethadammiller@gmail.com</=
a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0=
 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><p dir=3D"ltr">I&#39=
;m quite sure we are thinking of different things.</p>
<p dir=3D"ltr">STIR is a binary randomization technique used to mitigate ro=
p, and was developed in sitsu with the binary rewriting techniques. The tec=
hnique of retaining the original code section is a failback to guard agains=
t errors in rewriting, but to my knowledge doesn&#39;t impose a performance=
 penalty. Size required is a constant multiple, so I don&#39;t consider it =
an adoption hurdle. But everybody has different use scenarios.</p>
<p dir=3D"ltr">Right. Correctness is critical. I think co program proof met=
hodologies with tools like coq will shine here in proofs to remove required=
 trust that a rewrtten binary is conformant to certain execution properties=
.</p>
<p dir=3D"ltr">I hadn&#39;t know static rewriters even existed. I presume y=
ou are you talking about dynamic tools.</p><div class=3D"HOEnZb"><div class=
=3D"h5">
<div class=3D"gmail_quote">On Oct 25, 2015 4:49 PM, &quot;Shuai Wang&quot; =
&lt;<a href=3D"mailto:wangshuai901@gmail.com" target=3D"_blank">wangshuai90=
1@gmail.com</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"gma=
il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
t:1ex"><div dir=3D"ltr">Hello Kenneth,<div><br></div><div>Yes, I agree Bina=
ry Stirring system can eliminate symbolization false positive=C2=A0as well.=
 Actually I believe=C2=A0</div><div>many research work, and =C2=A0tools (Dy=
nInst, for instance) have implemented this a so-called &quot;replica-based&=
quot;=C2=A0</div><div>binary instrumentation framework. This is a quite rob=
ust way to instrument=C2=A0binary code, although size expansion and=C2=A0</=
div><div>performance penalty cannot be ignored in the instrumentation outpu=
ts. =C2=A0</div><div><br></div><div>However, I found those solutions are al=
l quite complex, and difficult to understand. And it might not be inaccurat=
e=C2=A0</div><div>to assume &quot;aggressive&quot; instrumentation methods =
can break the functionality due to the limitation of design,=C2=A0</div><di=
v>or challenges in bug-less implementation. I even found that some the-stat=
e-of-the-art binary instrumentation tools=C2=A0</div><div>cannot preserve t=
he correct functionality when employing them to instrument some SPEC2006 te=
st cases.=C2=A0</div><div><br></div><div>I personally would like to find so=
me cleaner solutions, which can introduce very little overhead in terms of =
binary=C2=A0</div><div>size and execution. Besides, some research work reve=
als that binary security applications built on top of previous=C2=A0</div><=
div>instrumentation framework do leave certain exploitable vulnerabilities =
due to the design limitations.=C2=A0</div><div><br></div><div>Sincerely,</d=
iv><div>Shuai</div><div><br></div><div><br></div><div><br></div><div><br></=
div><div><br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmail=
_quote">On Sun, Oct 25, 2015 at 3:25 PM, Kenneth Adam Miller <span dir=3D"l=
tr">&lt;<a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">ke=
nnethadammiller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gma=
il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
t:1ex"><div dir=3D"ltr">Replied inline<div class=3D"gmail_extra"><br><div c=
lass=3D"gmail_quote"><span>On Sun, Oct 25, 2015 at 3:04 PM, Shuai Wang <spa=
n dir=3D"ltr">&lt;<a href=3D"mailto:wangshuai901@gmail.com" target=3D"_blan=
k">wangshuai901@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gma=
il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
t:1ex"><div dir=3D"ltr">Hello Kenneth,<div><br></div><div>Sorry for the lat=
e reply. I have several deadlines during this weekend.=C2=A0</div><div><br>=
</div><div>To answer your question, our current approach cannot ensure 100%=
 &quot;reposition&quot; correct.=C2=A0</div><div>The most challenging part =
is to identify code pointers in global data sections, as we discussed=C2=A0=
</div><div>in our paper, it is quite difficult to handle even with some sta=
tic analysis techniques=C2=A0</div><div>(type inference, for instance). We =
do have some false positive, as shown in the appendix of our paper [1].=C2=
=A0</div><div>We will research more to eliminate the false positive.=C2=A0<=
/div><div><br></div><div>I believe it is doable to present a sound solution=
. It indeed requires some additional</div><div>trampolines inserted in the =
binary code. You may refer to this paper for some enlightens [2].=C2=A0</di=
v><div>=C2=A0</div><div>As for the disassembling challenges, we directly ad=
opt a disassembly approach proposed=C2=A0<br></div><div>by an excellent wor=
k [3]. You can check out their evaluation section, and find that their appr=
oach=C2=A0</div><div>can correctly disassemble large-size applications with=
out any error. My experience is that Linux ELF=C2=A0</div><div>binaries are=
 indeed easier to disassemble, and typical compilers (gcc; icc; llvm) would=
 not=C2=A0</div><div>insert data into code sections (the embedded data can =
trouble linear disassembler a lot).=C2=A0</div><div><br></div></div></block=
quote><div><br></div></span><div>I remember reading about [3] when it came =
out. That was a year after the original REINS system came out that proposed=
 re-writing binaries, along with it&#39;s companion STIR. Shingled disassem=
bly originated with Wartell et al.&#39;s seminal Distinguishing Code and Da=
ta PhD thesis. I&#39;m currently working on the integration of a sheering a=
nd PFSM enhanced Shingled Disassembler into BAP. But if you&#39;ve already =
implemented something like that, what would be really valuable is if you we=
re to review my shingled disassembler implementation and I review yours tha=
t way we have some cross review feedback.</div><div><br></div><div>Regardin=
g the need for 100% accuracy, in the REINS and STIR papers, the approach ta=
ken is to obtain very very high classification accuracy, but in the case th=
at correctness cannot be established, to simply retain each interpretation =
of a byte sequence, so you are still correct in the instance that it&#39;s =
code by treating it as such. Then, a companion technique is introduced wher=
ein the code section is retained in order that should such a data reference=
 in code instance occur and interpretation was incorrect, such reference ca=
n read and write into the kept section. But if it&#39;s code, it has been r=
ewritten in the new section. Then it should remain correct in any scenario.=
</div><span><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"mar=
gin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr=
"><div></div><div>However, if I am asked to work on PE binaries, then I wil=
l probably start from IDA-Pro.=C2=A0</div><div>We consider the disassemblin=
g challenge is orthogonal to our research.=C2=A0</div></div></blockquote><d=
iv><br></div></span><div>It is good to have good interoperabiblity with IDA=
 as a guided disassembler and the actual new research tools. One of the mos=
t valuable things I can think of is to write some plugin that will mechaniz=
e data extraction as needed in order to accelerate manual intervention with=
 the newer tools, such as in the case of training.</div><span><div>=C2=A0</=
div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div><br></div><div>IMH=
O, our research reveals the (important) fact that even though theoretically=
 relocation issue=C2=A0</div><div>is hard to solve with 100% accuracy, it m=
ight not be as troublesome as it was assumed by previous work.</div><div>Si=
mple solutions can achieve good results.=C2=A0</div></div></blockquote><div=
><br></div></span><div>Agreed; there are failback stratagems.</div><span><d=
iv>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div><br></d=
iv><div>I hope it answers your questions, otherwise, please let me know :)=
=C2=A0</div><div><br></div><div>Best,</div><div>Shuai</div><div><br></div><=
div>[1] Shuai Wang, Pei Wang, Dinghao Wu, Reassembleable Disassembling.</di=
v><div>[2]=C2=A0<span style=3D"color:rgb(51,51,51);font-family:Consolas,&#3=
9;Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12px;line-height:1=
6.7999992370605px;white-space:pre-wrap">Zhui </span><span style=3D"color:rg=
b(51,51,51);font-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,mo=
nospace;font-size:12px;line-height:16.7999992370605px;white-space:pre-wrap"=
>Deng, Xiangyu Zhang, Dongyan Xu, </span><span style=3D"color:rgb(51,51,51)=
;font-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;fon=
t-size:12px;line-height:16.7999992370605px;white-space:pre-wrap">BISTRO: Bi=
nary Component Extraction and Embedding for Software Security Applications<=
/span></div><div>[3]=C2=A0<span style=3D"color:rgb(51,51,51);font-family:Co=
nsolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;font-size:12px;lin=
e-height:16.7999992370605px;white-space:pre-wrap">Mingwei </span><span styl=
e=3D"color:rgb(51,51,51);font-family:Consolas,&#39;Liberation Mono&#39;,Men=
lo,Courier,monospace;font-size:12px;line-height:16.7999992370605px;white-sp=
ace:pre-wrap">Zhang, Sekar, R, </span><span style=3D"color:rgb(51,51,51);fo=
nt-family:Consolas,&#39;Liberation Mono&#39;,Menlo,Courier,monospace;font-s=
ize:12px;line-height:16.7999992370605px;white-space:pre-wrap">Control Flow =
Integrity for COTS Binaries.</span></div><div><br></div><div><br></div></di=
v></blockquote><div><br></div></span><div>There&#39;s a good utility for wo=
rking with white papers and interacting with colleagues; mendeley.<br></div=
><div><div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"=
><div></div><div><br></div><div><br></div><div><br></div><div><br></div></d=
iv><div><div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On F=
ri, Oct 23, 2015 at 6:31 PM, Kenneth Adam Miller <span dir=3D"ltr">&lt;<a h=
ref=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">kennethadammil=
ler@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" st=
yle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
dir=3D"ltr">Well it&#39;s interesting that you&#39;ve gone with a binary re=
compilation approach. How do you ensure that, statically, for any given edi=
t, you reposition all the jump targets correctly? How do you deal with the =
difficulty of disassembly reducing to the halting problem?</div><div><div><=
div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Fri, Oct 23, 20=
15 at 4:59 PM, Shuai Wang <span dir=3D"ltr">&lt;<a href=3D"mailto:wangshuai=
901@gmail.com" target=3D"_blank">wangshuai901@gmail.com</a>&gt;</span> wrot=
e:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
eft:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Hi guys,<div><br></di=
v><div>I am glad that you are interested in our work!!=C2=A0</div><div><br>=
</div><div>Actually this project starts over 1.5 years ago, and I believe a=
t that time, BAP (version 0.7 I believe?) is still a research prototype..</=
div><div><br></div><div>I choose to implement from the stretch=C2=A0is beca=
use I want to have a nice tool for my own research projects, also I can hav=
e an opportunity</div><div>to learn OCaml... :)</div><div><br></div><div>Ye=
s, I definitely would like to unite our efforts!!=C2=A0</div><div><br></div=
><div>Best,</div><div>Shuai</div><div><br></div><div><br></div><div><br></d=
iv></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote"><span>On=
 Fri, Oct 23, 2015 at 1:30 PM, Ivan Gotovchits <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:ivg@ieee.org" target=3D"_blank">ivg@ieee.org</a>&gt;</span> wro=
te:<br></span><div><div><blockquote class=3D"gmail_quote" style=3D"margin:0=
 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Hi =
Shuai,<div><br></div><div>Nice work! But I&#39;m curious, why didn&#39;t yo=
u use [bap][1] as a disassembler?=C2=A0</div><div><br></div><div>Do you kno=
w, that we have a low-level interface to disassembling, like [linear_sweep]=
[2] or even</div><div>lower [Disasm_expert.Basic][3] interface, that can di=
sassemble on instruction level granularity.</div><div><br></div><div>It wil=
l be very interesting, if we can unite our efforts.</div><div><br></div><di=
v>Best wishes,</div><div>Ivan Gotovchits</div><div><br></div><div>[1]:=C2=
=A0<a href=3D"https://github.com/BinaryAnalysisPlatform/bap" target=3D"_bla=
nk">https://github.com/BinaryAnalysisPlatform/bap</a></div><div>[2]:=C2=A0<=
a href=3D"http://binaryanalysisplatform.github.io/bap/api/master/Bap.Std.ht=
ml#VALlinear_sweep" target=3D"_blank">http://binaryanalysisplatform.github.=
io/bap/api/master/Bap.Std.html#VALlinear_sweep</a></div><div>[3]:=C2=A0<a h=
ref=3D"http://binaryanalysisplatform.github.io/bap/api/master/Bap.Std.Disas=
m_expert.Basic.html" target=3D"_blank">http://binaryanalysisplatform.github=
.io/bap/api/master/Bap.Std.Disasm_expert.Basic.html</a></div><div><br></div=
><div><br></div><div><br></div></div><div><div><div class=3D"gmail_extra"><=
br><div class=3D"gmail_quote">On Fri, Oct 23, 2015 at 1:05 PM, Shuai Wang <=
span dir=3D"ltr">&lt;<a href=3D"mailto:wangshuai901@gmail.com" target=3D"_b=
lank">wangshuai901@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"=
gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-=
left:1ex"><div dir=3D"ltr"><div><span style=3D"font-size:12.8000001907349px=
">Dear List,</span></div><div><br></div>I=E2=80=99m glad to=C2=A0<span>anno=
unce</span>=C2=A0the first release of Uroboros: =C2=A0an i<span style=3D"co=
lor:rgb(51,51,51);font-family:&#39;Helvetica Neue&#39;,Helvetica,&#39;Segoe=
 UI&#39;,Arial,freesans,sans-serif;line-height:25.6000003814697px">nfrastru=
cture for reassembleable disassembling and transformation.</span><div style=
=3D"font-size:12.8000001907349px"><br></div><div style=3D"font-size:12.8000=
001907349px">You can find the code here:=C2=A0<a href=3D"https://github.com=
/s3team/uroboros" target=3D"_blank">https://github.com/s3team/uroboros</a>=
=C2=A0</div><div style=3D"font-size:12.8000001907349px">You can find our re=
search paper which describes the core technique implemented in Uroboros her=
e:=C2=A0</div><div><a href=3D"https://www.usenix.org/system/files/conferenc=
e/usenixsecurity15/sec15-paper-wang-shuai.pdf" target=3D"_blank"><span styl=
e=3D"font-size:12.8000001907349px">https://www.usenix.org/system/files/conf=
erence/usenixsecurity15/sec15-paper-wang-shuai.pdf</span><br></a></div><div=
><span style=3D"font-size:12.8000001907349px"><br></span></div><div style=
=3D"font-size:12.8000001907349px">We will provide a project home page, as w=
ell as more detailed documents in the near future. =C2=A0<span style=3D"fon=
t-size:12.8000001907349px">Issues and pull requests welcomed.</span></div><=
div style=3D"font-size:12.8000001907349px"><div style=3D"font-size:12.80000=
01907349px"><br></div><div style=3D"font-size:12.8000001907349px">Happy hac=
king!</div><div style=3D"font-size:12.8000001907349px"><br></div></div><div=
 style=3D"font-size:12.8000001907349px">Sincerely,</div><div style=3D"font-=
size:12.8000001907349px">Shuai</div></div>
</blockquote></div><br></div>
</div></div></blockquote></div></div></div><br></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div></div></div><br></div></div>
</blockquote></div><br></div>
</blockquote></div>
</div></div></blockquote></div><br></div>

--047d7b47225e2d41c30522f5f7ef--
