Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 650397ED1D
	for <caml-list@sympa.inria.fr>; Tue, 13 Oct 2015 08:09:58 +0200 (CEST)
IronPort-PHdr: 9a23:F47qKhRG0z3AbcUS6O9UT4vSUtpsv+yvbD5Q0YIujvd0So/mwa64bRyN2/xhgRfzUJnB7Loc0qyN4/ymCTZLu8jY+Fk5M7VyFDY9wf0MmAIhBMPXQWbaF9XNKxIAIcJZSVV+9Gu6O0UGUOz3ZlnVv2HgpWVKQka3CwN5K6zPF5LIiIzvjqbpq8GVM18D3mTkKZpJbzyI7izp/vEMhoVjLqtjgjDomVBvP9ps+GVzOFiIlAz97MrjtLRq8iBXpu5zv5UYCfayV+0CQLdZFDUrNXwurI2u7EGbDFjH2nxJe28amx5MCgiN1xj0UJb9sy33/r500iWTOcn/TfYvUDqs7qtqThLAhyIONjp/+2bS3J9elqVe9Sqhphh+25bZKL+YPvdkNvfFfdIeRHJZU4BPWiZMGKuzaoIOC6wKOuMO/Nq1nEcHsRbrXVrkP+jo0DIdwyauhaA=
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=philippe.veber@gmail.com; spf=Pass smtp.mailfrom=philippe.veber@gmail.com; spf=None smtp.helo=postmaster@mail-wi0-f177.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  philippe.veber@gmail.com designates 209.85.212.177 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wi0-f177.google.com) identity=helo;
  client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-wi0-f177.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0ClAwCcnxxWm7HUVdFdg0U1bgatAZJxJYJuggp/AoE0BzsRAQEBAQEBAQEQAQEBAQEGCwsJIS6CH4IIAQEDARIRBBkBGw8OAQMBCwYFCzcCAiEBAREBBQEcBhMih3YBAwoIDZ55gTE+MYtJgWyCeYkFChknDVaEQwEBAQEBAQEDAQEBAQEBAQEUAQUOhmeEfoJQgj0HgmmBRQWWFYUZhg2BdIIgkhyFfRIjgRcRJoIwDRYHFoFAPDOGcQEBAQ
X-IPAS-Result: A0ClAwCcnxxWm7HUVdFdg0U1bgatAZJxJYJuggp/AoE0BzsRAQEBAQEBAQEQAQEBAQEGCwsJIS6CH4IIAQEDARIRBBkBGw8OAQMBCwYFCzcCAiEBAREBBQEcBhMih3YBAwoIDZ55gTE+MYtJgWyCeYkFChknDVaEQwEBAQEBAQEDAQEBAQEBAQEUAQUOhmeEfoJQgj0HgmmBRQWWFYUZhg2BdIIgkhyFfRIjgRcRJoIwDRYHFoFAPDOGcQEBAQ
X-IronPort-AV: E=Sophos;i="5.17,676,1437429600"; 
   d="scan'208";a="150348950"
Received: from mail-wi0-f177.google.com ([209.85.212.177])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 13 Oct 2015 08:09:57 +0200
Received: by wieq12 with SMTP id q12so14628395wie.1
        for <caml-list@inria.fr>; Mon, 12 Oct 2015 23:09:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=wu5K6PTOp5iTgEdZOk55Rhfz/eL4zcpj4JcwGGxd8xE=;
        b=wP++37TF6iAPhwyD6gTenkkMSXl8LbFfeQwEW/MHN4mIumzhMlgN4k4lz1qTirWAbE
         c1anFrkDJ6yuBvSnWHalm0kv65IR9s9nFv7PfNnG8/RMF4cgbLXMy8lf/BdUipfrYgxr
         e76rvHAyMp0zjt8HmTkW35aqUsW+ZaX3htw8cFCZgQ+ajK8elQWu6REW4/3/z0phsvVk
         t6oKwJihABzSr/BWMdwVcVdAsHTUtTqZev8LokE8LUoWWi7faNo0ZwWUVkKvUFLUzN+l
         YnxYcL5N3gRgMteMCJB5FRe3kGLO+okPv05+D//eKN9zRPpxSO8RQBD2RkGsAvYhxnoD
         C5wQ==
X-Received: by 10.180.8.164 with SMTP id s4mr19636237wia.5.1444716597393; Mon,
 12 Oct 2015 23:09:57 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.28.140.85 with HTTP; Mon, 12 Oct 2015 23:09:37 -0700 (PDT)
In-Reply-To: <CALx9x4dgS_1_SFGu3Qn77UH8dw957A-s2h44Gri4UbRRBRQ6FQ@mail.gmail.com>
References: <CALx9x4dgS_1_SFGu3Qn77UH8dw957A-s2h44Gri4UbRRBRQ6FQ@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Tue, 13 Oct 2015 08:09:37 +0200
Message-ID: <CAOOOohSiFxCb59ZfifNDofZXF55kxFAqtf0AtoWfJh=ApqrwYQ@mail.gmail.com>
To: Abdallah Saffidine <abdallah.saffidine@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0442807e96c0460521f64bcf
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] How to use GADTs across modules in OCaml without
 raising warnings?

--f46d0442807e96c0460521f64bcf
Content-Type: text/plain; charset=UTF-8

Hi Abdallah,

  I came across the very same observation a few days ago. I'm not an expert
on typing but here's how I understand it: in gadt1.ml the declaration of
never makes it clear it is an empty type, which in particular is different
from bool. Now the signature of Gadt1 as seen by Gadt2 is:

module Gadt1 : sig
  type never
  type _ t1 = A1 : never t1 | B1 : bool t1
  [...]
end

This implies that Gadt2 doesn't see Gadt1.never as an empty type, but
rather as an abstract type, and so has no indication that it is different
from bool. The signature could as well be hiding a definition like type
never = bool. So in Gadt2, the exhaustiveness checker has no way to do its
job, hence the puzzling behavior you observe.

In my case I changed the definition of my phantom types from empty to
polymorphic variant types and made them explicit in the signature of the
module.

module Gadt1 : sig
  type never = [`never]
  [...]
end

I hope this intuitive explanation is not too far from the truth :o)!

Cheers,
  Philippe.


2015-10-13 7:27 GMT+02:00 Abdallah Saffidine <abdallah.saffidine@gmail.com>:

> Hi all,
>
> I am reposting this SO question
> <http://stackoverflow.com/questions/33093807/how-to-use-gadts-across-modules-in-ocaml-without-raising-warnings>.
> I suspect there might be a bug in the implementation of Warning 8.
>
> Thanks,
> Abdallah
>
> I have two files: gadt1.ml and gadt2.ml and the second depends on the
> first.
>
> gadt1.ml:
>
> type nevertype _ t1 = A1 : never  t1 | B1 : bool t1type _ t2 = A2 : string t2 | B2 : bool t2let get1 : bool t1 -> bool = function B1 -> truelet get2 : bool t2 -> bool = function B2 -> true
>
> gadt2.ml:
>
> let get1 : bool Gadt1.t1 -> bool = function Gadt.B1 -> truelet get2 : bool Gadt1.t2 -> bool = function Gadt.B2 -> true
>
> when I compile using ocaml 4.02.3 (ocamlbuild gadt2.native), I get a
> warning 8 about the function Gadt2.get1 not being exhaustive. I am quite
> puzzled that Gadt2.get1 raises a warning while Gadt1.get1 and Gadt2.get2
> don't.
>
> My assumption was that the empty type never cannot be equal to bool so
> Gadt2.get1 should not raise a warning. On the other hand, if I call
> Gadt2.get1 with argument A1, I get a type error (as desired). Is the
> warning expected behaviour or a bug? What did I miss?
>
>

--f46d0442807e96c0460521f64bcf
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>Hi Abdallah,<br><br></div>=C2=A0 I came acr=
oss the very same observation a few days ago. I&#39;m not an expert on typi=
ng but here&#39;s how I understand it: in <a href=3D"http://gadt1.ml" targe=
t=3D"_blank">gadt1.ml</a> the declaration of never makes it clear it is an =
empty type, which in particular is different from bool. Now the signature o=
f Gadt1 as seen by Gadt2 is:<br><br></div><span style=3D"font-family:monosp=
ace,monospace">module Gadt1 : sig<br></span></div><span style=3D"font-famil=
y:monospace,monospace">=C2=A0 type never<br><code><span>=C2=A0 type</span><=
span> _ t1 </span><span>=3D</span><span> A1 </span><span>:</span><span> nev=
er  t1 </span><span>|</span><span> B1 </span><span>:</span><span> bool t1</=
span></code><br>=C2=A0 [...]<br></span><div><span style=3D"font-family:mono=
space,monospace">end<br></span><br></div><div class=3D"gmail_extra">This im=
plies that Gadt2 doesn&#39;t see Gadt1.never as an empty type, but rather a=
s an abstract type, and so has no indication that it is different from bool=
. The signature could as well be hiding a definition like type never =3D bo=
ol. So in Gadt2, the exhaustiveness checker has no way to do its job, hence=
 the puzzling behavior you observe.<br><br></div><div class=3D"gmail_extra"=
>In my case I changed the definition of my phantom types from empty to poly=
morphic variant types and made them explicit in the signature of the module=
.<br><br></div><div class=3D"gmail_extra"><font face=3D"monospace,monospace=
">module Gadt1 : sig<br></font></div><div class=3D"gmail_extra"><font face=
=3D"monospace,monospace">=C2=A0 type never =3D [`never]<br>=C2=A0 [...]<br>=
</font></div><div class=3D"gmail_extra"><font face=3D"monospace,monospace">=
end<br><br></font></div><div class=3D"gmail_extra"><font face=3D"monospace,=
monospace"><font face=3D"arial,helvetica,sans-serif">I hope this intuitive =
explanation is not too far from the truth :o)!<br><br></font></font></div><=
div class=3D"gmail_extra"><font face=3D"monospace,monospace"><font face=3D"=
arial,helvetica,sans-serif">Cheers,<br></font></font></div><div class=3D"gm=
ail_extra"><font face=3D"monospace,monospace"><font face=3D"arial,helvetica=
,sans-serif">=C2=A0 Philippe.<br></font></font></div><div class=3D"gmail_ex=
tra"><font face=3D"monospace,monospace"><br></font></div><div class=3D"gmai=
l_extra"><br><div class=3D"gmail_quote">2015-10-13 7:27 GMT+02:00 Abdallah =
Saffidine <span dir=3D"ltr">&lt;<a href=3D"mailto:abdallah.saffidine@gmail.=
com" target=3D"_blank">abdallah.saffidine@gmail.com</a>&gt;</span>:<br><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #c=
cc solid;padding-left:1ex"><div dir=3D"ltr"><div><div>Hi all,<br><br>I am r=
eposting this <a href=3D"http://stackoverflow.com/questions/33093807/how-to=
-use-gadts-across-modules-in-ocaml-without-raising-warnings" target=3D"_bla=
nk">SO question</a>. I suspect there might be a bug in the implementation o=
f Warning 8.<br><br></div>Thanks,<br></div>Abdallah<br><div><div><br><p>I h=
ave two files: <a href=3D"http://gadt1.ml" target=3D"_blank">gadt1.ml</a> a=
nd <a href=3D"http://gadt2.ml" target=3D"_blank">gadt2.ml</a> and the secon=
d depends on the first.</p>

<p><a href=3D"http://gadt1.ml" target=3D"_blank">gadt1.ml</a>:</p>

<pre><code><span>type</span><span> never
</span><span>type</span><span> _ t1 </span><span>=3D</span><span> A1 </span=
><span>:</span><span> never  t1 </span><span>|</span><span> B1 </span><span=
>:</span><span> bool t1
</span><span>type</span><span> _ t2 </span><span>=3D</span><span> A2 </span=
><span>:</span><span> string t2 </span><span>|</span><span> B2 </span><span=
>:</span><span> bool t2
</span><span>let</span><span> get1 </span><span>:</span><span> bool t1 </sp=
an><span>-&gt;</span><span> bool </span><span>=3D</span><span> </span><span=
>function</span><span> B1 </span><span>-&gt;</span><span> </span><span>true=
</span><span>
</span><span>let</span><span> get2 </span><span>:</span><span> bool t2 </sp=
an><span>-&gt;</span><span> bool </span><span>=3D</span><span> </span><span=
>function</span><span> B2 </span><span>-&gt;</span><span> </span><span>true=
</span></code></pre>

<p><a href=3D"http://gadt2.ml" target=3D"_blank">gadt2.ml</a>:</p>

<pre><code><span>let</span><span> get1 </span><span>:</span><span> bool Gad=
t1</span><span>.</span><span>t1 </span><span>-&gt;</span><span> bool </span=
><span>=3D</span><span> </span><span>function</span><span> Gadt</span><span=
>.</span><span>B1 </span><span>-&gt;</span><span> </span><span>true</span><=
span>
</span><span>let</span><span> get2 </span><span>:</span><span> bool Gadt1</=
span><span>.</span><span>t2 </span><span>-&gt;</span><span> bool </span><sp=
an>=3D</span><span> </span><span>function</span><span> Gadt</span><span>.</=
span><span>B2 </span><span>-&gt;</span><span> </span><span>true</span></cod=
e></pre>

<p>when I compile using ocaml 4.02.3 (<code>ocamlbuild gadt2.native</code>)=
, I get a warning 8 about the function Gadt2.get1 not being exhaustive. I a=
m quite puzzled that <code>Gadt2.get1</code> raises a warning while <code>G=
adt1.get1</code> and <code>Gadt2.get2</code> don&#39;t.</p>

<p>My assumption was that the empty type <code>never</code> cannot be equal=
 to <code>bool</code> so <code>Gadt2.get1</code> should not raise a warning=
. On the other hand, if I call <code>Gadt2.get1</code> with argument <code>=
A1</code>, I get a type error (as desired). Is the warning expected behavio=
ur or a bug? What did I miss?</p><br></div></div></div>
</blockquote></div><br></div></div>

--f46d0442807e96c0460521f64bcf--
