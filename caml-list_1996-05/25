Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id OAA07897 for caml-redistribution; Tue, 28 May 1996 14:04:22 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id NAA07665 for <caml-list@pauillac.inria.fr>; Tue, 28 May 1996 13:48:35 +0200
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1]) by concorde.inria.fr (8.7.1/8.7.1) with ESMTP id NAA26868 for <caml-list@pauillac.inria.fr>; Tue, 28 May 1996 13:48:33 +0200 (MET DST)
Received: from orion.kurims.kyoto-u.ac.jp (orion.kurims.kyoto-u.ac.jp [130.54.16.5]) by kurims.kurims.kyoto-u.ac.jp (8.7.3/3.4W2) with SMTP id UAA13993; Tue, 28 May 1996 20:48:24 +0900 (JST)
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
Date: Tue, 28 May 1996 20:48:24 +0900
Message-Id: <199605281148.UAA15218@orion>
To: 100060.2106@compuserve.com
CC: caml-list@pauillac.inria.fr
In-reply-to: <960525202556_100060.2106_JHB98-1@CompuServe.COM> (message from ESPERET PHILIPPE on 25 May 96 16:25:56 EDT)
Subject: Re: Oo.copy
Sender: weis
Status: O


>>>>> ESPERET PHILIPPE <100060.2106@compuserve.com> writes:

 >    I cannot understand how to access a fresh copy of an object with
 > O'Caml (Oo seems normally to copy only pointers).  Thank you if someone
 > can explain me how to get such a copy (please see below for an example).

 >    One related problem is : the documentation for O'Caml exists but is not
 > so thick ; it could be useful to have a list where true beginners in
 > OCaml might ask their questions and find examples.

   

 > class virtual 'a matrix(sz,init:int*'a) as self=
 >   val size=sz
 >   val m=Array.create_matrix sz sz init
 >   val zero=init 
 >   virtual printa:'a -> unit
 >   (*method copy()=new matrix(size,zero)
 >    forbidden: One cannot create instances of the virtual class matrix*)
 >   method m=m
 >   method set(i,j,nval:int*int*'a)= m.(i).(j) <- nval
 >   method build(f:int->int->'a)=for i=0 to size-1 do
 >                                  for j=0 to size-1 do 
 >                                    m.(i).(j)<- f i j done done;self
 >   method print()=for i=0 to size-1 do
 >                    for j=0 to size-1 do 
 >                      self#printa m.(i).(j);
 >                      print_char ';' done; 
 >                    print_newline() done
 >   end

 > class int_matrix (sz:int)=
 >   inherit (int) matrix (sz,0)
 >   method printa=print_int
 > end

 > let m=new int_matrix 3;;
 > (m#build (fun i j->i+j))#print();;
 > m#print();;
0;1;2;
1;2;3;
2;3;4;
 > let n=Oo.copy m;;
 > (*let nn=m#copy();;*)
 > m#set(1,1,66);;
 > n#print();;
 > (*nn#print();;*)
0;1;2;
1;66;3;
2;3;4;

The problem is that your array is shared between the two copies.
There are various specific ways to solve it.

One is to add an "unsharing" method in the virtual class, which is
applied after copying.

  val mutable m = ...
  method unshare = m <- Array.map Array.copy m
  method copy = let o = Oo.copy m in o#unshare; o

Then the problem is solved by using
> let n = m#copy;;

This is difficult to have a general way, since mutable data structures 
can get various forms.

	Jacques
---------------------------------------------------------------------------
Jacques Garrigue	Kyoto University      garrigue@kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>



