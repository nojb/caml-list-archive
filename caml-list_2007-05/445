Return-Path: <robert@fischerventure.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 22849BC0A
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 19:57:41 +0200 (CEST)
Received: from looneymail-a1.g.dreamhost.com (d071c805.dreamhost.com [208.113.200.5])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4NHvdSI003407
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 19:57:40 +0200
Received: from [192.168.101.113] (unknown [66.84.219.53])
	by looneymail-a1.g.dreamhost.com (Postfix) with ESMTP id E089215F3DF
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 10:57:37 -0700 (PDT)
Message-ID: <46548090.9090008@fischerventure.com>
Date: Wed, 23 May 2007 12:57:36 -0500
From: Robert C Fischer <robert@fischerventure.com>
Reply-To: robert.fischer@SmokejumperIT.com
Organization: Fischer Venture Managment Corporation
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: Re: Teaching bottomline,	part 3: what should
 improve.
References: <20070523100002.6B193BC73@yquem.inria.fr>	<3A6A724D-68A1-4D21-8EF8-7B39F64110E6@yahoo.fr> <46547446.2000408@naughtydog.com>
In-Reply-To: <46547446.2000408@naughtydog.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 46548093.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; swapped:01 inputs:01 pke:01 closures:01 wrote:01 wrote:01 abstract:01 caml-list:01 functions:01 computation:01 computation:01 expression:02 expression:02 yellow:97 essentially:02 

I actually did something like this back in my CSci education.  We would 
debug programs by isolating the buggy code, then having each student be 
one expression in the code, and walk through the program having each 
person perform their little function.  Of course, you got "swapped out" 
if you failed to perform your expression right -- it was surprisingly 
fun and provided a nice way to visualize things going on in an otherwise 
abstract system.

~~ Robert.

Pal-Kristian Engstad wrote:
> Vincent Aravantinos wrote:
>> Those are typically the comments of a 
>> "used-to-functional-programming" guy.
>> It certainly doesn't match what a beginner would think (no beginner 
>> will call a
>> function a "value").
> This reminds me of a "game" I used to teach my math students the 
> concept of a function. I think it should be able to be used for an 
> introductory computer science class as well.
>
> Essentially, the game involves having person A come up with a rule. 
> Person B will have to provide an input value, and A has to faithfully 
> give the result of the rule/computation. Examples of functions could 
> be \x->x+2, \x->2*x, etc. More interesting examples involves the 
> function that returns the first letter of the name of the input (f 
> "one" = "o"), or the successor of a "red, yellow, green" traffic light 
> symbol.
>
> When doing this, A and B will quickly have to agree on the allowed 
> input values (the domain) and in order to have a chance it is also 
> helpful if B knows the range of output values (the image). And for 
> sure - they will have to agree that the rule x = y => f(x) = f(y) has 
> to hold in order to be able to guess what "f" is. [I would also 
> disallow closures for this game - otherwise it would be too hard to 
> guess.]
>
> The reason this exercise is good is that it teaches the students (in a 
> fun way) the important concepts behind a function. It will make them 
> understand that a function is just a computation, but also point out 
> the importance of defining the types (sets) of inputs and outputs. I 
> think that after playing this game, you can venture to talk about the 
> "name" of the function, and they will realize that it does not matter 
> what the name of the function is - just what it does.
>
> Perhaps after this, you can teach the concept of treating a function 
> as a value, or input to another function? Person A makes a function 
> that takes person B's function, etc.
>
> Thanks,
>
> PKE
>

