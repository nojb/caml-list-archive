Return-Path: <robert.fischer@SmokejumperIT.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 04258BC0A
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 21:54:05 +0200 (CEST)
Received: from looneymail-a4.g.dreamhost.com (d071c805.dreamhost.com [208.113.200.5])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4NJs33w004228
	for <caml-list@inria.fr>; Wed, 23 May 2007 21:54:04 +0200
Received: from [192.168.101.113] (unknown [66.84.219.53])
	by looneymail-a4.g.dreamhost.com (Postfix) with ESMTP id BBFD3125EAE
	for <caml-list@inria.fr>; Wed, 23 May 2007 12:54:02 -0700 (PDT)
Message-ID: <46549BD9.3090505@SmokejumperIT.com>
Date: Wed, 23 May 2007 14:54:01 -0500
From: Robert Fischer <robert.fischer@SmokejumperIT.com>
Organization: Smokejumper Consulting
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: Re: [Caml-list] Teaching bottomline, part 3: what should improve.
References: <1179871823.6966.78.camel@Blefuscu>	<200705230039.29659.jon@ffconsultancy.com>	<20070523185428.GA32681@furbychan.cocan.org> <4654959C.7040701@fischerventure.com> <4654975F.5060108@janestcapital.com>
In-Reply-To: <4654975F.5060108@janestcapital.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 46549BDB.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; haskell:01 denoting:01 parallelism:01 threads:01 erlang:01 haskell:01 wrote:01 wrote:01 caml-list:01 concurrency:02 functional:02 functional:02 languages:03 languages:03 locks:03 

Granted, although I haven't played with Haskell+STM: the point I was 
trying to make was that we need to be denoting parallelism instead of 
implementing it.  To that end, functional languages are better for that 
kind of work (due to their disdain of side effects, if nothing else).

Robert Fischer
IT Firefighter
Smokejumper Consulting



Brian Hurt wrote:
> Robert C Fischer wrote:
>
>> ...and locks and threads are not a viable long-term solution to the 
>> problem of concurrency in general.  You're future-proofing enough by 
>> teaching them functional languages: Erlang and Cilk are closer to the 
>> needed future.
>>
> I think you mean "Haskell+STM" instead of Cilk.  Cilk isn't a 
> particularly functional language (being effectively C plus a little bit).
>
> Brian
>
>

