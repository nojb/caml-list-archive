Return-Path: <pablo.polvorin@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,HTML_MESSAGE,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 38D66BC0A
	for <caml-list@yquem.inria.fr>; Sun,  6 May 2007 05:33:09 +0200 (CEST)
Received: from nz-out-0506.google.com (nz-out-0506.google.com [64.233.162.233])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l463X72r021541
	for <caml-list@yquem.inria.fr>; Sun, 6 May 2007 05:33:08 +0200
Received: by nz-out-0506.google.com with SMTP id s1so1293776nze
        for <caml-list@yquem.inria.fr>; Sat, 05 May 2007 20:33:07 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=A7ai5803ZgBufgu4a1uHWVD3W0Dfno8PmzEBSTY7GHUaQyM29NSvEIPm3+oVeDM9NSXCNWmjYsV9v2CRSxOqlQGybnHE4WButqDXZl3v3Haijc0r+CizvlPpbFqFONRlAUFg3Ex32ZcbiKPYTigWDpvLZPlzsLC3wXUE4y+qnqU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=UBzOJiJ0lH1RMgP/xQjLlD8FZ9QrA4SzQuvXL7V8kMwyKsr9lg4ilFv/sBvj1Yg3TmlpGtzfuMZEpw7Ox1goUKJ7zEEr5gSokWFGeYR4teHo/N7I8xuJydv+PhJ9Xz/5l1SulHX2ay8/aL0uoH+GS0UkR7Ny7v04dGBalZ8UorE=
Received: by 10.114.133.1 with SMTP id g1mr255773wad.1178422387115;
        Sat, 05 May 2007 20:33:07 -0700 (PDT)
Received: by 10.115.59.8 with HTTP; Sat, 5 May 2007 20:33:06 -0700 (PDT)
Message-ID: <1ffe809c0705052033p6079116fq2a30f5dd942789aa@mail.gmail.com>
Date: Sun, 6 May 2007 05:33:06 +0200
From: "Pablo Polvorin" <pablo.polvorin@gmail.com>
To: "Gabriel Kerneis" <gabriel.kerneis@enst.fr>
Subject: Re: [Caml-list] beginner question: DAGs w/ recursive types an encapsulation of a Map
Cc: caml-list@yquem.inria.fr
In-Reply-To: <20070505025954.71b5a5b5@kerneis.info>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_77564_25299918.1178422386893"
References: <c7aa30ea0705041646q75ba495ew229aec84ead3ec2e@mail.gmail.com>
	 <20070505025954.71b5a5b5@kerneis.info>
X-j-chkmail-Score: MSGID : 463D4C74.000 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 463D4C74.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 recursive:01 arbitrarily:01 node:01 node:01 val:01 'ocaml:01 nodes:01 ocaml:01 sig:01 val:01 bool:01 bool:01 iter:01 beginner's:01 

------=_Part_77564_25299918.1178422386893
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Sorry, may be a stupid question, but i dont get it.
What is the difference between the first and second solution that you
propose, that make the second less safe?.
As far as i understand, both are recursive type declarations. I do read som=
e
post related to this topic.. but fail to fully understand it.
what i missing here?



Sorry for the

2007/5/5, Gabriel Kerneis <gabriel.kerneis@enst.fr>:
>
> Le Fri, 4 May 2007 16:46:29 -0700, "Justin Corn" <justincorn@gmail.com>
> a =E9crit :
> > 1) Is it possible to declare a recursive type that would allow for a
> > tree having an arbitrarily large number of children per node?
>
> Yes.
>
> > I couldn't figure that one out, so I was thinking I could use a Map
> > collection to represent edges.
>
> For example, using association lists :
> # type tree =3D Leaf of int | Node of int * (char * node) list ;;
> type tree =3D Leaf of int | Node of int * (char * node) list
> # Node (2,[('a',Leaf 5)]);;
> - : tree =3D Node (2, [('a', Leaf 5)])
>
> Or even :
>
> # type tree' =3D  int  * (char * tree') list ;;
> type tree' =3D int * (char * tree') list
> # let t : tree' =3D (2,[('a',(5,[]))]);;
> val t : tree' =3D (2, [('a', (5, []))])
>
> The second solution involves recursive types : you must run 'ocaml
> -rectypes' to use it. It could be unsafe and shouldn't be used unless
> you're perfectly aware of what you're doing.
>
> > 2) How do you wrap a Map in an object or record?  In my case the edges
> > represent single characters, so I started with
> >
> > #module CharMap =3D Map.Make(Char);;
>
> Good idea : lists are not very efficient, so the solution shown above
> will be greatly improved using Maps (especially if you've got a large
> number of edges).
>
> > but then the top level was not happy with
> >
> > #type node =3D { a: int; b: CharMap.t };;
> The type constructor CharMap.t expects 1 argument(s),
> but is here applied to 0 argument(s)
>
> Map expects an argument : Char is the type of the key (as you can see
> on the type, when you create CharMap[1] ), but you must define the
> type of the values. Here, you want to store nodes, so :
> #type node =3D { a: int; b: node CharMap.t };;
>
> If you prefer a generic node type, you can do :
> # type 'a node =3D { a: int; b: 'a  CharMap.t };;
> (this is a just an example of how keeping things generic - here, it's
> totally useless)
>
> > 3) If there are preexisting graphical libraries for ocaml, maybe I
> > should just use those, but after searching a bit I was unable to find
> > any.  Does someone know where I could find one?
>
> Depends on what you want to do. Have a look at the Caml Hump [2].
>
>
> [1]
> # module CharMap =3D Map.Make(Char);;
> module CharMap :
>   sig
>     type key =3D Char.t               (*type of the keys =3D Char.t*)
>     type 'a t =3D 'a Map.Make(Char).t (*type of the values relies on 'a*)
>     val empty : 'a t
>     val is_empty : 'a t -> bool
>     val add : key -> 'a -> 'a t -> 'a t
>     val find : key -> 'a t -> 'a
>     val remove : key -> 'a t -> 'a t
>     val mem : key -> 'a t -> bool
>     val iter : (key -> 'a -> unit) -> 'a t -> unit
>     val map : ('a -> 'b) -> 'a t -> 'b t
>     val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
>     val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
>     val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
>     val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
>   end
>
> [2] http://caml.inria.fr/cgi-bin/hump.cgi
>
> Regards,
> --
> Gabriel Kerneis
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>


--=20
Pablo Polvorin

------=_Part_77564_25299918.1178422386893
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Sorry, may be a stupid question, but i dont get it. <br>What is the differe=
nce between the first and second solution that you propose, that make the s=
econd less safe?.<br>As far as i understand, both are recursive type declar=
ations. I do read some post related to this topic.. but fail to fully under=
stand it.
<br>what i missing here?<br><br><br><br>Sorry for the<br><br><div><span cla=
ss=3D"gmail_quote">2007/5/5, Gabriel Kerneis &lt;<a href=3D"mailto:gabriel.=
kerneis@enst.fr" target=3D"_blank" onclick=3D"return top.js.OpenExtLink(win=
dow,event,this)">
gabriel.kerneis@enst.fr</a>&gt;:</span><blockquote class=3D"gmail_quote" st=
yle=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex=
; padding-left: 1ex;">
Le Fri, 4 May 2007 16:46:29 -0700, &quot;Justin Corn&quot; &lt;<a href=3D"m=
ailto:justincorn@gmail.com" target=3D"_blank" onclick=3D"return top.js.Open=
ExtLink(window,event,this)">justincorn@gmail.com</a>&gt;<br>a =E9crit :<br>=
&gt; 1) Is it possible to declare a recursive type that would allow for a
<br>
&gt; tree having an arbitrarily large number of children per node?<br><br>Y=
es.<br><br>&gt; I couldn&#39;t figure that one out, so I was thinking I cou=
ld use a Map<br>&gt; collection to represent edges.<br><br>For example, usi=
ng association lists :
<br># type tree =3D Leaf of int | Node of int * (char * node) list ;;<br>ty=
pe tree =3D Leaf of int | Node of int * (char * node) list<br># Node (2,[(&=
#39;a&#39;,Leaf 5)]);;<br>- : tree =3D Node (2, [(&#39;a&#39;, Leaf 5)])<br=
>
<br>
Or even :<br><br># type tree&#39; =3D&nbsp;&nbsp;int&nbsp;&nbsp;* (char * t=
ree&#39;) list ;;<br>type tree&#39; =3D int * (char * tree&#39;) list<br># =
let t : tree&#39; =3D (2,[(&#39;a&#39;,(5,[]))]);;<br>val t : tree&#39; =3D=
 (2, [(&#39;a&#39;, (5, []))])
<br><br>The second solution involves recursive types : you must run &#39;oc=
aml<br>-rectypes&#39; to use it. It could be unsafe and shouldn&#39;t be us=
ed unless<br>you&#39;re perfectly aware of what you&#39;re doing.<br><br>

&gt; 2) How do you wrap a Map in an object or record?&nbsp;&nbsp;In my case=
 the edges<br>&gt; represent single characters, so I started with<br>&gt;<b=
r>&gt; #module CharMap =3D Map.Make(Char);;<br><br>Good idea : lists are no=
t very efficient, so the solution shown above
<br>will be greatly improved using Maps (especially if you&#39;ve got a lar=
ge<br>number of edges).<br><br>&gt; but then the top level was not happy wi=
th<br>&gt;<br>&gt; #type node =3D { a: int; b: CharMap.t };;<br>The type co=
nstructor=20
CharMap.t expects 1 argument(s),<br>but is here applied to 0 argument(s)<br=
><br>Map expects an argument : Char is the type of the key (as you can see<=
br>on the type, when you create CharMap[1] ), but you must define the<br>

type of the values. Here, you want to store nodes, so :<br>#type node =3D {=
 a: int; b: node CharMap.t };;<br><br>If you prefer a generic node type, yo=
u can do :<br># type &#39;a node =3D { a: int; b: &#39;a&nbsp;&nbsp;CharMap=
.t };;<br>

(this is a just an example of how keeping things generic - here, it&#39;s<b=
r>totally useless)<br><br>&gt; 3) If there are preexisting graphical librar=
ies for ocaml, maybe I<br>&gt; should just use those, but after searching a=
 bit I was unable to find
<br>&gt; any.&nbsp;&nbsp;Does someone know where I could find one?<br><br>D=
epends on what you want to do. Have a look at the Caml Hump [2].<br><br><br=
>[1]<br># module CharMap =3D Map.Make(Char);;<br>module CharMap :<br>&nbsp;=
&nbsp;sig<br>&nbsp;&nbsp;&nbsp;&nbsp;type key =3D=20
Char.t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; (*type of the keys =3D Char.t*)<br>&nbsp;&nbsp;&nbsp;&nbsp;=
type &#39;a t =3D &#39;a Map.Make(Char).t (*type of the values relies on &#=
39;a*)<br>&nbsp;&nbsp;&nbsp;&nbsp;val empty : &#39;a t<br>&nbsp;&nbsp;&nbsp=
;&nbsp;val is_empty : &#39;a t -&gt; bool<br>&nbsp;&nbsp;&nbsp;&nbsp;val ad=
d : key -&gt; &#39;a -&gt; &#39;a t -&gt; &#39;a t
<br>&nbsp;&nbsp;&nbsp;&nbsp;val find : key -&gt; &#39;a t -&gt; &#39;a<br>&=
nbsp;&nbsp;&nbsp;&nbsp;val remove : key -&gt; &#39;a t -&gt; &#39;a t<br>&n=
bsp;&nbsp;&nbsp;&nbsp;val mem : key -&gt; &#39;a t -&gt; bool<br>&nbsp;&nbs=
p;&nbsp;&nbsp;val iter : (key -&gt; &#39;a -&gt; unit) -&gt; &#39;a t -&gt;=
 unit
<br>&nbsp;&nbsp;&nbsp;&nbsp;val map : (&#39;a -&gt; &#39;b) -&gt; &#39;a t =
-&gt; &#39;b t<br>&nbsp;&nbsp;&nbsp;&nbsp;val mapi : (key -&gt; &#39;a -&gt=
; &#39;b) -&gt; &#39;a t -&gt; &#39;b t<br>&nbsp;&nbsp;&nbsp;&nbsp;val fold=
 : (key -&gt; &#39;a -&gt; &#39;b -&gt; &#39;b) -&gt; &#39;a t -&gt; &#39;b=
 -&gt; &#39;b
<br>&nbsp;&nbsp;&nbsp;&nbsp;val compare : (&#39;a -&gt; &#39;a -&gt; int) -=
&gt; &#39;a t -&gt; &#39;a t -&gt; int<br>&nbsp;&nbsp;&nbsp;&nbsp;val equal=
 : (&#39;a -&gt; &#39;a -&gt; bool) -&gt; &#39;a t -&gt; &#39;a t -&gt; boo=
l<br>&nbsp;&nbsp;end<br><br>[2] <a href=3D"http://caml.inria.fr/cgi-bin/hum=
p.cgi" target=3D"_blank" onclick=3D"return top.js.OpenExtLink(window,event,=
this)">

http://caml.inria.fr/cgi-bin/hump.cgi</a><br><br>Regards,<br>--<br>Gabriel =
Kerneis<br><br><br>_______________________________________________<br>Caml-=
list mailing list. Subscription management:<br><a href=3D"http://yquem.inri=
a.fr/cgi-bin/mailman/listinfo/caml-list" target=3D"_blank" onclick=3D"retur=
n top.js.OpenExtLink(window,event,this)">

http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: <=
a href=3D"http://caml.inria.fr" target=3D"_blank" onclick=3D"return top.js.=
OpenExtLink(window,event,this)">http://caml.inria.fr</a><br>Beginner&#39;s =
list:=20
<a href=3D"http://groups.yahoo.com/group/ocaml_beginners" target=3D"_blank"=
 onclick=3D"return top.js.OpenExtLink(window,event,this)">http://groups.yah=
oo.com/group/ocaml_beginners
</a><br>Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=
=3D"_blank" onclick=3D"return top.js.OpenExtLink(window,event,this)">http:/=
/caml.inria.fr/bin/caml-bugs</a><br><br><br></blockquote></div><br><br clea=
r=3D"all">
<br>-- <br>Pablo Polvorin

------=_Part_77564_25299918.1178422386893--

