Return-Path: <berdine@dcs.qmul.ac.uk>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 39640BC0A
	for <caml-list@yquem.inria.fr>; Tue, 15 May 2007 17:41:23 +0200 (CEST)
Received: from mail.dcs.qmul.ac.uk (tart.dcs.qmul.ac.uk [138.37.95.139])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4FFfLae021524
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 15 May 2007 17:41:22 +0200
Received: from tide95.microsoft.com ([213.199.128.153] helo=msrc1291015)
	by mail.dcs.qmul.ac.uk with esmtpsa (TLSv1:RC4-MD5:128)
	(Exim 4.62)
	(envelope-from <berdine@dcs.qmul.ac.uk>)
	id 1Hnz9L-0005TU-FV
	for caml-list@yquem.inria.fr; Tue, 15 May 2007 16:41:20 +0100
From: "Josh Berdine" <berdine@dcs.qmul.ac.uk>
To: <caml-list@yquem.inria.fr>
Subject: type aliases and recursive modules
Date: Tue, 15 May 2007 16:40:57 +0100
Message-ID: <02bd01c79707$7b9d4c60$72d7e520$@qmul.ac.uk>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_02BE_01C7970F.DD642560"
X-Mailer: Microsoft Office Outlook 12.0
thread-index: AceXB20YdG8fy57sRFOs2on61vBdAw==
Content-Language: en-us
X-DCS-Auth-User: berdine (person)
X-j-chkmail-Score: MSGID : 4649D4A1.001 on discorde : j-chkmail score : XXX : 5/20 1 0.000 -> 3
X-Miltered: at discorde with ID 4649D4A1.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 recursive:01 sig:01 val:01 val:01 struct:01 sig:01 struct:01 typechecker:01 cheers:01 typechecker:01 cheers:01 distilled:98 iym:98 distilled:98 

This is a multipart message in MIME format.

------=_NextPart_000_02BE_01C7970F.DD642560
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

Hi,

 

There's something I'm not understanding about recursive modules.  Consider
the following distilled example:

 

# 

module rec A : sig

  type t = It of ASet.t

  val compare : t -> t -> int

  val get : t -> ASet.t

end = struct

  type t = It of ASet.t

  let compare = compare

  let get = function It(x) -> x

end

 

and ASet : sig

  type t

  val get_its_elements : t -> A.t list

end = struct

  module C = Set.Make(A)

  type t = C.t

  let get_its_elements x = C.elements (A.get x)

end

;;

Characters 350-359:

    let get_its_elements x = C.elements (A.get x)

                                        ^^^^^^^^^

This expression has type ASet.t but is here used with type

  C.t = Set.Make(A).t

#

 

Why doesn't the typechecker know that ASet.t and C.t are the same type?
Anyone know a workaround?

 

This is with the 3.10.0 beta version, but seems to be the same back to 3.07.

 

Cheers,  Josh


------=_NextPart_000_02BE_01C7970F.DD642560
Content-Type: text/html;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" =
xmlns:o=3D"urn:schemas-microsoft-com:office:office" =
xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Andale Mono";
	panose-1:2 11 5 9 0 0 0 0 0 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-US link=3Dblue vlink=3Dpurple>

<div class=3DSection1>

<p class=3DMsoNormal>Hi,<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>There&#8217;s something I&#8217;m not understanding =
about
recursive modules.&nbsp; Consider the following distilled =
example:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'># <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>module
rec A : sig<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
type t =3D It of ASet.t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
val compare : t -&gt; t -&gt; int<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
val get : t -&gt; ASet.t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>end
=3D struct<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
type t =3D It of ASet.t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
let compare =3D compare<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
let get =3D function It(x) -&gt; x<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>and
ASet : sig<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
type t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
val get_its_elements : t -&gt; A.t list<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>end
=3D struct<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
module C =3D Set.Make(A)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
type t =3D C.t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
let get_its_elements x =3D C.elements (A.get x)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>;;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>Characters
350-359:<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;&nbsp;&nbsp;
let get_its_elements x =3D C.elements (A.get x)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;
^^^^^^^^^<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>This
expression has type ASet.t but is here used with =
type<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>&nbsp;
C.t =3D Set.Make(A).t<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:10.0pt;font-family:"Andale =
Mono"'>#<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>Why doesn&#8217;t the typechecker know that ASet.t =
and C.t
are the same type?&nbsp; Anyone know a workaround?<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>This is with the 3.10.0 beta version, but seems to =
be the
same back to 3.07.<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>Cheers,&nbsp; Josh<o:p></o:p></p>

</div>

</body>

</html>

------=_NextPart_000_02BE_01C7970F.DD642560--

