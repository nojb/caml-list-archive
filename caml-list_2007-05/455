Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id E9C38BC6B
	for <caml-list@yquem.inria.fr>; Thu, 24 May 2007 00:14:28 +0200 (CEST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4NMEQDa025444
	for <caml-list@inria.fr>; Thu, 24 May 2007 00:14:28 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.7/8.13.7) with ESMTP id l4NMEG2I023813;
	Thu, 24 May 2007 07:14:16 +0900 (JST)
Date: Thu, 24 May 2007 07:14:05 +0900 (JST)
Message-Id: <20070524.071405.12188035.garrigue@math.nagoya-u.ac.jp>
To: jon@ffconsultancy.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Teaching bottomline, part 3: what should improve.
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200705232246.14189.jon@ffconsultancy.com>
References: <20070523185428.GA32681@furbychan.cocan.org>
	<4654959C.7040701@fischerventure.com>
	<200705232246.14189.jon@ffconsultancy.com>
X-Mailer: Mew version 4.2 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4654BCC2.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; solver:01 fsharp:01 fsharp:01 ocaml:01 elegantly:01 ocaml:01 lablgtk:01 gtkthread:01 labltk:01 posix:01 threads:01 bytecode:01 threads:01 pumps:98 incremental:01 

From: Jon Harrop <jon@ffconsultancy.com>

> To solve GUI programming you need different constructs (events,
> message pumps etc.).
> 
> Look at some of the example F# programs on our site. This Sudoku
> solver uses a worker thread to keep the GUI responsive while it
> solves puzzles:
> 
>   http://www.ffconsultancy.com/dotnet/fsharp/sudoku/index.html
> 
> This ray tracer uses concurrency for incremental update of a responsive GUI:
> 
>   http://www.ffconsultancy.com/dotnet/fsharp/raytracer/index.html
> 
> This particle simulator runs the simulation thread in parallel with the GUI 
> thread, for real-time visualization of the particle system:
> 
>   http://www.ffconsultancy.com/products/fsharp_for_visualization/demo3.html
> 
> In the future, I hope OCaml will support concurrency not only to handle 
> parallel constructs but also to handle GUI programming elegantly. If
> there is one thing that I have been singularly impressed by from
> .NET, it is GUI programming.

But... this is exactly the kind of things for which you can already
use concurrency in ocaml. For instance, lablgtk2 provides a GtkThread
module, which lets you run the GUI in another thread, and post updates
asynchronously. This is also possible with labltk, albeit not
documented.
I do not say this is elegant in its current form, but we are limited
by the underlying library.

There are weaknesses, like the fact you cannot kill a worker thread,
but this looks like a limitation of posix threads, since you can do it
with bytecode threads.

Jacques Garrigue

