Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id AF758BC69
	for <caml-list@yquem.inria.fr>; Sat, 12 May 2007 06:53:26 +0200 (CEST)
Received: from pih-relay06.plus.net (pih-relay06.plus.net [212.159.14.133])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4C4rQ2o032405
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sat, 12 May 2007 06:53:26 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay06.plus.net with esmtp (Exim) id 1Hmjbh-0005m5-Sx
	for caml-list@yquem.inria.fr; Sat, 12 May 2007 05:53:26 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
Subject: Re: [Caml-list] Custom operators in the revised syntax
Date: Sat, 12 May 2007 05:48:01 +0100
User-Agent: KMail/1.9.5
Cc: caml-list@yquem.inria.fr
References: <cd67f63a0705101355n2954fd02v9a29cb0a76eb16ee@mail.gmail.com> <200705111537.32561.jon@ffconsultancy.com> <6f9f8f4a0705110752t6a60bcfer407dbc7b5e7f6c1e@mail.gmail.com>
In-Reply-To: <6f9f8f4a0705110752t6a60bcfer407dbc7b5e7f6c1e@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
To: "Undisclosed.Recipients": ;
Message-Id: <200705120548.01155.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 46454846.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; syntax:01 ocaml:01 overloading:01 vectors:01 matrices:01 fsharp:01 frog:98 wrote:01 caml-list:01 functions:01 revised:02 library:03 expressions:04 efficient:07 mathematical:07 

On Friday 11 May 2007 15:52, Loup Vaillant wrote:
> What exactly is more difficult (or less convinient) in Ocaml once you
> quit template metaprogramming?

Lack of operator overloading makes many mathematical expressions more tedious 
to write. Lack of template metaprogramming makes it harder to write efficient 
library functions to handle low-dimensional vectors and matrices.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The F#.NET Journal
http://www.ffconsultancy.com/products/fsharp_journal/?e

