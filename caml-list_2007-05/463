Return-Path: <tab@snarc.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id F1984BC0A
	for <caml-list@yquem.inria.fr>; Thu, 24 May 2007 10:37:12 +0200 (CEST)
Received: from hades.snarc.org (hades.snarc.org [212.85.152.11])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4O8bCFo017386
	for <caml-list@yquem.inria.fr>; Thu, 24 May 2007 10:37:12 +0200
Received: by hades.snarc.org (Postfix, from userid 1000)
	id 3315C1B4D7; Thu, 24 May 2007 10:32:17 +0200 (CEST)
Date: Thu, 24 May 2007 10:32:17 +0200
To: "Markus E.L." <ls-ocaml-developer-2006@m-e-leypold.de>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Teaching bottomline, part 3: what should improve.
Message-ID: <20070524083217.GA20963@snarc.org>
References: <1179871823.6966.78.camel@Blefuscu> <1179875804.17533.33.camel@rosella.wigram> <20070523091909.GA8019@snarc.org> <46543875.9010305@janestcapital.com> <20070523214823.GA16180@snarc.org> <i1646i8x6i.fsf@hod.lan.m-e-leypold.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <i1646i8x6i.fsf@hod.lan.m-e-leypold.de>
X-Warning: Email may contain unsmilyfied humor and/or satire.
User-Agent: Mutt/1.5.13 (2006-08-11)
From: tab@snarc.org (Vincent Hanquez)
X-Miltered: at discorde with ID 46554EB8.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; 0200,:01 markus:01 mli:01 syntax:01 inlined:01 sig:01 ocaml:01 sig:01 struct:01 mli:01 cheers:01 stays:98 wrote:01 caml-list:01 inline:01 

On Thu, May 24, 2007 at 10:04:21AM +0200, Markus E.L. wrote:
> let len (s :string) : int = ... ?

yes I know about this but I'ld rather create and modify an .mli than
have this horrible syntax inlined in the implementation.

The signature code (the one in sig end) is nice, and I want to use that
for describing my functions, so that implementation and description
stays reasonably distinct. OCaml let you do that inline when you
create a module in a file:

module xx : sig
  ....
end = struct
  ....
end

but for a file (which is also a module), you need to have a separate
file (a .mli) to do that.. and that's my point.

Cheers,
-- 
Vincent Hanquez

