Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id E3897BC6B
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 09:02:39 +0200 (CEST)
Received: from einhorn.in-berlin.de (einhorn.in-berlin.de [192.109.42.8])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4U72dFK001075
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@inria.fr>; Wed, 30 May 2007 09:02:39 +0200
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from first (dslb-088-073-067-208.pools.arcor-ip.net [88.73.67.208])
	(authenticated bits=0)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id l4U72cpo012840
	for <caml-list@inria.fr>; Wed, 30 May 2007 09:02:38 +0200
Received: by first (Postfix, from userid 501)
	id E0A7F3D0960; Wed, 30 May 2007 09:02:30 +0200 (CEST)
Date: Wed, 30 May 2007 09:02:30 +0200
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
Message-ID: <20070530070229.GB334@first.in-berlin.de>
References: <200705300442.59906.jon@ffconsultancy.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200705300442.59906.jon@ffconsultancy.com>
User-Agent: Mutt/1.5.6i
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Miltered: at concorde with ID 465D218F.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bandel:01 in-berlin:01 forks:01 0100,:01 ocaml:01 forks:01 marshalling:01 camlp:01 unix:01 unix:01 wrote:01 oliver:01 oliver:01 caml-list:01 concurrency:02 

Hi,

On Wed, May 30, 2007 at 04:42:59AM +0100, Jon Harrop wrote:
> 
> Has anyone implemented a parallel map function in OCaml using Unix forks, 
> pipes and maybe marshalling?

I have thought about such stuff, but ot implemented
(because there was no real need for it).

Since I found OCamlP3l, I'm not shure if implementing
such stuff would make sense, because using OCamlP3l
might be the right way.

  OCamlP3l: http://camlp3l.inria.fr/eng.htm

I didn't tried it so far.

If people already have done (or will do now),
I would be interested in feedback.

Ciao,
   Oliver

P.S.: Why did you  write "Faking concurrency"?
      If the processes are running on a multi-core/multi-processor
      machine, using processes can achieve paralellism.

