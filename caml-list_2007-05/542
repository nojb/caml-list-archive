Return-Path: <eliot@generation.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL,MISSING_HEADERS 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 8A879BC69
	for <caml-list@yquem.inria.fr>; Tue, 29 May 2007 06:43:51 +0200 (CEST)
Received: from mail.colba.net (mail.colba.net [207.107.221.4])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4T4hnSH029451
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@inria.fr>; Tue, 29 May 2007 06:43:51 +0200
Received: from [192.168.0.100] (245.85.252.216.dsl1.colba.net [216.252.85.245])
	by mail.colba.net (8.12.11/8.12.1) with ESMTP id l4T4hkuq094489
	for <caml-list@inria.fr>; Tue, 29 May 2007 00:43:46 -0400 (EDT)
Message-ID: <465BAFEE.7010801@generation.net>
Date: Tue, 29 May 2007 00:45:34 -0400
From: Eliot Handelman <eliot@generation.net>
Reply-To: eliot@generation.net
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
Cc: OCaml <caml-list@inria.fr>
Subject: Re: [Caml-list] Lisp/Scheme parser
References: <4659A71A.6060304@mcmaster.ca> <1180282007.1836.3.camel@rosella.wigram>
In-Reply-To: <1180282007.1836.3.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 465BAF85.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; parser:01 parser:01 ocaml:01 ocaml:01 wrote:01 wrote:01 caml-list:01 lisp:01 lisp:01 jacques:03 scheme:05 scheme:05 iki:06 examples:07 embed:89 

skaller wrote:
> On Sun, 2007-05-27 at 11:43 -0400, Jacques Carette wrote:
>   
>> I tried to find a full Lisp (or Scheme) parser in Ocaml, and did not 
>> immediately find one.  Is my Google-fu not up to the task?
>>     
>
> OCS Scheme.
>
> http://will.iki.fi/software/ocs/
>
>
>   
Are there examples anywhere of how to embed OCS in an ocaml program?

thanks,

-- eliot

