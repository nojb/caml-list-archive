Return-Path: <robert@fischerventure.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 595E4BC0A
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 21:27:27 +0200 (CEST)
Received: from looneymail-a4.g.dreamhost.com (d071c805.dreamhost.com [208.113.200.5])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4NJRQjN026007
	for <caml-list@inria.fr>; Wed, 23 May 2007 21:27:27 +0200
Received: from [192.168.101.113] (unknown [66.84.219.53])
	by looneymail-a4.g.dreamhost.com (Postfix) with ESMTP id 85E2C125E5E;
	Wed, 23 May 2007 12:27:25 -0700 (PDT)
Message-ID: <4654959C.7040701@fischerventure.com>
Date: Wed, 23 May 2007 14:27:24 -0500
From: Robert C Fischer <robert@fischerventure.com>
Reply-To: robert.fischer@SmokejumperIT.com
Organization: Fischer Venture Managment Corporation
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Richard Jones <rich@annexia.org>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Teaching bottomline, part 3: what should improve.
References: <1179871823.6966.78.camel@Blefuscu>	<200705230039.29659.jon@ffconsultancy.com> <20070523185428.GA32681@furbychan.cocan.org>
In-Reply-To: <20070523185428.GA32681@furbychan.cocan.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 4654959E.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; threads:01 erlang:01 0100,:01 ocaml:01 threads:01 semaphores:01 async:01 syntax:01 23,:98 wrote:01 wrote:01 caml-list:01 concurrency:02 concurrency:02 functional:02 

...and locks and threads are not a viable long-term solution to the 
problem of concurrency in general.  You're future-proofing enough by 
teaching them functional languages: Erlang and Cilk are closer to the 
needed future.

~~ Robert.

Richard Jones wrote:
> On Wed, May 23, 2007 at 12:39:29AM +0100, Jon Harrop wrote:
>   
>> If you want your students to be future proof then you would do well
>> to prepare them for massively parallel computing on CPUs with
>> hundreds or even thousands of cores. OCaml it completely
>> ill-equipped for this. In contrast, F# provides native
>> threads/locks/semaphores/threads/threadpools inherited from .NET as
>> well as async programming via extra syntax. Concurrency is beautiful
>> in F# and it works today.
>>     
>
> F# scales to hundreds or thousands of cores?
>
> If the OP wants to teach his students about massively parallel
> computing, he should avoid the Microsoft lock-in and teach them about
> it on Linux clusters.
>
> Rich.
>
>   

