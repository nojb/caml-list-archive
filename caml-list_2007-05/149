Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id EC32CBC69
	for <caml-list@yquem.inria.fr>; Sun,  6 May 2007 21:55:55 +0200 (CEST)
Received: from ptb-relay02.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l46Jtt5V009929
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sun, 6 May 2007 21:55:55 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay02.plus.net with esmtp (Exim) id 1Hkmpm-0003Xb-Qt
	for caml-list@yquem.inria.fr; Sun, 06 May 2007 20:55:54 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] 246 constructors?
Date: Sun, 6 May 2007 20:50:13 +0100
User-Agent: KMail/1.9.5
References: <1178480953.4443.4.camel@rosella.wigram>
In-Reply-To: <1178480953.4443.4.camel@rosella.wigram>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200705062050.14105.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 463E32CB.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; constructors:01 constructors:01 variants:01 clashes:01 fsharp:01 frog:98 polymorphic:01 wrote:01 caml-list:01 parse:02 interpreter:07 file:08 bunch:11 products:86 ltd:86 

On Sunday 06 May 2007 20:49, skaller wrote:
> I just got this message:
>
> File "dyp_parse.ml", line 492, characters 5-19461:
> Too many non-constant constructors -- maximum is 246 non-constant
> constructors
>
> Really???

Yeah, I was hardcoding a bunch of enums for my Mathematica interpreter and got 
that. Easiest solution is to use polymorphic variants instead. Then you have 
clashes to worry about instead...

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The F#.NET Journal
http://www.ffconsultancy.com/products/fsharp_journal/?e

