Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 864D8BC6B
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 01:47:11 +0200 (CEST)
Received: from pih-relay05.plus.net (pih-relay05.plus.net [212.159.14.132])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4MNlAJF019664
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 23 May 2007 01:47:11 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay05.plus.net with esmtp (Exim) id 1Hqe4M-0002aQ-GX
	for caml-list@yquem.inria.fr; Wed, 23 May 2007 00:47:10 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] functions' recursive construction
Date: Wed, 23 May 2007 00:41:29 +0100
User-Agent: KMail/1.9.6
References: <b45cc0660705221617x4ad48c46j3a1ad1c022f33d0e@mail.gmail.com> <4a708d20705221631x82b6e9ala0cd8b9d83baa959@mail.gmail.com> <4a708d20705221632x4bbd16b4ya83b532ed69ec2cf@mail.gmail.com>
In-Reply-To: <4a708d20705221632x4bbd16b4ya83b532ed69ec2cf@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200705230041.29563.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 465380FE.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 lukasz:01 val:01 val:01 fsharp:01 frog:98 wrote:01 wrote:01 rec:01 caml-list:01 int:01 int:01 let:03 meant:06 fun:08 

On Wednesday 23 May 2007 00:32:58 you wrote:
> On 5/23/07, Lukasz Stafiniak <lukstafi@gmail.com> wrote:
> > On 5/23/07, Jon Harrop <jon@ffconsultancy.com> wrote:
> > > What would the type of "f" be?
> >
> >  'a -> 'a as 'a
>
> I'm sorry, I meant:
> #     val f : int -> ('a -> 'a as 'a) = <fun>

Not this then:

# let rec f n x = if n=0 then x else f (n-1) (x x);;
val f : int -> ('a -> 'a as 'a) -> 'a = <fun>

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The F#.NET Journal
http://www.ffconsultancy.com/products/fsharp_journal/?e

