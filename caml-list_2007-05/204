Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id A66C2BC69
	for <caml-list@yquem.inria.fr>; Fri, 11 May 2007 20:33:05 +0200 (CEST)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4BIX3Ft016740
	for <caml-list@yquem.inria.fr>; Fri, 11 May 2007 20:33:04 +0200
X-IronPort-AV: E=Sophos;i="4.14,523,1170595800"; 
   d="scan'208";a="126374639"
Received: from ppp8-148.lns1.syd7.internode.on.net (HELO [192.168.1.201]) ([59.167.8.148])
  by ipmail01.adl2.internode.on.net with ESMTP; 12 May 2007 04:03:02 +0930
Subject: Re: [Caml-list] Custom operators in the revised syntax
From: skaller <skaller@users.sourceforge.net>
To: Loup Vaillant <loup.vaillant@gmail.com>
Cc: Jon Harrop <jon@ffconsultancy.com>, caml-list@yquem.inria.fr
In-Reply-To: <6f9f8f4a0705110752t6a60bcfer407dbc7b5e7f6c1e@mail.gmail.com>
References: <cd67f63a0705101355n2954fd02v9a29cb0a76eb16ee@mail.gmail.com>
	 <1884660607.20070511161455@moldavcable.com>
	 <6f9f8f4a0705110715l48259b8cr11f22d333ed8d7f5@mail.gmail.com>
	 <200705111537.32561.jon@ffconsultancy.com>
	 <6f9f8f4a0705110752t6a60bcfer407dbc7b5e7f6c1e@mail.gmail.com>
Content-Type: text/plain
Date: Sat, 12 May 2007 04:32:58 +1000
Message-Id: <1178908378.6118.99.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4644B6DF.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; syntax:01 0200,:01 ocaml:01 ocaml:01 haskell:01 sourceforge:01 wrote:01 caml-list:01 data:02 defined:02 structures:02 revised:02 programming:03 fri:05 unsound:07 

On Fri, 2007-05-11 at 16:52 +0200, Loup Vaillant wrote:

> What exactly is more difficult (or less convinient) in Ocaml once you
> quit template metaprogramming?

C++ has polyadic programming which is flakey but sort of works
reasonably well in practice some of the time even though it
is technically unsound .. <:)

For example, 'fold' is defined for all data structures,
just once (it's called accumulate).

This is miles ahead of Ocaml and Haskell, however I'll
stick with correctness, thanks.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

