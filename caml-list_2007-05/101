Return-Path: <till.varoquaux@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.2 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 123FCBC69
	for <caml-list@yquem.inria.fr>; Thu,  3 May 2007 17:48:58 +0200 (CEST)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.173])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l43FmtY6020449
	for <caml-list@inria.fr>; Thu, 3 May 2007 17:48:58 +0200
Received: by ug-out-1314.google.com with SMTP id k3so413975ugf
        for <caml-list@inria.fr>; Thu, 03 May 2007 08:48:55 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=pZBnThujWglZX5ig5EihuUuupix3I/7m19YfJND7TTv5Gq9Nrqf8on/PYwmQthR5UgCUQYHFzkTLYCJHpuKKfnAN9NFtQwqFvodp5xonO5RyKL4VUKjACNzRJatuxP1GdnhDdNeMCoHch8dV4kQh9YMvMc6kyTWJhFpbCJkyk7M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=VyumfVJGzYKJjUIaNm3xUKXlKVEtshOhU1CdZwEARcsIuxuwov+O7Xvp5Hf45XZQUxCFAxtcaJI3d6EYo21l1TeKV00eoNFddMSN55wfyWVSGciASVyUqqaF6FPNGbB7ml8aPapH0cxDSr74vP6/h/SVQP2Ady0y5ipNj95lgP4=
Received: by 10.67.25.9 with SMTP id c9mr2018396ugj.1178207334053;
        Thu, 03 May 2007 08:48:54 -0700 (PDT)
Received: by 10.66.251.16 with HTTP; Thu, 3 May 2007 08:48:53 -0700 (PDT)
Message-ID: <9d3ec8300705030848h7395c26eq5fd6bd2e8942762b@mail.gmail.com>
Date: Thu, 3 May 2007 17:48:53 +0200
From: "Till Varoquaux" <till.varoquaux@gmail.com>
To: "Nicolas Pouillard" <nicolas.pouillard@gmail.com>
Subject: Re: Abstract types in the revised syntax
Cc: "Caml List" <caml-list@inria.fr>,
	"=?ISO-8859-1?Q?G=E9rard_Huet?=" <Gerard.Huet@inria.fr>,
	"Benoit Razet" <Benoit.Razet@inria.fr>
In-Reply-To: <cd67f63a0705030439x56d36c9fv3b8e9f8e8e95fec@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <cd67f63a0705030439x56d36c9fv3b8e9f8e8e95fec@mail.gmail.com>
X-j-chkmail-Score: MSGID : 463A046A.001 on concorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at concorde with ID 463A046A.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; syntax:01 cheers:01 syntax:01 existential:01 existential:01 parser:01 syntaxes:01 bug:01 parser:01 ocaml:01 sig:01 sig:01 ctyp:01 compilation:01 cvs:01 

I happen to very much dislike dangling free variables and therefore
think this would be a nice improvement.
Thanks for fixing my constraint issues.
BTW I still haven't figured out how to generate constraints (lets say
I have a list of strings [t1,..,tn] and a list of idents [c1...cn],
how do I generate the type < c1:t1; ... ; cn:tn >? )

Cheers,
Till

On 5/3/07, Nicolas Pouillard <nicolas.pouillard@gmail.com> wrote:
> Hello,
>
> This message concern the few people that use the revised syntax :)
>
> In the revised syntax, abstract types are expressed by defining them
> with an unbound type variable:
>
> (* Original *)
> type t;;
>
> (* Revised *)
> type t = 'a;
>
> The motivation is that looks like an existential type, which is a way
> of seeing abstract types.
>
> However I found this motivation misapplied since it doesn't look like
> an existential type, there is no exists keyword?!? (type t = exists
> 'a. 'a;)
>
> It's like a hot-dog without sausage?!?
>
> In fact, consequences of that choice are worst. If forces the
> parser/printer to do some semantical operation to convert back and
> forth between syntaxes.
>
> type t 'a = 'a; (* not abstract *)
>
> type t 'a = 'b; (* abstract *)
>
> It was considered acceptable, since the test for the freeness of a
> single type variable seemed simple because very local.
>
> Indeed only the list of parameters was consulted to compute the
> freeness of the type variable.
>
> It seems very weak since highly dependent of future evolution of the language.
>
> Nowadays it's no longer sufficient. Constraints can be added with a
> type declaration to constrain the type of parameters.
>
> type c 'a = 'b
>    constraint 'a = < b : 'b; .. >;
> (* Thanks to Till Varoquaux for it's bug report. *)
>
> Clearly I don't want to push that wrong choice further by making more
> semantic analysis in the parser/printer.
>
> So I revert back to << type t; >> for abstract types.
>
> Now, what's the new representation for abstract types. OCaml use a
> option type, where None represent the abstract type. We can't afford
> that, since we want a concrete syntax for everything.
> However we have a nil type that can be used as a default case (for
> lists of types or optional types).
>
> <:sig_item< type t >> === <:sig_item< type t = $ <:ctyp<>> $ >>
>
> Not that this will also concern abstract module types.
>
> Alas, this will affect existing code using the revised syntax, but
> will be easily caught at compilation.
>
> From a pragmatic point of view, a grep to show the usage of such types:
> grep -E "^[ \t]*type.*=[ \t]*'[^ \t]*[ \t]*;[ \t]*$" **/*.ml*
>
> Feel free to share your mind on that subject. The change is not yet
> applied to the CVS.
>
> Best regards,
>
> --
> Nicolas Pouillard
>

