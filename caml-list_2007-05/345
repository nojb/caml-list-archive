Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 0C777BC0A
	for <caml-list@yquem.inria.fr>; Sat, 19 May 2007 16:28:42 +0200 (CEST)
Received: from einhorn.in-berlin.de (einhorn.in-berlin.de [192.109.42.8])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4JESfVw005636
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@inria.fr>; Sat, 19 May 2007 16:28:41 +0200
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from first (dslb-088-073-123-172.pools.arcor-ip.net [88.73.123.172])
	(authenticated bits=0)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id l4JEScJc011181
	for <caml-list@inria.fr>; Sat, 19 May 2007 16:28:38 +0200
Received: by first (Postfix, from userid 501)
	id BC4AA3B7D55; Sat, 19 May 2007 16:28:28 +0200 (CEST)
Date: Sat, 19 May 2007 16:28:27 +0200
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@inria.fr
Subject: Re: [Caml-list] tail rec
Message-ID: <20070519142827.GA335@first.in-berlin.de>
References: <1179543365.26755.33.camel@rosella.wigram>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1179543365.26755.33.camel@rosella.wigram>
User-Agent: Mutt/1.5.6i
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Miltered: at discorde with ID 464F0999.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bandel:01 in-berlin:01 compiler:01 camlp:01 wrote:01 oliver:01 oliver:01 rec:01 rec:01 caml-list:01 tail:01 tail:01 functional:02 allocated:03 programming:03 

On Sat, May 19, 2007 at 12:56:05PM +1000, skaller wrote:
> I have a silly idea. Introduce a new construction:
> 
> let tailrec f .. 
> 
> This is the same as let rec except it checks every direct call to f
> is in tail position (and bombs out the compiler if not).
> 
> [Maybe this can be done with camlp4, though I think it might
> be hard?]
> 
> I think this could be useful for newbies learning functional
> programming, and perhaps even experts looking for performance
> issues.
[...]

I think this is blocking understanding of how ressources
are allocated, when one uses a certain style of programming
and datastructures.

Ciao,
   Oliver

