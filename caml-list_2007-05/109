Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 7269CBC69
	for <caml-list@yquem.inria.fr>; Fri,  4 May 2007 03:10:47 +0200 (CEST)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l441AiDJ026448
	for <caml-list@yquem.inria.fr>; Fri, 4 May 2007 03:10:46 +0200
X-IronPort-AV: E=Sophos;i="4.14,487,1170595800"; 
   d="scan'208";a="123129250"
Received: from ppp8-148.lns1.syd7.internode.on.net (HELO [192.168.1.201]) ([59.167.8.148])
  by ipmail01.adl2.internode.on.net with ESMTP; 04 May 2007 10:40:08 +0930
Subject: Re: [Caml-list] wrapping parameterized types
From: skaller <skaller@users.sourceforge.net>
To: Chris King <colanderman@gmail.com>
Cc: Christopher L Conway <cconway@cs.nyu.edu>,
	caml-list@yquem.inria.fr
In-Reply-To: <875c7e070705031616w50ca595m2e55bda049ba7aa6@mail.gmail.com>
References: <4a051d930705031531m396e42e7i6212137e2fb9cd53@mail.gmail.com>
	 <875c7e070705031616w50ca595m2e55bda049ba7aa6@mail.gmail.com>
Content-Type: text/plain
Date: Fri, 04 May 2007 11:10:03 +1000
Message-Id: <1178241003.7436.10.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 463A8814.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; existential:01 o'caml:01 existential:01 sourceforge:01 polymorphic:01 wrote:01 wrote:01 caml-list:01 confused:03 types:03 types:03 thu:05 chris:06 function:08 christopher:08 

On Thu, 2007-05-03 at 19:16 -0400, Chris King wrote:
> On 5/3/07, Christopher L Conway <cconway@cs.nyu.edu> wrote:

> The solution is to use existential types.  In a record, you can tell
> O'Caml that a particular function _must_ be polymorphic:
> 
> type 'b mylistfun = { listfun: 'a. 'a list -> 'b }

I'm still confused why this is called an existential, when
clearly the quantification is universal.



-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

