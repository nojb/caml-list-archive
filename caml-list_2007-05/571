Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 6C625BC69
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 10:56:10 +0200 (CEST)
Received: from pih-relay04.plus.net (pih-relay04.plus.net [212.159.14.131])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4U8u9lT028916
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 10:56:10 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay04.plus.net with esmtp (Exim) id 1HtJyQ-0006kT-RI
	for caml-list@yquem.inria.fr; Wed, 30 May 2007 09:56:07 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
Date: Wed, 30 May 2007 09:50:35 +0100
User-Agent: KMail/1.9.7
References: <200705300442.59906.jon@ffconsultancy.com> <6f9f8f4a0705300130h3a536fb4hc6792afd61ee943b@mail.gmail.com> <6f9f8f4a0705300132l1bf8775dwedfceede50e34c54@mail.gmail.com>
In-Reply-To: <6f9f8f4a0705300132l1bf8775dwedfceede50e34c54@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200705300950.36067.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 465D3C29.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; forks:01 developement:01 ocaml:01 ocaml:01 frog:98 unix:01 wrote:01 slower:01 slower:01 caml-list:01 tracing:01 lisp:01 concurrency:02 languages:03 concurrent:03 

On Wednesday 30 May 2007 09:32:48 Loup Vaillant wrote:
> As far as I know, the developement team had made it quite clear that
> there will be no concurent GC (not in the near future, at least). The
> main reason is performance loss.

Might be interesting to compare the performance of some languages using my ray 
tracer:

C++: 3.67s
OCaml: 3.97s
F#: 5.26s
Lisp: 6.04s
Scheme: 6.29s
Java: 6.53s

F# is ~30% slower than OCaml but can be made almost twice as fast on my dual 
core machine by tracing concurrently. However, Java is also a concurrent 
static language and it is much slower. Maybe this reflects more effort having 
gone into the .NET GC.

I should also note that the F# and Scheme are both 32-bit. I wonder how well 
F# would do if it were 64-bit... :-)

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists/?e

