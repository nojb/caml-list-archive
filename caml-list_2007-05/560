Return-Path: <jtbryant@valdosta.edu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 6F4C7BC69
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 06:14:07 +0200 (CEST)
Received: from sccmmhc92.asp.att.net (sccmmhc92.asp.att.net [204.127.203.212])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4U4E6TO022631
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 06:14:07 +0200
Received: from [192.168.0.104] (12-208-242-210.client.mchsi.com[12.208.242.210])
          by sccmmhc92.asp.att.net (sccmmhc92) with SMTP
          id <20070530041405m9200da840e>; Wed, 30 May 2007 04:14:05 +0000
Mime-Version: 1.0 (Apple Message framework v752.3)
In-Reply-To: <200705300442.59906.jon@ffconsultancy.com>
References: <200705300442.59906.jon@ffconsultancy.com>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Message-Id: <3957E93F-A8E0-44F5-98F2-8730FD70ABFA@valdosta.edu>
Content-Transfer-Encoding: 7bit
From: Jonathan Bryant <jtbryant@valdosta.edu>
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
Date: Wed, 30 May 2007 00:12:51 -0400
To: caml-list@yquem.inria.fr
X-Mailer: Apple Mail (2.752.3)
X-Miltered: at discorde with ID 465CFA0E.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; forks:01 ocaml:01 forks:01 marshalling:01 trivial:01 sockets:01 ocaml:01 syntax:01 beginner's:01 bug:01 2007,:98 frog:98 unix:01 unix:01 beginners:01 


On May 29, 2007, at 11:42 PM, Jon Harrop wrote:

>
> Has anyone implemented a parallel map function in OCaml using Unix  
> forks,
> pipes and maybe marshalling?

I've implemented a toy version of this, so I can say it does work and  
is not too hard, although I don't still have the code.  My OSP  
project is a concurrency library that would make implementing this  
pretty trivial though: it extends the Event module to work over UNIX  
& TCP sockets and to have a common interface for thread creation /  
forking / remote process creation.

>
> This seems like an easy way to get concurrency in OCaml...

It would also be nice to have a Apply in Parallel / Parallel List  
Comprehension syntax for it a la NESL (http://www.cs.cmu.edu/~scandal/ 
nesl.html).

>
> -- 
> Dr Jon D Harrop, Flying Frog Consultancy Ltd.
> OCaml for Scientists
> http://www.ffconsultancy.com/products/ocaml_for_scientists/?e
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

