Return-Path: <till.varoquaux@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.2 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0EBA2BC69
	for <caml-list@yquem.inria.fr>; Thu,  3 May 2007 18:39:30 +0200 (CEST)
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.172])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l43GdTZc000921
	for <caml-list@inria.fr>; Thu, 3 May 2007 18:39:29 +0200
Received: by ug-out-1314.google.com with SMTP id k3so422917ugf
        for <caml-list@inria.fr>; Thu, 03 May 2007 09:39:29 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=uaG+qC/eCNaxQBdMe1TI8M4LgnPREEWblRhm9Oh2cgWsQdlqZB68eKDVYTNlpBvgivEvT1Dt564NFo8TsQiAMgAQG2Ye+Hf3QuXhBt3mqTSCPzm4zMk15dBfcIXNmszxYsXzaRFygIzAlKrPe67Nt8+V9KcaXMxy5DIvWE45gLA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=NPWe59HRFgeLSgNdfK4oyfIkESXsNqCxwfOOxjhRdO1pWd9GkeB9f7blANx6s+2JovlMICLsNoY/N8Y9C3zaQQZ/6kYU17AaefNtkRTekTNdXWS6o287024ILycxIntf26EsZzbWXffv7bes82GqM6lrKDSOPPM/ai6+ohzBFFU=
Received: by 10.78.183.8 with SMTP id g8mr994785huf.1178210368539;
        Thu, 03 May 2007 09:39:28 -0700 (PDT)
Received: by 10.66.251.16 with HTTP; Thu, 3 May 2007 09:39:28 -0700 (PDT)
Message-ID: <9d3ec8300705030939v3993d58l86c9db1080708a31@mail.gmail.com>
Date: Thu, 3 May 2007 18:39:28 +0200
From: "Till Varoquaux" <till.varoquaux@gmail.com>
To: "Nicolas Pouillard" <nicolas.pouillard@gmail.com>
Subject: Re: Abstract types in the revised syntax
Cc: "Caml List" <caml-list@inria.fr>,
	"=?ISO-8859-1?Q?G=E9rard_Huet?=" <Gerard.Huet@inria.fr>,
	"Benoit Razet" <Benoit.Razet@inria.fr>
In-Reply-To: <cd67f63a0705030906h387c710euf6728c0c22b73c03@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <cd67f63a0705030439x56d36c9fv3b8e9f8e8e95fec@mail.gmail.com>
	 <9d3ec8300705030848h7395c26eq5fd6bd2e8942762b@mail.gmail.com>
	 <cd67f63a0705030906h387c710euf6728c0c22b73c03@mail.gmail.com>
X-j-chkmail-Score: MSGID : 463A1041.000 on concorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at concorde with ID 463A1041.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; syntax:01 ocaml:01 camlp:01 ctyp:01 cheers:01 camlp:01 ctyp:01 cheers:01 syntax:01 existential:01 existential:01 parser:01 syntaxes:01 bug:01 parser:01 

Nope,

This doesn't work for me (using a cvs version of ocaml about 2hours
old). I ran in the exact same problem, maybe I was actually doing it
right :)

camlp4orf test.ml
File "test.ml", line 6, characters 28-36:
While expanding quotation "ctyp":
  Parse error: EOI expected after [quotation of type] (in [quotation of type])

cheers,
Till
On 5/3/07, Nicolas Pouillard <nicolas.pouillard@gmail.com> wrote:
> On 5/3/07, Till Varoquaux <till.varoquaux@gmail.com> wrote:
> > I happen to very much dislike dangling free variables and therefore
> > think this would be a nice improvement.
> > Thanks for fixing my constraint issues.
> > BTW I still haven't figured out how to generate constraints (lets say
> > I have a list of strings [t1,..,tn] and a list of idents [c1...cn],
> > how do I generate the type < c1:t1; ... ; cn:tn >? )
>
> That way...
>
> open Camlp4.PreCast;;
>
> let mk_obj_type _loc fields types =
>   let object_type =
>     List.fold_right2 begin fun field typ object_type ->
>       <:ctyp< $lid:field$ : $lid:typ$ ; $object_type$ >>
>     end fields types <:ctyp<>>
>   in
>   <:ctyp< < $object_type$ > >>
> ;;
>
> mk_obj_type (Loc.mk "<test>") ["f1"; "f2"] ["t1"; "t2"];;
>
>
> >
> > Cheers,
> > Till
> >
> > On 5/3/07, Nicolas Pouillard <nicolas.pouillard@gmail.com> wrote:
> > > Hello,
> > >
> > > This message concern the few people that use the revised syntax :)
> > >
> > > In the revised syntax, abstract types are expressed by defining them
> > > with an unbound type variable:
> > >
> > > (* Original *)
> > > type t;;
> > >
> > > (* Revised *)
> > > type t = 'a;
> > >
> > > The motivation is that looks like an existential type, which is a way
> > > of seeing abstract types.
> > >
> > > However I found this motivation misapplied since it doesn't look like
> > > an existential type, there is no exists keyword?!? (type t = exists
> > > 'a. 'a;)
> > >
> > > It's like a hot-dog without sausage?!?
> > >
> > > In fact, consequences of that choice are worst. If forces the
> > > parser/printer to do some semantical operation to convert back and
> > > forth between syntaxes.
> > >
> > > type t 'a = 'a; (* not abstract *)
> > >
> > > type t 'a = 'b; (* abstract *)
> > >
> > > It was considered acceptable, since the test for the freeness of a
> > > single type variable seemed simple because very local.
> > >
> > > Indeed only the list of parameters was consulted to compute the
> > > freeness of the type variable.
> > >
> > > It seems very weak since highly dependent of future evolution of the language.
> > >
> > > Nowadays it's no longer sufficient. Constraints can be added with a
> > > type declaration to constrain the type of parameters.
> > >
> > > type c 'a = 'b
> > >    constraint 'a = < b : 'b; .. >;
> > > (* Thanks to Till Varoquaux for it's bug report. *)
> > >
> > > Clearly I don't want to push that wrong choice further by making more
> > > semantic analysis in the parser/printer.
> > >
> > > So I revert back to << type t; >> for abstract types.
> > >
> > > Now, what's the new representation for abstract types. OCaml use a
> > > option type, where None represent the abstract type. We can't afford
> > > that, since we want a concrete syntax for everything.
> > > However we have a nil type that can be used as a default case (for
> > > lists of types or optional types).
> > >
> > > <:sig_item< type t >> === <:sig_item< type t = $ <:ctyp<>> $ >>
> > >
> > > Not that this will also concern abstract module types.
> > >
> > > Alas, this will affect existing code using the revised syntax, but
> > > will be easily caught at compilation.
> > >
> > > From a pragmatic point of view, a grep to show the usage of such types:
> > > grep -E "^[ \t]*type.*=[ \t]*'[^ \t]*[ \t]*;[ \t]*$" **/*.ml*
> > >
> > > Feel free to share your mind on that subject. The change is not yet
> > > applied to the CVS.
> > >
> > > Best regards,
> > >
> > > --
> > > Nicolas Pouillard
> > >
> >
>
>
> --
> Nicolas Pouillard
>

