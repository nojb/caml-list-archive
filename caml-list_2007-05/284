Return-Path: <berdine@dcs.qmul.ac.uk>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id A2DCBBC0A
	for <caml-list@yquem.inria.fr>; Tue, 15 May 2007 18:57:06 +0200 (CEST)
Received: from mail.dcs.qmul.ac.uk (tart.dcs.qmul.ac.uk [138.37.95.139])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4FGv4re004358
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Tue, 15 May 2007 18:57:05 +0200
Received: from tide95.microsoft.com ([213.199.128.153] helo=msrc1291015)
	by mail.dcs.qmul.ac.uk with esmtpsa (TLSv1:RC4-MD5:128)
	(Exim 4.62)
	(envelope-from <berdine@dcs.qmul.ac.uk>)
	id 1Ho0Kc-0006fx-Vk
	for caml-list@inria.fr; Tue, 15 May 2007 17:57:04 +0100
From: "Josh Berdine" <berdine@dcs.qmul.ac.uk>
To: "'ocaml ml'" <caml-list@inria.fr>
References: <02bd01c79707$7b9d4c60$72d7e520$@qmul.ac.uk> <4649DFDD.6040409@philippewang.info>
In-Reply-To: <4649DFDD.6040409@philippewang.info>
Subject: RE: [Caml-list] type aliases and recursive modules
Date: Tue, 15 May 2007 17:56:55 +0100
Message-ID: <02d701c79712$0fbb09f0$2f311dd0$@qmul.ac.uk>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_02D8_01C7971A.717F71F0"
X-Mailer: Microsoft Office Outlook 12.0
thread-index: AceXDsQtSwfYe4MSRRGOa8F7b38GeQAAiD8w
Content-Language: en-us
X-DCS-Auth-User: berdine (person)
X-j-chkmail-Score: MSGID : 4649E660.000 on discorde : j-chkmail score : XXX : 5/20 1 0.000 -> 3
X-Miltered: at discorde with ID 4649E660.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 recursive:01 typechecker:01 cheers:01 sig:01 val:01 val:01 struct:01 sig:01 struct:01 cheers:01 typechecker:01 distilled:98 iym:98 distilled:98 

This is a multipart message in MIME format.

------=_NextPart_000_02D8_01C7971A.717F71F0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

Hi,

 

Josh Berdine wrote:

> 

> Hi,

> 

> There's something I'm not understanding about recursive modules. 

> Consider the following distilled example:

> 

 

      [snip buggy simplification]

 

> 

> Why doesn't the typechecker know that ASet.t and C.t are the same 

> type? Anyone know a workaround?

> 

> This is with the 3.10.0 beta version, but seems to be the same back to 

> 3.07.

> 

> Cheers, Josh

> 

 

Hi,

 

There is an incoherency in your definition of ASet.get_its_elements.

 

In the signature of ASet, get_its_elements take an argument of type 

ASet.t, but then in its definition, it takes an argument of type A.t (as 

A.get takes an argument of type A.t, and you give ASet.get_its_elements' 

argument to A.get)

 

--

Philippe Wang

mail@philippewang.info

 

 

Thanks Philippe and Christopher, yes, mea culpa, I forgot, e.g., a call to
choose.  But my confusion remains:

 

 

# 

module rec A : sig

  type t = It of ASet.t

  val compare : t -> t -> int

  val get : t -> ASet.t

end = struct

  type t = It of ASet.t

  let compare = compare

  let get = function It(x) -> x

end

 

and ASet : sig

  type t

  val get_its_elements : t -> A.t list

end = struct

  module C = Set.Make(A)

  type t = C.t

  let get_its_elements x = C.elements (A.get (C.choose x))

end

;;

                                      Characters 350-370:

    let get_its_elements x = C.elements (A.get (C.choose x))

                                        ^^^^^^^^^^^^^^^^^^^^

This expression has type ASet.t but is here used with type

  C.t = Set.Make(A).t

#

 

 

Am I still doing something stupid?

 

Cheers,  Josh


------=_NextPart_000_02D8_01C7971A.717F71F0
Content-Type: text/html;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" =
xmlns:o=3D"urn:schemas-microsoft-com:office:office" =
xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Andale Mono";
	panose-1:2 11 5 9 0 0 0 0 0 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{mso-style-priority:99;
	mso-style-link:"Plain Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Andale Mono";}
span.PlainTextChar
	{mso-style-name:"Plain Text Char";
	mso-style-priority:99;
	mso-style-link:"Plain Text";
	font-family:"Andale Mono";}
.MsoChpDefault
	{mso-style-type:export-only;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-US link=3Dblue vlink=3Dpurple>

<div class=3DSection1>

<p class=3DMsoPlainText>Hi,<o:p></o:p></p>

<p class=3DMsoPlainText><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>Josh Berdine =
wrote:<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; =
Hi,<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; There&#8217;s =
something
I&#8217;m not understanding about recursive modules. <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; Consider the =
following
distilled example:<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [snip buggy =
simplification]<o:p></o:p></p>

<p class=3DMsoPlainText><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; Why =
doesn&#8217;t the
typechecker know that ASet.t and C.t are the same <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; type? Anyone =
know a
workaround?<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; This is with the =
3.10.0
beta version, but seems to be the same back to <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; =
3.07.<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>&gt; Cheers, =
Josh<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>&gt;<o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>Hi,<o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>There is an =
incoherency in your
definition of ASet.get_its_elements.<o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>In the signature of =
ASet,
get_its_elements take an argument of type <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>ASet.t, but then in =
its
definition, it takes an argument of type A.t (as <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>A.get takes an =
argument of type
A.t, and you give ASet.get_its_elements' <o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>argument to =
A.get)<o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>--<o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'>Philippe =
Wang<o:p></o:p></p>

<p class=3DMsoPlainText =
style=3D'margin-left:.5in'>mail@philippewang.info<o:p></o:p></p>

<p class=3DMsoPlainText style=3D'margin-left:.5in'><o:p>&nbsp;</o:p></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>Thanks</span> =
Philippe and Christopher<span
style=3D'color:black'>, yes, mea culpa, I forgot, e.g., a call to =
choose. &nbsp;But
my confusion remains:</span><o:p></o:p></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'># =
<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>module rec A : =
sig<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; type t =3D It =
of ASet.t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; val compare : =
t -&gt; t
-&gt; int<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; val get : t =
-&gt; ASet.t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>end =3D =
struct<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; type t =3D It =
of ASet.t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; let compare =
=3D compare<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; let get =3D =
function It(x)
-&gt; x<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>end<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>and ASet : =
sig<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; type =
t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; val =
get_its_elements : t
-&gt; A.t list<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>end =3D =
struct<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; module C =3D =
Set.Make(A)<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; type t =3D =
C.t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; let =
get_its_elements x =3D
C.elements (A.get (C.choose x))<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>end<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>;;<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;
Characters 350-370:<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp;&nbsp;&nbsp; =
let
get_its_elements x =3D C.elements (A.get (C.choose =
x))<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
^^^^^^^^^^^^^^^^^^^^<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>This expression has =
type ASet.t
but is here used with type<o:p></o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>&nbsp; C.t =3D =
Set.Make(A).t<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'>#<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>Am I still doing =
something
stupid?<o:p></o:p></span></p>

<p class=3DMsoPlainText><span =
style=3D'color:black'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoPlainText><span style=3D'color:black'>Cheers,&nbsp; =
Josh<o:p></o:p></span></p>

</div>

</body>

</html>

------=_NextPart_000_02D8_01C7971A.717F71F0--

