Return-Path: <mle+ocaml@mega-nerd.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 1CB2CBC69
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 06:10:19 +0200 (CEST)
Received: from smtp.syd.people.net.au (smtp.syd.people.net.au [218.214.225.98])
	by concorde.inria.fr (8.13.6/8.13.6) with SMTP id l4U4ADOt032696
	for <caml-list@inria.fr>; Wed, 30 May 2007 06:10:17 +0200
Received: (qmail 11424 invoked from network); 30 May 2007 04:10:15 -0000
Received: from unknown (HELO hendrix.mega-nerd.net) (218.214.64.136)
  by smtp.syd.people.net.au with SMTP; 30 May 2007 04:10:15 -0000
Received: from hendrix (hendrix [192.168.200.99])
	by hendrix.mega-nerd.net (Postfix) with SMTP id E26E22FF4E
	for <caml-list@inria.fr>; Wed, 30 May 2007 14:10:06 +1000 (EST)
Date: Wed, 30 May 2007 14:10:06 +1000
From: Erik de Castro Lopo <mle+ocaml@mega-nerd.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
Message-Id: <20070530141006.6cdc6f68.mle+ocaml@mega-nerd.com>
In-Reply-To: <200705300442.59906.jon@ffconsultancy.com>
References: <200705300442.59906.jon@ffconsultancy.com>
Organization: Erik Conspiracy Secret Labs
X-Mailer: Sylpheed 2.3.1 (GTK+ 2.10.11; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 465CF925.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 forks:01 ocaml:01 forks:01 marshalling:01 sockets:01 generality:01 wiki:01 unix:01 unix:01 wrote:01 caml-list:01 concurrency:02 implemented:02 programming:03 

Jon Harrop wrote:

> 
> Has anyone implemented a parallel map function in OCaml using Unix forks, 
> pipes and maybe marshalling?

I've been thinking of something like that, but with sockets 
replacing pipes so its possible to do distributed as well as
parallel programming. I was actually going to do C at the
lowest level (for generality more than anything else) and put 
an Ocaml wrapper around it.

Erik
-- 
-----------------------------------------------------------------
Erik de Castro Lopo
-----------------------------------------------------------------
"Perl as a language has less a design than a thousand special
features flying in close formation."
-- From the c2 wiki

