Return-Path: <rich@annexia.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id F1208BC69
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 14:15:03 +0200 (CEST)
Received: from furbychan.cocan.org (furbychan.cocan.org [80.68.91.176])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4UCF3TQ013171
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@inria.fr>; Wed, 30 May 2007 14:15:03 +0200
Received: from rich by furbychan.cocan.org with local (Exim 3.35 #1 (Debian))
	id 1HtN4w-00089E-00
	for <caml-list@inria.fr>; Wed, 30 May 2007 13:15:02 +0100
Date: Wed, 30 May 2007 13:15:02 +0100
To: caml-list@inria.fr
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
Message-ID: <20070530121502.GC24085@furbychan.cocan.org>
References: <200705300442.59906.jon@ffconsultancy.com> <200705300902.06760.jon@ffconsultancy.com> <20070530181300.d4179bca.mle+ocaml@mega-nerd.com> <200705300954.32784.jon@ffconsultancy.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200705300954.32784.jon@ffconsultancy.com>
User-Agent: Mutt/1.5.9i
From: Richard Jones <rich@annexia.org>
X-Miltered: at concorde with ID 465D6AC7.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; forks:01 0100,:01 marshalling:01 traversing:01 heap:01 heap:01 unix:01 wrote:01 wrote:01 caml-list:01 gcs:01 data:02 concurrency:02 deallocate:03 concurrent:03 

On Wed, May 30, 2007 at 09:54:32AM +0100, Jon Harrop wrote:
> On Wednesday 30 May 2007 09:13:00 Erik de Castro Lopo wrote:
> > How much does a concurrent GC actually buy in comparison to
> > multiple processes each with their own GC and a robust way
> > of passing data between processes?
> 
> 1. Shared memory and locks should be much faster for synchronization than 
> marshalling between processes.
> 
> 2. Forking results in multiple GCs redundantly traversing the same heap and, 
> worst case, it may end up copying the entire heap in the child process in 
> order to deallocate it.

Fixed: http://merjis.com/developers/ancient

Rich.

-- 
Richard Jones
Red Hat

