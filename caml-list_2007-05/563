Return-Path: <hars@bik-gmbh.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id BF548BC69
	for <caml-list@yquem.inria.fr>; Wed, 30 May 2007 09:14:03 +0200 (CEST)
Received: from grisu.bik-gmbh.de (grisu.bik-gmbh.de [217.110.154.194])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l4U7E2Rf017670
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Wed, 30 May 2007 09:14:03 +0200
Received: from [192.168.125.196] (abel.bik-gmbh.de [192.168.125.196]) by grisu.bik-gmbh.de (8.13.6/8.13.6) with ESMTP id l4U7Dwe5066823; Wed, 30 May 2007 09:13:59 +0200 (CEST).
Message-ID: <465D2436.5060703@bik-gmbh.de>
Date: Wed, 30 May 2007 09:13:58 +0200
From: Florian Hars <hars@bik-gmbh.de>
User-Agent: Thunderbird 1.5.0.10 (X11/20070403)
MIME-Version: 1.0
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Faking concurrency using Unix forks and pipes
References: <200705300442.59906.jon@ffconsultancy.com>
In-Reply-To: <200705300442.59906.jon@ffconsultancy.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 465D243A.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; hars:01 hars:01 bik-gmbh:01 forks:01 ocaml:01 forks:01 marshalling:01 toying:01 functor:01 functor:01 sig:01 val:01 unix:01 unix:01 caml-list:01 

Jon Harrop schrieb:
> Has anyone implemented a parallel map function in OCaml using Unix forks, 
> pipes and maybe marshalling?

I've been toying with something like

module type MR =
  functor (D1: DICT_TYPE) ->
    functor (D2: DICT_TYPE) ->
sig
  val mapreduce :
    (D1.key -> D1.value -> (D2.key * 'a) list) ->
    ( D2.key -> 'a list -> D2.value option) ->
    D1.t ->
    D2.t
end

and have one implementation that forks a set of worker processes
and then marshalls data of types
type 'a command = Quit | Execute of 'a
type ('a, 'b) response = Result of 'a | Error of 'b
through a pipe.

Not very robust right now, but it seems to work if none of the
workers dies prematurely...

Yours Florian.

