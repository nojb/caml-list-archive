Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 5BD4FBB83
	for <caml-list@yquem.inria.fr>; Tue, 15 Aug 2006 18:17:11 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k7FGHAwW008815
	for <caml-list@yquem.inria.fr>; Tue, 15 Aug 2006 18:17:11 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA02911 for <caml-list@pauillac.inria.fr>; Tue, 15 Aug 2006 18:17:10 +0200 (MET DST)
Received: from mz2.forethought.net (mzpi4.forethought.net [216.241.36.13])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k7FGH6TA008784
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@inria.fr>; Tue, 15 Aug 2006 18:17:09 +0200
Received: from [216.241.35.41] (helo=[10.0.0.2])
	by mz2.forethought.net with esmtp (Exim 4.51)
	id 1GD1b5-0006Ln-ON
	for caml-list@inria.fr; Tue, 15 Aug 2006 10:16:55 -0600
Message-ID: <44E1F384.7080304@gushee.net>
Date: Tue, 15 Aug 2006 10:17:08 -0600
From: Matt Gushee <matt@gushee.net>
User-Agent: Thunderbird 1.5.0.5 (X11/20060729)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: Re: [Caml-list] Weak hashtables & aggressive caching
References: <44E08F95.2070105@gushee.net>	 <20060815.062335.55488138.garrigue@math.nagoya-u.ac.jp> <1155617756.29241.25.camel@rosella.wigram>
In-Reply-To: <1155617756.29241.25.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 44E1F386.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 44E1F382.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; hashtables:01 caching:01 pointers:01 gdkpixbuf:01 lablgtk:01 lablgtk:01 interrupts:98 wrote:01 caml-list:01 explicitly:01 face:97 constraints:03 confused:03 guess:03 invoking:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

skaller wrote:

>> I wonder how you trigger the GC, to both keep the cache long enough,
>> and to avoid filling the memory too much, and resulting in lots of
>> swapping.
> 
> I'm confused. First, a pixmap doesn't have any pointers in it,
> so it doesn't need to be scanned by the GC.

Does that statement apply to a GdkPixbuf.pixbuf? That is the type I am 
using.

I took Jacques' statement to mean that LablGTK was explicitly invoking 
the GC--though of course I'd like to hear his answer on that point.

> Second, you'd need a LOT of images to come even close
> to running out of address space (on a 64 bit machine anyhow :)

:) Of course, many people are still using those antiquated 32-bit 
processors. I know that real software developers use overpowered 
machines to help insulate them from the constraints that face ordinary 
users. Me, I can't afford a powerful computer, so I guess I'm not a real 
developer.

> I have thousands of images and I can scan them at full size
> very fast with GQView .. I can only barely see the drawing
> happen .. it almost keeps up with the keyboard repeat rate
> at full screen size .. and that includes *scaling* the images.
> Mind you .. GQView is extremely quick

Interesting. For me it's neither fast nor slow.

> and it knows when to move on
> (interrupts rendering when you tell it to view a new image).

That's good. I would like to know (or figure out) how to do that with 
LablGTK.

> Lets get real here: the difficulties arise editing video,
> not still pictures.

Except for those of us with really old hardware. I imagine there are a 
lot of such folks in Africa; and seeing as America is rapidly becoming a 
Third World country, maybe more then you'd expect here.

-- 
Matt Gushee
: Bantam - lightweight file manager : matt.gushee.net/software/bantam/ :
: RASCL's A Simple Configuration Language :     matt.gushee.net/rascl/ :

