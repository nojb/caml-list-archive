Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 8ABEABC74
	for <caml-list@yquem.inria.fr>; Thu, 31 Aug 2006 09:32:26 +0200 (CEST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.13.6/8.13.6) with ESMTP id k7V7WOYS001102
	for <caml-list@inria.fr>; Thu, 31 Aug 2006 09:32:25 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.7/8.13.7) with ESMTP id k7V6aCm1014557;
	Thu, 31 Aug 2006 15:36:13 +0900 (JST)
Date: Thu, 31 Aug 2006 15:36:07 +0900 (JST)
Message-Id: <20060831.153607.06273444.garrigue@math.nagoya-u.ac.jp>
To: skaller@users.sourceforge.net
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Class/prototype-based OO
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <1157001502.6555.12.camel@rosella.wigram>
References: <E1E927D0-2415-4F81-9F1E-18DAC01A1BC1@cs.stanford.edu>
	<20060831.101146.29126305.garrigue@math.nagoya-u.ac.jp>
	<1157001502.6555.12.camel@rosella.wigram>
X-Mailer: Mew version 4.2 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 44F69088.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; downcasting:01 rtti:01 debugger:01 lexically:01 variants:01 debugger:01 rtti:01 debugging:01 abstraction:01 debugging:01 sourceforge:01 polymorphic:01 caml-list:01 functions:01 objects:02 

From: skaller <skaller@users.sourceforge.net>

> > Independently of downcasting, RTTI would also be needed for providing
> > more information in the debugger. But there seems not to be much
> > demand for that.
> 
> I would note it is difficult to judge the utility of a missing
> feature :)
> 
> Try to tell someone in the C++ community that C++ is severely 
> constrained because it doesn't have first class lexically
> scoped functions, variants, or pattern matching .. even
> if you explain what they are they'll just say "Oh, we can
> do that this way .. but don't have much call for it".

Here you have to read between lines :-)
I am a user of the debugger, and I also use objects at times, so I
have a personal interest in having better support for objects in the
debugger, through RTTI for instance. But this would be quite a bit of
work, so this is difficult to justify if I'm the only user. Hence the
above wording...
If you think of it, debugging contains all the difficulties of RTTI,
but without the justification for _not_ having it, that is, you clearly
want to break abstraction when debugging. So that to do things
properly, we would even want to now dynamic type information about
polymorphic types, which is even harder than for objects.

Jacques Garrigue

