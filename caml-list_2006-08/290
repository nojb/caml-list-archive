Return-Path: <info@gerd-stolpmann.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 3F431BC29
	for <caml-list@yquem.inria.fr>; Tue, 29 Aug 2006 22:04:54 +0200 (CEST)
Received: from moutng.kundenserver.de (moutng.kundenserver.de [212.227.126.177])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id k7TK4rhh006765
	for <caml-list@inria.fr>; Tue, 29 Aug 2006 22:04:54 +0200
Received: from [84.58.144.101] (helo=gate.lan.gerd-stolpmann.de)
	by mrelayeu.kundenserver.de (node=mrelayeu5) with ESMTP (Nemesis),
	id 0ML25U-1GI9on3VO0-0007oF; Tue, 29 Aug 2006 22:04:18 +0200
Received: from flakew.lan.gerd-stolpmann.de (fw.lan.gerd-stolpmann.de [192.168.1.1])
	by gate.lan.gerd-stolpmann.de (Postfix) with ESMTP id 8322EC08C;
	Tue, 29 Aug 2006 22:04:17 +0200 (CEST)
Subject: Re: [Caml-list] Re: zcat vs CamlZip
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: Sam Steingold <sds@podval.org>
Cc: Bardur Arantsson <spam@scientician.net>, caml-list@inria.fr
In-Reply-To: <44F49267.9080904@podval.org>
References: <44F48A17.5080005@podval.org> <ed22gp$un$1@sea.gmane.org>
	 <44F49267.9080904@podval.org>
Content-Type: text/plain
Date: Tue, 29 Aug 2006 22:04:16 +0200
Message-Id: <1156881856.21883.124.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.4.1 
Content-Transfer-Encoding: 7bit
X-Provags-ID: kundenserver.de abuse@kundenserver.de login:a6865a839c0178d9aa0ce41878507ea2
X-Miltered: at concorde with ID 44F49DE5.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; camlzip:01 gerd:01 stolpmann:01 ocamlnet:01 netchannels:01 netchannels:01 gerd:01 stolpmann:01 viktoriastr:01 64293:01 darmstadt:01 6151:01 6151:01 dienstag:98 rec:01 

Am Dienstag, den 29.08.2006, 15:15 -0400 schrieb Sam Steingold:
> at any rate, do you really expect that using Gzip.input and then 
> searching the result for a newline, slicing and dicing to get the 
> individual input lines, &c &c would be faster?

Ah yes, and there is an easy solution with ocamlnet:

class input_gzip_rec gzip_ch : Netchannels.rec_in_channel =
object(self)
  method input s p l =
    let n = Gzip.input gzip_ch s p l in
    if n = 0 then raise End_of_file;
    n
  method close_in() =
    Gzip.close_in gzip_ch
end


Then use it as follows:

let gz_ch = 
  Netchannels.lift_in (`Rec (new input_gzip gz_in))

let line = gz_ch # input_line()

This adds a buffering layer.

Gerd
-- 
------------------------------------------------------------
Gerd Stolpmann * Viktoriastr. 45 * 64293 Darmstadt * Germany 
gerd@gerd-stolpmann.de          http://www.gerd-stolpmann.de
Phone: +49-6151-153855                  Fax: +49-6151-997714
------------------------------------------------------------

