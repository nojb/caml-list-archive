Return-Path: <SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 42A9AE007E
	for <caml-list@sympa.inria.fr>; Tue,  7 Jun 2022 12:16:06 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=56cO=WO=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1";
  x-record-text="v=spf1 a -all"
IronPort-SDR: JwQbyN/6KN6MsonnB6aroGW8nVLXxaVhSRHUFv/Zr2RV3GrleXpdX17L27K4V5pxdOdCMKD/Dw
 wiTaZua6PZ92VOoy0qOQIEvCG9POwQdwObyq52QxsIanfXDHL7vvCb7VI/E9unZMToZAF4qsPu
 Amwe9NJvijy9yxMpbDd/l5Kq4poecenHxWpA0cm46YMOy+HGXTx0yB9gC+Vao63Cf23ysHCQB2
 0xU2j04zLQzWKAUhxzQZizdWbcbJ+2xW4tHh4UEiwbeFsy0z5W9T67WRqLOruVrHRFXipZwcfn
 vVaZyEvEyUmpdW8Ruv4OF+ho
X-IPAS-Result: =?us-ascii?q?A0B1AwBXJJ9ieyIeaIFaFoNjWygZAWZWFhcHCESETokAi?=
 =?us-ascii?q?A0zY4g7hnyNQQNPEAEDAQ0sAQ4EAQIEAQGCDoJ0AoVGAh4GAQUzEwECBAEBA?=
 =?us-ascii?q?QEDAgMBAQEBAQEDAQEFAQEBAgEBAgQEARMBAQ8LCQYHDAUQDgU8ZGQEgUsEg?=
 =?us-ascii?q?XQLBwEsDYI1DAwDA4N3AQwMAQIGBAY4CCUjAxQBBgMCEQEXAR4DARMBEhQGA?=
 =?us-ascii?q?YJjgxgEAQqPUppJGjV6fzKBAYNPAQMCAQIJAgIDDy4Bg3OBZSSBGYYZWkoBg?=
 =?us-ascii?q?woJhBACJxCBVUSBFYIpSgdugksMCwEBAQEBgRUmAQECVIMggmUEiyiMDwc6A?=
 =?us-ascii?q?0c0EoEhcQEIBgYHCgUyBgIMGBQEAhMSTQYdAhIMCgYWDkISGQwPAxIDEQEHA?=
 =?us-ascii?q?gsSCBUsCAMCAwgDAgMuAgMXCQcKAx0IChwSEBQCBBMeCwgDGR8sCQIEDgNFC?=
 =?us-ascii?q?AsKAxEEAxMYCxYIEAQGAwkvDSgLAwUPDwEGAwYCBQUBAyADFAMFJwcDIQcLJ?=
 =?us-ascii?q?g0NBCMdAwMFJgMCAhsHAgIDAgYXBgICGVgKJg0IBAgEGAQdJRAFAgcxBQQvA?=
 =?us-ascii?q?h4EBQYRCQIWAgYEBQIEBBYCAhIIAggnGwcWNhkBBV0GCwkhFgYpEQUGFgMjS?=
 =?us-ascii?q?icFSA8pNTY6FwwGIpQShDQkAg44BgdGFQYUEwgDEQ4BAQkXAi4EBBgLEQQBC?=
 =?us-ascii?q?icDGgkCNgQOAQoLAi2SAh0EBZVkgwiUM3w0B4NRgT0GDIdwPIEijQGII4N1g?=
 =?us-ascii?q?U+KcIUxknYhlkgggiuGfAKBEgmCSYg0i2wlAwMghRuBTiprgQAMBzMaMEOCa?=
 =?us-ascii?q?AlFAQMCDQECAgMBAgECCQEBAlSKMYIKZgEwAxaBBAEIghsoalSBDBqBdTuBP?=
 =?us-ascii?q?YQMAz80AgEBNwIGAQoBAQMJhWMBAQUTCwGHNIFdWgEB?=
IronPort-PHdr: A9a23:yFSiNhyX+pM6v8LXCzKMxFBlVkEcU1XcAAcZ59Idhq5Udez7ptK+Z
 heZvK0wxwWTFazgqNt8w9LMtK7hXWFSqb2gi1slNKJ2ahkelM8NlBYhCsPWQWfyLfrtcjBoV
 J8aDAwt8H60K1VaF9jjbFPOvHKy8SQSGhLiPgZpO+j5AIHfg9q52uyo5pHffwVFiDWjbb9sM
 R67sRjfus4KjIV4N60/0AHJonxGe+RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84T
 aFDAzQ9L281/szrugLdQgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QrcpVzS/9
 KdrUAHnhzsbNzA392HXj9Z/jKNdoBm8oxByzIrZbISTOfZ+fa3de80aRWtaXsZQTCNBBp2zZ
 JYBDuoGJ+ZXspL9rEYKoRawGQWgAeXiwSJKiHDrx603y+QvHx/b0gIuHNwBv2jboc7vO6sOS
 +241rXEwSnBYv5QxDzz6JLIchckofyUQb9wddDeyU8yHA3YklqQqYnlPzKJ1uQRrmOW6PBvV
 ea1hG4hsQ1xuSSgxscpionImoIV1kvJ9T1+wIYxJdy4VFB0bsKkEJtWtiGaLpZ2Td04T2Fvo
 iY6xaQLtJimdycF1Jop3QTQa+Cbc4eW+BLjUv6cLSlliX9neL+yiBW//Emgx+DgWcS530tHo
 CpZn9fCtn0A1Rzd59aDR/Z+4kus2yuC2gPP5+xHIE05mqXVJ4Agz7M2i5Edv0PDHirsl0X3i
 q+bbl0k9fa06+TmfrXpuIecN4hxigH7LKsigMq/DvokMgQWWGiU5f6z1Ljn/UHjR7VKlPI2n
 rHWsJDbOcQbprO5DBRP3ok/7Ba/Ci+q0NQfnXkbMF1FYgqHg5L1NFHJJfD0Fey/g1WjkDdzw
 /DJJLvhDo/KLnjZn7ftZa5961VByAYp099Q+o9UBqkPIPL3QEDxrsHYDhojPwyz2ebnB81x1
 owfWWKTAq+ZLbjdvUWJ5uIoO+WDeJEauCznJPgg5v7hkX85lkUBcqmqw5QXcmq0EehhI0Wce
 XbjnM0BEX0QsQoiTezqkUCCXiBJa3muX6Iw/io7CIG4AoffWo+tgKaN3Dy7HpFOfG9GCkqMH
 mnmd4WfQfsDdCWSIsp5njwFU7ihUY4h2gu0uA/00bprNvbb9TcdtZLnyNd15vHTlBEo+TxzF
 cSd3HmBT2BpkWIIQz822LpzoUtnyleM16Vznv9WFcRL6v9UTAs3MYTQw/FmB939QA7McMuFR
 EyoT9ipGT09U9E8zt8Ub0pgB9mvgQrP0zekDrIXjbCGCoI4/6TB1HbrPcl90WzJ1Kw5glkmX
 MRPMWqmi7Z69wncGoLFiV2Zl6GudaUcwC7C6nuMzWqIvEFZSQ5wTLvKUWoYZkvMotT1/kLCT
 7mwBrQ7KgZN1NCOJ69QZtH0kVlLS+3vNdrCb26rlWq9Cg6ExraWY4rrf2Ud0j/dCE8Bkw0L4
 HiIKRUwCju5rm/eDTFhCUvhblvs/udnsH67Vkg0zwWKbk19ybW65h4VhfqdS/MKw7ILpj0tq
 zJuHFayx9/ZEd6AqBBnfKlGetMy/FdH1WfYtwxhIpytNLtthlkDcwRxo0zhyQ53Bp9FkcUlo
 3Im1g1yKbiX0F9ZcTOXxoj/OqfLJWnq4BCvd6nW10nD3NqO4KcA9Ow4q0n/vAGuDkct729o0
 9xR03eF4pXKDRESUY7qX0Ys9xl6oqnabTMn64PV031sK6i0vSXY19InHut2giqnKp1bL6XOX
 Fv2DMsyA9eobuonhw7tJlgPI+YYvOZgNNygX/+Hw7KweudsjTaiy2Nd79Y5mkmF8i45Tu/Tw
 74ExeuZ102JTWTSllCk5+nzkIYMXjoSG2uj1WCwDYpYYOtpdoYOCHuyC9WwwsRiipXtXX9B6
 VPlAEkJjpz6MSGOZkDwiFUDnX8cpmaqzHTpp9QVuzQgr67EmTfL3/ynbx0ffGhCWGhli17oZ
 4myldETGkayPEAyjBXw3U/h3OBAobhnaXHJSBJBeyHwaXppUq6xqqaqe8lL+Y8luiVRUf2hb
 BadULGu6wAC3XbbFnBFjCs+aynsv5z4mxJgj2fIF0xI9C+EJ8pXkCj4scTbQe9N0zEGQihhl
 DSRAUKzatCt9NPSjJzDt+GiS0qrUYBVeiTwi4bcpG28/2I5SQankaWLk8b8WRM/zTe919RuU
 nDQqw3gZ4Dwy6mgGed3Jw9wA1vt98dxGod/i5Y9wpYK1hD2n72t9GEc2Sf2ONRfguflaWYVA
 CUM25jT6RTk30tqKjSIwZj4XzOT2Jkpa96/a2IQkiUziqICQK6Q5boChiB1p1uksSrJZvxsg
 joWyf0v8WMXxeYTt0Ihwz6cDbYbAURDdXW2xlLRt4z49/0RPzrneKPVtgI2hd27CbCevgxQE
 G30fJsvB24478lyNk7NzGym8pvtK5HbadMesAHRkg+V1rIEbstpyrxR3Ww8ZTGY3zVt0eMwg
 B1w0IvvuYGGLz4o56elGltDMSWzYcoP+zbrhKIYn8CM3onpEI8yf1dDFJbuU/+sFyof8Pr9M
 APbWgYGkS/OROTUOlqgzxJ+qHbeD52gN3eWPWQUi9J4S0yUIEVZxhsfXDA7goIRHAe3wsfsa
 wF8uiBX4UT34EgpqKogJ1zkX2HTqR39ID4wQZ7ZNxFW6wBe+2/NNsiP8u94HydZ54Cs6guXJ
 SbIAmYARXFMUUuCCVf5O7Co7tSV6OmUCN21KP7WaKmPo+hTBL+YgIii2Yx883OQJ92CazN5F
 /NhnBIJDhUbU4zJ3i8CQCsNm2fRYt6H8V2n4iMt6Jj46O7iHAfh/4yKQ/hbY9B/olauhqOSK
 +ObhCB4MCtVkJQWyhqqgPBc1QwXm3sobz6pAKgNvi7LTbvNl+lQFRFTKCohMdsTqbo72hhRN
 MXbjNLsy7M+ieQ6bjUNHR/ggp/7P5RSejPhbV+fVh/ZZeiKKG+ZnJqpbfHjFeIIxKBdsxn60
 dqCO3fqJS/L1zzgVhT0dPpJkDneJxtG/oe0bhdqD2HnCtPgcByydtFt33U6xrg9h3WCMmB5U
 3A0SHl29ujNsyh/18pYTnRG6mt5IOKEnSeA8uSeLYwZ5PJvCyIyjOla5XUm15Nf6zxCT/Fu3
 i6OvphpuV7D8KHHxjd8URVIoypGn8rS5xQkYP2FsMIYHy2YtBsWpX2dERELu8doBpX0tqZcx
 8KO8cC7YDZO/tTI/NcNUs3dKcaJKn0kYlLiHD/ZChdATCb+bDuOwRUFzLfJrjvO8stfyNCkg
 pcFR75FWUZgE/obDh8gB9keONJsWStil7eHjckO7H74rR/LRcwcsIqUM5DaSfjpNjudiqFJI
 hUSxratZ78pDdWuhhJpTQxFu9HSHE7BQd1GoitgdxI55kJX/y13SmQ1nVnuagas/GM7H/mpm
 BU7kU17PfRr8y3jqQRSRBKCtG4rnU89lM+wywurS2akcfm7etRpLH/ssEwgLp7wQwB0dBC/2
 0t+O2LNQ7tXyaBrdWVqlBP0s5xSH/VRVutBPA9WwuuYLaZNsxwUumCswklJ4vHAAJ1pmV4xc
 JKimHlH3hpqcN8/IaGDbLoM1FVbgbiC+zO5zu1kihQGKRxLqCnBHUxA8FxNLLQtIDCku/Bh+
 RDX0SBbdjJKD70yuPsu800nPOHIjCuy1q4abFi2M/2DIqiZvWnZiMPORUk/syFA3wpMr71mi
 4E7dE6FS00kzL2QDgkEc83YJkkWZphX5COVZSGKoPnAypJzPpygG6bvV+Dr1u5cwUO8QlRzR
 9xVvJhYEsH+iROJccvqfuxakkshtlu3ew3NSf1NfFjjfC4vm8ik19c32IBcImpYGmBhKWCs4
 a6RoAY2gf2FVdNwY3EAX4JCOGhkEMG9nidYuTxHAlzVmqoBzxOe6jbnuinKJDzsNpx7Y/OFe
 R5nCNe34Cgyta+shhbb/47fKGfzKdl58oaVuKVD/8rBUKsSFuU1uly5+cEQX3GwVm/TDdO5b
 4P9bYUhd528C3q3VEC+lyNgT8r1O4XlJayJjAf0AIdM5dDBjXZ6bZP7TWlYQEsjwoNLrLhxb
 gACfZchNBvhtgBlcre6PB/dydK2BWCkNTpRSfBbi+S8fb1eiSQ2PYrYgDMtSI83y+6v/AsDX
 pYP21vl/837MtQAWg+mJVsIYwLLtDY0nGhnN/8vz6E42hyduF0VNXaQf+xsaXBYl9s7GFWZL
 G4wDzYoAViGgsCQh2zkl6BX5CZbk9tOhKddt2Piu5bEfD+2cKm78NPNtC4xcdUto6twKJHuZ
 Mycu9mN+16XBImVuQqDXimgEvNckdUFOyNUTs5DnmQ9MNAHs45MugIhE90zLLtVBOwwt6inP
 HB6WDUKw3ZTBObilHQSx/2x0LzAmlKMfYQ+ZVYa5Y5ajIJVWmYzayca7sdLuK3ckHKCQWUQZ
 gJP/UJL/g1Sz+eYm8j9547ZUJJHyzhXuu95FCzRGcsxn7MaYmSG2B7gT/Gwj+Gi3QRT1e/hl
 N4BV0wmYXU=
IronPort-Data: A9a23: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
 lvtSg+/
IronPort-HdrOrdr: A9a23:CPTCLaAhCT2VtyvlHemr55DYdb4zR+YMi2TDtnoQdfU7SKOlfq
 yV9sjztiWUtN9yYh8dcLm7UcHqfZq2z/JICOcqUIuKbU3Phy+DLY1p74fuqgeQeBHWx6p6zq
 klV6B/DbTLfD1HZCvBkWuFL+o=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-AV: E=Sophos;i="5.91,283,1647298800"; 
   d="scan'208,217";a="16085349"
X-MGA-submission: =?us-ascii?q?MDGznH5848RCsyPavh7inHx4UvCSRi7Q/pDWYq?=
 =?us-ascii?q?V+Y5PJGWknT8UItZFtz8gpeKu0MMTXSkOj0m9Muu2Ly2TfifzZjTiG8y?=
 =?us-ascii?q?pmKMDBjTJL2KKEFnebjIfjdTFGTmsp86KtturNGn9eiGWW9UlC8zlOix?=
 =?us-ascii?q?udzUNAlGnDxDScshkDgRUXBg=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 07 Jun 2022 12:16:05 +0200
Received: from set (ip-185-104-137-32.ptr.icomera.net [185.104.137.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 942F056065A;
	Tue,  7 Jun 2022 12:15:38 +0200 (CEST)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 07 Jun 2022 12:15:24 +0200
Message-ID: <87k09s4w5f.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Jun  7 12:16:03 2022 +0200 (CEST))
X-Spam-Flag: Unsure, tests=bogofilter, spamicity=0.471112, queueID=8F0025606B4
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of May 31 to June 07,
2022.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

carray.0.0.1
ML Family Workshop 2022: Final Call for Presentations
OCaml Users and Developers Workshop 2022
dkml-c-probe.2.0.0: Cross-compiler friendly definitions for C compiling
Full-Stack Web Dev in OCaml Tutorial w/ Dream, Bonsai, and GraphQL
Sketch.sh now supports multiple compiler versions, starting with 4.13.1
Explicit type binding and mutual recursion
findlib-1.9.4
omake-0.10.4
Old CWN


carray.0.0.1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-carray-0-0-1/9938/6>


Deep in this threas, Fabian said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Note that you can, to a certain degree, build your own flat structures
  with the `Bytes' module. Compared to bigarrays, `Bytes.t' has less
  indirection, a lower constant memory overhead and can be allocated on
  the minor heap. The contents of `Bytes.t' are not scanned by the GC,
  just like bigarrays.

  For example, a more efficient `int32 Array.t':

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 module Int32_array : sig
  =E2=94=82   type t
  =E2=94=82   val equal : t -> t -> bool
  =E2=94=82   val create : int -> t
  =E2=94=82   val length : t -> int
  =E2=94=82   val get : t -> int -> int32
  =E2=94=82   val set : t -> int -> int32 -> unit
  =E2=94=82   val sub : t -> int -> int -> t
  =E2=94=82   val to_list : bytes -> int32 list
  =E2=94=82 end =3D struct
  =E2=94=82   type t =3D Bytes.t
  =E2=94=82   let equal =3D Bytes.equal
  =E2=94=82   let create len =3D Bytes.create (4 * len)
  =E2=94=82   let length t =3D Bytes.length t / 4
  =E2=94=82   let get t i =3D Bytes.get_int32_le t (4 * i)
  =E2=94=82   let set t i x =3D Bytes.set_int32_le t (4 * i) x
  =E2=94=82   let sub t pos len =3D Bytes.sub t (4 * pos) (4 * len)
  =E2=94=82   let to_list t =3D List.init (length t) (get t)
  =E2=94=82 end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  A more efficient `(int * int)':

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 module Point : sig
  =E2=94=82   type t
  =E2=94=82   val create : int -> int -> t
  =E2=94=82   val x : t -> int
  =E2=94=82   val y : t -> int
  =E2=94=82 end =3D struct
  =E2=94=82   external get_int64_unsafe : bytes -> int -> int64 =3D "%caml_=
bytes_get64u"
  =E2=94=82   external set_int64_unsafe : bytes -> int -> int64 -> unit =3D=
 "%caml_bytes_set64u"
  =E2=94=82   type t =3D Bytes.t
  =E2=94=82   let create x y =3D
  =E2=94=82     let p =3D Bytes.create 16 in
  =E2=94=82     set_int64_unsafe p 0 (Int64.of_int x);
  =E2=94=82     set_int64_unsafe p 8 (Int64.of_int y);
  =E2=94=82     p
  =E2=94=82   let x t =3D Int64.to_int (get_int64_unsafe t 0)
  =E2=94=82   let y t =3D Int64.to_int (get_int64_unsafe t 8)
  =E2=94=82 end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  (making a more efficient `(int * int) Array.t' is left as an exercise
  to the reader)

  The downside compared to bigarrays is that it doesn't support `sub'
  without copying. Also, bytes can be moved by the GC (during minor GCs
  or compaction), and therefore you cannot release the runtime lock when
  passing them to C. The latter point is less relevant with the
  multicore extensions, especially since there is no compactor
  yet. There is some related discussion on the eio repository:
  <https://github.com/ocaml-multicore/eio/issues/140>


ML Family Workshop 2022: Final Call for Presentations
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ml-family-workshop-2022-final-call-for-prese=
ntations/9877/2>


Benoit Montagu announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

ML Family Workshop 2022: DEADLINE EXTENSION
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C

  To increase your chances of submitting your work to the ML workshop,
  *the submission deadline is extended by a week*.  The new deadline is
  Friday 10th June (AoE).

  A quick reminder:
  =E2=80=A2 The workshop does not have proceedings, making it the perfect v=
enue
    to run some ideas with the community or present some work in
    progress within a friendly environment.
  =E2=80=A2 The work load as an author is low: submissions are only 3 pages=
 long
    (excluding references)
  =E2=80=A2 YOU have the power to make the ML workshop a success!
  =E2=80=A2 You have one more full week to submit to
    <https://ml2022.hotcrp.com/> (please register your submission
    early!)
  =E2=80=A2 All the details are here:
    <https://icfp22.sigplan.org/home/mlfamilyworkshop-2022#Call-for-Present=
ations>
  =E2=80=A2 The ML workshop is colocated with ICFP 2022
    <https://icfp22.sigplan.org/>


OCaml Users and Developers Workshop 2022
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-users-and-developers-workshop-2022/972=
6/4>


Matija Pretnar announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  To offer additional opportunities to contribute to the OCaml workshop,
  and to align with the [ML family workshop], to which you are also
  cordially invited, the submission deadline has been extended by a week
  to *Friday, June 10* (anywhere on Earth).


[ML family workshop]
<https://icfp22.sigplan.org/home/mlfamilyworkshop-2022#Call-for-Presentatio=
ns>


dkml-c-probe.2.0.0: Cross-compiler friendly definitions for C compiling
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-dkml-c-probe-2-0-0-cross-compiler-friend=
ly-definitions-for-c-compiling/9950/1>


jbeckford announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  Summary: dkml-c-probe is a new package for maintainers who compile or
  link C code. Install it with `opam install dkml-c-probe'. Full docs
  are at [https://github.com/diskuv/dkml-c-probe#readme]


[https://github.com/diskuv/dkml-c-probe#readme]
<https://github.com/diskuv/dkml-c-probe#readme>

Problem
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  You are creating an OCaml package that has foreign C code. Perhaps you
  need special C headers or libraries when you are targeting Apple
  users, or perhaps you need to execute custom OCaml code for Android
  users. More generally you need a way to determine whether your OCaml
  or C code is compiling for a Linux AMD/Intel 64-bit, Android ARM
  32-bit, or any other ABI target.


Solution
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  A user of your OCaml package may, for example, be on a 64-bit
  AMD/Intel Linux machine using a 32-bit OCaml system compiled with `gcc
  -m32'; additionally they have a 32-bit Android ARM cross-compiler
  toolchain. `dkml-c-probe' will tell you the target operating system is
  `Linux' and the target ABI is `Linux_x86' except when the
  cross-compiler toolchain is invoked. With the cross-compiler toolchain
  `dkml-c-probe' will tell you the target operating system is `Android'
  and the target ABI is `Android_arm32v7a'.


How it works
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  `dkml-c-probe' uses C preprocessor definitions (ex. `#if
  TARGET_CPU_X86_64', `#if __ANDROID__', etc.) to determine which ABI
  the C compiler (ex. `ocamlopt -config | grep native_c_compiler') is
  targeting.

  This isn't a new idea. The pattern is used in Esy and Mirage code as
  well. `dkml-c-probe' just codifies the pattern for use in your own
  code.


Usage
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  In OCaml code you can use the /versioned/ module:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 module V2 :
  =E2=94=82   sig
  =E2=94=82     type t_os =3D Android | IOS | Linux | OSX | Windows
  =E2=94=82     type t_abi =3D
  =E2=94=82 	Android_arm64v8a
  =E2=94=82       | Android_arm32v7a
  =E2=94=82       | Android_x86
  =E2=94=82       | Android_x86_64
  =E2=94=82       | Darwin_arm64
  =E2=94=82       | Darwin_x86_64
  =E2=94=82       | Linux_arm64
  =E2=94=82       | Linux_arm32v6
  =E2=94=82       | Linux_arm32v7
  =E2=94=82       | Linux_x86_64
  =E2=94=82       | Linux_x86
  =E2=94=82       | Windows_x86_64
  =E2=94=82       | Windows_x86
  =E2=94=82       | Windows_arm64
  =E2=94=82       | Windows_arm32
  =E2=94=82     val get_os : (t_os, Rresult.R.msg) result Lazy.t
  =E2=94=82     val get_abi : (t_abi, Rresult.R.msg) result Lazy.t
  =E2=94=82     val get_abi_name : (string, Rresult.R.msg) result Lazy.t
  =E2=94=82   end
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  In C code you can use the [provided `dkml_compiler_probe.h' header]
  from within Dune or Opam. Here is a snippet that handles part of the
  Linux introspection:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 #elif __linux__
  =E2=94=82 #   if __ANDROID__
  =E2=94=82 #       ...
  =E2=94=82 #   else
  =E2=94=82 #       define DKML_OS_NAME "Linux"
  =E2=94=82 #       define DKML_OS_Linux
  =E2=94=82 #       if __aarch64__
  =E2=94=82 #           define DKML_ABI "linux_arm64"
  =E2=94=82 #           define DKML_ABI_linux_arm64
  =E2=94=82 #       elif __arm__
  =E2=94=82 #           if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J=
__) ||
  =E2=94=82 defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) || defined=
(__ARM_ARCH_6ZK__) ||
  =E2=94=82 defined(__ARM_ARCH_6T2__)
  =E2=94=82 #               define DKML_ABI "linux_arm32v6"
  =E2=94=82 #               define DKML_ABI_linux_arm32v6
  =E2=94=82 #           elif defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_=
7A__) ||
  =E2=94=82 defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined=
(__ARM_ARCH_7S__)
  =E2=94=82 #               define DKML_ABI "linux_arm32v7"
  =E2=94=82 #               define DKML_ABI_linux_arm32v7
  =E2=94=82 #           endif /* __ARM_ARCH_6__ || ...,  __ARM_ARCH_7__ || =
... */
  =E2=94=82 #       elif __x86_64__
  =E2=94=82 #           define DKML_ABI "linux_x86_64"
  =E2=94=82 #           define DKML_ABI_linux_x86_64
  =E2=94=82 #       elif __i386__
  =E2=94=82 #           define DKML_ABI "linux_x86"
  =E2=94=82 #           define DKML_ABI_linux_x86
  =E2=94=82 #       elif defined(__ppc64__) || defined(__PPC64__)
  =E2=94=82 #           define DKML_ABI "linux_ppc64"
  =E2=94=82 #           define DKML_ABI_linux_ppc64
  =E2=94=82 #       elif __s390x__
  =E2=94=82 #           define DKML_ABI "linux_s390x"
  =E2=94=82 #           define DKML_ABI_linux_s390x
  =E2=94=82 #       endif /* __aarch64__, __arm__, __x86_64__, __i386__, __=
ppc64__ || __PPC64__,
  =E2=94=82 __s390x__ */
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


[provided `dkml_compiler_probe.h' header]
<https://github.com/diskuv/dkml-c-probe#c-header>


Versioning and Contributing
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C

  Whenever a new ABI is added, it goes into a new version (ex. `module
  V3'). Your existing code that uses `module V2' will be unaffected.

  But each new ABI needs to have its own maintainer because I don't have
  access to every hardware platform on the planet!

  For example, PowerPC (`ppc64') and Linux on IBM Z (`s390x') are
  supported in the C Header but not the OCaml module because there are
  no PowerPC and S390x maintainers.

  Please consider contributing, especially if you want others to have an
  easier compilation story for your favorite hardware platform.


Full-Stack Web Dev in OCaml Tutorial w/ Dream, Bonsai, and GraphQL
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/full-stack-web-dev-in-ocaml-tutorial-w-dream=
-bonsai-and-graphql/9963/1>


Alexander (Sasha) Skvortsov announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi everyone! I=E2=80=99ve written a tutorial blog series about full-stack=
 web
  development in OCaml, and wanted to share it here.

  Last semester, I took Penn State's [CMPSC 431W], where our final
  project was to build a database-driven web application. Since I'm
  fairly familiar with web programming through my work on [Flarum] and
  past internships/side projects, I decided to use this opportunity to
  explore the OCaml web development ecosystem. I used [Dream] for the
  backend, and [Bonsai] for the frontend.

  While working on this project, I realized two things:

  =E2=80=A2 OCaml is very underrated for web development. In addition to al=
l the
    language=E2=80=99s great features and safety guarantees, the ecosystem =
is
    pretty good! Dream near-perfectly coincides with my vision of
    backend webdev, and Bonsai has a great balance of
    flexibility/elegance and safety.
  =E2=80=A2 I couldn=E2=80=99t find realistic but accessible full-stack web=
 projects in
    OCaml available for reference. I found [tutorials] for [bits] and
    [pieces], but nothing that connected all the dots.

  I really enjoyed writing an article series on [hardware design with
  OCaml], so I decided to do so for web development as well. In total, I
  wrote 7 articles that walk through my project=E2=80=99s:

  1. [Full-Stack WebDev in OCaml Intro]. This includes some background
     on the project, and instructions for accessing the [live demo].
  2. [Backend WebDev w/ Dream and Caqti].
  3. [Building GraphQL APIs with Dream]
  4. [Setting up Bonsai].
  5. [Understanding Bonsai]. I actually wrote the first draft of this
     before I decided to do a blog, while trying to, well, understand
     Bonsai. It goes over some underlying concepts (SPAs, Frontend State
     Management, Algebraic Effects, Monads), as well as Bonsai=E2=80=99s co=
re
     design.
  6. [Using GraphQL in Bonsai].
  7. [Routing in Bonsai and Project Conclusion].

  Additionally, the [project=E2=80=99s README] has a comprehensive overview=
 of
  the tech stack, folder structure, and usage instructions. It also
  includes some reflections on design decisions and my experience
  working with these libraries.

  I had a lot of fun writing these, and I hope they=E2=80=99re useful to an=
yone
  considering OCaml for web development. Would be happy to answer any
  questions or comments.


[CMPSC 431W]
<https://bulletins.psu.edu/university-course-descriptions/undergraduate/cmp=
sc/#:~:text=3DCMPSC%20431W%3A%20Database%20Management%20Systems>

[Flarum] <https://flarum.org/>

[Dream] <https://aantron.github.io/dream/>

[Bonsai] <https://github.com/janestreet/bonsai>

[tutorials] <https://github.com/paurkedal/ocaml-caqti>

[bits] <https://jsthomas.github.io/ocaml-dream-api.html>

[pieces]
<https://github.com/janestreet/bonsai/blob/master/docs/getting_started/coun=
ters.mdx>

[hardware design with OCaml]
<https://discuss.ocaml.org/t/hardcaml-mips-cpu-learning-project-and-blog/80=
88>

[Full-Stack WebDev in OCaml Intro]
<https://ceramichacker.com/blog/26-1x-full-stack-webdev-in-ocaml-intro>

[live demo] <https://cmpsc431.ceramichacker.com/>

[Backend WebDev w/ Dream and Caqti]
<https://ceramichacker.com/blog/28-2x-backend-webdev-w-dream-and-caqti>

[Building GraphQL APIs with Dream]
<https://ceramichacker.com/blog/29-3x-building-graphql-apis-with-dream>

[Setting up Bonsai]
<https://ceramichacker.com/blog/30-4x-setting-up-bonsai>

[Understanding Bonsai]
<https://ceramichacker.com/blog/31-5x-understanding-bonsai>

[Using GraphQL in Bonsai]
<https://ceramichacker.com/blog/32-6x-using-graphql-in-bonsai>

[Routing in Bonsai and Project Conclusion]
<https://ceramichacker.com/blog/33-77-routing-in-bonsai-and-project-conclus=
ion>

[project=E2=80=99s README] <https://github.com/askvortsov1/nittany_market>


Alexander (Sasha) Skvortsov later added
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Also, forgot to mention this originally, but I recommend accessing the
  demo with one of the emails from [this file] or [this file] (all
  passwords are still [here]), as those users can also demo
  create/update functionalities.


[this file]
<https://github.com/askvortsov1/nittany_market/blob/main/data/Local_Vendors=
.csv>

[this file]
<https://github.com/askvortsov1/nittany_market/blob/main/data/Sellers.csv>

[here]
<https://github.com/askvortsov1/nittany_market/blob/main/data/Users.csv>


Daniel B=C3=BCnzli replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  People who are looking for more lightweight alternatives =E2=80=93 and wa=
nt to
  do web programming without bothering too much about front end insanity
  can have a look at [hc] (yes indeed: sending HTML over `fetch', web
  programming excels at running in circles).

  The front JavaScript for that [CRUD webapp] comes out at 132Ko
  uncompressed without even trying to tweak anything.


[hc] <https://erratique.ch/software/hc>

[CRUD webapp] <https://github.com/dbuenzli/hyperbib>


Sketch.sh now supports multiple compiler versions, starting with 4.13.1
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-sketch-sh-now-supports-multiple-compiler=
-versions-starting-with-4-13-1/9971/1>


Javier Ch=C3=A1varri announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The interactive OCaml sketchbook [sketch.sh] has now support to store,
  edit and run sketches in different versions of the OCaml compiler.


[sketch.sh] <https://sketch.sh/>

Support for 4.13
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Storing and running sketches using the compiler version 4.13.1 is now
  possible, this functionality has been added to the already existing
  support for version 4.06.1. The Reason parser and formatting tool
  refmt were also updated to a more recent version that supports 4.13.1.

  Here you can see a sketch showcasing the monadic let syntax, using the
  example from the official OCaml docs: [ZipSeq - Sketch.sh].


[ZipSeq - Sketch.sh] <https://sketch.sh/s/8cnNChTTq6IoGeFQarbvN2/>


Existing sketches and forks
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C

  Previously existing sketches remain in 4.06.1, while newly created
  sketches will be on 4.13.1. For now, the only way to "migrate" a
  sketch to the newer version of the compiler is by copying its content
  and pasting it in a new sketch.

  Forked sketches inherit the compiler version of the forked sketch.


Future plans
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  In the future, there are plans to support version 4.14.0 of the
  compiler, and we are considering adding a way so that the version of
  the compiler can be chosen for a given sketch. We are also working on
  migrating the editor UI codebase to a more recent version of
  ReasonReact, and use JSX3 instead of JSX2.


Feature requests and bugs
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Please [let us know] in case you have a feature request, or if you
  encounter any issues or bugs. Also, don't hesitate to reach out via DM
  or any other means if you would like to contribute or participate in
  the project in some way.

  Thanks to [Ahrefs] for supporting an Open Source Day initiative, which
  allowed to allocate time to work on this improvement for sketch.sh,
  and for providing the infrastructure to run the sketch.sh service for
  the community. Thanks as well to the authors and maintainers of the
  OCaml compiler, js_of_ocaml, and ReScript, that sketch.sh relies upon.


[let us know] <https://github.com/Sketch-sh/sketch-sh/issues/new>

[Ahrefs] <https://ahrefs.com/>


Explicit type binding and mutual recursion
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90

  Archive:
  <https://discuss.ocaml.org/t/explicit-type-binding-and-mutual-recursion/9=
973/3>


Deep in this thread, octachron explained
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  For most use cases, if you want an explicit annotation for recursive
  function, it will be much simpler to use the `type a. ...' form:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let rec foo: type a. a -> a =3D fun x -> x
  =E2=94=82 and bar: type a. a -> a =3D fun x -> foo x
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  This form is a shortcut for both adding an explicit universal
  quantified and and a corresponding locally abstract type (in other
  words ~let f : 'a . =E2=80=A6. =3D fun (type a) -> =E2=80=A6 ~).

  The root issue with

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let rec f (type a) (x:a) =3D f x
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  is that the locally abstract type `a' is introduced after
  `f'. Moreover, without an explicit type annotation, a recursive
  function like `f' is monomorphic in its body and a monorphic function
  cannot be called on a type that was defined after the function.

  In other words, the issue is that in term of type scopes, the function
  `f' is equivalent to
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let f =3D ref Fun.id
  =E2=94=82 type t =3D A
  =E2=94=82 let x =3D !f A
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  which also fails with
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 Error: This expression has type t but an expression was expecte=
d of type 'a
  =E2=94=82        The type constructor t would escape its scope
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  This is why the second solution proposed by @Gopiandcode
  works. Indeed, in

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let foo, bar =3D fun (type a) ->
  =E2=94=82   let rec foo (x: a) : a =3D x
  =E2=94=82   and bar (x: a) : a =3D foo x in
  =E2=94=82   foo, bar
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  the type `a' is defined before the recursive functions `foo' and
  `bar', thus `foo a' does not break any scope constraint.


findlib-1.9.4
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg00004.html>


Gerd Stolpmann announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  findlib-1.9.4 is out. It mainly includes a change in the configuration
  script needed for OCaml-4-14.

  For manual, download, manuals, etc. see here:

  <http://projects.camlcity.org/projects/findlib.html>

  An updated OPAM package will follow soon.


omake-0.10.4
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg00005.html>


Gerd Stolpmann announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I just released omake-0.10.4, the build utility. This finally includes
  the fix for Apple Silicon, but also a couple of small changes (roughly
  everything since PR#100 to PR#146 on GitHub).

  For docs and the download link see
  <http://projects.camlcity.org/projects/omake.html>. opam is underway.


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2022-06-07 Tue 12:11 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
</head>
<body>
<div id=3D"content" class=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2022.05.31.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2022.06.14.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of May 31 to June 07, 20=
22.
</p>

<div id=3D"table-of-contents" role=3D"doc-toc">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents" role=3D"doc-toc">
<ul>
<li><a href=3D"#1">carray.0.0.1</a></li>
<li><a href=3D"#2">ML Family Workshop 2022: Final Call for Presentations</a=
></li>
<li><a href=3D"#3">OCaml Users and Developers Workshop 2022</a></li>
<li><a href=3D"#4">dkml-c-probe.2.0.0: Cross-compiler friendly definitions =
for C compiling</a></li>
<li><a href=3D"#5">Full-Stack Web Dev in OCaml Tutorial w/ Dream, Bonsai, a=
nd GraphQL</a></li>
<li><a href=3D"#6">Sketch.sh now supports multiple compiler versions, start=
ing with 4.13.1</a></li>
<li><a href=3D"#7">Explicit type binding and mutual recursion</a></li>
<li><a href=3D"#8">findlib-1.9.4</a></li>
<li><a href=3D"#9">omake-0.10.4</a></li>
<li><a href=3D"#org52f95df">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">carray.0.0.1</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-carray-0-0-1/9938/6">ht=
tps://discuss.ocaml.org/t/ann-carray-0-0-1/9938/6</a>
</p>
</div>

<div id=3D"outline-container-org51c9368" class=3D"outline-3">
<h3 id=3D"org51c9368">Deep in this threas, Fabian said</h3>
<div class=3D"outline-text-3" id=3D"text-org51c9368">
<p>
Note that you can, to a certain degree, build your own flat structures with=
 the <code>Bytes</code>
module. Compared to bigarrays, <code>Bytes.t</code> has less indirection, a=
 lower constant memory
overhead and can be allocated on the minor heap. The contents of <code>Byte=
s.t</code> are not scanned by
the GC, just like bigarrays.
</p>

<p>
For example, a more efficient <code>int32 Array.t</code>:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">Int32_array</span> : <sp=
an style=3D"color: #000000; font-weight: bold;">sig</span>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">t</span>
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">equal</span> : t -&gt; t -&gt; bool
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">create</span> : int -&gt; t
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">length</span> : t -&gt; int
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">get</span> : t -&gt; int -&gt; int32
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">set</span> : t -&gt; int -&gt; int32 -&gt; unit
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">sub</span> : t -&gt; int -&gt; int -&gt; t
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">to_list</span> : bytes -&gt; int32 list
<span style=3D"color: #000000; font-weight: bold;">end</span> =3D <span sty=
le=3D"color: #000000; font-weight: bold;">struct</span>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">t</span> =3D <span style=3D"color: #228b22;">Bytes.</=
span>t
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">equal</span> =3D <span style=3D"color: #228b22;">Bytes=
.</span>equal
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">create</span> <span style=3D"color: #a0522d;">len</spa=
n> =3D <span style=3D"color: #228b22;">Bytes.</span>create (4 * len)
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">length</span> <span style=3D"color: #a0522d;">t</span>=
 =3D <span style=3D"color: #228b22;">Bytes.</span>length t / 4
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">get</span> <span style=3D"color: #a0522d;">t</span> <s=
pan style=3D"color: #a0522d;">i</span> =3D <span style=3D"color: #228b22;">=
Bytes.</span>get_int32_le t (4 * i)
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">set</span> <span style=3D"color: #a0522d;">t</span> <s=
pan style=3D"color: #a0522d;">i</span> <span style=3D"color: #a0522d;">x</s=
pan> =3D <span style=3D"color: #228b22;">Bytes.</span>set_int32_le t (4 * i=
) x
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">sub</span> <span style=3D"color: #a0522d;">t</span> <s=
pan style=3D"color: #a0522d;">pos</span> <span style=3D"color: #a0522d;">le=
n</span> =3D <span style=3D"color: #228b22;">Bytes.</span>sub t (4 * pos) (=
4 * len)
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">to_list</span> <span style=3D"color: #a0522d;">t</span=
> =3D <span style=3D"color: #228b22;">List.</span>init (length t) (get t)
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
A more efficient <code>(int * int)</code>:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">Point</span> : <span sty=
le=3D"color: #000000; font-weight: bold;">sig</span>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">t</span>
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">create</span> : int -&gt; int -&gt; t
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">x</span> : t -&gt; int
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">y</span> : t -&gt; int
<span style=3D"color: #000000; font-weight: bold;">end</span> =3D <span sty=
le=3D"color: #000000; font-weight: bold;">struct</span>
  <span style=3D"color: #000000; font-weight: bold;">external</span> <span =
style=3D"color: #0000ff;">get_int64_unsafe</span> : bytes -&gt; int -&gt; i=
nt64 =3D <span style=3D"color: #8b2252;">"%caml_bytes_get64u"</span>
  <span style=3D"color: #000000; font-weight: bold;">external</span> <span =
style=3D"color: #0000ff;">set_int64_unsafe</span> : bytes -&gt; int -&gt; i=
nt64 -&gt; unit =3D <span style=3D"color: #8b2252;">"%caml_bytes_set64u"</s=
pan>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">t</span> =3D <span style=3D"color: #228b22;">Bytes.</=
span>t
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">create</span> <span style=3D"color: #a0522d;">x</span>=
 <span style=3D"color: #a0522d;">y</span> =3D
    <span style=3D"color: #000000; font-weight: bold;">let</span> <span sty=
le=3D"color: #a0522d;">p</span> =3D <span style=3D"color: #228b22;">Bytes.<=
/span>create 16 <span style=3D"color: #000000; font-weight: bold;">in</span>
    set_int64_unsafe p 0 (<span style=3D"color: #228b22;">Int64.</span>of_i=
nt x);
    set_int64_unsafe p 8 (<span style=3D"color: #228b22;">Int64.</span>of_i=
nt y);
    p
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">x</span> <span style=3D"color: #a0522d;">t</span> =3D =
<span style=3D"color: #228b22;">Int64.</span>to_int (get_int64_unsafe t 0)
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">y</span> <span style=3D"color: #a0522d;">t</span> =3D =
<span style=3D"color: #228b22;">Int64.</span>to_int (get_int64_unsafe t 8)
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
(making a more efficient <code>(int * int) Array.t</code> is left as an exe=
rcise to the reader)
</p>

<p>
The downside compared to bigarrays is that it doesn't support <code>sub</co=
de> without copying. Also,
bytes can be moved by the GC (during minor GCs or compaction), and therefor=
e you cannot
release the runtime lock when passing them to C. The latter point is less r=
elevant with the
multicore extensions, especially since there is no compactor yet. There is =
some related
discussion on the eio repository: <a href=3D"https://github.com/ocaml-multi=
core/eio/issues/140">https://github.com/ocaml-multicore/eio/issues/140</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">ML Family Workshop 2022: Final Call for Presentations</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ml-family-workshop-2022-fin=
al-call-for-presentations/9877/2">https://discuss.ocaml.org/t/ml-family-wor=
kshop-2022-final-call-for-presentations/9877/2</a>
</p>
</div>

<div id=3D"outline-container-orgb7ecb95" class=3D"outline-3">
<h3 id=3D"orgb7ecb95">Benoit Montagu announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb7ecb95">
</div>
<div id=3D"outline-container-orgea0558f" class=3D"outline-4">
<h4 id=3D"orgea0558f">ML Family Workshop 2022: DEADLINE EXTENSION</h4>
<div class=3D"outline-text-4" id=3D"text-orgea0558f">
<p>
To increase your chances of submitting your work to the ML workshop,
<b>the submission deadline is extended by a week</b>.
The new deadline is Friday 10th June (AoE).
</p>

<p>
A quick reminder:
</p>
<ul class=3D"org-ul">
<li>The workshop does not have proceedings, making it the perfect venue
to run some ideas with the community or present some work in
progress within a friendly environment.</li>
<li>The work load as an author is low: submissions are only 3 pages long
(excluding references)</li>
<li>YOU have the power to make the ML workshop a success!</li>
<li>You have one more full week to submit to <a href=3D"https://ml2022.hotc=
rp.com/">https://ml2022.hotcrp.com/</a>
(please register your submission early!)</li>
<li>All the details are here:
<a href=3D"https://icfp22.sigplan.org/home/mlfamilyworkshop-2022#Call-for-P=
resentations">https://icfp22.sigplan.org/home/mlfamilyworkshop-2022#Call-fo=
r-Presentations</a></li>
<li>The ML workshop is colocated with ICFP 2022 <a href=3D"https://icfp22.s=
igplan.org/">https://icfp22.sigplan.org/</a></li>
</ul>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">OCaml Users and Developers Workshop 2022</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-users-and-developers-=
workshop-2022/9726/4">https://discuss.ocaml.org/t/ocaml-users-and-developer=
s-workshop-2022/9726/4</a>
</p>
</div>

<div id=3D"outline-container-org149ca72" class=3D"outline-3">
<h3 id=3D"org149ca72">Matija Pretnar announced</h3>
<div class=3D"outline-text-3" id=3D"text-org149ca72">
<p>
To offer additional opportunities to contribute to the OCaml workshop, and =
to align with the
<a href=3D"https://icfp22.sigplan.org/home/mlfamilyworkshop-2022#Call-for-P=
resentations">ML family
workshop</a>, to
which you are also cordially invited, the submission deadline has been exte=
nded by a week to
<b>Friday, June 10</b> (anywhere on Earth).
</p>
</div>
</div>
</div>




<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">dkml-c-probe.2.0.0: Cross-compiler friendly definitions for C =
compiling</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-dkml-c-probe-2-0-0-cros=
s-compiler-friendly-definitions-for-c-compiling/9950/1">https://discuss.oca=
ml.org/t/ann-dkml-c-probe-2-0-0-cross-compiler-friendly-definitions-for-c-c=
ompiling/9950/1</a>
</p>
</div>

<div id=3D"outline-container-org0466af4" class=3D"outline-3">
<h3 id=3D"org0466af4">jbeckford announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0466af4">
<p>
Summary: dkml-c-probe is a new package for maintainers who compile or link =
C code. Install it
with <code>opam install dkml-c-probe</code>. Full docs are at
<a href=3D"https://github.com/diskuv/dkml-c-probe#readme">https://github.co=
m/diskuv/dkml-c-probe#readme</a>
</p>
</div>

<div id=3D"outline-container-org9e8345c" class=3D"outline-4">
<h4 id=3D"org9e8345c">Problem</h4>
<div class=3D"outline-text-4" id=3D"text-org9e8345c">
<p>
You are creating an OCaml package that has foreign C code. Perhaps you need=
 special C headers
or libraries when you are targeting Apple users, or perhaps you need to exe=
cute custom OCaml
code for Android users. More generally you need a way to determine whether =
your OCaml or C
code is compiling for a Linux AMD/Intel 64-bit, Android ARM 32-bit, or any =
other ABI target.
</p>
</div>
</div>

<div id=3D"outline-container-orga3aa096" class=3D"outline-4">
<h4 id=3D"orga3aa096">Solution</h4>
<div class=3D"outline-text-4" id=3D"text-orga3aa096">
<p>
A user of your OCaml package may, for example, be on a 64-bit AMD/Intel Lin=
ux machine using a
32-bit OCaml system compiled with <code>gcc -m32</code>; additionally they =
have a 32-bit Android ARM
cross-compiler toolchain. <code>dkml-c-probe</code> will tell you the targe=
t operating system is <code>Linux</code>
and the target ABI is <code>Linux_x86</code> except when the cross-compiler=
 toolchain is invoked. With
the cross-compiler toolchain <code>dkml-c-probe</code> will tell you the ta=
rget operating system is
<code>Android</code> and the target ABI is <code>Android_arm32v7a</code>.
</p>
</div>
</div>

<div id=3D"outline-container-org15cff99" class=3D"outline-4">
<h4 id=3D"org15cff99">How it works</h4>
<div class=3D"outline-text-4" id=3D"text-org15cff99">
<p>
<code>dkml-c-probe</code> uses C preprocessor definitions (ex. <code>#if TA=
RGET_CPU_X86_64</code>, <code>#if
__ANDROID__</code>, etc.) to determine which ABI the C compiler (ex. <code>=
ocamlopt -config | grep
native_c_compiler</code>) is targeting.
</p>

<p>
This isn't a new idea. The pattern is used in Esy and Mirage code as well. =
<code>dkml-c-probe</code>
just codifies the pattern for use in your own code.
</p>
</div>
</div>

<div id=3D"outline-container-org6d88006" class=3D"outline-4">
<h4 id=3D"org6d88006">Usage</h4>
<div class=3D"outline-text-4" id=3D"text-org6d88006">
<p>
In OCaml code you can use the <i>versioned</i> module:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">V2</span> :
  <span style=3D"color: #000000; font-weight: bold;">sig</span>
    <span style=3D"color: #000000; font-weight: bold;">type</span> <span st=
yle=3D"color: #228b22;">t_os</span> =3D <span style=3D"color: #000000; back=
ground-color: #ffffff;">Android</span> | <span style=3D"color: #000000; bac=
kground-color: #ffffff;">IOS</span> | <span style=3D"color: #000000; backgr=
ound-color: #ffffff;">Linux</span> | <span style=3D"color: #000000; backgro=
und-color: #ffffff;">OSX</span> | <span style=3D"color: #000000; background=
-color: #ffffff;">Windows</span>
    <span style=3D"color: #000000; font-weight: bold;">type</span> <span st=
yle=3D"color: #228b22;">t_abi</span> =3D
        <span style=3D"color: #000000; background-color: #ffffff;">Android_=
arm64v8a</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Android_=
arm32v7a</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Android_=
x86</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Android_=
x86_64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Darwin_a=
rm64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Darwin_x=
86_64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Linux_ar=
m64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Linux_ar=
m32v6</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Linux_ar=
m32v7</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Linux_x8=
6_64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Linux_x8=
6</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Windows_=
x86_64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Windows_=
x86</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Windows_=
arm64</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Windows_=
arm32</span>
    <span style=3D"color: #000000; font-weight: bold;">val</span> <span sty=
le=3D"color: #0000ff;">get_os</span> : (t_os, <span style=3D"color: #228b22=
;">Rresult.R.</span>msg) result <span style=3D"color: #228b22;">Lazy.</span=
>t
    <span style=3D"color: #000000; font-weight: bold;">val</span> <span sty=
le=3D"color: #0000ff;">get_abi</span> : (t_abi, <span style=3D"color: #228b=
22;">Rresult.R.</span>msg) result <span style=3D"color: #228b22;">Lazy.</sp=
an>t
    <span style=3D"color: #000000; font-weight: bold;">val</span> <span sty=
le=3D"color: #0000ff;">get_abi_name</span> : (string, <span style=3D"color:=
 #228b22;">Rresult.R.</span>msg) result <span style=3D"color: #228b22;">Laz=
y.</span>t
  <span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
In C code you can use the <a href=3D"https://github.com/diskuv/dkml-c-probe=
#c-header">provided <code>dkml_compiler_probe.h</code>
header</a> from within Dune or Opam. Here is a
snippet that handles part of the Linux introspection:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-c"><span style=3D"color: #483d8b;">#elif</span> __lin=
ux__
<span style=3D"color: #483d8b;">#   if</span> __ANDROID__
#       ...
<span style=3D"color: #483d8b;">#   else</span>
<span style=3D"color: #483d8b;">#       define</span> <span style=3D"color:=
 #a0522d;">DKML_OS_NAME</span> <span style=3D"color: #8b2252;">"Linux"</spa=
n>
<span style=3D"color: #483d8b;">#       define</span> <span style=3D"color:=
 #a0522d;">DKML_OS_Linux</span>
<span style=3D"color: #483d8b;">#       if</span> __aarch64__
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux_arm64=
"</span>
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI_linux_arm64</span>
<span style=3D"color: #483d8b;">#       elif</span> __arm__
<span style=3D"color: #483d8b;">#           if</span> <span style=3D"color:=
 #483d8b;">defined</span>(__ARM_ARCH_6__) || <span style=3D"color: #483d8b;=
">defined</span>(__ARM_ARCH_6J__) ||
defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_=
6ZK__) ||
defined(__ARM_ARCH_6T2__)
<span style=3D"color: #483d8b;">#               define</span> <span style=
=3D"color: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux=
_arm32v6"</span>
<span style=3D"color: #483d8b;">#               define</span> <span style=
=3D"color: #a0522d;">DKML_ABI_linux_arm32v6</span>
<span style=3D"color: #483d8b;">#           elif</span> <span style=3D"colo=
r: #483d8b;">defined</span>(__ARM_ARCH_7__) || <span style=3D"color: #483d8=
b;">defined</span>(__ARM_ARCH_7A__) ||
<span style=3D"color: #0000ff;">defined</span>(__ARM_ARCH_7R__) || defined(=
__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
<span style=3D"color: #483d8b;">#               define</span> <span style=
=3D"color: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux=
_arm32v7"</span>
<span style=3D"color: #483d8b;">#               define</span> <span style=
=3D"color: #a0522d;">DKML_ABI_linux_arm32v7</span>
<span style=3D"color: #483d8b;">#           endif</span> <span style=3D"col=
or: #b22222;">/* </span><span style=3D"color: #b22222;">__ARM_ARCH_6__ || .=
..,  __ARM_ARCH_7__ || ...</span><span style=3D"color: #b22222;"> */</span>
<span style=3D"color: #483d8b;">#       elif</span> __x86_64__
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux_x86_6=
4"</span>
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI_linux_x86_64</span>
<span style=3D"color: #483d8b;">#       elif</span> __i386__
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux_x86"<=
/span>
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI_linux_x86</span>
<span style=3D"color: #483d8b;">#       elif</span> <span style=3D"color: #=
483d8b;">defined</span>(__ppc64__) || <span style=3D"color: #483d8b;">defin=
ed</span>(__PPC64__)
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux_ppc64=
"</span>
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI_linux_ppc64</span>
<span style=3D"color: #483d8b;">#       elif</span> __s390x__
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI</span> <span style=3D"color: #8b2252;">"linux_s390x=
"</span>
<span style=3D"color: #483d8b;">#           define</span> <span style=3D"co=
lor: #a0522d;">DKML_ABI_linux_s390x</span>
<span style=3D"color: #483d8b;">#       endif</span> <span style=3D"color: =
#b22222;">/* </span><span style=3D"color: #b22222;">__aarch64__, __arm__, _=
_x86_64__, __i386__, __ppc64__ || __PPC64__,</span>
<span style=3D"color: #b22222;">__s390x__</span><span style=3D"color: #b222=
22;"> */</span>
</pre>
</div>
</div>
</div>

<div id=3D"outline-container-orge32b3ca" class=3D"outline-4">
<h4 id=3D"orge32b3ca">Versioning and Contributing</h4>
<div class=3D"outline-text-4" id=3D"text-orge32b3ca">
<p>
Whenever a new ABI is added, it goes into a new version (ex. <code>module V=
3</code>). Your existing code
that uses <code>module V2</code> will be unaffected.
</p>

<p>
But each new ABI needs to have its own maintainer because I don't have acce=
ss to every
hardware platform on the planet!
</p>

<p>
For example, PowerPC (<code>ppc64</code>) and Linux on IBM Z (<code>s390x</=
code>) are supported in the C Header but
not the OCaml module because there are no PowerPC and S390x maintainers.
</p>

<p>
Please consider contributing, especially if you want others to have an easi=
er compilation
story for your favorite hardware platform.
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Full-Stack Web Dev in OCaml Tutorial w/ Dream, Bonsai, and Gra=
phQL</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/full-stack-web-dev-in-ocaml=
-tutorial-w-dream-bonsai-and-graphql/9963/1">https://discuss.ocaml.org/t/fu=
ll-stack-web-dev-in-ocaml-tutorial-w-dream-bonsai-and-graphql/9963/1</a>
</p>
</div>

<div id=3D"outline-container-org9cac6e7" class=3D"outline-3">
<h3 id=3D"org9cac6e7">Alexander (Sasha) Skvortsov announced</h3>
<div class=3D"outline-text-3" id=3D"text-org9cac6e7">
<p>
Hi everyone! I=E2=80=99ve written a tutorial blog series about full-stack w=
eb development in OCaml,
and wanted to share it here.
</p>

<p>
Last semester, I took Penn State's <a href=3D"https://bulletins.psu.edu/uni=
versity-course-descriptions/undergraduate/cmpsc/#:~:text=3DCMPSC%20431W%3A%=
20Database%20Management%20Systems">CMPSC
431W</a>,
where our final project was to build a database-driven web application. Sin=
ce I'm fairly
familiar with web programming through my work on <a href=3D"https://flarum.=
org/">Flarum</a> and past
internships/side projects, I decided to use this opportunity to explore the=
 OCaml web
development ecosystem. I used <a href=3D"https://aantron.github.io/dream/">=
Dream</a> for the backend, and
<a href=3D"https://github.com/janestreet/bonsai">Bonsai</a> for the fronten=
d.
</p>

<p>
While working on this project, I realized two things:
</p>

<ul class=3D"org-ul">
<li>OCaml is very underrated for web development. In addition to all the la=
nguage=E2=80=99s great features and safety guarantees, the ecosystem is pre=
tty good! Dream near-perfectly coincides with my vision of backend webdev, =
and Bonsai has a great balance of flexibility/elegance and safety.</li>
<li>I couldn=E2=80=99t find realistic but accessible full-stack web project=
s in OCaml available for reference. I found <a href=3D"https://github.com/p=
aurkedal/ocaml-caqti">tutorials</a> for <a href=3D"https://jsthomas.github.=
io/ocaml-dream-api.html">bits</a> and <a href=3D"https://github.com/janestr=
eet/bonsai/blob/master/docs/getting_started/counters.mdx">pieces</a>, but n=
othing that connected all the dots.</li>
</ul>

<p>
I really enjoyed writing an article series on <a href=3D"https://discuss.oc=
aml.org/t/hardcaml-mips-cpu-learning-project-and-blog/8088">hardware design=
 with
OCaml</a>, so I
decided to do so for web development as well. In total, I wrote 7 articles =
that walk through
my project=E2=80=99s:
</p>

<ol class=3D"org-ol">
<li><a href=3D"https://ceramichacker.com/blog/26-1x-full-stack-webdev-in-oc=
aml-intro">Full-Stack WebDev in OCaml Intro</a>. This includes some backgro=
und on the project, and instructions for accessing the <a href=3D"https://c=
mpsc431.ceramichacker.com/">live demo</a>.</li>
<li><a href=3D"https://ceramichacker.com/blog/28-2x-backend-webdev-w-dream-=
and-caqti">Backend WebDev w/ Dream and Caqti</a>.</li>
<li><a href=3D"https://ceramichacker.com/blog/29-3x-building-graphql-apis-w=
ith-dream">Building GraphQL APIs with Dream</a></li>
<li><a href=3D"https://ceramichacker.com/blog/30-4x-setting-up-bonsai">Sett=
ing up Bonsai</a>.</li>
<li><a href=3D"https://ceramichacker.com/blog/31-5x-understanding-bonsai">U=
nderstanding Bonsai</a>. I actually wrote the first draft of this before I =
decided to do a blog, while trying to, well, understand Bonsai. It goes ove=
r some underlying concepts (SPAs, Frontend State Management, Algebraic Effe=
cts, Monads), as well as Bonsai=E2=80=99s core design.</li>
<li><a href=3D"https://ceramichacker.com/blog/32-6x-using-graphql-in-bonsai=
">Using GraphQL in Bonsai</a>.</li>
<li><a href=3D"https://ceramichacker.com/blog/33-77-routing-in-bonsai-and-p=
roject-conclusion">Routing in Bonsai and Project Conclusion</a>.</li>
</ol>

<p>
Additionally, the <a href=3D"https://github.com/askvortsov1/nittany_market"=
>project=E2=80=99s README</a> has a
comprehensive overview of the tech stack, folder structure, and usage instr=
uctions. It also
includes some reflections on design decisions and my experience working wit=
h these libraries.
</p>

<p>
I had a lot of fun writing these, and I hope they=E2=80=99re useful to anyo=
ne considering OCaml for
web development. Would be happy to answer any questions or comments.
</p>
</div>
</div>


<div id=3D"outline-container-org339df25" class=3D"outline-3">
<h3 id=3D"org339df25">Alexander (Sasha) Skvortsov later added</h3>
<div class=3D"outline-text-3" id=3D"text-org339df25">
<p>
Also, forgot to mention this
originally, but I recommend accessing the demo with one of the emails from =
<a href=3D"https://github.com/askvortsov1/nittany_market/blob/main/data/Loc=
al_Vendors.csv">this
file</a> or
<a href=3D"https://github.com/askvortsov1/nittany_market/blob/main/data/Sel=
lers.csv">this file</a> (all
passwords are still
<a href=3D"https://github.com/askvortsov1/nittany_market/blob/main/data/Use=
rs.csv">here</a>), as those
users can also demo create/update functionalities.
</p>
</div>
</div>


<div id=3D"outline-container-org8bb2e88" class=3D"outline-3">
<h3 id=3D"org8bb2e88">Daniel B=C3=BCnzli replied</h3>
<div class=3D"outline-text-3" id=3D"text-org8bb2e88">
<p>
People who are looking for more lightweight alternatives =E2=80=93 and want=
 to do web programming without bothering too much about front end insanity =
can have a look at
<a href=3D"https://erratique.ch/software/hc">hc</a> (yes indeed: sending HT=
ML over <code>fetch</code>, web programming excels at running in circles).
</p>

<p>
The front JavaScript for that <a href=3D"https://github.com/dbuenzli/hyperb=
ib">CRUD webapp</a> comes out at 132Ko uncompressed without even trying to =
tweak anything.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">Sketch.sh now supports multiple compiler versions, starting wi=
th 4.13.1</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-sketch-sh-now-supports-=
multiple-compiler-versions-starting-with-4-13-1/9971/1">https://discuss.oca=
ml.org/t/ann-sketch-sh-now-supports-multiple-compiler-versions-starting-wit=
h-4-13-1/9971/1</a>
</p>
</div>

<div id=3D"outline-container-orgf7a3a35" class=3D"outline-3">
<h3 id=3D"orgf7a3a35">Javier Ch=C3=A1varri announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgf7a3a35">
<p>
The interactive OCaml sketchbook <a href=3D"https://sketch.sh/">sketch.sh</=
a> has now support to store,
edit and run sketches in different versions of the OCaml compiler.
</p>
</div>

<div id=3D"outline-container-org67fb6d4" class=3D"outline-4">
<h4 id=3D"org67fb6d4">Support for 4.13</h4>
<div class=3D"outline-text-4" id=3D"text-org67fb6d4">
<p>
Storing and running sketches using the compiler version 4.13.1 is now possi=
ble, this
functionality has been added to the already existing support for version 4.=
06.1. The Reason
parser and formatting tool refmt were also updated to a more recent version=
 that supports
4.13.1.
</p>

<p>
Here you can see a sketch showcasing the monadic let syntax, using the exam=
ple from the
official OCaml docs: <a href=3D"https://sketch.sh/s/8cnNChTTq6IoGeFQarbvN2/=
">ZipSeq - Sketch.sh</a>.
</p>
</div>
</div>

<div id=3D"outline-container-org20945b8" class=3D"outline-4">
<h4 id=3D"org20945b8">Existing sketches and forks</h4>
<div class=3D"outline-text-4" id=3D"text-org20945b8">
<p>
Previously existing sketches remain in 4.06.1, while newly created sketches=
 will be on
4.13.1. For now, the only way to "migrate" a sketch to the newer version of=
 the compiler is
by copying its content and pasting it in a new sketch.
</p>

<p>
Forked sketches inherit the compiler version of the forked sketch.
</p>
</div>
</div>

<div id=3D"outline-container-org57f918f" class=3D"outline-4">
<h4 id=3D"org57f918f">Future plans</h4>
<div class=3D"outline-text-4" id=3D"text-org57f918f">
<p>
In the future, there are plans to support version 4.14.0 of the compiler, a=
nd we are
considering adding a way so that the version of the compiler can be chosen =
for a given
sketch. We are also working on migrating the editor UI codebase to a more r=
ecent version of
ReasonReact, and use JSX3 instead of JSX2.
</p>
</div>
</div>

<div id=3D"outline-container-org77898f8" class=3D"outline-4">
<h4 id=3D"org77898f8">Feature requests and bugs</h4>
<div class=3D"outline-text-4" id=3D"text-org77898f8">
<p>
Please <a href=3D"https://github.com/Sketch-sh/sketch-sh/issues/new">let us=
 know</a> in case you have a
feature request, or if you encounter any issues or bugs. Also, don't hesita=
te to reach out
via DM or any other means if you would like to contribute or participate in=
 the project in
some way.
</p>

<p>
Thanks to <a href=3D"https://ahrefs.com/">Ahrefs</a> for supporting an Open=
 Source Day initiative, which
allowed to allocate time to work on this improvement for sketch.sh, and for=
 providing the
infrastructure to run the sketch.sh service for the community. Thanks as we=
ll to the authors
and maintainers of the OCaml compiler, js_of_ocaml, and ReScript, that sket=
ch.sh relies upon.
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">Explicit type binding and mutual recursion</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/explicit-type-binding-and-m=
utual-recursion/9973/3">https://discuss.ocaml.org/t/explicit-type-binding-a=
nd-mutual-recursion/9973/3</a>
</p>
</div>

<div id=3D"outline-container-org366e1c0" class=3D"outline-3">
<h3 id=3D"org366e1c0">Deep in this thread, octachron explained</h3>
<div class=3D"outline-text-3" id=3D"text-org366e1c0">
<p>
For most use cases, if you want an explicit annotation for recursive functi=
on, it will be
much simpler to use the <code>type a. ...</code> form:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #000000; font-weight: bold;">rec</spa=
n> <span style=3D"color: #0000ff;">foo</span>:<span style=3D"color: #228b22=
;"> </span><span style=3D"color: #a020f0;">type</span><span style=3D"color:=
 #228b22;"> a. a -&gt; a </span>=3D <span style=3D"color: #a020f0;">fun</sp=
an> <span style=3D"color: #a0522d;">x</span> -&gt; x
<span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #0000ff;">bar</span>:<span style=3D"color: #228b22;"> </span><sp=
an style=3D"color: #a020f0;">type</span><span style=3D"color: #228b22;"> a.=
 a -&gt; a </span>=3D <span style=3D"color: #a020f0;">fun</span> <span styl=
e=3D"color: #a0522d;">x</span> -&gt; foo x
</pre>
</div>
<p>
This form is a shortcut for both adding an explicit universal quantified an=
d and a
corresponding locally abstract type (in other words ~let f :  'a . &#x2026;=
. =3D fun (type a) -&gt; &#x2026; ~).
</p>

<p>
The root issue with
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #000000; font-weight: bold;">rec</spa=
n> <span style=3D"color: #0000ff;">f</span> (<span style=3D"color: #a020f0;=
">type</span> <span style=3D"color: #228b22;">a</span>) (<span style=3D"col=
or: #a0522d;">x</span>:<span style=3D"color: #228b22;">a</span>) =3D f x
</pre>
</div>
<p>
is that the locally abstract type <code>a</code> is introduced after <code>=
f</code>. Moreover, without an explicit
type annotation, a recursive function like <code>f</code> is monomorphic in=
 its body and a monorphic
function cannot be called on a type that was defined after the function.
</p>

<p>
In other words, the issue is that in term of type scopes, the function <cod=
e>f</code> is equivalent to
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">f</span> =3D <span style=3D=
"color: #483d8b;">ref</span> <span style=3D"color: #228b22;">Fun.</span>id
<span style=3D"color: #000000; font-weight: bold;">type</span> <span style=
=3D"color: #228b22;">t</span> =3D <span style=3D"color: #000000; background=
-color: #ffffff;">A</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">x</span> =3D <span style=3D"color: #a52a2a;">!</span>f=
 A
</pre>
</div>
<p>
which also fails with
</p>
<pre class=3D"example" id=3D"orgf529507">
Error: This expression has type t but an expression was expected of type 'a
       The type constructor t would escape its scope
</pre>
<p>
This is why the second solution proposed by @Gopiandcode  works. Indeed, in
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">foo</span>, <span style=3D"=
color: #a0522d;">bar</span> =3D <span style=3D"color: #a020f0;">fun</span> =
(<span style=3D"color: #a020f0;">type</span> <span style=3D"color: #228b22;=
">a</span>) -&gt;
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">rec</span> <span style=3D"color: #0=
000ff;">foo</span> (<span style=3D"color: #a0522d;">x</span>:<span style=3D=
"color: #228b22;"> a</span>) :<span style=3D"color: #228b22;"> a </span>=3D=
 x
  <span style=3D"color: #000000; font-weight: bold;">and</span> <span style=
=3D"color: #0000ff;">bar</span> (<span style=3D"color: #a0522d;">x</span>:<=
span style=3D"color: #228b22;"> a</span>) :<span style=3D"color: #228b22;">=
 a </span>=3D foo x <span style=3D"color: #000000; font-weight: bold;">in</=
span>
  foo, bar
</pre>
</div>
<p>
the type <code>a</code> is defined before the recursive functions <code>foo=
</code> and <code>bar</code>, thus <code>foo a</code> does not
break any scope constraint.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">findlib-1.9.4</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg0=
0004.html">https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg00004.html=
</a>
</p>
</div>

<div id=3D"outline-container-org090e473" class=3D"outline-3">
<h3 id=3D"org090e473">Gerd Stolpmann announced</h3>
<div class=3D"outline-text-3" id=3D"text-org090e473">
<p>
findlib-1.9.4 is out. It mainly includes a change in the configuration
script needed for OCaml-4-14.
</p>

<p>
For manual, download, manuals, etc. see here:
</p>

<p>
<a href=3D"http://projects.camlcity.org/projects/findlib.html">http://proje=
cts.camlcity.org/projects/findlib.html</a>
</p>

<p>
An updated OPAM package will follow soon.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-9" class=3D"outline-2">
<h2 id=3D"9">omake-0.10.4</h2>
<div class=3D"outline-text-2" id=3D"text-9">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg0=
0005.html">https://sympa.inria.fr/sympa/arc/caml-list/2022-06/msg00005.html=
</a>
</p>
</div>

<div id=3D"outline-container-orgc8e7c93" class=3D"outline-3">
<h3 id=3D"orgc8e7c93">Gerd Stolpmann announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc8e7c93">
<p>
I just released omake-0.10.4, the build utility. This finally includes
the fix for Apple Silicon, but also
a couple of small changes (roughly everything since PR#100 to PR#146 on
GitHub).
</p>

<p>
For docs and the download link see
<a href=3D"http://projects.camlcity.org/projects/omake.html">http://project=
s.camlcity.org/projects/omake.html</a>. opam is underway.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org52f95df" class=3D"outline-2">
<h2 id=3D"org52f95df">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org52f95df">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname" id=3D"orgc343c75">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

