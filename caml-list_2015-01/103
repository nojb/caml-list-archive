Return-Path: <jun.furuse@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 6FD6C7F6D8
	for <caml-list@sympa.inria.fr>; Tue, 20 Jan 2015 04:53:54 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jun.furuse@gmail.com) identity=pra; client-ip=74.125.82.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jun.furuse@gmail.com";
  x-sender="jun.furuse@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  jun.furuse@gmail.com designates 74.125.82.52 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jun.furuse@gmail.com";
  x-sender="jun.furuse@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f52.google.com) identity=helo;
  client-ip=74.125.82.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jun.furuse@gmail.com";
  x-sender="postmaster@mail-wg0-f52.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AikBAKzQvVRKfVI0m2dsb2JhbABchDAEzDQCgRoHQwEBAQEBEQEBAQEBBgsLCRQuhA0BAQMBDAYuARsQCgMBAwwGBQs7IgERAQUBHAYTIod1AQMBBAQIrVM+MY0ZgneKSgoZJw0YPINIAQEBAQEFAQEBAQEBARUBBQ6KAYUSWAeEKQWJdI18gRSFPINKhkYSI4EVhB0xMYEDgUABAQE
X-IPAS-Result: AikBAKzQvVRKfVI0m2dsb2JhbABchDAEzDQCgRoHQwEBAQEBEQEBAQEBBgsLCRQuhA0BAQMBDAYuARsQCgMBAwwGBQs7IgERAQUBHAYTIod1AQMBBAQIrVM+MY0ZgneKSgoZJw0YPINIAQEBAQEFAQEBAQEBARUBBQ6KAYUSWAeEKQWJdI18gRSFPINKhkYSI4EVhB0xMYEDgUABAQE
X-IronPort-AV: E=Sophos;i="5.09,431,1418079600"; 
   d="scan'208";a="117719028"
Received: from mail-wg0-f52.google.com ([74.125.82.52])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 20 Jan 2015 04:53:53 +0100
Received: by mail-wg0-f52.google.com with SMTP id l2so12864816wgh.11
        for <caml-list@inria.fr>; Mon, 19 Jan 2015 19:53:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=6YuOZTk8vRvKkK/NU8aec2WIEdQf7JGLrAs4CZY0WcQ=;
        b=gOriJuoRfT4fcfs32+/xDvpnR917hLP8UJQ5lR0atrnefHwH6UAC251sJh7DUtPMBN
         RP4ijINMl3uisj/IsWy5xdv4jV9d2QLTVNw0dmE14tWnlkoWVs2uwMV05O1PO2cCJLam
         mAYKkHY9g70RodyWSGYPJnlmEmWW7RkIvuQWgI5XogfeoecI/jmOIWsfMrR7MVeZsozA
         CFXz3hGt8CKZCo/4Oq6SQVgFT1QaCmAeqKg8SiDjd0mZgC8212Dnq5NndS4QBzvpYSog
         TYE1xkbp68Z6PP3JbvMfGBtMqWWy0u+0sBAh/uPnXQHw+u7mQclNfAWWUwtlHZ9TeQNc
         61MQ==
MIME-Version: 1.0
X-Received: by 10.194.179.68 with SMTP id de4mr35597775wjc.42.1421726032906;
 Mon, 19 Jan 2015 19:53:52 -0800 (PST)
Received: by 10.194.100.130 with HTTP; Mon, 19 Jan 2015 19:53:52 -0800 (PST)
Received: by 10.194.100.130 with HTTP; Mon, 19 Jan 2015 19:53:52 -0800 (PST)
In-Reply-To: <54BD7CBB.50409@zoho.com>
References: <CAAoLEWswALkLSFj-_sMM8h3+2rNn2Y_8PH70BXugvgmUUceL1g@mail.gmail.com>
	<20150114084056.140F6C38A1@www1.g3.pair.com>
	<CAAoLEWvdRt=nVRKD7d2fVvxeLujurV4+jMaEkm6VWg+oQHrdoQ@mail.gmail.com>
	<54BCC6D6.6020702@frisch.fr>
	<54BD7CBB.50409@zoho.com>
Date: Tue, 20 Jan 2015 11:53:52 +0800
Message-ID: <CAAoLEWtKzvNk1yViX0y3a1Wd=6Q3_GMSz-CZRy-3ic=BbC5=AA@mail.gmail.com>
From: Jun Furuse <jun.furuse@gmail.com>
To: Drup <drupyog+caml@zoho.com>
Cc: caml-list <caml-list@inria.fr>, Alain Frisch <alain@frisch.fr>, oleg@okmij.org
Content-Type: multipart/alternative; boundary=089e01493cb028d09d050d0d632a
Subject: Re: [Caml-list] [ANN] ppx_monadic.1.0.2, ppx for monadic do,
 pattern

--089e01493cb028d09d050d0d632a
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I know what you wrote, since I always asked myself "isn't it too bizarre?"
when I was writing ppx_monadic. Here are some justifications I made:

The first intension of ppx_monadic is to port my code with pa_monad without
pain. Unfortunately ppx_monad required too many small fixes due to the
following reasons:

=B7       "perform" needed to be replaced by "begin%monad .. end" or "[%mon=
ad
.. ]" which requires closing, which is really pain. Ppx_monad provides
"fun%monad", "match%monad" without closing but they were not always helpful
for me.
=B7       The pattern "p" of "p <- e" is limited to a variable, since it
overrides the syntax of object member mutation. In addition, I use lots of
monadic binds inside my class methods. Therefore this override is not
acceptable for me.

Secondary, I see the monadic syntax sugar is to reduce the number of key
types, and I accepted some alien syntax weirdness for the purpose. If the
number of key types would not matter, I would be happy with the good old
bind (>>=3D) chains and would not use "do" at all. People think bind chains
are hard to read but my experience with Jane Street Async tells me it it
not quite. Ppx_monad does not really gain in this point unfortunately: I
was often forced to write "let%monad (x,y) =3D e in" just for "(x,y) <-- e;=
".
I write Haskell do-notations daily and wanted to have something comparable
in OCaml.

Anyway, the current OCaml syntax is limited to have do-notation which makes
everyone happy. If there would be a way in OCaml to write "foo e" for some
keyword "foo" which is like "begin" but does not require "end", I would be
pretty happy to change the weird "Option.do_; e" to "foo%Option e". Before
implementing "do_; e", I tried a bit of "[%do] e" but it did not work well
since "[%do] p <-- e" is parsed as "([%do] p) <-- e", not "[%do] (p <-- e)".

Best,
Jun
On 20 Jan, 2015 5:53 am, "Drup" <drupyog+caml@zoho.com> wrote:

>
>  I can appreciate that authors of tools that requires special syntactic
>> support would love to have their new forms look completely native to use=
rs,
>> but the counter-argument can be made that keeping an explicit syntax
>> (through the '%' character) for features that are not part of the offici=
al
>> language is a good property. (Camlp4/campl5 are still available for peop=
le
>> who want to play with the concrete syntax.)
>>
>
> I personally like the explicitness of the syntax a lot. The only issue in
> OCaml currently is that, given the need for retro compatibility, it goes
> sometimes against the terseness. For example the impossibility to do " x@=
foo"
> instead of "x[@foo]". That's unavoidable, though.
>
> This is, by the way, a point I dislike a lot with ppx_monadic. It abuses
> the native syntax in completely alien ways and without annotations.
>
> I like ppx_monad's syntax quite better due to the fact that it's always
> explicitly a ppx (thanks to %monad) and do not overload the "do_"
> identifier.
>
>

--089e01493cb028d09d050d0d632a
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">I know what you wrote, since I always asked myself &ldquo;is=
n&rsquo;t it too bizarre?&rdquo; when I was writing ppx_monadic. Here are s=
ome justifications I made:</p>
<p dir=3D"ltr">The first intension of ppx_monadic is to port my code with p=
a_monad without pain. Unfortunately ppx_monad required too many small fixes=
 due to the following reasons:</p>
<p dir=3D"ltr">=B7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;perform&=
rdquo; needed to be replaced by &ldquo;begin%monad .. end&rdquo; or &ldquo;=
[%monad .. ]&rdquo; which requires closing, which is really pain. Ppx_monad=
 provides &ldquo;fun%monad&rdquo;, &ldquo;match%monad&rdquo; without closin=
g but they were not always helpful for me.<br>
=B7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The pattern &ldquo;p&rdquo; of=
 &ldquo;p &lt;- e&rdquo; is limited to a variable, since it overrides the s=
yntax of object member mutation. In addition, I use lots of monadic binds i=
nside my class methods. Therefore this override is not acceptable for me.</=
p>
<p dir=3D"ltr">Secondary, I see the monadic syntax sugar is to reduce the n=
umber of key types, and I accepted some alien syntax weirdness for the purp=
ose. If the number of key types would not matter, I would be happy with the=
 good old bind (&gt;&gt;=3D) chains and would not use &ldquo;do&rdquo; at a=
ll. People think bind chains are hard to read but my experience with Jane S=
treet Async tells me it it not quite. Ppx_monad does not really gain in thi=
s point unfortunately: I was often forced to write &ldquo;let%monad (x,y) =
=3D e in&rdquo; just for &ldquo;(x,y) &lt;-- e;&rdquo;. I write Haskell do-=
notations daily and wanted to have something comparable in OCaml.</p>
<p dir=3D"ltr">Anyway, the current OCaml syntax is limited to have do-notat=
ion which makes everyone happy. If there would be a way in OCaml to write &=
ldquo;foo e&rdquo; for some keyword &ldquo;foo&rdquo; which is like &ldquo;=
begin&rdquo; but does not require &ldquo;end&rdquo;, I would be pretty happ=
y to change the weird &ldquo;Option.do_; e&rdquo; to &ldquo;foo%Option e&rd=
quo;. Before implementing &ldquo;do_; e&rdquo;, I tried a bit of &ldquo;[%d=
o] e&rdquo; but it did not work well since &ldquo;[%do] p &lt;-- e&rdquo; i=
s parsed as &ldquo;([%do] p) &lt;-- e&rdquo;, not &ldquo;[%do] (p &lt;-- e)=
&rdquo;.</p>
<p dir=3D"ltr">Best,<br>
Jun</p>
<div class=3D"gmail_quote">On 20 Jan, 2015 5:53 am, &quot;Drup&quot; &lt;<a=
 href=3D"mailto:drupyog%2Bcaml@zoho.com">drupyog+caml@zoho.com</a>&gt; wrot=
e:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=3D"margi=
n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
I can appreciate that authors of tools that requires special syntactic supp=
ort would love to have their new forms look completely native to users, but=
 the counter-argument can be made that keeping an explicit syntax (through =
the &#39;%&#39; character) for features that are not part of the official l=
anguage is a good property. (Camlp4/campl5 are still available for people w=
ho want to play with the concrete syntax.)<br>
</blockquote>
<br>
I personally like the explicitness of the syntax a lot. The only issue in O=
Caml currently is that, given the need for retro compatibility, it goes som=
etimes against the terseness. For example the impossibility to do &quot; x@=
foo&quot; instead of &quot;x[@foo]&quot;. That&#39;s unavoidable, though.<b=
r>
<br>
This is, by the way, a point I dislike a lot with ppx_monadic. It abuses th=
e native syntax in completely alien ways and without annotations.<br>
<br>
I like ppx_monad&#39;s syntax quite better due to the fact that it&#39;s al=
ways explicitly a ppx (thanks to %monad) and do not overload the &quot;do_&=
quot; identifier.<br>
<br>
</blockquote></div>

--089e01493cb028d09d050d0d632a--
