Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA22780; Wed, 19 Nov 2003 17:24:34 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA22866 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 17:24:33 +0100 (MET)
Received: from herd.plethora.net (herd.plethora.net [205.166.146.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAJGOW123446
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 17:24:32 +0100 (MET)
Received: from bhurt.plethora.net (bhurt.plethora.net [205.166.146.49])
	by herd.plethora.net (8.11.6/8.10.1) with ESMTP id hAJGN8C12750;
	Wed, 19 Nov 2003 10:23:09 -0600 (CST)
Date: Wed, 19 Nov 2003 11:22:40 -0600 (CST)
From: Brian Hurt <bhurt@spnz.org>
X-X-Sender: bhurt@localhost.localdomain
To: Dustin Sallings <dustin@spy.net>
cc: Caml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] tail call optimization
In-Reply-To: <FE0B59A6-1A58-11D8-A557-000393CB0F1E@spy.net>
Message-ID: <Pine.LNX.4.44.0311191114240.5009-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 compiler:01 compiler:01 nov:01 nov:01 exception:02 stack:02 wrote:03 wrote:03 recursive:03 recursive:03 tail:03 tail:03 redirect:95 clause:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 18 Nov 2003, Dustin Sallings wrote:

> 
> On Nov 18, 2003, at 22:50, Brian Hurt wrote:
> 
> > This function is not tail recursive.  Basically, if the recursive call
> > either a) is wrapped in a try block, or b) has it's return value 
> > modified
> 
> 	I guess I don't understand the point of clause a.  The try block 
> doesn't seem like it should prevent the optimization.

What would happen if f just happened to throw an End_of_file exception?  
Not to mention the fact that it's tricky for the compiler to determine 
that the call to fold_lines can't throw an End_of_file.  So the compiler 
just assumes that both might, and thus has to keep the try/catch block, 
and the context (stack frame) of the function, alive until both are 
complete.

-- 
"Usenet is like a herd of performing elephants with diarrhea -- massive,
difficult to redirect, awe-inspiring, entertaining, and a source of
mind-boggling amounts of excrement when you least expect it."
                                - Gene Spafford 
Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

