Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA26950; Wed, 19 Nov 2003 04:58:03 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA26811 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 04:58:02 +0100 (MET)
Received: from bob.west.spy.net (mail.west.spy.net [66.149.231.226])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAJ3vs120269
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 04:57:58 +0100 (MET)
Received: from [192.168.1.50] (dustinti.west.spy.net [192.168.1.50])
	by bob.west.spy.net (Postfix) with ESMTP
	id E29AB66D6; Tue, 18 Nov 2003 19:57:45 -0800 (PST)
In-Reply-To: <3FBACC11.20504@dcs.qmul.ac.uk>
References: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain> <3FBACC11.20504@dcs.qmul.ac.uk>
Mime-Version: 1.0 (Apple Message framework v606)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <87EFADA0-1A44-11D8-A220-000393CB0F1E@spy.net>
Content-Transfer-Encoding: 7bit
Cc: Caml Mailing List <caml-list@inria.fr>
From: Dustin Sallings <dustin@spy.net>
Subject: Re: [Caml-list] GC and file descriptors
Date: Tue, 18 Nov 2003 19:57:44 -0800
To: Martin Berger <martinb@dcs.qmul.ac.uk>
X-Mailer: Apple Mail (2.606)
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 python:01 bigloo:01 bigloo:01 slower:01 ocamlopt:01 sunos:01 cae:99 apps:01 ocaml:01 ocaml:01 garbage:01 descriptors:01 eiffel:01 nov:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


On Nov 18, 2003, at 17:49, Martin Berger wrote:

> Brian Hurt wrote:
>
>> For any large, complex, data structure & algorithm heavy application, 
>> Ocaml is the best language I know of.
>
> what i've always wondered about is the following: all the benchmarks
> i have seen make ocaml look very good, but they are all using trivial
> programs. has anyone hands-on experience with using ocaml for 
> processing
> *large* data-sets? by large i mean at least 1 GB? i am slightly worried
> about garbage collection performance in this case.

	Absolutely.  That's what attracted me to ocaml.  I wrote the same 
program in python (original implementation), eiffel, bigloo scheme, 
ocaml (and probably some others), and C.  At the time, my benchmarks 
suggested bigloo and ocaml were neck-and-neck, just slightly slower 
than the C version.  I was more comfortable with scheme, so I went with 
it.  Turns out, the scheme one wasn't really faster with the large data 
sets I was running in production.  I also had some reliability problems 
with exceptions.

	Now, I've got two daily log processing apps (pretty decently large 
data sets, well over a gig) that finish in about 20 minutes where all 
others would take multiple hours.  Not very useful benchmarks, but for 
sure, it's faster than anything else I've used for these tasks.

	I've also ported ocaml and ocamlopt to SunOS 4.1.4 where I use it to 
process all of my mail daily.  That's all the mail I've received since 
about 1998 and all the mail I've sent since about 1994.

--
SPY                      My girlfriend asked me which one I like better.
pub  1024/3CAE01D5 1994/11/03 Dustin Sallings <dustin@spy.net>
|    Key fingerprint =  87 02 57 08 02 D0 DA D6  C8 0F 3E 65 51 98 D8 BE
L_______________________ I hope the answer won't upset her. ____________

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

