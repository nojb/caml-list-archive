Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA21274; Wed, 19 Nov 2003 16:48:12 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA20830 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 16:48:11 +0100 (MET)
Received: from mail3.tpgi.com.au (mail.tpgi.com.au [203.12.160.59])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAJFm9121562
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 16:48:09 +0100 (MET)
Received: from 203-213-84-84-syd-ts16-2600.tpgi.com.au (203-213-84-84-syd-ts16-2600.tpgi.com.au [203.213.84.84])
	by mail3.tpgi.com.au (8.11.6/8.11.6) with ESMTP id hAJFm1r22621;
	Thu, 20 Nov 2003 02:48:03 +1100
Subject: Re: [Caml-list] GC and file descriptors
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: Ville-Pertti Keinonen <will@exomi.com>
Cc: Caml Mailing List <caml-list@inria.fr>
In-Reply-To: <20031119135520.GB886@exomi.com>
References: <1069092899.17437.58.camel@pelican>
	 <Pine.LNX.4.44.0311171422420.5009-100000@localhost.localdomain>
	 <20031118120517.GA881@exomi.com> <1069168782.18363.90.camel@pelican>
	 <20031118200209.GA549@exomi.com> <1069244753.23700.17.camel@pelican>
	 <20031119135520.GB886@exomi.com>
Content-Type: text/plain
Message-Id: <1069253252.23700.147.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 20 Nov 2003 01:47:32 +1100
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 1100,:01 python:01 lexically:01 python:01 ocaml:01 descriptors:01 rec:01 nov:01 constructs:02 nested:02 explicit:03 wrote:03 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 2003-11-20 at 00:55, Ville-Pertti Keinonen wrote:
> On Wed, Nov 19, 2003 at 11:25:53PM +1100, skaller wrote:
> > Functions can be nested in Python 2.2, and they're lexically
> > scoped. You can even do this:
> 
> I wouldn't call it conventional lexical scoping considering that the
> following is an error:
> 
> x = 1
> def f():
>     x += 1
>     return x
> 
> I very much prefer having explicit let (and let rec) constructs like in
> OCaml.
> 

But the problem has nothing to do with lexical scoping.
The problem here is that variables are not declared
in Python. 

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

