Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA14570; Wed, 19 Nov 2003 14:55:20 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA14963 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 14:55:18 +0100 (MET)
Received: from oxy.exomi.com (fa-3-0-0.fw.exomi.com [217.169.64.99])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id hAJDtI116836
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 14:55:18 +0100 (MET)
Received: by oxy.exomi.com (Postfix, from userid 501)
	id 4F93CB4D95; Wed, 19 Nov 2003 15:55:21 +0200 (EET)
Date: Wed, 19 Nov 2003 15:55:21 +0200
From: Ville-Pertti Keinonen <will@exomi.com>
To: skaller <skaller@ozemail.com.au>
Cc: Caml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] GC and file descriptors
Message-ID: <20031119135520.GB886@exomi.com>
Mail-Followup-To: skaller <skaller@ozemail.com.au>,
	Caml Mailing List <caml-list@inria.fr>
References: <1069092899.17437.58.camel@pelican> <Pine.LNX.4.44.0311171422420.5009-100000@localhost.localdomain> <20031118120517.GA881@exomi.com> <1069168782.18363.90.camel@pelican> <20031118200209.GA549@exomi.com> <1069244753.23700.17.camel@pelican>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1069244753.23700.17.camel@pelican>
User-Agent: Mutt/1.4.1i
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 1100,:01 python:01 lexically:01 ocaml:01 descriptors:01 rec:01 nov:01 constructs:02 nested:02 explicit:03 wrote:03 let:04 let:04 functions:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, Nov 19, 2003 at 11:25:53PM +1100, skaller wrote:
> Functions can be nested in Python 2.2, and they're lexically
> scoped. You can even do this:

I wouldn't call it conventional lexical scoping considering that the
following is an error:

x = 1
def f():
    x += 1
    return x

I very much prefer having explicit let (and let rec) constructs like in
OCaml.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

