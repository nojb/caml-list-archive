Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA16504; Sat, 22 Nov 2003 16:55:40 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA17155 for <caml-list@pauillac.inria.fr>; Sat, 22 Nov 2003 16:55:39 +0100 (MET)
Received: from mail1.tpgi.com.au (mail.tpgi.com.au [203.12.160.57])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAMFtb121385
	for <caml-list@inria.fr>; Sat, 22 Nov 2003 16:55:37 +0100 (MET)
Received: from syd-ts18-2600-035.tpgi.com.au (syd-ts18-2600-035.tpgi.com.au [203.58.21.35])
	by mail1.tpgi.com.au (8.11.6/8.11.6) with ESMTP id hAMFtLg20471;
	Sun, 23 Nov 2003 02:55:24 +1100
Subject: Re: [Caml-list] Building large and portable projects
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: Martin Berger <martinb@dcs.qmul.ac.uk>
Cc: caml-list@inria.fr
In-Reply-To: <3FBF7397.9030608@dcs.qmul.ac.uk>
References: <Pine.LNX.4.58.0311201830340.3787@localhost>
	 <20031120195614.GB441@gallu.homelinux.org>
	 <000f01c3afd1$30033c90$0274a8c0@PWARP> <20031121052549.GA8599@davidb.org>
	 <008301c3aff3$1030e760$0274a8c0@PWARP>
	 <20031121064950.GA836@gallu.homelinux.org>
	 <1069431167.5426.45.camel@pelican>  <3FBF7397.9030608@dcs.qmul.ac.uk>
Content-Type: text/plain
Message-Id: <1069512900.6703.32.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 23 Nov 2003 01:55:00 +1100
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 32,:01 conceptually:01 fixpoints:01 converge:01 interscript:01 gui:01 fixpoints:01 poigne:01 112.:99 model:01 abstraction:01 model:01 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sun, 2003-11-23 at 01:32, Martin Berger wrote:
> > Make systems are all conceptually wrong.

> * as someone else pointed out, relying on convergence towards
>    fixpoints may be too strong. some build processes may
>    never converge, rather they evenually stabilise in some
>    "open ball", so you might need some (user supplied) notion
>    of "close enough". how do you do that?

In interscript I have an iteration limit.
In a GUI system, one pass per mouse click I guess.

> * according to [1], a cartesian closed category with fixpoints
>    and finite sums is equivalent to the category with one object
>    and one arrow. how do you deal with this?
> 
> martin
> 
> [1] Hagen Huwig and Axel Poigne, A note on inconsistencies caused
> by fixpoints in a cartesian dosed category, Theoretical Computer
> Science 73 (1990), p. 101-112.

Ouch. First, the concept above is to use categories
as an inspirational model, but we do have to layer
the abstraction on real storage/execution systems,
so that theoretical constraint is unlikely to the most
difficult problem :-)

Second .. well, Ocaml uses this model 'as inspiration'
as well, and it's authors know a good deal more theory
than me so they're more likely to be able to answer :-)

Yeah, both answers are a cop-out (meaning I don't know :-)


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

