Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA17302; Wed, 19 Nov 2003 00:07:33 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA17122 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 00:07:32 +0100 (MET)
Received: from cmailm4.svr.pol.co.uk (cmailm4.svr.pol.co.uk [195.92.193.211])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAIN7V109764
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 00:07:32 +0100 (MET)
Received: from modem-738.beedrill.dialup.pol.co.uk ([217.135.34.226])
	by cmailm4.svr.pol.co.uk with esmtp (Exim 4.14)
	id 1AMEwU-0006Z0-T9
	for caml-list@inria.fr; Tue, 18 Nov 2003 23:07:31 +0000
Date: Tue, 18 Nov 2003 23:07:23 +0000 (GMT)
From: John J Lee <jjl@pobox.com>
X-X-Sender: john@alice
To: Caml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] GC and file descriptors
In-Reply-To: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
Message-ID: <Pine.LNX.4.58.0311182234560.960@alice>
References: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 python:01 python:01 run-time:01 run-time:01 powerfull:01 compile-time:01 circumvent:01 descriptors:01 nov:01 checking:01 checking:01 compile:02 ruby:02 ruby:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 18 Nov 2003, Brian Hurt wrote:
[...]
> Have there been any large projects (multiple developers, tens to hundreds
> of thousands of lines of code) in Python or Ruby?

Yes.

Though I think it's a bad idea to measure in lines of code, given that the
reported discrepancy of (lines of code per function point) is so large
between languages like C++ and Java on the one hand, and Python or Ruby on
the other.


> One problem I have is that programming is going away from strict compile
> time type checking to run-time type checking.  The problem with run-time
> type checking is that it only catches errors in the field.  Static type
> checking is the most powerfull tool we've come up with to ensure
> correctness in programs.  And no, unit tests are not a replacement for
> strict compile-time type checking.

Well, a sincere "thanks" for going through the whole loop of that argument
without the need for getting anyone else involved ;-)  (Except to add
"NOT!" of course ;-)


> The problem is that the only type checking people are aware of is
> Pascal/Algol-68 type systems.  Which require you to be able to circumvent.
[...]

Of course.


John

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

