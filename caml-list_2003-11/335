Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA14700; Wed, 19 Nov 2003 15:03:17 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA15175 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 15:03:16 +0100 (MET)
Received: from mail1.tpgi.com.au (mail.tpgi.com.au [203.12.160.57])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id hAJE3E116049
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 15:03:14 +0100 (MET)
Received: from 203-213-84-84-syd-ts16-2600.tpgi.com.au (203-213-84-84-syd-ts16-2600.tpgi.com.au [203.213.84.84])
	by mail1.tpgi.com.au (8.11.6/8.11.6) with ESMTP id hAJE35H00970;
	Thu, 20 Nov 2003 01:03:06 +1100
Subject: Re: [Caml-list] GC and file descriptors
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: Brian Hurt <bhurt@spnz.org>
Cc: Ville-Pertti Keinonen <will@exomi.com>,
        Caml Mailing List <caml-list@inria.fr>
In-Reply-To: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
References: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
Content-Type: text/plain
Message-Id: <1069246955.23700.53.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 20 Nov 2003 00:02:36 +1100
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 haskell:01 ocaml:01 ocaml:01 descriptors:01 lazy:02 complex:03 wrote:03 algorithm:03 data:03 structure:06 i'd:06 brian:06 language:10 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2003-11-19 at 09:28, Brian Hurt wrote:
> Wandering into language advocacy here.

> 
> For any large, complex, data structure & algorithm heavy application, 
> Ocaml is the best language I know of.  It's not the best possible 
> language (I can think of a number of improvements to Ocaml I'd like to 
> see), but it's better for that purpose than any other language I know.

What about Haskell? Doesn't lazy evaluation have a significant
advantage?

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

