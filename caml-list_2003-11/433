Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA07714; Fri, 21 Nov 2003 19:07:00 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA02100 for <caml-list@pauillac.inria.fr>; Fri, 21 Nov 2003 19:06:59 +0100 (MET)
Received: from mail3.tpgi.com.au (mail.tpgi.com.au [203.12.160.59])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id hALI6u118108;
	Fri, 21 Nov 2003 19:06:56 +0100 (MET)
Received: from 203-213-81-92-syd-ts13-2600.tpgi.com.au (203-213-81-92-syd-ts13-2600.tpgi.com.au [203.213.81.92])
	by mail3.tpgi.com.au (8.11.6/8.11.6) with ESMTP id hALI6r520398;
	Sat, 22 Nov 2003 05:06:53 +1100
Subject: Re: [Caml-list] Need advice for a mobile application server
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: Basile Starynkevitch <basile.starynkevitch@inria.fr>
Cc: erayo@cs.bilkent.edu.tr, caml-list@inria.fr
In-Reply-To: <20031120124949.GA8495@bourg.inria.fr>
References: <200311192003.37039.exa@kablonet.com.tr>
	 <20031120091315.GA23449@redhat.com>
	 <20031120102727.A28533@pauillac.inria.fr>
	 <200311201408.06069.exa@kablonet.com.tr>
	 <20031120124949.GA8495@bourg.inria.fr>
Content-Type: text/plain
Message-Id: <1069434380.5426.67.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 22 Nov 2003 04:06:27 +1100
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 basile:01 eray:01 ozkural:01 simulating:01 threading:01 model:01 asynchronous:01 ocaml:01 ocaml:01 formed:98 behaviour:01 0200,:01 nov:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 2003-11-20 at 23:49, Basile Starynkevitch wrote:
> On Thu, Nov 20, 2003 at 02:08:06PM +0200, Eray Ozkural wrote:

> Regarding multi-threading in Ocaml, I think that it is much less
> useful in Ocaml than say in Java or C. 

I think that's also application dependent.

For the telephone network I was simulating,
threading was a vital aid to thinking
about asynchronous behaviour. 

Unusual perhaps .. but the end product
was not intended to be used, not even once.
Instead the strong static typing and nice
concepts in the Event module were used to help
develop a model which one could believe was
at least well formed (due to static type checking).
[I did this to try to understand what the ^&*%$#
the telecommunications Standard was on about:]


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

