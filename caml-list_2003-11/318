Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA23168; Wed, 19 Nov 2003 02:49:38 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA22711 for <caml-list@pauillac.inria.fr>; Wed, 19 Nov 2003 02:49:37 +0100 (MET)
Received: from mail.dcs.qmul.ac.uk (vicar.dcs.qmul.ac.uk [138.37.88.163])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id hAJ1nb117985
	for <caml-list@inria.fr>; Wed, 19 Nov 2003 02:49:37 +0100 (MET)
Received: from xenografia.plus.com ([212.159.85.26] helo=dcs.qmul.ac.uk)
	by mail.dcs.qmul.ac.uk with asmtp (TLSv1:DHE-RSA-AES256-SHA:256)
	(Exim 4.24)
	id 1AMHTM-0005I8-73
	for caml-list@inria.fr; Wed, 19 Nov 2003 01:49:36 +0000
Message-ID: <3FBACC11.20504@dcs.qmul.ac.uk>
Date: Wed, 19 Nov 2003 01:49:05 +0000
From: Martin Berger <martinb@dcs.qmul.ac.uk>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4.1) Gecko/20031009
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Caml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] GC and file descriptors
References: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
In-Reply-To: <Pine.LNX.4.44.0311181314010.5009-100000@localhost.localdomain>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Auth-User: martinb
X-DCS-Spam-Score: -3.0
X-clamav-result: clean (1AMHTM-0005I8-73)
X-uvscan-result: clean (1AMHTM-0005I8-73)
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ocaml:01 ocaml:01 garbage:01 descriptors:01 trivial:01 complex:03 wrote:03 algorithm:03 benchmarks:03 slightly:03 data:03 mean:05 structure:06 brian:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Brian Hurt wrote:

> For any large, complex, data structure & algorithm heavy application, 
> Ocaml is the best language I know of. 

what i've always wondered about is the following: all the benchmarks
i have seen make ocaml look very good, but they are all using trivial
programs. has anyone hands-on experience with using ocaml for processing
*large* data-sets? by large i mean at least 1 GB? i am slightly worried
about garbage collection performance in this case.

martin

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

