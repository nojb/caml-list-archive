Return-Path: <ivan.chollet@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 75325BC57
	for <caml-list@yquem.inria.fr>; Wed,  1 Sep 2010 08:21:37 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArICAKqNfUzRVdg0kGdsb2JhbACBQ5FKhVABh3kIFQEBAQEJCQwHEQMfo2mJLoIVhlIuiFQBAQMFhTQEgVeDG4Uf
X-IronPort-AV: E=Sophos;i="4.56,302,1280700000"; 
   d="scan'208";a="66488368"
Received: from mail-qw0-f52.google.com ([209.85.216.52])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 01 Sep 2010 08:21:36 +0200
Received: by qwi4 with SMTP id 4so87558qwi.39
        for <caml-list@yquem.inria.fr>; Tue, 31 Aug 2010 23:21:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=joGwhzjFKmJ9NbuZKJpQrwM1HIgzj9cEAbjrYXmmQnk=;
        b=oMFbg7t0lPVjrHfxDc8dnfWJujToSMFBAKEeABPiRYuOm1XrTGtuUsDHf4JSrAurMl
         V7enX2UywrOtJ9r+iusU99Y1NPHIucW/x2eELFhhBaZqaheqPs7NpuYMbpnMYIXkVtqH
         iorMycA25BhTbffQo9hDq4QvTqTtKcm1wqOo8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=uVRgcycSzSdVwRhCz65Ff376dYCS3DH73DdkgACELPgh3b+CNcQc705oJ2MM3uGfCk
         eJQeTsbhUPBFVIUEbvdMIdyMIs763kKnOXhcuH7OSrgMIEkh3uGnvyyB7UWPPxJltc5w
         I8Ps0+fztzElfhtQ8GK2HJ4WXMYUhx/yz2AoA=
MIME-Version: 1.0
Received: by 10.229.214.210 with SMTP id hb18mr5049422qcb.68.1283322094631;
 Tue, 31 Aug 2010 23:21:34 -0700 (PDT)
Received: by 10.229.218.19 with HTTP; Tue, 31 Aug 2010 23:21:34 -0700 (PDT)
In-Reply-To: <027401cb486a$48511e00$d8f35a00$@com>
References: <AANLkTin9S-d7jy1byqh_5wy69pVss_vxaiutTz7RSryO@mail.gmail.com>
	<AANLkTi=DC0XMO=20QOY04ZqXiDh4QN_ozF32N4gXM0Z+@mail.gmail.com>
	<AANLkTi=tNfYDvaJk5AL1T+d8f-UGiOAJKQ=FqGLS+jcO@mail.gmail.com>
	<AANLkTi=ptf2AnYV+1e66JHtwzbWQQvaUtdNvPbEsHJiA@mail.gmail.com>
	<026901cb485b$ff1b8ad0$fd52a070$@com>
	<AANLkTi=e1dx+6YKw+k4+93cSwtSgY=YJpn-AfVy84duv@mail.gmail.com>
	<027401cb486a$48511e00$d8f35a00$@com>
Date: Wed, 1 Sep 2010 16:21:34 +1000
Message-ID: <AANLkTim0emvqsCB4H3PCkksO3PjsWcJ_09mDsew77vtz@mail.gmail.com>
Subject: Re: [Caml-list] Llama Light: a simple implementation of Caml
From: ivan chollet <ivan.chollet@gmail.com>
To: Jon Harrop <jonathandeanharrop@googlemail.com>
Cc: Jeremy Bem <jeremy1@gmail.com>,
	caml-list List <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=0016361e83ba953c7a048f2cb515
X-Spam: no; 0.00; parallelism:01 cheers:01 recursion:01 pointers:01 run-time:01 compiler:01 recursion:01 cheers:01 pointers:01 typechecker:01 ocaml:01 typechecker:01 runtime:01 bytecode:01 compiler:01 

--0016361e83ba953c7a048f2cb515
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

Thanks. I will keep that it mind and might look into it one day or another.

Ivan


On Tue, Aug 31, 2010 at 3:39 AM, Jon Harrop <
jonathandeanharrop@googlemail.com> wrote:

>  If you can keep it agnostic wrt boxing then you should be able to plug i=
t
> into HLVM easily for much faster numerics and parallelism.
>
>
>
> Cheers,
>
> Jon.
>
>
>
> *From:* ivan chollet [mailto:ivan.chollet@gmail.com]
> *Sent:* 30 August 2010 18:10
> *To:* Jon Harrop
> *Cc:* Jeremy Bem; caml-list List
>
> *Subject:* Re: [Caml-list] Llama Light: a simple implementation of Caml
>
>
>
> clearly didn't plan to support polymorphic recursion in any way. I don't
> even plan to support lexical scoping...
> As for data representation I'm actually boxing everything except ints and
> function pointers. I found out that it leads to the simplest design, whic=
h
> is appropriate for a project that I don't want to take me more than a few
> days.
>
>  On Tue, Aug 31, 2010 at 1:57 AM, Jon Harrop <
> jonathandeanharrop@googlemail.com> wrote:
>
> Try to remove all assumptions of uniform run-time representation from the
> compiler because avoiding boxing gives huge performance gains and makes i=
t
> much easier to write a performant garbage collector. You=92ll need to
> sacrifice polymorphic recursion though, which you probably already have
> anyway=85
>
>
>
> Cheers,
>
> Jon.
>
>
>
> *From:* caml-list-bounces@yquem.inria.fr [mailto:
> caml-list-bounces@yquem.inria.fr] *On Behalf Of *ivan chollet
> *Sent:* 30 August 2010 11:57
> *To:* Jeremy Bem
> *Cc:* caml-list List
> *Subject:* Re: [Caml-list] Llama Light: a simple implementation of Caml
>
>
>
> OK.
>
> This looks nice and I would be pleased if you could put a few pointers or
> explanations on your webpage about your typechecker implementation and ho=
w
> it differs with OCaml typechecker.
> I will get some free time this week and to implement yet another runtime
> and bytecode compiler from scratch. Not sure if it will be completed at t=
he
> end of the week, but i'll be definitely interested to know more about the
> theoretical motivations of works like yours!
>
>  On Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem <jeremy1@gmail.com> wrote:
>
> bluestorm:
>
>
>
> Thank you for the bug report.  The toplevel issue has been fixed in the
> version now posted.
>
>
>
> Do you see a nice way to add let-generalization without reintroducing "ty=
pe
> levels"?  I was pleased to remove those.
>
>
>
> Ivan:
>
>
>
> It was originally forked from Caml Light but now includes more code from
> OCaml.  The typechecker is mostly original code at this point; the compil=
er
> is OCaml's with minimal changes to accommodate the new typechecker; the
> runtime is almost identical to OCaml's.
>
>
>
> -Jeremy
>
>
>
> On Sun, Aug 29, 2010 at 6:52 AM, bluestorm <bluestorm.dylc@gmail.com>
> wrote:
>
> When using the toplevel, declaration phrases fail (looks like a linking
> problem), but expressions work as intented :
>
> $ llama
>
>         Llama Light version 0.0828
>
>  # 1 + 1;;
>
>  - : int =3D 2
>
>  # let x =3D 1 + 1;;
>
>  Error: Reference to undefined global `Toploop'
>
>
>
> I made my tests using "llamac -i foo.ml".
>
>
>
>
> I found it startling that the most important difference to my eyes are
> buried, on the web page, under lines of relatively boring documentation :
>
> In Llama Light (and in contrast to other Caml implementations):
>
>
>
>  - let does not generalize.
>
>  - Phrases are generalized immediately. In particular, "let foo =3D ref [=
]"
> does not typecheck.
>
>  - The value restriction is not relaxed. (This is similar to Caml Light.)
>
>
>
>  These choices simplify the implementation while having relatively little
> impact on the user.
>
>
>
> You cite the "Let Should Not Be Generalised" paper. There is however a
> difference in your application of the maxim : in the paper, local let tha=
t
> have polymorphic type annotations are generalised, while in your system i=
t
> is not possible to force generalisation.
>
>
>
> I had a look at the typer, and it's indeed rather simple; it seems it wou=
ld
> be quite simple to implement generalized let (when encountering annotatio=
ns
> or with a different syntaxic construct : "letg .. =3D .. in ..."), but th=
e
> added complexity is equivalent to adding let generalization by default.
>
>
>
> Is the presence of let-generalization a real issue in your work ?
>
>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>
>
>
>

--0016361e83ba953c7a048f2cb515
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

Thanks. I will keep that it mind and might look into it one day or another.=
<br><br>Ivan<br><br><br><div class=3D"gmail_quote">On Tue, Aug 31, 2010 at =
3:39 AM, Jon Harrop <span dir=3D"ltr">&lt;<a href=3D"mailto:jonathandeanhar=
rop@googlemail.com">jonathandeanharrop@googlemail.com</a>&gt;</span> wrote:=
<br>
<blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; borde=
r-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">








<div link=3D"blue" vlink=3D"purple" lang=3D"EN-GB">

<div>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">If you can keep it agnostic wrt boxing then you should be able
to plug it into HLVM easily for much faster numerics and parallelism.</span=
></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">=A0</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">Cheers,</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">Jon.</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">=A0</span></p>

<div style=3D"border-width: medium medium medium 1.5pt; border-style: none =
none none solid; border-color: -moz-use-text-color -moz-use-text-color -moz=
-use-text-color blue; padding: 0cm 0cm 0cm 4pt;">

<div>

<div style=3D"border-width: 1pt medium medium; border-style: solid none non=
e; border-color: rgb(181, 196, 223) -moz-use-text-color -moz-use-text-color=
; padding: 3pt 0cm 0cm;">

<p class=3D"MsoNormal"><b><span style=3D"font-size: 10pt;" lang=3D"EN-US">F=
rom:</span></b><span style=3D"font-size: 10pt;" lang=3D"EN-US"> ivan cholle=
t
[mailto:<a href=3D"mailto:ivan.chollet@gmail.com" target=3D"_blank">ivan.ch=
ollet@gmail.com</a>] <br>
<b>Sent:</b> 30 August 2010 18:10<br>
<b>To:</b> Jon Harrop<br>
<b>Cc:</b> Jeremy Bem; caml-list List<div><div></div><div class=3D"h5"><br>
<b>Subject:</b> Re: [Caml-list] Llama Light: a simple implementation of Cam=
l</div></div></span></p>

</div>

</div><div><div></div><div class=3D"h5">

<p class=3D"MsoNormal">=A0</p>

<p class=3D"MsoNormal" style=3D"margin-bottom: 12pt;">clearly didn&#39;t pl=
an to support
polymorphic recursion in any way. I don&#39;t even plan to support lexical
scoping...<br>
As for data representation I&#39;m actually boxing everything except ints a=
nd
function pointers. I found out that it leads to the simplest design, which =
is
appropriate for a project that I don&#39;t want to take me more than a few =
days.<br>
<br>
</p>

<div>

<p class=3D"MsoNormal">On Tue, Aug 31, 2010 at 1:57 AM, Jon Harrop &lt;<a h=
ref=3D"mailto:jonathandeanharrop@googlemail.com" target=3D"_blank">jonathan=
deanharrop@googlemail.com</a>&gt;
wrote:</p>

<div>

<div>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">Try to remove all assumptions of uniform
run-time representation from the compiler because avoiding boxing gives hug=
e
performance gains and makes it much easier to write a performant garbage co=
llector.
You=92ll need to sacrifice polymorphic recursion though, which you probably
already have anyway=85</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">=A0</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">Cheers,</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">Jon.</span></p>

<p class=3D"MsoNormal"><span style=3D"font-size: 11pt; color: rgb(31, 73, 1=
25);">=A0</span></p>

<div style=3D"border-width: medium medium medium 1.5pt; border-style: none =
none none solid; padding: 0cm 0cm 0cm 4pt; border-color: -moz-use-text-colo=
r -moz-use-text-color -moz-use-text-color blue;">

<div>

<div style=3D"border-width: 1pt medium medium; border-style: solid none non=
e; padding: 3pt 0cm 0cm; border-color: -moz-use-text-color;">

<p class=3D"MsoNormal"><b><span style=3D"font-size: 10pt;" lang=3D"EN-US">F=
rom:</span></b><span style=3D"font-size: 10pt;" lang=3D"EN-US"> <a href=3D"=
mailto:caml-list-bounces@yquem.inria.fr" target=3D"_blank">caml-list-bounce=
s@yquem.inria.fr</a> [mailto:<a href=3D"mailto:caml-list-bounces@yquem.inri=
a.fr" target=3D"_blank">caml-list-bounces@yquem.inria.fr</a>]
<b>On Behalf Of </b>ivan chollet<br>
<b>Sent:</b> 30 August 2010 11:57<br>
<b>To:</b> Jeremy Bem<br>
<b>Cc:</b> caml-list List<br>
<b>Subject:</b> Re: [Caml-list] Llama Light: a simple implementation of Cam=
l</span></p>

</div>

</div>

<p class=3D"MsoNormal">=A0</p>

<p class=3D"MsoNormal" style=3D"margin-bottom: 12pt;">OK.<br>
<br>
This looks nice and I would be pleased if you could put a few pointers or
explanations on your webpage about your typechecker implementation and how =
it
differs with OCaml typechecker. <br>
I will get some free time this week and to implement yet another runtime an=
d
bytecode compiler from scratch. Not sure if it will be completed at the end=
 of
the week, but i&#39;ll be definitely interested to know more about the theo=
retical
motivations of works like yours!<br>
<br>
</p>

<div>

<p class=3D"MsoNormal">On
Mon, Aug 30, 2010 at 2:37 AM, Jeremy Bem &lt;<a href=3D"mailto:jeremy1@gmai=
l.com" target=3D"_blank">jeremy1@gmail.com</a>&gt; wrote:</p>

<div>

<p class=3D"MsoNormal">bluestorm:</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<p class=3D"MsoNormal">Thank
you for the bug report. =A0The toplevel issue has been fixed in the version
now posted.</p>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">Do
you see a nice way to add let-generalization without reintroducing &quot;ty=
pe
levels&quot;? =A0I was pleased to remove those.</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">Ivan:</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">It
was originally forked from Caml Light but now includes more code from OCaml=
.
=A0The typechecker is mostly original code at this point; the compiler is
OCaml&#39;s with minimal changes to accommodate the new typechecker; the ru=
ntime is
almost identical to OCaml&#39;s.</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal"><span style=3D"color: rgb(136, 136, 136);">-Jeremy</=
span></p>

</div>

<div>

<div>

<div>

<p class=3D"MsoNormal">=A0</p>

<div>

<p class=3D"MsoNormal">On
Sun, Aug 29, 2010 at 6:52 AM, bluestorm &lt;<a href=3D"mailto:bluestorm.dyl=
c@gmail.com" target=3D"_blank">bluestorm.dylc@gmail.com</a>&gt;
wrote:</p>

<div>

<p class=3D"MsoNormal">When
using the toplevel, declaration phrases fail (looks like a linking problem)=
,
but expressions work as intented :</p>

<p class=3D"MsoNormal">$
llama</p>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">=A0=A0
=A0 =A0 =A0Llama Light version 0.0828</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">#
1 + 1;;</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">-
: int =3D 2</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">#
let x =3D 1 + 1;;</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">Error:
Reference to undefined global `Toploop&#39;</p>

</blockquote>

<p class=3D"MsoNormal">=A0</p>

<div>

<p class=3D"MsoNormal">I
made my tests using &quot;llamac -i <a href=3D"http://foo.ml" target=3D"_bl=
ank">foo.ml</a>&quot;.</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal" style=3D"margin-bottom: 12pt;"><br>
I found it startling that the most important difference to my eyes are buri=
ed,
on the web page, under lines of relatively boring documentation :</p>

<p class=3D"MsoNormal">In
Llama Light (and in contrast to other Caml implementations):</p>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">=A0</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">-
let=A0does not generalize.</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">-
Phrases are generalized immediately. In particular, &quot;let foo =3D ref
[]&quot; does not typecheck.</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">-
The value restriction is not=A0relaxed. (This is similar to Caml Light.)</p=
>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">=A0</p>

</blockquote>

<blockquote style=3D"border-width: medium medium medium 1pt; border-style: =
none none none solid; padding: 0cm 0cm 0cm 6pt; margin-top: 5pt; margin-rig=
ht: 0cm; margin-bottom: 5pt; border-color: -moz-use-text-color -moz-use-tex=
t-color -moz-use-text-color rgb(204, 204, 204);">


<p class=3D"MsoNormal">These
choices simplify the implementation while having relatively little impact o=
n
the user.</p>

</blockquote>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">You
cite the &quot;Let Should Not Be Generalised&quot; paper. There is however =
a
difference in your application of the maxim : in the paper, local let that =
have
polymorphic type annotations are generalised, while in your system it is no=
t
possible to force generalisation.</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">I
had a look at the typer, and it&#39;s indeed rather simple; it seems it wou=
ld be
quite simple to implement generalized let (when encountering annotations or
with a different syntaxic construct : &quot;letg .. =3D .. in ...&quot;), b=
ut the
added complexity is equivalent to adding let generalization by default.</p>

</div>

<div>

<p class=3D"MsoNormal">=A0</p>

</div>

<div>

<p class=3D"MsoNormal">Is
the presence of let-generalization a real issue in your work ?</p>

</div>

</div>

</div>

</div>

<p class=3D"MsoNormal">=A0</p>

</div>

</div>

</div>

<p class=3D"MsoNormal" style=3D"margin-bottom: 12pt;"><br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a></p>

</div>

<p class=3D"MsoNormal">=A0</p>

</div>

</div>

</div>

</div>

<p class=3D"MsoNormal">=A0</p>

</div></div></div>

</div>

</div>


</blockquote></div><br>

--0016361e83ba953c7a048f2cb515--

