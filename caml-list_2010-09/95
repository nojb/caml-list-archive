Return-Path: <jonathandeanharrop@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 29B1EBC58
	for <caml-list@yquem.inria.fr>; Mon, 13 Sep 2010 23:26:12 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArEBAAI0jkxKfVK2kGdsb2JhbACVKowkCBUBAQEBCQkMBxEDH6s/i0UBBY8iAQSFQA
X-IronPort-AV: E=Sophos;i="4.56,361,1280700000"; 
   d="scan'208";a="67523054"
Received: from mail-wy0-f182.google.com ([74.125.82.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 13 Sep 2010 23:26:11 +0200
Received: by wyb33 with SMTP id 33so8692516wyb.27
        for <caml-list@inria.fr>; Mon, 13 Sep 2010 14:26:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:from:to:references
         :in-reply-to:subject:date:organization:message-id:mime-version
         :content-type:content-transfer-encoding:x-mailer:thread-index
         :content-language:x-cr-hashedpuzzle:x-cr-puzzleid;
        bh=W3ZxcTu3HpElozEyopcyx93xm2j1oUMdtcLruGhbrQU=;
        b=kx3+paSRVelsnuLFlwJyPNV67lGDyxrG5xP8TwP326U9avLXWKQNk3X4Y2y0eNqBZG
         mTNUtngDMBELA+OAK8X6owjcwLaa+zow9KLxZTvgPMMwggh+acApb0Sv1Wf4AR+5plzL
         v4HikOZi1U4JOoZoJ87FM7QP18u9IMAZcxhQ8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=from:to:references:in-reply-to:subject:date:organization:message-id
         :mime-version:content-type:content-transfer-encoding:x-mailer
         :thread-index:content-language:x-cr-hashedpuzzle:x-cr-puzzleid;
        b=upqTAd23IQMVTNsask2SB8FdqUB8IUY6NXnVkQpGP47vEZSWbHo7B+CNm5+ByFRODq
         6PQExzgV4L+108QWQarDrtVZDLwMEhV0uJmU67PxVRe1JKfpVHbH01Cz3u7EzVFZ3Eqo
         g1Q+31EqGwoXyim9tVVjP8/T7bvQXuEnQJ5U8=
Received: by 10.216.12.139 with SMTP id 11mr4910642wez.63.1284413171121;
        Mon, 13 Sep 2010 14:26:11 -0700 (PDT)
Received: from WinEight ([87.115.93.151])
        by mx.google.com with ESMTPS id r18sm4259868weo.0.2010.09.13.14.26.09
        (version=SSLv3 cipher=RC4-MD5);
        Mon, 13 Sep 2010 14:26:10 -0700 (PDT)
From: Jon Harrop <jonathandeanharrop@googlemail.com>
To: "'Sylvain Le Gall'" <sylvain@le-gall.net>, <caml-list@inria.fr>
References: <AANLkTiktq35R+i1ScFd4Nvrhd=VWRbUQOP+9mzjPgoSs@mail.gmail.com>	<slrni8rmb6.skq.sylvain@gallu.homelinux.org>	<AANLkTinT-WCosvow9zkvitix9By8PUbTQ9sJic8LFt4V@mail.gmail.com>	<slrni8s5t0.skq.sylvain@gallu.homelinux.org>	<AANLkTi=9d4A=aUyhQEhu6KgjQ4bhTd3by_cXbyy0Ew0U@mail.gmail.com> <slrni8sdar.skq.sylvain@gallu.homelinux.org>
In-Reply-To: <slrni8sdar.skq.sylvain@gallu.homelinux.org>
Subject: RE: [Caml-list] Re: How to re-implement the GC?
Date: Mon, 13 Sep 2010 22:25:37 +0100
Organization: Flying Frog Consultancy
Message-ID: <009701cb538a$3d91d1f0$b8b575d0$@com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Office Outlook 12.0
Thread-Index: ActTUEMxA7R/nO76SvyglnGiTzeTfAANpnJA
Content-Language: en-gb
x-cr-hashedpuzzle: AWiU AZl2 CBCk DBSP D500 IE13 KqxR Kxjr PsWr QR7x RIgq SieM SpRI TWRq Tuie YSJD;2;YwBhAG0AbAAtAGwAaQBzAHQAQABpAG4AcgBpAGEALgBmAHIAOwBzAHkAbAB2AGEAaQBuAEAAbABlAC0AZwBhAGwAbAAuAG4AZQB0AA==;Sosha1_v1;7;{73AF0CA1-F682-4526-9A5F-E26C03D7C6EF};agBvAG4AQABmAGYAYwBvAG4AcwB1AGwAdABhAG4AYwB5AC4AYwBvAG0A;Mon, 13 Sep 2010 21:14:13 GMT;UgBFADoAIABbAEMAYQBtAGwALQBsAGkAcwB0AF0AIABSAGUAOgAgAEgAbwB3ACAAdABvACAAcgBlAC0AaQBtAHAAbABlAG0AZQBuAHQAIAB0AGgAZQAgAEcAQwA/AA==
x-cr-puzzleid: {73AF0CA1-F682-4526-9A5F-E26C03D7C6EF}
X-Spam: no; 0.00; re-implement:01 mutation:01 ocaml:01 mutation:01 ocaml:01 cheers:01 nursery:98 caml-list:01 minor:01 algorithm:01 objects:02 objects:02 assumption:08 heaps:10 jvm:11 

> Other GC algorithm for Java/C# often made the assumption of long-living
> objects with mutation. This is not the case for OCaml.

They do favour mutation and, consequently, have cheaper write barriers but
both the JVM and CLR use pointer-bumping minor heaps for the first "nursery"
generation to collect short-lived objects efficiently, just like OCaml.

Cheers,
Jon.


