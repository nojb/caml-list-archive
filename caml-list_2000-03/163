Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA12390 for caml-redistribution@pauillac.inria.fr; Fri, 24 Mar 2000 16:31:11 +0100 (MET)
Resent-Message-Id: <200003241531.QAA12390@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA17992 for <caml-list@pauillac.inria.fr>; Thu, 23 Mar 2000 16:58:07 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id QAA06840;
	Thu, 23 Mar 2000 16:57:36 +0100 (MET)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA30958; Thu, 23 Mar 2000 16:57:36 +0100 (MET)
Message-ID: <20000323165736.05662@pauillac.inria.fr>
Date: Thu, 23 Mar 2000 16:57:36 +0100
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: David Chemouil <David.Chemouil@enseeiht.fr>, caml-list@inria.fr
Subject: Re: variables in 'let rec'
References: <38D8953B.80D821F6@enseeiht.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <38D8953B.80D821F6@enseeiht.fr>; from David Chemouil on Wed, Mar 22, 2000 at 10:41:15AM +0100
Resent-From: weis@pauillac.inria.fr
Resent-Date: Fri, 24 Mar 2000 16:31:11 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

> I'm currently writing a program where I need to create both variables
> and functions in a 'let rec'. The problem is that it is not allowed to
> define a simple variable (i.e not a variant) in a 'let rec', because it
> would be able to write things such as:
> 
> # let rec x = x+1;;
> This kind of expression is not allowed as right-hand side of `let rec'
> 
> This error message seems okay to me.
> 
> However, the error message also occurs in situations where there is no
> problem:
> 
> # let rec x = fact 5    (* using usual fact *)
>               ^^^^^^
>   and even = function
>   | 0 -> true
>   | n -> odd (n-1)
>   and odd = function
>   | 1 -> true
>   | n -> even (n-1);;
> This kind of expression is not allowed as right-hand side of `let rec'
> 
> What is "funny" is that it is possible to write 'Some (fact 5)'...

You're correct that the example above could be accepted because "x"
could be computed in advance (fact 5 doesn't depend on the variables of
the recursive equations).  However, this would complicate both the
well-formedness test and the compilation scheme for "let rec".  We
chose to err on the conservative side here.  Notice that your example
can (and should, in the interest of clarity) be written
        let x = fact 5
        let rec even = ... and odd = ...

> Anyway, if this problem is really to complex, or undecidable, or not
> worth the effot, why not allow any variable definition in a 'let rec'
> and print a warning message? Then, the programmer would decide if the
> definition may lead to an error...

We would have no guarantees that the generated code for the "let rec"
is correct, e.g. with the current compilation scheme it could crash
the program.  Better be restrictive here!

- Xavier Leroy


