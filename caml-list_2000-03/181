Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA20662 for caml-redistribution@pauillac.inria.fr; Mon, 27 Mar 2000 19:22:24 +0200 (MET DST)
Resent-Message-Id: <200003271722.TAA20662@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA30424 for <caml-list@pauillac.inria.fr>; Sat, 25 Mar 2000 16:48:06 +0100 (MET)
Received: from localhost.localdomain (kyle30.zip.com.au [61.8.17.158])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id QAA25632
	for <caml-list@inria.fr>; Sat, 25 Mar 2000 16:47:48 +0100 (MET)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id OAA19721
	for <caml-list@inria.fr>; Sat, 25 Mar 2000 14:57:54 +1100
Sender: root@localhost.localdomain
Message-ID: <38DC3942.7A0919B@maxtal.com.au>
Date: Sat, 25 Mar 2000 14:57:54 +1100
From: John Max Skaller <skaller@maxtal.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
CC: caml-list@inria.fr
Subject: Re: to have labels or not
References: <38D96C0B.64621301@in.ot.com.au> <20000324114102E.garrigue@kurims.kyoto-u.ac.jp>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 27 Mar 2000 19:22:24 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

Jacques Garrigue wrote:
 
> This is a reasonable argument.  However, by discussing with olabl
> users (many of them being originally ocaml users) I really got the
> feeling that the fact to have to write labels for standard library
> functions didn't bother them. 

	It bothers me, because it will create a lot of extra clutter,
and force me to 'fix' thousands of lines of code. I'm having enough
trouble coping with the weak error messages in classic ocaml,
without being confused by additional ones.

	I often make systematic changes (replace one type with another),
and I rely on compiler diagnostics to find all the uses to allow
me to upgrade the relevant code. This works well in C and C++,
but not so well in ocaml (for a variety of reasons).

	My small experiment with polymorphic variants sent me
running for my backup copy. :-(

	[I replaced a large 'type X = | v1 .. | v2 .. ' with three
smaller (non-polymorphic) variants, and created three polymorphic
variants each covering two of theses cases. Had this worked,
it would have greatly improved my code, since many functions
are only interested in 2/3 of the cases -- the other 1/3 cannot occur
dynamically, and it is really bad writing default handlers 
like '| _ -> assert false' because this prevents the compiler
diagnosing missing cases. Anyhow, I couldn't get it to work
after two days, so I gave up. I couldn't make head or tail
of the error messages half the time

FYI: the case involed is a language 'term', of which there are three
kinds: ones that only exist at compile time and are replaced on
evaluation (sugary constructions), ones that are the same at 
compile and run time (things like integers), and ones that only
exist at run-time (like dictionaries represented as hashtables).
]

> So before deciding whether you want to stay classic or go to commuting
> label mode, you might just give it an (extensive enough) try.

	How? The modes are incompatible.
 
> > So here's a suggestion. Get rid of classic mode.
> > But have TWO complete standard libraries:
> >
> >       module Classic = .. put classic modules here ..
> >       module Olabl = put labelled versions here
> 
> We thought about that.  And even tried it before releasing 2.99.
> I am the one who pushed against this solution, because I felt this
> would really cause a community split.

	The community started out split, and has been brought closer together
by the ocaml/olabl merger. But the community is _still_ split because
the
usage of the modes is incompatible: we have two languages and one
library.
The way I see it, two libraries and one language reduces the split
again.
I do _not_ see this as idea -- OR permanent. But having two libraries
is a temporary hack to allow a full merger of the languages, and to
focus
on an acceptable compromise to get one library.
 
> The problem is not just the standard library.
> If you do not have classic mode, then it means that everybody will
> have to write all labels. If you have a look at LablGL, you will see
> that I use there plenty of non-optional labels, and very few optional
> ones. I'm pretty sure people would start asking me to remove them.

	I don't think so. The greatest feeling here is with the
standard libraries, because we all have a vested interest in
out current code, and our programming habits.
 
> The whole point is: the user (not the implementor) should decide.
> And in practice it is better to decide on a program-wide rather than a
> per-module basis (as some suggested).

	I don't agree: I do not wish to choose between two 'almost the same'
languages. But I regularly chose which library components to use
in an application, so this is just the same choice I usually make.

> The only weakness of this approach is if you copy some code from a
> file in classic mode to one in commuting label mode (or reverse).
> Then you have to add/remove labels by hand.  But then this is also a
> way to understand the code better :-)

	In a production environment, one is NOT interested in
understanding 'the code', one is trying to USE the code
WITHOUT understanding it. This is the very point of abstraction
and information hiding.

	For example, I use Pcre, I do NOT understand the code,
and I don't want to. I'm too busy to waste time on such details,
I prefer to trust Markus -- complain if something doesn't work
as advertised, or ask for help if I don't understand.

	BTW: I'm not claiming two libraries is the right solution 
either. I really don't know. I am glad a first step has been
made to merge the two systems. Thank you!

-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


