Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA26733 for caml-redistribution@pauillac.inria.fr; Fri, 17 Mar 2000 11:28:32 +0100 (MET)
Resent-Message-Id: <200003171028.LAA26733@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA26200 for <caml-list@pauillac.inria.fr>; Fri, 17 Mar 2000 09:31:01 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id JAA02655;
	Fri, 17 Mar 2000 09:31:01 +0100 (MET)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA00150; Fri, 17 Mar 2000 09:30:58 +0100 (MET)
Message-ID: <20000317093058.30145@pauillac.inria.fr>
Date: Fri, 17 Mar 2000 09:30:58 +0100
From: Pierre Weis <Pierre.Weis@inria.fr>
To: Remi VANICAT <remi.vanicat@labri.u-bordeaux.fr>
Cc: caml-list@inria.fr
Subject: Re: Syntax for label, NEW PROPOSAL
References: <39ADCF833E74D111A2D700805F1951EF180144F2@RED-MSG-06> <20000315121549A.garrigue@kurims.kyoto-u.ac.jp> <20000315145830.22463@pauillac.inria.fr> <ya37lf4gib7.fsf@serveur3-1.labri.u-bordeaux.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <ya37lf4gib7.fsf@serveur3-1.labri.u-bordeaux.fr>; from Remi VANICAT on Wed, Mar 15, 2000 at 08:11:08PM +0100
Resent-From: weis@pauillac.inria.fr
Resent-Date: Fri, 17 Mar 2000 11:28:32 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

> > # let sum l = List.fold_right fun:begin fun x acc:y -> x + y end acc:0;;
> > val sum : 'a -> int list -> int = <fun>
> 
> here, i prefer to use parenthesis as :
> 
> let sum l = List.fold_right fun:(fun x acc:y -> x + y) acc:0;;
> 
> it's more readable

:)

Me too, ``here, i prefer to use parenthesis as :'' List.fold_right ( + ) 0

> also i do want the fun: label (you may change the name, but a label
> here is useful) to be able to write 
> 
> let sum l = List.fold_right acc:0
>               fun:(fun long multi line function  definition here)
> 
> but i agreed that the acc label (in fun x acc:y -> x + y) is a pain,
> because he forbid the use of usual function here 

I don't think this ``long multi line function  definition here'' is a
really good argument. Several years ago, I thought the same, so that I
defined *_on version of list functionals with list in the first place
instead of at the end; for instance, I could write:

map_on l (fun x -> long multi line function)

Now I'm sure this is not the right solution to a real problem: the
elegant way to deal with that is to name the function using a let.

let eta_expand x =
 ... in

map eta_expand l.

Several arguments are in favor of a let binding:

- we still have only one functional and one way to call it
- we have no unreadable long inline function definitions
- the name we give to the function helps to understand its semantics
- we can use the same construction in case of more complex function
even in case of recursive function, where the fun x -> construct is
hopeless (to solve this problem a ``fun rec'' construct have been
proposed once, but the let rec way is much simpler, regular and
elegant!)
- the let way is a general solution to the general problem of long
multi-line expressions in every construct of the language, including
arithmetic operations.

Best regards,
-- 
Pierre Weis

INRIA, Projet Cristal, http://pauillac.inria.fr/~weis


