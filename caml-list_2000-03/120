Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA02630 for caml-redistribution@pauillac.inria.fr; Sat, 18 Mar 2000 19:00:21 +0100 (MET)
Resent-Message-Id: <200003181800.TAA02630@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA03766 for <caml-list@pauillac.inria.fr>; Sat, 18 Mar 2000 11:35:00 +0100 (MET)
Received: from julie.univ-savoie.fr (univax.univ-savoie.fr [193.48.120.32])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id LAA19118;
	Sat, 18 Mar 2000 11:34:54 +0100 (MET)
Received: from univ-savoie.fr (bppp4.univ-savoie.fr [193.48.120.23])
          by julie.univ-savoie.fr (8.9.3/jtpda-5.3.3) with ESMTP id LAA71540
          ; Sat, 18 Mar 2000 11:34:11 +0100 (CET)
Sender: raffalli@univ-savoie.fr
Message-ID: <38D35B51.8EB15DA0@univ-savoie.fr>
Date: Sat, 18 Mar 2000 11:32:49 +0100
From: Christophe Raffalli <Christophe.Raffalli@univ-savoie.fr>
Organization: Laboratoire de =?iso-8859-1?Q?Math=E9matiques?=, 
	=?iso-8859-1?Q?Universit=E9?= de Savoie
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.14-15mdkfb i686)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
CC: Xavier.leroy@inria.fr, caml-list@inria.fr
Subject: Re: Syntax for label, NEW SOLUTION
References: <20000317093058.30145@pauillac.inria.fr> <20000317230543D.garrigue@kurims.kyoto-u.ac.jp>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Sat, 18 Mar 2000 19:00:20 +0100
Resent-To: caml-redistribution@pauillac.inria.fr


First to clarify, there are two distinct problems with labels:

- Their syntax: Anything that let me put (or not put) spaces where I
want will suit me. (If people are not happy with the final syntax let
them use camlp4 :-)

- Their semantics in modern mode.

I quite agree, their should not be two modes, because this will means
two communities of users and therefore at some point two standards
libraries because each kind of users will have different needs. This is
dangerous ...
soon there would not be only one big caml community anymore.

But there may be a solution in three step:

1) Let's have only the modern mode. But let it accept any expressions
with no amibiguities. This means that if according to both types AND
labels there is a unique valid order of arguments then the compiler do
not complain.

At this point you can use blit with

> Array.blit a src_pos:x b dst_pos:y len

If both array a and b have not the same types and

> Array.blit src:a src_pos:x b dst_pos:y len

If they have the same type.

This is reasonnable ! 

But can this be implemented ? I think that this is what people wants for
labels (at least what I want). And if this is not implementable at this
time let's wait for a solution ! 

2) let's turn error messages about labels ambiguities into warning and
-modern option into an option to print or not these warnings. This is
more reasonnable and conform to the usage in a lot of programming
languages.

3) For the problem of List.fold_left (+), there is a solution: tell to
the compiler that (+) is commutative ! Or more generally find a syntax
to tell that two or more arguments of the same types may be commuted
without changing the behaviour of the function. Then there would be no
ambiguities when you type List.fold_left (+) and the compiler wii not
complain ! There would be a problem only with  List.fold_left (/) but
then writing the labels explicitely may be better (or rewrite it with a
product).

 


 
-- 
Christophe Raffalli
Université de Savoie
Batiment Le Chablais, bureau 21
73376 Le Bourget-du-Lac Cedex

tél: (33) 4 79 75 81 03
fax: (33) 4 79 75 87 42
mail: Christophe.Raffalli@univ-savoie.fr
www: http://www.lama.univ-savoie.fr/~RAFFALLI


