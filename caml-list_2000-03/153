Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA19655 for caml-redistribution@pauillac.inria.fr; Thu, 23 Mar 2000 13:46:02 +0100 (MET)
Resent-Message-Id: <200003231246.NAA19655@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA14140 for <caml-list@pauillac.inria.fr>; Thu, 23 Mar 2000 02:33:01 +0100 (MET)
Received: from ot-link.ot.com.au ([203.5.3.1])
	by concorde.inria.fr (8.8.7/8.8.7) with SMTP id CAA21352
	for <caml-list@inria.fr>; Thu, 23 Mar 2000 02:32:57 +0100 (MET)
Received: (qmail 12368 invoked from network); 23 Mar 2000 01:31:52 -0000
Received: from unknown (HELO druid.in.ot.com.au) (203.5.4.202)
  by 203.5.4.251 with SMTP; 23 Mar 2000 01:31:52 -0000
Received: (qmail 17817 invoked from network); 23 Mar 2000 01:30:22 -0000
Received: from merlin.in.ot.com.au (HELO in.ot.com.au) (203.5.4.26)
  by druid.in.ot.com.au with SMTP; 23 Mar 2000 01:30:22 -0000
Sender: maxs@inria.fr
Message-ID: <38D97550.1C6DEEC6@in.ot.com.au>
Date: Thu, 23 Mar 2000 12:37:20 +1100
From: Max Skaller <maxs@in.ot.com.au>
X-Mailer: Mozilla 4.61 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: David Chemouil <David.Chemouil@enseeiht.fr>
CC: caml-list@inria.fr
Subject: Re: variables in 'let rec'
References: <38D8953B.80D821F6@enseeiht.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Thu, 23 Mar 2000 13:46:02 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

David Chemouil wrote:

> I'm currently writing a program where I need to create both variables
> and functions in a 'let rec'. The problem is that it is not allowed to
> define a simple variable (i.e not a variant) in a 'let rec', because it
> would be able to write things such as:
> 
> # let rec x = x+1;;
> This kind of expression is not allowed as right-hand side of `let rec'
> 
> This error message seems okay to me.
> 
> However, the error message also occurs in situations where there is no
> problem:

This difficulty is more general: it applies to types, functions,
modules and classes mixed together as well.

I can't comment on the general undecidability issues here.
However, mixing classes and types together appears to be
decidable.  Here's a demonstration: given a mixed
definition:

	let rec class A1' .. and class An '
  	and type t1 ... and type tm

we can mechanically split the definition to:

	(* generic classes *)
	let class ['t1, 't2, .. 'tn] A1' ... 
	and class ['t1, 't2, .. 'tn] A2' ..
	..
 	and class ['t1, 't2, .. 'tn] An' ..
	
	(* algebraic types  using generic classes
	 instantiated on themselves *)
	let t1 ..  [t1, t2, .. tn] A1' ....[.. ] A2' ..
	and t2 ..  [t2, t3, ... tn] A1' .. [.. ] A2' ...


	(* rename generic classes as non-generic ones *)
	class A1 = [t1, t2 .. tn] A1'
	class A2 = [ ... ] A2'


This transformation can be done mechanically, and produces
the desired result, so allowing mixed type/class definition
recursions is purely a matter of syntactic sugar (although
my 'demonstration' is certainly not a proof).

It seems clear to me that this kind of result must extend
to _constants_ as well, since classes and functions
are just constants. It isn't clear that it extends to
variables... that is, mutable record components...

Cases like:

  let rec x = x+1

must be decidable, by the above decision algorithm,
assuming the existing type system is (which it isn't, I'm told?)
Or at least, no worse than an existing problem.
That's because one can always replace a constant value with
a function:

	let rec x' () = (x' ()) + 1
	let x = x' ()

is perfectly legal now and equivalent. What hapens is
that you get an infinite loop calling x = x'(). The type system
has failed to detect this. So allowing

	let rec x = x + 1

is no worse, indeed, it may be better, because there is some
chance of improving the typing algorithm to detect some such
cases.

Alternatively, you can just use

	let rec x' () = ...
	and ...
	let x = x() 

in lieu of what you really wanted: (that is,
there is a workaround).

Unfortunately, I do _not_ know of a workaround
for modules. (ie a functor where the argument
depends on one of the types defined, and the
type depends on that module instance).

This case may be genuinely undecidable, precisely because
I can't think of a workaround.

-- 
John (Max) Skaller at OTT [Open Telecommications Ltd]
mailto:maxs@in.ot.com.au      -- at work
mailto:skaller@maxtal.com.au  -- at home


