Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA30903 for caml-redistribution@pauillac.inria.fr; Mon, 6 Mar 2000 14:31:13 +0100 (MET)
Resent-Message-Id: <200003061331.OAA30903@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA01221 for <caml-list@pauillac.inria.fr>; Mon, 6 Mar 2000 06:01:45 +0100 (MET)
Received: from church.cse.ogi.edu (cse.ogi.edu [129.95.20.2])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id GAA21017
	for <caml-list@inria.fr>; Mon, 6 Mar 2000 06:01:43 +0100 (MET)
Received: from cirta (decaml.cse.ogi.edu [129.95.44.196])
	by church.cse.ogi.edu (8.9.3/8.9.3) with SMTP id VAA10293
	for <caml-list@inria.fr>; Sun, 5 Mar 2000 21:01:42 -0800 (PST)
Reply-To: <benaissa@cse.ogi.edu>
From: "Zino Benaissa" <benaissa@cse.ogi.edu>
To: <caml-list@inria.fr>
Subject: MetaML announcement
Date: Sun, 5 Mar 2000 20:51:39 -0800
Message-ID: <FLEJKCPGBIOJPIJJLLJKGEADCAAA.benaissa@cse.ogi.edu>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2918.2701
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 6 Mar 2000 14:31:13 +0100
Resent-To: caml-redistribution@pauillac.inria.fr


--------------------------------------------------------
 M       M  EEEEEEE TTTTTTTTT    A     M       M  L
 MM     MM  E           T       A A    MM     MM  L
 M M   M M  E           T      A   A   M M   M M  L
 M  M M  M  EEEEE       T      AAAAA   M  M M  M  L
 M   M   M  E           T     A     A  M   M   M  L
 M   M   M  EEEEEEE     T     A     A  M   M   M  LLLLLL
--------------------------------------------------------

The Pacific Software Research Center at the Oregon Graduate Institute
is proud to announce the first public release of MetaML. For more
information, and directions on how to download and install the system
please refer to the webpage:
  http://www.cse.ogi.edu/PacSoft/projects/metaml/index.html

MetaML is a meta-programming system designed to make the
construction of meta-programs such as program generators safe and
easy. In a meta-programming system meta-programs manipulate
object-programs. Meta-programs may construct object-programs,
combine object-program fragments into larger object-programs,
observe the structure and other properties of object-programs, and
execute object-programs to obtain their values.

In addition to these operational properties, a meta-programming
system should also have a good human-system interface. MetaML
provides the following benefits:

1) It is easy to construct code using pattern-based object-code
templates. Templates  look like the object language they represent.

2) Program fragments are easy to combine into larger program
fragments, this is accomplished by a parameterizable splicing
mechanism analogous to a "template-with-holes".

3) Object-code has a parametric type, i.e., there is code with type
Int, code with type Float, etc. Type correctness of the
meta-program, guarantees type correctness of the object-programs it
constructs.

4) Bound variables in templates are handled in a sophisticated way
which guarantees no name clashes, and which obeys the rules of
static scoping. Free variables in program templates refer to the
value of the variable at the static location where the template is
defined, not where it is eventually executed.

5) Object-programs can be run. Generated code can be “tested” inside
the meta-system.

6) Object-programs can be printed. This is essential for debugging
of meta-programs. The object-programs are pretty-printed in the
manner in which they are normally written by a programmer.

7) Object-programs have structure. It is possible to analyze
object-programs, take them apart, etc.

MetaML implements a number of extensions to Standard ML.
These extensions are interesting in their own right. They
are useful even if your not using the meta-programming
features. They include:

1) Locally polymorphic arguments to datatype constructors.
2) Existentially quantifed arguments to datatype constructors.
3) Higher order datatypes.
   Type constructors that take type constructors as parameters)
4) Support for Monads. First class Monads,
   and Haskell-like Do notation.
5) Extensible records.
6) Anonymous, extensible sums.
7) Polymorphic recursion.

and many experimental features related to meta-programming.

The MetaML team :) Zino Benaissa, Tim Sheard.

------------------------------------------------------------------
Questions? Problems? Comments? Feedback? Contributions are welcome.
send mail to:  metaml@cse.ogi.edu


