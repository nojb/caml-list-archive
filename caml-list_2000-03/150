Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA03399 for caml-redistribution@pauillac.inria.fr; Thu, 23 Mar 2000 13:37:46 +0100 (MET)
Resent-Message-Id: <200003231237.NAA03399@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA32582 for <caml-list@pauillac.inria.fr>; Wed, 22 Mar 2000 20:47:06 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id UAA01307;
	Wed, 22 Mar 2000 20:47:02 +0100 (MET)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA05010; Wed, 22 Mar 2000 20:47:01 +0100 (MET)
Message-ID: <20000322204701.02310@pauillac.inria.fr>
Date: Wed, 22 Mar 2000 20:47:01 +0100
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: John Max Skaller <skaller@maxtal.com.au>
Cc: caml-list@inria.fr
Subject: Re: Unsigned integers?
References: <20000315145830.22463@pauillac.inria.fr> <20000316115540L.garrigue@kurims.kyoto-u.ac.jp> <38D7F617.1A8386D5@maxtal.com.au>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <38D7F617.1A8386D5@maxtal.com.au>; from John Max Skaller on Wed, Mar 22, 2000 at 09:22:15AM +1100
Resent-From: weis@pauillac.inria.fr
Resent-Date: Thu, 23 Mar 2000 13:37:46 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

> I have some code for processing ISO-10646 characters and UTF-8,
> which uses caml integers. ISO-10646 has 2^31 code points, which
> can be covered by caml integers on a 32bit machine. Using an
> unboxed type is mandatory for performance.

OCaml 3.00 includes three new library modules, Int32, Int64 and
Nativeint, implementing (boxed) 32-bit, 64-bit and platform-native
integers, resepctively.  (Platform-native integers are 32 bits on 32
bit processors and 64 bits on 64 bit processors).  The native-code
compiler was modified to inline the operations on those types,
including elimination of unnecessary boxing/unboxing, like for floats.
That may or may not be efficient enough for your application.  

> Unfortunately, caml integers are signed, which makes most of the
> code I have written wrong (I haven't taken the care to handle
> integers over 2^30 correctly).

Actually, on 2's-complement machines at least, arithmetic operations
over usigned integers are exactly identical to those over signed
integers of the same size, except divisio, modulus, and
comparisons <, >, <=, >=.   So, for your application, Caml's "int"
type could be good enough, although you may need special comparison
functions (which you can write in C, using casts to unsigned long int,
or in Caml, by treating the sign bit specially).

- Xavier Leroy


