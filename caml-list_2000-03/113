Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA15608 for caml-redistribution@pauillac.inria.fr; Sat, 18 Mar 2000 18:50:09 +0100 (MET)
Resent-Message-Id: <200003181750.SAA15608@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA28444 for <caml-list@pauillac.inria.fr>; Fri, 17 Mar 2000 20:28:50 +0100 (MET)
Received: from plutonium.uunet.be (plutonium.uunet.be [194.7.15.87])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id UAA24819
	for <caml-list@inria.fr>; Fri, 17 Mar 2000 20:28:49 +0100 (MET)
Received: from jannt (uu212-190-6-7.unknown.uunet.be [212.190.6.7])
	by plutonium.uunet.be (8.9.1/8.9.1) with ESMTP id UAA25602
	for <caml-list@inria.fr>; Fri, 17 Mar 2000 20:28:48 +0100 (CET)
Message-ID: <000901bf9047$45886e30$0706bed4@jannt>
From: "Jan Brosius" <jan.brosius@village.uunet.be>
To: <caml-list@inria.fr>
Subject: to have labels or not
Date: Fri, 17 Mar 2000 20:30:00 +0100
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2014.211
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2014.211
Resent-From: weis@pauillac.inria.fr
Resent-Date: Sat, 18 Mar 2000 18:50:09 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

Hi,

I am looking around to have a good , free and very easy language , portable
and so on, producing fast code. Objective Caml was and still is for me a
serious candidate among the many free portable languages on the net. I
realise that it is not up to me to enforce a decision . I also realize that
credits always should be given to the implementors and France's research
institute INRIA.

My personal choice is not to use labels at all because it makes the readable
code  too big, it is better I think  to use meaningful words and within
comments to clarify the types of the functions.

I think I would never use the "label on " option.

function x -> ..   could be shortened  by : \x ->.....  I think and the use
of [`a] instead of  `a list and the use of  list comprensions as in Haskell
could shorten the readable code and maintain readability.

friendly et amicalement

Jan Brosius


