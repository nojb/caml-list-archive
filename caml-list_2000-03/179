Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA31577 for caml-redistribution@pauillac.inria.fr; Mon, 27 Mar 2000 19:16:54 +0200 (MET DST)
Resent-Message-Id: <200003271716.TAA31577@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA14687 for <caml-list@pauillac.inria.fr>; Sat, 25 Mar 2000 15:55:06 +0100 (MET)
Received: from tobago.inria.fr (tobago.inria.fr [128.93.8.21])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id PAA01641
	for <caml-list@inria.fr>; Sat, 25 Mar 2000 15:55:05 +0100 (MET)
Received: (from doligez@localhost) by tobago.inria.fr (8.6.10/8.6.6) id PAA23584 for caml-list@inria.fr; Sat, 25 Mar 2000 15:55:04 +0100
Date: Sat, 25 Mar 2000 15:55:04 +0100
From: Damien Doligez <Damien.Doligez@inria.fr>
Message-Id: <200003251455.PAA23584@tobago.inria.fr>
To: caml-list@inria.fr
Subject: Re: variables in 'let rec'
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 27 Mar 2000 19:16:54 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

>From: Max Skaller <maxs@in.ot.com.au>
>
>Alternatively, you can just use
>
>	let rec x' () = ...
>	and ...
>	let x = x() 
>
>in lieu of what you really wanted: (that is,
>there is a workaround).

But that doesn't work for "let rec x = 1 :: x", which is the most
interesting feature of O'Caml's recursive value definitions.

-- Damien


