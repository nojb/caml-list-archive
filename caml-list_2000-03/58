Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA22260 for caml-redistribution@pauillac.inria.fr; Fri, 10 Mar 2000 09:07:18 +0100 (MET)
Resent-Message-Id: <200003100807.JAA22260@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA10268 for <caml-list@pauillac.inria.fr>; Thu, 9 Mar 2000 14:17:51 +0100 (MET)
Received: from heplix4.ikp.physik.tu-darmstadt.de (heplix4.ikp.physik.tu-darmstadt.de [130.83.24.139])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id OAA09823
	for <caml-list@inria.fr>; Thu, 9 Mar 2000 14:17:51 +0100 (MET)
Received: (from ohl@localhost)
	by heplix4.ikp.physik.tu-darmstadt.de (8.9.3/8.9.3) id OAA26791;
	Thu, 9 Mar 2000 14:18:23 +0100
X-Authentication-Warning: heplix4.ikp.physik.tu-darmstadt.de: ohl set sender to ohl@heplix4.ikp.physik.tu-darmstadt.de using -f
From: Thorsten Ohl <ohl@hep.tu-darmstadt.de>
Message-ID: <14535.42143.144192.811309@heplix4.ikp.physik.tu-darmstadt.de>
Date: Thu, 9 Mar 2000 14:18:23 +0100 (CET)
To: caml-list@inria.fr (OCAML)
Cc: Markus Mottl <mottl@miss.wu-wien.ac.at>
Subject: additions to standard library?
In-Reply-To: <200003071524.QAA12371@miss.wu-wien.ac.at>
References: <200003071524.QAA12371@miss.wu-wien.ac.at>
X-Mailer: VM 6.74 under Emacs 20.3.1
Reply-To: ohl@hep.tu-darmstadt.de
Resent-From: weis@pauillac.inria.fr
Resent-Date: Fri, 10 Mar 2000 09:07:18 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

Markus Mottl <mottl@miss.wu-wien.ac.at> writes:

> Hello, it sometimes happens that I need functions on abstract data
            ^^^^^^^^^ often :-)
> types in the standard library which are not available there, but
> could be considered as "usual" operations on such data.

> Some specific examples include, e.g.:

My favorites are Map and List, of which I keep carrying around
turbocharged versions.

> CVS-repository [...] "peer review"

That's a brilliant idea!

Here's another issue in the same problem domain, that might be more
interesting for developers: wouldn't it be possible to add a language
feature that allows to extend module implementations without opening
the pandora box of classes with inheritance?

Currently, we can use `include' to extend module types, but not
implementations.  I'm thinking of something like

    module type ThoList =
      sig
    	include List  (* doesn't work because list.mli is a file,
                         but you get the idea :-) *)
    	val flatmap : ('a -> 'b list) -> 'a list -> 'b list
      end
    
    module ThoList : ThoList=
      sig
    	include List
    	let rec flatmap f = function
    	  | [] -> []
    	  | x :: rest -> f x @ flatmap f rest
      end
 
Cheers,
-Thorsten
-- 
Thorsten Ohl, Physics Department, TU Darmstadt -- ohl@hep.tu-darmstadt.de
http://heplix.ikp.physik.tu-darmstadt.de/~ohl/ [<=== PGP public key here]


