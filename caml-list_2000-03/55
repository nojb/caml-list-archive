Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA07933 for caml-redistribution@pauillac.inria.fr; Fri, 10 Mar 2000 09:04:33 +0100 (MET)
Resent-Message-Id: <200003100804.JAA07933@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA26754 for <caml-list@pauillac.inria.fr>; Thu, 9 Mar 2000 00:24:14 +0100 (MET)
Received: from ot-link.ot.com.au ([203.5.3.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with SMTP id AAA18061
	for <caml-list@inria.fr>; Thu, 9 Mar 2000 00:24:10 +0100 (MET)
Received: (qmail 15630 invoked from network); 8 Mar 2000 23:24:06 -0000
Received: from unknown (HELO druid.in.ot.com.au) (203.5.4.202)
  by 203.5.4.251 with SMTP; 8 Mar 2000 23:24:06 -0000
Received: (qmail 7541 invoked from network); 8 Mar 2000 23:24:04 -0000
Received: from merlin.in.ot.com.au (HELO in.ot.com.au) (203.5.4.26)
  by druid.in.ot.com.au with SMTP; 8 Mar 2000 23:24:04 -0000
Sender: maxs@inria.fr
Message-ID: <38C6E288.991E27D6@in.ot.com.au>
Date: Thu, 09 Mar 2000 10:30:16 +1100
From: Max Skaller <maxs@in.ot.com.au>
Organization: Open Telecommunications Ltd
X-Mailer: Mozilla 4.61 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Julian Assange <proff@iq.org>
CC: Xavier Leroy <Xavier.Leroy@inria.fr>,
        William Chesters <williamc@paneris.org>, caml-list@inria.fr
Subject: Re: Interpreter vs hardware threads
References: <14518.34203.741447.637489@gargle.gargle.HOWL> <38BC93FC.65E3ED43@in.ot.com.au> <38bd773a@tequila.cs.yale.edu> <200003021818.SAA13646@toy.william.bogus> <20000306183546.18171@pauillac.inria.fr> <wxg0u26hpb.fsf@suburbia.net>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Fri, 10 Mar 2000 09:04:33 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

Julian Assange wrote:

> What is the source of the linearity of thread context switches in
> ocaml?  Are there ways to eliminate it? If so I'd be happy to have a
> look at doing so.

One problem with this is that it only affects the bytecode interpreter.
It would be nice to have lightweight threads available for compiled
ocaml too.

The system I need to implement uses a (heavyweight) event dispatcher
thread and a few (heavyweight) worker threads. The events are
'executed',
in other words, the client code built as an object with callbacks.
This is very fast: there's no need to 'check' for a blocked IO
operation and restart the 'thread'. The thread is restarted directly
by the event.

This all works fine, except that it is very hard to code
the logic of a 'logical' thread of control. So I need to
'control invert' a client program, which is written in procedural style,
to hide the ugly event driven implementation.

-- 
John (Max) Skaller at OTT [Open Telecommications Ltd]
mailto:maxs@in.ot.com.au      -- at work
mailto:skaller@maxtal.com.au  -- at home


