Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA24878 for caml-redistribution@pauillac.inria.fr; Fri, 17 Mar 2000 16:22:54 +0100 (MET)
Resent-Message-Id: <200003171522.QAA24878@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA03078 for <caml-list@pauillac.inria.fr>; Fri, 17 Mar 2000 10:46:50 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA04926
	for <caml-list@inria.fr>; Fri, 17 Mar 2000 10:46:48 +0100 (MET)
Received: from localhost (sansho.kurims.kyoto-u.ac.jp [130.54.16.90])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id SAA27545
	for <caml-list@inria.fr>; Fri, 17 Mar 2000 18:46:47 +0900 (JST)
To: caml-list@inria.fr
Subject: RE: Syntax for label, NEW PROPOSAL
In-Reply-To: Your message of "Wed, 15 Mar 2000 12:40:22 -0800"
	<39ADCF833E74D111A2D700805F1951EF18014503@RED-MSG-06>
References: <39ADCF833E74D111A2D700805F1951EF18014503@RED-MSG-06>
X-Mailer: Mew version 1.93 on Emacs 20.5 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20000317184840K.garrigue@kurims.kyoto-u.ac.jp>
Date: Fri, 17 Mar 2000 18:48:40 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Resent-From: weis@pauillac.inria.fr
Resent-Date: Fri, 17 Mar 2000 16:22:54 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

Having seen a number of recent messages against having labels in the
standard library, I have the feeling that there is a lot of confusion
here, and I would like to make a few points clear.

* In default (classic) mode, writing labels is (and will stay) not
  required. For those users that do not like labels, or do not want to
  bother with them, or just are starting to learn ML, labels in the
  standard library are just some form of documentation, like argument
  names in C prototypes.
  Honestly, I have never heard anybody protesting against having
  argument names in C prototypes.

* While not requiring labels, classic mode provides some support for
  them, meaning that casual users can put some labels in their
  programs if they want. This also means that any library written in
  modern mode (where labels matter) will be available with the same
  comfort in both classic and modern mode, and, more interestingly,
  according to the _user_'s taste rather than to the implementor's.

* What we are discussing about is modern mode. This is not pedantic
  mode, this is just another typing discipline. This basically doesn't
  concern people who are not very fond of labels, and will be perfectly
  happy with classic mode.

* Pierre expressed his concern that modern mode would make more
  difficult some nice programming style. I perfectly agree with him,
  but I think this specific problem can be solved without removing
  labels from the library.

Looking at the messages, there are clearly people who prefer (heavily)
labelled style, and others who prefer fewer or no labels. But they all
agree that Caml is and should stay a great _functional_ language.
Let's all live happily together: modern and classic mode are there for
that!

Jacques


