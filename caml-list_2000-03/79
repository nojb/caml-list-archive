Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA19178 for caml-redistribution@pauillac.inria.fr; Wed, 15 Mar 2000 08:48:00 +0100 (MET)
Resent-Message-Id: <200003150748.IAA19178@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA31416 for <caml-list@pauillac.inria.fr>; Wed, 15 Mar 2000 02:34:13 +0100 (MET)
Received: from suburbia.net (suburbia.net [203.4.184.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id CAA18438
	for <caml-list@inria.fr>; Wed, 15 Mar 2000 02:34:08 +0100 (MET)
Received: by suburbia.net (Postfix, from userid 110)
	id 5F9FE6C627; Wed, 15 Mar 2000 12:33:58 +1100 (EST)
Sender: proff@suburbia.net
To: caml-list@inria.fr
Subject: let ... in layout
Cc: proff@iq.org
From: Julian Assange <proff@iq.org>
Date: 15 Mar 2000 12:33:58 +1100
Message-ID: <wx8zzlm2yh.fsf@suburbia.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-From: weis@pauillac.inria.fr
Resent-Date: Wed, 15 Mar 2000 08:48:00 +0100
Resent-To: caml-redistribution@pauillac.inria.fr


let .. in
let .. in ...

seems such a common construct in caml that it could do with some
syntatic sugar. I often see let..in run to 5-20 clauses. This appears
incredibly ugly compared to the equivalent haskell code, is harder to
read and takes longer to write due to the clutter of the surrounding
token magic. Has anyone thought about applying layout in general to
ocaml, or otherwise sugaring let...in? Is there any reason why the BNF

        let {name = expr}+ in

would be ambiguous?

The only other haskell features I frequently miss, are list
comprehensions and multiple argument pattern matching.

Cheers,
Julian.


