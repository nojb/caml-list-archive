Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA09037 for caml-redistribution@pauillac.inria.fr; Tue, 28 Mar 2000 20:31:02 +0200 (MET DST)
Resent-Message-Id: <200003281831.UAA09037@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA19504 for <caml-list@pauillac.inria.fr>; Tue, 28 Mar 2000 12:01:53 +0200 (MET DST)
Received: from tobago.inria.fr (tobago.inria.fr [128.93.8.21])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id MAA15608
	for <caml-list@inria.fr>; Tue, 28 Mar 2000 12:01:53 +0200 (MET DST)
Received: (from doligez@localhost) by tobago.inria.fr (8.6.10/8.6.6) id MAA08053 for caml-list@inria.fr; Tue, 28 Mar 2000 12:01:51 +0200
Date: Tue, 28 Mar 2000 12:01:51 +0200
From: Damien Doligez <Damien.Doligez@inria.fr>
Message-Id: <200003281001.MAA08053@tobago.inria.fr>
To: caml-list@inria.fr
Subject: Re: variables in 'let rec'
Resent-From: weis@pauillac.inria.fr
Resent-Date: Tue, 28 Mar 2000 20:31:02 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

>From: Max Skaller <maxs@in.ot.com.au>

>        let rec x'() = 1 :: x()'
>        let x = x'()
>
>Seems to work fine. Of course, this will loop forever in an eager
>language: the result is an infinite list of 1s.

Looping forever is not quite the same as returning an infinite list
of 1s, which is what the current implementation does for
    let rec x = 1::x

-- Damien


