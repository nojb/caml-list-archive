Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA22410 for caml-redistribution@pauillac.inria.fr; Wed, 29 Mar 2000 19:24:13 +0200 (MET DST)
Resent-Message-Id: <200003291724.TAA22410@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA04123 for <caml-list@pauillac.inria.fr>; Wed, 29 Mar 2000 13:26:51 +0200 (MET DST)
Received: from dpt-info.u-strasbg.fr (dpt-info.u-strasbg.fr [130.79.6.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id NAA04939;
	Wed, 29 Mar 2000 13:26:50 +0200 (MET DST)
Received: from lambda.u-strasbg.fr (lambda.u-strasbg.fr [130.79.75.49])
	by dpt-info.u-strasbg.fr (8.9.3/8.9.3) with ESMTP id NAA10227;
	Wed, 29 Mar 2000 13:25:28 +0200
Received: from luther by lambda.u-strasbg.fr with local (Exim 3.12 #1 (Debian))
	id 12aGf3-0007NJ-00; Wed, 29 Mar 2000 13:29:21 +0200
Date: Wed, 29 Mar 2000 13:29:20 +0200
From: Sven LUTHER <luther@dpt-info.u-strasbg.fr>
To: Max Skaller <maxs@in.ot.com.au>
Cc: Damien Doligez <Damien.Doligez@inria.fr>, caml-list@inria.fr
Subject: Re: variables in 'let rec'
Message-ID: <20000329132920.A28331@dpt-info.u-strasbg.fr>
Reply-To: luther@dpt-info.u-strasbg.fr
Mail-Followup-To: Max Skaller <maxs@in.ot.com.au>,
	Damien Doligez <Damien.Doligez@inria.fr>, caml-list@inria.fr
References: <200003251455.PAA23584@tobago.inria.fr> <38E004E8.C28EB2E2@in.ot.com.au>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
User-Agent: Mutt/1.0.1i
In-Reply-To: <38E004E8.C28EB2E2@in.ot.com.au>; from maxs@in.ot.com.au on Tue, Mar 28, 2000 at 11:03:36AM +1000
Resent-From: weis@pauillac.inria.fr
Resent-Date: Wed, 29 Mar 2000 19:24:13 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

On Tue, Mar 28, 2000 at 11:03:36AM +1000, Max Skaller wrote:
> Damien Doligez wrote:
> > 
> > >From: Max Skaller <maxs@in.ot.com.au>
> > >
> > >Alternatively, you can just use
> > >
> > >       let rec x' () = ...
> > >       and ...
> > >       let x = x()
> > >
> > >in lieu of what you really wanted: (that is,
> > >there is a workaround).
> > 
> > But that doesn't work for "let rec x = 1 :: x", which is the most
> > interesting feature of O'Caml's recursive value definitions.
> 
> 	It doesn't?
> 
> 	let rec x'() = 1 :: x()'
> 	let x = x'()

FYI :

bash-2.03$ ocaml  
        Objective Caml version 2.99 (99/12/08)

# let rec x = 1 :: x ;;
val x : int list =
  [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
   ...]
# let rec x = 1 :: 2 :: x ;;
val x : int list =
  [1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2;
   1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2;
   1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2;
   1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2;
   1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2;
   1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1;
   ...]

Friendly,

Sven LUTHER


