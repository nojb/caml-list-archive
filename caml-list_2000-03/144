Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA15640 for caml-redistribution@pauillac.inria.fr; Wed, 22 Mar 2000 19:16:58 +0100 (MET)
Resent-Message-Id: <200003221816.TAA15640@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA17436 for <caml-list@pauillac.inria.fr>; Wed, 22 Mar 2000 10:41:14 +0100 (MET)
Received: from enseeiht.enseeiht.fr (enseeiht.enseeiht.fr [147.127.18.144])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA01914
	for <caml-list@inria.fr>; Wed, 22 Mar 2000 10:41:13 +0100 (MET)
Received: from enseeiht.fr by enseeiht.enseeiht.fr; Wed, 22 Mar 2000 10:41:16 +0100 (MET)
X-Url: http://www.enseeiht.fr
Sender: David.Chemouil@enseeiht.fr
Message-ID: <38D8953B.80D821F6@enseeiht.fr>
Date: Wed, 22 Mar 2000 10:41:15 +0100
From: David Chemouil <David.Chemouil@enseeiht.fr>
Organization: ENSEEIHT - LIMA/IRIT/CNRS
X-Mailer: Mozilla 4.7 [en] (X11; I; SunOS 5.6 sun4u)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: variables in 'let rec'
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Wed, 22 Mar 2000 19:16:58 +0100
Resent-To: caml-redistribution@pauillac.inria.fr


hi


I'm currently writing a program where I need to create both variables
and functions in a 'let rec'. The problem is that it is not allowed to
define a simple variable (i.e not a variant) in a 'let rec', because it
would be able to write things such as:

# let rec x = x+1;;
This kind of expression is not allowed as right-hand side of `let rec'

This error message seems okay to me.

However, the error message also occurs in situations where there is no
problem:

# let rec x = fact 5    (* using usual fact *)
              ^^^^^^
  and even = function
  | 0 -> true
  | n -> odd (n-1)
  and odd = function
  | 1 -> true
  | n -> even (n-1);;
This kind of expression is not allowed as right-hand side of `let rec'

What is "funny" is that it is possible to write 'Some (fact 5)'...

I wonder, then, if it would be possible to be a little less strict in
the typing policy. I believe however that it must be hard to perform
this, because it believe it is undecidable in the general case. But
isn't it possible to find a less strict policy which remains decidable?
For example, what if, in the typer, the 'let rec ... and ...' definition
was split in two parts: 
- the first part would be typed first: it would contain the variable
definitions which would be typed as a normal 'let ... and ...'.
- the second part would be typed as the current 'let rec ... and ...',
but the environment would contain the variables typed in the first part.

This system would enable to create variables in a 'let rec', but would
still forbid :
- to define mutually recursive variables
- to define non-recursive functions within a 'let rec'.


Of course, I guess the problem must be harder than that, but I think the
current system isn't completely "natural", as it forbids something that
is mathematically correct... 

Anyway, if this problem is really to complex, or undecidable, or not
worth the effot, why not allow any variable definition in a 'let rec'
and print a warning message? Then, the programmer would decide if the
definition may lead to an error...


regards

dc

-- 
David Chemouil [mailto:chemouil@enseeiht.fr] [mobile: 06 84 16 26 65]

Laboratoire d'informatique et de mathématiques appliquées (IRIT-INPT)


