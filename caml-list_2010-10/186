Return-Path: <gclci-caml-list@m.gmane.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id ABF4EBC57
	for <caml-list@yquem.inria.fr>; Sun, 31 Oct 2010 16:08:24 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArMEALcizUxQW+UMgWdsb2JhbACTTY18FQEBFiIiulmFRASKVIV0
X-IronPort-AV: E=Sophos;i="4.58,268,1286143200"; 
   d="scan'208";a="64631095"
Received: from lo.gmane.org ([80.91.229.12])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 31 Oct 2010 16:08:24 +0100
Received: from list by lo.gmane.org with local (Exim 4.69)
	(envelope-from <gclci-caml-list@m.gmane.org>)
	id 1PCZWA-0002Vb-Vr
	for caml-list@inria.fr; Sun, 31 Oct 2010 16:08:22 +0100
Received: from avelizy-155-1-73-128.w90-2.abo.wanadoo.fr ([90.2.24.128])
        by main.gmane.org with esmtp (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Sun, 31 Oct 2010 16:08:22 +0100
Received: from sylvain by avelizy-155-1-73-128.w90-2.abo.wanadoo.fr with local (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <caml-list@inria.fr>; Sun, 31 Oct 2010 16:08:22 +0100
X-Injected-Via-Gmane: http://gmane.org/
To: caml-list@inria.fr
From: Sylvain Le Gall <sylvain@le-gall.net>
Subject: Re: Generalized Algebraic Datatypes
Date: Sun, 31 Oct 2010 15:08:12 +0000 (UTC)
Lines: 53
Message-ID: <slrnicr1is.r67.sylvain@gallu.homelinux.org>
References: <904846.44200.qm@web111513.mail.gq1.yahoo.com>
 <jwvbp6chfnw.fsf-monnier+gmane.comp.lang.caml.inria@gnu.org>
 <AANLkTin4stf7+DF4kkuvBCpKUCBh+kmB0LkbGvJnkbA9@mail.gmail.com>
 <87tyk2v46e.fsf@gmail.com> <slrnicqvlv.r67.sylvain@gallu.homelinux.org>
 <AANLkTikfPYrkMxKEfC9H72ACb=VpDxV2WJ4YyZQwqBOe@mail.gmail.com>
X-Complaints-To: usenet@dough.gmane.org
X-Gmane-NNTP-Posting-Host: avelizy-155-1-73-128.w90-2.abo.wanadoo.fr
User-Agent: slrn/pre1.0.0-18 (Linux)
X-Spam: no; 0.00; le-gall:01 datatypes:01 lukasz:01 le-gall:01 datatype:01 camlp:01 camlp:01 constructors:01 capitalized:01 capitalized:01 ocaml:01 ocaml:01 toplevel:01 syntax:01 expr:01 

On 31-10-2010, Lukasz Stafiniak <lukstafi@gmail.com> wrote:
> On Sun, Oct 31, 2010 at 3:35 PM, Sylvain Le Gall <sylvain@le-gall.net> wrote:
>> On 31-10-2010, Wojciech Daniel Meyer <wojciech.meyer@googlemail.com> wrote:
>>> bluestorm <bluestorm.dylc@gmail.com> writes:
>>>
>>>> It was actually the case in Caml Light : each datatype constructor
>>>> implicitly declared a constructor function with the same name. I
>>>> don't exactly know why this feature was dropped in Objective Caml,
>>>> but I think I remember (from a previous discussion) that people
>>>> weren't sure it was worth the additional complexity.
>>>
>>> Would that be not possible now with Camlp4 extension?
>>>
>>
>> I am pretty sure, it is possible to implement them with camlp4. Just a
>> matter of time -- and motivation.
>>
>> The only limitation I can see, is that the generated constructors won't
>> be capitalized. E.g.:
>>
>> type t = MyConstr | YourConstr of int
>>
>> =>
>>
>> type t = MyConstr | YourConstr of int
>>
>> let myConstr = MyConstr
>> let yourConstr i = YouConstr i
>>
>
> Why do you say so? HOL Light uses capitalized identifiers for values,
> for example. It's probably possible to do whatever one reasonably
> wants.
>

Function names and values are "low id" in OCaml (first letter must be
uncapitalized). If you try to define "let MyConstr = 0" in an OCaml
toplevel, you will get a syntax error... 

The code generated by camlp4 must be syntactically correct.

But maybe you are talking about a deeper integration?

E.g. whenever you encounter the constructor "YourConstr" in expr, you
transform it into "fun i -> YourConstr i". This should work but since
camlp4 is limited to a single module, you won't be able to use this
outside the module, because you won't have access to the definition of
YouConstr and won't be able to determine his arity...

But if you have an idea about how to solve this, just tell us.

Regards,
Sylvain Le Gall

