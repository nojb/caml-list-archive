Return-Path: <rathereasy@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 0A9EABBAF
	for <caml-list@yquem.inria.fr>; Tue, 26 Oct 2010 07:30:15 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuQBAHIExkzRVaE0kGdsb2JhbACBRZFrhhsBhzZLCBUBAQEBCQkMBxEDH6NyiViCF4ZFLohXAQEDBYVDBIFagniFe4Vy
X-IronPort-AV: E=Sophos;i="4.58,239,1286143200"; 
   d="scan'208";a="63922397"
Received: from mail-fx0-f52.google.com ([209.85.161.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 26 Oct 2010 07:30:14 +0200
Received: by fxm12 with SMTP id 12so3018657fxm.39
        for <caml-list@yquem.inria.fr>; Mon, 25 Oct 2010 22:30:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=bsSyIRpg61xAuBqlWFOVpc1PUFXGmjLiEosbRrErVbA=;
        b=ZIA4e27x7yikvsAJh4ZTJ/EIAqcYRZeq/VYlm25/nMoBMEGuktL6cV9gzrTbqVRzU9
         qUIeBkmCM+73JhxmtnWNoNmY0C4N7AXM5s7oL0SNpXzMK8nStjd3TTvevByPT8IcO+5H
         oJZSAglPbCnX0H1RdDkPPfcyCji+MlJbkQHww=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=J5t3DWFatiA0DJxGAkndkz7/DPkfIA7aXQe3YzZM50PAT2Jj2Tiy14ruGQOauBTFAX
         utzRR/rwggmeePgTD7Clfl+g+khxBCyllbDCNBLXhogT/rcgocYIoXej/2l3rDdK3zAj
         YwKUFyTNSGijo4ETbZqcAslw0aTRewuBKT7Po=
MIME-Version: 1.0
Received: by 10.239.189.2 with SMTP id r2mr1902420hbh.50.1288071013584; Mon,
 25 Oct 2010 22:30:13 -0700 (PDT)
Received: by 10.239.185.79 with HTTP; Mon, 25 Oct 2010 22:30:13 -0700 (PDT)
In-Reply-To: <AANLkTimw39FAapf3Ptecs40vAvO2G+qbAtPMizy-VeWy@mail.gmail.com>
References: <AANLkTinoNC+OY0Zo6Aju5gKuiajqjomcNJinfky1FAYf@mail.gmail.com>
	<AANLkTimw39FAapf3Ptecs40vAvO2G+qbAtPMizy-VeWy@mail.gmail.com>
Date: Tue, 26 Oct 2010 14:30:13 +0900
Message-ID: <AANLkTikvRKKsUTsFqCJ3y1GW+mRdDYmqXKSVT8u8YZ6d@mail.gmail.com>
Subject: Re: [Caml-list] Generalized Algebraic Datatypes
From: Jacques Le Normand <rathereasy@gmail.com>
To: bluestorm <bluestorm.dylc@gmail.com>
Cc: caml-list caml-list <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=001485f6db5035d17104937e678c
X-Spam: no; 0.00; datatypes:01 unifications:01 polymorphism:01 haskell:01 constructors:01 foo:01 checker:01 checker:01 o'caml:01 foo:01 bool:01 baz:01 bool:01 subtype:01 -'a:01 

--001485f6db5035d17104937e678c
Content-Type: text/plain; charset=ISO-8859-1

On Mon, Oct 25, 2010 at 6:44 PM, bluestorm <bluestorm.dylc@gmail.com> wrote:

> It's very interesting.
>
> First, I'm curious of the "historical" aspects of this work : where does it
> come from ? Apparently there is work from you and Jacques Garrigue, but it's
> hard to tell. Is it new, or a long-running experiment ?
>
>
The history: the algorithm was developed, in part, for my PhD research. I've
been working on it with Jacques Garrigue for the last two months.


> In your "intuition" section (btw. there is a typo here, it should be (type
> s) (x : s t)), you seem to present GADT as directly related to the new (type
> s) construct. It's a bit surprising because it's difficult to know the
> difference between this and classic type variables. I suppose it is because
> only (type s) guarantee that the variable remains polymorphic, and you use
> that to ensure that branch-local unifications don't "escape" to the outer
> level ? Could you be a bit more explicit on this ?
>
>
I don't know what you mean by "remains polymorphic". However, (type s) and
polymorphism are quite distinct concepts. Consider the following examples:

# let rec f (type s) (x : s) : s = f x;;
Error: This expression has type s but an expression was expected of type s
       The type constructor s would escape its scope

# fun (type s) ( f : s -> s) ( x : s) -> f x;;
- : ('_a -> '_a) -> '_a -> '_a = <fun>


The reason I chose to use newtypes, ie (type s), is that I needed a type
variable which did not change (I believe the Haskell people call it rigid),
so I decided to use type constructors. Another option, previously
implemented, was to use polymorphic variables, ie:

let rec foo : 'a. 'a t -> t =
    function
        | IntLit x -> x


However, this has several disadvantages, the biggest of which is that  the
variable 'a cannot be referenced inside the expression since its scope is
the type in which it was introduced.




> It's also a bit difficult to know what's the big deal about "exhaustiveness
> checks". As I understand it, you remark that with GADTs some case cannot
> happen due to typing reasons, but the exhaustive check doesn't know about
> it. Could you be a bit more explicit about what the exhaustiveness checker
> does :
> - is it exactly the same behavior as before, ignoring GADT specificities ?
> (ie. you haven't changed anything)
> - if not, what have you changed and how can we try to predict its reaction
> to a given code ?
> - what can we do when it doesn't detect an impossible case ? I suppose we
> can't a pattern clause for it, as the type checker would reject it.
>
>
This problem is not new in O'Caml. For example:

# type t = { x : 'a . 'a list } ;;
type t = { x : 'a. 'a list; }
# let _ = function { x = [] } -> 5;;
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
{x=_::_}

however, try creating a value of type ('a. 'a list) satisfying the pattern _
:: _

What I've done is written a second pass to the exhaustiveness checker. The
first pass does the same thing as before, but ignores GADTs completely. The
second pass exhaustively checks every possible generalized constructor
combination.

For example, in the code

type 'a t = Foo : int t | Bar : bool t | Baz : float t

let f : type s. s t * s t * s t -> s =
    function
         Foo, Foo, Foo
      | ....

My code will check all 9 possible patterns and will output any which were
missed. The pattern returned by my algorithm is a valid pattern.


> I'm not sure I understand the example of the "Variance" section.
> Why is the cast in that direction ? It seems to me that even if we could
> force t to be covariant, this cast (to a less general type) shouldn't work :
>
>   # type +'a t = T of 'a;;
>   # let a = T (object method a = 1 end);;
>   # (a :> < m : int; n : bool > t);;
>   Error: Type < a : int > t is not a subtype of < m : int; n : bool > t
>
>
I apologize, that should be:

type -'a t = C : < m : int > -> < m : int > t

or, as a constraint:

type -'a t = C of 'a constraint 'a = < m : int >


> Again, you "Objects and variants" and "Propagation" subsections are a bit
> vague. Could you give example of code exhibiting possible problems ?
>
>
Propagation:

Currently, this code doesn't compile:

    let rec baz : type s . s t -> s =
      fun (type z) ->
function
    IntLit x -> x : s
  | BoolLit y -> y : s

so you need to add the annotation:

    let rec baz : type s . s t -> s =
      fun (type z) ->
((function
    IntLit x -> x
  | BoolLit y -> y) : s t -> s)

objects (and polymorphic variants):

the following will not compile:

    let rec eval : type s . s t -> s =
      function
| IntLit x -> ignore (object method m : s = failwith "foo" end : < m : int;
..>) ; x

polymorphic variants in patterns:

the following will not compile:

    let rec eval : type s . [`A] * s t -> unit =
      function
| `A, IntLit _ -> ()
| `A, BoolLit _ -> ()


> Finally, a few syntax trolls, in decreasing order of constructivity :
>
> - is it a good idea to reproduce the "implicit quantification" of ordinary
> types ? It seems it could be particularly dangerous here.
>   for example, changing
>     type _ t = Id : 'a -> 'a t
>   to
>     type 'a t = Id : 'a -> 'a t | Foo of 'a
>   introduce, if I'm not mistaken, a semantic-changing variable captures.
>   (I thought other dark corners of the type declarations already had this
> behavior, but right now I can't remember which ones)
>

type 'a t = Id : 'a -> 'a t | Foo of 'a

is the same as

type 'b t = Id : 'a -> 'a t | Foo of 'b

In other words, the type variables in generalized constructor definitions
are distinct from the type parameters.


>
> - if I understand it correctly, (type a . a t -> a) is yet another syntax
> for type quantification. Why ? I thought (type a) was used to force
> generalization, but ('a . ...)-style annotation already force polymorphism
> (or don't they ?). Is it a semantic difference with ('a . 'a t -> 'a), other
> than its interaction with gadts ? Can we use (type a . a t -> a) in all
> places where we used ('a . 'a t -> 'a) before ?
>

(type s) does not force generalization (see above); this is why this new
syntax is needed. You can use (type a . a t -> a) anywhere you used ('a. 'a
t -> 'a) could before, assuming that you don't have any types a that you
don't want hidden. This syntax extension is purely syntactic sugar.


>
> - is there a rationale for choosing Coq-style variant syntax instead of
> just adding a blurb to the existing syntax, such as
>     | IntLit of int : int t
>   or
>     | IntList of int return int t
>   ?
>
>
The only rationale is that I want to make it clear that the type variables
found inside generalized constructor definitions are distinct from the type
parameters. In your second example, return is not a keyword in O'Caml. I
could very well have chosen your first example. If there is a consensus on
some alternate syntax, I have no qualms about changing it.

Thank you for the feedback. I will add some of these things to my webpage.

Sincerely,

Jacques Le Normand


> Thanks.
>

> On Mon, Oct 25, 2010 at 10:39 AM, Jacques Le Normand <rathereasy@gmail.com
> > wrote:
>
>> Dear Caml list,
>>
>> I am pleased to announce an experimental branch of the O'Caml compiler:
>> O'Caml extended with Generalized Algebraic Datatypes. You can find more
>> information on this webpage:
>>
>> https://sites.google.com/site/ocamlgadt/
>>
>>
>> And you can grab the latest release here:
>>
>> svn checkout https://yquem.inria.fr/caml/svn/ocaml/branches/gadts
>>
>>
>>
>>
>> Any feedback would be very much appreciated.
>>
>> Sincerely,
>>
>> Jacques Le Normand
>>
>>
>> _______________________________________________
>> Caml-list mailing list. Subscription management:
>> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>> Archives: http://caml.inria.fr
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>>

--001485f6db5035d17104937e678c
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br><br><div class=3D"gmail_quote">On Mon, Oct 25, 2010 at 6:44 PM, bluesto=
rm <span dir=3D"ltr">&lt;<a href=3D"mailto:bluestorm.dylc@gmail.com">bluest=
orm.dylc@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quot=
e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;"=
>
<div><div>It&#39;s very interesting.<div><br></div><div>First, I&#39;m curi=
ous of the &quot;historical&quot; aspects of this work : where does it come=
 from ? Apparently there is work from you and Jacques Garrigue, but it&#39;=
s hard to tell. Is it new, or a long-running experiment ?<div>


<br></div></div></div></div></blockquote><div><br></div><div>The history: t=
he algorithm was developed, in part, for my PhD research. I&#39;ve been wor=
king on it with Jacques Garrigue for the last two months.</div><div>=A0</di=
v>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;"><div><div><div><div></div><div>In your &quo=
t;intuition&quot; section (btw. there is a typo here, it should be (type s)=
 (x : s t)), you seem to present GADT as directly related to the new (type =
s) construct. It&#39;s a bit surprising because it&#39;s difficult to know =
the difference between this and classic type variables. I suppose it is bec=
ause only (type s) guarantee that the variable remains polymorphic, and you=
 use that to ensure that branch-local unifications don&#39;t &quot;escape&q=
uot; to the outer level ? Could you be a bit more explicit on this ?</div>


<div><br></div></div></div></div></blockquote><div>=A0</div><div>I don&#39;=
t know what you mean by &quot;remains polymorphic&quot;. However, (type s) =
and polymorphism are quite distinct concepts. Consider the following exampl=
es:</div>
<div><br></div><div><div># let rec f (type s) (x : s) : s =3D f x;;</div><d=
iv>Error: This expression has type s but an expression was expected of type=
 s</div><div>=A0=A0 =A0 =A0 The type constructor s would escape its scope</=
div></div>
<div><br></div><div><div># fun (type s) ( f : s -&gt; s) ( x : s) -&gt; f x=
;;</div><div>- : (&#39;_a -&gt; &#39;_a) -&gt; &#39;_a -&gt; &#39;_a =3D &l=
t;fun&gt;</div></div><div><br></div><div><br></div><div>The reason I chose =
to use newtypes, ie (type s), is that I needed a type variable which did no=
t change (I believe the Haskell people call it rigid), so I decided to use =
type constructors. Another option, previously implemented, was to use polym=
orphic variables, ie:</div>
<div><br></div><div>let rec foo : &#39;a. &#39;a t -&gt; t =3D=A0</div><div=
>=A0=A0 =A0function=A0</div><div>=A0=A0 =A0 =A0 =A0| IntLit x -&gt; x</div>=
<div><br></div><div><br></div><div>However, this has several disadvantages,=
 the biggest of which is that=A0=A0the variable &#39;a cannot be referenced=
 inside the expression since its scope is the type in which it was introduc=
ed.=A0</div>
<div><br></div><div><br></div><div>=A0</div><blockquote class=3D"gmail_quot=
e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;"=
><div><div><div><div></div><div>It&#39;s also a bit difficult to know what&=
#39;s the big deal about &quot;exhaustiveness checks&quot;. As I understand=
 it, you remark that with GADTs some case cannot happen due to typing reaso=
ns, but the exhaustive check doesn&#39;t know about it. Could you be a bit =
more explicit about what the exhaustiveness checker does :</div>


<div>- is it exactly the same behavior as before, ignoring GADT specificiti=
es ? (ie. you haven&#39;t changed anything)</div><div>- if not, what have y=
ou changed and how can we try to predict its reaction to a given code ?</di=
v>


<div>- what can we do when it doesn&#39;t detect an impossible case ? I sup=
pose we can&#39;t a pattern clause for it, as the type checker would reject=
 it.</div><div><br></div></div></div></div></blockquote><div><br></div>
<div>This problem is not new in O&#39;Caml. For example:</div><div><br></di=
v><div><div># type t =3D { x : &#39;a . &#39;a list } ;;</div><div>type t =
=3D { x : &#39;a. &#39;a list; }</div><div># let _ =3D function { x =3D [] =
} -&gt; 5;;</div>
<div>Warning 8: this pattern-matching is not exhaustive.</div><div>Here is =
an example of a value that is not matched:</div><div>{x=3D_::_}</div></div>=
<div><br></div><div>however, try creating a value of type (&#39;a. &#39;a l=
ist) satisfying the pattern _ :: _</div>
<div><br></div><div>What I&#39;ve done is written a second pass to the exha=
ustiveness checker. The first pass does the same thing as before, but ignor=
es GADTs completely. The second pass exhaustively checks every possible gen=
eralized constructor combination.=A0</div>
<div><br></div><div>For example, in the code</div><div><br></div><div>type =
&#39;a t =3D Foo : int t | Bar : bool t | Baz : float t</div><div><br></div=
><div>let f : type s. s t * s t * s t -&gt; s =3D=A0</div><div>=A0=A0 =A0fu=
nction</div>
<div>=A0=A0 =A0 =A0 =A0 Foo, Foo, Foo</div><div>=A0=A0 =A0 =A0| ....</div><=
div><br></div><div>My code will check all 9 possible patterns and will outp=
ut any which were missed.=A0The pattern returned by my algorithm is a valid=
 pattern.</div><div>
=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex;"><div><div><div><div></div><div>I&#=
39;m not sure I understand the example of the &quot;Variance&quot; section.=
</div>


<div>Why is the cast in that direction ? It seems to me that even if we cou=
ld force t to be covariant, this cast (to a less general type) shouldn&#39;=
t work :</div><div><br></div><div>=A0=A0# type +&#39;a t =3D T of &#39;a;;<=
/div>


<div><div>=A0=A0# let a =3D T (object method a =3D 1 end);;</div><div>=A0=
=A0# (a :&gt; &lt; m : int; n : bool &gt; t);;</div><div>=A0=A0Error: Type =
&lt; a : int &gt; t is not a subtype of &lt; m : int; n : bool &gt; t=A0</d=
iv></div><div><br>
</div></div></div></div></blockquote><div><br></div><div>I apologize, that =
should be:=A0</div><meta charset=3D"utf-8"><div><span class=3D"Apple-style-=
span" style=3D"font-family: Arial, Verdana, sans-serif; font-size: 13px; co=
lor: rgb(68, 68, 68); line-height: 20px; "><br>
</span></div><div><span class=3D"Apple-style-span" style=3D"font-family: Ar=
ial, Verdana, sans-serif; font-size: 13px; color: rgb(68, 68, 68); line-hei=
ght: 20px; ">type -&#39;a t =3D C : &lt; m : int &gt; -&gt; &lt; m : int &g=
t; t</span></div>
<div><br></div><div><span class=3D"Apple-style-span" style=3D"font-family: =
Arial, Verdana, sans-serif; font-size: 13px; color: rgb(68, 68, 68); line-h=
eight: 20px; "></span>or, as a constraint:</div><div><br></div><div>type -&=
#39;a t =3D C of &#39;a constraint &#39;a =3D &lt; m : int &gt;=A0</div>
<div>=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex;"><div><div><div><div>

</div><div>Again, you &quot;Objects and variants&quot; and &quot;Propagatio=
n&quot; subsections are a bit vague. Could you give example of code exhibit=
ing possible problems ?</div><div><br></div></div></div></div></blockquote>
<div><br></div><div>Propagation:</div><div><br></div><div>Currently, this c=
ode doesn&#39;t compile:</div><div><br></div><div><div>=A0=A0 =A0let rec ba=
z : type s . s t -&gt; s =3D=A0</div><div>=A0=A0 =A0 =A0fun (type z) -&gt;<=
/div><div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span>=
function</div>
<div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span> =A0 =
=A0IntLit x -&gt; x : s</div><div><span class=3D"Apple-tab-span" style=3D"w=
hite-space:pre">	</span> =A0| BoolLit y -&gt; y : s</div></div><div><br></d=
iv><div>so you need to add the annotation:</div>
<div><br></div><div><div>=A0=A0 =A0let rec baz : type s . s t -&gt; s =3D=
=A0</div><div>=A0=A0 =A0 =A0fun (type z) -&gt;</div><div><span class=3D"App=
le-tab-span" style=3D"white-space:pre">	</span>((function</div><div><span c=
lass=3D"Apple-tab-span" style=3D"white-space:pre">	</span> =A0 =A0IntLit x =
-&gt; x=A0</div>
<div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span> =A0|=
 BoolLit y -&gt; y) : s t -&gt; s)</div></div><div><br></div><div>objects (=
and polymorphic variants):</div><div><br></div><div>the following will not =
compile:</div>
<div><br></div><div><div>=A0=A0 =A0let rec eval : type s . s t -&gt; s =3D=
=A0</div><div>=A0=A0 =A0 =A0function</div><div><span class=3D"Apple-tab-spa=
n" style=3D"white-space:pre">	</span>| IntLit x -&gt; ignore (object method=
 m : s =3D failwith &quot;foo&quot; end : &lt; m : int; ..&gt;) ; x</div>
</div><div><br></div><div>polymorphic variants in patterns:</div><div><br><=
/div><div>the following will not compile:</div><div><br></div><div><div>=A0=
=A0 =A0let rec eval : type s . [`A] * s t -&gt; unit =3D=A0</div><div>=A0=
=A0 =A0 =A0function</div>
<div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span>| `A,=
 IntLit _ -&gt; ()</div><div><span class=3D"Apple-tab-span" style=3D"white-=
space:pre">	</span>| `A, BoolLit _ -&gt; ()</div></div><div>=A0</div><block=
quote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc=
 solid;padding-left:1ex;">
<div><div><div><div></div><div>Finally, a few syntax trolls, in decreasing =
order of constructivity :</div>

<div><br></div><div>- is it a good idea to reproduce the &quot;implicit qua=
ntification&quot; of ordinary types ? It seems it could be particularly dan=
gerous here.</div><div>=A0=A0for example, changing</div><div>=A0=A0 =A0type=
 _ t =3D Id : &#39;a -&gt; &#39;a t</div>


<div>=A0=A0to=A0</div><div>=A0=A0 =A0type &#39;a t =3D Id : &#39;a -&gt; &#=
39;a t | Foo of &#39;a</div><div>=A0=A0introduce, if I&#39;m not mistaken, =
a semantic-changing variable captures.</div><div>=A0=A0(I thought other dar=
k corners of the type declarations already had this behavior, but right now=
 I can&#39;t remember which ones)</div>
</div></div></div></blockquote><div><br></div><div><meta charset=3D"utf-8">=
type &#39;a t =3D Id : &#39;a -&gt; &#39;a t | Foo of &#39;a</div><div><br>=
</div><div>is the same as</div><div><br></div><div>type &#39;b t =3D Id : &=
#39;a -&gt; &#39;a t | Foo of &#39;b</div>
<div><br></div><div>In other words, the type variables in generalized const=
ructor definitions are distinct from the type parameters.</div><div>=A0</di=
v><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex;">
<div><div><div>

<div><br></div><div>- if I understand it correctly, (type a . a t -&gt; a) =
is yet another syntax for type quantification. Why ? I thought (type a) was=
 used to force generalization, but (&#39;a . ...)-style annotation already =
force polymorphism (or don&#39;t they ?). Is it a semantic difference with =
(&#39;a . &#39;a t -&gt; &#39;a), other than its interaction with gadts ? C=
an we use (type a . a t -&gt; a) in all places where we used (&#39;a . &#39=
;a t -&gt; &#39;a) before ?</div>
</div></div></div></blockquote><div><br></div><div>(type s) does not force =
generalization (see above); this is why this new syntax is needed. You can =
use (type a . a t -&gt; a) anywhere you used (&#39;a. &#39;a t -&gt; &#39;a=
) could before, assuming that you don&#39;t have any types a that you don&#=
39;t want hidden. This syntax extension is purely syntactic sugar.</div>
<div>=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex;"><div><div><div>

<div><br></div><div>- is there a rationale for choosing Coq-style variant s=
yntax instead of just adding a blurb to the existing syntax, such as</div><=
div>=A0=A0 =A0| IntLit of int : int t</div><div>=A0=A0or</div><div>=A0=A0 =
=A0| IntList of int return int t</div>


<div>=A0=A0?</div><div><br></div></div></div></div></blockquote><div><br></=
div><div>The only rationale is that I want to make it clear that the type v=
ariables found inside generalized constructor definitions are distinct from=
 the type parameters. In your second example, return is not a keyword in O&=
#39;Caml. I could very well have chosen your first example. If there is a c=
onsensus on some alternate syntax, I have no qualms about changing it.</div=
>
<div>=A0</div><div>Thank you for the feedback. I will add some of these thi=
ngs to my webpage.</div><div><br></div><div>Sincerely,</div><div><br></div>=
<div>Jacques Le Normand</div><div><br></div><blockquote class=3D"gmail_quot=
e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;"=
>
<div><div><div><div></div><div><br></div><div>Thanks.=A0</div></div></div><=
/div></blockquote><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex;"><div><div><div><div><br><=
/div>
<div><div class=3D"gmail_quote">On Mon, Oct 25, 2010 at 10:39 AM, Jacques L=
e Normand=A0<span dir=3D"ltr">&lt;<a href=3D"mailto:rathereasy@gmail.com" t=
arget=3D"_blank">rathereasy@gmail.com</a>&gt;</span>=A0wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin-top:0px;margin-right:0px;=
margin-bottom:0px;margin-left:0.8ex;border-left-width:1px;border-left-color=
:rgb(204, 204, 204);border-left-style:solid;padding-left:1ex"><div><div></d=
iv>
<div class=3D"h5">

Dear Caml list,<div><br></div><div>I am pleased to announce an experimental=
 branch of the O&#39;Caml compiler: O&#39;Caml extended with Generalized Al=
gebraic Datatypes. You can find more information on this webpage:</div>


<div><br></div><div><a href=3D"https://sites.google.com/site/ocamlgadt/" ta=
rget=3D"_blank">https://sites.google.com/site/ocamlgadt/</a></div><div><br>=
</div><div><br></div><div>And you can grab the latest release here:</div><d=
iv>


<br></div><div><span style=3D"font-family:Times;font-size:medium"><pre styl=
e=3D"word-wrap:break-word;white-space:pre-wrap">svn checkout <a href=3D"htt=
ps://yquem.inria.fr/caml/svn/ocaml/branches/gadts" target=3D"_blank">https:=
//yquem.inria.fr/caml/svn/ocaml/branches/gadts</a></pre>


<pre style=3D"word-wrap:break-word;white-space:pre-wrap"><br></pre></span><=
span style=3D"font-family:Times;font-size:medium"><pre style=3D"word-wrap:b=
reak-word;white-space:pre-wrap"><span style=3D"font-family:arial;white-spac=
e:normal;font-size:small"><div>


Any feedback would be very much appreciated.</div><div><br></div><div>Since=
rely,</div><div><br></div><div>Jacques Le Normand</div><div><br></div></spa=
n></pre></span></div><br></div></div>______________________________________=
_________<br>


Caml-list mailing list. Subscription management:<br><a href=3D"http://yquem=
.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=3D"_blank">http://yque=
m.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives:=A0<a href=3D=
"http://caml.inria.fr/" target=3D"_blank">http://caml.inria.fr</a><br>


Beginner&#39;s list:=A0<a href=3D"http://groups.yahoo.com/group/ocaml_begin=
ners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><b=
r>Bug reports:=A0<a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_=
blank">http://caml.inria.fr/bin/caml-bugs</a><br>


<br></blockquote></div></div></div></div></div>
</blockquote></div><br>

--001485f6db5035d17104937e678c--

