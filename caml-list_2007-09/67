Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 15D37BC6B
	for <caml-list@yquem.inria.fr>; Fri,  7 Sep 2007 09:10:16 +0200 (CEST)
Received: from ipmail02.adl2.internode.on.net (ipmail02.adl2.internode.on.net [203.16.214.141])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l877ADY6015968
	for <caml-list@inria.fr>; Fri, 7 Sep 2007 09:10:15 +0200
X-IronPort-AV: E=Sophos;i="4.20,219,1186324200"; 
   d="scan'208";a="183314060"
Received: from ppp121-44-82-249.lns10.syd6.internode.on.net (HELO [192.168.1.201]) ([121.44.82.249])
  by ipmail02.adl2.internode.on.net with ESMTP; 07 Sep 2007 16:38:40 +0930
Subject: type inference errors
From: skaller <skaller@users.sourceforge.net>
To: Caml List <caml-list@inria.fr>
Content-Type: text/plain
Date: Fri, 07 Sep 2007 17:08:38 +1000
Message-Id: <1189148918.20202.3.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 46E0F955.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; inference:01 val:01 unpack:01 val:01 unpack:01 ocaml:01 compiler:01 ocaml:01 sourceforge:01 flx:01 flx:01 int:01 int:01 match:02 match:02 

I just got this:

Values do not match:
  val unpack :
    Flx_mtypes2.sym_state_t ->
    (string * int) list -> Flx_types.tbexpr_t -> Flx_types.tbexpr_t list
is not included in
  val unpack :
    Flx_mtypes2.sym_state_t ->
    Flx_types.bparameter_t list ->
    Flx_types.tbexpr_t -> Flx_types.tbexpr_t list

and it is clear to *me* that:

Values do not match:
    (string * int) 
is not included in
    Flx_types.bparameter_t

I wonder how hard it would be to add some more heuristics to
the Ocaml compiler to detect a case 'like this' (whatever that
actually means)?

Ocaml already does quite a good job of this in some cases.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

