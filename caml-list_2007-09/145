Return-Path: <jakobl@windows.microsoft.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.6 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	HTML_MESSAGE,SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 1CBE1BC6B
	for <caml-list@yquem.inria.fr>; Mon, 17 Sep 2007 22:10:35 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAPh77kaDa3PXn2dsb2JhbACCcIsjAgcEBgcIGA
X-IronPort-AV: E=Sophos;i="4.20,265,1186351200"; 
   d="scan'208,217";a="16331562"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 17 Sep 2007 22:11:35 +0200
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l8HKAwk3031723
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Mon, 17 Sep 2007 22:11:00 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAPh77kaDa3PXn2dsb2JhbACCcIsjAgcEBgcIGA
X-IronPort-AV: E=Sophos;i="4.20,265,1186351200"; 
   d="scan'208,217";a="16331557"
Received: from smtp.microsoft.com ([131.107.115.215])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 17 Sep 2007 22:11:31 +0200
Received: from tk5-exhub-c103.redmond.corp.microsoft.com (157.54.70.186) by
 TK5-EXGWY-E802.partners.extranet.microsoft.com (10.251.56.168) with Microsoft
 SMTP Server (TLS) id 8.1.177.2; Mon, 17 Sep 2007 13:11:30 -0700
Received: from tk5-exmlt-w601.wingroup.windeploy.ntdev.microsoft.com
 (157.54.70.16) by tk5-exhub-c103.redmond.corp.microsoft.com (157.54.70.186)
 with Microsoft SMTP Server id 8.1.177.1; Mon, 17 Sep 2007 13:11:29 -0700
Received: from WIN-MSG-21.wingroup.windeploy.ntdev.microsoft.com
 (157.54.62.26) by TK5-EXMLT-W601.wingroup.windeploy.ntdev.microsoft.com
 (157.54.70.16) with Microsoft SMTP Server id 8.1.122.1; Mon, 17 Sep 2007
 13:11:29 -0700
X-MimeOLE: Produced By Microsoft Exchange V6.5
Content-Class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_001_01C7F966.E6BCE656"
Subject: CamlIDL: Returning a whole array of cows
Date: Mon, 17 Sep 2007 13:11:13 -0700
Message-ID: <43CD2D195487A448934920501C6EDB2305BD2C4D@WIN-MSG-21.wingroup.windeploy.ntdev.microsoft.com>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: CamlIDL: Returning a whole array of cows
Thread-Index: Acf5ZuWi+m+8hSugQum/0jymdenemQ==
From: Jakob Lichtenberg <jakobl@windows.microsoft.com>
To: <caml-list@inria.fr>
X-j-chkmail-Score: MSGID : 46EEDF52.000 on discorde : j-chkmail score : XX : 5/20 0 0.000 -> 2
X-Miltered: at discorde with ID 46EEDF52.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; camlidl:01 stub:01 camlidl:01 malloc:01 pointer:01 stub:01 stubs:01 mlsize:01 struct:01 struct:01 ctxs:01 ctxs:01 malloc:01 sizeof:01 alloc:01 

------_=_NextPart_001_01C7F966.E6BCE656
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

1. Summary: Stub code generated by Camlidl seems to call camlidl_malloc
with an uninitialized size.

=20

=20

2. Details:

=20

I am declaring a function 'void get_cows([out] int* len,
[length_is(*len), size_is(*len), out] cow** cows);' that creates and
returns an array of cows.  (Each cow is just a pointer to a structure.)
The generated stub code seems incorrect:

=20

cow_stubs.c:

value camlidl_cow_get_cows(value _unit)

{

  int *len; /*out*/

  cow **cows; /*out*/

  int _c1;

  mlsize_t _c2;

  value _v3;

  value _vres;

=20

  struct camlidl_ctx_struct _ctxs =3D { CAMLIDL_TRANSIENT, NULL };

  camlidl_ctx _ctx =3D &_ctxs;

  len =3D &_c1;

  cows =3D camlidl_malloc(*len * sizeof(cow *), _ctx);

  get_cows(len, cows);

  _vres =3D camlidl_alloc(*len, 0);

  Begin_root(_vres)

    for (_c2 =3D 0; _c2 < *len; _c2++) {

      _v3 =3D camlidl_c2ml_cow_cow(&*cows[_c2], _ctx);

      modify(&Field(_vres, _c2), _v3);

    }

  End_roots()

  camlidl_free(_ctx);

  return _vres;

}

=20

As you can see camlidl_malloc is called with an uninitialized value.=20

=20

Is this a bug in camlidl, or am I writing my IDL file incorrectly.
Another way to ask:  How do I declared that a function reserves an array

=20

=20

3. Implementation details:

=20

This is my C api I'd like to access from ocaml:

=20

cow.h:

typedef struct _cow {

  char* name;

  int age;

} *cow;

=20

cow get_dummy_cow();

=20

void get_cows_inout(int inputlen, int *outputlen, cow ca[]); // Write
cows to 'ca', however not more than 'inputlen' elements.  Write number
of cows written to '*outputlen'.

=20

void get_cows(int* len, cow **ca); // Malloc array for cows.  Save
number of elements to *len, save address for array in '*ca'.

=20

void print_cow(cow o);

=20

I'd like to access this API from OCaml using CamlIDL.  I use the
following idl file:

=20

cow.idl:

typedef [abstract] void* cow;

=20

[pointer_default(ref)] interface Cow {

=20

cow get_dummy_cow(void);

=20

void get_cows_inout([in] int inputlen, [out] int * outputlen,

                    [in,out,size_is(inputlen),length_is(*outputlen)] cow
d[]);

=20

void get_cows([out] int* len, [length_is(*len), size_is(*len), out]
cow** cows);

=20

void print_cow(cow o);

=20

}

=20

I compile this using:

=20

                camlidl cow.idl

=20

And use it from the following ML program:

=20

mlmain.ml:

let main use_inout =3D

  let cows =3D

    if use_inout then Cow.get_cows_inout(Array.create 3
(Cow.get_dummy_cow()))

    else Cow.get_cows()

  in

  Array.iter Cow.print_cow cows

=20

let _ =3D main true;

=20

This works fine.  However, if I change the call to main to 'main false'
I get a crash. =20

=20

Thanks,

=20

-          Jakob

=20

PS. I know that I am leaking memory - that I can fix with a simple
quote(dealloc, "free(*cows);");


------_=_NextPart_001_01C7F966.E6BCE656
Content-Type: text/html; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" =
xmlns:o=3D"urn:schemas-microsoft-com:office:office" =
xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dus-ascii">
<meta name=3DGenerator content=3D"Microsoft Word 12 (filtered medium)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-priority:34;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.EmailStyle17
	{mso-style-type:personal-compose;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-size:10.0pt;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1765225457;
	mso-list-type:hybrid;
	mso-list-template-ids:1100002876 2138078606 67698691 67698693 67698689 =
67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Calibri","sans-serif";
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1" />
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-US link=3Dblue vlink=3Dpurple>

<div class=3DSection1>

<p class=3DMsoNormal>1. Summary: Stub code generated by Camlidl seems to =
call camlidl_malloc
with an uninitialized size.<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>2. Details:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>I am declaring a function &#8216;void =
get_cows([out] int*
len, [length_is(*len), size_is(*len), out] cow** cows);&#8217; that =
creates and
returns an array of cows.&nbsp; (Each cow is just a pointer to a =
structure.) &nbsp;The
generated stub code seems incorrect:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>cow_stubs.c:<o:p></o:p></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>value camlidl_cow_get_cows(value =
_unit)<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; int *len; =
/*out*/<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; cow **cows; =
/*out*/<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; int _c1;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; mlsize_t _c2;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; value _v3;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; value _vres;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; struct camlidl_ctx_struct _ctxs =3D {
CAMLIDL_TRANSIENT, NULL };<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; camlidl_ctx _ctx =3D =
&amp;_ctxs;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; len =3D =
&amp;_c1;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; cows =3D camlidl_malloc(*len * =
sizeof(cow *),
_ctx);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; get_cows(len, =
cows);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; _vres =3D camlidl_alloc(*len, =
0);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; =
Begin_root(_vres)<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp; for (_c2 =3D 0; _c2 &lt; =
*len;
_c2++) {<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _v3 =3D
camlidl_c2ml_cow_cow(&amp;*cows[_c2], _ctx);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
modify(&amp;Field(_vres, _c2), _v3);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp; }<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; End_roots()<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; =
camlidl_free(_ctx);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;return =
_vres;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>As you can see camlidl_malloc is called with an =
uninitialized
value. <o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>Is this a bug in camlidl, or am I writing my IDL =
file
incorrectly.&nbsp; Another way to ask:&nbsp; How do I declared that a =
function
reserves an array<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>3. Implementation details:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>This is my C api I&#8217;d like to access from =
ocaml:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'font-size:8.0pt;font-family:"Courier =
New"'>cow.h:<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>typedef struct _cow {<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; char* name;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; int age;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>} *cow;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>cow get_dummy_cow();<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void get_cows_inout(int inputlen, int =
*outputlen,
cow ca[]); // Write cows to 'ca', however not more than 'inputlen'
elements.&nbsp; Write number of cows written to =
'*outputlen'.<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void get_cows(int* len, cow **ca); // Malloc =
array
for cows.&nbsp; Save number of elements to *len, save address for array =
in
'*ca'.<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void print_cow(cow o);<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>I&#8217;d like to access this API from OCaml using
CamlIDL.&nbsp; I use the following idl file:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'font-size:8.0pt;font-family:"Courier =
New"'>cow.idl:<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>typedef [abstract] void* =
cow;<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>[pointer_default(ref)] interface Cow =
{<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>cow =
get_dummy_cow(void);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void get_cows_inout([in] int inputlen, [out] =
int *
outputlen,<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier =
New"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[in,out,size_is(inputlen),length_is(*outputlen)] cow =
d[]);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void get_cows([out] int* len, =
[length_is(*len),
size_is(*len), out] cow** cows);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>void print_cow(cow o);<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>I compile this using:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p =
class=3DMsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style=3D'font-size:8.0pt;font-family:"Courier New"'>camlidl =
cow.idl<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>And use it from the following ML =
program:<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'font-size:8.0pt;font-family:"Courier =
New"'>mlmain.ml:<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>let main use_inout =3D<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; let cows =3D<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp; if use_inout then
Cow.get_cows_inout(Array.create 3 =
(Cow.get_dummy_cow()))<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp;&nbsp;&nbsp; else =
Cow.get_cows()<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; in<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>&nbsp; Array.iter Cow.print_cow =
cows<o:p></o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal style=3D'margin-left:.5in'><span =
style=3D'font-size:8.0pt;
font-family:"Courier New"'>let _ =3D main true;<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>This works fine.&nbsp; However, if I change the =
call to main
to &#8216;<span style=3D'font-family:"Courier New"'>main =
false</span>&#8217;&nbsp;
I get a crash.&nbsp; <o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>Thanks,<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoListParagraph style=3D'text-indent:-.25in;mso-list:l0 =
level1 lfo1'><![if !supportLists]><span
style=3D'mso-list:Ignore'>-<span style=3D'font:7.0pt "Times New =
Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Jakob<o:p></o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>PS. I know that I am leaking memory &#8211; that I =
can fix
with a simple quote(dealloc, &quot;free(*cows);&quot;);<o:p></o:p></p>

</div>

</body>

</html>

------_=_NextPart_001_01C7F966.E6BCE656--

