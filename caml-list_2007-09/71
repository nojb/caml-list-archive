Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 4DDE3BC6B
	for <caml-list@yquem.inria.fr>; Sat,  8 Sep 2007 02:04:25 +0200 (CEST)
Received: from rabbit.math.nagoya-u.ac.jp (rabbit.math.nagoya-u.ac.jp [133.6.130.5])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l8804NHe028726
	for <caml-list@inria.fr>; Sat, 8 Sep 2007 02:04:24 +0200
Received: from localhost (rabbit-172 [172.16.254.254])
	by rabbit.math.nagoya-u.ac.jp (8.12.11/3.7W) with ESMTP id l8804JET023907;
	Sat, 8 Sep 2007 09:04:19 +0900 (JST)
Date: Sat, 08 Sep 2007 09:04:19 +0900 (JST)
Message-Id: <20070908.090419.2004149852.garrigue@math.nagoya-u.ac.jp>
To: colanderman@gmail.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Oddness concerning private variants in 3.10.0
From: Jacques GARRIGUE <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <875c7e070709071404q641d0ec0rbacbb07763a5a4bb@mail.gmail.com>
References: <875c7e070709071404q641d0ec0rbacbb07763a5a4bb@mail.gmail.com>
X-Mailer: Mew version 4.2 on Emacs 21.4 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 46E1E707.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; variants:01 mli:01 bug:01 sig:01 struct:01 caml-list:01 compiling:02 compiling:02 inferred:02 inferred:02 match:02 match:02 blank:97 garrigue:03 garrigue:03 

From: "Chris King" <colanderman@gmail.com>
> I just took the leap to 3.10 and encountered some strangeness
> compiling my project with it:
> 
> The implementation input_test.ml
> does not match the interface (inferred signature):
> Type declarations do not match:
>   type button = FrGui.button
> is not included in
>   type button = FrGui.button#row
> 
> First, I don't understand how a module doesn't match its inferred
> signature.  Strangely, creating a blank input_test.mli file gets
> around this error.

This looks like a bug report, but I clearly miss information to solve it.

> Compiling this:
> 
> module A: sig
>   type t = [ `A | `B ]
> end = struct
>   type t = private [> `A ]
> end
> 
> results in the error:

It certainly should: here the signature is written first!
If you write it the other way round, it is accepted without problem.

Concerning your first problem, could you submit a bu report, attaching
relevant information?

Jacques Garrigue

