Return-Path: <daniel.buenzli@epfl.ch>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 30EDFBC69
	for <caml-list@yquem.inria.fr>; Thu, 13 Sep 2007 21:19:58 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAMYp6UbAXQInhmdsb2JhbACOFAIJBAYHBhg
X-IronPort-AV: E=Sophos;i="4.20,250,1186351200"; 
   d="scan'208";a="2678317"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 13 Sep 2007 21:20:24 +0200
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l8DJK7fI024437
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Thu, 13 Sep 2007 21:20:10 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAMYp6UbDuhJCnmdsb2JhbACOFAICBwIIDxg
X-IronPort-AV: E=Sophos;i="4.20,250,1186351200"; 
   d="scan'208";a="732018"
Received: from mail21.bluewin.ch ([195.186.18.66])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 13 Sep 2007 21:20:18 +0200
Received: from [10.0.1.2] (85.2.29.73) by mail21.bluewin.ch (Bluewin 7.3.121)
        id 46DFBA2B001D3AE9 for caml-list@inria.fr; Thu, 13 Sep 2007 19:20:17 +0000
Mime-Version: 1.0 (Apple Message framework v752.2)
Content-Transfer-Encoding: 7bit
Message-Id: <8B004AF3-7570-4126-9E45-70BEAF5E8175@epfl.ch>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
To: Caml List <caml-list@inria.fr>
From: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
Subject: Paper on asynchronous exceptions
Date: Thu, 13 Sep 2007 21:20:20 +0200
X-Mailer: Apple Mail (2.752.2)
X-Miltered: at concorde with ID 46E98D67.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bunzli:01 buenzli:01 semantics:01 haskell:01 combinators:01 unblock:01 reppy:01 haskell:01 booktitle:01 pldi:01 sigplan:01 exceptions:01 exceptions:01 epfl:02 proceedings:02 

Hello,

For the sake of completeness. After the discussion on thread  
cancellation a friend of mine pointed me to this [1] paper. It  
describes the design, semantics and implementation of a raise_in  
operation in Haskell.

The paper does a good job in describing the problems of this  
operation. It also shows how to solve them by introducing two  
combinators to unconditionally block or unblock asynchronous  
exceptions in a given scope.

Best,

Daniel

[1]
@inproceedings{378858,
  author = {Simon Marlow and Simon Peyton Jones and Andrew Moran and  
John Reppy},
  title = {Asynchronous exceptions in Haskell},
  booktitle = {PLDI '01: Proceedings of the ACM SIGPLAN 2001  
conference on Programming language design and implementation},
  year = {2001},
  isbn = {1-58113-414-2},
  pages = {274--285},
  location = {Snowbird, Utah, United States},
  doi = {http://doi.acm.org/10.1145/378795.378858},
  publisher = {ACM Press},
  address = {New York, NY, USA},
  }

