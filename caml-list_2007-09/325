Return-Path: <gordon.j.miller@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.6 required=5.0 tests=AWL,HTML_10_20,HTML_MESSAGE,
	SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id A7F23BC6C
	for <caml-list@yquem.inria.fr>; Wed, 26 Sep 2007 13:45:37 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAALLh+UbAXQInemdsb2JhbACCOTeLPQEBCQo
X-IronPort-AV: E=Sophos;i="4.20,301,1186351200"; 
   d="scan'208";a="1505742"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 26 Sep 2007 13:45:34 +0200
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l8QBja9M029927
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Wed, 26 Sep 2007 13:45:37 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAALLh+UbRVYT4mGdsb2JhbACCOTeLPQEBAQEHBAQp
X-IronPort-AV: E=Sophos;i="4.20,301,1186351200"; 
   d="scan'208";a="3275667"
Received: from an-out-0708.google.com ([209.85.132.248])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 26 Sep 2007 13:45:36 +0200
Received: by an-out-0708.google.com with SMTP id c24so334966ana
        for <caml-list@inria.fr>; Wed, 26 Sep 2007 04:45:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        bh=mkRu2oYtjcOr00cvjk32cxQWEkzlrr3JIMHjhw8LsAk=;
        b=H1ayJPC+hBCkLX12zP4RnrFRB1iNiR22AR3AbRWjzS1UpS2F5y1xPmIOPnh2URxpklm7jTGtugu/ufj2PjocO0M4v8zKrVsO+oUs4bUQNT3IAMyyTjDqGEYIMh3u+WHCsFKi8Rfv3jb0TIQVuJjMGjf+KRWaaYT7dj5wQ8IdzcI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=lkFVoC16dUulBCFZKmPDNLJNfozd8x8E8w4C511NmYUjAvGr0/Ehn1SU+dkL35I+JMMP4BgmMYTe2LEzAe5o9AnWHIXXMqkOM1mxHdp1AD26Ernk7s5SEhJkS47e94laWFghg2jeArAuz3KAVnwwrGuPtqWnhDCRhHoEZv6AP5g=
Received: by 10.142.233.9 with SMTP id f9mr184672wfh.1190807134011;
        Wed, 26 Sep 2007 04:45:34 -0700 (PDT)
Received: by 10.142.104.20 with HTTP; Wed, 26 Sep 2007 04:45:33 -0700 (PDT)
Message-ID: <beed19130709260445o496ea3e3q265535645a802444@mail.gmail.com>
Date: Wed, 26 Sep 2007 07:45:33 -0400
From: "Jim Miller" <gordon.j.miller@gmail.com>
To: "Sylvain Le Gall" <sylvain@le-gall.net>
Subject: Re: [Caml-list] Re: Cherry-picking modules (was Re: [ANN] OCaml Reins 0.1 - Persistent Data Structure Library)
Cc: caml-list@inria.fr
In-Reply-To: <slrnffkcu3.3nv.sylvain@gallu.homelinux.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_6613_111225.1190807134005"
References: <46F95938.7030107@cs.umd.edu>
	 <17487E59-04F2-4509-87B5-24377B051E9E@epfl.ch>
	 <46F961E5.5060302@cs.umd.edu>
	 <55A4E82E-3D05-4F79-A8A6-A87905EB4FC8@epfl.ch>
	 <slrnffj6mn.3nv.sylvain@gallu.homelinux.org>
	 <B2FE2D0B-623F-4F26-B587-4CD55E5F611D@epfl.ch>
	 <slrnffkcu3.3nv.sylvain@gallu.homelinux.org>
X-Miltered: at concorde with ID 46FA4660.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 distro:01 ocaml:01 statically:01 libc:01 sockets:01 distro:01 statically:01 libc:01 sockets:01 fascinating:98 fascinating:98 binaries:01 binaries:01 caml-list:01 

------=_Part_6613_111225.1190807134005
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

>
> It is funny, because when you see other big languages -- which are
> working very well -- like Perl, they all try to avoid embedding libraries!
>
> The only real needs is to have something that automatically
> download/build/install dependency!
>
> AND WE HAVE IT: godi!
>
> Or if you want things more distro based: debian...


This is a fascinating discussion because it hits at one of the core problems
I have with OCaml.  Almost all of my work is done on systems that are not
connected to any sort of network and all software that I install on the
systems has to be approved.  I have no choice but to burn CD/DVD's with
modules to install.

I personally also do the static linking against any library that doesn't
come standard with the operating system.  Typically the ONLY libraries that
I don't statically link are libc (I don't write UI applications so X isn't
an issue).

In the world I work in, we are actually moving away from system shared
libraries because we cannot count on each of the different installations
doing their system maintenance properly.  This has led us into DLL hell on
many of the systems we install to.  Because we don't have any administrator
access to these machines, and NEVER will, we simply distribute EVERYTHING we
need, sometimes source, sometimes compiled binaries for the platforms we
support.

(Java applications tend to do this)

Godi would be very nice if I could figure out how to create a custom Godi
repository that I could burn onto a CD and then point my Godi installer to
it.  I seem to recall going through and looking through Godi a year or so
ago to figure this out but ran out of time and patience.  Godi would have to
be able to assemble the repository for me based on a top level set of
requirements (run down the dependency chain) or the situation hasn't
improved at all compared to distributing the modules ourselves.

At some level I think that what this really points to is a lack of a very
large standard library.  One of the arguments often made by programmers that
I'm trying to introduce to OCaml is that the standard library sucks compared
to what they're used to.  They've gotten used to Java and Ruby and being
able to quickly and easily do sophisticated string operations (the Standard
string doesn't have many of the functions we commonly use so we end up using
Extlib),  network operations, (sockets are a start, but just that), and XML
processing.  While there are many packages out there to do these things
we've all gotten used to languages that "come with it."

Take it or leave it, just my $.02 from trying to introduce OCaml into an
environment where we write network applications (including but not limited
to web services) that have to run on very tightly controlled systems.  (I
know I'm in the huge minority of programmers)

------=_Part_6613_111225.1190807134005
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<br><div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>It is funny, because when you see other big languages -- which are<br>working very well -- like Perl, they all try to avoid embedding libraries!
<br><br>The only real needs is to have something that automatically<br>download/build/install dependency!<br><br>AND WE HAVE IT: godi!<br><br>Or if you want things more distro based: debian...</blockquote><div><br>This is a fascinating discussion because it hits at one of the core problems I have with OCaml.&nbsp; Almost all of my work is done on systems that are not connected to any sort of network and all software that I install on the systems has to be approved.&nbsp; I have no choice but to burn CD/DVD&#39;s with modules to install.
<br><br>I personally also do the static linking against any library that doesn&#39;t come standard with the operating system.&nbsp; Typically the ONLY libraries that I don&#39;t statically link are libc (I don&#39;t write UI applications so X isn&#39;t an issue).
<br></div><br>In the world I work in, we are actually moving away from system shared libraries because we cannot count on each of the different installations doing their system maintenance properly.&nbsp; This has led us into DLL hell on many of the systems we install to.&nbsp; Because we don&#39;t have any administrator access to these machines, and NEVER will, we simply distribute EVERYTHING we need, sometimes source, sometimes compiled binaries for the platforms we support.
<br><br>(Java applications tend to do this)<br><br>Godi would be very nice if I could figure out how to create a custom Godi repository that I could burn onto a CD and then point my Godi installer to it.&nbsp; I seem to recall going through and looking through Godi a year or so ago to figure this out but ran out of time and patience.&nbsp; Godi would have to be able to assemble the repository for me based on a top level set of requirements (run down the dependency chain) or the situation hasn&#39;t improved at all compared to distributing the modules ourselves.
<br><br>At some level I think that what this really points to is a lack of a very large standard library.&nbsp; One of the arguments often made by programmers that I&#39;m trying to introduce to OCaml is that the standard library sucks compared to what they&#39;re used to.&nbsp; They&#39;ve gotten used to Java and Ruby and being able to quickly and easily do sophisticated string operations (the Standard string doesn&#39;t have many of the functions we commonly use so we end up using Extlib),&nbsp; network operations, (sockets are a start, but just that), and XML processing.&nbsp; While there are many packages out there to do these things we&#39;ve all gotten used to languages that &quot;come with it.&quot;
<br><br>Take it or leave it, just my $.02 from trying to introduce OCaml into an environment where we write network applications (including but not limited to web services) that have to run on very tightly controlled systems.&nbsp; (I know I&#39;m in the huge minority of programmers)
<br><br><br><br><br></div>

------=_Part_6613_111225.1190807134005--

