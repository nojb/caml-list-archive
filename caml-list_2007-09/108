Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id CDCADBC69
	for <caml-list@yquem.inria.fr>; Fri, 14 Sep 2007 13:56:20 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAIIT6kbAXQInmWdsb2JhbACOEQEBAgcEBgcIFg
X-IronPort-AV: E=Sophos;i="4.20,255,1186351200"; 
   d="scan'208";a="16197600"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 14 Sep 2007 13:56:52 +0200
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l8EBts41014934
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Fri, 14 Sep 2007 13:56:35 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAACYU6kbAbSoIh2dsb2JhbACOEQEBCQon
X-IronPort-AV: E=Sophos;i="4.20,255,1186351200"; 
   d="scan'208";a="2704541"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 14 Sep 2007 13:56:52 +0200
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from einhorn.in-berlin.de (localhost [127.0.0.1])
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id l8EBunoH023029
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@inria.fr>; Fri, 14 Sep 2007 13:56:50 +0200
Received: (from www-data@localhost)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Submit) id l8EBum2p023018
	for caml-list@inria.fr; Fri, 14 Sep 2007 13:56:48 +0200
X-Authentication-Warning: einhorn.in-berlin.de: www-data set sender to oliver@first.in-berlin.de using -f
Received: from dslb-088-073-114-000.pools.arcor-ip.net (dslb-088-073-114-000.pools.arcor-ip.net [88.73.114.0]) 
	by webmail.in-berlin.de (IMP) with HTTP 
	for <first@localhost>; Fri, 14 Sep 2007 13:56:48 +0200
Message-ID: <1189771008.46ea77001eb37@webmail.in-berlin.de>
Date: Fri, 14 Sep 2007 13:56:48 +0200
From: Oliver Bandel <oliver@first.in-berlin.de>
To: Caml List <caml-list@inria.fr>
Subject: Re: [Caml-list] Closing all open file descriptors
References: <Pine.LNX.4.63.0709131754020.24521@tenhost.net>
In-Reply-To: <Pine.LNX.4.63.0709131754020.24521@tenhost.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Miltered: at concorde with ID 46EA76CA.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bandel:01 in-berlin:01 descriptors:01 descriptors:01 stdin:01 stdout:01 stderr:01 allocating:01 unix's:01 unix:01 unix:01 oliver:01 oliver:01 integer:01 caml-list:01 

Zitat von Dave Benjamin <dave@ramenlabs.com>:

> I'm writing a daemon and I would like to be able to close all open file
> descriptors. As far as I can tell, there is no way to determine the
> maximum number of file descriptors available, and neither is there a way
> to get a file descriptor from an integer. The best I've come up with is
> the following:
>
>    for fd = 0 to 1024 do
>      try Unix.close (Obj.magic fd : Unix.file_descr)
>      with Unix.Unix_error _ -> ()
>    done;
>
> Is there a better way?
[...]

Yes: Do not start your daemon from a big program,
start it from scratch.
Normally only stdin, stdout and stderr are opened.
So, when your daemon starts as a separate program,
you only need to close these descriptors.

If you want to know, how many open files are allowed,
on Unix-systems you can use the MAX_OPEN value in C programs.

As a general rule you could remember: fork as early as possible.
If you have a huge memory usage and the usage of the different processes
is varied in a wide range, forking before allocating mem means to
save ressources.
If you first allocate huge memory portions and then fork,
you have wasted memory. It normally does not matter
until the moment you change your data, because modern Unix's and Linux
use COW (Copy On Write). But when you then change your data,
a lot of ressources will be needed.

So: fork early, allocate ressources afterwards.

There is no reason to do it diiferently in respect to usage of filedescriptors.

If you write a daemon, make it a separate program,
not making a fork from a huge application.

So, why should it be necessary then, to close file descriptors?
Why should they be opened, if you start a daemon as a stand-alone?

(Why should there be a need for a daemon to be forked off from
a big app, so that you could assume that many descriptors are open?)

Ciao,
   Oliver

