Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id BBD0FBC69
	for <caml-list@yquem.inria.fr>; Tue, 25 Sep 2007 23:01:30 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAHQT+UbLENaMnmdsb2JhbACOLAEBAQEHBAYPGA
X-IronPort-AV: E=Sophos;i="4.20,297,1186351200"; 
   d="scan'208";a="3246894"
Received: from ipmail01.adl2.internode.on.net ([203.16.214.140])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 25 Sep 2007 23:01:29 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAJIR+UZ5LHvc/2dsb2JhbAAM
X-IronPort-AV: E=Sophos;i="4.20,297,1186324200"; 
   d="scan'208";a="197532064"
Received: from ppp121-44-123-220.lns10.syd6.internode.on.net (HELO [192.168.1.201]) ([121.44.123.220])
  by ipmail01.adl2.internode.on.net with ESMTP; 26 Sep 2007 06:31:15 +0930
Subject: Re: [Caml-list] Re: Ocaml for Scientific computing
From: skaller <skaller@users.sourceforge.net>
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <200709252138.49050.jon@ffconsultancy.com>
References: <2a1a1a0c0709251027v6dc42b38g1138b09f5627dbca@mail.gmail.com>
	 <1190745994.12747.41.camel@rosella.wigram>
	 <200709252138.49050.jon@ffconsultancy.com>
Content-Type: text/plain
Date: Wed, 26 Sep 2007 07:01:14 +1000
Message-Id: <1190754074.6800.8.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocaml:01 0100,:01 conceptually:01 ocaml:01 sourceforge:01 wrote:01 caml-list:01 unsafe:01 bounds:02 bounds:02 guess:04 computing:05 tue:06 john:08 i'm:09 

On Tue, 2007-09-25 at 21:38 +0100, Jon Harrop wrote:

> I'm not sure that it is conceptually more difficult to do similar things for 
> OCaml but my vote goes to hoisting bounds checks. I don't like having to 
> write unsafe code by hand in OCaml and F# does a great job of improving 
> performance by hoisting bounds checks.

I guess that this is easier. How much speed is gained eliding
bounds checks?

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

