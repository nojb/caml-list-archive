Return-Path: <yitzhakm@cs.princeton.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id D5923BC57
	for <caml-list@yquem.inria.fr>; Mon, 13 Dec 2010 15:58:47 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApkEAIPDBU2AcIgmgWdsb2JhbACkAxUBARYiKbk3iGaFSgSEZIkpggY
X-IronPort-AV: E=Sophos;i="4.59,336,1288566000"; 
   d="scan'208";a="70405058"
Received: from bluebox.cs.princeton.edu ([128.112.136.38])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 13 Dec 2010 15:58:46 +0100
Received: from [192.168.1.100] (ool-4355b7a4.dyn.optonline.net [67.85.183.164])
	(authenticated bits=0)
	by bluebox.CS.Princeton.EDU (8.13.8/8.13.8) with ESMTP id oBDEwRwd003404
	(version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NOT);
	Mon, 13 Dec 2010 09:58:30 -0500
Subject: Re: [Caml-list] [ANN] Js_of_ocaml version 1.0
Mime-Version: 1.0 (Apple Message framework v1082)
Content-Type: text/plain; charset=us-ascii
From: Yitzhak Mandelbaum <yitzhakm@CS.Princeton.EDU>
In-Reply-To: <20101213130645.GA27585@pps.jussieu.fr>
Date: Mon, 13 Dec 2010 09:58:27 -0500
Cc: caml-list@yquem.inria.fr
Content-Transfer-Encoding: quoted-printable
Message-Id: <0C2C6562-3389-4B61-B0E2-69EF3EAB1418@cs.princeton.edu>
References: <20101213130645.GA27585@pps.jussieu.fr>
To: Jerome Vouillon <Jerome.Vouillon@pps.jussieu.fr>
X-Mailer: Apple Mail (2.1082)
X-Proofpoint-Virus-Version: vendor=nai engine=5400 definitions=6195 signatures=654982
X-Proofpoint-Spam-Reason: safe
X-Spam: no; 0.00; ocaml:01 yitzhak:01 mandelbaum:01 vouillon:01 recursion:01 ocaml:01 yitzhak:01 mandelbaum:01 1.0:98 wrote:01 jerome:01 jerome:01 caml-list:01 tail:01 snip:02 

Jerome,

Thank you, this sounds fantastic! =20

One small question: could you expand on your last comment:

On Dec 13, 2010, at 8:06 AM, Jerome Vouillon wrote:

> <snip>
>=20
> Ocamljs optimizes tail recursion, but this comes at a large
> performance cost.

Do you mean all tail-calls come a large cost, or only those outside of =
plain tail-recursion?  Either way, could you give us some more intuition =
as to why this happens, and why js_of_ocaml doesn't suffer from the same =
problem (assuming it applies to tail-recursion)?

Thanks,
Yitzhak

-----------------------------
Yitzhak Mandelbaum



