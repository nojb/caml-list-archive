Return-Path: <julien.signoles@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 17877BC57
	for <caml-list@yquem.inria.fr>; Mon, 13 Dec 2010 16:51:05 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqMAADvPBU3RVditkGdsb2JhbACjfAgVAQEBAQkJDAcRBCWoLolwghiEZy6IVgEBAwWFRQSKeYYG
X-IronPort-AV: E=Sophos;i="4.59,336,1288566000"; 
   d="scan'208";a="82530741"
Received: from mail-qy0-f173.google.com ([209.85.216.173])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-MD5; 13 Dec 2010 16:51:04 +0100
Received: by qyk1 with SMTP id 1so3403382qyk.18
        for <caml-list@yquem.inria.fr>; Mon, 13 Dec 2010 07:51:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:cc:content-type;
        bh=zDwwrIR/IxY8wTTZxgun0YM+oD8xuBrwdpOJpWEwFn8=;
        b=sctm7xgvU7smJ+PIhPVocoybZ878cDlk0FuTSmYl6KN4p8qHEkmkdLooA9nLZAwcgb
         mJ9EKyjK2ui3ZQyltPfSKgVDYVeldNkSiA6sYC2xqDfHQRoRo7krPOjTGG0+IN1+RrJ5
         PepKbq6D2BSWPfx1rphyX3WS1D4FCt3PvT9Xw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=oAAFf/dEg7Z8ZMAR/NPpq/emhChS0BAa8w1nHvACu6Fg1y2fCp5Zr23Svdu28RteHB
         /t9tZdvx/Qbg+hM23D0Rez0PEeOtPCh6btoK2poNiXW6nnATexFaRFRyab2z+NIX8Nn0
         DXTzDFWK9jUXDycaJBjvJLDTxb5DD7ostv1p4=
MIME-Version: 1.0
Received: by 10.229.220.134 with SMTP id hy6mr3872430qcb.179.1292255462832;
 Mon, 13 Dec 2010 07:51:02 -0800 (PST)
Received: by 10.229.34.75 with HTTP; Mon, 13 Dec 2010 07:51:02 -0800 (PST)
In-Reply-To: <AANLkTi=eAYURHwSSt9=PadmLym7dWmnAGxsu_K2rR=5f@mail.gmail.com>
References: <A828BC32-5BB7-4D45-9A15-793FEBBC07EA@ropas.snu.ac.kr>
	<4D0631FD.6000106@elehack.net>
	<AANLkTi=eAYURHwSSt9=PadmLym7dWmnAGxsu_K2rR=5f@mail.gmail.com>
Date: Mon, 13 Dec 2010 16:51:02 +0100
Message-ID: <AANLkTingAacccxQtWTtjS=KRLNxXZhFTEFEXi5FDAVTu@mail.gmail.com>
Subject: Re: [Caml-list] performance of ocamlgraph and ocaml batteries
From: Julien Signoles <julien.signoles@gmail.com>
To: Eray Ozkural <examachine@gmail.com>
Cc: Michael Ekstrand <michael@elehack.net>, caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=00163628430ad23e3d04974cab3e
X-Spam: no; 0.00; ocaml:01 signoles:01 signoles:01 eray:01 ozkural:01 hash:01 hash:01 arrays:01 bitvectors:01 functor:01 eray:01 ozkural:01 arrays:01 bitvectors:01 functor:01 

--00163628430ad23e3d04974cab3e
Content-Type: text/plain; charset=ISO-8859-1

Hello,

2010/12/13 Eray Ozkural <examachine@gmail.com>

> Oww, is the imperative implementation using hash tables or maps then?
>

Imperative implementations use hash tables (except the ones called Matrix
which use arrays of bitvectors) while persistent implementations use maps.


> Shouldn't be too hard to plug your own in ocamlgraph if needed.
>

OcamlGraph is designed for such an use : each algorithm provided by the
library is a functor parameterized by the required graph operations
(iterators over vertices and edges, ...). Thus you can provide your own in
an easy way.

Hope this helps,
Julien Signoles

--00163628430ad23e3d04974cab3e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hello,<br><br><div class=3D"gmail_quote">2010/12/13 Eray Ozkural <span dir=
=3D"ltr">&lt;<a href=3D"mailto:examachine@gmail.com">examachine@gmail.com</=
a>&gt;</span><br><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt=
 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
<div>Oww, is the imperative implementation using hash tables or maps then? =
</div></blockquote><div><br>Imperative implementations use hash tables (exc=
ept the ones called Matrix which use arrays of bitvectors) while persistent=
 implementations use maps.<br>
=A0</div><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8=
ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;"><div>Sho=
uldn&#39;t be too hard to plug your own in ocamlgraph if needed.</div></blo=
ckquote>
<div><br>OcamlGraph is designed for such an use : each algorithm provided b=
y the library is a functor parameterized by the required graph operations (=
iterators over vertices and edges, ...). Thus you can provide your own in a=
n easy way.<br>
<br>Hope this helps,<br>Julien Signoles<br></div></div><br>

--00163628430ad23e3d04974cab3e--

