Return-Path: <rich@annexia.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 68153BBAF
	for <caml-list@yquem.inria.fr>; Mon,  6 Dec 2010 12:08:27 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvsEAGZS/ExQRFuw/2dsb2JhbACjMXG8foIUgzUE
X-IronPort-AV: E=Sophos;i="4.59,305,1288566000"; 
   d="scan'208";a="83177754"
Received: from furbychan.cocan.org ([80.68.91.176])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES256-SHA; 06 Dec 2010 12:08:27 +0100
Received: from rich by furbychan.cocan.org with local (Exim 4.63)
	(envelope-from <rich@annexia.org>)
	id 1PPYvi-0002iz-44; Mon, 06 Dec 2010 11:08:26 +0000
Date: Mon, 6 Dec 2010 11:08:26 +0000
To: Benedikt Meurer <benedikt.meurer@googlemail.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: ocamlopt LLVM support (Was: [Caml-list] OCamlJIT2 vs. OCamlJIT)
Message-ID: <20101206110826.GA10407@annexia.org>
References: <AANLkTi=Wu1SXVgQ+X0NECNx3oUsD=xEy-9Zq6T3ncJ+W@mail.gmail.com> <B8C055A1-2A67-4C7E-BF67-4A639619C4EB@wanadoo.fr> <0a8b01cb90da$da5e6240$8f1b26c0$@com> <5E2DA3F1-7998-4F62-B617-7B6451D1001D@googlemail.com> <0b3b01cb9161$a81c8e10$f855aa30$@com> <B965CE04-4059-421F-A8CD-EB178BF32D40@googlemail.com> <0b9301cb91a3$8f42fd60$adc8f820$@com> <AB3E2F68-0E5B-4B4F-A4F8-3C67BD6F598E@googlemail.com> <0cae01cb9325$a8ddc3d0$fa994b70$@com> <CC528935-50A4-4A94-849B-9DAD160D46A3@googlemail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CC528935-50A4-4A94-849B-9DAD160D46A3@googlemail.com>
User-Agent: Mutt/1.5.13 (2006-08-11)
From: Richard Jones <rich@annexia.org>
X-Spam: no; 0.00; ocamlopt:01 0100,:01 compiler:01 bytecode:01 ocaml:01 bindings:01 camlidl:01 pointers:01 wrote:01 rewrite:01 caml-list:01 binding:02 native:03 handles:03 library:03 

On Sun, Dec 05, 2010 at 05:37:32PM +0100, Benedikt Meurer wrote:
> 1. You will have to rewrite not only the compiler, the standard
> library and the bytecode interpreter (already a massive amount of
> work), but you also loose compatibility with almost every existing
> OCaml library binding, since the native function interface will be
> different. That's a hell of a lot of work for many people.

It might kick-start efforts to automatically generate bindings, at
least to C code, which wouldn't be a bad thing.  camlidl is clumsy and
doesn't handle a very important case (pointers to handles) so it's not
really useful for this.

I do agree with the rest of your points though, and it's good to have
intelligent discussion of the real issues at long last.

Rich.

-- 
Richard Jones
Red Hat

