Return-Path: <philippe.veber@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 4AB08BC58
	for <caml-list@yquem.inria.fr>; Wed,  1 Dec 2010 16:17:39 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApQAAPf19UzRVda0kGdsb2JhbACjCwgVAQEBAQkJDAcRBB6qHIt8AQWOCgEEhUeKag
X-IronPort-AV: E=Sophos;i="4.59,283,1288566000"; 
   d="scan'208";a="68937903"
Received: from mail-iw0-f180.google.com ([209.85.214.180])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 01 Dec 2010 16:17:38 +0100
Received: by iwn37 with SMTP id 37so8392001iwn.39
        for <caml-list@yquem.inria.fr>; Wed, 01 Dec 2010 07:17:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:mime-version:received:in-reply-to
         :references:from:date:message-id:subject:to:cc:content-type;
        bh=Vc1bXlV1CpOePG2QyKEnUAvz9bgZ3rNiGVFgeBIOGx4=;
        b=lWgwAWSSXj0AkDWOLRmpHj8fgU9L9FZKA10jpHNQc0Yg8f8mECI7spJuubTMcNeiHT
         lusztR2slnax3Vs9Y0y8ysMyFIFUsM/R9LI16RJ8B6+OlBd5dpQmXCtqQpBoy6WvLgyE
         Nl4MACXDxh3VtYceQKG+RGv1/pfb6FVnkC4KM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=NdxdCC5q9IB3IOpJyo6VjXFbtfiplDPg8Dp+Bm4RbtR+HmVUu2D2hrXf/s+xMtDOK+
         daQA9j4jA8yeDOwpWdfgFOumys4HKSZoKmOITofwVtIsGnDZZWejIOgODUdnRQWyL/13
         5uXwQrBZ7Pib9/yAhjs4fZzJAlbzJTjuVBweE=
Received: by 10.231.169.70 with SMTP id x6mr9100289iby.2.1291216656140; Wed,
 01 Dec 2010 07:17:36 -0800 (PST)
MIME-Version: 1.0
Received: by 10.231.176.134 with HTTP; Wed, 1 Dec 2010 07:17:15 -0800 (PST)
In-Reply-To: <201011301959.04218.toots@rastageeks.org>
References: <AANLkTik4n=XgNhA6SsQXV_ZvQSsPrQFFYjPQaqSNnYKn@mail.gmail.com> <201011301959.04218.toots@rastageeks.org>
From: Philippe Veber <philippe.veber@googlemail.com>
Date: Wed, 1 Dec 2010 16:17:15 +0100
Message-ID: <AANLkTikedG6DHZNQDrgG3uGaWGxwh4zkaSGeS=4R99z5@mail.gmail.com>
Subject: Re: [Caml-list] Tips to find the cause of a seg fault
To: Romain Beauxis <toots@rastageeks.org>
Cc: caml-list@yquem.inria.fr
Content-Type: multipart/alternative; boundary=001636d338971e0ad504965aceac
X-Spam: no; 0.00; ocamlsdl:01 segfault:01 instanciated:01 unrolling:01 bindings:01 segfault:01 gdb:01 ocaml:01 ocaml:01 bindings:01 gdb:01 ocamlsdl:01 instanciated:01 assert:01 caml-list:01 

--001636d338971e0ad504965aceac
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

2010/12/1 Romain Beauxis <toots@rastageeks.org>

> Hi,
>
> Le mardi 30 novembre 2010 17:08:12, Philippe Veber a =E9crit :
> > The seg fault occurs during the call to this function with the button
> event
> > retrieved by ocamlsdl. What's really weird is that if I comment the thi=
rd
> > case of the pattern matching, the seg fault does not occur. This is
> strange
> > since with the "assert false" expression, I make sure this case is
> useless
> > (i don't press the left button). Also, in the various tests I made, I
> > obtained different errors, like segmentation fault in caml_absf_mask or
> > invalid instruction error.
>
> The function that triggers the segfault may be confusing, in particular i=
n
> case of a memory corruption, which I suspect here.
> The pattern matching can cause a crash because it is using a value that i=
s
> already corrupted and because the third case is one that, for some random
> conditions, touches the part in memory that is corrupted.
>
How is this possible if it is never reached (no left click) ?


>
> In this case, I would try to unroll the code and see where the value that
> is
> used in this function was instanciated.
>
What do you mean by "unrolling the code" ?



>
> Main source of corruption when using C bindings most often come from eith=
er
> the Gc or code executed while the global lock has been released.
>
> In the case of a segfault hapenning during a Gc call, this can be really
> unrelated, for instance the instanciation of a new value triggers a Gc
> collection to compact memory, which in turns triggers the recollection of=
 a
> corrupted value, which causes a segfault.
>
> In the case of a segfault hapenning during a C call while the global lock
> has
> been released, you may get more useful informations through gdb, in
> particular
> the trace of the C code used at the time of the segfault. You need have t=
he
> debugging symbols for the dynamic C libraries used as well.
>
> We experienced a couple of segfault with ocaml SDL too but in unrelated
> parts
> (video). I do not mean to criticize upstream's work on ocaml SDL because =
I
> know for a fact that these types of bindings are really hard to code.
> However,
> I would suspect an issue there.
>
> Finally, the best approach could be to actually look closely to the
> binding's
> code and try to spot anything fishy there related to your issue. This
> generaly
> worked better for me than trying to get information from gdb and the like=
..
>

Many thanks for the clarification. Maybe I could (partially) "unplug" the G=
C
by setting space_overhead to 100 ? That could give an indication on the
moment the problem occurs ?
ph.

--001636d338971e0ad504965aceac
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br><br><div class=3D"gmail_quote">2010/12/1 Romain Beauxis <span dir=3D"lt=
r">&lt;<a href=3D"mailto:toots@rastageeks.org">toots@rastageeks.org</a>&gt;=
</span><br><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0=
.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">

Hi,<br>
<br>
Le mardi 30 novembre 2010 17:08:12, Philippe Veber a =E9crit :<br>
<div class=3D"im">&gt; The seg fault occurs during the call to this functio=
n with the button event<br>
&gt; retrieved by ocamlsdl. What&#39;s really weird is that if I comment th=
e third<br>
&gt; case of the pattern matching, the seg fault does not occur. This is st=
range<br>
&gt; since with the &quot;assert false&quot; expression, I make sure this c=
ase is useless<br>
&gt; (i don&#39;t press the left button). Also, in the various tests I made=
, I<br>
&gt; obtained different errors, like segmentation fault in caml_absf_mask o=
r<br>
&gt; invalid instruction error.<br>
<br>
</div>The function that triggers the segfault may be confusing, in particul=
ar in<br>
case of a memory corruption, which I suspect here.<br>
The pattern matching can cause a crash because it is using a value that is<=
br>
already corrupted and because the third case is one that, for some random<b=
r>
conditions, touches the part in memory that is corrupted.<br></blockquote><=
div>How is this possible if it is never reached (no left click) ?<br>=A0<br=
></div><blockquote class=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex=
; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">


<br>
In this case, I would try to unroll the code and see where the value that i=
s<br>
used in this function was instanciated.<br></blockquote><div>What do you me=
an by &quot;unrolling the code&quot; ?<br><br>=A0<br></div><blockquote clas=
s=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px soli=
d rgb(204, 204, 204); padding-left: 1ex;">


<br>
Main source of corruption when using C bindings most often come from either=
<br>
the Gc or code executed while the global lock has been released.<br>
<br>
In the case of a segfault hapenning during a Gc call, this can be really<br=
>
unrelated, for instance the instanciation of a new value triggers a Gc<br>
collection to compact memory, which in turns triggers the recollection of a=
<br>
corrupted value, which causes a segfault.<br>
<br>
In the case of a segfault hapenning during a C call while the global lock h=
as<br>
been released, you may get more useful informations through gdb, in particu=
lar<br>
the trace of the C code used at the time of the segfault. You need have the=
<br>
debugging symbols for the dynamic C libraries used as well.<br>
<br>
We experienced a couple of segfault with ocaml SDL too but in unrelated par=
ts<br>
(video). I do not mean to criticize upstream&#39;s work on ocaml SDL becaus=
e I<br>
know for a fact that these types of bindings are really hard to code. Howev=
er,<br>
I would suspect an issue there.<br>
<br>
Finally, the best approach could be to actually look closely to the binding=
&#39;s<br>
code and try to spot anything fishy there related to your issue. This gener=
aly<br>
worked better for me than trying to get information from gdb and the like..=
<br></blockquote><div><br>Many thanks for the clarification. Maybe I could =
(partially) &quot;unplug&quot; the GC by setting space_overhead to 100 ? Th=
at could give an indication on the moment the problem occurs ?<br>

ph.<br><br></div></div><br>

--001636d338971e0ad504965aceac--

