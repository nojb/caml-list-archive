Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA01861 for caml-redistribution; Sat, 15 May 1999 16:17:18 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA20812 for <caml-list@pauillac.inria.fr>; Fri, 14 May 1999 18:59:16 +0200 (MET DST)
Received: from tcs.inf.tu-dresden.de (tcs.inf.tu-dresden.de [141.76.75.119])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id SAA11740
	for <caml-list@inria.fr>; Fri, 14 May 1999 18:59:16 +0200 (MET DST)
Received: from ithif20.inf.tu-dresden.de (ithif20 [141.76.75.120])
	by tcs.inf.tu-dresden.de (8.9.1a/8.9.1) with SMTP id SAA04133
	for <caml-list@inria.fr>; Fri, 14 May 1999 18:58:24 +0200 (MET DST)
Received: by ithif20.inf.tu-dresden.de (SMI-8.6/SMI-SVR4)
	id SAA07446; Fri, 14 May 1999 18:59:37 +0200
Date: Fri, 14 May 1999 18:59:37 +0200
Message-Id: <199905141659.SAA07446@ithif20.inf.tu-dresden.de>
From: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: caml-list@inria.fr
Subject: grammar for class types
X-Mailer: VM 6.34 under Emacs 19.34.1
Sender: weis

Hi,

when I tried to define some classes and class types I came across
the following questions:

1. What is the difference between

# class type b = [int, string] a;;

and 

# type c = (int, string) a;;  

assuming some class type a with two type parameters?

And Why do I have to use different parentheses in both cases?
(Yes, I know, it's what the manual says, but I would expect that
one kind of parentheses should be enough for all kind of type
parameters. )

2. Why is it not possible to add type constraints to the first
kind of type abbreviation, like in 

class type ['a] c = ['a, string] a constraint 'a = int;;

3. (To re-raise a question from John Prevost which has never been
addressed:) Why is it not possible to mix type definitions and
class type definitions like in

# class type a = object method m : a end
# and
# type b = Node of a | Tree of b * b

(Yes, it is possible to use the < ... > notation, but it is not
possible to use # with such types.)


Bye,

Hendrik



