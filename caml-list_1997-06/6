Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA22259 for caml-redistribution; Mon, 2 Jun 1997 17:36:47 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA22248 for <caml-list@pauillac.inria.fr>; Mon, 2 Jun 1997 17:36:33 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35]) by concorde.inria.fr (8.8.5/8.7.3) with ESMTP id RAA25076; Mon, 2 Jun 1997 17:35:44 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA22238; Mon, 2 Jun 1997 17:35:44 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <199706021535.RAA22238@pauillac.inria.fr>
Subject: Re: lexing strings
In-Reply-To: <199706012353.SAA06495@kimbark.uchicago.edu> from Lyn A Headley at "Jun 1, 97 06:53:12 pm"
To: laheadle@midway.uchicago.edu (Lyn A Headley)
Date: Mon, 2 Jun 1997 17:35:43 +0200 (MET DST)
Cc: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> [^'\n']*[^'\\']'\''
> 
> which should match any sequence of non-newlines until it reaches a '
> not preceded by a backslash.  slurp returns the token: STRING(!build)).
> 
> My intent, when reading a string, is for the lexer to see the first ',
> jump into 'slurp,' eat up the string and return it as the STRING token,
> then have the parser read a newline and return EOL, thus matching the
> main grammar rule and printing the result.  This almost works, but not
> until the user types _two_ newlines will the "interpreter" respond
> by printing the expression value! i.e., typing
> 
> 'hi' [newline]
> 
> at the prompt is not enough; two newlines are required.  Other than
> that, the expected value is returned.  Does this mean that the first
> newline is interpreted as part of the STRING?  Why would my regex match
> the newline?

Yes, 'hi'\n' matches your regexp. I guess you want something along the
lines of

and slurp = parse
    "'"
    { STRING(rev !build) }
  | '\\' "'"
    { build := '\'' :: !build;
      slurp lexbuf }
  | eof 
    { raise(Lexical_error "unterminated slurp") }
  | c 
    { build := c :: !build;
      slurp lexbuf }

Hope this helps,

(Note: You should have defined the exception Lexical_error of string, in order
to signal the error "unterminated slurp".)

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://pauillac.inria.fr/~weis/






