Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA25978 for caml-redistribution; Fri, 27 Jun 1997 18:54:19 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA20245 for <caml-list@pauillac.inria.fr>; Fri, 27 Jun 1997 14:48:27 +0200 (MET DST)
Received: from sun15.lri.fr (sun15.lri.fr [129.175.15.4]) by nez-perce.inria.fr (8.8.5/8.7.3) with ESMTP id OAA15103 for <caml-list@inria.fr>; Fri, 27 Jun 1997 14:48:25 +0200 (MET DST)
Received: from newsun8.lri.fr (newsun8 [129.175.8.15])
          by sun15.lri.fr (8.8.5/jtpda-5.2) with ESMTP id OAA05712
          for <caml-list@inria.fr>; Fri, 27 Jun 1997 14:48:22 +0200 (MET DST)
Received: from newsun8 by newsun8.lri.fr
	(8.8.4/local) with SMTP id OAA06697
	for <caml-list@inria.fr>; Fri, 27 Jun 1997 14:48:28 +0200 (MET DST)
Message-ID: <33B3B699.141@lri.fr>
Date: Fri, 27 Jun 1997 14:48:25 +0200
From: Emmanuel Engel <Emmanuel.Engel@lri.fr>
X-Mailer: Mozilla 3.01Gold (X11; I; SunOS 5.5 sun4m)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: foncteurs et polymoprhisme
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis

Il m'arrive souvent de vouloir definir des types de la forme

type expr =
   AC of Exprset.t
 | A of exp list 
 | .....


module Exprset = Set.make(struct type t = expr let compare = compare
end)

(en camllight, 
  type expr =	
    AC of expr set__t
   |A of expr list
   |....
)

cela n'est pas facilement possible en ocaml, les definitions incluant 
des modules ne peuvent etre ( mutuellement ) recursives.

Une methode possible est la traduction en ocaml de la solution
camllight:

type expr =
  AC of expr GeneriqueSet.t 
 |A of  expr list 
 |...                  

et definir des ensembles generiques.

Question:
    Existe-t-il un moyen simple et rapide a l'aide du foncteur 
  Set.Make de creer des ensembles polymorphes qui utilisent une
  fonction de comparaison generique (Pervasives.compare par exemple) ??

  eg 

  module GeneriqueSet = Set.Make(struct ?????? end)

Il me semble que non et, que cette impossibilite est plus due a la facon 
dont est declare le foncteur qui permet de construire les ensembles qu'a 
une vraie limite du systeme; voici une version legerement differente de
ce foncteur qui me permet une telle manip:

module Make(S:sig type 'a t val compare : 'a t -> 'a t -> int end)=
  (struct
     type 'a elt = 'a  S.t
     type 'a set = ('a elt) list
     let empty = []
     and mem = List.mem
     and add e s = e::s
  end:sig
	type 'a elt = 'a S.t
        and 'a set
        val empty : 'a set
        val mem : 'a elt -> 'a set -> bool
        val add : 'a elt -> 'a set -> 'a set
      end);;


module IntSet = Make(struct type 'a t = int let compare = (compare:int
-> int -> int) end);;
module GenericSet = Make(struct type 'a t = 'a let compare = compare
end);;




Commentaires ??


-- 

- Emmanuel Engel




