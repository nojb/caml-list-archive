Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA18865 for caml-redistribution; Mon, 6 Jul 1998 23:46:00 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA30572 for <caml-list@pauillac.inria.fr>; Mon, 6 Jul 1998 20:48:19 +0200 (MET DST)
Received: from info.numeric-quest.com (info.numeric-quest.com [204.187.76.36])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id UAA19949
	for <caml-list@inria.fr>; Mon, 6 Jul 1998 20:48:17 +0200 (MET DST)
Received: from localhost (jans@localhost)
	by info.numeric-quest.com (8.8.5/8.8.5) with SMTP id NAA26837
	for <caml-list@inria.fr>; Mon, 6 Jul 1998 13:51:56 -0500
Date: Mon, 6 Jul 1998 13:51:56 -0500 (CDT)
From: Jan Skibinski <jans@numeric-quest.com>
To: caml-list@inria.fr
Subject: Announcing fun->pdf
Message-ID: <Pine.LNX.3.95.980706135004.26793A-100000@info.numeric-quest.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis


Fun->pdf is a superset of few sets of scripts, written in various
functional languages, and interfacing to PDFlib -- a third party C
library capable of producing documents in Portable Document Format
from Adobe. The package and a manual are freely available at:

	http://www.numeric-quest.com/funpdf

At this time the interfacing scripts are written in three functional
languages:

	+ Equational Functional Lanquage Q
	+ Ocaml
	+ Haskell

Fun->pdf is designed to be small, yet highly functional, powerful
and user friendly. Users are offered a choice of direct interaction
with PDFlib, or high-level functionalities fully implemented in
scripts. At the top of these choices is a support for a HTML alike
markup tag language, which is as easy as the basic HTML -- without
complexities of the recent extensions to the HTML format.

As a consequence, a PDF document, such as the fun->pdf manual, can
be entirely written in ascii editor as a set of plain ascii files
consisting of: plain text, ascii data for plots or tables and tagged
material to be interpreted by fun->pdf parser.

Any sequence of a language specific functions can be embedded within
the special tags in a tagged file. Embedded scripts usually print or
draw more complex entities, such as plots or tables.
 
Aside from its main purpose of doing useful things, the package
might be also used as a learning material for those wishing to advance
into the functional programming; scripts are well documented, and the
manual explains in a lay parlance the basics and also similarities
and differences among those three languages.
=================================================================

On the less "official" note:

Ocaml beats hands down the two other implementations. But do not
hold your breath: I made a few bad design choices that adversely
impacted Haskell/Hugs performance. Everything is documented in
chapter "Performance" of the manual.

Pierre Weis: 
------------
If you find it interesting you may host this package in your 
'bazaar'. It is GPL-ed, after all :-).

Xavier Leroy: 
------------
Thank you for your advice on "Dynamic evaluation". As encouraged
by you I stick to my first idea of using Toploop.run_script.
I could not go by as easily in Haskell and I finally ended up
with my own evaluator on a top of a third party Haskell Parser.
That's why it took me an extra time before I could announce the
package. What a shame to be forced to write an interpreter within
an interpreter.  
 
Jan Skibinski,
Numeric Quest Inc.
Huntsville, Ontario, Canada
July 4, 1998







