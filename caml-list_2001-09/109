Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA28195; Tue, 11 Sep 2001 12:54:59 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id MAA27535 for <caml-list@pauillac.inria.fr>; Tue, 11 Sep 2001 12:54:58 +0200 (MET DST)
Received: from dpt-info.u-strasbg.fr (dpt-info.u-strasbg.fr [130.79.44.193])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f8BAsvL25557
	for <caml-list@inria.fr>; Tue, 11 Sep 2001 12:54:57 +0200 (MET DST)
Received: (from luther@localhost)
	by dpt-info.u-strasbg.fr (8.9.3/8.9.3) id MAA29731;
	Tue, 11 Sep 2001 12:55:24 +0200
Date: Tue, 11 Sep 2001 12:55:24 +0200
From: Sven <luther@dpt-info.u-strasbg.fr>
To: Andreas Rossberg <rossberg@ps.uni-sb.de>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Style question
Message-ID: <20010911125524.B29665@dpt-info.u-strasbg.fr>
References: <20010909132144.X7348-100000@shell5.ba.best.com> <3B9DE076.568458F9@ps.uni-sb.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0.1i
In-Reply-To: <3B9DE076.568458F9@ps.uni-sb.de>; from rossberg@ps.uni-sb.de on Tue, Sep 11, 2001 at 11:59:18AM +0200
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, Sep 11, 2001 at 11:59:18AM +0200, Andreas Rossberg wrote:
> Brian Rogoff wrote:
> > 
> > It seems to me that all of the uses of local in SML can be handled can be
> > handled by the module system in OCaml, and I don't even find the unsugared
> > forms to be bad at all.
> 
> It is not exactly sugar since you can express things with local that you
> cannot with signatures - but all of them are pretty useless. My personal
> opinion is that using modules is preferable even in SML, its local being
> an anachronism from the pre-module days, just like abstype. I almost
> never use it. It only comes in handy in conjunction with open:
> 
> 	local open M in
> 	...
> 	end
> 
> Of course, in OCaml this is solved by having open vs. include.

Also, would not :

let module = struct ... end in 

be another solution for it, maybe in conjunction with the open syntax ?

Friendly,

Sven Luther
-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

