Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA21438; Tue, 25 Sep 2001 23:20:07 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA21429 for <caml-list@pauillac.inria.fr>; Tue, 25 Sep 2001 23:20:06 +0200 (MET DST)
Received: from smtp5-cm.mail.eni.net (smtp5-cm.mail.eni.net [216.133.226.138])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id f8PLK5D01298
	for <caml-list@inria.fr>; Tue, 25 Sep 2001 23:20:05 +0200 (MET DST)
Received: from checkerlap.d6.com (node-d8e9cca2.powerinter.net [216.233.204.162])
	by smtp5-cm.mail.eni.net (8.9.3/8.9.3) with ESMTP id OAA26649;
	Tue, 25 Sep 2001 14:19:36 -0700
Message-Id: <4.3.2.7.2.20010925141543.02a904f0@arda.pair.com>
X-Sender: checker@arda.pair.com
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Tue, 25 Sep 2001 14:22:09 -0700
To: Markus Mottl <markus@mail4.ai.univie.ac.at>,
        Jerome Vouillon <vouillon@saul.cis.upenn.edu>
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] calling native from bytecode (was RE: a
  regular expression library)
Cc: caml-list@inria.fr
In-Reply-To: <20010925210317.C16531@chopin.ai.univie.ac.at>
References: <20010925131229.A22868@saul.cis.upenn.edu>
 <20010925131229.A22868@saul.cis.upenn.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>> (The library is much slower when compiled to bytecode though, as it
>>  is entirely written in O'Caml.  I plan to rewrite the critical
>>  sections of the code in C.)
>It would be really nice if there were ways to call OCaml-native code
>from OCaml-byte code. This question has popped up in the past, but it's
>not an easy thing to do due to issues with the runtime:
>  http://caml.inria.fr/archives/200108/msg00026.html
>Any news in this respect? A toplevel that could run a high-performance,
>OCaml-native code string matching engine would give a terrific scripting
>environment!

I was going to reply to that same quote and reiterate my desire to link native and bytecode!  :) That was the thread I started you've linked to, here's the beginning: http://caml.inria.fr/archives/200108/msg00008.html.

It's such a shame that we're pushing ocaml code into C because of this limitation.  This seems incredibly ironic and sad to me.

I started looking into it seriously, but I got discouraged after Xavier's discussion of the gc differences and after I looked at the runtime code (lots of #ifdefs and even separate files in some cases).

It seems like it would be a _ton_ of work if you tried to do it in a backwards compatible way.  If this was a higher priority, it seems like you could do it if you punted bytecode backwards compatibility and made some big changes.  I'd love to do this, but it looks like a major undertaking, not the quick hack I originally though it might be.

Chris


-------------------
Bug reports: http://caml.inria.fr/bin/caml-bugs  FAQ: http://caml.inria.fr/FAQ/
To unsubscribe, mail caml-list-request@inria.fr  Archives: http://caml.inria.fr

