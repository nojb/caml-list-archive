Return-Path: <SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 4F60BE67F2
	for <caml-list@sympa.inria.fr>; Tue, 22 Sep 2020 09:27:28 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=90hC=C7=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3AzyfsdRMeL/X3tA6EcF0l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/j5o8bcNUDSrc9gkEXOFd2Cra4d1KyP6Ou5AzRIoc7Y9ixbLtoUD15NoP?=
 =?us-ascii?q?5VtjRoONSCB0z/IayiRA0BN+MGamVY+WqmO1NeAsf0ag6aiHSz6TkPBke3blIt?=
 =?us-ascii?q?daz6FYHIksu4yf259YHNbAVUnjq9Zq55IAmroQnLucQanIlvJrwsxhbHrXdEZv?=
 =?us-ascii?q?payX91Ll6Xgxrw+9288ZF+/ylRof4t69JMXaDndKkkULJUCygrPXoo78PxrxnD?=
 =?us-ascii?q?SgWP5noYUmoIlxdDHhbI4hLnUJrvqyX2ruVy1jWUMs3wVrA0RC+t77x3Rx/yiS?=
 =?us-ascii?q?cILCA2/WfKgcFtlq1boRahpxtiw47IZYyeKfRzcr/Bcd4cWGFOWdtfVzFaAoOk?=
 =?us-ascii?q?cYQAE/YBM+hfr4n4vVQOrB2+DhSoCO7gzjJEg3n70a053eQnDwHG3RcgH9MVv3?=
 =?us-ascii?q?TQstr+KakTUeevzKbV1jXIcvda1Dnh5ITNdB0qvPOCUq9qccfJyUchCR7LgFuT?=
 =?us-ascii?q?p4PqIzyYzf4Cv3SB4ud6Se6jl2wqpgdsqTav3McsjYzJi5oJx1DA7yp5xps+K8?=
 =?us-ascii?q?CkR057ZN6kEYdQtz2HPIZxWMwiR3tnuCAgxr0dpZG7fC0KyJU7xx7DcPGHa4+I?=
 =?us-ascii?q?4hbjVeaNPzh3mHJleLS+hxar7Eiv1PfwVs6u0FZFtydIlMTHuX8R2RLJ8MeHVu?=
 =?us-ascii?q?d98Vm72TaJzw3e5eVJLEQ7m6fGJJMszb09m5oXvErDACL7mUv7gqCWe0k69Oal?=
 =?us-ascii?q?6ebqb6jiq5KBNIJ5hQ/zP6oyl8GiAOk1PBUDUm6G8uqy073j+Ff2QLRMjvAuiq?=
 =?us-ascii?q?nWrozaJcUHpqGnGw9V1YMj6xOhADu81tQXg2UHIEpCeB2blYfpPlXOLOr/Dfel?=
 =?us-ascii?q?jFSgiDhrx/HaPr3hH5XCNWLPn6vmfbZ480JT1Q0zwsxc551KELENOu78Wkj0tN?=
 =?us-ascii?q?DAAR85MhC0w+b6CNpmzI8eWGWPDreCP6PTrV+I/f4vI/ONZI8TtzbxMeMl5/ng?=
 =?us-ascii?q?jX8ll14SZ7Op0oUPZHC5A/tnI0GZYX72jtcGC2cKsRIyTOz2iF2eST5feXOyX7?=
 =?us-ascii?q?845jEnCYKpEYDDRpqzj7Ob2ie0A5hWaXpGC1+XD3jnbYOEVO0QaCKTPM9ujDsE?=
 =?us-ascii?q?WqS7RI8k0RGutQr6y6JjLuXK/y0Xq5Tj1MRv6O3PlBEy8jp0D8CH3GGRUW50hH?=
 =?us-ascii?q?kERz4z3K15vEdzyU+D3LBlj/BGEdFf/e5FXhs1OJLGweF2F8r+VwzOc9uRSlur?=
 =?us-ascii?q?Qc+qDS8+Q94v2dMCfklwF8+/gh3MwyanBaIemaaRC5wu6K3c2mD8J8ZjxHbC06?=
 =?us-ascii?q?ksl1wmQ8RSOWG8nq5/8AzTBo7Vk0qHi6mqdaIc3C/U9Gee02WCpkZYUBR/Uand?=
 =?us-ascii?q?XHAfYFXZrcjh60/fUbOjDa4rPhZdxcONMKdHZMHlgU9ISfrsINjeZni+m2a0BR?=
 =?us-ascii?q?aG3LOMa4/qdn0A0ivBFUYIjxge8HKaOQg+GCqsu3zTAT52GFL3ZEPs9el/qG+l?=
 =?us-ascii?q?QUAozwGKaUxh16Oo+hELn/CcTOkT3r0ctSg7rzV7BlC908jNC9WcpwpheaRcYc?=
 =?us-ascii?q?8h4Fpczm3ZsBF9Ppq8IK98nV4SaQF3skzh1hltDYVAi8cqoGswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0J/sILLXL23y8Amra67XwVHezM2b+rwP6fQ9s1XsphulFksk83V90tlayW?=
 =?us-ascii?q?GQ5pvQDFlabZWkGEIo8VIy87XFZAE5+IWS03BwZ+38+DTd3ZhhTL8u1RCIe9ZE?=
 =?us-ascii?q?LLjCFQPjF8lcANKhfqhikFGsalcAPftO3K8yJcKvMfWcnOagO+N4tDanlnhcpo?=
 =?us-ascii?q?dn2EOQ/i5yTf6O0otW7euf216uUz76xGyqssX2hZwMMTgWF2z50iPkAY9NeoVq?=
 =?us-ascii?q?eoIaFWqlI8u238hzwZn3VCgLpxaYG1oa1ZrxKlKpZFvn0FgPhB1K80ziojOxyn?=
 =?us-ascii?q?lPqx9srqeb23aVkeHyLVwfPWpaWGRpjVHtOJW5ydcAUxrxNlR7pF6e/U//gpNj?=
 =?us-ascii?q?iuFnNWCKEBVQeCznM2xpUq2xr6ePJclV58Fx6HQFYKGHeVmfD4XFjV4f2iLnEX?=
 =?us-ascii?q?FZwWlkJTutp5Pykgc8jT6NanFpoyiAdA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BqBQCupmlffSIeaIFfg3tSRgFeVjIsh?=
 =?us-ascii?q?DqBXYcli1OFQpFjgWQQAQMBDRgBDAcBAgQBAYFWgUBxRAKCJQIdBgEFMxMCEAE?=
 =?us-ascii?q?BBQEBAQIBAwMEARMBAQsUCIYMDII3DAwDA4MlAQwMCQo4LSMDFAEGAwIRARcBF?=
 =?us-ascii?q?AoXARIaAYMMgnwEAQqZdJt7gTKEOwETAwEOCSaEG4FCDQITgRaFTUuDA4NrJg+?=
 =?us-ascii?q?BTT+Dc2yCRQwLAQEBAQGBHhwBAQhOgmGCYASPfQ4BCgICJQKKE4kpkisTSyoHg?=
 =?us-ascii?q?mqBDQQLhlqBAYsChnaDDIEniFKTfSGSXIF3hgN9gWqGCIpnhFSBQSqBZwwHMxo?=
 =?us-ascii?q?wgywJYA2NfCwag06CZIF1O4Fhg2M/MwIBATMCBgEJAQEDCXUBAQUTCwGNRAEB?=
X-IPAS-Result: =?us-ascii?q?A0BqBQCupmlffSIeaIFfg3tSRgFeVjIshDqBXYcli1OFQpF?=
 =?us-ascii?q?jgWQQAQMBDRgBDAcBAgQBAYFWgUBxRAKCJQIdBgEFMxMCEAEBBQEBAQIBAwMEA?=
 =?us-ascii?q?RMBAQsUCIYMDII3DAwDA4MlAQwMCQo4LSMDFAEGAwIRARcBFAoXARIaAYMMgnw?=
 =?us-ascii?q?EAQqZdJt7gTKEOwETAwEOCSaEG4FCDQITgRaFTUuDA4NrJg+BTT+Dc2yCRQwLA?=
 =?us-ascii?q?QEBAQGBHhwBAQhOgmGCYASPfQ4BCgICJQKKE4kpkisTSyoHgmqBDQQLhlqBAYs?=
 =?us-ascii?q?ChnaDDIEniFKTfSGSXIF3hgN9gWqGCIpnhFSBQSqBZwwHMxowgywJYA2NfCwag?=
 =?us-ascii?q?06CZIF1O4Fhg2M/MwIBATMCBgEJAQEDCXUBAQUTCwGNRAEB?=
X-IronPort-AV: E=Sophos;i="5.77,289,1596492000"; 
   d="scan'208,217";a="359675856"
X-MGA-submission: =?us-ascii?q?MDHXqI8ZAr38RhPIiHdpGy5oRGfKslbepju+9o?=
 =?us-ascii?q?EcldQRISgth5cERLUonKp7eF3ilXsNVeC8slzkRZa4w8+/YuHazu3GBj?=
 =?us-ascii?q?v+UqdTXADdvsxxYmTYAsGlLpaitCOrcjQBx2YcvwCoBmV4hppReY40+x?=
 =?us-ascii?q?3QCS/OAqOrxHGGqGOhykc1Mw=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Sep 2020 09:27:26 +0200
Received: from set (cbg35-2-78-242-14-140.fbx.proxad.net [78.242.14.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id B87F5564F0A;
	Tue, 22 Sep 2020 09:27:24 +0200 (CEST)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr,
 comp@lists.orbitalfox.eu
Date: Tue, 22 Sep 2020 09:27:24 +0200
Message-ID: <87mu1i6zkz.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Sep 22 09:27:25 2020 +0200 (CEST))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.000000, queueID=4F422564F54
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of September 15 to
22, 2020.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Liquidsoap 1.4.3
Simple63 v1: compression of integer sequences
bentov v1: streaming estimation of 1D histograms
opam-compiler 0.1.0
lua_parser 1.0.0
Merlin 3.4.0 : introducing external configuration readers
gRPC server and client in OCaml
Bitstring (and ppx_bitstring) 4.0.0
Old CWN


Liquidsoap 1.4.3
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-liquidsoap-1-4-3/6429/1>


Romain Beauxis announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I'm happy to announce that liquidsoap `1.4.3' is out at:
  <https://github.com/savonet/liquidsoap/releases/tag/v1.4.3>

  This is the 3rd bugfix release for the `1.4.x' branch. It contains
  important fixes and a couple of new minor features. Update is
  recommended and should be fairly safe.

  Along we this release, we have now added builds for `arm64' debian
  packages and docker-ready production images for `amd64' and `arm64'
  architectures available at:
  <https://hub.docker.com/repository/docker/savonet/liquidsoap>

  Again, we would like to warmly thank all users, contributors and
  reporters for helping us bring liquidsoap to the next step!

  Also, please note that a couple of issues had to be left out to make
  sure that the release comes out on time. These are listed [here] and
  will be tackled as soon as possible.

  Next for liquidsoap, we will focus on getting the current `2.x' branch
  finalized and polished. We already have support for encoded content
  and ffmpeg raw frames. We need to write a couple of inline encoders
  and decoders and we'll have 90% of the features ready. This will be a
  major update for us!


[here] <https://github.com/savonet/liquidsoap/milestone/7>


Simple63 v1: compression of integer sequences
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-simple63-v1-compression-of-integer-seque=
nces/6431/1>


Mika Illouz announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This is to announce Simple63, an opam package for compression of
  integer sequences; similar to Anh and Moffat's Simple-8b. More details
  found in:

  =E2=80=A2 github: [https://github.com/barko/simple63]
  =E2=80=A2 documentation: [https://barko.github.io/simple63/]

  Feedback and bug reports welcome.


[https://github.com/barko/simple63] <https://github.com/barko/simple63>

[https://barko.github.io/simple63/] <https://barko.github.io/simple63/>


bentov v1: streaming estimation of 1D histograms
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-bentov-v1-streaming-estimation-of-1d-his=
tograms/6434/1>


Mika Illouz announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This is to announce bentov, a opam package that implements a 1D
  histogram-sketching algorithm. For more details:

  =E2=80=A2 github: [https://github.com/barko/bentov]
  =E2=80=A2 documentation: [https://barko.github.io/bentov]

  Feedback and bug reports welcome.


[https://github.com/barko/bentov] <https://github.com/barko/bentov>

[https://barko.github.io/bentov] <https://barko.github.io/bentov>


opam-compiler 0.1.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-opam-compiler-0-1-0/6442/1>


Etienne Millon announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  On behalf of the opam maintainers, I'd like to announce the first
  release of opam-compiler, a plugin to work with compiler variants,
  branches and forks.

  This can cover a pretty wide range of use cases, so the first version
  is starting small with a single command to create a switch from a
  branch or github PR:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 % opam compiler create '#9921'
  =E2=94=82 Opam plugin "compiler" is not installed. Install it on the curr=
ent switch? [Y/n] y
  =E2=94=82=20
  =E2=94=82 ...
  =E2=94=82=20
  =E2=94=82 <><> Carrying on to "opam compiler create #9921" ><><><><><><><=
><><><><><><><><>
  =E2=94=82=20
  =E2=94=82 [ocaml-variants.4.12.0+trunk+no-flat-float-array] synchronised =
from
  =E2=94=82 git+https://github.com/gasche/ocaml#Atomic.create
  =E2=94=82 ocaml-variants is now pinned to git+https://github.com/gasche/o=
caml#Atomic.create (version
  =E2=94=82 4.12.0+trunk)
  =E2=94=82 % opam switch
  =E2=94=82 ...
  =E2=94=82 =E2=86=92  ocaml-ocaml-9921
  =E2=94=82           [opam-compiler] ocaml/ocaml#9921 - stdlib: rename Ato=
mic.make into Atomic.create
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  You can also override the arguments passed to `--configure'.

  As you can see in the above snippet, it's an opam plugin so it will
  auto-install if needed (assuming you ran `opam update' recently) and
  will be available across all switches. Its sources and issue tracker
  are available [here].

  For the next releases, our plan is to add a user-friendly way to setup
  a switch based on a local git clone, so that it's easy to test your
  compiler fork with opam packages. You can find the other features we'd
  like to add in the future in [the relevant part of the opam roadmap].

  Thanks and have fun compiling compilers!


[here] <https://github.com/ocaml-opam/opam-compiler>

[the relevant part of the opam roadmap]
<https://github.com/ocaml/opam/wiki/Spec-for-working-with-the-OCaml-compile=
r>


lua_parser 1.0.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-lua-parser-1-0-0/6445/1>


Jason Nielsen announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I've release [lua_parser] which is now up on opam.  It is a parser and
  pretty-printer for lua 5.2.  Actually it was developed with luajit in
  mind which is lua 5.1 plus goto/labels (which syntactically for the
  purposes of parsing and pretty-printing is lua 5.2).


[lua_parser] <https://github.com/drjdn/ocaml_lua_parser>


Merlin 3.4.0 : introducing external configuration readers
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-merlin-3-4-0-introducing-external-config=
uration-readers/6446/1>


vds announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I am glad to announce, on behalf of the Merlin team, the release of
  Merlin `3.4.0' which brings some major changes in the way
  configuration is handled.

  As you might know, Merlin reads its configuration from the closest
  `.merlin' file to the source file being edited. These files tell
  merlin where to find other source files and build artifacts, but also
  which flags should be passed to the compiler, which syntax extensions
  are enabled and which packages are used by the project.

  In this setting the configuration is the same for all the source files
  of a folder, regardless of their specificities. In other words, the
  configuration loaded for a single source file contains the union of
  the dependencies of this file and of all its siblings which is not an
  optimal behavior.

  Starting with version `3.4.0' merlin will ship with two packages:
  `merlin' and `dot-merlin-reader' which, as the name suggests, reads
  configuration from `.merlin' files. Both are necessary for proper
  function.

  When a `.merlin' file is present in the source folder the Merlin
  server will start a `dot-merlin-reader' process and communicate with
  it via standard input and output following a simple protocol. These
  processes are halted with the server.

  *This change should not have any visible impact on users' workflows as
  long as the `dot-merlin-reader' binary is correctly installed and in
  the path*. (which should be the case in opam-based setups)

  This change in itself will not solve the granularity problem mentioned
  earlier, but it paves the way for such improvements: in a near-future
  Dune will stop generating `.merlin' files and Merlin will obtain
  file-based configuration directly from the build system using the same
  protocol as the one used by `dot-merlin-reader'.


Changelog
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C

  =E2=81=83 merlin binary
    =E2=80=A2 fix completion of pattern matchings with exception patterns
      (#1169)
    =E2=80=A2 delegate configuration reading to external programs via a sim=
ple
      protocol and create a new package `dot-merlin-reader' with a
      binary that reads `.merlin' files. (#1123, #1152)


gRPC server and client in OCaml
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/grpc-server-and-client-in-ocaml/6465/1>


blandinw announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  TL;DR <https://github.com/blandinw/ocaml-grpc-envoy/>

  Hey, I'm new to OCaml after writing some Clojure, C++ and Haskell in
  various contexts, including working at FB (relevant below).

  After browsing this forum and Reddit for a bit, the assumption seems
  to be that OCaml is not a good fit for gRPC, since there's no pure
  implementation today. Now, this is something I have experience with,
  so I thought I'd try and challenge this assumption.

  As you may know, services inside FB use Thrift (both the format and
  protocol) to communicate. The Thrift team worked primarily in C++ (for
  good reasons), causing support for other languages to lag behind
  despite their best efforts. Now, the interchange format (equivalent to
  Protobuf) does not change very often so it's fine to have a
  per-language implementation, but the client and server (equivalent to
  HTTP2 + gRPC) frequently receive new features, optimizations and
  fixes. After a valiant and continued effort to support most languages
  used internally, the Thrift team came up with an idea. Instead of
  maintaining multiple implementations and dealing with obscure FFI
  bugs, ~FingerprintTrustManagerFactory~s and whatnot, they would focus
  solely on the C++ implementation and provide a daemon to be ran
  alongside whatever code you were trying to run. You could then use
  simple IPC to exchange Thrift (the format) messages with that daemon,
  and it would handle all the nitty-gritty of running a service at scale
  (load balancing, connection pooling, service discovery, security,
  retries, timeouts, network stats, hot restarts, etc.). Needless to
  say, it worked remarkably well even at very high scale and everybody
  was much happier.

  I wanted to replicate this idea with OCaml and gRPC. We already have
  support for protobuf thanks to the excellent `ocaml-protoc'. All we
  need is a way to exchange protobuf messages reliably on the wire.
  Instead of having an OCaml implementation that will have to stay
  up-to-date and have its own set of bugs (the official `grpc/grpc-java'
  repo has 4450 commits and 2400 issues at the moment), can we reuse
  existing infra with already massive support and production time?

  Fortunately, the people at Lyft built just that, open-sourced it and
  contributed it to the Cloud Native Computing Foundation in late
  2017. It is called Envoy and it is bliss.

  I demonstrate how to fit these pieces together at
  [blandinw/ocaml-grpc-envoy] to build a simple KV store, including a
  gRPC client and server in 200 lines of OCaml code. The idea is to
  spawn an Envoy process that will handle all gRPC communication for our
  OCaml code. We use HTTP/1.1 to exchange Protobuf messages with it,
  using for example `httpaf' and `Lwt'. This solution has the added
  benefit that it is highly scalable from the start, allowing you for
  instance to spawn one OCaml process per core and load balance between
  them. You can also use Envoy (with proper config!) as your web reverse
  proxy instead of say, nginx.

  At the very least, this solution allows us to start writing gRPC code
  today, and gracefully evolve towards HTTP/2, Multicore and maybe a
  native OCaml implementation later.

  I'm curious to hear your perspective on the future of building
  services with OCaml, or your past experience like what went well, what
  was missing, etc.


[blandinw/ocaml-grpc-envoy]
<https://github.com/blandinw/ocaml-grpc-envoy/>


Yawar Amin asked and blandinw replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80

        Fantastic idea. So if I understand correctly, the only
        thing that Envoy (server-side) is doing is translating the
        Protobuf from gRPC HTTP2 transport to HTTP1, and
        forwarding these Protobuf objects over HTTP1 to the OCaml
        server? Envoy doesn't know to know about the actual gRPC
        schema, because it doesn't touch the Protobuf objects
        themselves, right?

  That's correct. Envoy is only concerned with transporting bytes (along
  with load balancing, routing, etc, etc). Only OCaml knows about the
  Protobuf schemas.

  In the OCaml server case, Envoy listens for HTTP/2 gRPC requests,
  accesses the bytes payload with no knowledge of the actual
  schema/layout and repackages these same bytes in a HTTP/1.1 request
  that OCaml can process. OCaml then responds with bytes (an encoded
  Protobuf response message) that Envoy sends back on the original HTTP2
  connection.


Bitstring (and ppx_bitstring) 4.0.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-bitstring-and-ppx-bitstring-4-0-0/6471/1>


xrguerin announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

Features
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Add support for let bindings introduced in 4.08
  =E2=80=A2 Switch to PPXLIB


Deprecations
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  As PPXLIB requires `ocaml >=3D 4.04' support for earlier versions has
  been dropped.


Breaking changes
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  This release splits the library from the PPX to reduce runtime
  dependencies. Projects using the PPX from bitstring will need to also
  depends on ppx_bitstring from now on.


Rudi Grinberg added
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  The project is hosted [here] for those who are interested.There's also
  some excellent [docs]


[here] <https://github.com/xguerin/bitstring>

[docs] <https://bitstring.software/documentation/>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <http://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <http://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <http://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2020-09-22 Tue 09:26 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.09.15.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2020.09.29.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of September 15 to 22, 2=
020.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">Liquidsoap 1.4.3</a></li>
<li><a href=3D"#2">Simple63 v1: compression of integer sequences</a></li>
<li><a href=3D"#3">bentov v1: streaming estimation of 1D histograms</a></li>
<li><a href=3D"#4">opam-compiler 0.1.0</a></li>
<li><a href=3D"#5">lua_parser 1.0.0</a></li>
<li><a href=3D"#6">Merlin 3.4.0 : introducing external configuration reader=
s</a></li>
<li><a href=3D"#7">gRPC server and client in OCaml</a></li>
<li><a href=3D"#8">Bitstring (and ppx_bitstring) 4.0.0</a></li>
<li><a href=3D"#orgfa70e19">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-orga943471" class=3D"outline-2">
<h2 id=3D"1">Liquidsoap 1.4.3</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-liquidsoap-1-4-3/6429/1=
">https://discuss.ocaml.org/t/ann-liquidsoap-1-4-3/6429/1</a>
</p>
</div>

<div id=3D"outline-container-org0eceab9" class=3D"outline-3">
<h3 id=3D"org0eceab9">Romain Beauxis announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0eceab9">
<p>
I'm happy to announce that liquidsoap  <code>1.4.3</code>  is out at:
<a href=3D"https://github.com/savonet/liquidsoap/releases/tag/v1.4.3">https=
://github.com/savonet/liquidsoap/releases/tag/v1.4.3</a>
</p>

<p>
This is the 3rd bugfix release for the  <code>1.4.x</code>  branch. It cont=
ains important fixes and a couple of
new minor features. Update is recommended and should be fairly safe.
</p>

<p>
Along we this release, we have now added builds for  <code>arm64</code>  de=
bian packages and docker-ready
production images for  <code>amd64</code>  and  <code>arm64</code>  archite=
ctures available at:
<a href=3D"https://hub.docker.com/repository/docker/savonet/liquidsoap">htt=
ps://hub.docker.com/repository/docker/savonet/liquidsoap</a>
</p>

<p>
Again, we would like to warmly thank all users, contributors and reporters =
for helping us bring
liquidsoap to the next step!
</p>

<p>
Also, please note that a couple of issues had to be left out to make sure t=
hat the release comes out on
time. These are listed <a href=3D"https://github.com/savonet/liquidsoap/mil=
estone/7">here</a> and will be tackled as
soon as possible.
</p>

<p>
Next for liquidsoap, we will focus on getting the current  <code>2.x</code>=
  branch finalized and polished. We
already have support for encoded content and ffmpeg raw frames. We need to =
write a couple of inline
encoders and decoders and we'll have 90% of the features ready. This will b=
e a major update for us!
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org37e567e" class=3D"outline-2">
<h2 id=3D"2">Simple63 v1: compression of integer sequences</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-simple63-v1-compression=
-of-integer-sequences/6431/1">https://discuss.ocaml.org/t/ann-simple63-v1-c=
ompression-of-integer-sequences/6431/1</a>
</p>
</div>

<div id=3D"outline-container-orged457f3" class=3D"outline-3">
<h3 id=3D"orged457f3">Mika Illouz announced</h3>
<div class=3D"outline-text-3" id=3D"text-orged457f3">
<p>
This is to announce Simple63, an opam package for compression of integer se=
quences; similar to Anh and
Moffat's Simple-8b. More details found in:
</p>

<ul class=3D"org-ul">
<li>github: <a href=3D"https://github.com/barko/simple63">https://github.co=
m/barko/simple63</a></li>
<li>documentation: <a href=3D"https://barko.github.io/simple63/">https://ba=
rko.github.io/simple63/</a></li>
</ul>

<p>
Feedback and bug reports welcome.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org1d5e049" class=3D"outline-2">
<h2 id=3D"3">bentov v1: streaming estimation of 1D histograms</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-bentov-v1-streaming-est=
imation-of-1d-histograms/6434/1">https://discuss.ocaml.org/t/ann-bentov-v1-=
streaming-estimation-of-1d-histograms/6434/1</a>
</p>
</div>

<div id=3D"outline-container-orgb47fcbc" class=3D"outline-3">
<h3 id=3D"orgb47fcbc">Mika Illouz announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb47fcbc">
<p>
This is to announce bentov, a opam package that implements a 1D histogram-s=
ketching algorithm. For more
details:
</p>

<ul class=3D"org-ul">
<li>github: <a href=3D"https://github.com/barko/bentov">https://github.com/=
barko/bentov</a></li>
<li>documentation: <a href=3D"https://barko.github.io/bentov">https://barko=
.github.io/bentov</a></li>
</ul>

<p>
Feedback and bug reports welcome.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org7bcaf38" class=3D"outline-2">
<h2 id=3D"4">opam-compiler 0.1.0</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-opam-compiler-0-1-0/644=
2/1">https://discuss.ocaml.org/t/ann-opam-compiler-0-1-0/6442/1</a>
</p>
</div>

<div id=3D"outline-container-org6e812ba" class=3D"outline-3">
<h3 id=3D"org6e812ba">Etienne Millon announced</h3>
<div class=3D"outline-text-3" id=3D"text-org6e812ba">
<p>
On behalf of the opam maintainers, I'd like to announce the first release o=
f opam-compiler, a plugin to
work with compiler variants, branches and forks.
</p>

<p>
This can cover a pretty wide range of use cases, so the first version is st=
arting small with a single
command to create a switch from a branch or github PR:
</p>

<pre class=3D"example">
% opam compiler create '#9921'
Opam plugin "compiler" is not installed. Install it on the current switch? =
[Y/n] y

...

&lt;&gt;&lt;&gt; Carrying on to "opam compiler create #9921" &gt;&lt;&gt;&l=
t;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&=
gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;

[ocaml-variants.4.12.0+trunk+no-flat-float-array] synchronised from
git+https://github.com/gasche/ocaml#Atomic.create
ocaml-variants is now pinned to git+https://github.com/gasche/ocaml#Atomic.=
create (version
4.12.0+trunk)
% opam switch
...
=E2=86=92  ocaml-ocaml-9921
          [opam-compiler] ocaml/ocaml#9921 - stdlib: rename Atomic.make int=
o Atomic.create
</pre>

<p>
You can also override the arguments passed to <code>--configure</code>.
</p>

<p>
As you can see in the above snippet, it's an opam plugin so it will auto-in=
stall if needed (assuming
you ran <code>opam update</code> recently) and will be available across all=
 switches. Its sources and issue
tracker are available <a href=3D"https://github.com/ocaml-opam/opam-compile=
r">here</a>.
</p>

<p>
For the next releases, our plan is to add a user-friendly way to setup a sw=
itch based on a local git
clone, so that it's easy to test your compiler fork with opam packages. You=
 can find the other features
we'd like to add in the future in <a href=3D"https://github.com/ocaml/opam/=
wiki/Spec-for-working-with-the-OCaml-compiler">the relevant part of the opam
roadmap</a>.
</p>

<p>
Thanks and have fun compiling compilers!
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org921c451" class=3D"outline-2">
<h2 id=3D"5">lua_parser 1.0.0</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-lua-parser-1-0-0/6445/1=
">https://discuss.ocaml.org/t/ann-lua-parser-1-0-0/6445/1</a>
</p>
</div>

<div id=3D"outline-container-orgad9f0e6" class=3D"outline-3">
<h3 id=3D"orgad9f0e6">Jason Nielsen announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgad9f0e6">
<p>
I've release <a href=3D"https://github.com/drjdn/ocaml_lua_parser">lua_pars=
er</a> which is now up on opam.  It is a
parser and pretty-printer for lua 5.2.  Actually it was developed with luaj=
it in mind which is lua 5.1
plus goto/labels (which syntactically for the purposes of parsing and prett=
y-printing is lua 5.2).
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org54623c2" class=3D"outline-2">
<h2 id=3D"6">Merlin 3.4.0 : introducing external configuration readers</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-merlin-3-4-0-introducin=
g-external-configuration-readers/6446/1">https://discuss.ocaml.org/t/ann-me=
rlin-3-4-0-introducing-external-configuration-readers/6446/1</a>
</p>
</div>

<div id=3D"outline-container-org72540c7" class=3D"outline-3">
<h3 id=3D"org72540c7">vds announced</h3>
<div class=3D"outline-text-3" id=3D"text-org72540c7">
<p>
I am glad to announce, on behalf of the Merlin team, the release of Merlin
<code>3.4.0</code> which brings some major changes in the way configuration=
 is handled.
</p>

<p>
As you might know, Merlin reads its configuration from the closest <code>.m=
erlin</code>
file to the source file being edited. These files tell merlin where to find
other source files and build artifacts, but also which flags should be pass=
ed to
the compiler, which syntax extensions are enabled and which packages are us=
ed by
the project.
</p>

<p>
In this setting the configuration is the same for all the source files of a
folder, regardless of their specificities. In other words, the configuration
loaded for a single source file contains the union of the dependencies of t=
his
file and of all its siblings which is not an optimal behavior.
</p>

<p>
Starting with version <code>3.4.0</code> merlin will ship with two packages=
: <code>merlin</code>
and <code>dot-merlin-reader</code> which, as the name suggests, reads confi=
guration from
<code>.merlin</code> files. Both are necessary for proper function.
</p>

<p>
When a <code>.merlin</code> file is present in the source folder the Merlin=
 server will
start a <code>dot-merlin-reader</code> process and communicate with it via =
standard input
and output following a simple protocol. These processes are halted with the=
 server.
</p>

<p>
<b>This change should not have any visible impact on users' workflows as lo=
ng as
the <code>dot-merlin-reader</code> binary is correctly installed and in the=
 path</b>. (which
should be the case in opam-based setups)
</p>

<p>
This change in itself will not solve the granularity problem mentioned earl=
ier,
but it paves the way for such improvements: in a near-future Dune will stop
generating <code>.merlin</code> files and Merlin will obtain file-based con=
figuration
directly from the build system using the same protocol as the one used by
<code>dot-merlin-reader</code>.
</p>
</div>

<div id=3D"outline-container-orge601b8b" class=3D"outline-4">
<h4 id=3D"orge601b8b">Changelog</h4>
<div class=3D"outline-text-4" id=3D"text-orge601b8b">
<ul class=3D"org-ul">
<li>merlin binary
<ul class=3D"org-ul">
<li>fix completion of pattern matchings with exception patterns (#1169)</li>
<li>delegate configuration reading to external programs via a simple protoc=
ol and create a new package <code>dot-merlin-reader</code> with a binary th=
at reads <code>.merlin</code> files. (#1123, #1152)</li>
</ul></li>
</ul>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org8cb1302" class=3D"outline-2">
<h2 id=3D"7">gRPC server and client in OCaml</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/grpc-server-and-client-in-o=
caml/6465/1">https://discuss.ocaml.org/t/grpc-server-and-client-in-ocaml/64=
65/1</a>
</p>
</div>

<div id=3D"outline-container-orgc1c2f08" class=3D"outline-3">
<h3 id=3D"orgc1c2f08">blandinw announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc1c2f08">
<p>
TL;DR <a href=3D"https://github.com/blandinw/ocaml-grpc-envoy/">https://git=
hub.com/blandinw/ocaml-grpc-envoy/</a>
</p>

<p>
Hey, I'm new to OCaml after writing some Clojure, C++ and Haskell in variou=
s contexts, including
working at FB (relevant below).
</p>

<p>
After browsing this forum and Reddit for a bit, the assumption seems to be =
that OCaml is not a good fit
for gRPC, since there's no pure implementation today. Now, this is somethin=
g I have experience with, so
I thought I'd try and challenge this assumption.
</p>

<p>
As you may know, services inside FB use Thrift (both the format and protoco=
l) to communicate. The
Thrift team worked primarily in C++ (for good reasons), causing support for=
 other languages to lag
behind despite their best efforts. Now, the interchange format (equivalent =
to Protobuf) does not change
very often so it's fine to have a per-language implementation, but the clie=
nt and server (equivalent to
HTTP2 + gRPC) frequently receive new features, optimizations and fixes. Aft=
er a valiant and continued
effort to support most languages used internally, the Thrift team came up w=
ith an idea. Instead of
maintaining multiple implementations and dealing with obscure FFI bugs,
~FingerprintTrustManagerFactory~s and whatnot, they would focus solely on t=
he C++ implementation and
provide a daemon to be ran alongside whatever code you were trying to run. =
You could then use simple
IPC to exchange Thrift (the format) messages with that daemon, and it would=
 handle all the nitty-gritty
of running a service at scale (load balancing, connection pooling, service =
discovery, security,
retries, timeouts, network stats, hot restarts, etc.). Needless to say, it =
worked remarkably well even
at very high scale and everybody was much happier.
</p>

<p>
I wanted to replicate this idea with OCaml and gRPC. We already have suppor=
t for protobuf thanks to the
excellent <code>ocaml-protoc</code>. All we need is a way to exchange proto=
buf messages reliably on the wire.
Instead of having an OCaml implementation that will have to stay up-to-date=
 and have its own set of
bugs (the official <code>grpc/grpc-java</code> repo has 4450 commits and 24=
00 issues at the moment), can we reuse
existing infra with already massive support and production time?
</p>

<p>
Fortunately, the people at Lyft built just that, open-sourced it and contri=
buted it to the Cloud Native
Computing Foundation in late 2017. It is called Envoy and it is bliss.
</p>

<p>
I demonstrate how to fit these pieces together at
<a href=3D"https://github.com/blandinw/ocaml-grpc-envoy/">blandinw/ocaml-gr=
pc-envoy</a> to build a simple KV store,
including a gRPC client and server in 200 lines of OCaml code. The idea is =
to spawn an Envoy process
that will handle all gRPC communication for our OCaml code. We use HTTP/1.1=
 to exchange Protobuf
messages with it, using for example <code>httpaf</code> and <code>Lwt</code=
>. This solution has the added benefit that it is
highly scalable from the start, allowing you for instance to spawn one OCam=
l process per core and load
balance between them. You can also use Envoy (with proper config!) as your =
web reverse proxy instead of
say, nginx.
</p>

<p>
At the very least, this solution allows us to start writing gRPC code today=
, and gracefully evolve
towards HTTP/2, Multicore and maybe a native OCaml implementation later.
</p>

<p>
I'm curious to hear your perspective on the future of building services wit=
h OCaml, or your past
experience like what went well, what was missing, etc.
</p>
</div>
</div>


<div id=3D"outline-container-org4fe2e9d" class=3D"outline-3">
<h3 id=3D"org4fe2e9d">Yawar Amin asked and blandinw replied</h3>
<div class=3D"outline-text-3" id=3D"text-org4fe2e9d">
<blockquote>
<p>
Fantastic idea. So if I understand correctly, the only thing that Envoy (se=
rver-side) is doing is
translating the Protobuf from gRPC HTTP2 transport to HTTP1, and forwarding=
 these Protobuf objects over
HTTP1 to the OCaml server? Envoy doesn't know to know about the actual gRPC=
 schema, because it doesn't
touch the Protobuf objects themselves, right?
</p>
</blockquote>

<p>
That's correct. Envoy is only concerned with transporting bytes (along with=
 load balancing, routing,
etc, etc). Only OCaml knows about the Protobuf schemas.
</p>

<p>
In the OCaml server case, Envoy listens for HTTP/2 gRPC requests, accesses =
the bytes payload with no
knowledge of the actual schema/layout and repackages these same bytes in a =
HTTP/1.1 request that OCaml
can process. OCaml then responds with bytes (an encoded Protobuf response m=
essage) that Envoy sends
back on the original HTTP2 connection.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orga13c18f" class=3D"outline-2">
<h2 id=3D"8">Bitstring (and ppx_bitstring) 4.0.0</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-bitstring-and-ppx-bitst=
ring-4-0-0/6471/1">https://discuss.ocaml.org/t/ann-bitstring-and-ppx-bitstr=
ing-4-0-0/6471/1</a>
</p>
</div>

<div id=3D"outline-container-org5646b6c" class=3D"outline-3">
<h3 id=3D"org5646b6c">xrguerin announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5646b6c">
</div>
<div id=3D"outline-container-org5647ea7" class=3D"outline-4">
<h4 id=3D"org5647ea7">Features</h4>
<div class=3D"outline-text-4" id=3D"text-org5647ea7">
<ul class=3D"org-ul">
<li>Add support for let bindings introduced in 4.08</li>
<li>Switch to PPXLIB</li>
</ul>
</div>
</div>

<div id=3D"outline-container-org9c85043" class=3D"outline-4">
<h4 id=3D"org9c85043">Deprecations</h4>
<div class=3D"outline-text-4" id=3D"text-org9c85043">
<p>
As PPXLIB requires <code>ocaml &gt;=3D 4.04</code> support for earlier vers=
ions has been dropped.
</p>
</div>
</div>

<div id=3D"outline-container-orge435fcb" class=3D"outline-4">
<h4 id=3D"orge435fcb">Breaking changes</h4>
<div class=3D"outline-text-4" id=3D"text-orge435fcb">
<p>
This release splits the library from the PPX to reduce runtime dependencies=
. Projects using the PPX
from bitstring will need to also depends on ppx_bitstring from now on.
</p>
</div>
</div>
</div>


<div id=3D"outline-container-orgbd67eb0" class=3D"outline-3">
<h3 id=3D"orgbd67eb0">Rudi Grinberg added</h3>
<div class=3D"outline-text-3" id=3D"text-orgbd67eb0">
<p>
The project is hosted <a href=3D"https://github.com/xguerin/bitstring">here=
</a> for those who are interested.There's
also some excellent <a href=3D"https://bitstring.software/documentation/">d=
ocs</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgfa70e19" class=3D"outline-2">
<h2 id=3D"orgfa70e19">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-orgfa70e19">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

