Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id B4A5A7F89E
	for <caml-list@sympa.inria.fr>; Mon, 31 Mar 2014 17:39:52 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.216.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.216.41 as permitted
  sender) identity=mailfrom; client-ip=209.85.216.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qa0-f41.google.com) identity=helo;
  client-ip=209.85.216.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qa0-f41.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqEBAJ2LOVPRVdgplWdsb2JhbABZhBjELwgWDgEBAQEHDQkJEiqCbAEbHgMSCQddAREBBQEih3cBAxGfJ4MOjF+DDpZbChknDWSGIxEBBQyTMgSYTpBGGCmEeiE
X-IPAS-Result: AqEBAJ2LOVPRVdgplWdsb2JhbABZhBjELwgWDgEBAQEHDQkJEiqCbAEbHgMSCQddAREBBQEih3cBAxGfJ4MOjF+DDpZbChknDWSGIxEBBQyTMgSYTpBGGCmEeiE
X-IronPort-AV: E=Sophos;i="4.97,766,1389740400"; 
   d="scan'208";a="54896584"
Received: from mail-qa0-f41.google.com ([209.85.216.41])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 31 Mar 2014 17:39:51 +0200
Received: by mail-qa0-f41.google.com with SMTP id j5so8284102qaq.14
        for <caml-list@inria.fr>; Mon, 31 Mar 2014 08:39:50 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=CpePDlPtfU0my7HrXiedSpGuwbbnyVWzW5309OYfkPY=;
        b=ePBLxJQZDe018gQa/A3PDYrRYZ/MUBjqn2NY/UH224IY2Ti0kXKZkh1xEvc6OBpdkP
         6EKQML37rvaO100JxSspqSJobWJ4BS/eqbjmVXUegwyF7nCEVypROANk03/ZYRuuAFAR
         YeeMoGik7/+LyvSLlDoQlco3v1oTYvytXFb48irHrlD6qLElK4UrgilUeJ0wCMCDJH//
         ACX0ZORgFO0lk2brkoVtKHo8f+gpmTrtTd30J1DjiaFyLsrsxdrL+o7w6uiC7pao4ByW
         wNnByJk8TEIjfQLREF09vWrHUqai6J8srWOR4GZWjDdYalg4LQJBOL6dWkYbcunMt9Uo
         Ehog==
X-Received: by 10.224.14.14 with SMTP id e14mr8353407qaa.80.1396280381371;
 Mon, 31 Mar 2014 08:39:41 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.168.72 with HTTP; Mon, 31 Mar 2014 08:39:21 -0700 (PDT)
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Mon, 31 Mar 2014 11:39:21 -0400
Message-ID: <CAN6ygOnF4oz6+bWhz_S-ZybLoyzySnQkN8Z-5ggj2RS-5PrKKw@mail.gmail.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=60eb69fdf4ef237b9304f5e8dc9b
Subject: [Caml-list] Ocaml compiler documentation

--60eb69fdf4ef237b9304f5e8dc9b
Content-Type: text/plain; charset=ISO-8859-1

Hi everybody

It's been mentioned before that the OCaml compiler's documentation is
somewhat lacking. I've been going over the compiler code gradually (both
the frontend and the backend) and while some parts are understandable
enough, others are missing some basic explanations. Some explanations are
also spread out throughout the codebase, making it hard to know what
something means unless you've read another part of the codebase that
relates to it.

Since the call to submit documentation commits has gone mostly unanswered,
I'd like to suggest a method of making both my own progress through the
code easier and hopefully making it easier for others who will follow.

What I'm going to do is, focusing on more or less one file at a time, I'll
post newbie questions to the list about the code. Once I'm satisfied that I
have a good enough understanding, I'll add comments to the aforementioned
files and submit pull requests for them. I also encourage others to do the
same.

What I need from the list, and especially from the more knowledgeable
members (who already know the compiler code) is the willingness to explain
the concepts and answer my questions, annoying as they may be. I have a
pretty decent background in compilers, ASTs, code generation, etc, but not
so much in type inference.

I'm not suggesting a particular timeframe for this process -- I'm doing
this on the side while working on a research project and TAing, but I
really would like to get to the point where I can make significant
contributions to the toolchain, and if I can help others who follow in my
footsteps, then that's a nice bonus.

While I could have skipped this introduction and just proceeded with
inundating the list with questions, I felt that this (hopefully) gives a
purpose and perhaps motivation for those who have the answers to answer my
questions even if they get annoying. In particular, I may often miss some
parts that may seem obvious because I don't necessarily have the time to
read all the connected code in depth. Hopefully you'll bear with me.

Does this sound reasonable to the fine folks on the list?

Yotam

--60eb69fdf4ef237b9304f5e8dc9b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div><div><div>Hi everybody<br><br></div>It=
&#39;s been mentioned before that the OCaml compiler&#39;s documentation is=
 somewhat lacking. I&#39;ve been going over the compiler code gradually (bo=
th the frontend and the backend) and while some parts are understandable en=
ough, others are missing some basic explanations. Some explanations are als=
o spread out throughout the codebase, making it hard to know what something=
 means unless you&#39;ve read another part of the codebase that relates to =
it.<br>


<br>Since the call to submit documentation commits has gone mostly unanswer=
ed, I&#39;d like to suggest a method of making both my own progress through=
 the code easier and hopefully making it easier for others who will follow.=
 <br>


<br></div>What I&#39;m going to do is, focusing on more or less one file at=
 a time, I&#39;ll post newbie questions to the list about the code. Once I&=
#39;m satisfied that I have a good enough understanding, I&#39;ll add comme=
nts to the aforementioned files and submit pull requests for them. I also e=
ncourage others to do the same.<br>


<br>What I need from the list, and especially from the more knowledgeable m=
embers (who already know the compiler code) is the willingness to explain t=
he concepts and answer my questions, annoying as they may be. I have a pret=
ty decent background in compilers, ASTs, code generation, etc, but not so m=
uch in type inference.<br>


<br></div>I&#39;m not suggesting a particular timeframe for this process --=
 I&#39;m doing this on the side while working on a research project and TAi=
ng, but I really would like to get to the point where I can make significan=
t contributions to the toolchain, and if I can help others who follow in my=
 footsteps, then that&#39;s a nice bonus.<br>


<br></div>While I could have skipped this introduction and just proceeded w=
ith inundating the list with questions, I felt that this (hopefully) gives =
a purpose and perhaps motivation for those who have the answers to answer m=
y questions even if they get annoying. In particular, I may often miss some=
 parts that may seem obvious because I don&#39;t necessarily have the time =
to read all the connected code in depth. Hopefully you&#39;ll bear with me.=
<br>


<br></div>Does this sound reasonable to the fine folks on the list?<br><br>=
</div>Yotam<br></div>

--60eb69fdf4ef237b9304f5e8dc9b--
