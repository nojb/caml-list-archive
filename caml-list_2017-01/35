Return-Path: <antronbachin@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id D2A69800BE
	for <caml-list@sympa.inria.fr>; Fri,  6 Jan 2017 20:41:39 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=antronbachin@gmail.com; spf=Pass smtp.mailfrom=antronbachin@gmail.com; spf=None smtp.helo=postmaster@mail-it0-f54.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  antronbachin@gmail.com) identity=pra;
  client-ip=209.85.214.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="antronbachin@gmail.com";
  x-sender="antronbachin@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  antronbachin@gmail.com designates 209.85.214.54 as permitted
  sender) identity=mailfrom; client-ip=209.85.214.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="antronbachin@gmail.com";
  x-sender="antronbachin@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-it0-f54.google.com) identity=helo;
  client-ip=209.85.214.54;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="antronbachin@gmail.com";
  x-sender="postmaster@mail-it0-f54.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AGqmvZRzxmj+KnxzXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2uIeIJqq85mqBkHD//Il1AaPBtSHragdwLOM7+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fdbghMizexe61+IAi5oQnMqMUbjpZpJ7osxBfOvnZGYf?=
 =?us-ascii?q?ldy3lyJVKUkRb858Ow84Bm/i9Npf8v9NNOXLvjcaggQrNWEDopM2Yu5M32rhbD?=
 =?us-ascii?q?VheA5mEdUmoNjBVFBRXO4QzgUZfwtiv6sfd92DWfMMbrQ704RSiu4qF2QxLzli?=
 =?us-ascii?q?wJKyA2/33WisxojaJUvhShpwBkw4XJZI2ZLedycr/Bcd8fQ2dOWdtfVzFaAoOk?=
 =?us-ascii?q?cYQAE/YBM+hfr4n4vVQOrB2+DhSoCO7gzjJEg3n71rA43es8CwHLxBAvEN0Tvn?=
 =?us-ascii?q?rUrtr7OqQcUe6rwqfP1jjMde9a2TLn5YjIbhwso/eBVq9wf8rLzkkvEhvIg0mW?=
 =?us-ascii?q?qYz5ODOV0PkGvnWB4OV8VeKvimgnoBx2rze1wMcslpPJhoUTyl/f7yp23IY1Jd?=
 =?us-ascii?q?y+SENgbt6kFYFftyCeN4dsXswiRGRotT88x7Ybt5C7ey0Kx44mxx7Zc/GHco6I?=
 =?us-ascii?q?4gjiVOmLOzt4imhldKqwhxaz7UigyvD8WdKu3FlWqSpFl8HAt3AX2BzT7ciHTe?=
 =?us-ascii?q?Fx8Vum2TaKzwzT8f9LIUUqlaXFMZ4t2LkwloAcsUnFAyT4m132gbeIekk4/uWk?=
 =?us-ascii?q?8efqb7X8qpOCKoN5hRvyP6Qhl8CnH+g1MxQCU3We9Oii27Dv4Uj0T6lLg/Eqjq?=
 =?us-ascii?q?XUtZPXKt8GqaKlBgJY04Yu6xikADqj39kVkmcLIExAdR2Zi4XkNV/DLfX5APq9?=
 =?us-ascii?q?g1mhlDFmzO3cMLL7GJXCNH3Dna/hfblj705czxI+zdVF6JJVDrENOfPzWlPtuN?=
 =?us-ascii?q?DBAB80MwO5z/zoCNV60YMeVmaPDbGDPKzOtl+I4/ojI+iKZIALpDbwM+Yp6+Lq?=
 =?us-ascii?q?gHMjmlIQfbOl0YUKZH23BPhrI0qUbWLpgtgbEGcKugQ+TPbtiF2HSTNcfXCyX7?=
 =?us-ascii?q?4m5jE8DoKpFp3MSZytgLyA2ie2BZJWZmVcBVCNFXfkbZmLW/AJaC6KOM9ujiQE?=
 =?us-ascii?q?VaS9S48mzRyhqBX1y79jLubN/i0YtInj1MRu6u3IlRAy8CR0AN6H32GMSWF0hG?=
 =?us-ascii?q?IISCUs0KBxu0wugmuEhIlmivoQOttP4O1CUgYmLtaIzvJ1I9H/Vw+Hec2GHgWI?=
 =?us-ascii?q?WNKjVBg3UtU3i/UHaEZ8HZ32hxbfxS2sCbYel72NLJMx+6PYmXP2IpAumD79yK?=
 =?us-ascii?q?A9ggx+EYN0Pmq8i/s6qlHe?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DvAAAf8m9YhjbWVdFVCRoBAQEBAgEBA?=
 =?us-ascii?q?QEIAQEBARYBAQEDAQEBCQEBAYJnJwEBAQEBfoEMjVeSIYI1iwIQgjWCQoJoggk?=
 =?us-ascii?q?shXYCgVU/FAEBAQEBAQEBAQEBEgEBAQgLCwodMIIzGoIbAQEBAwEjHQEbEgsBA?=
 =?us-ascii?q?wELBgULAwoMARoDAgIhAhEBBQEKAREGExICBog6AQMQCAENo3s/jAOCAwUBHIM?=
 =?us-ascii?q?JBYNiChknAwpUggIBAQEBAQEBAwEBAQEBAQEBAQEBFQIGCQEIiDWBWYEGgk4bg?=
 =?us-ascii?q?TZUglstgjEFhx0MgVqGEnxIhEGFQziGWIU1gT6DfIF3UYQ3gxgyhhKKA4Qpgl8?=
 =?us-ascii?q?ygRQPEIFHEhtKDwEDggaBWCkPEQuBflQBiGUBAQE?=
X-IPAS-Result: =?us-ascii?q?A0DvAAAf8m9YhjbWVdFVCRoBAQEBAgEBAQEIAQEBARYBAQE?=
 =?us-ascii?q?DAQEBCQEBAYJnJwEBAQEBfoEMjVeSIYI1iwIQgjWCQoJoggkshXYCgVU/FAEBA?=
 =?us-ascii?q?QEBAQEBAQEBEgEBAQgLCwodMIIzGoIbAQEBAwEjHQEbEgsBAwELBgULAwoMARo?=
 =?us-ascii?q?DAgIhAhEBBQEKAREGExICBog6AQMQCAENo3s/jAOCAwUBHIMJBYNiChknAwpUg?=
 =?us-ascii?q?gIBAQEBAQEBAwEBAQEBAQEBAQEBFQIGCQEIiDWBWYEGgk4bgTZUglstgjEFhx0?=
 =?us-ascii?q?MgVqGEnxIhEGFQziGWIU1gT6DfIF3UYQ3gxgyhhKKA4Qpgl8ygRQPEIFHEhtKD?=
 =?us-ascii?q?wEDggaBWCkPEQuBflQBiGUBAQE?=
X-IronPort-AV: E=Sophos;i="5.33,326,1477954800"; 
   d="scan'208,217";a="207440499"
Received: from mail-it0-f54.google.com ([209.85.214.54])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 06 Jan 2017 20:41:37 +0100
Received: by mail-it0-f54.google.com with SMTP id 192so23097641itl.0
        for <caml-list@inria.fr>; Fri, 06 Jan 2017 11:41:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:subject:from:in-reply-to:date:cc:message-id:references
         :to;
        bh=VOg0FaHQ2amYKiuGUr7393eIwAoTEZp+Wjiwlv1VJ98=;
        b=mwYGDgQrj5x8oIytZIzseTciAHIg8/HJo1dCaEm/ObN2ZZrV9nGqBzcrCX5Ws197+D
         6fIyI7yKfxOvhbWhwEh5bA3tnMzF7P338/U3fXaJfWoXS9A3gqullA6oNzfP9GSCDbUS
         SKbVUbPeIaEdD7oOcJ46pHChPUGNIi1vkTBZjhV2g13Mbk+agKL5Pt9PvydBZbPslTQf
         KSVlupspIw6m+901H9bv+cmkGKW0TutD1rW7QckH8fEl04CWvUJNlDRf/KFwWeOV//Vs
         fUOLzQCQXsZFEXD7S1vonK747RI7SzdyGwTvgqNhe8SQuuk9NsMuQOqMPfaDhrxEgg56
         OBOw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :message-id:references:to;
        bh=VOg0FaHQ2amYKiuGUr7393eIwAoTEZp+Wjiwlv1VJ98=;
        b=Aw9bOaMLDpnV5LV7tpNKqY/9oEl8VZ9pdsBj+dyNjbpgEKq3QUNg5w1crrkp5QFKJl
         tEIBQE/NPYoO4uajyhJ5msLalKyVSDXZJn/S0Etn8TM1dicgyhUAZsjwj59S75iwljTh
         ekSKhQrIKql7XWoYLsQSdR+2LfxY+NaujI64fqOSvBtuMzEXqjrfZhYdk3/14L5Fbj8B
         KwIVApMnY95He90XLmm3XTRcT/Eh9/EPqysmLYblYzxK9rnYzPeDWEYKX50CRLmjPJxx
         ivz9I+6fsqdCEKkKgepGYT/7qC+rgjm3UEWh3OgqTNTVJizvQdya7cFKXj0Q98As+fiD
         ABtA==
X-Gm-Message-State: AIkVDXKZ8AvTch6xHgVhdy/K4m6tf65E9nWyaZ1LX2nxVtOgHiuSh3x7JOmxZGwyT4vMMA==
X-Received: by 10.36.116.202 with SMTP id o193mr243365itc.96.1483731696602;
        Fri, 06 Jan 2017 11:41:36 -0800 (PST)
Received: from ?IPv6:2601:240:c600:8bd0:65fb:4422:e933:6759? ([2601:240:c600:8bd0:65fb:4422:e933:6759])
        by smtp.gmail.com with ESMTPSA id 141sm1900013itl.17.2017.01.06.11.41.34
        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Fri, 06 Jan 2017 11:41:35 -0800 (PST)
Content-Type: multipart/alternative; boundary="Apple-Mail=_8105CE3C-9084-4388-AF99-1472E8E2D692"
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2070.6\))
From: Anton Bachin <antronbachin@gmail.com>
In-Reply-To: <CALdWJ+wDTuRn1inxZvw1ABXR497z=OWab6MxZ+RMUmGOD52mCg@mail.gmail.com>
Date: Fri, 6 Jan 2017 13:41:34 -0600
Cc: "caml-list@inria.fr users" <caml-list@inria.fr>
X-Mao-Original-Outgoing-Id: 505424494.332359-c28e8f07c2e27d79e46dad0b112749bb
Message-Id: <3E0A0A1C-BEEE-464C-907E-663038F0DAF6@gmail.com>
References: <22A97EAF-DBFF-4FE8-90C3-0343533CC621@gmail.com> <CALdWJ+wDTuRn1inxZvw1ABXR497z=OWab6MxZ+RMUmGOD52mCg@mail.gmail.com>
To: Ivan Gotovchits <ivg@ieee.org>
X-Mailer: Apple Mail (2.2070.6)
Subject: Re: [Caml-list] =?UTF-8?Q?=5BANN=5D_Lwt_2=2E7=2E0_=E2=80=93_monad?=
 =?UTF-8?Q?ic_promises=3B_concurrent_I/O?=


--Apple-Mail=_8105CE3C-9084-4388-AF99-1472E8E2D692
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Ivan,

I personally would have preferred to call them futures. I actually come
from a C++ background, including modern C++, and also I just like the
word "future" more than "promise."

However, I read through some articles, blogs, and SO posts, and came
away with the impression that the terminology is really not settled
between languages. Given that, I chose "promise" and "resolver" with the
following reasoning:

- The term promise is used in JavaScript.
- A large number of programmers use JavaScript.
- Lwt compiles to JavaScript sometimes.
- We may want to give special support for interfacing between Lwt and
  JavaScript promises one day [1].
- Presumably, the people who standardized on "promise" in JavaScript had
  good reasons for doing so, which I don't have time to deeply
  investigate at the moment. While it is true that C++, among other
  communities, standardized on different terminology, and also had good
  reasons for doing so, the JavaScript precedent suggests that "promise"
  is somehow defensible. I am "calling" on this precedent as an opaque
  "library" of argument and experience. This may be a mistake :)
- I believe, during their process, JavaScript eventually explicitly rejected
  both terms "future" and "deferred."
- "resolver" is just what I was left with after assigning "promise" to
  what I thought should be "future" :)

The work-in-progress manual uses these terms.

It is possible to change the terminology, with suitable arguments. The
terminology issue is in GitHub [2].

Best,
Anton


[1]: https://github.com/ocsigen/lwt/issues/270
[2]: https://github.com/ocsigen/lwt/issues/300


> El ene 6, 2017, a las 12:00, Ivan Gotovchits <ivg@ieee.org> escribi=C3=B3:
>=20
> These are the great news!=20
>=20
> And thanks for the maintainers notification, it was really helpful :)
>=20
> I have one comment, though:
>=20
>=20=20
> Values of types 'a Lwt.t are now called promises rather than threads.
>   This should eliminate a lot of confusion for beginners.
>=20
> And create a confusion for seasoned programmers, especially for those who=
 are accustomed to=20
> C++ newly introduced concepts, like promises and futures, where a promise=
 has quite an opposite
> meaning.  In short, it has the same meaning as a value of type  `'a Lwt.u=
`, i.e., it is an object through
> which a promise can be fulfilled. I think that it is better to refer to L=
wt.t threads as futures because they
> are the values, whose value is determined in the future. Another way to n=
ame them is `deferred`, again
> for the same reason. You can also say, that a value of type `'a Lwt.t` is=
 a computation. You can also try
> to borrow names from the Standard ML community, where `'a Lwt.t` like obj=
ects are named as IVars.
>=20
> Finally, you may also find this project interesting [1]. This is an attem=
pt to factor out the core idea from both
> Core Async and Lwt. In particular, the Future library allows us to write =
a monadic code, that is independent
> of a particular implementation (Lwt or Async or Identity monad).=20=20
>=20
> [1]: https://github.com/BinaryAnalysisPlatform/bap/blob/master/lib/bap_fu=
ture/bap_future.mli <https://github.com/BinaryAnalysisPlatform/bap/blob/mas=
ter/lib/bap_future/bap_future.mli>
>=20
> On Fri, Jan 6, 2017 at 11:08 AM, Anton Bachin <antronbachin@gmail.com <ma=
ilto:antronbachin@gmail.com>> wrote:
> Greetings,
>=20
> I am pleased to announce release 2.7.0 of Lwt.
>=20
>   https://github.com/ocsigen/lwt <https://github.com/ocsigen/lwt>
>=20
> The primary goals of this release are (1) to improve communication
> between maintainers and users, and (2) to prepare for (minor) breaking
> changes to some APIs in Lwt 3.0.0 (planned for April). The changelog is
> available here:
>=20
>   https://github.com/ocsigen/lwt/releases/tag/2.7.0 <https://github.com/o=
csigen/lwt/releases/tag/2.7.0>
>=20
> - Lwt now uses deprecation warnings ([@deprecated]), especially for
>   upcoming breaking changes [1]. This required dropping support for
>   OCaml 4.01.
> - There is a gradual, communicative, conservative process for
>   deprecation and breaking [2]. Maintainers of packages in OPAM get
>   notified proactively (see [1] again). If you have code not published
>   in OPAM, watch the Lwt repo, recompile the code at least once in three
>   months, watch this mailing list, or subscribe to the Lwt announcements
>   issue [3].
> - If a planned breaking change is a bad idea, please let the maintainers
>   know when you see the warning.
> - Lwt now uses semantic versioning [4]. The major version will grow
>   slowly but steadily, but this does not mean that the whole API is
>   being redesigned or broken.
>=20
> If you are releasing a package to OPAM that depends on Lwt, it is not
> recommended to constrain Lwt to its current major version. A major
> release of Lwt will break only a few APIs, and your package is likely
> not to be affected =E2=80=93 if it is, you will be notified. You may, how=
ever,
> wish to constrain Lwt to a major version in your private or production
> code.
>=20
> - The main OPAM package lwt is getting rid of some optional
>   dependencies in 3.0.0, which are now installable through separate OPAM
>   packages lwt_ssl, lwt_glib, lwt_react. This is to reduce recompilation
>   of Lwt when installing OPAM packages ssl, lablgtk, and react.
> - Values of types 'a Lwt.t are now called promises rather than threads.
>   This should eliminate a lot of confusion for beginners.
>=20
> Lwt 2.7.0 also has a number of more ordinary changes, such as bug fixes
> and the addition of bindings to writev and readv. See the full
> changelog [5].
>=20
> I am working on an all-new manual, including fully rewritten API
> documentation with examples. It should be ready towards the end of
> winter.
>=20
> My hope is that all the above allows Lwt to be taken progressively into
> the future, at the same time making development more open and more
> humane :)
>=20
> Best,
> Anton
>=20
>=20
> [1]: https://github.com/ocsigen/lwt/issues/308 <https://github.com/ocsige=
n/lwt/issues/308>
> [2]: https://github.com/ocsigen/lwt/issues/293 <https://github.com/ocsige=
n/lwt/issues/293>
> [3]: https://github.com/ocsigen/lwt/issues/309 <https://github.com/ocsige=
n/lwt/issues/309>
> [4]: http://semver.org/ <http://semver.org/>
> [5]: https://github.com/ocsigen/lwt/releases/tag/2.7.0 <https://github.co=
m/ocsigen/lwt/releases/tag/2.7.0>
>=20
>=20
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list <https://sympa.inria.fr/sympa/=
arc/caml-list>
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners <http://gr=
oups.yahoo.com/group/ocaml_beginners>
> Bug reports: http://caml.inria.fr/bin/caml-bugs <http://caml.inria.fr/bin=
/caml-bugs>


--Apple-Mail=_8105CE3C-9084-4388-AF99-1472E8E2D692
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dutf-8"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: s=
pace; -webkit-line-break: after-white-space;" class=3D""><div class=3D""><d=
iv class=3D"">Ivan,</div><div class=3D""><br class=3D""></div><div class=3D=
"">I personally would have preferred to call them futures. I actually come<=
/div><div class=3D"">from a C++ background, including modern C++, and also =
I just like the</div><div class=3D"">word "future" more than "promise."</di=
v><div class=3D""><br class=3D""></div><div class=3D"">However, I read thro=
ugh some articles, blogs, and SO posts, and came</div><div class=3D"">away =
with the impression that the terminology is really not settled</div><div cl=
ass=3D"">between languages. Given that, I chose "promise" and "resolver" wi=
th the</div><div class=3D"">following reasoning:</div><div class=3D""><br c=
lass=3D""></div><div class=3D"">- The term promise is used in JavaScript.</=
div><div class=3D"">- A large number of programmers use JavaScript.</div><d=
iv class=3D"">- Lwt compiles to JavaScript sometimes.</div><div class=3D"">=
- We may want to give special support for interfacing between Lwt and</div>=
<div class=3D"">&nbsp; JavaScript promises one day [1].</div><div class=3D"=
">- Presumably, the people who standardized on "promise" in JavaScript had<=
/div><div class=3D"">&nbsp; good reasons for doing so, which I don't have t=
ime to deeply</div><div class=3D"">&nbsp; investigate at the moment. While =
it is true that C++, among other</div><div class=3D"">&nbsp; communities, s=
tandardized on different terminology, and also had good</div><div class=3D"=
">&nbsp; reasons for doing so, the JavaScript precedent suggests that "prom=
ise"</div><div class=3D"">&nbsp; is somehow defensible. I am "calling" on t=
his precedent as an opaque</div><div class=3D"">&nbsp; "library" of argumen=
t and experience. This may be a mistake :)</div><div class=3D"">- I believe=
, during their process, JavaScript eventually explicitly rejected</div><div=
 class=3D"">&nbsp; both terms "future" and "deferred."</div><div class=3D""=
>- "resolver" is just what I was left with after assigning "promise" to</di=
v><div class=3D"">&nbsp; what I thought should be "future" :)</div><div cla=
ss=3D""><br class=3D""></div><div class=3D"">The work-in-progress manual us=
es these terms.</div><div class=3D""><br class=3D""></div><div class=3D"">I=
t is possible to change the terminology, with suitable arguments. The</div>=
<div class=3D"">terminology issue is in GitHub [2].</div><div class=3D""><b=
r class=3D""></div><div class=3D"">Best,</div><div class=3D"">Anton</div><d=
iv class=3D""><br class=3D""></div><div class=3D""><br class=3D""></div><di=
v class=3D"">[1]: <a href=3D"https://github.com/ocsigen/lwt/issues/270" cla=
ss=3D"">https://github.com/ocsigen/lwt/issues/270</a></div><div class=3D"">=
[2]: <a href=3D"https://github.com/ocsigen/lwt/issues/300" class=3D"">https=
://github.com/ocsigen/lwt/issues/300</a></div></div><div class=3D""><br cla=
ss=3D""></div><br class=3D""><div><blockquote type=3D"cite" class=3D""><div=
 class=3D"">El ene 6, 2017, a las 12:00, Ivan Gotovchits &lt;<a href=3D"mai=
lto:ivg@ieee.org" class=3D"">ivg@ieee.org</a>&gt; escribi=C3=B3:</div><br c=
lass=3D"Apple-interchange-newline"><div class=3D""><div dir=3D"ltr" class=
=3D""><div class=3D"">These are the great news!&nbsp;</div><div class=3D"">=
<br class=3D""></div><div class=3D"">And thanks for the maintainers&nbsp;no=
tification, it was really helpful :)</div><div class=3D""><br class=3D""></=
div><div class=3D"">I have one comment, though:</div><div class=3D""><br cl=
ass=3D""></div><div class=3D"">&nbsp;</div><blockquote class=3D"gmail_quote=
" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);=
padding-left:1ex">Values of types 'a Lwt.t are now called promises rather t=
han threads.<br class=3D"">&nbsp; This should eliminate a lot of confusion =
for beginners.</blockquote><div class=3D""><br class=3D""></div><div class=
=3D"">And create a confusion for seasoned programmers, especially for those=
 who are accustomed to&nbsp;</div><div class=3D"">C++ newly introduced conc=
epts, like promises and futures, where a promise has quite an&nbsp;opposite=
</div><div class=3D"">meaning.&nbsp; In short, it has the same meaning as a=
 value of type &nbsp;`'a Lwt.u`, i.e., it is an object through<br class=3D"=
"></div><div class=3D"">which a promise can be fulfilled. I think that it i=
s better to refer to Lwt.t threads as futures&nbsp;because they</div><div c=
lass=3D"">are the values, whose value is determined in the future. Another =
way to name them is `deferred`, again</div><div class=3D"">for the same rea=
son. You can also say, that a value of type `'a Lwt.t` is a computation. Yo=
u can also try</div><div class=3D"">to borrow names from the Standard ML co=
mmunity, where `'a Lwt.t` like objects are named as IVars.</div><div class=
=3D""><br class=3D""></div><div class=3D"">Finally, you may also find this =
project interesting [1]. This is an attempt&nbsp;to factor out the core ide=
a from both</div><div class=3D"">Core Async and Lwt. In particular, the Fut=
ure library allows us to write a monadic code, that is independent</div><di=
v class=3D"">of a particular implementation (Lwt&nbsp;or Async or Identity =
monad). &nbsp;</div><div class=3D""><br class=3D""></div><div class=3D"">[1=
]:&nbsp;<a href=3D"https://github.com/BinaryAnalysisPlatform/bap/blob/maste=
r/lib/bap_future/bap_future.mli" class=3D"">https://github.com/BinaryAnalys=
isPlatform/bap/blob/master/lib/bap_future/bap_future.mli</a></div></div><di=
v class=3D"gmail_extra"><br class=3D""><div class=3D"gmail_quote">On Fri, J=
an 6, 2017 at 11:08 AM, Anton Bachin <span dir=3D"ltr" class=3D"">&lt;<a hr=
ef=3D"mailto:antronbachin@gmail.com" target=3D"_blank" class=3D"">antronbac=
hin@gmail.com</a>&gt;</span> wrote:<br class=3D""><blockquote class=3D"gmai=
l_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=
:1ex">Greetings,<br class=3D"">
<br class=3D"">
I am pleased to announce release 2.7.0 of Lwt.<br class=3D"">
<br class=3D"">
&nbsp; <a href=3D"https://github.com/ocsigen/lwt" rel=3D"noreferrer" target=
=3D"_blank" class=3D"">https://github.com/ocsigen/lwt</a><br class=3D"">
<br class=3D"">
The primary goals of this release are (1) to improve communication<br class=
=3D"">
between maintainers and users, and (2) to prepare for (minor) breaking<br c=
lass=3D"">
changes to some APIs in Lwt 3.0.0 (planned for April). The changelog is<br =
class=3D"">
available here:<br class=3D"">
<br class=3D"">
&nbsp; <a href=3D"https://github.com/ocsigen/lwt/releases/tag/2.7.0" rel=3D=
"noreferrer" target=3D"_blank" class=3D"">https://github.com/ocsigen/<wbr c=
lass=3D"">lwt/releases/tag/2.7.0</a><br class=3D"">
<br class=3D"">
- Lwt now uses deprecation warnings ([@deprecated]), especially for<br clas=
s=3D"">
&nbsp; upcoming breaking changes [1]. This required dropping support for<br=
 class=3D"">
&nbsp; OCaml 4.01.<br class=3D"">
- There is a gradual, communicative, conservative process for<br class=3D"">
&nbsp; deprecation and breaking [2]. Maintainers of packages in OPAM get<br=
 class=3D"">
&nbsp; notified proactively (see [1] again). If you have code not published=
<br class=3D"">
&nbsp; in OPAM, watch the Lwt repo, recompile the code at least once in thr=
ee<br class=3D"">
&nbsp; months, watch this mailing list, or subscribe to the Lwt announcemen=
ts<br class=3D"">
&nbsp; issue [3].<br class=3D"">
- If a planned breaking change is a bad idea, please let the maintainers<br=
 class=3D"">
&nbsp; know when you see the warning.<br class=3D"">
- Lwt now uses semantic versioning [4]. The major version will grow<br clas=
s=3D"">
&nbsp; slowly but steadily, but this does not mean that the whole API is<br=
 class=3D"">
&nbsp; being redesigned or broken.<br class=3D"">
<br class=3D"">
If you are releasing a package to OPAM that depends on Lwt, it is not<br cl=
ass=3D"">
recommended to constrain Lwt to its current major version. A major<br class=
=3D"">
release of Lwt will break only a few APIs, and your package is likely<br cl=
ass=3D"">
not to be affected =E2=80=93 if it is, you will be notified. You may, howev=
er,<br class=3D"">
wish to constrain Lwt to a major version in your private or production<br c=
lass=3D"">
code.<br class=3D"">
<br class=3D"">
- The main OPAM package lwt is getting rid of some optional<br class=3D"">
&nbsp; dependencies in 3.0.0, which are now installable through separate OP=
AM<br class=3D"">
&nbsp; packages lwt_ssl, lwt_glib, lwt_react. This is to reduce recompilati=
on<br class=3D"">
&nbsp; of Lwt when installing OPAM packages ssl, lablgtk, and react.<br cla=
ss=3D"">
- Values of types 'a Lwt.t are now called promises rather than threads.<br =
class=3D"">
&nbsp; This should eliminate a lot of confusion for beginners.<br class=3D"=
">
<br class=3D"">
Lwt 2.7.0 also has a number of more ordinary changes, such as bug fixes<br =
class=3D"">
and the addition of bindings to writev and readv. See the full<br class=3D"=
">
changelog [5].<br class=3D"">
<br class=3D"">
I am working on an all-new manual, including fully rewritten API<br class=
=3D"">
documentation with examples. It should be ready towards the end of<br class=
=3D"">
winter.<br class=3D"">
<br class=3D"">
My hope is that all the above allows Lwt to be taken progressively into<br =
class=3D"">
the future, at the same time making development more open and more<br class=
=3D"">
humane :)<br class=3D"">
<br class=3D"">
Best,<br class=3D"">
Anton<br class=3D"">
<br class=3D"">
<br class=3D"">
[1]: <a href=3D"https://github.com/ocsigen/lwt/issues/308" rel=3D"noreferre=
r" target=3D"_blank" class=3D"">https://github.com/ocsigen/<wbr class=3D"">=
lwt/issues/308</a><br class=3D"">
[2]: <a href=3D"https://github.com/ocsigen/lwt/issues/293" rel=3D"noreferre=
r" target=3D"_blank" class=3D"">https://github.com/ocsigen/<wbr class=3D"">=
lwt/issues/293</a><br class=3D"">
[3]: <a href=3D"https://github.com/ocsigen/lwt/issues/309" rel=3D"noreferre=
r" target=3D"_blank" class=3D"">https://github.com/ocsigen/<wbr class=3D"">=
lwt/issues/309</a><br class=3D"">
[4]: <a href=3D"http://semver.org/" rel=3D"noreferrer" target=3D"_blank" cl=
ass=3D"">http://semver.org/</a><br class=3D"">
[5]: <a href=3D"https://github.com/ocsigen/lwt/releases/tag/2.7.0" rel=3D"n=
oreferrer" target=3D"_blank" class=3D"">https://github.com/ocsigen/<wbr cla=
ss=3D"">lwt/releases/tag/2.7.0</a><br class=3D"">
<span class=3D"HOEnZb"><font color=3D"#888888" class=3D""><br class=3D"">
<br class=3D"">
--<br class=3D"">
Caml-list mailing list.&nbsp; Subscription management and archives:<br clas=
s=3D"">
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank" class=3D"">https://sympa.inria.fr/sympa/<wbr class=3D"">ar=
c/caml-list</a><br class=3D"">
Beginner's list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginners" =
rel=3D"noreferrer" target=3D"_blank" class=3D"">http://groups.yahoo.com/gro=
up/<wbr class=3D"">ocaml_beginners</a><br class=3D"">
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank" class=3D"">http://caml.inria.fr/bin/caml-<wbr class=
=3D"">bugs</a></font></span></blockquote></div><br class=3D""></div>
</div></blockquote></div><br class=3D""></body></html>=

--Apple-Mail=_8105CE3C-9084-4388-AF99-1472E8E2D692--
