Return-Path: <ivg@ieee.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 7327B800B6
	for <caml-list@sympa.inria.fr>; Tue,  3 Jan 2017 16:33:17 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=ivg@ieee.org; spf=Pass smtp.mailfrom=ivg@ieee.org; spf=None smtp.helo=postmaster@mail-lf0-f42.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  ivg@ieee.org) identity=pra; client-ip=209.85.215.42;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  ivg@ieee.org designates 209.85.215.42 as permitted sender)
  identity=mailfrom; client-ip=209.85.215.42;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lf0-f42.google.com) identity=helo;
  client-ip=209.85.215.42;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org";
  x-sender="postmaster@mail-lf0-f42.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AOnMvgBYvUrFJmPd2oU6F/Gf/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcy/bnLW6fgltlLVR4KTs6sC0LuK9fm7EjNcqdbZ6TZZL8wKD0dEwe?=
 =?us-ascii?q?wt3CUeQ+e9QXXhK/DrayFoVO9jb3RCu0+BDE5OBczlbEfTqHDhpRQbGxH4KBYn?=
 =?us-ascii?q?br+tQt2ap42N2uuz45zeZRlTzHr4OOsqbUb+kQKEjsgbm5FvYpk8ywCB9mNJdv?=
 =?us-ascii?q?5MyCV3KFOItxf6/Ma5upB5pXd+ofUkou9eWKOyUKMkSqJTDDU6KChh5dPknRjO?=
 =?us-ascii?q?QAbJ4WETBDZF2iFUChTIuUmpFqz6tTH3468kgHGX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAADdwmtYhyrXVdFDGhYGAQEEAQEKA?=
 =?us-ascii?q?QEXAQEEAQEKAQGCfw0BAQEBAX6BDAeNUJRGh3uHeIUogggqhXgCgUAHPxQBAQE?=
 =?us-ascii?q?BAQEBAQEBARIBAQEIDQkJHTCCMwQBFQEEghYBAQEDASMEGQEBJhEBBAsLCwcGK?=
 =?us-ascii?q?gICIQESAQUBDg4GExoBiDoDCwUIDi2iDD+LGmiBazqDCAEBBYQdDYMJAQEBAQY?=
 =?us-ascii?q?BAQEBAQEBGQgShjODW4EGgk47gWqCHziCXZAHhHKFVDWGVIZxg3mBdVGCToUzg?=
 =?us-ascii?q?Q+Ef4lzIYQagkkUHoEUDxBpDWwuEgODFikPEQuBfCA0AQGGbYFPAQEB?=
X-IPAS-Result: =?us-ascii?q?A0AnAADdwmtYhyrXVdFDGhYGAQEEAQEKAQEXAQEEAQEKAQG?=
 =?us-ascii?q?Cfw0BAQEBAX6BDAeNUJRGh3uHeIUogggqhXgCgUAHPxQBAQEBAQEBAQEBARIBA?=
 =?us-ascii?q?QEIDQkJHTCCMwQBFQEEghYBAQEDASMEGQEBJhEBBAsLCwcGKgICIQESAQUBDg4?=
 =?us-ascii?q?GExoBiDoDCwUIDi2iDD+LGmiBazqDCAEBBYQdDYMJAQEBAQYBAQEBAQEBGQgSh?=
 =?us-ascii?q?jODW4EGgk47gWqCHziCXZAHhHKFVDWGVIZxg3mBdVGCToUzgQ+Ef4lzIYQagkk?=
 =?us-ascii?q?UHoEUDxBpDWwuEgODFikPEQuBfCA0AQGGbYFPAQEB?=
X-IronPort-AV: E=Sophos;i="5.33,455,1477954800"; 
   d="scan'208,217";a="252698379"
Received: from mail-lf0-f42.google.com ([209.85.215.42])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 03 Jan 2017 16:33:15 +0100
Received: by mail-lf0-f42.google.com with SMTP id y21so287253749lfa.1
        for <caml-list@inria.fr>; Tue, 03 Jan 2017 07:33:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ieee-org.20150623.gappssmtp.com; s=20150623;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=qHckq8lVqXca2diaqvPGKKIfgCRRh+KWI/Iq/+m7G/0=;
        b=XOSUcy9mUpRf6q0kwj6usMswu0XxvtNxr2aBeH7RMPoIJ3aIOnHpxWHKMb5+FRB/E7
         bqvDKhvY0MOo+Bzs2MwESy7bHPnl93QN55QVe4ODibylX0VdST0LcjHqpU0ouyYF02ys
         JWp70yHZjO1fds43bfIQYKHEoCq2OmodWqE8Y2RxoL6kgUg+46h2MRkjr88s+wcLWR/R
         GX8EPthx45aAMYF48zhh040LW4kzueJTHuI3An48gkqQNtalwBZd1GFy8PODNv8yOZcs
         PqRN/xqD+jBGhjM4GRvy8iUh880/W4s89sBeDHi5QPCa120lgddrSCxcD9hmY5dmkwcv
         hHlA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=qHckq8lVqXca2diaqvPGKKIfgCRRh+KWI/Iq/+m7G/0=;
        b=UKkUiKTxFaFZ96pacXyF3berSfMrBsFOqyOYnBVdvw7a0s2OCW3imb8EDgm51O17NP
         ezWWjaO8oQ+l4kaG7T7MXhw6QNycYT5unDjLp48syoEIST4ZiRBC+ARszbNdAEvoKxyI
         qwAB6VF2lbH9jNxggdOlx76wxDDjZOBU7QX7CdHJRyRubQ4HqaU6QWb+iSibH00TdgEh
         QmMHOCayBDGteHHCUWUQK5tKQHxXYCqLL5X9QRhTs20/KO+lwWfpdf3GMBM8pahB2c80
         lNIR5FaA8c+nFHjBRRiFaTd56J1S6cIwzatNpTqvQvT3ZvNENbeUnO8909pNB+94CC+M
         WXfg==
X-Gm-Message-State: AIkVDXIJDm7gG/TWICdXFYf3qwKXADGoyWoY6FmY3Ou6g0VEB9tXyOupMxwOHgyqds5abVugfgE0YGGUET68dOJ3
X-Received: by 10.46.70.1 with SMTP id t1mr23722145lja.29.1483457594753; Tue,
 03 Jan 2017 07:33:14 -0800 (PST)
MIME-Version: 1.0
Received: by 10.114.93.99 with HTTP; Tue, 3 Jan 2017 07:33:14 -0800 (PST)
In-Reply-To: <20170101175849.GA21907@yquem.inria.fr>
References: <CALdWJ+w47mA=3pByjBTDwaOv+XDEZXb-jRpEy5fM4YWxY-ryGA@mail.gmail.com>
 <CAPFanBEABzrmKKMT6FjwA0zvbFM19mKMZsbyCsZestNQ2sEajQ@mail.gmail.com>
 <CALdWJ+y2Hhryx5G+ZpvTqQYEhUzmB4k8u806kh9HfLjL2PiD7g@mail.gmail.com> <20170101175849.GA21907@yquem.inria.fr>
From: Ivan Gotovchits <ivg@ieee.org>
Date: Tue, 3 Jan 2017 10:33:14 -0500
Message-ID: <CALdWJ+yKc7zskC_i=q0O33Cfexpm0KPaJweJ=J6Q111b8-FTCA@mail.gmail.com>
To: Pierre Weis <pierre.weis@inria.fr>
Cc: Gabriel Scherer <gabriel.scherer@gmail.com>, caml-list <caml-list@inria.fr>, 
	Richard.Bonichon@gmail.com
Content-Type: multipart/alternative; boundary=f403045f7486f99ed4054532625e
Subject: Re: [Caml-list] Deprecation of tabulation boxes

--f403045f7486f99ed4054532625e
Content-Type: text/plain; charset=UTF-8

Hi,

Thanks for the great news, we're looking forward to the new tabulation
support (and the paper)!

Have a great year,
Ivan Gotovchits



On Sun, Jan 1, 2017 at 12:58 PM, Pierre Weis <pierre.weis@inria.fr> wrote:

> Hi Ivan, hi Gabriel,
>
> Sorry for the late answer: I generally have no time to read the
> Caml-list...
>
> As Gabriel said, I deprecated the tabulation boxes after a discussion about
> their not so smooth integration with other features of the Format module.
> And
> as you mentioned it, the discussion can be summerize as ``we do not
> understand the feature and do not use it'', and so probably nobody use it.
>
> I should have been more careful and wait to check if some users in the
> field
> were using tabulation boxes in their code.
>
> The problem about tabulation boxes is that they cannot be easily mixed with
> other boxes; on the other hand, if you do know the fact, they are perfectly
> usable to do exactly what you are doing with tabulation boxes, i.e. basic
> and simple tabular printing. That's exactly why those boxes have been
> introduced in Format in the first place: to print text file using lines
> with
> fixed fields separated with spaces or tabs (basic tab-tab-return line
> format).
>
> However, the code for tabulation boxes is still there and still up and
> running. So reverting its status is easy and should not break anything: it
> could be done anytime.
>
> During last year, Richard Bonichon and I wrote a paper about Format, its
> features, usage, internals and principles, to be presented at the next
> JFLA'2017 conference. During this work, we had long brain storming sessions
> about the new features I'm planning to introduce in the module and in
> particular a new tabular printing feature that would subsume tabulation
> boxes, since tabular printing would be fully integrated to the regular box
> management (and would have a proper format string extension to express
> tabular printing). This is still paper work, but we are confident to get a
> draft of the code during 2017.
>
> So, now that we know that some people indeed use the tabulation box
> feature,
> I propose to revert its status. When the new tabular printing feature will
> be
> there, people could easily port their code to the new feature and we could
> definitely deprecate the old tabulation boxes.
>
> PS: I wish you the best for this new year :)
>
> --
> Pierre Weis
>
> INRIA Paris, http://bat8.inria.fr/~weis/
>
>
> > Well, the discussion literally says, we don't understand tabulation, and
> it
> > looks like nobody is using it, so let's just throw it away :)
> >
> > We're using tabulation, and they are quite useful. Yep, I agree, that the
> > interface for setting the marks is kind of awkward,
> > it would be nice if there would be a `pp_setup_tabs : _ formatter -> int
> > list -> unit` function, that would push into the stack a new tabular box
> > with
> > the specified tabulations.
> >
> > What concerning your solution with the alignment, it is less general and
> > doesn't work in our case. First of all, the pretty printing functions,
> that
> > are printing
> > into the columns are not specified with `%s`, but with `%a` (e.g.,
> address,
> > memory string, assembly string). Second, the printing functions are not
> > actually
> > defined in the same module. The tabs are initialized in the frontend,
> that
> > defines it based on the architecture (address size, maximum length of
> > instruction, etc),
> > and pretty printers are registered separately, and they just rely on a
> > fact, that we have three columns, the first is for address, the second is
> > for memory, then assembly, etc).
> > This design simplifies the actual instruction printers, by consolidating
> > the common code in the formatter setup procedure.
> >
> > So, it is still not clear to me, why the tabulations are wrong. If they
> do
> > complicate the code base and raise the support cost, then it is
> > understandable, why you would like to remove it
> > from the standard library. But in this case, it would be nice, to move
> this
> > code out as a separate library, as just removing a feature, that was in
> the
> > language for years (I would say even forever,
> > if we will start the history from caml-light), without providing any
> > substitution is... not nice :)
> >
> >
> > [1]: http://caml.inria.fr/pub/docs/manual-caml-light/node15.5.html
> >
> >
> >
> > On Mon, Dec 19, 2016 at 1:20 PM, Gabriel Scherer <
> gabriel.scherer@gmail.com>
> > wrote:
> >
> > > You may be interested in the discussion
> > >   https://github.com/ocaml/ocaml/pull/229
> > > which discussed a few ways in which the proposed tabulation interface
> > > may be inconvenient. It is after this discussion that Pierre Weis
> > > decided to deprecate tabulation boxes -- I believe that the reason is
> > > that tabulation and formatting never mixed very well.
> > >
> > > Note that if you can decide in advance a maximal size for a given
> > > "column" of your formatted output, you can use the left or
> > > right-justification features of formatting conversions to print
> > > aligned text:
> > >
> > > let data = [("x", "foo"); ("loop", "bar")]
> > >
> > > let () =
> > >   print_newline ();
> > >   data |> List.iter (fun (lab, instr) -> Printf.printf "%5s: %s\n" lab
> > > instr)
> > > (*
> > >     x: foo
> > >  loop: bar
> > > *)
> > >
> > > let () =
> > >   print_newline ();
> > >   data |> List.iter (fun (lab, instr) -> Printf.printf "%-5s: %s\n" lab
> > > instr)
> > > (*
> > > x    : foo
> > > loop : bar
> > > *)
> > >
> > > let () =
> > >   let len = List.fold_left (fun m (lab, _) -> max m (String.length
> > > lab)) 0 data in
> > >   print_newline ();
> > >   data |> List.iter (fun (lab, instr) -> Printf.printf "%*s: %s\n" len
> > > lab instr)
> > > (*
> > >    x: foo
> > > loop: bar
> > > *)
> > >
> > > On Mon, Dec 19, 2016 at 12:59 PM, Ivan Gotovchits <ivg@ieee.org>
> wrote:
> > > > Greetings,
> > > >
> > > > The tabulation boxes are marked as deprecated since 4.03.0. I've
> tried to
> > > > google for
> > > > any reasons that justify the removal but found only a note by Pierre
> > > Weis in
> > > > the Matis issue tracker[1]:
> > > >
> > > >
> > > >> The proposed printf-like syntax is fine, but tabulation boxes are
> now
> > > >> deprecated.
> > > >> Indeed, tabulation boxes interaction with other pretty-printing
> boxes
> > > have
> > > >> never been sorted out and tabulation boxes usage is orthogonal to
> the
> > > rest
> > > >> of the Format module.
> > > >> If considered useful, tabulation boxes could be implemented out of
> the
> > > >> Format module.
> > > >
> > > >
> > > > First of all the tabulation boxes can't be implemented outside of the
> > > format
> > > > module since the tab stops are actually stored in the stack of
> tabulation
> > > > boxes. If this data field would be removed from the formatter we will
> > > need
> > > > to pass an extra argument to all pretty-printers that use the
> tabulation
> > > > break, or use some global variable. Neither solution can be
> considered
> > > > acceptable.
> > > >
> > > > Speaking about the usefulness. The tabulation boxes are useful for
> > > printing
> > > > assembly outputs. And since compiler writing is sort of an
> application
> > > area
> > > > for OCaml, it shouldn't be considered as a rare case. It is also very
> > > useful
> > > > for printing Fortran code, that can be considered an assembler for
> the
> > > > numeric computing. It also just allows printing nicely formatted
> texts,
> > > that
> > > > it the main purpose of the Format library. As an example, tabulation
> > > boxes
> > > > are used in BAP and CIL frameworks.
> > > >
> > > > To summarize, the deprecation will eventually make few project
> > > > non-compilable. And there is no clear substitution for the deprecated
> > > > feature.
> > > >
> > > > Given that, I would like to hear the justifications for the
> deprecation
> > > of
> > > > tabulation boxes and suggested workarounds.
> > > >
> > > > One possible workaround, that I could see, is making the `formatter`
> type
> > > > extensible with existential boxes or, more generally, with
> existential
> > > > attributes. In that case, we will indeed be able to implement
> tabulation
> > > > boxes outside of the format module.
> > > >
> > > > Best wishes,
> > > > Ivan Gotovchits
> > > >
> > > > [1]: https://caml.inria.fr/mantis/view.php?id=4665
> > >
>

--f403045f7486f99ed4054532625e
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi,<div><br></div><div>Thanks for the great news, we&#39;r=
e looking forward to the new tabulation support (and the paper)!</div><div>=
<br></div><div>Have a great year,</div><div>Ivan Gotovchits</div><div><br><=
/div><div><br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmai=
l_quote">On Sun, Jan 1, 2017 at 12:58 PM, Pierre Weis <span dir=3D"ltr">&lt=
;<a href=3D"mailto:pierre.weis@inria.fr" target=3D"_blank">pierre.weis@inri=
a.fr</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"ma=
rgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hi Ivan, hi Ga=
briel,<br>
<br>
Sorry for the late answer: I generally have no time to read the Caml-list..=
.<br>
<br>
As Gabriel said, I deprecated the tabulation boxes after a discussion about=
<br>
their not so smooth integration with other features of the Format module. A=
nd<br>
as you mentioned it, the discussion can be summerize as ``we do not<br>
understand the feature and do not use it&#39;&#39;, and so probably nobody =
use it.<br>
<br>
I should have been more careful and wait to check if some users in the fiel=
d<br>
were using tabulation boxes in their code.<br>
<br>
The problem about tabulation boxes is that they cannot be easily mixed with=
<br>
other boxes; on the other hand, if you do know the fact, they are perfectly=
<br>
usable to do exactly what you are doing with tabulation boxes, i.e. basic<b=
r>
and simple tabular printing. That&#39;s exactly why those boxes have been<b=
r>
introduced in Format in the first place: to print text file using lines wit=
h<br>
fixed fields separated with spaces or tabs (basic tab-tab-return line forma=
t).<br>
<br>
However, the code for tabulation boxes is still there and still up and<br>
running. So reverting its status is easy and should not break anything: it<=
br>
could be done anytime.<br>
<br>
During last year, Richard Bonichon and I wrote a paper about Format, its<br>
features, usage, internals and principles, to be presented at the next<br>
JFLA&#39;2017 conference. During this work, we had long brain storming sess=
ions<br>
about the new features I&#39;m planning to introduce in the module and in<b=
r>
particular a new tabular printing feature that would subsume tabulation<br>
boxes, since tabular printing would be fully integrated to the regular box<=
br>
management (and would have a proper format string extension to express<br>
tabular printing). This is still paper work, but we are confident to get a<=
br>
draft of the code during 2017.<br>
<br>
So, now that we know that some people indeed use the tabulation box feature=
,<br>
I propose to revert its status. When the new tabular printing feature will =
be<br>
there, people could easily port their code to the new feature and we could<=
br>
definitely deprecate the old tabulation boxes.<br>
<br>
PS: I wish you the best for this new year :)<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Pierre Weis<br>
<br>
INRIA Paris, <a href=3D"http://bat8.inria.fr/~weis/" rel=3D"noreferrer" tar=
get=3D"_blank">http://bat8.inria.fr/~weis/</a><br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
&gt; Well, the discussion literally says, we don&#39;t understand tabulatio=
n, and it<br>
&gt; looks like nobody is using it, so let&#39;s just throw it away :)<br>
&gt;<br>
&gt; We&#39;re using tabulation, and they are quite useful. Yep, I agree, t=
hat the<br>
&gt; interface for setting the marks is kind of awkward,<br>
&gt; it would be nice if there would be a `pp_setup_tabs : _ formatter -&gt=
; int<br>
&gt; list -&gt; unit` function, that would push into the stack a new tabula=
r box<br>
&gt; with<br>
&gt; the specified tabulations.<br>
&gt;<br>
&gt; What concerning your solution with the alignment, it is less general a=
nd<br>
&gt; doesn&#39;t work in our case. First of all, the pretty printing functi=
ons, that<br>
&gt; are printing<br>
&gt; into the columns are not specified with `%s`, but with `%a` (e.g., add=
ress,<br>
&gt; memory string, assembly string). Second, the printing functions are no=
t<br>
&gt; actually<br>
&gt; defined in the same module. The tabs are initialized in the frontend, =
that<br>
&gt; defines it based on the architecture (address size, maximum length of<=
br>
&gt; instruction, etc),<br>
&gt; and pretty printers are registered separately, and they just rely on a=
<br>
&gt; fact, that we have three columns, the first is for address, the second=
 is<br>
&gt; for memory, then assembly, etc).<br>
&gt; This design simplifies the actual instruction printers, by consolidati=
ng<br>
&gt; the common code in the formatter setup procedure.<br>
&gt;<br>
&gt; So, it is still not clear to me, why the tabulations are wrong. If the=
y do<br>
&gt; complicate the code base and raise the support cost, then it is<br>
&gt; understandable, why you would like to remove it<br>
&gt; from the standard library. But in this case, it would be nice, to move=
 this<br>
&gt; code out as a separate library, as just removing a feature, that was i=
n the<br>
&gt; language for years (I would say even forever,<br>
&gt; if we will start the history from caml-light), without providing any<b=
r>
&gt; substitution is... not nice :)<br>
&gt;<br>
&gt;<br>
&gt; [1]: <a href=3D"http://caml.inria.fr/pub/docs/manual-caml-light/node15=
.5.html" rel=3D"noreferrer" target=3D"_blank">http://caml.inria.fr/pub/docs=
/<wbr>manual-caml-light/node15.5.<wbr>html</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; On Mon, Dec 19, 2016 at 1:20 PM, Gabriel Scherer &lt;<a href=3D"mailto=
:gabriel.scherer@gmail.com">gabriel.scherer@gmail.com</a>&gt;<br>
&gt; wrote:<br>
&gt;<br>
&gt; &gt; You may be interested in the discussion<br>
&gt; &gt;=C2=A0 =C2=A0<a href=3D"https://github.com/ocaml/ocaml/pull/229" r=
el=3D"noreferrer" target=3D"_blank">https://github.com/ocaml/<wbr>ocaml/pul=
l/229</a><br>
&gt; &gt; which discussed a few ways in which the proposed tabulation inter=
face<br>
&gt; &gt; may be inconvenient. It is after this discussion that Pierre Weis=
<br>
&gt; &gt; decided to deprecate tabulation boxes -- I believe that the reaso=
n is<br>
&gt; &gt; that tabulation and formatting never mixed very well.<br>
&gt; &gt;<br>
&gt; &gt; Note that if you can decide in advance a maximal size for a given=
<br>
&gt; &gt; &quot;column&quot; of your formatted output, you can use the left=
 or<br>
&gt; &gt; right-justification features of formatting conversions to print<b=
r>
&gt; &gt; aligned text:<br>
&gt; &gt;<br>
&gt; &gt; let data =3D [(&quot;x&quot;, &quot;foo&quot;); (&quot;loop&quot;=
, &quot;bar&quot;)]<br>
&gt; &gt;<br>
&gt; &gt; let () =3D<br>
&gt; &gt;=C2=A0 =C2=A0print_newline ();<br>
&gt; &gt;=C2=A0 =C2=A0data |&gt; List.iter (fun (lab, instr) -&gt; Printf.p=
rintf &quot;%5s: %s\n&quot; lab<br>
&gt; &gt; instr)<br>
&gt; &gt; (*<br>
&gt; &gt;=C2=A0 =C2=A0 =C2=A0x: foo<br>
&gt; &gt;=C2=A0 loop: bar<br>
&gt; &gt; *)<br>
&gt; &gt;<br>
&gt; &gt; let () =3D<br>
&gt; &gt;=C2=A0 =C2=A0print_newline ();<br>
&gt; &gt;=C2=A0 =C2=A0data |&gt; List.iter (fun (lab, instr) -&gt; Printf.p=
rintf &quot;%-5s: %s\n&quot; lab<br>
&gt; &gt; instr)<br>
&gt; &gt; (*<br>
&gt; &gt; x=C2=A0 =C2=A0 : foo<br>
&gt; &gt; loop : bar<br>
&gt; &gt; *)<br>
&gt; &gt;<br>
&gt; &gt; let () =3D<br>
&gt; &gt;=C2=A0 =C2=A0let len =3D List.fold_left (fun m (lab, _) -&gt; max =
m (String.length<br>
&gt; &gt; lab)) 0 data in<br>
&gt; &gt;=C2=A0 =C2=A0print_newline ();<br>
&gt; &gt;=C2=A0 =C2=A0data |&gt; List.iter (fun (lab, instr) -&gt; Printf.p=
rintf &quot;%*s: %s\n&quot; len<br>
&gt; &gt; lab instr)<br>
&gt; &gt; (*<br>
&gt; &gt;=C2=A0 =C2=A0 x: foo<br>
&gt; &gt; loop: bar<br>
&gt; &gt; *)<br>
&gt; &gt;<br>
&gt; &gt; On Mon, Dec 19, 2016 at 12:59 PM, Ivan Gotovchits &lt;<a href=3D"=
mailto:ivg@ieee.org">ivg@ieee.org</a>&gt; wrote:<br>
&gt; &gt; &gt; Greetings,<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; The tabulation boxes are marked as deprecated since 4.03.0. =
I&#39;ve tried to<br>
&gt; &gt; &gt; google for<br>
&gt; &gt; &gt; any reasons that justify the removal but found only a note b=
y Pierre<br>
&gt; &gt; Weis in<br>
&gt; &gt; &gt; the Matis issue tracker[1]:<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;&gt; The proposed printf-like syntax is fine, but tabulation =
boxes are now<br>
&gt; &gt; &gt;&gt; deprecated.<br>
&gt; &gt; &gt;&gt; Indeed, tabulation boxes interaction with other pretty-p=
rinting boxes<br>
&gt; &gt; have<br>
&gt; &gt; &gt;&gt; never been sorted out and tabulation boxes usage is orth=
ogonal to the<br>
&gt; &gt; rest<br>
&gt; &gt; &gt;&gt; of the Format module.<br>
&gt; &gt; &gt;&gt; If considered useful, tabulation boxes could be implemen=
ted out of the<br>
&gt; &gt; &gt;&gt; Format module.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; First of all the tabulation boxes can&#39;t be implemented o=
utside of the<br>
&gt; &gt; format<br>
&gt; &gt; &gt; module since the tab stops are actually stored in the stack =
of tabulation<br>
&gt; &gt; &gt; boxes. If this data field would be removed from the formatte=
r we will<br>
&gt; &gt; need<br>
&gt; &gt; &gt; to pass an extra argument to all pretty-printers that use th=
e tabulation<br>
&gt; &gt; &gt; break, or use some global variable. Neither solution can be =
considered<br>
&gt; &gt; &gt; acceptable.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; Speaking about the usefulness. The tabulation boxes are usef=
ul for<br>
&gt; &gt; printing<br>
&gt; &gt; &gt; assembly outputs. And since compiler writing is sort of an a=
pplication<br>
&gt; &gt; area<br>
&gt; &gt; &gt; for OCaml, it shouldn&#39;t be considered as a rare case. It=
 is also very<br>
&gt; &gt; useful<br>
&gt; &gt; &gt; for printing Fortran code, that can be considered an assembl=
er for the<br>
&gt; &gt; &gt; numeric computing. It also just allows printing nicely forma=
tted texts,<br>
&gt; &gt; that<br>
&gt; &gt; &gt; it the main purpose of the Format library. As an example, ta=
bulation<br>
&gt; &gt; boxes<br>
&gt; &gt; &gt; are used in BAP and CIL frameworks.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; To summarize, the deprecation will eventually make few proje=
ct<br>
&gt; &gt; &gt; non-compilable. And there is no clear substitution for the d=
eprecated<br>
&gt; &gt; &gt; feature.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; Given that, I would like to hear the justifications for the =
deprecation<br>
&gt; &gt; of<br>
&gt; &gt; &gt; tabulation boxes and suggested workarounds.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; One possible workaround, that I could see, is making the `fo=
rmatter` type<br>
&gt; &gt; &gt; extensible with existential boxes or, more generally, with e=
xistential<br>
&gt; &gt; &gt; attributes. In that case, we will indeed be able to implemen=
t tabulation<br>
&gt; &gt; &gt; boxes outside of the format module.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; Best wishes,<br>
&gt; &gt; &gt; Ivan Gotovchits<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; [1]: <a href=3D"https://caml.inria.fr/mantis/view.php?id=3D4=
665" rel=3D"noreferrer" target=3D"_blank">https://caml.inria.fr/mantis/<wbr=
>view.php?id=3D4665</a><br>
&gt; &gt;<br>
</div></div></blockquote></div><br></div>

--f403045f7486f99ed4054532625e--
