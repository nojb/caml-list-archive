Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA27208 for caml-redistribution; Wed, 26 Feb 1997 09:26:30 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id FAA25032 for <caml-list@pauillac.inria.fr>; Wed, 26 Feb 1997 05:50:08 +0100 (MET)
Received: from haven.uchicago.edu (root@haven.uchicago.edu [128.135.12.3]) by nez-perce.inria.fr (8.7.6/8.7.3) with ESMTP id FAA15890 for <caml-list@inria.fr>; Wed, 26 Feb 1997 05:50:06 +0100 (MET)
Received: from midway.uchicago.edu (root@midway.uchicago.edu [128.135.12.12])
          by haven.uchicago.edu (8.8.5/8.8.4) with ESMTP
   id WAA01651 for <caml-list@inria.fr>; Tue, 25 Feb 1997 22:50:04 -0600 (CST)
Received: from kimbark.uchicago.edu (root@kimbark.uchicago.edu [128.135.12.52]) by midway.uchicago.edu (8.8.5/8.8.3) with ESMTP id WAA24369 for <caml-list@inria.fr>; Tue, 25 Feb 1997 22:49:35 -0600 (CST)
Received: from kimbark.uchicago.edu (4208@localhost [127.0.0.1]) by kimbark.uchicago.edu (8.8.5/8.8.3) with ESMTP id WAA18628 for <caml-list@inria.fr>; Tue, 25 Feb 1997 22:49:34 -0600 (CST)
Message-Id: <199702260449.WAA18628@kimbark.uchicago.edu>
To: caml-list@inria.fr
Subject: overview of bootstrapping caml light
Date: Tue, 25 Feb 1997 22:49:33 -0600
From: Lyn A Headley <laheadle@midway.uchicago.edu>
Sender: weis

[il y a un sommaire pauvre de ce message au fin]

dear caml-list,

I have been trying to understand the bootstrapping process
which takes place during caml light installation.  If you'll
indulge me, I'd like to present my view of what is going on,
to see if I have the right idea, and then ask some questions.

The first step is building the runtime system(written in C).  This
includes an interpreter for the caml light abstract machine.  Then the
produced executable, "runtime", is invoked on the file "compiler,"
which I *think* is a byte-compiled implementation of a *subset* of the
caml-light language. In this way the core library, actual compiler,
linker, librarian, and toplevel are compiled into bytecode.

my questions:

1.) does the included bytecode file "compiler" implement only a subset
of the language? It seems that this is indeed the case, otherwise
there would be no point in compiling the subdirectory "compiler,"
would there?  And yet, if it is a subset, why?  I mean why not just
include a bytecoded compiler for the *entire* language?  Basically I
am wondering why the subdirectory "compiler" is included in the
distribution.

2.) How do src/runtime/parsing.c, src/runtime/lexing.c, 
src/compiler/parser.ml, src/compiler/lexer.ml, src/lex,
and src/yacc fit into this whole picture?

-------------------------------------------------------
[en francais]

j'essaye comprendre le processus de 'bootstrapping'.

questions:

1) est-ce que le fichier (dossier?) 'compiler' travaille pour un petit 
part de la langue caml?  

2) comment est-ce-que l'analysis de la syntaxe travaile?




