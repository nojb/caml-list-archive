Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA24284 for caml-redistribution; Mon, 24 Feb 1997 19:05:25 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA15189 for <caml-list@pauillac.inria.fr>; Mon, 24 Feb 1997 11:50:42 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35]) by concorde.inria.fr (8.7.6/8.7.3) with ESMTP id LAA28561; Mon, 24 Feb 1997 11:50:41 +0100 (MET)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA15185; Mon, 24 Feb 1997 11:50:40 +0100 (MET)
From: Xavier Leroy <Xavier.Leroy@inria.fr>
Message-Id: <199702241050.LAA15185@pauillac.inria.fr>
Subject: Re: ocamlyacc and error recovery
In-Reply-To: <Pine.GSO.3.95.970220200443.872A-100000@octave> from David Monniaux at "Feb 20, 97 08:11:52 pm"
To: David.Monniaux@ens-lyon.fr (David Monniaux)
Date: Mon, 24 Feb 1997 11:50:40 +0100 (MET)
Cc: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> I have a small problem with ocamlyacc when I want to handle errors.
> I always have an uncaught Parser_error exception. Does anyone know how to
> handle the "error" token?

The first thing to do is to define a function called "parse_error" in
the header section of the grammar:

%{
let parse_error msg =
  print_string msg
%}

That will allow error recovery to be initiated. (According to the
documentation, defining this function is optional; there is a bug in
the current implementation that makes it necessary.)

Once this is done, "error" rules should work as described in the Yacc
books.

- Xavier Leroy




