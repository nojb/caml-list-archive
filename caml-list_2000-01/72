Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA32600 for caml-redistribution@pauillac.inria.fr; Tue, 25 Jan 2000 09:44:20 +0100 (MET)
Resent-Message-Id: <200001250844.JAA32600@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA31831 for <caml-list@pauillac.inria.fr>; Tue, 25 Jan 2000 09:34:40 +0100 (MET)
Received: from huet-gera1p (huet-gera2p.inria.fr [128.93.20.113])
	by concorde.inria.fr (8.8.7/8.8.7) with SMTP id JAA08355;
	Tue, 25 Jan 2000 09:34:39 +0100 (MET)
Message-Id: <200001250834.JAA08355@concorde.inria.fr>
X-Sender: huet@pop-rocq.inria.fr
X-Mailer: QUALCOMM Windows Eudora Pro Version 4.0.2 
Date: Tue, 25 Jan 2000 09:22:24 +0100
To: OCAML <caml-list@inria.fr>
From: Gerard Huet <Gerard.Huet@inria.fr>
Subject: Re: Q: camlp4 use?
Cc: Gerard.Huet@inria.fr
References: <200001142042.VAA20140@miss.wu-wien.ac.at>
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
Resent-From: weis@pauillac.inria.fr
Resent-Date: Tue, 25 Jan 2000 09:44:20 +0100
Resent-To: caml-redistribution@pauillac.inria.fr

I use camlp4 for linguistic engineering. I found the facility for writing
lexical and syntactic analysers very well designed and well integrated in=
 the
language, making it convenient to document in one single formalism a
complex parsing process involving many transducers and grammars.
The implementation of streams on which camlp4 relies is very efficient, one
may
parse several megabytes of data without memory leaks with closures.

As a side effect, I got used to the "revised" syntax, which is more regular
and less error-prone than the standard one. It would be neat if some
convention could be agreed on (such as an optional formated initial
comment) such that the compiler and other metatheoretical tools would
automatically apply the proper preprocessing without having to write it in
the Makefile.

On the other hand, a good documentation ought to be written if one wants to
promote a wider use of camlp4 and stream-based parsers.

Gérard Huet



