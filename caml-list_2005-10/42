Return-Path: <oliver@first.in-berlin.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 241E8BB9A
	for <caml-list@yquem.inria.fr>; Wed,  5 Oct 2005 00:10:22 +0200 (CEST)
Received: from first.in-berlin.de (dialin-145-254-061-129.pools.arcor-ip.net [145.254.61.129])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j94MAKaT003201
	for <caml-list@yquem.inria.fr>; Wed, 5 Oct 2005 00:10:21 +0200
Received: by first.in-berlin.de (Postfix, from userid 501)
	id 9926516420B; Tue,  4 Oct 2005 18:47:00 +0200 (CEST)
Date: Tue, 4 Oct 2005 18:47:00 +0200
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: FP/IP and performance (in general) and Patterns...  (Re: [Caml-list] Avoiding shared data)
Message-ID: <20051004164700.GA494@first.in-berlin.de>
References: <20051003200337.14092.qmail@web26809.mail.ukl.yahoo.com> <1128394430.23813.20.camel@rosella> <Pine.LNX.4.63.0510041111500.9226@localhost.localdomain>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.63.0510041111500.9226@localhost.localdomain>
User-Agent: Mutt/1.5.6i
X-Miltered: at concorde with ID 4342FDCC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; oliver:01 bandel:01 oliver:01 in-berlin:01 caml-list:01 avoiding:01 pointer:01 functor:01 ...:98 ...:98 imperative:01 imperative:01 patterns:02 patterns:02 data:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3

Hello,


is there a general overvie (paper or book), where
functional and imperative approaches to solve a problem are
compared directly?

Most often people say, imperative is faster in most of all
cases, and only in some cases FP might be faster.

If there is a paper/book about problem solving and performance,
comparing different approaches I would be happy to have a pointer
to it.

Also it would be nice to find something about how
classical imperative style, OO-style and FP-style
are solving problems, and which patterns can be done
easier in the one or the other way.

I recently had a discussion about some OO-patterns
( so called "GoF"-Book) and tried to solve some of them with
OCamls module system.
Adapter and bridge was talked about. Adapter was easy in writing a simple
wrapper.
Bridge could be done with a functor. :)


So, if there are direct translations possible, where to find
comparisons?

Another interesting theme in this respect is: If not only some patterns
were adapted to Fp, but the whole problem solving approach is different,
which patterns will be unnevcessary then, because the whole structure of
the software will be different...?!



Ciao,
   Oliver


