Return-Path: <oliver@first.in-berlin.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 09C4ED45F
	for <caml-list@yquem.inria.fr>; Mon, 31 Oct 2005 17:11:48 +0100 (CET)
Received: from first.in-berlin.de (e178053013.adsl.alicedsl.de [85.178.53.13])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j9VGBl69004232
	for <caml-list@yquem.inria.fr>; Mon, 31 Oct 2005 17:11:47 +0100
Received: by first.in-berlin.de (Postfix, from userid 501)
	id 30DBD181040; Mon, 31 Oct 2005 13:37:07 +0100 (CET)
Date: Mon, 31 Oct 2005 13:37:07 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] parser syntax?
Message-ID: <20051031123707.GA11759@first.in-berlin.de>
References: <ad8cfe7e0510302201k1048f178kc8814422b7132ad9@mail.gmail.com> <200510310608.54746.jon@ffconsultancy.com> <ad8cfe7e0510302224p61b0eb76x4067016e9a91ebf3@mail.gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <ad8cfe7e0510302224p61b0eb76x4067016e9a91ebf3@mail.gmail.com>
User-Agent: Mutt/1.5.6i
X-Miltered: at nez-perce with ID 43664243.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; oliver:01 bandel:01 oliver:01 in-berlin:01 caml-list:01 parser:01 syntax:01 piped:01 parser:01 syntax:01 ocaml:01 ocaml:01 compilers:01 compilers:01 ...:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3

On Mon, Oct 31, 2005 at 07:24:29PM +1300, Jonathan Roewen wrote:
> > Just a guess but should it be piped through camlp4 to get the stream and
> > parser syntax?
> 
> Ohh, is this a change from ocaml 2.x? Is there a script somewhere that
> can almost automatically convert ocaml 2.x syntax to 3.x?
[...]

IMHO camlp4 and the compilers could be used in ONE
command. I don't know if camlp4 could invoke the compilers
or the compilers could invoke camlp4 (I think the latter was the case),
but IMHO something like that was possible (at least in older releases).

But I always found this behaviour very strange and
if camlp4 only works as a filter/preprocessor I think this is much more
clear. (Maybe a problem in documentation of these features that I
found it strange.)

Ciao,
   Oliver

