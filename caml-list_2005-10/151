Return-Path: <psnively@mac.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 8CF92BB9A
	for <caml-list@yquem.inria.fr>; Mon, 17 Oct 2005 08:34:35 +0200 (CEST)
Received: from smtpout.mac.com (smtpout.mac.com [17.250.248.47])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j9H6YY3O009079
	for <caml-list@yquem.inria.fr>; Mon, 17 Oct 2005 08:34:35 +0200
Received: from mac.com (smtpin08-en2 [10.13.10.153])
	by smtpout.mac.com (Xserve/8.12.11/smtpout09/MantshX 4.0) with ESMTP id j9H6YXBN025430
	for <caml-list@yquem.inria.fr>; Sun, 16 Oct 2005 23:34:33 -0700 (PDT)
Received: from [192.168.0.100] (dsl092-032-215.lax1.dsl.speakeasy.net [66.92.32.215])
	(authenticated bits=0)
	by mac.com (Xserve/smtpin08/MantshX 4.0) with ESMTP id j9H6YU5v002233
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NO)
	for <caml-list@yquem.inria.fr>; Sun, 16 Oct 2005 23:34:33 -0700 (PDT)
Mime-Version: 1.0 (Apple Message framework v734)
Content-Transfer-Encoding: quoted-printable
Message-Id: <53726892-A820-4BC8-9295-F5B2212442E8@mac.com>
Content-Type: text/plain; charset=UTF-8; delsp=yes; format=flowed
To: caml-list@yquem.inria.fr
From: Paul Snively <psnively@mac.com>
Subject: A Monadic Framework for Subcontinuations
Date: Sun, 16 Oct 2005 23:34:29 -0700
X-Mailer: Apple Mail (2.734)
X-Miltered: at concorde with ID 435345FA.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; monadic:01 simonpj:01 haskell:01 o'caml:01 haskell:01 sig:01 val:01 val:01 abstract:01 abstract:01 interfaces:01 data:02 data:02 types:02 imply:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

O'Camlers,

I'm trying to work through <http://research.microsoft.com/users/=20
simonpj/papers/control/control.pdf>, which is to say that I'm =20
attempting to transliterate some interesting Haskell code to O'Caml. =20
On page 23, we find the following "refined interface:"

--------------------------snip snip--------------------------
data CC r a                                        -- Abstract
data Prompt r a                                 -- Abstract
data SubCont r a b                           -- Abstract

instance Monad (CC r)

runCC :: (=E2=88=80 r=E2=8B=85 CC r a) =E2=9E=9D a
newPrompt :: CC r (Prompt r a)
pushPrompt :: Prompt r a =E2=9E=9D CC r a =E2=9E=9D CC r a
withSubCont :: Prompt r b =E2=9E=9D (SubCont r a b =E2=9E=9D CC r b) =E2=9E=
=9D CC r a
pushSubCont :: SubCont r a b =E2=9E=9D CC r a =E2=9E=9D CC r b
--------------------------snip snip--------------------------

I haven't read a lot of Haskell interfaces, to put it mildly. The =20
text makes it seem that "r" here is a phantom type. I'm not sure how =20
to interpret the universal quantification, assuming that I'm right =20
about r being a phantom type. I'm only beginning to try to use =20
phantom types anyway. So surely the following can't be correct:

--------------------------snip snip--------------------------
module type Continuation =3D
   sig
   type ('r, 'a) cc
   type ('r, 'a) prompt
   type ('r, 'a, 'b) subcont

   val runCC : ('r, 'a) cc -> 'a
   val newPrompt : ('r, ('r, 'a) prompt) cc
   val pushPrompt : ('r, 'a) prompt -> ('r, 'a) cc -> ('r, 'a) cc
   val withSubCont : ('r, 'b) prompt -> (('r, 'a, 'b) subcont -> ('r, =20=

'b) cc) ->('r, 'a) cc
   val pushSubCont : ('r, 'a, 'b) subcont -> ('r, 'a) cc -> ('r, 'b) cc
   end
--------------------------snip snip--------------------------

Am I right about r being a Phantom Type? What does the universal =20
quantification imply in this context? Can I get away with this =20
"blowing it off" that I've done above? I'll worry about the actual =20
implementation in a bit. Right now, I just wonder if I'm not =20
misunderstanding something in the interface.

Many thanks and best regards,
Paul

