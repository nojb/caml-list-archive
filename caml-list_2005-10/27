Return-Path: <skaller@users.sourceforge.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id CB86DBB94
	for <caml-list@yquem.inria.fr>; Tue,  4 Oct 2005 04:54:06 +0200 (CEST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j942s4Hn015524
	for <caml-list@yquem.inria.fr>; Tue, 4 Oct 2005 04:54:05 +0200
Received: from rosella (ppp2-148.lns1.syd7.internode.on.net [59.167.2.148])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.6) with ESMTP id j942roIR053704;
	Tue, 4 Oct 2005 12:23:50 +0930 (CST)
	(envelope-from skaller@users.sourceforge.net)
Subject: Re: Ant:  Re: Ant:  Re: Ant:  Re: [Caml-list] Avoiding shared data
From: skaller <skaller@users.sourceforge.net>
To: Martin Chabr <martin_chabr@yahoo.de>
Cc: Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE>,
	caml-list@yquem.inria.fr
In-Reply-To: <20051003200337.14092.qmail@web26809.mail.ukl.yahoo.com>
References: <20051003200337.14092.qmail@web26809.mail.ukl.yahoo.com>
Content-Type: text/plain
Date: Tue, 04 Oct 2005 12:53:50 +1000
Message-Id: <1128394430.23813.20.camel@rosella>
Mime-Version: 1.0
X-Mailer: Evolution 2.2.1.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4341EECC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 avoiding:01 avoiding:01 mutable:01 caching:01 wrote:01 sourceforge:01 precisely:01 data:02 data:02 shared:04 shared:04 obvious:06 identical:06 john:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

On Mon, 2005-10-03 at 22:03 +0200, Martin Chabr wrote:

> Avoiding shared data. Why is it done that way? Who
> wants to have an array or list of identical records or
> sub-arrays or other sub-structures which are all
> updated at the same time in the same way?

Mutable shared data is very useful: caching is
an obvious example where this is precisely what you want.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

