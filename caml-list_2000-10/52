Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA05782 for caml-red; Tue, 10 Oct 2000 14:03:09 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA25712 for <caml-list@pauillac.inria.fr>; Mon, 9 Oct 2000 14:45:34 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e99CjUn14881;
	Mon, 9 Oct 2000 14:45:30 +0200 (MET DST)
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA24937; Mon, 9 Oct 2000 14:45:30 +0200 (MET DST)
Message-ID: <20001009144530.62850@pauillac.inria.fr>
Date: Mon, 9 Oct 2000 14:45:30 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
To: Brian Rogoff <bpr@best.com>, caml-list@inria.fr
Subject: Re: Undefined evaluation order
References: <Pine.BSF.4.21.0010051046251.22949-100000@shell5.ba.best.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <Pine.BSF.4.21.0010051046251.22949-100000@shell5.ba.best.com>; from Brian Rogoff on Thu, Oct 05, 2000 at 11:14:08AM -0700
Sender: weis@pauillac.inria.fr

>     It is well known that OCaml has undefined evaluation orders and that
> it uses right-to-left ordering. What is the rationale for that decision? 

The main reason was to accommodate the "push-enter" model used by the
Caml Light and Objective Caml virtual machines.  In this model,
arguments to curried functions are pushed on a stack, first argument
last, and then the code of the closure is entered.  (As opposed to the
"eval-apply" model, where the first argument is evaluated, followed by
one function application, then the second argument is evaluated,
followed by a second application, etc.)

The "push-enter" model allows a lot of nice optimizations for curried
functions, but entails right-to-left evaluation of function arguments.

Rather than "standardize" a right-to-left evaluation order, we decided
to leave the evaluation order officially unspecified.  At that time,
it was also believed that this could leave more flexibility for other
optimizations, e.g. the reordering of sub-expressions for minimizing
register use described in the Dragon book, and perhaps also for
parallel evaluation.

In retrospect, we overestimated the potential gains of such
optimizations, and actually never implemented any of them (nor
parallel evaluation), sticking to the same evaluation order in the
native-code compiler than in the bytecode interpreter.

>     Besides being surprising for lots of people, it is actually a little
> ugly to have to write explicit let bindings to force the order and when
> reading files which consist of long records;

Yes, I agree.  Even with good programming discipline, I get bitten
about once a year by the unexpected evaluation order.

In retrospect, perhaps we should have considered introducing "let"
bindings automatically to preserve left-to-right semantics within the
push-enter model (like Moscow ML does, I think), although this entails
a performance hit for the bytecode interpreter.

- Xavier Leroy


