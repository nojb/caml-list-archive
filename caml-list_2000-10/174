Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA31041 for caml-red; Thu, 26 Oct 2000 16:46:29 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA26920 for <caml-list@pauillac.inria.fr>; Thu, 26 Oct 2000 10:39:57 +0200 (MET DST)
Received: from tcs.inf.tu-dresden.de (tcs.inf.tu-dresden.de [141.76.75.101])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id e9Q8duv26694;
	Thu, 26 Oct 2000 10:39:56 +0200 (MET DST)
Received: from ithif20.inf.tu-dresden.de (ithif20 [141.76.75.120])
	by tcs.inf.tu-dresden.de (8.11.1/8.11.1) with ESMTP id e9Q8dun04171;
	Thu, 26 Oct 2000 10:39:56 +0200 (MET DST)
Received: (from tews@localhost)
	by ithif20.inf.tu-dresden.de (8.9.1a/8.9.1) id KAA11636;
	Thu, 26 Oct 2000 10:39:56 +0200 (MET DST)
Date: Thu, 26 Oct 2000 10:39:56 +0200 (MET DST)
Message-Id: <200010260839.KAA11636@ithif20.inf.tu-dresden.de>
From: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: Tom Hirschowitz <hirschow@mouton.inria.fr>
Cc: caml-list@inria.fr
Subject: Re: circular types?
In-Reply-To: <200010240848.e9O8m7v22594@concorde.inria.fr>
References: <200010240848.e9O8m7v22594@concorde.inria.fr>
X-Mailer: VM 6.34 under Emacs 19.34.1
Sender: weis@pauillac.inria.fr

Hi,

Tom Hirschowitz writes:
   From: Tom Hirschowitz <hirschow@mouton.inria.fr>
   Date: Tue, 24 Oct 2000 10:48:06 +0200
   Subject: Re: circular types?
   
   [some of the pseudo code deleted]

   ========== file expression.ml
   
   ? type formula
   
   type expression =
     | Abstraction of (string * types) list * expression
     ....
     | Formula of formula
   
   ===================================
   
   ========== file formula.ml
   
   ? type expression
   
   type formula = 
     | Forall of (string * types) list * formula
     ...
     | Expression of expression
   
   ===================================
   
   ========== file next.ml
   
   module MyTypes = Types + Expression + Formula;;
   
   ...
   
   ===================================
   
   Is it enough?
   
I think yes, just a two question to make sure I get it right:

- If I want to program a function typecheck (which recursively
walks down formulas, expressions, and types) I separate it into
typecheck_formula, typecheck_expression, etc and put these
functions into the respective files. Will there be lightweight
syntax for the forward declaration of typecheck_expression in
file formula.ml similar to what you used for the types above? 

- Assume another module that uses typecheck_formula, does it have
to "open" Formula or Next? 

- How about link order? The mixin module is linked after all
modules it mixes and all modules that use something of file
formula or expression have to be linked after the mixing module?

- (Impatiently) In which ocaml release can I expect the mixing
modules?

Bye,

Hendrik


