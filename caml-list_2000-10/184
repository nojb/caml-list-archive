Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA00108 for caml-red; Thu, 26 Oct 2000 20:40:50 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA02003 for <caml-list@pauillac.inria.fr>; Thu, 26 Oct 2000 18:55:17 +0200 (MET DST)
Received: from nef.ens.fr (nef.ens.fr [129.199.96.32])
	by nez-perce.inria.fr (8.11.1/8.10.0) with ESMTP id e9QGtGv03939
	for <caml-list@inria.fr>; Thu, 26 Oct 2000 18:55:16 +0200 (MET DST)
Received: from clipper.ens.fr (clipper-gw.ens.fr [129.199.1.22])
          by nef.ens.fr (8.10.1/1.01.28121999) with ESMTP id e9QGtEM63722
          ; Thu, 26 Oct 2000 18:55:14 +0200 (CEST)
Received: from localhost (frisch@localhost) by clipper.ens.fr (8.9.2/jb-1.1)
	id SAA14973 ; Thu, 26 Oct 2000 18:55:14 +0200 (MET DST)
Date: Thu, 26 Oct 2000 18:55:14 +0200 (MET DST)
From: Alain Frisch <frisch@clipper.ens.fr>
To: Ruchira Datta <datta@math.berkeley.edu>
cc: caml-list@inria.fr
Subject: Re: Why Not Tail-Recursive?
In-Reply-To: <20001025235738.A7286@blue1.berkeley.edu>
Message-ID: <Pine.GSO.4.04.10010261847440.12833-100000@clipper.ens.fr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis@pauillac.inria.fr

On Wed, 25 Oct 2000, Ruchira Datta wrote:

> The only thing I can think of is that the functions deepen and next_path
> are not actually tail-recursive as I expected them to be.  But why not?  

deepen is not tail recursive: the recursive call is followed by the
the exception handler (which must be desinstalled, even if it doesn't
catch any exception).

For instance:
let f x =
    try f x with Not_found -> ();;

will raise a Stack overflow when executed.

If you want the exception to stop the computation, install the handler
around the toplevel call of deepen.


>   let rec deepen ( elts_so_far, wgt_so_far, undecided_elts ) =
>     try (
>       match undecided_elts with
>       | [] -> 
>         let new_path = next_path ( elts_so_far, wgt_so_far, undecided_elts ) 
>         in deepen new_path
>       | elt :: elts ->
>         let new_wgt = wgt_so_far +. wgt_fn elt in
>         if new_wgt < desired_wgt then
>           deepen ( ( ( elt, true ) :: elts_so_far ), new_wgt, elts )
>         else if new_wgt = desired_wgt then
>           let _ = print_fn ( ( elt, true ) :: elts_so_far ) in
>           deepen ( ( ( elt, false ) :: elts_so_far ), wgt_so_far, elts )
>         else (* new_wgt > desired_wgt *)
>           let new_path = next_path ( elts_so_far, wgt_so_far, undecided_elts ) 
>           in deepen new_path
>     ) with Done -> ()
>   in deepen ( [], 0., elts_sorted_by_wgt )


-- 
  Alain Frisch


