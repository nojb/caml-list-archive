Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA25864 for caml-red; Tue, 24 Oct 2000 17:51:10 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA25142 for <caml-list@pauillac.inria.fr>; Tue, 24 Oct 2000 10:48:07 +0200 (MET DST)
Received: from mouton.inria.fr (mouton.inria.fr [128.93.11.37])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9O8m7v22594
	for <caml-list@inria.fr>; Tue, 24 Oct 2000 10:48:07 +0200 (MET DST)
Message-Id: <200010240848.e9O8m7v22594@concorde.inria.fr>
X-Mailer: exmh version 2.0.2
To: caml-list@inria.fr
Subject: Re: circular types?
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Tue, 24 Oct 2000 10:48:06 +0200
From: Tom Hirschowitz <hirschow@mouton.inria.fr>
Sender: weis@pauillac.inria.fr

Hendrik Tews writes :
I would like to have recursive types spread over different files
like ....

That should be possible, but again there will be a mixing step, 
creating
a new module, in which the different parts of your recursive types 
block
are linking together.

In your example, you would have :


========== file types.ml

? type formula

type types =
  | Product of types list
  ...
  | Comprehension of formula

===================================

========== file expression.ml

? type formula

type expression =
  | Abstraction of (string * types) list * expression
  ....
  | Formula of formula

===================================

========== file formula.ml

? type expression

type formula = 
  | Forall of (string * types) list * formula
  ...
  | Expression of expression

===================================

========== file next.ml

module MyTypes = Types + Expression + Formula;;

...

===================================

Is it enough?


> It would be great if one could incorporate a class into the
> recursion. But I guess as a first step one has to allow recursion
> between classes and types in one module as in

>     type t = ....

>     and class c = ...

>     and type t' = ...

I'm not here until now, since in the prototype, there are only 
recursive values. But probably O-people at Cristal could answer this 
point.

Bye,

Tom





