Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA16741 for caml-red; Tue, 17 Oct 2000 17:51:51 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA02991 for <caml-list@pauillac.inria.fr>; Mon, 16 Oct 2000 23:46:03 +0200 (MET DST)
Received: from thresher.xpsystems.com (proxy.xpsystems.com [207.171.47.2])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9GLjxL03437
	for <caml-list@inria.fr>; Mon, 16 Oct 2000 23:46:03 +0200 (MET DST)
Received: by THRESHER with Internet Mail Service (5.5.2650.21)
	id <VBKHJRMR>; Mon, 16 Oct 2000 14:46:29 -0700
Message-ID: <EDFD2A95EE7DD31187350090279C676701029231@THRESHER>
From: Brent Fulgham <brent.fulgham@xpsystems.com>
To: fran@reyes.somos.net
Cc: caml-list@inria.fr
Subject: RE: Seeking pratical tutorial or examples.
Date: Mon, 16 Oct 2000 14:46:14 -0700
X-Mailer: Internet Mail Service (5.5.2650.21)
Sender: weis@pauillac.inria.fr

Francisco (and others),

Could it be that your mind is merely reeling from the unfamiliar 
functional programming paradigm?  Those of use "raised" in the school
of procedural C programming, or working in the Dot-Com trenches in
Perl are used to thinking in terms of step 1, step2, ..., etc.

Those of us who have at least been exposed to Lisp or Scheme have
a leg up, because we were forced to think recursively and look at
a program's output as the result of the evaulation of functions.

You are probably right that some code snippets might be helpful,
but many of the references you site include many such examples.
Pierre Weis has already listed the references I have used to reach
my current novice-state familiarity with Caml, and you would be
well served to examine those documents.

I would also highly recommend Cousineau and Mauny's excellent
"The Functional Approach to Programming".  While not a Caml
tutorial, it teaches you the language as you go, and has the
added benefit of teaching you about functional programming.
If you like the venerable "Structure and Interpretation of
Computer Programming", this will be right up your alley.  Cousineau
and Mauny also include lots of useful examples of things like
quicksort (using Caml's functional approach, then again in a
more procedural way to contrast), parsing systems, tree traversal,
graphs, and more.  Highly recommended.

And of course, have fun!

-Brent


