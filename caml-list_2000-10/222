Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA05108 for caml-red; Tue, 31 Oct 2000 17:56:03 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA07047 for <caml-list@pauillac.inria.fr>; Tue, 31 Oct 2000 16:21:20 +0100 (MET)
Received: from p-mail2.cnet.fr (p-mail2.rd.francetelecom.fr [193.49.124.32])
	by nez-perce.inria.fr (8.11.1/8.10.0) with SMTP id e9VFLK504908
	for <caml-list@inria.fr>; Tue, 31 Oct 2000 16:21:20 +0100 (MET)
Received: by p-voyageur.issy.cnet.fr with Internet Mail Service (5.5.2650.21)
	id <VCLYD7P3>; Tue, 31 Oct 2000 16:21:07 +0100
Received: from lat4149.lannion.cnet.fr ([161.104.14.76]) by l-mhs1.lannion.cnet.fr with SMTP (Microsoft Exchange Internet Mail Service Version 5.5.2650.21)
	id V0L7LNS0; Tue, 31 Oct 2000 16:18:35 +0100
Received: by lat4149.lannion.cnet.fr (Postfix, from userid 1053)
	id 4E24A4CE8; Tue, 31 Oct 2000 16:27:20 +0100 (CET)
Date: Tue, 31 Oct 2000 16:27:20 +0100
From: CREGUT Pierre FTRD/DTL/LAN <pierre.cregut@rd.francetelecom.fr>
To: caml-list@inria.fr
Subject: Re: Where did the exception occur?
Message-ID: <20001031162720.B16649@lat4149.lannion.cnet.fr>
Mail-Followup-To: CREGUT Pierre FTRD/DTL/LAN <pierre.cregut@rd.francetelecom.fr>,
	caml-list@inria.fr
References: <200010311014.LAA0000024214@beaune.inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
User-Agent: Mutt/1.2.5i
In-Reply-To: <200010311014.LAA0000024214@beaune.inria.fr>; from Damien.Doligez@inria.fr on mar, oct 31, 2000 at 11:14:06 +0100
Sender: weis@pauillac.inria.fr

I do not agree with you Damien

- static analysis is important but will not solve everything
    ocamlexc delivers you the perfect information but only for perfect code. 
    You have to take care of every case to catch every possible exception to 
    make ocamlexc useful. This is necessary for production code but is 
    tedious for prototyping. These are two different uses of ocaml.

- the debugger is heavy, most of the time the only thing you want is a
  backtrace of your stack as with most debuggers for most languages.
    could it be possible that you do not need to do anything when you
    raise the exception to get a stack dump ? After all, if it is uncaught, 
    nobody should have overwritten the stack between the time where the 
    exception was raised and the time where it is caught by the toplevel
    except may be the stack pointer itself that should be saved.

Another point is that exceptions as a syntaxic construct are still the dark 
side of the language, we lack constructs to express efficiently the way 
we want to deal with them :

      let x = B1 in B2
      f B1 B2

How to catch exceptions raised in B1 but not the one raised in B2 ?
Yes sure you can go back to sum types (note for jocaml users : the problem
is definitely worse with parallelism and replies).
We also need some kind of abbreviation for try ... with EX -> assert false 
for use with ocamlexc

If error handling clutters your code then this code becomes unreadable.
If you do not deal with error handling then you will have unsecure code.

Pierre Crégut

-- 
Pierre Cregut - pierre.cregut@rd.francetelecom.fr - +33 2 96 05 16 28
FTR&D - DTL/MSV - 2 avenue Pierre Marzin - 22307 Lannion Cedex - France


