Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA29897 for caml-red; Thu, 26 Oct 2000 16:47:15 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA26449 for <caml-list@pauillac.inria.fr>; Thu, 26 Oct 2000 11:11:49 +0200 (MET DST)
Received: from mouton.inria.fr (mouton.inria.fr [128.93.11.37])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9Q9Bnb07386
	for <caml-list@inria.fr>; Thu, 26 Oct 2000 11:11:49 +0200 (MET DST)
Message-Id: <200010260911.e9Q9Bnb07386@concorde.inria.fr>
X-Mailer: exmh version 2.0.2
To: caml-list@inria.fr
Subject: Re: circular types? 
In-Reply-To: Your message of "Thu, 26 Oct 2000 10:39:56 +0200."
             <200010260839.KAA11636@ithif20.inf.tu-dresden.de> 
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Thu, 26 Oct 2000 11:11:49 +0200
From: Tom Hirschowitz <hirschow@mouton.inria.fr>
Sender: weis@pauillac.inria.fr

Hendrik Tews <tews@tcs.inf.tu-dresden.de> :

> - If I want to program a function typecheck (which recursively
> walks down formulas, expressions, and types) I separate it into
> typecheck_formula, typecheck_expression, etc and put these
> functions into the respective files. Will there be lightweight
> syntax for the forward declaration of typecheck_expression in
> file formula.ml similar to what you used for the types above? 

Yes. You'll have to specify the type of deferred functions in each 
module.
For example,


   ========== file expression.ml
   
   ? type formula
   
   type expression =
     | Abstraction of (string * types) list * expression
     ....
     | Formula of formula

   ? val typecheck_formula : formula -> ...

   let rec typecheck_expression = ...
   
   ===================================
   
   ========== file formula.ml
   
   ? type expression
   
   type formula = 
     | Forall of (string * types) list * formula
     ...
     | Expression of expression
   
   
   ? val typecheck_expression : expression -> ...

   let rec typecheck_formula = ...

   ===================================
   
   ========== file next.ml
   
   module MyTypes = Types + Expression + Formula;;
   
   ...
   
   ===================================
 

should work.


> - Assume another module that uses typecheck_formula, does it have
> to "open" Formula or Next? 

Other modules using those functions have to open Next, 
because before the merging, none of those functions or types 
is really defined.
For instance, the type checker refuses "Formula.typecheck_expression".

> - How about link order? The mixin module is linked after all
> modules it mixes and all modules that use something of file
> formula or expression have to be linked after the mixing module?

I really don't know, haven't worked on it yet.
But one module should be able to be mixed with many others.
Assume you want to test two strategies for type-checking expressions, 
you would use the same Formula module for both. 
Does it fix any link order anyway?

> - (Impatiently) In which ocaml release can I expect the mixing
> modules?

Not yet for sure!
Ocaml v 24.12? 
Xavier?





