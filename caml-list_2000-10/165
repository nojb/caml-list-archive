Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA31798 for caml-red; Tue, 24 Oct 2000 17:49:50 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA24981 for <caml-list@pauillac.inria.fr>; Tue, 24 Oct 2000 09:36:51 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9O7aiv20302
	for <caml-list@inria.fr>; Tue, 24 Oct 2000 09:36:45 +0200 (MET DST)
Received: from localhost (sansho.kurims.kyoto-u.ac.jp [130.54.16.90])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id QAA02768;
	Tue, 24 Oct 2000 16:36:22 +0900 (JST)
To: sacerdot@students.cs.unibo.it
Cc: caml-list@inria.fr
Subject: Re: Strange type error
In-Reply-To: Your message of "Mon, 23 Oct 2000 17:35:55 +0200"
	<20001023173554.A30886@students.cs.unibo.it>
References: <20001023173554.A30886@students.cs.unibo.it>
X-Mailer: Mew version 1.93 on Emacs 20.7 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20001024163515X.garrigue@kurims.kyoto-u.ac.jp>
Date: Tue, 24 Oct 2000 16:35:15 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 40
Sender: weis@pauillac.inria.fr

From: Claudio Sacerdoti Coen <sacerdot@students.cs.unibo.it>

>  let a.mli be
> 
>   type 'a section_path = { x : int; }
>   and mind_section_path = [ `MIND] section_path
>   type const_section_path = [ `CONST] section_path
> 
>  and b.mli be
> 
>  type 'a section_path = { x : int; }
>  type mind_section_path = [ `MIND] section_path
>  type const_section_path = [ `CONST] section_path
> 
>  b.mli is compiled without problems, but for a.mli I get
> 
>  File "prova.mli", line 3, characters 26-35:
>  This type [ `CONST] should be an instance of type [ `MIND]
> 
>  that seems nonsense to me. Someone could explain the error?

For a long time, the answer was: "this is not a bug, this is a
feature." (cf. this mailing list more than 1 year ago)
That is, in recursive type definitions, as in recursive value
definitions, the polymorphism is only given after a definition block
is finished. As a result, the definition in a.mli actually means:
        type 'a section_path = { x : int } constraint 'a = [ `MIND]
You can see it by doing `ocamlc -i -c a.mli'.

In the current version (upcoming 3.01), this problem is solved:
type definitions are assumed to be polymorphic, and if you want the
above behavior you must explicitly request it. As a result a.mli and
b.mli become equivalent. So we can now assume that this was a bug.

Cheers,

Jacques Garrigue
---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>


