Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA20060 for caml-red; Wed, 25 Oct 2000 21:10:29 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA15159 for <caml-list@pauillac.inria.fr>; Wed, 25 Oct 2000 16:25:28 +0200 (MET DST)
Received: from localhost.localdomain (starvin-marvin47.zip.com.au [210.23.142.47])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9PEPM911957;
	Wed, 25 Oct 2000 16:25:23 +0200 (MET DST)
Received: from ozemail.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id BAA14630;
	Thu, 26 Oct 2000 01:31:14 +1100
Message-ID: <39F6EEB2.A32C888D@ozemail.com.au>
Date: Thu, 26 Oct 2000 01:31:14 +1100
From: John Max Skaller <skaller@ozemail.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
CC: Tom Hirschowitz <hirschow@mouton.inria.fr>, caml-list@inria.fr
Subject: Re: circular types?
References: <200010230743.e9N7hJv12430@concorde.inria.fr> <200010240837.KAA23102@ithif20.inf.tu-dresden.de>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

Hendrik Tews wrote:
> I would like to have recursive types spread over different files
> like
> 
> ========== file types.ml
> 
> type types =
>   | Product of types list
>   ...
>   | Comprehension of formula
> 
> ========== file expression.ml
> 
> type expression =
>   | Abstraction of (string * types) list * expression
>   ....
>   | Formula of formula

> ========== file formula.ml
> 
> type formula =
>   | Forall of (string * types) list * formula
>   ...
>   | Expression of expression

	You can't. Instead, create a single interface (.mli) file containing
all the type definitions. No ml file is required. Note that you must
define class _types_ not classes. Your actual classes should be defined
and constrained to these types, and client modules should only know
the class types (not the classes).

	This way, indirection (abstraction) is used to solve the problem.

> It would be great if one could incorporate a class into the
> recursion. But I guess as a first step one has to allow recursion
> between classes and types in one module as in
> 
>     type t = ....
>     and class c = ... 
>     and type t' = ...

	See previous post: you can do this now, by first abstracting
the classes over the types:

	class type c' ['t] = ... 
	type t = .... t c' ...
	class type c = t c'

Again, indirection (abstraction) is used to solve the problem.
It is slightly more effort to first give (otherwise useless) generic
class types, then instantiate them.

Considerably more effort is required to give a class type,
and then separately an implementation (since a whole lot of
method signatures need to be repeated).

-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


