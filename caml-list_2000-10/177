Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA32187 for caml-red; Thu, 26 Oct 2000 16:48:17 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA26196 for <caml-list@pauillac.inria.fr>; Thu, 26 Oct 2000 11:12:51 +0200 (MET DST)
Received: from tcs.inf.tu-dresden.de (tcs.inf.tu-dresden.de [141.76.75.101])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9Q9Cab07402
	for <caml-list@inria.fr>; Thu, 26 Oct 2000 11:12:36 +0200 (MET DST)
Received: from ithif20.inf.tu-dresden.de (ithif20 [141.76.75.120])
	by tcs.inf.tu-dresden.de (8.11.1/8.11.1) with ESMTP id e9Q9Can05185
	for <caml-list@inria.fr>; Thu, 26 Oct 2000 11:12:36 +0200 (MET DST)
Received: (from tews@localhost)
	by ithif20.inf.tu-dresden.de (8.9.1a/8.9.1) id LAA21537;
	Thu, 26 Oct 2000 11:12:36 +0200 (MET DST)
Date: Thu, 26 Oct 2000 11:12:36 +0200 (MET DST)
Message-Id: <200010260912.LAA21537@ithif20.inf.tu-dresden.de>
From: Hendrik Tews <tews@tcs.inf.tu-dresden.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: caml-list@inria.fr
Subject: Re: circular types?
In-Reply-To: <39F6E831.621B85E3@ozemail.com.au>
References: <Pine.BSF.4.21.0010230748080.17875-100000@shell5.ba.best.com>
	<39F6E831.621B85E3@ozemail.com.au>
X-Mailer: VM 6.34 under Emacs 19.34.1
Sender: weis@pauillac.inria.fr

Hi,

John Max Skaller writes:
   From: John Max Skaller <skaller@ozemail.com.au>
   Date: Thu, 26 Oct 2000 01:03:29 +1100
   Subject: Re: circular types?
   
   I think this can be done now. Here is the method: to have a type t
   and a class c mutually dependent, for example:
   
   	class type c = object x : t end
   	and type  t = C c | Null
   
   write
   
   	class type c' ['t] = object x : 't end
   	type t = C t c' | Null
   	class type c = t c'
   

Yes, this is the theoretical answer. But this just doesn't work
out in anything bigger than a tutorial example. I am involved in
programming a logic compiler. We have about 40 variant types and
at least 10 classes. If my design were not constraint by the
abilities of the ocaml compiler some of the classes were in
mutual recursion with the bigger halve of the variant types. So
you are not telling me seriously I should write classes with 10
type variables!

Just for curiosity: Does somebody use the above workaround in a
project with more than 10.000 lines of ocaml code? (We do, but
every typing error is a nightmare.)

Bye,

Hendrik


