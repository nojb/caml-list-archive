Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA10893 for caml-red; Mon, 23 Oct 2000 13:39:01 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA07605 for <caml-list@pauillac.inria.fr>; Mon, 23 Oct 2000 09:43:20 +0200 (MET DST)
Received: from mouton.inria.fr (mouton.inria.fr [128.93.11.37])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9N7hJv12430
	for <caml-list@inria.fr>; Mon, 23 Oct 2000 09:43:19 +0200 (MET DST)
Message-Id: <200010230743.e9N7hJv12430@concorde.inria.fr>
X-Mailer: exmh version 2.0.2
To: caml-list@inria.fr
Subject: Re: circular types?
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Mon, 23 Oct 2000 09:43:19 +0200
From: Tom Hirschowitz <hirschow@mouton.inria.fr>
Sender: weis@pauillac.inria.fr

> Nope, no forwards in Ocaml. At some point, you'll have to tie the recursive 
> knot with an "and". If the problem you're having is that "far away" means 
> "in different modules" then you bump into the lack of recursive modules, 
> IMO the biggest PITA with ML style modules.

Hi, 

I'm pleased to see I'm not working for nobody. 
Actually I'm not working exactly on recursive modules, but rather on 
mixin modules.
Instead of defining your two modules and then link them, you would 
create a new one with the holes filled.
For instance, for Brain's example, you would write something like : 

mixin A = 
  mix 
    deferred module CompositeSet : sig type t ... end
    type composite = { data : string ; children : CompositeSet.t }
  end;;

mixin B = 
  mix
    deferred type composite
    module CompositeSet = 
      struct
        type t = C of composite | D
      end
  end

mixin C = A + B

In fact, this one is too difficult for me right now, because it 
relies on a mutual dependency between a type and a module.
Since I'm just beginning this, I would really be pleased by any 
comments, suggestions or questions about it.

Ciao.

Tom



