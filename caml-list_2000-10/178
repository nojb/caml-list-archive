Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA31756 for caml-red; Thu, 26 Oct 2000 16:48:34 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA29359 for <caml-list@pauillac.inria.fr>; Thu, 26 Oct 2000 15:30:15 +0200 (MET DST)
Received: from dv.go.dlr.de (dv.go.dlr.de [129.247.91.3])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9QDUEb13994
	for <caml-list@inria.fr>; Thu, 26 Oct 2000 15:30:14 +0200 (MET DST)
Received: (from brosenau@localhost)
	by dv.go.dlr.de (8.10.1/8.10.1) id e9QDUDK45488
	for caml-list@inria.fr; Thu, 26 Oct 2000 15:30:13 +0200
From: Benedikt Rosenau <Benedikt.Rosenau@dlr.de>
Message-Id: <200010261330.e9QDUDK45488@dv.go.dlr.de>
Subject: Some questions about type inference
To: caml-list@inria.fr
Date: Thu, 26 Oct 2000 15:30:11 +0200 (DFT)
Reply-To: Benedikt.Rosenau@debis-sfr.de
X-Mailer: ELM [version 2.5 PL3]
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

I have played with covariance. Namely, I tried to define a class
of objects with a method "eat" who would only eat objects defining
a method "eat" themselves.

The direct approach fails:

  class virtual broken_carnivore =
    object
      method virtual eat: <eat: _; ..> -> unit
    end

since there is an unbound type variable in the ellipsis.


However, the following works (more or less):

  class virtual ['a] carnivore =
    object
      constraint 'a = ('a) #carnivore
      method virtual eat: <eat: _; ..> -> unit
    end

and I can only speculate how this binds the type variable.


Another piece de resistence for my understanding is the following:
  match []::[] with a::b -> a = [] & b = []
works, while
  match []::[] with a::b -> a = b
gives a type error.
   Benedikt


