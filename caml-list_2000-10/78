Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA12099 for caml-red; Thu, 12 Oct 2000 18:48:51 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA08626 for <caml-list@pauillac.inria.fr>; Thu, 12 Oct 2000 16:08:28 +0200 (MET DST)
Received: from mrwall.kal.com (mrwall.kal.com [194.193.14.236])
	by nez-perce.inria.fr (8.10.0/8.10.0) with SMTP id e9CE8Sf21403
	for <caml-list@inria.fr>; Thu, 12 Oct 2000 16:08:28 +0200 (MET DST)
Received: from mrwall.kal.com [194.193.14.236]
	(HELO localhost)
	by mrwall.kal.com (AltaVista Mail V2.0J/2.0J BL25J listener)
	id 0000_0050_39e5_c5fc_534f;
	Thu, 12 Oct 2000 15:09:00 +0100
Received: from somewhere by smtpxd
Message-ID: <3145774E67D8D111BE6E00C0DF418B6631C1E8@nt.kal.com>
From: Dave Berry <dave@kal.com>
To: caml-list@inria.fr
Subject: RE: Undefined evaluation order: define it for constructors ?
Date: Thu, 12 Oct 2000 15:10:45 +0100
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.0.1460.8)
Content-Type: text/plain;
	charset="iso-8859-1"
Sender: weis@pauillac.inria.fr

Map is a function that really can be evaluated in parallel.  There is a
project at Heriot-Watt university that translates pure SML programs to run
on a parallel processor.  Array.map can potentially be run in parallel on
SIMD machines too.  So there is an argument for not specifying the order of
traversal of these functions (although this need not affect the language
definition).

Dave.

-----Original Message-----
From: Hugo Herbelin [mailto:Hugo.Herbelin@inria.fr]
Sent: Thursday, October 12, 2000 2:27 PM
To: garrigue@kurims.kyoto-u.ac.jp
Cc: caml-list@inria.fr
Subject: Re: Undefined evaluation order: define it for constructors ?

[Excerpt]
  It is sometimes useful to do side-effects with "List.map" (or
"Array.map"): it leads to code more readable than if using
"fold_left". I'd be happy if the evaluation order of "map" in the
interface were specified, as it is the case (for a good reason) for
the "iter" functional. 



