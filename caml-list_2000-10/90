Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA02370 for caml-red; Fri, 13 Oct 2000 21:46:12 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA27059 for <caml-list@pauillac.inria.fr>; Fri, 13 Oct 2000 18:57:51 +0200 (MET DST)
Received: from cepheus.azstarnet.com (cepheus.azstarnet.com [169.197.56.195])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e9DGvnj17290
	for <caml-list@inria.fr>; Fri, 13 Oct 2000 18:57:49 +0200 (MET DST)
Received: from dylan (dialup001ip167.tus.azstarnet.com [169.197.12.167])
	by cepheus.azstarnet.com (8.9.3/8.9.3) with SMTP id JAA14217
	for <caml-list@inria.fr>; Fri, 13 Oct 2000 09:57:47 -0700 (MST)
X-Sent-via: StarNet http://www.azstarnet.com/
Message-ID: <003a01c03537$3e67fe50$210148bf@dylan>
From: "David McClain" <dmcclain@azstarnet.com>
To: <caml-list@inria.fr>
Subject: OCaml and C math routines
Date: Fri, 13 Oct 2000 10:01:33 -0700
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 4.72.3110.5
X-MimeOLE: Produced By Microsoft MimeOLE V4.72.3110.3
Sender: weis@pauillac.inria.fr

OCaml'ers... I would be very interested to hear your response to this!

|> From: -Zhong Shao
(shao-zhong@cs.yale.edu)

||> From: "Stephen T. Weeks" <sweeks@intertrust.com>
||> ...................
||> Even more impressive for the OCAML compiler is the fact that the
||> PLClub entry was compiled using separate compilation (please
||> correct me if I'm wrong) but the MLton entry was compiled whole
||> program (by necessity) and the SML/NJ entry was compiled whole
||> program (because it improves the speed).
||> 

>From what I know, for the floating-point intensive benchmarks, Ocaml
is faster than SML/NJ mainly because Ocaml directly calls the native,
C-based math library (which in turn is fine-tuned for the actual
processor).  SML/NJ, on the other hand, implements all of the math
library functions (e.g., cos, sin, tan) in ML itself (as part of the
SML basis). There is easily an order-of-magnitude difference between
these two implementations. You could try to measure a few such math
functions to find out.

>Members of the SML basis committee and the Ocaml group probably can
tell us the pros and cons of calling the native math library vs. having
it written in ML itself.


- DM



