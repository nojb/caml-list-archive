Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA06273 for caml-red; Fri, 20 Oct 2000 14:42:43 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA31653 for <caml-list@pauillac.inria.fr>; Fri, 20 Oct 2000 14:24:32 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9KCON514445;
	Fri, 20 Oct 2000 14:24:23 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA29639; Fri, 20 Oct 2000 14:24:23 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <200010201224.OAA29639@pauillac.inria.fr>
Subject: Re: circular types?
In-Reply-To: <4.3.2.7.2.20001019193338.02db0220@walt> from Chris Hecker at "Oct 19, 100 07:35:03 pm"
To: checker@d6.com (Chris Hecker)
Date: Fri, 20 Oct 2000 14:24:23 +0200 (MET DST)
Cc: caml-list@inria.fr
X-Mailer: ELM [version 2.4ME+ PL28 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis@pauillac.inria.fr

> How do I do this:
> 
> type foo = B of bar
> type bar = F of foo
> 
> That is, I want two types to refer to each other.

It's exactly similar to value definitions: put a ``and'' between the
two recursive definitions.

type foo = B of bar
and bar = F of foo

Then you can define recursively a f of type foo and a b of type bar as in:

let rec f = B b
and b = F f;;

val f : foo =
 B
  (F
    (B
      (F
        (B
          (F
            (B
              (F ...
)))))))
val b : bar =
  F
   (B
     (F
       (B
         (F
           (B
             (F
               (B
                 (F ...
))))))))

Hope this helps,
        
Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://cristal.inria.fr/~weis/



