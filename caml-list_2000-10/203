Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id MAA17473 for caml-red; Mon, 30 Oct 2000 12:09:18 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA13098 for <caml-list@pauillac.inria.fr>; Mon, 30 Oct 2000 09:34:05 +0100 (MET)
Received: from gatesrv.rz.unibw-muenchen.de (gatesrv.RZ.UniBw-Muenchen.de [137.193.11.27])
	by concorde.inria.fr (8.11.1/8.10.0) with ESMTP id e9U8Y4P07269
	for <caml-list@inria.fr>; Mon, 30 Oct 2000 09:34:04 +0100 (MET)
Received: from dionysos.informatik.unibw-muenchen.de (dionysos.Informatik.UniBw-Muenchen.de [137.193.60.41])
	by gatesrv.rz.unibw-muenchen.de (8.9.1b+Sun/8.9.3) with SMTP id JAA21822
	for <caml-list@inria.fr>; Mon, 30 Oct 2000 09:30:16 +0100 (MET)
Received: (qmail 31397 invoked by uid 210); 30 Oct 2000 08:30:14 -0000
Date: 30 Oct 2000 08:30:14 -0000
Message-ID: <20001030083014.31396.qmail@dionysos.informatik.unibw-muenchen.de>
From: kahl@heraklit.informatik.UniBw-Muenchen.de
CC: Pierre.Weis@inria.fr
To: caml-list@inria.fr
In-reply-to: <200010281655.SAA31819@pauillac.inria.fr> (message from Pierre
	Weis on Sat, 28 Oct 2000 18:55:08 +0200 (MET DST))
Subject: Why does the order in the Makefile matter? --- Linking with C
References:  <200010281655.SAA31819@pauillac.inria.fr>
Sender: weis@pauillac.inria.fr


Pierre Weis <Pierre.Weis@inria.fr> wrote:
 
> Hence, when the entire program is made of multiple implementation
> files, those files must be linked in any order that is compatible with
> the static binding rule: no definition can be linked if it refers to
> an identifier that is defined after the definition at hand.  In
> addition, expressions to be computed must evidently appear in any
> order compatible with the desired runtime behaviour.

However, yesterday I experimented with implementing a system call in C
(why does the standard library only provide sleep with a granularity of
 whole seconds?),
and I linked it together with the .cmx file containing the external definition
into utils.cmxa.

Then I proceeded to link my application, consisting of other *.ml modules
that use stuff from utils.cmxa, including that external function:

ocamlopt ... -o application utils.cmxa others1*.cmxa others2*.cmx

The result was a link error that the system call could not be found.
(The analogous bytecode variant compiles without complaints,
 but I only use the bytecode compiler as a kind of ``lint''.)
So I had to take utilsC.o out of utils.cmxa and revert to:

ocamlopt ... -o application utils.cmxa others1*.cmxa others2*.cmx utilsC.o

This is logical with my understanding of C linking,
but I would prefer not to have to use that knowledge... ;-)

Is this asymmetry known/documented/on purpose?


Best regards,

Wolfram Kahl





