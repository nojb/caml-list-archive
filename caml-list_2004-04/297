Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA26694; Wed, 14 Apr 2004 04:53:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA25719 for <caml-list@pauillac.inria.fr>; Wed, 14 Apr 2004 04:53:05 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i3E2s3jq023963
	for <caml-list@inria.fr>; Wed, 14 Apr 2004 04:54:04 +0200
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id LAA08636;
	Wed, 14 Apr 2004 11:52:45 +0900 (JST)
Date: Wed, 14 Apr 2004 11:52:45 +0900 (JST)
Message-Id: <20040414.115245.31191001.garrigue@kurims.kyoto-u.ac.jp>
To: Christophe.Troestler@umh.ac.be
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Re: GODI
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
In-Reply-To: <20040413.215709.133591297.Christophe.Troestler@umh.ac.be>
References: <20040413.200746.94354715.Christophe.Troestler@umh.ac.be>
	<1081884649.24590.122.camel@ice.gerd-stolpmann.de>
	<20040413.215709.133591297.Christophe.Troestler@umh.ac.be>
X-Mailer: Mew version 4.0.64 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 troestler:01 troestler:01 sven:01 pervasives:01 dpkg:01 basing:01 interfacing:01 interfacing:01 gc's:01 portage:01 developpers:01 dependencies:01 tweaking:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 297

From: Christophe TROESTLER <Christophe.Troestler@umh.ac.be>
> 
> Sven should say better what is possible but my idea is that GODI and
> the Debian package system talk to each other.  So there should NOT be
> two Pervasives modules.  If the GODI (Debian) package is installed,
> the other Ocaml packages should make use of it.  If GODI wants to
> recompile some Debian Package, either (1) delegate the task to the
> Debian package manager (say there is a new version of the package
> available or else use dpkg to download and build from source) or (2)
> consider Debian packages as "on hold" and refuse the GODI operation.
> 
> That requires a correspondance between package names on the two sides
> -- thus some dialog with the Debian maintainers -- but it is a good
> idea not to have different names for a given package anyway...

What you are saying amounts more or less to basing GODI on the debian
packaging system. Interfacing between packaging systems is going to be
just as difficult as interfacing between GC's: almost impossible if
you are not a guru of the two systems. And then why not do it for all
other packaging systems around (rpm, portage, freebsd packages...)

I think that it would be much more reasonable to have a packaging
system controlling all of ocaml, but only ocaml. This includes
compiling and installing from CVS, because those are the cases when a
recompiling package system is really necessary, and because many
developpers (and potential contributors to GODI) are using CVS
versions of ocaml.

The interface to external packaging systems could be just minimal:
external packaging systems handle non-ocaml dependencies, and issue
GODI commands for installing/uninstalling the package. Since GODI may
have to recompile things later, having an external packaging system
trying to track GODI files would be a pain, and probably a useless
one.

This also makes me think that godi should not handle non-ocaml
packages (like gdbm currently), because this is only going to generate
frictions with other packaging systems.

Last, we need support for windows, and for binary packages. I don't
know who is going to do it, but these are requirements to make godi
the standard.

And of course, lots of maintenance needed. I must be using exotic
architectures, but godi never worked properly on any of my machines
(solaris8/x86  and freebsd5.2), at least without lots of tweaking.
Making it work properly on a lot of platforms will require a huge
amount of work, and cannot be handled by a single developper.
Which creates another problem: GODI is based on C tools and BSD
makefiles. I'm not sure this is the favorite kind of things ocaml
programmers would maintain.

By the way I'm ready to help, if there is some understandable way to
do so.

---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

