Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA30310; Thu, 29 Apr 2004 00:41:32 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA30289 for <caml-list@pauillac.inria.fr>; Thu, 29 Apr 2004 00:41:31 +0200 (MET DST)
Received: from aomori.annexia.org (annexia.force9.co.uk [212.56.101.183])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i3SMfUYM010775
	for <caml-list@inria.fr>; Thu, 29 Apr 2004 00:41:30 +0200
Received: from rich by aomori.annexia.org with local (Exim 3.36 #1 (Debian))
	id 1BIxkA-0007uG-00
	for <caml-list@inria.fr>; Wed, 28 Apr 2004 23:41:30 +0100
Date: Wed, 28 Apr 2004 23:41:30 +0100
To: caml-list@inria.fr
Subject: Re: [Caml-list] Re: Common IO structure
Message-ID: <20040428224130.GA30256@redhat.com>
References: <016401c42bc4$b6438840$19b0e152@warp> <20040428.004358.45522587.yoriyuki@mbg.ocn.ne.jp> <016501c42c73$24e64b30$ef01a8c0@warp> <20040428.015800.126758722.yoriyuki@mbg.ocn.ne.jp> <408EEE3E.7050008@socialtools.net> <20040428034415.GB19564@complete.org> <40902265.9040702@socialtools.net> <20040428214442.GE10198@excelhustler.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20040428214442.GE10198@excelhustler.com>
User-Agent: Mutt/1.5.5.1+cvs20040105i
From: Richard Jones <rich@annexia.org>
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 api:01 crap:01 terrible:01 team's:01 ltd:98 caml:01 classes:03 interface:03 prototype:04 investment:94 probably:05 structure:06 indeed:06 indeed:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Indeed.

People are really missing the point that an API is a user interface
for _programmers_.  The most important thing is that it be easy, short
and simple for programmers to do their job - ie. write _programs_.
'Java.io' and all its miriad of ill-conceived classes which require
you to remember, recall and rewite tons of crap is a great example of
a terrible _programming_ UI.

So a good way to start, and indeed the way I started when thinking
about mod_caml/ocamldbi, is:

* What programs do people need to write?

* What are they going to have to _type_ to write those programs?

Let's get what you need to _type_ as short as possible, and then you
probably have a good UI that _programmers_ can use.

</annoyed mode="off">

Rich.

-- 
Richard Jones. http://www.annexia.org/ http://www.j-london.com/
Merjis Ltd. http://www.merjis.com/ - improving website return on investment
'There is a joke about American engineers and French engineers. The
American team brings a prototype to the French team. The French team's
response is: "Well, it works fine in practice; but how will it hold up
in theory?"'

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

