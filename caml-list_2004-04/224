Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id HAA30064; Sat, 10 Apr 2004 07:00:08 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id HAA30163 for <caml-list@pauillac.inria.fr>; Sat, 10 Apr 2004 07:00:07 +0200 (MET DST)
Received: from calmail-cl.berkeley.edu (mailfarm.Berkeley.EDU [128.32.61.106])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i3A511jq021338
	for <caml-list@inria.fr>; Sat, 10 Apr 2004 07:01:02 +0200
Received: from [64.162.212.212] (HELO tallman.kefka.frap.net)
  by calmail-cl.berkeley.edu (CommuniGate Pro SMTP 4.1.8)
  with SMTP id 15124169; Fri, 09 Apr 2004 22:00:04 -0700
Received: by tallman.kefka.frap.net (sSMTP sendmail emulation); Fri, 9 Apr 2004 21:59:24 -0700
Date: Fri, 9 Apr 2004 21:59:24 -0700
From: Kenneth Knowles <kknowles@berkeley.edu>
To: "Brandon J. Van Every" <vanevery@indiegamedesign.com>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] OpenGL
Message-ID: <20040410045924.GA4630@tallman.kefka.frap.net>
References: <Pine.LNX.4.44.0404091101220.25700-100000@localhost.localdomain> <OOEALCJCKEBJBIJHCNJDGEMPHAAB.vanevery@indiegamedesign.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <OOEALCJCKEBJBIJHCNJDGEMPHAAB.vanevery@indiegamedesign.com>
User-Agent: Mutt/1.5.6i
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; knowles:99 caml-list:01 2004:99 brandon:99 apis:01 re-implement:01 high-level:01 inference:01 orthogonal:01 0700,:01 polymorphic:01 opengl:02 first-class:02 modules:02 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 224

On Fri, Apr 09, 2004 at 09:32:37PM -0700, Brandon J. Van Every wrote:
> [Lot's of good info on 3D APIs]

3D graphics are not particularly interesting to me, but there are three sounds
principles to apply here:

1.  Go with standards.
2.  Bind first, re-implement later.
3.  Guys who need to "get work done" have experience, so respect that.  But they
don't use modern, high-level languages very often, so remember they are
inexperienced in this arena (I know many many programmers who have never heard
of first-class functions, type inference, or polymorphic types).

Number 2 means, use what is there now, and build slowly from the ground up to
get nice orthogonal design in modules that make sense for your language.  Perl
is an excellent example.

Kenn

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

