Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA15386; Fri, 16 Apr 2004 08:24:04 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA15734 for <caml-list@pauillac.inria.fr>; Fri, 16 Apr 2004 08:24:03 +0200 (MET DST)
Received: from outbound28-2.lax.untd.com (vlan1-1.bigip2.lax.untd.com [64.136.28.160])
	by concorde.inria.fr (8.12.10/8.12.10) with SMTP id i3G6O1YM017619
	for <caml-list@inria.fr>; Fri, 16 Apr 2004 08:24:02 +0200
Received: from outbound28-2.lax.untd.com (smtp03.lax.untd.com [10.130.24.123])
	by smtpout01.lax.untd.com with SMTP id AABAH8878A43FASS
	for <caml-list@inria.fr> (sender <vanevery@indiegamedesign.com>);
	Thu, 15 Apr 2004 23:22:54 -0700 (PST)
Received: (qmail 17733 invoked from network); 16 Apr 2004 06:22:47 -0000
Received: from dsc04-sei-wa-199-182-70-104.rasserver.net (HELO vangogh) (199.182.70.104)
  by smtp03.lax.untd.com with SMTP; 16 Apr 2004 06:22:47 -0000
From: "Brandon J. Van Every" <vanevery@indiegamedesign.com>
To: "caml" <caml-list@inria.fr>
Subject: [Caml-list] build tools - good vs. fast, both cheap
Date: Thu, 15 Apr 2004 23:31:44 -0700
Message-ID: <OOEALCJCKEBJBIJHCNJDAEBHHBAB.vanevery@indiegamedesign.com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="Windows-1252"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.6604 (9.0.2911.0)
In-Reply-To: <20040416011616.GA13198@tallman.kefka.frap.net>
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1409
Importance: Normal
X-ContentStamp: 15:7:1182726168
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; brandon:99 knowles:99 2004:99 brandon:99 labeling:01 offtopic:01 expressing:01 all-ocaml:01 autoconf:01 autoconf:01 scream:01 horror:99 horror:99 reuse:01 ocamake:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Kenneth Knowles wrote:
> On Thu, Apr 15, 2004 at 04:58:47PM -0700, Brandon J. Van Every wrote:
> >
> > Productive would be, you go do your thing, we'll go do ours.  Enough
> > talk.  We know where our lines of disagreement are.
>
> Actually I don't know at all.  All I know at this point is
> that we agree that
> current tools are inadequate (many times over).  If we "go
> our separate ways"
> it'd be stopping the discussion before it starts, and each
> party certainly has a
> right to do that, it's just a bummer.

Ok, if you want to discuss, then let's please everybody refrain from
labeling other people's lines of discussion as offtopic rants,
uninteresting, etc.  I don't mind hearing when someone says they think
such-and-such tool or approach sucks.  They might, after all, be
partially or even wholly correct.  I do mind when someone says our
opinions aren't worth expressing.  It's a quick way to kill a
discussion.

So where are we?  We're having the age old engineering argument, "good,
fast, cheap, pick any two."  We're all open source developers so we're
all cheap.  :-)  We've got one camp that sees an all-OCaml build +
package management system as the goal.  Count me in on that, and I will
label it the "GOOD AND CHEAP" camp.  We've got another camp that sees
getting any build + package management system together as quickly as
possible from readily available parts as the goal.  I will label it the
"FAST AND CHEAP" camp.

We know that good will not be fast.  Ideal solutions take a long time to
develop.  We've got plenty of starting points and interim scaffolding
available though.

Will fast be any good?

What is the ultimate goal?  I say, the ultimate goal is total ease of
use for an OCaml developer.  The OCaml developer should have a major
platform advantage over everyone else.  It should be a helluva lot
easier for OCaml guys to get their packaging and dependency job done
than anyone else out there.  The tool should be completely
cross-platform.  I would like to think that somehow, OCaml would analyze
lotsa stuff and automagically figure tons of things out.  It should
seriously leverage the power of the language.  It should be a heavy duty
value add to the developer, a big incentive to join the OCaml community
because We Do Things Better [TM].  Makefiles and autoconf cannot achieve
that ultimate goal.  I've worked with them plenty, back in the day I was
an autoconf guru.  Now when I get back into it I just scream, "The
horror!  The horror!" before I die.  We shouldn't be aspiring to the
manual labor of Make and company.

My philosophy is, if it is not an advanced build and package management
system, there is no point in pursuing it.  The ad hoc methods already
suffice for lesser goals.  So, with that in mind, what is currently the
most advanced build and package management system known to Humankind, in
any language?  That is where we should be looking for design reuse.

After that, then we ask what kinds of expertise we already have among
us.  Some have already been mentioned: OCamake, OCamlconf, GODI,
Interscript.  Any / all of these things could potentially provide
components, designs, or scaffolding.  It is quite possible that what is
actually needed, has not yet been built by any one person.  In that case
it would be best if people recognize personal inadequacy and agree to
work together for the common good.


Cheers,                     www.indiegamedesign.com
Brandon Van Every           Seattle, WA

When no one else sells courage, supply and demand take hold.

---
Outgoing mail is certified Virus Free.
Checked by AVG anti-virus system (http://www.grisoft.com).
Version: 6.0.643 / Virus Database: 411 - Release Date: 3/25/2004

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

