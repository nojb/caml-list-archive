Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA32314; Fri, 16 Apr 2004 16:53:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA00137 for <caml-list@pauillac.inria.fr>; Fri, 16 Apr 2004 16:53:10 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i3GEsBjq004674
	for <caml-list@inria.fr>; Fri, 16 Apr 2004 16:54:12 +0200
Received: from [192.168.1.200] (ppp113-79.lns1.syd3.internode.on.net [150.101.113.79])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i3GEquk2098759;
	Sat, 17 Apr 2004 00:22:57 +0930 (CST)
Subject: Re: [Caml-list] build tools - good vs. fast, both cheap
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: "Brandon J. Van Every" <vanevery@indiegamedesign.com>
Cc: caml-list <caml-list@inria.fr>
In-Reply-To: <OOEALCJCKEBJBIJHCNJDAEBHHBAB.vanevery@indiegamedesign.com>
References: <OOEALCJCKEBJBIJHCNJDAEBHHBAB.vanevery@indiegamedesign.com>
Content-Type: text/plain
Message-Id: <1082127176.20063.85.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 17 Apr 2004 00:52:56 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 brandon:99 reuse:01 dependencies:01 abstraction:01 -c':01 everying:01 9660:01 glebe:01 suffice:01 literate:01 nsw:01 snail:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-04-16 at 16:31, Brandon J. Van Every wrote:

> My philosophy is, if it is not an advanced build and package management
> system, there is no point in pursuing it.  The ad hoc methods already
> suffice for lesser goals.  So, with that in mind, what is currently the
> most advanced build and package management system known to Humankind, in
> any language?  That is where we should be looking for design reuse.

I suggest we look at something more abstract.
Dependencies, relations, processes, types, functions ..

Which abstraction is useful for dealing with that?

Category theory.

Here is a really simple processing category:

	'gcc -c': *c -> *.o

Now consider the categories needed to build a literate
programmed book of over 3000 pages .. there's a LOT more
to building books than mere software, especially when
using LP implies the sources contain the build scripts
for everying .. including running tests .. generating
documentation .. and trying to do all that in a way
that is practical performance wise: you don't typeset
3000 pages of LaTex just because you changed a few
lines of code.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

