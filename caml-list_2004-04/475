Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA07131; Tue, 20 Apr 2004 03:50:25 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA07126; Tue, 20 Apr 2004 03:50:24 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i3K1oLYM008269;
	Tue, 20 Apr 2004 03:50:22 +0200
Received: from [192.168.1.200] (ppp117-65.lns1.syd2.internode.on.net [150.101.117.65])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i3K1o7k2043815;
	Tue, 20 Apr 2004 11:20:09 +0930 (CST)
Subject: Re: [Caml-list] Real Time Ocaml
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Karl Zilles <zilles@1969.ws>
Cc: Brian Hurt <bhurt@spnz.org>,
        Basile Starynkevitch <basile.starynkevitch@inria.fr>,
        Ocaml Mailing List <caml-list@inria.fr>
In-Reply-To: <40846F57.9000201@1969.ws>
References: <Pine.LNX.4.44.0404191911490.6919-100000@localhost.localdomain>
	 <40846F57.9000201@1969.ws>
Content-Type: text/plain
Message-Id: <1082425807.21205.456.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 20 Apr 2004 11:50:07 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 milliseconds:01 milliseconds:01 9660:01 glebe:01 ocaml:01 garbage:01 garbage:01 nsw:01 snail:02 collector:02 collector:02 checkout:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Tue, 2004-04-20 at 10:31, Karl Zilles wrote:

> In a realtime garbage collector, how can you prove that you are freeing 
> unused memory as fast as you allocate it?

by computing bounds on performance.

For example: once per millisecond you allocate at most 1K objects,
and you have at least 0.2 milliseconds left for the
collector, and the collector collects 1K objects in 0.1
milliseconds worst case .. all garbage is collected
at the start of each 1ms cycle. Assume constant
persistent store: result follows.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

