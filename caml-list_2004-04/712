Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id HAA15002; Tue, 27 Apr 2004 07:21:06 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id HAA15007 for <caml-list@pauillac.inria.fr>; Tue, 27 Apr 2004 07:21:05 +0200 (MET DST)
Received: from hosting.commandprompt.com (128.commandprompt.com [207.173.200.128])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i3R5L3YM014404
	for <caml-list@inria.fr>; Tue, 27 Apr 2004 07:21:04 +0200
Received: from hosting.commandprompt.com (65-102-116-167.tukw.qwest.net [65.102.116.167])
	(authenticated)
	by hosting.commandprompt.com (8.11.6/8.11.6) with ESMTP id i3R5L2K06013
	for <caml-list@inria.fr>; Mon, 26 Apr 2004 22:21:02 -0700
Received: by hosting.commandprompt.com (sSMTP sendmail emulation); Mon, 26 Apr 2004 22:24:46 -0700
Date: Mon, 26 Apr 2004 22:24:46 -0700
From: Jeff Henrikson <jehenrik@yahoo.com>
Cc: caml-list@inria.fr
Subject: [Caml-list] Re: swig like library...
Message-ID: <20040427052443.GC101@respighi.local.>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.4i
X-OS: Darwin respighi.local. 6.0 Power Macintosh
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; henrikson:01 jehenrik:01 swig:01 swig:01 immutable:01 stub:01 asts:01 wrappers:01 omg:99 darwin:01 henrikson:01 idl:01 idl:01 ocaml:01 stubs:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Any interest in an Ocaml based SWIG like tool?

When I put on hiatus my Forklift development, I was thinking a lot about the following problem, which I made up to focus my path.

==> Make precise the relationship between the immutable C header files and the assignments of stubs, HLL types, and HLL modules.  In order to separate pattern matching from stub generation, output an abstract representation.  Suppose we choose IDL as that abstract representation.  Then give a pattern matching system that filters C header ASTs according to pattern rules and generates both a IDL file to make them CORBA callable, and C function wrappers to make them conform to the CORBA->C language mapping.

Here is the CORBA->C language mapping:

http://www.omg.org/technology/documents/formal/corba_language_mapping_specs.htm

Hey, as a bonus, if we solve this problem we build a machine for making arbitrary C code easily CORBA callable, a useful ability in its own right.  I have seen requests on CORBA lists for solutions to this problem.

Last time I tried to work on this, I got very frustrated just trying to find a IDL that would compile on Darwin.  Geesh.  I gues one of the things that happens when you build a layer that has an ability to translate every last type is you make a monster in its configure script.


Jeff Henrikson



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

