Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id EAA07491; Tue, 6 Apr 2004 04:51:37 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id EAA07479 for <caml-list@pauillac.inria.fr>; Tue, 6 Apr 2004 04:51:35 +0200 (MET DST)
Received: from mail.rsise.anu.edu.au (mail.rsise.anu.edu.au [150.203.208.4])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i362pXYM010833
	for <caml-list@inria.fr>; Tue, 6 Apr 2004 04:51:34 +0200
Received: from localhost (localhost [127.0.0.1])
	by mail.rsise.anu.edu.au (Postfix) with ESMTP id 9C53C2B92
	for <caml-list@inria.fr>; Tue,  6 Apr 2004 12:51:30 +1000 (EST)
Received: from pulp.anu.edu.au (pulp.anu.edu.au [150.203.126.25])
	by mail.rsise.anu.edu.au (Postfix) with ESMTP id 907342B91
	for <caml-list@inria.fr>; Tue,  6 Apr 2004 12:51:29 +1000 (EST)
Received: by pulp.anu.edu.au (Postfix, from userid 1560)
	id C1F5125B7AD; Tue,  6 Apr 2004 12:51:29 +1000 (EST)
Date: Tue, 6 Apr 2004 12:51:29 +1000
From: Pietro Abate <Pietro.Abate@anu.edu.au>
To: ocaml ml <caml-list@inria.fr>
Subject: [Caml-list] dynlink
Message-ID: <20040406025129.GA8845@pulp.anu.edu.au>
Mail-Followup-To: Pietro Abate <Pietro.Abate@anu.edu.au>,
	ocaml ml <caml-list@inria.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
X-Operating-System: GNU/Linux
X-Organization: Research School of Information Science and Engineering (Australian National University)
User-Agent: Mutt/1.5.5.1+cvs20040105i
X-Scanned-By: AMaViS-ng/Claimv at mail.rsise.anu.edu.au 
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; pietro:01 abate:01 pietro:01 abate:01 dynlink:01 dynlink:01 dependecies:01 dependecies:01 deps:01 deps:01 loadfile:01 philosophy:02 module:03 module:03 recursive:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 57

Hi all,
I'm using dynlink for my project and since now I always had really
simple dependecies (each module dependes only to an other module).

As things are getting more complicated I need to have one module
that dependes by many others. My initial solution was to load the
module, look at possible dependecies error and try to solve them. It
works well for the simple case but it fails with multiple deps.

Does anyone can show me how to get the list of (recursive) depcs given a
module ? recursive as a module can depend by an other module that in
turn dependes by many other ...

something like

let depslist = magicfunction filename in (* I get all recrusive deps or fail *)
List.iter (fun f -> Dynlink.loadfile f) (List.rev listdeps) (* I load eveything in order *)

tnx,
p

-- 
++ "All great truths begin as blasphemies." -George Bernard Shaw
++ Please avoid sending me Word or PowerPoint attachments.
   See http://www.fsf.org/philosophy/no-word-attachments.html

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

