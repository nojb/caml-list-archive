Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id KAA30752; Thu, 29 Apr 2004 10:11:36 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA30675 for <caml-list@pauillac.inria.fr>; Thu, 29 Apr 2004 10:11:35 +0200 (MET DST)
Received: from mail3.epfl.ch (mail3.epfl.ch [128.178.50.19])
	by concorde.inria.fr (8.12.10/8.12.10) with SMTP id i3T8BYYM011383
	for <caml-list@inria.fr>; Thu, 29 Apr 2004 10:11:34 +0200
Received: (qmail 3671 invoked by uid 107); 29 Apr 2004 08:11:34 -0000
Received: from mailav2.epfl.ch (HELO mailav2) (128.178.50.191)
  by mail3.epfl.ch with SMTP; 29 Apr 2004 08:11:34 -0000
Received: From mail0.epfl.ch ([128.178.50.57]) by mailav2 (WebShield SMTP v4.5 MR1a P0803.345);
	id 1083226499116; Thu, 29 Apr 2004 10:14:59 +0200
Received: from lcavpc19.epfl.ch (128.178.8.56)
  by mail0.epfl.ch (AngelmatoPhylax SMTP proxy); Thu, 29 Apr 2004 10:11:33 +0200
Date: Thu, 29 Apr 2004 10:11:33 +0200 (CEST)
From: Henri DF <henri.dubois-ferriere@epfl.ch>
X-X-Sender: henridf@lcavpc19.epfl.ch
To: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
cc: jgoerzen@complete.org, <caml-list@inria.fr>
Subject: Re: [Caml-list] Optional arguments in inherited methods
In-Reply-To: <20040429.074806.68548985.garrigue@kurims.kyoto-u.ac.jp>
Message-ID: <Pine.LNX.4.44.0404291010340.4861-100000@lcavpc19.epfl.ch>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 implemented:01 non-optional:01 implemented:01 henri:03 henri:03 typing:03 argument:03 argument:03 arguments:03 arguments:03 inherited:04 epfl:05 unfortunate:06 source:07 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> Unfortunate, but in the case of optional arguments the problem is
> not with typing but with how they are implemented: an optional
> argument of type [t] is actually a non-optional argument of type [t
> option]. They disappear automagically on application, but this means
> that None's are automatically inserted. So applying a function which has
> optional arguments is completely different from a function without
> them (even if the function call looks the same in your source code).
> 

what about optional arguments which have a default value? i would assume 
these are not implemented using options, so would that change anything 
here?

thanks
henri

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

