Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA04466; Wed, 28 Apr 2004 06:27:05 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA04383 for <caml-list@pauillac.inria.fr>; Wed, 28 Apr 2004 06:27:04 +0200 (MET DST)
Received: from herd.plethora.net (herd.plethora.net [205.166.146.1])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i3S4R3YM010252
	for <caml-list@inria.fr>; Wed, 28 Apr 2004 06:27:03 +0200
Received: from bhurt.plethora.net (bhurt.plethora.net [205.166.146.49])
	by herd.plethora.net (8.11.6/8.10.1) with ESMTP id i3S4QmR26196;
	Tue, 27 Apr 2004 23:26:53 -0500 (CDT)
Date: Tue, 27 Apr 2004 23:31:53 -0500 (CDT)
From: Brian Hurt <bhurt@spnz.org>
X-X-Sender: bhurt@localhost.localdomain
To: Martin Berger <martinb@dcs.qmul.ac.uk>
cc: skaller@users.sourceforge.net, The Caml Trade <caml-list@inria.fr>
Subject: Re: [Caml-list] [ANN] The Missing Library
In-Reply-To: <408CFBDA.6040604@dcs.qmul.ac.uk>
Message-ID: <Pine.LNX.4.44.0404272326450.9460-100000@localhost.localdomain>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ocaml's:01 expressive:01 pcaml:01 extlib:01 extlib:01 ocaml:01 ocaml:01 overloading:01 enforce:02 enforce:02 typing:03 wrote:03 library:03 library:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 26 Apr 2004, Martin Berger wrote:

> 
> > The result is, in my opinion, the best CS library
> > EVER built. Its just a pity the C++ language doesn't
> > have what it takes to drive it (lexical scoping 
> > like ML has).
> 
> i agree with this. what i wonder is: why not do the STL for
> ocaml? of course ocaml's typing system is not (yet) up
> expressive enough to express/enforce all relevant concepts,
> and may never be, but so what? neither is c++, but the
> STL is highly successful.

I'm wondering what concepts Ocaml can't express/enforce?  The only thing I 
can think of that you can do in C++ templates that I can't do in Ocaml is 
code generation- I have to use pcaml for that :-).

Well, one caveat- Ocaml doesn't allow for operator overloading.  But it 
*does* allow for defining new operators.  

It's been too long since I've used the STL- what data structures and 
algorithms does it provide?  I'm betting that Ocaml, or Ocaml + ExtLib, 
already provides most if not all of them.

Maybe we should take this to the extlib mailing list...

-- 
"Usenet is like a herd of performing elephants with diarrhea -- massive,
difficult to redirect, awe-inspiring, entertaining, and a source of
mind-boggling amounts of excrement when you least expect it."
                                - Gene Spafford 
Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

