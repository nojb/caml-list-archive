Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA32104; Wed, 14 Apr 2004 22:19:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA32319 for <caml-list@pauillac.inria.fr>; Wed, 14 Apr 2004 22:19:52 +0200 (MET DST)
Received: from pop19.ucdavis.edu (pop19.ucdavis.edu [169.237.105.29])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i3EKKqjq016598
	for <caml-list@inria.fr>; Wed, 14 Apr 2004 22:20:53 +0200
Received: from mallorn (mallorn.ucdavis.edu [128.120.141.141])
	by pop19.ucdavis.edu (8.12.10/8.12.9/it-std-5.2.0) with SMTP id i3EKJnbX011460
	for <caml-list@inria.fr>; Wed, 14 Apr 2004 13:19:49 -0700 (PDT)
Received: by mallorn (sSMTP sendmail emulation); Wed, 14 Apr 2004 13:26:09 -0700
From: "Issac Trotts" <ijtrotts@ucdavis.edu>
Date: Wed, 14 Apr 2004 13:26:09 -0700
To: caml-list@inria.fr
Subject: Re: [Caml-list] recompiling bytecode
Message-ID: <20040414202609.GA29755@mallorn>
Mail-Followup-To: ijtrotts@ucdavis.edu, caml-list@inria.fr
References: <1081945187.20677.710.camel@pelican> <OOEALCJCKEBJBIJHCNJDIEPPHAAB.vanevery@indiegamedesign.com> <20040414185400.GD21331@excelhustler.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20040414185400.GD21331@excelhustler.com>
User-Agent: Mutt/1.5.5.1+cvs20040105i
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; issac:01 trotts:01 ijtrotts:01 caml-list:01 2004:99 2004:99 brandon:99 infer:01 python:01 runtime:01 python:01 issac:01 trotts:01 ijtrotts:01 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 354

On Wed, Apr 14, 2004 at 01:54:00PM -0500, John Goerzen wrote:
> On Wed, Apr 14, 2004 at 11:21:01AM -0700, Brandon J. Van Every wrote:
[...] 
> Now, you should be able to infer from this that there is a productivity
> setback with Python because certain glaring errors are not caught until
> runtime.  If your program is such that it takes several minutes or hours
> of processing to be able to hit the critical section with errors, you
> can appreciate that this is not necessarily a good thing.  (It *is*
> possible to compile things to bytecode in advance in most cases with
> Python, but this is not well supported for the average programmer)
> There are also entire classes of errors that even a Python compile will
> not catch that an OCaml compile will -- such as reversing the order of
> arguments in a function call when each argument has a different type.

There is a program called pychecker that can find some type errors and
other bugs in Python programs.  It's handy.

-- 
Issac Trotts
http://mallorn.ucdavis.edu/~ijtrotts
(w) 530-757-8789

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

