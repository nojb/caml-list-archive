Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA30699; Wed, 28 Apr 2004 13:31:46 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA30685 for <caml-list@pauillac.inria.fr>; Wed, 28 Apr 2004 13:31:45 +0200 (MET DST)
Received: from mclean.mail.mindspring.net (mclean.mail.mindspring.net [207.69.200.57])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i3SBVijq027880
	for <caml-list@inria.fr>; Wed, 28 Apr 2004 13:31:44 +0200
Received: from user-0cdfhfr.cable.mindspring.com ([24.215.197.251] helo=[192.168.0.3])
	by mclean.mail.mindspring.net with esmtp (Exim 3.33 #1)
	id 1BInHz-0002Uq-00; Wed, 28 Apr 2004 07:31:43 -0400
Subject: Re: [Caml-list] [ANN] The Missing Library
From: "Yaron M. Minsky" <yminsky@cs.cornell.edu>
To: skaller@users.sourceforge.net
Cc: Brian Hurt <bhurt@spnz.org>, Martin Berger <martinb@dcs.qmul.ac.uk>,
        The Caml Trade <caml-list@inria.fr>
In-Reply-To: <1083140676.9537.831.camel@pelican.wigram>
References: <Pine.LNX.4.44.0404272326450.9460-100000@localhost.localdomain>
	 <1083140676.9537.831.camel@pelican.wigram>
Content-Type: text/plain
Organization: Cornell University
Message-Id: <1083151902.29774.18.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.4.5 (1.4.5-7) 
Date: Wed, 28 Apr 2004 07:31:42 -0400
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 yaron:01 minsky:01 yminsky:01 cornell:01 2004:99 2004:99 iterator:01 iterator:01 abstraction:01 yaron:01 minsky:01 cornell:01 yminsky:01 keyid:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2004-04-28 at 04:24, skaller wrote:
> On Wed, 2004-04-28 at 14:31, Brian Hurt wrote:
> > On Mon, 26 Apr 2004, Martin Berger wrote:
> 
> > I'm wondering what concepts Ocaml can't express/enforce? 
> 
> Iterators. 

Why can't you do this kind of in ocaml?  Returning something like a
"next" function would seem to give you a very basic (but usable)
iterator.  Which part of the iterator abstraction can't you do?

y

-- 
|--------/            Yaron M. Minsky              \--------|
|--------\ http://www.cs.cornell.edu/home/yminsky/ /--------|

Open PGP --- KeyID B1FFD916
Fingerprint: 5BF6 83E1 0CE3 1043 95D8 F8D5 9F12 B3A9 B1FF D916


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

