Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA14129; Tue, 6 Apr 2004 21:28:46 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA13803 for <caml-list@pauillac.inria.fr>; Tue, 6 Apr 2004 21:28:42 +0200 (MET DST)
Received: from qrnik.knm.org.pl (paf87.warszawa.sdi.tpnet.pl [217.96.225.87])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i36JTVjq023537
	for <caml-list@inria.fr>; Tue, 6 Apr 2004 21:29:33 +0200
Received: from qrnik ([192.168.0.1] ident=qrczak)
	by qrnik.knm.org.pl with esmtp (Exim 3.36 #1)
	id 1BAwFS-0004br-00
	for caml-list@inria.fr; Tue, 06 Apr 2004 21:28:38 +0200
Subject: Re: [Caml-list] Function forward declaration?
From: "Marcin 'Qrczak' Kowalczyk" <qrczak@knm.org.pl>
To: caml-list@inria.fr
In-Reply-To: <20040406175320.GA19840@redhat.com>
References: <60532B15DF92FD4693AA89B2F7E01D8F013F29EC@tmex02>
	 <00cf01c41bd6$391b53a0$0203a8c0@hoedic>
	 <Pine.LNX.4.58.0404061024550.11492@grace.speakeasy.net>
	 <20040406175320.GA19840@redhat.com>
Content-Type: text/plain; charset=ISO-8859-2
Message-Id: <1081279717.16531.6.camel@qrnik>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.5.6 
Date: Tue, 06 Apr 2004 21:28:37 +0200
Content-Transfer-Encoding: quoted-printable
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 marcin:01 'qrczak':01 kowalczyk:01 qrczak:01 wto:99 val:01 val:01 proto:01 marcin:01 kowalczyk:01 qrczak:01 compiler:01 int:01 int:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 82

W li=B6cie z wto, 06-04-2004, godz. 18:53 +0100, Richard Jones napisa=B3:

> val g : unit -> int		(* prototype; val is already reserved word *)
>=20
> let f () =3D (* ... *) g ()
>=20
> (* some intervening code which makes it difficult to use let rec ... and =
*)
>=20
> let g () =3D (* ... *) 42		(* compiler checks that g matches proto *)

What would this code do?

   val g : unit -> int
   let f () =3D g ()
   let x =3D f ()
   let y =3D x + 1
   let g () =3D y

--=20
   __("<         Marcin Kowalczyk
   \__/       qrczak@knm.org.pl
    ^^     http://qrnik.knm.org.pl/~qrczak/


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

