Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA31041; Thu, 29 Apr 2004 00:48:20 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA31030 for <caml-list@pauillac.inria.fr>; Thu, 29 Apr 2004 00:48:18 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i3SMmBYM012671
	for <caml-list@inria.fr>; Thu, 29 Apr 2004 00:48:13 +0200
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id HAA04687;
	Thu, 29 Apr 2004 07:48:06 +0900 (JST)
Date: Thu, 29 Apr 2004 07:48:06 +0900 (JST)
Message-Id: <20040429.074806.68548985.garrigue@kurims.kyoto-u.ac.jp>
To: jgoerzen@complete.org
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Optional arguments in inherited methods
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
In-Reply-To: <20040428194330.GB7949@excelhustler.com>
References: <20040428161336.GA3286@excelhustler.com>
	<02C591A1-9935-11D8-BD03-000A958FF2FE@wetware.com>
	<20040428194330.GB7949@excelhustler.com>
X-Mailer: Mew version 4.0.64 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 argh:01 ocaml's:01 superclass:01 implemented:01 non-optional:01 jacques:01 garrigue:01 garrigue:01 subtype:01 checking:01 subclass:02 subclasses:02 typing:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: John Goerzen <jgoerzen@complete.org>

> Argh.  Does OCaml's object system really not support adding additional
> optional variables to subclass methods?

No, it doesn't support that.
Methods in subclasses must have exactly the same type as in the
superclass (the types are unified during checking).
So you are not even allowed to use a subtype of the original method
type (which would be perfectly sound in theory)

> That would be rather annoying if true.

Unfortunate, but in the case of optional arguments the problem is
not with typing but with how they are implemented: an optional
argument of type [t] is actually a non-optional argument of type [t
option]. They disappear automagically on application, but this means
that None's are automatically inserted. So applying a function which has
optional arguments is completely different from a function without
them (even if the function call looks the same in your source code).

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

