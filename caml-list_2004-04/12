Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA23530; Thu, 1 Apr 2004 11:24:01 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA23415 for <caml-list@pauillac.inria.fr>; Thu, 1 Apr 2004 11:24:00 +0200 (MET DST)
Received: from oxy.exomi.com (fa-3-0-0.fw.exomi.com [217.169.64.99])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i319Oijq000850
	for <caml-list@pauillac.inria.fr>; Thu, 1 Apr 2004 11:24:44 +0200
Received: from [127.0.0.1] (localhost [127.0.0.1])
	by oxy.exomi.com (Postfix) with ESMTP
	id 7FFE3193BCC; Thu,  1 Apr 2004 12:24:49 +0300 (EEST)
In-Reply-To: <1080807590.13854.260.camel@pelican>
References: <16491.38344.186267.44292@soggy.deldotd.com> <BE2D84E8-83AD-11D8-96B0-000393863F70@exomi.com> <1080807590.13854.260.camel@pelican>
Mime-Version: 1.0 (Apple Message framework v613)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <6C27A642-83BE-11D8-96B0-000393863F70@exomi.com>
Content-Transfer-Encoding: 7bit
Cc: briand@aracnet.com, caml-list@pauillac.inria.fr
From: Ville-Pertti Keinonen <will@exomi.com>
Subject: Re: [Caml-list] exene and ocaml ?
Date: Thu, 1 Apr 2004 12:24:48 +0300
To: skaller@users.sourceforge.net
X-Mailer: Apple Mail (2.613)
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 model:01 gui:01 threading:01 implemented:01 threading:01 real-world:01 practicality:01 partition:01 threads:01 coroutines:01 ocaml:01 ocaml:01 mainstream:01 lazy:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 12


On Apr 1, 2004, at 11:19 AM, skaller wrote:

> Event driven programming model requires manual
> state management. In losing the stack, the most powerful
> structuring tool available to the progammer is lost,
> and the damage is severe. Simple GUI are easy to get going
> but more complex ones are almost impossible to write.

Yes, my "reasonably well" was in the context of current expectations 
and tools.  I'd really love for OCaml to have efficient threading 
(especially if they were implemented using continuations).

I wouldn't use or recommend a massively multithreaded approach unless 
there was a practical and efficient enough environment available.  CML, 
Oz and presumably Felix would be efficient enough in their threading 
concepts, but don't seem to have the real-world practicality of OCaml 
(or mainstream languages).  I'll admit to not having tested Felix yet, 
although I've downloaded it quite some time ago.

> Simple: there is no stack. Event handlers have to return,
> and when they do the stack is lost.

In Brian's specific example as I understood it, this would not be 
relevant.

> Of course, you can partition your global state space
> into objects, but that in no way changes the fact
> the state space is still global.

In this sense, threads are also global state, as would be lazy streams, 
coroutines or whatever means of encapsulating state you use.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

