Return-Path: <jon@ffconsultancy.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 89052BC84
	for <caml-list@yquem.inria.fr>; Wed, 30 Mar 2005 14:52:55 +0200 (CEST)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2UCqsiL011416
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 30 Mar 2005 14:52:54 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay01.plus.net with esmtp (Exim) id 1DGcgm-0005Ke-Li
	for caml-list@yquem.inria.fr; Wed, 30 Mar 2005 12:52:52 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] 32- and 64-bit performance
Date: Wed, 30 Mar 2005 13:53:35 +0100
User-Agent: KMail/1.7.1
References: <200503300340.15874.jon@ffconsultancy.com> <424A6632.1020902@barettadeit.com> <1112173304.27770.22.camel@dsws>
In-Reply-To: <1112173304.27770.22.camel@dsws>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200503301353.35474.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 424AA126.003 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 deallocation:01 pointer:01 ocaml:01 ocaml:01 run-time:01 arrays:01 constructors:01 ...:98 ...:98 frog:98 wrote:01 polymorphic:01 polymorphic:01 slower:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Wednesday 30 March 2005 10:01, Ville-Pertti Keinonen wrote:
> Back when I got my first amd64 machine...

=:-p

> Note that it isn't memory allocation and deallocation that is slower (on
> amd64, memory allocation is probably faster, since the allocation
> pointer is kept in a register), but programs that use fairly large
> amounts of memory.  32-bit vs. 64-bit might be the difference between
> everything fitting in L2 or not...

Yes. I was thinking that the GC would be slower due to worse cache use in 
64-bit. I used the phrase "de/allocation" as I was applying it to both C++ 
and OCaml.

This raises the question of exactly which OCaml types incur 64-bit quantities 
in the run-time. My guess:

  int (d'oh)
  constant (polymorphic) variant constructor?
  non-constant (polymorphic) variant constructor
  records (except those with all-float fields)
  tuples
  arrays

But isn't there quite a low limit on the number of constant variant type 
constructors allowed? So maybe they're squeezed into something a little 
smaller...

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

