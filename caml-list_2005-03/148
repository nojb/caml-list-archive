Return-Path: <Sebastien.Hinderer@ens-lyon.org>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 99F27BC48
	for <caml-list@yquem.inria.fr>; Mon, 14 Mar 2005 18:31:50 +0100 (CET)
Received: from relay-bv.club-internet.fr (relay-bv.club-internet.fr [194.158.96.102])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2EHVoYO028423
	for <caml-list@yquem.inria.fr>; Mon, 14 Mar 2005 18:31:50 +0100
Received: from Galois (l01m-10-144.d2.club-internet.fr [195.36.201.144])
	by relay-bv.club-internet.fr (Postfix) with ESMTP id 342372563C
	for <caml-list@yquem.inria.fr>; Mon, 14 Mar 2005 18:31:50 +0100 (CET)
Received: from evariste by Galois with local (Exim 4.50)
	id 1DAtPb-0005e5-Dz
	for caml-list@yquem.inria.fr; Mon, 14 Mar 2005 18:31:28 +0100
Date: Mon, 14 Mar 2005 18:31:27 +0100
From: =?iso-8859-1?Q?S=E9bastien?= Hinderer <Sebastien.Hinderer@ens-lyon.org>
To: caml-list@yquem.inria.fr
Subject: Looking for an efficient implementation of simply typed lambda calculus
Message-ID: <20050314173127.GA21700@galois>
Mail-Followup-To: caml-list@yquem.inria.fr
References: <200503070020.53784.jon@jdh30.plus.com> <20050307.220107.85397271.eijiro_sumii@anet.ne.jp> <20050308201306.GA22938@yquem.inria.fr> <20050308.173223.38699199.eijiro_sumii@anet.ne.jp>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20050308.173223.38699199.eijiro_sumii@anet.ne.jp>
X-Miltered: at concorde with ID 4235CA86.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ens-lyon:01 cheers:01 lambda:01 lambda:01 calculus:02 library:03 library:03 typed:04 typed:04 sebastien:05 sebastien:05 efficient:06 efficient:06 some:12 should:13 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

Dear all,

Has some library been developed to handle simply typed lambda terms ?
The library should be able to build and reduce terms, in a
computationally efficient way.

If you are aware of such a work, many thanks for letting me know.

Cheers,
Sébastien.

