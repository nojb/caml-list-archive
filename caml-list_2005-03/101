Return-Path: <eijiro_sumii@anet.ne.jp>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id CC511BC32
	for <caml-list@yquem.inria.fr>; Tue,  8 Mar 2005 23:32:27 +0100 (CET)
Received: from saul.cis.upenn.edu (SAUL.CIS.upenn.edu [158.130.12.4])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j28MWPvG030409
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 8 Mar 2005 23:32:27 +0100
Received: from localhost (SAUL.CIS.upenn.edu [158.130.12.4])
	by saul.cis.upenn.edu (8.12.10/8.12.9) with ESMTP id j28MWNCP002462;
	Tue, 8 Mar 2005 17:32:24 -0500 (EST)
Date: Tue, 08 Mar 2005 17:32:23 -0500 (EST)
Message-Id: <20050308.173223.38699199.eijiro_sumii@anet.ne.jp>
To: caml-list@yquem.inria.fr
Cc: sumii@saul.cis.upenn.edu
Subject: Re: [Caml-list] MinCaml English Documentation
From: Eijiro Sumii <eijiro_sumii@anet.ne.jp>
In-Reply-To: <20050308201306.GA22938@yquem.inria.fr>
References: <200503070020.53784.jon@jdh30.plus.com>
	<20050307.220107.85397271.eijiro_sumii@anet.ne.jp>
	<20050308201306.GA22938@yquem.inria.fr>
X-Mailer: Mew version 3.2 on Emacs 20.7 / Mule 4.1 (AOI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 422E27F9.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 eijiro:01 sumii:01 eijiro:01 sumii:01 trade-offs:01 compilation:01 luc:01 maranget:01 ocaml:01 compiler:01 compiler:01 ocaml:01 byte:01 bigloo:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

From: "Xavier Leroy" <Xavier.Leroy@inria.fr>
> There are hard trade-offs between simplicity, execution speed and
> size of generated code.  However, the compilation scheme I used in
> Caml Light is a reasonable starting point.  It was inspired by
> Phil Wadler's chapter in Simon Peyton Jones's book "The implementation of
> functional programming languages" (out of print, but a scanned version
> is available from SPJ's Web page), and described in details in the
> "ZINC report", http://pauillac.inria.fr/~xleroy/publi/ZINC.ps.gz
> 
> Luc Maranget has some papers describing much more sophisticated
> approaches used in the OCaml compiler, if you find so inclined.

Thanks a lot for the references - and yes, that reminds me what I
forgot to mention:

If anybody is interested in a compiler of the complexity "between"
OCaml and MinCaml (and generating byte code or C), it may be good to
take a look at Caml Light, Camlot, or Bigloo.

  http://caml.inria.fr/distrib-caml-light-eng.html

--
Eijiro Sumii (http://www.cis.upenn.edu/~sumii/)
Department of Computer and Information Science, University of Pennsylvania

