Return-Path: <Alain.Frisch@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id DCAEDBC32
	for <caml-list@yquem.inria.fr>; Fri, 18 Mar 2005 09:38:19 +0100 (CET)
Received: from postfix4-1.free.fr (postfix4-1.free.fr [213.228.0.62])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j2I8cJDI001733
	for <caml-list@yquem.inria.fr>; Fri, 18 Mar 2005 09:38:19 +0100
Received: from [192.168.0.1] (unknown [82.229.183.156])
	by postfix4-1.free.fr (Postfix) with ESMTP id 6A5AB2BA5F6;
	Fri, 18 Mar 2005 09:38:19 +0100 (CET)
Message-ID: <423A92CF.1060103@inria.fr>
Date: Fri, 18 Mar 2005 09:35:27 +0100
From: Alain Frisch <Alain.Frisch@inria.fr>
User-Agent: Debian Thunderbird 1.0 (X11/20050116)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: "Bauer, Christoph" <Christoph.Bauer@lms-gmbh.de>
Cc: caml-list@yquem.inria.fr
Subject: Re: AW: [Caml-list] OCaml troll on Slashdot
References: <D981925B4F2CD611870300E0184CEE9B0157F581@kaiserslautern1.lmsintl.com>
In-Reply-To: <D981925B4F2CD611870300E0184CEE9B0157F581@kaiserslautern1.lmsintl.com>
X-Enigmail-Version: 0.90.0.0
X-Enigmail-Supports: pgp-inline, pgp-mime
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 423A937B.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; frisch:01 frisch:01 caml-list:01 ocaml:01 ocaml:01 avoided:01 api:01 wrote:01 slower:01 alain:02 alain:02 complex:04 depends:04 christoph:05 probably:05 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

Bauer, Christoph wrote:
> There is an implementation of VLists for OCaml. VLists are - like
> single linked lists - persistent, but have better performance,
> require less memory and are GC friendlier.

This depends on the kind of operation you need: the VList.tl operation 
is more complex and always incurs memory allocation (this can be avoided 
  in theory, but it seem difficult to do it in OCaml). In particular, if 
you implement the map function using only VList.tl and VList.hd, the 
result will probably be much slower than with lists (of course, there is 
a more efficient VList.map, but it cannot be written using only the 
VList API).

-- Alain

