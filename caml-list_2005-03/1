Return-Path: <jehenrik@yahoo.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 51FBCBCA7
	for <caml-list@yquem.inria.fr>; Tue,  1 Mar 2005 07:40:45 +0100 (CET)
Received: from hosting.commandprompt.com (128.commandprompt.com [207.173.200.128])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j216egLb008673
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 1 Mar 2005 07:40:44 +0100
Received: from hosting.commandprompt.com (crazypenguins [127.0.0.1])
	by hosting.commandprompt.com (8.12.8/8.12.8) with ESMTP id j216dNkh007016;
	Mon, 28 Feb 2005 22:39:23 -0800
Received: (from jhenrikson@localhost)
	by hosting.commandprompt.com (8.12.8/8.12.8/Submit) id j216dMDk007014;
	Mon, 28 Feb 2005 22:39:22 -0800
X-Authentication-Warning: hosting.commandprompt.com: jhenrikson set sender to jehenrik@yahoo.com using -f
Date: Mon, 28 Feb 2005 22:39:22 -0800
From: Jeff Henrikson <jehenrik@yahoo.com>
To: Paul Snively <psnively@mac.com>
Cc: Mike Hamburg <hamburg@fas.harvard.edu>, ml-labo@epimac.org,
	Julien Roussel <julien.roussel@gmail.com>,
	Oliver Bandel <oliver@first.in-berlin.de>, caml-list@yquem.inria.fr,
	tipoix@free.fr
Subject: Re: OCaml && COCOA-Environment (Mac-OS-X/GUI)
Message-ID: <20050301063922.GA5981@hosting>
References: <20050205000208.GB1364@first.in-berlin.de> <3a2f4a1305020508377ec6ddaf@mail.gmail.com> <a289eb671c5bceded4f3046e3c13eada@fas.harvard.edu> <617f41a9a7ef08a96d3bd59b00a9ae47@mac.com> <20050217071238.GA19872@hosting> <a0aa01de8f850698dd96a073e9a51089@mac.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable
In-Reply-To: <a0aa01de8f850698dd96a073e9a51089@mac.com>
User-Agent: Mutt/1.4.2.1i
X-Miltered: at nez-perce with ID 42240E6A.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; henrikson:01 jehenrik:01 ocaml:01 merging:01 parsing:01 parsing:01 ast:01 parser:01 gcc:01 flags:01 gcc:01 vastly:01 rewriting:01 parsers:01 parser:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=2.4 required=5.0 tests=FORGED_YAHOO_RCVD,
	UPPERCASE_25_50 autolearn=disabled version=3.0.2
X-Spam-Level: **

> >I have an email out with Mr. Casse regarding how he feels about=20
> >merging these changes.  An Obj-C and/or C++ extension should=20
> >preferably begin with a "blessed" starting point.
> >
> I agree, and wonder whether there's consensus as to whether 3.1 should=20
> be that starting point, or whether we should (need to, for Forklift's=20
> sake?) integrate the Cil and 3.1 changes.

Upon superficial examination, the Frontc 2.0 -> 3.1 changes seem to mostly =
revolve around XML output.  The Cil frontc changes are more about parsing h=
eader files "in the wild".  Look at the Cil manual chapter 17 for the level=
 of energy put into parsing messy stuff:

http://manju.cs.berkeley.edu/cil/cil017.html

> This sounds very nice! How would you suggest that we proceed toward=20
> Objective-C coverage in conjunction with your other requirements and=20
> observations about the status of Frontc and Cil?

Well, I see three possible paths. =20

1) get Frontc and Cil Frontc merged.  Extend the ast and parser for Obj-C a=
nd/or C++.  I know C++ much better than ObjC, but my sense is that ObjC is =
easier for this.

2) gccxml is a patch for gcc made for a java C++ stub generator.  The idea =
is that you specify some flags to gcc and it spews XML of the parse tree.  =
gccxml was build for doing C++, so there may be some additions necessary to=
 get all the ObjC primitives.  Below I attach some output from gccxml on th=
e semi-commercial C++ 3D toolkit Nebula2.  Messy as you can see, but vastly=
 easier than dealing with raw text.  I personally mourn the fact that massi=
ve amounts of open source labor is wasted rewriting parsers.  In my mind a =
parser is a generic thing=20

3) yaxx is an extension to yacc which takes any .y file, and generates a mo=
dified C program which outputs .xml and a .dtd instead of just running.  Th=
is means that one can take, for example the gcc .y file, and get a .xml out=
put C program without modifying gcc.  I really like this approach, the beau=
ty is that it holds promise for maybe someday not needing to write a parser=
 for every last target language.  (It seems wrong to me that we need an oca=
mlyacc to begin with.  There needs to be available some standard behavior w=
hich ignores the actions of a .y file and just spews an AST.  Not to mentio=
n tree walkers and other useful things.)  They have tried the gcc parser ha=
ck, and the comments say it is supposed to handle C and Obj-C (not C++?) bu=
t I can't get that part to work.  I can get the ansic, sql and java parts t=
o work.  I copy paste below xml output for the ansi parser.  Incidentally, =
there's some incompatibility in the build for darwin, I needed to use a lin=
ux box.  If you search and replace all instances of stdout to another ident=
ifier in the generated ansic/gram.tab.c, it compiles on darwin but I haven'=
t checked if the behavior is right.

Any of the three solutions basically entail getting the output back to a Ca=
bs (frontc) similar representation.  It will be necessary to add a named at=
tributes for parent class, language and so on, but that would be my basic s=
trategy.

Cheers,


Jeff


gccxml on nebula2 test:


****************************gfx2/nmesh2.h***********************************

class N_PUBLIC nMesh2 : public nResource
{
public:
    enum Usage
    {
        WriteOnce,      // (default) CPU only fills the vertex buffer once,=
 and=20
never touches it again
        ReadOnly,       // CPU reads from the vertex buffer, which can neve=
r be=20
rendered
        WriteOnly,      // CPU writes frequently to vertex buffer, but neve=
r rea
d data back
    };

    enum VertexComponent
    {
        Coord    =3D (1<<0),
        Normal   =3D (1<<1),
        Tangent  =3D (1<<2),
        Binormal =3D (1<<3),

    /// constructor
    nMesh2();
    /// destructor
    virtual ~nMesh2();
    /// unload mesh resource
    virtual void Unload();
    /// lock vertex buffer
    virtual float* LockVertices();
    /// unlock vertex buffer
    virtual void UnlockVertices();

******************************XML output***********************************=
*****

  <Class id=3D"_4" name=3D"nMesh2" context=3D"_1" mangled=3D"6nMesh2" locat=
ion=3D"f0:90" f
ile=3D"f0" line=3D"90" members=3D"_560 _561 _562 _563 _564 _565 _566 _567 _=
568 _569 _5
70 _571 _572 _573 _574 _575 _576 _577 _578 _579 _580 _581 _582 _583 _584 _5=
85 _5
86 _587 _588 _589 _590 _591 _592 _593 _594 _595 _596 _597 _598 _599 " bases=
=3D"_19
1 "/>

=2E.

  <Enumeration id=3D"_571" name=3D"Usage" context=3D"_4" location=3D"f0:93"=
 file=3D"f0" li
ne=3D"93">
    <EnumValue name=3D"WriteOnce" init=3D"0"/>
    <EnumValue name=3D"ReadOnly" init=3D"1"/>
    <EnumValue name=3D"WriteOnly" init=3D"2"/>
  </Enumeration>

=2E..
  <Enumeration id=3D"_572" name=3D"VertexComponent" context=3D"_4" location=
=3D"f0:100" f
ile=3D"f0" line=3D"100">
    <EnumValue name=3D"Coord" init=3D"1"/>
    <EnumValue name=3D"Normal" init=3D"2"/>
    <EnumValue name=3D"Tangent" init=3D"4"/>
    <EnumValue name=3D"Binormal" init=3D"8"/>
=2E..
  </Enumeration>
=2E..

  <Constructor id=3D"_573" name=3D"nMesh2" artificial=3D"1" context=3D"_4" =
mangled=3D"_ZN6
nMesh2C1ERKS_ *INTERNAL* " location=3D"f0:90" file=3D"f0" line=3D"90">
    <Argument name=3D"_ctor_arg" type=3D"_1296"/>
  </Constructor>
  <Constructor id=3D"_574" name=3D"nMesh2" context=3D"_4" mangled=3D"_ZN6nM=
esh2C1Ev *INT
ERNAL* " location=3D"f0:115" file=3D"f0" line=3D"115" extern=3D"1"/>
  <Destructor id=3D"_575" name=3D"nMesh2" virtual=3D"1" context=3D"_4" mang=
led=3D"_ZN6nMes
h2D1Ev *INTERNAL* " location=3D"f0:117" file=3D"f0" line=3D"117" extern=3D"=
1">
  </Destructor>
  <Method id=3D"_576" name=3D"Unload" returns=3D"_729" virtual=3D"1" contex=
t=3D"_4" mangle
d=3D"_ZN6nMesh26UnloadEv" location=3D"f0:119" file=3D"f0" line=3D"119" exte=
rn=3D"1"/>
  <Method id=3D"_577" name=3D"LockVertices" returns=3D"_833" virtual=3D"1" =
context=3D"_4"=20
mangled=3D"_ZN6nMesh212LockVerticesEv" location=3D"f0:121" file=3D"f0" line=
=3D"121" exte
rn=3D"1"/>
  <Method id=3D"_578" name=3D"UnlockVertices" returns=3D"_729" virtual=3D"1=
" context=3D"_4
" mangled=3D"_ZN6nMesh214UnlockVerticesEv" location=3D"f0:123" file=3D"f0" =
line=3D"123"=20
extern=3D"1"/>



yaxx on hello world test, xml, dtd follows:

<?xml version=3D"1.0"?>
<?xml-stylesheet type=3D"text/xsl" href=3D"yaxx.xsl"?><!DOCTYPE file SYSTEM=
 "yyyaxx.dtd">
<yaxx:file xmlns:yaxx=3D"urn:YAcc-Xml-eXtension">
<yaxx:external_definition>
<yaxx:function_definition>
<yaxx:declaration_specifiers>
<yaxx:type_specifier>
<yaxx:INT>int</yaxx:INT>
</yaxx:type_specifier>
</yaxx:declaration_specifiers>
<yaxx:declarator>
<yaxx:declarator2>
<yaxx:declarator2>
<yaxx:identifier>
<yaxx:IDENTIFIER>main</yaxx:IDENTIFIER>
</yaxx:identifier>
</yaxx:declarator2>
<yaxx:PUNCT_LPAR>(</yaxx:PUNCT_LPAR>
<yaxx:PUNCT_RPAR>)</yaxx:PUNCT_RPAR>
</yaxx:declarator2>
</yaxx:declarator>
<yaxx:function_body>
<yaxx:compound_statement>
<yaxx:PUNCT_LBRACE>{</yaxx:PUNCT_LBRACE>
<yaxx:statement_list>
<yaxx:statement>
<yaxx:jump_statement>
<yaxx:RETURN>return</yaxx:RETURN>
<yaxx:expr>
<yaxx:assignment_expr>
<yaxx:conditional_expr>
<yaxx:logical_or_expr>
<yaxx:logical_and_expr>
<yaxx:inclusive_or_expr>
<yaxx:exclusive_or_expr>
<yaxx:and_expr>
<yaxx:equality_expr>
<yaxx:relational_expr>
<yaxx:shift_expr>
<yaxx:additive_expr>
<yaxx:multiplicative_expr>
<yaxx:cast_expr>
<yaxx:unary_expr>
<yaxx:postfix_expr>
<yaxx:primary_expr>
<yaxx:PUNCT_LPAR>(</yaxx:PUNCT_LPAR>
<yaxx:expr>
<yaxx:assignment_expr>
<yaxx:conditional_expr>
<yaxx:logical_or_expr>
<yaxx:logical_and_expr>
<yaxx:inclusive_or_expr>
<yaxx:exclusive_or_expr>
<yaxx:and_expr>
<yaxx:equality_expr>
<yaxx:relational_expr>
<yaxx:shift_expr>
<yaxx:additive_expr>
<yaxx:multiplicative_expr>
<yaxx:cast_expr>
<yaxx:unary_expr>
<yaxx:postfix_expr>
<yaxx:postfix_expr>
<yaxx:primary_expr>
<yaxx:identifier>
<yaxx:IDENTIFIER>yyparse</yaxx:IDENTIFIER>
</yaxx:identifier>
</yaxx:primary_expr>
</yaxx:postfix_expr>
<yaxx:PUNCT_LPAR>(</yaxx:PUNCT_LPAR>
<yaxx:PUNCT_RPAR>)</yaxx:PUNCT_RPAR>
</yaxx:postfix_expr>
</yaxx:unary_expr>
</yaxx:cast_expr>
</yaxx:multiplicative_expr>
</yaxx:additive_expr>
</yaxx:shift_expr>
</yaxx:relational_expr>
</yaxx:equality_expr>
</yaxx:and_expr>
</yaxx:exclusive_or_expr>
</yaxx:inclusive_or_expr>
</yaxx:logical_and_expr>
</yaxx:logical_or_expr>
</yaxx:conditional_expr>
</yaxx:assignment_expr>
</yaxx:expr>
<yaxx:PUNCT_RPAR>)</yaxx:PUNCT_RPAR>
</yaxx:primary_expr>
</yaxx:postfix_expr>
</yaxx:unary_expr>
</yaxx:cast_expr>
</yaxx:multiplicative_expr>
</yaxx:additive_expr>
</yaxx:shift_expr>
</yaxx:relational_expr>
</yaxx:equality_expr>
</yaxx:and_expr>
</yaxx:exclusive_or_expr>
</yaxx:inclusive_or_expr>
</yaxx:logical_and_expr>
</yaxx:logical_or_expr>
</yaxx:conditional_expr>
</yaxx:assignment_expr>
</yaxx:expr>
<yaxx:PUNCT_SEMICOLON>;</yaxx:PUNCT_SEMICOLON>
</yaxx:jump_statement>
</yaxx:statement>
</yaxx:statement_list>
<yaxx:PUNCT_RBRACE>}</yaxx:PUNCT_RBRACE>
</yaxx:compound_statement>
</yaxx:function_body>
</yaxx:function_definition>
</yaxx:external_definition>
</yaxx:file>





dtd, hmm this doesn't seem to match much:


<!ELEMENT primary_expr (identifier | CONSTANT | STRING_LITERAL | (PUNCT_LPA=
R,expr,PUNCT_RPAR))>
<!ELEMENT postfix_expr (primary_expr | (postfix_expr,PUNCT_LBRACKET,expr,PU=
NCT_RBRACKET) | (postfix_expr,PUNCT_LPAR,PUNCT_RPAR) | (postfix_expr,PUNCT_=
LPAR,argument_expr_list,PUNCT_RPAR) | (postfix_expr,PUNCT_DOT,identifier) |=
 (postfix_expr,PTR_OP,identifier) | (postfix_expr,INC_OP) | (postfix_expr,D=
EC_OP))>
<!ELEMENT argument_expr_list (assignment_expr | (argument_expr_list,PUNCT_C=
OMMA,assignment_expr))>
<!ELEMENT unary_expr (postfix_expr | (INC_OP,unary_expr) | (DEC_OP,unary_ex=
pr) | (unary_operator,cast_expr) | (SIZEOF,unary_expr) | (SIZEOF,PUNCT_LPAR=
,type_name,PUNCT_RPAR))>
<!ELEMENT unary_operator (PUNCT_AMBLE | PUNCT_STAR | PUNCT_PLUS | PUNCT_MIN=
US | PUNCT_TILDE | PUNCT_EXCLAIM)>
<!ELEMENT cast_expr (unary_expr | (PUNCT_LPAR,type_name,PUNCT_RPAR,cast_exp=
r))>
<!ELEMENT multiplicative_expr (cast_expr | (multiplicative_expr,PUNCT_STAR,=
cast_expr) | (multiplicative_expr,PUNCT_DIV,cast_expr) | (multiplicative_ex=
pr,PUNCT_PERCENT,cast_expr))>
<!ELEMENT additive_expr (multiplicative_expr | (additive_expr,PUNCT_PLUS,mu=
ltiplicative_expr) | (additive_expr,PUNCT_MINUS,multiplicative_expr))>
<!ELEMENT shift_expr (additive_expr | (shift_expr,LEFT_OP,additive_expr) | =
(shift_expr,RIGHT_OP,additive_expr))>
<!ELEMENT relational_expr (shift_expr | (relational_expr,PUNCT_LT,shift_exp=
r) | (relational_expr,PUNCT_GT,shift_expr) | (relational_expr,LE_OP,shift_e=
xpr) | (relational_expr,GE_OP,shift_expr))>
<!ELEMENT equality_expr (relational_expr | (equality_expr,EQ_OP,relational_=
expr) | (equality_expr,NE_OP,relational_expr))>
<!ELEMENT and_expr (equality_expr | (and_expr,PUNCT_AMBLE,equality_expr))>
<!ELEMENT exclusive_or_expr (and_expr | (exclusive_or_expr,PUNCT_CARET,and_=
expr))>
<!ELEMENT inclusive_or_expr (exclusive_or_expr | (inclusive_or_expr,PUNCT_O=
R,exclusive_or_expr))>
<!ELEMENT logical_and_expr (inclusive_or_expr | (logical_and_expr,AND_OP,in=
clusive_or_expr))>
<!ELEMENT logical_or_expr (logical_and_expr | (logical_or_expr,OR_OP,logica=
l_and_expr))>
<!ELEMENT conditional_expr (logical_or_expr | (logical_or_expr,PUNCT_QUESTI=
ON,logical_or_expr,PUNCT_COLON,conditional_expr))>
<!ELEMENT assignment_expr (conditional_expr | (unary_expr,assignment_operat=
or,assignment_expr))>
<!ELEMENT assignment_operator (PUNCT_EQUAL | MUL_ASSIGN | DIV_ASSIGN | MOD_=
ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN | AND_ASSIGN =
| XOR_ASSIGN | OR_ASSIGN)>
<!ELEMENT expr (assignment_expr | (expr,PUNCT_COMMA,assignment_expr))>
<!ELEMENT constant_expr (conditional_expr)>
<!ELEMENT declaration ((declaration_specifiers,PUNCT_SEMICOLON) | (declarat=
ion_specifiers,init_declarator_list,PUNCT_SEMICOLON))>
<!ELEMENT declaration_specifiers (storage_class_specifier | (storage_class_=
specifier,declaration_specifiers) | type_specifier | (type_specifier,declar=
ation_specifiers))>
<!ELEMENT init_declarator_list (init_declarator | (init_declarator_list,PUN=
CT_COMMA,init_declarator))>
<!ELEMENT init_declarator (declarator | (declarator,PUNCT_EQUAL,initializer=
))>
<!ELEMENT storage_class_specifier (TYPEDEF | EXTERN | STATIC | AUTO | REGIS=
TER)>
<!ELEMENT type_specifier (CHAR | SHORT | INT | LONG | SIGNED | UNSIGNED | F=
LOAT | DOUBLE | CONST | VOLATILE | VOID | struct_or_union_specifier | enum_=
specifier | TYPE_NAME)>
<!ELEMENT struct_or_union_specifier ((struct_or_union,identifier,PUNCT_LBRA=
CE,struct_declaration_list,PUNCT_RBRACE) | (struct_or_union,PUNCT_LBRACE,st=
ruct_declaration_list,PUNCT_RBRACE))>
<!ELEMENT IDENTIFIER (#PCDATA)>
<!ELEMENT CONSTANT (#PCDATA)>
<!ELEMENT STRING_LITERAL (#PCDATA)>
<!ELEMENT SIZEOF (#PCDATA)>
<!ELEMENT PTR_OP (#PCDATA)>
<!ELEMENT INC_OP (#PCDATA)>
<!ELEMENT DEC_OP (#PCDATA)>
<!ELEMENT LEFT_OP (#PCDATA)>
<!ELEMENT RIGHT_OP (#PCDATA)>
<!ELEMENT LE_OP (#PCDATA)>
<!ELEMENT GE_OP (#PCDATA)>
<!ELEMENT EQ_OP (#PCDATA)>
<!ELEMENT NE_OP (#PCDATA)>
<!ELEMENT AND_OP (#PCDATA)>
<!ELEMENT OR_OP (#PCDATA)>
<!ELEMENT MUL_ASSIGN (#PCDATA)>
<!ELEMENT DIV_ASSIGN (#PCDATA)>
<!ELEMENT MOD_ASSIGN (#PCDATA)>
<!ELEMENT ADD_ASSIGN (#PCDATA)>
<!ELEMENT SUB_ASSIGN (#PCDATA)>
<!ELEMENT LEFT_ASSIGN (#PCDATA)>
<!ELEMENT RIGHT_ASSIGN (#PCDATA)>
<!ELEMENT AND_ASSIGN (#PCDATA)>
<!ELEMENT XOR_ASSIGN (#PCDATA)>
<!ELEMENT OR_ASSIGN (#PCDATA)>
<!ELEMENT TYPE_NAME (#PCDATA)>
<!ELEMENT TYPEDEF (#PCDATA)>
<!ELEMENT EXTERN (#PCDATA)>
<!ELEMENT STATIC (#PCDATA)>
<!ELEMENT AUTO (#PCDATA)>
<!ELEMENT REGISTER (#PCDATA)>
<!ELEMENT CHAR (#PCDATA)>
<!ELEMENT SHORT (#PCDATA)>
<!ELEMENT INT (#PCDATA)>
<!ELEMENT LONG (#PCDATA)>
<!ELEMENT SIGNED (#PCDATA)>
<!ELEMENT UNSIGNED (#PCDATA)>
<!ELEMENT FLOAT (#PCDATA)>
<!ELEMENT DOUBLE (#PCDATA)>
<!ELEMENT CONST (#PCDATA)>
<!ELEMENT VOLATILE (#PCDATA)>
<!ELEMENT VOID (#PCDATA)>
<!ELEMENT STRUCT (#PCDATA)>
<!ELEMENT UNION (#PCDATA)>
<!ELEMENT ENUM (#PCDATA)>
<!ELEMENT ELIPSIS (#PCDATA)>
<!ELEMENT RANGE (#PCDATA)>
<!ELEMENT CASE (#PCDATA)>
<!ELEMENT DEFAULT (#PCDATA)>
<!ELEMENT IF (#PCDATA)>
<!ELEMENT ELSE (#PCDATA)>
<!ELEMENT SWITCH (#PCDATA)>
<!ELEMENT WHILE (#PCDATA)>
<!ELEMENT DO (#PCDATA)>
<!ELEMENT FOR (#PCDATA)>
<!ELEMENT GOTO (#PCDATA)>
<!ELEMENT CONTINUE (#PCDATA)>
<!ELEMENT BREAK (#PCDATA)>
<!ELEMENT RETURN (#PCDATA)>
<!ELEMENT PUNCT_COLON (#PCDATA)>
<!ELEMENT PUNCT_SEMICOLON (#PCDATA)>
<!ELEMENT PUNCT_COMMA (#PCDATA)>
<!ELEMENT PUNCT_DOT (#PCDATA)>
<!ELEMENT PUNCT_EQUAL (#PCDATA)>
<!ELEMENT PUNCT_AMBLE (#PCDATA)>
<!ELEMENT PUNCT_STAR (#PCDATA)>
<!ELEMENT PUNCT_PLUS (#PCDATA)>
<!ELEMENT PUNCT_MINUS (#PCDATA)>
<!ELEMENT PUNCT_TILDE (#PCDATA)>
<!ELEMENT PUNCT_EXCLAIM (#PCDATA)>
<!ELEMENT PUNCT_QUESTION (#PCDATA)>
<!ELEMENT PUNCT_OR (#PCDATA)>
<!ELEMENT PUNCT_DIV (#PCDATA)>
<!ELEMENT PUNCT_PERCENT (#PCDATA)>
<!ELEMENT PUNCT_LT (#PCDATA)>
<!ELEMENT PUNCT_GT (#PCDATA)>
<!ELEMENT PUNCT_CARET (#PCDATA)>
<!ELEMENT PUNCT_LPAR (#PCDATA)>
<!ELEMENT PUNCT_RPAR (#PCDATA)>
<!ELEMENT PUNCT_LBRACKET (#PCDATA)>
<!ELEMENT PUNCT_RBRACKET (#PCDATA)>
<!ELEMENT PUNCT_LBRACE (#PCDATA)>
<!ELEMENT PUNCT_RBRACE (#PCDATA)>

