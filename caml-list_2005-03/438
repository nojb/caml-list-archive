Return-Path: <oliver@first.in-berlin.de>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 61441BC48
	for <caml-list@yquem.inria.fr>; Thu, 31 Mar 2005 08:32:56 +0200 (CEST)
Received: from first.in-berlin.de (dialin-145-254-055-146.arcor-ip.net [145.254.55.146])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j2V6WslG002652
	for <caml-list@yquem.inria.fr>; Thu, 31 Mar 2005 08:32:55 +0200
Received: by first.in-berlin.de (Postfix, from userid 501)
	id 55011C9678; Thu, 31 Mar 2005 00:27:38 +0200 (CEST)
Date: Thu, 31 Mar 2005 00:27:37 +0200
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] generic data type -> int function
Message-ID: <20050330222737.GA443@first.in-berlin.de>
References: <16963.63456.885441.571929@gargle.gargle.HOWL> <Pine.LNX.4.44.0503291923480.26490-100000@albini.isi.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.44.0503291923480.26490-100000@albini.isi.edu>
User-Agent: Mutt/1.5.6i
X-Miltered: at nez-perce with ID 424B9996.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; oliver:01 bandel:01 oliver:01 in-berlin:01 caml-list:01 mtype:01 pairs:01 mtype:01 pairs:01 ...:98 nam:98 nam:98 ...:98 wrote:01 int:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.2
X-Spam-Level: 

On Tue, Mar 29, 2005 at 07:26:02PM -0800, Hal Daume III wrote:
[...]
> type etype = GPE | LOC | ORG | PER | NAE_e | BOS_e
> type mtype = BAR | NAM | NOM | PRE | PRO | OTHER | NAE_m | BOS_m
> type pairs = EM of etype*mtype | EE of etype*etype | MM of mtype*mtype
> type pairs2 = EP of etype * pairs | MP of mtype * pairs
> 
> 
> Corresponding output:
> 
> let int_of_etype = function | GPE -> 0 | LOC -> 1 | ORG -> 2 | PER -> 3 | NAE_e -> 4 | BOS_e -> 5
> let int_of_mtype = function | BAR -> 0 | NAM -> 1 | NOM -> 2 | PRE -> 3 | PRO -> 4 | OTHER -> 5 | NAE_m -> 6 | BOS_m -> 7
> let int_of_pairs = function | EM (etype_0, mtype_1) -> 0 + 1 * (int_of_etype etype_0 + 6 * (int_of_mtype mtype_1)) | EE (etype_0, etype_1) -> 48 + 1 * (int_of_etype etype_0 + 6 * (int_of_etype etype_1)) | MM (mtype_0, mtype_1) -> 84 + 1 * (int_of_mtype mtype_0 + 8 * (int_of_mtype mtype_1))
> let int_of_pairs2 = function | EP (etype_0, pairs_1) -> 0 + 1 * (int_of_etype etype_0 + 6 * (int_of_pairs pairs_1)) | MP (mtype_0, pairs_1) -> 888 + 1 * (int_of_mtype mtype_0 + 8 * (int_of_pairs pairs_1))
[...]

That's nice, but for what do you need this?

Maybe this way is not necessary to go.

So, what is this good for?!

Ciao,
   Oliver

