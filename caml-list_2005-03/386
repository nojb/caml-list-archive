Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 94DB8BCA8
	for <caml-list@yquem.inria.fr>; Wed, 30 Mar 2005 11:02:30 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2U92TAQ013546
	for <caml-list@yquem.inria.fr>; Wed, 30 Mar 2005 11:02:30 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA24403 for <caml-list@pauillac.inria.fr>; Wed, 30 Mar 2005 11:02:29 +0200 (MET DST)
Received: from mail.exomi.com (mail.exomi.com [217.169.64.72])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2U92T31013539
	for <caml-list@inria.fr>; Wed, 30 Mar 2005 11:02:29 +0200
Received: from dsws (dsws.exomi.com [10.0.20.63])
	by mail.exomi.com (Postfix) with ESMTP
	id C80435E0C; Wed, 30 Mar 2005 12:02:28 +0300 (EEST)
Subject: Re: [Caml-list] 32- and 64-bit performance
From: Ville-Pertti Keinonen <will@exomi.com>
To: Alex Baretta <alex@barettadeit.com>
Cc: Jon Harrop <jon@ffconsultancy.com>, Ocaml <caml-list@inria.fr>
In-Reply-To: <424A6632.1020902@barettadeit.com>
References: <200503300340.15874.jon@ffconsultancy.com>
	 <424A593A.5050608@barettadeit.com> <1112169658.27768.1.camel@dsws>
	 <424A6632.1020902@barettadeit.com>
Content-Type: text/plain
Date: Wed, 30 Mar 2005 12:01:43 +0300
Message-Id: <1112173304.27770.22.camel@dsws>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 424A6B25.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 424A6B25.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 baretta:01 compiler:01 symbolic:01 allocations:01 ocaml:01 deallocation:01 pointer:01 ...:98 wrote:01 slower:01 idiomatic:02 seems:03 seems:03 imply:03 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Wed, 2005-03-30 at 10:41 +0200, Alex Baretta wrote:

> Ah, obviously! But this seems to imply that a 32-bit machine/compiler 
> couple would be generally faster on symbolic processing algorithms, 
> which generally require a good deal of memory allocations/deallocations. 
> Since this is the kind of code which seems to be most idiomatic in 
> Ocaml, I wonder how well or how badly 64 bits will actually impact all 
> our software.

As long as the choice is between i386 and amd64, 64-bit is probably the
way to go; in Jon Harrop's benchmarks, i386 is seldom a win.  Back when
I got my first amd64 machine, I ran some benchmarks that were less
computationally intensive, in which the differences were generally
something like 10-20%.  Which was faster seemed fairly random.

Note that it isn't memory allocation and deallocation that is slower (on
amd64, memory allocation is probably faster, since the allocation
pointer is kept in a register), but programs that use fairly large
amounts of memory.  32-bit vs. 64-bit might be the difference between
everything fitting in L2 or not...


