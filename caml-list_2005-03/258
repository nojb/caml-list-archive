Return-Path: <sebastian.egner@philips.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 096E8BC32
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 12:56:37 +0100 (CET)
Received: from gw-eur4.philips.com (gw-eur4.philips.com [161.85.125.10])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2HBuadt016221
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 12:56:36 +0100
Received: from smtpscan-eur4.philips.com (smtpscan-eur4.mail.philips.com [130.144.57.167])
	by gw-eur4.philips.com (Postfix) with ESMTP id 807474970D
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 11:56:36 +0000 (UTC)
Received: from smtpscan-eur4.philips.com (localhost [127.0.0.1])
	by localhost.philips.com (Postfix) with ESMTP id 534F471
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 11:56:36 +0000 (GMT)
Received: from smtprelay-eur2.philips.com (smtprelay-eur2.philips.com [130.144.57.171])
	by smtpscan-eur4.philips.com (Postfix) with ESMTP id 3493D6E
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 11:56:36 +0000 (GMT)
Received: from ehvrmh02.diamond.philips.com (ehvrmh02-srv.diamond.philips.com [130.139.27.125])
	by smtprelay-eur2.philips.com (Postfix) with ESMTP id 6C9913F
	for <caml-list@yquem.inria.fr>; Thu, 17 Mar 2005 11:56:35 +0000 (GMT)
In-Reply-To: <200503161951.48923.jon@ffconsultancy.com>
To: caml-list@yquem.inria.fr
Subject: tail-recursion vs. no tail-recursion in list functions
MIME-Version: 1.0
X-Mailer: Lotus Notes Release 6.0.3 September 26, 2003
Message-ID: <OF0054F385.DFC19FEB-ONC1256FC7.003D8A20-C1256FC7.003F728A@philips.com>
From: sebastian.egner@philips.com
Date: Thu, 17 Mar 2005 12:31:57 +0100
X-MIMETrack: Serialize by Router on ehvrmh02/H/SERVER/PHILIPS(Release 6.53HF120 | November
 19, 2004) at 17/03/2005 12:55:31,
	Serialize complete at 17/03/2005 12:55:31
Content-Type: multipart/alternative; boundary="=_alternative 003F7287C1256FC7_="
X-Miltered: at concorde with ID 42397074.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; rec:01 recursion:01 heap:01 stack:01 recursion:01 stack:01 trade-off:01 ocaml:01 compiler:01 cheers:01 eindhoven:01 caml-list:01 caml-list:01 ocaml:01 recursive:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.2 required=5.0 tests=HTML_30_40,HTML_MESSAGE,
	NO_REAL_NAME autolearn=disabled version=3.0.2
X-Spam-Level: 

This is a multipart message in MIME format.
--=_alternative 003F7287C1256FC7_=
Content-Type: text/plain; charset="US-ASCII"

Just to chime in on this...

Did anybody every consider the following simple solution for the 'map' 
problem?

let unbreakable_map f xs =
    let rec 
      map limit f xs = (* recursion depth limited to limit *)
        match xs with
          []                   -> []
        | x::xs when limit > 0 -> let f_x = f x in f_x::(map (limit-1) f 
xs)
        | _                    -> List.rev_append (List.rev_map f xs) []
    in  map 512 f xs;;

The function is not tail-recursive for lists of length up to 512---at 
which point it
switches to a tail-recursive algorithm and uses the heap instead of the 
stack
to keep track of structural recursion.

The overhead introduced is counting down and comparing an int-counter.

Clearly, this solution is applicable to most other structural operations 
on lists
and it gets rid of many stack overflows nicely. 

Since the "magic number" 512 necessarily represents a trade-off, I would 
like
to see it being chosen at the time the Ocaml compiler is constructed for a 
specific
target architecture, i.e. at the time somebody more or less knows the 
stack size.

Cheers,

Sebastian.


----
Dr. Sebastian Egner
Senior Scientist Channel Coding & Modulation
Philips Research Laboratories
Prof. Holstlaan 4 (WDC 1-051, 1st floor, room 51)
5656 AA Eindhoven
The Netherlands
tel:       +31 40 27-43166   *** SINCE 10-Feb-2005 ***
fax:      +31 40 27-44004
email: sebastian.egner@philips.com









Jon Harrop <jon@ffconsultancy.com>
Sent by: 
caml-list-admin@yquem.inria.fr
16-03-2005 20:51
 
        To:     caml-list@yquem.inria.fr
        cc:     (bcc: Sebastian Egner/EHV/RESEARCH/PHILIPS)
        Subject:        Re: [Caml-list] OCaml troll on Slashdot
        Classification: 




On Wednesday 16 March 2005 17:43, brogoff wrote:
> On Wed, 16 Mar 2005, Jacques Garrigue wrote:
> > Because tail-recursive versions do some extra work to ensure
> > tail-recursiveness. For instance building a list in reverse order, and
> > converting it back with List.rev at the end. This only pays off for
> > huge lists.
>
> No doubt the implementors will want me guillotined for bringing this up
> again, but using the (still functional!) set_cdr! tail recursive 
functions,
> which do *not* reverse the list, are always faster than the non tail
> recursive list functions, even for small lists, at least in my 
experience.
> So I suspect that your "for instance" is in fact the only reason for the
> disparity. I'd welcome a counterexample.

Here is one of the counterexamples given in my book, two implementations 
of a 
fold_right function over an implicit semi-inclusive range of integers 
[l..u):

# let rec fold_right1 f accu l u =
    if l < u then f (fold_right1 f accu (l + 1) u) l else accu;;
val fold_right1 : ('a -> int -> 'a) -> 'a -> int -> int -> 'a = <fun>
# let rec fold_right2 f accu l u =
    if l < u then let u = u - 1 in fold_right2 f (f accu u) l u else 
accu;;
val fold_right2 : ('a -> int -> 'a) -> 'a -> int -> int -> unit = <fun>

(A program for timing is at the end of this e-mail).

Here, the non-tail-recursive fold_left function is significantly faster on 

smaller lists and the tail-recursive fold_right functions is much faster 
in 
larger lists.

I believe there are many other counterexamples. Indeed, I would even say 
that 
most functions are counterexamples. Perhaps the reason is that non-tail 
recursion is used when it is natural for a given task, and transforming 
into 
tail-recursive form is then necessarily more complicating the function.

> Those Obj based List functions are what ExtLib provides, I think, and 
there
> are even ways to get this optimization neatly into ML style languages.
> Maybe in ML 20XY this will be addressed.

I don't know what the performance of such transformed code would be. 
Perhaps 
the transformation would slow code down. Consequently, it may be early 
days 
to call it an "optimisation".

Here's the timing program:

let rec fold_right1 f accu l u =
  if l < u then f (fold_right1 f accu (l + 1) u) l else accu
let rec fold_right2 f accu l u =
  if l < u then let u = u - 1 in fold_right2 f (f accu u) l u else accu

let rec test f n = if n>0 then (f (); test f (n-1))

let _ =
  let t = Unix.gettimeofday () in
  test (fun () -> ignore (fold_right1 ( + ) 0 1 5000)) 10000;
  Printf.printf "Non-tail-recursive took: %fs\n"
    (Unix.gettimeofday () -. t);
  let t = Unix.gettimeofday () in
  test (fun () -> ignore (fold_right2 ( + ) 0 1 5000)) 10000;
  Printf.printf "Tail-recursive took: %fs\n\n"
    (Unix.gettimeofday () -. t);
  let t = Unix.gettimeofday () in
  test (fun () -> ignore (fold_right1 ( + ) 0 1 50000)) 1000;
  Printf.printf "Non-tail-recursive took: %fs\n"
    (Unix.gettimeofday () -. t);
  let t = Unix.gettimeofday () in
  test (fun () -> ignore (fold_right2 ( + ) 0 1 50000)) 1000;
  Printf.printf "Tail-recursive took: %fs\n"
    (Unix.gettimeofday () -. t)

$ ./test
Non-tail-recursive took: 0.513307s
Tail-recursive took: 0.582472s

Non-tail-recursive took: 1.950229s
Tail-recursive took: 0.590756s

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
Objective CAML for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

_______________________________________________
Caml-list mailing list. Subscription management:
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
Archives: http://caml.inria.fr
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs


--=_alternative 003F7287C1256FC7_=
Content-Type: text/html; charset="US-ASCII"


<br><font size=2 face="sans-serif">Just to chime in on this...</font>
<br>
<br><font size=2 face="sans-serif">Did anybody every consider the following
simple solution for the 'map' problem?</font>
<br>
<br><font size=1><tt>let unbreakable_map f xs =</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; let rec </tt></font>
<br><font size=1><tt>&nbsp; &nbsp; &nbsp; map limit f xs = (* recursion
depth limited to limit *)</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; &nbsp; &nbsp; match xs with</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [] &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt; []</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; &nbsp; &nbsp; | x::xs when limit &gt;
0 -&gt; let f_x = f x in f_x::(map (limit-1) f xs)</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; &nbsp; &nbsp; | _ &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&gt; List.rev_append (List.rev_map
f xs) []</tt></font>
<br><font size=1><tt>&nbsp; &nbsp; in &nbsp;map 512 f xs;;</tt></font>
<br><font size=2 face="sans-serif"><br>
The function is not tail-recursive for lists of length up to 512---at which
point it</font>
<br><font size=2 face="sans-serif">switches to a tail-recursive algorithm
and uses the heap instead of the stack</font>
<br><font size=2 face="sans-serif">to keep track of structural recursion.</font>
<br>
<br><font size=2 face="sans-serif">The overhead introduced is counting
down and comparing an int-counter.</font>
<br>
<br><font size=2 face="sans-serif">Clearly, this solution is applicable
to most other structural operations on lists</font>
<br><font size=2 face="sans-serif">and it gets rid of many stack overflows
nicely. </font>
<br>
<br><font size=2 face="sans-serif">Since the &quot;magic number&quot; 512
necessarily represents a trade-off, I would like</font>
<br><font size=2 face="sans-serif">to see it being chosen at the time the
Ocaml compiler is constructed for a specific</font>
<br><font size=2 face="sans-serif">target architecture, i.e. at the time
somebody more or less knows the stack size.</font>
<br>
<br><font size=2 face="sans-serif">Cheers,</font>
<br>
<br><font size=2 face="sans-serif">Sebastian.</font>
<br>
<br>
<br><font size=2 face="sans-serif">----<br>
Dr. Sebastian Egner<br>
Senior Scientist Channel Coding &amp; Modulation<br>
Philips Research Laboratories<br>
Prof. Holstlaan 4 (WDC 1-051, 1st floor, room 51)<br>
5656 AA Eindhoven<br>
The Netherlands<br>
tel: &nbsp; &nbsp; &nbsp; +31 40 27-43166 &nbsp; *** SINCE 10-Feb-2005
***<br>
fax: &nbsp; &nbsp; &nbsp;+31 40 27-44004<br>
email: sebastian.egner@philips.com</font>
<br>
<br>
<br>
<table width=100%>
<tr valign=top>
<td>
<td>
<br>
<br>
<br>
<br>
<br><font size=1 face="sans-serif"><b>Jon Harrop &lt;jon@ffconsultancy.com&gt;</b></font>
<p><font size=1 face="sans-serif">Sent by: </font>
<br><font size=1 face="sans-serif">caml-list-admin@yquem.inria.fr</font>
<p><font size=1 face="sans-serif">16-03-2005 20:51</font>
<td><font size=1 face="Arial">&nbsp; &nbsp; &nbsp; &nbsp; </font>
<br><font size=1 face="sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; To:
&nbsp; &nbsp; &nbsp; &nbsp;caml-list@yquem.inria.fr</font>
<br><font size=1 face="sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; cc:
&nbsp; &nbsp; &nbsp; &nbsp;(bcc: Sebastian Egner/EHV/RESEARCH/PHILIPS)</font>
<br><font size=1 face="sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; Subject:
&nbsp; &nbsp; &nbsp; &nbsp;Re: [Caml-list] OCaml troll on Slashdot</font>
<p><font size=1 face="sans-serif">&nbsp; &nbsp; &nbsp; &nbsp; Classification:
&nbsp; &nbsp; &nbsp; &nbsp;</font>
<br>
<br></table>
<br>
<br>
<br><font size=2><tt>On Wednesday 16 March 2005 17:43, brogoff wrote:<br>
&gt; On Wed, 16 Mar 2005, Jacques Garrigue wrote:<br>
&gt; &gt; Because tail-recursive versions do some extra work to ensure<br>
&gt; &gt; tail-recursiveness. For instance building a list in reverse order,
and<br>
&gt; &gt; converting it back with List.rev at the end. This only pays off
for<br>
&gt; &gt; huge lists.<br>
&gt;<br>
&gt; No doubt the implementors will want me guillotined for bringing this
up<br>
&gt; again, but using the (still functional!) set_cdr! tail recursive functions,<br>
&gt; which do *not* reverse the list, are always faster than the non tail<br>
&gt; recursive list functions, even for small lists, at least in my experience.<br>
&gt; So I suspect that your &quot;for instance&quot; is in fact the only
reason for the<br>
&gt; disparity. I'd welcome a counterexample.<br>
<br>
Here is one of the counterexamples given in my book, two implementations
of a <br>
fold_right function over an implicit semi-inclusive range of integers [l..u):<br>
<br>
# let rec fold_right1 f accu l u =<br>
 &nbsp; &nbsp;if l &lt; u then f (fold_right1 f accu (l + 1) u) l else
accu;;<br>
val fold_right1 : ('a -&gt; int -&gt; 'a) -&gt; 'a -&gt; int -&gt; int
-&gt; 'a = &lt;fun&gt;<br>
# let rec fold_right2 f accu l u =<br>
 &nbsp; &nbsp;if l &lt; u then let u = u - 1 in fold_right2 f (f accu u)
l u else accu;;<br>
val fold_right2 : ('a -&gt; int -&gt; 'a) -&gt; 'a -&gt; int -&gt; int
-&gt; unit = &lt;fun&gt;<br>
<br>
(A program for timing is at the end of this e-mail).<br>
<br>
Here, the non-tail-recursive fold_left function is significantly faster
on <br>
smaller lists and the tail-recursive fold_right functions is much faster
in <br>
larger lists.<br>
<br>
I believe there are many other counterexamples. Indeed, I would even say
that <br>
most functions are counterexamples. Perhaps the reason is that non-tail
<br>
recursion is used when it is natural for a given task, and transforming
into <br>
tail-recursive form is then necessarily more complicating the function.<br>
<br>
&gt; Those Obj based List functions are what ExtLib provides, I think,
and there<br>
&gt; are even ways to get this optimization neatly into ML style languages.<br>
&gt; Maybe in ML 20XY this will be addressed.<br>
<br>
I don't know what the performance of such transformed code would be. Perhaps
<br>
the transformation would slow code down. Consequently, it may be early
days <br>
to call it an &quot;optimisation&quot;.<br>
<br>
Here's the timing program:<br>
<br>
let rec fold_right1 f accu l u =<br>
 &nbsp;if l &lt; u then f (fold_right1 f accu (l + 1) u) l else accu<br>
let rec fold_right2 f accu l u =<br>
 &nbsp;if l &lt; u then let u = u - 1 in fold_right2 f (f accu u) l u else
accu<br>
<br>
let rec test f n = if n&gt;0 then (f (); test f (n-1))<br>
<br>
let _ =<br>
 &nbsp;let t = Unix.gettimeofday () in<br>
 &nbsp;test (fun () -&gt; ignore (fold_right1 ( + ) 0 1 5000)) 10000;<br>
 &nbsp;Printf.printf &quot;Non-tail-recursive took: %fs\n&quot;<br>
 &nbsp; &nbsp;(Unix.gettimeofday () -. t);<br>
 &nbsp;let t = Unix.gettimeofday () in<br>
 &nbsp;test (fun () -&gt; ignore (fold_right2 ( + ) 0 1 5000)) 10000;<br>
 &nbsp;Printf.printf &quot;Tail-recursive took: %fs\n\n&quot;<br>
 &nbsp; &nbsp;(Unix.gettimeofday () -. t);<br>
 &nbsp;let t = Unix.gettimeofday () in<br>
 &nbsp;test (fun () -&gt; ignore (fold_right1 ( + ) 0 1 50000)) 1000;<br>
 &nbsp;Printf.printf &quot;Non-tail-recursive took: %fs\n&quot;<br>
 &nbsp; &nbsp;(Unix.gettimeofday () -. t);<br>
 &nbsp;let t = Unix.gettimeofday () in<br>
 &nbsp;test (fun () -&gt; ignore (fold_right2 ( + ) 0 1 50000)) 1000;<br>
 &nbsp;Printf.printf &quot;Tail-recursive took: %fs\n&quot;<br>
 &nbsp; &nbsp;(Unix.gettimeofday () -. t)<br>
<br>
$ ./test<br>
Non-tail-recursive took: 0.513307s<br>
Tail-recursive took: 0.582472s<br>
<br>
Non-tail-recursive took: 1.950229s<br>
Tail-recursive took: 0.590756s<br>
<br>
-- <br>
Dr Jon D Harrop, Flying Frog Consultancy Ltd.<br>
Objective CAML for Scientists<br>
http://www.ffconsultancy.com/products/ocaml_for_scientists<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list<br>
Archives: http://caml.inria.fr<br>
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners<br>
Bug reports: http://caml.inria.fr/bin/caml-bugs<br>
</tt></font>
<br>
--=_alternative 003F7287C1256FC7_=--

