Return-Path: <hdaume@ISI.EDU>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 920EABC48
	for <caml-list@yquem.inria.fr>; Thu, 31 Mar 2005 16:33:51 +0200 (CEST)
Received: from vapor.isi.edu (vapor.isi.edu [128.9.64.64])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j2VEXomx028500
	for <caml-list@yquem.inria.fr>; Thu, 31 Mar 2005 16:33:50 +0200
Received: from albini.isi.edu (albini.isi.edu [128.9.216.111])
	by vapor.isi.edu (8.11.6p2+0917/8.11.2) with ESMTP id j2VEXDs10125;
	Thu, 31 Mar 2005 06:33:13 -0800 (PST)
Date: Thu, 31 Mar 2005 06:33:12 -0800 (PST)
From: Hal Daume III <hdaume@ISI.EDU>
To: Oliver Bandel <oliver@first.in-berlin.de>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] generic data type -> int function
In-Reply-To: <20050330222737.GA443@first.in-berlin.de>
Message-ID: <Pine.LNX.4.44.0503310632530.715-100000@albini.isi.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-ISI-4-38-10-MailScanner: Found to be clean
X-MailScanner-From: hdaume@isi.edu
X-Miltered: at concorde with ID 424C0A4E.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 mtype:01 pairs:01 mtype:01 pairs:01 arrays:01 ...:98 nam:98 nam:98 ...:98 wrote:01 essentially:01 int:01 int:01 data:02 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

> On Tue, Mar 29, 2005 at 07:26:02PM -0800, Hal Daume III wrote:
> [...]
> > type etype = GPE | LOC | ORG | PER | NAE_e | BOS_e
> > type mtype = BAR | NAM | NOM | PRE | PRO | OTHER | NAE_m | BOS_m
> > type pairs = EM of etype*mtype | EE of etype*etype | MM of mtype*mtype
> > type pairs2 = EP of etype * pairs | MP of mtype * pairs
> > 
> > 
> > Corresponding output:
> > 
> > let int_of_etype = function | GPE -> 0 | LOC -> 1 | ORG -> 2 | PER -> 3 | NAE_e -> 4 | BOS_e -> 5
> > let int_of_mtype = function | BAR -> 0 | NAM -> 1 | NOM -> 2 | PRE -> 3 | PRO -> 4 | OTHER -> 5 | NAE_m -> 6 | BOS_m -> 7
> > let int_of_pairs = function | EM (etype_0, mtype_1) -> 0 + 1 * (int_of_etype etype_0 + 6 * (int_of_mtype mtype_1)) | EE (etype_0, etype_1) -> 48 + 1 * (int_of_etype etype_0 + 6 * (int_of_etype etype_1)) | MM (mtype_0, mtype_1) -> 84 + 1 * (int_of_mtype mtype_0 + 8 * (int_of_mtype mtype_1))
> > let int_of_pairs2 = function | EP (etype_0, pairs_1) -> 0 + 1 * (int_of_etype etype_0 + 6 * (int_of_pairs pairs_1)) | MP (mtype_0, pairs_1) -> 888 + 1 * (int_of_mtype mtype_0 + 8 * (int_of_pairs pairs_1))
> [...]
> 
> That's nice, but for what do you need this?
> 
> Maybe this way is not necessary to go.
> 
> So, what is this good for?!

I want to use complex data types as indices in arrays, essentially.

-- 
 Hal Daume III                                   | hdaume@isi.edu
 "Arrest this man, he talks in maths."           | www.isi.edu/~hdaume

