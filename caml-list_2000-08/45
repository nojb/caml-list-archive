Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA27900 for caml-red; Wed, 9 Aug 2000 15:55:44 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA26607 for <weis@pauillac.inria.fr>; Wed, 9 Aug 2000 13:29:52 +0200 (MET DST)
Received: from miss.wu-wien.ac.at (miss.wu-wien.ac.at [137.208.107.17])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e79BTpf10588;
	Wed, 9 Aug 2000 13:29:51 +0200 (MET DST)
Received: (from mottl@localhost)
	by miss.wu-wien.ac.at (8.9.0/8.9.0) id NAA21616;
	Wed, 9 Aug 2000 13:29:41 +0200 (MET DST)
Date: Wed, 9 Aug 2000 13:29:41 +0200
From: Markus Mottl <mottl@miss.wu-wien.ac.at>
To: ortmann@us.ibm.com
Cc: Pierre Weis <Pierre.Weis@inria.fr>,
        Georges Mariano <georges.mariano@inrets.fr>, caml-list@inria.fr
Subject: Re: tiny toplevel
Message-ID: <20000809132941.A16537@miss.wu-wien.ac.at>
References: <85256935.0059D0CD.00@D51MTA04.pok.ibm.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2i
In-Reply-To: <85256935.0059D0CD.00@D51MTA04.pok.ibm.com>; from ortmann@us.ibm.com on Tue, Aug 08, 2000 at 11:21:09 -0500
Sender: weis@pauillac.inria.fr

On Tue, 08 Aug 2000, ortmann@us.ibm.com wrote:
> > USER  PID %CPU %MEM   VSZ  RSS TTY   STAT START TIME COMMAND
> > weis 7546  0.1  1.2  2840 1652 pts/5 T    14:16 0:00 ocamlrun /usr/bin
> > weis 7656  1.6  0.5  1484  660 pts/5 T    14:17 0:00 camlrun /usr/loca

> Any idea how big Java is?

Interesting question - I tried it out on a Sun Ultra 5:

    PID USERNAME THR PRI NICE  SIZE   RES STATE   TIME    CPU COMMAND
  11183 markusm    1   5    0 3000K 2448K run     0:10 33.63% ocaml
  11184 markusm    1  15    0 4232K 2656K run     0:04 18.04% java
  11402 markusm    1   5    0 1960K 1272K run     0:01  5.27% ocamlrun

The OCaml-program:

  while true do () done

The Java-program (an example of conciseness ;)

  class test {
    public static void main (String args[]) {
      while (true);
    }
  }

One could argue now that the initial heap settings for Java are larger (I
don't know), but even explicitely setting them to the lowest level does not
allow it to "beat" OCaml:

java -ms1000 test:

  11270 markusm    1   5    0 3336K 2480K run     0:05 23.44% java

No match for OCaml (even the toplevel interpreter is smaller), not even to
mention caml-light, which is at least 2-3 times smaller...

I don't know how Java scales up with more interesting programs, but I don't
expect any surprises here... - so if somebody wants to go "embedded", don't
do it with Java... ;)

Best regards,
Markus Mottl

-- 
Markus Mottl, mottl@miss.wu-wien.ac.at, http://miss.wu-wien.ac.at/~mottl


