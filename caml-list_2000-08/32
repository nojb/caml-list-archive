Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id UAA21669 for caml-red; Sat, 5 Aug 2000 20:14:02 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA12180 for <caml-list@pauillac.inria.fr>; Fri, 4 Aug 2000 21:48:20 +0200 (MET DST)
Received: from animal.cs.chalmers.se (animal.cs.chalmers.se [129.16.225.30])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e74JmJb20651
	for <caml-list@inria.fr>; Fri, 4 Aug 2000 21:48:19 +0200 (MET DST)
Received: from muppet70.cs.chalmers.se (muppet70.cs.chalmers.se [129.16.226.211])
	by animal.cs.chalmers.se (8.8.5/8.8.5) with ESMTP id VAA23081;
	Fri, 4 Aug 2000 21:48:18 +0200 (MET DST)
Received: from localhost (taha@localhost)
	by muppet70.cs.chalmers.se (8.8.5/8.8.5) with ESMTP id VAA29727;
	Fri, 4 Aug 2000 21:48:17 +0200 (MET DST)
X-Authentication-Warning: muppet70.cs.chalmers.se: taha owned process doing -bs
Date: Fri, 4 Aug 2000 21:48:17 +0200 (MET DST)
From: Walid Taha <taha@cs.chalmers.se>
To: Don Syme <dsyme@microsoft.com>
cc: caml-list@inria.fr
Subject: RE: Imperative programming in Caml
In-Reply-To: <FB9575840F91DC4EACEB5CD6F573A20D80030F@red-msg-20.redmond.corp.microsoft.com>
Message-ID: <Pine.SOL.4.21.0008042140570.29569-100000@muppet70.cs.chalmers.se>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: weis@pauillac.inria.fr


Hi Don,

Something along these lines did cross my mind.  In particular, it seems 
one might be able to lift this idea to the level of datatype 
declarations, so that a declaration like:

mutable type list = Cell of int * list;;

and that would be translated to

type list0 = Empty | Cell of int * list  (* Empty is "nil/null" *)
and  list  = list0 ref;;

Then, one can try to systematically introduce implicit dereferencing.  I
am a bit worried, though, that because ":=" is a first class citizen
(function) in Caml, doing things differently on the lhs and rhs might not
enforcable (meaning where to introduce implicit dereferencing).

Has anyone considered this before?

Walid.

On Fri, 4 Aug 2000, Don Syme wrote:

> 
> I don't know how it fits with the grammar, but something like
>   mutable finished = false 
>   mutable list = Empty
>   mutable here = list 
> 
> might make things a bit clearer.  You could have implicit dereferencing for
> everything declared with "mutable" and something like C's "&finished" if you
> wanted to pass the reference.
> 
> Just a thought,
> Don
> 
> 
> 
> -----Original Message-----
> From: Walid Taha [mailto:taha@cs.chalmers.se]
> Sent: 03 August 2000 20:20
> To: caml-list@inria.fr
> Subject: Imperative programming in Caml
> 
> 
> 
> [Apologies in advance for purists that this project might offend.]
> 
> Dear all,
> 
> Below is one of my first attempts at imperative programming in ML: a
> program that reads a list of numbers and squares them, using a "mutable
> list".  The presence of a "while" construct and easy of terminal IO in
> Caml should help an imperative programmer feel at home.  But I am
> concerned (and a bit surprised, actually) that the use of "let" bindings
> and the presence of normal variables in addition to "mutable" variables
> might make it more difficult to explain this program to a beginer that is
> *not* interested in the functional aspects.  If any one has suggestions
> for making this program more "imperative", I would appreciate it.
> 
> Many thanks in advance,
> 
> Walid.
> 
> ---
> 
> let squareMany () =
>  print_string "\nPlease enter zero (0) to stop.\n\n"; 
>  let finished = ref false 
>  and list = ref Empty in 
>  let here = ref list in
>  while not(!finished) do
>         print_string "Enter a number : ";
>         let number = read_int () in
>         if number<>0 
>          then begin
>                let new = ref Empty in
>                !here := Cell (number, new);
>                here := new;
>               end
>          else begin
>                finished:=true;
>               end 
>        done;
>  print_string "Here are the squares of the numbers you entered: ";
>  while (!list)<>Empty do
>        let (Cell(number, rest)) = !list in
>            print_int (number*number);
>            list := !rest;
>            print_string " ";
>        done;
>  print_string "\n\nGood bye!\n\n";;
> 




