Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA14164 for caml-red; Thu, 3 Aug 2000 15:18:08 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA04599 for <caml-list@pauillac.inria.fr>; Thu, 3 Aug 2000 01:35:50 +0200 (MET DST)
Received: from suburbia.net (suburbia.net [203.4.184.1])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e72NZjb01280
	for <caml-list@inria.fr>; Thu, 3 Aug 2000 01:35:46 +0200 (MET DST)
Received: by suburbia.net (Postfix, from userid 110)
	id 433A86C598; Thu,  3 Aug 2000 09:35:38 +1000 (EST)
To: caml-list@inria.fr
Subject: ocaml draws with C in trivial benchmark
Cc: proff@iq.org
From: Julian Assange <proff@iq.org>
Date: 03 Aug 2000 09:35:37 +1000
Message-ID: <wxhf938cdy.fsf@suburbia.net>
Lines: 56
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: weis@pauillac.inria.fr


http://www.qss.cz/bench/ 

         The Task of the benchmark was to find all words in the text
         file, and count how often they occur in the text.

         One big text file was used for this purpose, made by
         concatenating all Linux HOWTOs on my computer. Output of ls -l
         follows:

         ls -l /tmp/all_HOWTOS
         -rw-rw-r--  1 frido    frido    6027809 Jan 20 20:16
         /tmp/all_HOWTOS

[..]

It's worth noting that this test, rather strangly, for both C and
ocaml, used a lexer to skip white-space.


                                     Total Run Time Percentage (slowest
                                                    taken as 100%)
         Perl                        12.797         2.43%
         Ocaml, interpreted          9.684          1.84%
         Ocaml, native compiler      4.803          0.91%
         Python, module Re           4:05.22        46.5%
         Python, no Re               32.649         6.18%
         Python, preread (10 MB)     20.764         3.93%
         Python, fastest             18.906         3.58%
         Python, Jeremy Hylton       19.776         3.75%
         ISE, own split_string,      3:53.11        44.1%
         finalized
         ISE, hash table + GOBO,     4:26.32        50.5%
         finalized
         ISE, binary search tree,    4:45.26        54%
         finalized
         ISE, binary search tree,    7:49.49        88.9%
         freezed
         SE, hash table, no_check    2:20.34        26.6%
         SE, hash table, boost       34.075         6.5%
         KEDSAL Data Structures
         ISE, finalized              3:32.33        40.2%
         SE                          1:24.20        16%
         PYLON Libs
         SE, no_check                2:04.88        23.7%
         SE, boost                   27.361         5.1%
         ISE, finalized              6:31.78        74.2%
         ISE, GOBO ds, freezed       8:47.68        100%
         ISE, GOBO ds, finalized     5:30.59        62.6%
         SE, GOBO ds                 -              -
         ISE, C data structures,     1:09.64        13.2%
         finalized
         ISE, STRING not used,       30.963         5.87%
         finalized
         C solution (egcs)           4.855          0.9%
         C solution (lccd)           5.257          1%


