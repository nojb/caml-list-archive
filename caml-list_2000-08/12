Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA07508 for caml-red; Thu, 3 Aug 2000 15:10:43 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA25487 for <caml-list@pauillac.inria.fr>; Wed, 2 Aug 2000 16:16:36 +0200 (MET DST)
Received: from HUET-GERA1P (huet-gera2p.inria.fr [128.93.20.113])
	by concorde.inria.fr (8.10.0/8.10.0) with SMTP id e72EGWb22873;
	Wed, 2 Aug 2000 16:16:32 +0200 (MET DST)
Message-Id: <200008021416.e72EGWb22873@concorde.inria.fr>
X-Sender: huet@pop-rocq.inria.fr
X-Mailer: QUALCOMM Windows Eudora Pro Version 4.0.2 
Date: Wed, 02 Aug 2000 16:13:43 +0200
To: dsl@tepkom.ru, caml-list@inria.fr
From: Gerard Huet <Gerard.Huet@inria.fr>
Subject: Re: automatic construction of mli files
References: <Pine.LNX.4.10.10008011518300.14334-100000@post.tepkom.ru>
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Sender: weis@pauillac.inria.fr

At 16:03 02/08/00 +0400, Dmitri Lomov wrote:

>There are some things that I DO NOT like about OCaml .mli/.ml files,=
 however.
>1) I have to duplicate type definitions  in .mli and in .ml files.
>   I think every ocamler knows how tedious is keeping consistency here.
>   Most of the time, you just change the definition in one of the files,
>   compile, get an error message, and (with curses ;)) copy definition to
another
>   file. I suppose complier can do this work for the user.
>   Maybe there is some hidden philosophy behind this... I will be happy
>   if someone explaint it to me

Just to add my 2 cents to this rambling discussion on interfaces. I used to
gripe myself about this duplication problem. But one day I realised that a
lot of this duplication could be avoided, because often the interfaces can
be designed as pieces of data structures definitions (DTDs), which consist
entirely of type declarations AND WHICH DO NOT NEED AN IMPLEMENTATION FILE
AT ALL, and pieces of method/exceptions descriptions, for which a .mli and
a .ml file share some redundancy, but where the programmer has the
opportunity to think carefully about what is visible from outside and at
what level of abstraction.=20

Furthermore it is essential that we provide the possibility of designing
the interface BEFORE the code gets written, in order to do team work and
top-down design. For a large project, dummy implementations will typically
give a debugging environment to test your module, but here we want to check
the type consistency of these debugging dummies with respect to the master
.mli, as opposed to generate the .mli specs from them.=20

I am currently working on a linguistic data base, where the data base
format is a BIG .mli describing the abstract syntax of my data base,
thinking about it as a DTD. This format is used as interface both to the
parser which reads in the data, and to the various processors, extractors,
and printers of the data base. This .mli file has no implementation
associated with it, and thus there is not any redundancy in terms of source
code.=20

Of course, it is useful to have the facility to get the .mli from the .ml
for quick-and-dirty bottom-up programming. But as your program gets large,
and your modules become parametric functors, you really want to keep
separate your interface specs and your code, and the redundancy is slight. =
=20

G=E9rard



