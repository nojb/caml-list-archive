Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA09838 for caml-red; Tue, 22 Aug 2000 09:45:39 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA05202 for <caml-list@pauillac.inria.fr>; Mon, 21 Aug 2000 23:42:01 +0200 (MET DST)
Received: from cepheus.azstarnet.com (cepheus.azstarnet.com [169.197.56.195])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e7LLg0f20729
	for <caml-list@inria.fr>; Mon, 21 Aug 2000 23:42:00 +0200 (MET DST)
Received: from dylan (dialup19ip054.tus.azstarnet.com [169.197.39.54])
	by cepheus.azstarnet.com (8.9.3/8.9.3) with SMTP id OAA21001
	for <caml-list@inria.fr>; Mon, 21 Aug 2000 14:41:55 -0700 (MST)
X-Sent-via: StarNet http://www.azstarnet.com/
Message-ID: <000d01c00bb8$fb3e3560$210148bf@dylan>
From: "David McClain" <dmcclain@azstarnet.com>
To: <caml-list@inria.fr>
Subject: Language Design
Date: Mon, 21 Aug 2000 14:44:26 -0700
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 4.72.3110.5
X-MimeOLE: Produced By Microsoft MimeOLE V4.72.3110.3
Sender: weis@pauillac.inria.fr

John Max Skaller said:
> I am designing a programming language (the compiler is written
in ocaml) which is a procedural language with 'purely functional'
expressions (using eager evaluation). Function closures can
access their context, which procedural statements my change between
building the closure and evaulating it. Procedural closures may
mutate their environment.

DM says:

I, for one, have fought for many years with languages that insisted on a
division between functions and procedures as you describe them. I have found
the unified "everything is a function" approach to be most appealing. In
particular, the worst offenders are those languages that insist on syntactic
distinctions such as Fortran, RSI/IDL, and Basic. I cannot be alone in
having difficulty remembering when a routine, whose result I don't really
need, is to be called as a function, or as a procedure.

I hope you find an answer to your question, but I do not look forward to
another such language.

Sincerely

David McClain, Sr. Scientist, Raytheon Systems Co., Tucson, AZ



