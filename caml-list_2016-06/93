Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 543737FA5C
	for <caml-list@sympa.inria.fr>; Tue, 21 Jun 2016 17:48:48 +0200 (CEST)
IronPort-PHdr: 9a23:QZJiiRNbdN5szdldFRMl6mtUPXoX/o7sNwtQ0KIMzox0KfzzrarrMEGX3/hxlliBBdydsKMczbKO+P2+EUU7or+/81k6OKRWUBEEjchE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i760zceF13FOBZvIaytQ8iJ3pzxj7j5psObSj4LrQT+SIs6FA+xowTVu5teqqpZAYF19CH0pGBVcf9d32JiKAHbtR/94sCt4MwrqHwI6LoJvvRNWqTifqk+UacQTHF/azh0t/vQqALbQACTynwZW2QQ2loUUkmWpC39C7v4tyr3sKJR3y2bMsDkBeQ4UDGj4qEtRBjsiSgKJRY49nvWg4p+lvQIjgimoklQyoTOYYyRfMF1fq7HcMlSEWVIVNxQWigHGYi8YpECFcIOOO9Zq8/2oF5Y/kj2PhWlGO66kmwAvXTxx6Bvlrl4HA==
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-it0-f47.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.214.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.214.47 as
  permitted sender) identity=mailfrom; client-ip=209.85.214.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-it0-f47.google.com) identity=helo;
  client-ip=209.85.214.47;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-it0-f47.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CKAgBgYGlXhi/WVdFdg1w4fQaoAoFThXWGJoZ7IoV1AoEvBzsRAQEBAQEBAQERAQEBCAsLCSEvgjGCGwEBAwESER0BGxACCwEDAQsGBQsaHQICIgERAQUBChIGExICBweHcwEDDwgOo0uBMT4xizuBaoJZBYdGChknAwpSgyMBAQEBAQUBAQEBAQEBGAIGEIYXhE2EHFGCVIJaBYYASwyBRYVZgTKJUoFYhDCFaII8gWlOhAWIZ445Eh6BDw8lghsKAxELgWggMokEAiQHgRcBAQE
X-IPAS-Result: A0CKAgBgYGlXhi/WVdFdg1w4fQaoAoFThXWGJoZ7IoV1AoEvBzsRAQEBAQEBAQERAQEBCAsLCSEvgjGCGwEBAwESER0BGxACCwEDAQsGBQsaHQICIgERAQUBChIGExICBweHcwEDDwgOo0uBMT4xizuBaoJZBYdGChknAwpSgyMBAQEBAQUBAQEBAQEBGAIGEIYXhE2EHFGCVIJaBYYASwyBRYVZgTKJUoFYhDCFaII8gWlOhAWIZ445Eh6BDw8lghsKAxELgWggMokEAiQHgRcBAQE
X-IronPort-AV: E=Sophos;i="5.26,504,1459807200"; 
   d="scan'208,217";a="182032331"
Received: from mail-it0-f47.google.com ([209.85.214.47])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 21 Jun 2016 17:48:46 +0200
Received: by mail-it0-f47.google.com with SMTP id f6so17376847ith.0;
        Tue, 21 Jun 2016 08:48:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=orcwC3oRzMsh9IZYL9wWHV6ETu6hWNbW+8cFGNTxg7c=;
        b=sxw6NxYxHZu6EXPKd5pkfY6XGXSGjhLm5MAiDXuEI0l6hEAIekeHxWDP9xto/N5Iz6
         mkfUjvciB/mEddrmcLXhwyz9Alv/bn5f4LfjmPzs+6z16rAbwnTEmBXx93RsMauPe3oQ
         IStKBI6KhfemyTorjsrnpakbenWpeK90HUnl8WlbXUtWtwY1dRKpj2tRtAFNqp87V8Vv
         yviIYb4mizcEaSGDwWBCOCD52Fnc2r0+N4LBwAQXrMYNHV3tOS3dyQsXvKbmKpQGpzEZ
         Rvyc9He7GjIxc5FGJoK1L4XHCR2QnitrYSnnmHnx3SJDhPkjotwdwpNI9MdW24OrHzMm
         +5wg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=orcwC3oRzMsh9IZYL9wWHV6ETu6hWNbW+8cFGNTxg7c=;
        b=AKB5A9UJMu9fLK1XWLwG6hEfel9QODtcJve+QhFpO2BZXFrL9shn5h2RMo8UKqZTvJ
         t4Xl6uTUNGpHnWx6/rN0iGgxv2sTystdI0aRYFLPKt5AR03vKGf9ysewzmgixXrnJLMf
         51/cDsofEl6ZZNbPf410gePWFW2ZWa0PDzFnuSdOlsEvAc0e6jbNTnifmLPCoEUFlFKk
         Pqc9SApCe88imAIN+sf2Dn2c5CwadQfiwBo6mmQXk2vx3HR4ZxXCy9QHafLoZyisL39f
         zgY5PEdVC3Fbh9Hw9DrXUogVPZccyfU+HCDoDAaAVBZBchAVBp43epBOXCqvb2kKEZ0B
         h6Nw==
X-Gm-Message-State: ALyK8tKvHOtE5z9NeHVkmEBwn8UrouUb2Hr4XDCVXsgb4fPqWTyb8kCcIbMr1LZZKwbP6vOFf1QGxTJ/N4ie9A==
X-Received: by 10.36.31.131 with SMTP id d125mr6722665itd.87.1466524125006;
 Tue, 21 Jun 2016 08:48:45 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.79.136.70 with HTTP; Tue, 21 Jun 2016 08:48:05 -0700 (PDT)
In-Reply-To: <5E818FB5-6908-4E29-838E-C6A2836F60CE@inria.fr>
References: <5E818FB5-6908-4E29-838E-C6A2836F60CE@inria.fr>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 21 Jun 2016 11:48:05 -0400
Message-ID: <CAPFanBGX884jgq86vpJgTovARDwN=n0a2Gr1_p=qBw1ZieKt-w@mail.gmail.com>
To: Damien Doligez <damien.doligez@inria.fr>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11448c048694930535cbc1ff
Subject: Re: [Caml-list] About contributions to the Standard Library

--001a11448c048694930535cbc1ff
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

In my experience, reviewing propositions for new functions to the standard
library is very delicate and a rather stressful process. I think that
guidelines on how to discuss, review and validate these proposals would
help making it easier. Do we have some, or do we intend to have some in the
short-term future?

What makes standard library additions hard to review is that the review is,
*in essence*, a session in bike-shedding. We can all recognize
bike-shedding and it makes nobody happy, but when doing API design
bike-shedding is very much the point. So standard library addition
discussions, by design, tend to make people frustrated. I think policies on
how to contribute to these discussions, and how decisions will be made,
could help alleviate some of that frustratoin.

For the 4.03 deadline we had a very simple policy: we would only accept
functions whose name and function were completely obvious and
non-objectionable ("map2" for example). If anyone in the discussion had a
reservation about a function, we did not include it. In retrospect, I think
that having agreed on that was an excellent choice, it made it easy to
discuss those proposals.

Now of course this specific policy was only intended short-term, and is
probably too conservative to handle future stdlib changes. Is there a
reasonable relaxation of that policy that people would be willing to agree
on? Or maybe it would be possible to explicit the fact that there are
several kind of contributions, some that fit certain well-defined criteria
(such as the one above: being obvious and completely uncontroversial) and
are expected to be processed/review/decided in due diligence, and some that
are outside these bounds and should be *expected* to devolve into long and
possibly-frustrating discussions?


## Notes

(1) Discussing function names or seemingly-minor API details is not
necessarily an exercise in subjectivity. There are precise (formal) things
that can be said about properties of certain interfaces compared to others,
as we discussed with Daniel B=C3=BCnzli in a memorable past discussion in
GPR#10. Taking time to make decisions can result in measurably better
designs, and the importance of unit testsuits *and* property testing to
help and structure API design cannot be under-estimated.)


(2) I think part of the stress comes not from the specific status of
standard library (it exists with other libraries), but because of
backward-compatibility requirements: one cannot get it wrong on the first
time. I think this strong requirement is a good choice for the standard
library, despite its costs.


(3) As Daniel pointed out, we need a better understanding of how to make
code written using new stdlib functions compatible with older OCaml
versions. So far we've used ad-hoc solutions on each situation, and it was
barely manageable despite the small number of instances. (Bytes: in
findlib; opaque_identity: clever hack; String ascii functions: no solution).

On Tue, Jun 21, 2016 at 7:56 AM, Damien Doligez <damien.doligez@inria.fr>
wrote:

> Dear Ocaml contributors and users,
>
> I would like to call to your attention the section below,
> which was recently added to the CONTRIBUTING.md file in the
> OCaml source repository.
>
> Have a nice day,
>
> -- Damien
>
>
> ## Contributing to the standard library
>
> Contributions to the standard library are very welcome.  There is some
> widespread belief in the community than the stdlib is somehow "frozen"
> and that its evolutions are mostly driven by the need of the OCaml
> compiler itself.  Let's be clear: this is just plain wrong. The
> compiler is happy with its own local utility functions, and many
> recent additions to the stdlib are not used by the compiler.
>
> Another common and wrong idea is that core OCaml maintainers don't
> really care about the standard library.  This is not true, and won't
> be unless one of the "alternative standard" libraries really gains
> enough "market share" in the community.
>
> So: please contribute!
>
> Obviously, the proposals to evolve the standard library will be
> evaluated with very high standards, similar to those applied to the
> evolution of the surface langage, and much higher than those for
> internal compiler changes (optimizations, etc).
>
> A key property of the standard library is its stability.  Backward
> compatibility is not an absolute technical requirement (any addition
> to/of a module can break existing code, formally), but breakage should
> be limited as much as possible (and assessed, when relevant).  A
> corollary is that any addition creates a long-term support commitment.
> For instance, once a concrete type or function is made public,
> changing the exposed definition cannot be done easily.
>
> There is no plan to extend dramatically the functional domain covered
> by the standard library.  For instance, proposals to include support
> for XML, JSON, or network protocols are very likely to be rejected.  Such
> domains are better treated by external libraries.  Small additions to
> existing modules are much simpler to get in, even more so (but not
> necessarily) when:
>
>   - they cannot easily be implemented externally, or when
>   - they facilitate communication between independent external
>     libraries, or when
>   - they fill obvious gaps.
>
> Of course, standard guidelines apply as well: proper documentation,
> proper tests, portability (yes, also Windows!), good justification for
> why the change is desirable and why it should go into stdlib.
>
> So: be prepared for some serious review process!  But yes, yes,
> contributions are welcome and appreciated.  Promised.
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a11448c048694930535cbc1ff
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>In my experience, reviewing propositions fo=
r new functions to the standard library is very delicate and a rather stres=
sful process. I think that guidelines on how to discuss, review and validat=
e these proposals would help making it easier. Do we have some, or do we in=
tend to have some in the short-term future?<br><br></div>What makes standar=
d library additions hard to review is that the review is, *in essence*, a s=
ession in bike-shedding. We can all recognize bike-shedding and it makes no=
body happy, but when doing API design bike-shedding is very much the point.=
 So standard library addition discussions, by design, tend to make people f=
rustrated. I think policies on how to contribute to these discussions, and =
how decisions will be made, could help alleviate some of that frustratoin.<=
br><br></div>For the 4.03 deadline we had a very simple policy: we would on=
ly accept functions whose name and function were completely obvious and non=
-objectionable (&quot;map2&quot; for example). If anyone in the discussion =
had a reservation about a function, we did not include it. In retrospect, I=
 think that having agreed on that was an excellent choice, it made it easy =
to discuss those proposals.<br><br></div>Now of course this specific policy=
 was only intended short-term, and is probably too conservative to handle f=
uture stdlib changes. Is there a reasonable relaxation of that policy that =
people would be willing to agree on? Or maybe it would be possible to expli=
cit the fact that there are several kind of contributions, some that fit ce=
rtain well-defined criteria (such as the one above: being obvious and compl=
etely uncontroversial) and are expected to be processed/review/decided in d=
ue diligence, and some that are outside these bounds and should be *expecte=
d* to devolve into long and possibly-frustrating discussions?<br><div><div>=
<div><br><br></div><div>## Notes<br></div><div><br>(1) Discussing function =
names or seemingly-minor API details is not necessarily an exercise in subj=
ectivity. There are precise (formal) things that can be said about properti=
es of certain interfaces compared to others, as we discussed with Daniel B=
=C3=BCnzli in a memorable past discussion in GPR#10. Taking time to make de=
cisions can result in measurably better designs, and the importance of unit=
 testsuits *and* property testing to help and structure API design cannot b=
e under-estimated.)<br></div><div><br><br>(2) I think part of the stress co=
mes not from the specific status of standard library (it exists with other =
libraries), but because of backward-compatibility requirements: one cannot =
get it wrong on the first time. I think this strong requirement is a good c=
hoice for the standard library, despite its costs.<br><br><br></div><div>(3=
) As Daniel pointed out, we need a better understanding of how to make code=
 written using new stdlib functions compatible with older OCaml versions. S=
o far we&#39;ve used ad-hoc solutions on each situation, and it was barely =
manageable despite the small number of instances. (Bytes: in findlib; opaqu=
e_identity: clever hack; String ascii functions: no solution).<br></div></d=
iv></div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On=
 Tue, Jun 21, 2016 at 7:56 AM, Damien Doligez <span dir=3D"ltr">&lt;<a href=
=3D"mailto:damien.doligez@inria.fr" target=3D"_blank">damien.doligez@inria.=
fr</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Dear Ocaml contr=
ibutors and users,<br>
<br>
I would like to call to your attention the section below,<br>
which was recently added to the CONTRIBUTING.md file in the<br>
OCaml source repository.<br>
<br>
Have a nice day,<br>
<br>
-- Damien<br>
<br>
<br>
## Contributing to the standard library<br>
<br>
Contributions to the standard library are very welcome.=C2=A0 There is some=
<br>
widespread belief in the community than the stdlib is somehow &quot;frozen&=
quot;<br>
and that its evolutions are mostly driven by the need of the OCaml<br>
compiler itself.=C2=A0 Let&#39;s be clear: this is just plain wrong. The<br>
compiler is happy with its own local utility functions, and many<br>
recent additions to the stdlib are not used by the compiler.<br>
<br>
Another common and wrong idea is that core OCaml maintainers don&#39;t<br>
really care about the standard library.=C2=A0 This is not true, and won&#39=
;t<br>
be unless one of the &quot;alternative standard&quot; libraries really gain=
s<br>
enough &quot;market share&quot; in the community.<br>
<br>
So: please contribute!<br>
<br>
Obviously, the proposals to evolve the standard library will be<br>
evaluated with very high standards, similar to those applied to the<br>
evolution of the surface langage, and much higher than those for<br>
internal compiler changes (optimizations, etc).<br>
<br>
A key property of the standard library is its stability.=C2=A0 Backward<br>
compatibility is not an absolute technical requirement (any addition<br>
to/of a module can break existing code, formally), but breakage should<br>
be limited as much as possible (and assessed, when relevant).=C2=A0 A<br>
corollary is that any addition creates a long-term support commitment.<br>
For instance, once a concrete type or function is made public,<br>
changing the exposed definition cannot be done easily.<br>
<br>
There is no plan to extend dramatically the functional domain covered<br>
by the standard library.=C2=A0 For instance, proposals to include support<b=
r>
for XML, JSON, or network protocols are very likely to be rejected.=C2=A0 S=
uch<br>
domains are better treated by external libraries.=C2=A0 Small additions to<=
br>
existing modules are much simpler to get in, even more so (but not<br>
necessarily) when:<br>
<br>
=C2=A0 - they cannot easily be implemented externally, or when<br>
=C2=A0 - they facilitate communication between independent external<br>
=C2=A0 =C2=A0 libraries, or when<br>
=C2=A0 - they fill obvious gaps.<br>
<br>
Of course, standard guidelines apply as well: proper documentation,<br>
proper tests, portability (yes, also Windows!), good justification for<br>
why the change is desirable and why it should go into stdlib.<br>
<br>
So: be prepared for some serious review process!=C2=A0 But yes, yes,<br>
contributions are welcome and appreciated.=C2=A0 Promised.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
<br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</font></span></blockquote></div><br></div>

--001a11448c048694930535cbc1ff--
