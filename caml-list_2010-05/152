Return-Path: <philippe.veber@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id BCF03BBAF
	for <caml-list@yquem.inria.fr>; Mon, 17 May 2010 13:56:55 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: As8CACzM8EvRVda2mWdsb2JhbACdeAgVAQEBAQEICwoHESKtQQEFjVsBBIUQj0A
X-IronPort-AV: E=Sophos;i="4.53,247,1272837600"; 
   d="scan'208";a="59483984"
Received: from mail-iw0-f182.google.com ([209.85.214.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 17 May 2010 13:56:54 +0200
Received: by iwn42 with SMTP id 42so310821iwn.27
        for <caml-list@inria.fr>; Mon, 17 May 2010 04:56:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:mime-version:received:in-reply-to
         :references:from:date:message-id:subject:to:cc:content-type;
        bh=AY4f/r/gAM32L7U1u8cMoNsFBgHuo20P3t/2k+z/Vk4=;
        b=bdwgACLf7khzShIbTXgJWYw4b+7DDbYkqaDQrCD37Kz+ofhHk46Slx/F79HDeIAuPm
         rhZt2fHM2vCl4MwUZ/mxLzqIJ2fe+ahQF5TaTZ19AoA/LbDDOW2K0fwBCgv861FlsY40
         FDKfXHS5BgXtnRSXbV61dJdmhesV+QbZS70QY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=BaSnG2EPEDYMVRFngAX/mXjQH32HvUGIv45LNe0Z9ijoN2hrkFew1HU96CoRQhFKEf
         0/Tx9QUaewvLVD6KNN41SZvjIfWHQftT/rXIgMIpC+ILj117E5Hsl/4vMZcgSZ8Owqba
         SPCZoynjB6+FGXDRtr/hZfFykcv+aKeVAJXcM=
Received: by 10.231.177.133 with SMTP id bi5mr241943ibb.83.1274097414132; Mon, 
	17 May 2010 04:56:54 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.231.119.163 with HTTP; Mon, 17 May 2010 04:56:34 -0700 (PDT)
In-Reply-To: <20100515.095445.134122748.garrigue@math.nagoya-u.ac.jp>
References: <AANLkTikEddrAoZnT7aPdb86f0KJAnrRRx7pBpa_4l_aM@mail.gmail.com> 
	<20100515.004940.200940107.garrigue@math.nagoya-u.ac.jp> <AANLkTilg4fv4xdg9x8j_-NxKDs2EygcFN3LirGyneEHd@mail.gmail.com> 
	<20100515.095445.134122748.garrigue@math.nagoya-u.ac.jp>
From: Philippe Veber <philippe.veber@googlemail.com>
Date: Mon, 17 May 2010 13:56:34 +0200
Message-ID: <AANLkTikYr_BuPhpszSmWQZIB7tqcf3Cck9HbYGumvdux@mail.gmail.com>
Subject: Re: [Caml-list] Closed variants, type constraints and module 
	signature
To: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0016e64f5e8fc752da0486c8eb9d
X-Spam: no; 0.00; variants:01 val:01 subtype:01 sig:01 val:01 struct:01 sig:01 subtype:01 struct:01 polymorphic:01 polymorphic:01 beginners:01 beginners:01 clearer:01 clearer:01 

--0016e64f5e8fc752da0486c8eb9d
Content-Type: text/plain; charset=ISO-8859-1

2010/5/15 Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>

> From: Philippe Veber <philippe.veber@googlemail.com>
> > 2010/5/14 Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
> >
> >> From: Philippe Veber <philippe.veber@googlemail.com>
> >>
> >> > I'd like to define a type with a variable that is constrained to
> accept
> >> only
> >> > polymorphic variant types included in a given set of tags. That is how
> I
> >> > believed one should do :
> ...
> >> > Does anyone know why the definition of module I is rejected ? And if
> this
> >> is
> >> > the intended behavior, why does the following work ?
> >> >
> >> > # let v : 'a t = `a
> >> >   ;;
> >> > val v : [< `a | `b > `a ] t = `a
> >>
> >> But it doesn't really work!
> >> More precisely, the type [< `a | `b > `a ] t is an instance of 'a t,
> >> not 'a t itself, an a module interface should give a type at most as
> >> general as the implementation.
> >>
> >
> > Right, I understand now there are two different mechanisms at hand here :
> in
> > the module case, the type annotation for v is a specification, in the let
> > binding case, it is a constraint. Seems like my question was better
> suited
> > to beginners list ! Just to be sure : module I is rejected because v
> should
> > have type 'a t for all 'a satisfying the constraint 'a = [< `a | `b ],
> that
> > contain in particular [ `b ], which is incompatible with the type of v.
> Is
> > that correct ?
>
> Yes, this is exactly the point I was trying to make. But it was a good
> idea to post it here: this is a rather technical point, I don't read
> the beginner-list usually, and your explanation is probably better
> than mine.
>
> >> In your case, you should simply write
> >>
> >>  type t = [`a | `b]
> >>
> >> since you don't know what v may be.
> >>
> >
> > If i absolutely wanted to forbid other tags than `a and `b, while keeping
> > the possibility to manage subtype hierarchies, maybe I could also change
> the
> > code this way :
> >
> > type u = [`a | `b]
> > type 'a t = 'a constraint 'a = [< u ]
> >
> > module type S = sig
> >   val v : u t
> >   val f : 'a t -> [`a] t
> > end
> >
> > module I : S = struct
> >   let v = `a
> >   let f _ = v
> > end
> >
> > At least now the interpreter doesn't complain. Many thanks !
>
> This indeed works, but I'm not sure of why you insist on defining a
> constrained type. What is wrong with writing directly the following?
>
> module type S = sig
>  val v : u
>   val f : [< u] -> [`a]
> end
>
Well, nothing ! I'm affraid I chose an inappropriate solution to an
irrelevant problem. Initially i just wanted to be sure my polymorphic type
'a t would not be used with funny tags in 'a (I mean tags that have nothing
to do with t). But after all, there is (in my case) no rationale for this.
Second, types may be shorter to write :

val f : 'a t -> int

instead of

val f : [< u] t -> int

or

val f : [< My_type.u ] My_type.t -> int

if in another module. Well, now it's clearer for me it was not such a smart
idea. Your proposal is simpler and more natural.



> Constrained types have their uses,

which are, in brief ? Now I can't see a typical use for closed polymorphic
variant types (I mean types of the form 'a t constraint 'a = [< ... ])

but I find them often confusing as
> the type variable you write is not really a type variable.
>
why isn't it the case ? Aren't they simply type variables restricted to a
finite number of types ?

Anyway, thanks a lot for commenting on my problem !

Philippe.






> Question of taste.
>
> Jacques Garrigue
>

--0016e64f5e8fc752da0486c8eb9d
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br><br><div class=3D"gmail_quote">2010/5/15 Jacques Garrigue <span dir=3D"=
ltr">&lt;<a href=3D"mailto:garrigue@math.nagoya-u.ac.jp">garrigue@math.nago=
ya-u.ac.jp</a>&gt;</span><br><blockquote class=3D"gmail_quote" style=3D"bor=
der-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-=
left: 1ex;">

<div class=3D"im">From: Philippe Veber &lt;<a href=3D"mailto:philippe.veber=
@googlemail.com">philippe.veber@googlemail.com</a>&gt;<br>
&gt; 2010/5/14 Jacques Garrigue &lt;<a href=3D"mailto:garrigue@math.nagoya-=
u.ac.jp">garrigue@math.nagoya-u.ac.jp</a>&gt;<br>
&gt;<br>
&gt;&gt; From: Philippe Veber &lt;<a href=3D"mailto:philippe.veber@googlema=
il.com">philippe.veber@googlemail.com</a>&gt;<br>
&gt;&gt;<br>
&gt;&gt; &gt; I&#39;d like to define a type with a variable that is constra=
ined to accept<br>
&gt;&gt; only<br>
&gt;&gt; &gt; polymorphic variant types included in a given set of tags. Th=
at is how I<br>
&gt;&gt; &gt; believed one should do :<br>
</div>...<br>
<div class=3D"im">&gt;&gt; &gt; Does anyone know why the definition of modu=
le I is rejected ? And if this<br>
&gt;&gt; is<br>
&gt;&gt; &gt; the intended behavior, why does the following work ?<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; # let v : &#39;a t =3D `a<br>
&gt;&gt; &gt; =A0 ;;<br>
&gt;&gt; &gt; val v : [&lt; `a | `b &gt; `a ] t =3D `a<br>
&gt;&gt;<br>
&gt;&gt; But it doesn&#39;t really work!<br>
&gt;&gt; More precisely, the type [&lt; `a | `b &gt; `a ] t is an instance =
of &#39;a t,<br>
&gt;&gt; not &#39;a t itself, an a module interface should give a type at m=
ost as<br>
&gt;&gt; general as the implementation.<br>
&gt;&gt;<br>
&gt;<br>
&gt; Right, I understand now there are two different mechanisms at hand her=
e : in<br>
&gt; the module case, the type annotation for v is a specification, in the =
let<br>
&gt; binding case, it is a constraint. Seems like my question was better su=
ited<br>
&gt; to beginners list ! Just to be sure : module I is rejected because v s=
hould<br>
&gt; have type &#39;a t for all &#39;a satisfying the constraint &#39;a =3D=
 [&lt; `a | `b ], that<br>
&gt; contain in particular [ `b ], which is incompatible with the type of v=
. Is<br>
&gt; that correct ?<br>
<br>
</div>Yes, this is exactly the point I was trying to make. But it was a goo=
d<br>
idea to post it here: this is a rather technical point, I don&#39;t read<br=
>
the beginner-list usually, and your explanation is probably better<br>
than mine.<br>
<div class=3D"im"><br>
&gt;&gt; In your case, you should simply write<br>
&gt;&gt;<br>
&gt;&gt; =A0type t =3D [`a | `b]<br>
&gt;&gt;<br>
&gt;&gt; since you don&#39;t know what v may be.<br>
&gt;&gt;<br>
&gt;<br>
&gt; If i absolutely wanted to forbid other tags than `a and `b, while keep=
ing<br>
&gt; the possibility to manage subtype hierarchies, maybe I could also chan=
ge the<br>
&gt; code this way :<br>
&gt;<br>
&gt; type u =3D [`a | `b]<br>
&gt; type &#39;a t =3D &#39;a constraint &#39;a =3D [&lt; u ]<br>
&gt;<br>
&gt; module type S =3D sig<br>
&gt; =A0 val v : u t<br>
&gt; =A0 val f : &#39;a t -&gt; [`a] t<br>
&gt; end<br>
&gt;<br>
&gt; module I : S =3D struct<br>
&gt; =A0 let v =3D `a<br>
&gt; =A0 let f _ =3D v<br>
&gt; end<br>
&gt;<br>
&gt; At least now the interpreter doesn&#39;t complain. Many thanks !<br>
<br>
</div>This indeed works, but I&#39;m not sure of why you insist on defining=
 a<br>
constrained type. What is wrong with writing directly the following?<br>
<div class=3D"im"><br>
module type S =3D sig<br>
 =A0val v : u<br>
</div> =A0val f : [&lt; u] -&gt; [`a]<br>
end<br></blockquote><div>Well, nothing ! I&#39;m affraid I chose an inappro=
priate solution to an irrelevant problem. Initially i just wanted to be sur=
e my polymorphic type &#39;a t would not be used with funny tags in &#39;a =
(I mean tags that have nothing to do with t). But after all, there is (in m=
y case) no rationale for this. Second, types may be shorter to write :<br>

<br>val f : &#39;a t -&gt; int<br><br>instead of<br><br>val f : [&lt; u] t =
-&gt; int<br><br>or <br><br>val f : [&lt; My_type.u ] My_type.t -&gt; int<b=
r><br>if in another module. Well, now it&#39;s clearer for me it was not su=
ch a smart idea. Your proposal is simpler and more natural.<br>

<br><br></div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px s=
olid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
Constrained types have their uses, </blockquote><div>which are, in brief ? =
Now I can&#39;t see a typical use for closed polymorphic variant types (I m=
ean types of the form &#39;a t constraint &#39;a =3D [&lt; ... ])<br><br>

</div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid rgb=
(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">but I find =
them often confusing as<br>
the type variable you write is not really a type variable.<br></blockquote>=
<div>why isn&#39;t it the case ? Aren&#39;t they simply type variables rest=
ricted to a finite number of types ?<br><br>Anyway, thanks a lot for commen=
ting on my problem !<br>

<br>Philippe.<br><br><br><br><br>=A0</div><blockquote class=3D"gmail_quote"=
 style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.=
8ex; padding-left: 1ex;">
Question of taste.<br>
<font color=3D"#888888"><br>
Jacques Garrigue<br>
</font></blockquote></div><br>

--0016e64f5e8fc752da0486c8eb9d--

