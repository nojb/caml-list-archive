Return-Path: <toots@rastageeks.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 8337ABC57
	for <caml-list@yquem.inria.fr>; Tue, 25 May 2010 22:10:49 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: An4EAO/L+0vV+668gWdsb2JhbACSDIwgAQEWIiLBK4UTBINC
X-IronPort-AV: E=Sophos;i="4.53,299,1272837600"; 
   d="scan'208";a="63412886"
Received: from rastageeks.org (HELO mail.rastageeks.org) ([213.251.174.188])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 25 May 2010 22:10:49 +0200
Received: from leonard.localnet (unknown [129.81.170.252])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.rastageeks.org (Postfix) with ESMTPSA id 9B62A2DB39
	for <caml-list@yquem.inria.fr>; Tue, 25 May 2010 22:14:35 +0200 (CEST)
From: Romain Beauxis <toots@rastageeks.org>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Bigarrays and blocking_section..
Date: Tue, 25 May 2010 15:11:41 -0500
User-Agent: KMail/1.13.3 (Linux/2.6.30-2-amd64; KDE/4.4.3; x86_64; ; )
References: <201005251125.21755.toots@rastageeks.org> <AANLkTik8RlicxkdiITwEg8nejkx0X4yYl-bkXNq3TCFI@mail.gmail.com>
In-Reply-To: <AANLkTik8RlicxkdiITwEg8nejkx0X4yYl-bkXNq3TCFI@mail.gmail.com>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Message-Id: <201005251511.41565.toots@rastageeks.org>
X-Spam: no; 0.00; bigarrays:01 bigarray:01 struct:01 buffer:01 segfaults:01 28,:98 caml-list:01 caml:02 caml:02 blocking:04 size:95 size:95 correctly:04 problem:05 problem:05 

	Hi !

Le mardi 25 mai 2010 14:29:28, vous avez =E9crit :
> Are you sure that you correctly calculate the bigarray size in your
> Caml code? Why not just use struct caml_ba_array fields? I suspect
> it's not GC problem but just a buffer overrun in memset().

I'm pretty sure the size is not the problem. There may be another origin fo=
r=20
the segfaults, though, but I would like to know if my assumption that I can=
=20
release the global lock under the mentioned condition is correct..


Romain

