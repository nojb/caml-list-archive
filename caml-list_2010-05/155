Return-Path: <rabih.chaar@lyxor.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 6218BBBAF;
	Mon, 17 May 2010 17:14:20 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqsCABb68EvPLfmte2dsb2JhbACRQotMZBUBARYiBhyjbpgDhRAE
X-IronPort-AV: E=Sophos;i="4.53,247,1272837600"; 
   d="scan'208,217";a="51311520"
Received: from parmail02.sgcib.com ([207.45.249.173])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 17 May 2010 17:14:19 +0200
X-IronPort-AV: E=Sophos;i="4.53,247,1272837600"; 
   d="scan'208,217";a="67955970"
In-Reply-To: <AANLkTilqG13QE_3iAcxHXMD99aBZk6HYceKkfN0W2EVT@mail.gmail.com>
To: Thomas Braibant <thomas.braibant@gmail.com>
Subject: Re: [Caml-list] Phantom types [NC]
MIME-Version: 1.0
Cc: caml-list@yquem.inria.fr, caml-list-bounces@yquem.inria.fr
Message-ID: <OF9A537A71.F8B74C48-ONC1257726.00537D6A-C1257726.0053B4C5@fr.world.socgen>
From: Rabih CHAAR <rabih.chaar@lyxor.com>
Date: Mon, 17 May 2010 17:14:17 +0200
Content-Type: multipart/alternative; boundary="=_alternative 0053B4C3C1257726_="
X-Spam: no; 0.00; subtyping:01 acceleration:01 annotations:01 mult:01 multiplying:01 explicitely:01 annotations:01 constructors:01 runtime:01 acceleration:01 structurally:01 ocaml:01 subtypes:01 subtypes:01 structurally:01 

This is a multipart message in MIME format.
--=_alternative 0053B4C3C1257726_=
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="iso-8859-1"

if you define the intermediate type
type s=3D {l:float}
followed by
type 'a t =3D s
everything goes well

I am unable to give you an explanation about this (the need of the=20
intermediay type s). I hope someone can shed some light on this.

Sincerely




Thomas Braibant <thomas.braibant@gmail.com>=20
Sent by: caml-list-bounces@yquem.inria.fr
17/05/10 04:59 PM


To
caml-list@yquem.inria.fr
cc

Subject
[Caml-list] Phantom types






Hi list,

Following on the thread "Subtyping structurally-equivalent records, or
something like it?", I made some experimentations with phantom types.
Unfortunately, I turns out that I do not understand the results I got.

Could someone on the list explain why the first piece of code is well
typed, while the second one is not ?


type p1
type p2

type 'a t =3D float
let x : p1 t =3D 0.0
let id : p2 t -> p2 t =3D fun x -> x
let _ =3D id x (* type checks with type p2 t*)

type 'a t =3D {l: float}
let x : p1 t =3D {l =3D 0.0}
let id : p2 t -> p2 t =3D fun x -> x
let _ =3D id x (* ill typed *)

Any thoughts ?

thomas



2010/5/1 St=E9phane Lescuyer <stephane.lescuyer@inria.fr>:
> Hi Anthony,
> I think that maybe using phantom types could do the trick : consider
> defining empty types for all the different "kinds" of similar
> constructs that you have, and then define the kinematic record with a
> phantom parameter type.
>
> type position
> type acceleration
> type force
>
> type 'a kinematic =3D {lin : Vec.t; ang: Vec.t}
>
> By adding some extra typing annotations, you can then constraint your
> functions to accept (or produce) only a given kind of construct, say
> for example a position kinematic :
>
> let pos_0 : position kinematic =3D {lin =3D Vec.origin; ang =3D Vec.origi=
n }
>
> let double_force (v : force kinematic) : force kinematic =3D {lin =3D
> Vec.mult 2. v.lin; ang =3D v.ang }
>
> double_force pos_0 -> does not type check
>
> You can write generic functions as add, norm, products, etc : they are
> just polymorphic with respect to the phantom type parameter. By the
> way you ensure that you are not multiplying apples and carrots :
> let plus (v : 'a kinematic) (v' : 'a kinematic) : 'a kinematic =3D ...
>
> Of course, the overhead is that you have to explicitely write some
> type annotations, especially for constructors, but the runtime
> overhead is exactly 0. And also, one limitation is that you can't use
> different projection names for the different cosntructs, since it is
> really always the same record type that you are using.
>
> I hope this helps,
>
> St=E9phane L.
>
> On Sat, May 1, 2010 at 6:04 PM, Anthony Tavener
> <anthony.tavener@gmail.com> wrote:
>> I have this:
>>
>>   type kinematic =3D { lin: Vec.t; ang: Vec.t }
>>
>> Which I've been using to represent a medley of physical attributes=20
(force,
>> momentum, velocity, etc.).
>>
>> As the physics code becomes increasingly substantial I'm running into
>> possible human-error, like passing a momentum where a force is=20
expected, or
>> a mass instead of inverse-mass (mass is also a record though different,=20
but
>> inv-mass has the same structure as mass). So I'd like to make distinct
>> types, such as:
>>
>>   type position =3D { r: Vec.t; theta: Vec.t }
>>   type acceleration =3D { a: Vec.t; alpha: Vec.t }
>>   type force =3D { f: Vec.t; tau: Vec.t }
>>
>> They are structurally equivalent, and ideally I'd like to be able to=20
treat
>> these as 'kinematic' too, since that is how I would express the=20
arithmetic
>> and common functions on these types (add, mul, etc).
>>
>>
>> I'm sure I've seen posts on this before but I can't find them now=20
(though
>> what I remember are questions about having distinct 'float' types, such=20
as
>> for degrees vs radians, rather than records).
>>
>> I know OCaml doesn't have subtypes for records, which is effectively=20
what
>> I'm looking for. Though this case is a bit more specialized that=20
that... all
>> the subtypes and base type are structurally equivalent. Code for one of
>> these types would technically work on any... but is there a way to=20
inform
>> the type system of my intentions?
>>
>>
>> I hope someone has a better option than those I've considered, or that=20
I
>> have a grave misunderstanding somewhere and one of these options is=20
actually
>> good:
>>
>> 1. Objects. Subtyping makes these a natural fit, but in this case I=20
don't
>> need anything else which objects provide, and a certainly don't need=20
the
>> poor performance or method-calling mixed in with my computational code
>> (aesthetically... yucky, to me). Again, each type is structurally
>> equivalent. Just some functions want certain types.
>>
>> 2. Using distinct records for each type, but no 'kinematic' base type,=20
so
>> all common operations are duplicated for each new type. No performance=20
hit.
>> But the redundant code is horrible -- makes extensions a pain, and a
>> potential bug-source.
>>
>> 2b. Same as above, but putting the common code in a functor which we=20
apply
>> on all the different types. I think this will add some overhead, since=20
the
>> signature of the types (below) would demand accessor functions for the
>> record fields, in order to uniformly get the fields from the different=20
types
>> (again, even though they are structurally equivalent) -- these calls
>> probably wouldn't get optimized out. But maybe there is a better way to=20
do
>> this?
>>
>>   module type KINEMATIC =3D sig
>>     type t
>>     val lin : t -> Vec.t
>>     val ang : t -> Vec.t
>>   end
>>
>> 3. Making all the other types different aliases of 'kinematic'; then=20
using
>> explicit type declarations in function parameters and coercion to
>> 'kinematic' when needed. This makes some ugly code, and the=20
added-typesafety
>> is almost illusory. This is kind-of like 'typesafe' C code doing=20
typecasting
>> gymnastics.
>>
>> 4. Adapter functions: 'kinematic_of_force: force -> kinematic', etc. as=20
a
>> way to use the common set of 'kinematic' functions. This is clunky and=20
comes
>> with a big performance hit unless these functions became like
>> type-coercions. If there is a way this can be done with zero runtime=20
cost,
>> I'd accept the clunkiness. :)
>>
>> Any thoughts?
>>
>>
>> I've been using OCaml for a few years now, but this is my first post. I=20
feel
>> many of you are familiar online personae through reading archives,=20
blogs,
>> and websites. Thank-you for all the help I've absorbed through those=20
various
>> channels. And thanks to those making the language I favor for most=20
tasks!
>>
>> Briefly introducing myself: I've been a professional video-game=20
developer
>> for 15 years, most recently specializing in AI. I quit my last job=20
almost
>> two years ago to travel and program (95% in OCaml!), and am developing=20
a
>> game now. I've seen indications over the years of other game developers
>> taking the plunge and then parting ways with OCaml, surely back to C++.=20
I
>> see OCaml as viable and certainly more pleasurable, even with avoiding
>> mutation. But within a pressure-cooker environment (working for $$ from
>> someone else) people fall back on what they are most familiar with...=20
also
>> you can't go too rogue while still being part of a team. :)
>>
>> -Anthony Tavener
>>
>> _______________________________________________
>> Caml-list mailing list. Subscription management:
>> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>> Archives: http://caml.inria.fr
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>>
>
>
>
> --
> I'm the kind of guy that until it happens, I won't worry about it. -
> R.H. RoY05, MVP06
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

_______________________________________________
Caml-list mailing list. Subscription management:
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
Archives: http://caml.inria.fr
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
Bug reports: http://caml.inria.fr/bin/caml-bugs

*************************************************************************
This message and any attachments (the "message") are confidential, intended=
 solely for the addressee(s), and may contain legally privileged informatio=
n.
Any unauthorised use or dissemination is prohibited. E-mails are susceptibl=
e to alteration.  =20
Neither SOCIETE GENERALE nor any of its subsidiaries or affiliates shall be=
 liable for the message if altered, changed or
falsified.
                              ************
Ce message et toutes les pieces jointes (ci-apres le "message") sont confid=
entiels et susceptibles de contenir des informations couvertes=20
par le secret professionnel.=20
Ce message est etabli a l'intention exclusive de ses destinataires. Toute u=
tilisation ou diffusion non autorisee est interdite.
Tout message electronique est susceptible d'alteration.=20
La SOCIETE GENERALE et ses filiales declinent toute responsabilite au titre=
 de ce message s'il a ete altere, deforme ou falsifie.
*************************************************************************

--=_alternative 0053B4C3C1257726_=
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="iso-8859-1"


<br><font size=3D2 face=3D"sans-serif">if you define the intermediate type<=
/font>
<br><font size=3D2 face=3D"sans-serif">type s=3D {l:float}</font>
<br><font size=3D2 face=3D"sans-serif">followed by</font>
<br><font size=3D2 face=3D"sans-serif">type 'a t =3D s</font>
<br><font size=3D2 face=3D"sans-serif">everything goes well</font>
<br>
<br><font size=3D2 face=3D"sans-serif">I am unable to give you an explanati=
on
about this (the need of the intermediay type s). I hope someone can shed
some light on this.</font>
<br>
<br><font size=3D2 face=3D"sans-serif">Sincerely</font>
<br>
<br>
<br>
<br>
<table width=3D100%>
<tr valign=3Dtop>
<td width=3D40% rowspan=3D2><font size=3D1 face=3D"sans-serif"><b>Thomas Br=
aibant
&lt;thomas.braibant@gmail.com&gt;</b> </font>
<br><font size=3D1 face=3D"sans-serif">Sent by: caml-list-bounces@yquem.inr=
ia.fr</font>
<p><font size=3D1 face=3D"sans-serif">17/05/10 04:59 PM</font>
<td width=3D59%>
<tr valign=3Dtop>
<td>
<table width=3D100%>
<tr valign=3Dtop>
<td>
<div align=3Dright><font size=3D1 face=3D"sans-serif">To</font></div>
<td><font size=3D1 face=3D"sans-serif">caml-list@yquem.inria.fr</font>
<tr valign=3Dtop>
<td>
<div align=3Dright><font size=3D1 face=3D"sans-serif">cc</font></div>
<td>
<tr valign=3Dtop>
<td>
<div align=3Dright><font size=3D1 face=3D"sans-serif">Subject</font></div>
<td><font size=3D1 face=3D"sans-serif">[Caml-list] Phantom types</font></ta=
ble>
<br>
<table>
<tr valign=3Dtop>
<td>
<td></table>
<br></table>
<br>
<br>
<br><tt><font size=3D2>Hi list,<br>
<br>
Following on the thread &quot;Subtyping structurally-equivalent records,
or<br>
something like it?&quot;, I made some experimentations with phantom types.<=
br>
Unfortunately, I turns out that I do not understand the results I got.<br>
<br>
Could someone on the list explain why the first piece of code is well<br>
typed, while the second one is not ?<br>
<br>
<br>
type p1<br>
type p2<br>
<br>
type 'a t =3D float<br>
let x : p1 t =3D 0.0<br>
let id : p2 t -&gt; p2 t =3D fun x -&gt; x<br>
let _ =3D id x (* type checks with type p2 t*)<br>
<br>
type 'a t =3D {l: float}<br>
let x : p1 t =3D {l =3D 0.0}<br>
let id : p2 t -&gt; p2 t =3D fun x -&gt; x<br>
let _ =3D id x (* ill typed *)<br>
<br>
Any thoughts ?<br>
<br>
thomas<br>
<br>
<br>
<br>
2010/5/1 St=E9phane Lescuyer &lt;stephane.lescuyer@inria.fr&gt;:<br>
&gt; Hi Anthony,<br>
&gt; I think that maybe using phantom types could do the trick : consider<b=
r>
&gt; defining empty types for all the different &quot;kinds&quot; of simila=
r<br>
&gt; constructs that you have, and then define the kinematic record with
a<br>
&gt; phantom parameter type.<br>
&gt;<br>
&gt; type position<br>
&gt; type acceleration<br>
&gt; type force<br>
&gt;<br>
&gt; type 'a kinematic =3D {lin : Vec.t; ang: Vec.t}<br>
&gt;<br>
&gt; By adding some extra typing annotations, you can then constraint your<=
br>
&gt; functions to accept (or produce) only a given kind of construct, say<b=
r>
&gt; for example a position kinematic :<br>
&gt;<br>
&gt; let pos_0 : position kinematic =3D {lin =3D Vec.origin; ang =3D Vec.or=
igin
}<br>
&gt;<br>
&gt; let double_force (v : force kinematic) : force kinematic =3D {lin =3D<=
br>
&gt; Vec.mult 2. v.lin; ang =3D v.ang }<br>
&gt;<br>
&gt; double_force pos_0 -&gt; does not type check<br>
&gt;<br>
&gt; You can write generic functions as add, norm, products, etc : they
are<br>
&gt; just polymorphic with respect to the phantom type parameter. By the<br>
&gt; way you ensure that you are not multiplying apples and carrots :<br>
&gt; let plus (v : 'a kinematic) (v' : 'a kinematic) : 'a kinematic =3D ...=
<br>
&gt;<br>
&gt; Of course, the overhead is that you have to explicitely write some<br>
&gt; type annotations, especially for constructors, but the runtime<br>
&gt; overhead is exactly 0. And also, one limitation is that you can't
use<br>
&gt; different projection names for the different cosntructs, since it
is<br>
&gt; really always the same record type that you are using.<br>
&gt;<br>
&gt; I hope this helps,<br>
&gt;<br>
&gt; St=E9phane L.<br>
&gt;<br>
&gt; On Sat, May 1, 2010 at 6:04 PM, Anthony Tavener<br>
&gt; &lt;anthony.tavener@gmail.com&gt; wrote:<br>
&gt;&gt; I have this:<br>
&gt;&gt;<br>
&gt;&gt; &nbsp; type kinematic =3D { lin: Vec.t; ang: Vec.t }<br>
&gt;&gt;<br>
&gt;&gt; Which I've been using to represent a medley of physical attributes
(force,<br>
&gt;&gt; momentum, velocity, etc.).<br>
&gt;&gt;<br>
&gt;&gt; As the physics code becomes increasingly substantial I'm running
into<br>
&gt;&gt; possible human-error, like passing a momentum where a force is
expected, or<br>
&gt;&gt; a mass instead of inverse-mass (mass is also a record though diffe=
rent,
but<br>
&gt;&gt; inv-mass has the same structure as mass). So I'd like to make
distinct<br>
&gt;&gt; types, such as:<br>
&gt;&gt;<br>
&gt;&gt; &nbsp; type position =3D { r: Vec.t; theta: Vec.t }<br>
&gt;&gt; &nbsp; type acceleration =3D { a: Vec.t; alpha: Vec.t }<br>
&gt;&gt; &nbsp; type force =3D { f: Vec.t; tau: Vec.t }<br>
&gt;&gt;<br>
&gt;&gt; They are structurally equivalent, and ideally I'd like to be able
to treat<br>
&gt;&gt; these as 'kinematic' too, since that is how I would express the
arithmetic<br>
&gt;&gt; and common functions on these types (add, mul, etc).<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I'm sure I've seen posts on this before but I can't find them
now (though<br>
&gt;&gt; what I remember are questions about having distinct 'float' types,
such as<br>
&gt;&gt; for degrees vs radians, rather than records).<br>
&gt;&gt;<br>
&gt;&gt; I know OCaml doesn't have subtypes for records, which is effective=
ly
what<br>
&gt;&gt; I'm looking for. Though this case is a bit more specialized that
that... all<br>
&gt;&gt; the subtypes and base type are structurally equivalent. Code for
one of<br>
&gt;&gt; these types would technically work on any... but is there a way
to inform<br>
&gt;&gt; the type system of my intentions?<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I hope someone has a better option than those I've considered,
or that I<br>
&gt;&gt; have a grave misunderstanding somewhere and one of these options
is actually<br>
&gt;&gt; good:<br>
&gt;&gt;<br>
&gt;&gt; 1. Objects. Subtyping makes these a natural fit, but in this case
I don't<br>
&gt;&gt; need anything else which objects provide, and a certainly don't
need the<br>
&gt;&gt; poor performance or method-calling mixed in with my computational
code<br>
&gt;&gt; (aesthetically... yucky, to me). Again, each type is structurally<=
br>
&gt;&gt; equivalent. Just some functions want certain types.<br>
&gt;&gt;<br>
&gt;&gt; 2. Using distinct records for each type, but no 'kinematic' base
type, so<br>
&gt;&gt; all common operations are duplicated for each new type. No perform=
ance
hit.<br>
&gt;&gt; But the redundant code is horrible -- makes extensions a pain,
and a<br>
&gt;&gt; potential bug-source.<br>
&gt;&gt;<br>
&gt;&gt; 2b. Same as above, but putting the common code in a functor which
we apply<br>
&gt;&gt; on all the different types. I think this will add some overhead,
since the<br>
&gt;&gt; signature of the types (below) would demand accessor functions
for the<br>
&gt;&gt; record fields, in order to uniformly get the fields from the diffe=
rent
types<br>
&gt;&gt; (again, even though they are structurally equivalent) -- these
calls<br>
&gt;&gt; probably wouldn't get optimized out. But maybe there is a better
way to do<br>
&gt;&gt; this?<br>
&gt;&gt;<br>
&gt;&gt; &nbsp; module type KINEMATIC =3D sig<br>
&gt;&gt; &nbsp;&nbsp;&nbsp; type t<br>
&gt;&gt; &nbsp;&nbsp;&nbsp; val lin : t -&gt; Vec.t<br>
&gt;&gt; &nbsp;&nbsp;&nbsp; val ang : t -&gt; Vec.t<br>
&gt;&gt; &nbsp; end<br>
&gt;&gt;<br>
&gt;&gt; 3. Making all the other types different aliases of 'kinematic';
then using<br>
&gt;&gt; explicit type declarations in function parameters and coercion
to<br>
&gt;&gt; 'kinematic' when needed. This makes some ugly code, and the added-=
typesafety<br>
&gt;&gt; is almost illusory. This is kind-of like 'typesafe' C code doing
typecasting<br>
&gt;&gt; gymnastics.<br>
&gt;&gt;<br>
&gt;&gt; 4. Adapter functions: 'kinematic_of_force: force -&gt; kinematic',
etc. as a<br>
&gt;&gt; way to use the common set of 'kinematic' functions. This is clunky
and comes<br>
&gt;&gt; with a big performance hit unless these functions became like<br>
&gt;&gt; type-coercions. If there is a way this can be done with zero runti=
me
cost,<br>
&gt;&gt; I'd accept the clunkiness. :)<br>
&gt;&gt;<br>
&gt;&gt; Any thoughts?<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I've been using OCaml for a few years now, but this is my first
post. I feel<br>
&gt;&gt; many of you are familiar online personae through reading archives,
blogs,<br>
&gt;&gt; and websites. Thank-you for all the help I've absorbed through
those various<br>
&gt;&gt; channels. And thanks to those making the language I favor for
most tasks!<br>
&gt;&gt;<br>
&gt;&gt; Briefly introducing myself: I've been a professional video-game
developer<br>
&gt;&gt; for 15 years, most recently specializing in AI. I quit my last
job almost<br>
&gt;&gt; two years ago to travel and program (95% in OCaml!), and am develo=
ping
a<br>
&gt;&gt; game now. I've seen indications over the years of other game devel=
opers<br>
&gt;&gt; taking the plunge and then parting ways with OCaml, surely back
to C++. I<br>
&gt;&gt; see OCaml as viable and certainly more pleasurable, even with
avoiding<br>
&gt;&gt; mutation. But within a pressure-cooker environment (working for
$$ from<br>
&gt;&gt; someone else) people fall back on what they are most familiar
with... also<br>
&gt;&gt; you can't go too rogue while still being part of a team. :)<br>
&gt;&gt;<br>
&gt;&gt; -Anthony Tavener<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; Caml-list mailing list. Subscription management:<br>
&gt;&gt; http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list<br>
&gt;&gt; Archives: http://caml.inria.fr<br>
&gt;&gt; Beginner's list: http://groups.yahoo.com/group/ocaml_beginners<br>
&gt;&gt; Bug reports: http://caml.inria.fr/bin/caml-bugs<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; --<br>
&gt; I'm the kind of guy that until it happens, I won't worry about it.
-<br>
&gt; R.H. RoY05, MVP06<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; Caml-list mailing list. Subscription management:<br>
&gt; http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list<br>
&gt; Archives: http://caml.inria.fr<br>
&gt; Beginner's list: http://groups.yahoo.com/group/ocaml_beginners<br>
&gt; Bug reports: http://caml.inria.fr/bin/caml-bugs<br>
&gt;<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list<br>
Archives: http://caml.inria.fr<br>
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners<br>
Bug reports: http://caml.inria.fr/bin/caml-bugs<br>
</font></tt>
<br><pre>******************************************************************=
*******
This message and any attachments (the "message") are confidential, intended=
 solely for the addressee(s), and may contain legally privileged informatio=
n.
Any unauthorised use or dissemination is prohibited. E-mails are susceptibl=
e to alteration.  =20
Neither SOCIETE GENERALE nor any of its subsidiaries or affiliates shall be=
 liable for the message if altered, changed or
falsified.
                              ************
Ce message et toutes les pieces jointes (ci-apres le "message") sont confid=
entiels et susceptibles de contenir des informations couvertes=20
par le secret professionnel.=20
Ce message est etabli a l'intention exclusive de ses destinataires. Toute u=
tilisation ou diffusion non autorisee est interdite.
Tout message electronique est susceptible d'alteration.=20
La SOCIETE GENERALE et ses filiales declinent toute responsabilite au titre=
 de ce message s'il a ete altere, deforme ou falsifie.
*************************************************************************
</pre>
--=_alternative 0053B4C3C1257726_=--

