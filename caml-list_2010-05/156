Return-Path: <philippe.veber@googlemail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 48508BBAF;
	Mon, 17 May 2010 17:19:43 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av8DAE378EvRVaC0imdsb2JhbACRQowoCBUBAQETDBgirW8BBY4FAQSFEA
X-IronPort-AV: E=Sophos;i="4.53,247,1272837600"; 
   d="scan'208,217";a="51311834"
Received: from mail-gy0-f180.google.com ([209.85.160.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 17 May 2010 17:19:42 +0200
Received: by gyb13 with SMTP id 13so2088684gyb.39
        for <multiple recipients>; Mon, 17 May 2010 08:19:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:mime-version:received:in-reply-to
         :references:from:date:message-id:subject:to:cc:content-type;
        bh=uNGl/dn7IlrHufJIsSIo8bJhVzgYZauVReS0UMGucoY=;
        b=Anz2l4yYNGZ+YhXf31J5cz+K1OcX+HXCeEeZNSSPY8bfGTy3AzyqwPim7RLyvPeYkn
         9nx1h2CEBDHGYGxA/pP0zwn50kKbWp/F4FsGeIH8yFbwHYMhDWCMdzUGZA6CqRlnlbxv
         SC+EuwdsZ1INlQZIwOdn83+NiX+i70EZzm57c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        b=eje2mqFs+G83lCDbZl1jX3Zzi8+NZ1eBU/ibLnhcyNAgmKfFzSdsfIimmRN8iuYEQ5
         UbgWF+LByAMz7uFLnI/YNubm0zL8ov5t+4vk+vz/ztDO7+vKBnEgi6M4592bBYHH7N0D
         dF/NpB20EJoK3iYC+9M9ldkzGfzENHgyG0v7c=
Received: by 10.231.169.131 with SMTP id z3mr347705iby.48.1274109560362; Mon, 
	17 May 2010 08:19:20 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.231.119.163 with HTTP; Mon, 17 May 2010 08:19:00 -0700 (PDT)
In-Reply-To: <OF9A537A71.F8B74C48-ONC1257726.00537D6A-C1257726.0053B4C5@fr.world.socgen>
References: <AANLkTilqG13QE_3iAcxHXMD99aBZk6HYceKkfN0W2EVT@mail.gmail.com> 
	<OF9A537A71.F8B74C48-ONC1257726.00537D6A-C1257726.0053B4C5@fr.world.socgen>
From: Philippe Veber <philippe.veber@googlemail.com>
Date: Mon, 17 May 2010 17:19:00 +0200
Message-ID: <AANLkTimuQsTlGUVzXQxauW_NiaSe2NIQ1FcAlvQbo_AG@mail.gmail.com>
Subject: Re: [Caml-list] Phantom types [NC]
To: Rabih CHAAR <rabih.chaar@lyxor.com>
Cc: Thomas Braibant <thomas.braibant@gmail.com>,
	caml-list@yquem.inria.fr, caml-list-bounces@yquem.inria.fr
Content-Type: multipart/alternative; boundary=0016e6d27238c017930486cbbf2d
X-Spam: no; 0.00; typecheck:01 abbreviation:01 subtyping:01 acceleration:01 annotations:01 mult:01 multiplying:01 explicitely:01 annotations:01 constructors:01 runtime:01 acceleration:01 structurally:01 ocaml:01 subtypes:01 

--0016e6d27238c017930486cbbf2d
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

It seems that the expressions typecheck when t is a type abbreviation and
not a type definition. I don't know about the actual typing rules but this
would be reasonable, I guess.

Philippe.

2010/5/17 Rabih CHAAR <rabih.chaar@lyxor.com>

>
> if you define the intermediate type
> type s=3D {l:float}
> followed by
> type 'a t =3D s
> everything goes well
>
> I am unable to give you an explanation about this (the need of the
> intermediay type s). I hope someone can shed some light on this.
>
> Sincerely
>
>
>
>  *Thomas Braibant <thomas.braibant@gmail.com>*
> Sent by: caml-list-bounces@yquem.inria.fr
>
> 17/05/10 04:59 PM
>    To
> caml-list@yquem.inria.fr
> cc
>   Subject
> [Caml-list] Phantom types
>
>
>
>
> Hi list,
>
> Following on the thread "Subtyping structurally-equivalent records, or
> something like it?", I made some experimentations with phantom types.
> Unfortunately, I turns out that I do not understand the results I got.
>
> Could someone on the list explain why the first piece of code is well
> typed, while the second one is not ?
>
>
> type p1
> type p2
>
> type 'a t =3D float
> let x : p1 t =3D 0.0
> let id : p2 t -> p2 t =3D fun x -> x
> let _ =3D id x (* type checks with type p2 t*)
>
> type 'a t =3D {l: float}
> let x : p1 t =3D {l =3D 0.0}
> let id : p2 t -> p2 t =3D fun x -> x
> let _ =3D id x (* ill typed *)
>
> Any thoughts ?
>
> thomas
>
>
>
> 2010/5/1 St=E9phane Lescuyer <stephane.lescuyer@inria.fr>:
> > Hi Anthony,
> > I think that maybe using phantom types could do the trick : consider
> > defining empty types for all the different "kinds" of similar
> > constructs that you have, and then define the kinematic record with a
> > phantom parameter type.
> >
> > type position
> > type acceleration
> > type force
> >
> > type 'a kinematic =3D {lin : Vec.t; ang: Vec.t}
> >
> > By adding some extra typing annotations, you can then constraint your
> > functions to accept (or produce) only a given kind of construct, say
> > for example a position kinematic :
> >
> > let pos_0 : position kinematic =3D {lin =3D Vec.origin; ang =3D Vec.ori=
gin }
> >
> > let double_force (v : force kinematic) : force kinematic =3D {lin =3D
> > Vec.mult 2. v.lin; ang =3D v.ang }
> >
> > double_force pos_0 -> does not type check
> >
> > You can write generic functions as add, norm, products, etc : they are
> > just polymorphic with respect to the phantom type parameter. By the
> > way you ensure that you are not multiplying apples and carrots :
> > let plus (v : 'a kinematic) (v' : 'a kinematic) : 'a kinematic =3D ...
> >
> > Of course, the overhead is that you have to explicitely write some
> > type annotations, especially for constructors, but the runtime
> > overhead is exactly 0. And also, one limitation is that you can't use
> > different projection names for the different cosntructs, since it is
> > really always the same record type that you are using.
> >
> > I hope this helps,
> >
> > St=E9phane L.
> >
> > On Sat, May 1, 2010 at 6:04 PM, Anthony Tavener
> > <anthony.tavener@gmail.com> wrote:
> >> I have this:
> >>
> >>   type kinematic =3D { lin: Vec.t; ang: Vec.t }
> >>
> >> Which I've been using to represent a medley of physical attributes
> (force,
> >> momentum, velocity, etc.).
> >>
> >> As the physics code becomes increasingly substantial I'm running into
> >> possible human-error, like passing a momentum where a force is expecte=
d,
> or
> >> a mass instead of inverse-mass (mass is also a record though different=
,
> but
> >> inv-mass has the same structure as mass). So I'd like to make distinct
> >> types, such as:
> >>
> >>   type position =3D { r: Vec.t; theta: Vec.t }
> >>   type acceleration =3D { a: Vec.t; alpha: Vec.t }
> >>   type force =3D { f: Vec.t; tau: Vec.t }
> >>
> >> They are structurally equivalent, and ideally I'd like to be able to
> treat
> >> these as 'kinematic' too, since that is how I would express the
> arithmetic
> >> and common functions on these types (add, mul, etc).
> >>
> >>
> >> I'm sure I've seen posts on this before but I can't find them now
> (though
> >> what I remember are questions about having distinct 'float' types, suc=
h
> as
> >> for degrees vs radians, rather than records).
> >>
> >> I know OCaml doesn't have subtypes for records, which is effectively
> what
> >> I'm looking for. Though this case is a bit more specialized that that.=
..
> all
> >> the subtypes and base type are structurally equivalent. Code for one o=
f
> >> these types would technically work on any... but is there a way to
> inform
> >> the type system of my intentions?
> >>
> >>
> >> I hope someone has a better option than those I've considered, or that=
 I
> >> have a grave misunderstanding somewhere and one of these options is
> actually
> >> good:
> >>
> >> 1. Objects. Subtyping makes these a natural fit, but in this case I
> don't
> >> need anything else which objects provide, and a certainly don't need t=
he
> >> poor performance or method-calling mixed in with my computational code
> >> (aesthetically... yucky, to me). Again, each type is structurally
> >> equivalent. Just some functions want certain types.
> >>
> >> 2. Using distinct records for each type, but no 'kinematic' base type,
> so
> >> all common operations are duplicated for each new type. No performance
> hit.
> >> But the redundant code is horrible -- makes extensions a pain, and a
> >> potential bug-source.
> >>
> >> 2b. Same as above, but putting the common code in a functor which we
> apply
> >> on all the different types. I think this will add some overhead, since
> the
> >> signature of the types (below) would demand accessor functions for the
> >> record fields, in order to uniformly get the fields from the different
> types
> >> (again, even though they are structurally equivalent) -- these calls
> >> probably wouldn't get optimized out. But maybe there is a better way t=
o
> do
> >> this?
> >>
> >>   module type KINEMATIC =3D sig
> >>     type t
> >>     val lin : t -> Vec.t
> >>     val ang : t -> Vec.t
> >>   end
> >>
> >> 3. Making all the other types different aliases of 'kinematic'; then
> using
> >> explicit type declarations in function parameters and coercion to
> >> 'kinematic' when needed. This makes some ugly code, and the
> added-typesafety
> >> is almost illusory. This is kind-of like 'typesafe' C code doing
> typecasting
> >> gymnastics.
> >>
> >> 4. Adapter functions: 'kinematic_of_force: force -> kinematic', etc. a=
s
> a
> >> way to use the common set of 'kinematic' functions. This is clunky and
> comes
> >> with a big performance hit unless these functions became like
> >> type-coercions. If there is a way this can be done with zero runtime
> cost,
> >> I'd accept the clunkiness. :)
> >>
> >> Any thoughts?
> >>
> >>
> >> I've been using OCaml for a few years now, but this is my first post. =
I
> feel
> >> many of you are familiar online personae through reading archives,
> blogs,
> >> and websites. Thank-you for all the help I've absorbed through those
> various
> >> channels. And thanks to those making the language I favor for most
> tasks!
> >>
> >> Briefly introducing myself: I've been a professional video-game
> developer
> >> for 15 years, most recently specializing in AI. I quit my last job
> almost
> >> two years ago to travel and program (95% in OCaml!), and am developing=
 a
> >> game now. I've seen indications over the years of other game developer=
s
> >> taking the plunge and then parting ways with OCaml, surely back to C++=
.
> I
> >> see OCaml as viable and certainly more pleasurable, even with avoiding
> >> mutation. But within a pressure-cooker environment (working for $$ fro=
m
> >> someone else) people fall back on what they are most familiar with...
> also
> >> you can't go too rogue while still being part of a team. :)
> >>
> >> -Anthony Tavener
> >>
> >> _______________________________________________
> >> Caml-list mailing list. Subscription management:
> >> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> >> Archives: http://caml.inria.fr
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >>
> >
> >
> >
> > --
> > I'm the kind of guy that until it happens, I won't worry about it. -
> > R.H. RoY05, MVP06
> >
> > _______________________________________________
> > Caml-list mailing list. Subscription management:
> > http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> > Archives: http://caml.inria.fr
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
> *************************************************************************
> This message and any attachments (the "message") are confidential, intend=
ed solely for the addressee(s), and may contain legally privileged informat=
ion.
> Any unauthorised use or dissemination is prohibited. E-mails are suscepti=
ble to alteration.
> Neither SOCIETE GENERALE nor any of its subsidiaries or affiliates shall =
be liable for the message if altered, changed or
> falsified.
>                               ************
> Ce message et toutes les pieces jointes (ci-apres le "message") sont conf=
identiels et susceptibles de contenir des informations couvertes
> par le secret professionnel.
> Ce message est etabli a l'intention exclusive de ses destinataires. Toute=
 utilisation ou diffusion non autorisee est interdite.
> Tout message electronique est susceptible d'alteration.
> La SOCIETE GENERALE et ses filiales declinent toute responsabilite au tit=
re de ce message s'il a ete altere, deforme ou falsifie.
> *************************************************************************
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--0016e6d27238c017930486cbbf2d
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

It seems that the expressions typecheck when t is a type abbreviation and n=
ot a type definition. I don&#39;t know about the actual typing rules but th=
is would be reasonable, I guess.<br><br>Philippe.<br><br><div class=3D"gmai=
l_quote">

2010/5/17 Rabih CHAAR <span dir=3D"ltr">&lt;<a href=3D"mailto:rabih.chaar@l=
yxor.com">rabih.chaar@lyxor.com</a>&gt;</span><br><blockquote class=3D"gmai=
l_quote" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0p=
t 0pt 0.8ex; padding-left: 1ex;">


<br><font face=3D"sans-serif" size=3D"2">if you define the intermediate typ=
e</font>
<br><font face=3D"sans-serif" size=3D"2">type s=3D {l:float}</font>
<br><font face=3D"sans-serif" size=3D"2">followed by</font>
<br><font face=3D"sans-serif" size=3D"2">type &#39;a t =3D s</font>
<br><font face=3D"sans-serif" size=3D"2">everything goes well</font>
<br>
<br><font face=3D"sans-serif" size=3D"2">I am unable to give you an explana=
tion
about this (the need of the intermediay type s). I hope someone can shed
some light on this.</font>
<br>
<br><font face=3D"sans-serif" size=3D"2">Sincerely</font>
<br>
<br>
<br>
<br>
<table width=3D"100%">
<tbody><tr valign=3D"top">
<td rowspan=3D"2" width=3D"40%"><font face=3D"sans-serif" size=3D"1"><b>Tho=
mas Braibant
&lt;<a href=3D"mailto:thomas.braibant@gmail.com" target=3D"_blank">thomas.b=
raibant@gmail.com</a>&gt;</b> </font>
<br><font face=3D"sans-serif" size=3D"1">Sent by: <a href=3D"mailto:caml-li=
st-bounces@yquem.inria.fr" target=3D"_blank">caml-list-bounces@yquem.inria.=
fr</a></font>
<p><font face=3D"sans-serif" size=3D"1">17/05/10 04:59 PM</font>
</p></td><td width=3D"59%">
</td></tr><tr valign=3D"top">
<td>
<table width=3D"100%">
<tbody><tr valign=3D"top">
<td>
<div align=3D"right"><font face=3D"sans-serif" size=3D"1">To</font></div>
</td><td><font face=3D"sans-serif" size=3D"1"><a href=3D"mailto:caml-list@y=
quem.inria.fr" target=3D"_blank">caml-list@yquem.inria.fr</a></font>
</td></tr><tr valign=3D"top">
<td>
<div align=3D"right"><font face=3D"sans-serif" size=3D"1">cc</font></div>
</td><td>
</td></tr><tr valign=3D"top">
<td>
<div align=3D"right"><font face=3D"sans-serif" size=3D"1">Subject</font></d=
iv>
</td><td><font face=3D"sans-serif" size=3D"1">[Caml-list] Phantom types</fo=
nt></td></tr></tbody></table>
<br>
<table>
<tbody><tr valign=3D"top">
<td>
</td><td></td></tr></tbody></table>
<br></td></tr></tbody></table>
<br>
<br>
<br><tt><font size=3D"2">Hi list,<br>
<br>
Following on the thread &quot;Subtyping structurally-equivalent records,
or<br>
something like it?&quot;, I made some experimentations with phantom types.<=
br>
Unfortunately, I turns out that I do not understand the results I got.<br>
<br>
Could someone on the list explain why the first piece of code is well<br>
typed, while the second one is not ?<br>
<br>
<br>
type p1<br>
type p2<br>
<br>
type &#39;a t =3D float<br>
let x : p1 t =3D 0.0<br>
let id : p2 t -&gt; p2 t =3D fun x -&gt; x<br>
let _ =3D id x (* type checks with type p2 t*)<br>
<br>
type &#39;a t =3D {l: float}<br>
let x : p1 t =3D {l =3D 0.0}<br>
let id : p2 t -&gt; p2 t =3D fun x -&gt; x<br>
let _ =3D id x (* ill typed *)<br>
<br>
Any thoughts ?<br>
<br>
thomas<br>
<br>
<br>
<br>
2010/5/1 St=E9phane Lescuyer &lt;<a href=3D"mailto:stephane.lescuyer@inria.=
fr" target=3D"_blank">stephane.lescuyer@inria.fr</a>&gt;:<br>
&gt; Hi Anthony,<br>
&gt; I think that maybe using phantom types could do the trick : consider<b=
r>
&gt; defining empty types for all the different &quot;kinds&quot; of simila=
r<br>
&gt; constructs that you have, and then define the kinematic record with
a<br>
&gt; phantom parameter type.<br>
&gt;<br>
&gt; type position<br>
&gt; type acceleration<br>
&gt; type force<br>
&gt;<br>
&gt; type &#39;a kinematic =3D {lin : Vec.t; ang: Vec.t}<br>
&gt;<br>
&gt; By adding some extra typing annotations, you can then constraint your<=
br>
&gt; functions to accept (or produce) only a given kind of construct, say<b=
r>
&gt; for example a position kinematic :<br>
&gt;<br>
&gt; let pos_0 : position kinematic =3D {lin =3D Vec.origin; ang =3D Vec.or=
igin
}<br>
&gt;<br>
&gt; let double_force (v : force kinematic) : force kinematic =3D {lin =3D<=
br>
&gt; Vec.mult 2. v.lin; ang =3D v.ang }<br>
&gt;<br>
&gt; double_force pos_0 -&gt; does not type check<br>
&gt;<br>
&gt; You can write generic functions as add, norm, products, etc : they
are<br>
&gt; just polymorphic with respect to the phantom type parameter. By the<br=
>
&gt; way you ensure that you are not multiplying apples and carrots :<br>
&gt; let plus (v : &#39;a kinematic) (v&#39; : &#39;a kinematic) : &#39;a k=
inematic =3D ...<br>
&gt;<br>
&gt; Of course, the overhead is that you have to explicitely write some<br>
&gt; type annotations, especially for constructors, but the runtime<br>
&gt; overhead is exactly 0. And also, one limitation is that you can&#39;t
use<br>
&gt; different projection names for the different cosntructs, since it
is<br>
&gt; really always the same record type that you are using.<br>
&gt;<br>
&gt; I hope this helps,<br>
&gt;<br>
&gt; St=E9phane L.<br>
&gt;<br>
&gt; On Sat, May 1, 2010 at 6:04 PM, Anthony Tavener<br>
&gt; &lt;<a href=3D"mailto:anthony.tavener@gmail.com" target=3D"_blank">ant=
hony.tavener@gmail.com</a>&gt; wrote:<br>
&gt;&gt; I have this:<br>
&gt;&gt;<br>
&gt;&gt; =A0 type kinematic =3D { lin: Vec.t; ang: Vec.t }<br>
&gt;&gt;<br>
&gt;&gt; Which I&#39;ve been using to represent a medley of physical attrib=
utes
(force,<br>
&gt;&gt; momentum, velocity, etc.).<br>
&gt;&gt;<br>
&gt;&gt; As the physics code becomes increasingly substantial I&#39;m runni=
ng
into<br>
&gt;&gt; possible human-error, like passing a momentum where a force is
expected, or<br>
&gt;&gt; a mass instead of inverse-mass (mass is also a record though diffe=
rent,
but<br>
&gt;&gt; inv-mass has the same structure as mass). So I&#39;d like to make
distinct<br>
&gt;&gt; types, such as:<br>
&gt;&gt;<br>
&gt;&gt; =A0 type position =3D { r: Vec.t; theta: Vec.t }<br>
&gt;&gt; =A0 type acceleration =3D { a: Vec.t; alpha: Vec.t }<br>
&gt;&gt; =A0 type force =3D { f: Vec.t; tau: Vec.t }<br>
&gt;&gt;<br>
&gt;&gt; They are structurally equivalent, and ideally I&#39;d like to be a=
ble
to treat<br>
&gt;&gt; these as &#39;kinematic&#39; too, since that is how I would expres=
s the
arithmetic<br>
&gt;&gt; and common functions on these types (add, mul, etc).<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I&#39;m sure I&#39;ve seen posts on this before but I can&#39;t fi=
nd them
now (though<br>
&gt;&gt; what I remember are questions about having distinct &#39;float&#39=
; types,
such as<br>
&gt;&gt; for degrees vs radians, rather than records).<br>
&gt;&gt;<br>
&gt;&gt; I know OCaml doesn&#39;t have subtypes for records, which is effec=
tively
what<br>
&gt;&gt; I&#39;m looking for. Though this case is a bit more specialized th=
at
that... all<br>
&gt;&gt; the subtypes and base type are structurally equivalent. Code for
one of<br>
&gt;&gt; these types would technically work on any... but is there a way
to inform<br>
&gt;&gt; the type system of my intentions?<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I hope someone has a better option than those I&#39;ve considered,
or that I<br>
&gt;&gt; have a grave misunderstanding somewhere and one of these options
is actually<br>
&gt;&gt; good:<br>
&gt;&gt;<br>
&gt;&gt; 1. Objects. Subtyping makes these a natural fit, but in this case
I don&#39;t<br>
&gt;&gt; need anything else which objects provide, and a certainly don&#39;=
t
need the<br>
&gt;&gt; poor performance or method-calling mixed in with my computational
code<br>
&gt;&gt; (aesthetically... yucky, to me). Again, each type is structurally<=
br>
&gt;&gt; equivalent. Just some functions want certain types.<br>
&gt;&gt;<br>
&gt;&gt; 2. Using distinct records for each type, but no &#39;kinematic&#39=
; base
type, so<br>
&gt;&gt; all common operations are duplicated for each new type. No perform=
ance
hit.<br>
&gt;&gt; But the redundant code is horrible -- makes extensions a pain,
and a<br>
&gt;&gt; potential bug-source.<br>
&gt;&gt;<br>
&gt;&gt; 2b. Same as above, but putting the common code in a functor which
we apply<br>
&gt;&gt; on all the different types. I think this will add some overhead,
since the<br>
&gt;&gt; signature of the types (below) would demand accessor functions
for the<br>
&gt;&gt; record fields, in order to uniformly get the fields from the diffe=
rent
types<br>
&gt;&gt; (again, even though they are structurally equivalent) -- these
calls<br>
&gt;&gt; probably wouldn&#39;t get optimized out. But maybe there is a bett=
er
way to do<br>
&gt;&gt; this?<br>
&gt;&gt;<br>
&gt;&gt; =A0 module type KINEMATIC =3D sig<br>
&gt;&gt; =A0=A0=A0 type t<br>
&gt;&gt; =A0=A0=A0 val lin : t -&gt; Vec.t<br>
&gt;&gt; =A0=A0=A0 val ang : t -&gt; Vec.t<br>
&gt;&gt; =A0 end<br>
&gt;&gt;<br>
&gt;&gt; 3. Making all the other types different aliases of &#39;kinematic&=
#39;;
then using<br>
&gt;&gt; explicit type declarations in function parameters and coercion
to<br>
&gt;&gt; &#39;kinematic&#39; when needed. This makes some ugly code, and th=
e added-typesafety<br>
&gt;&gt; is almost illusory. This is kind-of like &#39;typesafe&#39; C code=
 doing
typecasting<br>
&gt;&gt; gymnastics.<br>
&gt;&gt;<br>
&gt;&gt; 4. Adapter functions: &#39;kinematic_of_force: force -&gt; kinemat=
ic&#39;,
etc. as a<br>
&gt;&gt; way to use the common set of &#39;kinematic&#39; functions. This i=
s clunky
and comes<br>
&gt;&gt; with a big performance hit unless these functions became like<br>
&gt;&gt; type-coercions. If there is a way this can be done with zero runti=
me
cost,<br>
&gt;&gt; I&#39;d accept the clunkiness. :)<br>
&gt;&gt;<br>
&gt;&gt; Any thoughts?<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I&#39;ve been using OCaml for a few years now, but this is my firs=
t
post. I feel<br>
&gt;&gt; many of you are familiar online personae through reading archives,
blogs,<br>
&gt;&gt; and websites. Thank-you for all the help I&#39;ve absorbed through
those various<br>
&gt;&gt; channels. And thanks to those making the language I favor for
most tasks!<br>
&gt;&gt;<br>
&gt;&gt; Briefly introducing myself: I&#39;ve been a professional video-gam=
e
developer<br>
&gt;&gt; for 15 years, most recently specializing in AI. I quit my last
job almost<br>
&gt;&gt; two years ago to travel and program (95% in OCaml!), and am develo=
ping
a<br>
&gt;&gt; game now. I&#39;ve seen indications over the years of other game d=
evelopers<br>
&gt;&gt; taking the plunge and then parting ways with OCaml, surely back
to C++. I<br>
&gt;&gt; see OCaml as viable and certainly more pleasurable, even with
avoiding<br>
&gt;&gt; mutation. But within a pressure-cooker environment (working for
$$ from<br>
&gt;&gt; someone else) people fall back on what they are most familiar
with... also<br>
&gt;&gt; you can&#39;t go too rogue while still being part of a team. :)<br=
>
&gt;&gt;<br>
&gt;&gt; -Anthony Tavener<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; Caml-list mailing list. Subscription management:<br>
&gt;&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-lis=
t" target=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-li=
st</a><br>
&gt;&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http:=
//caml.inria.fr</a><br>
&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocam=
l_beginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginner=
s</a><br>
&gt;&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=
=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; --<br>
&gt; I&#39;m the kind of guy that until it happens, I won&#39;t worry about=
 it.
-<br>
&gt; R.H. RoY05, MVP06<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; Caml-list mailing list. Subscription management:<br>
&gt; <a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" t=
arget=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</=
a><br>
&gt; Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://ca=
ml.inria.fr</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
&gt;<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</font></tt>
<br><pre>******************************************************************=
*******
This message and any attachments (the &quot;message&quot;) are confidential=
, intended solely for the addressee(s), and may contain legally privileged =
information.
Any unauthorised use or dissemination is prohibited. E-mails are susceptibl=
e to alteration.  =20
Neither SOCIETE GENERALE nor any of its subsidiaries or affiliates shall be=
 liable for the message if altered, changed or
falsified.
                              ************
Ce message et toutes les pieces jointes (ci-apres le &quot;message&quot;) s=
ont confidentiels et susceptibles de contenir des informations couvertes=20
par le secret professionnel.=20
Ce message est etabli a l&#39;intention exclusive de ses destinataires. Tou=
te utilisation ou diffusion non autorisee est interdite.
Tout message electronique est susceptible d&#39;alteration.=20
La SOCIETE GENERALE et ses filiales declinent toute responsabilite au titre=
 de ce message s&#39;il a ete altere, deforme ou falsifie.
*************************************************************************
</pre><br>_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target=
=3D"_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br=
>
Archives: <a href=3D"http://caml.inria.fr" target=3D"_blank">http://caml.in=
ria.fr</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br></blockquote></div><br>

--0016e6d27238c017930486cbbf2d--

