Return-Path: <dra-news@metastack.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id A4BA3BBAF
	for <caml-list@yquem.inria.fr>; Mon, 31 May 2010 19:24:33 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmsCAAeOA0xRZ90wkWdsb2JhbACeMxUBAQEBCQsKBxEDH8AghRYE
X-IronPort-AV: E=Sophos;i="4.53,334,1272837600"; 
   d="scan'208";a="52148735"
Received: from mtaout02-winn.ispmail.ntl.com ([81.103.221.48])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 31 May 2010 19:24:33 +0200
Received: from aamtaout02-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout02-winn.ispmail.ntl.com
          (InterMail vM.7.08.04.00 201-2186-134-20080326) with ESMTP
          id <20100531172431.ZNMB3192.mtaout02-winn.ispmail.ntl.com@aamtaout02-winn.ispmail.ntl.com>;
          Mon, 31 May 2010 18:24:31 +0100
Received: from romulus.metastack.com ([81.102.132.77])
          by aamtaout02-winn.ispmail.ntl.com
          (InterMail vG.2.02.00.01 201-2161-120-102-20060912) with ESMTP
          id <20100531172431.HYRF1586.aamtaout02-winn.ispmail.ntl.com@romulus.metastack.com>;
          Mon, 31 May 2010 18:24:31 +0100
Received: from Tenor ([172.16.0.8])
	(authenticated bits=0)
	by romulus.metastack.com (8.14.2/8.14.2) with ESMTP id o4VHOQUH012569
	(version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO);
	Mon, 31 May 2010 18:24:28 +0100
From: "David Allsopp" <dra-news@metastack.com>
To: "'Goswin von Brederlow'" <goswin-v-b@web.de>,
	"'Richard Jones'" <rich@annexia.org>
Cc: <caml-list@inria.fr>
References: <AANLkTimsqfR_SUiytZa_I74_858lm51tbzpCqR1SHCrp@mail.gmail.com>	<20100527170122.GA28273@annexia.org> <87y6f0cf4p.fsf@frosties.localdomain>
In-Reply-To: <87y6f0cf4p.fsf@frosties.localdomain>
Subject: RE: [Caml-list] Static exception analysis or alternative to using	exceptions
Date: Mon, 31 May 2010 18:24:28 +0100
Message-ID: <002c01cb00e6$20bfcd30$623f6790$@romulus.metastack.com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Outlook 14.0
thread-index: AQLN/ZnpRZJbIlc1+3otFcfAZdIpzAKcSa79Ajjnp/kBPNfzYw==
Content-Language: en-gb
Organization: MetaStack Solutions Ltd.
X-Scanned-By: MIMEDefang 2.65 on 81.102.132.77
X-Cloudmark-Analysis: v=1.1 cv=1ggfb5FlKZQUfF3vzm9UBYZ2uTfLsbs/8dSljwg5+mE= c=1 sm=0 a=TkWsxXdVWLYA:10 a=Lw_SFsgOoS4A:10 a=8sW17jYxVu0A:10 a=kj9zAlcOel0A:10 a=eyp7H1pdOuFKantkhncA:9 a=PnuJ7GJ05JjBb9enHJisRddJyUgA:4 a=CjuIK1q_8ugA:10 a=HpAAvcLHHh0Zw7uRqdWCyQ==:117
X-Spam: no; 0.00; ocaml:01 lacks:01 impl:01 'open:01 'open:01 val:01 val:01 ocamlexc:01 ocaml:01 compiler:01 wrote:01 exception:01 exception:01 caml-list:01 exceptions:01 

Goswin von Brederlow wrote:
<snip>
> > However if the exception is, say, an I/O error reading a disk file,
> > these should be thrown, and caught somewhere central where you can
> > display an error message to the user (for GUI programs) or abort the
> > current transaction (for server programs).  Recovering from such
> > exceptions properly is still tricky though.  Since OCaml lacks
> > 'finally', you either have to use a 'finally' impl from a library, or
> > modify your code to not need it (eg. turning calls to 'open_in' and
> > 'open_out' into a kind of continuation-passing style).  Or for small
> > programs, abort the program and don't deal with recovery at all.
> >
> > All in all, this is not ideal for writing correct programs.  Some sort
> > of exception analysis would be most welcome.
> 
> It would be nice if the possible exceptions of a function would be part of
> the type. E.g.
> 
> let f1 () = raise Not_found
> val f1 : unit -> 'a [ Not_found ]
> 
> let f2 () = try f1 () with Not_found -> () val f2 : unit -> unit
> 
> let f3 f = try f () with Not_found -> () val f3: (unit -> 'a [< Not_found
> | 'B ]) -> 'a [ 'B ]
> 
> and so on.
> 
> 
> Someone would have to write a new type system for that though.

Would it be more practical to have that analysis as part of the .annot file?
Presumably a patch which merged and updated the codebase of ocamlexc to
produce exception-annotations in that manner might have a chance of making
it into the OCaml compiler itself. I'm guessing that what you're getting at
is the ability to see from your code that an exception could escape at any
given point rather than trying to add Java-style "checked exceptions" to
OCaml?


David

