Return-Path: <jocelyn.serot@uca.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id DF8B67F30F
	for <caml-list@sympa.inria.fr>; Tue, 21 Jan 2020 14:04:15 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=jocelyn.serot@uca.fr; spf=Pass smtp.mailfrom=jocelyn.serot@uca.fr; spf=None smtp.helo=postmaster@mta02.udamail.fr
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jocelyn.serot@uca.fr) identity=pra; client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="jocelyn.serot@uca.fr";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  jocelyn.serot@uca.fr designates 193.49.117.21 as permitted
  sender) identity=mailfrom; client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="jocelyn.serot@uca.fr";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mta02.udamail.fr) identity=helo;
  client-ip=193.49.117.21;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="postmaster@mta02.udamail.fr";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AsA7FHxexT12rX+qpC0ZgMhULlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW7Yx7h7PlgxGXEQZ/co6odzbaP7+a5CSdcv97B6ClELMUXEUddyI?=
 =?us-ascii?q?0/pE8JOIa9E0r1LfrnPWQRPf9pcxtbxUy9KlVfA83kZlff8TWY5D8WHQjjZ0Iu?=
 =?us-ascii?q?frymUoHdgN6q2O+s5pbdfxtHhCanYbN1MR66sRjdutMZjId/Jas90AbFr3hHd+?=
 =?us-ascii?q?lZxG5jOFafkwrh6suq85Nv7ipdt+g9+8JcVKnxYrg1Q6FfADk6KW4++dfltQPE?=
 =?us-ascii?q?TQuB53scVnsZnx9VCAXb7x/0Q4n8vDLiuuVyxCeVM8v2TaspWTu59KdkVAXoiC?=
 =?us-ascii?q?YcODEn9mzcl9F9g7haoBKloBx/3pLUbYSIP/dwYq/RYdUXTndaU81PSyJOHJ+z?=
 =?us-ascii?q?b4oXD+oAI+lYqZX9p0ATphe6HAWgGf/jxiNNinLw2qI0zvkhERre3AM+A90OrH?=
 =?us-ascii?q?rarNLwNKgIUOC1yrTDwTHMYv5S3Dvw7pXDfBI8rvGWRb9+cdbex0ogGA3YgFuQ?=
 =?us-ascii?q?p5LrMDGS2OkWqWeX8+9gWPivi2I7qQx8pCWkyMc2ionOg4IY0lTK9SJlz4krId?=
 =?us-ascii?q?25SEh7bsa5HpxKrSGaMJd2Sd4lTmFqvyY11qMJuZq7fSgM0pgn3ADQa+aAc4iU?=
 =?us-ascii?q?+R/jSfqeLi1iiHJrYrKynhC/+lWuxO37U8m7yldKrixdn9nDsXAN0BPT6syZRf?=
 =?us-ascii?q?dn4kih3jOP2xjc6uFFPUA0lbfbJIU7zrEskZoTtELOFTL1lkXulKKaa0Ep9+ay?=
 =?us-ascii?q?5+noZrjqvIKQO5J2hw3kLKgih9SzDOc7PwQUQmSX5+ux2Kfg8EHjQLhHivs7mb?=
 =?us-ascii?q?TDvp/AP8QUvKu5DhdV0ok97xa/CC+r0NEEnXYdMF5JZgiLj5X0NF7UJfD3F/a/?=
 =?us-ascii?q?g1C2nDdl3fDKJrzhApPTIXjfiLrtYLJw5kBGxAc8yd1T/Y9YBqwDLf7pREP9qc?=
 =?us-ascii?q?TUDhojPAy1x+bnBs991oQbWW+XAK+ZN7/dvkGM5uMvJemAfpQVtyjnK/gi+/7j?=
 =?us-ascii?q?lmI5lkMHcqWz05sXcmi0Hu56LEWBfXrsntABHH8WsQUkSezqjESOUTpSZ3apQ6?=
 =?us-ascii?q?Ix/So7CYKjDYfbXI+hmr2B3CGhHp1XfG9KEF6MEW27P7mDDtAnYQe2aupokzgF?=
 =?us-ascii?q?U7fpb446yVn6vwb/z/9jL/HI0iwer5PqktZvsb79jxY3oB5zBMmZwme6dOBumX?=
 =?us-ascii?q?9AEz0x1617sEo70VqZ1rRQnvdRU9JJsaAaGjwmPILRmrQpQ+v5XRjMK5LUEQ/7?=
 =?us-ascii?q?EOXjOik4S5cK+/FLY0t5HIzy3BXf1nLwRaIZnrmCBZhy/LiOhyGgdfY48G7P0e?=
 =?us-ascii?q?wat3djR8JOMWO8gasvpRXYDsjHiRfAzvr4ReEnxCfIsVy74y+WpkgIAhN7WOPL?=
 =?us-ascii?q?RyJHaw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CjDgBn9iZehxV1McFlHgELHIUQA1MxK?=
 =?us-ascii?q?oQSiQOGFIIRg26WcgNUCQEDAQwjDAEBhEACghIcBwEENBMCEAEBBAEBAQIBAgM?=
 =?us-ascii?q?EARMBAQEKCwkIKYU+DII7KYJ7AQICASMEGQEBOAQLC0ICAlcGE4MmAYJbJAEKr?=
 =?us-ascii?q?TN/M4J/AQEFgkSDa3sDBoE4jBSCGoE4IIJMPoJkAgKCDoJjMoIKIqAkjzIHgUF?=
 =?us-ascii?q?7hz2PD4JHjCcni2KEX5JgjniDVYExOEwNgSF0TCoBgkE+EhgNiAEMDgmDUIE+i?=
 =?us-ascii?q?RZBATECjg8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0CjDgBn9iZehxV1McFlHgELHIUQA1MxKoQSiQOGFIIRg26?=
 =?us-ascii?q?WcgNUCQEDAQwjDAEBhEACghIcBwEENBMCEAEBBAEBAQIBAgMEARMBAQEKCwkIK?=
 =?us-ascii?q?YU+DII7KYJ7AQICASMEGQEBOAQLC0ICAlcGE4MmAYJbJAEKrTN/M4J/AQEFgkS?=
 =?us-ascii?q?Da3sDBoE4jBSCGoE4IIJMPoJkAgKCDoJjMoIKIqAkjzIHgUF7hz2PD4JHjCcni?=
 =?us-ascii?q?2KEX5JgjniDVYExOEwNgSF0TCoBgkE+EhgNiAEMDgmDUIE+iRZBATECjg8BAQ?=
X-IronPort-AV: E=Sophos;i="5.70,346,1574118000"; 
   d="scan'208,217";a="432380341"
X-MGA-submission: =?us-ascii?q?MDENBKuFQ8ZcURyfEXhRQgjB/u4CcfKlCnoTJd?=
 =?us-ascii?q?DyLKw1HPSOmXsqz6DilVXMwGRya7qiQNnMqkJnk0tj3gUjRPasGluwKF?=
 =?us-ascii?q?zuPLzd/HNOdRfQvOFoLPAN23WWtZWTRHxQlZjK7h9hPL+FeFchlzKMfR?=
 =?us-ascii?q?IcCpX7f0q6XXAdodWgYuc20g=3D=3D?=
Received: from mta02.udamail.fr ([193.49.117.21])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Jan 2020 14:03:34 +0100
Received: from mta02.udamail.fr (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTPS id 4827yF6z1PzBsDv
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:33 +0100 (CET)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTP id 4827yF6JkJzBsDr
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:33 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.10.3 mta02.udamail.fr 4827yF6JkJzBsDr
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=uca.fr;
	s=72FD7F0C-5358-11E8-A3B7-17E0B3BFED1B; t=1579611813;
	bh=kMiAGtTsV/kFLTDwlILWecO9QoEExcNb7cGybnhgTHg=;
	h=From:Message-Id:Mime-Version:Date:To;
	b=EAZroQ0EFhnIz2lXt4dJXX272TdxSml+9Q1DiKsxYBObxbYri0AAdkrKVfqB8M5uA
	 OHVhnm4iaU9i+DouNMM4y3xqPZ0Lw5k3cYU9ki2puQ0TNEsc/7295QJ6DqR2+eLQF1
	 fSZ8W6xp4acgaDD5e9V0hDIQ5eVjycjkEto7pglc=
X-Virus-Scanned: amavisd-new at mta02.udamail.fr
Received: from mta02.udamail.fr ([127.0.0.1])
	by localhost (mta02.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id UxKtuSBbGmEq for <caml-list@inria.fr>;
	Tue, 21 Jan 2020 14:03:33 +0100 (CET)
Received: from proxy01.udamail.fr (unknown [193.49.117.26])
	by mta02.udamail.fr (Postfix) with ESMTPS id 4827yF5YpmzBsDw
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:33 +0100 (CET)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy01.udamail.fr (Postfix) with ESMTP id 4827yF50nmzBnBY
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:33 +0100 (CET)
Received: from proxy01.udamail.fr ([127.0.0.1])
	by localhost (proxy01.udamail.fr [127.0.0.1]) (amavisd-new, port 10032)
	with ESMTP id 55aXV6JrlZwJ for <caml-list@inria.fr>;
	Tue, 21 Jan 2020 14:03:29 +0100 (CET)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy01.udamail.fr (Postfix) with ESMTP id 4827y91vkLzBnBw
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:29 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.10.3 proxy01.udamail.fr 4827y91vkLzBnBw
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=uca.fr;
	s=72FD7F0C-5358-11E8-A3B7-17E0B3BFED1B; t=1579611809;
	bh=kMiAGtTsV/kFLTDwlILWecO9QoEExcNb7cGybnhgTHg=;
	h=From:Message-Id:Mime-Version:Date:To;
	b=WSG9RiwohhwvFbDSXanuVbUhOrsKowIysPX+3Cq0PcZAvixkF7x/SvsBpSp7Zc0/n
	 6rWeuCf3dGJjvaUDwP0mwkebh0DCHYyKun7Rq9BsV86JLzYuMRXD6+oOeUy8eGU7c3
	 aIDm6dAzDrGXiBL/OiGKqhbIjVaIcjCJxpq4Hi5E=
X-Virus-Scanned: amavisd-new at proxy01.udamail.fr
Received: from proxy01.udamail.fr ([127.0.0.1])
	by localhost (proxy01.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id 4P1BzCs-EOgH for <caml-list@inria.fr>;
	Tue, 21 Jan 2020 14:03:29 +0100 (CET)
Received: from [192.168.0.38] (unknown [88.124.8.59])
	by proxy01.udamail.fr (Postfix) with ESMTPSA id 4827y872XZzBnBY
	for <caml-list@inria.fr>; Tue, 21 Jan 2020 14:03:28 +0100 (CET)
From: =?utf-8?Q?Jocelyn_S=C3=A9rot?= <jocelyn.serot@uca.fr>
Content-Type: multipart/alternative; boundary="Apple-Mail=_7E2E5324-196F-4652-8855-CF98FA98C009"
Message-Id: <D324C400-AE96-45D8-B9AF-D025FD73B9C7@uca.fr>
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2104\))
Date: Tue, 21 Jan 2020 14:03:28 +0100
References: <20200121064845.GM27889@rich.annexia.org>
To: OCaML Mailing List <caml-list@inria.fr>
In-Reply-To: <20200121064845.GM27889@rich.annexia.org>
X-Mailer: Apple Mail (2.2104)
Subject: Re: [Caml-list] Implementing include "file" statement in menhir


--Apple-Mail=_7E2E5324-196F-4652-8855-CF98FA98C009
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Hi,

I had implemented a include mechanisms at the lexer level using ocamllex fo=
r the Caph programming language.
This is here (undocumented unfortunately) (related stuff starts at line 128=
):

https://github.com/jserot/caph/blob/master/compiler/lexer.mll <https://gith=
ub.com/jserot/caph/blob/master/compiler/lexer.mll>

Just in case it can help.


Jocelyn

> Le 21 janv. 2020 =C3=A0 07:48, Richard W.M. Jones <rich@annexia.org> a =
=C3=A9crit :
>=20
> [Resend, apologies if you get this twice, but I sent it
> earlier and that seems to have disappeared.]
>=20
> I'm writing a parser which needs to have a C-like include directive.
> There's an old thread on this describing a rather complicated way to
> do this for ocamllex:
> https://groups.google.com/forum/#!topic/fa.caml/_v_k4WTQV_Q
>=20
> I thought I'd have a go at writing an include statement in menhir, and
> I did come up with something which works but it's quite a large hack.
> What I did is documented below, but I wonder if someone can think of a
> simpler way to do this?  Also two related questions:
>=20
> How do you pass extra parameters to menhir's generated parser
> functions?
>=20
> Is there a nice way to export values into menhir's generated
> parser.mli file?
>=20
> ----
>=20
> The concept behind my include statement uses the following grammar:
>=20
>  %token INCLUDE
>  %token <string> STRING
>  %start file
>  %%
>  file: list(stmt) ;
>=20
>  stmt:
>      | INCLUDE STRING
>      {
>        let filename =3D $2 in
>        let fp =3D open_in filename in
>        let lexbuf =3D Lexing.from_channel fp in
>        lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname =3D filena=
me };
> 	(* Recursively call Parser.file: *)
>        file Lexer.read lexbuf;
>        close_in fp;
>      }
>      | ... other statements ...
>      ;
>=20
>=20
> Unfortunately as written the above code cannot work because it
> introduces a circular dependency between the Parser and the Lexer
> modules (normally the Lexer module depends on the Parser, and so the
> Parser cannot use any functions from the Lexer module).
>=20
> To break the cycle we have to add:
>=20
>  %{
>  let lexer_read =3D ref None
>  %}
>=20
> and replace Lexer.read with:
>=20
>  let reader =3D
>     match !lexer_read with None -> assert false | Some r -> r in
>  file reader lexbuf;
>=20
> Then to initialize lexer_read, we have to export it by doing this
> hack:
>=20
>  menhir parser.mly
>  echo 'val lexer_read : (Lexing.lexbuf -> token) option ref' >> parser.mli
>=20
> and we can set it from the main program.
>=20
> Rich.


--Apple-Mail=_7E2E5324-196F-4652-8855-CF98FA98C009
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dutf-8"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: s=
pace; -webkit-line-break: after-white-space;" class=3D"">Hi,<div class=3D""=
><br class=3D""></div><div class=3D"">I had implemented a include mechanism=
s at the lexer&nbsp;level using ocamllex for the Caph programming language.=
</div><div class=3D"">This is here (undocumented unfortunately) (related st=
uff starts at line 128):</div><div class=3D""><br class=3D""></div><div cla=
ss=3D""><a href=3D"https://github.com/jserot/caph/blob/master/compiler/lexe=
r.mll" class=3D"">https://github.com/jserot/caph/blob/master/compiler/lexer=
.mll</a></div><div class=3D""><br class=3D""></div><div class=3D"">Just in =
case it can help.</div><div class=3D""><br class=3D""></div><div class=3D""=
><br class=3D""></div><div class=3D"">Jocelyn</div><div class=3D""><br clas=
s=3D""><div><blockquote type=3D"cite" class=3D""><div class=3D"">Le 21 janv=
. 2020 =C3=A0 07:48, Richard W.M. Jones &lt;<a href=3D"mailto:rich@annexia.=
org" class=3D"">rich@annexia.org</a>&gt; a =C3=A9crit :</div><br class=3D"A=
pple-interchange-newline"><div class=3D"">[Resend, apologies if you get thi=
s twice, but I sent it<br class=3D"">earlier and that seems to have disappe=
ared.]<br class=3D""><br class=3D"">I'm writing a parser which needs to hav=
e a C-like include directive.<br class=3D"">There's an old thread on this d=
escribing a rather complicated way to<br class=3D"">do this for ocamllex:<b=
r class=3D""><a href=3D"https://groups.google.com/forum/#!topic/fa.caml/_v_=
k4WTQV_Q" class=3D"">https://groups.google.com/forum/#!topic/fa.caml/_v_k4W=
TQV_Q</a><br class=3D""><br class=3D"">I thought I'd have a go at writing a=
n include statement in menhir, and<br class=3D"">I did come up with somethi=
ng which works but it's quite a large hack.<br class=3D"">What I did is doc=
umented below, but I wonder if someone can think of a<br class=3D"">simpler=
 way to do this? &nbsp;Also two related questions:<br class=3D""><br class=
=3D"">How do you pass extra parameters to menhir's generated parser<br clas=
s=3D"">functions?<br class=3D""><br class=3D"">Is there a nice way to expor=
t values into menhir's generated<br class=3D"">parser.mli file?<br class=3D=
""><br class=3D"">----<br class=3D""><br class=3D"">The concept behind my i=
nclude statement uses the following grammar:<br class=3D""><br class=3D""> =
&nbsp;%token INCLUDE<br class=3D""> &nbsp;%token &lt;string&gt; STRING<br c=
lass=3D""> &nbsp;%start file<br class=3D""> &nbsp;%%<br class=3D""> &nbsp;f=
ile: list(stmt) ;<br class=3D""><br class=3D""> &nbsp;stmt:<br class=3D""> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| INCLUDE STRING<br class=3D""> &nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;{<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;let filename =3D $2 in<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;let fp =3D open_in filename in<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;let lexbuf =3D Lexing.from_channel fp in<br class=3D""> =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lexbuf.lex_curr_p &lt;- { lexbuf.=
lex_curr_p with pos_fname =3D filename };<br class=3D""><span class=3D"Appl=
e-tab-span" style=3D"white-space:pre">	</span>(* Recursively call Parser.fi=
le: *)<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file Lexer.=
read lexbuf;<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close=
_in fp;<br class=3D""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br class=3D""> &nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;| ... other statements ...<br class=3D""> &nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;;<br class=3D""><br class=3D""><br class=3D"">Unfortu=
nately as written the above code cannot work because it<br class=3D"">intro=
duces a circular dependency between the Parser and the Lexer<br class=3D"">=
modules (normally the Lexer module depends on the Parser, and so the<br cla=
ss=3D"">Parser cannot use any functions from the Lexer module).<br class=3D=
""><br class=3D"">To break the cycle we have to add:<br class=3D""><br clas=
s=3D""> &nbsp;%{<br class=3D""> &nbsp;let lexer_read =3D ref None<br class=
=3D""> &nbsp;%}<br class=3D""><br class=3D"">and replace Lexer.read with:<b=
r class=3D""><br class=3D""> &nbsp;let reader =3D<br class=3D""> &nbsp;&nbs=
p;&nbsp;&nbsp;match !lexer_read with None -&gt; assert false | Some r -&gt;=
 r in<br class=3D""> &nbsp;file reader lexbuf;<br class=3D""><br class=3D""=
>Then to initialize lexer_read, we have to export it by doing this<br class=
=3D"">hack:<br class=3D""><br class=3D""> &nbsp;menhir parser.mly<br class=
=3D""> &nbsp;echo 'val lexer_read : (Lexing.lexbuf -&gt; token) option ref'=
 &gt;&gt; parser.mli<br class=3D""><br class=3D"">and we can set it from th=
e main program.<br class=3D""><br class=3D"">Rich.<br class=3D""></div></bl=
ockquote></div><br class=3D""></div></body></html>=

--Apple-Mail=_7E2E5324-196F-4652-8855-CF98FA98C009--
