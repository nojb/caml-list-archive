Return-Path: <alan.schmitt@polytechnique.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id ED7F07F345
	for <caml-list@sympa.inria.fr>; Tue, 28 Jan 2020 11:54:00 +0100 (CET)
X-IronPort-AV: E=Sophos;i="5.70,373,1574118000"; 
   d="scan'208,217";a="337256901"
Received: from set.irisa.fr (HELO set) ([131.254.10.170])
  by mail3-relais-sop.national.inria.fr with ESMTP/TLS/AES256-GCM-SHA384; 28 Jan 2020 11:53:59 +0100
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr, comp@lists.orbitalfox.eu
Date: Tue, 28 Jan 2020 11:53:58 +0100
Message-ID: <877e1brgvt.fsf@polytechnique.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64

SGVsbG8NCg0KSGVyZSBpcyB0aGUgbGF0ZXN0IE9DYW1sIFdlZWtseSBOZXdz
LCBmb3IgdGhlIHdlZWsgb2YgSmFudWFyeSAyMSB0byAyOCwNCjIwMjAuDQoN
ClRhYmxlIG9mIENvbnRlbnRzDQrilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIANCg0KTmV3IHJlbGVhc2Ugb2Yg
TWVuaGlyICgyMDIwMDEyMykNCk9jYW1sIGNyb3NzIGNvbXBpbGVyPw0KVHdv
IG1hc3RlciBpbnRlcm5zaGlwIHByb3Bvc2FscyB0byBleHBsb3JlIHNvY2lh
bCBhbmQgdGVjaG5pY2FsIGFzcGVjdHMgb2YgdGhlIGNyZWF0aW9uIG9mIHRo
ZSBPQ2FtbCBhbmQgQ29xIHBsYXRmb3Jtcw0KUHJvcGVyIHdheSB0byBhbGxv
Y2F0ZSBhbiBPQ2FtbCBzdHJpbmcgZnJvbSBDIGNvZGUgaW4gT0NhbWwgNC4x
MD8NCk9DYW1sIDQuMTAuMCwgc2Vjb25kIGJldGENCk9sZCBDV04NCg0KDQpO
ZXcgcmVsZWFzZSBvZiBNZW5oaXIgKDIwMjAwMTIzKQ0K4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQDQoNCiAg
QXJjaGl2ZToNCiAgPGh0dHBzOi8vc3ltcGEuaW5yaWEuZnIvc3ltcGEvYXJj
L2NhbWwtbGlzdC8yMDIwLTAxL21zZzAwMDQwLmh0bWw+DQoNCg0KRnJhbsOn
b2lzIFBvdHRpZXIgYW5ub3VuY2VkDQrilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIANCg0KICBJdCBpcyBteSBwbGVhc3VyZSB0byBhbm5vdW5j
ZSBhIG5ldyByZWxlYXNlIG9mIE1lbmhpciwgdGhlIExSKDEpDQogIHBhcnNl
ciBnZW5lcmF0b3IuDQoNCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBvcGFt
IHVwZGF0ZQ0KICDilIIgb3BhbSBpbnN0YWxsIG1lbmhpcg0KICDilIIgb3Bh
bSBpbnN0YWxsIGNvcS1tZW5oaXJsaWIgIyBpZiB5b3Ugd2lzaCB0byB1c2Ug
bWVuaGlyIC0tY29xDQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIFRoZXJlIGFy
ZSBubyBuZXcgZmVhdHVyZXMsIG9ubHkgYSBzaWduaWZpY2FudCBjaGFuZ2Ug
aW4gdGhlIG1hbm5lciBpbg0KICB3aGljaCBNZW5oaXIgaXMgYnVpbHQ6DQoN
CiAg4oCiIE1lbmhpciBpcyBub3cgYnVpbHQgYW5kIGluc3RhbGxlZCBieSBk
dW5lLiBUaGlzIHNob3VsZCBtYWtlIGxpZmUNCiAgICBlYXNpZXIgZm9yIE1l
bmhpcidzIGRldmVsb3BlcnM6IGluIHBhcnRpY3VsYXIsIGBtYWtlIHRlc3Qn
IGFuZCBgbWFrZQ0KICAgIHNwZWVkJyBjYW4gYmUgcnVuIHN0cmFpZ2h0IGF3
YXkgYW5kIGRvIG5vdCByZXF1aXJpbmcgaW5zdGFsbGluZw0KICAgIE1lbmhp
ciBmaXJzdC4gVGhpcyBzaG91bGQgYWxzbyBtYWtlIGNvbXBpbGF0aW9uIG11
Y2ggZmFzdGVyIG9uDQogICAgbXVsdGktY29yZSBtYWNoaW5lcy4gKENvbnRy
aWJ1dGVkIGJ5IE5pY29sw6FzIE9qZWRhIELDpHIsIHRvIHdob20gbWFueQ0K
ICAgIHRoYW5rcyBhcmUgZHVlLikNCg0KICDigKIgVGhlcmUgdXNlZCB0byBi
ZSBhIGRpc3RpbmN0aW9uIGJldHdlZW4gdHdvIHNsaWdodGx5IGRpZmZlcmVu
dCB3YXlzDQogICAgb2YgaW5zdGFsbGluZyBNZW5oaXIsIG5hbWVseSB3aXRo
IGFuZCB3aXRob3V0IGBvY2FtbGZpbmQnLiBUaGlzDQogICAgZGlzdGluY3Rp
b24gZGlzYXBwZWFycy4gVGhlIGNvbW1hbmQgbGluZSBzd2l0Y2gNCiAgICBg
LS1zdWdnZXN0LW9jYW1sZmluZCcgaXMgZGVwcmVjYXRlZCBhbmQgY2F1c2Vz
IE1lbmhpciB0byBwcmludA0KICAgIGBmYWxzZScuDQoNCiAgV2UgaG9wZSB0
aGF0IHRoZXNlIGNoYW5nZXMgZG8gbm90IGJyZWFrIGFueSBvZiB0aGUgY29k
ZSB0aGF0IHJlbGllcyBvbg0KICBNZW5oaXIgdG9kYXkuIFBsZWFzZSByZXBv
cnQgYW55IHByb2JsZW1zIHRoYXQgeW91IG1pZ2h0DQogIGVuY291bnRlci4g
SGFwcHkgaGFja2luZyENCg0KDQpPY2FtbCBjcm9zcyBjb21waWxlcj8NCuKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkA0KDQogIEFyY2hpdmU6IDxodHRwczovL2Rpc2N1
c3Mub2NhbWwub3JnL3Qvb2NhbWwtY3Jvc3MtY29tcGlsZXIvMTQ5NC83Pg0K
DQoNCkRlZXAgaW4gdGhpcyB0aHJlYWQsIERtaXRyeSBQb255YXRvdiBhc2tl
ZA0K4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSADQoNCiAg
V2hhdCBhYm91dCBlbWJlZGRlZCB0YXJnZXRzIGxpa2UgQ29ydGV4LU0gKFNU
TTMyRjMvRjQpPyAgSG93IG11Y2gNCiAgbWVtb3J5IHNob3VsZCBpdCBoYXZl
IHRvIGhhdmUgdG8gcnVuIE9DYW1sLWNvbXBpbGVkIHByb2dyYW1zPw0KDQoN
Ckl2YW4gR290b3ZjaGl0cyByZXBsaWVkDQrilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIANCg0KICBZb3UgbWF5IGZpbmQgdGhpcyBbcGFnZV0gaW50ZXJlc3Rp
bmcuIFRvIHN1bW1hcml6ZSwgd2l0aCBfYSBsb3Qgb2YNCiAgd29ya18geW91
IGNhbiBtYWtlIGEgc3Vic2V0IG9mIE9DYW1sIHByb2dyYW1zIHJ1bm5hYmxl
IG9uIGENCiAgbWljcm9jb250cm9sbGVyLiBZb3Ugd2lsbCBhbHNvIG5lZWQg
dG8gcmV3cml0ZSBPQ2FtbCdzIHJ1bnRpbWUgYW5kDQogIGRldmVsb3AgYSBu
ZXcgR0MgZm9yIGl0Lg0KDQogIEluIHJlYWwgbGlmZSwgbm8sIHlvdSBjYW4n
dCBydW4gT0NhbWwgb24gYSBtaWNyb2NvbnRyb2xsZXIuIFlvdSBuZWVkDQog
IGF0IGxlYXN0IGEgY291cGxlIG9mIG1lZ2FieXRlcyBvZiBub3JtYWwgUkFN
IHdpdGggTU1VLg0KDQoNCltwYWdlXSA8aHR0cDovL3d3dy5hbGdvLXByb2cu
aW5mby9vY2FwaWMvd2ViL2luZGV4LnBocD9pZD1vY2FwaWM+DQoNCg0KSXZh
biBHb3RvdmNoaXRzIHRoZW4gYWRkZWQNCuKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgA0KDQogIEhtbSwgZm91bmQgdGhpcyBbcHJvamVjdF0s
IHRoYXQgaXMgYWxzbyBxdWl0ZSByZWxldmFudCB0byB5b3UsIGl0IGlzDQog
IHF1aXRlIGFsaXZlLCBzbyBtYXliZSB5b3UgaGF2ZSBjaGFuY2VzIDopDQoN
Cg0KW3Byb2plY3RdIDxodHRwczovL2dpdGh1Yi5jb20vc3RldmVudmFyL09N
aWNyb0I+DQoNCg0KVHdvIG1hc3RlciBpbnRlcm5zaGlwIHByb3Bvc2FscyB0
byBleHBsb3JlIHNvY2lhbCBhbmQgdGVjaG5pY2FsIGFzcGVjdHMgb2YgdGhl
IGNyZWF0aW9uIG9mIHRoZSBPQ2FtbCBhbmQgQ29xIHBsYXRmb3Jtcw0K4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQDQoNCiAgQXJj
aGl2ZToNCiAgPGh0dHBzOi8vZGlzY3Vzcy5vY2FtbC5vcmcvdC90d28tbWFz
dGVyLWludGVybnNoaXAtcHJvcG9zYWxzLXRvLWV4cGxvcmUtc29jaWFsLWFu
ZC10ZWNobmljYWwtYXNwZWN0cy1vZi10aGUtY3JlYXRpb24tb2YtdGhlLW9j
YW1sLWFuZC1jb3EtcGxhdGZvcm1zLzUwNzMvMT4NCg0KDQpUaMOpbyBaaW1t
ZXJtYW5uIGFubm91bmNlZA0K4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSADQoNCiAgV2UgYXJlIGxvb2tpbmcgZm9yIGNhbmRpZGF0ZXMgZm9yIHRo
ZSBmb2xsb3dpbmcgdHdvIGludGVybnNoaXBzDQogIGludGVuZGVkIHRvIHBy
ZWZpZ3VyZSB0aGUgY3JlYXRpb24gb2YgdGhlIE9DYW1sIGFuZCBDb3EgcGxh
dGZvcm1zOg0KICDigKIgYSBmaXJzdCBpbnRlcm5zaGlwIGlzIGZvY3VzZWQg
b24gZXhwbG9yaW5nIHRlY2huaWNhbCBhc3BlY3RzOg0KICAgIDxodHRwczov
L3d3dy5pcmlmLmZyL19tZWRpYS91c2Vycy90aGVvL2ludGVybnNoaXBfcHJv
cG9zYWxfcGxhdGZvcm1fdGVjaC5wZGY+DQogIOKAoiBhIHNlY29uZCBpbnRl
cm5zaGlwIGlzIGZvY3VzZWQgb24gZXhwbG9yaW5nIHNvY2lhbCBhbmQgcG9s
aWN5DQogICAgYXNwZWN0czoNCiAgICA8aHR0cHM6Ly93d3cuaXJpZi5mci9f
bWVkaWEvdXNlcnMvdGhlby9pbnRlcm5zaGlwX3Byb3Bvc2FsX3BsYXRmb3Jt
X3NvY2lhbC5wZGY+DQoNCiAgUGxlYXNlIGZlZWwgZnJlZSB0byBmb3J3YXJk
IHRoaXMgYW5ub3VuY2VtZW50LiAgSW50ZXJlc3RlZCBzdHVkZW50cw0KICBz
aG91bGQgc2VuZCB0aGVpciByZXN1bWUgYW5kIGNvdmVyIGxldHRlciBhdA0K
ICBbeXJnQGlyaWYuZnJdKDxtYWlsdG86eXJnQGlyaWYuZnI+KSBhbmQNCiAg
W3RoZW9AaXJpZi5mcl0oPG1haWx0bzp0aGVvQGlyaWYuZnI+KS4NCg0KICBZ
YW5uIFLDqWdpcy1HaWFuYXMgKElucmlhLCBJUklGLCBPQ2FtbCBGb3VuZGF0
aW9uKSBhbmQgVGjDqW8gWmltbWVybWFubg0KICAoSW5yaWEsIElSSUYsIENv
cSBkZXZlbG9wbWVudCB0ZWFtKQ0KDQoNClByb3BlciB3YXkgdG8gYWxsb2Nh
dGUgYW4gT0NhbWwgc3RyaW5nIGZyb20gQyBjb2RlIGluIE9DYW1sIDQuMTA/
DQrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZANCg0KICBBcmNoaXZlOg0KICA8aHR0cHM6Ly9k
aXNjdXNzLm9jYW1sLm9yZy90L3Byb3Blci13YXktdG8tYWxsb2NhdGUtYW4t
b2NhbWwtc3RyaW5nLWZyb20tYy1jb2RlLWluLW9jYW1sLTQtMTAvNTA3NS8x
Pg0KDQoNClJ3bWpvbmVzIGFza2VkDQrilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIANCg0KICBQcmV2aW91c2x5IHRvIGFsbG9j
YXRlIGEgc3RyaW5nIHdpdGggZXhwbGljaXQgbGVuZ3RoIChpZS4gIG9uZSB3
aGljaA0KICBtYXkgY29udGFpbiBcMCBjaGFyYWN0ZXJzKSBpbiBDIGNvZGUg
d2UgaGF2ZSB1c2VkOg0KDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgc3Ry
diA9IGNhbWxfYWxsb2Nfc3RyaW5nIChjb3VudCk7DQogIOKUgiBtZW1jcHkg
KFN0cmluZ192YWwgKHN0cnYpLCBzdHIsIGNvdW50KTsNCiAg4pSU4pSA4pSA
4pSA4pSADQoNCiAgSW4gT0NhbWwgNC4xMCB0aGlzIGRvZXNuJ3QgY29tcGls
ZSBiZWNhdXNlIFN0cmluZ192YWwgcmV0dXJucyBhIGBjb25zdA0KICBjaGFy
IConLg0KDQogIEkgY291bGQgY2hhbmdlIFN0cmluZ192YWwgdG8gQnl0ZXNf
dmFsLCBidXQgdGhhdCBmZWVscyB3cm9uZy4gIFRoZQ0KICBydW50aW1lIHNl
ZW1zIHRvIHVzZSBgJkJ5dGVfdSAoc3RydiwgMCknLg0KDQogIEl0J3MgYSBz
aGFtZSB0aGVyZSdzIG5vdCBhIGNhbWxfY29weV9zdHJpbmdfbGVuIGZ1bmN0
aW9uLCBidXQgd2hhdCBpcw0KICB0aGUgcHJvcGVyIHdheSB0byBkbyB0aGlz
IGZvciBPQ2FtbCA0LjEwKywgZXNwZWNpYWxseSBhIHdheSB0aGF0IHdvbid0
DQogIGJyZWFrIGluIGZ1dHVyZSBhbmQgd2lsbCBiZSBjb21wYXRpYmxlIHdp
dGggbXVsdGljb3JlPw0KDQoNCnlhbGxvcCBzdWdnZXN0ZWQNCuKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQog
IFlvdSBjYW4gdXNlIFtgY2FtbF9hbGxvY19pbml0aWFsaXplZF9zdHJpbmcn
XToNCg0KICDilIzilIDilIDilIDilIANCiAg4pSCIENBTUxleHRlcm4gdmFs
dWUgY2FtbF9hbGxvY19pbml0aWFsaXplZF9zdHJpbmcgKG1sc2l6ZV90IGxl
biwgY29uc3QgY2hhciAqKTsNCiAg4pSU4pSA4pSA4pSA4pSADQoNCg0KW2Bj
YW1sX2FsbG9jX2luaXRpYWxpemVkX3N0cmluZyddDQo8aHR0cHM6Ly9naXRo
dWIuY29tL29jYW1sL29jYW1sL2Jsb2IvZDQwOGU1OGVhMTVlYzg5MGEyYzZk
OTg0NDFkMjYxZGI1MWE2NzM1ZC9ydW50aW1lL2NhbWwvYWxsb2MuaCNMMzh+
Pg0KDQoNCk9DYW1sIDQuMTAuMCwgc2Vjb25kIGJldGENCuKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIEFyY2hpdmU6IDxodHRwczovL2Rp
c2N1c3Mub2NhbWwub3JnL3Qvb2NhbWwtNC0xMC0wLXNlY29uZC1iZXRhLzUw
ODMvMT4NCg0KDQpvY3RhY2hyb24gYW5ub3VuY2VkDQrilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAN
Cg0KICBUaGUgcmVsZWFzZSBvZiBPQ2FtbCA0LjEwLjAgaXMgbmVhci4gV2Ug
aGF2ZSByZWxlYXNlZCBhIHNlY29uZCBiZXRhDQogIHZlcnNpb24gdG8gaGVs
cCB5b3UgYWRhcHQgeW91ciBzb2Z0d2FyZXMgYW5kIGxpYnJhcmllcyB0byB0
aGUgbmV3DQogIGZlYXR1cmVzIGFoZWFkIG9mIHRoZSByZWxlYXNlLg0KDQog
IFRoaXMgbmV3IGJldGEgY29udGFpbnMgYW4gdXBkYXRlIHRvIHRoZSBpbnRl
cm5hbCBydW50aW1lIEFQSSB0aGF0DQogIHNob3VsZCBtYWtlIGl0IGVhc2ll
ciB0byBtYWludGFpbiBjb21wYXRpYmlsaXR5IGFjcm9zcyB2ZXJzaW9uIGZv
cg0KICBleHBlcnQgdXNlcnM7IGFuZCBhIHNtYWxsIGZpeCBmb3IgdGhlIGFu
YWx5c2lzIG9mIHJlY3Vyc2l2ZSB2YWx1ZXMuDQoNCiAgVGhlIHNvdXJjZSBj
b2RlIGlzIGF2YWlsYWJsZSBhdCB0aGVzZSBhZGRyZXNzZXM6DQoNCiAgPGh0
dHBzOi8vZ2l0aHViLmNvbS9vY2FtbC9vY2FtbC9hcmNoaXZlLzQuMTAuMCti
ZXRhMi50YXIuZ3o+DQogIDxodHRwczovL2NhbWwuaW5yaWEuZnIvcHViL2Rp
c3RyaWIvb2NhbWwtNC4xMC9vY2FtbC00LjEwLjArYmV0YTIudGFyLmd6Pg0K
DQogIFRoZSBjb21waWxlciBjYW4gYWxzbyBiZSBpbnN0YWxsZWQgYXMgYW4g
T1BBTSBzd2l0Y2ggd2l0aCBvbmUgb2YgdGhlDQogIGZvbGxvd2luZyBjb21t
YW5kcy4NCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBvcGFtIHN3aXRjaCBj
cmVhdGUgb2NhbWwtdmFyaWFudHMuNC4xMC4wK2JldGExIC0tcmVwb3NpdG9y
aWVzPWRlZmF1bHQsYmV0YT1naXQraHR0cHM6Ly9naXRodWIuY29tL29jYW1s
L29jYW1sLWJldGEtcmVwb3NpdG9yeS5naXQNCiAg4pSU4pSA4pSA4pSA4pSA
DQogIG9yDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgb3BhbSBzd2l0Y2gg
Y3JlYXRlIG9jYW1sLXZhcmlhbnRzLjQuMTAuMCtiZXRhMSs8VkFSSUFOVD4g
LS1yZXBvc2l0b3JpZXM9ZGVmYXVsdCxiZXRhPWdpdCtodHRwczovL2dpdGh1
Yi5jb20vb2NhbWwvb2NhbWwtYmV0YS1yZXBvc2l0b3J5LmdpdA0KICDilJTi
lIDilIDilIDilIANCiAgd2hlcmUgeW91IHJlcGxhY2UgPFZBUklBTlQ+IHdp
dGggb25lIG9mIHRoZXNlOg0KICDigKIgYWZsDQogIOKAoiBmbGFtYmRhDQog
IOKAoiBmcA0KICDigKIgZnArZmxhbWJkYQ0KDQogIEZvciBhIGJldHRlciBl
eHBlcmllbmNlLCB5b3UgY2FuIHVzZSB0aGUgb3BhbSBhbHBoYSByZXBvc2l0
b3J5DQogIHByb3ZpZGVkIGJ5Og0KICDilIzilIDilIDilIDilIANCiAg4pSC
IG9wYW0gcmVwb3NpdG9yeSBhZGQgYWxwaGEgZ2l0Oi8vZ2l0aHViLmNvbS9r
aXQtdHkta2F0ZS9vcGFtLWFscGhhLXJlcG9zaXRvcnkuZ2l0DQogIOKUlOKU
gOKUgOKUgOKUgA0KICBUaGlzIHJlcG9zaXRvcnkgY29udGFpbnMgYSBoYW5k
ZnVsIG9mIHRlbXBvcmFyeSBwYXRjaGVkIHBhY2thZ2VzLCB0aGF0DQogIHlv
dSBjYW4gdXNlIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBwYWNrYWdlcyB0byBi
ZSBwcm9wZXJseSBwYXRjaGVkLg0KICBUaGlzIHJlcG9zaXRvcnkgc2hvdWxk
IG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24gYW5kIHlvdSBwcm9iYWJseSB3
YW50DQogIHRvIGluc3RhbGwgaXQgb25seSBmb3IgdGhlIGJldGEgc3dpdGNo
Lg0KDQogIFdlIHdhbnQgdG8ga25vdyBhYm91dCBhbGwgYnVncy4gUGxlYXNl
IHJlcG9ydCB0aGVtIGhlcmU6DQoNCiAgPGh0dHBzOi8vZ2l0aHViLmNvbS9v
Y2FtbC9vY2FtbC9pc3N1ZXM+DQoNCg0KT2xkIENXTg0K4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQDQoNCiAgSWYgeW91IGhhcHBlbiB0byBtaXNzIGEgQ1dOLCB5
b3UgY2FuIFtzZW5kIG1lIGEgbWVzc2FnZV0gYW5kIEknbGwgbWFpbA0KICBp
dCB0byB5b3UsIG9yIGdvIHRha2UgYSBsb29rIGF0IFt0aGUgYXJjaGl2ZV0g
b3IgdGhlIFtSU1MgZmVlZCBvZiB0aGUNCiAgYXJjaGl2ZXNdLg0KDQogIElm
IHlvdSBhbHNvIHdpc2ggdG8gcmVjZWl2ZSBpdCBldmVyeSB3ZWVrIGJ5IG1h
aWwsIHlvdSBtYXkgc3Vic2NyaWJlDQogIFtvbmxpbmVdLg0KDQogIFtBbGFu
IFNjaG1pdHRdDQoNCg0KW3NlbmQgbWUgYSBtZXNzYWdlXSA8bWFpbHRvOmFs
YW4uc2NobWl0dEBwb2x5dGVjaG5pcXVlLm9yZz4NCg0KW3RoZSBhcmNoaXZl
XSA8aHR0cDovL2FsYW4ucGV0aXRlcG9tbWUubmV0L2N3bi8+DQoNCltSU1Mg
ZmVlZCBvZiB0aGUgYXJjaGl2ZXNdIDxodHRwOi8vYWxhbi5wZXRpdGVwb21t
ZS5uZXQvY3duL2N3bi5yc3M+DQoNCltvbmxpbmVdIDxodHRwOi8vbGlzdHMu
aWR5bGwub3JnL2xpc3RpbmZvL2NhbWwtbmV3cy13ZWVrbHkvPg0KDQpbQWxh
biBTY2htaXR0XSA8aHR0cDovL2FsYW4ucGV0aXRlcG9tbWUubmV0Lz4NCg0K

--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2020-01-28 Tue 11:51 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.01.21.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2020.02.04.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of January 21 to 28, 202=
0.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">New release of Menhir (20200123)</a></li>
<li><a href=3D"#2">Ocaml cross compiler?</a></li>
<li><a href=3D"#3">Two master internship proposals to explore social and te=
chnical aspects of the creation of the OCaml and Coq platforms</a></li>
<li><a href=3D"#4">Proper way to allocate an OCaml string from C code in OC=
aml 4.10?</a></li>
<li><a href=3D"#5">OCaml 4.10.0, second beta</a></li>
<li><a href=3D"#org204a3b7">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-orgcac7694" class=3D"outline-2">
<h2 id=3D"1">New release of Menhir (20200123)</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2020-01/msg0=
0040.html">https://sympa.inria.fr/sympa/arc/caml-list/2020-01/msg00040.html=
</a>
</p>
</div>

<div id=3D"outline-container-orgfa5b7ba" class=3D"outline-3">
<h3 id=3D"orgfa5b7ba">Fran=C3=A7ois Pottier announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgfa5b7ba">
<p>
It is my pleasure to announce a new release of Menhir, the LR(1) parser
generator.
</p>

<pre class=3D"example">
opam update
opam install menhir
opam install coq-menhirlib # if you wish to use menhir --coq
</pre>

<p>
There are no new features, only a significant change in the manner in which
Menhir is built:
</p>

<ul class=3D"org-ul">
<li>Menhir is now built and installed by dune. This should make life easier=
 for Menhir's developers: in particular, <code>make test</code> and <code>m=
ake speed</code> can be run straight away and do not requiring installing M=
enhir first. This should also make compilation much faster on multi-core ma=
chines. (Contributed by Nicol=C3=A1s Ojeda B=C3=A4r, to whom many thanks ar=
e due.)</li>

<li>There used to be a distinction between two slightly different ways of i=
nstalling Menhir, namely with and without <code>ocamlfind</code>. This dist=
inction disappears. The command line switch <code>--suggest-ocamlfind</code=
> is deprecated and causes Menhir to print <code>false</code>.</li>
</ul>

<p>
We hope that these changes do not break any of the code that relies on Menh=
ir
today. Please report any problems that you might encounter. Happy hacking!
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org816f2a8" class=3D"outline-2">
<h2 id=3D"2">Ocaml cross compiler?</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-cross-compiler/1494/7=
">https://discuss.ocaml.org/t/ocaml-cross-compiler/1494/7</a>
</p>
</div>

<div id=3D"outline-container-org94c6b34" class=3D"outline-3">
<h3 id=3D"org94c6b34">Deep in this thread, Dmitry Ponyatov asked</h3>
<div class=3D"outline-text-3" id=3D"text-org94c6b34">
<p>
What about embedded targets like Cortex-M (STM32F3/F4)?
How much memory should it have to have to run OCaml-compiled programs?
</p>
</div>
</div>


<div id=3D"outline-container-org33c8d26" class=3D"outline-3">
<h3 id=3D"org33c8d26">Ivan Gotovchits replied</h3>
<div class=3D"outline-text-3" id=3D"text-org33c8d26">
<p>
You may find this <a href=3D"http://www.algo-prog.info/ocapic/web/index.php=
?id=3Docapic">page</a> interesting. To summarize, with <span class=3D"under=
line">a lot of work</span> you can make a subset of OCaml programs runnable=
 on a microcontroller. You will also need to rewrite OCaml's runtime and de=
velop a new GC for it.
</p>

<p>
In real life, no, you can't run OCaml on a microcontroller. You need at lea=
st a couple of megabytes of normal RAM with MMU.
</p>
</div>
</div>


<div id=3D"outline-container-org1378472" class=3D"outline-3">
<h3 id=3D"org1378472">Ivan Gotovchits then added</h3>
<div class=3D"outline-text-3" id=3D"text-org1378472">
<p>
Hmm, found this <a href=3D"https://github.com/stevenvar/OMicroB">project</a=
>, that is also quite relevant to you, it is quite alive, so maybe you have=
 chances :)
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org75ed1d5" class=3D"outline-2">
<h2 id=3D"3">Two master internship proposals to explore social and technica=
l aspects of the creation of the OCaml and Coq platforms</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/two-master-internship-propo=
sals-to-explore-social-and-technical-aspects-of-the-creation-of-the-ocaml-a=
nd-coq-platforms/5073/1">https://discuss.ocaml.org/t/two-master-internship-=
proposals-to-explore-social-and-technical-aspects-of-the-creation-of-the-oc=
aml-and-coq-platforms/5073/1</a>
</p>
</div>

<div id=3D"outline-container-orgf5a29ec" class=3D"outline-3">
<h3 id=3D"orgf5a29ec">Th=C3=A9o Zimmermann announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgf5a29ec">
<p>
We are looking for candidates for the following two internships intended to=
 prefigure the creation of the OCaml and Coq platforms:
</p>
<ul class=3D"org-ul">
<li>a first internship is focused on exploring technical aspects: <a href=
=3D"https://www.irif.fr/_media/users/theo/internship_proposal_platform_tech=
.pdf">https://www.irif.fr/_media/users/theo/internship_proposal_platform_te=
ch.pdf</a></li>
<li>a second internship is focused on exploring social and policy aspects: =
<a href=3D"https://www.irif.fr/_media/users/theo/internship_proposal_platfo=
rm_social.pdf">https://www.irif.fr/_media/users/theo/internship_proposal_pl=
atform_social.pdf</a></li>
</ul>

<p>
Please feel free to forward this announcement.
Interested students should send their resume and cover letter at [yrg@irif.=
fr](<a href=3D"mailto:yrg@irif.fr">mailto:yrg@irif.fr</a>) and [theo@irif.f=
r](<a href=3D"mailto:theo@irif.fr">mailto:theo@irif.fr</a>).
</p>

<p>
Yann R=C3=A9gis-Gianas (Inria, IRIF, OCaml Foundation) and Th=C3=A9o Zimmer=
mann (Inria, IRIF, Coq development team)
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org84e67a9" class=3D"outline-2">
<h2 id=3D"4">Proper way to allocate an OCaml string from C code in OCaml 4.=
10?</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/proper-way-to-allocate-an-o=
caml-string-from-c-code-in-ocaml-4-10/5075/1">https://discuss.ocaml.org/t/p=
roper-way-to-allocate-an-ocaml-string-from-c-code-in-ocaml-4-10/5075/1</a>
</p>
</div>

<div id=3D"outline-container-org7c7b6b6" class=3D"outline-3">
<h3 id=3D"org7c7b6b6">Rwmjones asked</h3>
<div class=3D"outline-text-3" id=3D"text-org7c7b6b6">
<p>
Previously to allocate a string with explicit length (ie.  one which may co=
ntain \0 characters) in C code we have used:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-c">strv =3D caml_alloc_string (count);
<span style=3D"color: #0000ff;">memcpy</span> (<span style=3D"color: #228b2=
2;">String_val</span> (<span style=3D"color: #a0522d;">strv</span>), str, c=
ount);
</pre>
</div>

<p>
In OCaml 4.10 this doesn't compile because String_val returns a <code>const=
 char *</code>.
</p>

<p>
I could change String_val to Bytes_val, but that feels wrong.  The runtime =
seems to use <code>&amp;Byte_u (strv, 0)</code>.
</p>

<p>
It's a shame there's not a caml_copy_string_len function, but what is the p=
roper way to do this for OCaml 4.10+, especially a way that won't break in =
future and will be compatible with multicore?
</p>
</div>
</div>


<div id=3D"outline-container-org13c2b4f" class=3D"outline-3">
<h3 id=3D"org13c2b4f">yallop suggested</h3>
<div class=3D"outline-text-3" id=3D"text-org13c2b4f">
<p>
You can use <a href=3D"https://github.com/ocaml/ocaml/blob/d408e58ea15ec890=
a2c6d98441d261db51a6735d/runtime/caml/alloc.h#L38~"><code>caml_alloc_initia=
lized_string</code></a>:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-c">CAMLextern <span style=3D"color: #228b22;">value</=
span> <span style=3D"color: #0000ff;">caml_alloc_initialized_string</span> =
(<span style=3D"color: #228b22;">mlsize_t</span> <span style=3D"color: #a05=
22d;">len</span>, <span style=3D"color: #a020f0;">const</span> <span style=
=3D"color: #228b22;">char</span> *);
</pre>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-org7da1166" class=3D"outline-2">
<h2 id=3D"5">OCaml 4.10.0, second beta</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-4-10-0-second-beta/50=
83/1">https://discuss.ocaml.org/t/ocaml-4-10-0-second-beta/5083/1</a>
</p>
</div>

<div id=3D"outline-container-org4a8865f" class=3D"outline-3">
<h3 id=3D"org4a8865f">octachron announced</h3>
<div class=3D"outline-text-3" id=3D"text-org4a8865f">
<p>
The release of OCaml 4.10.0 is near. We have released a second beta
version to help you adapt your softwares and libraries to the new features
ahead of the release.
</p>

<p>
This new beta contains an update to the internal runtime API that
should make it easier to maintain compatibility across version
for expert users; and a small fix for the analysis of recursive
values.
</p>

<p>
The source code is available at these addresses:
</p>

<p>
<a href=3D"https://github.com/ocaml/ocaml/archive/4.10.0+beta2.tar.gz">http=
s://github.com/ocaml/ocaml/archive/4.10.0+beta2.tar.gz</a> <br />
<a href=3D"https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+beta2.=
tar.gz">https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+beta2.tar=
.gz</a>
</p>

<p>
The compiler can also be installed as an OPAM switch with one of the
following commands.
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam switch create ocaml-variants.4.10.0+beta1=
 --repositories=3Ddefault,<span style=3D"color: #a0522d;">beta</span>=3Dgit=
+https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
or
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam switch create ocaml-variants.4.10.0+beta1=
+&lt;VARIANT&gt; --repositories=3Ddefault,<span style=3D"color: #a0522d;">b=
eta</span>=3Dgit+https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
where you replace &lt;VARIANT&gt; with one of these:
</p>
<ul class=3D"org-ul">
<li>afl</li>
<li>flambda</li>
<li>fp</li>
<li>fp+flambda</li>
</ul>

<p>
For a better experience, you can use the opam alpha repository provided by:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam repository add alpha git://github.com/kit=
-ty-kate/opam-alpha-repository.git
</pre>
</div>
<p>
This repository contains a handful of temporary patched packages, that you =
can use
while waiting for the packages to be properly patched.
This repository should not be used in production and you probably want to i=
nstall
it only for the beta switch.
</p>

<p>
We want to know about all bugs. Please report them here:
</p>

<p>
<a href=3D"https://github.com/ocaml/ocaml/issues">https://github.com/ocaml/=
ocaml/issues</a>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org204a3b7" class=3D"outline-2">
<h2 id=3D"org204a3b7">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org204a3b7">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
