Return-Path: <SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 0FA377ED1F
	for <caml-list@sympa.inria.fr>; Tue, 14 Jan 2020 15:17:06 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=r8bB=3D=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3AbGLwuhMU8rdKjQUBw/Ul6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/3+osbcNUDSrc9gkEXOFd2Cra4d16yO6+u8ACRAuc/H7ClZNsQUFlcsso?=
 =?us-ascii?q?Y/p0QYGsmLCEn2frbBThcRO4B8bmJj5GyxKkNPGczzNBX4q3y26iMOSF2kbVIm?=
 =?us-ascii?q?buv6FZTPgMupyuu854PcYxlShDq6fLh+MAi6oR/eu8ULjoZuMLo9xgfGrnZHZu?=
 =?us-ascii?q?hd2GdkKU6Okxrm6cq84ZBu/z5Mt/498sJLTLn3cbk/QbFEFjotLno75NfstRnN?=
 =?us-ascii?q?TAuP4mUTX2ALmRdWAAbL8Q/3UI7pviT1quRy1i+aPdbrTb8vQjSt871rSB7zhy?=
 =?us-ascii?q?gZMTMy7XzahdZxjKJfpxKhugB/zovJa4ybKPZyYqXQds4aSWRCWMZRSS1BApi9?=
 =?us-ascii?q?b4QUC+oOI/tTrof6p1sUsBS+HhSnCOfhxzNUg3P727Ax3eY8HgHcxAEuH8wAvm?=
 =?us-ascii?q?naotv2O6gdTfu4w7PUwTjZdf5axSvx5YrOfxs8of+MR7Vwcc/JxEQzEwPKlFOQ?=
 =?us-ascii?q?opH4MTyJ1uQNtmmb7/Z8VemyjGMosQVxrSKpxss2kYnGmoIVylXF9SVl3IY4Ps?=
 =?us-ascii?q?W4SEl/Yd+kDJtfqT2VN4twQsMjWmFopTg1xqcBuZ6hcygH0ZIqzAPRZfyAdoiH?=
 =?us-ascii?q?+BPjVOCJLDd/mH1qYre/hxKo/Uin0O38WdG40E5UoSpZk9nMqm4C1wTU6siCT/?=
 =?us-ascii?q?ty4F2t2TCR2ADP8u1EIEY0lbDaK5E72LIwmIATvVzdES/tmET6lrSWdkU89uiv?=
 =?us-ascii?q?9+voeLDmppuEN49ujQHyKLghmsu6AeggPQgOXnSb+eSh1LL450H2XLJKjvgunq?=
 =?us-ascii?q?nYrZ/bJcAbpqqjDw9SyIYj5A6zACmi0NsChnkHMFNFdw6dg4f1PFHDJu3zA/Sn?=
 =?us-ascii?q?g1m0jTtn2fTLMqf8DpnRIXXPirnscapn50NSxwc/1c1T6pxJBr0bPv7+WkD8uM?=
 =?us-ascii?q?bFAhMlKQC43uTqBMl724gDQ2yAGLWZP7nXsVKQ5uIgPe2MZIgNtTb4JPkp+uTi?=
 =?us-ascii?q?jWc+mV8ZfaipwYUYZ2y4HvRgIkWZeGfsjckbHWcNpAo+Q/TmiFyEUTFNe3a/R7?=
 =?us-ascii?q?8w6i8/BY68EIvPWo+gjKaP0SunBJFbaG9LBkiJEXjydoWEX/kMaDiVIs9kijEK?=
 =?us-ascii?q?SKSvRZI92Ry2rg/3yKFoI/fM9yAWu5zuzMB15+rXlRAy6Tx7EdiS02GLT2F1h2?=
 =?us-ascii?q?MIWiE50Lp4oUxnxVeOybJ3g/hCGtxV/f9JSRs1NZ7Zz+x7F9DyRhnMccyOSFa7?=
 =?us-ascii?q?RNWpHS8+Tskrz98LbEt8FM+ujhfZ3yqlG7MVjaCEBIQo8qLA2Hj8P9pyxGzD1K?=
 =?us-ascii?q?klllUmRspPNXa6hqNk7AjSB4vJk12DmKqwdKQc2jTN9GaZwmaUskFYSl04baKQ?=
 =?us-ascii?q?F3QAYAGe+dDm4GvGULnoD7k7ZE8Jg8WdLOECIoniklNuQPb4JM+YYm6gn2P2Ag?=
 =?us-ascii?q?yHkPfEZ4PvfyAZ3T7BIEkCiQEau3icZiYkASL0imbXCnRVHlLqYl/wub13rHq9?=
 =?us-ascii?q?CFQ/zwSLc1FJz72x6wIYjvyaSuoO0/QDoih3+GY8J0q0w9+DU4nInAFmZqgJOo?=
 =?us-ascii?q?tkvAV3kFnBvgk4BaSOarh4jwdPIRxwu1Ly2h53DIRZjMVsq2klnlMrdPColWhZ?=
 =?us-ascii?q?fjbd5qjef73aLm6op0Kqe/eQwlbawcqb8acJ6e0lphPkpg77TxNzoUUi6MFc1j?=
 =?us-ascii?q?6n3ruPCQMTVZzrVUNuqEpwoKzcaSQmoYaIxTtrK6bm6zI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0D9EQDMzB1ehyIeaIFcCR4BCxyBfYEjW?=
 =?us-ascii?q?IEYVTIqhA2JA4VlNIUehRqNAoQngWMNAQMBDBgBDgUBAgEBgUyDDYFmHQYBBTM?=
 =?us-ascii?q?TAhABAQQBAQECAQIDBAETAQEBCgsJCCmFPgxCFgGBYgwZgwMDARgBCAQGOQIBA?=
 =?us-ascii?q?QECJSMDFAEGAwIEDQEXARQKFwESFAUBAYMLATiCQwUKj3ibdH8zhDQBAwIBEBg?=
 =?us-ascii?q?jA0CDU4E9DQITgRQBhRyDCYNNJg+BTD+BEYJlbIF5Ug4LAQEBAQGBLQEICQIBC?=
 =?us-ascii?q?IMmgl4EjTgZCgMFGAeIQ4IhhS+Be45JZQeCO3cEhVpnhUODX02CPYJggkcwR4c?=
 =?us-ascii?q?LE5ARIY46gxCDVG4QeoUhgwOKH4E/KoEJcTMaMCIhgjgBAQExCRZJDYgNF4EEA?=
 =?us-ascii?q?QKCQwaBPoMbO4E9hAECQDMBAQEBBgIHgQ4BAQUTCwGGcIRqAQE?=
X-IPAS-Result: =?us-ascii?q?A0D9EQDMzB1ehyIeaIFcCR4BCxyBfYEjWIEYVTIqhA2JA4V?=
 =?us-ascii?q?lNIUehRqNAoQngWMNAQMBDBgBDgUBAgEBgUyDDYFmHQYBBTMTAhABAQQBAQECA?=
 =?us-ascii?q?QIDBAETAQEBCgsJCCmFPgxCFgGBYgwZgwMDARgBCAQGOQIBAQECJSMDFAEGAwI?=
 =?us-ascii?q?EDQEXARQKFwESFAUBAYMLATiCQwUKj3ibdH8zhDQBAwIBEBgjA0CDU4E9DQITg?=
 =?us-ascii?q?RQBhRyDCYNNJg+BTD+BEYJlbIF5Ug4LAQEBAQGBLQEICQIBCIMmgl4EjTgZCgM?=
 =?us-ascii?q?FGAeIQ4IhhS+Be45JZQeCO3cEhVpnhUODX02CPYJggkcwR4cLE5ARIY46gxCDV?=
 =?us-ascii?q?G4QeoUhgwOKH4E/KoEJcTMaMCIhgjgBAQExCRZJDYgNF4EEAQKCQwaBPoMbO4E?=
 =?us-ascii?q?9hAECQDMBAQEBBgIHgQ4BAQUTCwGGcIRqAQE?=
X-IronPort-AV: E=Sophos;i="5.69,433,1571695200"; 
   d="scan'208,217";a="431299318"
X-MGA-submission: =?us-ascii?q?MDHMW4Du7XzfJuCk9szIACHkMjdXCvyUrNVxQt?=
 =?us-ascii?q?XMt0u0HuL6p1FMM8b3bYl+gYY5OVhEV5/PDzyYqGQIizQdZ9puwUwgBe?=
 =?us-ascii?q?t/i7dzWsBflXynDB47wSyGN7C2cz3s60zJfTVff0ozuslfH6/aKuBllC?=
 =?us-ascii?q?Q5Pp6ZddAYWcmF+CYIyue5tg=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Jan 2020 15:17:03 +0100
Received: from set (set.irisa.fr [131.254.10.170])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id C1A3A56467A;
	Tue, 14 Jan 2020 15:16:59 +0100 (CET)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 14 Jan 2020 15:16:52 +0100
Message-ID: <87pnfmt963.fsf@polytechnique.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Jan 14 15:17:00 2020 +0100 (CET))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.007366, queueID=2614156468A
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64

SGVsbG8NCg0KSGVyZSBpcyB0aGUgbGF0ZXN0IE9DYW1sIFdlZWtseSBOZXdz
LCBmb3IgdGhlIHdlZWsgb2YgSmFudWFyeSAwNyB0byAxNCwNCjIwMjAuDQoN
ClRhYmxlIG9mIENvbnRlbnRzDQrilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIANCg0KQ2FsbGluZyBhIHNpbmds
ZSBmdW5jdGlvbiBvbiBldmVyeSBtZW1iZXIgb2YgYSBHQURUPw0KT0NhbWxQ
cm8ncyBvcGFtIGNoZWF0IHNoZWV0LCB3aXRoIGEgbmV3IHRoZW1lIQ0KT0Nh
bWwgNC4xMC4wLCBmaXJzdCBiZXRhDQpEYXRhIGVuZ2luZWVyIHBvc2l0aW9u
cyBhdCBFbGFzdGljLCBVUy9DYW5hZGEvV2VzdGVybiBFdXJvcGUgKHByb3hp
bWF0ZSB0byBOQSB0aW1lem9uZXMpDQpSZWxlYXNlIG9mIG5hYm9yaXMgMC4x
LjAgYSBzaW1wbGUgaHR0cCBzZXJ2ZXINCmVzeUAwLjYuMCByZWxlYXNlDQpP
bGQgQ1dODQoNCg0KQ2FsbGluZyBhIHNpbmdsZSBmdW5jdGlvbiBvbiBldmVy
eSBtZW1iZXIgb2YgYSBHQURUPw0K4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ
4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQDQoN
CiAgQXJjaGl2ZToNCiAgPGh0dHBzOi8vc3ltcGEuaW5yaWEuZnIvc3ltcGEv
YXJjL2NhbWwtbGlzdC8yMDIwLTAxL21zZzAwMDA3Lmh0bWw+DQoNCg0KSXZh
biBHb3RvdmNoaXRzIGFza2VkDQrilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIANCg0KICBJ
J20gYmFzaWNhbGx5IHRyeWluZyB0byBkbyB0aGUgZXF1aXZhbGVudCBvZiB0
aGlzIHNpbXBsZSBgZm9sZCcNCiAgZnVuY3Rpb246DQoNCiAg4pSM4pSA4pSA
4pSA4pSADQogIOKUgiBtb2R1bGUgU2ltcGxlID0NCiAg4pSCIHN0cnVjdA0K
ICDilIIgICB0eXBlIHRlcm0gPQ0KICDilIIgICAgICB8IEludCBvZiBpbnQN
CiAg4pSCICAgICAgfCBBZGQNCiAg4pSCICAgICAgfCBBcHAgb2YgdGVybSAq
IHRlcm0NCiAg4pSCIA0KICDilIIgICBsZXQgcmVjIGZvbGQgaSBmID0gZnVu
Y3Rpb24NCiAg4pSCICAgICB8IEludCBfIGFzIHQgLT4gZiBpIHQNCiAg4pSC
ICAgICB8IEFkZCAtPiBmIGkgQWRkDQogIOKUgiAgICAgfCBBcHAgKHgsIHkp
IGFzIHQgLT4gZiAoZm9sZCAoZm9sZCBpIGYgeCkgZiB5KSB0DQogIOKUgiBl
bmQNCiAg4pSU4pSA4pSA4pSA4pSADQoNCiAg4oCmIGJ1dCB1c2luZyBhIEdB
RFQ6DQoNCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBtb2R1bGUgR2FkdCA9
DQogIOKUgiBzdHJ1Y3QNCiAg4pSCICAgdHlwZSBfIHRlcm0gPQ0KICDilIIg
ICAgICB8IEludCA6IGludCAtPiBpbnQgdGVybQ0KICDilIIgICAgICB8IEFk
ZCA6IChpbnQgLT4gaW50IC0+IGludCkgdGVybQ0KICDilIIgICAgICB8IEFw
cCA6ICgnYiAtPiAnYSkgdGVybSAqICdiIHRlcm0gLT4gJ2EgdGVybQ0KICDi
lIIgDQogIOKUgiAgIGxldCByZWMgZm9sZCA6IHR5cGUgYS4gJ3IgLT4gKCdy
IC0+IF8gdGVybSAtPiAncikgLT4gJ3IgPSBmdW4gaSBmIC0+IGZ1bmN0aW9u
DQogIOKUgiAgICAgfCBJbnQgXyBhcyB0IC0+IGYgaSB0DQogIOKUgiAgICAg
fCBBZGQgLT4gZiBpIEFkZA0KICDilIIgKCoNCiAg4pSCICAgICAgXiBFcnJv
cjogVGhpcyBwYXR0ZXJuIG1hdGNoZXMgdmFsdWVzIG9mIHR5cGUgKGludCAt
PiBpbnQgLT4gaW50KSB0ZXJtDQogIOKUgiAJYnV0IGEgcGF0dGVybiB3YXMg
ZXhwZWN0ZWQgd2hpY2ggbWF0Y2hlcyB2YWx1ZXMgb2YgdHlwZSBpbnQgdGVy
bQ0KICDilIIgCVR5cGUgaW50IC0+IGludCAtPiBpbnQgaXMgbm90IGNvbXBh
dGlibGUgd2l0aCB0eXBlIGludA0KICDilIIgKikNCiAg4pSCICAgICB8IEFw
cCAoeCwgeSkgYXMgdCAtPiBmIChmb2xkIChmb2xkIGkgZiB4KSBmIHkpIHQN
CiAg4pSCIGVuZA0KICDilJTilIDilIDilIDilIANCg0KICBJJ3ZlIHRyaWVk
IG90aGVyIHZhcmlhbnRzIG9mIHRoZSBzeW50YXggYW5kIGdvdCBtYW55IGVu
Y291cmFnZW1lbnRzDQogIGJ1dCBubyBncmVlbiBmbGFnIGZyb20gdGhlIHR5
cGUtY2hlY2tlci4gIFdoeSBpcyB0aGUgY29tcGlsZXINCiAgZXhwZWN0aW5n
IGFuIGludCB0ZXJtIGluIHRoZXJlPyBJIHRob3VnaCB0aGUgd2hvbGUgcG9p
bnQgb2YgdGhlIGB0eXBlDQogIGEuIC4uLicgc3ludGF4IHdhcyB0byBhbGxv
dyB0aGUgbWF0Y2hlZCB0eXBlIHRvIHZhcnkgZnJvbSBvbmUgcGF0dGVybg0K
ICB0byB0aGUgbmV4dD8gIElzIHRoZXJlIGEgd2F5IHRvIGRvIHRoaXM/DQoN
Cg0KSXZhbiBHb3RvdmNoaXRzIHJlcGxpZWQNCuKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgA0KDQogIEl0IGlzIHRoZSBsaW1pdGF0aW9uIG9mIHRoZSBsZXQt
Ym91bmQgcG9seW1vcnBoaXNtLiBBIHBhcmFtZXRlciBvZiBhDQogIGZ1bmN0
aW9uIGlzIG1vbm9tb3JwaGljIGluIGl0cyBib2R5LiBUaGUgY2xhc3NpY2Fs
IGV4YW1wbGUgZG9lc24ndA0KICBldmVuIHJlZmVyZW5jZSBhbnkgR0FEVCwN
Cg0KICDilIzilIDilIDilIDilIANCiAg4pSCIGxldCBleGFtcGxlIGYgID0g
ZiAiaGVsbG8iLCBmIDQyDQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIEl0IHdv
bid0IGNvbXBpbGUgZXZlbiB0aG91Z2ggd2UgY2FuIHByb3ZpZGUgYSBwb2x5
bW9ycGhpYyBmdW5jdGlvbg0KICB0aGF0IGNhbiBhcHBsaWVkIGJvdGggdG8g
aW50ZWdlcnMgYW5kIHRvIHN0cmluZ3MsIGUuZy4sIGBleGFtcGUgKGZ1biB4
DQogIC0+IHgpJyBzaG91bGQgYmUgcG9zc2libGUsIGJ1dCBub3QsIGJlY2F1
c2Ugb2YgdGhlIGxldC1ib3VuZGVkDQogIHBvbHltb3JwaGlzbS4gVGhlcmUg
YXJlIGEgZmV3IHNvbHV0aW9ucyBhdmFpbGFibGUgaW4gT0NhbWwsIHRoZQ0K
ICBzaW1wbGVzdCBpcyB0byB1c2UgcmVjb3JkcywgZS5nLiwNCg0KICDilIzi
lIDilIDilIDilIANCiAg4pSCIHR5cGUgYXBwID0ge2FwcGx5IDogJ2EuICdh
IC0+ICdhfQ0KICDilIIgDQogIOKUgiBsZXQgZXhhbXBsZSB7YXBwbHl9ID0g
YXBwbHkgImhlbGxvIiwgYXBwbHkgNDI7Ow0KICDilIIgDQogIOKUgiB2YWwg
ZXhhbXBsZSA6IGFwcCAtPiBzdHJpbmcgKiBpbnQgPSA8ZnVuPg0KICDilJTi
lIDilIDilIDilIANCg0KICBOb3cgd2UgaGF2ZSBgYXBwJyB0aGF0IGlzIHBv
bHltb3JwaGljLiAgSW4geW91ciBjYXNlLCBJIHdvdWxkIGRlZmluZSBhDQog
IHZpc2l0b3IgdHlwZSwgZS5nLiwNCg0KICDilIzilIDilIDilIDilIANCiAg
4pSCIHR5cGUgJ3IgdmlzaXRvciA9IHt2aXNpdCA6ICdhLiAnYSB0ZXJtIC0+
ICdyIC0+ICdyfQ0KICDilIIgDQogIOKUgiBsZXQgcmVjIGZvbGQgOiB0eXBl
IGEuICdyIC0+ICdyIHZpc2l0b3IgLT4gYSB0ZXJtIC0+ICdyID0NCiAg4pSC
ICAgZnVuIGkgZiB0IC0+IG1hdGNoIHQgd2l0aA0KICDilIIgICAgIHwgSW50
IF8gYXMgdCAtPiBmLnZpc2l0IGkgdA0KICDilIIgICAgIHwgQWRkIGFzIHQg
LT4gZi52aXNpdCBpIHQNCiAg4pSCICAgICB8IEFwcCAoeCx5KSBhcyB0IC0+
DQogIOKUgiAJbGV0IGkgPSBmb2xkIGkgZiB4IGluDQogIOKUgiAJbGV0IGkg
PSBmb2xkIGkgZiB5IGluDQogIOKUgiAJZi52aXNpdCBpIHQNCiAg4pSU4pSA
4pSA4pSA4pSADQoNCg0KSmFjcXVlcyBHYXJyaWd1ZSBhbHNvIHJlcGxpZWQN
CuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0K
DQogIEFjdHVhbGx5LCB0aGlzIGlzIGEgcmFyZSBjYXNlIHdoZXJlIHVzaW5n
IGEgcG9seW1vcnBoaWMgbWV0aG9kIG1heSBiZQ0KICBoYW5keSB0b286DQoN
CiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBsZXQgcmVjIGZvbGQgOiB0eXBl
IGEgci4gciAtPiA8diA6ICdiLiByIC0+ICdiIHRlcm0gLT4gcj4gLT4gYSB0
ZXJtIC0+IHIgPQ0KICDilIIgICAgICBmdW4gaSBmIC0+IGZ1bmN0aW9uDQog
IOKUgiAgICAgIHwgSW50IF8gYXMgdCAtPiBmI3YgaSB0DQogIOKUgiAgICAg
IHwgQWRkIC0+IGYjdiBpIEFkZA0KICDilIIgICAgICB8IEFwcCAoeCwgeSkg
YXMgdCAtPiBmI3YgKGZvbGQgKGZvbGQgaSBmIHgpIGYgeSkgdA0KICDilIIg
DQogIOKUgiBsZXQgdiA9DQogIOKUgiAgICBvYmplY3QgbWV0aG9kIHYgOiB0
eXBlIGEuIF8gLT4gYSBHYWR0LnRlcm0gLT4gXyA9DQogIOKUgiAgICAgIGZ1
biB4IC0+IGZ1bmN0aW9uDQogIOKUgiAgICAgICAgfCBJbnQgbiAtPiB4K24N
CiAg4pSCICAgICAgICB8IEFkZCAtPiB4KzENCiAg4pSCICAgICAgICB8IEFw
cCBfIC0+IHgrMg0KICDilIIgICAgZW5kDQogIOKUgiANCiAg4pSCIGxldCBy
ID0gR2FkdC5mb2xkIDAgdiAoQXBwIChBcHAgKEFkZCwgSW50IDMpLCBJbnQg
NSkpDQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIFRoZSBwb2ludCBiZWluZyB0
aGF0IHRvIG1hdGNoIG9uIGEgR2FkdCB5b3Ugd2lsbCBhbnl3YXkgbmVlZCB0
byB1c2UNCiAgdGhlICh0eXBlIGEpIGNvbnN0cnVjdCB0byBhbGxvdyByZWZp
bmVtZW50Lg0KDQoNCnJpeGVkIGFza2VkIGFuZCBJdmFuIEdvdG92Y2hpdHMg
cmVwbGllZA0K4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSADQoNCiAgICAg
ICAgU28gdGhlcmUgaXMgbm8gbGlnaHRlciBzeW50YXggdG8gc3BlY2lmeSB0
aGF0IGBmJyBzaG91bGQNCiAgICAgICAgYWNjZXB0IGFueSBtZW1iZXIgb2Yg
YSBHQURUIHRoYW4gdGhlIHN5bnRheCB0byBzcGVjaWZ5DQogICAgICAgIHRo
YXQgYGYnIHNob3VsZCBhY2NlcHQgYW55IHR5cGUgYXQgYWxsPw0KDQogIE9u
bHkgdGhyZWUgbWV0aG9kcyBvZiBpbnRyb2R1Y2luZyByYW5rLTIgcG9seW1v
cnBoaXNtIGFyZSBrbm93biB0byBtZToNCiAgMS4gcmVjb3Jkcw0KICAyLiBv
YmplY3RzDQogIDMuIGZpcnN0LWNsYXNzIG1vZHVsZXMNCg0KICBKYWNxdWVz
IGhhcyBkZW1vbnN0cmF0ZWQgdGhlIHNvbHV0aW9uIHdpdGggb2JqZWN0cywg
d2hpY2ggbWlnaHQgYmUgYQ0KICBsaXR0bGUgYml0IG1vcmUgbGlnaHR3ZWln
aHQsIGF0IGxlYXN0IGFzIHlvdSBkb24ndCBuZWVkIHRvIGRlZmluZSBhDQog
IG5ldyBkYXRhIHR5cGUgYmVmb3JlaGFuZC4gQnV0IHRoZSBpbnZvY2F0aW9u
IGlzIG1vcmUgdmVyYm9zZSBhbmQNCiAgcmVxdWlyZXMgYW4gYW5ub3RhdGlv
biBmcm9tIHRoZSBjYWxsZXIgc2lkZSwgd2hpY2ggY291bGQgYmUNCiAgY29u
ZnVzaW5nLiBUaGUgdGhpcmQgc29sdXRpb24gcmVsaWVzIG9uIGZpcnN0LWNs
YXNzIG1vZHVsZXMgYW5kIGlzDQogIGV2ZW4gbW9yZSB2ZXJib3NlLCBhdCBs
ZWFzdCBvbiB0aGUgZGVmaW5pdGlvbiBzaWRlLiBKdXN0IGZvciB0aGUgc2Fr
ZQ0KICBvZiBjb21wbGV0ZW5lc3MsDQoNCiAg4pSM4pSA4pSA4pSA4pSADQog
IOKUgiAgIG1vZHVsZSB0eXBlIFZpc2l0b3IgPSBzaWcNCiAg4pSCICAgICB0
eXBlIHQNCiAg4pSCICAgICB2YWwgdGVybSA6IHQgLT4gJ2EgdGVybSAtPiB0
DQogIOKUgiAgIGVuZA0KICDilIIgDQogIOKUgiAgIGxldCByZWMgZm9sZCA6
IHR5cGUgYSByLiByIC0+IChtb2R1bGUgVmlzaXRvciB3aXRoIHR5cGUgdCA9
IHIpIC0+IGEgdGVybQ0KICDilIIgLT4gciA9DQogIOKUgiAgICAgZnVuIGkg
KChtb2R1bGUgVmlzaXQpIGFzIGYpIHQgLT4gbWF0Y2ggdCB3aXRoDQogIOKU
giAgICAgICB8IEludCBfIGFzIHQgLT4gVmlzaXQudGVybSBpIHQNCiAg4pSC
ICAgICAgIHwgQWRkIGFzIHQgLT4gVmlzaXQudGVybSBpIHQNCiAg4pSCICAg
ICAgIHwgQXBwICh4LHkpIGFzIHQgLT4NCiAg4pSCIAkgIGxldCBpID0gZm9s
ZCBpIGYgeCBpbg0KICDilIIgCSAgbGV0IGkgPSBmb2xkIGkgZiB5IGluDQog
IOKUgiAJICBWaXNpdC50ZXJtIGkgdA0KICDilIIgDQogIOKUgiAgIGxldCBz
ID0gZm9sZCAwIChtb2R1bGUgc3RydWN0DQogIOKUgiAgICAgICB0eXBlIHQg
PSBpbnQNCiAg4pSCICAgICAgIGxldCB0ZXJtIHggXyA9IHggKyAxDQogIOKU
giAgICAgZW5kKQ0KICDilJTilIDilIDilIDilIANCg0KICBBbmQgYWdhaW4s
IGl0IGlzIG5vdCBhYm91dCBHQURULiBHQURUIGFjdCBhcyBhIHJlZCBoZXJy
aW5nIGhlcmUuIEFzDQogIEkndmUgZGVtb25zdHJhdGVkIGVhcmxpZXIsIHVz
aW5nIGEgc2ltcGxlIHBhaXIgd2lsbCBzdWZmaWNlIHRvIGRpc3BsYXkNCiAg
dGhlIGxpbWl0YXRpb24gb2YgdGhlIHByZW5leCBwb2x5bW9ycGhpc20uIEV2
ZW4gbm8gQURUIGlzIHJlcXVpcmVkLA0KICBqdXN0IGFwcGx5IG9uZSB0ZXJt
IHRvIGFub3RoZXIgdHdvIGFuZCB5b3Ugd2lsbCBnZXQgdGhlbSB1bmlmaWVk
LA0KICBlLmcuLA0KDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgbGV0IGYg
ZyB4IHkgOiB1bml0ID0gZyB4OyBnIHkNCiAg4pSU4pSA4pSA4pSA4pSADQoN
CiAgd2lsbCBoYXZlIHR5cGUNCg0KICDilIzilIDilIDilIDilIANCiAg4pSC
IHZhbCBmIDogKCdhIC0+IHVuaXQpIC0+ICdhIC0+ICdhIC0+IHVuaXQNCiAg
4pSU4pSA4pSA4pSA4pSADQoNCiAgYmVjYXVzZSAnYSBpcyBxdWFudGlmaWVk
IG9uIHRoZSBzY29wZSBvZiBgZicgbm90IGBnJywgaW4gb3RoZXIgd29yZHMs
DQogIGl0IGhhcyB0eXBlIChub3QgYW4gT0NhbWwgc3ludGF4KQ0KDQogIOKU
jOKUgOKUgOKUgOKUgA0KICDilIIgdmFsIGYgOiBmb3JhbGwgJ2EuICgnYSAt
PiB1bml0KSAtPiAnYSAtPiAnYSAtPiB1bml0DQogIOKUlOKUgOKUgOKUgOKU
gA0KDQogIHdoaWxlIHdlIHdvdWxkIGxpa2UgdG8gaGF2ZSBhIHR5cGUNCg0K
ICDilIzilIDilIDilIDilIANCiAg4pSCIHZhbCBmIDogZm9yYWxsICdiLCAn
Yy4gKGZvcmFsbCAnYS4gJ2EgLT4gdW5pdCkgLT4gJ2IgLT4gJ2MgLT4gdW5p
dA0KICDilJTilIDilIDilIDilIANCg0KICBPQ2FtbCBkb2Vzbid0IGFsbG93
IHVzIHRvIGRlZmluZSB0eXBlcyBsaWtlIGAoJ2EuICdhIC0+ICdhKScgYW5k
IHRoZQ0KICByZWFzb24gaXMgbm90IHRoYXQgaXQgaXMgaGFyZCB0byBleHRl
bmQgdGhlIHBhcnNlciBpdCBpc+KApg0KDQogICAgICAgIEkgd29uZGVyLCBp
cyB0aGlzIGp1c3QgYSBsaW1pdGF0aW9uIG9mIHRoZSBPQ2FtbCBwYXJzZXIg
b3INCiAgICAgICAgaXMgdGhlcmUgc29tZSBkZWVwIHJlYXNvbiBmb3IgdGhl
c2Ugd29yay1hcm91bmQgKGxpa2UgaXMNCiAgICAgICAgdGhlIGNhc2UsIGZy
b20gbXkgdW5kZXJzdGFuZGluZywgZm9yIHRoZSB2YWx1ZQ0KICAgICAgICBy
ZXN0cmljdGlvbik/DQoNCiAgWWVwLCBnb29kIGNhdGNoISBJdCBpcyBiZWNh
dXNlIG9mIHRoZSBpbXB1cml0eS4gSW5kZWVkLCBIYXNrZWxsIGhhcw0KICB0
aGUgUmFuazJUeXBlcyBleHRlbnNpb24gdGhhdCBsZXRzIHVzIHdyaXRlIHR5
cGVzIGxpa2UgYChmb3JhbGwgYS4gYQ0KICAtPiAoKSkgLT4gYiAtPiBjIC0+
ICgpJywgd2l0aCBubyBleHRyYSBzeW50YWN0aWMgYnVyZGVuIChtb2R1bG8g
aGF2aW5nDQogIHRvIHByb3ZpZGUgdGhlIHR5cGUgYW5ub3RhdGlvbikuIEJ1
dCBmdW5jdGlvbnMgaW4gSGFza2VsbCBhcmUgcHVyZSwNCiAgdGhlcmVmb3Jl
IGl0IGlzIHBvc3NpYmxlLiBUbyBtYWtlIHRoZSBzdG9yeSBzaG9ydCBhbmQg
b2J2aW91cywgbGV0IG1lDQogIGRvIGEgc2ltcGxlIGRlbW9uc3RyYXRpb24g
b2YgaG93IHRoaW5ncyBjYW4gZ28gd3JvbmcgaW4gYSBsYW5ndWFnZQ0KICB3
aXRoIHNpZGUtZWZmZWN0cy4gIExldCdzIGdvIGJhY2sgdG8gdGhlIHNpbXBs
ZSBleGFtcGxlIG9mIHBhaXJzIGFuZA0KICB0aGUgaWRlbnRpdHkgZnVuY3Rp
b24uICBDb25zaWRlciB0aGUgZm9sbG93aW5nIG5hc3R5IGlkZW50aXR5DQog
IGZ1bmN0aW9uLA0KDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgbGV0IGJh
ZF9pZCAoKSA9DQogIOKUgiAgIGxldCBjYWNoZSA9IHJlZiBOb25lIGluDQog
IOKUgiAgIGZ1biB4IC0+IG1hdGNoIGNhY2hlLmNvbnRlbnRzIHdpdGgNCiAg
4pSCICAgICB8IE5vbmUgLT4gY2FjaGUgOj0gU29tZSB4OyB4DQogIOKUgiAg
ICAgfCBTb21lIGNhY2hlIC0+IGNhY2hlDQogIOKUlOKUgOKUgOKUgOKUgA0K
DQogIEl0IGhhcyB0eXBlIGB1bml0IC0+ICdhIC0+ICdhJyB0aGVyZWZvcmUs
IGlmIHdlIHdvdWxkIGhhdmUgdGhlIHJhbmstMQ0KICBwb2x5bW9ycGhpc20g
ZW5hYmxlZCBmb3IgZnVuY3Rpb25zLCB3ZSBjb3VsZCBhcHBseSBpdCB0byB0
aGUgZnVuY3Rpb24NCg0KICDilIzilIDilIDilIDilIANCiAg4pSCIGxldCBt
YXAyIDogZnVuICgnYS4gJ2EgLT4gJ2EpIC0+ICdiIC0+ICdjIC0+ICdiICog
J2MgPSBmdW4gZiAoeCx5KSAtPiBmIHgsIGYgeQ0KICDilJTilIDilIDilIDi
lIANCg0KICBhcw0KDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgbGV0IHgs
eSA6IHN0cmluZyAqIGludCA9IG1hcDIgKGJhZF9pZCAoKSkgImhlbGxvIiwg
NDINCiAg4pSU4pSA4pSA4pSA4pSADQoNCiAgYW5kIHdpbGwgZ2V0IGEgc2Vn
bWVudGF0aW9uIGZhdWx0LCBhcyBgeScgd2lsbCBub3cgaGF2ZSB0eXBlIGlu
dCBidXQNCiAgaG9sZCBhIHN0cmluZy4NCg0KICBBbmQgaGVyZSBjb21lcyB0
aGUgc3ludGF4IGFzIGEgc2F2aW9yIGFzIGl0IGxldHMgdXMgc3BlY2lmeSBm
dW5jdGlvbnMNCiAgdGhhdCBhcmUgZ3VhcmFudGVlZCB0byBiZSBzeW50YWN0
aWMgdmFsdWVzLiBJbmRlZWQsIGFsbCB0aHJlZQ0KICBzb2x1dGlvbnMgc3lu
dGFjdGljYWxseSBndWFyYW50ZWUgdGhhdCB0aGUgcHJvdmlkZWQgYXJndW1l
bnQgaXMgYQ0KICBmdW5jdGlvbiwgbm90IGEgY2xvc3VyZS4gSW5kZWVkLCBs
ZXQncyBpbnRyb2R1Y2UgdGhlIHVuaXZlcnNhbA0KICBpZGVudGl0eSB2aWEg
YSByZWNvcmQsDQoNCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiB0eXBlIGlk
ID0geyBmIDogJ2EuICdhIC0+ICdhfQ0KICDilJTilIDilIDilIDilIANCg0K
ICBhbmQgd2UgY2FuIHNlZSB0aGF0IG91ciBgYmFkX2lkJyBpcyBub3QgYWNj
ZXB0ZWQgZHVlIHRvIHRoZSB2YWx1ZQ0KICByZXN0cmljdGlvbiwgd2hpbGUg
Z29vZF9pZCwgZGVmaW5lZCBhcywNCg0KICDilIzilIDilIDilIDilIANCiAg
4pSCIGxldCBnb29kX2lkIHggPSB4DQogIOKUlOKUgOKUgOKUgOKUgA0KDQog
IGlzIHBlcmZlY3RseSBmaW5lLCBlLmcuLA0KDQogIOKUjOKUgOKUgOKUgOKU
gA0KICDilIIgbGV0IGlkMSA9IHtmID0gZ29vZF9pZH0gKCphY2NlcHRlZCAq
KQ0KICDilIIgbGV0IGlkMiA9IHtmID0gYmFkX2lkfSAgICgqIHJlamVjdGVk
ICopDQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIG1vcmVvdmVyLCBldmVuIGEg
ZmluZSwgYnV0IG5vdCBzeW50YWN0aWMsIGlkZW50aXR5IGlzIGFsc28gcmVq
ZWN0ZWQNCg0KICDilIzilIDilIDilIDilIANCiAg4pSCIGxldCBmaW5lX2lk
ICgpIHggPSB4DQogIOKUgiBsZXQgaWQzID0ge2YgPSBmaW5lX2lkICgpfSAo
KiByZWplY3RlZCAqKQ0KICDilJTilIDilIDilIDilIANCg0KICB3aXRoIHRo
ZSBtZXNzYWdlDQoNCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBUaGlzIGZp
ZWxkIHZhbHVlIGhhcyB0eXBlICdiIC0+ICdiIHdoaWNoIGlzIGxlc3MgZ2Vu
ZXJhbCB0aGFuICdhLiAnYSAtPiAnYQ0KICDilJTilIDilIDilIDilIANCg0K
ICBUaGUgc2FtZSBpcyB0cnVlIHdpdGggbW9kdWxlcywNCg0KICDilIzilIDi
lIDilIDilIANCiAg4pSCIG1vZHVsZSB0eXBlIElkID0gc2lnDQogIOKUgiAg
IHZhbCBmIDogJ2EgLT4gJ2ENCiAg4pSCIGVuZA0KICDilIIgbW9kdWxlIElk
MSA6IElkID0gc3RydWN0IGxldCBmID0gZ29vZF9pZCBlbmQgICAoKiBhY2Nl
cHRlZCAqKQ0KICDilIIgbW9kdWxlIElkMiA6IElkID0gc3RydWN0IGxldCBm
ID0gYmFkX2lkICgpIGVuZCAoKiByZWplY3RlZCAqKQ0KICDilIIgbW9kdWxl
IElkMyA6IElkID0gc3RydWN0IGxldCBmID0gZmluZV9pZCAoKSBlbmQgKCog
cmVqZWN0ZWQgKikNCiAg4pSU4pSA4pSA4pSA4pSADQoNCiAgYW5kIHdpdGgg
b2JqZWN0cyAobGVmdCBhcyBhbiBleGVyY2lzZSkuDQoNCiAgVG8gc3VtbWFy
aXplLCBpbiBvcmRlciB0byBlbmFibGUgcmFuazIgcG9seW1vcnBoaXNtIHdl
IG5lZWQgYSBzcGVjaWFsDQogIGtpbmQgb2YgdmFsdWVzIHRvIGJlYXIgdW5p
dmVyc2FsIGZ1bmN0aW9ucywgYXMgd2UgY2FuJ3QgcmVseSBvbg0KICBvcmRp
bmFyeSBmdW5jdGlvbnMsIHdoaWNoIGNvdWxkIGJlIGNvbnN0cnVjdGVkIHVz
aW5nIHBhcnRpYWwNCiAgYXBwbGljYXRpb24uIE9DYW1sIGFscmVhZHkgaGFk
IG9iamVjdHMgYW5kIHJlY29yZHMsIHdoaWNoIHNlcnZlIGFzIGENCiAgZmlu
ZSBtZWRpYSBmb3IgdW5pdmVyc2FsbHkgcXVhbnRpZmllZCBmdW5jdGlvbnMu
IExhdGVyIGZpcnN0IGNsYXNzDQogIG1vZHVsZXMgd2VyZSBpbnRyb2R1Y2Vk
LCB3aGljaCBjb3VsZCBhbHNvIGJlIHVzZWQgZm9yIHRoZSBzYW1lDQogIHB1
cnBvc2UuIFByb2JhYmx5LCBvbmUgY291bGQgZGV2aXNlIGEgc3BlY2lhbCBz
eW50YXggKG9yIHJlbHkgb24gdGhlDQogIG5ldyBhdHRyaWJ1dGVzIGFuZCBl
eHRlbnNpb25zIHN5bnRheCwgZS5nLiwgYG1hcDIgWyVyYW5rMiA6IGZ1biB4
IC0+DQogIHhdICgiaGVsbG8iLDQyKScgYnV0IHByb2JhYmx5IHRoaXMgd2ls
bCBsZWFkIHRvIGFuIHVubmVjZXNzYXJ5DQogIGJsb2F0aW5nIG9mIHRoZSBs
YW5ndWFnZSBhbmQgdGhlIGltcGxlbWVudGF0aW9uLCBlc3BlY2lhbGx5IHNp
bmNlIHdlDQogIGFscmVhZHkgaGF2ZSB0aHJlZSBzb2x1dGlvbnMgd2l0aCBh
IG1vcmUgb3IgbGVzcyB0b2xlcmFibGUgc3ludGF4IChhbmQNCiAgYXJlIGlu
IHRoZSBiYXNlIGxhbmd1YWdlLCBub3QgYW4gZXh0ZW5zaW9uKS4gIEJlc2lk
ZXMsIGlmIHdlIHdpbGwgdXNlDQogIHRoZSBgW0BAdW5ib3hlZF0nIGFubm90
YXRpb24sIG9yIHZpc2l0b3Igd2lsbCBoYXZlIHRoZSBzYW1lDQogIHJlcHJl
c2VudGF0aW9uIGFzIGEgZnVuY3Rpb24sIGUuZy4sDQoNCiAg4pSM4pSA4pSA
4pSA4pSADQogIOKUgiB0eXBlICdyIHZpc2l0b3IgPSB7dmlzaXQgOiAnYS4g
J3IgLT4gJ2EgdGVybSAtPiAncn0gW0BAdW5ib3hlZF0NCiAg4pSCIGxldCBj
b3VudCB4IF8gPSB4ICsgMQ0KICDilIIgbGV0IGNvdW50ZXIgPSB7dmlzaXQ9
Y291bnR9DQogIOKUlOKUgOKUgOKUgOKUgA0KDQogIGFuZA0KDQogIOKUjOKU
gOKUgOKUgOKUgA0KICDilIIgIyBDb3JlX2tlcm5lbC5waHlzX3NhbWUgY291
bnQgY291bnRlcjs7DQogIOKUgiAtIDogYm9vbCA9IHRydWUNCiAg4pSU4pSA
4pSA4pSA4pSADQoNCiAgQ29uY2VybmluZyByYW5rLW4gcG9seW1vcnBoaXNt
LCBpbiBPQ2FtbCBpcyBpcyBhY2hpZXZlZCB1c2luZw0KICBmdW5jdG9ycy4g
IFllcywgdGhleSBhcmUgYSBsaXR0bGUgYml0IHN5bnRhY3RpY2FsbHkgaGVh
dnkgYW5kIGZvcmNlIHVzDQogIHRvIHdyaXRlIHNpZ25hdHVyZXMsIGJ1dCB0
aGlzIGlzIG5lY2Vzc2FyeSBhbnl3YXkgYXMgcmFuay1uIGlzDQogIHVuZGVj
aWRhYmxlIChub24taW5mZXJyYWJsZSkuIEZpbmFsbHksIGFzIGEgcmVhbC13
b3JsZCBleGFtcGxlIFsxXSBvZg0KICByYW5rLTIgcG9seW1vcnBoaXNtIGNv
bnNpZGVyIHRoZSB1bml2ZXJzYWwgV0FWTCB0cmVlIHRoYXQgaXMgYSBiaW5h
cnkNCiAgdHJlZSB3aXRoIGVhY2ggZWxlbWVudCBoYXZpbmcgYSBkaWZmZXJl
bnQgdHlwZSAoYWthIGhldGVyb2dlbmVvdXMNCiAgbWFwKS4gV2UgdXNlIGl0
IGluIEJBUCBhcyBhIGJhY2tpbmcgc3RvcmUuIFlvdSBtaWdodCBmaW5kIGEg
ZmV3IHRyaWNrcw0KICB0aGVyZSwgZXNwZWNpYWxseSB1c2luZyBjb250aW51
YXRpb24tcGFzc2luZyBpbiB0aGUgcmVjdXJzaXZlIGNhc2VzLg0KDQogIENo
ZWVycywgSXZhbg0KDQogIFsxXToNCiAgPGh0dHBzOi8vZ2l0aHViLmNvbS9C
aW5hcnlBbmFseXNpc1BsYXRmb3JtL2JhcC9ibG9iL2I0MDY4OWU2MzY2MDdi
OTc3NzU4YWYwNDhiNzlkNjU2ODRjZTQ4YzMvbGliL2tub3dsZWRnZS9iYXBf
a25vd2xlZGdlLm1sI0w4NDctTDE2OTM+DQoNCg0KTWFsY29sbSBNYXRhbGth
IGFza2VkIGFuZCBJdmFuIEdvdG92Y2hpdHMgcmVwbGllZA0K4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSADQoNCiAgICAgICAgV2h5IGlzIHR5cGUgY2hlY2tpbmcgY3JlYXRpbmcg
YSByZWNvcmQgZGlmZmVyZW50IHRoYW4gdHlwZQ0KICAgICAgICBjaGVja2lu
ZyBhIGZ1bmN0aW9uIGFyZ3VtZW50Pw0KDQogICAgICAgIElmIHdlIGhhZCB0
aGUgc3ludGF4IChvciBzb21ldGhpbmcgbGlrZSBpdCk6DQoNCiAgICAgICAg
bGV0IG1hcDIgOiAoJ2EuICdhIC0+ICdhKSAtPiAoJ2IgKiAnYykgLT4gKCdi
ICogJ2MpDQoNCiAgICAgICAgV2h5IHdvdWxkIHRoZSB0eXBlIGNoZWNrZXIg
bm90IGJlIGFibGUgdG8gc2VlIHRoYXQNCg0KICAgICAgICBtYXAyIGdvb2Rf
aWQgKCJoaSIsIDQyKQ0KDQogICAgICAgIGlzIHZhbGlkIGJ1dA0KDQogICAg
ICAgIG1hcDIgKGZpbmVfaWQgKCkpICgiaGkiLCAzMikNCg0KICAgICAgICBp
cyBub3QsIHVzaW5nIHRoZSBzYW1lIGxvZ2ljIHRoYXQgaXMgdmVyaWZ5aW5n
IGNyZWF0aW5nDQogICAgICAgIHRoZSAiaWQiIHJlY29yZCBpcyBub3QgdmFs
aWQ/DQoNCiAgSSBiZWxpZXZlIGl0IGlzIHBvc3NpYmxlLCBhcyBpdCBpcyBw
b3NzaWJsZSBpbiBIYXNrZWxsICh3aXRoDQogIFJhbmtOVHlwZXMgYW5kIFNj
b3BlZFR5cGVWYXJpYWJsZXMpLiBUaGUgbWFpbiAodGhlb3JldGljYWwpIGRp
ZmZlcmVuY2UNCiAgaXMgdGhhdCBpbiBPQ2FtbCB3ZSBuZWVkIHRvIGNoZWNr
IHdoZXRoZXIgYW4gZXhwcmVzc2lvbiBpcyBleHBhbnNpdmUNCiAgYW5kIHVz
ZSBhIHNwZWNpYWxpemVkIGdlbmVyYWxpemF0aW9uIGluIGNhc2UgaWYgaXQg
aXMgKGZvciB0aGUgcmVsYXhlZA0KICB2YWx1ZSByZXN0cmljdGlvbikuIEl0
IHdpbGwsIGhvd2V2ZXIsIGNvbXBsaWNhdGUgdGhlIHR5cGUgaW5mZXJlbmNl
DQogIGVuZ2luZSBhIGxvdCwgYnV0IG1vc3QgaW1wb3J0YW50bHksIGNoYW5n
aW5nIHRoZSB0eXBpbmcgcnVsZSBvZg0KICBmdW5jdGlvbnMgd2lsbCBoYXZl
IGEgdHJlbWVuZG91cyBpbXBhY3Qgb24gdGhlIGxhbmd1YWdlLiBTbyB0aGlz
IHdvdWxkDQogIGJlIGEgdmVyeSBpbXByYWN0aWNhbCBzb2x1dGlvbi4gIEVz
cGVjaWFsbHksIHNpbmNlIHdlIGRvbid0IGhhdmUgdGhlDQogIG1lY2hhbmlz
bSBvZiBsYW5ndWFnZSBleHRlbnNpb25zLCBlbmFibGluZyBSYW5rTlR5cGVz
IHdpbGwgbWFrZSBhIGxvdA0KICBvZiBwcm9ncmFtcyB1bnR5cGVhYmxlLCBh
cyB0aGV5IHdpbGwgbm93IHJlcXVpcmUgdHlwZSBhbm5vdGF0aW9ucw0KICAo
cmVjYWxsIHRoYXQgUmFua04gaXMgdW5kZWNpZGFibGUgaW4gZ2VuZXJhbCku
ICBJdCBjb3VsZCBwcm9iYWJseSBiZQ0KICBpbXBsZW1lbnRlZCBhcyBhIGNv
bXBpbGVyIGNvbW1hbmQgbGluZSBwYXJhbWV0ZXIsIGxpa2UgYC1yZWN0eXBl
cycgYnV0DQogIHRoaXMgd2lsbCBiZSBzdGlsbCBxdWl0ZSBpbXByYWN0aWNh
bCBzaW5jZSBtb3JlIG9mdGVuIGNvZGUgbGlrZSBgZnVuIGYNCiAgLT4gZiAx
LCBmIHRydWUnIGlzIGEgcHJvZ3JhbW1lciBlcnJvciwgcmF0aGVyIHRoYW4g
YSB0cnVlIHJlcXVlc3QgZm9yDQogIHVuaXZlcnNhbCBwb2x5bW9ycGhpc20g
KHRoZSBzYW1lIGFzIHdpdGggcmVjdHlwZXMsIHJlY3Vyc2l2ZSB0eXBlcyBh
DQogIG1vcmUgb2Z0ZW4gYW4gZXJyb3IgcmF0aGVyIHRoYW4gYSBkZWxpYmVy
YXRlIGF0dGVtcHQpLiBUaGVyZWZvcmUsDQogIGVuYWJsaW5nIFJhbmtOKF4x
KSBwb2x5bW9ycGhpc20gd2lsbCB0eXBlIHRvbyBtYW55IHByb2dyYW1zIChu
b3QgdGhhdA0KICBpdCBpcyB1bnNvdW5kLCBqdXN0IG1hbnkgcHJvZ3JhbXMg
d29uJ3QgaGF2ZSBzZW5zZSkgYXQgdGhlIGNvc3Qgb2YNCiAgZXZlbiBtb3Jl
IG9ic2N1cmUgdHlwZSBlcnJvcnMuIE9uIHRoZSBvdGhlciBoYW5kLCB3ZSBo
YXZlIHRocmVlDQogIHN5bnRhY3RpYyBjb25zdHJ1Y3RzIHRoYXQgbGV0IHVz
IGV4cHJlc3Mgbm9uLXByZW5leCBwb2x5bW9ycGhpc20gb2YNCiAgdGhlIG5l
Y2Vzc2FyeSByYW5rKF4yKSB3aXRob3V0IGJyZWFraW5nIGFueXRoaW5nIGVs
c2UuIFNvIGl0IGxvb2tzDQogIGxpa2UgYSBnb29kIGRlYWwgLSB3ZSBjYW4g
aGF2ZSByYW5rTiBwb2x5bW9ycGhpc20gYW5kIGRlY2lkYWJsZSB0eXBlDQog
IGNoZWNrZXIgYXQgdGhlIHNhbWUgdGltZS4gSnVzdCB0aGluayBvZiBwb2x5
bW9ycGhpYyByZWNvcmRzL21ldGhvZHMgYXMNCiAgYW4gZW1iZWRkZWQgRFNM
IGZvciByYW5rTiBwb2x5bW9ycGhpc20uDQoNCiAgYD09PT09PT09PT0nIEZv
b3Rub3RlczoNCg0KICAxKSBBbiBpbXBvcnRhbnQgcG9pbnQsIHRoYXQgSSBm
b3Jnb3QgdG8gbm90aWNlLCBpcyB0aGF0IGVuYWJsaW5nDQogICAgIHNjb3Bl
ZA0KICB0eXBlIHZhcmlhYmxlcywgd2lsbCBpbmV2aXRhYmx5IGVuYWJsZSBy
YW5rTiBwb2x5bW9ycGhpc20sIGUuZy4sIHNpbmNlDQogIG5vdyBhbnkgdHlw
ZSBjb3VsZCBiZSBhIHBvbHl0eXBlLCB0aGVuIHN1cHBvc2Ugd2UgaGF2ZSB0
eXBlDQogIGAnYS4gKCdiLidiIC0+ICdhKSAtPiAnYScgY291bGQgYmUgaW5z
dGFudGlhdGVkIHRvICdhID0gJ2QuICgnYy4gLT4NCiAgJ2QpIC0+ICdkLCBz
byB0aGF0IG91ciB0eXBlIGlzIG5vdyBgJ2QuICgnYi4gJ2IgLT4gKCdjLiAn
YyAtPiAnZCkgLT4NCiAgJ2QpIC0+ICgnYy4gJ2MgLT4gJ2QpIC0+ICdkJyB3
aGljaCBpcyBub3cgcmFuazMuIFRoZXJlZm9yZSwgZW5hYmxpbmcNCiAgYXJi
aXRyYXJ5IHF1YW50aWZpY2F0aW9uIGluIHRoZSBhcnJvdyB0eXBlIHdpbGwg
bGVhZCB0byByYW5rTiBhbmQNCiAgaW1tZWRpYXRlbHkgbWFrZSB1bmRlY2lk
YWJsZSBtb3N0IG9mIHRoZSB0eXBlIGNoZWNrZXIuDQoNCiAgMSkgV2UgY2Fu
IGNyYWZ0IGFyYml0cmFyeSByYW5rIHVzaW5nIHJlY29yZHMgd2l0aCB1bml2
ZXJzYWxseQ0KICAgICBxdWFudGlmaWVkDQogIHR5cGUgdmFyaWFibGVzLCBl
LmcuLCBoZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmFuazMgcG9seW1vcnBoaXNt
Og0KDQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgdHlwZSAnYSByYW5rMSA9
IHtmMSA6ICdzLiAncyAtPiAnYX0NCiAg4pSCIHR5cGUgJ2EgcmFuazIgPSB7
ZjIgOiAnci4gJ3IgLT4gJ2EgcmFuazF9DQogIOKUlOKUgOKUgOKUgOKUgA0K
DQogIEluZGVlZCwgYGYyJyBoYXMgdHlwZSBgJ2EuKCdyLiAnciAtPiAoJ3Mu
ICdzIC0+ICdhKScNCg0KDQpPQ2FtbFBybydzIG9wYW0gY2hlYXQgc2hlZXQs
IHdpdGggYSBuZXcgdGhlbWUhDQrilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZANCg0KICBBcmNoaXZlOg0KICA8aHR0
cHM6Ly9kaXNjdXNzLm9jYW1sLm9yZy90L3JmYy1vY2FtbHByb3Mtb3BhbS1j
aGVhdC1zaGVldC13aXRoLWEtbmV3LXRoZW1lLzQ2ODkvMz4NCg0KDQpUaG9t
YXMgQmxhbmMgYW5ub3VuY2VkDQrilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIANCg0K
ICBUaGUgb3BhbSBjaGVhdC1zaGVldCBpcyBub3cgcHVibGlzaGVkIGluIGl0
cyBmaW5hbCBmb3JtLg0KDQogIFlvdSBjYW4gZ2V0IHRoZSBbY29sb3JlZF0g
YW5kIFtibGFjay1hbmQtd2hpdGVdIHZlcnNpb25zIGZyb20gb3VyDQogIHdl
YnNpdGUuDQoNCiAgSGFwcHkgaGFja2luZyENCg0KDQpbY29sb3JlZF0NCjxo
dHRwOi8vd3d3Lm9jYW1scHJvLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAx
OS8xMS9vY2FtbC1vcGFtLnBkZj4NCg0KW2JsYWNrLWFuZC13aGl0ZV0NCjxo
dHRwOi8vd3d3Lm9jYW1scHJvLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAy
MC8wMS9vY2FtbC1vcGFtLWJ3LnBkZj4NCg0KDQpPQ2FtbCA0LjEwLjAsIGZp
cnN0IGJldGENCuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIEFy
Y2hpdmU6IDxodHRwczovL2Rpc2N1c3Mub2NhbWwub3JnL3Qvb2NhbWwtNC0x
MC0wLWZpcnN0LWJldGEvNDk4OS8xPg0KDQoNCm9jdGFjaHJvbiBhbm5vdW5j
ZWQNCuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKU
gOKUgOKUgOKUgOKUgOKUgA0KDQogIFRoZSByZWxlYXNlIG9mIE9DYW1sIDQu
MTAuMCBpcyBhcHByb2FjaGluZy4gV2UgaGF2ZSBwdWJsaXNoZWQgYSBmaXJz
dA0KICBiZXRhIHZlcnNpb24gdG8gaGVscCB5b3UgYWRhcHQgeW91ciBzb2Z0
d2FyZSB0byB0aGUgbmV3IGZlYXR1cmVzIGFoZWFkDQogIG9mIHRoZSByZWxl
YXNlLg0KDQogIER1cmluZyBvdXIgcHJlbGltaW5hcnkgdGVzdHMgZm9yIHRo
aXMgbmV3IGJldGEsIHdlIGRpc2NvdmVyZWQgdGhhdCB0aGUNCiAgcmVjZW50
IHdvcmsgdG93YXJkcyBhIG11bHRpY29yZS1yZWFkeSBPQ2FtbCBydW50aW1l
IGludHJvZHVjZWQNCiAgY29tcGF0aWJpbGl0eSBpc3N1ZXMgd2l0aGluIHNv
bWUgb3BhbSBwYWNrYWdlcywgdGhhdCB3ZXJlIHR3ZWFraW5nIHRoZQ0KICBy
dW50aW1lIGludGVybmFscy4gIE1vc3Qgb2YgdGhvc2Ugb3BhbSBwYWNrYWdl
cyBoYXZlIGJlZW4gZml4ZWQsIG9yDQogIHdpbGwgYmUgc29vbi4gIE5ldmVy
dGhlbGVzcywgaWYgeW91IGFyZSBhZmZlY3RlZCBieSBzdWNoIGNvbXBhdGli
aWxpdHkNCiAgaXNzdWUsIHBsZWFzZSBzcGVhayB1cC4NCg0KICBUaGUgc291
cmNlIGNvZGUgaXMgYXZhaWxhYmxlIGF0IHRoZXNlIGFkZHJlc3NlczoNCg0K
ICA8aHR0cHM6Ly9naXRodWIuY29tL29jYW1sL29jYW1sL2FyY2hpdmUvNC4x
MC4wK2JldGExLnRhci5nej4NCiAgPGh0dHBzOi8vY2FtbC5pbnJpYS5mci9w
dWIvZGlzdHJpYi9vY2FtbC00LjEwL29jYW1sLTQuMTAuMCtiZXRhMS50YXIu
Z3o+DQoNCiAgVGhlIGNvbXBpbGVyIGNhbiBhbHNvIGJlIGluc3RhbGxlZCBh
cyBhbiBPUEFNIHN3aXRjaCB3aXRoIG9uZSBvZiB0aGUNCiAgZm9sbG93aW5n
IGNvbW1hbmRzLg0KICDilIzilIDilIDilIDilIANCiAg4pSCIG9wYW0gc3dp
dGNoIGNyZWF0ZSBvY2FtbC12YXJpYW50cy40LjEwLjArYmV0YTEgLS1yZXBv
c2l0b3JpZXM9ZGVmYXVsdCxiZXRhPWdpdCtodHRwczovL2dpdGh1Yi5jb20v
b2NhbWwvb2NhbWwtYmV0YS1yZXBvc2l0b3J5LmdpdA0KICDilJTilIDilIDi
lIDilIANCiAgb3INCiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiBvcGFtIHN3
aXRjaCBjcmVhdGUgb2NhbWwtdmFyaWFudHMuNC4xMC4wK2JldGExKzxWQVJJ
QU5UPiAtLXJlcG9zaXRvcmllcz1kZWZhdWx0LGJldGE9Z2l0K2h0dHBzOi8v
Z2l0aHViLmNvbS9vY2FtbC9vY2FtbC1iZXRhLXJlcG9zaXRvcnkuZ2l0DQog
IOKUlOKUgOKUgOKUgOKUgA0KICB3aGVyZSB5b3UgcmVwbGFjZSA8VkFSSUFO
VD4gd2l0aCBvbmUgb2YgdGhlc2U6DQogIOKAoiBhZmwNCiAg4oCiIGZsYW1i
ZGENCiAg4oCiIGZwDQogIOKAoiBmcCtmbGFtYmRhDQoNCiAgV2Ugd2FudCB0
byBrbm93IGFib3V0IGFsbCBidWdzLiBQbGVhc2UgcmVwb3J0IHRoZW0gaGVy
ZToNCg0KICA8aHR0cHM6Ly9naXRodWIuY29tL29jYW1sL29jYW1sL2lzc3Vl
cz4NCg0KICBIYXBweSBoYWNraW5nLg0KDQoNCkthdGUgYWRkZWQNCuKUgOKU
gOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KDQogIEZvciB0aGUgcGVvcGxl
IHdhbnRpbmcgdG8gZ2l2ZSBPQ2FtbCA0LjEwLjBiZXRhMSBhIHNob3QsIGhl
cmUgaXMgYW4NCiAgb3BhbSBvdmVybGF5IHdoaWNoIGFkZHMgZml4ZXMgdG8g
bWFqb3IgcGFja2FnZXMgZm9yIHRoZW0gdG8gd29yayB3aXRoDQogIHRoaXMg
YmV0YTogPGh0dHBzOi8vZ2l0aHViLmNvbS9raXQtdHkta2F0ZS9vcGFtLWFs
cGhhLXJlcG9zaXRvcnk+DQoNCiAgVG8gdXNlIGl0LCBzaW1wbGUgY2FsbDoN
CiAg4pSM4pSA4pSA4pSA4pSADQogIOKUgiAkIG9wYW0gc3dpdGNoIDQuMTAN
CiAg4pSCICQgb3BhbSByZXBvc2l0b3J5IGFkZCBhbHBoYSBnaXQ6Ly9naXRo
dWIuY29tL2tpdC10eS1rYXRlL29wYW0tYWxwaGEtcmVwb3NpdG9yeS5naXQN
CiAg4pSU4pSA4pSA4pSA4pSADQoNCiAgT2J2aW91c2x5LCB0aGlzIHJlcG9z
aXRvcnkgc2hvdWxkIG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24gYW5kDQog
IHByb2JhYmx5IGNvbnRhaW5zIGEgZmV3IGJ1Z3MsIGJ1dCBhdCBsZWFzdCBp
dCBhbGxvd3MgZXZlcnlvbmUgdG8gaGF2ZQ0KICBhbG1vc3QgYXMgbWFueSBw
YWNrYWdlcyBhdmFpbGFibGUgYXMgd2l0aCBPQ2FtbCA0LjA5LiBPbmx5IDYw
aXNoDQogIHBhY2thZ2VzIGFyZSBzdGlsbCBub3QgYXZhaWxhYmxlLCBidXQg
YXBhcnQgZnJvbSB0aGUgbm90YWJsZSBleGNlcHRpb24NCiAgb2YgYG1lcmxp
bicgYWxsIHRoZSBlc3NlbnRpYWwgcGFja2FnZXMgYW5kIGRlcGVuZGVuY2ll
cyBhcmUgdGhlcmUuDQoNCiAgVGhpcyB3b3JrIGhhcyBiZWVuIHBhcnQgb2Yg
dGhlIHJlbGVhc2UtcmVhZHluZXNzIGVmZm9ydCBmb3VuZGVkIGJ5IHRoZQ0K
ICBPQ2FtbCBTb2Z0d2FyZSBGb3VuZGF0aW9uIGFzIGFubm91bmNlZCBoZXJl
Og0KICA8aHR0cHM6Ly9kaXNjdXNzLm9jYW1sLm9yZy90L2Fubi10aGUtb2Nh
bWwtc29mdHdhcmUtZm91bmRhdGlvbi80NDc2LzEzPg0KDQogIFRoZSByZXN0
IG9mIHRoZSBlZmZvcnQgaXMgZ29pbmcgdG8gYmUgcHV0IHRvd2FyZHMgaGF2
aW5nIGBtZXJsaW4nDQogIGF2YWlsYWJsZSBmb3IgT0NhbWwgNC4xMCBhbmQg
dXBzdHJlYW1pbmcgYWxsIHRoZSBmaXhlcyBmcm9tDQogIG9wYW0tYWxwaGEt
cmVwb3NpdG9yeSAobW9zdCBvZiB0aGVtIGhhdmUgUFJzIGFzc29jaWF0ZWQg
YWxyZWFkeSkuIEknbQ0KICBob3BlZnVsIGZvciB0aGVtIGJlIGFsbCB1cHN0
cmVhbWVkIGFuZCBhdmFpbGFibGUgYmVmb3JlIHRoZSBzdGFibGUNCiAgcmVs
ZWFzZSBvZiBPQ2FtbCA0LjEwLg0KDQoNCkRhdGEgZW5naW5lZXIgcG9zaXRp
b25zIGF0IEVsYXN0aWMsIFVTL0NhbmFkYS9XZXN0ZXJuIEV1cm9wZSAocHJv
eGltYXRlIHRvIE5BIHRpbWV6b25lcykNCuKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkA0KDQogIEFyY2hpdmU6DQogIDxodHRwczov
L2Rpc2N1c3Mub2NhbWwub3JnL3Qvam9iLWRhdGEtZW5naW5lZXItcG9zaXRp
b25zLWF0LWVsYXN0aWMtdXMtY2FuYWRhLXdlc3Rlcm4tZXVyb3BlLXByb3hp
bWF0ZS10by1uYS10aW1lem9uZXMvNDk5MS8xPg0KDQoNCkhlemVraWFoIENh
cnR5IGFubm91bmNlZA0K4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSADQoN
CiAgT3VyIHRlYW0gaGVyZSBhdCBbRWxhc3RpY10gaGFzIHBvc2l0aW9ucyBv
cGVuIGZvciBhIGZldyBzZWN1cml0eSBkYXRhDQogIGVuZ2luZWVycyAoYWth
IHdyYW5nbGVycyBvZiBkYXRhIGFuZCBhbGwgdGhlIHN5c3RlbXMgaW52b2x2
ZWQpLiAgV2UNCiAgYXJlIGEgZGlzdHJpYnV0ZWQgY29tcGFueSBzbyB5b3Ug
ZG9uJ3QgaGF2ZSB0byBiZSBjbG9zZSB0byBhbiBvZmZpY2UNCiAgdG8gYmUg
Y29uc2lkZXJlZC4gIEluZm9zZWMgaW5kdXN0cnkgZXhwZXJpZW5jZSBpcyBf
bm90XyByZXF1aXJlZCwNCiAgdGhvdWdoIG9mIGNvdXJzZSB3ZWxjb21lLiAg
V2UncmUgc3Vycm91bmRlZCBieSBleHBlcnRzIGluIHRoZSBmaWVsZCBzbw0K
ICB5b3UnbGwgaGF2ZSBsb3RzIG9mIG9wcG9ydHVuaXRpZXMgdG8gbGVhcm4g
YXMgeW91IGdvIQ0KDQogIFRoZSBvZmZpY2lhbCBwb3N0aW5ncyBhcmUgYXZh
aWxhYmxlIGhlcmUgKGJvdGggaGF2ZSB0aGUgc2FtZSB0ZXh0IGFuZA0KICBv
bmx5IGRpZmZlciBpbiB0aXRsZS9zZW5pb3JpdHkpOg0KICDigKIgU2VjdXJp
dHkgZGF0YSBlbmdpbmVlciAtDQogICAgPGh0dHBzOi8vam9icy5lbGFzdGlj
LmNvL2pvYnMvc2VjdXJpdHktc29sdXRpb25zL2FtZXItZGlzdHJpYnV0ZWQt
L3NlY3VyaXR5LWRhdGEtZW5naW5lZXIvMjAwNTE0MCMvPg0KICDigKIgU2Vu
aW9yIHNlY3VyaXR5IGRhdGEgZW5naW5lZXIgLQ0KICAgIDxodHRwczovL2pv
YnMuZWxhc3RpYy5jby9qb2JzL3NlY3VyaXR5LXNvbHV0aW9ucy9hbWVyLWRp
c3RyaWJ1dGVkLS9zZWN1cml0eS1zZW5pb3ItZGF0YS1lbmdpbmVlci8yMDA1
MTUyIy8+DQoNCiAgTGFuZ3VhZ2Utd2lzZSwgT0NhbWwvUmVhc29uIG1ha2Vz
IHVwIG1vc3Qgb2YgdGhlIGNvZGUgeW914oCZbGwgYmUNCiAgd29ya2luZyBv
bi4gUHl0aG9uIG1ha2VzIHVwIG1vc3Qgb2YgdGhlIHJlc3QsIGluIHBhcnRp
Y3VsYXIgdGFraW5nDQogIGFkdmFudGFnZSBvZiB0aGUgbWFjaGluZSBsZWFy
bmluZyBhbmQgbmF0dXJhbCBsYW5ndWFnZSBwcm9jZXNzaW5nDQogIGdvb2Rp
ZXMgdGhhdCBlY29zeXN0ZW0gcHJvdmlkZXMuIE1vc3Qgb2YgdGhlIHRvb2xz
IGFuZCBzZXJ2aWNlIHdlDQogIGRldmVsb3AgYXJlIGludGVybmFsbHkgZm9j
dXNlZCwgc3VwcG9ydGluZyBzZWN1cml0eSByZXNlYXJjaCBhbmQNCiAgaW1w
cm92ZW1lbnRzIHRvIHNlY3VyaXR5IHByb3RlY3Rpb25zIGZvciBvdXIgdXNl
cnMuIEZvciB0aG9zZQ0KICBzby1pbmNsaW5lZCwgdGhlcmUgYXJlIGxvdHMg
b2Ygb3Bwb3J0dW5pdGllcyB0byBwcmVzZW50IGF0IGFuZCBhdHRlbmQNCiAg
Y29uZmVyZW5jZXMsIHByZXNlbnQgd29yayBpbiBibG9nIHBvc3RzLCBjb250
cmlidXRlIHRvIG9wZW4gc291cmNlDQogIHNvZnR3YXJlIHByb2plY3RzIGFu
ZCBvdGhlcndpc2UgZW5nYWdlIHRoZSBjb21tdW5pdHkuDQoNCiAgVGhlIHBv
c2l0aW9ucyBhcmUgdmVyeSBzaW1pbGFyIHRvIG91ciBbbGFzdCBoaXJpbmcg
YW5ub3VuY2VtZW50XSwNCiAgdGhvdWdoIHdlIGhhZCBhIGRpZmZlcmVudCBu
YW1lIGF0IHRoYXQgcG9pbnQhDQoNCiAgUGxlYXNlIHJlYWNoIG91dCB0byBt
ZSBpZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zLiBJ4oCZbSBhdmFpbGFibGUg
b24gdGhlDQogIE9DYW1sIG9yIFJlYXNvbiBEaXNjb3JkIHNlcnZlcnMgb3Ig
YnkgZW1haWwgYXQNCiAgaGV6ZWtpYWguY2FydHlAZWxhc3RpYy5jby4NCg0K
DQpbRWxhc3RpY10gPGh0dHBzOi8vd3d3LmVsYXN0aWMuY28vPg0KDQpbbGFz
dCBoaXJpbmcgYW5ub3VuY2VtZW50XQ0KPGh0dHBzOi8vZGlzY3Vzcy5vY2Ft
bC5vcmcvdC9maWxsZWQtcG9zdGluZy1pcy1uby1sb25nZXItb3Blbi10aHJl
YXQtcmVzZWFyY2gtZW5naW5lZXItam9iLWVuZGdhbWUtdXMvMTkzNz4NCg0K
DQpSZWxlYXNlIG9mIG5hYm9yaXMgMC4xLjAgYSBzaW1wbGUgaHR0cCBzZXJ2
ZXINCuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKV
kOKVkA0KDQogIEFyY2hpdmU6DQogIDxodHRwczovL2Rpc2N1c3Mub2NhbWwu
b3JnL3QvcmVsZWFzZS1vZi1uYWJvcmlzLTAtMS0wLWEtc2ltcGxlLWh0dHAt
c2VydmVyLzQ5OTQvMT4NCg0KDQpTaGF3biBNY0dpbnR5IGFubm91bmNlZA0K
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSADQoNCiAgPGh0dHBzOi8vZ2l0aHVi
LmNvbS9zaGF3bi1tY2dpbnR5L25hYm9yaXM+DQoNCiAgSSBjb3VsZCB1c2Ug
aW5wdXQgb24gdGhlIEFQSSBhbmQgdGhlIGRvY3VtZW50YXRpb24uICBXb3Jr
aW5nIG9uIHRyeWluZw0KICB0byBpbXByb3ZlIGJvdGggYXQgdGhlIG1vbWVu
dC4NCg0KICBUaGUgZ29hbCB3YXMgdG8gY3JlYXRlIGEgdmVyeSBzaW1wbGUg
bGlicmFyeSBmb3IgYnVpbGRpbmcgUkVTVGZ1bCB0eXBlDQogIG9mIHdlYiBz
ZXJ2ZXJzLiAgTWFrZSBpdCBfdmVyeV8gZWFzeSB0byBtYW5hZ2UgaGFuZGxl
IHJlcXVlc3QvcmVzcG9uc2UNCiAgbGlmZWN5Y2xlIGFuZCBzZXNzaW9ucy4N
Cg0KICBJbiBteSBvcGluaW9uIHRoaXMgdHlwZSBvZiB3ZWIgc2VydmVyIGlz
IGEgZ3JlYXQgZW50cnkgcG9pbnQgZm9yIG5ldw0KICBkZXZlbG9wZXJzIGxv
b2tpbmcgdG8gZXhwbG9yZSB0aGUgT0NhbWwvUmVhc29uIHdvcmxkLg0KDQog
IFJlY2VudGx5IEkgaGF2ZSBmYWxsZW4gaW4gbG92ZSB3aXRoIE9DYW1sIGFu
ZCBSZWFzb24sIGFuZCBhcyBhIG1vc3RseQ0KICB3ZWIgY2VudGVyZWQgZGV2
ZWxvcGVyIEkndmUgZm91bmQgdGhpcyBhcmVhIHF1aXRlIGxhY2tpbmcuICBJ
J20gc3RpbGwNCiAgbmV3IHRvIHRoZSBsYW5ndWFnZSBhbmQgZWNvIHN5c3Rl
bSBzbyBhbnkgZ3VpZGFuY2Ugd291bGQgYmUgaGlnaGx5DQogIGFwcHJlY2lh
dGVkIQ0KDQoNCllhd2FyIEFtaW4gcmVwbGllZA0K4pSA4pSA4pSA4pSA4pSA
4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSADQoNCiAg
V293ISBJdCBzZWVtcyB3ZSBoYWQgbXVjaCB0aGUgc2FtZSBpZGVh4oCTT0Nh
bWwvUmVhc29uIG1vcmUgYWNjZXNzaWJsZQ0KICB0byB3ZWIgZGV2ZWxvcGVy
cyBuZXcgdG8gdGhlIGVjb3N5c3RlbSA6LUQgSSd2ZSBiZWVuIHdvcmtpbmcg
b24NCiAgc29tZXRoaW5nIHZlcnkgc2ltaWxhcjogPGh0dHBzOi8vZ2l0aHVi
LmNvbS95YXdhcmFtaW4vcmUtd2ViLz4NCg0KDQpVbHJpayBTdHJpZCBzYWlk
DQrilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIANCg0KICBUaGVyZSBpcyBhbHNvIG9waXVtIDxodHRwczovL2dpdGh1
Yi5jb20vcmdyaW5iZXJnL29waXVtPg0KDQogIEFuZCBtb3JwaCA8aHR0cHM6
Ly9naXRodWIuY29tL3JlYXNvbi1uYXRpdmUtd2ViL21vcnBoPiB0aGF0IGhh
cw0KICBzaW1pbGFyIGdvYWxzLg0KDQogIEl0IHdvdWxkIGJlIG5pY2UgaWYg
d2UgY291bGQgZWl0aGVyIGNyZWF0ZSBhIHNoYXJlZCBjb3JlIHRoYXQgYWxs
DQogIGNvdWxkIGJ1aWxkIGZyb20gb3IgY29sbGFib3JhdGUgb24gb25lLg0K
DQoNCmVzeUAwLjYuMCByZWxlYXNlDQrilZDilZDilZDilZDilZDilZDilZDi
lZDilZDilZDilZDilZDilZDilZDilZDilZDilZANCg0KICBBcmNoaXZlOiA8
aHR0cHM6Ly9kaXNjdXNzLm9jYW1sLm9yZy90L2Fubi1lc3ktMC02LTAtcmVs
ZWFzZS81MDEwLzE+DQoNCg0KQW5kcmV5IFBvcHAgYW5ub3VuY2VkDQrilIDi
lIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDi
lIDilIDilIDilIDilIANCg0KICBXZSd2ZSBqdXN0IHJlbGVhc2VkIGEgbmV3
IHZlcnNpb24gb2YgZXN5LiBZb3UgY2FuIGluc3RhbGwgaXQgd2l0aCBucG06
DQogIOKUjOKUgOKUgOKUgOKUgA0KICDilIIgJCBucG0gaW5zdGFsbCAtZyBl
c3lAMC42LjANCiAg4pSU4pSA4pSA4pSA4pSADQoNCiAgW2VzeV0gaXMgYSBw
YWNrYWdlLmpzb24gZHJpdmVuIHdvcmtmbG93IGZvciBuYXRpdmUgZGV2ZWxv
cG1lbnQgd2l0aA0KICBSZWFzb24vT0NhbWwgKGFuZCBldmVuIEMvQysrKS4g
SXQgcHJvdmlkZXMgcGVyLXByb2plY3QgYnVpbGQNCiAgZW52aXJvbm1lbnRz
IHdoaWNoIGFyZSBpc29sYXRlZCBmcm9tIGVhY2ggb3RoZXIgYnV0IHNoYXJl
IHVuZGVybHlpbmcNCiAgYnVpbGQgY2FjaGVzIHNvIGNyZWF0aW5nIG5ldyBl
bnZpcm9ubWVudHMgaXMgY2hlYXAuDQoNCiAgV2hpbGUgMC42LjAgaXMgbWFp
bmx5IGFib3V0ICJxdWFsaXR5LW9mLWxpZmUiIGltcHJvdmVtZW50cyBpdCBh
bHNvIGdvdA0KICBmZXcgbmV3IGZlYXR1cmVzIGluY2x1ZGluZyBhIGJhc2lj
IHN1cHBvcnQgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBvZg0KICB1bnVzZWQg
YnVpbGQgYXJ0aWZhY3RzLg0KDQogIEZvciBtb3JlIGluZm8gc2VlIGEgW2Js
b2cgcG9zdF0gYnkgQHByb21ldGhlYW5zYWNyaWZpY2Ugd2hpY2gNCiAgaGln
aGxpZ2h0cyBpbXBvcnRhbnQgdXBkYXRlcyBpbiAwLjYuMC4NCg0KDQpbZXN5
XSA8aHR0cHM6Ly9lc3kuc2g+DQoNCltibG9nIHBvc3RdIDxodHRwczovL2Vz
eS5zaC9ibG9nLzIwMjAvMDEvMTIvMC42LjAuaHRtbD4NCg0KDQpPbGQgQ1dO
DQrilZDilZDilZDilZDilZDilZDilZANCg0KICBJZiB5b3UgaGFwcGVuIHRv
IG1pc3MgYSBDV04sIHlvdSBjYW4gW3NlbmQgbWUgYSBtZXNzYWdlXSBhbmQg
SSdsbCBtYWlsDQogIGl0IHRvIHlvdSwgb3IgZ28gdGFrZSBhIGxvb2sgYXQg
W3RoZSBhcmNoaXZlXSBvciB0aGUgW1JTUyBmZWVkIG9mIHRoZQ0KICBhcmNo
aXZlc10uDQoNCiAgSWYgeW91IGFsc28gd2lzaCB0byByZWNlaXZlIGl0IGV2
ZXJ5IHdlZWsgYnkgbWFpbCwgeW91IG1heSBzdWJzY3JpYmUNCiAgW29ubGlu
ZV0uDQoNCiAgW0FsYW4gU2NobWl0dF0NCg0KDQpbc2VuZCBtZSBhIG1lc3Nh
Z2VdIDxtYWlsdG86YWxhbi5zY2htaXR0QHBvbHl0ZWNobmlxdWUub3JnPg0K
DQpbdGhlIGFyY2hpdmVdIDxodHRwOi8vYWxhbi5wZXRpdGVwb21tZS5uZXQv
Y3duLz4NCg0KW1JTUyBmZWVkIG9mIHRoZSBhcmNoaXZlc10gPGh0dHA6Ly9h
bGFuLnBldGl0ZXBvbW1lLm5ldC9jd24vY3duLnJzcz4NCg0KW29ubGluZV0g
PGh0dHA6Ly9saXN0cy5pZHlsbC5vcmcvbGlzdGluZm8vY2FtbC1uZXdzLXdl
ZWtseS8+DQoNCltBbGFuIFNjaG1pdHRdIDxodHRwOi8vYWxhbi5wZXRpdGVw
b21tZS5uZXQvPg0KDQo=

--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2020-01-14 Tue 15:04 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org mode" />
<style type=3D"text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type=3D"text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target =3D document.getElementById(id);
   if(null !=3D target) {
     elem.cacheClassElem =3D elem.className;
     elem.cacheClassTarget =3D target.className;
     target.className =3D "code-highlighted";
     elem.className   =3D "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target =3D document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className =3D elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className =3D elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"http://alan.petitepomme.net/cwn/2020.01.07.html">Previous Week</=
a> <a href=3D"http://alan.petitepomme.net/cwn/index.html">Up</a> <a href=3D=
"http://alan.petitepomme.net/cwn/2020.01.21.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of January 07 to 14, 202=
0.
</p>

<div id=3D"table-of-contents">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents">
<ul>
<li><a href=3D"#1">Calling a single function on every member of a GADT?</a>=
</li>
<li><a href=3D"#2">OCamlPro's opam cheat sheet, with a new theme!</a></li>
<li><a href=3D"#3">OCaml 4.10.0, first beta</a></li>
<li><a href=3D"#4">Data engineer positions at Elastic, US/Canada/Western Eu=
rope (proximate to NA timezones)</a></li>
<li><a href=3D"#5">Release of naboris 0.1.0 a simple http server</a></li>
<li><a href=3D"#6">esy@0.6.0 release</a></li>
<li><a href=3D"#orgfbe0b31">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-org3aaa880" class=3D"outline-2">
<h2 id=3D"1">Calling a single function on every member of a GADT?</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2020-01/msg0=
0007.html">https://sympa.inria.fr/sympa/arc/caml-list/2020-01/msg00007.html=
</a>
</p>
</div>

<div id=3D"outline-container-org63ec34f" class=3D"outline-3">
<h3 id=3D"org63ec34f">Ivan Gotovchits asked</h3>
<div class=3D"outline-text-3" id=3D"text-org63ec34f">
<p>
I'm basically trying to do the equivalent of this simple <code>fold</code> =
function:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">Simple</span> =3D
<span style=3D"color: #000000; font-weight: bold;">struct</span>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">term</span> =3D
     | <span style=3D"color: #000000; background-color: #ffffff;">Int</span=
> <span style=3D"color: #a020f0;">of</span> int
     | <span style=3D"color: #000000; background-color: #ffffff;">Add</span>
     | <span style=3D"color: #000000; background-color: #ffffff;">App</span=
> <span style=3D"color: #a020f0;">of</span> term * term

  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">rec</span> <span style=3D"color: #0=
000ff;">fold</span> <span style=3D"color: #a0522d;">i</span> <span style=3D=
"color: #a0522d;">f</span> =3D <span style=3D"color: #a020f0;">function</sp=
an>
    | <span style=3D"color: #000000; background-color: #ffffff;">Int</span>=
 _ <span style=3D"color: #a020f0;">as</span> t -&gt; f i t
    | <span style=3D"color: #000000; background-color: #ffffff;">Add</span>=
 -&gt; f i <span style=3D"color: #000000; background-color: #ffffff;">Add</=
span>
    | <span style=3D"color: #000000; background-color: #ffffff;">App</span>=
 (x, y) <span style=3D"color: #a020f0;">as</span> t -&gt; f (fold (fold i f=
 x) f y) t
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
&#x2026; but using a GADT:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module</span> <span style=3D"color: #228b22;">Gadt</span> =3D
<span style=3D"color: #000000; font-weight: bold;">struct</span>
  <span style=3D"color: #000000; font-weight: bold;">type</span> <span styl=
e=3D"color: #228b22;">_ term</span> =3D
     | <span style=3D"color: #000000; background-color: #ffffff;">Int</span=
> : int -&gt; int term
     | <span style=3D"color: #000000; background-color: #ffffff;">Add</span=
> : (int -&gt; int -&gt; int) term
     | <span style=3D"color: #000000; background-color: #ffffff;">App</span=
> : ('b -&gt; 'a) term * 'b term -&gt; 'a term

  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">rec</span> <span style=3D"color: #0=
000ff;">fold</span> :<span style=3D"color: #228b22;"> </span><span style=3D=
"color: #a020f0;">type</span><span style=3D"color: #228b22;"> a. 'r -&gt; (=
'r -&gt; _ term -&gt; 'r) -&gt; 'r </span>=3D <span style=3D"color: #a020f0=
;">fun</span> <span style=3D"color: #a0522d;">i</span> <span style=3D"color=
: #a0522d;">f</span> -&gt; <span style=3D"color: #a020f0;">function</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">Int</span>=
 _ <span style=3D"color: #a020f0;">as</span> t -&gt; f i t
    | <span style=3D"color: #000000; background-color: #ffffff;">Add</span>=
 -&gt; f i <span style=3D"color: #000000; background-color: #ffffff;">Add</=
span>
<span style=3D"color: #b22222;">(*</span>
<span style=3D"color: #b22222;">     ^ Error: This pattern matches values o=
f type (int -&gt; int -&gt; int) term</span>
<span style=3D"color: #b22222;">        but a pattern was expected which ma=
tches values of type int term</span>
<span style=3D"color: #b22222;">        Type int -&gt; int -&gt; int is not=
 compatible with type int</span>
<span style=3D"color: #b22222;">*)</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">App</span>=
 (x, y) <span style=3D"color: #a020f0;">as</span> t -&gt; f (fold (fold i f=
 x) f y) t
<span style=3D"color: #000000; font-weight: bold;">end</span>
</pre>
</div>

<p>
I've tried other variants of the syntax and got many encouragements but no =
green flag from the type-checker.
Why is the compiler expecting an int term in there? I though the whole poin=
t of the <code>type a. ...</code> syntax was to allow the matched type to v=
ary from one pattern to the next?
Is there a way to do this?
</p>
</div>
</div>


<div id=3D"outline-container-orgc11829a" class=3D"outline-3">
<h3 id=3D"orgc11829a">Ivan Gotovchits replied</h3>
<div class=3D"outline-text-3" id=3D"text-orgc11829a">
<p>
It is the limitation of the let-bound polymorphism. A parameter of a
function is monomorphic in its body. The classical example doesn't even
reference any GADT,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">example</span> <span style=
=3D"color: #a0522d;">f</span>  =3D f <span style=3D"color: #8b2252;">"hello=
"</span>, f 42
</pre>
</div>

<p>
It won't compile even though we can provide a polymorphic function that can
applied both to integers and to strings, e.g., <code>exampe (fun x -&gt; x)=
</code> should
be possible, but not, because of the let-bounded polymorphism. There are a
few solutions available in OCaml, the simplest is to use records, e.g.,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">app</span> =3D {apply : 'a=
. 'a -&gt; 'a}

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">example</span> {<span style=3D"color: #a0522d;">apply<=
/span>} =3D apply <span style=3D"color: #8b2252;">"hello"</span>, apply 42<=
span style=3D"color: #ff4500;">;;</span>

<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">example</span> : app -&gt; string * int =3D &lt;<span =
style=3D"color: #a020f0;">fun</span>&gt;
</pre>
</div>

<p>
Now we have <code>app</code> that is polymorphic.
In your case, I would define a visitor type, e.g.,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">'r visitor</span> =3D {vis=
it : 'a. 'a term -&gt; 'r -&gt; 'r}

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">rec</span> <span style=3D"color: #a=
0522d;">fold</span> :<span style=3D"color: #228b22;"> </span><span style=3D=
"color: #a020f0;">type</span><span style=3D"color: #228b22;"> a. 'r -&gt; '=
r visitor -&gt; a term -&gt; 'r </span>=3D
  <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0522d;=
">i</span> <span style=3D"color: #a0522d;">f</span> <span style=3D"color: #=
a0522d;">t</span> -&gt; <span style=3D"color: #a020f0;">match</span> t <spa=
n style=3D"color: #a020f0;">with</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">Int</span>=
 _ <span style=3D"color: #a020f0;">as</span> t -&gt; f.visit i t
    | <span style=3D"color: #000000; background-color: #ffffff;">Add</span>=
 <span style=3D"color: #a020f0;">as</span> t -&gt; f.visit i t
    | <span style=3D"color: #000000; background-color: #ffffff;">App</span>=
 (x,y) <span style=3D"color: #a020f0;">as</span> t -&gt;
        <span style=3D"color: #000000; font-weight: bold;">let</span> <span=
 style=3D"color: #a0522d;">i</span> =3D fold i f x <span style=3D"color: #0=
00000; font-weight: bold;">in</span>
        <span style=3D"color: #000000; font-weight: bold;">let</span> <span=
 style=3D"color: #a0522d;">i</span> =3D fold i f y <span style=3D"color: #0=
00000; font-weight: bold;">in</span>
        f.visit i t
</pre>
</div>
</div>
</div>


<div id=3D"outline-container-org525c0e6" class=3D"outline-3">
<h3 id=3D"org525c0e6">Jacques Garrigue also replied</h3>
<div class=3D"outline-text-3" id=3D"text-org525c0e6">
<p>
Actually, this is a rare case where using a polymorphic method may be
handy too:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #000000; font-weight: bold;">rec</spa=
n> <span style=3D"color: #a0522d;">fold</span> : <span style=3D"color: #a02=
0f0;">type</span> <span style=3D"color: #228b22;">a</span> <span style=3D"c=
olor: #a0522d;">r</span>. <span style=3D"color: #a0522d;">r</span> -&gt; &l=
t;<span style=3D"color: #a0522d;">v</span> :<span style=3D"color: #228b22;"=
> 'b. r -&gt; 'b term -&gt; r&gt; -&gt; a term -&gt; r </span>=3D
     <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a052=
2d;">i</span> <span style=3D"color: #a0522d;">f</span> -&gt; <span style=3D=
"color: #a020f0;">function</span>
     | <span style=3D"color: #000000; background-color: #ffffff;">Int</span=
> _ <span style=3D"color: #a020f0;">as</span> t -&gt; f#v i t
     | <span style=3D"color: #000000; background-color: #ffffff;">Add</span=
> -&gt; f#v i <span style=3D"color: #000000; background-color: #ffffff;">Ad=
d</span>
     | <span style=3D"color: #000000; background-color: #ffffff;">App</span=
> (x, y) <span style=3D"color: #a020f0;">as</span> t -&gt; f#v (fold (fold =
i f x) f y) t

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">v</span> =3D
   <span style=3D"color: #000000; font-weight: bold;">object</span> <span s=
tyle=3D"color: #000000; font-weight: bold;">method</span> <span style=3D"co=
lor: #0000ff;">v</span> :<span style=3D"color: #228b22;"> </span><span styl=
e=3D"color: #a020f0;">type</span><span style=3D"color: #228b22;"> a. _ -&gt=
; a </span><span style=3D"color: #228b22;">Gadt.</span><span style=3D"color=
: #228b22;">term -&gt; _ </span>=3D
     <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a052=
2d;">x</span> -&gt; <span style=3D"color: #a020f0;">function</span>
       | <span style=3D"color: #000000; background-color: #ffffff;">Int</sp=
an> n -&gt; x+n
       | <span style=3D"color: #000000; background-color: #ffffff;">Add</sp=
an> -&gt; x+1
       | <span style=3D"color: #000000; background-color: #ffffff;">App</sp=
an> _ -&gt; x+2
   <span style=3D"color: #000000; font-weight: bold;">end</span>

<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">r</span> =3D <span style=3D"color: #228b22;">Gadt.</sp=
an>fold 0 v (<span style=3D"color: #000000; background-color: #ffffff;">App=
</span> (<span style=3D"color: #000000; background-color: #ffffff;">App</sp=
an> (<span style=3D"color: #000000; background-color: #ffffff;">Add</span>,=
 <span style=3D"color: #000000; background-color: #ffffff;">Int</span> 3), =
<span style=3D"color: #000000; background-color: #ffffff;">Int</span> 5))
</pre>
</div>

<p>
The point being that to match on a Gadt you will anyway need to use the
(type a) construct to allow refinement.
</p>
</div>
</div>


<div id=3D"outline-container-orgc7f929e" class=3D"outline-3">
<h3 id=3D"orgc7f929e">rixed asked and Ivan Gotovchits replied</h3>
<div class=3D"outline-text-3" id=3D"text-orgc7f929e">
<blockquote>
<p>
So there is no lighter syntax to specify that <code>f</code> should accept =
any member
of a GADT than the syntax to specify that <code>f</code> should accept any =
type at all?
</p>
</blockquote>

<p>
Only three methods of introducing rank-2 polymorphism are known to me:
</p>
<ol class=3D"org-ol">
<li>records</li>
<li>objects</li>
<li>first-class modules</li>
</ol>

<p>
Jacques has demonstrated the solution with objects, which might be a little
bit more lightweight, at least as you don't need to define a new data type
beforehand. But the invocation is more verbose and requires an annotation
from the caller side, which could be confusing. The third solution relies
on first-class modules and is even more verbose, at least on the definition
side. Just for the sake of completeness,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml">  <span style=3D"color: #000000; font-weight: =
bold;">module type</span> <span style=3D"color: #228b22;">Visitor</span> =
=3D <span style=3D"color: #000000; font-weight: bold;">sig</span>
    <span style=3D"color: #000000; font-weight: bold;">type</span> <span st=
yle=3D"color: #228b22;">t</span>
    <span style=3D"color: #000000; font-weight: bold;">val</span> <span sty=
le=3D"color: #0000ff;">term</span> : t -&gt; 'a term -&gt; t
  <span style=3D"color: #000000; font-weight: bold;">end</span>

  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #000000; font-weight: bold;">rec</span> <span style=3D"color: #a=
0522d;">fold</span> :<span style=3D"color: #228b22;"> </span><span style=3D=
"color: #a020f0;">type</span><span style=3D"color: #228b22;"> a r. r -&gt; =
(</span><span style=3D"color: #000000; font-weight: bold;">module</span><sp=
an style=3D"color: #228b22;"> </span><span style=3D"color: #228b22;">Visito=
r</span><span style=3D"color: #228b22;"> </span><span style=3D"color: #0000=
00; font-weight: bold;">with type</span><span style=3D"color: #228b22;"> t =
</span>=3D r) -&gt; a term
-&gt; r =3D
    <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0522=
d;">i</span> ((<span style=3D"color: #a020f0;">module</span> <span style=3D=
"color: #228b22;">Visit</span>) <span style=3D"color: #a020f0;">as</span> <=
span style=3D"color: #a0522d;">f</span>) <span style=3D"color: #a0522d;">t<=
/span> -&gt; <span style=3D"color: #a020f0;">match</span> t <span style=3D"=
color: #a020f0;">with</span>
      | <span style=3D"color: #000000; background-color: #ffffff;">Int</spa=
n> _ <span style=3D"color: #a020f0;">as</span> t -&gt; <span style=3D"color=
: #228b22;">Visit.</span>term i t
      | <span style=3D"color: #000000; background-color: #ffffff;">Add</spa=
n> <span style=3D"color: #a020f0;">as</span> t -&gt; <span style=3D"color: =
#228b22;">Visit.</span>term i t
      | <span style=3D"color: #000000; background-color: #ffffff;">App</spa=
n> (x,y) <span style=3D"color: #a020f0;">as</span> t -&gt;
          <span style=3D"color: #000000; font-weight: bold;">let</span> <sp=
an style=3D"color: #a0522d;">i</span> =3D fold i f x <span style=3D"color: =
#000000; font-weight: bold;">in</span>
          <span style=3D"color: #000000; font-weight: bold;">let</span> <sp=
an style=3D"color: #a0522d;">i</span> =3D fold i f y <span style=3D"color: =
#000000; font-weight: bold;">in</span>
          <span style=3D"color: #228b22;">Visit.</span>term i t

  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">s</span> =3D fold 0 (<span style=3D"color: #000000; fo=
nt-weight: bold;">module</span> <span style=3D"color: #000000; font-weight:=
 bold;">struct</span>
      <span style=3D"color: #000000; font-weight: bold;">type</span> <span =
style=3D"color: #228b22;">t</span> =3D int
      <span style=3D"color: #000000; font-weight: bold;">let</span> <span s=
tyle=3D"color: #0000ff;">term</span> <span style=3D"color: #a0522d;">x</spa=
n> <span style=3D"color: #a0522d;">_</span> =3D x + 1
    <span style=3D"color: #000000; font-weight: bold;">end</span>)
</pre>
</div>

<p>
And again, it is not about GADT. GADT act as a red herring here. As I've
demonstrated earlier, using a simple pair will suffice to display the
limitation of the prenex polymorphism. Even no ADT is required, just apply
one term to another two and you will get them unified, e.g.,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">f</span> <span style=3D"col=
or: #a0522d;">g</span> <span style=3D"color: #a0522d;">x</span> <span style=
=3D"color: #a0522d;">y</span> :<span style=3D"color: #228b22;"> unit </span=
>=3D g x; g y
</pre>
</div>

<p>
will have type
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">val</span> <span style=3D"color: #0000ff;">f</span> : ('a -&gt; unit) =
-&gt; 'a -&gt; 'a -&gt; unit
</pre>
</div>

<p>
because 'a is quantified on the scope of <code>f</code> not <code>g</code>,=
 in other words, it
has type (not an OCaml syntax)
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">val</span> <span style=3D"color: #0000ff;">f</span> : forall 'a. ('a -=
&gt; unit) -&gt; 'a -&gt; 'a -&gt; unit
</pre>
</div>

<p>
while we would like to have a type
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">val</span> <span style=3D"color: #0000ff;">f</span> : forall 'b, 'c. (=
forall 'a. 'a -&gt; unit) -&gt; 'b -&gt; 'c -&gt; unit
</pre>
</div>

<p>
OCaml doesn't allow us to define types like <code>('a. 'a -&gt; 'a)</code> =
and the reason
is not that it is hard to extend the parser it is&#x2026;
</p>

<blockquote>
<p>
I wonder, is this just a limitation of the OCaml parser or is there some
deep reason for these work-around (like is the case, from my understanding,
for the value restriction)?
</p>
</blockquote>

<p>
Yep, good catch! It is because of the impurity. Indeed, Haskell has the
Rank2Types extension that lets us write types like <code>(forall a. a -&gt;=
 ()) -&gt;
b -&gt; c -&gt; ()</code>, with no extra syntactic burden (modulo having to=
 provide the
type annotation). But functions in Haskell are pure, therefore it is
possible. To make the story short and obvious, let me do a simple
demonstration of how things can go wrong in a language with side-effects.
Let's go back to the simple example of pairs and the identity function.
Consider the following nasty identity function,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">bad_id</span> () =3D
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">cache</span> =3D <span style=3D"color: #483d8b;">ref</=
span> <span style=3D"color: #000000; background-color: #ffffff;">None</span=
> <span style=3D"color: #000000; font-weight: bold;">in</span>
  <span style=3D"color: #a020f0;">fun</span> <span style=3D"color: #a0522d;=
">x</span> -&gt; <span style=3D"color: #a020f0;">match</span> cache.content=
s <span style=3D"color: #a020f0;">with</span>
    | <span style=3D"color: #000000; background-color: #ffffff;">None</span=
> -&gt; cache :=3D <span style=3D"color: #000000; background-color: #ffffff=
;">Some</span> x; x
    | <span style=3D"color: #000000; background-color: #ffffff;">Some</span=
> cache -&gt; cache
</pre>
</div>

<p>
It has type <code>unit -&gt; 'a -&gt; 'a</code> therefore, if we would have=
 the rank-1
polymorphism enabled for functions, we could apply it to the function
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">map2</span> :<span style=3D=
"color: #228b22;"> </span><span style=3D"color: #a020f0;">fun</span><span s=
tyle=3D"color: #228b22;"> ('a. 'a -&gt; 'a) -&gt; 'b -&gt; 'c -&gt; 'b * 'c=
 </span>=3D <span style=3D"color: #a020f0;">fun</span> <span style=3D"color=
: #a0522d;">f</span> (<span style=3D"color: #a0522d;">x</span>,<span style=
=3D"color: #a0522d;">y</span>) -&gt; f x, f y
</pre>
</div>

<p>
as
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">x</span>,<span style=3D"col=
or: #a0522d;">y</span> :<span style=3D"color: #228b22;"> string * int </spa=
n>=3D map2 (bad_id ()) <span style=3D"color: #8b2252;">"hello"</span>, 42
</pre>
</div>

<p>
and will get a segmentation fault, as <code>y</code> will now have type int=
 but hold a
string.
</p>

<p>
And here comes the syntax as a savior as it lets us specify functions that
are guaranteed to be syntactic values. Indeed, all three solutions
syntactically guarantee that the provided argument is a function, not a
closure. Indeed, let's introduce the universal identity via a record,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">id</span> =3D { f : 'a. 'a=
 -&gt; 'a}
</pre>
</div>

<p>
and we can see that our <code>bad_id</code> is not accepted due to the value
restriction, while good_id, defined as,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">good_id</span> <span style=
=3D"color: #a0522d;">x</span> =3D x
</pre>
</div>

<p>
is perfectly fine, e.g.,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a0522d;">id1</span> =3D {f =3D good_=
id} <span style=3D"color: #b22222;">(*</span><span style=3D"color: #b22222;=
">accepted </span><span style=3D"color: #b22222;">*)</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">id2</span> =3D {f =3D bad_id}   <span style=3D"color: =
#b22222;">(* </span><span style=3D"color: #b22222;">rejected </span><span s=
tyle=3D"color: #b22222;">*)</span>
</pre>
</div>

<p>
moreover, even a fine, but not syntactic, identity is also rejected
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #0000ff;">fine_id</span> () <span sty=
le=3D"color: #a0522d;">x</span> =3D x
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">id3</span> =3D {f =3D fine_id ()} <span style=3D"color=
: #b22222;">(* </span><span style=3D"color: #b22222;">rejected </span><span=
 style=3D"color: #b22222;">*)</span>
</pre>
</div>

<p>
with the message
</p>

<pre class=3D"example">
This field value has type 'b -&gt; 'b which is less general than 'a. 'a -&g=
t; 'a
</pre>

<p>
The same is true with modules,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">module type</span> <span style=3D"color: #228b22;">Id</span> =3D <span=
 style=3D"color: #000000; font-weight: bold;">sig</span>
  <span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #0000ff;">f</span> : 'a -&gt; 'a
<span style=3D"color: #000000; font-weight: bold;">end</span>
<span style=3D"color: #000000; font-weight: bold;">module</span> <span styl=
e=3D"color: #228b22;">Id1</span> : <span style=3D"color: #228b22;">Id</span=
> =3D <span style=3D"color: #000000; font-weight: bold;">struct</span> <spa=
n style=3D"color: #000000; font-weight: bold;">let</span> <span style=3D"co=
lor: #a0522d;">f</span> =3D good_id <span style=3D"color: #000000; font-wei=
ght: bold;">end</span>   <span style=3D"color: #b22222;">(* </span><span st=
yle=3D"color: #b22222;">accepted </span><span style=3D"color: #b22222;">*)<=
/span>
<span style=3D"color: #000000; font-weight: bold;">module</span> <span styl=
e=3D"color: #228b22;">Id2</span> : <span style=3D"color: #228b22;">Id</span=
> =3D <span style=3D"color: #000000; font-weight: bold;">struct</span> <spa=
n style=3D"color: #000000; font-weight: bold;">let</span> <span style=3D"co=
lor: #a0522d;">f</span> =3D bad_id () <span style=3D"color: #000000; font-w=
eight: bold;">end</span> <span style=3D"color: #b22222;">(* </span><span st=
yle=3D"color: #b22222;">rejected </span><span style=3D"color: #b22222;">*)<=
/span>
<span style=3D"color: #000000; font-weight: bold;">module</span> <span styl=
e=3D"color: #228b22;">Id3</span> : <span style=3D"color: #228b22;">Id</span=
> =3D <span style=3D"color: #000000; font-weight: bold;">struct</span> <spa=
n style=3D"color: #000000; font-weight: bold;">let</span> <span style=3D"co=
lor: #a0522d;">f</span> =3D fine_id () <span style=3D"color: #000000; font-=
weight: bold;">end</span> <span style=3D"color: #b22222;">(* </span><span s=
tyle=3D"color: #b22222;">rejected </span><span style=3D"color: #b22222;">*)=
</span>
</pre>
</div>

<p>
and with objects (left as an exercise).
</p>

<p>
To summarize, in order to enable rank2 polymorphism we need a special kind
of values to bear universal functions, as we can't rely on ordinary
functions, which could be constructed using partial application. OCaml
already had objects and records, which serve as a fine media for
universally quantified functions. Later first class modules were
introduced, which could also be used for the same purpose. Probably, one
could devise a special syntax (or rely on the new attributes and extensions
syntax, e.g., <code>map2 [%rank2 : fun x -&gt; x] ("hello",42)</code> but p=
robably this
will lead to an unnecessary bloating of the language and the
implementation, especially since we already have three solutions with a
more or less tolerable syntax (and are in the base language, not an
extension).  Besides, if we will use the <code>[@@unboxed]</code> annotatio=
n, or
visitor will have the same representation as a function, e.g.,
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">'r visitor</span> =3D {vis=
it : 'a. 'r -&gt; 'a term -&gt; 'r} <span style=3D"color: #483d8b;">[@@unbo=
xed]</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #0000ff;">count</span> <span style=3D"color: #a0522d;">x</span> =
<span style=3D"color: #a0522d;">_</span> =3D x + 1
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #a0522d;">counter</span> =3D {visit=3Dcount}
</pre>
</div>

<p>
and
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"># <span style=3D"color: #228b22;">Core_kernel.=
</span>phys_same count counter<span style=3D"color: #ff4500;">;;</span>
- : bool =3D <span style=3D"color: #008b8b;">true</span>
</pre>
</div>

<p>
Concerning rank-n polymorphism, in OCaml is is achieved using functors.
Yes, they are a little bit syntactically heavy and force us to write
signatures, but this is necessary anyway as rank-n is undecidable
(non-inferrable). Finally, as a real-world example [1] of rank-2
polymorphism consider the universal WAVL tree that is a binary tree with
each element having a different type (aka heterogeneous map). We use it in
BAP as a backing store. You might find a few tricks there, especially using
continuation-passing in the recursive cases.
</p>

<p>
Cheers,
Ivan
</p>

<p>
[1]: <a href=3D"https://github.com/BinaryAnalysisPlatform/bap/blob/b40689e6=
36607b977758af048b79d65684ce48c3/lib/knowledge/bap_knowledge.ml#L847-L1693"=
>https://github.com/BinaryAnalysisPlatform/bap/blob/b40689e636607b977758af0=
48b79d65684ce48c3/lib/knowledge/bap_knowledge.ml#L847-L1693</a>
</p>
</div>
</div>


<div id=3D"outline-container-org97ec684" class=3D"outline-3">
<h3 id=3D"org97ec684">Malcolm Matalka asked and Ivan Gotovchits replied</h3>
<div class=3D"outline-text-3" id=3D"text-org97ec684">
<blockquote>
<p>
Why is type checking creating a record different than type checking a
function argument?
</p>

<p>
If we had the syntax (or something like it):
</p>

<p>
let map2 : ('a. 'a -&gt; 'a) -&gt; ('b * 'c) -&gt; ('b * 'c)
</p>

<p>
Why would the type checker not be able to see that
</p>

<p>
map2 good_id ("hi", 42)
</p>

<p>
is valid but
</p>

<p>
map2 (fine_id ()) ("hi", 32)
</p>

<p>
is not, using the same logic that is verifying creating the "id" record
is not valid?
</p>
</blockquote>

<p>
I believe it is possible, as it is possible in Haskell (with RankNTypes and
ScopedTypeVariables). The main (theoretical) difference is that in OCaml we
need to check whether an expression is expansive and use a specialized
generalization in case if it is (for the relaxed value restriction). It
will, however, complicate the type inference engine a lot, but most
importantly, changing the typing rule of functions will have a tremendous
impact on the language. So this would be a very impractical solution.
Especially, since we don't have the mechanism of language extensions,
enabling RankNTypes will make a lot of programs untypeable, as they will
now require type annotations (recall that RankN is undecidable in general).
It could probably be implemented as a compiler command line parameter, like
<code>-rectypes</code> but this will be still quite impractical since more =
often code
like <code>fun f -&gt; f 1, f true</code> is a programmer error, rather tha=
n a true
request for universal polymorphism (the same as with rectypes, recursive
types a more often an error rather than a deliberate attempt). Therefore,
enabling RankN(^1) polymorphism will type too many programs (not that it is
unsound, just many programs won't have sense) at the cost of even more
obscure type errors. On the other hand, we have three syntactic constructs
that let us express non-prenex polymorphism of the necessary rank(^2)
without breaking anything else. So it looks like a good deal - we can have
rankN polymorphism and decidable type checker at the same time. Just think
of polymorphic records/methods as an embedded DSL for rankN polymorphism.
</p>

<p>
<code>=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D</code>
Footnotes:
</p>

<ol class=3D"org-ol">
<li>An important point, that I forgot to notice, is that enabling scoped</l=
i>
</ol>
<p>
type variables, will inevitably enable rankN polymorphism, e.g., since now
any type could be a polytype, then suppose we have type <code>'a. ('b.'b -&=
gt; 'a)
-&gt; 'a</code> could be instantiated to 'a =3D 'd. ('c. -&gt;  'd) -&gt; '=
d, so that our
type is now <code>'d. ('b. 'b -&gt; ('c. 'c -&gt; 'd) -&gt; 'd) -&gt; ('c. =
'c -&gt; 'd) -&gt; 'd</code>
which is now rank3. Therefore, enabling arbitrary quantification in the
arrow type will lead to rankN and immediately make undecidable most of the
type checker.
</p>

<ol class=3D"org-ol">
<li>We can craft arbitrary rank using records with universally quantified</=
li>
</ol>
<p>
type variables, e.g., here is an example of rank3 polymorphism:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">type</span> <span style=3D"color: #228b22;">'a rank1</span> =3D {f1 : =
's. 's -&gt; 'a}
<span style=3D"color: #000000; font-weight: bold;">type</span> <span style=
=3D"color: #228b22;">'a rank2</span> =3D {f2 : 'r. 'r -&gt; 'a rank1}
</pre>
</div>

<p>
Indeed, <code>f2</code> has type <code>'a.('r. 'r -&gt; ('s. 's -&gt; 'a)</=
code>
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org1ba683e" class=3D"outline-2">
<h2 id=3D"2">OCamlPro's opam cheat sheet, with a new theme!</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/rfc-ocamlpros-opam-cheat-sh=
eet-with-a-new-theme/4689/3">https://discuss.ocaml.org/t/rfc-ocamlpros-opam=
-cheat-sheet-with-a-new-theme/4689/3</a>
</p>
</div>

<div id=3D"outline-container-org099685d" class=3D"outline-3">
<h3 id=3D"org099685d">Thomas Blanc announced</h3>
<div class=3D"outline-text-3" id=3D"text-org099685d">
<p>
The opam cheat-sheet is now published in its final form.
</p>

<p>
You can get the <a href=3D"http://www.ocamlpro.com/wp-content/uploads/2019/=
11/ocaml-opam.pdf">colored</a> and <a href=3D"http://www.ocamlpro.com/wp-co=
ntent/uploads/2020/01/ocaml-opam-bw.pdf">black-and-white</a> versions from =
our website.
</p>

<p>
Happy hacking!
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgbeea946" class=3D"outline-2">
<h2 id=3D"3">OCaml 4.10.0, first beta</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-4-10-0-first-beta/498=
9/1">https://discuss.ocaml.org/t/ocaml-4-10-0-first-beta/4989/1</a>
</p>
</div>

<div id=3D"outline-container-orgf3b2516" class=3D"outline-3">
<h3 id=3D"orgf3b2516">octachron announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgf3b2516">
<p>
The release of OCaml 4.10.0 is approaching. We have published
a first beta version to help you adapt your software to the new features
ahead of the release.
</p>

<p>
During our preliminary tests for this new beta, we discovered that the rece=
nt
work towards a multicore-ready OCaml runtime introduced compatibility issues
within some opam packages, that were tweaking the runtime internals.
Most of those opam packages have been fixed, or will be soon.
Nevertheless, if you are affected by such compatibility issue, please speak=
 up.
</p>

<p>
The source code is available at these addresses:
</p>

<p>
<a href=3D"https://github.com/ocaml/ocaml/archive/4.10.0+beta1.tar.gz">http=
s://github.com/ocaml/ocaml/archive/4.10.0+beta1.tar.gz</a> <br />
<a href=3D"https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+beta1.=
tar.gz">https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+beta1.tar=
.gz</a>
</p>

<p>
The compiler can also be installed as an OPAM switch with one of the
following commands.
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam switch create ocaml-variants.4.10.0+beta1=
 --repositories=3Ddefault,<span style=3D"color: #a0522d;">beta</span>=3Dgit=
+https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
or
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">opam switch create ocaml-variants.4.10.0+beta1=
+&lt;VARIANT&gt; --repositories=3Ddefault,<span style=3D"color: #a0522d;">b=
eta</span>=3Dgit+https://github.com/ocaml/ocaml-beta-repository.git
</pre>
</div>
<p>
where you replace &lt;VARIANT&gt; with one of these:
</p>
<ul class=3D"org-ul">
<li>afl</li>
<li>flambda</li>
<li>fp</li>
<li>fp+flambda</li>
</ul>

<p>
We want to know about all bugs. Please report them here:
</p>

<p>
<a href=3D"https://github.com/ocaml/ocaml/issues">https://github.com/ocaml/=
ocaml/issues</a>
</p>

<p>
Happy hacking.
</p>
</div>
</div>


<div id=3D"outline-container-orgb135b4c" class=3D"outline-3">
<h3 id=3D"orgb135b4c">Kate added</h3>
<div class=3D"outline-text-3" id=3D"text-orgb135b4c">
<p>
For the people wanting to give OCaml 4.10.0beta1 a shot, here is an opam ov=
erlay which adds fixes to major packages for them to work with this beta: <=
a href=3D"https://github.com/kit-ty-kate/opam-alpha-repository">https://git=
hub.com/kit-ty-kate/opam-alpha-repository</a>
</p>

<p>
To use it, simple call:
</p>
<pre class=3D"example">
$ opam switch 4.10
$ opam repository add alpha git://github.com/kit-ty-kate/opam-alpha-reposit=
ory.git
</pre>

<p>
Obviously, this repository should not be used in production and probably co=
ntains a few bugs, but at least it allows everyone to have almost as many p=
ackages available as with OCaml 4.09. Only 60ish packages are still not ava=
ilable, but apart from the notable exception of <code>merlin</code> all the=
 essential packages and dependencies are there.
</p>

<p>
This work has been part of the release-readyness effort founded by the OCam=
l Software Foundation as announced here: <a href=3D"https://discuss.ocaml.o=
rg/t/ann-the-ocaml-software-foundation/4476/13">https://discuss.ocaml.org/t=
/ann-the-ocaml-software-foundation/4476/13</a>
</p>

<p>
The rest of the effort is going to be put towards having <code>merlin</code=
> available for OCaml 4.10 and upstreaming all the fixes from opam-alpha-re=
pository (most of them have PRs associated already). I'm hopeful for them b=
e all upstreamed and available before the stable release of OCaml 4.10.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org5c9b87c" class=3D"outline-2">
<h2 id=3D"4">Data engineer positions at Elastic, US/Canada/Western Europe (=
proximate to NA timezones)</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/job-data-engineer-positions=
-at-elastic-us-canada-western-europe-proximate-to-na-timezones/4991/1">http=
s://discuss.ocaml.org/t/job-data-engineer-positions-at-elastic-us-canada-we=
stern-europe-proximate-to-na-timezones/4991/1</a>
</p>
</div>

<div id=3D"outline-container-orgc096a78" class=3D"outline-3">
<h3 id=3D"orgc096a78">Hezekiah Carty announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc096a78">
<p>
Our team here at <a href=3D"https://www.elastic.co/">Elastic</a> has positi=
ons open for a few security data engineers (aka wranglers of data and all t=
he systems involved).  We are a distributed company so you don't have to be=
 close to an office to be considered.  Infosec industry experience is <span=
 class=3D"underline">not</span> required, though of course welcome.  We're =
surrounded by experts in the field so you'll have lots of opportunities to =
learn as you go!
</p>

<p>
The official postings are available here (both have the same text and only =
differ in title/seniority):
</p>
<ul class=3D"org-ul">
<li>Security data engineer - <a href=3D"https://jobs.elastic.co/jobs/securi=
ty-solutions/amer-distributed-/security-data-engineer/2005140#/">https://jo=
bs.elastic.co/jobs/security-solutions/amer-distributed-/security-data-engin=
eer/2005140#/</a></li>
<li>Senior security data engineer - <a href=3D"https://jobs.elastic.co/jobs=
/security-solutions/amer-distributed-/security-senior-data-engineer/2005152=
#/">https://jobs.elastic.co/jobs/security-solutions/amer-distributed-/secur=
ity-senior-data-engineer/2005152#/</a></li>
</ul>

<p>
Language-wise, OCaml/Reason makes up most of the code you=E2=80=99ll be wor=
king on. Python makes up most of the rest, in particular taking advantage o=
f the machine learning and natural language processing goodies that ecosyst=
em provides. Most of the tools and service we develop are internally focuse=
d, supporting security research and improvements to security protections fo=
r our users. For those so-inclined, there are lots of opportunities to pres=
ent at and attend conferences, present work in blog posts, contribute to op=
en source software projects and otherwise engage the community.
</p>

<p>
The positions are very similar to our <a href=3D"https://discuss.ocaml.org/=
t/filled-posting-is-no-longer-open-threat-research-engineer-job-endgame-us/=
1937">last hiring announcement</a>, though we had a different name at that =
point!
</p>

<p>
Please reach out to me if you have any questions. I=E2=80=99m available on =
the OCaml or Reason Discord servers or by email at hezekiah.carty@elastic.c=
o.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-org605ec9a" class=3D"outline-2">
<h2 id=3D"5">Release of naboris 0.1.0 a simple http server</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/release-of-naboris-0-1-0-a-=
simple-http-server/4994/1">https://discuss.ocaml.org/t/release-of-naboris-0=
-1-0-a-simple-http-server/4994/1</a>
</p>
</div>

<div id=3D"outline-container-org4f37162" class=3D"outline-3">
<h3 id=3D"org4f37162">Shawn McGinty announced</h3>
<div class=3D"outline-text-3" id=3D"text-org4f37162">
<p>
<a href=3D"https://github.com/shawn-mcginty/naboris">https://github.com/sha=
wn-mcginty/naboris</a>
</p>

<p>
I could use input on the API and the documentation.  Working on trying to i=
mprove both at the moment.
</p>

<p>
The goal was to create a very simple library for building RESTful type of w=
eb servers.  Make it <span class=3D"underline">very</span> easy to manage h=
andle request/response lifecycle and sessions.
</p>

<p>
In my opinion this type of web server is a great entry point for new develo=
pers looking to explore the OCaml/Reason world.
</p>

<p>
Recently I have fallen in love with OCaml and Reason, and as a mostly web c=
entered developer I've found this area quite lacking.  I'm still new to the=
 language and eco system so any guidance would be highly appreciated!
</p>
</div>
</div>


<div id=3D"outline-container-org268713b" class=3D"outline-3">
<h3 id=3D"org268713b">Yawar Amin replied</h3>
<div class=3D"outline-text-3" id=3D"text-org268713b">
<p>
Wow! It seems we had much the same idea=E2=80=93OCaml/Reason more accessibl=
e to web developers new to the ecosystem :-D I've been working on something=
 very similar: <a href=3D"https://github.com/yawaramin/re-web/">https://git=
hub.com/yawaramin/re-web/</a>
</p>
</div>
</div>


<div id=3D"outline-container-orga9b9c7d" class=3D"outline-3">
<h3 id=3D"orga9b9c7d">Ulrik Strid said</h3>
<div class=3D"outline-text-3" id=3D"text-orga9b9c7d">
<p>
There is also opium <a href=3D"https://github.com/rgrinberg/opium">https://=
github.com/rgrinberg/opium</a>
</p>

<p>
And morph <a href=3D"https://github.com/reason-native-web/morph">https://gi=
thub.com/reason-native-web/morph</a> that has similar goals.
</p>

<p>
It would be nice if we could either create a shared core that all could bui=
ld from or collaborate on one.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orga7a2c90" class=3D"outline-2">
<h2 id=3D"6">esy@0.6.0 release</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-esy-0-6-0-release/5010/=
1">https://discuss.ocaml.org/t/ann-esy-0-6-0-release/5010/1</a>
</p>
</div>

<div id=3D"outline-container-orgd5a6426" class=3D"outline-3">
<h3 id=3D"orgd5a6426">Andrey Popp announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgd5a6426">
<p>
We've just released a new version of esy. You can install it with npm:
</p>
<pre class=3D"example">
$ npm install -g esy@0.6.0
</pre>

<p>
<a href=3D"https://esy.sh">esy</a> is a package.json driven workflow for na=
tive development with Reason/OCaml (and even C/C++). It provides per-projec=
t build environments which are isolated from each other but share underlyin=
g build caches so creating new environments is cheap.
</p>

<p>
While 0.6.0 is mainly about "quality-of-life" improvements it also got few =
new features including a basic support for garbage collection of unused bui=
ld artifacts.
</p>

<p>
For more info see a <a href=3D"https://esy.sh/blog/2020/01/12/0.6.0.html">b=
log post</a> by @prometheansacrifice which highlights important updates in =
0.6.0.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-orgfbe0b31" class=3D"outline-2">
<h2 id=3D"orgfbe0b31">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-orgfbe0b31">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"http://alan.petitepomme.net/cwn/">the archive</a> or the <a=
 href=3D"http://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives<=
/a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname">
<p>
<a href=3D"http://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

