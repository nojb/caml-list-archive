Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 95CADBB91
	for <caml-list@yquem.inria.fr>; Mon, 24 Jan 2005 19:06:18 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j0OI6Hkk029641
	for <caml-list@yquem.inria.fr>; Mon, 24 Jan 2005 19:06:18 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA16326 for <caml-list@pauillac.inria.fr>; Mon, 24 Jan 2005 19:06:17 +0100 (MET)
Received: from amber.ccs.neu.edu (amber.ccs.neu.edu [129.10.116.51])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j0OI6G0n029632
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Mon, 24 Jan 2005 19:06:17 +0100
Received: from denali.ccs.neu.edu ([129.10.116.200])
	by amber.ccs.neu.edu with esmtp (TLSv1:DHE-RSA-AES256-SHA:256)
	(Exim 4.34)
	id 1Ct8bO-0005Wu-O4
	for caml-list@inria.fr; Mon, 24 Jan 2005 13:06:15 -0500
Received: from aubineth by denali.ccs.neu.edu with local (Exim 4.34)
	id 1Ct8bO-0000Dn-IP
	for caml-list@inria.fr; Mon, 24 Jan 2005 13:06:14 -0500
Date: Mon, 24 Jan 2005 13:06:14 -0500
From: Ethan Aubin <ethan.aubin@pobox.com>
To: caml-list@inria.fr
Subject: typing dynamic typing
Message-ID: <20050124180614.GA824@denali.ccs.neu.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.4.1i
Sender: Ethan Lee Aubin <aubineth@ccs.neu.edu>
X-Miltered: at concorde with ID 41F53919.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 41F53918.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; datatype:01 forall:01 haskell:01 ocaml:01 encode:01 typing:01 typing:01 constructor:01 types:02 dynamic:03 dynamic:03 trick:06 uses:06 wondering:08 universally:12 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

Hi, I found 'Typing Dynamic Typing' by Arthur Baars and Doaitse
Swierstra (http://www.cs.uu.nl/people/arthurb/dynamic.html) the other
day and am wondering if there is a trick to encode a universally
qualified type constructor. I.e. section 3 of the paper uses datatype 

Equal a b = forall f . f a -> f b

as a proof that types a and b are equal. Is there a transliteration of
this haskell into ocaml? Thanks - EA

