Return-Path: <gregory.guyomarch@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 4DA6BBB9A
	for <caml-list@yquem.inria.fr>; Wed,  9 Nov 2005 02:18:38 +0100 (CET)
Received: from zproxy.gmail.com (zproxy.gmail.com [64.233.162.204])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jA91Ibqf022279
	for <caml-list@yquem.inria.fr>; Wed, 9 Nov 2005 02:18:37 +0100
Received: by zproxy.gmail.com with SMTP id x3so45718nzd
        for <caml-list@yquem.inria.fr>; Tue, 08 Nov 2005 17:18:36 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=efQzERNjCMpQWIbbVIvJV9sioUTnj2OgYCiHyrZXZe7stDm1e+0IUBac3HXIlxNnFQiuJb/bWQ8U7Hp49YWBvermqyu6Pstz4JJl75Pe3A3KIt7ZHlvKN7ohD7I9nsbNud94JIHl2jQDqzLnyaXdDgw+BEeR8iVL+isBjcD/Xss=
Received: by 10.65.139.13 with SMTP id r13mr162657qbn;
        Tue, 08 Nov 2005 17:18:36 -0800 (PST)
Received: by 10.65.52.1 with HTTP; Tue, 8 Nov 2005 17:18:36 -0800 (PST)
Message-ID: <d6e6530b0511081718j681140f9qe7e5034b28764ced@mail.gmail.com>
Date: Wed, 9 Nov 2005 10:18:36 +0900
From: =?ISO-8859-1?Q?Gr=E9gory_Guyomarc=27h?= <gregory.guyomarch@gmail.com>
To: jtbryant@valdosta.edu
Subject: Re: [Caml-list] The best way to circumvent the lack of Thread.kill ?
Cc: caml-list@yquem.inria.fr
In-Reply-To: <1131482174.6590.23.camel@starlight>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_3475_10664963.1131499116767"
References: <43688C4C.2080606@inria.fr>
	 <1130943226.4565.11.camel@calaf.rn.informatics.scitech.susx.ac.uk>
	 <4368E835.7090501@barettadeit.com>
	 <1130950809.4565.42.camel@calaf.rn.informatics.scitech.susx.ac.uk>
	 <436908B9.8080001@barettadeit.com> <1130956143.6564.17.camel@titania>
	 <1131482174.6590.23.camel@starlight>
X-Miltered: at concorde with ID 43714E6D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; guyomarc'h:01 caml-list:01 higher-order:01 uchicago:01 reppy:01 higher-order:01 uchicago:01 reppy:01 ocaml:01 threads:01 threads:01 rephrase:01 indirection:01 cheers:01 baretta:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HTML_30_40,HTML_MESSAGE,
	NO_OBLIGATION,RCVD_BY_IP autolearn=disabled version=3.0.3

------=_Part_3475_10664963.1131499116767
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hello,

I found these two references useful to understand the Event library:

*CML: A higher-order concurrent
language*<http://people.cs.uchicago.edu/%7Ejhr/papers/1991/pldi-cml.html>
John H. Reppy, In *ACM SGPLAN '91 Conference on Programming Language Design
and Implementation*, pages 293-305. ACM Press, 1991.
http://portal.acm.org/ft_gateway.cfm?id=3D113470&type=3Dpdf

*Higher-order Concurrency*<http://people.cs.uchicago.edu/%7Ejhr/papers/1992=
/phd-thesis.html>
John H. Reppy, *Computer Science Technical Report 92-1285*, Cornell
University, June 1992.
http://people.cs.uchicago.edu/~jhr/papers/1992/phd-thesis.html

I think there is also a short example on how to use this module in OCaml
Oreilly book.

Hope this helps,
Gregory.

On 11/9/05, Jonathan Bryant <jtbryant@valdosta.edu> wrote:
>
> Ok. Two questions.
>
> First of all, what is going on in the Event module? I can't exactly get
> it to work an I fear I'm missing some important concept. I can't find
> any documentation other than the interface. Does anybody know of any
> further documeeentation or have a good explanation of exactly what's
> going on.
>
> Second, the Thread module allows for individual thread signal masks, but
> no way to signal specific, individual threads. It just has a way to
> signal one of them pseudo-randomly. Since the signal masks only work
> under Unix, why isn't Thread.kill mapped to pthread_kill() since that
> would allow much greater flexibility by allowing individual specific
> threads to be signaled?
>
> --Jonathan
>
> On Wed, 2005-11-02 at 13:29, David Teller wrote:
> > Let me rephrase. I don't want to kill just any thread, I want to send a=
n
> > exception to whoever is actually synchronising on a channel. Perhaps an=
y
> > exception can be "distantly thrown", or perhaps only one specific kind.
> > Something like
> >
> > let sender c =3D
> > ignore Event.sync (Event.send c 1);
> > (**Event.send passes an information,
> > while Event.sync may pass control.*)
> > ignore Event.sync (Event.send c 2);
> > ignore Event.sync (Event.send c 4);
> > ignore Event.sync (Event.kill c)
> >
> > and receiver f c =3D
> > f Event.sync (Event.receive c);
> > (**Event.receive receive an information,
> > while Event.sync may pass control.*)
> > f Event.sync (Event.receive c);
> > f Event.sync (Event.receive c);
> > f Event.sync (Event.receive c);
> > (*Actually, this operation throws
> > Event.Closed_channel*)
> > f Event.sync (Event.receive c)
> >
> > in
> > let c =3D Event.new_channel ()
> > in
> > ignore (Thread.create sender c);
> > try
> > receiver print_int c
> > with
> > x -> (*...*)
> >
> > In the case of more than two threads waiting for communication on a
> > single channel, I would say that they all should receive the exception
> > during their next Event.sync.
> >
> > I agree that this is quite close to your idea of sending thunk
> > functions, but the additional indirection strikes me as odd for
> > something which to me looks like a primitive.
> >
> > Cheers,
> > David
> >
> > Le mercredi 02 novembre 2005 =E0 19:43 +0100, Alessandro Baretta a =E9c=
rit :
> > > David Teller wrote:
> > >
> > > > However, in my mind, all these solutions are the channel equivalent
> of
> > > > manual error-handling -- something akin to a function returning an
> ('a
> > > > option) instead of an 'a because the result None is reserved for
> errors.
> > > > I'm still slightly puzzled as to why this distant killing/raising i=
s
> not
> > > > a core feature of channels. After all, unless I'm mistaken, channel=
s
> are
> > > > a manner of implementing continuations. I tend to believe I should
> be
> > > > able to raise an error (a hypothetical Event.raise/Event.kill)
> instead
> > > > of returning/passing a value (as in Event.send).
> > > >
> > > > Or did I miss something ?
> > >
> > > "Channel" is maybe an inappropriate term for this strange object. An
> > > Event.channel is more like a single-slot mailbox to pass a message to
> > > someone. Any number of Threads (zero upwards) can be waiting for
> > > messages on a channel. There is no obligation that there be exactly
> one
> > > thread to kill on the other side. What would happen is try to send a
> > > hard-kill event on a channel where there is nobody on the other side?
> > > What if the there is more than one thread?
> > >
> > > You are trying to find a way around killing a thread with Thread.kill=
,
> > > but there is really no way to cleanly kill a thread asynchronously. A
> > > clean exit requires some cooperation from the killed thread.
> > >
> > > Alex
> --
> --Jonathan Bryant
> jtbryant@valdosta.edu
> Student Intern
> Unix System Operations
> VSU Information Technology
>
> "Das Leben ohne Music ist einfach ein Irrtum, eine Strapaze, ein" Exil."
> ("Life without music is simply an error, a pain, an exile.")
> --Frederich Nietzsche
>
> "The three cardinal values of a programmer are laziness, impatience, and
> hubris."
> --Perl Man Page
>
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_3475_10664963.1131499116767
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hello,<br>
<br>
I found these two references useful to understand the Event library:<br>
<br>
<a href=3D"http://people.cs.uchicago.edu/%7Ejhr/papers/1991/pldi-cml.html">=
<b><span style=3D"font-weight: bold;"></span>CML: A higher-order concurrent=
 language</b></a>
  <br>

  John H. Reppy, In <i>ACM SGPLAN '91 Conference on Programming
  Language Design and Implementation</i>, pages 293-305. ACM Press, 1991.<b=
r>
<a href=3D"http://portal.acm.org/ft_gateway.cfm?id=3D113470&amp;type=3Dpdf"=
>http://portal.acm.org/ft_gateway.cfm?id=3D113470&amp;type=3Dpdf</a><br>
<br><a href=3D"http://people.cs.uchicago.edu/%7Ejhr/papers/1992/phd-thesis.=
html"><b>Higher-order Concurrency</b></a>
  <br>

  John H. Reppy, <em>Computer Science Technical Report 92-1285</em>,
  Cornell University, June 1992.
  <br>
<a href=3D"http://people.cs.uchicago.edu/~jhr/papers/1992/phd-thesis.html">=
http://people.cs.uchicago.edu/~jhr/papers/1992/phd-thesis.html</a><br>
<br>
I think there is also a short example on how to use this module in OCaml Or=
eilly book.<br>
<br>
Hope this helps,<br>
Gregory.<br>
<br><div><span class=3D"gmail_quote">On 11/9/05, <b class=3D"gmail_senderna=
me">Jonathan Bryant</b> &lt;<a href=3D"mailto:jtbryant@valdosta.edu">jtbrya=
nt@valdosta.edu</a>&gt; wrote:</span><blockquote class=3D"gmail_quote" styl=
e=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; =
padding-left: 1ex;">
Ok.&nbsp;&nbsp;Two questions.<br><br>First of all, what is going on in the =
Event module?&nbsp;&nbsp;I can't exactly get<br>it to work an I fear I'm mi=
ssing some important concept.&nbsp;&nbsp;I can't find<br>any documentation =
other than the interface.&nbsp;&nbsp;Does anybody know of any
<br>further documeeentation or have a good explanation of exactly what's<br=
>going on.<br><br>Second, the Thread module allows for individual thread si=
gnal masks, but<br>no way to signal specific, individual threads.&nbsp;&nbs=
p;It just has a way to
<br>signal one of them pseudo-randomly.&nbsp;&nbsp;Since the signal masks o=
nly work<br>under Unix, why isn't Thread.kill mapped to pthread_kill() sinc=
e that<br>would allow much greater flexibility by allowing individual speci=
fic<br>
threads to be signaled?<br><br>--Jonathan<br><br>On Wed, 2005-11-02 at 13:2=
9, David Teller wrote:<br>&gt; Let me rephrase. I don't want to kill just a=
ny thread, I want to send an<br>&gt; exception to whoever is actually synch=
ronising on a channel. Perhaps any
<br>&gt; exception can be &quot;distantly thrown&quot;, or perhaps only one=
 specific kind.<br>&gt; Something like<br>&gt;<br>&gt;&nbsp;&nbsp;let sende=
r c =3D<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;ignore Event.sync (Event.send c 1);<=
br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (**Event.send passes an informa=
tion,
<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while E=
vent.sync may pass control.*)<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;ignore Event.s=
ync (Event.send c 2);<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;ignore Event.sync (Eve=
nt.send c 4);<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;ignore Event.sync (Event.kill =
c)<br>&gt;<br>&gt;&nbsp;&nbsp;and receiver f c =3D
<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;f Event.sync (Event.receive c);<br>&gt;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(**Event.receive receive an inf=
ormation,<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p; while Event.sync may pass control.*)<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;f Ev=
ent.sync (Event.receive c);<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;f Event.sync
 (Event.receive c);<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;f Event.sync (Event.rece=
ive c);<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*Actually, this operat=
ion throws<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; Event.Closed_channel*)<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;f Event.sync (Eve=
nt.receive c)<br>&gt;<br>&gt;&nbsp;&nbsp;in<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;=
let c =3D=20
Event.new_channel ()<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;in<br>&gt;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;ignore (Thread.create sender c);<br>&gt;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;try<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;receiver print_int c<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wit=
h<br>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x -&gt; (*...*)<br=
>&gt;<br>&gt;&nbsp;&nbsp;In the case of more than two threads waiting for c=
ommunication on a
<br>&gt; single channel, I would say that they all should receive the excep=
tion<br>&gt; during their next Event.sync.<br>&gt;<br>&gt;&nbsp;&nbsp;I agr=
ee that this is quite close to your idea of sending thunk<br>&gt; functions=
, but the additional indirection strikes me as odd for
<br>&gt; something which to me looks like a primitive.<br>&gt;<br>&gt; Chee=
rs,<br>&gt;&nbsp;&nbsp;David<br>&gt;<br>&gt; Le mercredi 02 novembre 2005 =
=E0 19:43 +0100, Alessandro Baretta a =E9crit :<br>&gt; &gt; David Teller w=
rote:<br>&gt; &gt;
<br>&gt; &gt; &gt;&nbsp;&nbsp;However, in my mind, all these solutions are =
the channel equivalent of<br>&gt; &gt; &gt; manual error-handling -- someth=
ing akin to a function returning an ('a<br>&gt; &gt; &gt; option) instead o=
f an 'a because the result None is reserved for errors.
<br>&gt; &gt; &gt; I'm still slightly puzzled as to why this distant killin=
g/raising is not<br>&gt; &gt; &gt; a core feature of channels. After all, u=
nless I'm mistaken, channels are<br>&gt; &gt; &gt; a manner of implementing=
 continuations. I tend to believe I should be
<br>&gt; &gt; &gt; able to raise an error (a hypothetical Event.raise/Event=
.kill) instead<br>&gt; &gt; &gt; of returning/passing a value (as in Event.=
send).<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;&nbsp;&nbsp;Or did I miss somethi=
ng ?<br>
&gt; &gt;<br>&gt; &gt; &quot;Channel&quot; is maybe an inappropriate term f=
or this strange object. An<br>&gt; &gt; Event.channel is more like a single=
-slot mailbox to pass a message to<br>&gt; &gt; someone. Any number of Thre=
ads (zero upwards) can be waiting for
<br>&gt; &gt; messages on a channel. There is no obligation that there be e=
xactly one<br>&gt; &gt; thread to kill on the other side. What would happen=
 is try to send a<br>&gt; &gt; hard-kill event on a channel where there is =
nobody on the other side?
<br>&gt; &gt; What if the there is more than one thread?<br>&gt; &gt;<br>&g=
t; &gt; You are trying to find a way around killing a thread with Thread.ki=
ll,<br>&gt; &gt; but there is really no way to cleanly kill a thread asynch=
ronously. A
<br>&gt; &gt; clean exit requires some cooperation from the killed thread.<=
br>&gt; &gt;<br>&gt; &gt; Alex<br>--<br>--Jonathan Bryant<br>&nbsp;&nbsp;<a=
 href=3D"mailto:jtbryant@valdosta.edu">jtbryant@valdosta.edu</a><br>&nbsp;&=
nbsp;Student Intern
<br>&nbsp;&nbsp;Unix System Operations<br>&nbsp;&nbsp;VSU Information Techn=
ology<br><br>&quot;Das Leben ohne Music ist einfach ein Irrtum, eine Strapa=
ze, ein&quot; Exil.&quot;<br>(&quot;Life without music is simply an error, =
a pain, an exile.&quot;)
<br>--Frederich Nietzsche<br><br>&quot;The three cardinal values of a progr=
ammer are laziness, impatience, and<br>hubris.&quot;<br>--Perl Man Page<br>=
<br><br><br>_______________________________________________<br>Caml-list ma=
iling list. Subscription management:
<br><a href=3D"http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list">ht=
tp://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>Archives: <a =
href=3D"http://caml.inria.fr">http://caml.inria.fr</a><br>Beginner's list:=
=20
<a href=3D"http://groups.yahoo.com/group/ocaml_beginners">http://groups.yah=
oo.com/group/ocaml_beginners</a><br>Bug reports: <a href=3D"http://caml.inr=
ia.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a><br></blockquote=
>
</div><br>

------=_Part_3475_10664963.1131499116767--

