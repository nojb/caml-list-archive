Return-Path: <fw@deneb.enyo.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 56CA2BB9C
	for <caml-list@yquem.inria.fr>; Tue, 22 Nov 2005 16:39:15 +0100 (CET)
Received: from mail.enyo.de (mail.enyo.de [212.9.189.167])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jAMFdE4D014004
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Tue, 22 Nov 2005 16:39:15 +0100
Received: from deneb.vpn.enyo.de ([212.9.189.177] helo=deneb.enyo.de)
	by albireo.enyo.de with esmtp id 1EeaEi-0004vQ-S0; Tue, 22 Nov 2005 16:39:12 +0100
Received: from fw by deneb.enyo.de with local (Exim 4.54)
	id 1EeaEd-0007sA-MS; Tue, 22 Nov 2005 16:39:07 +0100
From: Florian Weimer <fw@deneb.enyo.de>
To: jtbryant@valdosta.edu
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Threads & Fork
References: <1132673981.13170.17.camel@starlight>
Date: Tue, 22 Nov 2005 16:39:07 +0100
In-Reply-To: <1132673981.13170.17.camel@starlight> (Jonathan Bryant's message
	of "Tue, 22 Nov 2005 10:39:41 -0500")
Message-ID: <87wtj07kv8.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Miltered: at nez-perce with ID 43833BA2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 threads:01 threads:01 ocaml:01 run-time:01 posix:01 clones:98 clones:98 unix:01 essentially:01 hangs:02 thread:02 thread:02 florian:02 confused:02 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

* Jonathan Bryant:

> I'm confused as to why the attached code hangs.  My understanding of
> Unix.fork () is that it completely clones the current process, which in
> my understanding, clones the processes's threads as well.  Apparently,
> though, that is not the case, because I can't join the thread in both
> the parent and the child.

I can't speak for the OCaml run-time, but POSIX fork only duplicates
the current thread, so the new process is essentially single-threaded.

