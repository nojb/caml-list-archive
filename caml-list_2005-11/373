Return-Path: <jonathan.roewen@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id DF261BBBC
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:55:40 +0100 (CET)
Received: from zproxy.gmail.com (zproxy.gmail.com [64.233.162.192])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jAHMtd6Q024806
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:55:40 +0100
Received: by zproxy.gmail.com with SMTP id x3so46294nzd
        for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 14:55:39 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=TggHjtFv5T2s9Nv6rl4jtb0VZwnUhQAZJxXuckb3bte4S7s6GP9lcev7K1F418woPH/xYPsQCWMO8Ces1xTxtDl5KGtEHz/AVKOg2scCpFZmLMhULS5gAxMnijUuO/IkmXGCClP6wsz+M3/dExOKVNSpcaifI2yU2pRWyPf0HEw=
Received: by 10.64.179.15 with SMTP id b15mr2667470qbf;
        Thu, 17 Nov 2005 14:55:39 -0800 (PST)
Received: by 10.64.10.5 with HTTP; Thu, 17 Nov 2005 14:55:39 -0800 (PST)
Message-ID: <ad8cfe7e0511171455h1c818acco64de9389668e3381@mail.gmail.com>
Date: Fri, 18 Nov 2005 11:55:39 +1300
From: Jonathan Roewen <jonathan.roewen@gmail.com>
Subject: Re: [Caml-list] doing MMX through ocaml
Cc: caml-list@yquem.inria.fr
In-Reply-To: <9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
References: <ad8cfe7e0511171313s7f77a125ic6c8d02949a321f5@mail.gmail.com>
	 <20051117214745.GA580@first.in-berlin.de>
	 <CE131290-E604-466D-8908-809610F4BBB3@m4x.org>
	 <9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch>
X-Miltered: at nez-perce with ID 437D0A6C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 wrappers:01 runtime:01 ocaml:01 simpler:01 typed:03 mmx:04 mmx:04 probably:05 execute:07 rather:07 machine:08 function:08 basically:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_BY_IP autolearn=disabled 
	version=3.0.3

Another option, that I'm curious what people might think of, that
might alleviate some performance woes of multiple calls to much
simpler MMX instruction wrappers:

A runtime code generator, that's typed by ocaml. Basically, create a
code block from multiple instructions, which is turned into machine
code, then executed through a C function.

You'd still get type safety, but performance should hopefully be a bit
better. The idea is that you commonly execute a set of MMX
instructions at a time, rather than single instructions.

Ideas on whether this is a good design, and what would probably be the
best way to do this are welcome =3D)

Jonathan

