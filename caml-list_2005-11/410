Return-Path: <kenrose@tfb.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 234D0BB81
	for <caml-list@yquem.inria.fr>; Fri, 18 Nov 2005 20:22:49 +0100 (CET)
Received: from smtp01.isp.itmonitor.net (smtp01.isp.itmonitor.net [207.158.33.182])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jAIJMmrv030298
	for <caml-list@yquem.inria.fr>; Fri, 18 Nov 2005 20:22:48 +0100
Received: from [192.168.1.4] (o1-dialup-66-81-195-93.rev.o1.com [66.81.195.93])
	by smtp01.isp.itmonitor.net (Postfix) with ESMTP
	id 4FBC0A5C60B; Fri, 18 Nov 2005 11:22:48 -0800 (PST)
Message-ID: <437E2A06.4020608@tfb.com>
Date: Fri, 18 Nov 2005 11:22:46 -0800
From: Ken Rose <kenrose@tfb.com>
Reply-To: rose@acm.org
User-Agent: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.7.12) Gecko/20051005
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] doing MMX through ocaml
References: <ad8cfe7e0511171313s7f77a125ic6c8d02949a321f5@mail.gmail.com>	<20051118104926.3d9ffdc0.ocaml-erikd@mega-nerd.com> <Pine.LNX.4.63.0511172104210.24132@localhost.localdomain>
In-Reply-To: <Pine.LNX.4.63.0511172104210.24132@localhost.localdomain>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 437E2A08.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 fft:01 iirc:01 wrote:01 transform:02 brian:04 bits:04 mmx:04 mmx:04 core:06 function:08 i'm:08 thus:09 actually:10 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Brian Hurt wrote:

> I'm pretty sure you need at least SSE for MPEG.  The core function is an
> 8x8 2D FFT.  You *might* be able to do in fixed point (and thus in MMX),
> but the SSE version would be a lot easier to get right.

It's actually an 8x8 Discrete Cosine Transform.  It can be done in fixed
point.  IIRC, you need 18 bits.

 - ken

