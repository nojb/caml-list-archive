Return-Path: <jtbryant@valdosta.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 405BDBB81
	for <caml-list@yquem.inria.fr>; Wed,  9 Nov 2005 14:30:08 +0100 (CET)
Received: from mailx.valdosta.edu (mailx.valdosta.edu [168.18.130.251])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jA9DU75X023793
	for <caml-list@yquem.inria.fr>; Wed, 9 Nov 2005 14:30:07 +0100
Received: from blazemail.valdosta.edu (blazemail.valdosta.edu [168.18.130.208])
	by mailx.valdosta.edu (8.13.4/8.13.4) with ESMTP id jA9DU6s5000609
	for <caml-list@yquem.inria.fr>; Wed, 9 Nov 2005 08:30:06 -0500 (EST)
	(envelope-from jtbryant@valdosta.edu)
Received: from starlight.valdosta.edu (VO00985.valdosta.edu [168.18.148.146])
 by blazemail.valdosta.edu
 (iPlanet Messaging Server 5.2 HotFix 2.04 (built Feb  8 2005))
 with ESMTP id <0IPO00A1KW666C@blazemail.valdosta.edu> for
 caml-list@yquem.inria.fr; Wed, 09 Nov 2005 08:30:06 -0500 (EST)
Date: Wed, 09 Nov 2005 08:32:17 -0500
From: Jonathan Bryant <jtbryant@valdosta.edu>
Subject: Re: [Caml-list] The best way to circumvent the lack of Thread.kill	?
In-reply-to: <4371A0A6.4010306@laposte.net>
To: caml-list@yquem.inria.fr
Reply-To: jtbryant@valdosta.edu
Message-id: <1131543137.30218.10.camel@starlight>
MIME-version: 1.0
X-Mailer: Ximian Evolution 1.4.5 (1.4.5-17)
Content-type: text/plain; charset=
Content-transfer-encoding: 8BIT
References: <43688C4C.2080606@inria.fr>
 <1130943226.4565.11.camel@calaf.rn.informatics.scitech.susx.ac.uk>
 <4368E835.7090501@barettadeit.com>
 <1130950809.4565.42.camel@calaf.rn.informatics.scitech.susx.ac.uk>
 <436908B9.8080001@barettadeit.com> <1130956143.6564.17.camel@titania>
 <1131482174.6590.23.camel@starlight> <4371A0A6.4010306@laposte.net>
X-PMX-Version: 5.0.2.153301, Antispam-Engine: 2.0.3.2, Antispam-Data: 2005.11.9.9
X-Miltered: at nez-perce with ID 4371F9DF.003 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 threads:01 threads:01 matthieu:01 dubuget:01 ocaml:01 beginners:01 ocaml:01 beginners:01 intern:01 ohne:98 einfach:98 ein:98 ein:98 exile:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

That's helpful.  Anybody have any information on the second question? 
The two have to work together in my app.

It's a client/server library and I have several threads.  One simply
acepts connections and 'spawns' (not really, but) new threads.  To
control this thread I need to alternate between two blocking calls:
Unix.select and Event.sync.  I think it is rather clear why being able
to send a signal to that thread would be helpful :).  Also, there is a
pool of worker threads that will need to sleep until they are needed. 
Since my protocol is not request-response, I can't simply have the
workers alternate between Event.sync (Event.send) and Event.sync
(Event.receive) calls.

Any ideas?

On Wed, 2005-11-09 at 02:09, Matthieu Dubuget wrote:
> Jonathan Bryant a écrit :
> 
> >Ok.  Two questions.
> >
> >First of all, what is going on in the Event module?  I can't exactly get
> >it to work an I fear I'm missing some important concept.  I can't find
> >any documentation other than the interface.  Does anybody know of any
> >further documeeentation or have a good explanation of exactly what's
> >going on.
> >
> >  
> >
> 
> I asked a question related to Event usage there some time ago:
> http://groups.yahoo.com/group/ocaml_beginners/message/2968
> 
> and Rémi Vanicat answered with clean explanations:
> http://groups.yahoo.com/group/ocaml_beginners/message/2969
> 
> Maybe that will help you too?
> 
> Salutations
-- 
--Jonathan Bryant
  jtbryant@valdosta.edu
  Student Intern
  Unix System Operations
  VSU Information Technology

"Das Leben ohne Music ist einfach ein Irrtum, eine Strapaze, ein" Exil."
("Life without music is simply an error, a pain, an exile.")
--Frederich Nietzsche

"The three cardinal values of a programmer are laziness, impatience, and
hubris."
--Perl Man Page



