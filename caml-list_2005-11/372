Return-Path: <damien.bobillot@m4x.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id D9F6DBB9C
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:55:37 +0100 (CET)
Received: from mx1.polytechnique.org (mx1.polytechnique.org [129.104.30.34])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jAHMtb5p019036
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:55:37 +0100
Received: from [192.168.0.11] (falcal.net [81.56.73.55])
	(using TLSv1 with cipher RC4-SHA (128/128 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTP id CCAA2331F9;
	Thu, 17 Nov 2005 23:55:36 +0100 (CET)
In-Reply-To: <9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch>
References: <ad8cfe7e0511171313s7f77a125ic6c8d02949a321f5@mail.gmail.com> <20051117214745.GA580@first.in-berlin.de> <CE131290-E604-466D-8908-809610F4BBB3@m4x.org> <9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch>
Mime-Version: 1.0 (Apple Message framework v746.2)
Content-Type: multipart/signed; micalg=sha1; boundary=Apple-Mail-4--657879762; protocol="application/pkcs7-signature"
Message-Id: <D459B7C2-A058-4C1A-91BD-0C0A3BD9FF1F@m4x.org>
Cc: caml-list@yquem.inria.fr
From: Damien Bobillot <damien.bobillot@m4x.org>
Subject: Re: [Caml-list] doing MMX through ocaml
Date: Thu, 17 Nov 2005 23:55:42 +0100
To: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
X-Mailer: Apple Mail (2.746.2)
X-AV-Checked: ClamAV using ClamSMTP at djali.polytechnique.org (Thu Nov 17 23:55:37 2005 +0100 (CET))
X-DCC--Metrics: djali 32702; Body=1 Fuz1=1 Fuz2=1
X-Org-Mail: damien.bobillot.2002@polytechnique.org
X-Miltered: at concorde with ID 437D0A69.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 caml-list:01 ocaml:01 flowed:01 ocaml:01 pointer:01 unboxed:01 arrays:01 bigarrays:01 unboxed:01 arrays:01 datatype:01 pkcs:01 065:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


--Apple-Mail-4--657879762
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=ISO-8859-1;
	delsp=yes;
	format=flowed


Le 17 nov. 05 =E0 23:43, Daniel B=FCnzli a =E9crit :

>
> Le 17 nov. 05 =E0 23:16, Damien Bobillot a =E9crit :
>
>> PS : I think it will perhaps have the same problems as floating =20
>> computation, which is not really efficient. As far as I know, =20
>> floats are not stored as float in memory, but as a generic ocaml =20
>> value  : a pointer to a structure contains a tag indicating that =20
>> it's a float, and after the IEEE float value.
>
> This not exactly true. As an exception, they are unboxed in records =20=

> and arrays made of floats only [1,2].
>
> Note that you can also use bigarrays [3] to have unboxed arrays of =20
> any scalar datatype.
>
> This page [4] (unfortunately not available in the faq of the new =20
> ocaml site) contains interesting information about writing =20
> numerical code in ocaml.

Ok, and thank you for the references.

Perhaps, writing a bigarray-like module for vectorized operation may =20
be the solution.

> [1] <http://caml.inria.fr/pub/docs/manual-ocaml/=20
> manual032.html#htoc218>
> [2] <http://caml.inria.fr/pub/docs/manual-ocaml/=20
> manual032.html#htoc219>
> [3] <http://caml.inria.fr/pub/docs/manual-ocaml/=20
> manual043.html#htoc261>
> [4] <http://caml.inria.fr/pub/old_caml_site/ocaml/numerical.html>


--=20
Damien alias Schmurtz
aim:goim?screenname=3Dschmuuurtz


--Apple-Mail-4--657879762
Content-Transfer-Encoding: base64
Content-Type: application/pkcs7-signature;
	name=smime.p7s
Content-Disposition: attachment;
	filename=smime.p7s

MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIGIjCCAtsw
ggJEoAMCAQICAw54xzANBgkqhkiG9w0BAQQFADBiMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhh
d3RlIENvbnN1bHRpbmcgKFB0eSkgTHRkLjEsMCoGA1UEAxMjVGhhd3RlIFBlcnNvbmFsIEZyZWVt
YWlsIElzc3VpbmcgQ0EwHhcNMDUwNDEzMTc1MTAxWhcNMDYwNDEzMTc1MTAxWjBJMR8wHQYDVQQD
ExZUaGF3dGUgRnJlZW1haWwgTWVtYmVyMSYwJAYJKoZIhvcNAQkBFhdkYW1pZW4uYm9iaWxsb3RA
bTR4Lm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ1TOYBqwJ42s0Fzz56jY1p0
fplGyikFgoNEUKGnOpqt4vpeoqUppAnORt2yvdQJxfIkhsWkrD/diiPS7MTF73wcxlSJtqYzVzPK
G/2WDm6dBinuWCIyWYFhtGedyxbap3kJW44H7cL7HUVVxZ0JhOIOTsjCoEzaeKnML7bctbIJeXEE
lErfbDv2jA1PDG1ru5dx+Q+AmbexX92ygnntE6aX3QZLSbhrytg4yCRdV8cOyQ9eFruZBI42RJv3
nJXevjUOr4n+y/7bzijAJj4BFyUU+dllvj6bmk5brnUXheCSOD0Ci20dqGNC1MyJ43b6MoIrbW7j
JwYIv12D6KuWoaUCAwEAAaM0MDIwIgYDVR0RBBswGYEXZGFtaWVuLmJvYmlsbG90QG00eC5vcmcw
DAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQQFAAOBgQB0u5b6wgwsbcyzDHJTzshlCn4gshxWtU/1
mH77gBCpsY8L554YV4/Tvm1PzmDzErm++drQf5HMy8sEFjmwLvNfBP0BqtkSqsdRFGR4wHzTjMhS
EW5LgmlaccqBQzqQrANtzglgBVbtmBDAV92qHjQslwHK4FohCRRzGl4DLQmqBDCCAz8wggKooAMC
AQICAQ0wDQYJKoZIhvcNAQEFBQAwgdExCzAJBgNVBAYTAlpBMRUwEwYDVQQIEwxXZXN0ZXJuIENh
cGUxEjAQBgNVBAcTCUNhcGUgVG93bjEaMBgGA1UEChMRVGhhd3RlIENvbnN1bHRpbmcxKDAmBgNV
BAsTH0NlcnRpZmljYXRpb24gU2VydmljZXMgRGl2aXNpb24xJDAiBgNVBAMTG1RoYXd0ZSBQZXJz
b25hbCBGcmVlbWFpbCBDQTErMCkGCSqGSIb3DQEJARYccGVyc29uYWwtZnJlZW1haWxAdGhhd3Rl
LmNvbTAeFw0wMzA3MTcwMDAwMDBaFw0xMzA3MTYyMzU5NTlaMGIxCzAJBgNVBAYTAlpBMSUwIwYD
VQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQDEyNUaGF3dGUgUGVyc29u
YWwgRnJlZW1haWwgSXNzdWluZyBDQTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxKY8VXNV
+065yplaHmjAdQRwnd/p/6Me7L3N9VvyGna9fww6YfK/Uc4B1OVQCjDXAmNaLIkVcI7dyfArhVqq
P3FWy688Cwfn8R+RNiQqE88r1fOCdz0Dviv+uxg+B79AgAJk16emu59l0cUqVIUPSAR/p7bRPGEE
QB5kGXJgt/sCAwEAAaOBlDCBkTASBgNVHRMBAf8ECDAGAQH/AgEAMEMGA1UdHwQ8MDowOKA2oDSG
Mmh0dHA6Ly9jcmwudGhhd3RlLmNvbS9UaGF3dGVQZXJzb25hbEZyZWVtYWlsQ0EuY3JsMAsGA1Ud
DwQEAwIBBjApBgNVHREEIjAgpB4wHDEaMBgGA1UEAxMRUHJpdmF0ZUxhYmVsMi0xMzgwDQYJKoZI
hvcNAQEFBQADgYEASIzRUIPqCy7MDaNmrGcPf6+svsIXoUOWlJ1/TCG4+DYfqi2fNi/A9BxQIJNw
PP2t4WFiw9k6GX6EsZkbAMUaC4J0niVQlGLH2ydxVyWN3amcOY6MIE9lX5Xa9/eH1sYITq726jTl
EBpbNU1341YheILcIRk13iSx0x1G/11fZU8xggLnMIIC4wIBATBpMGIxCzAJBgNVBAYTAlpBMSUw
IwYDVQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQDEyNUaGF3dGUgUGVy
c29uYWwgRnJlZW1haWwgSXNzdWluZyBDQQIDDnjHMAkGBSsOAwIaBQCgggFTMBgGCSqGSIb3DQEJ
AzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTA1MTExNzIyNTU0M1owIwYJKoZIhvcNAQkE
MRYEFKb4AISI+9yIqojXGkilYSUzTFXpMHgGCSsGAQQBgjcQBDFrMGkwYjELMAkGA1UEBhMCWkEx
JTAjBgNVBAoTHFRoYXd0ZSBDb25zdWx0aW5nIChQdHkpIEx0ZC4xLDAqBgNVBAMTI1RoYXd0ZSBQ
ZXJzb25hbCBGcmVlbWFpbCBJc3N1aW5nIENBAgMOeMcwegYLKoZIhvcNAQkQAgsxa6BpMGIxCzAJ
BgNVBAYTAlpBMSUwIwYDVQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQD
EyNUaGF3dGUgUGVyc29uYWwgRnJlZW1haWwgSXNzdWluZyBDQQIDDnjHMA0GCSqGSIb3DQEBAQUA
BIIBAC4qYSIb+dSB8EQeW912+NkTbRlpWz+LKT7AZvKICXaMEVbz1gVuuFrt/9n4bFfMWIeoHCdT
6msfJXW3XjTcfvJ3rK8l/4BbhPwQkrWK4ascrq0JOtnUlVNHLUP+Du9+lkAM8ni5a+lNzeZBE53M
SjdZvfXkQV1XZkF1cvNp1V1MFSBtHx6sQrglrrLkxGXRHLWnIjSglRdbkX7y2rUR268GjvahGGJr
33PyqNt2oDS+bm0i2qIgmi80RMKFkWjhKZxp/4/anlHCCgJgWlcvjjFIbkKwgmr7VRjdVZOGtF/8
AEUiM1GRs4nZt794KKr1/a9gXEbzIp4ttehsqff4yPUAAAAAAAA=

--Apple-Mail-4--657879762--

