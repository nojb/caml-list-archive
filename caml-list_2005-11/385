Return-Path: <a.baretta@barettadeit.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 67E92BB81
	for <caml-list@yquem.inria.fr>; Fri, 18 Nov 2005 11:05:05 +0100 (CET)
Received: from mail.barettadeit.com (h213-255-109-130.albacom.net [213.255.109.130] (may be forged))
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jAIA4a2Z016169
	for <caml-list@yquem.inria.fr>; Fri, 18 Nov 2005 11:05:05 +0100
Received: from [10.0.0.10] (alex.barettalocal.com [10.0.0.10])
	by mail.barettadeit.com (Postfix) with ESMTP id CD0729850;
	Fri, 18 Nov 2005 11:10:10 +0100 (CET)
Message-ID: <437DA735.2010903@barettadeit.com>
Date: Fri, 18 Nov 2005 11:04:37 +0100
From: Alessandro Baretta <a.baretta@barettadeit.com>
User-Agent: Debian Thunderbird 1.0.7 (X11/20051017)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Jonathan Roewen <jonathan.roewen@gmail.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] doing MMX through ocaml
References: <ad8cfe7e0511171313s7f77a125ic6c8d02949a321f5@mail.gmail.com>	<20051117214745.GA580@first.in-berlin.de>	<CE131290-E604-466D-8908-809610F4BBB3@m4x.org>	<9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch> <ad8cfe7e0511171455h1c818acco64de9389668e3381@mail.gmail.com>
In-Reply-To: <ad8cfe7e0511171455h1c818acco64de9389668e3381@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 437DA734.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; baretta:01 baretta:01 barettadeit:01 caml-list:01 ocaml:01 wrappers:01 runtime:01 ocaml:01 metaocaml:01 metaocaml:01 wrote:01 simpler:01 programming:03 alessandro:03 alex:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3

Jonathan Roewen wrote:
> Another option, that I'm curious what people might think of, that
> might alleviate some performance woes of multiple calls to much
> simpler MMX instruction wrappers:
> 
> A runtime code generator, that's typed by ocaml. Basically, create a
> code block from multiple instructions, which is turned into machine
> code, then executed through a C function.

Wouldn't this be the perfect scenario to leverage the power of multistage 
programming. I wonder if MetaOcaml is the right solution. And I wonder I how 
much work would go into adapting the DST to MetaOcaml...

Alex

