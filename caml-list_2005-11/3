Return-Path: <jtbryant@valdosta.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id EFD4BD45F
	for <caml-list@yquem.inria.fr>; Tue,  1 Nov 2005 01:05:14 +0100 (CET)
Received: from mailx.valdosta.edu (mailx.valdosta.edu [168.18.130.251])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jA105DDc006246
	for <caml-list@yquem.inria.fr>; Tue, 1 Nov 2005 01:05:14 +0100
Received: from blazemail.valdosta.edu (blazemail.valdosta.edu [168.18.130.208])
	by mailx.valdosta.edu (8.13.4/8.13.4) with ESMTP id jA105DVB023444
	for <caml-list@yquem.inria.fr>; Mon, 31 Oct 2005 19:05:13 -0500 (EST)
	(envelope-from jtbryant@valdosta.edu)
Received: from starlight.valdosta.edu (VO00985.valdosta.edu [168.18.148.146])
 by blazemail.valdosta.edu
 (iPlanet Messaging Server 5.2 HotFix 2.04 (built Feb  8 2005))
 with ESMTP id <0IP900F8Y1KPTU@blazemail.valdosta.edu> for
 caml-list@yquem.inria.fr; Mon, 31 Oct 2005 19:05:13 -0500 (EST)
Date: Mon, 31 Oct 2005 19:07:17 -0500
From: Jonathan Bryant <jtbryant@valdosta.edu>
Subject: Stdlib
To: caml-list@yquem.inria.fr
Reply-To: jtbryant@valdosta.edu
Message-id: <1130803637.488.28.camel@starlight>
MIME-version: 1.0
X-Mailer: Ximian Evolution 1.4.5 (1.4.5-17)
Content-type: text/plain
Content-transfer-encoding: 7BIT
X-PMX-Version: 5.0.2.153301, Antispam-Engine: 2.0.3.2, Antispam-Data: 2005.10.31.30
X-Miltered: at nez-perce with ID 4366B139.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; stdlib:01 stl:01 ocaml:01 lablgl:01 api:01 ocaml:01 syntax:01 stubs:01 intern:01 ohne:98 einfach:98 ein:98 ein:98 exile:98 unix:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Wow, guys.  Thanks for the responses.  That really cleared up my
question :).  I (unfortunately) have to learn some of the STL for
another project and the thought occurred to me.

On another note, I would love to do this other project in OCaml, but it
is OpenGL intensive (read: based) and LablGL drives me nuts.  The named
argument thing drives me up the wall because it's more information that
I don't want to have to learn and internalize.  If the author of that
package reads this list, then I apologize.  You've done a fantastic job
of mapping the API, but I really do not like the OCaml syntax for both
Labeled and Optional arguments in general.  Does anyone know of an
OpenGL package that is /complete/ and /not/ labeled?  There is, of
course, the option of writing a module/set of modules that use the
existing C stubs an are not labled, but that would be a last-ditch
effort.

Thanks!

--Jonathan Bryant
  jtbryant@valdosta.edu
  Student Intern
  Unix System Operations
  VSU Information Technology

"Das Leben ohne Music ist einfach ein Irrtum, eine Strapaze, ein" Exil."
("Life without music is simply an error, a pain, an exile.")
--Frederich Nietzsche

"The three cardinal values of a programmer are laziness, impatience, and
hubris."
--Perl Man Page



