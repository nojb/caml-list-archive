Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 0D79ABB9C
	for <caml-list@yquem.inria.fr>; Tue, 22 Nov 2005 16:50:49 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jAMFomvQ015644
	for <caml-list@yquem.inria.fr>; Tue, 22 Nov 2005 16:50:48 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA14441 for <caml-list@pauillac.inria.fr>; Tue, 22 Nov 2005 16:50:48 +0100 (MET)
Received: from einhorn.in-berlin.de (einhorn.in-berlin.de [192.109.42.8])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jAMFols8006948
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <caml-list@inria.fr>; Tue, 22 Nov 2005 16:50:48 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@inria.fr>
Received: from first.in-berlin.de (e178003105.adsl.alicedsl.de [85.178.3.105])
	(authenticated bits=0)
	by einhorn.in-berlin.de (8.12.10/8.12.10/Debian-4) with ESMTP id jAMFoj8q028896
	for <caml-list@inria.fr>; Tue, 22 Nov 2005 16:50:46 +0100
Received: by first.in-berlin.de (Postfix, from userid 501)
	id BC9461A5507; Tue, 22 Nov 2005 16:50:03 +0100 (CET)
Date: Tue, 22 Nov 2005 16:50:02 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Threads & Fork
Message-ID: <20051122155002.GB16451@first.in-berlin.de>
References: <1132673981.13170.17.camel@starlight> <87wtj07kv8.fsf@mid.deneb.enyo.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <87wtj07kv8.fsf@mid.deneb.enyo.de>
User-Agent: Mutt/1.5.6i
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Miltered: at nez-perce with ID 43833E58.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 43833E57.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; oliver:01 bandel:01 oliver:01 in-berlin:01 caml-list:01 threads:01 threads:01 ocaml:01 run-time:01 posix:01 posix:01 api:01 unix-module:01 threading:01 clashing:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3

On Tue, Nov 22, 2005 at 04:39:07PM +0100, Florian Weimer wrote:
> * Jonathan Bryant:
> 
> > I'm confused as to why the attached code hangs.  My understanding of
> > Unix.fork () is that it completely clones the current process, which in
> > my understanding, clones the processes's threads as well.  Apparently,
> > though, that is not the case, because I can't join the thread in both
> > the parent and the child.
> 
> I can't speak for the OCaml run-time, but POSIX fork only duplicates
> the current thread, so the new process is essentially single-threaded.

I doubt that this is true.
Unix-fork() copies a complete process.
If the original has threads, the copy also have.
I don't think that POSIX handles this different to old Unix API.

Unix-module should do the same as the C-call of fork(2).

Threads are running inside a process, like any other
function. So all should be copied completely.

But using POSIX-threads and Unix-API can yield to many problems,
for example POSIX threading signals and Unix-signals are clashing
together and the behaviour can be undefined...

Ciao,
   Oliver

