Return-Path: <daniel.buenzli@epfl.ch>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 58336BB9C
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:43:25 +0100 (CET)
Received: from mail15.bluewin.ch (mail15.bluewin.ch [195.186.18.63])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jAHMhO5A017744
	for <caml-list@yquem.inria.fr>; Thu, 17 Nov 2005 23:43:25 +0100
Received: from [10.0.1.2] (83.78.43.210) by mail15.bluewin.ch (Bluewin 7.2.068.1)
        id 4362B58700476565; Thu, 17 Nov 2005 22:43:23 +0000
In-Reply-To: <CE131290-E604-466D-8908-809610F4BBB3@m4x.org>
References: <ad8cfe7e0511171313s7f77a125ic6c8d02949a321f5@mail.gmail.com> <20051117214745.GA580@first.in-berlin.de> <CE131290-E604-466D-8908-809610F4BBB3@m4x.org>
Mime-Version: 1.0 (Apple Message framework v746.2)
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <9C9F3FAE-A9B5-4505-804C-AD8A136FFC5D@epfl.ch>
Cc: caml-list@yquem.inria.fr
Content-Transfer-Encoding: quoted-printable
From: =?ISO-8859-1?Q?Daniel_B=FCnzli?= <daniel.buenzli@epfl.ch>
Subject: Re: [Caml-list] doing MMX through ocaml
Date: Thu, 17 Nov 2005 23:43:37 +0100
To: Damien Bobillot <damien.bobillot@m4x.org>
X-Mailer: Apple Mail (2.746.2)
X-Miltered: at concorde with ID 437D078D.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; bunzli:01 buenzli:01 epfl:01 caml-list:01 ocaml:01 damien:01 ocaml:01 pointer:01 unboxed:01 arrays:01 bigarrays:01 unboxed:01 arrays:01 datatype:01 faq:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


Le 17 nov. 05 =E0 23:16, Damien Bobillot a =E9crit :

> PS : I think it will perhaps have the same problems as floating =20
> computation, which is not really efficient. As far as I know, =20
> floats are not stored as float in memory, but as a generic ocaml =20
> value  : a pointer to a structure contains a tag indicating that =20
> it's a float, and after the IEEE float value.

This not exactly true. As an exception, they are unboxed in records =20
and arrays made of floats only [1,2].

Note that you can also use bigarrays [3] to have unboxed arrays of =20
any scalar datatype.

This page [4] (unfortunately not available in the faq of the new =20
ocaml site) contains interesting information about writing numerical =20
code in ocaml.

Best,

Daniel

[1] <http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#htoc218>
[2] <http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#htoc219>
[3] <http://caml.inria.fr/pub/docs/manual-ocaml/manual043.html#htoc261>
[4] <http://caml.inria.fr/pub/old_caml_site/ocaml/numerical.html>=

