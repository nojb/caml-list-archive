Return-Path: <tom@confluent.org>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id C23C5D45F
	for <caml-list@yquem.inria.fr>; Tue,  1 Nov 2005 17:59:33 +0100 (CET)
Received: from postman.medtronic.com (postman.medtronic.COM [144.15.157.121])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jA1GxWKD011396
	for <caml-list@yquem.inria.fr>; Tue, 1 Nov 2005 17:59:33 +0100
Received: from bishop.pace.medtronic.COM (localhost [127.0.0.1])
	by postman.medtronic.com (8.12.9/8.12.9) with ESMTP id jA1GxS8h017982
	for <caml-list@yquem.inria.fr>; Tue, 1 Nov 2005 10:59:28 -0600 (CST)
Received: from pace.medtronic.com. (nenya.pace.medtronic.COM [144.15.20.58])
	by bishop.pace.medtronic.COM (8.9.1b+Sun/8.9.1) with ESMTP id KAA13261
	for <caml-list@yquem.inria.fr>; Tue, 1 Nov 2005 10:59:27 -0600 (CST)
Received: from [127.0.0.1] (IDENT:U2FsdGVkX1+I5CS23pom4CMHjEMy/DxNeuzEnZ3alqQ@localhost [127.0.0.1])
	by pace.medtronic.com. (8.12.11/8.12.11) with ESMTP id jA1GxRFT024941
	for <caml-list@yquem.inria.fr>; Tue, 1 Nov 2005 10:59:27 -0600
Message-ID: <43679EEF.70102@confluent.org>
Date: Tue, 01 Nov 2005 10:59:27 -0600
From: Tom Hawkins <tom@confluent.org>
User-Agent: Mozilla Thunderbird 1.0 (X11/20041206)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: caml-list@yquem.inria.fr
Subject: Nesting Modules
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 43679EF4.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; nesting:01 mli:01 mli:01 compiler:01 ...:98 inline:01 modules:01 modules:01 defined:01 hierarchical:02 somewhere:02 bottom:93 bottom:93 rather:07 function:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Is it possible to nest modules defined in separate files?

For example, assume I have...

   top.ml
   top.mli
   bottom.ml
   bottom.mli

Can I instruct the compiler to nest Bottom somewhere in Top, to obtain 
clean, hierarchical names (eg: Top.Bottom.some_function)?  Of course I 
can inline bottom.ml in top.ml, but then the file become rather large.

-Tom

