Return-Path: <alphablock@orange.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id 9B1D5BBAF
	for <caml-list@yquem.inria.fr>; Wed, 17 Feb 2010 19:13:28 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao0DAPPAe0tQDPIufGdsb2JhbACDBYwmi1cVAQELCQoHEwUgrkKPcIEwglFcBIZ/
X-IronPort-AV: E=Sophos;i="4.49,492,1262559600"; 
   d="scan'208";a="44978521"
Received: from smtp21.orange.fr ([80.12.242.46])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 17 Feb 2010 19:13:28 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2129.orange.fr (SMTP Server) with ESMTP id 1158F1C00412;
	Wed, 17 Feb 2010 19:13:28 +0100 (CET)
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2129.orange.fr (SMTP Server) with ESMTP id E82601C003F7;
	Wed, 17 Feb 2010 19:13:27 +0100 (CET)
Received: from Lenovo-R60 (Mix-Lyon-303-2-42.w193-248.abo.wanadoo.fr [193.248.44.42])
	by mwinf2129.orange.fr (SMTP Server) with ESMTP id 9A5301C00439;
	Wed, 17 Feb 2010 19:13:26 +0100 (CET)
X-ME-UUID: 20100217181326632.9A5301C00439@mwinf2129.orange.fr
X-ME-User-Auth: alphablock
From: "Damien Guichard" <alphablock@orange.fr>
Subject: Re: [Caml-list] type generalization of recursive calls
To: =?utf-8?B?U3TDqXBoYW5l?= Gimenez <stephane.gimenez@pps.jussieu.fr>
Cc: "The Caml Mailing List" <caml-list@inria.fr>
Content-Type: text/plain;
	charset="utf-8"
MIME-Version: 1.0
Date: Wed, 17 Feb 2010 19:13:22 +0100
Message-ID: <555701182057358141@orange.fr>
X-Mailer: EssentialPIM  v. 3.12
X-Spam: no; 0.00; damien:01 guichard:01 recursive:01 recursion:01 damien:01 gimenez:01 gimenez:01 ocaml:01 recursive:01 syntactical:01 checker:01 pointers:01 cheers:01 beginner's:01 ocaml:01 

I have to apologize because your definition is actually correct.
Sorry i have read it too fast and didn't see map burried in type casting.

It seems to me your are doing structural recursion on some binary tree structure.
Presumably to fast-merge binary heaps or something like that.
pa_polyrec is probably a must have for such things.

- damien



Le 17/02/2010 à 17:34:24, "Stéphane Gimenez" <stephane.gimenez@pps.jussieu.fr>
à écrit :
>
>Hi,
>
>I just realized that ocaml generalizes the type of a recursively
>defined function *only* for calls which are outside it's own
>definition. Recursive calls cannot use a generalized type.
>
>In fact, I'm tring to work with such a data type:
>
>type 'a t =
>  | E
>  | D of 'a t * 'a t
>  | O of 'a
>  | I of 'a t t
>
>And, I'm forced to use some dark magic to define simple operations on
>it:
>
>let rec map (f : 'a -> 'b) : 'a t -> 'b t =
>  begin function
>  | E -> E
>  | D (t1, t2) -> D (map f t1, map f t2)
>  | O a -> O (f a)
>  | I tt ->
>      I ((Obj.magic map : ('a t -> 'b t) -> 'a t t -> 'b t t) (map f) tt)
>  end
>
>Questions:
>  - Is it theoreticaly safe to generalize recursive calls ?
>  - Is there a syntactical trick to use generalized recursive calls ?
>  - Could such a generalization be added to the type checker ?
>      - Performance issues ?
>      - More obfusctated type checking errors ?
>
>In a related disscution I found, one asked about generalization
>between mutualy recursive definitions (same problem). No answers, but
>maybe I just lack pointers.
>
>Cheers,
>Stéphane
>
>_______________________________________________
>Caml-list mailing list. Subscription management:
>http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>Archives: http://caml.inria.fr
>Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>Bug reports: http://caml.inria.fr/bin/caml-bugs
>


--
Mail created using EssentialPIM Free - www.essentialpim.com



