Return-Path: <ocaml@gazagnaire.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id AEEBDBC37
	for <caml-list@yquem.inria.fr>; Thu, 11 Feb 2010 19:55:47 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ak0BAI/hc0tKfU4ZkGdsb2JhbACPQgGKYVEIFQEBAQEJCQwHEwMgh3O3KIRWBA
X-IronPort-AV: E=Sophos;i="4.49,453,1262559600"; 
   d="scan'208";a="44508023"
Received: from ey-out-2122.google.com ([74.125.78.25])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 11 Feb 2010 19:55:47 +0100
Received: by ey-out-2122.google.com with SMTP id 9so39074eyd.7
        for <caml-list@inria.fr>; Thu, 11 Feb 2010 10:55:47 -0800 (PST)
MIME-Version: 1.0
Received: by 10.213.109.77 with SMTP id i13mr193419ebp.82.1265914546819; Thu, 
	11 Feb 2010 10:55:46 -0800 (PST)
Date: Thu, 11 Feb 2010 18:55:46 +0000
Message-ID: <9722eaea1002111055q7f571aeu1797760f58ad4dd5@mail.gmail.com>
Subject: another camlp4 question
From: Thomas Gazagnaire <ocaml@gazagnaire.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=000e0cdf93eae114f3047f57b294
X-Spam: no; 0.00; camlp:01 ocaml:01 camlp:01 ocaml:01 syntax:01 clashes:01 syntax:01 cheers:01 foo:01 sig:01 sig:01 lident:01 val:01 foo:01 compilation:01 

--000e0cdf93eae114f3047f57b294
Content-Type: text/plain; charset=ISO-8859-1

Dear camlp4 gurus,

I am looking to extend the ocaml syntax to add some keyword to module
signatures (in a similar way the type-conv module does for type definition).
However I am stuck with a very basic example. Can anyone tell me what's
wrong here ? It seems that my extension clashes with 'module_type t ::= mt
with wc' in
http://brion.inria.fr/gallium/index.php/Abstract_Syntax_Tree#Module_typesbut
I still have the same problem if I change the 'with' keyword to
'where'.

Cheers,
Thomas

=== foo.ml ===
open Camlp4
open PreCast
open Ast
open Syntax

EXTEND Gram

GLOBAL: sig_item;

sig_item:  [[
    "module"; "type"; i = a_UIDENT; "="; mt = module_type; "with"; id =
LIDENT ->
        <:sig_item< module type $uid:i ^ "_" ^ id$ = $mt$; >>
    ]];
END
===

=== test.ml ===
module type S = sig
    val x : unit -> unit
end with foo
===

=== compilation
$  ocamlfind ocamlc -package camlp4 -c -pp "camlp4orf" foo.ml
$ camlp4o foo.cmo test.ml
File "foo.ml", line 3, characters 4-8:
Parse error: [with_constr] expected after "with" (in [module_type])
===

--000e0cdf93eae114f3047f57b294
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Dear camlp4 gurus,<br><br>I am looking to extend the ocaml syntax to add so=
me keyword to module signatures (in a similar way the type-conv module does=
 for type definition). However I am stuck with a very basic example. Can an=
yone tell me what&#39;s wrong here ? It seems that my extension clashes wit=
h &#39;module_type t ::=3D mt with wc&#39; in <a href=3D"http://brion.inria=
.fr/gallium/index.php/Abstract_Syntax_Tree#Module_types">http://brion.inria=
.fr/gallium/index.php/Abstract_Syntax_Tree#Module_types</a> but I still hav=
e the same problem if I change the &#39;with&#39; keyword to &#39;where&#39=
;.<br>
<br>Cheers,<br>Thomas<br><br>=3D=3D=3D <a href=3D"http://foo.ml">foo.ml</a>=
 =3D=3D=3D<br>open Camlp4<br>open PreCast<br>open Ast<br>open Syntax<br><br=
>EXTEND Gram<br><br>GLOBAL: sig_item;<br><br>sig_item:=A0 [[<br>=A0=A0=A0 &=
quot;module&quot;; &quot;type&quot;; i =3D a_UIDENT; &quot;=3D&quot;; mt =
=3D module_type; &quot;with&quot;; id =3D LIDENT -&gt;<br>
=A0=A0=A0 =A0=A0=A0 &lt;:sig_item&lt; module type $uid:i ^ &quot;_&quot; ^ =
id$ =3D $mt$; &gt;&gt;<br>=A0=A0=A0 ]];<br>END<br>=3D=3D=3D<br><br>=3D=3D=
=3D <a href=3D"http://test.ml">test.ml</a> =3D=3D=3D<br>module type S =3D s=
ig<br>=A0=A0=A0 val x : unit -&gt; unit<br>end with foo<br>
=3D=3D=3D<br><br>=3D=3D=3D compilation<br>$=A0 ocamlfind ocamlc -package ca=
mlp4 -c -pp &quot;camlp4orf&quot; <a href=3D"http://foo.ml">foo.ml</a><br>$=
 camlp4o foo.cmo <a href=3D"http://test.ml">test.ml</a><br>File &quot;<a hr=
ef=3D"http://foo.ml">foo.ml</a>&quot;, line 3, characters 4-8:<br>
Parse error: [with_constr] expected after &quot;with&quot; (in [module_type=
])<br>=3D=3D=3D<br><br>

--000e0cdf93eae114f3047f57b294--

