Return-Path: <bluestorm.dylc@gmail.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id BB488BC37
	for <caml-list@yquem.inria.fr>; Mon, 25 Jan 2010 23:32:50 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AukBAGOrXUvRVdnjkGdsb2JhbACRZIh/Zz8BAQEBCQkMBxMDrwiBQIRTiEQBAQMFhDQE
X-IronPort-AV: E=Sophos;i="4.49,342,1262559600"; 
   d="ml'?scan'208";a="54674604"
Received: from mail-gx0-f227.google.com ([209.85.217.227])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 25 Jan 2010 23:32:13 +0100
Received: by gxk27 with SMTP id 27so3619329gxk.7
        for <caml-list@yquem.inria.fr>; Mon, 25 Jan 2010 14:32:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=3K2LSEkf9bKVCdZ4NCF4l9Z6pP1OWX9agBBMOsQMU+I=;
        b=IxYXpiFTxHu38qXhK1W7Snpru0RC5I7bONXsypIS3mYQaUVKUGOqi3SYG/2WVez1zP
         6w2XwCzRxK3q2MvvjYvbgIHSKjLTNQQE8yP9fjGYcXLEx7/Fwlej05Ls0Yz419aZ34zV
         C/QePJIpeIMkGivR/+exQCEr+DRNDIwHd+3Jg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=YGO7VRH0iJ8c1iT0rbgZWGmsBX00XeJsrumicDM+4qjM7JzU9s9E9GifvMp3NX2tyX
         yGY1MjWAthmQdxqC3zMOZ52SifuQ0aECzz24XH8eC8aBrNQ//zohXqJwEIJ0ol/GGwUJ
         8atdj/GkC8VcGs+eBZC0KkzRecqP14c3pKoc8=
MIME-Version: 1.0
Received: by 10.100.220.17 with SMTP id s17mr2941967ang.196.1264458731718; 
	Mon, 25 Jan 2010 14:32:11 -0800 (PST)
In-Reply-To: <005b01ca9e07$c254d6a0$46fe83e0$@com>
References: <4b523e9c.0d67f10a.06ab.ffffced7@mx.google.com>
	 <003801ca9702$a72e2b30$f58a8190$@com>
	 <527cf6bc1001170024r1e74b0dal38c92924037f2788@mail.gmail.com>
	 <EE2570EB-ECDF-4E22-8554-B84827173C2A@inria.fr>
	 <005b01ca9e07$c254d6a0$46fe83e0$@com>
Date: Mon, 25 Jan 2010 23:32:11 +0100
Message-ID: <527cf6bc1001251432n1e72c0b6idd26154e32cccfb9@mail.gmail.com>
Subject: Re: [Caml-list] A syntax extension to simplify List manipulation
From: blue storm <bluestorm.dylc@gmail.com>
To: Alexander Voinov <avoinov@gmail.com>
Cc: Damien Doligez <damien.doligez@inria.fr>,
	caml-list@yquem.inria.fr
Content-Type: multipart/mixed; boundary=00163623aa3589a2a4047e04bdf8
X-Spam: no; 0.00; syntax:01 voinov:01 uncomment:01 makefile:01 compiler:01 compile-time:01 makefile:01 command-line:01 runtime:01 camlp:01 command-line:01 camlp:01 tarball:01 voinov:01 zlib:01 
X-Attachments: type="application/octet-stream" name="spbSyntax_camlp4.ml" name="spbSyntax_camlp4.ml" 

--00163623aa3589a2a4047e04bdf8
Content-Type: multipart/alternative; boundary=00163623aa3589a28f047e04bdf6

--00163623aa3589a28f047e04bdf6
Content-Type: text/plain; charset=ISO-8859-1

On Mon, Jan 25, 2010 at 10:45 PM, Alexander Voinov <avoinov@gmail.com>wrote:

> I've updated this extension to remove the dependency on ExtLib (as
> suggested
> previously). The price is that iteratei is not available with the core List
> module.
>
> If you do need iteratei, first uncomment the
>
> # WITH_ITERATEI = 1
>
> line in the Makefile (and do a fresh build), and, second, always
>
> open ExtLib;;
>

I think you should keep iteratei by default : if the user use an
insufficient List module, he will get a classical "unbound value
List.iteratei" error from the compiler, and will easily relate it to the
code using your extension (as the "iteratei" name is apparent).
If you document that point, it could be much easier than a compile-time
option that requires one to edit the Makefile. If you really want an option
to disallow iteratei syntaxically, you could use command-line options to
make that choice at runtime (that would be more flexible).
I don't know how well camlp5 handle command-line parameters, so I can't help
you there.


Regarding camlp4, I don't remember why this extension didn't work with it
> after that big refactoring, which gave birth to camlp5. I'm making a TODO
> for myself to take a look at this.
>

In case you're interested, attached is a short camlp4 (>= 3.10) port of your
extension (wich wasn't thoroughly tested). As you can see, changes are
minimal. This is just in case, I don't have any opinion on what preprocessor
you should use.


> The tarball is: http://www.voinov.org/FP/spbSyntax-1.0.1.tgz
>
> (and also http://www.voinov.org/FP/spbSyntax.tgz)
>
>
PS : the software license is the zlib/png license. Maybe you should mention
it explicitely.

--00163623aa3589a28f047e04bdf6
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Mon, Jan 25, 2010 at 10:45 PM, Alexander Voin=
ov <span dir=3D"ltr">&lt;<a href=3D"mailto:avoinov@gmail.com">avoinov@gmail=
.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"bo=
rder-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding=
-left: 1ex;">

I&#39;ve updated this extension to remove the dependency on ExtLib (as sugg=
ested<br>
previously). The price is that iteratei is not available with the core List=
<br>
module.<br>
<br>
If you do need iteratei, first uncomment the<br>
<br>
# WITH_ITERATEI =3D 1<br>
<br>
line in the Makefile (and do a fresh build), and, second, always<br>
<br>
open ExtLib;;<br></blockquote><div><br>I think you should keep iteratei by =
default : if the user use an insufficient List module, he will get a classi=
cal &quot;unbound value List.iteratei&quot; error from the compiler, and wi=
ll easily relate it to the code using your extension (as the &quot;iteratei=
&quot; name is apparent).<br>
If you document that point, it could be much easier than a compile-time opt=
ion that requires one to edit the Makefile. If you really want an option to=
 disallow iteratei syntaxically, you could use command-line options to make=
 that choice at runtime (that would be more flexible).<br>
I don&#39;t know how well camlp5 handle command-line parameters, so I can&#=
39;t help you there. <br><br><br><blockquote style=3D"border-left: 1px soli=
d rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;" class=
=3D"gmail_quote">
Regarding camlp4, I don&#39;t remember why this extension didn&#39;t work w=
ith it<br>
after that big refactoring, which gave birth to camlp5. I&#39;m making a TO=
DO<br>
for myself to take a look at this.<br></blockquote>
<br>In case you&#39;re interested, attached is a short camlp4 (&gt;=3D 3.10=
) port of your extension (wich wasn&#39;t thoroughly tested). As you can se=
e, changes are minimal. This is just in case, I don&#39;t have any opinion =
on what preprocessor you should use.<br>
=A0</div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid =
rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
The tarball is: <a href=3D"http://www.voinov.org/FP/spbSyntax-1.0.1.tgz" ta=
rget=3D"_blank">http://www.voinov.org/FP/spbSyntax-1.0.1.tgz</a><br>
<br>
(and also <a href=3D"http://www.voinov.org/FP/spbSyntax.tgz" target=3D"_bla=
nk">http://www.voinov.org/FP/spbSyntax.tgz</a>)<br>
<br></blockquote><div>=A0</div><div>PS : the software license is the zlib/p=
ng license. Maybe you should mention it explicitely.<br></div></div>

--00163623aa3589a28f047e04bdf6--
--00163623aa3589a2a4047e04bdf8
Content-Type: application/octet-stream; name="spbSyntax_camlp4.ml"
Content-Disposition: attachment; filename="spbSyntax_camlp4.ml"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_g4vu2j971

KCogVGhpcyBpcyBhIGNhbWxwNCBwb3J0IChmcm9tIGNhbWxwNSkgb2YgQWxleGFuZGVyIFZvaW5v
didzICJzaW1wbGlmeQogICBMaXN0IG1hbmlwdWxhdGlvbiIgc3ludGF4IGV4dGVuc2lvbi4gU291
cmNlIGNoYW5nZXMgd2VyZSBtaW5pbWFsLgoKICAgU2VlIGJlbG93IGZvciB0aGUgb3JpZ2luYWwg
Y29weXJpZ2h0IG5vdGljZS4KCiAgIENvbXBpbGF0aW9uIGNvbW1hbmQgdXNlZCA6CiAgICAgb2Nh
bWxmaW5kIG9jYW1sYyAtc3ludGF4IGNhbWxwNG8gLXBhY2thZ2UgY2FtbHA0LmV4dGVuZCxjYW1s
cDQucXVvdGF0aW9ucyAtYyBzcGJTeW50YXhfY2FtbHA0Lm1sCiopCgooKgogKiBDb3B5cmlnaHQg
KGMpIDIwMDMtMjAxMCBBbGV4YW5kZXIgVm9pbm92CgogKiBUaGlzIHNvZnR3YXJlIGlzIHByb3Zp
ZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAogKiB3YXJyYW50eS4g
SW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFn
ZXMKICogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS4KCiAqIFBlcm1pc3Np
b24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJw
b3NlLAogKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBp
dCBhbmQgcmVkaXN0cmlidXRlIGl0CiAqIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5n
IHJlc3RyaWN0aW9uczoKCiAqIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5v
dCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3QKICogbm90IGNsYWltIHRoYXQgeW91IHdyb3Rl
IHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzCiAqIHNvZnR3YXJlIGluIGEg
cHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbgog
KiB3b3VsZCBiZSBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLgoKICogMi4gQWx0ZXJl
ZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVz
dAogKiBub3QgYmUgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJl
LgoKICogMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBh
bnkgc291cmNlCiAqIGRpc3RyaWJ1dGlvbi4KICogKFRoZSB0ZXh0IG9mIHRoaXMgbGljZW5zZSBp
cyBib3Jyb3dlZCBmcm9tIG9uZSBmb3VuZCBpbiBvY2FtbG5ldC0yLjIuOSkKICopCgpvcGVuIENh
bWxwNApvcGVuIFByZUNhc3QKb3BlbiBTeW50YXgKCkVYVEVORCBHcmFtCiAgR0xPQkFMOiBleHBy
OwoKICBleHByOiAKICAgIExFVkVMICJ0b3AiIFsgWyAibWFwIjsgbGlzdCA9IGV4cHI7ICJ3aXRo
IjsgT1BUICJ8IjsgY2xhdXNlcyA9IExJU1QxIG1hdGNoX2Nhc2UgU0VQICJ8IiAtPgoJICA8OmV4
cHI8IExpc3QubWFwIChmdW4gWyAkbGlzdDpjbGF1c2VzJCBdKSAkbGlzdCQgPj4gXQoKICAgIHwg
WyAiZmlsdGVybWFwIjsgbGlzdCA9IGV4cHI7ICJ3aXRoIjsgT1BUICJ8IjsgY2xhdXNlcyA9IExJ
U1QxIG1hdGNoX2Nhc2UgU0VQICJ8IiAtPgoJICA8OmV4cHI8IExpc3QuZmlsdGVyX21hcCAoZnVu
IFsgJGxpc3Q6Y2xhdXNlcyQgXSkgJGxpc3QkID4+IF0KCiAgICB8IFsgIml0ZXJhdGUiOyBsaXN0
ID0gZXhwcjsgIndpdGgiOyBPUFQgInwiOyBjbGF1c2VzID0gTElTVDEgbWF0Y2hfY2FzZSBTRVAg
InwiOyAiZG9uZSIgLT4KCSAgPDpleHByPCBMaXN0Lml0ZXIgKGZ1biBbICRsaXN0OmNsYXVzZXMk
IF0pICRsaXN0JCA+PiBdCgkKICAgIHwgWyAiaXRlcmF0ZWkiOyBsaXN0ID0gZXhwcjsgIndpdGgi
OyBPUFQgInwiOyBjbGF1c2VzID0gTElTVDEgbWF0Y2hfY2FzZSBTRVAgInwiOyAiZG9uZSIgLT4K
CSAgPDpleHByPCBMaXN0Lml0ZXJpIChmdW4gbiBoIC0+IG1hdGNoIChuLCBoKSB3aXRoIFsgJGxp
c3Q6Y2xhdXNlcyQgXSkgJGxpc3QkID4+IF0KCiAgICB8IFsgImZvbGRyIjsgbGlzdCA9IGV4cHI7
ICJmcm9tIjsgaW5pdHZhbCA9IGV4cHI7ICJ3aXRoIjsgT1BUICJ8IjsgCgljbGF1c2VzID0gTElT
VDEgbWF0Y2hfY2FzZSBTRVAgInwiIC0+CgkgIDw6ZXhwcjwgTGlzdC5mb2xkX3JpZ2h0IChmdW4g
YSBiIC0+IAoJCQkJICAgICBtYXRjaCAoYSwgYikgd2l0aCBbICRsaXN0OmNsYXVzZXMkIF0pIAoJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3QkICRpbml0dmFsJCA+PiBdCgogICAgfCBb
ICJmb2xkbCI7IGxpc3QgPSBleHByOyAiZnJvbSI7IGluaXR2YWwgPSBleHByOyAid2l0aCI7IE9Q
VCAifCI7IAoJY2xhdXNlcyA9IExJU1QxIG1hdGNoX2Nhc2UgU0VQICJ8IiAtPgoJICA8OmV4cHI8
IExpc3QuZm9sZF9sZWZ0IChmdW4gYSBiIC0+IAoJCQkJICAgICBtYXRjaCAoYSwgYikgd2l0aCBb
ICRsaXN0OmNsYXVzZXMkIF0pIAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgJGluaXR2YWwk
ICRsaXN0JCA+PiBdCiAgICBdOwpFTkQKCg==
--00163623aa3589a2a4047e04bdf8--

