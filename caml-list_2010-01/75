Return-Path: <guillaume.yziquel@citycable.ch>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 0E9FFBBAF;
	Fri,  8 Jan 2010 21:55:20 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av4CAPspR0tV2gB5h2dsb2JhbACDXpd5AQEBCgsIBxWsJo0HgSuCLlYEiSY
X-IronPort-AV: E=Sophos;i="4.49,244,1262559600"; 
   d="scan'208";a="53528718"
Received: from emailfrontal2.citycable.ch ([85.218.0.121])
  by mail4-smtp-sop.national.inria.fr with SMTP; 08 Jan 2010 21:55:19 +0100
Received: from [192.168.0.12] (unknown [85.218.92.99])
	(Authenticated sender: guillaume.yziquel@citycable.ch)
	by emailfrontal2.citycable.ch (Postfix) with ESMTPA id 338CB8343C6;
	Fri,  8 Jan 2010 21:55:15 +0100 (CET)
Message-ID: <4B479BA3.6060300@citycable.ch>
Date: Fri, 08 Jan 2010 21:54:59 +0100
From: Guillaume Yziquel <guillaume.yziquel@citycable.ch>
Reply-To: guillaume.yziquel@citycable.ch
User-Agent: Mozilla-Thunderbird 2.0.0.22 (X11/20090707)
MIME-Version: 1.0
To: OCaml List <caml-list@inria.fr>
Subject: Controlling module loading order.
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; guillaume:01 guillaume:01 toplevel:01 segfaults:01 bindings:01 ocaml:01 byte:01 cmxa:01 byte:01 cmxa:01 stub:01 initialise:01 functor:01 struct:01 argv:01 

Hi.

I've been reimpleminting the OCaml-R binding, and implemented a simple 
wrapper around the Quantmod package in R:

http://yziquel.homelinux.org/gitweb/?p=ocaml-r.git;a=tree
http://yziquel.homelinux.org/gitweb/?p=ocamlr-quantmod.git;a=tree

Testing these modules from the toplevel is quite fine. However, when 
compiling stuff using these pieces of code, I have issues with the way 
the modules are loaded, since the order in which they are loaded has 
side-effects: Initialisation of the R interpreter in the good case, 
segfaults in the bad case...

For instance, the META file of OCaml-R:

>    1 name = "R"
>    2 version = "0.2"
>    3 description = "R bindings for OCaml"
>    4 requires = "unix"
>    5 archive(byte) = "r.cma"
>    6 archive(native) = "r.cmxa"
>    7 
>    8 package "interpreter" (
>    9   version = "0.2"
>   10   description = "Embedded R interpreter"
>   11   requires = "R"
>   12   archive(byte) = "oCamlR.cma"
>   13   archive(native) = "oCamlR.cmxa"
>   14 )

The stub functions are in package "R", and package "R.interpreter" 
contains a module with and empty signature, whose side-effects are to 
initialise the R interpreter through an application of the functor

>   19 module Interpreter (Env : Environment) : Interpreter = struct
>   20 
>   21   let () = init ~name: Env.name
>   22                 ~argv: Env.options
>   23                 ~env:  Env.env
>   24                 ~sigs: Env.signal_handlers
>   25                 ()
>   26 
>   27 end

My issue concerns the Quantmod wrapper: How can I make sure that when 
the Quantmod module is loaded, the OCamlR module of the "R.interpreter" 
findlib package gets loaded before?

Currently the ocamlbuild _tags file for ocamlr-quantmod is

>    1 <quantmod.ml>: pkg_R.interpreter, pkg_CRAN-zoo

But that doesn't seem to do the trick...

My question is: do I have to put a line like "module X = OCamlR" in 
quantmod.ml, or is there a way to load OCamlR beforehand just by 
tweaking the build process, order of modules when linking, etc...

All the best,

-- 
      Guillaume Yziquel
http://yziquel.homelinux.org/

