Return-Path: <alain@frisch.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id D2A3CBBAF
	for <caml-list@yquem.inria.fr>; Tue,  5 Jan 2010 14:00:38 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsYCAOvGQkvB/Bd4dmdsb2JhbACDX5d8AQwLCAkPAgWpYY1IgSyCLlYE
X-IronPort-AV: E=Sophos;i="4.47,505,1257116400"; 
   d="scan'208";a="40792159"
Received: from smtp-msa-out01.orange.fr ([193.252.23.120])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 05 Jan 2010 14:00:38 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf5a04.orange.fr (SMTP Server) with ESMTP id 65A0F1C0008D;
	Tue,  5 Jan 2010 14:00:38 +0100 (CET)
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf5a04.orange.fr (SMTP Server) with ESMTP id 48DF31C00082;
	Tue,  5 Jan 2010 14:00:38 +0100 (CET)
Received: from [192.168.1.53] (APuteaux-154-1-76-21.w83-204.abo.wanadoo.fr [83.204.179.21])
	by mwinf5a04.orange.fr (SMTP Server) with ESMTP id C67A71C0008D;
	Tue,  5 Jan 2010 14:00:37 +0100 (CET)
X-ME-UUID: 20100105130037813.C67A71C0008D@mwinf5a04.orange.fr
X-ME-User-Auth: lexifi
Message-ID: <4B4337F4.4070407@frisch.fr>
Date: Tue, 05 Jan 2010 14:00:36 +0100
From: Alain Frisch <alain@frisch.fr>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.5) Gecko/20091204 Thunderbird/3.0
MIME-Version: 1.0
To: Nicolas Pouillard <nicolas.pouillard@gmail.com>
Cc: Jon Harrop <jon@ffconsultancy.com>,
	caml-list <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] Favorite OCaml editor?
References: <756daca51001042203w3c6a397cx6a5d594c28855a4d@mail.gmail.com> <201001050813.16437.jon@ffconsultancy.com> <4B4313FB.6070808@frisch.fr> <1262688075-sup-7836@peray>
In-Reply-To: <1262688075-sup-7836@peray>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; frisch:01 frisch:01 ocaml:01 haskell:01 syntax:01 haskell:01 buffer:01 buffer:01 trivial:01 parser:01 ocaml's:01 wrote:01 parsing:01 parsing:01 caml-list:01 

On 05/01/2010 11:44, Nicolas Pouillard wrote:
> Reusing the work done in the Yi [1][2] editor for the Haskell syntax should
> be pretty straightforward. Very long and painful however due to the complexity
> of the grammar of a real language.
>
> [1]: http://www.haskell.org/haskellwiki/Yi
> [2]: http://www.cse.chalmers.se/~bernardy/FunctionalIncrementalParsing.pdf

Thanks for the links. The paper is a very interesting reading indeed. 
Its main focus is on incrementality (not reparsing the whole buffer at 
every keystroke). I'm not so sure how important it is in the context of 
the current discussion though: I guess that with an efficient parsing 
technology and modern computers, parsing even a big buffer at every 
keystroke should be fast enough. Trivial optimizations like storing the 
internal state of the parser at some point could also be used if needed.

I'm more concerned about the error recovery aspect; the paper suggests 
the use of annotated error recovery rules, but writing them for a 
grammar like OCaml's does not seem an easy task at all.


Alain


