Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id UAA14610 for caml-redistribution; Tue, 23 Apr 1996 20:45:56 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id QAA15383 for <caml-list@pauillac.inria.fr>; Mon, 22 Apr 1996 16:37:54 +0200
Received: from charon.alto.org (charon.alto.org [194.167.80.13]) by concorde.inria.fr (8.7.1/8.7.1) with SMTP id QAA27010 for <caml-list@pauillac.inria.fr>; Mon, 22 Apr 1996 16:37:51 +0200 (MET DST)
Received: from gw-msmail.ac-dijon.fr (gw-msmail.ac-dijon.fr [194.167.18.12]) by charon.alto.org (8.6.12/8.6.12) with SMTP id PAA13871 for <caml-list@pauillac.inria.fr>; Mon, 22 Apr 1996 15:35:03 +0100
Received: by gw-msmail.ac-dijon.fr with Microsoft Mail
	id <317C0954@gw-msmail.ac-dijon.fr>; Mon, 22 Apr 96 15:33:56 PDT
From: "QUERCIA Michel (T) Math" <querciam@l-carnot1.ac-dijon.fr>
To: "'caml-list@pauillac.inria.fr'" <caml-list@pauillac.inria.fr>
Subject: recursive definition
Date: Mon, 22 Apr 96 12:16:00 PDT
Message-ID: <317C0954@gw-msmail.ac-dijon.fr>
Encoding: 102 TEXT
X-Mailer: Microsoft Mail V3.0
Sender: weis
Status: O



==========================================================================  

En francais :

Il a ete explique dans un post precedent que "let rec x = f(x)"
n'est compilable que si "x" est une fonction ou si la compilation
de "f(x)" ne depend pas de "x".

Qu'est-ce qui ne va pas dans la definition de "fib" ci dessous ?

==========================================================================  

In english :

I remember a post where it was explained that "let rec x = f(x)" is   
handled
only when "x" is a function or when "f(x)" may be compiled with no   
knowledge
of "x".

So, what is wrong with the following attempt to define "fib" ?

==========================================================================  


>       Caml Light version 0.7

#                        (* +----------------------+
                            |  Fonction a memoire  |
                            +----------------------+ *)


let remember(f) =
  let t = hashtbl__new(17) in
  fun x -> try hashtbl__find t x
           with Not_found -> let y = f(x) in hashtbl__add t x y; y
;;
remember : ('a -> 'b) -> 'a -> 'b = <fun>
#


let premier = remember(fun x ->
  printf__fprintf stderr "appel %d\n" x; flush stderr;
  let y = ref(2) in
  while !y * !y < x & x mod !y > 0 do incr y done;
  !y * !y > x
);;
premier : int -> bool = <fun>
#
map premier [1;2;3;4;5;6;7;8;9;10];;
appel 10
appel 9
appel 8
appel 7
appel 6
appel 5
appel 4
appel 3
appel 2
appel 1
 - : bool list =
 [true; true; true; false; true; false; true; false; false; false]
#
map premier [1;2;3;4;5;6;7;8;9;10];;
 - : bool list =
 [true; true; true; false; true; false; true; false; false; false]
#


let rec fib = remember(fun x ->
  if x < 2 then 1 else fib(x-1) + fib(x-2)
);;
Entrée interactive:
>..............remember(fun x ->
>  if x < 2 then 1 else fib(x-1) + fib(x-2)
>).......
Ce genre d'expressions n'est pas autorisé comme membre droit d'un "let   
rec".
#quit();;

Process inferior-caml finished

==========================================================================  


PS : J'ai aussi essaye :

let rec fib(x) = let g = remember(fun x -> ...) in g(x);;

Ca marche (a la compilation) mais il n'y a pas memorisation
des resultats puisque g est reconstruite a chaque appel.

==========================================================================  


Michel Quercia
Lycee Carnot
Dijon

email = querciam@ac-dijon.fr
Cc = quercia@u-bourgogne.fr  




