Return-Path: <Xavier.Leroy@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 27346BBAF
	for <caml-list@yquem.inria.fr>; Tue,  5 May 2009 11:24:25 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.38,431,1233529200"; 
   d="scan'208";a="28760714"
Received: from estephe.inria.fr ([128.93.11.95])
  by mail1-relais-roc.national.inria.fr with ESMTP; 05 May 2009 11:24:25 +0200
Message-ID: <4A0005C8.8010609@inria.fr>
Date: Tue, 05 May 2009 11:24:24 +0200
From: Xavier Leroy <Xavier.Leroy@inria.fr>
User-Agent: Thunderbird 2.0.0.17 (X11/20080929)
MIME-Version: 1.0
To: Dmitry Bely <dmitry.bely@gmail.com>
Cc: Caml List <caml-list@inria.fr>
Subject: Re: [Caml-list] Ocamlopt code generator question
References: <90823c940904281236x61204451nac149ee15b5df73a@mail.gmail.com>
In-Reply-To: <90823c940904281236x61204451nac149ee15b5df73a@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; ocamlopt:01 asmcomp:01 mlp:01 ofs:01 ofs:01 pointer:01 ocamlopt:01 unboxed:01 model:01 caml-list:01 functions:01 conventions:02 conventions:02 caml:02 caml:02 

> For amd64 we have in asmcomp/amd64/proc_nt.mlp:
> 
> (*  xmm0 - xmm15  100 - 115       xmm0 - xmm9: Caml function arguments
>                                 xmm0 - xmm3: C function arguments
>                                 xmm0: Caml and C function results
>                                 xmm6-xmm15 are preserved by C *)
> 
> let loc_arguments arg =
>   calling_conventions 0 9 100 109 outgoing arg
> let loc_parameters arg =
>   let (loc, ofs) = calling_conventions 0 9 100 109 incoming arg in loc
> let loc_results res =
>   let (loc, ofs) = calling_conventions 0 0 100 100 not_supported res in loc
> 
> What these first_float=100 and last_float=109 for loc_arguments and
> loc_parameters affect? My impression is that floats are always passed
> boxed, so xmm registers are in fact never used to pass parameters. And
> float values are returned as a pointer in eax, not a value in xmm0 as
> loc_results would suggest.

The ocamlopt code generators support unboxed floats as function
parameters and results, as well as returning multiple results in
several registers.  (Except for the x86-32 bits port, because of the
weird floating-point model of this architecture.)  You're right that
the ocamlopt "middle-end" does not currently take advantage of this
possibility, since floats are passed between functions in boxed state.

- Xavier Leroy

