Return-Path: <Pascal.Cuoq@cea.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.4 required=5.0 tests=AWL,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id C3D96BC37
	for <caml-list@yquem.inria.fr>; Mon, 11 May 2009 09:11:14 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoDAGNsB0qEpqxqgWdsb2JhbACXEAEBFiK0X4N+BQ
X-IronPort-AV: E=Sophos;i="4.40,327,1238968800"; 
   d="scan'208";a="39731294"
Received: from cirse-out.extra.cea.fr ([132.166.172.106])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 11 May 2009 09:11:14 +0200
Received: from pisaure.intra.cea.fr (pisaure.intra.cea.fr [132.166.88.21])
	by cirse.extra.cea.fr (8.14.2/8.14.2/CEAnet-Internet-out-2.0) with ESMTP id n4B7BDII022671
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@yquem.inria.fr>; Mon, 11 May 2009 09:11:13 +0200
Received: from muguet2.intra.cea.fr (muguet2.intra.cea.fr [132.166.192.7])
	by pisaure.intra.cea.fr (8.14.2/8.14.2) with ESMTP id n4B7BDrI018087
	for <caml-list@yquem.inria.fr>; Mon, 11 May 2009 09:11:13 +0200
	(envelope-from Pascal.Cuoq@cea.fr)
Received: from is005030.intra.cea.fr (is005030.intra.cea.fr [132.166.132.11])
	by muguet2.intra.cea.fr (8.13.8/8.13.8/CEAnet-Intranet-out-1.1) with ESMTP id n4B7BDSl000637
	for <caml-list@yquem.inria.fr>; Mon, 11 May 2009 09:11:13 +0200
Message-Id: <B1CD096B-910F-41B7-BBE8-5F2EA0DB49AF@cea.fr>
From: Pascal Cuoq <Pascal.Cuoq@cea.fr>
To: caml-list@yquem.inria.fr
In-Reply-To: <20090511043120.976EBBC67@yquem.inria.fr>
Content-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0 (Apple Message framework v930.3)
Subject: Ocamlopt x86-32 and SSE2
Date: Mon, 11 May 2009 09:10:38 +0200
References: <20090511043120.976EBBC67@yquem.inria.fr>
X-Mailer: Apple Mail (2.930.3)
X-Spam: no; 0.00; cuoq:01 cuoq:01 ocamlopt:01 runtime:01 compiler:01 athena:98 wrote:01 wrote:01 functions:01 cea:01 data:02 data:02 argument:02 fftw:02 slower:02 

Here's an idea, I don't know if it is relevant, but it looks that
it could be a good compromise (option 2.5, if you will): how about
implementing floating-point operations as function calls
(the functions could be written in C and be part of the runtime library)
when the SSE2 instructions are not available? Is that simpler than
option 3?

Matteo Frigo <athena@fftw.org> wrote:
> Do you guys have any sort of empirical evidence that scalar SSE2  
> math is
> faster than plain old x87?

It's not speed I am after personally, but a correct implementation
of IEEE 754's round-to-nearest mode for doubles.
Also, the satisfying knowledge that the code of the compiler I use
is as tight is it can be and that I could understand it if I had to
some day.

Jon Harrop <jon@ffconsultancy.com> wrote:
> Note that you can use the same argument to justify not optimizing  
> the x86
> backend because power users should be using the (much more  
> performant) x64
> code gen.

I don't know where you get "much more performant" from.
For what I do, speed of floating-point operations is irrelevant, but
not the speed of the whole application. The whole application is
slightly slower (~10%) with the larger data words despite the improved
instruction set. Plus, memory is also a concern, and for users who
have less than 6GiB of memory, there are actually more addressable
data words in x86 mode.

Pascal

