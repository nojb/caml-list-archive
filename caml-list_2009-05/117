Return-Path: <peng.zang@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=5.0 tests=DNS_FROM_RFC_POST,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id F2816BC37
	for <caml-list@yquem.inria.fr>; Thu, 14 May 2009 14:12:00 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkUCAG+nC0rRVYT2nGdsb2JhbACNUYkMPwEBAQEBCAsIAgcPpzkIgQqPeQEDAQODfwWGIQ
X-IronPort-AV: E=Sophos;i="4.41,194,1241388000"; 
   d="scan'208";a="39964627"
Received: from an-out-0708.google.com ([209.85.132.246])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 14 May 2009 14:12:00 +0200
Received: by an-out-0708.google.com with SMTP id b38so497046ana.3
        for <caml-list@yquem.inria.fr>; Thu, 14 May 2009 05:11:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:from:reply-to:to:subject:date
         :user-agent:cc:references:in-reply-to:content-type
         :content-transfer-encoding:content-disposition:message-id;
        bh=hMNT9YN9Tnc9dzAxr9VLpxpytauEDiv/d8onjy59iuQ=;
        b=dunL42q1sZxBPa7CRJG5oDSYWUnRgBjuf5pdRcqq/zTBAPO8y6FyHA++45wvuNWwaU
         Vlx0OT8kd6oVP3SKjCpjSnij/O+UZWCUCNXnni2l3NxbihpgMiR1yxy4edW5iSv8Ak+U
         m2qoXuG8KDo5fAZJf23OkCr57PfVoID0A3218=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=from:reply-to:to:subject:date:user-agent:cc:references:in-reply-to
         :content-type:content-transfer-encoding:content-disposition
         :message-id;
        b=kbNHN7uvD+Y0xOBcI5KmmZ3skYlszmqULdexWu3ZN3/jJIIZJhnVtfqeHIRVehQ4+/
         r4U3EUODvcjF6nBShgwFixmHlRebQLaPwKccsEeuOnSLqUdwHpU9jEauB+HeAwRGNKtR
         URIZax7jn4jbVS9Tmshplj04TVpX857+Oorpo=
Received: by 10.100.91.19 with SMTP id o19mr2952574anb.48.1242303119085;
        Thu, 14 May 2009 05:11:59 -0700 (PDT)
Received: from ?192.168.0.102? ([98.230.173.131])
        by mx.google.com with ESMTPS id d35sm4154691and.15.2009.05.14.05.11.57
        (version=TLSv1/SSLv3 cipher=RC4-MD5);
        Thu, 14 May 2009 05:11:58 -0700 (PDT)
From: Peng Zang <peng.zang@gmail.com>
Reply-To: peng.zang@gmail.com
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Shared types: circular dependency in modules with polymorphic type
Date: Thu, 14 May 2009 08:11:50 -0400
User-Agent: KMail/1.9.9
Cc: Hugo Ferreira <hmf@inescporto.pt>
References: <4A0B1B81.8090700@inescporto.pt> <4A0B2218.2050305@mcmaster.ca> <4A0C0364.7000408@inescporto.pt>
In-Reply-To: <4A0C0364.7000408@inescporto.pt>
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200905140811.56572.peng.zang@gmail.com>
X-Spam: no; 0.00; hash:01 struct:01 struct:01 sig:01 val:01 val:01 sig:01 beginner's:01 ocaml:01 bug:01 peng:98 peng:98 2009:98 polymorphic:01 polymorphic:01 

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I think this is because UI.t is abstract and is in fact, never created.  You 
need to tell the old caml that UI.t is actuall an int VI.t.  Then it should 
work.

module Make_P (VI : VB)
              (UI : U with type t = int VI.t)
              (RI : R with type t = UI.t and type instance = UI.instance ) =
struct ... end

module P1 = Make_P ( VB1 ) ( U1 ) ( R1 )

Works like a charm for me,

Peng


On Thursday 14 May 2009 07:41:24 am Hugo Ferreira wrote:
> Hello,
>
> I have again encountered a problem with sharing types.
> However this time I really have a set of interfaces
> which need to be "stitched" together via type sharing.
>
> Problem is I am dealing with a circular polymorphic
> type dependency. Or at least seems so. I have added the
> very simple code for testing at the end. But the short
> of it is: with the code below
>
> module Make_P (VI : VB)
>                (UI : U)
>                (RI : R with type t = UI.t )
> = struct
>
>    type instance = UI.instance
>    type t = UI.t
>
>    let do_something_nice null =
>      let vb0 = VI.empty in
>      let vb1 = VI.add vb0 UI.zero in
>      RI.do_something_else vb1 UI.one
>
> end
>
> I get the error:
>
> This expression (vb1) has type UI.instance VI.t but is here used with type
>    RI.t = UI.t
> vb1: UI.instance VI.t
>
>
> The problem is that VI.t is polymorphic.
> And UI uses VI.t setting the polymorphic
> type in the process.
> I want to make it "UI.instance VI.t."
> How can I do that. I have tried:
>
>
> module Make_P (VI : VB)
>                (UI : U with type t = U.instance VI.t)
>                (RI : R with type t = UI.t )
> and
>
> module Make_P (UI : U)
>                (VI : VB with type 'a t = UI.t)
>                (RI : R with type t = UI.t )
>
> with no success.
>
>
>
> --------------------- Code ---------------
>
>
>
> module type VB = sig
>
>    type 'a t
>
>    val empty : 'a t
>    val add : 'a t -> 'a -> 'a t
> end
>
>
> module VB1 : VB
> = struct
>
>    type 'a t = 'a list
>
>    let empty = []
>    let add l e = e :: l
> end
>
>
> module type U =
>    sig
>
>      type instance = int
>      type t
>
>      val zero : instance
>      val one : instance
>
>      val empty : t
>      val do_something : t -> instance -> t
> end
>
>
> module Make_U (Vb : VB)
> = struct
>
>    type instance = int
>    type t = instance Vb.t
>
>    let zero = 0
>    let one = 1
>
>    let empty = Vb.empty
>    let do_something ts inst = Vb.add ts inst
>
> end
>
>
> module U1 = Make_U ( VB1 )
>
> let _ =
>
>    let vb0 = VB1.empty in
>    let vb1 = VB1.add vb0 U1.zero in
>    let vb2 = U1.do_something vb1 U1.one in
>    let _ = VB1.add vb2 U1.zero in
>    ()
>
>
> module type R =
>    sig
>
>      type instance = int
>      type t
>
>      val do_something_else : t -> instance -> t
> end
>
> module Make_R (VI : VB)
>                (UI : U)
> = struct
>
>    type instance = UI.instance
>    type t = UI.t
>
>    let do_something_else ts inst = UI.do_something ts inst
>
> end
>
> module R1 = Make_R ( VB1 ) ( U1 )
>
>
> let _ =
>
>    let vb0 = VB1.empty in
>    let vb1 = VB1.add vb0 U1.zero in
>    let vb2 = R1.do_something_else vb1 U1.one in
>    let _ = VB1.add vb2 U1.zero in
>    ()
>
>
> module Make_P (VI : VB)
>                (UI : U)
>                (RI : R with type t = UI.t )
> = struct
>
>    type instance = UI.instance
>    type t = UI.t
>
>    let do_something_nice null =
>      let vb0 = VI.empty in
>      let vb1 = VI.add vb0 UI.zero in
>      RI.do_something_else vb1 UI.one
>
> end
>
> module P1 = Make_P ( U1 ) ( VB1 ) ( R1 )
>
> or
>
> module P1 = Make_P ( VB1 ) ( U1 ) ( R1 )
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.7 (GNU/Linux)

iD8DBQFKDAqMfIRcEFL/JewRAikyAKDWuRFALodBLy5NqWJFBH4MDD5FdgCg0Q5J
U4I+34lrt7QjpkzQwZpztEE=
=VbUW
-----END PGP SIGNATURE-----

