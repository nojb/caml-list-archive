Return-Path: <SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 85102E0241
	for <caml-list@sympa.inria.fr>; Tue, 27 Sep 2022 09:17:24 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0";
  x-record-text="spf2.0/pra,mfrom +a:mx1.polytechnique.org
  +a:mx2.polytechnique.org +a:mx3.polytechnique.org
  +ip6:2001:41d0:1:94de::736d:7470 -all"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=wKHr=Z6=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1";
  x-record-text="v=spf1 a -all"
IronPort-SDR: 6332a383_3oKFCCo8ojjvm5eClC87Z62T3IU1l1WFFmZHEEGFD+Lt087
 oyFwYNjdYa3GWOacWEBOEorJAxdV1d5ygzwtqBw==
X-IPAS-Result: =?us-ascii?q?A0DplgAXojJjhyIeaIFaARWDY1soGQFnVi4HCEWEET2RF?=
 =?us-ascii?q?IEWiEqHC41PBE4QAQMBDSwBDAYBAgQBAYISgnMChGwCHgYBBTMTAQIEAQEBA?=
 =?us-ascii?q?QMCAwEBAQEBAQMBAQUBAQECAQECBAQBEwEBAQEYCRcHEA4FIoU7ByYNgjUMD?=
 =?us-ascii?q?AODdwMBCg4BCAQGEwEBKwcGGCMDFAEGAwIRARcBHgMBEwESFAYBgmIBgyADB?=
 =?us-ascii?q?QuOM5pOGjV6fzOBAYIIAQEGgUABAwIBCwICAw8uAYN2gVwJJIECF4cGbkUQA?=
 =?us-ascii?q?YM3CYQdAicQgVVEgRWCKRI4B26BUHAXCwEBAQEBgTQHAQEIRQmDIBiCToUhh?=
 =?us-ascii?q?GGPJwc3A0QdQQMLdwMVAxQDBSQHAxkPIw0NBB0MAwMFJQMCAhsHAgIDAgYTB?=
 =?us-ascii?q?QICFzY2CAQIBCskDwUCBy8FBC8CHgQFBhEIAhYCBgQEBAQVAhAIAggmFwcTM?=
 =?us-ascii?q?xkBBVkQCSEWBigNBQYTAyBJJgVEDygxaysdGwqBDCoJHxUDBAQDAgYTAwMiA?=
 =?us-ascii?q?hAqMRQEKRMSLQcrcwkCAyJsAwMEKCwDCSEfBygmPAdYEigFAwIQIj0GAwkDA?=
 =?us-ascii?q?iRbgQMsKAUDDRkmCAU6HgQIPAIFBlcTAgoSAxMPlyOBT4EWLw4HMQYBFhcQD?=
 =?us-ascii?q?gwJAwEDDQcTAQcMCA4BARQNAQ0gAQQECBsVAQcDAgIBEBUIBAkECgMBGAEOD?=
 =?us-ascii?q?BMIAxEYEQOERI1XEykDb40Sim2UU4EBNAeDXIFDBgyIQ4EjjQOIK4N2gVCLA?=
 =?us-ascii?q?IZlkVkhljA6IIIrhwICgRkJgkuIQA2LeiYDIBmFBIFOKiOBKhsPBzMaMEMNG?=
 =?us-ascii?q?YJBCUUcD4MoilABMxaBBAEHghwoQX2BJnspGDk7WieESz80AgEBNwIGAQoBA?=
 =?us-ascii?q?QMJhWMBAQUTCwGBf4JIAQE?=
IronPort-PHdr: A9a23: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
IronPort-Data: A9a23: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
IronPort-HdrOrdr: A9a23:j5Kik6xOultIALqd54kAKrPwEb1zdoMgy1knxilNoH1uA6+lfq
 WV9sjzuiWbtN98YhwdcLO7WJVoI0m8yXcd2+B4VotKNzOIhILHFu1fxLqn6wKlMSzz/OxQ2M
 5bAspDIey1K0N1yeLz4AzQKadF/DBrytHMudvj
X-IronPort-Anti-Spam-Filtered: true
X-Spam-Status: Yes
X-IronPort-AV: E=Sophos;i="5.93,348,1654552800"; 
   d="scan'208,217";a="54672535"
X-MGA-submission: =?us-ascii?q?MDFfUUo75xMvMA4RPqjiZSzVmfwLh/CzCr8nN3?=
 =?us-ascii?q?JWVv5yWYHS6QGnC5ZWRlwoymw3I+iQ4AygLd5Ax8kYdtLVG+9w6BUZTe?=
 =?us-ascii?q?gOQdWqLHc0Njxa58QVQOYQ1aOu3jJam97TEYnEUBFzLk/ewRj0YsuRs/?=
 =?us-ascii?q?nLjHWSJ+t3CuJipawwLUQfEw=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 27 Sep 2022 09:17:23 +0200
Received: from set (unknown [131.254.252.112])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 40605565D5D;
	Tue, 27 Sep 2022 09:17:22 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=polytechnique.org;
	s=svoboda; t=1664263042;
	bh=JaH82cRTRgykxqWwUOyB+9maDkML8dg6nmhe/avzzbU=;
	h=From:To:Subject:Date:Message-ID;
	b=uMMBObB0BlcksnE09GmHzP7Bk7qycjIWyQntKvdp+QGMwdNvB/6DUfj5YFKBwGxbg
	 2VSTn2IBUfDYWBx0AeHmRRyJOs9VLHNdtwGYSPe/OPyvyaDzmGCwtEnLlssN8ldN7q
	 OgrSQef/crO6J6qM5fOBiyLtrmTwG0LiO3BeD55Y=
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 27 Sep 2022 09:17:14 +0200
Message-ID: <87v8p9nv5x.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Sep 27 09:17:22 2022 +0200 (CEST))
X-Spam-Flag: Unsure, tests=bogofilter, spamicity=0.499997, queueID=9102D565D5F
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of September 20 to
27, 2022.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Esperanto, when OCaml meets Cosmopolitan
OBazl Toolsuite - tools for building OCaml with Bazel
Orsetto: structured data interchange languages (release 1.1.2)
Interest in a Http_sig library?
Outreachy summer =E2=80=9922 closing commemoration session on 23rd Sept
findlib-1.9.6
Interesting OCaml Articles
Other OCaml News
Old CWN


Esperanto, when OCaml meets Cosmopolitan
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-esperanto-when-ocaml-meets-cosmopolitan/=
10501/1>


Calascibetta Romain announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I am delighted to present the first *experimental* release of
  Esperanto. This project is a new OCaml _toolchain_ that creates
  binaries compiled with the [Cosmopolitan C library] and linked with
  the [=CE=B1c=CF=84=C2=B5=CE=B1lly p=CE=B4r=CF=84=CE=B1bl=CE=B5 =CE=B5x=CE=
=B5c=C2=B5=CF=84=CE=B1bl=CE=B5] link script. The binary produced is
  then portable to different platforms:

  <https://worker.jart.workers.dev/redbean/linux.png>
  <https://worker.jart.workers.dev/redbean/windows10.png>
  <https://worker.jart.workers.dev/redbean/msdos60.png>
  <https://worker.jart.workers.dev/redbean/macos.png>
  <https://worker.jart.workers.dev/redbean/freebsd64.png>
  <https://worker.jart.workers.dev/redbean/openbsd.png>
  <https://worker.jart.workers.dev/redbean/netbsd2.png>

  The main objective of Esperanto is to provide a toolchain capable of
  producing a portable binary from an existing project. This would allow
  to finally be able to distribute software for all these platforms
  without having to:
  1) manage multiple platforms orthogonally, the Cosmopolitan C library
     offers you the POSIX API for all platforms (including Windows)
  2) Produce several versions of the same software for each platform.
     Only the binary is needed to run on all platforms

  Cosmopolitan *does not* however produce a binary with a multi-platform
  assembler. At this stage, our distribution only supports the `x86_64'
  assembler (the most common one) but we are working on the possibility
  to produce a binary with different assemblers.

  I would like to give special thanks to Justine, the author of the
  Cosmopolitan project (to develop [redbean], a small portable HTTP
  server) for her excellent work.


[Cosmopolitan C library] <https://justine.lol/cosmopolitan/>

[=CE=B1c=CF=84=C2=B5=CE=B1lly p=CE=B4r=CF=84=CE=B1bl=CE=B5 =CE=B5x=CE=B5c=
=C2=B5=CF=84=CE=B1bl=CE=B5] <https://justine.lol/ape.html>

[redbean] <https://redbean.dev/>

A _toolchain_
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  In OCaml, the =E2=80=9Ctoolchain=E2=80=9D principle allows the existence =
of several
  compilers within an OPAM switch and to choose one of them when it
  comes to cross-compiling a project. This principle, even though it is
  not clearly defined and even though its use remains very limited,
  exists through the `ocamlfind` tool.

  You can find these toolchains in your switch:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ ls $(opam var lib)/findlib.conf.d/
  =E2=94=82 esperanto.conf solo5.conf
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  From our experience with Mirage as well as the work done in `dune'
  regarding cross-compilation, the choice to propose a new _toolchain_
  in order to allow cross-compilation of projects with OPAM is both a
  historical choice but also the most relevant one in our opinion [1].


=E2=97=8A Why we need to cross-compile?

  The term cross-compilation can be misunderstood if we only consider
  the question of the assembler issued by the compiler (does it match
  the host assembler or not). In our case, cross-compilation is a
  broader term that implies the use of external artefacts to the
  compiler that are different from the default and the use of compiler
  options that must be used throughout the production of the final
  binary.

  In other words, even though we are emitting the same assembler, we are
  doing so in a different =E2=80=9Ccontext=E2=80=9D which requires the defi=
nition of a
  new _toolchain_ which includes our artefacts and compiler options.

  One of these artefacts is of course the C library used by the compiler
  which will then be systematically used by the _runtime caml_, the well
  named `libasmrun.a'. This is why, for example, there is a version of
  OCaml with [musl]. So there must be a version of OCaml with
  Cosmopolitan.

  This new _toolchain_ also allows you to include the necessary options
  for compiling C files because, yes, you can compile a C file with
  `ocamlopt'.

  In order to provide a coherent _workflow_ for a project, we need to
  provide not only a `libasmrun.a' compiled with our Cosmopolitan C
  library but also an OCaml compiler capable of invoking the C compiler
  with the right options required by Cosmopolitan.

  Finally, we also need to describe in this _toolchain_ how to link the
  object files together to actually produce a portable binary using the
  APE script.


  [musl] <https://musl.libc.org/>


=E2=97=8A A simple example with this new _toolchain_

  Installing Esperanto is very easy with OPAM. It will install the
  cross-compiler and the necessary files so that `ocamlfind~/~dune' can
  recognise this new _toolchain_:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ opam install esperanto
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Finally, let=E2=80=99s try to produce a simple binary that displays =E2=
=80=9CHello
  World!=E2=80=9D:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ cat >main.ml <<EOF
  =E2=94=82 let () =3D print_endline "Hello World!"
  =E2=94=82 EOF
  =E2=94=82 $ ocamlfind -toolchain opt main.ml
  =E2=94=82 $ objcopy -S -O binary a.out
  =E2=94=82 $ file a.out
  =E2=94=82 a.out: DOS/MBR boot sector
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The binary produced can already be executed. However, there are still
  some issues that have been fixed since then but which are probably not
  yet integrated in your system. They concern `zsh' and `binfmt_misc' in
  particular.

  The first problem with `zsh' is that it does not recognise the binary
  correctly. This problem has been fixed in the latest version of
  `zsh.5.9.0'.
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ zsh --version
  =E2=94=82 zsh 5.8.1
  =E2=94=82 $ zsh
  =E2=94=82 $ ./a.out
  =E2=94=82 zsh: exec format error: ./a.out
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The second problem concerns `binfmt_misc' which intervenes upstream at
  the execution of your programs in order to choose how to execute them.
  In this case, `binfmt_misc' recognises Cosmopolitan binaries as
  Windows software by default.

  Here too, a solution is available and described by the author of
  Cosmopolitan here: [APE loader]


  [APE loader] <https://justine.lol/apeloader/#binfmt_misc>

  =E2=97=8A Execution & Assimilation

    If you are not concerned by the above problems, you can simply run
    the program:
    =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
    =E2=94=82 $ ./a.out
    =E2=94=82 Hello World!
    =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

    There is a final solution that requires a little explanation of what
    =CE=B1c=CF=84=C2=B5=CE=B1lly p=CE=B4r=CF=84=CE=B1bl=CE=B5 =CE=B5x=CE=B5=
c=C2=B5=CF=84=CE=B1bl=CE=B5 is. Indeed, the latter makes it
    possible to create a polyglot binary whose first point of entry is
    not your program but a small program which tries to recognize on
    which platform the binary tries to run.

    After this recognition, this little program will =E2=80=9Cinject=E2=80=
=9D values
    corresponding to the platform in which you try to run your program
    in order to finally let Cosmopolitan manage the translation between
    its interface and the real POSIX interface that your system offers.

    Of course, this step has a cost as it adds an indirection between
    what your program wants to do and what is available on the system
    running your program. However, APE offers a very special option that
    allows the program to be assimilated to the platform in which it
    wants to run.
    =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
    =E2=94=82 $ file a.out
    =E2=94=82 a.out: DOS/MBR boot sector
    =E2=94=82 $ sh -c "./a.out --assimilate"
    =E2=94=82 $ file a.out
    =E2=94=82 a.out: ELF 64-bit LSB executable, x86-64
    =E2=94=82 $ ./a.out
    =E2=94=82 Hello World!
    =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

    This option makes your application truly native to the platform in
    which you run it. This means above all that the program is *no
    longer* portable.


  =E2=97=8A Esperanto, `dune' & `opam monorepo'

    The `dune' software also incorporates this toolchain idea using the
    `-x' option. More pragmatically, it is possible to define a new dune
    context to use Esperanto as a compilation toolchain.

    However, the original aim of Esperanto is to produce a portable
    binary. This implies, among other things, that it should not depend
    on remaining artefacts in order to run and, in this sense, the
    compilation of your project should be a static compilation. This
    means that all dependencies of your project must be available to
    compile in the same context as your project.

    Again, this is particularly necessary if any of your dependencies
    include C files, so they need to be compiled in some way.

    This is where `opam monorepo' comes in, it will simply =E2=80=9Cvendor=
=E2=80=9D your
    dependencies into a =E2=80=9Cduniverse=E2=80=9D folder. Here are the st=
eps needed to
    compile a project with Esperanto. We=E2=80=99ll take [`decompress'] as =
an
    example which produces a binary that can compress/decompress
    documents:
    =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
    =E2=94=82 $ git clone https://github.com/mirage/decompress
    =E2=94=82 $ cd decompress
    =E2=94=82 $ cat >>bin/dune <<EOF
    =E2=94=82 (rule
    =E2=94=82  (target decompress.com)
    =E2=94=82  (enabled_if
    =E2=94=82   (=3D %{context_name} esperanto))
    =E2=94=82  (mode promote)
    =E2=94=82  (deps decompress.exe)
    =E2=94=82  (action (run objcopy -S -O binary %{deps} %{target})))
    =E2=94=82 EOF
    =E2=94=82 $ cat >dune-workspace <<EOF
    =E2=94=82 (lang dune 2.0)
    =E2=94=82 (context (default))
    =E2=94=82 (context
    =E2=94=82  (default
    =E2=94=82   (name esperanto)
    =E2=94=82   (toolchain esperanto)
    =E2=94=82   (merlin)
    =E2=94=82   (host default)))
    =E2=94=82 $ opam monorepo lock --build-only
    =E2=94=82 $ opam monorepo pull
    =E2=94=82 $ dune build bin/decompress.com
    =E2=94=82 $ sh -c "echo 'Hello World' | ./bin/decompress.com -d | ./bin=
/decompress.com"
    =E2=94=82 Hello World
    =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80


    [`decompress'] <https://github.com/mirage/decompress>


Issues
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Apart from the outcomes described above, however, the Esperanto
  toolchain is not complete. Indeed, the OCaml distribution gives
  several libraries such as `unix.cmxa' and `threads.cmxa'. A little
  work has been done to make the former available. The second one is
  however unavailable for the moment since Cosmopolitan only partially
  implements `pthread'.

  However, it seems that the author of Cosmopolotian wants to implement
  the rest of the `pthread' API which will then allow us to provide
  support for `threads.cmxa' and OCaml 5.

  This of course makes support for the projects more limited than we
  imagined (and that=E2=80=99s why this release is experimental) however, an
  effort has already been made to lwt into Cosmopolitan=E2=80=99s hypotheti=
cal
  future support for `pthread'.


Future
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  As explained above, support for `threads.cmxa' and OCaml 5 remains the
  priority. however, an effort has already been made to support [Lwt]
  via Cosmopolitan=E2=80=99s hypothetical future support for `pthread'.

  However, it is possible that Cosmopolitan could become a target for
  the MirageOS project in the same way as Solo5 (or our recent
  experiment on Raspberry Pi 4).

  In this sense, we will surely propose an integration in MirageOS so
  that projects can both produce unikernels with Solo5 or portable
  binaries with Cosmopolitan.

  [1] However, the question remains open at several levels, that of the
  compiler, that of OPAM and of course that of `dune'. It is clear that
  the current situation is not the best in terms of what we need to do
  to produce such a cross-compiler. Only the feedback from Solo5 (which
  requires cross-compilation) allows us to say that it is surely the
  right choice for what we want to offer.


[Lwt] <https://github.com/ocsigen/lwt/>


Conclusion
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C

  We hope that this project will facilitate the distribution of
  software. You can read a more technical article about our work [here].
  Finally, I would like to thank [robur.io] (an association you [can
  help]) for allowing me to do this project.

  *EDIT*: The author of Cosmopolitan just released Cosmopolitan with
  `pthread' support. So we will definitely try to improve our
  distribution to include OCaml with `threads.cmxa' support and move
  forward with OCaml 5!


[here] <https://blog.osau.re/articles/esperanto.html>

[robur.io] <https://robur.io/>

[can help] <https://robur.io/Donate>


OBazl Toolsuite - tools for building OCaml with Bazel
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/obazl-toolsuite-tools-for-building-ocaml-wit=
h-bazel/10021/15>


Deep into this thread, Yawar Amin asked and Gregg Reynolds replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

        Doesn=E2=80=99t dune get advertised as being able to handle
        multiple programming languages, including C/C++?

  There=E2=80=99s really no comparison. Dune evidently can use the (C ABI)
  outputs of a =E2=80=9Cforeign=E2=80=9D build (if you write the glue code =
needed to
  make this work) but there=E2=80=99s no real /build/ integration, and no
  hermeticity guarantees. Under Bazel different languages use different
  rulesets but they=E2=80=99re all Bazel rulesets, so you get one dependency
  graph across all languages, and if the rulesets are hermetic you get a
  hermetic build. Without ABI restrictions. For example if your build
  needs to run a Python (or Javascript, Ruby, whatever) tool, Bazel will
  build the tool and run it for you.

  Even for C I think Bazel has much better integration. The rules in
  rules_cc (e.g. cc_library producing a .a file) deliver a CcInfo
  provider (a provider is a kind of struct whose fields contain the
  artifacts delivered by a build action). The rules in rules_ocaml (e.g.
  ocaml_module) understand CcInfo dependencies and pass them around
  using OcamlProvider (a provider specific to the ocaml rules). Bazel
  supports a merge operation for CcInfo, and the ocaml rules always
  merge their CcInfo deps and pass them on. So every build target
  delivers the merge of all its CcInfo deps. The ocaml_binary rule that
  links its dependencies into an executable merges its CcInfo deps
  (which include merged CcInfo from their deps, recursively) and ends up
  with a single CcInfo containing every cc dependency in the dep graph,
  in the right order, with no duplicates. Then its simply a matter of
  constructing the link command with the appropriate =E2=80=93ccopt options.
  More succinctly: you can add a C dep directly to the module that needs
  it, and Bazel it pass it up the dependency chain, ensuring that it
  ends up on the command line when needed - building archives or
  executables. You don=E2=80=99t need to add a C dep to an archive target w=
hen
  only one of n modules in the archive actually depends on it.

  I=E2=80=99ve just started working on rules_jsoo, which I think will nicely
  demonstrate the virtues of Bazel integration. The Bazel ecosystem
  includes a bunch of tools for working with Javascript; for example
  rules_js and rules_nodejs make it easy to control which node toolchain
  version to use, integrate npm stuff, etc. Wouldn=E2=80=99t it be nice to =
be
  able to use such tools directly, without writing a bunch of glue code?
  Now a key element of Bazel integration is the use of providers. Rules
  deliver providers, and since providers act as a kind of rudimentary
  type system, I can use the JsInfo provider (defined by rules_js) to
  integrate rules_jsoo with the larger Bazel js ecoystem. For example,
  the jsoo_library rule takes the OcamlProvider provider delivered by
  ocaml_module rules, which contains the .cmo file. So jsoo_library runs
  those .cmo files through the jsoo compiler and delivers the resulting
  js files in a JsInfo provider. That provider is suitable as input to
  the rules in rules_js, which gives us seamless integration. So we can
  use the js_binary rule of rules_js to run code produced by
  jsoo_library under node. All that=E2=80=99s needed is to list the latter =
as a
  dependency of the former. That=E2=80=99s the plan, anyway. Isn=E2=80=99t =
that nice?


Gregg Reynolds said and Daniel B=C3=BCnzli replied
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80

        Ideally somebody learning a new language should not need
        to spend any time (at first) dealing with a build language
        too.

  This doesn=E2=80=99t only apply to learning. It also applies to prototypi=
ng,
  hypothesis generation and testing.

  That=E2=80=99s the reason why I built [`brzo'] which I hope I=E2=80=99ll =
be able to
  release at some point (still needs a good design review and changes to
  the OCaml strategy since it assumed we were moving towards a model
  that didn=E2=80=99t happen in the end =E2=80=93 namely the [library linki=
ng proposal],
  I=E2=80=99d also like to add more languages to the mix but that could wai=
t).

  None of my projects do not start with ~brzo~ing these days and the
  hassle free build experience is exhilarating.

        Build systems often are =E2=80=9Ccomplex and confusing=E2=80=9D, but
        that=E2=80=99s largely because the problem space itself is complex
        and confusing. There=E2=80=99s no getting around that.

  Note however that this is largely /accidental/ complexity due to the
  fact that compilers work in idiosyncratic ways for what build systems
  need in order to do their incremental and parallelization business.

  They are still stuck in a world where people would invoke their
  compiler manually at the cli level or specify the invocations
  themselves in a `Makefile'.

  In fact if it were not for the actual tools and the (lack) of
  information they give us, build is in fact an excessively simple
  problem.

  More specific to OCaml, the compiler clis have an insane amount of
  quirks and the whole system greatly suffers from an underspecified
  linking model. Basically it was not a good idea to let that be defined
  by a third party tool, if only so that you can actually talk about
  libraries in error messages from the compiler.


[`brzo'] <https://erratique.ch/software/brzo>

[library linking proposal] <https://github.com/ocaml/RFCs/pull/17>


Orsetto: structured data interchange languages (release 1.1.2)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-orsetto-structured-data-interchange-lang=
uages-release-1-1-2/10506/1>


james woodyatt announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Announcing the release to OPAM of [Orsetto 1.1.2], an update to a
  personal project of mine not sponsored by my employer. Licensed with
  BSD 2-Clause.

  *Q. What is Orsetto?*

  Aspires to do eventually for OCaml more or less what [Serde] has done
  for Rust, i.e. to be a curated and self-contained collection of
  structured data interchange languages with a cohesive and unified
  model of serialization and deserialization.

  Two interchange languages are currently supported: [JSON ] and [CBOR
  ].

  *Q. What is new in this release?*

  Mostly error corrections, particularly in the CBOR library, produced
  by improving test coverage.

  The change log for the release is here: [CHANGES.md ]

  Highlights:

  =E2=80=A2 Major improvements in test coverage.
  =E2=80=A2 Many corrections for logic errors.
  =E2=80=A2 A few minor usability improvements.

  Some things have not changed:

  =E2=80=A2 Still has no Programmer Guide or Tutorial, or really any
    introduction at all.
  =E2=80=A2 Still requires *ocamlfind* and builds with *omake*, which is
    currently not compatible with OCaml 5.0.
  =E2=80=A2 Still only supports JSON and CBOR.

  *Q. It looks incomplete. What are your plans for future development?*

  Yes, it=E2=80=99s a personal project, and yes, I=E2=80=99m aware there ar=
e no reverse
  dependencies on it currently in the public OPAM repository. Still, I=E2=
=80=99d
  welcome opportunities to collaborate with others who share my vision
  for the project. As long as it=E2=80=99s just me working on this, develop=
ment
  will continue to be somewhat slow, as I=E2=80=99m prone to over-engineer
  things I care about. I have a lot of projects, and this is the only
  open source one.

  =E2=80=A2 *Orsetto 1.0.3* is the previous release. It offered parsers and
     emitter combinators for JSON and CBOR for OCaml >=3D 4.06.1
     (including 4.13~alpha1). The quality of its JSON support is
     adequate, and it scores well on the >[nst/JSONTestSuite] tests. The
     quality of its CBOR support is provisional, >and not recommended.
  =E2=80=A2 *Orsetto 1.1.2* is the current release. It adds generalized and
     extensible structured data interchange models with specializations
     for producing emitters and parsers for JSON and CBOR. The quality
     of the CBOR support is much improved, and I=E2=80=99m using it with go=
od
     results in other projects. Supported on OCaml >=3D 4.08.
  =E2=80=A2 *Orsetto 1.2* is the next planned release. It will drop interfa=
ces
     marked `@caml.deprecated` in the 1.1 release. It will also drop
     support for OCaml < 4.10, and it will stop depending on
     **ocamlfind**. I hope to add a PPX for deriving parsers and
     emitters from OCaml data type definitions. I might also consider
     one or more new interchange languages=E2=80=94 suggestions are heartily
     encouraged.


[Orsetto 1.1.2] <http://opam.ocaml.org/packages/orsetto/>

[Serde] <https://serde.rs>

[JSON ] <https://json.org>

[CBOR ] <https://cbor.io>

[CHANGES.md ] <https://bitbucket.org/jhw/orsetto/src/r1.1.2/CHANGES.md>

[nst/JSONTestSuite] <https://github.com/nst/JSONTestSuite>


Interest in a Http_sig library?
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/interest-in-a-http-sig-library/10518/1>


Kiran Gopinathan announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80

  Heyo all! I=E2=80=99ve been working on an activitypub server for a while =
now,
  and while it=E2=80=99s still not yet complete, recently I=E2=80=99ve reac=
hed a point
  where I realised that I=E2=80=99ve actually been sitting on some libraries
  that the community might benefit from, as the current ecosystem
  doesn=E2=80=99t seem to handle these things.

  One such component that seemed to be in a state that was suitable to
  split off from was a small helper module to implement a particular
  http signature scheme that seems to be rather common in the
  activitypub scene.

  In particular, the scheme I=E2=80=99m referring to is defined here:
  <https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12>

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82                          Signing HTTP Messages
  =E2=94=82                     draft-cavage-http-signatures-12
  =E2=94=82=20
  =E2=94=82 Abstract
  =E2=94=82    When communicating over the Internet using the HTTP protocol=
, it can
  =E2=94=82    be desirable for a server or client to authenticate the send=
er of a
  =E2=94=82    particular message.  It can also be desirable to ensure that=
 the
  =E2=94=82    message was not tampered with during transit.  This document
  =E2=94=82    describes a way for servers and clients to simultaneously add
  =E2=94=82    authentication and message integrity to HTTP messages by usi=
ng a
  =E2=94=82    digital signature.
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I=E2=80=99ve written a small library that glues together some components =
in
  the OCaml ecosystem to somewhat handle the signing (I have been mainly
  working off an =E2=80=9Cimplement-enough-to-make-the-system-work=E2=80=9D=
 process
  rather than directly transcribing the specification above):

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 (** [verify ~signed_string ~signature key] returns true iff
  =E2=94=82    [signature] over [signed_string] is valid according to [key]=
. *)
  =E2=94=82 val verify: signed_string:string -> signature:string -> X509.Pu=
blic_key.t -> bool
  =E2=94=82=20
  =E2=94=82 (** [verify_request ~resolve_public_key req] verifies that a dr=
eam
  =E2=94=82    request has been signed according to the HTTP signature sche=
me *)
  =E2=94=82 val verify_request:
  =E2=94=82   resolve_public_key:(string -> (X509.Public_key.t, 'a) Lwt_res=
ult.t) ->
  =E2=94=82   Dream.request -> (bool, 'a) result Lwt.t
  =E2=94=82=20
  =E2=94=82 (** [build_signed_headers ~priv_key ~key_id ~headers ~body_str
  =E2=94=82    ~current_time ~method_ ~uri] returns a list of signed header=
s using
  =E2=94=82    [priv_key] according to the HTTP signature scheme. [key_id] =
should
  =E2=94=82    be a string that can be used to look up the public key assoc=
iated
  =E2=94=82    with [priv_key]. *)
  =E2=94=82 val build_signed_headers:
  =E2=94=82   priv_key:X509.Private_key.t ->
  =E2=94=82   key_id:string ->
  =E2=94=82   headers:string StringMap.t ->
  =E2=94=82   body_str:string ->
  =E2=94=82   current_time:Ptime.t -> method_:string -> uri:Uri.t -> (strin=
g * string) list
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The library is currently published at
  <https://github.com/Gopiandcode/http_sig_ocaml> under the LGPL, but I
  haven=E2=80=99t released it on opam.

  Anyway, I was wondering if anyone else had interest in this kind of
  package, and whether it would be a good candidate for submission to
  opam - or if there are actually already existing libraries in the
  OCaml ecosystem that would actually already do this.


Outreachy summer =E2=80=9922 closing commemoration session on 23rd Sept
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/outreachy-summer-22-closing-commemoration-se=
ssion-on-23rd-sept/10450/5>


Patrick Ferris announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Thank you to everyone that could make it to the presentation today.
  The presentation is now live:
  <https://watch.ocaml.org/videos/watch/dc5bbf5b-3dd9-4c8d-b26a-71e730a6778=
8>
  :camel:

  In particular a massive congratulations and thank you to
  @moazzammoriani and @IIITM-Jay. Thank you also to @sudha for being the
  driving force behind making the presentation happen again this round!
  See you all for the next round!

  Aside: if anybody has any issues with the live video please do reach
  out here either publicly or privately, we gave prior warning of our
  intentions to record and put the video on watch.ocaml.org, but I
  appreciate some people joined a little later/might have some
  reservations etc.


findlib-1.9.6
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://sympa.inria.fr/sympa/arc/caml-list/2022-09/msg00007.html>


Gerd Stolpmann announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  findlib-1.9.6 is out, now supporting OCaml-5.00 (as far as we know
  it). There are also a few other install-related fixes in it.

  For manual, download, manuals, etc. see here:

  <http://projects.camlcity.org/projects/findlib.html>

  An updated OPAM package will follow soon.


Interesting OCaml Articles
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/100>


Deep in this thread, alan said
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  An interesting paper that uses OCaml is
  <http://gallium.inria.fr/~fpottier/publis/fpottier-elaboration.pdf> by
  Francois Pottier, which gives a declarative DSL for implementing type
  rules with applicative functors. It has an associated library,
  <https://opam.ocaml.org/packages/inferno/>.


Other OCaml News
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

>From the ocaml.org blog
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here are links from many OCaml blogs aggregated at [the ocaml.org
  blog].

  =E2=80=A2 [Tarides Sponsors High School Hackers]


[the ocaml.org blog] <https://ocaml.org/blog/>

[Tarides Sponsors High School Hackers]
<https://tarides.com/blog/2022-09-23-tarides-sponsors-high-school-hackers>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I=E2=80=99ll=
 mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2022-09-27 Tue 09:14 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
</head>
<body>
<div id=3D"content" class=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2022.09.20.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2022.10.04.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of September 20 to 27, 2=
022.
</p>

<div id=3D"table-of-contents" role=3D"doc-toc">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents" role=3D"doc-toc">
<ul>
<li><a href=3D"#1">Esperanto, when OCaml meets Cosmopolitan</a></li>
<li><a href=3D"#2">OBazl Toolsuite - tools for building OCaml with Bazel</a=
></li>
<li><a href=3D"#3">Orsetto: structured data interchange languages (release =
1.1.2)</a></li>
<li><a href=3D"#4">Interest in a Http_sig library?</a></li>
<li><a href=3D"#5">Outreachy summer &rsquo;22 closing commemoration session=
 on 23rd Sept</a></li>
<li><a href=3D"#6">findlib-1.9.6</a></li>
<li><a href=3D"#7">Interesting OCaml Articles</a></li>
<li><a href=3D"#8">Other OCaml News</a></li>
<li><a href=3D"#org90444f6">Old CWN</a></li>
</ul>
</div>
</div>


<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">Esperanto, when OCaml meets Cosmopolitan</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-esperanto-when-ocaml-me=
ets-cosmopolitan/10501/1">https://discuss.ocaml.org/t/ann-esperanto-when-oc=
aml-meets-cosmopolitan/10501/1</a>
</p>
</div>

<div id=3D"outline-container-org5fced17" class=3D"outline-3">
<h3 id=3D"org5fced17">Calascibetta Romain announced</h3>
<div class=3D"outline-text-3" id=3D"text-org5fced17">
<p>
I am delighted to present the first <b>experimental</b> release of Esperant=
o. This project is a new OCaml <span class=3D"underline">toolchain</span>
that creates binaries compiled with the <a href=3D"https://justine.lol/cosm=
opolitan/">Cosmopolitan C library</a> and linked with the <a href=3D"https:=
//justine.lol/ape.html">=CE=B1c=CF=84=C2=B5=CE=B1lly
p=CE=B4r=CF=84=CE=B1bl=CE=B5 =CE=B5x=CE=B5c=C2=B5=CF=84=CE=B1bl=CE=B5</a> l=
ink script. The binary produced is then portable to different platforms:
</p>

<p>
<img src=3D"https://worker.jart.workers.dev/redbean/linux.png" alt=3D"linux=
.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/windows10.png" alt=3D"w=
indows10.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/msdos60.png" alt=3D"msd=
os60.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/macos.png" alt=3D"macos=
.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/freebsd64.png" alt=3D"f=
reebsd64.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/openbsd.png" alt=3D"ope=
nbsd.png" />
<img src=3D"https://worker.jart.workers.dev/redbean/netbsd2.png" alt=3D"net=
bsd2.png" />
</p>

<p>
The main objective of Esperanto is to provide a toolchain capable of produc=
ing a portable binary from an existing
project. This would allow to finally be able to distribute software for all=
 these platforms without having to:
</p>
<ol class=3D"org-ol">
<li>manage multiple platforms orthogonally, the Cosmopolitan C library offe=
rs you the POSIX API for all platforms (including Windows)</li>
<li>Produce several versions of the same software for each platform. Only t=
he binary is needed to run on all platforms</li>
</ol>

<p>
Cosmopolitan <b>does not</b> however produce a binary with a multi-platform=
 assembler. At this stage, our distribution
only supports the <code>x86_64</code> assembler (the most common one) but w=
e are working on the possibility to produce a binary
with different assemblers.
</p>

<p>
I would like to give special thanks to Justine, the author of the Cosmopoli=
tan project (to develop
<a href=3D"https://redbean.dev/">redbean</a>, a small portable HTTP server)=
 for her excellent work.
</p>
</div>

<div id=3D"outline-container-orga41dc25" class=3D"outline-4">
<h4 id=3D"orga41dc25">A <span class=3D"underline">toolchain</span></h4>
<div class=3D"outline-text-4" id=3D"text-orga41dc25">
<p>
In OCaml, the &ldquo;toolchain&rdquo; principle allows the existence of sev=
eral compilers within an OPAM switch and to choose
one of them when it comes to cross-compiling a project. This principle, eve=
n though it is not clearly defined and
even though its use remains very limited, exists through the `ocamlfind` to=
ol.
</p>

<p>
You can find these toolchains in your switch:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ <span style=3D"color: #065fff;">ls</span> $<=
span style=3D"color: #375cd8;">(</span>opam var lib<span style=3D"color: #3=
75cd8;">)</span>/findlib.conf.d/
esperanto.conf solo5.conf
</pre>
</div>

<p>
>From our experience with Mirage as well as the work done in <code>dune</cod=
e> regarding cross-compilation, the choice to
propose a new <span class=3D"underline">toolchain</span> in order to allow =
cross-compilation of projects with OPAM is both a historical choice but
also the most relevant one in our opinion [1].
</p>
</div>

<ul class=3D"org-ul">
<li><a id=3D"org9ecc665"></a>Why we need to cross-compile?<br />
<div class=3D"outline-text-5" id=3D"text-org9ecc665">
<p>
The term cross-compilation can be misunderstood if we only consider the que=
stion of the assembler issued by the
compiler (does it match the host assembler or not). In our case, cross-comp=
ilation is a broader term that implies
the use of external artefacts to the compiler that are different from the d=
efault and the use of compiler options
that must be used throughout the production of the final binary.
</p>

<p>
In other words, even though we are emitting the same assembler, we are doin=
g so in a different &ldquo;context&rdquo; which
requires the definition of a new <span class=3D"underline">toolchain</span>=
 which includes our artefacts and compiler options.
</p>

<p>
One of these artefacts is of course the C library used by the compiler whic=
h will then be systematically used by the
<span class=3D"underline">runtime caml</span>, the well named <code>libasmr=
un.a</code>. This is why, for example, there is a version of OCaml with
<a href=3D"https://musl.libc.org/">musl</a>. So there must be a version of =
OCaml with Cosmopolitan.
</p>

<p>
This new <span class=3D"underline">toolchain</span> also allows you to incl=
ude the necessary options for compiling C files because, yes, you can
compile a C file with <code>ocamlopt</code>.
</p>

<p>
In order to provide a coherent <span class=3D"underline">workflow</span> fo=
r a project, we need to provide not only a <code>libasmrun.a</code> compile=
d with
our Cosmopolitan C library but also an OCaml compiler capable of invoking t=
he C compiler with the right options
required by Cosmopolitan.
</p>

<p>
Finally, we also need to describe in this <span class=3D"underline">toolcha=
in</span> how to link the object files together to actually produce a
portable binary using the APE script.
</p>
</div>
</li>

<li><a id=3D"org86c798e"></a>A simple example with this new <span class=3D"=
underline">toolchain</span><br />
<div class=3D"outline-text-5" id=3D"text-org86c798e">
<p>
Installing Esperanto is very easy with OPAM. It will install the cross-comp=
iler and the necessary files so that
<code>ocamlfind~/~dune</code> can recognise this new <span class=3D"underli=
ne">toolchain</span>:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ opam install esperanto
</pre>
</div>

<p>
Finally, let&rsquo;s try to produce a simple binary that displays &ldquo;He=
llo World!&rdquo;:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ <span style=3D"color: #065fff;">cat</span> &=
gt;main.ml &lt;&lt;EOF
<span style=3D"color: #406f90; font-style: italic;">let () =3D print_endlin=
e "Hello World!"</span>
<span style=3D"color: #406f90; font-style: italic;">EOF</span>
$ ocamlfind -toolchain opt main.ml
$ objcopy -S -O binary a.out
$ file a.out
a.out: DOS/MBR boot sector
</pre>
</div>

<p>
The binary produced can already be executed. However, there are still some =
issues that have been fixed since then
but which are probably not yet integrated in your system. They concern <cod=
e>zsh</code> and <code>binfmt_misc</code> in particular.
</p>

<p>
The first problem with <code>zsh</code> is that it does not recognise the b=
inary correctly. This problem has been fixed in the
latest version of <code>zsh.5.9.0</code>.
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ zsh --version
zsh 5.8.1
$ zsh
$ ./a.out
zsh: exec format error: ./a.out
</pre>
</div>

<p>
The second problem concerns <code>binfmt_misc</code> which intervenes upstr=
eam at the execution of your programs in order to
choose how to execute them. In this case, <code>binfmt_misc</code> recognis=
es Cosmopolitan binaries as Windows software by
default.
</p>

<p>
Here too, a solution is available and described by the author of Cosmopolit=
an here: <a href=3D"https://justine.lol/apeloader/#binfmt_misc">APE loader<=
/a>
</p>
</div>

<ul class=3D"org-ul">
<li><a id=3D"org3ad916b"></a>Execution &amp; Assimilation<br />
<div class=3D"outline-text-6" id=3D"text-org3ad916b">
<p>
If you are not concerned by the above problems, you can simply run the prog=
ram:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ ./a.out
Hello World!
</pre>
</div>

<p>
There is a final solution that requires a little explanation of what =CE=B1=
c=CF=84=C2=B5=CE=B1lly p=CE=B4r=CF=84=CE=B1bl=CE=B5 =CE=B5x=CE=B5c=C2=B5=CF=
=84=CE=B1bl=CE=B5 is. Indeed, the
latter makes it possible to create a polyglot binary whose first point of e=
ntry is not your program but a small
program which tries to recognize on which platform the binary tries to run.
</p>

<p>
After this recognition, this little program will &ldquo;inject&rdquo; value=
s corresponding to the platform in which you try to
run your program in order to finally let Cosmopolitan manage the translatio=
n between its interface and the real
POSIX interface that your system offers.
</p>

<p>
Of course, this step has a cost as it adds an indirection between what your=
 program wants to do and what is
available on the system running your program. However, APE offers a very sp=
ecial option that allows the program to
be assimilated to the platform in which it wants to run.
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ file a.out
a.out: DOS/MBR boot sector
$ sh -c <span style=3D"color: #9f4a00;">"./a.out --assimilate"</span>
$ file a.out
a.out: ELF 64-bit LSB executable, x86-64
$ ./a.out
Hello World!
</pre>
</div>

<p>
This option makes your application truly native to the platform in which yo=
u run it. This means above all that the
program is <b>no longer</b> portable.
</p>
</div>
</li>

<li><a id=3D"orgf3788aa"></a>Esperanto, <code>dune</code> &amp; <code>opam =
monorepo</code><br />
<div class=3D"outline-text-6" id=3D"text-orgf3788aa">
<p>
The <code>dune</code> software also incorporates this toolchain idea using =
the <code>-x</code> option. More pragmatically, it is possible
to define a new dune context to use Esperanto as a compilation toolchain.
</p>

<p>
However, the original aim of Esperanto is to produce a portable binary. Thi=
s implies, among other things, that it
should not depend on remaining artefacts in order to run and, in this sense=
, the compilation of your project should
be a static compilation. This means that all dependencies of your project m=
ust be available to compile in the same
context as your project.
</p>

<p>
Again, this is particularly necessary if any of your dependencies include C=
 files, so they need to be compiled in
some way.
</p>

<p>
This is where <code>opam monorepo</code> comes in, it will simply &ldquo;ve=
ndor&rdquo; your dependencies into a &ldquo;duniverse&rdquo; folder. Here
are the steps needed to compile a project with Esperanto. We&rsquo;ll take =
<a href=3D"https://github.com/mirage/decompress"><code>decompress</code></a=
> as an example which
produces a binary that can compress/decompress documents:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-shell">$ <span style=3D"color: #065fff;">git</span> c=
lone https://github.com/mirage/decompress
$ <span style=3D"color: #065fff;">cd</span> decompress
$ <span style=3D"color: #065fff;">cat</span> &gt;&gt;bin/dune &lt;&lt;EOF
<span style=3D"color: #406f90; font-style: italic;">(rule</span>
<span style=3D"color: #406f90; font-style: italic;"> (target decompress.com=
)</span>
<span style=3D"color: #406f90; font-style: italic;"> (enabled_if</span>
<span style=3D"color: #406f90; font-style: italic;">  (=3D %{context_name} =
esperanto))</span>
<span style=3D"color: #406f90; font-style: italic;"> (mode promote)</span>
<span style=3D"color: #406f90; font-style: italic;"> (deps decompress.exe)<=
/span>
<span style=3D"color: #406f90; font-style: italic;"> (action (run objcopy -=
S -O binary %{deps} %{target})))</span>
<span style=3D"color: #406f90; font-style: italic;">EOF</span>
$ <span style=3D"color: #065fff;">cat</span> &gt;dune-workspace &lt;&lt;EOF
<span style=3D"color: #406f90; font-style: italic;">(lang dune 2.0)</span>
<span style=3D"color: #406f90; font-style: italic;">(context (default))</sp=
an>
<span style=3D"color: #406f90; font-style: italic;">(context</span>
<span style=3D"color: #406f90; font-style: italic;"> (default</span>
<span style=3D"color: #406f90; font-style: italic;">  (name esperanto)</spa=
n>
<span style=3D"color: #406f90; font-style: italic;">  (toolchain esperanto)=
</span>
<span style=3D"color: #406f90; font-style: italic;">  (merlin)</span>
<span style=3D"color: #406f90; font-style: italic;">  (host default)))</spa=
n>
<span style=3D"color: #406f90; font-style: italic;">$ opam monorepo lock --=
build-only</span>
<span style=3D"color: #406f90; font-style: italic;">$ opam monorepo pull</s=
pan>
<span style=3D"color: #406f90; font-style: italic;">$ dune build bin/decomp=
ress.com</span>
<span style=3D"color: #406f90; font-style: italic;">$ sh -c "</span><span s=
tyle=3D"color: #406f90; font-style: italic;">echo</span><span style=3D"colo=
r: #406f90; font-style: italic;"> 'Hello World' | ./bin/decompress.com -d |=
 ./bin/decompress.com"</span>
<span style=3D"color: #406f90; font-style: italic;">Hello World</span>
</pre>
</div>
</div>
</li>
</ul>
</li>
</ul>
</div>

<div id=3D"outline-container-orged9def3" class=3D"outline-4">
<h4 id=3D"orged9def3">Issues</h4>
<div class=3D"outline-text-4" id=3D"text-orged9def3">
<p>
Apart from the outcomes described above, however, the Esperanto toolchain i=
s not complete. Indeed, the OCaml
distribution gives several libraries such as <code>unix.cmxa</code> and <co=
de>threads.cmxa</code>. A little work has been done to make the
former available. The second one is however unavailable for the moment sinc=
e Cosmopolitan only partially implements
<code>pthread</code>.
</p>

<p>
However, it seems that the author of Cosmopolotian wants to implement the r=
est of the <code>pthread</code> API which will then
allow us to provide support for <code>threads.cmxa</code> and OCaml 5.
</p>

<p>
This of course makes support for the projects more limited than we imagined=
 (and that&rsquo;s why this release is
experimental) however, an effort has already been made to lwt into Cosmopol=
itan&rsquo;s hypothetical future support for
<code>pthread</code>.
</p>
</div>
</div>

<div id=3D"outline-container-orgeba37a9" class=3D"outline-4">
<h4 id=3D"orgeba37a9">Future</h4>
<div class=3D"outline-text-4" id=3D"text-orgeba37a9">
<p>
As explained above, support for <code>threads.cmxa</code> and OCaml 5 remai=
ns the priority. however, an effort has already been
made to support <a href=3D"https://github.com/ocsigen/lwt/">Lwt</a> via Cos=
mopolitan&rsquo;s hypothetical future support for <code>pthread</code>.
</p>

<p>
However, it is possible that Cosmopolitan could become a target for the Mir=
ageOS project in the same way as Solo5
(or our recent experiment on Raspberry Pi 4).
</p>

<p>
In this sense, we will surely propose an integration in MirageOS so that pr=
ojects can both produce unikernels with
Solo5 or portable binaries with Cosmopolitan.
</p>

<p>
[1] However, the question remains open at several levels, that of the compi=
ler, that of OPAM and of course that of <code>dune</code>. It is clear that=
 the current situation is not the best in terms of what we need to do to pr=
oduce such a cross-compiler. Only the feedback from Solo5 (which requires c=
ross-compilation) allows us to say that it is surely the right choice for w=
hat we want to offer.
</p>
</div>
</div>

<div id=3D"outline-container-org19ef74e" class=3D"outline-4">
<h4 id=3D"org19ef74e">Conclusion</h4>
<div class=3D"outline-text-4" id=3D"text-org19ef74e">
<p>
We hope that this project will facilitate the distribution of software. You=
 can read a more technical article about
our work <a href=3D"https://blog.osau.re/articles/esperanto.html">here</a>.=
 Finally, I would like to thank <a href=3D"https://robur.io/">robur.io</a> =
(an association you <a href=3D"https://robur.io/Donate">can help</a>) for a=
llowing me to do this project.
</p>

<p>
<b>EDIT</b>: The author of Cosmopolitan just released Cosmopolitan with <co=
de>pthread</code> support. So we will definitely try to
improve our distribution to include OCaml with <code>threads.cmxa</code> su=
pport and move forward with OCaml 5!
</p>
</div>
</div>
</div>
</div>




<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">OBazl Toolsuite - tools for building OCaml with Bazel</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/obazl-toolsuite-tools-for-b=
uilding-ocaml-with-bazel/10021/15">https://discuss.ocaml.org/t/obazl-toolsu=
ite-tools-for-building-ocaml-with-bazel/10021/15</a>
</p>
</div>

<div id=3D"outline-container-org11afc08" class=3D"outline-3">
<h3 id=3D"org11afc08">Deep into this thread, Yawar Amin asked and Gregg Rey=
nolds replied</h3>
<div class=3D"outline-text-3" id=3D"text-org11afc08">
<blockquote>
<p>
Doesn=E2=80=99t dune get advertised as being able to handle multiple progra=
mming languages, including C/C++?
</p>
</blockquote>

<p>
There&rsquo;s really no comparison. Dune evidently can use the (C ABI) outp=
uts of a &ldquo;foreign&rdquo; build (if you write the glue
code needed to make this work) but there&rsquo;s no real <i>build</i> integ=
ration, and no hermeticity guarantees.  Under Bazel
different languages use different rulesets but they&rsquo;re all Bazel rule=
sets, so you get one dependency graph across
all languages, and if the rulesets are hermetic you get a hermetic build.  =
Without ABI restrictions. For example if
your build needs to run a Python (or Javascript, Ruby, whatever) tool, Baze=
l will build the tool and run it for you.
</p>

<p>
Even for C I think Bazel has much better integration.  The rules in rules_c=
c (e.g. cc_library producing a .a file)
deliver a CcInfo provider (a provider is a kind of struct whose fields cont=
ain the artifacts delivered by a build
action).  The rules in rules_ocaml (e.g. ocaml_module) understand CcInfo de=
pendencies and pass them around using
OcamlProvider (a provider specific to the ocaml rules). Bazel supports a me=
rge operation for CcInfo, and the ocaml
rules always merge their CcInfo deps and pass them on. So every build targe=
t delivers the merge of all its CcInfo
deps. The ocaml_binary rule that links its dependencies into an executable =
merges its CcInfo deps (which include
merged CcInfo from their deps, recursively) and ends up with a single CcInf=
o containing every cc dependency in the
dep graph, in the right order, with no duplicates. Then its simply a matter=
 of constructing the link command with
the appropriate &#x2013;ccopt options. More succinctly: you can add a C dep=
 directly to the module that needs it, and
Bazel it pass it up the dependency chain, ensuring that it ends up on the c=
ommand line when needed - building
archives or executables.  You don&rsquo;t need to add a C dep to an archive=
 target when only one of n modules in the
archive actually depends on it.
</p>

<p>
I&rsquo;ve just started working on rules_jsoo, which I think will nicely de=
monstrate the virtues of Bazel integration.
The Bazel ecosystem includes a bunch of tools for working with Javascript; =
for example rules_js and rules_nodejs
make it easy to control which node toolchain version to use, integrate npm =
stuff, etc. Wouldn&rsquo;t it be nice to be
able to use such tools directly, without writing a bunch of glue code?  Now=
 a key element of Bazel integration is
the use of providers.  Rules deliver providers, and since providers act as =
a kind of rudimentary type system, I can
use the JsInfo provider (defined by rules_js) to integrate rules_jsoo with =
the larger Bazel js ecoystem.  For
example, the jsoo_library rule takes the OcamlProvider provider delivered b=
y ocaml_module rules, which contains the
.cmo file.  So jsoo_library runs those .cmo files through the jsoo compiler=
 and delivers the resulting js files in a
JsInfo provider. That provider is suitable as input to the rules in rules_j=
s, which gives us seamless integration.
So we can use the js_binary rule of rules_js to run code produced by jsoo_l=
ibrary under node. All that&rsquo;s needed is
to list the latter as a dependency of the former.  That&rsquo;s the plan, a=
nyway. Isn&rsquo;t that nice?
</p>
</div>
</div>


<div id=3D"outline-container-orgcf10218" class=3D"outline-3">
<h3 id=3D"orgcf10218">Gregg Reynolds said and Daniel B=C3=BCnzli replied</h=
3>
<div class=3D"outline-text-3" id=3D"text-orgcf10218">
<blockquote>
<p>
Ideally somebody learning a new language should not need to spend any time =
(at first) dealing with a build language
too.
</p>
</blockquote>

<p>
This doesn&rsquo;t only apply to learning. It also applies to prototyping, =
hypothesis generation and testing.
</p>

<p>
That&rsquo;s the reason why I built <a href=3D"https://erratique.ch/softwar=
e/brzo"><code>brzo</code></a> which I hope I&rsquo;ll be able to release at
some point (still needs a good design review and changes to the OCaml strat=
egy since it assumed we were moving
towards a model that didn&rsquo;t happen in the end =E2=80=93 namely the <a=
 href=3D"https://github.com/ocaml/RFCs/pull/17">library linking
proposal</a>, I&rsquo;d also like to add more languages to the mix but that=
 could
wait).
</p>

<p>
None of my projects do not start with ~brzo~ing these days and the hassle f=
ree build experience is exhilarating.
</p>

<blockquote>
<p>
Build systems often are =E2=80=9Ccomplex and confusing=E2=80=9D, but that=
=E2=80=99s largely because the problem space itself is complex and
confusing. There=E2=80=99s no getting around that.
</p>
</blockquote>

<p>
Note however that this is largely <i>accidental</i> complexity due to the f=
act that compilers work in idiosyncratic ways
for what build systems need in order to do their incremental and paralleliz=
ation business.
</p>

<p>
They are still stuck in a world where people would invoke their compiler ma=
nually at the cli level or specify the
invocations themselves in a <code>Makefile</code>.
</p>

<p>
In fact if it were not for the actual tools and the (lack) of information t=
hey give us, build is in fact an
excessively simple problem.
</p>

<p>
More specific to OCaml, the compiler clis have an insane amount of quirks a=
nd the whole system greatly suffers from
an underspecified linking model. Basically it was not a good idea to let th=
at be defined by a third party tool, if
only so that you can actually talk about libraries in error messages from t=
he compiler.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">Orsetto: structured data interchange languages (release 1.1.2)=
</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-orsetto-structured-data=
-interchange-languages-release-1-1-2/10506/1">https://discuss.ocaml.org/t/a=
nn-orsetto-structured-data-interchange-languages-release-1-1-2/10506/1</a>
</p>
</div>

<div id=3D"outline-container-orgb1d3f4c" class=3D"outline-3">
<h3 id=3D"orgb1d3f4c">james woodyatt announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb1d3f4c">
<p>
Announcing the release to OPAM of <a href=3D"http://opam.ocaml.org/packages=
/orsetto/">Orsetto 1.1.2</a>, an update to a personal
project of mine not sponsored by my employer. Licensed with BSD 2-Clause.
</p>

<p>
<b>Q. What is Orsetto?</b>
</p>

<p>
Aspires to do eventually for OCaml more or less what <a href=3D"https://ser=
de.rs">Serde</a> has done for Rust, i.e. to be a
curated and self-contained collection of structured data interchange langua=
ges with a cohesive and unified model of
serialization and deserialization.
</p>

<p>
Two interchange languages are currently supported: <a href=3D"https://json.=
org">JSON </a> and <a href=3D"https://cbor.io">CBOR </a>.
</p>

<p>
<b>Q. What is new in this release?</b>
</p>

<p>
Mostly error corrections, particularly in the CBOR library, produced by imp=
roving test coverage.
</p>

<p>
The change log for the release is here: <a href=3D"https://bitbucket.org/jh=
w/orsetto/src/r1.1.2/CHANGES.md">CHANGES.md </a>
</p>

<p>
Highlights:
</p>

<ul class=3D"org-ul">
<li>Major improvements in test coverage.</li>
<li>Many corrections for logic errors.</li>
<li>A few minor usability improvements.</li>
</ul>

<p>
Some things have not changed:
</p>

<ul class=3D"org-ul">
<li>Still has no Programmer Guide or Tutorial, or really any introduction a=
t all.</li>
<li>Still requires <b>ocamlfind</b> and builds with <b>omake</b>, which is =
currently not compatible with OCaml 5.0.</li>
<li>Still only supports JSON and CBOR.</li>
</ul>

<p>
<b>Q. It looks incomplete. What are your plans for future development?</b>
</p>

<p>
Yes, it=E2=80=99s a personal project, and yes, I&rsquo;m aware there are no=
 reverse dependencies on it currently in the public
OPAM repository. Still, I=E2=80=99d welcome opportunities to collaborate wi=
th others who share my vision for the project. As
long as it=E2=80=99s just me working on this, development will continue to =
be somewhat slow, as I&rsquo;m prone to over-engineer
things I care about. I have a lot of projects, and this is the only open so=
urce one.
</p>

<ul class=3D"org-ul">
<li><b>Orsetto 1.0.3</b> is the previous release. It offered parsers and em=
itter combinators for JSON and CBOR for OCaml &gt;=3D 4.06.1 (including 4.1=
3~alpha1). The quality of its JSON support is adequate, and it scores well =
on the &gt;<a href=3D"https://github.com/nst/JSONTestSuite">nst/JSONTestSui=
te</a> tests. The quality of its CBOR support is provisional, &gt;and not r=
ecommended.</li>
<li><b>Orsetto 1.1.2</b> is the current release. It adds generalized and ex=
tensible structured data interchange models with specializations for produc=
ing emitters and parsers for JSON and CBOR. The quality of the CBOR support=
 is much improved, and I&rsquo;m using it with good results in other projec=
ts. Supported on OCaml &gt;=3D 4.08.</li>
<li><b>Orsetto 1.2</b> is the next planned release. It will drop interfaces=
 marked `@caml.deprecated` in the 1.1 release. It will also drop support fo=
r OCaml &lt; 4.10, and it will stop depending on <b><b>ocamlfind</b></b>. I=
 hope to add a PPX for deriving parsers and emitters from OCaml data type d=
efinitions. I might also consider one or more new interchange languages=E2=
=80=94 suggestions are heartily encouraged.</li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Interest in a Http_sig library?</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/interest-in-a-http-sig-libr=
ary/10518/1">https://discuss.ocaml.org/t/interest-in-a-http-sig-library/105=
18/1</a>
</p>
</div>

<div id=3D"outline-container-orgbbecab6" class=3D"outline-3">
<h3 id=3D"orgbbecab6">Kiran Gopinathan announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgbbecab6">
<p>
Heyo all! I&rsquo;ve been working on an activitypub server for a while now,=
 and while it&rsquo;s still not yet complete,
recently I&rsquo;ve reached a point where I realised that I&rsquo;ve actual=
ly been sitting on some libraries that the community
might benefit from, as the current ecosystem doesn&rsquo;t seem to handle t=
hese things.
</p>

<p>
One such component that seemed to be in a state that was suitable to split =
off from was a small helper module to
implement a particular http signature scheme that seems to be rather common=
 in the activitypub scene.
</p>

<p>
In particular, the scheme I&rsquo;m referring to is defined here:
<a href=3D"https://datatracker.ietf.org/doc/html/draft-cavage-http-signatur=
es-12">https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-1=
2</a>
</p>

<pre class=3D"example" id=3D"orgda1b7b1">
                         Signing HTTP Messages
                    draft-cavage-http-signatures-12

Abstract
   When communicating over the Internet using the HTTP protocol, it can
   be desirable for a server or client to authenticate the sender of a
   particular message.  It can also be desirable to ensure that the
   message was not tampered with during transit.  This document
   describes a way for servers and clients to simultaneously add
   authentication and message integrity to HTTP messages by using a
   digital signature.
</pre>

<p>
I&rsquo;ve written a small library that glues together some components in t=
he OCaml ecosystem to somewhat handle the
signing (I have been mainly working off an &ldquo;implement-enough-to-make-=
the-system-work&rdquo; process rather than directly
transcribing the specification above):
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #406f90; font-style: ita=
lic;">(** </span><span style=3D"color: #375cd8;">[</span>verify ~signed_str=
ing ~signature key<span style=3D"color: #375cd8;">]</span><span style=3D"co=
lor: #406f90; font-style: italic;"> returns true iff</span>
<span style=3D"color: #406f90; font-style: italic;">   </span><span style=
=3D"color: #375cd8;">[</span>signature<span style=3D"color: #375cd8;">]</sp=
an><span style=3D"color: #406f90; font-style: italic;"> over </span><span s=
tyle=3D"color: #375cd8;">[</span>signed_string<span style=3D"color: #375cd8=
;">]</span><span style=3D"color: #406f90; font-style: italic;"> is valid ac=
cording to </span><span style=3D"color: #375cd8;">[</span>key<span style=3D=
"color: #375cd8;">]</span><span style=3D"color: #406f90; font-style: italic=
;">. *)</span>
<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #1f6fbf;">verify</span>: <span style=3D"color: #375cd8;">signed_=
string</span>:string -&gt; <span style=3D"color: #375cd8;">signature</span>=
:string -&gt; <span style=3D"color: #065fff;">X509.Public_key.</span>t -&gt=
; bool

<span style=3D"color: #406f90; font-style: italic;">(** </span><span style=
=3D"color: #375cd8;">[</span>verify_request ~resolve_public_key req<span st=
yle=3D"color: #375cd8;">]</span><span style=3D"color: #406f90; font-style: =
italic;"> verifies that a dream</span>
<span style=3D"color: #406f90; font-style: italic;">   request has been sig=
ned according to the HTTP signature scheme *)</span>
<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #1f6fbf;">verify_request</span>:
  <span style=3D"color: #375cd8;">resolve_public_key</span>:(string -&gt; (=
<span style=3D"color: #065fff;">X509.Public_key.</span>t, 'a) <span style=
=3D"color: #065fff;">Lwt_result.</span>t) -&gt;
  <span style=3D"color: #065fff;">Dream.</span>request -&gt; (bool, 'a) res=
ult <span style=3D"color: #065fff;">Lwt.</span>t

<span style=3D"color: #406f90; font-style: italic;">(** </span><span style=
=3D"color: #375cd8;">[</span>build_signed_headers ~priv_key ~key_id ~header=
s ~body_str
   ~current_time ~method_ ~uri<span style=3D"color: #375cd8;">]</span><span=
 style=3D"color: #406f90; font-style: italic;"> returns a list of signed he=
aders using</span>
<span style=3D"color: #406f90; font-style: italic;">   </span><span style=
=3D"color: #375cd8;">[</span>priv_key<span style=3D"color: #375cd8;">]</spa=
n><span style=3D"color: #406f90; font-style: italic;"> according to the HTT=
P signature scheme. </span><span style=3D"color: #375cd8;">[</span>key_id<s=
pan style=3D"color: #375cd8;">]</span><span style=3D"color: #406f90; font-s=
tyle: italic;"> should</span>
<span style=3D"color: #406f90; font-style: italic;">   be a string that can=
 be used to look up the public key associated</span>
<span style=3D"color: #406f90; font-style: italic;">   with </span><span st=
yle=3D"color: #375cd8;">[</span>priv_key<span style=3D"color: #375cd8;">]</=
span><span style=3D"color: #406f90; font-style: italic;">. *)</span>
<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #1f6fbf;">build_signed_headers</span>:
  <span style=3D"color: #375cd8;">priv_key</span>:<span style=3D"color: #06=
5fff;">X509.Private_key.</span>t -&gt;
  <span style=3D"color: #375cd8;">key_id</span>:string -&gt;
  <span style=3D"color: #375cd8;">headers</span>:string <span style=3D"colo=
r: #065fff;">StringMap.</span>t -&gt;
  <span style=3D"color: #375cd8;">body_str</span>:string -&gt;
  <span style=3D"color: #375cd8;">current_time</span>:<span style=3D"color:=
 #065fff;">Ptime.</span>t -&gt; <span style=3D"color: #375cd8;">method_</sp=
an>:string -&gt; <span style=3D"color: #375cd8;">uri</span>:<span style=3D"=
color: #065fff;">Uri.</span>t -&gt; (string * string) list
</pre>
</div>

<p>
The library is currently published at <a href=3D"https://github.com/Gopiand=
code/http_sig_ocaml">https://github.com/Gopiandcode/http_sig_ocaml</a> unde=
r the LGPL, but I haven&rsquo;t
released it on opam.
</p>

<p>
Anyway, I was wondering if anyone else had interest in this kind of package=
, and whether it would be a good
candidate for submission to opam - or if there are actually already existin=
g libraries in the OCaml ecosystem that
would actually already do this.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Outreachy summer &rsquo;22 closing commemoration session on 23=
rd Sept</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/outreachy-summer-22-closing=
-commemoration-session-on-23rd-sept/10450/5">https://discuss.ocaml.org/t/ou=
treachy-summer-22-closing-commemoration-session-on-23rd-sept/10450/5</a>
</p>
</div>

<div id=3D"outline-container-org0406959" class=3D"outline-3">
<h3 id=3D"org0406959">Patrick Ferris announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0406959">
<p>
Thank you to everyone that could make it to the presentation today. The pre=
sentation is now live:
<a href=3D"https://watch.ocaml.org/videos/watch/dc5bbf5b-3dd9-4c8d-b26a-71e=
730a67788">https://watch.ocaml.org/videos/watch/dc5bbf5b-3dd9-4c8d-b26a-71e=
730a67788</a> :camel:
</p>

<p>
In particular a massive congratulations and thank you to @moazzammoriani an=
d @IIITM-Jay. Thank you also to @sudha
for being the driving force behind making the presentation happen again thi=
s round! See you all for the next round!
</p>

<p>
Aside: if anybody has any issues with the live video please do reach out he=
re either publicly or privately, we gave
prior warning of our intentions to record and put the video on watch.ocaml.=
org, but I appreciate some people joined
a little later/might have some reservations etc.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">findlib-1.9.6</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list/2022-09/msg0=
0007.html">https://sympa.inria.fr/sympa/arc/caml-list/2022-09/msg00007.html=
</a>
</p>
</div>

<div id=3D"outline-container-orga12e775" class=3D"outline-3">
<h3 id=3D"orga12e775">Gerd Stolpmann announced</h3>
<div class=3D"outline-text-3" id=3D"text-orga12e775">
<p>
findlib-1.9.6 is out, now supporting OCaml-5.00 (as far as we know it).
There are also a few other install-related fixes in it.
</p>

<p>
For manual, download, manuals, etc. see here:
</p>

<p>
<a href=3D"http://projects.camlcity.org/projects/findlib.html">http://proje=
cts.camlcity.org/projects/findlib.html</a>
</p>

<p>
An updated OPAM package will follow soon.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">Interesting OCaml Articles</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/interesting-ocaml-articles/=
1867/100">https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/100</=
a>
</p>
</div>

<div id=3D"outline-container-orga7b0792" class=3D"outline-3">
<h3 id=3D"orga7b0792">Deep in this thread, alan said</h3>
<div class=3D"outline-text-3" id=3D"text-orga7b0792">
<p>
An interesting paper that uses OCaml is <a href=3D"http://gallium.inria.fr/=
~fpottier/publis/fpottier-elaboration.pdf">http://gallium.inria.fr/~fpottie=
r/publis/fpottier-elaboration.pdf</a> by
Francois Pottier, which gives a declarative DSL for implementing type rules=
 with applicative functors. It has an
associated library, <a href=3D"https://opam.ocaml.org/packages/inferno/">ht=
tps://opam.ocaml.org/packages/inferno/</a>.
</p>
</div>
</div>
</div>




<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">Other OCaml News</h2>
<div class=3D"outline-text-2" id=3D"text-8">
</div>
<div id=3D"outline-container-orgd7c4e1c" class=3D"outline-3">
<h3 id=3D"orgd7c4e1c">From the ocaml.org blog</h3>
<div class=3D"outline-text-3" id=3D"text-orgd7c4e1c">
<p>
Here are links from many OCaml blogs aggregated at <a href=3D"https://ocaml=
.org/blog/">the ocaml.org blog</a>.
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://tarides.com/blog/2022-09-23-tarides-sponsors-high-sc=
hool-hackers">Tarides Sponsors High School Hackers</a></li>
</ul>
</div>
</div>
</div>




<div id=3D"outline-container-org90444f6" class=3D"outline-2">
<h2 id=3D"org90444f6">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org90444f6">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I&rsquo;ll mail it to you, or go take=
 a look at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or=
 the <a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the a=
rchives</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a hre=
f=3D"http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class=3D"authorname" id=3D"orge7fa016">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

