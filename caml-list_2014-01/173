Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id EE80E7EE99
	for <caml-list@sympa.inria.fr>; Mon, 20 Jan 2014 22:43:52 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra;
  client-ip=209.85.216.182;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.216.182 as permitted
  sender) identity=mailfrom; client-ip=209.85.216.182;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qc0-f182.google.com) identity=helo;
  client-ip=209.85.216.182;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qc0-f182.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtACAKyX3VLRVdi2lWdsb2JhbABZhBm7VoENCBYOAQEBAQcNCQkSKoIlAQEBAwFAARsdAQMBCwYFCw0uIgERAQUBHAYTG4dVAQMJCJtqjFyDCZIIChknDWSEchEBBQyOcweEOASJR4p1g2aQKxgphHce
X-IPAS-Result: AtACAKyX3VLRVdi2lWdsb2JhbABZhBm7VoENCBYOAQEBAQcNCQkSKoIlAQEBAwFAARsdAQMBCwYFCw0uIgERAQUBHAYTG4dVAQMJCJtqjFyDCZIIChknDWSEchEBBQyOcweEOASJR4p1g2aQKxgphHce
X-IronPort-AV: E=Sophos;i="4.95,692,1384297200"; 
   d="scan'208";a="45486829"
Received: from mail-qc0-f182.google.com ([209.85.216.182])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 20 Jan 2014 22:43:51 +0100
Received: by mail-qc0-f182.google.com with SMTP id c9so6454408qcz.13
        for <caml-list@inria.fr>; Mon, 20 Jan 2014 13:43:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=v8DmbXDQ6gVJrQco/VWj+0yL1tRTi6U42vyih6Cn5cU=;
        b=oxiIygMlEd87bCt5xwtnvkrWKe/I4EMoF6a10yrvEPG6bYZdVCNKLJqKXnEP2SfzRe
         /b2aDe4Qw9HFmPMv94IbHqUdiCPkXgaY5V1wBvSc4mnYSpgv1YedqA+MW6coTYa4vnrA
         Dzlb453KiPazpnv9mVgcvxVxZ//B/SSsZyQ6bTKMuFoGgyaTonLgHGjz+cPEVgUNpgUo
         vwwrC8RZfLAN6tjr767VdclYfhtODMUDkkbGT49FHuhhacH47gpIVuDQHnhUQOABL33l
         m2CxitU2L7/kLgY5somgHGH08ntcrvJ41RyQUIycEXjydEipVm3JCByM9NfilOTWhn2+
         8RiQ==
X-Received: by 10.224.88.3 with SMTP id y3mr31977986qal.80.1390254230644; Mon,
 20 Jan 2014 13:43:50 -0800 (PST)
MIME-Version: 1.0
Received: by 10.224.95.8 with HTTP; Mon, 20 Jan 2014 13:43:30 -0800 (PST)
In-Reply-To: <52DD95B6.7020001@khandkar.net>
References: <CAN6ygO=D8x=6MM+=+xG30p1LNn5vj3KnYNfSE5oU+6rMCEXhMw@mail.gmail.com>
 <52DD904B.1000008@khandkar.net> <CAN6ygO=8aQhLh+garJOpvciPh4tSm9ayJYyAs7OXX1ijHHAs7A@mail.gmail.com>
 <52DD95B6.7020001@khandkar.net>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Mon, 20 Jan 2014 16:43:30 -0500
Message-ID: <CAN6ygOkQux_O=fizHyroAUvVKTAeW_rgvRkfeKREw7irU2ur=A@mail.gmail.com>
To: Siraaj Khandkar <siraaj@khandkar.net>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c3dbbc90c60004f06dc9b9
Subject: Re: [Caml-list] Purity in ocaml

--001a11c3dbbc90c60004f06dc9b9
Content-Type: text/plain; charset=ISO-8859-1

I'm suggesting flagging any function that uses 'try...with' and not
allowing this function to be pure or st. A pure function can fail, but that
failure should be 'catastrophic' and only be caught in an impure function.
This is the way haskell handles it. Of course, given the fact that my
suggestion doesn't require writing code differently, it would simply modify
the result of type inference. So a function that would normally be inferred
to be pure would now be inferred as impure, unless the user specifically
annotated it with purity, in which case there would be a type error.

If that isn't strict enough, we could forbid the raising of exceptions
unless they're fully caught in the same function or the calling function
(annotated with 'exception') catches them. There's nothing wrong with
exceptions that are caught in the calling function as far as I can tell --
the only problem with exceptions is when they percolate up an unknown
number of function calls, causing unpredictable behavior.

-Yotam


On Mon, Jan 20, 2014 at 4:31 PM, Siraaj Khandkar <siraaj@khandkar.net>wrote:

> You can certainly program without exceptions, for sure. I'm just saying
> that there's isn't a way for static analysis to guarantee purity without
> ability of tracking their usage. Or are you suggesting something to the
> effect of flagging any function, and its callers,  that uses the keyword
> `raise`?
>
>
> On 1/20/14 4:16 PM, Yotam Barnoy wrote:
> > I don't think exceptions are a deal-breaker. First, it's not hard to have
> > the same pure structures without exceptions. Second, it wouldn't be too
> > difficult to allow for a wrapper function that translates exceptions to
> > return values. I do that already on most data structures. This layer
> could
> > be annotated with 'unsafe', which is pretty much needed anyway for
> calling
> > external C functions or for printing within pure functions, or it could
> > perhaps be given a specialized 'exception' annotation signifying that the
> > only role of this function is to translate exceptions. So pure code could
> > call both 'unsafe' and 'exception' functions. Exception functions could
> be
> > checked more rigorously to make sure all they do is translate exceptions
> > into values.
> >
> > Other than that, catching of exceptions would generally not be allowed in
> > pure/st functions.
> >
> > -Yotam
> >
> >
> > On Mon, Jan 20, 2014 at 4:08 PM, Siraaj Khandkar <siraaj@khandkar.net
> >wrote:
> >
> >> On 1/20/14 3:45 PM, Yotam Barnoy wrote:
> >>> I wanted to gauge the interest of people on the list in adding purity
> >>> annotations to ocaml. Purity is one of those things that could really
> >> help
> >>> with reducing memory allocations through deforestation and decreasing
> the
> >>> running time of programs written in the functional paradigm, and it
> could
> >>> be very useful for parallelism as well. The basic scheme I have in mind
> >> is
> >>> this:
> >>>
> >>> - Functions that do not access mutable structures would be marked pure.
> >>> - Functions that access only local mutable structures would be marked
> as
> >> st
> >>> (a la state monad)
> >>> - Functions that access global mutable data would be unmarked (as they
> >> are
> >>> now).
> >>> - Pure functions can call st functions/code so long as all of the state
> >>> referred to by the st code is contained within said pure functions.
> >>> - Functions that call higher order functions, but do not modify mutable
> >>> state would be marked hpure (half-pure). These functions would be pure
> so
> >>> long as the functions they call remain pure. This allows List.map,
> >>> List.fold etc to work for both pure and impure code.
> >>> - The same thing exists for st code: hst represents functions that take
> >>> higher order functions but only performs local state mutation.
> >>> - In order to take advantage of this mechanism, there's no need to
> >> annotate
> >>> functions. The type inference algorithm will figure out the strictest
> >> type
> >>> that can be applied to a function and will save the annotation to an
> >>> external, saved annotation file. This means that non-annotated code can
> >>> take advantage of purity without doing any extra work, and the
> programmer
> >>> never has to think about purity.
> >>> - Having the purity annotations as an option is useful to force certain
> >>> parts of the code, such as monads, to be pure.
> >>> - An edge case: local state can be made to refer to global state by
> some
> >>> external function call. Therefore, local state is considered 'polluted'
> >>> (and global) if it is passed to an impure function.
> >>> - Exceptions: not sure how to handle them yet. The easiest solution is
> to
> >>> forbid them in st/pure code. Another easy alternative is to only allow
> >>> catching them in impure code, as haskell does.
> >>>
> >>> Thoughts?
> >>
> >> Exceptions was the first thought that came to mind when I began reading
> >> this - I think the ability to track unhandled exceptions, which I think
> >> OcamlPro is working on, is a pre-req for any purity analysis to be
> >> meaningful, since so many, otherwise pure, structures raise exceptions
> :/
>

--001a11c3dbbc90c60004f06dc9b9
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>I&#39;m suggesting flagging any function that uses &#=
39;try...with&#39; and not allowing this function to be pure or st. A pure =
function can fail, but that failure should be &#39;catastrophic&#39; and on=
ly be caught in an impure function. This is the way haskell handles it. Of =
course, given the fact that my suggestion doesn&#39;t require writing code =
differently, it would simply modify the result of type inference. So a func=
tion that would normally be inferred to be pure would now be inferred as im=
pure, unless the user specifically annotated it with purity, in which case =
there would be a type error.<br>

<br>If that isn&#39;t strict enough, we could forbid the raising of excepti=
ons unless they&#39;re fully caught in the same function or the calling fun=
ction (annotated with &#39;exception&#39;) catches them. There&#39;s nothin=
g wrong with exceptions that are caught in the calling function as far as I=
 can tell -- the only problem with exceptions is when they percolate up an =
unknown number of function calls, causing unpredictable behavior.<br>

<br></div>-Yotam<br></div><div class=3D"gmail_extra"><br><br><div class=3D"=
gmail_quote">On Mon, Jan 20, 2014 at 4:31 PM, Siraaj Khandkar <span dir=3D"=
ltr">&lt;<a href=3D"mailto:siraaj@khandkar.net" target=3D"_blank">siraaj@kh=
andkar.net</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">You can certainly program without exceptions=
, for sure. I&#39;m just saying<br>
that there&#39;s isn&#39;t a way for static analysis to guarantee purity wi=
thout<br>
ability of tracking their usage. Or are you suggesting something to the<br>
effect of flagging any function, and its callers, =A0that uses the keyword<=
br>
`raise`?<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
On 1/20/14 4:16 PM, Yotam Barnoy wrote:<br>
&gt; I don&#39;t think exceptions are a deal-breaker. First, it&#39;s not h=
ard to have<br>
&gt; the same pure structures without exceptions. Second, it wouldn&#39;t b=
e too<br>
&gt; difficult to allow for a wrapper function that translates exceptions t=
o<br>
&gt; return values. I do that already on most data structures. This layer c=
ould<br>
&gt; be annotated with &#39;unsafe&#39;, which is pretty much needed anyway=
 for calling<br>
&gt; external C functions or for printing within pure functions, or it coul=
d<br>
&gt; perhaps be given a specialized &#39;exception&#39; annotation signifyi=
ng that the<br>
&gt; only role of this function is to translate exceptions. So pure code co=
uld<br>
&gt; call both &#39;unsafe&#39; and &#39;exception&#39; functions. Exceptio=
n functions could be<br>
&gt; checked more rigorously to make sure all they do is translate exceptio=
ns<br>
&gt; into values.<br>
&gt;<br>
&gt; Other than that, catching of exceptions would generally not be allowed=
 in<br>
&gt; pure/st functions.<br>
&gt;<br>
&gt; -Yotam<br>
&gt;<br>
&gt;<br>
&gt; On Mon, Jan 20, 2014 at 4:08 PM, Siraaj Khandkar &lt;<a href=3D"mailto=
:siraaj@khandkar.net">siraaj@khandkar.net</a>&gt;wrote:<br>
&gt;<br>
&gt;&gt; On 1/20/14 3:45 PM, Yotam Barnoy wrote:<br>
&gt;&gt;&gt; I wanted to gauge the interest of people on the list in adding=
 purity<br>
&gt;&gt;&gt; annotations to ocaml. Purity is one of those things that could=
 really<br>
&gt;&gt; help<br>
&gt;&gt;&gt; with reducing memory allocations through deforestation and dec=
reasing the<br>
&gt;&gt;&gt; running time of programs written in the functional paradigm, a=
nd it could<br>
&gt;&gt;&gt; be very useful for parallelism as well. The basic scheme I hav=
e in mind<br>
&gt;&gt; is<br>
&gt;&gt;&gt; this:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; - Functions that do not access mutable structures would be mar=
ked pure.<br>
&gt;&gt;&gt; - Functions that access only local mutable structures would be=
 marked as<br>
&gt;&gt; st<br>
&gt;&gt;&gt; (a la state monad)<br>
&gt;&gt;&gt; - Functions that access global mutable data would be unmarked =
(as they<br>
&gt;&gt; are<br>
&gt;&gt;&gt; now).<br>
&gt;&gt;&gt; - Pure functions can call st functions/code so long as all of =
the state<br>
&gt;&gt;&gt; referred to by the st code is contained within said pure funct=
ions.<br>
&gt;&gt;&gt; - Functions that call higher order functions, but do not modif=
y mutable<br>
&gt;&gt;&gt; state would be marked hpure (half-pure). These functions would=
 be pure so<br>
&gt;&gt;&gt; long as the functions they call remain pure. This allows List.=
map,<br>
&gt;&gt;&gt; List.fold etc to work for both pure and impure code.<br>
&gt;&gt;&gt; - The same thing exists for st code: hst represents functions =
that take<br>
&gt;&gt;&gt; higher order functions but only performs local state mutation.=
<br>
&gt;&gt;&gt; - In order to take advantage of this mechanism, there&#39;s no=
 need to<br>
&gt;&gt; annotate<br>
&gt;&gt;&gt; functions. The type inference algorithm will figure out the st=
rictest<br>
&gt;&gt; type<br>
&gt;&gt;&gt; that can be applied to a function and will save the annotation=
 to an<br>
&gt;&gt;&gt; external, saved annotation file. This means that non-annotated=
 code can<br>
&gt;&gt;&gt; take advantage of purity without doing any extra work, and the=
 programmer<br>
&gt;&gt;&gt; never has to think about purity.<br>
&gt;&gt;&gt; - Having the purity annotations as an option is useful to forc=
e certain<br>
&gt;&gt;&gt; parts of the code, such as monads, to be pure.<br>
&gt;&gt;&gt; - An edge case: local state can be made to refer to global sta=
te by some<br>
&gt;&gt;&gt; external function call. Therefore, local state is considered &=
#39;polluted&#39;<br>
&gt;&gt;&gt; (and global) if it is passed to an impure function.<br>
&gt;&gt;&gt; - Exceptions: not sure how to handle them yet. The easiest sol=
ution is to<br>
&gt;&gt;&gt; forbid them in st/pure code. Another easy alternative is to on=
ly allow<br>
&gt;&gt;&gt; catching them in impure code, as haskell does.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Thoughts?<br>
&gt;&gt;<br>
&gt;&gt; Exceptions was the first thought that came to mind when I began re=
ading<br>
&gt;&gt; this - I think the ability to track unhandled exceptions, which I =
think<br>
&gt;&gt; OcamlPro is working on, is a pre-req for any purity analysis to be=
<br>
&gt;&gt; meaningful, since so many, otherwise pure, structures raise except=
ions :/<br>
</div></div></blockquote></div><br></div>

--001a11c3dbbc90c60004f06dc9b9--
