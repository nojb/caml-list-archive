Return-Path: <jon@ffconsultancy.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 1750B7F75D
	for <caml-list@sympa.inria.fr>; Fri, 31 Jan 2014 09:26:29 +0100 (CET)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jon@ffconsultancy.com) identity=pra; client-ip=212.159.14.17;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jon@ffconsultancy.com";
  x-sender="jon@ffconsultancy.com";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  jon@ffconsultancy.com) identity=mailfrom;
  client-ip=212.159.14.17;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jon@ffconsultancy.com";
  x-sender="jon@ffconsultancy.com";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@avasout02.plus.net) identity=helo;
  client-ip=212.159.14.17;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="jon@ffconsultancy.com";
  x-sender="postmaster@avasout02.plus.net";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtEBADZd61LUnw4RnGdsb2JhbABZgkh8qz6SToEHFg4BAQEBAQYNCQkUKIIlAQEFCAIdBkELDQMCCREEAQEBJwcZCBsKCQgCBBMLBYdhAxXDQA2JLReMbIIWBgGCL4IJBI8phxSOSohw
X-IPAS-Result: AtEBADZd61LUnw4RnGdsb2JhbABZgkh8qz6SToEHFg4BAQEBAQYNCQkUKIIlAQEFCAIdBkELDQMCCREEAQEBJwcZCBsKCQgCBBMLBYdhAxXDQA2JLReMbIIWBgGCL4IJBI8phxSOSohw
X-IronPort-AV: E=Sophos;i="4.95,756,1384297200"; 
   d="scan'208,217";a="56222855"
Received: from avasout02.plus.net ([212.159.14.17])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 31 Jan 2014 09:26:28 +0100
Received: from XPS ([46.208.209.80])
	by avasout02 with smtp
	id LYSR1n0041kdSZJ01YSSBK; Fri, 31 Jan 2014 08:26:27 +0000
X-CM-Score: 0.00
X-CNFS-Analysis: v=2.1 cv=KvrD2AmN c=1 sm=1 tr=0
 a=0e+StC6m1dZv7qXQ+YhjwA==:117 a=0e+StC6m1dZv7qXQ+YhjwA==:17 a=0Bzu9jTXAAAA:8
 a=XCxr5DcLagoA:10 a=Xub9RBUEA-sA:10 a=Kvk-SOs2Z7YA:10 a=r2vSxAw-AAAA:8
 a=BR64nyZ84HQA:10 a=DAwyPP_o2Byb1YXLmDAA:9 a=Zr7miEi8wWIA:10
 a=cKsnjEOsciEA:10 a=pGLkceISAAAA:8 a=ynWvfNHF5Oh2PrXo13cA:9 a=CjuIK1q_8ugA:10
 a=MSl-tDqOz04A:10 a=d6ZO2ScF64gA:10 a=yMhMjlubAAAA:8 a=SSmOFEACAAAA:8
 a=TDSGXA7tdd4V1Gjik-IA:9 a=emUcNtsOKOum78x9:21 a=gKO2Hq4RSVkA:10
 a=UiCQ7L4-1S4A:10 a=hTZeC7Yk6K0A:10 a=frz4AuCg-hUA:10 a=tXsnliwV7b4A:10
X-AUTH: jdh302:2500
Reply-To: <jon@ffconsultancy.com>
From: "Jon Harrop" <jon@ffconsultancy.com>
To: "'Yotam Barnoy'" <yotambarnoy@gmail.com>
Cc: "'Goswin von Brederlow'" <goswin-v-b@web.de>,
	"'Ocaml Mailing List'" <caml-list@inria.fr>
References: <CAK=fH+iHt+LvgQnTQ700z+dXKx4tyrA+NQdK9obKs++mk+g3OA@mail.gmail.com> <sympa.1389956970.13214.762@inria.fr> <20140120101654.GI26447@frosties> <08bc01cf17b8$9263d070$b72b7150$@ffconsultancy.com> <20140123092925.GB20624@frosties> <01c401cf1891$b1fb1360$15f13a20$@ffconsultancy.com> <CAN6ygO=4xFdK692LXZmtSB-aQTgVqGuxARHgi3UvD1XOV2Bseg@mail.gmail.com> <026101cf18dd$756c13d0$60443b70$@ffconsultancy.com> <DFCBF006-CA0F-455C-8648-AEE6C8B4F08E@mpi-sws.org> <030501cf1925$45380fa0$cfa82ee0$@ffconsultancy.com> <20140127152944.GA29326@frosties> <CAN6ygOkuGLUJ+WR+FKZLJ+2imRsk9qZKxobsSt+hpi4PtiR07A@mail.gmail.com> <02c001cf1ccc$b635a9b0$22a0fd10$@ffconsultancy.com> <CAN6ygO=YLesg_jX5UF=dQAS3n2th=8ELhFMYffmnSwPAB7DoNA@mail.gmail.com> <04ca01cf1e02$a2dc7b00$e8957100$@ffconsultancy.com> <CAN6ygO=DAvJqn2fuD_RpfT0otYdJmjtAxT7eZ6uUrb3zNGm0pw@mail.gmail.com>
In-Reply-To: <CAN6ygO=DAvJqn2fuD_RpfT0otYdJmjtAxT7eZ6uUrb3zNGm0pw@mail.gmail.com>
Date: Fri, 31 Jan 2014 08:26:32 -0000
Organization: Flying Frog Consultancy Ltd.
Message-ID: <056001cf1e5e$266f9640$734ec2c0$@ffconsultancy.com>
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0561_01CF1E5E.26700B70"
X-Mailer: Microsoft Outlook 14.0
Thread-Index: AQHI4li4v5YdVc3QG7JLKEaISEVTZQITm23GAs0uvsEBcUwfGALv8TtSARGMS8wBZ0wNRgGSGZD1Aq5lN6wCA46uAwIAfLE+Ai7euecCTHJxcQGMOt68AmGgOdEB/G+4JZm3zwNQ
Content-Language: en-gb
Subject: RE: [Caml-list] How much optimized is the 'a option type ?

This is a multipart message in MIME format.

------=_NextPart_000_0561_01CF1E5E.26700B70
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

 

I see. I meant unbox the tuple as in "the tuple and only the tuple" rather
than "the tuple and everything inside the tuple". So unboxing a float * int
would give you two words, one pointing to the boxed float and the other
containing a tagged int.

 

Cheers,

Jon.

 

From: Yotam Barnoy [mailto:yotambarnoy@gmail.com] 
Sent: 30 January 2014 21:43
To: Jon Harrop
Cc: Goswin von Brederlow; Ocaml Mailing List
Subject: Re: [Caml-list] How much optimized is the 'a option type ?

 

I don't really understand how this could work. If the type of a function is
'a * 'b -> 'c then the function expects 2 tuple members, right? It has no
idea what their size is, because it can be called on any tuple. Now let's
say the tuple is float * int. If we unbox the tuple,  we get 3 words, with
the int comprising the 3rd word, and no metadata. How does the function know
how big each member is, or where to find each member? Are you assuming we
monomorphize the function?

Yotam

 

On Thu, Jan 30, 2014 at 4:31 PM, Jon Harrop <jon@ffconsultancy.com> wrote:

Yotam wrote:
> I don't think so. Without metadata, how do you know where one tuple member
ends and another begins?

Use static type information. When the type is known to be 'a * 'b you use
the unboxed representation. Otherwise you default to the boxed
representation.

OCaml already does this to some extent because functions that accept a tuple
are compiled to multi-argument functions (IIRC). So this would just be an
extension to handle the return value too. The same idea could be used with
many other types, e.g. unboxed optional arguments.

Cheers,
Jon.



 


------=_NextPart_000_0561_01CF1E5E.26700B70
Content-Type: text/html;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" xmlns:o=3D"urn:schemas-micr=
osoft-com:office:office" xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml" xmlns=3D"http:=
//www.w3.org/TR/REC-html40"><head><META HTTP-EQUIV=3D"Content-Type" CONTENT=
=3D"text/html; charset=3Dus-ascii"><meta name=3DGenerator content=3D"Micros=
oft Word 14 (filtered medium)"><style><!--
/* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
span.EmailStyle17
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-family:"Calibri","sans-serif";
	mso-fareast-language:EN-US;}
@page WordSection1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
--></style><!--[if gte mso 9]><xml>
<o:shapedefaults v:ext=3D"edit" spidmax=3D"1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
<o:shapelayout v:ext=3D"edit">
<o:idmap v:ext=3D"edit" data=3D"1" />
</o:shapelayout></xml><![endif]--></head><body lang=3DEN-GB link=3Dblue vli=
nk=3Dpurple><div class=3DWordSection1><p class=3DMsoNormal><span style=3D'f=
ont-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D'><o:p>&nbs=
p;</o:p></span></p><p class=3DMsoNormal><span style=3D'font-size:11.0pt;fon=
t-family:"Calibri","sans-serif";color:#1F497D'>I see. I meant unbox the tup=
le as in &#8220;the tuple and only the tuple&#8221; rather than &#8220;the =
tuple and everything inside the tuple&#8221;. So unboxing a float * int wou=
ld give you two words, one pointing to the boxed float and the other contai=
ning a tagged int.<o:p></o:p></span></p><p class=3DMsoNormal><span style=3D=
'font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D'><o:p>&n=
bsp;</o:p></span></p><p class=3DMsoNormal><span style=3D'font-size:11.0pt;f=
ont-family:"Calibri","sans-serif";color:#1F497D'>Cheers,<o:p></o:p></span><=
/p><p class=3DMsoNormal><span style=3D'font-size:11.0pt;font-family:"Calibr=
i","sans-serif";color:#1F497D'>Jon.<o:p></o:p></span></p><p class=3DMsoNorm=
al><span style=3D'font-size:11.0pt;font-family:"Calibri","sans-serif";color=
:#1F497D'><o:p>&nbsp;</o:p></span></p><p class=3DMsoNormal><b><span lang=3D=
EN-US style=3D'font-size:10.0pt;font-family:"Tahoma","sans-serif"'>From:</s=
pan></b><span lang=3DEN-US style=3D'font-size:10.0pt;font-family:"Tahoma","=
sans-serif"'> Yotam Barnoy [mailto:yotambarnoy@gmail.com] <br><b>Sent:</b> =
30 January 2014 21:43<br><b>To:</b> Jon Harrop<br><b>Cc:</b> Goswin von Bre=
derlow; Ocaml Mailing List<br><b>Subject:</b> Re: [Caml-list] How much opti=
mized is the 'a option type ?<o:p></o:p></span></p><p class=3DMsoNormal><o:=
p>&nbsp;</o:p></p><div><div><p class=3DMsoNormal style=3D'margin-bottom:12.=
0pt'>I don't really understand how this could work. If the type of a functi=
on is 'a * 'b -&gt; 'c then the function expects 2 tuple members, right? It=
 has no idea what their size is, because it can be called on any tuple. Now=
 let's say the tuple is float * int. If we unbox the tuple,&nbsp; we get 3 =
words, with the int comprising the 3rd word, and no metadata. How does the =
function know how big each member is, or where to find each member? Are you=
 assuming we monomorphize the function?<o:p></o:p></p></div><p class=3DMsoN=
ormal>Yotam<o:p></o:p></p></div><div><p class=3DMsoNormal style=3D'margin-b=
ottom:12.0pt'><o:p>&nbsp;</o:p></p><div><p class=3DMsoNormal>On Thu, Jan 30=
, 2014 at 4:31 PM, Jon Harrop &lt;<a href=3D"mailto:jon@ffconsultancy.com" =
target=3D"_blank">jon@ffconsultancy.com</a>&gt; wrote:<o:p></o:p></p><div><=
p class=3DMsoNormal style=3D'margin-bottom:12.0pt'>Yotam wrote:<br>&gt; I d=
on't think so. Without metadata, how do you know where one tuple member<br>=
ends and another begins?<o:p></o:p></p></div><p class=3DMsoNormal style=3D'=
margin-bottom:12.0pt'>Use static type information. When the type is known t=
o be 'a * 'b you use<br>the unboxed representation. Otherwise you default t=
o the boxed<br>representation.<br><br>OCaml already does this to some exten=
t because functions that accept a tuple<br>are compiled to multi-argument f=
unctions (IIRC). So this would just be an<br>extension to handle the return=
 value too. The same idea could be used with<br>many other types, e.g. unbo=
xed optional arguments.<br><br>Cheers,<br>Jon.<br><br><o:p></o:p></p></div>=
<p class=3DMsoNormal><o:p>&nbsp;</o:p></p></div></div></body></html>=

------=_NextPart_000_0561_01CF1E5E.26700B70--

