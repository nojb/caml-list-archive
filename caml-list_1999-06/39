Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA10775 for caml-redistribution; Wed, 16 Jun 1999 22:56:31 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA18660 for <caml-list@pauillac.inria.fr>; Wed, 16 Jun 1999 22:55:33 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id WAA02641;
	Wed, 16 Jun 1999 22:55:32 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA22149; Wed, 16 Jun 1999 22:55:31 +0200 (MET DST)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <199906162055.WAA22149@pauillac.inria.fr>
Subject: Re: forward function definitions
To: luther@steed.u-strasbg.fr (luther sven)
Date: Wed, 16 Jun 1999 22:55:31 +0200 (MET DST)
Cc: caml-list@inria.fr
In-Reply-To: <19990616150347.C6385@steed.u-strasbg.fr> from "luther sven" at Jun 16, 99 03:03:47 pm
X-Mailer: ELM [version 2.4 PL24 ME8]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> Ah, but you can define a wrapper immediately following the definition of the forwarder function :
> 
> let f for () = ...
> 
> ...
> 
> let for ... = ...
> let true_f = f for
> 
> Friendly,
> 
> Sven LUTHER

Yes you can do so, but you once again get the same polymorphism
problem:
1) If for is used polymorphically in the body of f you're dead.
2) true_f will be monomorphic as well, unless you eta-expand it as in:
   let true_f () = f for ()

PS: for is indeed a keyword, and this identifier cannot be used as a
regular argument or function name ...

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://cristal.inria.fr/~weis/




