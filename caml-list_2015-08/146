Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 8B4BD7F0A8
	for <caml-list@sympa.inria.fr>; Thu, 20 Aug 2015 15:08:48 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.214.181;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.214.181 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.214.181;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ob0-f181.google.com) identity=helo;
  client-ip=209.85.214.181;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-ob0-f181.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0DPAQCD0NVVlLXWVdFdg29pBoMfqXCQFYIrhXsCgSsHTAEBAQEBARIBAQEBBwsLCR8whCMBAQEDARIRBBkBGxILAQMBCwYDAgsNDR0CAiEBAREBBQEKEgYTEhCHdgEDCggNnCiPP4EvPjGLQIFsgnmKbQoZJwMKFUKFAAEBAQEBBQEBAQEBAQEBFAEFDotFgk+CNwQHgmmBQwWFbwyGaIhGhQWFfYFtgUpGkHODT4IdEiOBFxEGhCgiM4JMAQEB
X-IPAS-Result: A0DPAQCD0NVVlLXWVdFdg29pBoMfqXCQFYIrhXsCgSsHTAEBAQEBARIBAQEBBwsLCR8whCMBAQEDARIRBBkBGxILAQMBCwYDAgsNDR0CAiEBAREBBQEKEgYTEhCHdgEDCggNnCiPP4EvPjGLQIFsgnmKbQoZJwMKFUKFAAEBAQEBBQEBAQEBAQEBFAEFDotFgk+CNwQHgmmBQwWFbwyGaIhGhQWFfYFtgUpGkHODT4IdEiOBFxEGhCgiM4JMAQEB
X-IronPort-AV: E=Sophos;i="5.15,714,1432591200"; 
   d="scan'208";a="143361299"
Received: from mail-ob0-f181.google.com ([209.85.214.181])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 20 Aug 2015 15:08:47 +0200
Received: by obbwr7 with SMTP id wr7so31322240obb.2
        for <caml-list@inria.fr>; Thu, 20 Aug 2015 06:08:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=IB6SPE6HtFju52ycL17txFWakw9rJ4XHzyv5vDEUgeo=;
        b=Zvpm7v7vp/zSaeK7HUqug7KXWMz/FvuyYgZFoT76zszUNBQWdlJ7NbdwtJphKVctwO
         FOERyxWXX3N6EUC7d7ALSCuTb5IEj1JicIXI9gW9eWnFHUc0W0/v8q67ziJiA5Npfn9V
         tQyGKVfPaXOkUbIVk6hFnvQJVNBaigrTybjThyhvHzCFfNgNZyEGgqC/PZW9S0u9fQys
         XEd7qiky754GOpcPMBlmjYwizmC1nsvUyUCRmTDZlrYR/sX9rocEq808Vst+zNGxFHpt
         T1/VG8kO6aj86T8veuNLlG7HBGzXXFplBKfrtB1hIMxm/JdBWnNGfh2/kABhmqQRoFQn
         wiOg==
MIME-Version: 1.0
X-Received: by 10.182.246.41 with SMTP id xt9mr2693778obc.55.1440076125955;
 Thu, 20 Aug 2015 06:08:45 -0700 (PDT)
Received: by 10.202.191.8 with HTTP; Thu, 20 Aug 2015 06:08:45 -0700 (PDT)
In-Reply-To: <20150820091051.GA15458@frosties>
References: <CAK7rcp_DfDdW94HWhuPsnKE-eg3ncvLTDfk7vcg9R+toKMkZhg@mail.gmail.com>
	<20150818185751.GC650@topoi.pooq.com>
	<CAK7rcp_zLJPgjb-5JpDdWh5BtJGnsomGvLSaLmMRhwCG1ZbnNA@mail.gmail.com>
	<CAPFanBHjX=VR58EAdzqHQ3ObrwofUmwOf4W8s5e4K3R46HVmCg@mail.gmail.com>
	<20150820091051.GA15458@frosties>
Date: Thu, 20 Aug 2015 09:08:45 -0400
Message-ID: <CAK7rcp8NGOWj=LbNpB72RCKhW7KG2g0sHE1+1n2ZNtt_njoaUQ@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c3241eeff0ad051dbdd9b0
Subject: Re: [Caml-list] Type Encoding Format Control

--001a11c3241eeff0ad051dbdd9b0
Content-Type: text/plain; charset=UTF-8

In the case of 2), that's interesting because such a type of Some None is
sort of antithetical to describing anything sensical. Not that it's not
pragmatic or doesn't occur-I'm sure some functions get combined in ways
that stuff like this crops up. But I think of the typing system as being
badly exercised if something like this arises-but I really see your point
in terms of implementation. Thanks for writing this.

I'm sure that ctypes would likely be able to answer exactly this problem
because it boils down to C. But it was a general question about extensions
to the typing system.

On Thu, Aug 20, 2015 at 5:10 AM, Goswin von Brederlow <goswin-v-b@web.de>
wrote:

> On Tue, Aug 18, 2015 at 09:44:04PM +0200, Gabriel Scherer wrote:
> > We've discussed optimisations of ('a option) in the past. Certainly
> > some things could be done, but it's unclear to me how much value there
> is in
> > optimizing ('a option) specifically: what if, for example, we later
> > understand that ('a, exn) result is the more general abstraction that
> > we should have used instead, and rely on it heavily in libraries, will
> > we de-optimize options and work on optimizing results?
> >
> > Note that your idea of "either a failure of a value" can be achieved,
> > in some monomorphic cases (specifically when you know 'a and it has a
> > product structure) by using a specific type declaration:
> >
> >   type my_struct =
> >     | None
> >     | Some of int * int array * string
> >
> > This will be represented as efficiently as the tuple (int * int array
> > * string), yet it has a default case (or two, or another case with
> > exceptions, whatever -- this is more flexible than just options). With
> > inline records in 4.03 -- not yet released -- you will even be able to
> > have some of the product structure mutable:
> >
> >   type my_struct =
> >     | None
> >     | Some of { mutable count : int; values : int array; name : string }
>
> Except here you are talking about an already boxed value. The Some
> part is encoded in the tag of the box you already have.
>
> In the case of a pointer you have not box to put the Some tag on.
>
> > On Tue, Aug 18, 2015 at 9:01 PM, Kenneth Adam Miller
> > <kennethadammiller@gmail.com> wrote:
> > > Well, it's not restricted to pointers - In general I would think that
> the
> > > type annotation for Some | None would be left alone. I just used
> pointer as
> > > an example because pointers exclude a value, 0x0, from the valid set.
> In
> > > which case None is encoded as 0x0.
> > >
> > > Thanks for the bit about polymorphism in the context of what a compiler
> > > would see - clients that do not see the hypothetical additional
> annotation
> > > for that specific type to allow a format wouldn't have the augmented
> > > operational needs to work on such an instance correctly. Got it!
>
> There are 2 problems:
>
> 1) polymorphism
>
> A function taking an 'a option could get 0, which it would easily
> detect as 0, a pointer to some value or a pointer to box taged Some.
> But there is no way to separate the last two cases. The pointer
> doesn't even have to point to an ocaml value so dereferencing and
> checking if it is a box with Some tag is not an option. And even if
> you could any variant type with a boxed constructor will have a tag of
> 0, same as Some. Having different representation for pointer option
> and other option doesn't work.
>
> 2) 'a option option
>
> For 'a option None becomes 0x0 and Some pointer becomes pointer. But
> what about 'a option option. Do you repeat the process? Then None and
> Some None would both become 0x0 and can't be separated. And if you
> don't repeat the process you break polymorphism (see 1).
>
>
> What you can do is create a new type that behaves like
>
>     type 'a ptr_option = NULL | 'a
>
> but the type would have to be abstract and you would have to have a
> function to convert it into an 'a option for pattern matching like
>
>     match to_option ptr_opt with
>     | None -> ...
>     | Some ptr -> ...
>
> and hope the optimizer eliminates the allocation and boxing.
>
> Doesn't ocaml-ctypes already have such a type?
>
> > > On Tue, Aug 18, 2015 at 2:57 PM, Hendrik Boom <hendrik@topoi.pooq.com>
> > > wrote:
> > >>
> > >> On Tue, Aug 18, 2015 at 01:06:55PM -0400, Kenneth Adam Miller wrote:
> > >> > I was wondering if cases where format control is possible in typing
> > >> > constructs can allow things like restricting the implementation size
> > >> > after
> > >> > compilation of a specific variant type. Say, for instance that I
> wanted
> > >> > to
> > >> > have a malloc implementation instead of returning a Some 'a | None
> type
> > >> > that compiles down to a boxed case of first a word and then the
> > >> > subsequent
> > >> > 'a instance, down to the 'a instance, where in the values of the
> word
> > >> > enum
> > >> > (or tag) are not present in the possibilities of the 'a instance.
> > >> >
> > >> > Maybe it sounds silly, but in really tight loops you want to
> squeeze for
> > >> > efficiency. So I was wondering if maybe the same actual code be used
> > >> > with
> > >> > the same sanity of type checking, but some annotation provided at
> the
> > >> > type
> > >> > declaration to allow such optimization to take place.
> > >>
> > >> Let's see.  OCaml steals a bit to indicate whether a valus is a
> pointer
> > >> or not, right?  Could that bit see duual usage for the option type?
> So
> > >> that if it's an optional pointer type, the bit is left off, and if
> it's
> > >> an optional nonpointer type, it's turned on (and set to point to
> > >> location zero, which the GC couls check for)?
> > >>
> > >> THe proble I see with this is if the 'a is passed to a generic
> function
> > >> where iti isn't statically known where it's a pinter or not.  The
> > >> conpiler will not know whether to test for absence or presence of the
> > >> bit.
> > >>
> > >> -- hendrik
>
> MfG
>         Goswin
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a11c3241eeff0ad051dbdd9b0
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">In the case of 2), that&#39;s interesting because such a t=
ype of Some None is sort of antithetical to describing anything sensical. N=
ot that it&#39;s not pragmatic or doesn&#39;t occur-I&#39;m sure some funct=
ions get combined in ways that stuff like this crops up. But I think of the=
 typing system as being badly exercised if something like this arises-but I=
 really see your point in terms of implementation. Thanks for writing this.=
<div><br></div><div>I&#39;m sure that ctypes would likely be able to answer=
 exactly this problem because it boils down to C. But it was a general ques=
tion about extensions to the typing system.</div></div><div class=3D"gmail_=
extra"><br><div class=3D"gmail_quote">On Thu, Aug 20, 2015 at 5:10 AM, Gosw=
in von Brederlow <span dir=3D"ltr">&lt;<a href=3D"mailto:goswin-v-b@web.de"=
 target=3D"_blank">goswin-v-b@web.de</a>&gt;</span> wrote:<br><blockquote c=
lass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;=
padding-left:1ex"><span class=3D"">On Tue, Aug 18, 2015 at 09:44:04PM +0200=
, Gabriel Scherer wrote:<br>
&gt; We&#39;ve discussed optimisations of (&#39;a option) in the past. Cert=
ainly<br>
&gt; some things could be done, but it&#39;s unclear to me how much value t=
here is in<br>
&gt; optimizing (&#39;a option) specifically: what if, for example, we late=
r<br>
&gt; understand that (&#39;a, exn) result is the more general abstraction t=
hat<br>
&gt; we should have used instead, and rely on it heavily in libraries, will=
<br>
&gt; we de-optimize options and work on optimizing results?<br>
&gt;<br>
&gt; Note that your idea of &quot;either a failure of a value&quot; can be =
achieved,<br>
&gt; in some monomorphic cases (specifically when you know &#39;a and it ha=
s a<br>
&gt; product structure) by using a specific type declaration:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0type my_struct =3D<br>
&gt;=C2=A0 =C2=A0 =C2=A0| None<br>
&gt;=C2=A0 =C2=A0 =C2=A0| Some of int * int array * string<br>
&gt;<br>
&gt; This will be represented as efficiently as the tuple (int * int array<=
br>
&gt; * string), yet it has a default case (or two, or another case with<br>
&gt; exceptions, whatever -- this is more flexible than just options). With=
<br>
&gt; inline records in 4.03 -- not yet released -- you will even be able to=
<br>
&gt; have some of the product structure mutable:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0type my_struct =3D<br>
&gt;=C2=A0 =C2=A0 =C2=A0| None<br>
&gt;=C2=A0 =C2=A0 =C2=A0| Some of { mutable count : int; values : int array=
; name : string }<br>
<br>
</span>Except here you are talking about an already boxed value. The Some<b=
r>
part is encoded in the tag of the box you already have.<br>
<br>
In the case of a pointer you have not box to put the Some tag on.<br>
<span class=3D""><br>
&gt; On Tue, Aug 18, 2015 at 9:01 PM, Kenneth Adam Miller<br>
&gt; &lt;<a href=3D"mailto:kennethadammiller@gmail.com">kennethadammiller@g=
mail.com</a>&gt; wrote:<br>
&gt; &gt; Well, it&#39;s not restricted to pointers - In general I would th=
ink that the<br>
&gt; &gt; type annotation for Some | None would be left alone. I just used =
pointer as<br>
&gt; &gt; an example because pointers exclude a value, 0x0, from the valid =
set. In<br>
&gt; &gt; which case None is encoded as 0x0.<br>
&gt; &gt;<br>
&gt; &gt; Thanks for the bit about polymorphism in the context of what a co=
mpiler<br>
&gt; &gt; would see - clients that do not see the hypothetical additional a=
nnotation<br>
&gt; &gt; for that specific type to allow a format wouldn&#39;t have the au=
gmented<br>
&gt; &gt; operational needs to work on such an instance correctly. Got it!<=
br>
<br>
</span>There are 2 problems:<br>
<br>
1) polymorphism<br>
<br>
A function taking an &#39;a option could get 0, which it would easily<br>
detect as 0, a pointer to some value or a pointer to box taged Some.<br>
But there is no way to separate the last two cases. The pointer<br>
doesn&#39;t even have to point to an ocaml value so dereferencing and<br>
checking if it is a box with Some tag is not an option. And even if<br>
you could any variant type with a boxed constructor will have a tag of<br>
0, same as Some. Having different representation for pointer option<br>
and other option doesn&#39;t work.<br>
<br>
2) &#39;a option option<br>
<br>
For &#39;a option None becomes 0x0 and Some pointer becomes pointer. But<br>
what about &#39;a option option. Do you repeat the process? Then None and<b=
r>
Some None would both become 0x0 and can&#39;t be separated. And if you<br>
don&#39;t repeat the process you break polymorphism (see 1).<br>
<br>
<br>
What you can do is create a new type that behaves like<br>
<br>
=C2=A0 =C2=A0 type &#39;a ptr_option =3D NULL | &#39;a<br>
<br>
but the type would have to be abstract and you would have to have a<br>
function to convert it into an &#39;a option for pattern matching like<br>
<br>
=C2=A0 =C2=A0 match to_option ptr_opt with<br>
=C2=A0 =C2=A0 | None -&gt; ...<br>
=C2=A0 =C2=A0 | Some ptr -&gt; ...<br>
<br>
and hope the optimizer eliminates the allocation and boxing.<br>
<br>
Doesn&#39;t ocaml-ctypes already have such a type?<br>
<div><div class=3D"h5"><br>
&gt; &gt; On Tue, Aug 18, 2015 at 2:57 PM, Hendrik Boom &lt;<a href=3D"mail=
to:hendrik@topoi.pooq.com">hendrik@topoi.pooq.com</a>&gt;<br>
&gt; &gt; wrote:<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; On Tue, Aug 18, 2015 at 01:06:55PM -0400, Kenneth Adam Miller=
 wrote:<br>
&gt; &gt;&gt; &gt; I was wondering if cases where format control is possibl=
e in typing<br>
&gt; &gt;&gt; &gt; constructs can allow things like restricting the impleme=
ntation size<br>
&gt; &gt;&gt; &gt; after<br>
&gt; &gt;&gt; &gt; compilation of a specific variant type. Say, for instanc=
e that I wanted<br>
&gt; &gt;&gt; &gt; to<br>
&gt; &gt;&gt; &gt; have a malloc implementation instead of returning a Some=
 &#39;a | None type<br>
&gt; &gt;&gt; &gt; that compiles down to a boxed case of first a word and t=
hen the<br>
&gt; &gt;&gt; &gt; subsequent<br>
&gt; &gt;&gt; &gt; &#39;a instance, down to the &#39;a instance, where in t=
he values of the word<br>
&gt; &gt;&gt; &gt; enum<br>
&gt; &gt;&gt; &gt; (or tag) are not present in the possibilities of the &#3=
9;a instance.<br>
&gt; &gt;&gt; &gt;<br>
&gt; &gt;&gt; &gt; Maybe it sounds silly, but in really tight loops you wan=
t to squeeze for<br>
&gt; &gt;&gt; &gt; efficiency. So I was wondering if maybe the same actual =
code be used<br>
&gt; &gt;&gt; &gt; with<br>
&gt; &gt;&gt; &gt; the same sanity of type checking, but some annotation pr=
ovided at the<br>
&gt; &gt;&gt; &gt; type<br>
&gt; &gt;&gt; &gt; declaration to allow such optimization to take place.<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; Let&#39;s see.=C2=A0 OCaml steals a bit to indicate whether a=
 valus is a pointer<br>
&gt; &gt;&gt; or not, right?=C2=A0 Could that bit see duual usage for the o=
ption type?=C2=A0 So<br>
&gt; &gt;&gt; that if it&#39;s an optional pointer type, the bit is left of=
f, and if it&#39;s<br>
&gt; &gt;&gt; an optional nonpointer type, it&#39;s turned on (and set to p=
oint to<br>
&gt; &gt;&gt; location zero, which the GC couls check for)?<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; THe proble I see with this is if the &#39;a is passed to a ge=
neric function<br>
&gt; &gt;&gt; where iti isn&#39;t statically known where it&#39;s a pinter =
or not.=C2=A0 The<br>
&gt; &gt;&gt; conpiler will not know whether to test for absence or presenc=
e of the<br>
&gt; &gt;&gt; bit.<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; -- hendrik<br>
<br>
</div></div>MfG<br>
<span class=3D"HOEnZb"><font color=3D"#888888">=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
Goswin<br>
<br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</font></span></blockquote></div><br></div>

--001a11c3241eeff0ad051dbdd9b0--
