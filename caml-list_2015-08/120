Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id AC7E47EEBF
	for <caml-list@sympa.inria.fr>; Tue, 18 Aug 2015 21:59:34 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.223.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.223.175 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.223.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-io0-f175.google.com) identity=helo;
  client-ip=209.85.223.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-io0-f175.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CRAQBVjtNVlK/fVdFdhFgGgx7CYAKBMgdMAQEBAQEBEgEBAQEHCwsJHzCEJAEBBBIRHQEbHQEDDAYFCw0CAiYCAiEBAREBBQEcBhMIGod2AQMSrkeBLz4xi0CBbIJ5iwMKGScNV4UAAQEBAQYBAQEBGAEFDoEUijGCT4FOCWQHgmmBQwWMX4hCin+BbYFKkS+DT4IbEiOBFxeEDjwzgQ6BPgEBAQ
X-IPAS-Result: A0CRAQBVjtNVlK/fVdFdhFgGgx7CYAKBMgdMAQEBAQEBEgEBAQEHCwsJHzCEJAEBBBIRHQEbHQEDDAYFCw0CAiYCAiEBAREBBQEcBhMIGod2AQMSrkeBLz4xi0CBbIJ5iwMKGScNV4UAAQEBAQYBAQEBGAEFDoEUijGCT4FOCWQHgmmBQwWMX4hCin+BbYFKkS+DT4IbEiOBFxeEDjwzgQ6BPgEBAQ
X-IronPort-AV: E=Sophos;i="5.15,704,1432591200"; 
   d="scan'208";a="174000261"
Received: from mail-io0-f175.google.com ([209.85.223.175])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Aug 2015 21:59:33 +0200
Received: by iods203 with SMTP id s203so202752498iod.0
        for <caml-list@inria.fr>; Tue, 18 Aug 2015 12:59:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=eqMhUQ4n03LlMFYsTUJFA8c667xCooCMHkQCFvNSFrs=;
        b=PJwQD7mLPmnm36d2ADnErGWsrg/LARg0dZAYMbqz1ZnolshirWk86yASlV1YwNoaTS
         DLKn8QmuKooionJyD83GfQT8hpWGBVZIX3gWacOFkk8kS9AeAxMxeiQ02Ijze+lmeufU
         dwwQZmZOUxIbFJEltNs9eZ3a15t9sINK/ZnXM0uXM2AdtjX1GCqvuQ0E/ncd2i/t95G5
         pClUhFnDJmd43eQSuK0IHDDR1hoRo2JKGOCHo9UDvoiKaC96Dos6VLqMXfBETrcJH/P8
         ggt+Wo//0ZMZbBl6sMdFegHcmWHPBgu/4BUizS9v7Yhkx0lLVm7yamMmBhGU2pHNQiOt
         oWNA==
X-Received: by 10.107.19.94 with SMTP id b91mr8336489ioj.144.1439927972402;
 Tue, 18 Aug 2015 12:59:32 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.79.68.132 with HTTP; Tue, 18 Aug 2015 12:58:52 -0700 (PDT)
In-Reply-To: <CAK7rcp_JHYATeJz3ZX7FUvJuAfFSd1W-hRnNQzZNHOAwgRJPCg@mail.gmail.com>
References: <CAK7rcp_DfDdW94HWhuPsnKE-eg3ncvLTDfk7vcg9R+toKMkZhg@mail.gmail.com>
 <20150818185751.GC650@topoi.pooq.com> <CAK7rcp_zLJPgjb-5JpDdWh5BtJGnsomGvLSaLmMRhwCG1ZbnNA@mail.gmail.com>
 <CAPFanBHjX=VR58EAdzqHQ3ObrwofUmwOf4W8s5e4K3R46HVmCg@mail.gmail.com> <CAK7rcp_JHYATeJz3ZX7FUvJuAfFSd1W-hRnNQzZNHOAwgRJPCg@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 18 Aug 2015 21:58:52 +0200
Message-ID: <CAPFanBEMG0pnE8t0ENeof_Jw58cf6To4MmnbhHVbxZmJ9PjJ7A@mail.gmail.com>
To: Kenneth Adam Miller <kennethadammiller@gmail.com>
Cc: Hendrik Boom <hendrik@topoi.pooq.com>, caml users <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] Type Encoding Format Control

My point is that in this case (the information you want to nullify is
a product type), you don't need to define a magic null value or try to
avoid that, because adding an extra None constructor will not change
the in-memory representation of the other case (it will not make it
less compact than the original tuple). Accessing the elements of the
tuple will be done by pattern-matching, which implies an extra check
(just like checking that a value is not NULL), but in fact you can use
GADTs to make even that cost go away when you statically know in which
case you are.

On Tue, Aug 18, 2015 at 9:55 PM, Kenneth Adam Miller
<kennethadammiller@gmail.com> wrote:
> I wouldn't know future route in regards to the question about preferring
> exceptions instead later. I wouldn't say go back and undo anything
> necessarily, my idea about how this would be implemented would be an extra
> annotation that allows the compiler to see that there are potential value
> instances of such a type that allow excision of the tag.
>
> In the case of my_struct, you would have instead maybe some extension to the
> vernacular like:
>
> type my_struct =
>   | None
>   | Some of int * int array * string where_instance 0 * [||] * "" is None
>
> In this case, you could continue your annotation of the type my_struct with
> more expressive capabilities for situations where there is more than one
> hole that represents None.
>
> I don't really believe this constitutes so much value in a language that's
> already fast. It would be line noise in almost all applications, and users
> might not have incentives to draw from such a language feature unless they
> were pushing for improvements in some very tight loop. It was just a
> curiosity.
>
> On Tue, Aug 18, 2015 at 3:44 PM, Gabriel Scherer <gabriel.scherer@gmail.com>
> wrote:
>>
>> We've discussed optimisations of ('a option) in the past. Certainly
>> some things could be done, but it's unclear to me how much value there is
>> in
>> optimizing ('a option) specifically: what if, for example, we later
>> understand that ('a, exn) result is the more general abstraction that
>> we should have used instead, and rely on it heavily in libraries, will
>> we de-optimize options and work on optimizing results?
>>
>> Note that your idea of "either a failure of a value" can be achieved,
>> in some monomorphic cases (specifically when you know 'a and it has a
>> product structure) by using a specific type declaration:
>>
>>   type my_struct =
>>     | None
>>     | Some of int * int array * string
>>
>> This will be represented as efficiently as the tuple (int * int array
>> * string), yet it has a default case (or two, or another case with
>> exceptions, whatever -- this is more flexible than just options). With
>> inline records in 4.03 -- not yet released -- you will even be able to
>> have some of the product structure mutable:
>>
>>   type my_struct =
>>     | None
>>     | Some of { mutable count : int; values : int array; name : string }
>>
>> On Tue, Aug 18, 2015 at 9:01 PM, Kenneth Adam Miller
>> <kennethadammiller@gmail.com> wrote:
>> > Well, it's not restricted to pointers - In general I would think that
>> > the
>> > type annotation for Some | None would be left alone. I just used pointer
>> > as
>> > an example because pointers exclude a value, 0x0, from the valid set. In
>> > which case None is encoded as 0x0.
>> >
>> > Thanks for the bit about polymorphism in the context of what a compiler
>> > would see - clients that do not see the hypothetical additional
>> > annotation
>> > for that specific type to allow a format wouldn't have the augmented
>> > operational needs to work on such an instance correctly. Got it!
>> >
>> > On Tue, Aug 18, 2015 at 2:57 PM, Hendrik Boom <hendrik@topoi.pooq.com>
>> > wrote:
>> >>
>> >> On Tue, Aug 18, 2015 at 01:06:55PM -0400, Kenneth Adam Miller wrote:
>> >> > I was wondering if cases where format control is possible in typing
>> >> > constructs can allow things like restricting the implementation size
>> >> > after
>> >> > compilation of a specific variant type. Say, for instance that I
>> >> > wanted
>> >> > to
>> >> > have a malloc implementation instead of returning a Some 'a | None
>> >> > type
>> >> > that compiles down to a boxed case of first a word and then the
>> >> > subsequent
>> >> > 'a instance, down to the 'a instance, where in the values of the word
>> >> > enum
>> >> > (or tag) are not present in the possibilities of the 'a instance.
>> >> >
>> >> > Maybe it sounds silly, but in really tight loops you want to squeeze
>> >> > for
>> >> > efficiency. So I was wondering if maybe the same actual code be used
>> >> > with
>> >> > the same sanity of type checking, but some annotation provided at the
>> >> > type
>> >> > declaration to allow such optimization to take place.
>> >>
>> >> Let's see.  OCaml steals a bit to indicate whether a valus is a pointer
>> >> or not, right?  Could that bit see duual usage for the option type?  So
>> >> that if it's an optional pointer type, the bit is left off, and if it's
>> >> an optional nonpointer type, it's turned on (and set to point to
>> >> location zero, which the GC couls check for)?
>> >>
>> >> THe proble I see with this is if the 'a is passed to a generic function
>> >> where iti isn't statically known where it's a pinter or not.  The
>> >> conpiler will not know whether to test for absence or presence of the
>> >> bit.
>> >>
>> >> -- hendrik
>> >
>> >
>
>
