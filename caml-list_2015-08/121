Return-Path: <anthony.tavener@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 171C67EEBF
	for <caml-list@sympa.inria.fr>; Wed, 19 Aug 2015 00:26:02 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  anthony.tavener@gmail.com) identity=pra;
  client-ip=209.85.212.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  anthony.tavener@gmail.com designates 209.85.212.180 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.212.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wi0-f180.google.com) identity=helo;
  client-ip=209.85.212.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="postmaster@mail-wi0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CJAgBWsNNVlLTUVdFdg29aDwaDH6oqkAuCK4V7AoExB0wBAQEBAQESAQEBAQcLCwkfMIQjAQEBAwESER0BGxACCAMBAwELBgULDQ0dAgIhAQERAQUBChIGEwgKCAEHh3YBAwoIDa4RgS8+MYtAgWyCeYsDChknAwpXhQABAQEBAQUBAQEBAQEBFQEFDotFgk+CNwQHgmmBQwWFbAyHXIRAgw6FBIV7gW2CEJBphWoSI4EXEQaCHRyBch8zgkwBAQE
X-IPAS-Result: A0CJAgBWsNNVlLTUVdFdg29aDwaDH6oqkAuCK4V7AoExB0wBAQEBAQESAQEBAQcLCwkfMIQjAQEBAwESER0BGxACCAMBAwELBgULDQ0dAgIhAQERAQUBChIGEwgKCAEHh3YBAwoIDa4RgS8+MYtAgWyCeYsDChknAwpXhQABAQEBAQUBAQEBAQEBFQEFDotFgk+CNwQHgmmBQwWFbAyHXIRAgw6FBIV7gW2CEJBphWoSI4EXEQaCHRyBch8zgkwBAQE
X-IronPort-AV: E=Sophos;i="5.15,705,1432591200"; 
   d="scan'208";a="174009066"
Received: from mail-wi0-f180.google.com ([209.85.212.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 19 Aug 2015 00:26:01 +0200
Received: by wicja10 with SMTP id ja10so105721540wic.1
        for <caml-list@inria.fr>; Tue, 18 Aug 2015 15:26:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=BqSN2k7uGqbtTcssWChvreR0EpMM40+kPi8u+koUUiQ=;
        b=ay9bGSmgp2yCHCZOFt7nKho+jb5IH+OyDCP0W3/kvWzO04gDwLrkhe+xed2SQnqDP6
         UQTanPWm16GGGIKyVuh9VEhd8ewiEoG7EIalZ4/lRna3LUioxd77VEXpPHh8mchemPcf
         qlXeVx1uQy7N4kMHO1gj3Ap5xiGuZSIxDREp1P7VRARP9zoYS+qgapb368rohF1mkP6I
         7SI1SrTLsgQTfR02j9DmmBEumU/c4UOWMlKJGdHa4IWe0V0A8bwONlgOQ6qE5L07EFhx
         TqD5Fn/kXuk7GJAzgibQAtrAVVBM4VXXnrYHbqzEd686aRKuoir5XZbbD3W59iBsvXjj
         zWMQ==
MIME-Version: 1.0
X-Received: by 10.180.39.201 with SMTP id r9mr3503435wik.92.1439936760682;
 Tue, 18 Aug 2015 15:26:00 -0700 (PDT)
Received: by 10.28.93.4 with HTTP; Tue, 18 Aug 2015 15:26:00 -0700 (PDT)
In-Reply-To: <CAPFanBGTgsQKm0kSimaAK6nXVrBb5wKV1Awh0KsqpRL6KQAuhA@mail.gmail.com>
References: <BF0D69096EFA410695EC3AFB2CEEDABD@erratique.ch>
	<B52F2D68184048B39F261A5A96246437@erratique.ch>
	<55BF75F6.1040006@bioquant.uni-heidelberg.de>
	<8E1A640CE3374EB492981ADB0A2DA5C6@erratique.ch>
	<20150804092633.GC5689@frosties>
	<5C2023F4AF0549F58F3E4C9A6F8ABE84@erratique.ch>
	<CAJgjwegcaKqohVE0H=vO_8d+qY6rr1G8cLP38a+Vf5y8dmtM=A@mail.gmail.com>
	<CALdWJ+zsKtXnE9zbVTSyuRV8+jwRVP9Ahp202ncOYj7JUHcKpQ@mail.gmail.com>
	<20150814105551.GD31364@frosties>
	<55CDD0F2.1090200@zoho.com>
	<20150818111134.GA11154@frosties>
	<E51C5B015DBD1348A1D85763337FB6D9E9DCF532@Remus.metastack.local>
	<CAPFanBGTgsQKm0kSimaAK6nXVrBb5wKV1Awh0KsqpRL6KQAuhA@mail.gmail.com>
Date: Tue, 18 Aug 2015 16:26:00 -0600
Message-ID: <CAN=ouMQ-=dr7FyvPTEcF0wgBDsF5xyOxBb0roerckHCs0f0WnQ@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c24eb41e9f4d051d9d673f
Subject: Re: [Caml-list] destructive local opens

--001a11c24eb41e9f4d051d9d673f
Content-Type: text/plain; charset=UTF-8

(TL;DR: I commonly want to specify paths -uniquely- for identifiers in local
scopes (function, module) which have no means to do this.)

As I run into this yet again, moments ago...

I do often want the ability to be clear that something is not to be shadowed
by the opened scope... to specify it's from the local (usually function)
scope.
Part of the reason is for code clarity, but also to safeguard against
possible
later changes in the *opened* module (introducing the same identifier).

  let init flags =
    M.(init (flag1 + flag2 + flags)) (* flags is intended to be 'local',
but it could be shadowed by a value in M *)

Where M provides 'init', 'flag1', 'flag2', and '+', but 'flags' is in the
local (function) context. When I do this I try to think of a way to make it
self evident that 'flags' is not from M, but there is no way. Aside from
bringing it outside the local-open, but then it's more difficult to build
an expression.

Vimscript might be one of the worst languages to use as a reference, but
this
issue does bring to mind the scope prefixes...

  let init flags =
    M.(init (flag1 + flag2 + l:flags)) (* illustrative -- not a proposal! *)

I sometimes consider using naming conventions, but I don't want to
explicitly
make function arguments something like l_flags, l_point, etc. That would be
a
horrible widespread style, and doesn't work nicely with named arguments.
Plus, changing names to do this seems wrong -- it's at the access site where
you want to disambiguate, which always leads me to think some sigil or
prefix.

There was an earlier sidetrack which went with ^ as an "unopen" prefix. At
first,
my interest was piqued. Naturally, the issue of recursive unopen came up...

In response, Gabriel wisely remarked:

 "It is remarkable that programming languages have avoided introducing
  explicit weakening (the popping of a symbol out of scope) for now, and
  I think it is a property that should be preserved. We're not yet ready
  to go there."

Good advice when the thread was spinning out of control and probably not
going
to settle on anything realistic or favorable. Even though there might be
merit
in pursuing fine-grained scope-popping as its own topic.

I think there is a simpler gain to be had from the idea of being able to
specify
the path of the current context. "Current context" would need to be
something sensible, and I'm not sure yet what would be best, as there is a
related issue I encounter commonly:

A way to specify the path of the current module.

There is no way to do this, right? If I'm in "a.ml", I can't refer to
A.identifier, and there is no other way to uniquely specify the path to what
*will become* A.identifier? As the bare "identifier" can be shadowed by any
modules opened afterward. Unlike the general "scope-popping", there is also
a common language feature like this: self or this.

I usually want to be explicit with module paths, especially if I am using an
"identifier" which could reasonably be expected to exist now or later in the
other modules being used. I do keep opens to a minimum, but often an entire
expression will be in a local open (to bring in operators), and there,
again... I would like that clarity, and safeguard against changes which
might
happen in the other modules, leading to suprises or need to change *this*
module for no good reason other than a naming conflict which ideally can be
prepared against.

Has there been any discussion about referring to the local module? My guess
is
that it might be a mild enough problem to not warrant any proposed
solutions.
But if there are ideas, maybe the same thing or something similar can also
apply to this problem of "escaping" a local open? They are very similar, but
one is module-scope, while I think the other would be function-scope (though
module-scope might imply the "right thing" anyway)... I'm not certain, as
haven't been keeping track of the cases I encounter, and others might have
different use-cases.


On Tue, Aug 18, 2015 at 7:00 AM, Gabriel Scherer <gabriel.scherer@gmail.com>
wrote:

> Note that the dual feature does not exist for variant constructors,
> because it is easy to define only on the constructor at the toplevel of the
> pattern, and nested patterns get us in muddy waters.
>
> On Tue, Aug 18, 2015 at 2:52 PM, David Allsopp <dra-news@metastack.com>
> wrote:
>
>> Goswin von Brederlow wrote:
>> > On Fri, Aug 14, 2015 at 01:28:50PM +0200, Drup wrote:
>> > >
>> > > >You can't qualifylocal values or values of the surrounding module so
>> > > >that is a no go.
>> > > >
>> > > >I also often use local open to access records, as in:
>> > > >
>> > > >let r = M.({ x = 1; y; z = depth; }) in
>> > >
>> > > You can avoid the local open altogether and write it like that:
>> > >
>> > >     let r = {M. x = 1; y; z = depth } in
>> > >
>> > > It's even shorter.
>> >
>> > That only works because newer ocaml disambiguises (is that a word?)
>> record
>> > So it's implicitly using M.y = y and M.z = depth.
>> > labels when it determines the record type from the first label, right?
>>
>> Only since you ask: "disambiguates" :o) That said, it's quite common to
>> see words like "disambiguises" being invented by Americans!
>>
>> But this isn't related to the disambiguation features of OCaml 4.01+.
>> Those allow you to write things like:
>>
>> type t = {x : int}
>> type u = {x : int; y : string}
>>
>> let foo = {x = 1}
>> let bar = {x = 42; y = ""}
>>
>> This is actually a much older notation added in OCaml 3.08. Prior to
>> that, if you hadn't opened a module you had to qualify each label:
>>
>> {M.x = 1; M.y = y; M.z = depth}
>>
>> but this was "silly", since it's not possible to use non-equivalent
>> module paths for labels, so OCaml 3.08 changed it so that you only needed
>> to put the module path on one label (and it doesn't have to be the first
>> one, it's just a bit weird to put it in the middle!).
>>
>> OCaml 3.12 added, amongst other record-related goodies, the shorthand {y}
>> to mean {y = y}. So while you can use local open as you're using it, you've
>> been able to do it as a totally unambiguous language feature for quite some
>> time.
>>
>>
>> David
>>
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>
>

--001a11c24eb41e9f4d051d9d673f
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>(TL;DR: I commonly want to specify paths -uniquely- f=
or identifiers in local</div><div>scopes (function, module) which have no m=
eans to do this.)</div><div><br></div><div>As I run into this yet again, mo=
ments ago...</div><div><br></div><div>I do often want the ability to be cle=
ar that something is not to be shadowed</div><div>by the opened scope... to=
 specify it&#39;s from the local (usually function) scope.</div><div>Part o=
f the reason is for code clarity, but also to safeguard against possible</d=
iv><div>later changes in the *opened* module (introducing the same identifi=
er).</div><div><br></div><div>=C2=A0 let init flags =3D</div><div>=C2=A0 =
=C2=A0 M.(init (flag1 + flag2 + flags)) (* flags is intended to be &#39;loc=
al&#39;, but it could be shadowed by a value in M *)</div><div><br></div><d=
iv>Where M provides &#39;init&#39;, &#39;flag1&#39;, &#39;flag2&#39;, and &=
#39;+&#39;, but &#39;flags&#39; is in the</div><div>local (function) contex=
t. When I do this I try to think of a way to make it</div><div>self evident=
 that &#39;flags&#39; is not from M, but there is no way. Aside from</div><=
div>bringing it outside the local-open, but then it&#39;s more difficult to=
 build</div><div>an expression.</div><div><br></div><div>Vimscript might be=
 one of the worst languages to use as a reference, but this</div><div>issue=
 does bring to mind the scope prefixes...</div><div><br></div><div>=C2=A0 l=
et init flags =3D</div><div>=C2=A0 =C2=A0 M.(init (flag1 + flag2 + l:flags)=
) (* illustrative -- not a proposal! *)</div><div><br></div><div>I sometime=
s consider using naming conventions, but I don&#39;t want to explicitly</di=
v><div>make function arguments something like l_flags, l_point, etc. That w=
ould be a</div><div>horrible widespread style, and doesn&#39;t work nicely =
with named arguments.</div><div>Plus, changing names to do this seems wrong=
 -- it&#39;s at the access site where</div><div>you want to disambiguate, w=
hich always leads me to think some sigil or prefix.</div><div><br></div><di=
v>There was an earlier sidetrack which went with ^ as an &quot;unopen&quot;=
 prefix. At first,</div><div>my interest was piqued. Naturally, the issue o=
f recursive unopen came up...</div><div><br></div><div>In response, Gabriel=
 wisely remarked:</div><div><br></div><div>=C2=A0&quot;It is remarkable tha=
t programming languages have avoided introducing</div><div>=C2=A0 explicit =
weakening (the popping of a symbol out of scope) for now, and</div><div>=C2=
=A0 I think it is a property that should be preserved. We&#39;re not yet re=
ady</div><div>=C2=A0 to go there.&quot;</div><div><br></div><div>Good advic=
e when the thread was spinning out of control and probably not going</div><=
div>to settle on anything realistic or favorable. Even though there might b=
e merit</div><div>in pursuing fine-grained scope-popping as its own topic.<=
/div><div><br></div><div>I think there is a simpler gain to be had from the=
 idea of being able to specify</div><div>the path of the current context. &=
quot;Current context&quot; would need to be</div><div>something sensible, a=
nd I&#39;m not sure yet what would be best, as there is a</div><div>related=
 issue I encounter commonly:</div><div><br></div><div>A way to specify the =
path of the current module.</div><div><br></div><div>There is no way to do =
this, right? If I&#39;m in &quot;<a href=3D"http://a.ml">a.ml</a>&quot;, I =
can&#39;t refer to</div><div>A.identifier, and there is no other way to uni=
quely specify the path to what</div><div>*will become* A.identifier? As the=
 bare &quot;identifier&quot; can be shadowed by any</div><div>modules opene=
d afterward. Unlike the general &quot;scope-popping&quot;, there is also</d=
iv><div>a common language feature like this: self or this.</div><div><br></=
div><div>I usually want to be explicit with module paths, especially if I a=
m using an</div><div>&quot;identifier&quot; which could reasonably be expec=
ted to exist now or later in the</div><div>other modules being used. I do k=
eep opens to a minimum, but often an entire</div><div>expression will be in=
 a local open (to bring in operators), and there,</div><div>again... I woul=
d like that clarity, and safeguard against changes which might</div><div>ha=
ppen in the other modules, leading to suprises or need to change *this*</di=
v><div>module for no good reason other than a naming conflict which ideally=
 can be</div><div>prepared against.</div><div><br></div><div>Has there been=
 any discussion about referring to the local module? My guess is</div><div>=
that it might be a mild enough problem to not warrant any proposed solution=
s.</div><div>But if there are ideas, maybe the same thing or something simi=
lar can also</div><div>apply to this problem of &quot;escaping&quot; a loca=
l open? They are very similar, but</div><div>one is module-scope, while I t=
hink the other would be function-scope (though</div><div>module-scope might=
 imply the &quot;right thing&quot; anyway)... I&#39;m not certain, as</div>=
<div>haven&#39;t been keeping track of the cases I encounter, and others mi=
ght have</div><div>different use-cases.</div><div><br></div></div><div clas=
s=3D"gmail_extra"><br><div class=3D"gmail_quote">On Tue, Aug 18, 2015 at 7:=
00 AM, Gabriel Scherer <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.sche=
rer@gmail.com" target=3D"_blank">gabriel.scherer@gmail.com</a>&gt;</span> w=
rote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Note that the dual=
 feature does not exist for variant constructors, because it is easy to def=
ine only on the constructor at the toplevel of the pattern, and nested patt=
erns get us in muddy waters.<br></div><div class=3D"HOEnZb"><div class=3D"h=
5"><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Tue, Aug 18=
, 2015 at 2:52 PM, David Allsopp <span dir=3D"ltr">&lt;<a href=3D"mailto:dr=
a-news@metastack.com" target=3D"_blank">dra-news@metastack.com</a>&gt;</spa=
n> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;b=
order-left:1px #ccc solid;padding-left:1ex"><span>Goswin von Brederlow wrot=
e:<br>
&gt; On Fri, Aug 14, 2015 at 01:28:50PM +0200, Drup wrote:<br>
&gt; &gt;<br>
&gt; &gt; &gt;You can&#39;t qualifylocal values or values of the surroundin=
g module so<br>
&gt; &gt; &gt;that is a no go.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;I also often use local open to access records, as in:<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;let r =3D M.({ x =3D 1; y; z =3D depth; }) in<br>
&gt; &gt;<br>
&gt; &gt; You can avoid the local open altogether and write it like that:<b=
r>
&gt; &gt;<br>
&gt; &gt;=C2=A0 =C2=A0 =C2=A0let r =3D {M. x =3D 1; y; z =3D depth } in<br>
&gt; &gt;<br>
&gt; &gt; It&#39;s even shorter.<br>
&gt;<br>
&gt; That only works because newer ocaml disambiguises (is that a word?) re=
cord<br>
</span><span>&gt; So it&#39;s implicitly using M.y =3D y and M.z =3D depth.=
<br>
&gt; labels when it determines the record type from the first label, right?=
<br>
<br>
</span>Only since you ask: &quot;disambiguates&quot; :o) That said, it&#39;=
s quite common to see words like &quot;disambiguises&quot; being invented b=
y Americans!<br>
<br>
But this isn&#39;t related to the disambiguation features of OCaml 4.01+. T=
hose allow you to write things like:<br>
<br>
type t =3D {x : int}<br>
type u =3D {x : int; y : string}<br>
<br>
let foo =3D {x =3D 1}<br>
let bar =3D {x =3D 42; y =3D &quot;&quot;}<br>
<br>
This is actually a much older notation added in OCaml 3.08. Prior to that, =
if you hadn&#39;t opened a module you had to qualify each label:<br>
<br>
{M.x =3D 1; M.y =3D y; M.z =3D depth}<br>
<br>
but this was &quot;silly&quot;, since it&#39;s not possible to use non-equi=
valent module paths for labels, so OCaml 3.08 changed it so that you only n=
eeded to put the module path on one label (and it doesn&#39;t have to be th=
e first one, it&#39;s just a bit weird to put it in the middle!).<br>
<br>
OCaml 3.12 added, amongst other record-related goodies, the shorthand {y} t=
o mean {y =3D y}. So while you can use local open as you&#39;re using it, y=
ou&#39;ve been able to do it as a totally unambiguous language feature for =
quite some time.<br>
<span><font color=3D"#888888"><br>
<br>
David<br>
</font></span><div><div><br>
<br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a></div></div></b=
lockquote></div><br></div>
</div></div></blockquote></div><br></div>

--001a11c24eb41e9f4d051d9d673f--
