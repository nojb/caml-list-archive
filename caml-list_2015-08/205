Return-Path: <hakuch@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C1BCC7F168
	for <caml-list@sympa.inria.fr>; Thu, 27 Aug 2015 18:01:10 +0200 (CEST)
IronPort-PHdr: 9a23:U4YOvxJM52zAvRABmdmcpTZWNBhigK39O0sv0rFitYgVK/zxwZ3uMQTl6Ol3ixeRBMOAu6kC1bad4v2ocFdDyKjCmUhKSIZLWR4BhJdetC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TWM5DIfUi/yKRBybrysXNWC1ILpi6vjptX6WEZhunmUWftKNhK4rAHc5IE9oLBJDeIP8CbPuWZCYO9MxGlldhq5lhf44dqsrtY4q3wD89pozcNLUL37cqIkVvQYSW1+ayFm0vb2rgHORhej4X4VU2Ne0kYZQluN0Bavb57rtS2yk+t7wyqLdZnnSLEyQjezx6ViThLzlD0KOiJ/+2bS3J9elqVe9TCsvAdyi67daoyPcdljdaPUZ8gZVCIVXMtKTCFpAoq2YpEMEuEBNPxDrJi7rFwL+0jtTTKwDf/in2cbzkT92rc3hqF8SAw=
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=hakuch@gmail.com; spf=Pass smtp.mailfrom=hakuch@gmail.com; spf=None smtp.helo=postmaster@mail-qg0-f44.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  hakuch@gmail.com) identity=pra; client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="hakuch@gmail.com";
  x-sender="hakuch@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  hakuch@gmail.com designates 209.85.192.44 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="hakuch@gmail.com";
  x-sender="hakuch@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f44.google.com) identity=helo;
  client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="hakuch@gmail.com";
  x-sender="postmaster@mail-qg0-f44.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CFBgDlMt9VlCzAVdFVCYNvLAE8BoMdgQepBJAfgiyFe4EvBzwQAQEBAQEBAQEQAQEBAQcLCwkfMIIdggYBAQEDARIRHQEtCwEDAQsBBQMCCwMKDR0CAiEBEgEFAQoSBhMSAgcHh3cDCggNlWCPP4EvPjGLQIRlikwnAwqFFwsBAQEYAQUOhFKFfoEDgk+BUw1YgnSBQwWFdAyPAD2FBoYAgW2CEJEVhW8SI4EXEQZJgVUcgXAiM4JNAQEB
X-IPAS-Result: A0CFBgDlMt9VlCzAVdFVCYNvLAE8BoMdgQepBJAfgiyFe4EvBzwQAQEBAQEBAQEQAQEBAQcLCwkfMIIdggYBAQEDARIRHQEtCwEDAQsBBQMCCwMKDR0CAiEBEgEFAQoSBhMSAgcHh3cDCggNlWCPP4EvPjGLQIRlikwnAwqFFwsBAQEYAQUOhFKFfoEDgk+BUw1YgnSBQwWFdAyPAD2FBoYAgW2CEJEVhW8SI4EXEQZJgVUcgXAiM4JNAQEB
X-IronPort-AV: E=Sophos;i="5.17,422,1437429600"; 
   d="scan'208";a="143989091"
Received: from mail-qg0-f44.google.com ([209.85.192.44])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 27 Aug 2015 18:01:08 +0200
Received: by qgeh99 with SMTP id h99so15183065qge.0
        for <caml-list@inria.fr>; Thu, 27 Aug 2015 09:01:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:from:date:message-id
         :subject:to:cc:content-type;
        bh=QK32SoyX87oG1u7L1VGpAk2wsXv11pg553E/xCaYWbY=;
        b=nbuCbdt9SDpjt1Rgg6NXYF8sWpUnLYebMsyJrCbKz+5lFLkTt1ag+QOIypSo2G704A
         EmrNk+UxvKZuVyqoBOa532zocrpjV97GnOj/Gy3Z38Ghb5h7susBo1DJaeiPblrkuoWN
         QhYAfBmiUsk+TzD01qAqFr2946lk4Gbgx3jJ/pfTW5QB2E+ajdVWle2gXtpIeLTg5hku
         PRBX0lOyn43viEZyyH5mUZ/UssjDnvTVcILf7Cj4GELPVbmE6HNr2UKHAZ0wpDb9X6I6
         bmvfZ4wZTII4driUXFGzXf7SsRVPjdOhzysF/F+eZIZpMDFF5O/An9+nFfx5JNVW+5W5
         +S5A==
X-Received: by 10.140.233.210 with SMTP id e201mr8280233qhc.88.1440691267774;
 Thu, 27 Aug 2015 09:01:07 -0700 (PDT)
MIME-Version: 1.0
Sender: hakuch@gmail.com
Received: by 10.55.21.141 with HTTP; Thu, 27 Aug 2015 09:00:48 -0700 (PDT)
In-Reply-To: <CACLX4jT-WNy8T9QTdVqE9Ryu_bNPjj1T1qenOJX7-RxFVFJYpQ@mail.gmail.com>
References: <1C02B1E2-D17D-4008-998E-B17048C62DFA@gmail.com> <CACLX4jT-WNy8T9QTdVqE9Ryu_bNPjj1T1qenOJX7-RxFVFJYpQ@mail.gmail.com>
From: Jesse Haber-Kucharsky <jesse@haberkucharsky.com>
Date: Thu, 27 Aug 2015 12:00:48 -0400
X-Google-Sender-Auth: 8SCI3OSkFE7E61Tzi2Meuwpyy_4
Message-ID: <CA+p0s_cQQLVeXVsUyGV44WxNKGKw33DCo2u6ZEJEk7VT_5js=w@mail.gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: Hongbo Zhang <bobzhang1988@gmail.com>, "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a113545203f4680051e4d13c5
Subject: Re: [Caml-list] We need a rich standard library distributed with
 OCaml, really

--001a113545203f4680051e4d13c5
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

To offer the perspective of a relative outsider who has meekly decided to
pipe in:

A standard library with a variety of general-purpose "building block" of
functionality is invaluable. I feel it's missing in OCaml.

Here is some important functionality that I'd like to see based on my own
experience writing a small-to-moderately sized OCaml program.

- Modules for standard types like `Int` and `Float` as previously mentioned
- More standard definitions like `compose`, `const`, `identity`, etc (also
as previously mentioned)
- Comprehensive string and regular expression handling (UTF support can be
relegated to an endorsed third party package)
- More helper functions in the `List` and `Option` modules
- A standard general purpose lazy list (stream). I was able to implement
this comprehensively in about 300 lines, and its enormously useful. It's
absence means that everyone will write their own, or that there will be
hundreds in opam
- More immutable data structures like queues, heaps, stacks, etc
- A standard means of concurrency. Lwt is great, but is almost its own
standard library at this point, and there's still a split between it and
Async.
- Better support for error-handling-by-value with `either` and `option`
through helper functions
- The ppx_deriving package reduces a TONNE of boilerplate for making
defining ordering on data for instance. It should be a standard extension
(or something like it)
- Better documentation/endorsement of build tools. It's possible to get
pretty far with ocamlbuild, _tags, and a simple Makefile, but figuring out
how to get there was not exactly easy
- Better interfaces to the file system with more structured error handling
on failure (`Sys_error` was not the nicest thing to work with).
- Less reliance on exceptions for non-exceptional situations and
retrofitting "pure" functions like `hd` with `option` or `either` result
types.
- Less duplication and or more aggressive deprecation. It's not clear to me
why there should be both "Foo" and "FooLabels" modules, for instance. I
also hear that some modules in the standard library are probably best
avoided.

Finally, about the governance of such a library:

While libraries like Core and and Batteries are undeniably useful, I found
myself somewhat discouraged in practice:

- Batteries has relatively low adoption and I think it does too much
- Core is driven by a private organization. In practise, I've found the
(lack of) documentation to be a major blocker, and I'd feel better about
using it if it was truly community "owned" (or if there was a non-profit
spin-off to support and own it like the F# foundation, for instance).

Best,
--
Jesse


On Thu, Aug 27, 2015 at 10:17 AM, Yaron Minsky <yminsky@janestreet.com>
wrote:

> The core OCaml team is small, and having them focused on building a
> great compiler rather than on building a rich stdlib seems right to
> me.  The improvements in packaging I think make the question of
> whether it's distributed with the compiler mostly a moot issue, I
> think.
>
> On the topic of Core: The issue of binary size is real.  It will get
> somewhat better when we drop packed modules from the public release,
> which should come in the next few months (support for it internally is
> mostly in place.)  That said the module-level dependency tracking is
> by its nature coarse, so binaries using Core (or the more portable
> Core_kernel) are still going to be relatively large.
>
> That said, I think I'd rather have the compiler folk work on improving
> dead-code elimination than integrating and maintaining a standard
> library.
>
> As to openness: we publish all changes on github, have a mailing list,
> and will accept pull requests; but it's true that the development of
> Core is focused within Jane Street, and that is unlikely to change.
>
> y
>
> On Wed, Aug 26, 2015 at 8:52 PM, Hongbo Zhang <bobzhang1988@gmail.com>
> wrote:
> > Dear OCaml developers,
> >     I would like to spend one hour in writing down my experience that
> why I
> > had to write some small utilities again and again, since this happened =
so
> > many times that I believe you might come across such issues before.
> >     I am doing some compiler hacking tonight, I needed a utility functi=
on
> > =E2=80=9CString.split=E2=80=9D which split a string into a list of stri=
ngs by
> whitespace, it
> > is just one liner if you use str library. However, since I am doing some
> low
> > level stuff, I would try to avoid such big dependency, and I am pretty
> sure
> > that I have ever written it  for at least three times, I just hoped that
> I
> > could get it done quickly, so I am looking into batteries that if I can
> > steal some code, I have to copy some code instead of depend on batterie=
s,
> > batteries is too big for my projects. `BatString.nsplit` seems to fit f=
or
> > what I needed, I copied the definition of `BatString.nsplit` into REPL,
> no
> > luck, it depends on some previously defined functions, then I copied the
> > whole module `BatString` into REPL, still no luck, it depended on anoth=
er
> > module `BatReturn`, then I stopped here, it=E2=80=99s time to write my =
own ad-hoc
> > thrown-away `String.split` function again.
> >    OCaml is my favorite programming language, and I am very productive =
at
> > it, however, I was annoyed by such things from time to time. We do have
> four
> > *standard libraries* alternatives: batteries, core, extlib and
> > ocaml-containers. In my opinion, none of them matches the beauty of the
> > OCaml language itself and probably will never catch up if we don=E2=80=
=99t do
> > anything.
> >     Note that I don=E2=80=99t want to be offensive to any of these libr=
aries,
> just
> > my personal feedback that why I think it is not a good standard library,
> I
> > appreciated a lot to people who contribute their precious time in
> > maintaining these libraries, better than nothing : )
> >     - Batteries(extlib)
> >       It=E2=80=99s big with dependencies between different modules (OCa=
ml does
> not
> > have a good story in dead code elimination), some of its modules are of
> low
> > quality, for example, batEnum is used everywhere while its
> implementation is
> > buggy. batIO makes things even worse since it is not compatible with
> > standard library, some type signatures mismatched IIRC.
> >     - ocaml-containers
> >       Mostly one man=E2=80=99s project
> >     - core
> >       I believe core has high quality, however, it suffers the same
> problem
> > as batteries, a big dependency. There is a blocking issue, its
> development
> > process is opaque, for an open source community, I would prefer a
> standard
> > library developed in an open environment.
> >     I am not expecting that we could have a  standard library as rich as
> > python, but for some utilities, I do believe that shipped with standard
> > library or officially supported is the best solution.
> >    Thanks =E2=80=94 Hongbo
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a113545203f4680051e4d13c5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">To offer the perspective of a relative outsider who has me=
ekly decided to pipe in:<div><br></div><div>A standard library with a varie=
ty of general-purpose &quot;building block&quot; of functionality is invalu=
able. I feel it&#39;s missing in OCaml.</div><div><br></div><div>Here is so=
me important functionality that I&#39;d like to see based on my own experie=
nce writing a small-to-moderately sized OCaml program.</div><div><br></div>=
<div>- Modules for standard types like `Int` and `Float` as previously ment=
ioned</div><div>- More standard definitions like `compose`, `const`, `ident=
ity`, etc (also as previously mentioned)</div><div>- Comprehensive string a=
nd regular expression handling (UTF support can be relegated to an endorsed=
 third party package)</div><div>- More helper functions in the `List` and `=
Option` modules</div><div>- A standard general purpose lazy list (stream). =
I was able to implement this comprehensively in about 300 lines, and its en=
ormously useful. It&#39;s absence means that everyone will write their own,=
 or that there will be hundreds in opam</div><div>- More immutable data str=
uctures like queues, heaps, stacks, etc</div><div>- A standard means of con=
currency. Lwt is great, but is almost its own standard library at this poin=
t, and there&#39;s still a split between it and Async.</div><div>- Better s=
upport for error-handling-by-value with `either` and `option` through helpe=
r functions</div><div>- The ppx_deriving package reduces a TONNE of boilerp=
late for making defining ordering on data for instance. It should be a stan=
dard extension (or something like it)</div><div>- Better documentation/endo=
rsement of build tools. It&#39;s possible to get pretty far with ocamlbuild=
, _tags, and a simple Makefile, but figuring out how to get there was not e=
xactly easy</div><div>- Better interfaces to the file system with more stru=
ctured error handling on failure (`Sys_error` was not the nicest thing to w=
ork with).</div><div>- Less reliance on exceptions for non-exceptional situ=
ations and retrofitting &quot;pure&quot; functions like `hd` with `option` =
or `either` result types.</div><div>- Less duplication and or more aggressi=
ve deprecation. It&#39;s not clear to me why there should be both &quot;Foo=
&quot; and &quot;FooLabels&quot; modules, for instance. I also hear that so=
me modules in the standard library are probably best avoided.</div><div><br=
></div><div>Finally, about the governance of such a library:</div><div><br>=
</div><div>While libraries like Core and and Batteries are undeniably usefu=
l, I found myself somewhat discouraged in practice:</div><div><br></div><di=
v>- Batteries has relatively low adoption and I think it does too much</div=
><div>- Core is driven by a private organization. In practise, I&#39;ve fou=
nd the (lack of) documentation to be a major blocker, and I&#39;d feel bett=
er about using it if it was truly community &quot;owned&quot; (or if there =
was a non-profit spin-off to support and own it like the F# foundation, for=
 instance).</div><div><br></div><div>Best,</div><div>--</div><div>Jesse</di=
v><div><br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">=
On Thu, Aug 27, 2015 at 10:17 AM, Yaron Minsky <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:yminsky@janestreet.com" target=3D"_blank">yminsky@janestreet.co=
m</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margi=
n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">The core OCaml te=
am is small, and having them focused on building a<br>
great compiler rather than on building a rich stdlib seems right to<br>
me.=C2=A0 The improvements in packaging I think make the question of<br>
whether it&#39;s distributed with the compiler mostly a moot issue, I<br>
think.<br>
<br>
On the topic of Core: The issue of binary size is real.=C2=A0 It will get<b=
r>
somewhat better when we drop packed modules from the public release,<br>
which should come in the next few months (support for it internally is<br>
mostly in place.)=C2=A0 That said the module-level dependency tracking is<b=
r>
by its nature coarse, so binaries using Core (or the more portable<br>
Core_kernel) are still going to be relatively large.<br>
<br>
That said, I think I&#39;d rather have the compiler folk work on improving<=
br>
dead-code elimination than integrating and maintaining a standard<br>
library.<br>
<br>
As to openness: we publish all changes on github, have a mailing list,<br>
and will accept pull requests; but it&#39;s true that the development of<br>
Core is focused within Jane Street, and that is unlikely to change.<br>
<span><br>
y<br>
<br>
On Wed, Aug 26, 2015 at 8:52 PM, Hongbo Zhang &lt;<a href=3D"mailto:bobzhan=
g1988@gmail.com" target=3D"_blank">bobzhang1988@gmail.com</a>&gt; wrote:<br>
</span><div><div>&gt; Dear OCaml developers,<br>
&gt;=C2=A0 =C2=A0 =C2=A0I would like to spend one hour in writing down my e=
xperience that why I<br>
&gt; had to write some small utilities again and again, since this happened=
 so<br>
&gt; many times that I believe you might come across such issues before.<br>
&gt;=C2=A0 =C2=A0 =C2=A0I am doing some compiler hacking tonight, I needed =
a utility function<br>
&gt; =E2=80=9CString.split=E2=80=9D which split a string into a list of str=
ings by whitespace, it<br>
&gt; is just one liner if you use str library. However, since I am doing so=
me low<br>
&gt; level stuff, I would try to avoid such big dependency, and I am pretty=
 sure<br>
&gt; that I have ever written it=C2=A0 for at least three times, I just hop=
ed that I<br>
&gt; could get it done quickly, so I am looking into batteries that if I ca=
n<br>
&gt; steal some code, I have to copy some code instead of depend on batteri=
es,<br>
&gt; batteries is too big for my projects. `BatString.nsplit` seems to fit =
for<br>
&gt; what I needed, I copied the definition of `BatString.nsplit` into REPL=
, no<br>
&gt; luck, it depends on some previously defined functions, then I copied t=
he<br>
&gt; whole module `BatString` into REPL, still no luck, it depended on anot=
her<br>
&gt; module `BatReturn`, then I stopped here, it=E2=80=99s time to write my=
 own ad-hoc<br>
&gt; thrown-away `String.split` function again.<br>
&gt;=C2=A0 =C2=A0 OCaml is my favorite programming language, and I am very =
productive at<br>
&gt; it, however, I was annoyed by such things from time to time. We do hav=
e four<br>
&gt; *standard libraries* alternatives: batteries, core, extlib and<br>
&gt; ocaml-containers. In my opinion, none of them matches the beauty of th=
e<br>
&gt; OCaml language itself and probably will never catch up if we don=E2=80=
=99t do<br>
&gt; anything.<br>
&gt;=C2=A0 =C2=A0 =C2=A0Note that I don=E2=80=99t want to be offensive to a=
ny of these libraries, just<br>
&gt; my personal feedback that why I think it is not a good standard librar=
y, I<br>
&gt; appreciated a lot to people who contribute their precious time in<br>
&gt; maintaining these libraries, better than nothing : )<br>
&gt;=C2=A0 =C2=A0 =C2=A0- Batteries(extlib)<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0It=E2=80=99s big with dependencies between d=
ifferent modules (OCaml does not<br>
&gt; have a good story in dead code elimination), some of its modules are o=
f low<br>
&gt; quality, for example, batEnum is used everywhere while its implementat=
ion is<br>
&gt; buggy. batIO makes things even worse since it is not compatible with<b=
r>
&gt; standard library, some type signatures mismatched IIRC.<br>
&gt;=C2=A0 =C2=A0 =C2=A0- ocaml-containers<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0Mostly one man=E2=80=99s project<br>
&gt;=C2=A0 =C2=A0 =C2=A0- core<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0I believe core has high quality, however, it=
 suffers the same problem<br>
&gt; as batteries, a big dependency. There is a blocking issue, its develop=
ment<br>
&gt; process is opaque, for an open source community, I would prefer a stan=
dard<br>
&gt; library developed in an open environment.<br>
&gt;=C2=A0 =C2=A0 =C2=A0I am not expecting that we could have a=C2=A0 stand=
ard library as rich as<br>
&gt; python, but for some utilities, I do believe that shipped with standar=
d<br>
&gt; library or officially supported is the best solution.<br>
&gt;=C2=A0 =C2=A0 Thanks =E2=80=94 Hongbo<br>
<br>
</div></div><div><div>--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/ocam=
l_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a></div></div></b=
lockquote></div><br></div></div>

--001a113545203f4680051e4d13c5--
