Return-Path: <emmanuel.surleau@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 49C447F168
	for <caml-list@sympa.inria.fr>; Thu, 27 Aug 2015 20:42:33 +0200 (CEST)
IronPort-PHdr: 9a23:AvQF6hU1tZseOLrju6A+mCbDKYzV8LGtZVwlr6E/grcLSJyIuqrYZhCOt8tkgFKBZ4jH8fUM07OQ6PC7HzJcqs/b7jgrS99laVwssY0uhQsuAcqIWwXQDcXBSGgEJvlET0Jv5HqhMEJYS47UblzWpWCuv3ZJQk2sfTR8Kum9IIPOlcP/j7n0oM2IJVsUz2PnP/tbF1afk0b4joEum4xsK6I8mFPig0BjXKBo/15uPk+ZhB3m5829r9ZJ+iVUvO89pYYbCf2pN/dwcbsNBz0jNyUx5db3nRjFVwqGoHUGAUsMlR8dLg3A5RfnU5O5iTbgsud0xWHOMMjzRLYpVDDk9LpxTBLhlQ8IMjc49Cfcjckm3/ETmw6ouxEqm92cW4qSLvcrJq4=
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=emmanuel.surleau@gmail.com; spf=Pass smtp.mailfrom=emmanuel.surleau@gmail.com; spf=None smtp.helo=postmaster@mail-qk0-f178.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  emmanuel.surleau@gmail.com) identity=pra;
  client-ip=209.85.220.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="emmanuel.surleau@gmail.com";
  x-sender="emmanuel.surleau@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  emmanuel.surleau@gmail.com designates 209.85.220.178 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.220.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="emmanuel.surleau@gmail.com";
  x-sender="emmanuel.surleau@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk0-f178.google.com) identity=helo;
  client-ip=209.85.220.178;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="emmanuel.surleau@gmail.com";
  x-sender="postmaster@mail-qk0-f178.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0C2AQAGWd9VnLLcVdFehFgGwjmDOAKBLgc8EAEBAQEBAQEBEAEBAQEBBg0JCSEugh2CBgEBAQMBEhEdARseAwELBhAGAwECKwICIQEBEQEFARICCBkIDAcHh3YBAwoIpRiBLz4xi0CBbIJ5iiYKGScNVoRBAQEIAQEBARgBBQ6LU4JPgVMGEQFAGAaCY4FDBYcqjhOLBoFtgUqRXINQgh8SI4EXF4QQPDOBDoE/AQEB
X-IPAS-Result: A0C2AQAGWd9VnLLcVdFehFgGwjmDOAKBLgc8EAEBAQEBAQEBEAEBAQEBBg0JCSEugh2CBgEBAQMBEhEdARseAwELBhAGAwECKwICIQEBEQEFARICCBkIDAcHh3YBAwoIpRiBLz4xi0CBbIJ5iiYKGScNVoRBAQEIAQEBARgBBQ6LU4JPgVMGEQFAGAaCY4FDBYcqjhOLBoFtgUqRXINQgh8SI4EXF4QQPDOBDoE/AQEB
X-IronPort-AV: E=Sophos;i="5.17,422,1437429600"; 
   d="scan'208";a="175103867"
Received: from mail-qk0-f178.google.com ([209.85.220.178])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 27 Aug 2015 20:42:31 +0200
Received: by qkda128 with SMTP id a128so15568795qkd.3
        for <caml-list@inria.fr>; Thu, 27 Aug 2015 11:42:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=WXn7Cgpr8F9pVwPiHernfqbq4UYS6fYwWfGG7nDf5kA=;
        b=ZQnFbn0OEJ73jgaO2ssnYIlI7tWNYXel+AYPqPerlQYzX7LidXluaVkOgH5gGF6Fuu
         WFW80V0GaFUnZ2c5LHULg4AOxU4j6qUC6rUiguAFIbWH194Ch08WWxO9yT7LLyrLGQQ4
         6AtSiZq2yNgZImgk8CES31Au1HugR/tqpAc7+mJ4ZAL5QtRCMfpUmWtwB/4e6QNQ8YTF
         JqDg9LqCyV4grVfAsI0E+TITpqf4rO7elSlD9eXVMUxDqJu8dyHGMVk4nVpKP9F9h4o/
         o1BF1VUY6jEgTxuACkraVrWheDknocQp1cQ8FT4qYoVHyoxivCYq2ePRuAqSz7NhjR1C
         OhrA==
MIME-Version: 1.0
X-Received: by 10.55.221.8 with SMTP id n8mr9423538qki.85.1440700950941; Thu,
 27 Aug 2015 11:42:30 -0700 (PDT)
Received: by 10.55.19.216 with HTTP; Thu, 27 Aug 2015 11:42:30 -0700 (PDT)
In-Reply-To: <20150827174554.14858.6618@localhost>
References: <1C02B1E2-D17D-4008-998E-B17048C62DFA@gmail.com>
	<CAN=ouMRvhoNXoQw3uOLBTY3f+daBigvDzyXWqhSWsiq8mjhcYQ@mail.gmail.com>
	<CAPFanBFK6y=5+TLDU0oo_z3Ts-LO22m6PZjytQW415LqGO041g@mail.gmail.com>
	<20150827174554.14858.6618@localhost>
Date: Thu, 27 Aug 2015 20:42:30 +0200
Message-ID: <CADd2AG6V4fkgx0i8UhosKdUTm6fGUVrmPM9_n4BiGBLyKgAiig@mail.gmail.com>
From: Emmanuel Surleau <emmanuel.surleau@gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=001a1149d300689469051e4f54fb
Subject: [Caml-list] Fwd: We need a rich standard library distributed with
 OCaml, really

--001a1149d300689469051e4f54fb
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

---------- Forwarded message ----------
From: Emmanuel Surleau <emmanuel.surleau@gmail.com>
Date: Thu, Aug 27, 2015 at 7:45 PM
Subject: Re: [Caml-list] We need a rich standard library distributed with
OCaml, really
To: Gabriel Scherer <gabriel.scherer@gmail.com>


Quoting Gabriel Scherer (2015-08-27 10:17:08)
> Hongbo, you are saying at the same time that:
> - you want a *rich* (in particular, large) standard library
> - existing third-party base libraries are too large for your taste
>
> If we magically imported one of those libraries in the OCaml
> distribution, it would still be large, and it would still have
> inter-dependencies between its modules. Why are you unwilling to
> depend on a library provided outside the distribution?
>
> Depending on external libraries used to be a problem when there was no
> consensus on OCaml packaging (no longer than a few years ago people
> where reluctant to even use ocamlfind). We now have a reasonable
> consensus on a packaging story, and installing third-party libraries
> has never been as easy as it is today -- except on Windows, meh.
> I think you should embrace the idea of depending on software outside
> the OCaml distribution.
>
> (I understand there are legal issues that make it difficult for some
> companies to use third-party software. It is not our job to work in
> stead of their lawyers.)
>
> Many of the issues people have with the library distributed with in
> the compiler distribution come from the fact that it is included in
> the compiler distribution -- and thus imposes a maintenance burden on
> the same group, same backward-compatibility constraints, etc. The
> general movements in the current years is to make the compiler
> distribution *smaller*, not *larger*, to avoid these problems.
>
>
> I think the criticism you make of existing standard library
> alternatives is fair (at least the Batteries part corresponds to
> something that I think is consensual=C2=B9). My preferred solution to help
> solve these issues is to contribute work to improve these libraries.
>
> =C2=B9: Simon Cruanes has started good work to split Batteries in smaller
> modules that do not depend on each other. This effort is currently
> stalled, in large part by my personal fault (I was too
> perfectionist in hoping for doing this and at the same time preserving
> backward-functionality). Simon may have made the good call in starting
> his own parallel library effort suiting his relatively opinionated
> view of how things should be. I hope to get more time to devote to
> Batteries at some point, and resolve that tension by proposing a good
> compromise (integrating most of Simon's work) for a v3 release.
>
> There remain the issue that having several "base libraries" risks
> fragmenting the community in incompatible islands of software usage.
> It is true that shoving stuff into the compiler distribution is a way
> to resolve this excess of choice by authority, but it is manifest that
> no one currently wants to bear this authority and the responsibilities
> that come with it. (Except possibly on very localized issues, as the
> `result` type that is being integrated in 4.03+dev).
>
> I think the way forward is to have smaller independent packages that
> do not require so large a buy-in and consensus. We could have *one*
> package that provides many useful functions for lists, and one
> separate package with many useful functions for strings. In this style
> Daniel B=C3=BCnzli beautifully documented small packages, or David Sheets
> doing-one-thing libraries would be role models to follow. This wasn't
> an option when Batteries or Core were started, because the packaging
> story was too confused, but it is now and we should take advantage of
> it. Given time (and help?) I hope to evolve Batteries towards this
> model.

(forwarding the original email to the list as I had sent only to Gabriel by
accident)

Well, as far collections go, you don't need "large libraries". You just
need a
to_gen method in collection types in the stdblib. The gen type itself
is trivially reimplementable, so it's not a hard dependency on ccube's gen
package, and gen itself is a single module that could, if there was the
will, be
integrated in the stdlib at little cost. This would greatly extend the
flexibility of existing data structures.

Another issue to consider is that you need to distinguish what is "sugar"
and
what is essential infrastructure. You do not want to farm out
infrastructure to
third parties. Otherwise, this puts maintainers of OCaml libraries in the
difficult position of choosing for their users. It's mostly a question of
data
types. If, for instance, the stdlib had sensible data types for handling
time
information, it would be acceptable to leave advanced time-handling
mechanics to
specialized libraries outside of the stdlib, as long as they were able to
rely
on a *lingua franca* of standard types.

Of course, all that wouldn't solve the design issues of the standard library
(eg, Str, exceptions everywhere, etc.), but adding gen (or at least hooks
for
gen) and a number of common data structures would really go a long way.

I wouldn't mind contributing a few hours working on that, assuming we could
reach some kind of consensus.

Cheers,

Emm

--001a1149d300689469051e4f54fb
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_quote">---------- Forwarded messag=
e ----------<br>From: <b class=3D"gmail_sendername">Emmanuel Surleau</b> <s=
pan dir=3D"ltr">&lt;<a href=3D"mailto:emmanuel.surleau@gmail.com">emmanuel.=
surleau@gmail.com</a>&gt;</span><br>Date: Thu, Aug 27, 2015 at 7:45 PM<br>S=
ubject: Re: [Caml-list] We need a rich standard library distributed with OC=
aml, really<br>To: Gabriel Scherer &lt;<a href=3D"mailto:gabriel.scherer@gm=
ail.com">gabriel.scherer@gmail.com</a>&gt;<br><br><br>Quoting Gabriel Scher=
er (2015-08-27 10:17:08)<br>
<div><div class=3D"h5">&gt; Hongbo, you are saying at the same time that:<b=
r>
&gt; - you want a *rich* (in particular, large) standard library<br>
&gt; - existing third-party base libraries are too large for your taste<br>
&gt;<br>
&gt; If we magically imported one of those libraries in the OCaml<br>
&gt; distribution, it would still be large, and it would still have<br>
&gt; inter-dependencies between its modules. Why are you unwilling to<br>
&gt; depend on a library provided outside the distribution?<br>
&gt;<br>
&gt; Depending on external libraries used to be a problem when there was no=
<br>
&gt; consensus on OCaml packaging (no longer than a few years ago people<br>
&gt; where reluctant to even use ocamlfind). We now have a reasonable<br>
&gt; consensus on a packaging story, and installing third-party libraries<b=
r>
&gt; has never been as easy as it is today -- except on Windows, meh.<br>
&gt; I think you should embrace the idea of depending on software outside<b=
r>
&gt; the OCaml distribution.<br>
&gt;<br>
&gt; (I understand there are legal issues that make it difficult for some<b=
r>
&gt; companies to use third-party software. It is not our job to work in<br>
&gt; stead of their lawyers.)<br>
&gt;<br>
&gt; Many of the issues people have with the library distributed with in<br>
&gt; the compiler distribution come from the fact that it is included in<br>
&gt; the compiler distribution -- and thus imposes a maintenance burden on<=
br>
&gt; the same group, same backward-compatibility constraints, etc. The<br>
&gt; general movements in the current years is to make the compiler<br>
&gt; distribution *smaller*, not *larger*, to avoid these problems.<br>
&gt;<br>
&gt;<br>
&gt; I think the criticism you make of existing standard library<br>
&gt; alternatives is fair (at least the Batteries part corresponds to<br>
&gt; something that I think is consensual=C2=B9). My preferred solution to =
help<br>
&gt; solve these issues is to contribute work to improve these libraries.<b=
r>
&gt;<br>
&gt; =C2=B9: Simon Cruanes has started good work to split Batteries in smal=
ler<br>
&gt; modules that do not depend on each other. This effort is currently<br>
&gt; stalled, in large part by my personal fault (I was too<br>
&gt; perfectionist in hoping for doing this and at the same time preserving=
<br>
&gt; backward-functionality). Simon may have made the good call in starting=
<br>
&gt; his own parallel library effort suiting his relatively opinionated<br>
&gt; view of how things should be. I hope to get more time to devote to<br>
&gt; Batteries at some point, and resolve that tension by proposing a good<=
br>
&gt; compromise (integrating most of Simon&#39;s work) for a v3 release.<br>
&gt;<br>
&gt; There remain the issue that having several &quot;base libraries&quot; =
risks<br>
&gt; fragmenting the community in incompatible islands of software usage.<b=
r>
&gt; It is true that shoving stuff into the compiler distribution is a way<=
br>
&gt; to resolve this excess of choice by authority, but it is manifest that=
<br>
&gt; no one currently wants to bear this authority and the responsibilities=
<br>
&gt; that come with it. (Except possibly on very localized issues, as the<b=
r>
&gt; `result` type that is being integrated in 4.03+dev).<br>
&gt;<br>
&gt; I think the way forward is to have smaller independent packages that<b=
r>
&gt; do not require so large a buy-in and consensus. We could have *one*<br>
&gt; package that provides many useful functions for lists, and one<br>
&gt; separate package with many useful functions for strings. In this style=
<br>
&gt; Daniel B=C3=BCnzli beautifully documented small packages, or David She=
ets<br>
&gt; doing-one-thing libraries would be role models to follow. This wasn&#3=
9;t<br>
&gt; an option when Batteries or Core were started, because the packaging<b=
r>
&gt; story was too confused, but it is now and we should take advantage of<=
br>
&gt; it. Given time (and help?) I hope to evolve Batteries towards this<br>
&gt; model.<br>
<br></div></div>(forwarding the original email to the list as I had sent on=
ly to Gabriel by accident)<br><br></div><div class=3D"gmail_quote">Well, as=
 far collections go, you don&#39;t need &quot;large libraries&quot;. You ju=
st need a<br>
to_gen method in collection types in the stdblib. The gen type itself<br>
is trivially reimplementable, so it&#39;s not a hard dependency on ccube&#3=
9;s gen<br>
package, and gen itself is a single module that could, if there was the wil=
l, be<br>
integrated in the stdlib at little cost. This would greatly extend the<br>
flexibility of existing data structures.<br>
<br>
Another issue to consider is that you need to distinguish what is &quot;sug=
ar&quot; and<br>
what is essential infrastructure. You do not want to farm out infrastructur=
e to<br>
third parties. Otherwise, this puts maintainers of OCaml libraries in the<b=
r>
difficult position of choosing for their users. It&#39;s mostly a question =
of data<br>
types. If, for instance, the stdlib had sensible data types for handling ti=
me<br>
information, it would be acceptable to leave advanced time-handling mechani=
cs to<br>
specialized libraries outside of the stdlib, as long as they were able to r=
ely<br>
on a *lingua franca* of standard types.<br>
<br>
Of course, all that wouldn&#39;t solve the design issues of the standard li=
brary<br>
(eg, Str, exceptions everywhere, etc.), but adding gen (or at least hooks f=
or<br>
gen) and a number of common data structures would really go a long way.<br>
<br>
I wouldn&#39;t mind contributing a few hours working on that, assuming we c=
ould<br>
reach some kind of consensus.<br>
<br>
Cheers,<br>
<br>
Emm<br>
</div><br></div>

--001a1149d300689469051e4f54fb--
