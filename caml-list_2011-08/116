Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p7EDtsfI031859
	for <caml-list@sympa-roc.inria.fr>; Sun, 14 Aug 2011 15:55:54 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao4CABTTR07RVdy2mGdsb2JhbABBhzKRCIczAYchYQgUAQEBAQEICQ0HFCWBQAEBAQECARICExkBGxILAQMBCwYFBAcaISEBAREBBQEKEgYTCAoQh04ElTcKjDaCVYNLO4htAgMGhkEEglGQQYl2gmM8g2I
X-IronPort-AV: E=Sophos;i="4.67,369,1309730400"; 
   d="scan'208";a="115817291"
Received: from mail-vx0-f182.google.com ([209.85.220.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 14 Aug 2011 15:55:49 +0200
Received: by vxh11 with SMTP id 11so6324355vxh.27
        for <caml-list@inria.fr>; Sun, 14 Aug 2011 06:55:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=RBnfoCNAANjj2Ot7Y3txtoOjTtX5VCFOyTZ9jZ3RNVY=;
        b=DgsgXMj7JavxUG2efZpD3Bh1g7rcrlInoGHQWJgux9FhiHwDma1PJVRDLMPzX3SQ2v
         G2dtk+N46e792s8Ti5nUhuYYS6IxcJZ+mtksepbxQUnO/B/KeKUsdj0PRXkYMyVpdcj8
         ZsF4uUtBv17MIQoPXZqlaUSkV2mXSi6NBlkZw=
Received: by 10.52.100.6 with SMTP id eu6mr2553766vdb.30.1313330148104; Sun,
 14 Aug 2011 06:55:48 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.52.157.41 with HTTP; Sun, 14 Aug 2011 06:55:28 -0700 (PDT)
In-Reply-To: <1F991690-DC08-4BF6-BB41-6B9402C043FC@gmail.com>
References: <1F991690-DC08-4BF6-BB41-6B9402C043FC@gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sun, 14 Aug 2011 15:55:28 +0200
Message-ID: <CAPFanBGop97d6tyG5W8ZY65HDvaohFRFr93Z8X6zQSZd5U64hA@mail.gmail.com>
To: Ruslan Ledesma Garza <ruslanledesmagarza@gmail.com>
Cc: OCaml List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=20cf3071c6bcf3587404aa7780d8
Subject: Re: [Caml-list] Type generalization problem


--20cf3071c6bcf3587404aa7780d8
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

You have hit the "value restriction":
  http://caml.inria.fr/resources/doc/faq/core.en.html#eta-expansion

# let g =3D (fun x -> x) (fun x -> x);;
val g : '_a -> '_a =3D <fun>
# let g x =3D (fun x -> x) (fun x -> x) x;;
val g : 'a -> 'a =3D <fun>

Polymorphism annotation ( : 'a . 'a -> 'a ) have no use here, as you can
easily see in the return type if the value is polymorphic (type variables
'a, implicitly quantified at the beginning of the type) or not ("weak" type
variable '_a, which are just unknowns waiting to be unified).

On Sun, Aug 14, 2011 at 3:46 PM, Ruslan Ledesma Garza <
ruslanledesmagarza@gmail.com> wrote:

> Dear list,
>
> Consider the following OCaml session.
>
>        Objective Caml version 3.12.0
>
> # let f : 'v . 'v -> 'v =3D fun x -> x;;
> val f : 'a -> 'a =3D <fun>
> # let g : 'v . 'v -> 'v =3D (fun x -> x) (fun x -> x);;
> Error: This definition has type 'a -> 'a which is less general than
>         'b. 'b -> 'b
> #
>
> Why doesn't OCaml generalize the type 'a -> 'a? According to the typing
> rules in "Principal type-schemes for functional programs" (
> http://portal.acm.org/citation.cfm?id=3D582176 ), the type 'a -> 'a can be
> generalized.
>
> Something similar happens in the following OCaml session.
>
>        Objective Caml version 3.12.0
>
> # let f : 'v . 'v -> 'v =3D fun x -> x;;
> val f : 'a -> 'a =3D <fun>
> # let h =3D f f;;
> val h : '_a -> '_a =3D <fun>
> # h 1;;
> - : int =3D 1
> # h h;;
> Error: This expression has type int -> int
>       but an expression was expected of type int
> #
>
> I want the type of h to be \forall 'a . 'a -> 'a.         :'(
>
> Best regards,
> Rusl=E1n.
>
>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--20cf3071c6bcf3587404aa7780d8
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

You have hit the &quot;value restriction&quot;:<br>=A0 <a href=3D"http://ca=
ml.inria.fr/resources/doc/faq/core.en.html#eta-expansion">http://caml.inria=
.fr/resources/doc/faq/core.en.html#eta-expansion</a><br><br># let g =3D (fu=
n x -&gt; x) (fun x -&gt; x);;<br>

val g : &#39;_a -&gt; &#39;_a =3D &lt;fun&gt;<br># let g x =3D (fun x -&gt;=
 x) (fun x -&gt; x) x;;<br>val g : &#39;a -&gt; &#39;a =3D &lt;fun&gt;<br><=
br>Polymorphism annotation ( : &#39;a . &#39;a -&gt; &#39;a ) have no use h=
ere, as you can easily see in the return type if the value is polymorphic (=
type variables &#39;a, implicitly quantified at the beginning of the type) =
or not (&quot;weak&quot; type variable &#39;_a, which are just unknowns wai=
ting to be unified).<br>

<br><div class=3D"gmail_quote">On Sun, Aug 14, 2011 at 3:46 PM, Ruslan Lede=
sma Garza <span dir=3D"ltr">&lt;<a href=3D"mailto:ruslanledesmagarza@gmail.=
com">ruslanledesmagarza@gmail.com</a>&gt;</span> wrote:<br><blockquote clas=
s=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pad=
ding-left:1ex;">

Dear list,<br>
<br>
Consider the following OCaml session.<br>
<br>
 =A0 =A0 =A0 =A0Objective Caml version 3.12.0<br>
<br>
# let f : &#39;v . &#39;v -&gt; &#39;v =3D fun x -&gt; x;;<br>
val f : &#39;a -&gt; &#39;a =3D &lt;fun&gt;<br>
# let g : &#39;v . &#39;v -&gt; &#39;v =3D (fun x -&gt; x) (fun x -&gt; x);=
;<br>
Error: This definition has type &#39;a -&gt; &#39;a which is less general t=
han<br>
 =A0 =A0 =A0 =A0 &#39;b. &#39;b -&gt; &#39;b<br>
#<br>
<br>
Why doesn&#39;t OCaml generalize the type &#39;a -&gt; &#39;a? According to=
 the typing rules in &quot;Principal type-schemes for functional programs&q=
uot; ( <a href=3D"http://portal.acm.org/citation.cfm?id=3D582176" target=3D=
"_blank">http://portal.acm.org/citation.cfm?id=3D582176</a> ), the type &#3=
9;a -&gt; &#39;a can be generalized.<br>


<br>
Something similar happens in the following OCaml session.<br>
<br>
 =A0 =A0 =A0 =A0Objective Caml version 3.12.0<br>
<br>
# let f : &#39;v . &#39;v -&gt; &#39;v =3D fun x -&gt; x;;<br>
val f : &#39;a -&gt; &#39;a =3D &lt;fun&gt;<br>
# let h =3D f f;;<br>
val h : &#39;_a -&gt; &#39;_a =3D &lt;fun&gt;<br>
# h 1;;<br>
- : int =3D 1<br>
# h h;;<br>
Error: This expression has type int -&gt; int<br>
 =A0 =A0 =A0 but an expression was expected of type int<br>
#<br>
<br>
I want the type of h to be \forall &#39;a . &#39;a -&gt; &#39;a. =A0 =A0 =
=A0 =A0 :&#39;(<br>
<br>
Best regards,<br>
Rusl=E1n.<br>
<font color=3D"#888888"><br>
<br>
<br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></blockquote></div><br>

--20cf3071c6bcf3587404aa7780d8--
