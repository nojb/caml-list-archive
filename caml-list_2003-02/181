Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA08815; Wed, 19 Feb 2003 17:46:12 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA08801 for <caml-list@pauillac.inria.fr>; Wed, 19 Feb 2003 17:46:11 +0100 (MET)
Received: from ajax.cs.uga.edu (ajax.cs.uga.edu [128.192.251.3])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h1JGkAT01626;
	Wed, 19 Feb 2003 17:46:10 +0100 (MET)
Received: from uga.edu.cs.uga.edu (ajax [128.192.251.3])
	by ajax.cs.uga.edu (8.9.3/8.9.3) with ESMTP id LAA29254;
	Wed, 19 Feb 2003 11:46:02 -0500 (EST)
From: cashin@cs.uga.edu
To: James Leifer <James.Leifer@inria.fr>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Re: feature priorities (multithreading)
Date: Wed, 19 Feb 2003 11:46:05 -0500
In-Reply-To: <r77ptpok4r6.fsf_-_@brouilly.inria.fr> (James Leifer's message
 of "Wed, 19 Feb 2003 10:18:37 +0100")
Message-ID: <87fzqk5icy.fsf@uga.edu>
User-Agent: Gnus/5.090014 (Oort Gnus v0.14) Emacs/21.2
 (i386-debian-linux-gnu)
References: <4.3.2.7.2.20030210183551.03118b08@localhost>
	<4.3.2.7.2.20030213083000.02fedc40@localhost>
	<87of5gp0ia.fsf_-_@uga.edu> <r77ptpok4r6.fsf_-_@brouilly.inria.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

James Leifer <James.Leifer@inria.fr> writes:

...
> What kind of multithreading features do you need?  It would be
> interesting to understand what would be useful in Ocaml, especially
> from people who have worked with Erlang, for example.

Personally, I try to avoid threads because they usually make my
programs less portable and sometimes more complex.  But many people
who do parallelizable computation, like scientific computations
involving matrices, like to increase performance by taking advantage
of SMP architectures.

If the threads in a program only run on one processor, then all you
have is the overhead.  If they run on different processors at the same
time, with access to the same main memory but with independent caches,
then the performance benefits start to compensate for the extra
complexity of multithreading.

-- 
--Ed L Cashin            |   PGP public key:
  ecashin@uga.edu        |   http://noserose.net/e/pgp/

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

