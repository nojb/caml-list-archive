Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA01729 for caml-redistribution; Mon, 20 Jan 1997 19:14:54 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA28072 for <caml-list@pauillac.inria.fr>; Mon, 20 Jan 1997 16:31:23 +0100 (MET)
Received: from atlantica.access.ch (ns.access.ch [193.246.40.1]) by nez-perce.inria.fr (8.7.6/8.7.3) with ESMTP id QAA24608 for <caml-list@inria.fr>; Mon, 20 Jan 1997 16:31:15 +0100 (MET)
Received: from [10.0.2.15] by atlantica.access.ch (8.7.5/INA-0.94)
	id QAA20001; Mon, 20 Jan 1997 16:30:18 +0100 (MET)
X-Sender: sclematide@mail.access.ch
Message-Id: <v01530500af093c3eab44@[10.0.2.15]>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Mon, 20 Jan 1997 16:31:29 +0100
To: caml-list@inria.fr
From: sclematide@access.ch (Simon Clematide)
Subject: Constructors in camllight vs. ocaml
Sender: weis

Why do camllight and ocaml treat constructors differently?

In camllight I can write
    #type ip = Pair of int * int;;
   Type ip defined.
and the system recognizes Pair automatically as a value
    #Pair;;
    - : int * int -> ip = <fun>

Doing the same in ocaml (1.03) I get:
        # type ip = Pair of int * int;;
        type ip = Pair of int * int
        # Pair;;
        The constructor Pair expects 2 argument(s),
        but is here applied to 0 argument(s)

I do prefer the behavior of camllight especially for porting SML code.

Simon

---
Simon Clematide
Stuessistr. 96
CH-8057 Zuerich
E-mail: sclematide@access.ch
Phone: +41 1 361 22 37






