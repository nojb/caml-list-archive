Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA05555; Sat, 27 Mar 2004 19:34:51 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA04604 for <caml-list@pauillac.inria.fr>; Sat, 27 Mar 2004 19:34:49 +0100 (MET)
From: briand@aracnet.com
Received: from citrine.spiritone.com (citrine.spiritone.com [216.99.193.133])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i2RIZRKW020900
	for <caml-list@pauillac.inria.fr>; Sat, 27 Mar 2004 19:35:28 +0100
Received: from soggy.deldotd.com (216-99-206-32.cust.aracnet.com [216.99.206.32])
	by citrine.spiritone.com (8.12.10/8.12.8) with ESMTP id i2RIdYgO019587;
	Sat, 27 Mar 2004 10:39:34 -0800
Received: from briand by soggy.deldotd.com with local (Exim 3.36 #1 (Debian))
	id 1B7Idp-0007xo-00; Sat, 27 Mar 2004 10:34:45 -0800
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <16485.51525.563377.579691@soggy.deldotd.com>
Date: Sat, 27 Mar 2004 10:34:45 -0800
To: Matt Gushee <mgushee@havenrock.com>
Cc: caml-list@pauillac.inria.fr
Subject: Re: [Caml-list] serious type confusion
In-Reply-To: <20040327181638.GA8360@swordfish>
References: <16485.47700.498923.656556@soggy.deldotd.com>
	<20040327181638.GA8360@swordfish>
X-Mailer: VM 6.92 under Emacs 21.2.1
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 gushee:01 mgushee:01 havenrock:01 myfun:01 followup:01 writes:01 complex:03 argument:03 trick:03 let:04 parameter:04 somewhere:04 constraint:05 uses:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 396

>>>>> "Matt" == Matt Gushee <mgushee@havenrock.com> writes:

  Matt> * Is current_polyline defined within the same scope where the error
  Matt>   occurs, or is it received as an argument? If it is the latter, and
  Matt>   somewhere before the error location there is an expression that *uses*
  Matt>   !current_polyline as a point, that would explain your error.  If your
  Matt>   function is too complex to easily identify the problem by sight, an
  Matt>   easy way to check for this would be to put a type constraint on the
  Matt>   parameter:

  Matt>     let myfun (current_polyline:point list ref) =
  Matt>       ....

That was it exactly (see my followup).

However that's a very nice trick for future debuggin effort.

Thanks

Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

