Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA06385; Tue, 23 Mar 2004 00:02:03 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA07196 for <caml-list@pauillac.inria.fr>; Tue, 23 Mar 2004 00:02:02 +0100 (MET)
Received: from smtp.mbg.ocn.ne.jp (mbg.ocn.ne.jp [210.190.142.181])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i2MN21Hd011229
	for <caml-list@inria.fr>; Tue, 23 Mar 2004 00:02:01 +0100
Received: from localhost (p29198-adsau12honb7-acca.tokyo.ocn.ne.jp [220.99.33.198])
	by smtp.mbg.ocn.ne.jp (Postfix) with ESMTP
	id D765C5D46; Tue, 23 Mar 2004 08:01:59 +0900 (JST)
Date: Tue, 23 Mar 2004 08:01:54 +0900 (JST)
Message-Id: <20040323.080154.71097954.yoriyuki@mbg.ocn.ne.jp>
To: alex@baretta.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Delegation based OO
From: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <405EBD5D.1000406@baretta.com>
References: <405EBD5D.1000406@baretta.com>
X-Mailer: Mew version 2.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 yamagata:01 yoriyuki:01 yoriyuki:01 baretta:01 baretta:01 caml-list:01 2004:99 coolest:99 object-based:01 delegates:01 foo:01 overwrite:01 foo:01 alex:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 309

From: Alex Baretta <alex@baretta.com>
Subject: [Caml-list] Delegation based OO
Date: Mon, 22 Mar 2004 11:18:05 +0100

> This is really a pain. I would expect delegation to be supported in the 
> coolest OO language under the sun ;)

As far as I know, type theory for object-based OO is still
on-going research topic.

In your example,

class *type* does_something = object ... end

class does_more (an_object:#does_something) = object
   delegates an_object
   ...
end

"an_object" may have a method, say, "an_object#foo : int".
"does_more" could overwrite the method, and define "does_more#foo :
float".  Now, what type should "self#pooh" have in the definition of
an_object?

But you know something I do not aware?

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

