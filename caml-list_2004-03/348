Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA01722; Wed, 24 Mar 2004 15:12:15 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA02680 for <caml-list@pauillac.inria.fr>; Wed, 24 Mar 2004 15:12:14 +0100 (MET)
Received: from smtp.mbg.ocn.ne.jp (mbg.ocn.ne.jp [210.190.142.181])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i2OECnKW000934
	for <caml-list@inria.fr>; Wed, 24 Mar 2004 15:12:50 +0100
Received: from localhost (p22052-adsau12honb7-acca.tokyo.ocn.ne.jp [220.99.26.52])
	by smtp.mbg.ocn.ne.jp (Postfix) with ESMTP id C80764058
	for <caml-list@inria.fr>; Wed, 24 Mar 2004 23:12:11 +0900 (JST)
Date: Wed, 24 Mar 2004 23:11:48 +0900 (JST)
Message-Id: <20040324.231148.18590674.yoriyuki@mbg.ocn.ne.jp>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Delegation based OO
From: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <40616664.4040500@baretta.com>
References: <20040324.084300.18291498.yoriyuki@mbg.ocn.ne.jp>
	<20040324004548.GA19738@tallman.kefka.frap.net>
	<40616664.4040500@baretta.com>
X-Mailer: Mew version 2.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce by Joe's j-chkmail ("http://j-chkmail.ensmp.fr")!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 yamagata:01 yoriyuki:01 yoriyuki:01 baretta:01 baretta:01 caml-list:01 2004:99 object-based:01 yamagata:01 inherit:01 alex:01 alex:01 essentially:02 objects:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
X-Status: 
X-Keywords:                  
X-UID: 348

From: Alex Baretta <alex@baretta.com>
Subject: Re: [Caml-list] Delegation based OO
Date: Wed, 24 Mar 2004 11:43:48 +0100

> Delegation is no relative of inheritance. Inheritance is a syntactic 
> property (essentially classes inherit code), whereas delegation is a 
> semantic property: once one method is delegated by a proxy object to an 
> executor object, the the visibility of the proxy is lost. The method is 
> executed as if it were invoked directly on the executor.

There is a certain approach (object-based OO) which makes inheritance
to be a relation between objects (and get rid of the concept of class
altogether).  In this approach, we can add, and modify mothods in
objects in run time.  I confuse this with Alex proposal.

--
Yamagata Yoriyuki

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

