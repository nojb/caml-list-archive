Return-Path: <RABIH.ELCHAAR@sgam.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.3 required=5.0 tests=AWL,HTML_MESSAGE,NO_REAL_NAME,
	SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 32CBABC0A
	for <caml-list@yquem.inria.fr>; Tue,  5 Jun 2007 11:33:36 +0200 (CEST)
Received: from parmail02.sgcib.com (parmail02.sgcib.com [207.45.250.34])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l559XYRH007934
	for <caml-list@inria.fr>; Tue, 5 Jun 2007 11:33:35 +0200
X-IronPort-AV: i="4.16,385,1175464800"; 
   d="scan'208,217"; a="197575200:sNHT113732844"
Content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_001_01C7A754.9160D6C3"
X-MimeOLE: Produced By Microsoft Exchange V6.5.7226.0
Subject: RE: [Caml-list] nonlinear fit function binding
Date: Tue, 5 Jun 2007 11:33:26 +0200
Message-ID: <33A2A7CA4E6BCB458E4F0A508A4DDDFC435686@FRDEF-EXMB03.europe.am.socgen>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: [Caml-list] nonlinear fit function binding
Thread-Index: AcemfDUyWYKKlIh0SyWm/lRIcibGmAA04ZPg
From: <RABIH.ELCHAAR@sgam.com>
To: <matthieu.dubuget@gmail.com>, <caml-list@inria.fr>
X-OriginalArrivalTime: 05 Jun 2007 09:33:30.0198 (UTC) FILETIME=[93CAC760:01C7A754]
X-NAI-Spam-Score: -0.3
X-j-chkmail-Score: MSGID : 46652DEE.001 on concorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at concorde with ID 46652DEE.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; bigarrays:01 pointer:01 gsl:01 bigarrays:01 gsl:01 matrices:01 bigarray:01 elt:01 elt:01 bool:01 bytecode:01 bytecode:01 computes:01 bigarray:01 val:01 

This is a multi-part message in MIME format.

------_=_NextPart_001_01C7A754.9160D6C3
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Bigarrays, in my understanding are essentially c structure, with a pointer =
to date, reference of usages, ...

It is very similar to the gsl vector matrix structure.

=20

You can look at the ocamlgsl binding to see how easily bigarrays are transf=
ormed into gsl vector and matrices.

=20

To illustrate my answier, I will try to be more specific, and give some c c=
ode snapshots.

=20

Let's says you have your library function called minimizer(...,array1, ...)

=20

array1 is a c double array.

=20

Your goal is to create a c function called caml_wrap_minimizer, which will =
be called from CAML.

=20

This function will take into argument the function f to minimize, the initi=
al starting point, constraints, target point, ...

=20

View from caml, the minimize function have a signature like (including levm=
ar definitions)

=20

=20

=20

(************************************ wrapper.ml **************************=
******************)

open Bigarray

type float_vector =3D (float, float64_elt, c_layout) Array1.t=20

type float_matrix =3D (float, float64_elt, c_layout) Array2.t=20

=20

type stopping=3D

  |Small_Grandient

  |Small_Dp

  |Stop_Itmax

  |Matrix_Singular

  |Error_Reduction_Saturated

  |Small_e_2

=20

type calibrationInfo=3D

    {initial_e_2:float;

     stopping_e_2:float;

     stopping_J_T_e_inf:float;

     stopping_Dp_2:float;

     stopping_max_J_T_J:float;

     iterations:int;

     stopping_reason:stopping;

     function_evaluation:int;

     jacobian_evalutaion:int;}

=20

external workspace_size: ?m:int -> ?n:int -> ?analyticJacobian:bool -> int =
=3D

  "workspace_size"

=20

(** gneral minimization *)

external dlevmar_der: ?tau:float -> ?epsilon1:float -> ?epsilon2:float ->

  ?epsilon3:float ->

    ?f:(float_vector -> float_vector -> unit) ->

      ?j:(float_vector -> float_matrix ->unit) ->

        ?p:float_vector -> ?x:float_vector -> ?itmax:int ->

          ?work:float_vector -> ?covar:float_matrix -> calibrationInfo =3D

            "dlevmar_der_bytecode" "dlevmar_der_native"

=20

=20

external dlevmar_dif: ?tau:float -> ?epsilon1:float -> ?epsilon2:float ->

  ?epsilon3:float -> ?delta:float ->

    ?f:(float_vector -> float_vector -> unit) ->

      ?p:float_vector -> ?x:float_vector -> ?itmax:int ->

        ?work:float_vector -> ?covar:float_matrix ->

          ?tempp:float_vector -> ?tempx:float_vector -> calibrationInfo =3D

          "dlevmar_dif_bytecode" "dlevmar_dif_native"

=20

(************************************ wrapper.ml **************************=
******************)

=20

f is the function that computes x =3D f(p) and our goal is

starting from p, find the point p* verifying

f(p*)=3Dx

=20

In case we know the jacobian analytically, the jacobian function j is passe=
d=2E

If not, we have to use numerical jacobian computation.

=20

What you have to keep in mind is that the vector p will be modified in memo=
ry by the c function.

=20

I will emphasize a bit more the c code.

=20

=20

(************************************ wrapper.c ***************************=
*****************)

=20

static double *Vdata(value  v)

{

    return Bigarray_val(v)->data;

}

=20

static value fg; /* : vector -> vector -> unit */

static double * ctempp, * ctempx;

static value tempp;

static value tempx;

=20

=20

static void wrap_f_dif1(double *p, double *hx, int m, int n, void *adata)

{

  memcpy(Vdata(tempp),p,m*sizeof(double));

  callback2(fg,tempp,tempx);

  memcpy(hx,Vdata(tempx),n*sizeof(double));

 =20

}

=20

CAMLprim value dlevmar_dif_native(value tau, value epsilon1, value epsilon2=
, value epsilon3, value delta,

                                  value f, value p, value x, value itmax,=20

                                  value work, value covar, value temp_p, va=
lue temp_x)

{

  double info[LM_INFO_SZ];

  double opts[LM_OPTS_SZ];

  CAMLparam5(tau,epsilon1,epsilon2,epsilon3,f);

  CAMLxparam5(p,x,itmax,covar,work);

  CAMLxparam3(temp_p,temp_x,delta);

  CAMLlocal1(res);

  int n;

  int m;

 =20

  double *cp;

  double *cfvec;

  double *ccovar;

  double *cwork;

  int citmax;

  int ret;

=20

=20

  fg =3D Field(f,0);

  caml_register_global_root(&fg);

=20

  tempp =3D Field(temp_p,0);

  ctempp =3D Vdata(tempp);

=20

  tempx =3D Field(temp_x,0);

  ctempx =3D Vdata(tempx);

=20

=20

  caml_register_global_root(&tempp);

  caml_register_global_root(&tempx);

=20

 =20

=20

  ret =3D dlevmar_dif(

              &wrap_f_dif1,...

=20

  caml_remove_global_root(&tempp);

  caml_remove_global_root(&tempx);=20

  caml_remove_global_root(&fg);

=20

}

(************************************ wrapper.c ***************************=
*****************)

=20

=20

When you look thoroughly to the wrap_f_dif1 function, you get a clear under=
standing of what I am trying to do.

After having registered f, temp and tempw passed from caml as global_roots,=
 when I have to call my caml function for minimization, i copy the c pointe=
rs of my c function to the bigarray structure behind temp and tempx, and do=
 a callback2 to have the function computed in the caml world.

=20

Hope this helps.

=20

Rabih

________________________________

De : caml-list-bounces@yquem.inria.fr [mailto:caml-list-bounces@yquem.inria=
.fr] De la part de Matthieu Dubuget
Envoy=E9 : lundi 4 juin 2007 09:38
=C0 : caml-list@inria.fr
Objet : Re: [Caml-list] nonlinear fit function binding

=20

Thanks for your reply, Rabih.

2007/5/31, RABIH.ELCHAAR@sgam.com <RABIH.ELCHAAR@sgam.com>:=20

I did a wrapping of the levmar library.


Unfortunately, since I am to use this in a commercial product, and I was no=
t able (yet ?) to convince my boss to release the sources, I can't use with=
 levmar, wich is GPLed... I may switch to cminpack. But i think this is not=
 related to my current question.=20

	=20

	The approach I chose is to allocate bigarrays from Caml, and pass them to =
the main C function, along with the function f.

Does it mean that each time f function is called by the minimization, the C=
 wrappers has to copy the params C array into your Bigarray pre-allocated s=
torage place? That's why I choosed to leave the C array untouched and wrap =
a Bigarray around it  (should not be a big amount of memory). Am I wrong in=
 going this way?=20

	=20

	In the main function, I register f and all the bigarrays as global roots, =
and then call as many times the c sub function to compute the minimization.

=20

I do not understand this part. f is passed to the main (C) function from OC=
aml: why do you need to register it as a global root? Same question for the=
 Bigarrays? Does it mean that else, nothing in OCaml world would point to t=
hem? =20

Feel free to ask for more precisions if needed

Hope this helps.

Surely. I really need to acquire a better understanding of GC and C interfa=
ce in OCaml.=20
Really, I do not understand what happens to those C allocated Bigarrays...

Salutations

Matthieu

=20

Ce message et toutes les pieces jointes (ci-apres le "message") sont confid=
entiels et etablis a l'intention exclusive de ses destinataires.=20
Toute utilisation ou diffusion non autorisee est interdite.=20
Tout message electronique est susceptible d'alteration.=20
Societe Generale Asset Management et ses filiales declinent toute responsab=
ilite au titre de ce message s'il a ete altere, deforme ou falsifie.=20
 =20
Decouvrez l'offre et les services de Societe Generale Asset Management sur =
le site www.sgam.fr=20
 =20
                                ********=20
 =20
This message and any attachments (the "message") are confidential and inten=
ded solely for the addressees.=20
Any unauthorised use or dissemination is prohibited.=20
E-mails are susceptible to alteration.=20
Neither Societe Generale Asset Management nor any of its subsidiaries or af=
filiates shall be liable for the message if altered, changed or falsified.=20
=20
Find out more about Societe Generale Asset Management's proposal on www.sga=
m=2Ecom

------_=_NextPart_001_01C7A754.9160D6C3
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<html xmlns:v=3D"urn:schemas-microsoft-com:vml" xmlns:o=3D"urn:schemas-micr=
osoft-com:office:office" xmlns:w=3D"urn:schemas-microsoft-com:office:word" =
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; charset=3Diso-8859-1">
<meta name=3DGenerator content=3D"Microsoft Word 11 (filtered medium)">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.EmailStyle19
	{mso-style-type:personal-reply;
	font-family:Arial;
	color:navy;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 70.85pt 70.85pt;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=3DFR link=3Dblue vlink=3Dblue>

<div class=3DSection1>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>Bigarrays, in my
understanding are essentially c structure, with a pointer to date, referenc=
e of
usages, &#8230;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>It is very similar =
to the
gsl vector matrix structure.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>You can look at the
ocamlgsl binding to see how easily bigarrays are transformed into gsl vector
and matrices.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>To illustrate my an=
swier,
I will try to be more specific, and give some c code snapshots.<o:p></o:p><=
/span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>Let&#8217;s says yo=
u have
your library function called minimizer(&#8230;,array1, &#8230;)<o:p></o:p><=
/span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>array1 is a c double
array.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>Your goal is to cre=
ate a
c function called caml_wrap_minimizer, which will be called from CAML.<o:p>=
</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>This function will =
take
into argument the function f to minimize, the initial starting point,
constraints, target point, &#8230;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>View from caml, the
minimize function have a signature like (including levmar definitions)<o:p>=
</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>(******************=
******************
wrapper.ml ********************************************)<o:p></o:p></span><=
/font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>open Bigarray<o:p><=
/o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>type float_vector =
=3D (float,
float64_elt, c_layout) Array1.t <o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>type float_matrix =
=3D (float,
float64_elt, c_layout) Array2.t <o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>type stopping=3D<o:=
p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Small_Grandien=
t<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Small_Dp<o:p><=
/o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Stop_Itmax<o:p=
></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Matrix_Singula=
r<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Error_Reductio=
n_Saturated<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 |Small_e_2<o:p>=
</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>type calibrationInf=
o=3D<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0 {initial_=
e_2:float;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 stoppi=
ng_e_2:float;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 </span=
></font><font
size=3D2 color=3Dnavy face=3DArial><span lang=3DDE style=3D'font-size:10.0p=
t;font-family:
Arial;color:navy'>stopping_J_T_e_inf:float;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 </span=
></font><font
size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'font-size:10=
.0pt;
font-family:Arial;color:navy'>stopping_Dp_2:float;<o:p></o:p></span></font>=
</p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 stoppi=
ng_max_J_T_J:float;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 iterat=
ions:int;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 stoppi=
ng_reason:stopping;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 functi=
on_evaluation:int;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0 jacobi=
an_evalutaion:int;}<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>external workspace_=
size: ?m:int
-&gt; ?n:int -&gt; ?analyticJacobian:bool -&gt; int =3D<o:p></o:p></span></=
font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 &quot;workspace=
_size&quot;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>(** gneral minimiza=
tion *)<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>external dlevmar_de=
r: ?tau:float
-&gt; ?epsilon1:float -&gt; ?epsilon2:float -&gt;<o:p></o:p></span></font><=
/p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 ?epsilon3:float=
 -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0 ?f:(float=
_vector -&gt;
float_vector -&gt; unit) -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0 ?j:=
(float_vector -&gt;
float_matrix -&gt;unit) -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0 ?p:float_vector -&gt;
?x:float_vector -&gt; ?itmax:int -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0 ?work:float_vector
-&gt; ?covar:float_matrix -&gt; calibrationInfo =3D<o:p></o:p></span></font=
></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0 </span></font><font
size=3D2 color=3Dnavy face=3DArial><span lang=3DDE style=3D'font-size:10.0p=
t;font-family:
Arial;color:navy'>&quot;dlevmar_der_bytecode&quot; &quot;dlevmar_der_native=
&quot;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>external dlevmar_di=
f: ?tau:float
-&gt; ?epsilon1:float -&gt; ?epsilon2:float -&gt;<o:p></o:p></span></font><=
/p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 ?epsilon3:float=
 -&gt; ?delta:float
-&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0 </span></=
font><font
size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'font-size:10=
.0pt;
font-family:Arial;color:navy'>?f:(float_vector -&gt; float_vector -&gt; uni=
t) -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0 ?p:=
float_vector -&gt;
?x:float_vector -&gt; ?itmax:int -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0 ?work:float_vector
-&gt; ?covar:float_matrix -&gt;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0 ?tempp:float_vector
-&gt; ?tempx:float_vector -&gt; calibrationInfo =3D<o:p></o:p></span></font=
></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0 </span></font><font
size=3D2 color=3Dnavy face=3DArial><span lang=3DDE style=3D'font-size:10.0p=
t;font-family:
Arial;color:navy'>&quot;dlevmar_dif_bytecode&quot; &quot;dlevmar_dif_native=
&quot;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>(******************=
******************
wrapper.ml ********************************************)<o:p></o:p></span><=
/font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
DE
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>f is the function that computes x =3D f(p) and ou=
r goal
is<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>starting from p, find the point p* verifying<o:p>=
</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>f(p*)=3Dx<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>In case we know the jacobian analytically, the
jacobian function j is passed.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>If not, we have to use numerical jacobian computa=
tion.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>What you have to keep in mind is that the vector p
will be modified in memory by the c function.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'>I will emphasize a bit more the c code.<o:p></o:p=
></span></font></p>

<p class=3DMsoNormal><font size=3D2 face=3DArial><span lang=3DEN-GB style=
=3D'font-size:
10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>(******************=
******************
wrapper.c ********************************************)<o:p></o:p></span></=
font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static double *Vdat=
a(value
=A0v)<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>{<o:p></o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0 return Bi=
garray_val(v)-&gt;data;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>}<o:p></o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static value fg; /*=
 : vector
-&gt; vector -&gt; unit */<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static double * cte=
mpp, *
ctempx;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static value tempp;=
<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static value tempx;=
<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>static void wrap_f_=
dif1(double
*p, double *hx, int m, int n, void *adata)<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>{<o:p></o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0memcpy(Vdata(=
tempp),p,m*sizeof(double));<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 callback2(fg,te=
mpp,tempx);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 memcpy(hx,Vdata=
(tempx),n*sizeof(double));<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 <o:p></o:p></sp=
an></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>}<o:p></o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>CAMLprim value dlev=
mar_dif_native(value
tau, value epsilon1, value epsilon2, value epsilon3, value delta,<o:p></o:p=
></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=
=A0=A0
value f, value p, value x, value itmax, <o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=A0=
=A0=A0
value work, value covar, value temp_p, value temp_x)<o:p></o:p></span></fon=
t></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>{<o:p></o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 double info[LM_=
INFO_SZ];<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 double opts[LM_=
OPTS_SZ];<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 CAMLparam5(tau,=
epsilon1,epsilon2,epsilon3,f);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 CAMLxparam5(p,x=
,itmax,covar,work);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 CAMLxparam3(tem=
p_p,temp_x,delta);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 CAMLlocal1(res)=
;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 </span></font><=
font
size=3D2 color=3Dnavy face=3DArial><span style=3D'font-size:10.0pt;font-fam=
ily:Arial;
color:navy'>int n;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 int m;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 <o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 double *cp;<o:p></o:p></span></fon=
t></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 double *cfvec;<o:p></o:p></span></=
font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 double *ccovar;<o:p></o:p></span><=
/font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 double *cwork;<o:p></o:p></span></=
font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span style=
=3D'font-size:
10.0pt;font-family:Arial;color:navy'>=A0 </span></font><font size=3D2 color=
=3Dnavy
face=3DArial><span lang=3DEN-GB style=3D'font-size:10.0pt;font-family:Arial;
color:navy'>int citmax;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 int ret;<o:p></=
o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 fg =3D Field(f,=
0);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 caml_register_g=
lobal_root(&amp;fg);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 tempp =3D Field=
(temp_p,0);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 ctempp =3D Vdat=
a(tempp);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 tempx =3D Field=
(temp_x,0);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 ctempx =3D Vdat=
a(tempx);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 caml_register_g=
lobal_root(&amp;tempp);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>=A0 caml_register_g=
lobal_root(&amp;tempx);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'><o:p>&nbsp;</o:p></=
span></font></p>

<div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'>=A0 <o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'><o:p>&nbsp;</o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0 ret =3D dlevmar_dif(=
<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0=A0=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0 &amp;wrap_f_dif1,&#8230;<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0<o:p></o:p></span></f=
ont></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0 caml_remove_global_r=
oot(&amp;tempp);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0 caml_remove_global_r=
oot(&amp;tempx);
<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>=A0 caml_remove_global_r=
oot(&amp;fg);<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'><o:p>&nbsp;</o:p></span>=
</font></p>

<p class=3DMsoNormal><font size=3D3 color=3Dnavy face=3D"Times New Roman"><=
span
lang=3DEN-GB style=3D'font-size:12.0pt;color:navy'>}<o:p></o:p></span></fon=
t></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>(******************=
******************
wrapper.c ********************************************)<o:p></o:p></span></=
font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'>When you look thoroughly to the wrap_f_dif1 func=
tion, you
get a clear understanding of what I am trying to do.<o:p></o:p></span></fon=
t></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'>After having registered f, temp and tempw passed=
 from
caml as global_roots, when I have to call my caml function for minimization=
, i
copy the c pointers of my c function to the bigarray structure behind temp =
and
tempx, and do a callback2 to have the function computed in the caml world.<=
o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'>Hope this helps.<o:p></o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span lang=3DE=
N-GB
style=3D'font-size:12.0pt'>Rabih<o:p></o:p></span></font></p>

<div class=3DMsoNormal align=3Dcenter style=3D'text-align:center'><font siz=
e=3D3
face=3D"Times New Roman"><span style=3D'font-size:12.0pt'>

<hr size=3D2 width=3D"100%" align=3Dcenter tabindex=3D-1>

</span></font></div>

<p class=3DMsoNormal><b><font size=3D2 face=3DTahoma><span style=3D'font-si=
ze:10.0pt;
font-family:Tahoma;font-weight:bold'>De&nbsp;:</span></font></b><font size=
=3D2
face=3DTahoma><span style=3D'font-size:10.0pt;font-family:Tahoma'>
caml-list-bounces@yquem.inria.fr [mailto:caml-list-bounces@yquem.inria.fr] =
<b><span
style=3D'font-weight:bold'>De la part de</span></b> Matthieu Dubuget<br>
<b><span style=3D'font-weight:bold'>Envoy=E9&nbsp;:</span></b> lundi 4 juin=
 2007
09:38<br>
<b><span style=3D'font-weight:bold'>=C0&nbsp;:</span></b> caml-list@inria.f=
r<br>
<b><span style=3D'font-weight:bold'>Objet&nbsp;:</span></b> Re: [Caml-list]
nonlinear fit function binding</span></font><o:p></o:p></p>

</div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal style=3D'margin-bottom:12.0pt'><font size=3D3
face=3D"Times New Roman"><span style=3D'font-size:12.0pt'>Thanks for your r=
eply,
Rabih.<o:p></o:p></span></font></p>

<div>

<p class=3DMsoNormal><span class=3Dgmailquote><font size=3D3 face=3D"Times =
New Roman"><span
style=3D'font-size:12.0pt'>2007/5/31, <a href=3D"mailto:RABIH.ELCHAAR@sgam.=
com">RABIH.ELCHAAR@sgam.com</a>
&lt;<a href=3D"mailto:RABIH.ELCHAAR@sgam.com">RABIH.ELCHAAR@sgam.com</a>&gt=
;:</span></font></span>
<o:p></o:p></p>

<div link=3Dblue vlink=3D"#606420">

<div>

<p><font size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'fon=
t-size:10.0pt;
font-family:Arial;color:navy'>I did a wrapping of the levmar library.</span=
></font><o:p></o:p></p>

</div>

</div>

<div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><br>
Unfortunately, since I am to use this in a commercial product, and I was not
able (yet ?) to convince my boss to release the sources, I can't use with
levmar, wich is GPLed... I may switch to cminpack. But i think this is not
related to my current question. <o:p></o:p></span></font></p>

</div>

<blockquote style=3D'border:none;border-left:solid #CCCCCC 1.0pt;padding:0c=
m 0cm 0cm 6.0pt;
margin-left:4.8pt;margin-right:0cm'>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<div link=3Dblue vlink=3D"#606420">

<div>

<p><font size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'fon=
t-size:10.0pt;
font-family:Arial;color:navy'>The approach I chose is to allocate bigarrays
from Caml, and pass them to the main C function, along with the function f.=
</span></font><o:p></o:p></p>

</div>

</div>

</blockquote>

<div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'>Does it mean that each time f function is called by the minimizatio=
n,
the C wrappers has to copy the params C array into your Bigarray pre-alloca=
ted
storage place? That's why I choosed to leave the C array untouched and wrap=
 a
Bigarray around it&nbsp; (should not be a big amount of memory). Am I wrong=
 in
going this way? <o:p></o:p></span></font></p>

</div>

<blockquote style=3D'border:none;border-left:solid #CCCCCC 1.0pt;padding:0c=
m 0cm 0cm 6.0pt;
margin-left:4.8pt;margin-right:0cm'>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><o:p>&nbsp;</o:p></span></font></p>

<p class=3DMsoNormal><font size=3D2 color=3Dnavy face=3DArial><span lang=3D=
EN-GB
style=3D'font-size:10.0pt;font-family:Arial;color:navy'>In the main functio=
n, I
register f and all the bigarrays as global roots, and then call as many tim=
es
the c sub function to compute the minimization.</span></font><o:p></o:p></p>

</blockquote>

<div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><o:p>&nbsp;</o:p></span></font></p>

</div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'>I do not understand this part. f is passed to the main (C) function
from OCaml: why do you need to register it as a global root? Same question =
for
the Bigarrays? Does it mean that else, nothing in OCaml world would point to
them? </span></font><font size=3D2 color=3Dnavy face=3DArial><span lang=3DE=
N-GB

style=3D'font-size:10.0pt;font-family:Arial;color:navy'>&nbsp;</span></font=
><o:p></o:p></p>

<div link=3Dblue vlink=3D"#606420">

<div>

<p><font size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'fon=
t-size:10.0pt;
font-family:Arial;color:navy'>Feel free to ask for more precisions if neede=
d</span></font><o:p></o:p></p>

<p><font size=3D2 color=3Dnavy face=3DArial><span lang=3DEN-GB style=3D'fon=
t-size:10.0pt;
font-family:Arial;color:navy'>Hope this helps.</span></font><o:p></o:p></p>

</div>

</div>

<div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'>Surely. I really need to acquire a better understanding of GC and C
interface in OCaml. <br>
Really, I do not understand what happens to those C allocated Bigarrays...<=
br>
<br>
Salutations<br>
<br>
Matthieu<o:p></o:p></span></font></p>

</div>

</div>

<p class=3DMsoNormal><font size=3D3 face=3D"Times New Roman"><span style=3D=
'font-size:
12.0pt'><o:p>&nbsp;</o:p></span></font></p>

</div>

<pre>Ce message et toutes les pieces jointes (ci-apres le "message") sont c=
onfidentiels et etablis a l'intention exclusive de ses destinataires.=20
Toute utilisation ou diffusion non autorisee est interdite.=20
Tout message electronique est susceptible d'alteration.=20
Societe Generale Asset Management et ses filiales declinent toute responsab=
ilite au titre de ce message s'il a ete altere, deforme ou falsifie.=20
 =20
Decouvrez l'offre et les services de Societe Generale Asset Management sur =
le site www.sgam.fr=20
 =20
                                ********=20
 =20
This message and any attachments (the "message") are confidential and inten=
ded solely for the addressees.=20
Any unauthorised use or dissemination is prohibited.=20
E-mails are susceptible to alteration.=20
Neither Societe Generale Asset Management nor any of its subsidiaries or af=
filiates shall be liable for the message if altered, changed or falsified.=20
=20
Find out more about Societe Generale Asset Management's proposal on www.sga=
m=2Ecom
</pre></body>

</html>

------_=_NextPart_001_01C7A754.9160D6C3--

