Return-Path: <basile@starynkevitch.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL,SPF_PASS 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 42C4CBC69
	for <caml-list@yquem.inria.fr>; Mon, 25 Jun 2007 17:42:16 +0200 (CEST)
Received: from kraid.nerim.net (smtp-101-monday.nerim.net [62.4.16.101])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5PFgF5L000916
	for <caml-list@yquem.inria.fr>; Mon, 25 Jun 2007 17:42:16 +0200
Received: from hector.lesours (ours.starynkevitch.net [213.41.244.95])
	by kraid.nerim.net (Postfix) with ESMTP id 71BEECF0C8;
	Mon, 25 Jun 2007 15:42:15 +0000 (UTC)
Received: from [192.168.0.1] (unknown [192.168.0.1])
	by hector.lesours (Postfix) with ESMTP id 2A2C220F1C9;
	Mon, 25 Jun 2007 17:42:11 +0200 (CEST)
Message-ID: <467FE228.5040907@starynkevitch.net>
Date: Mon, 25 Jun 2007 17:41:28 +0200
From: Basile STARYNKEVITCH <basile@starynkevitch.net>
User-Agent: Mozilla-Thunderbird 2.0.0.4 (X11/20070621)
MIME-Version: 1.0
To: Joel Reymont <joelr1@gmail.com>
Cc: Jon Harrop <jon@ffconsultancy.com>, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Function inlining and functor
References: <B7781FA7-8E67-48C0-8F3B-09AB58EF3E4E@lrde.epita.fr>	<200706251622.21625.jon@ffconsultancy.com> <3C66712F-1267-42A5-9D08-BBB9D5D579B1@gmail.com>
In-Reply-To: <3C66712F-1267-42A5-9D08-BBB9D5D579B1@gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: quoted-printable
X-Miltered: at concorde with ID 467FE257.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; basile:01 basile:01 inlining:01 functor:01 metaocaml:01 metaocaml:01 ocaml:01 abstraction:01 runtime:01 faiencerie:01 92340:01 reine:01 wrote:01 caml-list:01 8501:02 

Joel Reymont wrote:
> How would MetaOCaml help here?

You can generate code with MetaOcaml; in ordinary Ocaml (even fonctors) o=
nly function abstraction & application happens=20
(without any code generation at "runtime").

--=20
Basile STARYNKEVITCH         http://starynkevitch.net/Basile/
email: basile<at>starynkevitch<dot>net mobile: +33 6 8501 2359
8, rue de la Fa=EFencerie, 92340 Bourg La Reine, France
*** opinions {are only mines, sont seulement les miennes} ***

