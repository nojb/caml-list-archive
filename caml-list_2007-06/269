Return-Path: <Alain.Frisch@inria.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id DCB9CBC0A
	for <caml-list@yquem.inria.fr>; Fri, 15 Jun 2007 22:57:42 +0200 (CEST)
Received: from smtp3-g19.free.fr (smtp3-g19.free.fr [212.27.42.29])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5FKvgVn013035
	for <caml-list@yquem.inria.fr>; Fri, 15 Jun 2007 22:57:42 +0200
Received: from [192.168.0.1] (rke75-3-82-229-183-156.fbx.proxad.net [82.229.183.156])
	by smtp3-g19.free.fr (Postfix) with ESMTP id C15645A22F;
	Fri, 15 Jun 2007 22:57:41 +0200 (CEST)
Message-ID: <4672FD45.1000908@inria.fr>
Date: Fri, 15 Jun 2007 22:57:41 +0200
From: Alain Frisch <Alain.Frisch@inria.fr>
User-Agent: Thunderbird 2.0.0.4 (X11/20070604)
MIME-Version: 1.0
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Dynamic linking
References: <4672B855.7040103@inria.fr> <4672C3BB.3040106@janestcapital.com>	<4672D954.7080208@inria.fr> <200706151959.11629.jon@ffconsultancy.com>
In-Reply-To: <200706151959.11629.jon@ffconsultancy.com>
X-Enigmail-Version: 0.95.1
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4672FD46.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; frisch:01 frisch:01 toplevel:01 ocaml:01 native-code:01 ocaml:01 native-code:01 wrote:01 wrote:01 caml-list:01 latency:01 alain:01 alain:01 assembler:02 native:02 

Jon Harrop wrote:
> On Friday 15 June 2007 19:24:20 Alain Frisch wrote:
>> ... (Except for the native toplevel which will probably not be included.)
> 
> Is that "native" as in we're going to get an OCaml top-level with native-code 
> performance? If so, this is hugely important for me...

What kind of application do you have in mind?

It's "native" as in "we have an OCaml top-level with native-code
performance and a large latency". Each phrase is compiled with
ocamlopt's backend to an assembler file, which is then assembled, linked
into a shared library, dl-opened and then run. (Shared libraries will
never be closed so your OS must be strong enough to support that.)
Performances will likely be equal to ocamlopt's generated code (in
particular, we have cross-phrase optimizations).

Feel free to play with it ("make ocamlnat") and tell us whether this is
adequate for what you want to do.

  Alain

