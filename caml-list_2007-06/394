Return-Path: <caml-list@cstork.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id D0C1EBC6B
	for <caml-list@yquem.inria.fr>; Sat, 23 Jun 2007 23:04:58 +0200 (CEST)
Received: from stirner.roentgeninstitut.de (stirner.roentgeninstitut.de [212.110.109.210])
	by concorde.inria.fr (8.13.6/8.13.6) with SMTP id l5NL4wa6005434
	for <caml-list@yquem.inria.fr>; Sat, 23 Jun 2007 23:04:58 +0200
Received: (qmail 5721 invoked by uid 1000); 23 Jun 2007 14:04:55 -0700
Date: Sat, 23 Jun 2007 14:04:55 -0700
From: Christian Stork <caml-list@cstork.org>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Intended behavior of GenerateMap
Message-ID: <20070623210455.GA5526@stirner.roentgeninstitut.de>
References: <20070608083625.GA17210@stirner.roentgeninstitut.de> <cd67f63a0706231159sdd3a6a0y7cb37e953b224b37@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <cd67f63a0706231159sdd3a6a0y7cb37e953b224b37@mail.gmail.com>
X-Archive: encrypt
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Miltered: at concorde with ID 467D8AFA.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; 0200,:01 camlp:01 camlp:01 recursive:01 recursive:01 23,:98 suck:98 806:98 021:98 wrote:01 wrote:01 caml-list:01 caml-list:01 defined:02 defined:02 

On Sat, Jun 23, 2007 at 08:59:24PM +0200, Nicolas Pouillard wrote:
> On 6/8/07, Christian Stork <caml-list@cstork.org> wrote:
> >Hi,
> >
> >Is my understanding correct that running "camlp4of -filter map ..." over
> >
> >    class map = Camlp4Filters.GenerateMap.generated
> >
> >will produce a map class for *all* types defined in the current file --
> >irrespective if the types are incapsulated in a module (which is then
> >used for the Camlp4Trash trick)?
> >
> >Wouldn't it be much nicer, i.e., more economical and more precise, if
> >the above only produces a map class for the most recently defined type
> >/ mutually recursive types?
> >
> 
> Indeed it's nicer...
> 
> These days I've improved this generator to be able to generate,
> multiple maps and folds (Map{2,3,4...}, Fold{2,3,4...}). And also the
> combination of both: MapFold{,2,3,4...}.

Map2 as in List.map2?  So what happens if several ASTs have different
shapes?

BTW, where it that code?  Oh, just found it on the release310 branch.
Great, that means we'll get to use it in 3.10.1 already. :-)

> I've also followed your advise by taking in account only the last
> defined set of mutually recursive types.

Actually, I think the ideal solution is to generate a Map for
the last type and to "suck in" all the other types that are
(transitively) used by that definition.  (Maybe that's what your're
doing already anyway.)
 
Then you don't even need to change your current usages of GenerateMap.

> Note that the Camlp4Trash trick is still needed by those that wants
> have the type declaration separated from these classes.

Sure.

-- 
Chris Stork   <>  Support eff.org!  <>   http://www.ics.uci.edu/~cstork/
OpenPGP fingerprint:  B08B 602C C806 C492 D069  021E 41F3 8C8D 50F9 CA2F

