Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id ADE60BC6B
	for <caml-list@yquem.inria.fr>; Thu, 28 Jun 2007 13:37:51 +0200 (CEST)
Received: from ptb-relay03.plus.net (ptb-relay03.plus.net [212.159.14.214])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5SBbnxg014009
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 28 Jun 2007 13:37:51 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1I3sJm-00045M-P2
	for caml-list@yquem.inria.fr; Thu, 28 Jun 2007 12:37:46 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] The Implicit Accumulator: a design pattern using optional arguments
Date: Thu, 28 Jun 2007 12:32:01 +0100
User-Agent: KMail/1.9.7
References: <200706271314.35134.jon@ffconsultancy.com> <200706271653.27116.jon@ffconsultancy.com> <4683950E.3060609@functionality.de>
In-Reply-To: <4683950E.3060609@functionality.de>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200706281232.01643.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 46839D8D.004 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; mutation:01 ocaml:01 ocaml:01 frog:98 wrote:01 wrote:01 abstract:01 rec:01 rec:01 clearer:01 caml-list:01 lisp:01 nums:01 nums:01 linear:02 

On Thursday 28 June 2007 12:01:34 Thomas Fischbacher wrote:
> Jon Harrop wrote:
> > I think Thomas is referring to continuation passing style (CPS). That
> > isn't an optimization though (it slows things down) but it does let you
> > abstract away mutation. However, it is not entirely safe in the absence
> > of linear types.
>
> Which one do you prefer?
>
> let sum_nums n =
>    let rec work sum todo =
>      if todo=0 then sum
>      else work (sum+todo) (todo-1)
>    in work 0 n
> ;;
>
> let sum_nums2 n =
>    let rec work (sum,todo) =
>      if todo=0 then sum
>      else work ((sum+todo),(todo-1))
>    in work (0,n)
> ;;
>
> Certainly the first one, right?

I would write:

  let rec work sum = function
    | 0 -> sum
    | todo -> work (sum + todo) (todo - 1)

  let sum_nums n = work 0 n

because it is shorter, clearer, 65% faster and it is idiomatic ML rather than 
idiomatic Lisp.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The OCaml Journal
http://www.ffconsultancy.com/products/ocaml_journal/?e

