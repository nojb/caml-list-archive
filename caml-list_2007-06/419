Return-Path: <info@gerd-stolpmann.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL,MAILTO_TO_SPAM_ADDR 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id F20DBBC69
	for <caml-list@yquem.inria.fr>; Sun, 24 Jun 2007 20:29:12 +0200 (CEST)
Received: from moutng.kundenserver.de (moutng.kundenserver.de [212.227.126.177])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5OITCgn017358
	for <caml-list@yquem.inria.fr>; Sun, 24 Jun 2007 20:29:12 +0200
Received: from [84.59.112.187] (helo=gate.lan.gerd-stolpmann.de)
	by mrelayeu.kundenserver.de (node=mrelayeu6) with ESMTP (Nemesis),
	id 0ML29c-1I2Wpi3sCM-0002kj; Sun, 24 Jun 2007 20:29:11 +0200
Received: from flakew.lan.gerd-stolpmann.de (fw.lan.gerd-stolpmann.de [192.168.1.1])
	by gate.lan.gerd-stolpmann.de (Postfix) with ESMTP id 826A9C0AE;
	Sun, 24 Jun 2007 20:29:10 +0200 (CEST)
Subject: Re: [Caml-list] Execution time of class versus record
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: Arnaud Spiwack <aspiwack@lix.polytechnique.fr>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <467E9676.50905@lix.polytechnique.fr>
References: <467E8A6E.9050700@menta.net>
	 <200706241629.50551.jon@ffconsultancy.com>
	 <9d3ec8300706240848o6ac94a29q67f32d4774c88e0e@mail.gmail.com>
	 <467E9676.50905@lix.polytechnique.fr>
Content-Type: text/plain; charset=ISO-8859-15
Date: Sun, 24 Jun 2007 20:29:09 +0200
Message-Id: <1182709750.20268.22.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.6.1 
Content-Transfer-Encoding: quoted-printable
X-Provags-ID: V01U2FsdGVkX1/dceDgQxf34JTaxCqRP0OYQbMri+/lOipuauo
 PGzUkcEqiVfadmLLWQzcj6gocWpIUA5+bm0T5+yb8jWmGeP0Yk
 Hpo0bBpwcz5wFS81q9cQL5l9AI3EEHm
X-Miltered: at discorde with ID 467EB7F8.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; gerd:01 stolpmann:01 subtyping:01 subtypes:01 runtime:01 ocaml:01 -dlambda:01 seq:01 pervasives:01 seq:01 pervasives:01 cheers:01 ocamlopt:01 ocaml:01 beginner's:01 

Am Sonntag, den 24.06.2007, 18:06 +0200 schrieb Arnaud Spiwack:
> Which obviously raises the question: What is the motivation for the=20
> object to be encoded differently than records?=20

Objects support subtyping whereas records do not. And coercion costs
nothing, thanks to the object representation.

E.g.

let print_m2 obj =3D print_string obj#m2

let x1 =3D object method m2 =3D "x1" method m3 =3D 42 end

let x2 =3D object method m1 =3D 98 method m2 =3D "x2" end

print_m2 x1
print_m2 x2

See that in x1 the called method m2 is the first in the list, and in x2
it is the second? In a record the order of the components in the memory
layout is the same as the order in the type. If we did that the same
with objects, we would have to do rearrangements when we coerce objects
to supertypes (which happens here when print_m2 is called).

Note also that object types are structural and not nominal as for many
object-oriented languages (i.e. you don't have to declare that x1 and x2
will be used as subtypes of <m2:string>).

> I remember reading in=20
> Xavier Leroy's technical report about the first ZAM how he prepared the=
=20
> field for extensible records (to be able to implement objects). There=20
> the name of the fields were compiled into an adress, resulting no=20
> runtime conversion.
>=20
> I can imagine a couple of applications to the current situation (though=
=20
> I'm not so sure they would work), but I'm really interested in the=20
> original reason of this design choice.
>=20
>=20
> Arnaud Spiwack
>=20
>=20
>=20
> Till Varoquaux a =E9crit :
> > Objects in OCaml are dictionary based, which means methods names must
> > be looked up in a table in order to get there addresses. Record field=
s
> > on the other hand are addressed directly. Take two files test.ml and
> > test2.ml:
> > test.ml:
> > type b=3D
> > {
> > field:int
> > }
> > let a=3D{field=3D1};;
> > print_int a.field
> >
> > test2.ml
> > let a=3Dobject
> > method field=3D1
> > end;;
> > print_int a#field
> >
> > and dump there intermediate representation (-dlambda)
> >
> > test.ml
> >
> > (setglobal Test!
> >  (let (a/61 [0: 1])
> >    (seq (apply (field 27 (global Pervasives!)) (field 0 a/61))
> >      (makeblock 0 a/61))))
> >
> > test2.ml
> >
> > (setglobal Test2!
> >  (let
> >    (a/58
> >       (let
> >         (class/72 (apply (field 15 (global CamlinternalOO!)) [0:=20
> > #"field"])
> >          obj_init/80
> >            (let
> >              (field/61
> >                 (apply (field 6 (global CamlinternalOO!)) class/72=20
> > #"field"))
> >              (seq
> >                (apply (field 10 (global CamlinternalOO!)) class/72
> >                  (makeblock 0 field/61 0a 1))
> >                (function env/74
> >                  (apply (field 23 (global CamlinternalOO!)) 0a=20
> > class/72)))))
> >         (seq (apply (field 16 (global CamlinternalOO!)) class/72)
> >           (apply obj_init/80 0a))))
> >    (seq (apply (field 27 (global Pervasives!)) (send a/58 9671866))
> >      (makeblock 0 a/58))))
> >
> > You can now understand where the performance issues comes from.
> >
> > Cheers,
> > Till
> > On 6/24/07, Jon Harrop <jon@ffconsultancy.com> wrote:
> >> On Sunday 24 June 2007 16:14:54 tmp123@menta.net wrote:
> >> > Hello,
> >> >
> >> > I've tried to implement two equivalent small programs, the one usi=
ng
> >> > class, the other one using records. The resulting execution times =
says
> >> > that class are 7-8 times slower than record (compiled with ocamlop=
t=20
> >> in a
> >> > Intel machine).
> >> >
> >> > Please, knows someone what I'm doing wrong?
> >>
> >> You aren't doing anything wrong.
> >>
> >> --=20
> >> Dr Jon D Harrop, Flying Frog Consultancy Ltd.
> >> The OCaml Journal
> >> http://www.ffconsultancy.com/products/ocaml_journal/?e
> >>
> >> _______________________________________________
> >> Caml-list mailing list. Subscription management:
> >> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> >> Archives: http://caml.inria.fr
> >> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >>
> >
> >
>=20
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>=20
--=20
------------------------------------------------------------
Gerd Stolpmann * Viktoriastr. 45 * 64293 Darmstadt * Germany=20
gerd@gerd-stolpmann.de          http://www.gerd-stolpmann.de
Phone: +49-6151-153855                  Fax: +49-6151-997714
------------------------------------------------------------

