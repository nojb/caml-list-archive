Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id F2C2FBC6B
	for <caml-list@yquem.inria.fr>; Wed, 27 Jun 2007 11:11:02 +0200 (CEST)
Received: from pih-relay04.plus.net (pih-relay04.plus.net [212.159.14.131])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5R9B2N4001411
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 27 Jun 2007 11:11:02 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay04.plus.net with esmtp (Exim) id 1I3TY9-00042C-LG
	for caml-list@yquem.inria.fr; Wed, 27 Jun 2007 10:10:57 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] let rec and polymorphic functions
Date: Wed, 27 Jun 2007 10:05:10 +0100
User-Agent: KMail/1.9.7
References: <000e01c7b896$d3372440$6a7ba8c0@treble>
In-Reply-To: <000e01c7b896$d3372440$6a7ba8c0@treble>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200706271005.10837.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 468229A6.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ad-hoc:01 polymorphism:01 recursion:01 val:01 val:01 printf:01 ad-hoc:01 specifier:01 ocaml:01 ocaml:01 run-time:01 higher-order:01 recursive:01 recursion:01 recursive:01 


There are many problems with this. Google for ad-hoc polymorphism, polymorphic 
recursion and generic printing.

On Wednesday 27 June 2007 09:40:31 David Allsopp wrote:
>   out "TEST";

val out : string -> unit

>   out "%d" 0;

val out : format -> int -> unit

As printf is ad-hoc polymorphic, you must supply the format specifier 
immediately and OCaml will generate a custom printer for you. OCaml does not 
use run-time types so you cannot have a generic print function: you must 
specific print functions for each of your (possibly higher-order) types.

Also, recursive calls ossify the function to a monomorphic type, so you cannot 
do polymorphic recursion in OCaml. There are workaround using recursive 
modules or objects but I don't think this is what you want here.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The OCaml Journal
http://www.ffconsultancy.com/products/ocaml_journal/?e

