Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 9EA5DBC6E
	for <caml-list@yquem.inria.fr>; Fri,  1 Jun 2007 14:04:30 +0200 (CEST)
Received: from pih-relay04.plus.net (pih-relay04.plus.net [212.159.14.131])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l51C4UxP012185
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Fri, 1 Jun 2007 14:04:30 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay04.plus.net with esmtp (Exim) id 1Hu5rn-0007c4-D0
	for caml-list@yquem.inria.fr; Fri, 01 Jun 2007 13:04:27 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Comparison of OCaml and MLton for numerics
Date: Fri, 1 Jun 2007 12:58:58 +0100
User-Agent: KMail/1.9.7
References: <5195a210705302250u6a9e5adey4ed857480f9e5cd8@mail.gmail.com> <891bd3390706010429g2ac722bfmc6932b15393a62b9@mail.gmail.com> <20070601214326.e0a939a6.mle+ocaml@mega-nerd.com>
In-Reply-To: <20070601214326.e0a939a6.mle+ocaml@mega-nerd.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200706011258.59177.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 46600B4E.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 yaron:01 minsky:01 functors:01 ocaml:01 functors:01 lri:01 signoles:01 penalties:98 frog:98 wrote:01 wrote:01 caml-list:01 modules:02 modules:02 

On Friday 01 June 2007 12:43:26 Erik de Castro Lopo wrote:
> Yaron Minsky wrote:
> > I could not agree with this sentiment more.  Stephen actually now works
> > at Jane Street, and since his arrival he's taught us a  number of
> > techniques for using modules and functors to organize and factor code
> > more
> > effectively.  Some of these techniques were obviously born in the context
> > of Mlton, where they have no performance penalty.  It's downright
> > annoying to have to avoid these techniques in performance-sensitive code
> > in OCaml.  In other words, factoring out with functors and modules is
> > good style, but OCaml penalizes you for it.
>
> Can the defunctorizor help?
>
>     http://www.lri.fr/~signoles/ocamldefun/manual.html
>
> Erik

Indeed, after you defunctorize what performance penalties are left by modules?

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists/?e

