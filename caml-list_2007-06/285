Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 34EA5BC0A
	for <caml-list@yquem.inria.fr>; Sat, 16 Jun 2007 19:39:40 +0200 (CEST)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5GHddAX026942
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sat, 16 Jun 2007 19:39:40 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay01.plus.net with esmtp (Exim) id 1HzcFO-0001CE-Ca
	for caml-list@yquem.inria.fr; Sat, 16 Jun 2007 18:39:38 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Dynamic linking
Date: Sat, 16 Jun 2007 18:33:32 +0100
User-Agent: KMail/1.9.7
References: <4672B855.7040103@inria.fr> <4672C3BB.3040106@janestcapital.com> <4672D954.7080208@inria.fr>
In-Reply-To: <4672D954.7080208@inria.fr>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200706161833.32255.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 4674205B.003 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; frisch:01 toplevel:01 ocaml's:01 native-code:01 ocaml:01 cmxa:01 compilation:01 ocaml:01 frog:98 unix:01 unix:01 wrote:01 caml-list:01 cma:01 alain:01 

On Friday 15 June 2007 19:24:20 Alain Frisch wrote:
> Except for the native toplevel which will probably not be included.

The native top-level is the bit that interests me the most, as this combines 
interactivity with OCaml's superb native-code performance.

I just benchmarked the new top-level and it runs my ray tracer 17x faster:

$ time ocaml unix.cma ray.ml >image.pgm

real    1m11.656s
user    2m21.106s
sys     0m0.331s

$ time ocamlnat unix.cmxa ray.ml >image.pgm

real    0m4.294s
user    0m6.265s
sys     0m0.521s

Interactive compilation to native code was one of the main benefits of F# over 
OCaml. So I, for one, would dearly love to see this in the mainstream OCaml!

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists/?e

