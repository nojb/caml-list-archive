Return-Path: <jeremy.yallop@ed.ac.uk>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id D0F6FBC0A
	for <caml-list@yquem.inria.fr>; Wed, 13 Jun 2007 12:55:00 +0200 (CEST)
Received: from bdmail1.accesst.com (pop.bulldoghome.com [83.245.1.230])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5DAt020015868
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Wed, 13 Jun 2007 12:55:00 +0200
Received: from host-84-9-232-186.bulldogdsl.com ([84.9.232.186] helo=[192.168.123.191])
	by bdmail1.accesst.com with esmtpa (Exim 4.50)
	id 1HyQQA-0005jR-VC
	for caml-list@inria.fr; Wed, 13 Jun 2007 11:49:51 +0100
Message-ID: <466FCB46.1070304@ed.ac.uk>
Date: Wed, 13 Jun 2007 11:47:34 +0100
From: Jeremy Yallop <jeremy.yallop@ed.ac.uk>
User-Agent: Mozilla-Thunderbird 2.0.0.0 (X11/20070601)
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: building executables with camlp4
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 466FCD04.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; camlp:01 camlp:01 cmx:01 lib:01 cmxa:01 parsers:01 cmx:01 parsers:01 bytecode:01 cmo:01 executables:01 grammar:01 linking:02 linking:02 executable:03 

With the 3.09 version of camlp4 I could build an executable for my 
extension by linking against various .cmx files.  Is it possible to do 
something similar with the new camlp4 in 3.10?  I've tried linking with

    camlp4lib.cmxa
    Camlp4Parsers/Camlp4OCamlRevisedParser.cmx
    Camlp4Parsers/Camlp4OCamlParser.cmx
    Camlp4Printers/Camlp4OCamlRevisedPrinter.cmx
    Camlp4Printers/Camlp4OCamlPrinter.cmx

which results in an executable that fails with Not_found when run, 
apparently due to a failure to delete a rule from the grammar.  Building 
a set of bytecode (.cmo) files and loading them with camlp4o works as 
expected.

In case it makes things simpler I'm using OCamlMakefile,

Jeremy.

