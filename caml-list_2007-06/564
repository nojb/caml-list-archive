Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id E827FBC6B
	for <caml-list@yquem.inria.fr>; Thu, 28 Jun 2007 15:11:08 +0200 (CEST)
Received: from ptb-relay02.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5SDB8vv032002
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 28 Jun 2007 15:11:08 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay02.plus.net with esmtp (Exim) id 1I3tm7-00063A-GW
	for caml-list@yquem.inria.fr; Thu, 28 Jun 2007 14:11:07 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] The Implicit Accumulator: a design pattern using optional arguments
Date: Thu, 28 Jun 2007 14:05:22 +0100
User-Agent: KMail/1.9.7
References: <200706271314.35134.jon@ffconsultancy.com> <200706281232.01643.jon@ffconsultancy.com> <4683B0C7.7060201@functionality.de>
In-Reply-To: <4683B0C7.7060201@functionality.de>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200706281405.22424.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 4683B36C.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 frog:98 wrote:01 wrote:01 rec:01 clearer:01 caml-list:01 lisp:01 nums:01 idiomatic:02 idiomatic:02 implicit:03 let:03 let:03 

On Thursday 28 June 2007 13:59:51 Thomas Fischbacher wrote:
> Jon Harrop wrote:
> > I would write:
> >
> >   let rec work sum = function
> >
> >     | 0 -> sum
> >     | todo -> work (sum + todo) (todo - 1)
> >
> >   let sum_nums n = work 0 n
> >
> > because it is shorter, clearer, 65% faster and it is idiomatic ML rather
> > than idiomatic Lisp.
>
> You are still evading the issue: you nevertheless pass multiple arguments to
> a continuation, rather than consing a return value.  

Continuations and consing have nothing to do with this.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The OCaml Journal
http://www.ffconsultancy.com/products/ocaml_journal/?e

