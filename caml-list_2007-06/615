Return-Path: <jeremy.yallop@ed.ac.uk>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id B57E8BC6B
	for <caml-list@yquem.inria.fr>; Fri, 29 Jun 2007 20:53:48 +0200 (CEST)
Received: from bdmail1.accesst.com (pop.bulldoghome.com [83.245.1.230])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l5TIrmZb028913
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Fri, 29 Jun 2007 20:53:48 +0200
Received: from host-84-9-232-87.bulldogdsl.com ([84.9.232.87] helo=[192.168.123.191])
	by bdmail1.accesst.com with esmtpa (Exim 4.50)
	id 1I4LSd-0001te-Os; Fri, 29 Jun 2007 19:44:51 +0100
Message-ID: <468555F9.7090005@ed.ac.uk>
Date: Fri, 29 Jun 2007 19:56:57 +0100
From: Jeremy Yallop <jeremy.yallop@ed.ac.uk>
User-Agent: Mozilla-Thunderbird 2.0.0.4 (X11/20070618)
MIME-Version: 1.0
To: skaller <skaller@users.sourceforge.net>
Cc: Caml List <caml-list@inria.fr>
Subject: Re: [Caml-list] ANN: pattern guards
References: <Pine.LNX.4.64.0706291518250.15944@rydell.inf.ed.ac.uk> <1183141562.5305.19.camel@rosella.wigram>
In-Reply-To: <1183141562.5305.19.camel@rosella.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4685553C.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; 0100,:01 ocaml:01 bindings:01 'when':01 wrote:01 wrote:01 precedence:01 caml-list:01 expression:02 expression:02 match:02 match:02 variables:02 variables:02 scope:03 

skaller wrote:
> On Fri, 2007-06-29 at 15:19 +0100, Jeremy Yallop wrote:
>> I'm pleased to announce the initial release of `patterns', an OCaml
>> extension providing general-purposes additions to pattern matching.
> 
> I want to do this:
> 
> 	match x with
> 	| Y x with a=x and b=x
> 	| X (y,z) with a=y and b=z
> 	-> f a b

Interesting.  Do you want 'z' to be in scope in the guards ("a=y" etc.) 
but not in the expression ("f a b")?  Or do you just generally want to 
allow or-patterns where the branches have different bindings as long as 
the expression only uses variables that are bound in every branch?

> This won't work at the moment for two reasons:
> 
> * I assume the precedence of 'with' is the same as 'when',
>   which is not convenient

Right: "with" scopes over an entire match-case, which might include 
or-patterns, just as with "when".

> * the variables in the basic patterns don't agree
> 
> The whole point of the above is to switch all the branches
> to normalised variables. At the moment I have to write:
> 
> 	match x with
> 	| Y x -> f x x
> 	| X (y,z) -> f y z

Unless I'm mistaken you can write this as

     match x with
     | Y (y as z)
     | X (y,z)    -> f y z

Is there some more general case for which this won't work out?

Jeremy.

