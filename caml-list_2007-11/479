Return-Path: <rich@annexia.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id BDA94BC6B
	for <caml-list@yquem.inria.fr>; Tue, 27 Nov 2007 16:35:57 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CALbHS0dQRFuw/2dsb2JhbACRCg
X-IronPort-AV: E=Sophos;i="4.23,220,1194217200"; 
   d="scan'208";a="6238199"
Received: from furbychan.cocan.org ([80.68.91.176])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 27 Nov 2007 16:35:57 +0100
Received: from rich by furbychan.cocan.org with local (Exim 3.35 #1 (Debian))
	id 1Ix2TZ-0005Gp-00; Tue, 27 Nov 2007 15:35:53 +0000
Date: Tue, 27 Nov 2007 15:35:53 +0000
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Floating exception
Message-ID: <20071127153553.GA20004@furbychan.cocan.org>
References: <47471716.3020304@irisa.fr> <200711232236.39691.jon@ffconsultancy.com> <474BF061.2070604@lexifi.com> <200711271119.26078.jon@ffconsultancy.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200711271119.26078.jon@ffconsultancy.com>
User-Agent: Mutt/1.5.13 (2006-08-11)
From: Richard Jones <rich@annexia.org>
X-Spam: no; 0.00; ocaml:01 bindings:01 lablgl:01 bindings:01 bytecode:01 dependencies:01 ocaml:01 trivial:01 dependencies:01 rpms:01 libc:01 libc:01 buffer:01 enum:01 pervasives:01 

On Tue, Nov 27, 2007 at 11:19:25AM +0000, Jon Harrop wrote:
> There isn't really anything more that I can add. We wrote the OCaml the 
> obvious way (no unsafe code) and used the conventional bindings (LablGL) and 
> distributed the binary, only to find that too many people had reliability 
> problems for it to be a viable product so we pulled it.

It does sound like the bindings or GL implementations are to blame.
virt-top is used by an indeterminate number of people, as a binary,
and I've not had any reports like this.  It does plenty of floating
point, it's native code, and compiled in the usual way.

> Now we're trying to give it away in bytecode form and even that is a major 
> PITA because we need to install and compile against (including dependencies) 
> several different minor-minor versions of OCaml just to garner enough 
> interest to find out (from the only person who has given us feedback having 
> managed to compile it out of 75 downloads so far this month) that even these 
> trivial demos don't work.

In Fedora I instituted a system of rigorous dependencies so that
binary RPMs can't be installed if they were built against the wrong
OCaml.  Doesn't help you though :-(

# rpm -q --requires ocaml-csv
rpmlib(PayloadFilesHavePrefix) <= 4.0-1
rpmlib(CompressedFileNames) <= 3.0.4-1
rpmlib(VersionedDependencies) <= 3.0.3-1
libc.so.6()(64bit)  
libc.so.6(GLIBC_2.2.5)(64bit)  
libc.so.6(GLIBC_2.3)(64bit)  
libc.so.6(GLIBC_2.3.4)(64bit)  
libc.so.6(GLIBC_2.4)(64bit)  
libdl.so.2()(64bit)  
libdl.so.2(GLIBC_2.2.5)(64bit)  
libm.so.6()(64bit)  
libm.so.6(GLIBC_2.2.5)(64bit)  
ocaml(Array) = aa8e3cd5824f9bb40b93fcd38d0c95b5
ocaml(Buffer) = f6cef633ea14963b84b79c4095c63dc3
ocaml(Enum) = c16e527384c2b6d71d8b19582503f5f1
ocaml(ExtList) = f0f729e9c5635a8010fc862a9c31fed4
ocaml(Obj) = 5cfae708052c692ea39d23ed930fd64d
ocaml(Pervasives) = 8ba3d1faa24d659525c9025f41fd0c57
ocaml(Printf) = 5dbbf45a03b54e6dbfcf39178d0d6341
ocaml(String) = 2c162ab314b2f0a2cfd22d471b2e21ab
ocaml(runtime) = 3.10.0

> My guess is that the glut libraries installed on these computers are causing 
> the problems. Perhaps we should write bindings to GLX or use LablGTK2 to 
> evade glut and see what happens but, of course, we cannot reproduce the 
> problem here and there are a huge number of variations we could try without 
> having any real idea of what is going wrong.

Do you remember if the crashes happened at predictable places (for
your customers) or were they random each time the program ran?

Rich.

-- 
Richard Jones
Red Hat

