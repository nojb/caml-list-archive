Return-Path: <petchema@concept-micro.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 6C506BC69
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 08:53:29 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ah4FACyVN0dYvxoL/2dsb2JhbACBWw
X-IronPort-AV: E=Sophos;i="4.21,403,1188770400"; 
   d="scan'208";a="4129202"
Received: from ns.graphicgalerie.com ([88.191.26.11])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 12 Nov 2007 08:53:28 +0100
Received: from polo.concept-micro.com (ABordeaux-103-1-2-216.w80-11.abo.wanadoo.fr [80.11.199.216])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by ns.graphicgalerie.com (Postfix) with ESMTP id 3CA16BB4038
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 08:53:27 +0100 (CET)
Date: Mon, 12 Nov 2007 08:53:25 +0100
From: Pierre =?ISO-8859-15?B?RXRjaGVtYe906Q==?= <petchema@concept-micro.com>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] debugging memory leaks
Message-Id: <20071112085325.01abdcf3.petchema@concept-micro.com>
In-Reply-To: <86183D4E-184A-4F26-84F9-93411D070B38@maubi.net>
References: <86183D4E-184A-4F26-84F9-93411D070B38@maubi.net>
Organization: Concept Micro 33 SARL
X-Mailer: Sylpheed 2.4.7 (GTK+ 2.12.1; i486-pc-linux-gnu)
X-TRP: honey@concept-micro.com
X-Face: "1<D_YW=(Z@$kl':M7Gci`gAa"U.$bCElfWd@{578%xR_9MHE`RMTfG%f.dMf^xIS("~Dw$ sCx~,%u0+T^YTq]o
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; ocaml:01 minimally:01 compiler:01 ocaml:01 ocaml-:01 heap:01 pps:01 pps:01 caml-list:01 enumerate:01 jussieu:01 jussieu:01 pierre:02 objects:02 readme:03 

Le Sun, 11 Nov 2007 21:56:06 -0800, Chris Waterson <waterson@maubi.net> a écrit :

> I have a fairly substantial OCaml application that leaks memory.   
> What tools or techniques do people use to track down memory leaks?   
> Minimally, is there a way to enumerate the live objects in the heap?

There's ocaml-memprof, a compiler patch that adds memory profiling
features to ocaml programs;

Latest update of the patch itself, as far as I know:
http://www.pps.jussieu.fr/~smimram/docs/ocaml-3.09.3-memprof.patch

Readme:
http://www.pps.jussieu.fr/~smimram/docs/README.memprof

