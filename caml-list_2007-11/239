Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id D9DDBBC69
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 01:43:04 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAK4vN0fAbSoIh2dsb2JhbACPBgEBAQgKKQ
X-IronPort-AV: E=Sophos;i="4.21,402,1188770400"; 
   d="scan'208";a="19171334"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 12 Nov 2007 01:43:04 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@yquem.inria.fr>
Received: from einhorn.in-berlin.de (localhost [127.0.0.1])
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id lAC0h3ap024668
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 01:43:03 +0100
Received: (from www-data@localhost)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Submit) id lAC0h3uw024660
	for caml-list@yquem.inria.fr; Mon, 12 Nov 2007 01:43:03 +0100
X-Authentication-Warning: einhorn.in-berlin.de: www-data set sender to oliver@first.in-berlin.de using -f
Received: from dslb-088-073-093-214.pools.arcor-ip.net (dslb-088-073-093-214.pools.arcor-ip.net [88.73.93.214]) 
	by webmail.in-berlin.de (IMP) with HTTP 
	for <first@localhost>; Mon, 12 Nov 2007 01:43:02 +0100
Message-ID: <1194828182.4737a196e3582@webmail.in-berlin.de>
Date: Mon, 12 Nov 2007 01:43:02 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Why 'Graphics.wait_next_event' doesn't reply anymore ?
References: <20071110230145.3aebafe4@localhost.localdomain> <20071111150720.4f8d1c44@localhost.localdomain> <1194799714.473732620f33e@webmail.in-berlin.de> <20071111204019.4697d387@localhost.localdomain>
In-Reply-To: <20071111204019.4697d387@localhost.localdomain>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Spam: no; 0.00; bandel:01 in-berlin:01 bandel:01 in-berlin:01 printf:01 printf:01 stdout:01 imho:01 imho:01 wrote:01 oliver:01 oliver:01 caml-list:01 short:01 toto:02 

Hi Fabrice,

sorry, have not much time to answer, I think it's time to sleep ;-)

But a short one...


Zitat von Fabrice Marchant <fabrice.marchant@orange.fr>:

>   Hi Oliver !
>
>  Thanks to have considered my problem.
>
> On Sun, 11 Nov 2007 17:48:34 +0100
> Oliver Bandel <oliver@first.in-berlin.de> wrote:
>

[...]
> >   let code1 () =
> >         let x = ref 0 in
> >         while true do
> >           incr x;
> >           Printf.printf "alpha %d\n" !x;
> >           flush stdout
> (*                      ;
>             display_mode false;
>             fill_circle 100 100 20;
>             synchronize ()*)
> >         done
[...]

Why do you want to call synchronize that often?

I didn't tested your code, so I don't know what's going wrong.
But calling synchronize that often IMHO makes no sense.
It's similar to calling Thread.yield to often.

For an average eye/viewer, it would be enough to call
synchronize all 1/25 seconds.
So, a thread that makes the timing and then calls
synchronize would be the right way, IMHO.
Or if you need higher frame rates, call it more often.
But I doubt in today machines, putting it inside a loop as you did,
would make sense.
And it also will waste ressources. It's not needed that fast,
because the eye is not fast enough.
So, there is no reason to call that function so often.

BTW: What's about your code, you sent?
Did you throw it away, or do you want some help there?
It looked to big for spare time, but maybe the next days
I can look on it. But possibly, if the toto.ml
(the code on which I already answered) is OK for you,
I would ignore your first code.


Ciao,
   Oliver

P.S.: Good night ;-)

