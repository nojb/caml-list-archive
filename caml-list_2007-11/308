Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	MAILTO_TO_SPAM_ADDR autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 7D52EBC69
	for <caml-list@yquem.inria.fr>; Thu, 15 Nov 2007 01:17:37 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAEMfO0eCNhAB/2dsb2JhbACQTQ
X-IronPort-AV: E=Sophos;i="4.21,418,1188770400"; 
   d="scan'208";a="4261470"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 15 Nov 2007 01:17:36 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id lAF0HTY4016265;
	Thu, 15 Nov 2007 09:17:30 +0900 (JST)
Date: Thu, 15 Nov 2007 09:17:14 +0900 (JST)
Message-Id: <20071115.091714.58364160.garrigue@math.nagoya-u.ac.jp>
To: thelema314@gmail.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Compiler feature - useful or not?
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <473B28DF.2050705@gmail.com>
References: <Pine.LNX.4.64.0711140116030.17159@martin.ec.wink.com>
	<20071114075827.GA24058@yquem.inria.fr>
	<473B28DF.2050705@gmail.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; compiler:01 low-level:01 compiler:01 casts:01 syntax:01 sig:01 val:01 struct:01 camlp:01 coercions:01 sig:01 val:01 edgar:98 'from':98 syntactic:01 

From: Edgar Friendly <thelema314@gmail.com>

> With a bit of low-level support, I imagine it not difficult to implement
> the following:
> 
> type row = private int constraint (fun i -> i >= 0)
> 
> such that the compiler uses the provided constraint function to check
> any (x :> row) casts, throwing an exception(?) on false.  This solution
> wouldn't involve the module system just to have positive integer types,
> and gets rid of the function call overhead on 'from'.

This syntax could be nice, but it is just syntactic sugar for

module Private_row : sig
  type row = private int
  val new_row : int -> row
end = struct
  type row = int
  let new_row i = assert (i >= 0); i
end
include Private_row

I'm sure camlp4 can do that.

Direct compiler support couldn't give you more:

* you cannot use a coercion to create a row: coercions are purely
  type-level features, and cannot execute any code; we don't want to
  change this. On the other hand coercing row to int could be made ok.

* the "constraint ..." part cannot appear in an interface, since
  interfaces cannot contain expressions

Changing any of these two would be difficult indeed.

(To be honest, the above results in
  module Private_row : sig type row = private int val new_row : int -> row end
  type row = Private_row.row
  val new_row : int -> row = <fun>
meaning that Private_row is not completely hidden, eventhough we don't
need to mention it in an interface.)

Jacques Garrigue

