Return-Path: <viktor.tron.ml@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: **
X-Spam-Status: No, score=2.3 required=5.0 tests=HTML_10_20,HTML_MESSAGE,
	SPF_NEUTRAL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 9EC3FBC69
	for <caml-list@yquem.inria.fr>; Wed, 21 Nov 2007 08:43:29 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAANpvQ0dA6aayi2dsb2JhbACCPDeMPwEBAQgCBhMRBYER
X-IronPort-AV: E=Sophos;i="4.21,445,1188770400"; 
   d="scan'208";a="19521904"
Received: from py-out-1112.google.com ([64.233.166.178])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 21 Nov 2007 08:43:28 +0100
Received: by py-out-1112.google.com with SMTP id u52so7224695pyb
        for <caml-list@yquem.inria.fr>; Tue, 20 Nov 2007 23:43:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type;
        bh=3lR2mpGG5Jd/3vm2gqpaXDM+71xfcS2pNuMD1ki+ATQ=;
        b=eogareZTLbIB0IO0BLODGYrmyABum4dEl54VEwqkxehRQBYxufH0fVadNRKDwA8UzRqjP2PdStG60g6ZhmT7B/ky7V7gZF9AqvHB5t/XcdhJHDOLkUtaBaqwJrQFpIOpbP6l19FbGPzVmOAXlrnVaYX9AnjFscwxxYgp3jJoAe0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:mime-version:content-type;
        b=gdBja+nZJFfSqg5zS5HtDlybGr4PMQ3+JoTpdK0OlPyazsBcIoHKTe6BeDTZP5K1z9ks4/HPprheCBIRygIedvzKDlg/ZL76X+iSIlNPxq0MuCBuIT05wzzekD/GIOGghFlGNl0JWyHF80qgOmUUebIHnmUOJuNiiz4xsS4kD4g=
Received: by 10.65.44.5 with SMTP id w5mr16223896qbj.1195631006048;
        Tue, 20 Nov 2007 23:43:26 -0800 (PST)
Received: by 10.65.224.20 with HTTP; Tue, 20 Nov 2007 23:43:25 -0800 (PST)
Message-ID: <8cc3d8520711202343q2951aee2lca188a185b84b511@mail.gmail.com>
Date: Wed, 21 Nov 2007 02:43:25 -0500
From: "viktor tron" <viktor.tron.ml@gmail.com>
To: "Caml Mailing List" <caml-list@yquem.inria.fr>
Subject: C libs from Ocaml libs
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_13446_23113918.1195631006030"
X-Spam: no; 0.00; libs:01 ocaml:01 libs:01 ocaml:01 bindings:01 foo:01 foo:01 cmxa:01 stub:01 bindings:01 callbacks:01 cmxa:01 lib:01 libfoo:01 stub:01 

------=_Part_13446_23113918.1195631006030
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Dear list,

Let me share with you my frustration over compiling a c library out of an
ocaml project. [apologies for long post]

This is now my third project where an ocaml implementation needs a c binding
and I keep on struggling
with the right build environment.

While it is very well documented how to compile and build applications with
ocaml bindings to
c implementations, the opposite way is a neglected topic.
sections 18.7-8 of the manual
http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html
plus a couple of pages of the o-reilly book is devoted to this topic.
The sporadic info found on mailing lists is not enough so I need your help.

The well known abstract problem is the following:

foo.ml: the ocaml routine root (responsible for foo.cmxa)
foo_export.ml the C API (register callback, exceptions, etc)
foo_stub.c the C bindings referring to the callbacks, containing init code
(foo_wrapper.ml the ocaml wrapper to foo)

clearly what I want is the following:

* foo.cmxa ocaml lib with ocaml entrypoints
* (foo: standalone executable from foo.cmxa and foo_wrapper.ml)
* libfoo: static and dynamic C library out of foo.cmxa, foo_export and
foo_stub

what do I do? now more or less according to the manual:

ocamlc -a <all files> fib.ml
ocamlc -custom -output-obj -o fib_caml.o fib.cma fib_export.ml
ocamlc -c fib_stub.c
cp /usr/local/lib/ocaml/libcamlrun.a fib.a
ar r fib.a fib_caml.o fib_stub.o
ranlib fib.a

or

ocamlc -a <all files> foo.ml
ocamlc -custom -output-obj -o foo_caml.o foo.cma foo_export.ml
ocamlc -c foo_stub.c
libtool -o libfoo.a foo_caml.o foo_stub.o /usr/local/lib/ocaml/libcamlrun.a

and then link the c program with foo

* I know that building on several platforms is always a challange but this
is such a simple routine.
if I have to use random command lines in my Makefile, I run into an autoconf
hell.
is their a truly plantform independent routine to do this?

* can someone explain to me how the how exactly .a file created with .cmxa
differ from an archive?
is it the ocaml sturtup code?

* why does the bytecode need the curses library when linking and why the
native doesn't?

* why does ocamlc have a -custom option and why does ocamlopt does not? do I
need the -custom options at all here?

* what do I do if I don't want to compile the ocaml runtime into my lib,
since they might use several
of my modules so just link at the end with the runtime lib
* what if I want to share ocaml code for the same reason?

and most importantly:

* how do I create dynamic libs, dlls for windows?

In general, I found not much help from the existing build tools:

* OCamlMake does not support creation of c libraries

* omake is serious overkill (after hours of reading through the manual, I
still don't know how the gtk example is relevant, plus omake creates an
extra problem for portability, please correct me if I am wrong)

* ocamlbuild? I have problems with this piece of software. I found it
frustatingly underdocumented and buggy.
I read the manual, help and the -documentation, and still don't understand
anything.
The examples on the wiki page
http://brion.inria.fr/gallium/index.php/C_stub_functions
give 100 lines of ocaml code for a similar problem?
- I still don't know the most basic thing, how to build an output-obj o
file.
- I found no way to convince ocamlbuild to use the local library (in this
example we build
ocamlbuild foo.cmxa
and then would simply want
ocamlopt -o foo foo.cmxa foo_wrapper.ml
but 'ocamlbuild foo_wrapper.native' rebuilds it all the way.

* I even tried to get inpiration from rocaml (a nice ruby binding for ocaml,
which is mediated by a c, and all build is automated, but
it was too complicated to delineate the ruby-relevant things from the
c-ocaml interface)

* why are the c object files end in .o irrespective of whether they are byte
or native?
this makes it impossible to write rules on them?
In fact 'ocamlbuild foo.o' will build both and it overwrites the targets of
the first round!!!
(since it matches both cmo & o and cmx & o rules?)


I know it is a lot of questions, but any help or comment is appreciated.

Something constructive:
Does the community not feel that we should somehow support this export much
more within our existing build tools and documentation? If something
reassuring comes out of this discussion I promise I write up a tutorial.
(At least I understand how to write the code)

Thanks very much.

viktor

------=_Part_13446_23113918.1195631006030
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Dear list, <br><br>Let me share with you my frustration over compiling a c library out of an ocaml project. [apologies for long post]<br><br>This is now my third project where an ocaml implementation needs a c binding and I keep on struggling
<br> with the right build environment.<br><br>While it is very well documented how to compile and build applications with ocaml bindings to <br>c implementations, the opposite way is a neglected topic. <br>sections 18.7-8
 of the manual  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html</a><br>plus a couple of pages of the o-reilly book is devoted to this topic. 
<br>The sporadic info found on mailing lists is not enough so I need your help.  <br><br>The well known abstract problem is the following:<br><br><a href="http://foo.ml" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">
foo.ml</a>:			the ocaml routine root&nbsp;(responsible&nbsp;for&nbsp;foo.cmxa) <br>foo_export.ml		the C API (register callback, exceptions, etc)<br> foo_stub.c		the C bindings referring to the callbacks, containing init code <br>(foo_wrapper.ml		the ocaml wrapper to foo)
<br><br>clearly what I want is the following:<br><br>* foo.cmxa ocaml lib with ocaml entrypoints<br> * (foo: standalone&nbsp;executable&nbsp;from&nbsp;foo.cmxa and foo_wrapper.ml) <br>* libfoo: static and dynamic C library out of foo.cmxa
, foo_export and foo_stub<br><br>what do I do? now more or less according to the manual:<br><br>ocamlc -a &lt;all files&gt;  <a href="http://fib.ml" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">fib.ml
</a><br>ocamlc -custom -output-obj -o fib_caml.o fib.cma fib_export.ml <br>ocamlc -c fib_stub.c <br>cp /usr/local/lib/ocaml/libcamlrun.a fib.a<br>ar r fib.a fib_caml.o fib_stub.o<br>ranlib fib.a <br><br>or<br><br>ocamlc -a &lt;all files&gt; 
<a href="http://foo.ml" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">foo.ml</a><br>ocamlc -custom -output-obj -o foo_caml.o foo.cma foo_export.ml <br>ocamlc -c foo_stub.c <br>libtool -o libfoo.a foo_caml.o foo_stub.o /usr/local/lib/ocaml/libcamlrun.a 
<br><br>and then link the c program with foo<br><br>*  I know that building on several platforms is always a challange but this is such a simple routine.<br>if I have to use random command lines in my Makefile, I run into an autoconf hell. 
<br>is their a truly plantform independent routine to do this?<br><br>* can someone explain to me how the how exactly .a file created with .cmxa differ from an archive?<br>  is it the ocaml sturtup code?<br><br>* why does the bytecode need the curses library when linking and why the native doesn&#39;t? 
<br><br>* why does ocamlc have a -custom option and why does ocamlopt does not? do I need the -custom options at all here?<br><br>* what do I do if I don&#39;t want to compile the ocaml runtime into my lib, since they might use several  
<br>of my modules so just link at the end with the runtime lib<br>* what if I want to share ocaml code for the same reason?<br><br>and most importantly:<br><br>* how do I create dynamic libs, dlls for windows?<br><br>In general, I found not much help from the existing build tools: 
<br><br>* OCamlMake does not support creation of c libraries<br><br>* omake is serious overkill (after hours of reading through the manual, I still don&#39;t know how the gtk example is relevant, plus omake creates an extra problem for portability, please correct me if I am wrong) 
<br><br>* ocamlbuild? I have problems with this piece of software. I found it frustatingly underdocumented and buggy.<br>  I read the manual, help and the -documentation, and still don&#39;t understand anything.<br>  The examples on the wiki page  
<a href="http://brion.inria.fr/gallium/index.php/C_stub_functions" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">http://brion.inria.fr/gallium/index.php/C_stub_functions</a><br>  give 100 lines of ocaml code for a similar problem? 
<br>  - I still don&#39;t know the most basic thing, how to build an output-obj o file.  <br>  - I found no way to convince ocamlbuild to use the local library (in this example we build <br>    ocamlbuild foo.cmxa <br>    and then would simply want 
<br>    ocamlopt -o foo foo.cmxa foo_wrapper.ml <br>    but &#39;ocamlbuild foo_wrapper.native&#39; rebuilds it all the way.  <br><br>* I even tried to  get inpiration from rocaml (a nice ruby binding for ocaml, which is mediated by a c, and all build is automated, but
<br>it was too complicated to delineate the ruby-relevant things from the c-ocaml interface) <br><br>* why are the c object files end in .o irrespective of whether they are byte or native?<br>this makes it impossible to write rules on them? 
<br>In fact &#39;ocamlbuild foo.o&#39; will build both and it overwrites the targets of the first round!!! <br>(since it matches both cmo &amp; o and cmx &amp; o rules?)<br><br><br>I know it is a lot of questions, but any help&nbsp;or&nbsp;comment is appreciated.
<br><br>Something constructive: <br>Does the community not feel that we should somehow support this export much more within our existing build tools and documentation? If something reassuring comes out of this discussion I promise I write up a tutorial.
<br>(At least I understand how to write the code)<br><br>Thanks very much.<br><br>viktor<br><br><br><br><br><br><br><br><br>

------=_Part_13446_23113918.1195631006030--

