Return-Path: <ihji@ropas.snu.ac.kr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id BF5FEBC6C
	for <caml-list@yquem.inria.fr>; Fri, 23 Nov 2007 11:45:06 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAL49RkeTLvI0Wmdsb2JhbACPLAE
X-IronPort-AV: E=Sophos;i="4.21,456,1188770400"; 
   d="scan'208";a="6104800"
Received: from ropas.snu.ac.kr ([147.46.242.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 23 Nov 2007 11:45:05 +0100
Received: from let.snu.ac.kr (let.snu.ac.kr [147.46.242.53])
	(using TLSv1 with cipher AES128-SHA (128/128 bits))
	(No client certificate requested)
	by ropas.snu.ac.kr (Postfix) with ESMTP id 50253EB0CE
	for <caml-list@yquem.inria.fr>; Fri, 23 Nov 2007 19:45:02 +0900 (KST)
Message-Id: <563FECCB-A6C4-4F21-AEBE-F63B77B71411@ropas.snu.ac.kr>
From: Heejong Lee <ihji@ropas.snu.ac.kr>
To: caml-list@yquem.inria.fr
Content-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0 (Apple Message framework v915)
Subject: Unix.lockf should support SEEK_SET flag
Date: Fri, 23 Nov 2007 19:45:01 +0900
X-Mailer: Apple Mail (2.915)
X-Spam: no; 0.00; lockf:01 ocaml:01 ocaml:01 bug:01 lockf:01 lseek:01 lseek:01 fcntl:01 garbage:01 unix:01 unix:01 tracing:01 caml-list:01 kernel:02 incomplete:03 

Hello, caml-list members

Let me suggest something very important to ocaml developers.

Recently, I'm developing an application that uses multi-cores. As we  
know, Ocaml doesn't have kernel level thread because of the garbage  
collector issues. Instead of real thread, I chose Cothread and Netshm  
for thread emulation using process and shared memory. Unfortunately, I  
suffered from a lot of strange bugs for many weeks.

After tracing every system call, I found the bug. Cothread and Netshm  
use record locking provided by Unix.lockf. On current implementation  
of Unix.lockf, locking method should be two steps, lseek and lockf.  
However, since forked processes share opened file offsets, race  
condition can happen between lseek and lockf. There were many bugs  
from the fact that both Netshm and Cothread use lseek and lockf. Their  
lockings would be incomplete in some situations.

To avoid this problem, I extended Unix.lockf to support SEEK_SET flag  
of fcntl to designate the offset directly. This solves all strange  
bugs above. I think that Unix.lockf should support SEEK_SET option  
officially.

I want to hear your opinions.

--
Heejong Lee

