Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 2D31CBC6B
	for <caml-list@yquem.inria.fr>; Mon, 26 Nov 2007 23:50:33 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAODcSkfUnw6Fg2dsb2JhbACCOY0IAQEBCAQGEREH
X-IronPort-AV: E=Sophos;i="4.23,216,1194217200"; 
   d="scan'208";a="4633492"
Received: from pih-relay06.plus.net ([212.159.14.133])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 26 Nov 2007 23:50:33 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay06.plus.net with esmtp (Exim) id 1Iwmmd-00079M-N8
	for caml-list@yquem.inria.fr; Mon, 26 Nov 2007 22:50:31 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Circuralizing lists
Date: Mon, 26 Nov 2007 22:41:49 +0000
User-Agent: KMail/1.9.5
References: <9d3ec8300711261346r4b74f5gddce229324dcad2c@mail.gmail.com>
In-Reply-To: <9d3ec8300711261346r4b74f5gddce229324dcad2c@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200711262241.49833.jon@ffconsultancy.com>
X-Spam: no; 0.00; failwith:01 ocaml:01 recursive:01 46,:98 frog:98 closures:01 wrote:01 rec:01 rec:01 caml-list:01 lazy:02 construct:02 static:03 let:03 let:03 

On Monday 26 November 2007 21:46, Till Varoquaux wrote:
> Writing the list containing an inifinite number of ones can easily be done
> as:
>
> let rec ones = 1::ones
>
> I however don't know of any type safe to generate the infinite list
> which is the repetition of a given list (in a type safe non lazy way).
> What I'm looking for is a code that would do:
>
> let circularize  = function
>
>     | [] -> failwith "cannot circularize empty lists"
>     | l -> let rec res = l@res in res
>
> Is this at all possible?

OCaml only permits restricted static forms of this construct. The only 
practical application of this restricted form that I am aware of is in 
avoiding dummy values when creating simple cycles such as the environments of 
recursive closures in an interpreter.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

