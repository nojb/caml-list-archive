Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE,
	SPF_SOFTFAIL autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 397FABC69
	for <caml-list@yquem.inria.fr>; Wed, 14 Nov 2007 05:48:39 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAAoNOkfAXQImh2dsb2JhbACOfwEICik
X-IronPort-AV: E=Sophos;i="4.21,413,1188770400"; 
   d="scan'208";a="4207264"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 14 Nov 2007 05:48:39 +0100
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id lAE4mams005399
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Wed, 14 Nov 2007 05:48:38 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAEYNOkeFBoIFh2dsb2JhbACOfwEICik
X-IronPort-AV: E=Sophos;i="4.21,413,1188770400"; 
   d="scan'208";a="4410664"
Received: from rabbit.math.nagoya-u.ac.jp ([133.6.130.5])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 14 Nov 2007 05:48:35 +0100
Received: from localhost (millas [172.16.30.29])
	by rabbit.math.nagoya-u.ac.jp (8.12.11/3.7W) with ESMTP id lAE4mU8A004917;
	Wed, 14 Nov 2007 13:48:30 +0900 (JST)
Date: Wed, 14 Nov 2007 13:48:40 +0900 (JST)
Message-Id: <20071114.134840.39171294.garrigue@math.nagoya-u.ac.jp>
To: peng.zang@gmail.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] polymorphic lists, existential types and asorted
 other hattery
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <200711131227.18910.peng.zang@gmail.com>
References: <200711131227.18910.peng.zang@gmail.com>
X-Mailer: Mew version 4.0.69 on Emacs 22.0.50 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 473A7E24.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; existential:01 haskell:01 existential:01 haskell:01 ocaml:01 ocaml:01 haskell's:01 encodings:01 subtyping:01 avoided:01 subtyping:01 encodings:01 peng:98 peng:98 polymorphic:01 

From: Peng Zang <peng.zang@gmail.com>

> I've come across a way to do this in haskell using what they call
> "existential types".
> 
>   http://www.haskell.org/haskellwiki/Existential_type
> 
> I don't really understand existential types however and don't know if
> OCaml has them nor how to use them.

Notwithstanding your reluctance to use them, objects in ocaml are
really what amounts to Haskell's existential types, particularly
those for which a type class is specified. Put the other way round,
most examples of constrained existential types (i.e. where there is a
type class specifiying the existential) are just encodings for
objects. The encoding of objects through existentials has been known
for a long time. OCaml doesn't need this encoding because it has
primitive objects.

>From an implementation point of view, constrained existentials need to
be accompanied by their dictionaries, which is exactly the same thing
as the method table in an object, so even the implementation is very
similar.

Method calls on arbitrary objects can be slow. This is because, due to
subtyping, in some situations there is no way to know where the method
will be in the table, and a binary search has to be done. However,
this overhead can be avoided if all objects used in a specific method
call have the same methods. That is, they should have the same
interface, without using subtyping. That way, the method will be at
the same position in all objects, and this position is cached (for
native code).
(Note that this also means that any benchmark on the performance of
objects shall consider the impact of cacheing, which can be hard to
evaluate in micro-benchmarks.)

Dmitri's example had this property, so it should display good
performance (as good as explicit existential encodings.)

Jacques Garrigue

