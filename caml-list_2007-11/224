Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id C5C33BC6B
	for <caml-list@yquem.inria.fr>; Sat, 10 Nov 2007 16:07:18 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgoXAHlXNUfUnw6GYmdsb2JhbACCOYw/FQQGEBk
X-IronPort-AV: E=Sophos;i="4.21,398,1188770400"; 
   d="scan'208";a="4274546"
Received: from pih-relay08.plus.net ([212.159.14.134])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 10 Nov 2007 16:07:18 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay08.plus.net with esmtp (Exim) id 1IqrvZ-00080R-Ji
	for caml-list@yquem.inria.fr; Sat, 10 Nov 2007 15:07:17 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] OCaml's formatting libraries
Date: Sat, 10 Nov 2007 14:58:03 +0000
User-Agent: KMail/1.9.5
References: <9d3ec8300711080617g1b023711o1a8f9aa50b7874@mail.gmail.com> <20071109180948.GA15291@yquem.inria.fr> <92C50802-AFEE-4CD4-9F47-FBC9BCABC7A1@erratique.ch>
In-Reply-To: <92C50802-AFEE-4CD4-9F47-FBC9BCABC7A1@erratique.ch>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Message-Id: <200711101458.04047.jon@ffconsultancy.com>
X-Spam: no; 0.00; ocaml's:01 bunzli:01 caml's:01 danvy's:01 unparsing:01 scanf:01 doable:01 unparsing:01 ocaml:01 printf:01 frog:98 wrote:01 deprecated:01 incompatible:01 caml-list:01 

On Saturday 10 November 2007 14:32, B=FCnzli Daniel wrote:
> A question I have is why caml's formatting libraries were not
> deprecated in favor of an implementation using Danvy's functional
> unparsing [1]. This approach doesn't require an extension to the type
> system and if I read correctly these results [2] it seems at least as
> efficient as the current implementation. Scanf seems also doable [3].

=46unctional unparsing requires a lot more code, produces worse error messa=
ges,=20
is much harder to learn, is incompatible with the excellent Format module,=
=20
and the number of OCaml programs performance bound by these advanced printf=
=20
constructs is negligible.

I'd much rather see effort put into visualization and GUI tools rather than=
=20
ASCII text tools...

=2D-=20
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

