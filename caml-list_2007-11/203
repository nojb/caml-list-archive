Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DNS_FROM_RFC_ABUSE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id B72A1BC6B
	for <caml-list@yquem.inria.fr>; Fri,  9 Nov 2007 03:50:49 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAB5aM0fAXQImh2dsb2JhbACPAQEBAQgKKQ
X-IronPort-AV: E=Sophos;i="4.21,392,1188770400"; 
   d="scan'208";a="5606524"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 09 Nov 2007 03:50:49 +0100
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id lA92om3Z018564
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Fri, 9 Nov 2007 03:50:49 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao8CAGpZM0eCNhAB/2dsb2JhbAA
X-IronPort-AV: E=Sophos;i="4.21,392,1188770400"; 
   d="scan'208";a="19093536"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 09 Nov 2007 03:50:47 +0100
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id lA92oh8V022668;
	Fri, 9 Nov 2007 11:50:43 +0900 (JST)
Date: Fri, 09 Nov 2007 11:50:27 +0900 (JST)
Message-Id: <20071109.115027.42788254.garrigue@math.nagoya-u.ac.jp>
To: keiko@kurims.kyoto-u.ac.jp
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] a function for polymorphic and monomorphic objects
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <20071108.180532.68538077.keiko@kurims.kyoto-u.ac.jp>
References: <20071108.180532.68538077.keiko@kurims.kyoto-u.ac.jp>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at discorde with ID 4733CB08.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; subtyping:01 subtyping:01 polymorphism:01 cheers:01 polymorphic:01 polymorphic:01 caml-list:01 coercion:01 coercion:01 monomorphic:01 monomorphic:01 int:01 int:01 define:02 define:02 

From: Keiko Nakata <keiko@kurims.kyoto-u.ac.jp>
> Can I define a function taking as argument 
> an object with a method, say, "map" whose type is instantiatable to
> (int -> int) -> int list?
> 
> I have two object; 
> one with a polymorphic map, the other with a monomorphic map.
> 
> let p = object 
>   method map : 'a.(int -> 'a) -> 'a list =  fun f -> List.map f [1;2;3]
> end;;
>   
> let q = object
>   method map : (int -> int) -> int list = fun f -> List.map f [1;2;3]
> end;;
> 
> I want to define a function like double below, 
> which is applicable to both p and q.
> 
> let double o = o#map (fun x -> x*2);;
> 
> The only workaround I came up with is
> 
> let double2 f = f (fun x -> x*2);;
> double2 p#map;;
> double2 q#map;;
> 
> Yet this is not very nice....

Currently, this is the only workaround available.
A possibility once considered was to allow subtyping between the type
of p and the type of q. This way you could use your function double,
after applying a coercion for p.
However this is not so easy technically (mixing subtyping and
polymorphism...), and there has never been much demand for such
subtyping. Indeed, if one is required to do a (double) coercion
anyway, then double2 is not much worse (actually it is even shorter
here...) 

Cheers,

Jacques Garrigue

