Return-Path: <oliver@first.in-berlin.de>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id E189EBC69
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 07:18:24 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgAAAOZ+N0fAbSoIh2dsb2JhbACPCQEBAQgKKQ
X-IronPort-AV: E=Sophos;i="4.21,403,1188770400"; 
   d="scan'208";a="5686010"
Received: from einhorn.in-berlin.de ([192.109.42.8])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 12 Nov 2007 07:18:24 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: <caml-list@yquem.inria.fr>
Received: from einhorn.in-berlin.de (localhost [127.0.0.1])
	by einhorn.in-berlin.de (8.13.6/8.13.6/Debian-1) with ESMTP id lAC6INvv029580
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@yquem.inria.fr>; Mon, 12 Nov 2007 07:18:23 +0100
Received: (from www-data@localhost)
	by einhorn.in-berlin.de (8.13.6/8.13.6/Submit) id lAC6IN1Y029578
	for caml-list@yquem.inria.fr; Mon, 12 Nov 2007 07:18:23 +0100
X-Authentication-Warning: einhorn.in-berlin.de: www-data set sender to oliver@first.in-berlin.de using -f
Received: from dslb-088-073-093-214.pools.arcor-ip.net (dslb-088-073-093-214.pools.arcor-ip.net [88.73.93.214]) 
	by webmail.in-berlin.de (IMP) with HTTP 
	for <first@localhost>; Mon, 12 Nov 2007 07:18:23 +0100
Message-ID: <1194848303.4737f02f985a5@webmail.in-berlin.de>
Date: Mon, 12 Nov 2007 07:18:23 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Why 'Graphics.wait_next_event' doesn't reply anymore ?
References: <20071110230145.3aebafe4@localhost.localdomain> <20071111150720.4f8d1c44@localhost.localdomain> <1194799714.473732620f33e@webmail.in-berlin.de> <20071111204019.4697d387@localhost.localdomain>
In-Reply-To: <20071111204019.4697d387@localhost.localdomain>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: Internet Messaging Program (IMP) 3.2.6
X-Scanned-By: MIMEDefang_at_IN-Berlin_e.V. on 192.109.42.8
X-Spam: no; 0.00; bandel:01 in-berlin:01 bandel:01 in-berlin:01 scheduler:01 scheduler:01 ocaml:01 threading:01 workarounds:01 bugfixes:01 bugfixes:01 imho:01 wrote:01 oliver:01 oliver:01 

Zitat von Fabrice Marchant <fabrice.marchant@orange.fr>:

>   Hi Oliver !
>
>  Thanks to have considered my problem.
>
> On Sun, 11 Nov 2007 17:48:34 +0100
> Oliver Bandel <oliver@first.in-berlin.de> wrote:
>
> >
>
http://caml.inria.fr/pub/ml-archives/caml-list/2002/09/d29ca3379fe68e3cdbd36323f5f409c0.en.html
>
> > This code looks ugly.
> ...
> > It forces calls to the scheduler all too often.
> > And it does it at three places. And in the print-loop
> > it clals it every time!
> > This is the way of wasting ressources.
>   I think these 'yields' are only desperate attempts to hint the scheduler to
> do its job - that it doesn't as we could expected -.
[...]

Yes, that also was my view on using this function to often.

It's like using OCaml: ehy to use the GC-Module?
I have not used it, because I didn't needed.
I first look, if my code could possibly done better,
instead of thinking the gaerbageCollector might do something wrong.

The Gc-module is there to have a possibility to use some
screws for manual fine-tuning. But you should not start to
use it until your application seems to be ready.

It's like in LaTeX, where you should not too often
look at the results of line braking. You can do fine tuning
at the end.

And Gc or in Threading: explicit hints to the scheduler
should be used, if necessary, and not as early as possible.

But these are very general hints: optimization of details
comes at the end.

Best way to avoid "problems that have to be fixed by hand later"
(workarounds) is, to have some consideration on the design when
you start (and during the whole development phase of course).

(In LaTeX: use the pramble for selecting the right class and packages
and do not insert paragraph spacing throughout the whole document, if you
can change \parskip and \parindent ;-))


Ciao,
   Oliver

P.S.: And looking for Bugfixes in the libraries (as the one with the
      example code of "toto.ml") is the thing that comes in the very end,
      when the code is really good. If someone writes bad code and then
      looking for bugfixes of the langaueg he/she uses, that's a littlebid
      strange, IMHO.
      For concurrent programming you need to rethink many things, compared to
      non-concurrent programming. It's a littlebid like switching to FP,
      coming from non-FP-languages.

