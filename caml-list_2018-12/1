Return-Path: <louis@louisroche.net>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 09B3A824CF
	for <caml-list@sympa.inria.fr>; Sat,  1 Dec 2018 06:01:48 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=louis@louisroche.net; spf=Pass smtp.mailfrom=louis@louisroche.net; spf=Pass smtp.helo=postmaster@out4-smtp.messagingengine.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  louis@louisroche.net) identity=pra; client-ip=66.111.4.28;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="louis@louisroche.net";
  x-sender="louis@louisroche.net";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  louis@louisroche.net designates 66.111.4.28 as permitted
  sender) identity=mailfrom; client-ip=66.111.4.28;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="louis@louisroche.net";
  x-sender="louis@louisroche.net";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@out4-smtp.messagingengine.com designates
  66.111.4.28 as permitted sender) identity=helo;
  client-ip=66.111.4.28;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="louis@louisroche.net";
  x-sender="postmaster@out4-smtp.messagingengine.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3Aq2elpBx6UbDgvhLXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?1O0fIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHriC?=
 =?us-ascii?q?kJKTE2/m7LhcJ3gqxbrg+vqB5kzoHOYoyYLuBzc7nBcd4YQ2dKQ8ZfVzZGAoO5?=
 =?us-ascii?q?d4YBCe0BPftZr4nmulAAsRy+ChWsBOT11zRFgXv23aon0+QgCgHLxwggH9UTsH?=
 =?us-ascii?q?TVt9X1LqASXvy1zKbW1znDae1Z2Svk5YXObxsvr/aMXbdqfsrQz0kiDwDFjlWK?=
 =?us-ascii?q?poP4PzKZzOUNs26V7+pnTe6vhG8nqx1xojiy3cggkJXGhoUQylzc+iR5w5o6Ks?=
 =?us-ascii?q?CiREFnZt6kFZ1dvDyZOYtuWs4vQmBltDwnxrEbpJK3ZicHxI45yxPcbfGMbpKG?=
 =?us-ascii?q?7Qj5VOmLJDd1nHJld6y7hxa16UWgzfD8VtW73VpTtSpFl8XMtmgX2xzW9MeHUe?=
 =?us-ascii?q?B98V2u2TaO0QDT5f9LIUY7laraLZ4u3KQ8mYYUsUTGBiP2mUP2g7GKdkg8++Wl?=
 =?us-ascii?q?6v7rbqj7qpOBLYN5hRvyProtl8CnBOQ3KAkOX2yV+eSm073j+FX0QLFNjv0rk6?=
 =?us-ascii?q?nZq4vXJcAcpq6kAg9VyZwj6xGjADemztsUh38HI0xZeB6flYjmJ0nOIOzkDfe4?=
 =?us-ascii?q?m1mjjC1kx/XCPrH4BpXNL2PDkKv6cLZm609czRIzwspF65JVDLEBOvPzVVXruN?=
 =?us-ascii?q?zWFB9qezCzlu3uDdE40oIFRUqOBLWYOeXcqwym/OUqds2LeY4O8Az6IPikr6rq?=
 =?us-ascii?q?imI4gncZerSoxoEQY3C1WPJrPxPKMjLXnt4dHDJS7UIFR+vwhQjaCG8BVzOJR6?=
 =?us-ascii?q?s5owoDJsejBIbHSJqqheXfjiO8A5xNfGdNCl3KF3r0JdzdB6U8LRmKK8okqQQq?=
 =?us-ascii?q?EKC7QtZ/hxWpqQ7h0b1sLueS/CAE58q6iYpFotbLnBR3zgRaSsSQ12bWFjNzg3?=
 =?us-ascii?q?9UAiQzwLg5pEFm0V6M0K53jvpXFNpeofhOV1VjOA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AsBACRFAJchxwEb0JjhQFPMyeDeYh3j?=
 =?us-ascii?q?RQll1yBZg0lgVKCdQKDNBsGAQQ0EgEDAQECAQEBAQETAQEBCA0JCCkjDII2IoJ?=
 =?us-ascii?q?lAQUjHQEBOA8LGCoCAiwrGYMhAYFpAxUPpRdwgS+CdgEBBYEwAYNZBoEWgQUIh?=
 =?us-ascii?q?2yELhc+gUGBRIIxLoMFGQIBgS0BEgEfLYJXMYImiQ0thjuFaYoJVQmGP0GKRg6?=
 =?us-ascii?q?BW02HaIcRgnqJMoEMLIsAgV2BBXEzIiYKO4JsCYIsg1MzgiaCAIYMLQECMIt0g?=
 =?us-ascii?q?j4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AsBACRFAJchxwEb0JjhQFPMyeDeYh3jRQll1yBZg0lgVK?=
 =?us-ascii?q?CdQKDNBsGAQQ0EgEDAQECAQEBAQETAQEBCA0JCCkjDII2IoJlAQUjHQEBOA8LG?=
 =?us-ascii?q?CoCAiwrGYMhAYFpAxUPpRdwgS+CdgEBBYEwAYNZBoEWgQUIh2yELhc+gUGBRII?=
 =?us-ascii?q?xLoMFGQIBgS0BEgEfLYJXMYImiQ0thjuFaYoJVQmGP0GKRg6BW02HaIcRgnqJM?=
 =?us-ascii?q?oEMLIsAgV2BBXEzIiYKO4JsCYIsg1MzgiaCAIYMLQECMIt0gj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539640800"; 
   d="scan'208,217";a="358245717"
Received: from out4-smtp.messagingengine.com ([66.111.4.28])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 06:01:46 +0100
Received: from compute7.internal (compute7.nyi.internal [10.202.2.47])
	by mailout.nyi.internal (Postfix) with ESMTP id 4A51F22141
	for <caml-list@inria.fr>; Sat,  1 Dec 2018 00:01:45 -0500 (EST)
Received: from web3 ([10.202.2.213])
  by compute7.internal (MEProxy); Sat, 01 Dec 2018 00:01:45 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=louisroche.net;
	 h=message-id:from:to:mime-version:content-transfer-encoding
	:content-type:date:references:subject:in-reply-to; s=fm2; bh=mDb
	J6xzdo5YatzDXtQ+zP28ps2j7exH47S2Tpc0e28A=; b=UtcUE/2GauyneMwUj8p
	lcrHKECLe22mcGgkyxxJDMlYJ30lwNpAVDI64uFnCheqp+VsZRaLWTH8iIWdMGSH
	Lvc0BJluyOpphVfIPA7VngiCsJ/aSc2JjYgx6yvqZwaqSFRs4kAv+uoZ7Ay5wWFh
	xoPAGtZ+guD69ml/jxH3MoeAGQVhO/ijoKK/3o2pjQcEaWmvnuYKHYp+toSTbpEF
	+c9E07w2sioRS1TzQiB65t/67byOso4Hvl+YF+jsqQgIovppCMN9DvxWHfZ8QG9U
	LGVxSQpUuXG3+dQH+nYwLDic6qaeG+kWCrdrzTITSaRy3yGGxB09blX4T7y6TX9o
	Szg==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=content-transfer-encoding:content-type
	:date:from:in-reply-to:message-id:mime-version:references
	:subject:to:x-me-proxy:x-me-proxy:x-me-sender:x-me-sender
	:x-sasl-enc; s=fm1; bh=mDbJ6xzdo5YatzDXtQ+zP28ps2j7exH47S2Tpc0e2
	8A=; b=A4fbq23NcWkImP9ttLgN2Pigj9MzhVpcoioqmjvqoahnxD37IfCLD/oE0
	shfRTU341Lm6p50U5/5RNccugDGhdCEmzS9+YhKuk8Qqv8XVtgZa1/GTGRjBTrK0
	3t8QM4WZaGKUsPSg9xhAWb62qgu51MGhVp2HmFuzzxN4z5LB7X9LSDILwqKi+d36
	F0HMe/dxuE4zhO4pu0agIvaj44pGIkcNVtSHJuKb2muIC/dOQYs8wRTEvQdx+GIB
	etasNua+JyW58tNt8+/m9XtKo75LB6HYosqi+MLGKhu865JJvHU57GCBOkybmRlf
	lV6fu1KvhD35vKuMhi3ugGW9OFQ7w==
X-ME-Sender: <xms:uBUCXPsEdZb4FjnuQfKi9np51t9nA4gEpnVMvARmSBCcqXScxMR1gQ>
X-ME-Proxy: <xmx:uBUCXDBP7VuhgPQlxk_iknn-OXCpmTHo9GF304i9SrL8wE8lV-K7YA>
    <xmx:uBUCXHGzs-RBd3MB-TAHmWDrCpp44SJni923-LgEJwTqC9R0dNDV2w>
    <xmx:uBUCXFBblszi0VfzAICV9qFwH_usFiVwXYLbdGKqzX96UBUiK0jjtw>
    <xmx:uBUCXHWVgwcIeDZRSy9GaQhhL3nsLWLTP2TgujQvMOrLfdCR2FWzeQ>
    <xmx:uBUCXJogd_tkTF5A5RZfC7kO2kb89WQO0D1YAR18NJ9izQeu-GxFtg>
    <xmx:uRUCXPgCzar3Xmvd_WpPOaewcOWtvmBb5z_sP15n1himKUgvyl0a1w>
Received: by mailuser.nyi.internal (Postfix, from userid 99)
	id B9B919E437; Sat,  1 Dec 2018 00:01:44 -0500 (EST)
Message-Id: <1543640504.1470432.1595095128.5C9A92F8@webmail.messagingengine.com>
From: =?utf-8?Q?Louis=20Roch=C3=A9?= <louis@louisroche.net>
To: caml-list@inria.fr
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Type: multipart/alternative; boundary="_----------=_154364050414704320"
X-Mailer: MessagingEngine.com Webmail Interface - ajax-3449945b
Date: Sat, 01 Dec 2018 15:01:44 +1000
References: <20181126101448.3ee5jgz4c6ulsbbr@first.in-berlin.de>
 <469288B6-200B-400D-8BCB-C3C53B0954B3@exchange.mit.edu>
 <7429727.XKSIZ6bzdz@agaric>
In-Reply-To: <7429727.XKSIZ6bzdz@agaric>
Subject: Re: [Caml-list] Build-/Installation-Tools - not enogh of them?

This is a multi-part message in MIME format.

--_----------=_154364050414704320
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

Shameless plug, I tried to document basic opam usage for people who have
experience with npm. It turns ok it can also be an introduction to total
newcomers. Hope it can help some people.
https://khady.info/opam-npm.html


On Sat, Dec 1, 2018, at 2:31 AM, Louis Gesbert wrote:
>> - John F Carr, 27/11/2018 13:40 -
>> I have a related request.  I am not a trusting person.  I do not like
>> "curl | sudo sh" type installation methods.>=20
> You're not the only one :)
> Some notes on opam's security model:
>=20
> - opam 2.0 uses, by default `bubblewrap` [1] on Linux and `sandbox-
>   exec` on OSX to ensure that package scripts:>   * don't make any networ=
k access
>   * don't interact with other processes
>   * don't write outside of their build dir, /tmp, and (in the case of
>     install) the switch prefix (excl. opam files)>=20
> - this is done using simple wrapper scripts [2] and some default hooks
>   configuration in ~/.opam/config, so if you know about built-in
>   sandboxing engines for other OSes, it is fairly easy to experiment
>   with them, and a contribution would be very welcome.>=20
> - while I expect this to be reasonably secure, it's intended first and
>   foremost to avoid dramatic errors, not to protect against malicious
>   repositories>=20
> - package scripts are protected but **not any use made by the users of
>   the programs or libraries that were installed through opam**. In
>   other words, building should be safe, but there is no guarantee
>   about what the result of the build will do: that is not restrained
>   by opam in any way>=20
> - the effort to provide end-to-end package signatures in the
>   repository [3] is still ongoing. Cheers to Hannes Mehnert for the
>   awesome work he has already done here. Most of the work should be
>   done, but then we need to integrate all that, and there is a lot of
>   work on the tooling so that it won't add to much burden on users and
>   repository maintainers (this commonly results in most disabling the
>   security features, which is as good has having no security features
>   to begin with).>=20
> - we do advertise `curl | sh` on the installation page as the easiest
>   entry point, but the script is quite trivial and only uses root to
>   copy to your prefix; it's very easy to fetch the binary by hand from
>   Github if you prefer not to run it, and of course, you can also
>   build from source using the bootstrap scripts.>=20
>> If a package has 'rm -rf $BUILD/', or equivalent ocaml code, are
>> its ill>> effects confined when BUILD is unset?
>=20
> yes, that's the whole point of the sandboxing that was
> introduced in 2.0>=20
>> Can the build process grab screenshots from the background?
>=20
> not sure. Probably not on Linux since we use a different process
> space, but maybe on OSX. In anycase, since network access is blocked
> in both cases, that wouldn't do much harm.>=20
>> One reason I like make is, if the Makefile is simple you know what
>> it's going to do.>=20
> I would object that opam package definition files (`opam` or
> `foo.opam`) should be at least as straightforward to read even if you
> have never seen the syntax, are less error-prone, and are generally
> much shorter. Just look for the "build:" and "install:" parts. But I
> agree you need to know first to look at them, and since they are
> generally an indirection to some build-system (`make`, `dune`,
> `topkg`...), you would just start digging...>=20
>> Also, the xkcd on standards seems relevant: https://xkcd.com/927/
>=20
> We have __actually__ been converging as of late, though.
>=20
>=20
> Best,
> Louis Gesbert =E2=80=94 OCamlPro
>=20
>=20
>=20
> [1] https://github.com/projectatomic/bubblewrap
> [2] https://github.com/ocaml/opam/blob/master/src/state/shellscripts/bwra=
p.sh> and
> https://github.com/ocaml/opam/blob/master/src/state/shellscripts/sandbox_=
exec.sh> [3] https://github.com/hannesm/conex
>=20
>> Whatever one true packaging system we use, I want to trust it not to
>> let the build process mess up my system.  For example, I see opam
>> makes some attempt to contain the build process on some systems.
>> It's not clear to me how much it does and how effective.  And it
>> appaerntly does not work on BSD.  If a package has 'rm -rf $BUILD/',
>> or equivalent ocaml code, are its ill effects confined when BUILD is
>> unset?  Can the build process grab screenshots from the background?
>> And so on.>>=20
>> One reason I like make is, if the Makefile is simple you know what
>> it's going to do.>>=20
>> Also, the xkcd on standards seems relevant: https://xkcd.com/927/
>>=20
>>> On Nov 26, 2018, at 05:14 , Oliver Bandel <oliver@first.in-
>>> berlin.de> wrote:>>>=20
>>> Hello,
>>>=20
>>> a while ago it looked like there were not enough build- and
>>> installation-tools>>> for OCaml. I remember some discussions about that.
>>>=20
>>> Now it seems to me that there are a lot of them.
>>> So, developers can pick the one they know about.
>>>=20
>>> For all these tools there might be good reasons to use them,
>>> and those>>> developers who looked at these tools and choose them for t=
heir
>>> projects, will>>> know them well enough.
>>>=20
>>> The situation differs, if one wants to package the written software,>>>=
 and one needs to know many of those tools, just to compile the
>>> stuff.>>> So, when one just wants to compile and install some software,
>>> just for that, it would take much effort to learn the different build-
>>> tools.>>>=20
>>> So, packaging has become more complicated, even though for the
>>> developers>>> these tools may save time.
>>>=20
>>> It would be nice if people who used one of the many new
>>> building tools>>> could provide a Makefile that allows just to type
>>> "make" and "make install", instead of expecting everyone who wants
>>> to compile>>> the software to first learn just-another-build-tool.
>>>=20
>>> Also it would be good, to mention early, which installation tools
>>> (make-dependencies)>>> are in use, and too mention needed packages (opa=
m or others) to just
>>> build the stuff.>>>=20
>>> Thanks and regards,
>>> Oliver Bandel
>>>=20
>>=20
>>=20
>>=20
> Email had 1 attachment:


>  * signature.asc 1k (application/pgp-signature)

--_----------=_154364050414704320
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="utf-8"

<!DOCTYPE html>
<html>
<head>
<title></title>
<style type=3D"text/css">p.MsoNormal,p.MsoNoSpacing{margin:0}</style>
</head>
<body><div>Shameless plug, I tried to document basic opam usage for people =
who have experience with npm. It turns ok it can also be an introduction to=
 total newcomers. Hope it can help some people.<br></div>
<div><br></div>
<div><a href=3D"https://khady.info/opam-npm.html">https://khady.info/opam-n=
pm.html</a><br></div>
<div><br></div>
<div><br></div>
<div>On Sat, Dec 1, 2018, at 2:31 AM, Louis Gesbert wrote:<br></div>
<blockquote type=3D"cite"><blockquote><div>- John F Carr, 27/11/2018 13:40 =
-<br></div>
<div>I have a related request.&nbsp; I am not a trusting person.&nbsp; I do=
 not like "curl | sudo sh" type installation methods.<br></div>
</blockquote><div><br></div>
<div>You're not the only one :)<br></div>
<div>Some notes on opam's security model:<br></div>
<div><br></div>
<div>- opam 2.0 uses, by default `bubblewrap` [1] on Linux and `sandbox-exe=
c` on OSX to ensure that package scripts:<br></div>
<div>&nbsp; * don't make any network access<br></div>
<div>&nbsp; * don't interact with other processes<br></div>
<div>&nbsp; * don't write outside of their build dir, /tmp, and (in the cas=
e of install) the switch prefix (excl. opam files)<br></div>
<div><br></div>
<div>- this is done using simple wrapper scripts [2] and some default hooks=
 configuration in ~/.opam/config, so if you know about built-in sandboxing =
engines for other OSes, it is fairly easy to experiment with them, and a co=
ntribution would be very welcome.<br></div>
<div><br></div>
<div>- while I expect this to be reasonably secure, it's intended first and=
 foremost to avoid dramatic errors, not to protect against malicious reposi=
tories<br></div>
<div><br></div>
<div>- package scripts are protected but **not any use made by the users of=
 the programs or libraries that were installed through opam**. In other wor=
ds, building should be safe, but there is no guarantee about what the resul=
t of the build will do: that is not restrained by opam in any way<br></div>
<div><br></div>
<div>- the effort to provide end-to-end package signatures in the repositor=
y [3] is still ongoing. Cheers to Hannes Mehnert for the awesome work he ha=
s already done here. Most of the work should be done, but then we need to i=
ntegrate all that, and there is a lot of work on the tooling so that it won=
't add to much burden on users and repository maintainers (this commonly re=
sults in most disabling the security features, which is as good has having =
no security features to begin with).<br></div>
<div><br></div>
<div>- we do advertise `curl | sh` on the installation page as the easiest =
entry point, but the script is quite trivial and only uses root to copy to =
your prefix; it's very easy to fetch the binary by hand from Github if you =
prefer not to run it, and of course, you can also build from source using t=
he bootstrap scripts.<br></div>
<div><br></div>
<blockquote><div>If a package has 'rm -rf $BUILD/', or equivalent ocaml cod=
e, are its ill<br></div>
<div>effects confined when BUILD is unset?<br></div>
</blockquote><div><br></div>
<div>yes, that's the whole point of the sandboxing that was introduced in 2=
.0<br></div>
<div><br></div>
<blockquote><div>Can the build process grab screenshots from the background=
?<br></div>
</blockquote><div><br></div>
<div>not sure. Probably not on Linux since we use a different process space=
, but maybe on OSX. In anycase, since network access is blocked in both cas=
es, that wouldn't do much harm.<br></div>
<div><br></div>
<blockquote><div>One reason I like make is, if the Makefile is simple you k=
now what it's going to do.<br></div>
</blockquote><div><br></div>
<div>I would object that opam package definition files (`opam` or `foo.opam=
`) should be at least as straightforward to read even if you have never see=
n the syntax, are less error-prone, and are generally much shorter. Just lo=
ok for the "build:" and "install:" parts. But I agree you need to know firs=
t to look at them, and since they are generally an indirection to some buil=
d-system (`make`, `dune`, `topkg`...), you would just start digging...<br><=
/div>
<div><br></div>
<blockquote><div>Also, the xkcd on standards seems relevant: <a href=3D"htt=
ps://xkcd.com/927/">https://xkcd.com/927/</a><br></div>
</blockquote><div><br></div>
<div>We have <u>_actually_</u> been converging as of late, though.<br></div>
<div><br></div>
<div><br></div>
<div>Best,<br></div>
<div>Louis Gesbert =E2=80=94 OCamlPro<br></div>
<div><br></div>
<div><br></div>
<div><br></div>
<div>[1] <a href=3D"https://github.com/projectatomic/bubblewrap">https://gi=
thub.com/projectatomic/bubblewrap</a><br></div>
<div>[2] <a href=3D"https://github.com/ocaml/opam/blob/master/src/state/she=
llscripts/bwrap.sh">https://github.com/ocaml/opam/blob/master/src/state/she=
llscripts/bwrap.sh</a><br></div>
<div>and <a href=3D"https://github.com/ocaml/opam/blob/master/src/state/she=
llscripts/sandbox_exec.sh">https://github.com/ocaml/opam/blob/master/src/st=
ate/shellscripts/sandbox_exec.sh</a><br></div>
<div>[3] <a href=3D"https://github.com/hannesm/conex">https://github.com/ha=
nnesm/conex</a><br></div>
<div><br></div>
<blockquote><div>Whatever one true packaging system we use, I want to trust=
 it not to let the build process mess up my system.&nbsp; For example, I se=
e opam makes some attempt to contain the build process on some systems.&nbs=
p; It's not clear to me how much it does and how effective.&nbsp; And it ap=
paerntly does not work on BSD.&nbsp; If a package has 'rm -rf $BUILD/', or =
equivalent ocaml code, are its ill effects confined when BUILD is unset?&nb=
sp; Can the build process grab screenshots from the background?&nbsp; And s=
o on.<br></div>
<div><br></div>
<div>One reason I like make is, if the Makefile is simple you know what it'=
s going to do.<br></div>
<div><br></div>
<div>Also, the xkcd on standards seems relevant: <a href=3D"https://xkcd.co=
m/927/">https://xkcd.com/927/</a><br></div>
<div><br></div>
<blockquote><div>On Nov 26, 2018, at 05:14 , Oliver Bandel &lt;<a href=3D"m=
ailto:oliver@first.in-berlin.de">oliver@first.in-berlin.de</a>&gt; wrote:<b=
r></div>
<div><br></div>
<div>Hello,<br></div>
<div><br></div>
<div>a while ago it looked like there were not enough build- and installati=
on-tools<br></div>
<div>for OCaml. I remember some discussions about that.<br></div>
<div><br></div>
<div>Now it seems to me that there are a lot of them.<br></div>
<div>So, developers can pick the one they know about.<br></div>
<div><br></div>
<div>For all these tools there might be good reasons to use them, and those=
<br></div>
<div>developers who looked at these tools and choose them for their project=
s, will<br></div>
<div>know them well enough.<br></div>
<div><br></div>
<div>The situation differs, if one wants to package the written software,<b=
r></div>
<div>and one needs to know many of those tools, just to compile the stuff.<=
br></div>
<div>So, when one just wants to compile and install some software,<br></div>
<div>just for that, it would take much effort to learn the different build-=
tools.<br></div>
<div><br></div>
<div>So, packaging has become more complicated, even though for the develop=
ers<br></div>
<div>these tools may save time.<br></div>
<div><br></div>
<div>It would be nice if people who used one of the many new building tools=
<br></div>
<div>could provide a Makefile that allows just to type<br></div>
<div>"make" and "make install", instead of expecting everyone who wants to =
compile<br></div>
<div>the software to first learn just-another-build-tool.<br></div>
<div><br></div>
<div>Also it would be good, to mention early, which installation tools (mak=
e-dependencies)<br></div>
<div>are in use, and too mention needed packages (opam or others) to just b=
uild the stuff.<br></div>
<div><br></div>
<div>Thanks and regards,<br></div>
<div>Oliver Bandel<br></div>
<div><br></div>
</blockquote><div><br></div>
<div><br></div>
<div><br></div>
</blockquote><p>Email had 1 attachment:<br></p><ul><li><div><code>signature=
.asc</code><br></div>
<div>&nbsp; 1k (application/pgp-signature)<br></div>
</li></ul></blockquote><div><br></div>
</body>
</html>

--_----------=_154364050414704320--

