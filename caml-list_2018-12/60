Return-Path: <lindsay.errington@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id F260D824CF
	for <caml-list@sympa.inria.fr>; Thu, 20 Dec 2018 18:41:08 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=lindsay.errington@gmail.com; spf=Pass smtp.mailfrom=lindsay.errington@gmail.com; spf=None smtp.helo=postmaster@mail-yw1-f52.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  lindsay.errington@gmail.com) identity=pra;
  client-ip=209.85.161.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lindsay.errington@gmail.com";
  x-sender="lindsay.errington@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  lindsay.errington@gmail.com designates 209.85.161.52 as
  permitted sender) identity=mailfrom; client-ip=209.85.161.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lindsay.errington@gmail.com";
  x-sender="lindsay.errington@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-yw1-f52.google.com) identity=helo;
  client-ip=209.85.161.52;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="lindsay.errington@gmail.com";
  x-sender="postmaster@mail-yw1-f52.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Azz0coBDD7Nf517YJ6ITCUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPT6psbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsleVyJDDY28?=
 =?us-ascii?q?YYUBDPcPM/hEoITmvVQCsQGzCBOwCO/zyDJFgGL9060g0+QmFAHLxAouH9MIsH?=
 =?us-ascii?q?vJt9X6LqcTWv26wqnS1zXDbvVW2Tjh6IjPdBAqvPaBXbZxccrX1EYvDBnKj1WK?=
 =?us-ascii?q?pYP7JTOVzOUNs26U7+p8UuKvjXUqqw50oje1x8csjpPFiZ4SylDB7Ch0xps+K9?=
 =?us-ascii?q?6gSENjf9KoDJ9duzuZOoZ2WM8uXmBltDsgxrAGp5K2ejUBxo49yB7FcfOHdpCF?=
 =?us-ascii?q?4hL9W+aVJjd1nHdld6i+hxa26EShyuP9WtSt3FZEridJjMPAtn8K1xzU5ciHTu?=
 =?us-ascii?q?Vy8l291jaI0gDf8uBEIUYqmqrHM5Mt3KI8m54JvUnAHiL6glj6ga6Lekk++uWk?=
 =?us-ascii?q?9fzrYrD8qZ+dM490hBv+MqMrmsGnBeQ4Mw4OUHWA+eum1Lzv51P2QK9Qjv03lK?=
 =?us-ascii?q?nZv4zaJcMdpqOiDA9V15ws6xe7Dzu8zNsYmnwHIEpfeB2bl4jpJ03OIPfgAPij?=
 =?us-ascii?q?mVuslTNry+nCPr3gGZXNMmPOkKzhfLZ4805T0hA/zdFZ55JOC7EOOuj/WkHrtI?=
 =?us-ascii?q?+QMhhsCBC52+bqDp1R0YcXXyrbGbOUKKPftxmE4eYmJcGHYMkesTO7IvNj+v24?=
 =?us-ascii?q?3lEjnlpIWaiv0YAeeTiVBO5nJUqFZnyk1tMAF2sRtxt4QfbwiVuNTTlVT3m3Vq?=
 =?us-ascii?q?M4oDo8DdT1Xs/4WomxjenZj2+AFZpMazUDUwjUSCa6R8C/Q/4JLRmqDIpkmz0A?=
 =?us-ascii?q?W6KmTtZ4hx6rvQ7+jbFgK7iNo3FKhdfYzNFwotbru1Qq7zUtVpaS1miMSyd/mW?=
 =?us-ascii?q?ZaH2ZrjpA6mlR0zxK46YY9g/FcEoYOtfZAUwN/JIGFiuInUZb9XQXOetrPQ1Gj?=
 =?us-ascii?q?EI2r?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DxAgAC0xtchzShVdFlDg8BAQUBBwUBg?=
 =?us-ascii?q?WWCKYFDJ4N9gR2CXpAZgg2JJohch1YNhGwCgmwaBwEENBIBAwEBAgEBAQEBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIBAgMjHQEbHQEDAQsGAwILDSoCAiEBAREBBQEcBhODI?=
 =?us-ascii?q?oFpAQMVi3yQCDyLGYESBQEXgncFhDYKGScNXoE3AgYSjC2BVz+EI4JXhTKCVwK?=
 =?us-ascii?q?JJ4Y1f5AvMwcCgiUEjAqDMhiRXY9aiiQPIYE8gXdNI1AxgjuCGxqDU4oYXCEwA?=
 =?us-ascii?q?Y5mAQE?=
X-IPAS-Result: =?us-ascii?q?A0DxAgAC0xtchzShVdFlDg8BAQUBBwUBgWWCKYFDJ4N9gR2?=
 =?us-ascii?q?CXpAZgg2JJohch1YNhGwCgmwaBwEENBIBAwEBAgEBAQEBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIBAgMjHQEbHQEDAQsGAwILDSoCAiEBAREBBQEcBhODIoFpAQMVi3yQCDy?=
 =?us-ascii?q?LGYESBQEXgncFhDYKGScNXoE3AgYSjC2BVz+EI4JXhTKCVwKJJ4Y1f5AvMwcCg?=
 =?us-ascii?q?iUEjAqDMhiRXY9aiiQPIYE8gXdNI1AxgjuCGxqDU4oYXCEwAY5mAQE?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539640800"; 
   d="scan'208,217";a="361297151"
Received: from mail-yw1-f52.google.com ([209.85.161.52])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 20 Dec 2018 18:41:07 +0100
Received: by mail-yw1-f52.google.com with SMTP id i73so1011990ywg.3
        for <caml-list@inria.fr>; Thu, 20 Dec 2018 09:41:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=fpxw+Kv/vaWu1CI8CCTgVF2jDozjiCuzIeamP9dDwCM=;
        b=fidrLINQOKZS5Yym482YtLsrLLLgIEHIm5p+++pDNvi2n+PHYEK+X3Qzk6IOseX1b3
         jQs6l6JnhbKI8X7kSHQUMW5tOe97QuEY8f8w6rScEpVpdgLhuyyHRZpnAYVj/QZK0ylt
         3+McCa1R1nA9Bk7kVdwlLxr9ioheXBaFEba2TfohGIPKyxuR9UgTmCYJMtn4PzLOhRXb
         XtujsLJdFjUwE938ACcBv5pjOk6HTUf9nvExyy2tS3uqf8yEF2nzl5nQqYqIdQz1nR2o
         UFE6NSrxuUAK9NjXmeDYRKWYTyLG/aWZZ47ruOwaEsbYpRyOGRI9HVSfarIkz5isZBjE
         GQkw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=fpxw+Kv/vaWu1CI8CCTgVF2jDozjiCuzIeamP9dDwCM=;
        b=ctKVJYoIL99xFZuEy8IKU4uknCC6c3M2BESAJfPqWNw/1nGdnCTE/eMWor4Qgl1dh/
         zZfV/HiBDDEYdQJXlbaz/cxbcVtNLW5vU+fXjlz70usTK9TBx3RFQcE6yM9sUbJZLMud
         RIlYBopkyyvWr/PU95FsRjHt+E4PxpaUZcRAngZuWePd82ZQ+UAkLLxd2MUDknsnl85e
         3yuNMQaooy7D06Mh/pcyHa5JQahRzzxPTfYUM8NDrsnGuj0i6i1hvZzNkBtfo8/uGHND
         tk4uedU9HZx3Cc1liPVBwjY36E8o7qN/zKLPYfHHSSA13E9WB2PySlshM3XT4cCt7BfZ
         5KGw==
X-Gm-Message-State: AA+aEWb7vStfcp/itZPzBdrBxQV4JF/Ma3Q7jTzmzSii3gAy7mQiUJxA
	kIrlWPKh3AfgIpu8Q5BxE9vfwIFh7y59vRn0z8ODlTWY
X-Google-Smtp-Source: AFSGD/V+Jm3cOFxWU/dF7g0OGL8s5SqYAQ3oj/Yc36g926NW5qRoz6Q5LOS7Oq9ZP1qo54j0f5bhcMZgYVo0eJyX2N8=
X-Received: by 2002:a81:e50d:: with SMTP id s13mr27283220ywl.405.1545327666466;
 Thu, 20 Dec 2018 09:41:06 -0800 (PST)
MIME-Version: 1.0
References: <CAPeKkNi9P2_vGxeYgybpffz7W2S5tMV2oeTsPHv5jOes=_gbGA@mail.gmail.com>
 <CA+mHimNHxZOAc8kUuZ1oB1RxWZ6NLWW9n=OV4rkitUt9cELw=A@mail.gmail.com>
In-Reply-To: <CA+mHimNHxZOAc8kUuZ1oB1RxWZ6NLWW9n=OV4rkitUt9cELw=A@mail.gmail.com>
From: Lindsay Errington <lindsay.errington@gmail.com>
Date: Thu, 20 Dec 2018 09:40:56 -0800
Message-ID: <CAPeKkNg07g1q=j_UY3k+PJxMRPR2w0Y88U6gknjr92UjmRJXaQ@mail.gmail.com>
To: Stephen Dolan <stephen.dolan@cl.cam.ac.uk>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="0000000000009f13bb057d77a241"
Subject: Re: [Caml-list] Possible ephemeron bug?

--0000000000009f13bb057d77a241
Content-Type: text/plain; charset="UTF-8"

Great answer! Thanks to you both.

I have a followup ephemeron question which I'll post with a different
subject.

On Thu, Dec 20, 2018 at 1:46 AM Stephen Dolan <stephen.dolan@cl.cam.ac.uk>
wrote:

> On Thu, 20 Dec 2018 at 00:30, Lindsay Errington <
> lindsay.errington@gmail.com> wrote:
>
>> If however, I use the standalone bytecode compiler or the native compiler
>> (4.07.1), then the entries are not nullified. Is this a bug or is there
>> another way to persuade the garbage collector to clobber the entries?
>>
>
> Thanks for the detailed example!
>
> The issue is with the test code at the end:
>
>     let (root,map) =
>       let map = [] in
>       let (k0,map) = intern 0 (str 1) map in
>       let (k1,map) = intern 1 (Link k0) map in
>       let (k2,map) = intern 2 (Link k1) map in
>       (k2,map);;
>
>     Fmt.printf "root=%a, map=@[<v>%a@]@." pp_key root pp_map map;;
>
>     let map = upd root (str 2) map;;
>
>     Fmt.printf "root=%a map1=@[<v>%a@]@." pp_key root pp_map map;;
>
> Both the bytecode and native code compilers take any value bound to a
> global to be reachable forever, even if that global is later shadowed by
> another global of the same name. The ephemerons don't get cleared, because
> the original map is still alive.
>
> You can change the code to avoid putting the original map in a global
> constant:
>
>     let (root, map) =
>       let map = [] in
>       let (k0,map) = intern 0 (str 1) map in
>       let (k1,map) = intern 1 (Link k0) map in
>       let (k2,map) = intern 2 (Link k1) map in
>       Fmt.printf "root=%a, map=@[<v>%a@]@." pp_key k2 pp_map map;
>       let map = upd k2 (str 2) map in
>       (k2, map);;
>
>     Fmt.printf "root=%a map1=@[<v>%a@]@." pp_key root pp_map map;;
>
> With this version, the original map becomes unreachable, so the GC can
> clear the ephemerons.
>
> Stephen
>

--0000000000009f13bb057d77a241
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Great answer! Thanks to you both.<div><br></div><div>I hav=
e a followup ephemeron question which I&#39;ll post with a different subjec=
t.</div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr">On Thu, Dec 2=
0, 2018 at 1:46 AM Stephen Dolan &lt;<a href=3D"mailto:stephen.dolan@cl.cam=
.ac.uk">stephen.dolan@cl.cam.ac.uk</a>&gt; wrote:<br></div><blockquote clas=
s=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pad=
ding-left:1ex"><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div dir=
=3D"ltr">On Thu, 20 Dec 2018 at 00:30, Lindsay Errington &lt;<a href=3D"mai=
lto:lindsay.errington@gmail.com" target=3D"_blank">lindsay.errington@gmail.=
com</a>&gt; wrote:<br></div></div></div></div><div dir=3D"ltr"><div dir=3D"=
ltr"><div dir=3D"ltr"><div class=3D"gmail_quote"><blockquote class=3D"gmail=
_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204=
,204);padding-left:1ex"><div dir=3D"ltr"><div>If however, I use the standal=
one bytecode compiler or the native compiler (4.07.1), then the entries are=
 not nullified. Is this a bug or is there another way to persuade the garba=
ge collector to clobber the entries?</div></div></blockquote><div><br></div=
></div></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"=
><div class=3D"gmail_quote"><div>Thanks for the detailed example!</div><div=
><br></div><div>The issue is with the test code at the end:</div><div><br><=
/div><div></div></div></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><=
div dir=3D"ltr"><div class=3D"gmail_quote"><div><div>=C2=A0 =C2=A0 let (roo=
t,map) =3D</div><div>=C2=A0 =C2=A0 =C2=A0 let map =3D [] in</div><div>=C2=
=A0 =C2=A0 =C2=A0 let (k0,map) =3D intern 0 (str 1) map in</div><div>=C2=A0=
 =C2=A0 =C2=A0 let (k1,map) =3D intern 1 (Link k0) map in</div><div>=C2=A0 =
=C2=A0 =C2=A0 let (k2,map) =3D intern 2 (Link k1) map in</div><div>=C2=A0 =
=C2=A0 =C2=A0 (k2,map);;</div><div>=C2=A0 =C2=A0=C2=A0</div></div></div></d=
iv></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div clas=
s=3D"gmail_quote"><div><div>=C2=A0 =C2=A0 Fmt.printf &quot;root=3D%a, map=
=3D@[&lt;v&gt;%a@]@.&quot; pp_key root pp_map map;;</div></div></div></div>=
</div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div class=
=3D"gmail_quote"><div><div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 let =
map =3D upd root (str 2) map;;</div><div>=C2=A0 =C2=A0=C2=A0</div></div></d=
iv></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><di=
v class=3D"gmail_quote"><div><div>=C2=A0 =C2=A0 Fmt.printf &quot;root=3D%a =
map1=3D@[&lt;v&gt;%a@]@.&quot; pp_key root pp_map map;;</div></div><div><br=
></div><div>Both the bytecode and native code compilers take any value boun=
d to a global to be reachable forever, even if that global is later shadowe=
d by another global of the same name. The ephemerons don&#39;t get cleared,=
 because the original map is still alive.</div><div><br></div><div>You can =
change the code to avoid putting the original map in a global constant:</di=
v><div><br></div><div><div>=C2=A0 =C2=A0 let (root, map) =3D</div></div></d=
iv></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><di=
v class=3D"gmail_quote"><div><div>=C2=A0 =C2=A0 =C2=A0 let map =3D [] in</d=
iv><div>=C2=A0 =C2=A0 =C2=A0 let (k0,map) =3D intern 0 (str 1) map in</div>=
<div>=C2=A0 =C2=A0 =C2=A0 let (k1,map) =3D intern 1 (Link k0) map in</div><=
div>=C2=A0 =C2=A0 =C2=A0 let (k2,map) =3D intern 2 (Link k1) map in</div></=
div></div></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"l=
tr"><div class=3D"gmail_quote"><div><div>=C2=A0 =C2=A0 =C2=A0 Fmt.printf &q=
uot;root=3D%a, map=3D@[&lt;v&gt;%a@]@.&quot; pp_key k2 pp_map map;</div><di=
v>=C2=A0 =C2=A0 =C2=A0 let map =3D upd k2 (str 2) map in</div><div>=C2=A0 =
=C2=A0 =C2=A0 (k2, map);;</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0=C2=A0</div>=
<div>=C2=A0 =C2=A0 Fmt.printf &quot;root=3D%a map1=3D@[&lt;v&gt;%a@]@.&quot=
; pp_key root pp_map map;;</div></div><div><br></div><div>With this version=
, the original map becomes unreachable, so the GC can clear the ephemerons.=
</div></div></div></div></div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D=
"ltr"><div class=3D"gmail_quote"><div><br></div><div>Stephen</div></div></d=
iv></div></div></blockquote></div>

--0000000000009f13bb057d77a241--
