Return-Path: <rich@annexia.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.8 required=5.0 tests=AWL,SPF_FAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id C40D1BBAF
	for <caml-list@yquem.inria.fr>; Wed, 25 Mar 2009 01:17:04 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArAHABYVyUlQRFuwX2dsb2JhbACDAJJdFwsKBBS8QoN2BocU
X-IronPort-AV: E=Sophos;i="4.38,415,1233529200"; 
   d="scan'208";a="23198694"
Received: from furbychan.cocan.org ([80.68.91.176])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 25 Mar 2009 01:17:04 +0100
Received: from rich by furbychan.cocan.org with local (Exim 4.63)
	(envelope-from <rich@annexia.org>)
	id 1LmGnn-00041j-Uc; Wed, 25 Mar 2009 00:17:03 +0000
Date: Wed, 25 Mar 2009 00:17:03 +0000
To: John Prince <john.prince@colorado.edu>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] questions
Message-ID: <20090325001703.GB14880@annexia.org>
References: <364f41440903241242v6dd2244fkbbd1ea8e3b20af60@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <364f41440903241242v6dd2244fkbbd1ea8e3b20af60@mail.gmail.com>
User-Agent: Mutt/1.5.13 (2006-08-11)
From: Richard Jones <rich@annexia.org>
X-Spam: no; 0.00; ocaml:01 compiler:01 compiler:01 bug:01 ocaml:01 ocamlc:01 -where:01 mli:01 lowercase:01 mli:01 parser:01 ad-hoc:01 syntax:01 beginners':01 2009:98 

On Tue, Mar 24, 2009 at 01:42:40PM -0600, John Prince wrote:
> 1) Is there something comparable to RSpec (i.e., behavior driven
> development)?  A recommendation on which testing module to use?

Possibly ounit?  To be honest test-driven development is more useful
with dynamic languages, because the compilers for those languages pick
up so few errors.  In OCaml the compiler is much more thorough, and by
the time your program "passes" the compiler, it's bug free!  (Well,
that's the theory anyhow :-)

> 2) Is there something like 'ri' in ocaml?  (commandline access to basic
> documentation)

I usually use this low-tech but very effective solution:

  cd $(ocamlc -where)
  less <module>.mli

One catch is that the first letter in <module> is lowercase, whereas
module names themselves start with an uppercase letter.
eg: unix.mli vs Unix

> 3) Is there consensus on the best/fastest xml parser?

There are certainly several to choose from :-)

> 4) What kind of YAML support is there?  I've seen an ad-hoc writeup to read
> in JSON in an ocaml program, but I'm much more familiar with YAML.

ocaml-syck (not used it).  For JSON use json-wheel and/or json-static.
I've recently become a fan of s-expressions because it's ridiculously
easy to write s-expressions from any other language and then import
those directly into OCaml data structures.  (See the sexplib library /
syntax extension).  I have been "liberating" a lot of data from Python
programs this way.

  http://ocaml-syck.sourceforge.net/
  http://martin.jambon.free.fr/json-wheel.html
  http://www.ocaml.info/home/ocaml_sources.html#sexplib310

> Where is the message archive located?  Is it searchable?

Google ...

> Can someone point me to the best resource(s) for newbies?  I have been
> reading through what's out there, but its always nice to get a
> recommendation.

You should definitely join the ocaml_beginners mailing list.

INRIA have beginners' resources here:

  http://caml.inria.fr/resources/index.en.html

I maintain this site, along with dozens of external contributors:
  http://www.ocaml-tutorial.org/
Scroll down for plenty of external links ...

Rich.

-- 
Richard Jones
Red Hat

