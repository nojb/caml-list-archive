Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA03206 for caml-redistribution; Fri, 16 Jul 1999 00:12:21 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA23843 for <caml-list@pauillac.inria.fr>; Thu, 15 Jul 1999 10:31:25 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA04475
	for <caml-list@inria.fr>; Thu, 15 Jul 1999 10:31:21 +0200 (MET DST)
Received: from localhost (safran.kurims.kyoto-u.ac.jp [130.54.16.91])
	by kurims.kurims.kyoto-u.ac.jp (8.9.1a/3.7W) with ESMTP id RAA22461
	for <caml-list@inria.fr>; Thu, 15 Jul 1999 17:31:19 +0900 (JST)
To: caml-list@inria.fr
Subject: Objective Label Trilogy, summer edition
X-Mailer: Mew version 1.93 on Emacs 20.3 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <19990715173116L.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 15 Jul 1999 17:31:16 +0900
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 58
Content-Transfer-Encoding: 7bit
Sender: weis

It is my pleasure to annouce

	The Objective Label Trilogy, Summer 1999 edition

		Objective Label compiler
		LablTk GUI
		LablBrowser development tool

Objective Label extends Objective Caml with labeled and optional
parameters, polymorphic variants, and explicit polymorphism for
methods.
As Objective Label 2.02, this version is based on Objective Caml 2.00,
but it has profited from a few months of intensive use to correct many
bugs, and improve some details.

You can find it at:

	http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/
	ftp://ftp.kurims.kyoto-u.ac.jp/pub/lang/olabl/olabl-2.02-summer.tar.gz

Changes:

  * many bug fixes in the type system
    (one real hole, and many small problems)

  * record fields can be inferred from context.
    This is related to the recent message about field name overloading.
    As long as you know its type, you can access a record's field
    without giving its full module path. This also works if the field
    name is hidden by another definition. Here is an extensive example.

	# type point = { mutable x : int; y : int };;
	type point = { mutable x: int; y : int }
	# type box = { x : bool };;
	type box = { x: bool }
	# type 'a box = { x : 'a };;  
	type 'a box = { x: 'a }
	# {x="hello"};;
	- : string box = {x="hello"}
	# {x=1;y=2};;
	The label y belongs to the type point but is here mixed with
	labels of type int box
	# let p : point = {x=1;y=2};;
	val p : point = {x=1; y=2}
	# p.x;;
	- : int = 1
	# p.x <- 3;;
	- : unit = ()

    (This is an experimental feature, and may disappear in future versions)

  * cleaned-up the type propagation semantics (needed for record
    fields, labeled method calls, ...)
    Application order is now relevant.

---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>



