Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 7A71CBC0A
	for <caml-list@yquem.inria.fr>; Tue,  3 Apr 2007 14:14:10 +0200 (CEST)
Received: from pih-relay05.plus.net (pih-relay05.plus.net [212.159.14.132])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l33CE9F9018743
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@inria.fr>; Tue, 3 Apr 2007 14:14:10 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay05.plus.net with esmtp (Exim) id 1HYhtm-0004UH-GX
	for caml-list@inria.fr; Tue, 03 Apr 2007 13:14:06 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] How important are circular lists/recursive objects?
Date: Tue, 3 Apr 2007 13:09:07 +0100
User-Agent: KMail/1.9.5
References: <Pine.LNX.4.64.0704021949590.5725@localhost> <4611FBAB.1020508@fmf.uni-lj.si>
In-Reply-To: <4611FBAB.1020508@fmf.uni-lj.si>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-2"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200704031309.08302.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 46124511.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; recursive:01 andrej:01 recursive:01 ocaml:01 vars:01 vars:01 ocaml:01 frog:98 closures:01 closures:01 wrote:01 wrote:01 rec:01 caml-list:01 functions:01 

On Tuesday 03 April 2007 08:00, Andrej Bauer wrote:
> Brian Hurt wrote:
> > Does anyone  actually use this construct, and if so, for what?
>
> When I teach my students "theory" of programming languages, we write
> interpreters for mini languages. The recursive data structures are used
> to create closures of recursive functions, environments that contain
> mutually recursive values, closures of objects, etc. Life would be very
> hard without this feature.

There is a nice example here:

  http://www.ffconsultancy.com/ocaml/benefits/interpreter.html

Specifically, in the "eval" function:

    | ELetRec(var, arg, body, rest) ->
        let rec vars = (var, VClosure(arg, vars, body)) :: vars in
        eval vars rest

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

