Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL,DATE_IN_PAST_12_24 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 39243BC0A
	for <caml-list@yquem.inria.fr>; Sat, 21 Apr 2007 11:13:51 +0200 (CEST)
Received: from ptb-relay01.plus.net (ptb-relay01.plus.net [212.159.14.212])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l3L9Doqk018641
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sat, 21 Apr 2007 11:13:51 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay01.plus.net with esmtp (Exim) id 1HfBfC-0006EN-AF
	for caml-list@yquem.inria.fr; Sat, 21 Apr 2007 10:13:50 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Slow allocations with 64bit code?
Date: Fri, 20 Apr 2007 21:42:46 +0100
User-Agent: KMail/1.9.5
References: <f8560b80704201331j2f8abe89q71b15c0616609f35@mail.gmail.com>
In-Reply-To: <f8560b80704201331j2f8abe89q71b15c0616609f35@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200704202142.46910.jon@ffconsultancy.com>
X-Miltered: at discorde with ID 4629D5CE.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; allocations:01 markus:01 mottl:01 allocations:01 pointers:01 ocamlopt:01 ocaml:01 fsharp:01 eating:98 frog:98 heap:01 wrote:01 minor:01 caml-list:01 benchmark:02 

On Friday 20 April 2007 21:31, Markus Mottl wrote:
> In the considerably more complex code I'm currently working on it also
> seemed to me that it's allocations (the run time) that cause the
> performance difference.

Are you sure it isn't just eating the minor heap 2x faster?

I did quite a few benchmarks when I first got my AMD64 and found 64-bit to be 
faster on all but tree-based algorithms. I put that down to 64-bit pointers 
consuming 2x more memory (although the performance difference was much less 
than 2x).

Doing the benchmark again (nth.opt 50 1 cfg-10k-aSi) I get:

7.438s 32-bit metaocamlopt 3.09.1
5.289s 64-bit ocamlopt 3.10.0+beta

What version of OCaml are you using?

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
The F#.NET Journal
http://www.ffconsultancy.com/products/fsharp_journal/?e

