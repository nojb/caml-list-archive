Return-Path: <carette@mcmaster.ca>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id D3197BC69
	for <caml-list@yquem.inria.fr>; Wed, 25 Apr 2007 16:12:04 +0200 (CEST)
Received: from sigma957.cis.mcmaster.ca (sigma957.CIS.McMaster.CA [130.113.64.83])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l3PEC3qA003617
	for <caml-list@inria.fr>; Wed, 25 Apr 2007 16:12:04 +0200
Received: from Gorash7.UTS.McMaster.CA (Gorash7.UTS.mcmaster.ca [130.113.196.61])
	by sigma957.cis.mcmaster.ca (8.13.7/8.13.7) with ESMTP id l3PE3tY5020353;
	Wed, 25 Apr 2007 10:04:11 -0400 (EDT)
Received: from cgpsrv2.cis.mcmaster.ca (univmail.CIS.McMaster.CA [130.113.64.46])
	by Gorash7.UTS.McMaster.CA (8.13.7/8.13.7) with ESMTP id l3PE3AjC002183;
	Wed, 25 Apr 2007 10:03:16 -0400
Received: from [74.109.166.109] (account carette@univmail.cis.mcmaster.ca HELO [192.168.1.101])
  by cgpsrv2.cis.mcmaster.ca (CommuniGate Pro SMTP 4.1.8)
  with ESMTP-TLS id 171196091; Wed, 25 Apr 2007 10:03:11 -0400
Message-ID: <462F5F4F.2070007@mcmaster.ca>
Date: Wed, 25 Apr 2007 10:01:51 -0400
From: Jacques Carette <carette@mcmaster.ca>
Organization: McMaster University
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: axiom-developer@nongnu.org, "'aldor-l'" <aldor-l@aldor.org>,
	Haskell Cafe <haskell-cafe@haskell.org>, OCaml <caml-list@inria.fr>,
	epigram@durham.ac.uk,
	felix-language <felix-language@lists.sourceforge.net>,
	metaocaml-hackers-l@cs.rice.edu, om@openmath.org
Subject: Programming Languages and Mechanised Mathematics -- deadline extension
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-PMX-Version-Mac: 5.3.1.294258, Antispam-Engine: 2.5.1.298604, Antispam-Data: 2007.4.25.64733
X-PerlMx-Spam: Gauge=IIIIIII, Probability=7%, Report='__CP_URI_IN_BODY 0, __CT 0, __CTE 0, __CT_TEXT_PLAIN 0, __HAS_MSGID 0, __MIME_TEXT_ONLY 0, __MIME_VERSION 0, __SANE_MSGID 0, __STOCK_PHRASE_7 0, __USER_AGENT 0'
X-Miltered: at concorde with ID 462F61B3.002 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; intersection:01 algebra:01 algebra:01 coq:01 avoided:01 coq:01 haskell:01 haskell:01 conversely:01 inference:01 inference:01 untyped:01 polymorphism:01 lennart:01 augustsson:01 

[Extended deadline: submissions now due May 2nd, 2007]

Programming Languages for Mechanized Mathematics Workshop

As part of Calculemus 2007
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>
Hagenbergs, Austria
June 29-30, 2007.

The intent of this workshop is to examine more closely the intersection 
between
programming languages and mechanized mathematics systems (MMS). By MMS, we
understand computer algebra systems (CAS), [automated] theorem provers
(TP/ATP), all heading towards the development of fully unified systems (the
MMS), sometimes also called universal mathematical assistant systems 
(MAS) (see
Calculemus 2007
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>).

There are various ways in which these two subjects of /programming 
languages/ and /systems for mathematics/ meet:

   * Many systems for mathematics contain a dedicated programming
     language. For instance, most computer algebra systems contain a
     dedicated language (and are frequently built in that same
     language); some proof assistants (like the Ltac language for Coq)
     also have an embedded programming language. Note that in many
     instances this language captures only algorithmic content, and
     /declarative/ or /representational/ issues are avoided.
   * The /mathematical languages/ of many systems for mathematics are
     very close to a functional programming language. For instance the
     language of ACL2 is just Lisp, and the language of Coq is very
     close to Haskell. But even the mathematical language of the HOL
     system can be used as a functional programming language that is
     very close to ML and Haskell. On the other hand, these languages
     also contain very rich specification capabilities, which are
     rarely available in most computation-oriented programming
     languages. And even then, many specification languages (B, Z,
     Maude, OBJ3, CASL, etc) can still teach MMSes a trick or two
     regarding representational power.
   * Conversely, functional programming languages have been getting
     "more mathematical" all the time. For instance, they seem to have
     discovered the value of dependent types rather recently. But they
     are still not quite ready to 'host' mathematics (the non-success
     of docon <http://www.haskell.org/docon/> being typical). There are
     some promising languages on the horizon (Epigram
     <http://www.e-pig.org/>, Omega
     <http://web.cecs.pdx.edu/%7Esheard/Omega/index.html>) as well as
     some hybrid systems (Agda <http://agda.sourceforge.net/>, Focal
     <http://focal.inria.fr/site/index.php>), although it is unclear if
     they are truly capable of expressing the full range of ideas
     present in mathematics.
   * Systems for mathematics are used to prove programs correct. (One
     method is to generate "correctness conditions" from a program that
     has been annotated in the style of Hoare logic and then prove
     those conditions in a proof assistant.) An interesting question is
     what improvements are needed for this both on the side of the
     mathematical systems and on the side of the programming languages.

We are interested in all these issues. We hope that a certain synergy will
develop between those issues by having them explored in parallel.

These issues have a very colourful history. Many programming language
innovations first appeared in either CASes or Proof Assistants, before
migrating towards more mainstream languages. One can cite (in no particular
order) type inference, dependent types, generics, term-rewriting, 
first-class
types, first-class expressions, first-class modules, code extraction, and so
on. However, a number of these innovations were never aggressively 
pursued by
system builders, letting them instead be developped (slowly) by programming
language researchers. Some, like type inference and generics have 
flourished.
Others, like first-class types and first-class expressions, are not 
seemingly
being researched by anyone.

We want to critically examine what has worked, and what has not. Why are all
the current ``popular''[1] computer algebra systems untyped? Why are the
(strongly typed) proof assistants so much harder to use than a typical 
CAS? But
also look at question like what forms of polymorphism exists in mathematics?
What forms of dependent types exist in mathematics? How can MMS regain the
upper hand on issues of 'genericity'? What are the biggest barriers to 
using a
more mainstream language as a host language for a CAS or an ATP?

This workshop will accept two kinds of submissions: full research papers as
well as position papers. Research papers should be nore more than 15 
pages in
length, and positions papers no more than 3 pages. Submission will be 
through
_EasyChair_. An informal version of the proceedings will be available at the
workshop, with a more formal version to appear later. We are looking into
having the best papers completed into full papers and published as a special
issue of a Journal (details to follow).


Important Dates

May 02, 2007: Submission Deadline (Extended!)
May 30, 2007: Notification
June 29-30, 2007: Workshop


Program Committee

Lennart Augustsson [Credit Suisse]
Wieb Bosma [Radboud University Nijmegen, Netherlands]
Jacques Carette (co-Chair) [McMaster University, Canada]
David Delahaye [CNAM, France]
Jean-Christophe Filliâtre [CNRS and Université de Paris-Sud, France]
John Harrison [Intel Corporation, USA]
Josef Urban [Charles University, Czech Republic]
Markus (Makarius) Wenzel [Technische Universität München, Germany]
Freek Wiedijk (co-Chair) [Radboud University Nijmegen, Netherlands]
Wolfgang Windsteiger [University of Linz, Austria]


   Location and Registration

Location and registration information can be found on the Calculemus
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/> web site.

-----------------------------------------------------------------------------
[1] by popular we mean > 1 million users.

