Received: (from weis@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id TAA02185 for caml-redistribution; Mon, 16 Oct 1995 19:21:25 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.6.10/8.6.6) with ESMTP id TAA02163 for <caml-list@pauillac.inria.fr>; Mon, 16 Oct 1995 19:20:27 +0100
Received: from margaux.inria.fr (margaux.inria.fr [128.93.8.2]) by concorde.inria.fr (8.6.10/8.6.9) with ESMTP id TAA01466 for <caml-list@pauillac.inria.fr>; Mon, 16 Oct 1995 19:20:27 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by margaux.inria.fr (8.6.10/8.6.6) with ESMTP id TAA13486 for <caml-list@margaux.inria.fr>; Mon, 16 Oct 1995 19:20:26 +0100
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35]) by concorde.inria.fr (8.6.10/8.6.9) with ESMTP id TAA01462; Mon, 16 Oct 1995 19:20:26 +0100
Received: (from xleroy@localhost) by pauillac.inria.fr (8.6.10/8.6.6) id TAA02159; Mon, 16 Oct 1995 19:20:25 +0100
From: Xavier Leroy <Xavier.Leroy@inria.fr>
Message-Id: <199510161820.TAA02159@pauillac.inria.fr>
Subject: Re: caml (special) light and numerics
To: ohl@crunch.ikp.physik.th-darmstadt.de (Thorsten Ohl)
Date: Mon, 16 Oct 1995 19:20:25 +0100 (MET)
Cc: caml-list@margaux.inria.fr
In-Reply-To: <9510131320.AA19150@crunch> from "Thorsten Ohl" at Oct 13, 95 02:20:37 pm
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Length: 1199      
Sender: weis
Status: O

> A suggestion for caml special light v1.07:
>    -  on Linux (and other i386) systems, the runtime should be linked
>       with `-lieee' to enable IEEE arithmetic (`-mieee-fp' does the
>       same thing).

Yes, the next release will run in IEEE mode under Linux and FreeBSD.

> Does anybody have numbers on how csl (in particular the new native
> compiler) compares in performance to C++ or FORTRAN in numerical
> applications (quadrature, ODEs, linear algebra, ...)?

I have two numerical benchmarks that are available both in CSL and in C:
a simple FFT implementation and the Pseudoknot benchmark used by
Feeley, Hartel et al (a nucleotide placement problem). The figures on
a DecStation 3000/300X are as follows:

                        C       CSL
        Pseudoknot      0.73s   1.27s
        FFT             3.07s   3.74s

Your mileage may vary greatly, in particular depending on how
carefully the CSL programs are written. Also, the I386 port of CSL is
not as good as the other ports on floating-point operations, because
CSL assumes a standard, direct-access set of floating-point registers,
while the I387 imposes a stack organization on its floating-point
registers.

- Xavier Leroy




