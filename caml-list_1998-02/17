Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA26464 for caml-redistribution; Thu, 19 Feb 1998 17:35:28 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA24372 for <caml-list@pauillac.inria.fr>; Thu, 19 Feb 1998 13:58:52 +0100 (MET)
Received: from pcmath65.unice.fr (pcmath65.unice.fr [134.59.10.65])
	by nez-perce.inria.fr (8.8.7/8.8.5) with ESMTP id NAA29643
	for <caml-list@inria.fr>; Thu, 19 Feb 1998 13:58:50 +0100 (MET)
Received: from math.unice.fr (localhost [127.0.0.1]) by pcmath65.unice.fr (8.8.3/8.8.3) with ESMTP id NAA07042 for <caml-list@inria.fr>; Thu, 19 Feb 1998 13:55:49 +0100
Message-ID: <34EC2BD5.971682F7@math.unice.fr>
Date: Thu, 19 Feb 1998 13:55:49 +0100
From: Vyskocil Vladimir <vyskocil@math.unice.fr>
Organization: UNSA
X-Mailer: Mozilla 4.04 [en] (X11; I; Linux 2.0.28 i686)
MIME-Version: 1.0
To: Caml list <caml-list@inria.fr>
Subject: Affichage des erreurs OCaml
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: weis

Bonjour,

La programmation objet avec Objectif Caml c'est tres sympatique,
meme si je regrette parfois certaines limitations : pas de vrais
constructeurs, impossibilite de "caster" les objets dans les
deux "sens" (on ne peut que remonter dans la hierachie des classes)
a "cause" du typage uniquement statique de OCaml. Mais la c'est un
petit detail de l'affichage des erreurs qui m'agace parfois, 
n'y aurait t'il pas la possibilite de se concentrer sur l'essentiel
en affichant que ce qui differe entre deux classes non compatible ?
Ou alors simplement trier les methodes suivant le meme ordre pour
se reperer plus vite ?

exemple d'erreur que je recois regulierement :

--- Voila la chose :) -----------------------------------------
File "sources/formel/derive_inv.ml", line 131, characters 24-36:
This expression has type
  < check_symbol_name : Cfg.ident -> Cfg.ident;
    find_symbol : Cfg.ident -> Symbol.symbol_object;
    find_diff_symbol : Cfg.ident -> unit; get_next_dummy_index : int;
    add_diff_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
    add_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
    add_gen_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
    clone : Symbol.symbol_table; debug : unit;
    exist_gen_symbol : Cfg.ident -> bool; exist_symbol : Cfg.ident ->
bool;
    filter_symbol : (Cfg.ident -> Symbol.symbol_object -> bool) ->
                    Symbol.symbol_object list;
    find_gen_symbol : Cfg.ident -> Symbol.symbol_object;
    find_gen_unlocked_var : Cfg.basic_type -> Cfg.ident;
    find_gen_unlocked_var_and_lock : Cfg.basic_type -> Cfg.ident;
    gen_local_var : Cfg.basic_type -> Cfg.variable;
    get_array : Symbol.array_symbol list; get_dummy : Symbol.dummy_var
list;
    get_dummy_sorted : Symbol.dummy_var list;
    get_external_fun : Symbol.external_fun list;
    get_external_sub : Symbol.external_sub list;
    get_external_unknown : Symbol.external_unknown list;
    get_gen_symbol_type : Cfg.ident -> Cfg.basic_type;
    get_gen_var_list : Cfg.ident list; get_global : Symbol.global_var
list;
    get_intrinsic : Symbol.intrinsic_var list;
    get_local : Symbol.local_var list;
    get_parameter : Symbol.parameter_var list;
    get_symbol_type : Cfg.ident -> Cfg.basic_type; incr_dummy_index : 
    unit; is_symbol_array : Cfg.ident -> bool;
    iter_gen_symbol : (Cfg.ident -> Symbol.symbol_object -> unit) ->
unit;
    iter_symbol : (Cfg.ident -> Symbol.symbol_object -> unit) -> unit;
    lock_gen_var : Cfg.ident -> unit; pop_gen_var_list : Cfg.ident list;
    push_gen_var_list : unit; remove_gen_symbol : Cfg.ident -> unit;
    remove_symbol : Cfg.ident -> unit; set_gen_prefix : string -> unit;
    unlock_all_gen_var : unit; unlock_gen_var : Cfg.ident -> unit;
    unlock_gen_var_list : Cfg.ident list -> unit >
but is here used with type
  Symbol.symbol_table =
    < add_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
      find_symbol : Cfg.ident -> Symbol.symbol_object;
      get_symbol_type : Cfg.ident -> Cfg.basic_type;
      is_symbol_array : Cfg.ident -> bool; exist_symbol : Cfg.ident ->
bool;
      iter_symbol : (Cfg.ident -> Symbol.symbol_object -> unit) -> unit;
      filter_symbol : (Cfg.ident -> Symbol.symbol_object -> bool) ->
                      Symbol.symbol_object list;
      remove_symbol : Cfg.ident -> unit; get_next_dummy_index : int;
      incr_dummy_index : unit; get_dummy : Symbol.dummy_var list;
      get_dummy_sorted : Symbol.dummy_var list;
      get_local : Symbol.local_var list; get_global : Symbol.global_var
list;
      get_parameter : Symbol.parameter_var list;
      get_external_fun : Symbol.external_fun list;
      get_external_sub : Symbol.external_sub list;
      get_external_unknown : Symbol.external_unknown list;
      get_intrinsic : Symbol.intrinsic_var list;
      get_array : Symbol.array_symbol list; debug : unit;
      clone : Symbol.symbol_table;
      check_symbol_name : Cfg.ident -> Cfg.ident;
      add_diff_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
      find_diff_symbol : Cfg.ident -> Symbol.symbol_object;
      add_gen_symbol : Cfg.ident -> Symbol.symbol_object -> unit;
      find_gen_symbol : Cfg.ident -> Symbol.symbol_object;
      get_gen_symbol_type : Cfg.ident -> Cfg.basic_type;
      exist_gen_symbol : Cfg.ident -> bool;
      iter_gen_symbol : (Cfg.ident -> Symbol.symbol_object -> unit) ->
unit;
      remove_gen_symbol : Cfg.ident -> unit;
      get_gen_var_list : Cfg.ident list; push_gen_var_list : unit;
      pop_gen_var_list : Cfg.ident list; set_gen_prefix : string ->
unit;
      find_gen_unlocked_var : Cfg.basic_type -> Cfg.ident;
      find_gen_unlocked_var_and_lock : Cfg.basic_type -> Cfg.ident;
      unlock_gen_var : Cfg.ident -> unit;
      unlock_gen_var_list : Cfg.ident list -> unit;
      lock_gen_var : Cfg.ident -> unit; unlock_all_gen_var : unit;
      gen_local_var : Cfg.basic_type -> Cfg.variable >
make: *** [sources/formel/derive_inv.cmo] Error 2
-- 
Vyskocil Vladimir
vyskocil@math.unice.fr
http://pcmath65.unice.fr/~vyskocil
http://www.inria.fr/safir/WHOSWHO/Vladimir.html




