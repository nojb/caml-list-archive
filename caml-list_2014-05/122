Return-Path: <kakadu.hafanana@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id B889E7F8E9
	for <caml-list@sympa.inria.fr>; Wed, 21 May 2014 15:25:35 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kakadu.hafanana@gmail.com) identity=pra;
  client-ip=74.125.82.45;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kakadu.hafanana@gmail.com";
  x-sender="kakadu.hafanana@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kakadu.hafanana@gmail.com designates 74.125.82.45 as
  permitted sender) identity=mailfrom; client-ip=74.125.82.45;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kakadu.hafanana@gmail.com";
  x-sender="kakadu.hafanana@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f45.google.com) identity=helo;
  client-ip=74.125.82.45;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kakadu.hafanana@gmail.com";
  x-sender="postmaster@mail-wg0-f45.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhEDAPiofFNKfVItlGdsb2JhbABZg1dYgmmpNIEHlnICAgGBAggWDgEBAQEHCwsJEiqCJQEBBSMdARsSDAMMBgULDQICCR0CAiIBEQEFAQoSBhMSiBoBAxENpA2MEYFFgw2ZZwoZJwMKZIVAEQEFDIEejSuCdTaBFQSEXgWFN4Y0iSCBPY92GCmEbTg
X-IPAS-Result: AhEDAPiofFNKfVItlGdsb2JhbABZg1dYgmmpNIEHlnICAgGBAggWDgEBAQEHCwsJEiqCJQEBBSMdARsSDAMMBgULDQICCR0CAiIBEQEFAQoSBhMSiBoBAxENpA2MEYFFgw2ZZwoZJwMKZIVAEQEFDIEejSuCdTaBFQSEXgWFN4Y0iSCBPY92GCmEbTg
X-IronPort-AV: E=Sophos;i="4.98,880,1392159600"; 
   d="scan'208";a="63000829"
Received: from mail-wg0-f45.google.com ([74.125.82.45])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 21 May 2014 15:25:09 +0200
Received: by mail-wg0-f45.google.com with SMTP id m15so1972850wgh.28
        for <caml-list@inria.fr>; Wed, 21 May 2014 06:25:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=h/X1hnamcA4PVHFXSOBk/aL1jwn8oPTOk1QD6JSdFNc=;
        b=Y5Wnp/XKgMdFAwnalLIzbZdLDYeaXv0GX2tQ3FUtrh/kWGVq3wjZkcYZlQC3jtCf76
         ed2evmUMt8rByQYZpotq8WanNOwtoLk9yiL6a6aVbww3Ps8BSskrLABTzUln/mLW9VDn
         PRnJlajiN5MiURcNGs1pAzWLlwrScL/gt+TqNAE6LowvVuTMOc6S8T1hOdOSG9f19yDo
         Lt07VTrf509hjbx3q5+1e0hpaIrJAjFtimf0gEbslINt/At/40mPz10+k1oMMPXq7oYY
         iS7s/qrTZNvcF0aZEy6IZD0nrZRX/rHiwDBRMiaY3CZ6zdfxVa8xRYZq9Yq5LS6ZpD8d
         GPnA==
MIME-Version: 1.0
X-Received: by 10.180.77.70 with SMTP id q6mr10465007wiw.28.1400678708838;
 Wed, 21 May 2014 06:25:08 -0700 (PDT)
Received: by 10.180.198.199 with HTTP; Wed, 21 May 2014 06:25:08 -0700 (PDT)
In-Reply-To: <537CA058.5060306@mpi-sws.org>
References: <33BA74EC-E875-437F-A8A0-34011307D21D@inria.fr>
	<537CA058.5060306@mpi-sws.org>
Date: Wed, 21 May 2014 17:25:08 +0400
Message-ID: <CAGmVoG0bA4dRU1kUF1Xj5NUuT45OhvrEdWXPgWxEb==d=z1E9A@mail.gmail.com>
From: Kakadu <kakadu.hafanana@gmail.com>
To: Caml List <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] OCaml release 4.02.0+beta1

Where should I look for labltk now?


Kakadu

On Wed, May 21, 2014 at 4:47 PM, Andreas Rossberg <rossberg@mpi-sws.org> wrote:
> On 21.05.2014 14:13, Damien Doligez wrote:
>>
>> OCaml 4.02.0+beta1:
>> -------------------
>
>
>> - Allow opening a first-class module [...]  in the body of
>>
>>    an applicative functor if no types are created
>
>
> Is that a good idea? It seems that one property you want from modules
> (second or first class) is that you can always extend them safely to a
> subtype (as a form of weakening). That property would be violated by such a
> typing rule, because extending a first-class module with a type might now
> unexpectedly break client code which unpacks it inside a functor, and relies
> on that functor being applicative.
>
> (Of course, 'open' and 'include' already violate this property, but they
> stick out enough and are known to be brittle.)
>
> /Andreas
>
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
