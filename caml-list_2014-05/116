Return-Path: <ollie.frolovs.2012@my.bristol.ac.uk>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id E19707F8E8
	for <caml-list@sympa.inria.fr>; Wed, 21 May 2014 14:10:47 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  ollie.frolovs.2012@my.bristol.ac.uk) identity=pra;
  client-ip=74.125.82.178;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="ollie.frolovs.2012@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  ollie.frolovs.2012@my.bristol.ac.uk) identity=mailfrom;
  client-ip=74.125.82.178;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="ollie.frolovs.2012@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-we0-f178.google.com) identity=helo;
  client-ip=74.125.82.178;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="postmaster@mail-we0-f178.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlMBADeXfFNKfVKylWdsb2JhbABZg1fFfBYOAQEBAQcNCQkSKoJTgWcBBQEiiFQEAQigc4MRq3KFTReSAIEVBJsrhS6EKoYeQYRp
X-IPAS-Result: AlMBADeXfFNKfVKylWdsb2JhbABZg1fFfBYOAQEBAQcNCQkSKoJTgWcBBQEiiFQEAQigc4MRq3KFTReSAIEVBJsrhS6EKoYeQYRp
X-IronPort-AV: E=Sophos;i="4.98,879,1392159600"; 
   d="scan'208";a="62985659"
Received: from mail-we0-f178.google.com ([74.125.82.178])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 21 May 2014 14:10:47 +0200
Received: by mail-we0-f178.google.com with SMTP id u56so1895269wes.23
        for <caml-list@inria.fr>; Wed, 21 May 2014 05:10:46 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:from:content-type:content-transfer-encoding
         :subject:message-id:date:to:mime-version;
        bh=5CgXQzYZvei93roiBjX1dRv09SDDBFBYcJ/k5vPo9To=;
        b=TIVw53tSc0bcov0T5xgWiC3kTQxo9qXHFgTEUH2yvx3Y699k8KRqVjFq7LvSQ+IWkE
         kKST9vjBmzrGX98VGayRGDJN2OSYR16UBJu+Vbty8Wg3+OaX6cOmbclegb//2UvJfhNS
         2k1OXyRArnD+7uWz2SYRMk1aEMUmTLrNXKpSr9+cQ3OG5tl8DxGrIZk06LNSwI7ZyUOi
         L9L9RRQIPn7P6ob9ey55D8XmdmZT+2/wRWikfaYj2ZMvF4L6yCNm29q1HNjnjlYHqrcS
         2NOKqIrYpu8EXLD9ezg9NHUwgkYrjUfZK77NpIMSAU5KZ8epIfVrzSuG+hNmPTYw23xZ
         Q/rg==
X-Gm-Message-State: ALoCoQltQEyrosO3dnG/kkKvJ2Oky9UsUXgK7dHfTqdmLvzqhhvwjVxUHAWox+evzxEV+7aBrd5n
X-Received: by 10.194.80.7 with SMTP id n7mr43392000wjx.8.1400674246598;
        Wed, 21 May 2014 05:10:46 -0700 (PDT)
Received: from [172.20.10.5] (94.197.120.245.threembb.co.uk. [94.197.120.245])
        by mx.google.com with ESMTPSA id lo18sm2015366wic.1.2014.05.21.05.10.39
        for <caml-list@inria.fr>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Wed, 21 May 2014 05:10:45 -0700 (PDT)
From: Ollie Frolovs <ollie.frolovs.2012@my.bristol.ac.uk>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
Message-Id: <762DAB52-9D2E-4002-80B0-526258DD7856@my.bristol.ac.uk>
Date: Wed, 21 May 2014 13:10:36 +0100
To: caml users <caml-list@inria.fr>
Mime-Version: 1.0 (Mac OS X Mail 7.3 \(1878.2\))
X-Mailer: Apple Mail (2.1878.2)
X-Validation-by: ollie.frolovs.2012@my.bristol.ac.uk
Subject: [Caml-list] Random.self_init in Jane Street Core

Hello

I=92ve been trying to use Random.self_init in Jane Street=92s Core but ever=
y time I run my program it returns the same result as if the self_init is i=
n fact completely deterministic. Two questions =96 what am I doing wrong an=
d how do I make it =93random=94 (as in returning different values on each r=
un of the application).

I compile the following source into native code with =93corebuild=94.

When I run the program, the result is ALWAYS
1 0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
1 1=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
0 1
0 2
0 3

I=92ve also upload the code and the output from "opam list -i=94 on GitHub,=
 if that=92s more convenient https://gist.github.com/olliefr/d6312d8195e9a3=
0aa80c

I believe I have the latest compiler/libraries. The system is OS X Maverick=
s.

Many thanks,

Ollie

--
(* SOURCE CODE BEGINS *)=20

open Core.Std=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
let _ =3D Random.self_init=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20

(*=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
  FIXME there must be something in the standard library to do this!=20=20=
=20=20=20=20=20=20=20=20=20=20=20
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
  Iterate a function over a value, tail-recursively.=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  n: how many times=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  f: function to apply=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  a: initial value of the argument=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20
*)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
let rec iterate n f a =3D=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  if n<=3D0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  then a=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  else iterate (n-1) f (f a)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20

(* Wandering Light *)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
let light =3D (0,0)

let wander (x,y) =3D=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  match (1 + Random.int 4) with=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20
      1 -> (x+1, y)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
    | 2 -> (x, y+1)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
    | 3 -> (x-1, y)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
    | 4 -> (x, y+1)=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
    | _ -> failwith "random direction is not 1 to 4, wtf?"=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
let render (x,y) =3D printf "%i %i\n" x y=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
let step light =3D=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  let newlight =3D wander light in=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20
  render newlight;=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
  newlight=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20
let _ =3D iterate 5 step (0,0)

(* THE END *)=
