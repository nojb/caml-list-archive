Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id DDD3C7EE5B
	for <caml-list@sympa.inria.fr>; Mon, 26 May 2014 16:23:29 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=74.125.82.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  philippe.veber@gmail.com designates 74.125.82.44 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f44.google.com) identity=helo;
  client-ip=74.125.82.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-wg0-f44.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuYBAJ1Ng1NKfVIslWdsb2JhbABZhDGtQ5VZCBYOAQEBAQcNCQkSKoIcIi4BGx4DEggBB10BEQEFASIbGogLAQMRo1eDEWqNGYMNmWYKGScNZIU2EQEFDJMNAQOZc5E2GCmEajs
X-IPAS-Result: AuYBAJ1Ng1NKfVIslWdsb2JhbABZhDGtQ5VZCBYOAQEBAQcNCQkSKoIcIi4BGx4DEggBB10BEQEFASIbGogLAQMRo1eDEWqNGYMNmWYKGScNZIU2EQEFDJMNAQOZc5E2GCmEajs
X-IronPort-AV: E=Sophos;i="4.98,913,1392159600"; 
   d="scan'208";a="76429652"
Received: from mail-wg0-f44.google.com ([74.125.82.44])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 26 May 2014 16:23:29 +0200
Received: by mail-wg0-f44.google.com with SMTP id a1so7939460wgh.3
        for <caml-list@inria.fr>; Mon, 26 May 2014 07:23:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=/LvRfi6vhRS/b8YX0pV8I2wughzR8DXd8p7gTHASlSY=;
        b=jusdNo3fFYqUz0CNVL14zPS/k2Vf1yoFL8716i24aRIBCIlUp+FraI4MqQTDH4Egso
         isdZwxLtpzrZ2sgBj/759JwBytbpOYqHFVylVB8uYfqdrX/uzaT3D6esD99wKusd5H62
         eC2miRnqZ7t6Thjx+DZQ5tHe9YMqGxLI1XcFo8zpRLmQgo0/nwjEVFiTxGkAZHUqeWPI
         Z+dQFnVrLLMDG/B3IfrIIGutkU5J23cC9iyEbv6Y6XY0xwfLHbtGPxtHXeFqCGpErVWH
         BbF7ZTXITRhqDHQz7wuLsBO+3rRWcZDpVsPnZ7o6n3ZP+wt16ddz9m+Nt1om9V+I3fe6
         2WhA==
X-Received: by 10.180.91.162 with SMTP id cf2mr28177456wib.57.1401114209479;
 Mon, 26 May 2014 07:23:29 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.239.100 with HTTP; Mon, 26 May 2014 07:23:09 -0700 (PDT)
From: Philippe Veber <philippe.veber@gmail.com>
Date: Mon, 26 May 2014 16:23:09 +0200
Message-ID: <CAOOOohTKWk6gsz2MFqMniK0MLenRmdvsh8hG1hjqO2cXQJxj0Q@mail.gmail.com>
To: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=f46d0438933bbef3de04fa4e52f6
X-Validation-by: philippe.veber@gmail.com
Subject: [Caml-list] Uncaught exceptions in function type.

--f46d0438933bbef3de04fa4e52f6
Content-Type: text/plain; charset=ISO-8859-1

Hi everyone,

Out of curiosity, I was wondering how difficult it would be in theory to
extend the type system so that exceptions that can pop out of a function
when it is called would be included in the type of the function. Could this
type information be infered automatically? Could this be used to have an
exhaustivity check in the "with" part of a try ... with expression?

I guess that if it was so easy, we would already be enjoying it within our
favorite compiler, but I fail to see how hairy is the question.

Cheers,
  Philippe.

--f46d0438933bbef3de04fa4e52f6
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi everyone,<br><br>Out of curiosity, I was wondering how =
difficult it would be in theory to extend the type system so that exception=
s that can pop out of a function when it is called would be included in the=
 type of the function. Could this type information be infered automatically=
? Could this be used to have an exhaustivity check in the &quot;with&quot; =
part of a try ... with expression? <br>

<br>I guess that if it was so easy, we would already be enjoying it within =
our favorite compiler, but I fail to see how hairy is the question. <br><br=
>Cheers,<br>=A0 Philippe.<br><br><br></div>

--f46d0438933bbef3de04fa4e52f6--
