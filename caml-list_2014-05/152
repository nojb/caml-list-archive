Return-Path: <philippe.veber@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id E9C9A7EE5B
	for <caml-list@sympa.inria.fr>; Mon, 26 May 2014 17:25:41 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  philippe.veber@gmail.com) identity=pra;
  client-ip=74.125.82.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  philippe.veber@gmail.com designates 74.125.82.171 as
  permitted sender) identity=mailfrom; client-ip=74.125.82.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="philippe.veber@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-we0-f171.google.com) identity=helo;
  client-ip=74.125.82.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="philippe.veber@gmail.com";
  x-sender="postmaster@mail-we0-f171.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ar8BAK5bg1NKfVKrlGdsb2JhbABZg1lYrDyMWYh8AYEKCBYOAQEBAQcLCwkSKoIlAQEBAwESLgEbEgsBAwELBgULGiEiAREBBQEKEgYlEIgLAQMJCA2jQGqNGYMNmW8KGScDCmSFNhEBBQyOQgQHhEAEhF4FlRCBPY95GCmEajs
X-IPAS-Result: Ar8BAK5bg1NKfVKrlGdsb2JhbABZg1lYrDyMWYh8AYEKCBYOAQEBAQcLCwkSKoIlAQEBAwESLgEbEgsBAwELBgULGiEiAREBBQEKEgYlEIgLAQMJCA2jQGqNGYMNmW8KGScDCmSFNhEBBQyOQgQHhEAEhF4FlRCBPY95GCmEajs
X-IronPort-AV: E=Sophos;i="4.98,913,1392159600"; 
   d="scan'208";a="76447437"
Received: from mail-we0-f171.google.com ([74.125.82.171])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 26 May 2014 17:25:41 +0200
Received: by mail-we0-f171.google.com with SMTP id w62so8287831wes.16
        for <multiple recipients>; Mon, 26 May 2014 08:25:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=A5tP2CyVFfeK3uDpGKekblN88ZMwE3MMdVubRLQQoZg=;
        b=HL7csEPRH1ryg0wyG/L7aOm4Hxy/uNGY5Cycogb0i08NlPUFbQKkcCZ4APY4+69G2c
         ZuDFu0o8pR/hKbBBZX/FOmCI+kSTRSjDH7ho87qbkF8+ma478ZxMrtKCcYKdQyF0baTm
         ettL6vVxN5CSQHiKhxGk3oaQs899fJWhgi421ZI4GPEu5qMkvky7OtSquhx2ZRh7v1i4
         NAMrkQgFyAozUpDLX/FH2hYxMsF1YFUYDlmglP4BRhFw9KNRP5Feaw603yJc4hEauWqr
         OFEehPUDAhfnfiGJ6OqZ4EgS0nVGiuDbhaob2ClNiC48/UmqKdFACO3qC+TIAnBBI5al
         r4PQ==
X-Received: by 10.194.77.2 with SMTP id o2mr29937012wjw.68.1401117941216; Mon,
 26 May 2014 08:25:41 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.194.239.100 with HTTP; Mon, 26 May 2014 08:25:21 -0700 (PDT)
In-Reply-To: <53835610.9050609@inria.fr>
References: <CAOOOohTKWk6gsz2MFqMniK0MLenRmdvsh8hG1hjqO2cXQJxj0Q@mail.gmail.com>
 <53835610.9050609@inria.fr>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Mon, 26 May 2014 17:25:21 +0200
Message-ID: <CAOOOohQyNaO5SUVkxzZuZbVW7Jw_m-36nzhDBXvJF99UG-UvHQ@mail.gmail.com>
To: Romain Bardou <romain.bardou@inria.fr>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7bfced9c2cbd9904fa4f31d1
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Uncaught exceptions in function type.

--047d7bfced9c2cbd9904fa4f31d1
Content-Type: text/plain; charset=ISO-8859-1

Hi Romain!


> Some issues:
>
> - One needs to separate exceptions into two groups, the ones that you
> are actually interested in typing (their purpose is to kill the program,
> so to speak) and the ones that you are not (they are actually used for
> control flow).
>
I would not like such a separation, unless the user can decide the kind of
each exception (did you say burdensome? ;o). This kind of separation is
pretty much the reason why there are errors and exceptions in Java, IIRC.


>
> - I'm not sure it is easy to infer. For instance, in:
>
> let f g =
>   g 1
>
> should we just assume that g raises nothing?

No, we should assume g raises something, and that f raises the same.


> Or should we use some kind
> of row variable, like:
>
> let f (g: 'a raise ([< ] as 'raises): 'b raise 'raises =
>   g 1
>

Yes more like that


>
> But then what about:
>
> let f
>     (g: 'a raise ([< ] as 'raises_h)
>     (h: 'a raise ([< ] as 'raises_g): 'b raise [ 'raises_g | 'raises_h ] =
>   g 1 + h 2
>
> is it sound to have those abstract union types [ 'raises_g | 'raises_h ]?
>

I guess it is not easy because 'raises_g and 'raises_h may have
incompatibilities (same constructors with different arguments). Since you
worked on union of abstract polymorphic variant types, I guess you know
pretty well how difficult that would be ;o).


>
> Do we want all functions to have these convoluted types?
>
Representing those types could be optional most of the time. The only place
where they would be important would when catching exceptions, to have the
compiler check for exhaustivity.


>
> --
> Romain Bardou
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--047d7bfced9c2cbd9904fa4f31d1
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_extra">Hi Romain!<br><br><div clas=
s=3D"gmail_quote"><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><div=
 class=3D"h5">


<br>
</div></div>Some issues:<br>
<br>
- One needs to separate exceptions into two groups, the ones that you<br>
are actually interested in typing (their purpose is to kill the program,<br>
so to speak) and the ones that you are not (they are actually used for<br>
control flow).<br></blockquote><div>I would not like such a separation, unl=
ess the user can decide the kind of each exception (did you say burdensome?=
 ;o). This kind of separation is pretty much the reason why there are error=
s and exceptions in Java, IIRC.<br>

</div><div>=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
- I&#39;m not sure it is easy to infer. For instance, in:<br>
<br>
let f g =3D<br>
=A0 g 1<br>
<br>
should we just assume that g raises nothing? </blockquote><div>No, we shoul=
d assume g raises something, and that f raises the same.<br>=A0</div><block=
quote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc=
 solid;padding-left:1ex">

Or should we use some kind<br>
of row variable, like:<br>
<br>
let f (g: &#39;a raise ([&lt; ] as &#39;raises): &#39;b raise &#39;raises =
=3D<br>
=A0 g 1<br></blockquote><div><br>Yes more like that<br>=A0<br></div><blockq=
uote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc =
solid;padding-left:1ex">
<br>
But then what about:<br>
<br>
let f<br>
=A0 =A0 (g: &#39;a raise ([&lt; ] as &#39;raises_h)<br>
=A0 =A0 (h: &#39;a raise ([&lt; ] as &#39;raises_g): &#39;b raise [ &#39;ra=
ises_g | &#39;raises_h ] =3D<br>
=A0 g 1 + h 2<br>
<br>
is it sound to have those abstract union types [ &#39;raises_g | &#39;raise=
s_h ]?<br></blockquote><div><br>I guess it is not easy because &#39;raises_=
g and &#39;raises_h may have incompatibilities (same constructors with diff=
erent arguments). Since you worked on union of abstract polymorphic variant=
 types, I guess you know pretty well how difficult that would be ;o).<br>

=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex">
<br>
Do we want all functions to have these convoluted types?<br></blockquote><d=
iv>Representing those types could be optional most of the time. The only pl=
ace where they would be important would when catching exceptions, to have t=
he compiler check for exhaustivity.<br>

=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex">
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Romain Bardou<br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</font></span></blockquote></div><br></div></div>

--047d7bfced9c2cbd9904fa4f31d1--
