Return-Path: <Sebastien.Ferre@irisa.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 37D9BBC37
	for <caml-list@yquem.inria.fr>; Wed, 19 Aug 2009 09:20:22 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="4.43,407,1246831200"; 
   d="ml'?scan'208";a="34564183"
Received: from eltanin.irisa.fr (HELO [131.254.14.123]) ([131.254.14.123])
  by mail1-relais-roc.national.inria.fr with ESMTP; 19 Aug 2009 09:20:22 +0200
Message-ID: <4A8BA7B6.2040201@irisa.fr>
Date: Wed, 19 Aug 2009 09:20:22 +0200
From: Sebastien Ferre <Sebastien.Ferre@irisa.fr>
Organization: IRISA
User-Agent: Thunderbird 1.5.0.12 (X11/20070530)
MIME-Version: 1.0
To: tumenjargal tsagaan <delgiika@yahoo.de>, caml-list@inria.fr
Subject: Re: [Caml-list] ocaml for the Semantic Web
References: <531838.30488.qm@web28514.mail.ukl.yahoo.com>
In-Reply-To: <531838.30488.qm@web28514.mail.ukl.yahoo.com>
Content-Type: multipart/mixed;
 boundary="------------070403030903090209050001"
X-Spam: no; 0.00; irisa:01 ocaml:01 ocaml:01 parser:01 beginner's:01 bug:01 irisa:01 datatype:01 datatype:01 node:01 accessors:01 node:01 2009:98 beginners:01 wrote:01 
X-Attachments: cset="UTF-8" name="rdf.ml" name="rdf.ml" 

This is a multi-part message in MIME format.
--------------070403030903090209050001
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit

Hi,

I am also interested in processing semantic web languages in OCaml,
and I haven't found anything yet.
Some months ago, I wrote a parser for RDF files (using Xml-light).
This cannot be considered as an "API" for RDF, but the hard work of
analysing the RDF-XML is done (source file as attachment).

SÃ©bastien

tumenjargal tsagaan wrote:
> Hi,
> 
> (1) is there any specialized APIs for processing RDF as well as OWL file?
> (2) is there any similar API in Ocaml like XML-parsers from Java world?
> 
> Thank you.
> 
> Tumee.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--------------070403030903090209050001
Content-Type: text/plain;
 name="rdf.ml"
Content-Transfer-Encoding: base64
Content-Disposition: inline;
 filename="rdf.ml"

KCoKICAgRXh0cmFjdGluZyBSREYgc3RhdGVtZW50cyBmcm9tIHRoZSBYTUwgc3RydWN0dXJl
CiAgIGdlbmVyYXRlZCBieSB0aGUgbGlicmFyeSAneG1sLWxpZ2h0Jy4KCiAgIEF1dGhvcjog
U+liYXN0aWVuIEZlcnLpIDxmZXJyZUBpcmlzYS5mcj4KICAgQ3JlYXRpb246IDExLzAyLzIw
MDkKCiopCgp0eXBlIHVyaSA9IHN0cmluZwp0eXBlIGlkID0gc3RyaW5nCnR5cGUgbGFuZyA9
IHN0cmluZwp0eXBlIGRhdGF0eXBlID0gUGxhaW4gb2YgbGFuZyB8IFR5cGVkIG9mIHVyaQp0
eXBlIHRoaW5nID0gVVJJIG9mIHVyaSB8IFhNTExpdGVyYWwgb2YgWG1sLnhtbCB8IExpdGVy
YWwgb2Ygc3RyaW5nICogZGF0YXR5cGUgfCBCbGFuayBvZiBpZAp0eXBlIHByb3BlcnR5ID0g
dXJpCgp0eXBlIHRyZWUgPSBOb2RlIG9mIHRoaW5nICogKHByb3BlcnR5ICogKHVyaSBvcHRp
b24gKiB0cmVlKSkgbGlzdAp0eXBlIHJkZiA9IHsKICAgIHhtbG5zIDogKHN0cmluZyAqIHN0
cmluZykgbGlzdDsKICAgIHRyZWVzIDogdHJlZSBsaXN0CiAgfQoKKCogYWNjZXNzb3JzICop
CgpsZXQgc3ViamVjdCAoTm9kZSAocywgXykpID0gcwoKbGV0IHByb3BlcnRpZXMgKE5vZGUg
KF8sIHBzKSkgPSBwcwoKbGV0IGFsbF9vYmplY3RzIChOb2RlIChfLCBwcykpIHAgPSBMaXN0
LmZvbGRfcmlnaHQgKGZ1biAocCcsIChfLG8nKSkgcmVzIC0+IGlmIHAnID0gcCB0aGVuIG8n
OjpyZXMgZWxzZSByZXMpIHBzIFtdCgpsZXQgc3RhdGVtZW50IChOb2RlIChfLCBwcykpIHAg
byA9CiAgbGV0IChfLCAodXJpLCBfKSkgPSBMaXN0LmZpbmQgKGZ1biAocCcsICh1cmknLCBO
b2RlIChvJywgXykpKSAtPiBwJyA9IHAgJiYgbycgPSBvKSBwcyBpbgogIHVyaQoKKCogUkRG
IHZvY2FidWxhcnkgKikKCigqIG5hbWVzcGFjZSAqKQpsZXQgbmFtZXNwYWNlID0gImh0dHA6
Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCigqIGNsYXNzZXMgKikK
bGV0IF9YTUxMaXRlcmFsID0gInJkZjpYTUxMaXRlcmFsIgpsZXQgX1Byb3BlcnR5ID0gInJk
ZjpQcm9wZXJ0eSIKbGV0IF9TdGF0ZW1lbnQgPSAicmRmOlN0YXRlbWVudCIKbGV0IF9CYWcg
PSAicmRmOkJhZyIKbGV0IF9TZXQgPSAicmRmOlNldCIKbGV0IF9BbHQgPSAicmRmOkFsdCIK
bGV0IF9MaXN0ID0gInJkZjpMaXN0IgooKiBwcm9wZXJ0aWVzICopCmxldCBfdHlwZSA9ICJy
ZGY6dHlwZSIKbGV0IF9maXJzdCA9ICJyZGY6Zmlyc3QiCmxldCBfcmVzdCA9ICJyZGY6cmVz
dCIKbGV0IF92YWx1ZSA9ICJyZGY6dmFsdWUiCmxldCBfc3ViamVjdCA9ICJyZGY6c3ViamVj
dCIKbGV0IF9vYmplY3QgPSAicmRmOm9iamVjdCIKbGV0IF9wcmVkaWNhdGUgPSAicmRmOnBy
ZWRpY2F0ZSIKbGV0IF9uIG4gPSAicmRmOl8iIF4gc3RyaW5nX29mX2ludCBuCigqIHJlc3Nv
dXJjZXMgKikKbGV0IF9uaWwgPSAicmRmOm5pbCIKCigqIHBhcnNpbmcgKikKCnR5cGUgcGFy
c2VfY3R4ID0geyBiYXNlIDogc3RyaW5nOyBsYW5nIDogc3RyaW5nfQoKZXhjZXB0aW9uIEZh
aWx1cmUKZXhjZXB0aW9uIEVycm9yCgpsZXQgcGFyc2VfbGlzdCBwIGwgPQogIExpc3QucmV2
CiAgICAoTGlzdC5mb2xkX2xlZnQKICAgICAgIChmdW4gcmVzIHggLT4gdHJ5IHAgeCA6OiBy
ZXMgd2l0aCBfIC0+IHJlcykKICAgICAgIFtdIGwpCgpsZXQgZGVmYXVsdF9jdHggPSB7IGJh
c2UgPSAiIjsgbGFuZyA9ICIifQoKbGV0IGdldF9jdHggcHJldmlvdXNfY3R4IGUgPQogIHsg
YmFzZSA9ICh0cnkgWG1sLmF0dHJpYiBlICJ4bWw6YmFzZSIgd2l0aCBfIC0+IHByZXZpb3Vz
X2N0eC5iYXNlKTsKICAgIGxhbmcgPSAodHJ5IFhtbC5hdHRyaWIgZSAieG1sOmxhbmciIHdp
dGggXyAtPiBwcmV2aW91c19jdHgubGFuZyl9CgpsZXQgcmVzb2x2ZSBjdHggcmVsID0KICBp
ZiBTdHJpbmcuY29udGFpbnMgcmVsICc6JwogIHRoZW4gcmVsCiAgZWxzZSBjdHguYmFzZSBe
IHJlbAoKbGV0IHJlc29sdmVfdGFnIGN0eCB0YWcgPQogIGlmIFN0cmluZy5jb250YWlucyB0
YWcgJzonCiAgdGhlbiB0YWcKICBlbHNlIGN0eC5iYXNlIF4gIiMiIF4gdGFnCgpsZXQgaXND
b3JlU3ludGF4VGVybSB4ID0KICBMaXN0Lm1lbSB4IFsicmRmOlJERiI7ICJyZGY6SUQiOyAi
cmRmOmFib3V0IjsgInJkZjpwYXJzZVR5cGUiOyAicmRmOnJlc291cmNlIjsgInJkZjpub2Rl
SUQiOyAicmRmOmRhdGF0eXBlIl0KCmxldCBpc1N5bnRheFRlcm0geCA9CiAgaXNDb3JlU3lu
dGF4VGVybSB4IHx8IExpc3QubWVtIHggWyJyZGY6RGVzY3JpcHRpb24iOyAicmRmOmxpIl0K
CmxldCBpc09sZFRlcm0geCA9IExpc3QubWVtIHggWyJyZGY6YWJvdXRFYWNoIjsgInJkZjph
Ym91dEVhY2hQcmVmaXgiOyAicmRmOmJhZ0lEIl0KCmxldCBpc05vZGVFbGVtZW50VVJJIHgg
PSBub3QgKGlzQ29yZVN5bnRheFRlcm0geCB8fCB4ID0gInJkZjpsaSIgfHwgaXNPbGRUZXJt
IHgpCmxldCBpc1Byb3BlcnR5RWxlbWVudFVSSSB4ID0gbm90IChpc0NvcmVTeW50YXhUZXJt
IHggfHwgeCA9ICJyZGY6RGVzY3JpcHRpb24iIHx8IGlzT2xkVGVybSB4KQpsZXQgaXNQcm9w
ZXJ0eUF0dHJpYnV0ZVVSSSB4ID0gbm90IChpc0NvcmVTeW50YXhUZXJtIHggfHwgeCA9ICJy
ZGY6RGVzY3JpcHRpb24iIHx8IHggPSAicmRmOmxpIiB8fCBpc09sZFRlcm0geCkKCmxldCBy
ZWMgcGFyc2VfUkRGIGUgPQogIGlmIFhtbC50YWcgZSA9ICJyZGY6UkRGIgogIHRoZW4gewog
ICAgeG1sbnMgPQogICAgICBMaXN0LmZvbGRfcmlnaHQKICAgICAgKGZ1biAoYSx2KSByZXMg
LT4KCWxldCBpID0gdHJ5IFN0cmluZy5pbmRleCBhICc6JyB3aXRoIF8gLT4gU3RyaW5nLmxl
bmd0aCBhIGluCglpZiBTdHJpbmcuc3ViIGEgMCBpID0gInhtbG5zIgoJdGhlbgoJICBsZXQg
bnMgPQoJICAgIGlmIGkgPSBTdHJpbmcubGVuZ3RoIGEKCSAgICB0aGVuICIiCgkgICAgZWxz
ZSBTdHJpbmcuc3ViIGEgKGkrMSkgKFN0cmluZy5sZW5ndGggYSAtIChpKzEpKSBpbgoJICAo
bnMsdik6OnJlcwoJZWxzZSByZXMpCiAgICAgIChYbWwuYXR0cmlicyBlKSBbXTsKICAgIHRy
ZWVzID0KICAgICAgbGV0IGN0eCA9IGdldF9jdHggZGVmYXVsdF9jdHggZSBpbgogICAgICBw
YXJzZV9saXN0IChwYXJzZV9ub2RlRWxlbWVudCBjdHgpIChYbWwuY2hpbGRyZW4gZSkKICB9
CiAgZWxzZSByYWlzZSBGYWlsdXJlCgphbmQgcGFyc2Vfbm9kZUVsZW1lbnQgcHJldmlvdXNf
Y3R4IGUgPQogIGxldCB0YWcgPSBYbWwudGFnIGUgaW4KICBsZXQgY3R4ID0gZ2V0X2N0eCBw
cmV2aW91c19jdHggZSBpbgogIGlmIGlzTm9kZUVsZW1lbnRVUkkgdGFnCiAgdGhlbgogICAg
bGV0IHN1YmplY3QgPQogICAgICB0cnkgVVJJIChyZXNvbHZlIGN0eCAoIiMiIF4gWG1sLmF0
dHJpYiBlICJyZGY6SUQiKSkgd2l0aCBfIC0+CiAgICAgIHRyeSBCbGFuayAoWG1sLmF0dHJp
YiBlICJyZGY6bm9kZUlEIikgd2l0aCBfIC0+CiAgICAgIHRyeSBVUkkgKHJlc29sdmUgY3R4
IChYbWwuYXR0cmliIGUgInJkZjphYm91dCIpKSB3aXRoIF8gLT4KCSAgQmxhbmsgIiIgaW4K
ICAgIGxldCBwcm9wZXJ0aWVzID0KICAgICAgKGlmIHRhZyA9ICJyZGY6RGVzY3JpcHRpb24i
IHRoZW4gW10gZWxzZSBbKF90eXBlLCAoTm9uZSwgTm9kZSAoVVJJIChyZXNvbHZlX3RhZyBj
dHggdGFnKSwgW10pKSldKSBACiAgICAgIHBhcnNlX2xpc3QgKHBhcnNlX3Byb3BlcnR5QXR0
ciBjdHgpIChYbWwuYXR0cmlicyBlKSBACiAgICAgIHBhcnNlX2xpc3QgKHBhcnNlX3Byb3Bl
cnR5RWx0IGN0eCAocmVmIDApKSAoWG1sLmNoaWxkcmVuIGUpIGluCiAgICBOb2RlIChzdWJq
ZWN0LCBwcm9wZXJ0aWVzKQogIGVsc2UgcmFpc2UgRmFpbHVyZQoKYW5kIHBhcnNlX3Byb3Bl
cnR5QXR0ciBjdHggKGEsdikgPQogIGlmIGlzUHJvcGVydHlBdHRyaWJ1dGVVUkkgYQogIHRo
ZW4KICAgIGlmIGEgPSBfdHlwZQogICAgdGhlbiAoYSwgKE5vbmUsIE5vZGUgKFVSSSAocmVz
b2x2ZSBjdHggdiksIFtdKSkpCiAgICBlbHNlIChhLCAoTm9uZSwgTm9kZSAoTGl0ZXJhbCAo
diwgUGxhaW4gY3R4LmxhbmcpLCBbXSkpKQogIGVsc2UgcmFpc2UgRmFpbHVyZQoKYW5kIHBh
cnNlX3Byb3BlcnR5RWx0IHByZXZpb3VzX2N0eCBjcHQgZSA9CiAgaW5jciBjcHQ7CiAgbGV0
IHRhZyA9IG1hdGNoIFhtbC50YWcgZSB3aXRoICJyZGY6bGkiIC0+ICJfIiBeIHN0cmluZ19v
Zl9pbnQgIWNwdCB8IHMgLT4gcyBpbgogIGxldCBjdHggPSBnZXRfY3R4IHByZXZpb3VzX2N0
eCBlIGluCiAgaWYgaXNQcm9wZXJ0eUVsZW1lbnRVUkkgdGFnCiAgdGhlbgogICAgbGV0IHJl
aWZpZWQgPSB0cnkgU29tZSAocmVzb2x2ZSBjdHggKCIjIiBeIFhtbC5hdHRyaWIgZSAicmRm
OklEIikpIHdpdGggXyAtPiBOb25lIGluCiAgICBsZXQgY2hpbGRyZW4gPSBYbWwuY2hpbGRy
ZW4gZSBpbgogICAgdHJ5CiAgICAgIG1hdGNoIFhtbC5hdHRyaWIgZSAicmRmOnBhcnNlVHlw
ZSIgd2l0aAogICAgICB8ICJSZXNvdXJjZSIgLT4gKCogcGFyc2VUeXBlUmVzb3VyY2VQcm9w
ZXJ0eUVsdCAqKQoJICBsZXQgcHJvcGVydGllcyA9IHBhcnNlX2xpc3QgKHBhcnNlX3Byb3Bl
cnR5RWx0IGN0eCAocmVmIDApKSBjaGlsZHJlbiBpbgoJICAodGFnLCAocmVpZmllZCwgTm9k
ZSAoQmxhbmsgIiIsIHByb3BlcnRpZXMpKSkKICAgICAgfCAiQ29sbGVjdGlvbiIgLT4gKCog
cGFyc2VUeXBlQ29sbGVjdGlvblByb3BlcnR5RWx0ICopCgkgIGxldCB0ID0KCSAgICBMaXN0
LmZvbGRfcmlnaHQKCSAgICAgIChmdW4gbiByZXMgLT4KCQlOb2RlIChCbGFuayAiIiwKCQkg
ICAgICBbIChfZmlyc3QsIChOb25lLCBuKSk7CgkJCShfcmVzdCwgKE5vbmUsIHJlcykpXSkp
CgkgICAgICAocGFyc2VfbGlzdCAocGFyc2Vfbm9kZUVsZW1lbnQgY3R4KSBjaGlsZHJlbikK
CSAgICAgIChOb2RlIChVUkkgX25pbCwgW10pKSBpbgoJICAodGFnLCAocmVpZmllZCwgdCkp
CiAgICAgIHwgIkxpdGVyYWwiICgqIHBhcnNlVHlwZUxpdGVyYWxQcm9wZXJ0eUVsdCAqKQog
ICAgICB8IF8gLT4gKCogcGFyc2VUeXBlT3RoZXJQcm9wZXJ0eUVsdCAqKQoJICBsZXQgeG1s
ID0gbWF0Y2ggY2hpbGRyZW4gd2l0aCBbbl0gLT4gbiB8IF8gLT4gcmFpc2UgRXJyb3IgaW4K
CSAgKHRhZywgKHJlaWZpZWQsIE5vZGUgKFhNTExpdGVyYWwgeG1sLCBbXSkpKQogICAgd2l0
aCBfIC0+CiAgICAgIG1hdGNoIGNoaWxkcmVuIHdpdGgKICAgICAgfCBbWG1sLkVsZW1lbnQg
XyBhcyBuXSAtPiAoKiByZXNvdXJjZVByb3BlcnR5RWx0ICopCgkgIGxldCB0ID0gcGFyc2Vf
bm9kZUVsZW1lbnQgY3R4IG4gaW4KCSAgKHRhZywgKHJlaWZpZWQsIHQpKQogICAgICB8IFtY
bWwuUENEYXRhIHNdIC0+ICgqIGxpdGVyYWxQcm9wZXJ0eUVsdCAqKQoJICBsZXQgZCA9Cgkg
ICAgdHJ5IFR5cGVkIChYbWwuYXR0cmliIGUgInJkZjpkYXRhdHlwZSIpIHdpdGggXyAtPgoJ
ICAgICAgICBQbGFpbiBjdHgubGFuZyBpbgoJICAodGFnLCAocmVpZmllZCwgTm9kZSAoTGl0
ZXJhbCAocyxkKSwgW10pKSkKICAgICAgfCBbXSAtPiAoKiBlbXB0eVByb3BlcnR5RWx0ICop
CgkgIGxldCBhdHRyaWJzID0gWG1sLmF0dHJpYnMgZSBpbgoJICAoIG1hdGNoIGF0dHJpYnMg
d2l0aAoJICB8IFtdCgkgIHwgWyJyZGY6SUQiLF9dIC0+CgkgICAgICAodGFnLCAocmVpZmll
ZCwgTm9kZSAoTGl0ZXJhbCAoIiIsUGxhaW4gY3R4LmxhbmcpLCBbXSkpKQoJICB8IF8gLT4K
CSAgICAgIGxldCBvYmogPQoJCXRyeSBVUkkgKHJlc29sdmUgY3R4IChYbWwuYXR0cmliIGUg
InJkZjpyZXNvdXJjZSIpKSB3aXRoIF8gLT4KCQl0cnkgQmxhbmsgKFhtbC5hdHRyaWIgZSAi
cmRmOm5vZGVJRCIpIHdpdGggXyAtPgoJCSAgICBCbGFuayAiIiBpbgoJICAgICAgbGV0IHBy
b3BlcnRpZXMgPSBwYXJzZV9saXN0IChwYXJzZV9wcm9wZXJ0eUF0dHIgY3R4KSBhdHRyaWJz
IGluCgkgICAgICAodGFnLCAocmVpZmllZCwgTm9kZSAob2JqLCBwcm9wZXJ0aWVzKSkpCgkg
ICApCiAgICAgIHwgXyAtPiByYWlzZSBFcnJvcgogIGVsc2UgcmFpc2UgRmFpbHVyZQoKbGV0
IGZyb21feG1sIHhtbCA9CiAgdHJ5IHBhcnNlX1JERiB4bWwgd2l0aCBfIC0+CiAgICAgIHsg
eG1sbnMgPSBbXTsgdHJlZXMgPSBbcGFyc2Vfbm9kZUVsZW1lbnQgZGVmYXVsdF9jdHggeG1s
XX0K
--------------070403030903090209050001--

