Return-Path: <Pascal.Cuoq@cea.fr>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.4 required=5.0 tests=AWL,HTML_MESSAGE,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id BC849BBAF
	for <caml-list@yquem.inria.fr>; Mon, 24 Aug 2009 14:32:44 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlUFAKckkkqEqOABXWdsb2JhbACCKC6YJxcLCQcUuEiEGgU
X-IronPort-AV: E=Sophos;i="4.44,265,1249250400"; 
   d="scan'208,217";a="45067277"
Received: from oxalide-out.extra.cea.fr ([132.168.224.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 24 Aug 2009 14:32:44 +0200
Received: from pisaure.intra.cea.fr (pisaure.intra.cea.fr [132.166.88.21])
	by oxalide.extra.cea.fr (8.14.2/8.14.2/CEAnet-Internet-out-2.0) with ESMTP id n7OCWhJU019638
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <caml-list@yquem.inria.fr>; Mon, 24 Aug 2009 14:32:43 +0200
Received: from muguet2.intra.cea.fr (muguet2.intra.cea.fr [132.166.192.7])
	by pisaure.intra.cea.fr (8.14.2/8.14.2) with ESMTP id n7OCWhU4003577
	for <caml-list@yquem.inria.fr>; Mon, 24 Aug 2009 14:32:43 +0200
	(envelope-from Pascal.Cuoq@cea.fr)
Received: from is005030.intra.cea.fr (is005030.intra.cea.fr [132.166.132.11])
	by muguet2.intra.cea.fr (8.13.8/8.13.8/CEAnet-Intranet-out-1.1) with ESMTP id n7OCWhuW004483
	for <caml-list@yquem.inria.fr>; Mon, 24 Aug 2009 14:32:43 +0200
Message-Id: <67BF878D-BA80-4CE8-87BA-760AE8082517@cea.fr>
From: Pascal Cuoq <Pascal.Cuoq@cea.fr>
To: caml-list@yquem.inria.fr
In-Reply-To: <20090824100004.6DBBDBBAF@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=Apple-Mail-6-79416974
Mime-Version: 1.0 (Apple Message framework v936)
Subject: Re: [Caml-list] Physical counterpart to Pervasives.compare?
Date: Mon, 24 Aug 2009 14:30:40 +0200
References: <20090824100004.6DBBDBBAF@yquem.inria.fr>
X-Mailer: Apple Mail (2.936)
X-Spam: no; 0.00; cuoq:01 cuoq:01 pervasives:01 pervasives:01 ocaml's:01 compaction:01 byterun:01 val:01 sizeof:01 ocaml's:01 compaction:01 byterun:01 val:01 sizeof:01 garbage:01 


--Apple-Mail-6-79416974
Content-Type: text/plain;
	charset=ISO-8859-1;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: quoted-printable

Pascal Cuoq a =E9crit :
>> Elnatan Reisner wrote:
>>> Is there something that can complete this analogy:
>>> (=3D) is to (=3D=3D) as Pervasives.compare is to ___?
>>>
> The simple solution is to number at creation the objects that you =20
> want to
> physically compare, using an additional field.

Since people are still participating in this topic,
I have a remark. It is more a "what not to do" kind of
remark, but after replying last time, I remembered
that the current algorithm used by OCaml's GC
for compaction does not change the order of blocks
in memory (byterun/compact.c). Therefore, with the
current version, if you make sure in some way
that the values that you want to compare
are allocated directly in the major heap
(there are a couple of ways to do that),
you can theoretically compare their addresses
as unsigned longs: their order will not change
during execution.
But you should still do the comparison
with a unique C function written for this purpose.
If you tried to use a "convert address to int" function,
you would have a race condition between the conversion
of each address and garbage collection.

This is all in very poor taste, even more so than
the usual discussions about =3D=3D on this list.
Do I get some kind of prize for breaking the record?

Pascal
__
PS: I wrote a "convert address to int" function for
another purpose once. In order to increase my chances
for the prize, I will provide it here. Someone might be
interested in it. Perhaps someone who maintains a small
library for computing the size of an ML value...

external address_of_value: 'a -> int =3D "address_of_value"

value address_of_value(value v)
{
   return (Val_long(((unsigned long)v)/sizeof(long)));
}


--Apple-Mail-6-79416974
Content-Type: text/html;
	charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; ">Pascal Cuoq a =E9crit =
:<br><blockquote type=3D"cite"><blockquote type=3D"cite">Elnatan Reisner =
wrote:<br></blockquote></blockquote><blockquote type=3D"cite"><blockquote =
type=3D"cite"><blockquote type=3D"cite">Is there something that can =
complete this =
analogy:<br></blockquote></blockquote></blockquote><blockquote =
type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">(=3D) =
is to (=3D=3D) as Pervasives.compare is to =
___?<br></blockquote></blockquote></blockquote><blockquote =
type=3D"cite"><blockquote type=3D"cite"><blockquote =
type=3D"cite"><br></blockquote></blockquote></blockquote><blockquote =
type=3D"cite">The simple solution is to number at creation the objects =
that you want to<br></blockquote><blockquote type=3D"cite">physically =
compare, using an additional =
field.<br></blockquote><div><br></div><div>Since people are still =
participating in this topic,</div><div>I have a remark. It is more a =
"what not to do" kind of</div><div>remark, but after replying last time, =
I remembered</div><div>that the current algorithm used&nbsp;by OCaml's =
GC</div><div>for compaction does not change the order =
of&nbsp;blocks</div><div>in memory (byterun/compact.c). Therefore, with =
the</div><div>current version, if you&nbsp;make sure in some =
way</div><div>that the values that you want&nbsp;to =
compare</div><div>are allocated directly in the major =
heap</div><div>(there&nbsp;are a couple of ways to do =
that),&nbsp;</div><div>you can theoretically compare =
their&nbsp;addresses</div><div>as unsigned longs:&nbsp;their order will =
not change</div><div>during execution.</div><div>But you should still do =
the comparison</div><div>with a unique C function written for this =
purpose.</div><div>If you tried to use a&nbsp;"convert address to int" =
function,</div><div>you would have a&nbsp;race condition between the =
conversion</div><div>of each&nbsp;address and garbage =
collection.</div><div><br></div><div>This is all in very poor taste, =
even more so than</div><div>the usual discussions about =3D=3D on this =
list.</div><div>Do I get some kind of prize for breaking the =
record?</div><div><br></div><div>Pascal</div><div>__</div><div>PS: I =
wrote a "convert address to int" function for</div><div>another purpose =
once. In order to increase my chances</div><div>for the prize, I will =
provide it here. Someone might be</div><div>interested in it. Perhaps =
someone who maintains a small</div><div>library&nbsp;for computing the =
size of an ML value...</div><div><div><br></div><div><font =
class=3D"Apple-style-span" face=3D"Courier" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 13px;">external =
address_of_value: 'a -&gt; int =3D =
"address_of_value"</span></font></div><div><div><font =
class=3D"Apple-style-span" face=3D"Courier" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: =
13px;"><br></span></font></div><div><font class=3D"Apple-style-span" =
face=3D"Courier" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 13px;">value address_of_value(value =
v)</span></font></div><div><font class=3D"Apple-style-span" =
face=3D"Courier" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 13px;">{</span></font></div><div><font =
class=3D"Apple-style-span" face=3D"Courier" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 13px;">&nbsp;&nbsp;return =
(Val_long(((unsigned =
long)v)/sizeof(long)));</span></font></div><div><font =
class=3D"Apple-style-span" face=3D"Courier" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: =
13px;">}</span></font></div><div><br></div></div></div></body></html>=

--Apple-Mail-6-79416974--

