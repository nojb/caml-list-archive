Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA307ZNS001346
	for <caml-list@sympa-roc.inria.fr>; Thu, 3 Nov 2011 01:07:35 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AsQBAJPasU7RVdQ2kGdsb2JhbABEFoI3lz2HeQGHbAgiAQEBAQkJDQcUBCGBcgEBAQMBEgIsARsSCwEDAQsGBQsGAwECAQ0TAQ0hAhEBBQEKCggGExIJB4dgCJdpCotUgmCFWz2IcAIFCoM5hGxhBJQUhTGBLYNdgn49hAs
X-IronPort-AV: E=Sophos;i="4.69,446,1315173600"; 
   d="scan'208,217";a="116422029"
Received: from mail-vw0-f54.google.com ([209.85.212.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Nov 2011 01:07:29 +0100
Received: by vws11 with SMTP id 11so1120397vws.27
        for <caml-list@inria.fr>; Wed, 02 Nov 2011 17:07:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=cc:message-id:from:to:in-reply-to:content-type:mime-version:subject
         :date:references:x-mailer;
        bh=Z7hdYJypSvX6PylX4bP6QvNPfmmEwspNIsdvU77Cz9Y=;
        b=XDUY0ym1ykn9MLOi4wqcEEqOQ1J+Q7vxbHZzhUQrvKWrQGuaDdp6jP9KXwhUFcl6sv
         d/QPK3LWDzNV3hRUm1XLbsdDD/u5u6NHsnjrL3BzZFMxUYEor33BJpSZvOOjI4ggcJJy
         kupQ87afXJCp2OJatGToYAPbqDeMpTqeEVICs=
Received: by 10.52.90.80 with SMTP id bu16mr6907414vdb.113.1320278847091;
        Wed, 02 Nov 2011 17:07:27 -0700 (PDT)
Received: from [192.168.0.120] (modemcable190.109-177-173.mc.videotron.ca. [173.177.109.190])
        by mx.google.com with ESMTPS id r5sm5432324vdj.11.2011.11.02.17.07.12
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 02 Nov 2011 17:07:24 -0700 (PDT)
Cc: Anthony Tavener <anthony.tavener@gmail.com>, caml-list@inria.fr
Message-Id: <463546F9-F034-4968-BA62-443CAFD67F93@gmail.com>
From: Vincent Aravantinos <vincent.aravantinos@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
In-Reply-To: <CAPFanBEghH7ebE3gmbsv1SESv6Ur60G5deN8RAG_ryWSUNao1w@mail.gmail.com>
Content-Type: multipart/alternative; boundary=Apple-Mail-1-521692719
Mime-Version: 1.0 (Apple Message framework v936)
Date: Wed, 2 Nov 2011 20:06:32 -0400
References: <CAN=ouMSpOuajS2XGtX23M4S73C1XOa4LXZptexk+sh=YsLmauQ@mail.gmail.com> <4EB1A5DB.8070405@gmail.com> <CAN=ouMTApZjpU-CaZtdL4njXtmtRu++7fzJBJL3w3FRcHfjtSA@mail.gmail.com> <CAN=ouMS9rqqNR3KgCBnnjC_HcMrUnftVw643mkmhC_vrpXfv1A@mail.gmail.com> <CAN=ouMQ_xUULV5qWnRR93DOK9t+juor5RA-72-4zu783z_K2tg@mail.gmail.com> <CAPFanBEghH7ebE3gmbsv1SESv6Ur60G5deN8RAG_ryWSUNao1w@mail.gmail.com>
X-Mailer: Apple Mail (2.936)
Subject: Re: [Caml-list] Nested module exposing type from parent?


--Apple-Mail-1-521692719
Content-Type: text/plain;
	charset=ISO-8859-1;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: quoted-printable

Maybe I am wrong but I have the feeling that this is totally unrelated=20=
=20
to Anthony's question?
Could you please explain in more details how it solves the problem?
I actually tried your solution on Anthony's code but it does not solve=20=
=20
his problem (if I understood it well of course).

--
Vincent Aravantinos
PostDoctoral fellow, Concordia University, Hardware Verification Group
http://users.encs.concordia.ca/~vincent


Le 2 nov. 11 =E0 19:01, Gabriel Scherer a =E9crit :

> I see that you solved your problem in a way you find satisfying, but I
> would like to point out that the reason why your original code didn't
> work isn't exactly what you seem to think.
>
> When you define a submodule, the types defined before in the parent
> modules are perfectly accessible and can be referred, just as you
> would do when referring to types defined at the toplevel. You need not
> qualify the type with the outer module name (Vec.t in your example),
> as you are still *inside* this parent module.
>
>  module Vec =3D struct
>    type t =3D int
>    module Type =3D struct
>      type u =3D t
>    end
>  end
>
>  (1 : Vec.Type.u);;
>
> The problem in your case is that you wish to give the same name to the
> type in Vec and in Vec.Type. This would lead to the following:
>  ... module Type =3D struct type t =3D t end ...
>
> But this is ill-defined : it is a recursive type defined as being
> itself. The problem is that the OCaml syntax for type declarations
> always consider them recursive (for values you have "let" and "let
> rec", for types you have "type" which behaves like "type rec" with no
> opt-out way possible). This is a flaw of the OCaml syntax which is
> relatively well-known, see eg. http://ocaml.janestreet.com/?q=3Dnode/25
>
> A workaround is to define your inner type "t" in two steps, using an
> different intermediate name to break the cycle:
>
>  module Vec =3D struct
>    type t =3D int
>    module Type =3D struct
>      type u =3D t
>      type t =3D u
>    end
>  end
>
>  (1 : Vec.Type.t);;
>
>
> On Wed, Nov 2, 2011 at 10:14 PM, Anthony Tavener
> <anthony.tavener@gmail.com> wrote:
>> Oops, I didn't do a group-reply... so in case anyone is interested=20=20
>> in what I
>> ended up with:
>>
>> ---------- Forwarded message ----------
>> From: Anthony Tavener <anthony.tavener@gmail.com>
>> Date: Wed, Nov 2, 2011 at 2:50 PM
>> Subject: Re: [Caml-list] Nested module exposing type from parent?
>> To: Vincent Aravantinos <vincent.aravantinos@gmail.com>
>>
>>
>> Actually, better than I initially thought...
>> I keep this as I have them defined already, except as you said:=20=20
>> include
>> instead of open.
>>   module Vec =3D struct
>>     module Type =3D struct
>>       type t =3D { x: int; y: int }
>>     end
>>     include Type
>>     let make x y =3D {x;y}
>>     let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}
>>   end
>> Before, I had instead of the include:
>>   type t =3D Type.t
>>   open Type
>> Which worked, but then the type used everywhere was Vec.Type.t
>> Thanks again! Simple and effective, and I was looking in all the=20=20
>> wrong
>> places. :)
>> On Wed, Nov 2, 2011 at 2:36 PM, Anthony Tavener <anthony.tavener@gmail.c=
om=20
>> >
>> wrote:
>>>
>>> Thank-you Vincent!
>>> Though this requires a home for the "source type" module, at least=20=
=20
>>> the
>>> types come out right in the end. Thanks!
>>> And this led me to read specifically about include to understand=20=20
>>> what it
>>> really does. :)
>>>
>>> On Wed, Nov 2, 2011 at 2:19 PM, Vincent Aravantinos
>>> <vincent.aravantinos@gmail.com> wrote:
>>>>
>>>> Using "include" instead of "open" would work, ie. turning your=20=20
>>>> example
>>>> into:
>>>>
>>>> module Vec_main =3D struct
>>>>   type t =3D { x: int; y: int }
>>>>   let make x y =3D {x;y}
>>>>   let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}
>>>> end
>>>>
>>>> module Vec =3D struct
>>>>   include Vec_main
>>>>   module Type =3D struct
>>>>     include Vec_main
>>>>     ...
>>>>   end
>>>> end
>>>>
>>>> Then:
>>>> # let n =3D Vec.make 2 5;;
>>>> val n : Vec.t =3D {Vec.x =3D 2; Vec.y =3D 5}
>>>> # open Vec.Type;;
>>>> # let m =3D {x=3D1;y=3D2};;
>>>> val m : Vec.Type.t =3D {x =3D 1; y =3D 2}
>>>> # Vec.add m n;;
>>>> - : Vec.t =3D {Vec.x =3D 3; Vec.y =3D 7}
>>>>
>>>> Cheers
>>>>
>>>> --
>>>> Vincent Aravantinos - Postdoctoral Fellow, Concordia University,=20=20
>>>> Hardware
>>>> Verification Group
>>>>
>>>> On 11/02/2011 03:41 PM, Anthony Tavener wrote:
>>>>
>>>> I've been struggling with this occasionally...
>>>> I'm using nested modules to "open" access to select features of a=20=
=20
>>>> module.
>>>> My problem is I can't find a way to *expose* types in the parent=20=20
>>>> module
>>>> through such nested modules.
>>>> A simplified example of what I'm looking at:
>>>>   module Vec =3D struct
>>>>     type t =3D { x: int; y: int }
>>>>     let make x y =3D {x;y}
>>>>     let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}
>>>>     module Type =3D
>>>>       (* something which has type t =3D Vec.t,
>>>>        * with exposed structure when "open"ed.
>>>>        * Also note that Vec is not really an
>>>>        * explicit module like this; instead it
>>>>        * is implemented in vec.ml *)
>>>>   end
>>>> Example usage...
>>>>   let n =3D Vec.make 2 5
>>>>   open Vec.Type
>>>>   let m =3D {x=3D1;y=3D2}
>>>>   Vec.add m n
>>>>
>>>> To date, I've defined the type in the Type submodule, which is=20=20
>>>> then used
>>>> by the parent module. The unsatisfactory quality of this is that=20=20
>>>> Vec.Type.t
>>>> is the "true" type. Ideally the concrete type would live at=20=20
>>>> Vec.t, with
>>>> "open Vec.Type" bringing the fields of the type into scope.
>>>> As background, here are examples of opening different features of=20=
=20
>>>> the Vec
>>>> module:
>>>>   let c =3D Vec.add a b
>>>>   open Vec.Prefixed
>>>>   let c =3D vadd a b
>>>>   open Vec.Ops
>>>>   let c =3D a +| b
>>>>   open Vec.Type
>>>>   let c =3D Vec.add a {x;y;z=3D0.}
>>>> Apologies if this is really beginner-list material. It's minor,=20=20
>>>> but has
>>>> been bugging me.
>>>> Thank-you for looking,
>>>>  Tony
>>>>
>>>
>>
>>
>>
>
>
> --=20
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>


--Apple-Mail-1-521692719
Content-Type: text/html;
	charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; -webk=
it-line-break: after-white-space; ">Maybe I am wrong but I have the feeling=
 that this is totally unrelated to Anthony's question?<div>Could you please=
 explain in more details how it solves the problem?</div><div>I actually tr=
ied your solution on Anthony's code but it does not solve his problem (if I=
 understood it well of course).</div><div><br><div> <span class=3D"Apple-st=
yle-span" style=3D"orphans: 2; text-align: -webkit-auto; text-indent: 0px; =
widows: 2; -webkit-text-decorations-in-effect: none; "><div style=3D"border=
-collapse: separate; color: rgb(0, 0, 0); font-family: Monaco; font-style: =
normal; font-variant: normal; font-weight: normal; letter-spacing: normal; =
line-height: normal; text-transform: none; white-space: normal; word-spacin=
g: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spa=
cing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; =
font-size: medium; word-wrap: break-word; -webkit-nbsp-mode: space; -webkit=
-line-break: after-white-space; "><span class=3D"Apple-style-span" style=3D=
"border-collapse: separate; color: rgb(0, 0, 0); font-family: Monaco; font-=
style: normal; font-variant: normal; font-weight: normal; letter-spacing: n=
ormal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-inde=
nt: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing=
: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spac=
ing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjus=
t: auto; -webkit-text-stroke-width: 0px; font-size: medium; "><div style=3D=
"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after=
-white-space; "><span class=3D"Apple-style-span" style=3D"border-collapse: =
separate; color: rgb(0, 0, 0); font-family: Monaco; font-style: normal; fon=
t-variant: normal; font-weight: normal; letter-spacing: normal; line-height=
: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: =
normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0p=
x; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect=
: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; fon=
t-size: medium; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: s=
pace; -webkit-line-break: after-white-space; "><span class=3D"Apple-style-s=
pan" style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: =
Monaco; font-style: normal; font-variant: normal; font-weight: normal; lett=
er-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text=
-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webki=
t-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -we=
bkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -web=
kit-text-stroke-width: 0px; font-size: medium; "><div style=3D"word-wrap: b=
reak-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;=
 "><span class=3D"Apple-style-span" style=3D"border-collapse: separate; col=
or: rgb(0, 0, 0); font-family: Monaco; font-style: normal; font-variant: no=
rmal; font-weight: normal; letter-spacing: normal; line-height: normal; orp=
hans: 2; text-indent: 0px; text-transform: none; white-space: normal; widow=
s: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-bo=
rder-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webk=
it-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: mediu=
m; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit=
-line-break: after-white-space; "><span class=3D"Apple-style-span" style=3D=
"border-collapse: separate; color: rgb(0, 0, 0); font-family: Monaco; font-=
size: medium; font-style: normal; font-variant: normal; font-weight: normal=
; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px=
; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; =
-webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0p=
x; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto=
; -webkit-text-stroke-width: 0px; "><div style=3D"word-wrap: break-word; -w=
ebkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><span clas=
s=3D"Apple-style-span" style=3D"border-collapse: separate; color: rgb(0, 0,=
 0); font-family: Monaco; font-size: medium; font-style: normal; font-varia=
nt: normal; font-weight: normal; letter-spacing: normal; line-height: norma=
l; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal;=
 widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -web=
kit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none;=
 -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><div sty=
le=3D"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: =
after-white-space; "><span class=3D"Apple-style-span" style=3D"border-colla=
pse: separate; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px=
; font-style: normal; font-variant: normal; font-weight: normal; letter-spa=
cing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-trans=
form: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-bord=
er-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-t=
ext-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-te=
xt-stroke-width: 0px; "><div style=3D"word-wrap: break-word; -webkit-nbsp-m=
ode: space; -webkit-line-break: after-white-space; "><span class=3D"Apple-s=
tyle-span" style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-fa=
mily: Helvetica; font-size: 12px; font-style: normal; font-variant: normal;=
 font-weight: normal; letter-spacing: normal; line-height: normal; orphans:=
 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2;=
 word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-=
vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-te=
xt-size-adjust: auto; -webkit-text-stroke-width: 0px; "><div style=3D"word-=
wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white=
-space; "><span class=3D"Apple-style-span" style=3D"border-collapse: separa=
te; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-styl=
e: normal; font-variant: normal; font-weight: normal; letter-spacing: norma=
l; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none;=
 white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizont=
al-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorat=
ions-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-w=
idth: 0px; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: space;=
 -webkit-line-break: after-white-space; "><span class=3D"Apple-style-span" =
style=3D"border-collapse: separate; color: rgb(0, 0, 0); font-family: Helve=
tica; font-size: 12px; font-style: normal; font-variant: normal; font-weigh=
t: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-in=
dent: 0px; text-transform: none; white-space: normal; widows: 2; word-spaci=
ng: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-sp=
acing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adj=
ust: auto; -webkit-text-stroke-width: 0px; "><div style=3D"word-wrap: break=
-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><=
div>--</div></div></span></div></span></div></span></div></span></div></spa=
n></div></span></div></span></div></span></div></span></div></span><span cl=
ass=3D"Apple-style-span" style=3D"font-family: Helvetica; font-size: 12px; =
">Vincent Aravantinos</span></div><div style=3D"word-wrap: break-word; -web=
kit-nbsp-mode: space; -webkit-line-break: after-white-space; "><span class=
=3D"Apple-style-span" style=3D"border-collapse: separate; color: rgb(0, 0, =
0); font-style: normal; font-variant: normal; font-weight: normal; letter-s=
pacing: normal; line-height: normal; text-transform: none; white-space: nor=
mal; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-bor=
der-vertical-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-str=
oke-width: 0px; font-family: Helvetica; font-size: 12px; ">PostDoctoral fel=
low, Concordia University, Hardware Verification Group</span><span class=3D=
"Apple-style-span" style=3D"orphans: 2; text-align: -webkit-auto; text-inde=
nt: 0px; widows: 2; -webkit-text-decorations-in-effect: none; "></span></di=
v></span><span class=3D"Apple-style-span" style=3D"font-family: Helvetica; =
font-size: 12px; "><a href=3D"http://users.encs.concordia.ca/~vincent">http=
://users.encs.concordia.ca/~vincent</a></span><span class=3D"Apple-style-sp=
an" style=3D"orphans: 2; text-align: -webkit-auto; text-indent: 0px; widows=
: 2; -webkit-text-decorations-in-effect: none; "><div style=3D"word-wrap: b=
reak-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;=
 "><span class=3D"Apple-style-span" style=3D"orphans: 2; text-align: -webki=
t-auto; text-indent: 0px; widows: 2; -webkit-text-decorations-in-effect: no=
ne; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; -webki=
t-line-break: after-white-space; "><span class=3D"Apple-style-span" style=
=3D"orphans: 2; text-indent: 0px; widows: 2; -webkit-text-decorations-in-ef=
fect: none; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode: space=
; -webkit-line-break: after-white-space; "><span class=3D"Apple-style-span"=
 style=3D"orphans: 2; text-indent: 0px; widows: 2; -webkit-text-decorations=
-in-effect: none; "><div style=3D"word-wrap: break-word; -webkit-nbsp-mode:=
 space; -webkit-line-break: after-white-space; "><span class=3D"Apple-style=
-span" style=3D"orphans: 2; text-indent: 0px; widows: 2; -webkit-text-decor=
ations-in-effect: none; "><div style=3D"word-wrap: break-word; -webkit-nbsp=
-mode: space; -webkit-line-break: after-white-space; "><br></div></span></d=
iv></span></div></span></div></span></div></span> </div><br><div><div>Le 2 =
nov. 11 =E0 19:01, Gabriel Scherer a =E9crit :</div><br class=3D"Apple-inte=
rchange-newline"><blockquote type=3D"cite"><div>I see that you solved your =
problem in a way you find satisfying, but I<br>would like to point out that=
 the reason why your original code didn't<br>work isn't exactly what you se=
em to think.<br><br>When you define a submodule, the types defined before i=
n the parent<br>modules are perfectly accessible and can be referred, just =
as you<br>would do when referring to types defined at the toplevel. You nee=
d not<br>qualify the type with the outer module name (Vec.t in your example=
),<br>as you are still *inside* this parent module.<br><br> &nbsp;module Ve=
c =3D struct<br> &nbsp;&nbsp;&nbsp;type t =3D int<br> &nbsp;&nbsp;&nbsp;mod=
ule Type =3D struct<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type u =3D t<br> &nbs=
p;&nbsp;&nbsp;end<br> &nbsp;end<br><br> &nbsp;(1 : Vec.Type.u);;<br><br>The=
 problem in your case is that you wish to give the same name to the<br>type=
 in Vec and in Vec.Type. This would lead to the following:<br> &nbsp;... mo=
dule Type =3D struct type t =3D t end ...<br><br>But this is ill-defined : =
it is a recursive type defined as being<br>itself. The problem is that the =
OCaml syntax for type declarations<br>always consider them recursive (for v=
alues you have "let" and "let<br>rec", for types you have "type" which beha=
ves like "type rec" with no<br>opt-out way possible). This is a flaw of the=
 OCaml syntax which is<br>relatively well-known, see eg. <a href=3D"http://=
ocaml.janestreet.com/?q=3Dnode/25">http://ocaml.janestreet.com/?q=3Dnode/25=
</a><br><br>A workaround is to define your inner type "t" in two steps, usi=
ng an<br>different intermediate name to break the cycle:<br><br> &nbsp;modu=
le Vec =3D struct<br> &nbsp;&nbsp;&nbsp;type t =3D int<br> &nbsp;&nbsp;&nbs=
p;module Type =3D struct<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type u =3D t<br>=
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type t =3D u<br> &nbsp;&nbsp;&nbsp;end<br> &=
nbsp;end<br><br> &nbsp;(1 : Vec.Type.t);;<br><br><br>On Wed, Nov 2, 2011 at=
 10:14 PM, Anthony Tavener<br>&lt;<a href=3D"mailto:anthony.tavener@gmail.c=
om">anthony.tavener@gmail.com</a>&gt; wrote:<br><blockquote type=3D"cite">O=
ops, I didn't do a group-reply... so in case anyone is interested in what I=
<br></blockquote><blockquote type=3D"cite">ended up with:<br></blockquote><=
blockquote type=3D"cite"><br></blockquote><blockquote type=3D"cite">-------=
--- Forwarded message ----------<br></blockquote><blockquote type=3D"cite">=
From: Anthony Tavener &lt;<a href=3D"mailto:anthony.tavener@gmail.com">anth=
ony.tavener@gmail.com</a>&gt;<br></blockquote><blockquote type=3D"cite">Dat=
e: Wed, Nov 2, 2011 at 2:50 PM<br></blockquote><blockquote type=3D"cite">Su=
bject: Re: [Caml-list] Nested module exposing type from parent?<br></blockq=
uote><blockquote type=3D"cite">To: Vincent Aravantinos &lt;<a href=3D"mailt=
o:vincent.aravantinos@gmail.com">vincent.aravantinos@gmail.com</a>&gt;<br><=
/blockquote><blockquote type=3D"cite"><br></blockquote><blockquote type=3D"=
cite"><br></blockquote><blockquote type=3D"cite">Actually, better than I in=
itially thought...<br></blockquote><blockquote type=3D"cite">I keep this as=
 I have them defined already, except as you said: include<br></blockquote><=
blockquote type=3D"cite">instead of open.<br></blockquote><blockquote type=
=3D"cite">&nbsp; module Vec =3D struct<br></blockquote><blockquote type=3D"=
cite">&nbsp; &nbsp; module Type =3D struct<br></blockquote><blockquote type=
=3D"cite">&nbsp; &nbsp; &nbsp; type t =3D { x: int; y: int }<br></blockquot=
e><blockquote type=3D"cite">&nbsp; &nbsp; end<br></blockquote><blockquote t=
ype=3D"cite">&nbsp; &nbsp; include Type<br></blockquote><blockquote type=3D=
"cite">&nbsp; &nbsp; let make x y =3D {x;y}<br></blockquote><blockquote typ=
e=3D"cite">&nbsp; &nbsp; let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}<br></bl=
ockquote><blockquote type=3D"cite">&nbsp; end<br></blockquote><blockquote t=
ype=3D"cite">Before, I had instead of the include:<br></blockquote><blockqu=
ote type=3D"cite">&nbsp; type t =3D Type.t<br></blockquote><blockquote type=
=3D"cite">&nbsp; open Type<br></blockquote><blockquote type=3D"cite">Which =
worked, but then the type used everywhere was Vec.Type.t<br></blockquote><b=
lockquote type=3D"cite">Thanks again! Simple and effective, and I was looki=
ng in all the wrong<br></blockquote><blockquote type=3D"cite">places. :)<br=
></blockquote><blockquote type=3D"cite">On Wed, Nov 2, 2011 at 2:36 PM, Ant=
hony Tavener &lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.taven=
er@gmail.com</a>&gt;<br></blockquote><blockquote type=3D"cite">wrote:<br></=
blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><br></blockq=
uote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite">Thank=
-you Vincent!<br></blockquote></blockquote><blockquote type=3D"cite"><block=
quote type=3D"cite">Though this requires a home for the "source type" modul=
e, at least the<br></blockquote></blockquote><blockquote type=3D"cite"><blo=
ckquote type=3D"cite">types come out right in the end. Thanks!<br></blockqu=
ote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite">And th=
is led me to read specifically about include to understand what it<br></blo=
ckquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite">re=
ally does. :)<br></blockquote></blockquote><blockquote type=3D"cite"><block=
quote type=3D"cite"><br></blockquote></blockquote><blockquote type=3D"cite"=
><blockquote type=3D"cite">On Wed, Nov 2, 2011 at 2:19 PM, Vincent Aravanti=
nos<br></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=
=3D"cite">&lt;<a href=3D"mailto:vincent.aravantinos@gmail.com">vincent.arav=
antinos@gmail.com</a>&gt; wrote:<br></blockquote></blockquote><blockquote t=
ype=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite"><br></bloc=
kquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=
=3D"cite"><blockquote type=3D"cite">Using "include" instead of "open" would=
 work, ie. turning your example<br></blockquote></blockquote></blockquote><=
blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite=
">into:<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"=
><blockquote type=3D"cite"><blockquote type=3D"cite"><br></blockquote></blo=
ckquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><b=
lockquote type=3D"cite">module Vec_main =3D struct<br></blockquote></blockq=
uote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><bloc=
kquote type=3D"cite">&nbsp; type t =3D { x: int; y: int }<br></blockquote><=
/blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite=
"><blockquote type=3D"cite">&nbsp; let make x y =3D {x;y}<br></blockquote><=
/blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite=
"><blockquote type=3D"cite">&nbsp; let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.=
y}<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blo=
ckquote type=3D"cite"><blockquote type=3D"cite">end<br></blockquote></block=
quote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blo=
ckquote type=3D"cite"><br></blockquote></blockquote></blockquote><blockquot=
e type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">module =
Vec =3D struct<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; includ=
e Vec_main<br></blockquote></blockquote></blockquote><blockquote type=3D"ci=
te"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; module Type =
=3D struct<br></blockquote></blockquote></blockquote><blockquote type=3D"ci=
te"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp;&nbsp;&nbsp; =
include Vec_main<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp;&nbsp;&=
nbsp; ...<br></blockquote></blockquote></blockquote><blockquote type=3D"cit=
e"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; end<br></bloc=
kquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=
=3D"cite"><blockquote type=3D"cite">end<br></blockquote></blockquote></bloc=
kquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=
=3D"cite"><br></blockquote></blockquote></blockquote><blockquote type=3D"ci=
te"><blockquote type=3D"cite"><blockquote type=3D"cite">Then:<br></blockquo=
te></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"=
cite"><blockquote type=3D"cite"># let n =3D Vec.make 2 5;;<br></blockquote>=
</blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cit=
e"><blockquote type=3D"cite">val n : Vec.t =3D {Vec.x =3D 2; Vec.y =3D 5}<b=
r></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockqu=
ote type=3D"cite"><blockquote type=3D"cite"># open Vec.Type;;<br></blockquo=
te></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"=
cite"><blockquote type=3D"cite"># let m =3D {x=3D1;y=3D2};;<br></blockquote=
></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"ci=
te"><blockquote type=3D"cite">val m : Vec.Type.t =3D {x =3D 1; y =3D 2}<br>=
</blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquot=
e type=3D"cite"><blockquote type=3D"cite"># Vec.add m n;;<br></blockquote><=
/blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite=
"><blockquote type=3D"cite">- : Vec.t =3D {Vec.x =3D 3; Vec.y =3D 7}<br></b=
lockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote t=
ype=3D"cite"><blockquote type=3D"cite"><br></blockquote></blockquote></bloc=
kquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=
=3D"cite">Cheers<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite"><br></blockqu=
ote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D=
"cite"><blockquote type=3D"cite">--<br></blockquote></blockquote></blockquo=
te><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"=
cite">Vincent Aravantinos - Postdoctoral Fellow, Concordia University, Hard=
ware<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><b=
lockquote type=3D"cite"><blockquote type=3D"cite">Verification Group<br></b=
lockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote t=
ype=3D"cite"><blockquote type=3D"cite"><br></blockquote></blockquote></bloc=
kquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=
=3D"cite">On 11/02/2011 03:41 PM, Anthony Tavener wrote:<br></blockquote></=
blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"=
><blockquote type=3D"cite"><br></blockquote></blockquote></blockquote><bloc=
kquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">I'=
ve been struggling with this occasionally...<br></blockquote></blockquote><=
/blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote=
 type=3D"cite">I'm using nested modules to "open" access to select features=
 of a module.<br></blockquote></blockquote></blockquote><blockquote type=3D=
"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">My problem is I =
can't find a way to *expose* types in the parent module<br></blockquote></b=
lockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite">=
<blockquote type=3D"cite">through such nested modules.<br></blockquote></bl=
ockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><=
blockquote type=3D"cite">A simplified example of what I'm looking at:<br></=
blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote =
type=3D"cite"><blockquote type=3D"cite">&nbsp; module Vec =3D struct<br></b=
lockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquote t=
ype=3D"cite"><blockquote type=3D"cite">&nbsp; &nbsp; type t =3D { x: int; y=
: int }<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"=
><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; &nbsp; let make=
 x y =3D {x;y}<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; &nbsp;=
 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}<br></blockquote></blockquote></=
blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote =
type=3D"cite">&nbsp; &nbsp; module Type =3D<br></blockquote></blockquote></=
blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote =
type=3D"cite">&nbsp; &nbsp; &nbsp; (* something which has type t =3D Vec.t,=
<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><block=
quote type=3D"cite"><blockquote type=3D"cite">&nbsp; &nbsp; &nbsp; &nbsp;* =
with exposed structure when "open"ed.<br></blockquote></blockquote></blockq=
uote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=
=3D"cite">&nbsp; &nbsp; &nbsp; &nbsp;* Also note that Vec is not really an<=
br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockq=
uote type=3D"cite"><blockquote type=3D"cite">&nbsp; &nbsp; &nbsp; &nbsp;* e=
xplicit module like this; instead it<br></blockquote></blockquote></blockqu=
ote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D=
"cite">&nbsp; &nbsp; &nbsp; &nbsp;* is implemented in vec.ml *)<br></blockq=
uote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=
=3D"cite"><blockquote type=3D"cite">&nbsp; end<br></blockquote></blockquote=
></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquo=
te type=3D"cite">Example usage...<br></blockquote></blockquote></blockquote=
><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"ci=
te">&nbsp; let n =3D Vec.make 2 5<br></blockquote></blockquote></blockquote=
><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"ci=
te">&nbsp; open Vec.Type<br></blockquote></blockquote></blockquote><blockqu=
ote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp=
; let m =3D {x=3D1;y=3D2}<br></blockquote></blockquote></blockquote><blockq=
uote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbs=
p; Vec.add m n<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite"><br></blockqu=
ote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D=
"cite"><blockquote type=3D"cite">To date, I've defined the type in the Type=
 submodule, which is then used<br></blockquote></blockquote></blockquote><b=
lockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite"=
>by the parent module. The unsatisfactory quality of this is that Vec.Type.=
t<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><bloc=
kquote type=3D"cite"><blockquote type=3D"cite">is the "true" type. Ideally =
the concrete type would live at Vec.t, with<br></blockquote></blockquote></=
blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote =
type=3D"cite">"open Vec.Type" bringing the fields of the type into scope.<b=
r></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockqu=
ote type=3D"cite"><blockquote type=3D"cite">As background, here are example=
s of opening different features of the Vec<br></blockquote></blockquote></b=
lockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote t=
ype=3D"cite">module:<br></blockquote></blockquote></blockquote><blockquote =
type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; le=
t c =3D Vec.add a b<br></blockquote></blockquote></blockquote><blockquote t=
ype=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; ope=
n Vec.Prefixed<br></blockquote></blockquote></blockquote><blockquote type=
=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; let c =
=3D vadd a b<br></blockquote></blockquote></blockquote><blockquote type=3D"=
cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp; open Vec.O=
ps<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blo=
ckquote type=3D"cite"><blockquote type=3D"cite">&nbsp; let c =3D a +| b<br>=
</blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquot=
e type=3D"cite"><blockquote type=3D"cite">&nbsp; open Vec.Type<br></blockqu=
ote></blockquote></blockquote><blockquote type=3D"cite"><blockquote type=3D=
"cite"><blockquote type=3D"cite">&nbsp; let c =3D Vec.add a {x;y;z=3D0.}<br=
></blockquote></blockquote></blockquote><blockquote type=3D"cite"><blockquo=
te type=3D"cite"><blockquote type=3D"cite">Apologies if this is really begi=
nner-list material. It's minor, but has<br></blockquote></blockquote></bloc=
kquote><blockquote type=3D"cite"><blockquote type=3D"cite"><blockquote type=
=3D"cite">been bugging me.<br></blockquote></blockquote></blockquote><block=
quote type=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">Tha=
nk-you for looking,<br></blockquote></blockquote></blockquote><blockquote t=
ype=3D"cite"><blockquote type=3D"cite"><blockquote type=3D"cite">&nbsp;Tony=
<br></blockquote></blockquote></blockquote><blockquote type=3D"cite"><block=
quote type=3D"cite"><blockquote type=3D"cite"><br></blockquote></blockquote=
></blockquote><blockquote type=3D"cite"><blockquote type=3D"cite"><br></blo=
ckquote></blockquote><blockquote type=3D"cite"><br></blockquote><blockquote=
 type=3D"cite"><br></blockquote><blockquote type=3D"cite"><br></blockquote>=
<br><br>-- <br>Caml-list mailing list. &nbsp;Subscription management and ar=
chives:<br><a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list">https:=
//sympa-roc.inria.fr/wws/info/caml-list</a><br>Beginner's list: http://grou=
ps.yahoo.com/group/ocaml_beginners<br>Bug reports: http://caml.inria.fr/bin=
/caml-bugs<br><br></div></blockquote></div><br></div></body></html>=

--Apple-Mail-1-521692719--
