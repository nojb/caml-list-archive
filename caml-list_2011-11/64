Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA8FjbBJ008686
	for <caml-list@sympa-roc.inria.fr>; Tue, 8 Nov 2011 16:45:37 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AosBALxNuU7RVdK2mGdsb2JhbABDml6EQIMGAYY8gR4IIgEBAQEBCAkNBxQlgXIBAQEDARICExkBGx0BAwELBgULDS4hAQERAQUBHAYTCBqHYAiaBwqLYYJjhW89iHACBQqJIwSCWpFHikCDAT2DcQ
X-IronPort-AV: E=Sophos;i="4.69,477,1315173600"; 
   d="scan'208";a="129203598"
Received: from mail-iy0-f182.google.com ([209.85.210.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Nov 2011 16:45:31 +0100
Received: by iabz21 with SMTP id z21so1196985iab.27
        for <caml-list@inria.fr>; Tue, 08 Nov 2011 07:45:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=ELNlRoHCuWFVgtKvk0M/+DtObbkgOmFogPp4mFjCIAw=;
        b=hdT/EaOSFE3FXbFl8HXNU4ex0muMKfXvdkxyoxWMzzhWzAfDKcWyzCnW01Y8zTCNZR
         srJ9NIyieulzTUNKtS/2Xwnh719up7sWnA8pvEChU7LKfy4nwt0p46GNE8mkydHRINik
         22zwVi0fnGPEZUsvbvTD3iRn5yUTo3bmQvlRA=
MIME-Version: 1.0
Received: by 10.42.161.70 with SMTP id s6mr53150755icx.40.1320767130402; Tue,
 08 Nov 2011 07:45:30 -0800 (PST)
Received: by 10.42.164.9 with HTTP; Tue, 8 Nov 2011 07:45:29 -0800 (PST)
In-Reply-To: <CAPFanBHLH56cUqcJF3XLXDHgLAFxa16ZSPCQfoEh4fTawVuzPg@mail.gmail.com>
References: <CALs4vDb_XVKve3A3Dj5bsy1Ntsk2TnMvC6EPP4+LGd+1vqrNZQ@mail.gmail.com>
	<CAPFanBHLH56cUqcJF3XLXDHgLAFxa16ZSPCQfoEh4fTawVuzPg@mail.gmail.com>
Date: Tue, 8 Nov 2011 16:45:29 +0100
Message-ID: <CALs4vDaqwDh-xmkqpbhVhqK_QFqOo7KA00uhxrDccY8FumsHzg@mail.gmail.com>
From: Hans Ole Rafaelsen <hrafaelsen@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=90e6ba2123e5a37dde04b13b0f2b
Subject: Re: [Caml-list] Include question


--90e6ba2123e5a37dde04b13b0f2b
Content-Type: text/plain; charset=ISO-8859-1

I was hoping not to have to change the interfaces of the application.  Most
of the application is already written and the testing was just an
afterthought :-(

But it might not be that much that need to be changed. I'll give it a shot.

Thanks

On Tue, Nov 8, 2011 at 4:10 PM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> If you want some module of your system to be parametrized by another
> module (to be able to pass either a concrete module or a mockup
> module), you should use a functor.
>
>  http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#toc15
>
> in logic.ml
>  module Make (Net_lib : Net_interface) = struct
>    ...
>  end
>
> in main.ml:
>  module Logic = Logic.Make(Net_lib)
>  ..
>
> in main_mockup.ml:
>  module Logic = Logic.Make(Net_mockup)
>  ...
>
> On Tue, Nov 8, 2011 at 4:03 PM, Hans Ole Rafaelsen <hrafaelsen@gmail.com>
> wrote:
> > Hi,
> >
> > I'm trying to create a mockup module to replace a network module when
> doing
> > testing.
> >
> > The application consists of basically 3 parts. Some user interaction.
> This
> > calls some logic of the application, and the logic module might need to
> call
> > some other functions over the network. For testing I want to make a
> mockup
> > of the network module, in addition to synthesize the user interaction. I
> > want to test the logic module. The application has the following files:
> >
> > net_lib.ml:
> > let util_fun a = a
> > let foo a b = a + b
> > let bar a b = a - b
> >
> > logic.ml:
> > let state = ref 0
> > let get_state () = !state
> > let do_op a b =
> >   incr state;
> >   (Net_lib.foo a b) * (Net_lib.bar (Net_lib.util_fun a) b )
> >
> > main_appl.ml:
> > let () =
> >   let a, b  = Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
> >   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > let () =
> >   let a, b  = Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
> >   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> >
> > For testing I have the following modules:
> > net_lib_mockup.ml
> > include Net_lib
> > let foo a b = 1
> > let bar a b = 1
> >
> > logic_mockup.ml:
> > module Net_lib = Net_lib_mockup
> > include Logic
> >
> > main_test.ml:
> > module Logic = Logic_mockup
> >
> > let () =
> >   let a, b = (1, 1) in
> >   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > let () =
> >   let a, b = (10, 1) in
> >   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > The problem is that the "include Logic" has already 'bound' the
> functions in
> > Logic to the Net_lib module and will not use the Net_lib_mockup that I
> try
> > to use through a moudle alias. If i replace the 'include Logic' with the
> > actual content of the logic.ml file, then the functions get bound to the
> > Logic_mockup functions, and the test works as they should.
> >
> > Are there some trick to get the 'include Logic', in logic_mockup.ml, to
> use
> > to the Net_lib_mockup module and not the Net_lib module, so that I don't
> > have to do copy and paste between the two files?
> >
> >
> > Regards,
> >
> > Hans Ole Rafaelsen
> >
> >
>

--90e6ba2123e5a37dde04b13b0f2b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I was hoping not to have to change the interfaces of the application.=A0 Mo=
st of the application is already written and the testing was just an aftert=
hought :-(<br><br>But it might not be that much that need to be changed. I&=
#39;ll give it a shot.<br>
<br>Thanks<br><br><div class=3D"gmail_quote">On Tue, Nov 8, 2011 at 4:10 PM=
, Gabriel Scherer <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.scherer@g=
mail.com">gabriel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
adding-left:1ex;">
If you want some module of your system to be parametrized by another<br>
module (to be able to pass either a concrete module or a mockup<br>
module), you should use a functor.<br>
<br>
 =A0<a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#to=
c15" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-ocaml/manual004=
.html#toc15</a><br>
<br>
in <a href=3D"http://logic.ml" target=3D"_blank">logic.ml</a><br>
 =A0module Make (Net_lib : Net_interface) =3D struct<br>
 =A0 =A0...<br>
 =A0end<br>
<br>
in <a href=3D"http://main.ml" target=3D"_blank">main.ml</a>:<br>
 =A0module Logic =3D Logic.Make(Net_lib)<br>
 =A0..<br>
<br>
in <a href=3D"http://main_mockup.ml" target=3D"_blank">main_mockup.ml</a>:<=
br>
 =A0module Logic =3D Logic.Make(Net_mockup)<br>
 =A0...<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Tue, Nov 8, 2011 at 4:03 PM, Hans Ole Rafaelsen &lt;<a href=3D"mailto:hr=
afaelsen@gmail.com">hrafaelsen@gmail.com</a>&gt; wrote:<br>
&gt; Hi,<br>
&gt;<br>
&gt; I&#39;m trying to create a mockup module to replace a network module w=
hen doing<br>
&gt; testing.<br>
&gt;<br>
&gt; The application consists of basically 3 parts. Some user interaction. =
This<br>
&gt; calls some logic of the application, and the logic module might need t=
o call<br>
&gt; some other functions over the network. For testing I want to make a mo=
ckup<br>
&gt; of the network module, in addition to synthesize the user interaction.=
 I<br>
&gt; want to test the logic module. The application has the following files=
:<br>
&gt;<br>
&gt; <a href=3D"http://net_lib.ml" target=3D"_blank">net_lib.ml</a>:<br>
&gt; let util_fun a =3D a<br>
&gt; let foo a b =3D a + b<br>
&gt; let bar a b =3D a - b<br>
&gt;<br>
&gt; <a href=3D"http://logic.ml" target=3D"_blank">logic.ml</a>:<br>
&gt; let state =3D ref 0<br>
&gt; let get_state () =3D !state<br>
&gt; let do_op a b =3D<br>
&gt; =A0 incr state;<br>
&gt; =A0 (Net_lib.foo a b) * (Net_lib.bar (Net_lib.util_fun a) b )<br>
&gt;<br>
&gt; <a href=3D"http://main_appl.ml" target=3D"_blank">main_appl.ml</a>:<br>
&gt; let () =3D<br>
&gt; =A0 let a, b=A0 =3D Scanf.scanf=A0 &quot;%d %d\n&quot; (fun a b -&gt; =
a,b) in<br>
&gt; =A0 Printf.printf &quot;Foo %d %d\n%!&quot; (Logic.get_state ()) (Logi=
c.do_op a b)<br>
&gt;<br>
&gt; let () =3D<br>
&gt; =A0 let a, b=A0 =3D Scanf.scanf=A0 &quot;%d %d\n&quot; (fun a b -&gt; =
a,b) in<br>
&gt; =A0 Printf.printf &quot;Foo %d %d\n%!&quot; (Logic.get_state ()) (Logi=
c.do_op a b)<br>
&gt;<br>
&gt;<br>
&gt; For testing I have the following modules:<br>
&gt; <a href=3D"http://net_lib_mockup.ml" target=3D"_blank">net_lib_mockup.=
ml</a><br>
&gt; include Net_lib<br>
&gt; let foo a b =3D 1<br>
&gt; let bar a b =3D 1<br>
&gt;<br>
&gt; <a href=3D"http://logic_mockup.ml" target=3D"_blank">logic_mockup.ml</=
a>:<br>
&gt; module Net_lib =3D Net_lib_mockup<br>
&gt; include Logic<br>
&gt;<br>
&gt; <a href=3D"http://main_test.ml" target=3D"_blank">main_test.ml</a>:<br>
&gt; module Logic =3D Logic_mockup<br>
&gt;<br>
&gt; let () =3D<br>
&gt; =A0 let a, b =3D (1, 1) in<br>
&gt; =A0 Printf.printf &quot;Test %d %d\n%!&quot; (Logic.get_state ()) (Log=
ic.do_op a b)<br>
&gt;<br>
&gt; let () =3D<br>
&gt; =A0 let a, b =3D (10, 1) in<br>
&gt; =A0 Printf.printf &quot;Test %d %d\n%!&quot; (Logic.get_state ()) (Log=
ic.do_op a b)<br>
&gt;<br>
&gt; The problem is that the &quot;include Logic&quot; has already &#39;bou=
nd&#39; the functions in<br>
&gt; Logic to the Net_lib module and will not use the Net_lib_mockup that I=
 try<br>
&gt; to use through a moudle alias. If i replace the &#39;include Logic&#39=
; with the<br>
&gt; actual content of the <a href=3D"http://logic.ml" target=3D"_blank">lo=
gic.ml</a> file, then the functions get bound to the<br>
&gt; Logic_mockup functions, and the test works as they should.<br>
&gt;<br>
&gt; Are there some trick to get the &#39;include Logic&#39;, in <a href=3D=
"http://logic_mockup.ml" target=3D"_blank">logic_mockup.ml</a>, to use<br>
&gt; to the Net_lib_mockup module and not the Net_lib module, so that I don=
&#39;t<br>
&gt; have to do copy and paste between the two files?<br>
&gt;<br>
&gt;<br>
&gt; Regards,<br>
&gt;<br>
&gt; Hans Ole Rafaelsen<br>
&gt;<br>
&gt;<br>
</div></div></blockquote></div><br>

--90e6ba2123e5a37dde04b13b0f2b--
