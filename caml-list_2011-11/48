Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA4EpemK005430
	for <caml-list@sympa-roc.inria.fr>; Fri, 4 Nov 2011 15:51:41 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AoYCAIf7s07RVdY2kGdsb2JhbABEFpoJjkSBGAgiAQEBAQkJDQcUBCGBcgEBAQQSAhMLAQUIARsSCgIDDAYFCw0JBBIIBwkDAgECARERAQUBCgEREwYCAQEOCQeHaJgNCotUgmGFOT2IcAIFCoM9hWQElByGXoZcPYQL
X-IronPort-AV: E=Sophos;i="4.69,455,1315173600"; 
   d="scan'208";a="116938872"
Received: from mail-bw0-f54.google.com ([209.85.214.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Nov 2011 15:51:32 +0100
Received: by bkbzs2 with SMTP id zs2so3789856bkb.27
        for <caml-list@inria.fr>; Fri, 04 Nov 2011 07:50:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=message-id:date:from:user-agent:mime-version:to:subject:references
         :in-reply-to:content-type:content-transfer-encoding;
        bh=C+Dtbga8kLcCxRTG1qTM3FBKnczaaLitZdNxF0D3C4c=;
        b=vEXb7tEcpEQcfaxUsCMInEogGgRTlLJaTeK0391KGY71vgaF3tKiWq6z2KaYof8x9h
         VlYT0dNzLWTi8jzI1naBF9AlFvUhH/RVsGbbh2WYOuD7fyR9ux1cIYSmLVxUd6h1tozY
         GdOIGJtfsn5w8du4grOa/QloKt9rSCYvBvBO0=
Received: by 10.204.14.208 with SMTP id h16mr12608568bka.2.1320418237123;
        Fri, 04 Nov 2011 07:50:37 -0700 (PDT)
Received: from page.encs.concordia.ca (page.encs.concordia.ca. [132.205.221.212])
        by mx.google.com with ESMTPS id b20sm5033625bkr.11.2011.11.04.07.50.34
        (version=SSLv3 cipher=OTHER);
        Fri, 04 Nov 2011 07:50:35 -0700 (PDT)
Message-ID: <4EB3FBB8.1030203@gmail.com>
Date: Fri, 04 Nov 2011 10:50:32 -0400
From: Vincent Aravantinos <vincent.aravantinos@gmail.com>
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.23) Gecko/20110928 Red Hat/3.1.15-1.el6_1 Thunderbird/3.1.15
MIME-Version: 1.0
To: caml-list@inria.fr
References: <64822.143.164.102.13.1320411983.squirrel@webmail.mwn.de> <20111104134342.GA9248@pps.jussieu.fr> <CAPFanBGcb5oWoF-0rSS+XwOGq0MM9NhROaOs+NS=0mrHDO4AVg@mail.gmail.com>
In-Reply-To: <CAPFanBGcb5oWoF-0rSS+XwOGq0MM9NhROaOs+NS=0mrHDO4AVg@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
Subject: Re: [Caml-list] elegant subtyping?

In the end, I think the choice of using polymorphic variants or not 
should not rely only on the types themselves but also mainly on the 
functions that you apply on them. More precisely: if there is no or very 
few common (simple) functions between Ast.statement and Cfg.statement 
functions, don't bother with polymorphic variants (you can still get rid 
of the copy pasting by defining your function only on one of the types, 
and then using translation to the other type to lift your function).

On 11/04/2011 10:12 AM, Gabriel Scherer wrote:
> In theory, polymorphic variants are the right tool for the job : they
> allow to express exactly what is asked for -- even in presence of
> recursive datatypes, if carefully formulated using open recursion and
> fixpoint. See Jacques Garrigue paper "Code reuse through polymorphic
> variants" for an introduction and interesting examples :
>    http://www.math.nagoya-u.ac.jp/~garrigue/papers/fose2000.html
>
> In practice, they come with the downside of being more difficult to
> use than closed variants. I personally keep using your solution (1) to
> preserve simplicity; that usually means a finite number of
> dumb-looking "| Ast.Assign ->  Cfg.Assign" branches in each pattern
> matching, but nothing really problematic for code quality or
> maintenance.
>
> The problem with polymorphic variants is that they are so flexible
> that type inference cannot help you a lot with errors in polymorphic
> variants code. For example, if you mistype one constructor name, the
> compiler won't be able to flag an error, it will only infer a slightly
> different types with the usual constructors, plus the misspelled one.
> Errors will only be spotted later, when you try to combine the faulty
> code with a function with strict assumptions on the variants (closed
> pattern matching), with an unwieldy error message.
>
> My advice for polymorphic variant beginners is to massively use
> annotations to control type-checking : every time you take a
> polymorphic variant as input, or output one, the function should be
> annotated with a precise type for the variant part. This will shield
> you from most inference issues, and force you to build an expressive
> set of type definitions (as Pietro demonstrated) that can be composed
> and help reason about your program.
>
>
> On Fri, Nov 4, 2011 at 2:43 PM, Pietro Abate
> <Pietro.Abate@pps.jussieu.fr>  wrote:
>> hello,
>> using polymorphic variants maybe ?
>>
>> # module Cfg =  struct type statement = [ `Assign | `Guard ] end;;
>> module Cfg : sig type statement = [ `Assign | `Guard ] end
>>
>> # module Ast =  struct type statement = [ Cfg.statement | `Goto | `Label ] end;;
>> module Ast : sig type statement = [ `Assign | `Goto | `Guard | `Label ] end
>>
>> p
>>
>> On Fri, Nov 04, 2011 at 02:06:23PM +0100, Markus Weißmann wrote:
>>> Hello everyone,
>>>
>>> I'm writing on a compiler and want to subtype the "statements" that can
>>> occur in my code:
>>> At first I have an abstract syntax tree that can hold any statement of the
>>> language. From that I create a control flow graph that will only have
>>> non-control-flow statements (a true subset of the Ast-statements).
>>> Whats the best way to realize that?
>>>
>>> Basically I have:
>>>
>>> module Ast: type statement = Assign | Guard | Goto | Label
>>> module Cfg: type statement = Assign | Guard
>>>
>>>
>>> I see three -- not so elegant -- solutions to this:
>>>
>>> 1.) type-safe but imho quite ugly code:
>>> module Cfg: type statement = Assign | Guard
>>> module Ast: type statement = Base of Cfg.statement | Goto | Label
>>>
>>> 2.) use the same type for both and give up the safety that wrong types
>>> cannot show up in the Cfg
>>>
>>> 3.) use objects
>>>
>>> Did I miss the type-safe, elegant, module-based solution somehow? Or is
>>> 1.) as good as it gets?
>>>
>>>
>>> Best regards
>>>
>>> -Markus
>>>
>>> --
>>> Markus Weißmann, M.Sc.
>>> Institut für Informatik
>>> Technische Universität München
>>> Raum 03.07.054, Boltzmannstr. 3, 85748 Garching
>>>
>>> Tel. +49 (89) 2 89-1 81 05
>>> Fax +49 (89) 2 89-1 81 07
>>>
>>> mailto:markus.weissmann@in.tum.de
>>>
>>>
>>> --
>>> Caml-list mailing list.  Subscription management and archives:
>>> https://sympa-roc.inria.fr/wws/info/caml-list
>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>> --
>> ----
>> http://en.wikipedia.org/wiki/Posting_style
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>>
>

-- 
Vincent Aravantinos
Postdoctoral Fellow, Concordia University, Hardware Verification Group
http://users.encs.concordia.ca/~vincent

