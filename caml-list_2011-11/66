Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA8Foltw009287
	for <caml-list@sympa-roc.inria.fr>; Tue, 8 Nov 2011 16:50:47 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AosBACtPuU5KfVI0imdsb2JhbABDml6EQIMGAYY8gR4IIgEBAQoJDQcSBiGBcgEBAQMBEgITGQEbHQEDAQsGBQsNLiECEQEFARwGEyKHYAIGmgwKi2GCY4VvPYhwAgUKiEBjBIJakUeFMYEvg2CDAT2DcQ
X-IronPort-AV: E=Sophos;i="4.69,477,1315173600"; 
   d="scan'208,217";a="129204842"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Nov 2011 16:50:41 +0100
Received: by wwn31 with SMTP id 31so1066288wwn.9
        for <caml-list@inria.fr>; Tue, 08 Nov 2011 07:50:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=subject:mime-version:content-type:from:in-reply-to:date:cc
         :message-id:references:to:x-mailer;
        bh=WLciTN9IEXOWtIebR29nl+pilDKzZU2VwTXVkGJGATY=;
        b=jJJsM/Rc1L+6rwTwqpuZ4RjsBS4O9j6/7fJTX/wkiYmuetGgYeylo0at1+jAFAPPBj
         vHF96myMT1+ICYmQHUOQdT+47yEsEAl2hDnjsx/G/CFCs5SFO6FD2lsS9HpfZ9jwLCCW
         jqrztqa3B/mGb5kqVCI5Bmk6e/kXW80Vkt6G0=
Received: by 10.180.74.197 with SMTP id w5mr13534406wiv.25.1320767441161;
        Tue, 08 Nov 2011 07:50:41 -0800 (PST)
Received: from [192.168.0.13] (gou06-3-88-170-165-56.fbx.proxad.net. [88.170.165.56])
        by mx.google.com with ESMTPS id v6sm1094469wiv.10.2011.11.08.07.50.38
        (version=TLSv1/SSLv3 cipher=OTHER);
        Tue, 08 Nov 2011 07:50:39 -0800 (PST)
Mime-Version: 1.0 (Apple Message framework v1084)
Content-Type: multipart/alternative; boundary=Apple-Mail-35-1010337094
From: Thomas Gazagnaire <thomas.gazagnaire@gmail.com>
In-Reply-To: <CALs4vDaqwDh-xmkqpbhVhqK_QFqOo7KA00uhxrDccY8FumsHzg@mail.gmail.com>
Date: Tue, 8 Nov 2011 16:50:36 +0100
Cc: Gabriel Scherer <gabriel.scherer@gmail.com>, caml-list@inria.fr
Message-Id: <A23EFA0A-60CB-43D0-8DF1-268677B54CF0@gmail.com>
References: <CALs4vDb_XVKve3A3Dj5bsy1Ntsk2TnMvC6EPP4+LGd+1vqrNZQ@mail.gmail.com> <CAPFanBHLH56cUqcJF3XLXDHgLAFxa16ZSPCQfoEh4fTawVuzPg@mail.gmail.com> <CALs4vDaqwDh-xmkqpbhVhqK_QFqOo7KA00uhxrDccY8FumsHzg@mail.gmail.com>
To: Hans Ole Rafaelsen <hrafaelsen@gmail.com>
X-Mailer: Apple Mail (2.1084)
Subject: Re: [Caml-list] Include question


--Apple-Mail-35-1010337094
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii

You can have a look at http://www.ocamlpro.com/code/2011-08-10-ocaml-pack-f=
unctors.html

It describes how to use either a patched version of OCaml or some external =
tools to automatically functorize modules to solve your problems.

--
Thomas

On Nov 8, 2011, at 4:45 PM, Hans Ole Rafaelsen wrote:

> I was hoping not to have to change the interfaces of the application.  Mo=
st of the application is already written and the testing was just an aftert=
hought :-(
>=20
> But it might not be that much that need to be changed. I'll give it a sho=
t.
>=20
> Thanks
>=20
> On Tue, Nov 8, 2011 at 4:10 PM, Gabriel Scherer <gabriel.scherer@gmail.co=
m> wrote:
> If you want some module of your system to be parametrized by another
> module (to be able to pass either a concrete module or a mockup
> module), you should use a functor.
>=20
>  http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#toc15
>=20
> in logic.ml
>  module Make (Net_lib : Net_interface) =3D struct
>    ...
>  end
>=20
> in main.ml:
>  module Logic =3D Logic.Make(Net_lib)
>  ..
>=20
> in main_mockup.ml:
>  module Logic =3D Logic.Make(Net_mockup)
>  ...
>=20
> On Tue, Nov 8, 2011 at 4:03 PM, Hans Ole Rafaelsen <hrafaelsen@gmail.com>=
 wrote:
> > Hi,
> >
> > I'm trying to create a mockup module to replace a network module when d=
oing
> > testing.
> >
> > The application consists of basically 3 parts. Some user interaction. T=
his
> > calls some logic of the application, and the logic module might need to=
 call
> > some other functions over the network. For testing I want to make a moc=
kup
> > of the network module, in addition to synthesize the user interaction. I
> > want to test the logic module. The application has the following files:
> >
> > net_lib.ml:
> > let util_fun a =3D a
> > let foo a b =3D a + b
> > let bar a b =3D a - b
> >
> > logic.ml:
> > let state =3D ref 0
> > let get_state () =3D !state
> > let do_op a b =3D
> >   incr state;
> >   (Net_lib.foo a b) * (Net_lib.bar (Net_lib.util_fun a) b )
> >
> > main_appl.ml:
> > let () =3D
> >   let a, b  =3D Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
> >   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > let () =3D
> >   let a, b  =3D Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
> >   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> >
> > For testing I have the following modules:
> > net_lib_mockup.ml
> > include Net_lib
> > let foo a b =3D 1
> > let bar a b =3D 1
> >
> > logic_mockup.ml:
> > module Net_lib =3D Net_lib_mockup
> > include Logic
> >
> > main_test.ml:
> > module Logic =3D Logic_mockup
> >
> > let () =3D
> >   let a, b =3D (1, 1) in
> >   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > let () =3D
> >   let a, b =3D (10, 1) in
> >   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
> >
> > The problem is that the "include Logic" has already 'bound' the functio=
ns in
> > Logic to the Net_lib module and will not use the Net_lib_mockup that I =
try
> > to use through a moudle alias. If i replace the 'include Logic' with the
> > actual content of the logic.ml file, then the functions get bound to the
> > Logic_mockup functions, and the test works as they should.
> >
> > Are there some trick to get the 'include Logic', in logic_mockup.ml, to=
 use
> > to the Net_lib_mockup module and not the Net_lib module, so that I don't
> > have to do copy and paste between the two files?
> >
> >
> > Regards,
> >
> > Hans Ole Rafaelsen
> >
> >
>=20


--Apple-Mail-35-1010337094
Content-Transfer-Encoding: 7bit
Content-Type: text/html;
	charset=us-ascii

<html><head></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">You can have a look at&nbsp;<a href="http://www.ocamlpro.com/code/2011-08-10-ocaml-pack-functors.html">http://www.ocamlpro.com/code/2011-08-10-ocaml-pack-functors.html</a><div><br></div><div>It describes how to use either a patched version of OCaml or some external tools to automatically functorize modules to solve your problems.</div><div><br></div><div>--</div><div>Thomas</div><div><br><div><div>On Nov 8, 2011, at 4:45 PM, Hans Ole Rafaelsen wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite">I was hoping not to have to change the interfaces of the application.&nbsp; Most of the application is already written and the testing was just an afterthought :-(<br><br>But it might not be that much that need to be changed. I'll give it a shot.<br>
<br>Thanks<br><br><div class="gmail_quote">On Tue, Nov 8, 2011 at 4:10 PM, Gabriel Scherer <span dir="ltr">&lt;<a href="mailto:gabriel.scherer@gmail.com">gabriel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">
If you want some module of your system to be parametrized by another<br>
module (to be able to pass either a concrete module or a mockup<br>
module), you should use a functor.<br>
<br>
 &nbsp;<a href="http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#toc15" target="_blank">http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#toc15</a><br>
<br>
in <a href="http://logic.ml/" target="_blank">logic.ml</a><br>
 &nbsp;module Make (Net_lib : Net_interface) = struct<br>
 &nbsp; &nbsp;...<br>
 &nbsp;end<br>
<br>
in <a href="http://main.ml/" target="_blank">main.ml</a>:<br>
 &nbsp;module Logic = Logic.Make(Net_lib)<br>
 &nbsp;..<br>
<br>
in <a href="http://main_mockup.ml/" target="_blank">main_mockup.ml</a>:<br>
 &nbsp;module Logic = Logic.Make(Net_mockup)<br>
 &nbsp;...<br>
<div class="HOEnZb"><div class="h5"><br>
On Tue, Nov 8, 2011 at 4:03 PM, Hans Ole Rafaelsen &lt;<a href="mailto:hrafaelsen@gmail.com">hrafaelsen@gmail.com</a>&gt; wrote:<br>
&gt; Hi,<br>
&gt;<br>
&gt; I'm trying to create a mockup module to replace a network module when doing<br>
&gt; testing.<br>
&gt;<br>
&gt; The application consists of basically 3 parts. Some user interaction. This<br>
&gt; calls some logic of the application, and the logic module might need to call<br>
&gt; some other functions over the network. For testing I want to make a mockup<br>
&gt; of the network module, in addition to synthesize the user interaction. I<br>
&gt; want to test the logic module. The application has the following files:<br>
&gt;<br>
&gt; <a href="http://net_lib.ml/" target="_blank">net_lib.ml</a>:<br>
&gt; let util_fun a = a<br>
&gt; let foo a b = a + b<br>
&gt; let bar a b = a - b<br>
&gt;<br>
&gt; <a href="http://logic.ml/" target="_blank">logic.ml</a>:<br>
&gt; let state = ref 0<br>
&gt; let get_state () = !state<br>
&gt; let do_op a b =<br>
&gt; &nbsp; incr state;<br>
&gt; &nbsp; (Net_lib.foo a b) * (Net_lib.bar (Net_lib.util_fun a) b )<br>
&gt;<br>
&gt; <a href="http://main_appl.ml/" target="_blank">main_appl.ml</a>:<br>
&gt; let () =<br>
&gt; &nbsp; let a, b&nbsp; = Scanf.scanf&nbsp; "%d %d\n" (fun a b -&gt; a,b) in<br>
&gt; &nbsp; Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)<br>
&gt;<br>
&gt; let () =<br>
&gt; &nbsp; let a, b&nbsp; = Scanf.scanf&nbsp; "%d %d\n" (fun a b -&gt; a,b) in<br>
&gt; &nbsp; Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)<br>
&gt;<br>
&gt;<br>
&gt; For testing I have the following modules:<br>
&gt; <a href="http://net_lib_mockup.ml/" target="_blank">net_lib_mockup.ml</a><br>
&gt; include Net_lib<br>
&gt; let foo a b = 1<br>
&gt; let bar a b = 1<br>
&gt;<br>
&gt; <a href="http://logic_mockup.ml/" target="_blank">logic_mockup.ml</a>:<br>
&gt; module Net_lib = Net_lib_mockup<br>
&gt; include Logic<br>
&gt;<br>
&gt; <a href="http://main_test.ml/" target="_blank">main_test.ml</a>:<br>
&gt; module Logic = Logic_mockup<br>
&gt;<br>
&gt; let () =<br>
&gt; &nbsp; let a, b = (1, 1) in<br>
&gt; &nbsp; Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)<br>
&gt;<br>
&gt; let () =<br>
&gt; &nbsp; let a, b = (10, 1) in<br>
&gt; &nbsp; Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)<br>
&gt;<br>
&gt; The problem is that the "include Logic" has already 'bound' the functions in<br>
&gt; Logic to the Net_lib module and will not use the Net_lib_mockup that I try<br>
&gt; to use through a moudle alias. If i replace the 'include Logic' with the<br>
&gt; actual content of the <a href="http://logic.ml/" target="_blank">logic.ml</a> file, then the functions get bound to the<br>
&gt; Logic_mockup functions, and the test works as they should.<br>
&gt;<br>
&gt; Are there some trick to get the 'include Logic', in <a href="http://logic_mockup.ml/" target="_blank">logic_mockup.ml</a>, to use<br>
&gt; to the Net_lib_mockup module and not the Net_lib module, so that I don't<br>
&gt; have to do copy and paste between the two files?<br>
&gt;<br>
&gt;<br>
&gt; Regards,<br>
&gt;<br>
&gt; Hans Ole Rafaelsen<br>
&gt;<br>
&gt;<br>
</div></div></blockquote></div><br>
</blockquote></div><br></div></body></html>
--Apple-Mail-35-1010337094--
