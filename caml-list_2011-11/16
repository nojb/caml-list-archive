Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA2LF7bO028104
	for <caml-list@sympa-roc.inria.fr>; Wed, 2 Nov 2011 22:15:07 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AloBAPyxsU7RVaE2kGdsb2JhbABEoX0Bh2wIIgEBAQEJCQ0HFAQhgXIBAQEDARICLAEbHgMBCwYQBgMBAgEuIQEBEQEFARICCBkih2CXbQqLVIJghVc9iHACBQqJBgSIB4wNijuCfj2EDg
X-IronPort-AV: E=Sophos;i="4.69,445,1315173600"; 
   d="scan'208";a="127831477"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 02 Nov 2011 22:15:01 +0100
Received: by faar19 with SMTP id r19so1679979faa.27
        for <caml-list@inria.fr>; Wed, 02 Nov 2011 14:14:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=yJ6ooqNfpkq6gLKveDKyOoxXAy0gc9i7RrpJLVEP2Ek=;
        b=iblImRAZfof0E9DN6YeHJZT2x4FgXn9G8kgPBwU2OM+Adg3AoskfJMBxM+qaQwjaDI
         qivvy6bZGITbIbJqvrqencSVRPhESx+raPuCTHbtioyfg9Dc9lYsL59O4ppEEKwNPfCg
         YlbWGaYXBfHOqTGloP6NEVSMwxco7c6/cyszA=
MIME-Version: 1.0
Received: by 10.223.94.143 with SMTP id z15mr6896323fam.32.1320268481809; Wed,
 02 Nov 2011 14:14:41 -0700 (PDT)
Received: by 10.152.6.227 with HTTP; Wed, 2 Nov 2011 14:14:41 -0700 (PDT)
In-Reply-To: <CAN=ouMS9rqqNR3KgCBnnjC_HcMrUnftVw643mkmhC_vrpXfv1A@mail.gmail.com>
References: <CAN=ouMSpOuajS2XGtX23M4S73C1XOa4LXZptexk+sh=YsLmauQ@mail.gmail.com>
	<4EB1A5DB.8070405@gmail.com>
	<CAN=ouMTApZjpU-CaZtdL4njXtmtRu++7fzJBJL3w3FRcHfjtSA@mail.gmail.com>
	<CAN=ouMS9rqqNR3KgCBnnjC_HcMrUnftVw643mkmhC_vrpXfv1A@mail.gmail.com>
Date: Wed, 2 Nov 2011 15:14:41 -0600
Message-ID: <CAN=ouMQ_xUULV5qWnRR93DOK9t+juor5RA-72-4zu783z_K2tg@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=001517478f1addcd9c04b0c6f5e2
Subject: Fwd: [Caml-list] Nested module exposing type from parent?


--001517478f1addcd9c04b0c6f5e2
Content-Type: text/plain; charset=ISO-8859-1

Oops, I didn't do a group-reply... so in case anyone is interested in what
I ended up with:

---------- Forwarded message ----------
From: Anthony Tavener <anthony.tavener@gmail.com>
Date: Wed, Nov 2, 2011 at 2:50 PM
Subject: Re: [Caml-list] Nested module exposing type from parent?
To: Vincent Aravantinos <vincent.aravantinos@gmail.com>


Actually, better than I initially thought...

I keep this as I have them defined already, except as you said: include
instead of open.

  module Vec = struct
    module Type = struct
      type t = { x: int; y: int }
    end
    include Type
    let make x y = {x;y}
    let add a b = {x=a.x+b.x; y=a.y+b.y}
  end

Before, I had instead of the include:
  type t = Type.t
  open Type

Which worked, but then the type used everywhere was Vec.Type.t

Thanks again! Simple and effective, and I was looking in all the wrong
places. :)

On Wed, Nov 2, 2011 at 2:36 PM, Anthony Tavener
<anthony.tavener@gmail.com>wrote:

> Thank-you Vincent!
>
> Though this requires a home for the "source type" module, at least the
> types come out right in the end. Thanks!
>
> And this led me to read specifically about include to understand what it
> really does. :)
>
>
> On Wed, Nov 2, 2011 at 2:19 PM, Vincent Aravantinos <
> vincent.aravantinos@gmail.com> wrote:
>
>> **
>> Using "include" instead of "open" would work, ie. turning your example
>> into:
>>
>> module Vec_main = struct
>>
>>   type t = { x: int; y: int }
>>   let make x y = {x;y}
>>   let add a b = {x=a.x+b.x; y=a.y+b.y}
>> end
>>
>> module Vec = struct
>>   include Vec_main
>>   module Type = struct
>>     include Vec_main
>>     ...
>>   end
>> end
>>
>> Then:
>> # let n = Vec.make 2 5;;
>> val n : Vec.t = {Vec.x = 2; Vec.y = 5}
>> # open Vec.Type;;
>> # let m = {x=1;y=2};;
>> val m : Vec.Type.t = {x = 1; y = 2}
>> # Vec.add m n;;
>> - : Vec.t = {Vec.x = 3; Vec.y = 7}
>>
>> Cheers
>>
>> --
>> Vincent Aravantinos - Postdoctoral Fellow, Concordia University, Hardware Verification Group
>>
>>
>> On 11/02/2011 03:41 PM, Anthony Tavener wrote:
>>
>> I've been struggling with this occasionally...
>>
>>  I'm using nested modules to "open" access to select features of a
>> module. My problem is I can't find a way to *expose* types in the parent
>> module through such nested modules.
>>
>>  A simplified example of what I'm looking at:
>>
>>    module Vec = struct
>>
>>      type t = { x: int; y: int }
>>     let make x y = {x;y}
>>     let add a b = {x=a.x+b.x; y=a.y+b.y}
>>
>>      module Type =
>>       (* something which has type t = Vec.t,
>>        * with exposed structure when "open"ed.
>>        * Also note that Vec is not really an
>>         * explicit module like this; instead it
>>        * is implemented in vec.ml *)
>>   end
>>
>>  Example usage...
>>
>>    let n = Vec.make 2 5
>>   open Vec.Type
>>   let m = {x=1;y=2}
>>   Vec.add m n
>>
>>
>>  To date, I've defined the type in the Type submodule, which is then
>> used by the parent module. The unsatisfactory quality of this is that
>> Vec.Type.t is the "true" type. Ideally the concrete type would live at
>> Vec.t, with "open Vec.Type" bringing the fields of the type into scope.
>>
>>  As background, here are examples of opening different features of the
>> Vec module:
>>
>>    let c = Vec.add a b
>>
>>    open Vec.Prefixed
>>   let c = vadd a b
>>
>>    open Vec.Ops
>>   let c = a +| b
>>
>>    open Vec.Type
>>   let c = Vec.add a {x;y;z=0.}
>>
>>  Apologies if this is really beginner-list material. It's minor, but has
>> been bugging me.
>> Thank-you for looking,
>>
>>   Tony
>>
>>
>>
>

--001517478f1addcd9c04b0c6f5e2
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Oops, I didn&#39;t do a group-reply... so in case anyone is interested in w=
hat I ended up with:<br><br><div class=3D"gmail_quote">---------- Forwarded=
 message ----------<br>From: <b class=3D"gmail_sendername">Anthony Tavener<=
/b> <span dir=3D"ltr">&lt;<a href=3D"mailto:anthony.tavener@gmail.com">anth=
ony.tavener@gmail.com</a>&gt;</span><br>
Date: Wed, Nov 2, 2011 at 2:50 PM<br>Subject: Re: [Caml-list] Nested module=
 exposing type from parent?<br>To: Vincent Aravantinos &lt;<a href=3D"mailt=
o:vincent.aravantinos@gmail.com">vincent.aravantinos@gmail.com</a>&gt;<br>
<br><br>Actually, better than I initially thought...<div><br></div><div>I k=
eep this as I have them defined already, except as you said: include instea=
d of open.</div><div><br></div><div><div>=A0 module Vec =3D struct</div><di=
v>
=A0 =A0 module Type =3D struct</div><div class=3D"im">
<div>=A0 =A0 =A0 type t =3D { x: int; y: int }</div></div><div>=A0 =A0 end<=
/div><div>=A0 =A0 include Type</div><div class=3D"im"><div>=A0 =A0 let make=
 x y =3D {x;y}</div><div>=A0 =A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}=
</div><div>=A0 end</div><div><br>
</div></div><div>Before, I had instead of the include:</div>
<div>=A0 type t =3D Type.t</div><div><div>=A0 open Type</div></div><div><br=
></div><div>Which worked, but then the type used everywhere was Vec.Type.t<=
/div><div class=3D"gmail_quote">
<br></div><div class=3D"gmail_quote">Thanks again! Simple and effective, an=
d I was looking in all the wrong places. :)</div><div><div></div><div class=
=3D"h5"><div class=3D"gmail_quote"><br></div><div class=3D"gmail_quote">On =
Wed, Nov 2, 2011 at 2:36 PM, Anthony Tavener <span dir=3D"ltr">&lt;<a href=
=3D"mailto:anthony.tavener@gmail.com" target=3D"_blank">anthony.tavener@gma=
il.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Thank-you Vincent!<div><br></div><div>Though=
 this requires a home for the &quot;source type&quot; module, at least the =
types come out right in the end. Thanks!</div>

<div><br></div><div>And this led me to read specifically about include to u=
nderstand what it really does. :)</div><div><div></div><div>
<div><br><br><div class=3D"gmail_quote">On Wed, Nov 2, 2011 at 2:19 PM, Vin=
cent Aravantinos <span dir=3D"ltr">&lt;<a href=3D"mailto:vincent.aravantino=
s@gmail.com" target=3D"_blank">vincent.aravantinos@gmail.com</a>&gt;</span>=
 wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<u></u>

=20=20
=20=20=20=20
=20=20
  <div bgcolor=3D"#ffffff" text=3D"#000000">
    Using &quot;include&quot; instead of &quot;open&quot; would work, ie. t=
urning your
    example into:<br>
    <br>
    module Vec_main =3D struct<div><br>
    =A0 type t =3D { x: int; y: int }
    <div>=A0 let make x y =3D {x;y}</div>
    <div>=A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}</div></div>
    end<br>
    <br>
    module Vec =3D struct<br>
    =A0 include Vec_main<br>
    =A0 module Type =3D struct<br>
    =A0=A0=A0 include Vec_main<br>
    =A0=A0=A0 ...<br>
    =A0 end<br>
    end<br>
    <br>
    Then:<br>
    # let n =3D Vec.make 2 5;;<br>
    val n : Vec.t =3D {Vec.x =3D 2; Vec.y =3D 5}<br>
    # open Vec.Type;;<br>
    # let m =3D {x=3D1;y=3D2};;<br>
    val m : Vec.Type.t =3D {x =3D 1; y =3D 2}<br>
    # Vec.add m n;;<br>
    - : Vec.t =3D {Vec.x =3D 3; Vec.y =3D 7}<br>
    <br>
    Cheers<br><font color=3D"#888888">
    <br>
    <pre cols=3D"72">--=20
Vincent Aravantinos - Postdoctoral Fellow, Concordia University, Hardware V=
erification Group</pre></font><div><div></div><div>
    <br>
    On 11/02/2011 03:41 PM, Anthony Tavener wrote:
    <blockquote type=3D"cite">
      <div>I&#39;ve been struggling with this occasionally...</div>
      <div><br>
      </div>
      <div>I&#39;m using nested modules to &quot;open&quot; access to selec=
t features
        of a module. My problem is I can&#39;t find a way to *expose* types
        in the parent module through such nested modules.</div>
      <div><br>
      </div>
      <div>A simplified example of what I&#39;m looking at:</div>
      <div><br>
      </div>
      <div>=A0 module Vec =3D struct</div>
      <div><br>
      </div>
      <div>=A0 =A0 type t =3D { x: int; y: int }</div>
      <div>=A0 =A0 let make x y =3D {x;y}</div>
      <div>=A0 =A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}</div>
      <div><br>
      </div>
      <div>=A0 =A0 module Type =3D</div>
      <div>=A0 =A0 =A0 (* something which has type t =3D Vec.t,</div>
      <div>=A0 =A0 =A0 =A0* with exposed structure when &quot;open&quot;ed.=
</div>
      <div>=A0 =A0 =A0 =A0* Also note that Vec is not really an</div>
      <div>
        =A0 =A0 =A0 =A0* explicit module like this; instead it</div>
      <div>=A0 =A0 =A0 =A0* is implemented in <a href=3D"http://vec.ml" tar=
get=3D"_blank">vec.ml</a> *)</div>
      <div>=A0 end</div>
      <div><br>
      </div>
      <div>Example usage...</div>
      <div><br>
      </div>
      <div>=A0 let n =3D Vec.make 2 5</div>
      <div>=A0 open Vec.Type</div>
      <div>=A0 let m =3D {x=3D1;y=3D2}</div>
      <div>=A0 Vec.add m n</div>
      <div><br>
      </div>
      <div><br>
      </div>
      <div>To date, I&#39;ve defined the type in the Type submodule, which
        is then used by the parent module. The unsatisfactory quality of
        this is that Vec.Type.t is the &quot;true&quot; type. Ideally the c=
oncrete
        type would live at Vec.t, with &quot;open Vec.Type&quot; bringing t=
he
        fields of the type into scope.</div>
      <div><br>
      </div>
      <div>As background, here are examples of opening different
        features of the Vec module:</div>
      <div><br>
      </div>
      <div>=A0 let c =3D Vec.add a b</div>
      <div><br>
      </div>
      <div>=A0 open Vec.Prefixed</div>
      <div>=A0 let c =3D vadd a b</div>
      <div><br>
      </div>
      <div>=A0 open Vec.Ops</div>
      <div>=A0 let c =3D a +| b</div>
      <div><br>
      </div>
      <div>=A0 open Vec.Type</div>
      <div>=A0 let c =3D Vec.add a {x;y;z=3D0.}</div>
      <div><br>
      </div>
      <div>Apologies if this is really beginner-list material. It&#39;s
        minor, but has been bugging me.</div>
      <div>Thank-you for looking,</div>
      <div><br>
      </div>
      <div>=A0Tony</div>
      <div><br>
      </div>
    </blockquote>
    <br>
  </div></div></div>

</blockquote></div><br></div>
</div></div></blockquote></div><br></div></div></div>
</div><br>

--001517478f1addcd9c04b0c6f5e2--
