Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA8FBGtZ007136
	for <caml-list@sympa-roc.inria.fr>; Tue, 8 Nov 2011 16:11:16 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AloBALlFuU5KfVK2kGdsb2JhbABDqGGBHggiAQEBAQkJDQcUBCGBcgEBAQQSAhMZARsdAQMMBgULDS4hAQERAQUBHAYTCBqHaJoQCothgmOFbj2IcAIFCokjBJQhikCDAT2DcQ
X-IronPort-AV: E=Sophos;i="4.69,477,1315173600"; 
   d="scan'208";a="129194304"
Received: from mail-wy0-f182.google.com ([74.125.82.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Nov 2011 16:11:11 +0100
Received: by wyg36 with SMTP id 36so1066668wyg.27
        for <caml-list@inria.fr>; Tue, 08 Nov 2011 07:11:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:content-transfer-encoding;
        bh=EPz4cbBx8RKRwaoy3Kk5K9GVF6gDVeHW6Zt4BbRl8dc=;
        b=sLfga/BOgqcoOFgrSWOBVHahKm9szzkK0ivO7KBk9TLtofYSxjsy4Ku2NrneBKM5hM
         O7zwdSf/rDpQOvJ4vVop9z4HVdRQvvCnd5uOc/Otl8Lxj9PRHAlIuUy8X8ll3dJ7mxnD
         ilzr/dFbzR2xiuEo3HH+cTZRlBJFKn6MrIr1o=
Received: by 10.227.205.78 with SMTP id fp14mr32952698wbb.23.1320765071147;
 Tue, 08 Nov 2011 07:11:11 -0800 (PST)
MIME-Version: 1.0
Received: by 10.227.203.134 with HTTP; Tue, 8 Nov 2011 07:10:50 -0800 (PST)
In-Reply-To: <CALs4vDb_XVKve3A3Dj5bsy1Ntsk2TnMvC6EPP4+LGd+1vqrNZQ@mail.gmail.com>
References: <CALs4vDb_XVKve3A3Dj5bsy1Ntsk2TnMvC6EPP4+LGd+1vqrNZQ@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 8 Nov 2011 16:10:50 +0100
Message-ID: <CAPFanBHLH56cUqcJF3XLXDHgLAFxa16ZSPCQfoEh4fTawVuzPg@mail.gmail.com>
To: Hans Ole Rafaelsen <hrafaelsen@gmail.com>
Cc: caml-list@inria.fr
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by walapai.inria.fr id pA8FBGtZ007136
Subject: Re: [Caml-list] Include question

If you want some module of your system to be parametrized by another
module (to be able to pass either a concrete module or a mockup
module), you should use a functor.

  http://caml.inria.fr/pub/docs/manual-ocaml/manual004.html#toc15

in logic.ml
  module Make (Net_lib : Net_interface) = struct
    ...
  end

in main.ml:
  module Logic = Logic.Make(Net_lib)
  ..

in main_mockup.ml:
  module Logic = Logic.Make(Net_mockup)
  ...

On Tue, Nov 8, 2011 at 4:03 PM, Hans Ole Rafaelsen <hrafaelsen@gmail.com> wrote:
> Hi,
>
> I'm trying to create a mockup module to replace a network module when doing
> testing.
>
> The application consists of basically 3 parts. Some user interaction. This
> calls some logic of the application, and the logic module might need to call
> some other functions over the network. For testing I want to make a mockup
> of the network module, in addition to synthesize the user interaction. I
> want to test the logic module. The application has the following files:
>
> net_lib.ml:
> let util_fun a = a
> let foo a b = a + b
> let bar a b = a - b
>
> logic.ml:
> let state = ref 0
> let get_state () = !state
> let do_op a b =
>   incr state;
>   (Net_lib.foo a b) * (Net_lib.bar (Net_lib.util_fun a) b )
>
> main_appl.ml:
> let () =
>   let a, b  = Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
>   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
>
> let () =
>   let a, b  = Scanf.scanf  "%d %d\n" (fun a b -> a,b) in
>   Printf.printf "Foo %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
>
>
> For testing I have the following modules:
> net_lib_mockup.ml
> include Net_lib
> let foo a b = 1
> let bar a b = 1
>
> logic_mockup.ml:
> module Net_lib = Net_lib_mockup
> include Logic
>
> main_test.ml:
> module Logic = Logic_mockup
>
> let () =
>   let a, b = (1, 1) in
>   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
>
> let () =
>   let a, b = (10, 1) in
>   Printf.printf "Test %d %d\n%!" (Logic.get_state ()) (Logic.do_op a b)
>
> The problem is that the "include Logic" has already 'bound' the functions in
> Logic to the Net_lib module and will not use the Net_lib_mockup that I try
> to use through a moudle alias. If i replace the 'include Logic' with the
> actual content of the logic.ml file, then the functions get bound to the
> Logic_mockup functions, and the test works as they should.
>
> Are there some trick to get the 'include Logic', in logic_mockup.ml, to use
> to the Net_lib_mockup module and not the Net_lib module, so that I don't
> have to do copy and paste between the two files?
>
>
> Regards,
>
> Hans Ole Rafaelsen
>
>

