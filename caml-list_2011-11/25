Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA38BCh4025112
	for <caml-list@sympa-roc.inria.fr>; Thu, 3 Nov 2011 09:11:12 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqQBAD9Msk7RVaE2kGdsb2JhbABEhHmkDWkIIgEBAQEJCQ0bBCGBcgEBAQMBEgIPBBkBGx0BAwELBgMCCzcCAiEBAREBBQEcBhMih2CXSwqLDUeCYIVMPYhwAgUKiACBFASIBowQijuCfj2DfA
X-IronPort-AV: E=Sophos;i="4.69,448,1315173600"; 
   d="scan'208";a="116512473"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Nov 2011 09:11:06 +0100
Received: by faar19 with SMTP id r19so2519321faa.27
        for <caml-list@inria.fr>; Thu, 03 Nov 2011 01:11:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=wKujH8jlmkmKeRc8r7BtjZHY+xCtcL5mVV3Y1NykH1s=;
        b=nnKLNPm73OMqknjSfh1g05Xb09gPzomkGRoxXtT92kJ8tV+bHK72jnKFdRycbuwfHn
         yHrHyOTp/gfo8jRquBA+pMMZfhVMIGKw/6sOcTj7GrpAA67N8QEXSeNfOHzpbkZ5Lf6Q
         tvnMiE/T0IGgbdQ/wjEb+o3V/GdDCFbV86SDM=
Received: by 10.223.75.15 with SMTP id w15mr14800233faj.9.1320307866171; Thu,
 03 Nov 2011 01:11:06 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.223.104.143 with HTTP; Thu, 3 Nov 2011 01:10:25 -0700 (PDT)
In-Reply-To: <CAHqiZ-Jg36Tu-4zgXe9M1dUMqQQ-NJwjKt2LO0Oo-N_EFc4-+w@mail.gmail.com>
References: <CAHrFk+vEoS+1PoKm=PR4EBko0Ot8osuNVpk9EO4JLL-fu7mm6w@mail.gmail.com>
 <CAHqiZ-+T=7nep4TmUuzzYu0qMpO908TmegwaNCg7f--+4PVeGw@mail.gmail.com> <CAHqiZ-Jg36Tu-4zgXe9M1dUMqQQ-NJwjKt2LO0Oo-N_EFc4-+w@mail.gmail.com>
From: Ly Kim Quyen <lykimq@gmail.com>
Date: Thu, 3 Nov 2011 16:10:25 +0800
Message-ID: <CAHrFk+v5NBVuzc83MXf-KOHBzm6uTR3JLGKxsAJKEpk5WpYdpQ@mail.gmail.com>
To: Diego Olivier Fernandez Pons <dofp.ocaml@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0015174c19565b77f704b0d02185
Subject: Re: [Caml-list] Compute the equivalence classes


--0015174c19565b77f704b0d02185
Content-Type: text/plain; charset=UTF-8

Hi Diego,

Thank you very much.

>>You will need to avoid generating multiple times the same component.

Here is the code:

let output = function matrix ->
  let n = Array.length matrix in
  let marked = Array.make n false in
  let result = ref [] in
  for i = 0 to n - 1 do
    if (not marked.(i)) then
      begin
let component = ref[i] in
for j = i + 1 to n - 1 do
*          if matrix.(i).(j) = true && matrix.(j).(i) = true then*
    begin
  marked.(j) <- true;
  component := j :: !component
 end
 done;
result := !component :: !result
      end
  done;
  !result ;;

Ly
On 2 November 2011 01:55, Diego Olivier Fernandez Pons <dofp.ocaml@gmail.com
> wrote:

> ... sorry, sent too early
>
> > You can compute the strongly connected components directly on the
> transitive closure. Notice you don't need to transpose it explicitely
>
> // Strong connected components matrix form
> let sccmatrix = function matrix ->
>   let n = Array.length matrix in
>   let result = Array.make_matrix n n 0 in
>   for i = 0 to n - 1 do
>       for j = 0 to n - 1 do
>           result.(i).(j) <- min matrix.(i).(j) matrix.(j).(i)
>       done;
>   done;
>   result
>
> Now you just have to collect the results in a list of lists.
> You will need to avoid generating multiple times the same component.
>
> // Output list of lists from matrix
> let output = function matrix ->
>     let n = Array.length matrix in
>     let marked = Array.make n false in
>     let result = ref [] in
>     for i = 0 to n - 1 do
>         if (not marked.(i)) then
>         begin
>             let component = ref [i] in
>             for j = i + 1 to n - 1 do
>                 if matrix.(i).(j) = 1 then
>                 begin
>                      marked.(j) <- true;
>                      component := j :: !component
>                 end
>             done;
>             result := !component :: !result
>          end
>      done;
>      !result
>
> Since the code uses for loops, it needs references to store the results.
>
> One can do a nicer code and merge the two functions sccmatrix and output
>
>         Diego Olivier
>

--0015174c19565b77f704b0d02185
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<font size=3D"2"><font face=3D"arial,helvetica,sans-serif">Hi Diego,</font>=
</font><div><font size=3D"2"><font face=3D"arial,helvetica,sans-serif"><br>=
</font></font></div><div><font size=3D"2"><font face=3D"arial,helvetica,san=
s-serif">Thank you very much.=C2=A0</font></font></div>

<div><br></div><div>&gt;&gt;You will need to avoid generating multiple time=
s the same component.</div><div><br></div><div>Here is the code:</div><div>=
<br></div><div><font size=3D"2"><font face=3D"arial,helvetica,sans-serif"><=
div>

let output =3D function matrix -&gt;</div><div>=C2=A0 let n =3D Array.lengt=
h matrix in</div><div>=C2=A0 let marked =3D Array.make n false in</div><div=
>=C2=A0 let result =3D ref [] in</div><div>=C2=A0 for i =3D 0 to n - 1 do</=
div><div>=C2=A0 =C2=A0 if (not marked.(i)) then</div>

<div>=C2=A0 =C2=A0 =C2=A0 begin</div><div><span class=3D"Apple-tab-span" st=
yle=3D"white-space:pre">	</span>let component =3D ref[i] in</div><div><span=
 class=3D"Apple-tab-span" style=3D"white-space:pre">	</span>for j =3D i + 1=
 to n - 1 do</div><div>

<b>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 if matrix.(i).(j) =3D true &amp;&amp;=
 matrix.(j).(i) =3D true=C2=A0then</b></div><div><span class=3D"Apple-tab-s=
pan" style=3D"white-space:pre">	</span>=C2=A0 =C2=A0<span class=3D"Apple-ta=
b-span" style=3D"white-space:pre">	</span>begin</div>

<div><span class=3D"Apple-tab-span" style=3D"white-space:pre">		</span> =C2=
=A0marked.(j) &lt;- true;</div><div><span class=3D"Apple-tab-span" style=3D=
"white-space:pre">		</span> =C2=A0component :=3D j :: !component</div><div>=
<span class=3D"Apple-tab-span" style=3D"white-space:pre">		</span>=C2=A0end=
</div>

<div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span>done;=
</div><div><span class=3D"Apple-tab-span" style=3D"white-space:pre">	</span=
>result :=3D !component :: !result</div><div>=C2=A0 =C2=A0 =C2=A0 end</div>=
<div>=C2=A0 done;</div><div>

=C2=A0 !result ;;</div></font></font></div><div><br></div><div>Ly<br><div c=
lass=3D"gmail_quote">On 2 November 2011 01:55, Diego Olivier Fernandez Pons=
 <span dir=3D"ltr">&lt;<a href=3D"mailto:dofp.ocaml@gmail.com">dofp.ocaml@g=
mail.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;">... sorry, sent too early<div class=3D"im">=
<div><br></div><div><div>&gt; You can compute the strongly connected compon=
ents directly on the transitive closure. Notice you don&#39;t need to trans=
pose it explicitely</div>

</div><div><br></div></div><div>
// Strong connected components matrix form</div><div><div>let sccmatrix =3D=
 function matrix -&gt;</div><div class=3D"im"><div>=C2=A0 let n =3D Array.l=
ength matrix in</div></div><div>=C2=A0 let result =3D Array.make_matrix n n=
 0 in</div><div class=3D"im">

<div>=C2=A0 for i =3D 0 to n - 1 do</div>
<div>=C2=A0 =C2=A0 =C2=A0 for j =3D 0 to n - 1 do</div></div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 result.(i).(j) &lt;- min matrix.(i).(j) matrix.=
(j).(i)</div><div>=C2=A0 =C2=A0 =C2=A0 done;</div><div>=C2=A0 done;=C2=A0</=
div><div>=C2=A0 result</div><br></div><div>Now you just have to collect the=
 results in a list of lists.</div>


<div>You will need to avoid generating multiple times the same component.</=
div><div><br></div><div>// Output list of lists from matrix</div><div>let o=
utput =3D function matrix -&gt;</div><div class=3D"im"><div>=C2=A0 =C2=A0 l=
et n =3D Array.length matrix in</div>


</div><div>=C2=A0 =C2=A0 let marked =3D Array.make n false in</div><div>=C2=
=A0 =C2=A0 let result =3D ref [] in</div><div class=3D"im"><div>=C2=A0 =C2=
=A0 for i =3D 0 to n - 1 do</div></div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 if =
(not marked.(i)) then</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 begin</div><div>

=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 let component =3D ref [i] in</div>
<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 for j =3D i + 1 to n - 1 do<=
/div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 if matrix=
.(i).(j) =3D 1 then</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 begin</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0marked.(j) &lt;- true;</div><div>=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0component :=
=3D j :: !component</div>


<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 end</div><div>=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 done;</div><div>=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 result :=3D !component :: !result</div><div>=C2=A0=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0end</div><div>=C2=A0 =C2=A0 =C2=A0done; =C2=A0 =
=C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0!result</div><div><br></div><div=
>Since the code uses for loops, it needs references to store the results.</=
div>


<div><br></div><div>One can do a nicer code and merge the two functions scc=
matrix and output</div><span class=3D"HOEnZb"><div><br></div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 Diego Olivier</div>
</span></blockquote></div><br></div>

--0015174c19565b77f704b0d02185--
