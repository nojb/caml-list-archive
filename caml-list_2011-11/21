Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id pA313Hd5003088
	for <caml-list@sympa-roc.inria.fr>; Thu, 3 Nov 2011 02:03:17 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AloBAHDnsU7RVaE2kGdsb2JhbABEogMBh2wIIgEBAQEJCQ0HFAQhgXIBAQEDARICLAEbHQEDAQsGBQsGAwECAS4hAQERAQUBFAgGEyKHYAiXcQqLVIJghV49iHACBQqJBgSIB4wNijuCfj2EDg
X-IronPort-AV: E=Sophos;i="4.69,446,1315173600"; 
   d="scan'208";a="116434796"
Received: from mail-fx0-f54.google.com ([209.85.161.54])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Nov 2011 02:03:11 +0100
Received: by faar19 with SMTP id r19so1959448faa.27
        for <caml-list@inria.fr>; Wed, 02 Nov 2011 18:03:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=zAbWiuQJ4OAScCW3ma4qSPC1MrvLuFdPOcGBJ3i6muQ=;
        b=FRpTgsZHMRgGZzdsW3COCUs/hezTfRMZULCfnaCFlMChjKMcxQX+UqT/3EYvzb58z4
         wQ/wyvLqynGwiJ7E+Dditlfuzkm+grxvhgfHXr2mPwtYGY4YL1APyXwfpmm02EKWcfL8
         JYHhYzCudGOTx4XoBVxedcshXlqjloB7O3Wyw=
MIME-Version: 1.0
Received: by 10.223.88.150 with SMTP id a22mr8639750fam.1.1320282191291; Wed,
 02 Nov 2011 18:03:11 -0700 (PDT)
Received: by 10.223.6.210 with HTTP; Wed, 2 Nov 2011 18:03:11 -0700 (PDT)
In-Reply-To: <CAPFanBEghH7ebE3gmbsv1SESv6Ur60G5deN8RAG_ryWSUNao1w@mail.gmail.com>
References: <CAN=ouMSpOuajS2XGtX23M4S73C1XOa4LXZptexk+sh=YsLmauQ@mail.gmail.com>
	<4EB1A5DB.8070405@gmail.com>
	<CAN=ouMTApZjpU-CaZtdL4njXtmtRu++7fzJBJL3w3FRcHfjtSA@mail.gmail.com>
	<CAN=ouMS9rqqNR3KgCBnnjC_HcMrUnftVw643mkmhC_vrpXfv1A@mail.gmail.com>
	<CAN=ouMQ_xUULV5qWnRR93DOK9t+juor5RA-72-4zu783z_K2tg@mail.gmail.com>
	<CAPFanBEghH7ebE3gmbsv1SESv6Ur60G5deN8RAG_ryWSUNao1w@mail.gmail.com>
Date: Wed, 2 Nov 2011 19:03:11 -0600
Message-ID: <CAN=ouMSzM=GUkRDRX8kYVSL4d+Z6iAttegV_=hL7_KVm9G6+RQ@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=0015175cae9203e5c904b0ca2730
Subject: Re: [Caml-list] Nested module exposing type from parent?


--0015175cae9203e5c904b0ca2730
Content-Type: text/plain; charset=ISO-8859-1

I had tried this before, because the first thing I did was run into the
cyclic type due to types being implicitly recursive. And I found that
Janestreet article... I'm sure I felt I had the answer then. But it didn't
work for my needs, because I wanted access to the record fields when
opening the sub-module. This is where Vincent's suggestion of using
'include' made the difference. Thank-you though!


On Wed, Nov 2, 2011 at 5:01 PM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> I see that you solved your problem in a way you find satisfying, but I
> would like to point out that the reason why your original code didn't
> work isn't exactly what you seem to think.
>
> When you define a submodule, the types defined before in the parent
> modules are perfectly accessible and can be referred, just as you
> would do when referring to types defined at the toplevel. You need not
> qualify the type with the outer module name (Vec.t in your example),
> as you are still *inside* this parent module.
>
>  module Vec = struct
>    type t = int
>    module Type = struct
>      type u = t
>    end
>  end
>
>  (1 : Vec.Type.u);;
>
> The problem in your case is that you wish to give the same name to the
> type in Vec and in Vec.Type. This would lead to the following:
>  ... module Type = struct type t = t end ...
>
> But this is ill-defined : it is a recursive type defined as being
> itself. The problem is that the OCaml syntax for type declarations
> always consider them recursive (for values you have "let" and "let
> rec", for types you have "type" which behaves like "type rec" with no
> opt-out way possible). This is a flaw of the OCaml syntax which is
> relatively well-known, see eg. http://ocaml.janestreet.com/?q=node/25
>
> A workaround is to define your inner type "t" in two steps, using an
> different intermediate name to break the cycle:
>
>  module Vec = struct
>    type t = int
>    module Type = struct
>      type u = t
>      type t = u
>    end
>  end
>
>  (1 : Vec.Type.t);;
>
>
> On Wed, Nov 2, 2011 at 10:14 PM, Anthony Tavener
> <anthony.tavener@gmail.com> wrote:
> > Oops, I didn't do a group-reply... so in case anyone is interested in
> what I
> > ended up with:
> >
> > ---------- Forwarded message ----------
> > From: Anthony Tavener <anthony.tavener@gmail.com>
> > Date: Wed, Nov 2, 2011 at 2:50 PM
> > Subject: Re: [Caml-list] Nested module exposing type from parent?
> > To: Vincent Aravantinos <vincent.aravantinos@gmail.com>
> >
> >
> > Actually, better than I initially thought...
> > I keep this as I have them defined already, except as you said: include
> > instead of open.
> >   module Vec = struct
> >     module Type = struct
> >       type t = { x: int; y: int }
> >     end
> >     include Type
> >     let make x y = {x;y}
> >     let add a b = {x=a.x+b.x; y=a.y+b.y}
> >   end
> > Before, I had instead of the include:
> >   type t = Type.t
> >   open Type
> > Which worked, but then the type used everywhere was Vec.Type.t
> > Thanks again! Simple and effective, and I was looking in all the wrong
> > places. :)
> > On Wed, Nov 2, 2011 at 2:36 PM, Anthony Tavener <
> anthony.tavener@gmail.com>
> > wrote:
> >>
> >> Thank-you Vincent!
> >> Though this requires a home for the "source type" module, at least the
> >> types come out right in the end. Thanks!
> >> And this led me to read specifically about include to understand what it
> >> really does. :)
> >>
> >> On Wed, Nov 2, 2011 at 2:19 PM, Vincent Aravantinos
> >> <vincent.aravantinos@gmail.com> wrote:
> >>>
> >>> Using "include" instead of "open" would work, ie. turning your example
> >>> into:
> >>>
> >>> module Vec_main = struct
> >>>   type t = { x: int; y: int }
> >>>   let make x y = {x;y}
> >>>   let add a b = {x=a.x+b.x; y=a.y+b.y}
> >>> end
> >>>
> >>> module Vec = struct
> >>>   include Vec_main
> >>>   module Type = struct
> >>>     include Vec_main
> >>>     ...
> >>>   end
> >>> end
> >>>
> >>> Then:
> >>> # let n = Vec.make 2 5;;
> >>> val n : Vec.t = {Vec.x = 2; Vec.y = 5}
> >>> # open Vec.Type;;
> >>> # let m = {x=1;y=2};;
> >>> val m : Vec.Type.t = {x = 1; y = 2}
> >>> # Vec.add m n;;
> >>> - : Vec.t = {Vec.x = 3; Vec.y = 7}
> >>>
> >>> Cheers
> >>>
> >>> --
> >>> Vincent Aravantinos - Postdoctoral Fellow, Concordia University,
> Hardware
> >>> Verification Group
> >>>
> >>> On 11/02/2011 03:41 PM, Anthony Tavener wrote:
> >>>
> >>> I've been struggling with this occasionally...
> >>> I'm using nested modules to "open" access to select features of a
> module.
> >>> My problem is I can't find a way to *expose* types in the parent module
> >>> through such nested modules.
> >>> A simplified example of what I'm looking at:
> >>>   module Vec = struct
> >>>     type t = { x: int; y: int }
> >>>     let make x y = {x;y}
> >>>     let add a b = {x=a.x+b.x; y=a.y+b.y}
> >>>     module Type =
> >>>       (* something which has type t = Vec.t,
> >>>        * with exposed structure when "open"ed.
> >>>        * Also note that Vec is not really an
> >>>        * explicit module like this; instead it
> >>>        * is implemented in vec.ml *)
> >>>   end
> >>> Example usage...
> >>>   let n = Vec.make 2 5
> >>>   open Vec.Type
> >>>   let m = {x=1;y=2}
> >>>   Vec.add m n
> >>>
> >>> To date, I've defined the type in the Type submodule, which is then
> used
> >>> by the parent module. The unsatisfactory quality of this is that
> Vec.Type.t
> >>> is the "true" type. Ideally the concrete type would live at Vec.t, with
> >>> "open Vec.Type" bringing the fields of the type into scope.
> >>> As background, here are examples of opening different features of the
> Vec
> >>> module:
> >>>   let c = Vec.add a b
> >>>   open Vec.Prefixed
> >>>   let c = vadd a b
> >>>   open Vec.Ops
> >>>   let c = a +| b
> >>>   open Vec.Type
> >>>   let c = Vec.add a {x;y;z=0.}
> >>> Apologies if this is really beginner-list material. It's minor, but has
> >>> been bugging me.
> >>> Thank-you for looking,
> >>>  Tony
> >>>
> >>
> >
> >
> >
>

--0015175cae9203e5c904b0ca2730
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I had tried this before, because the first thing I did was run into the cyc=
lic type due to types being implicitly recursive. And I found that Janestre=
et article... I&#39;m sure I felt I had the answer then. But it didn&#39;t =
work for my needs, because I wanted access to the record fields when openin=
g the sub-module. This is where Vincent&#39;s suggestion of using &#39;incl=
ude&#39; made the difference. Thank-you though!<div>
<br></div><div><br><div class=3D"gmail_quote">On Wed, Nov 2, 2011 at 5:01 P=
M, Gabriel Scherer <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.scherer@=
gmail.com">gabriel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote c=
lass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;=
padding-left:1ex;">
I see that you solved your problem in a way you find satisfying, but I<br>
would like to point out that the reason why your original code didn&#39;t<b=
r>
work isn&#39;t exactly what you seem to think.<br>
<br>
When you define a submodule, the types defined before in the parent<br>
modules are perfectly accessible and can be referred, just as you<br>
would do when referring to types defined at the toplevel. You need not<br>
qualify the type with the outer module name (Vec.t in your example),<br>
as you are still *inside* this parent module.<br>
<br>
 =A0module Vec =3D struct<br>
 =A0 =A0type t =3D int<br>
 =A0 =A0module Type =3D struct<br>
 =A0 =A0 =A0type u =3D t<br>
 =A0 =A0end<br>
 =A0end<br>
<br>
 =A0(1 : Vec.Type.u);;<br>
<br>
The problem in your case is that you wish to give the same name to the<br>
type in Vec and in Vec.Type. This would lead to the following:<br>
 =A0... module Type =3D struct type t =3D t end ...<br>
<br>
But this is ill-defined : it is a recursive type defined as being<br>
itself. The problem is that the OCaml syntax for type declarations<br>
always consider them recursive (for values you have &quot;let&quot; and &qu=
ot;let<br>
rec&quot;, for types you have &quot;type&quot; which behaves like &quot;typ=
e rec&quot; with no<br>
opt-out way possible). This is a flaw of the OCaml syntax which is<br>
relatively well-known, see eg. <a href=3D"http://ocaml.janestreet.com/?q=3D=
node/25" target=3D"_blank">http://ocaml.janestreet.com/?q=3Dnode/25</a><br>
<br>
A workaround is to define your inner type &quot;t&quot; in two steps, using=
 an<br>
different intermediate name to break the cycle:<br>
<br>
 =A0module Vec =3D struct<br>
 =A0 =A0type t =3D int<br>
 =A0 =A0module Type =3D struct<br>
 =A0 =A0 =A0type u =3D t<br>
 =A0 =A0 =A0type t =3D u<br>
 =A0 =A0end<br>
 =A0end<br>
<br>
 =A0(1 : Vec.Type.t);;<br>
<br>
<br>
On Wed, Nov 2, 2011 at 10:14 PM, Anthony Tavener<br>
<div><div></div><div class=3D"h5">&lt;<a href=3D"mailto:anthony.tavener@gma=
il.com">anthony.tavener@gmail.com</a>&gt; wrote:<br>
&gt; Oops, I didn&#39;t do a group-reply... so in case anyone is interested=
 in what I<br>
&gt; ended up with:<br>
&gt;<br>
&gt; ---------- Forwarded message ----------<br>
&gt; From: Anthony Tavener &lt;<a href=3D"mailto:anthony.tavener@gmail.com"=
>anthony.tavener@gmail.com</a>&gt;<br>
&gt; Date: Wed, Nov 2, 2011 at 2:50 PM<br>
&gt; Subject: Re: [Caml-list] Nested module exposing type from parent?<br>
&gt; To: Vincent Aravantinos &lt;<a href=3D"mailto:vincent.aravantinos@gmai=
l.com">vincent.aravantinos@gmail.com</a>&gt;<br>
&gt;<br>
&gt;<br>
&gt; Actually, better than I initially thought...<br>
&gt; I keep this as I have them defined already, except as you said: includ=
e<br>
&gt; instead of open.<br>
&gt; =A0 module Vec =3D struct<br>
&gt; =A0 =A0 module Type =3D struct<br>
&gt; =A0 =A0 =A0 type t =3D { x: int; y: int }<br>
&gt; =A0 =A0 end<br>
&gt; =A0 =A0 include Type<br>
&gt; =A0 =A0 let make x y =3D {x;y}<br>
&gt; =A0 =A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}<br>
&gt; =A0 end<br>
&gt; Before, I had instead of the include:<br>
&gt; =A0 type t =3D Type.t<br>
&gt; =A0 open Type<br>
&gt; Which worked, but then the type used everywhere was Vec.Type.t<br>
&gt; Thanks again! Simple and effective, and I was looking in all the wrong=
<br>
&gt; places. :)<br>
&gt; On Wed, Nov 2, 2011 at 2:36 PM, Anthony Tavener &lt;<a href=3D"mailto:=
anthony.tavener@gmail.com">anthony.tavener@gmail.com</a>&gt;<br>
&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; Thank-you Vincent!<br>
&gt;&gt; Though this requires a home for the &quot;source type&quot; module=
, at least the<br>
&gt;&gt; types come out right in the end. Thanks!<br>
&gt;&gt; And this led me to read specifically about include to understand w=
hat it<br>
&gt;&gt; really does. :)<br>
&gt;&gt;<br>
&gt;&gt; On Wed, Nov 2, 2011 at 2:19 PM, Vincent Aravantinos<br>
&gt;&gt; &lt;<a href=3D"mailto:vincent.aravantinos@gmail.com">vincent.arava=
ntinos@gmail.com</a>&gt; wrote:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Using &quot;include&quot; instead of &quot;open&quot; would wo=
rk, ie. turning your example<br>
&gt;&gt;&gt; into:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; module Vec_main =3D struct<br>
&gt;&gt;&gt; =A0 type t =3D { x: int; y: int }<br>
&gt;&gt;&gt; =A0 let make x y =3D {x;y}<br>
&gt;&gt;&gt; =A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}<br>
&gt;&gt;&gt; end<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; module Vec =3D struct<br>
&gt;&gt;&gt; =A0 include Vec_main<br>
&gt;&gt;&gt; =A0 module Type =3D struct<br>
&gt;&gt;&gt; =A0=A0=A0 include Vec_main<br>
&gt;&gt;&gt; =A0=A0=A0 ...<br>
&gt;&gt;&gt; =A0 end<br>
&gt;&gt;&gt; end<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Then:<br>
&gt;&gt;&gt; # let n =3D Vec.make 2 5;;<br>
&gt;&gt;&gt; val n : Vec.t =3D {Vec.x =3D 2; Vec.y =3D 5}<br>
&gt;&gt;&gt; # open Vec.Type;;<br>
&gt;&gt;&gt; # let m =3D {x=3D1;y=3D2};;<br>
&gt;&gt;&gt; val m : Vec.Type.t =3D {x =3D 1; y =3D 2}<br>
&gt;&gt;&gt; # Vec.add m n;;<br>
&gt;&gt;&gt; - : Vec.t =3D {Vec.x =3D 3; Vec.y =3D 7}<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Cheers<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; --<br>
&gt;&gt;&gt; Vincent Aravantinos - Postdoctoral Fellow, Concordia Universit=
y, Hardware<br>
&gt;&gt;&gt; Verification Group<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; On 11/02/2011 03:41 PM, Anthony Tavener wrote:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; I&#39;ve been struggling with this occasionally...<br>
&gt;&gt;&gt; I&#39;m using nested modules to &quot;open&quot; access to sel=
ect features of a module.<br>
&gt;&gt;&gt; My problem is I can&#39;t find a way to *expose* types in the =
parent module<br>
&gt;&gt;&gt; through such nested modules.<br>
&gt;&gt;&gt; A simplified example of what I&#39;m looking at:<br>
&gt;&gt;&gt; =A0 module Vec =3D struct<br>
&gt;&gt;&gt; =A0 =A0 type t =3D { x: int; y: int }<br>
&gt;&gt;&gt; =A0 =A0 let make x y =3D {x;y}<br>
&gt;&gt;&gt; =A0 =A0 let add a b =3D {x=3Da.x+b.x; y=3Da.y+b.y}<br>
&gt;&gt;&gt; =A0 =A0 module Type =3D<br>
&gt;&gt;&gt; =A0 =A0 =A0 (* something which has type t =3D Vec.t,<br>
&gt;&gt;&gt; =A0 =A0 =A0 =A0* with exposed structure when &quot;open&quot;e=
d.<br>
&gt;&gt;&gt; =A0 =A0 =A0 =A0* Also note that Vec is not really an<br>
&gt;&gt;&gt; =A0 =A0 =A0 =A0* explicit module like this; instead it<br>
&gt;&gt;&gt; =A0 =A0 =A0 =A0* is implemented in <a href=3D"http://vec.ml" t=
arget=3D"_blank">vec.ml</a> *)<br>
&gt;&gt;&gt; =A0 end<br>
&gt;&gt;&gt; Example usage...<br>
&gt;&gt;&gt; =A0 let n =3D Vec.make 2 5<br>
&gt;&gt;&gt; =A0 open Vec.Type<br>
&gt;&gt;&gt; =A0 let m =3D {x=3D1;y=3D2}<br>
&gt;&gt;&gt; =A0 Vec.add m n<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; To date, I&#39;ve defined the type in the Type submodule, whic=
h is then used<br>
&gt;&gt;&gt; by the parent module. The unsatisfactory quality of this is th=
at Vec.Type.t<br>
&gt;&gt;&gt; is the &quot;true&quot; type. Ideally the concrete type would =
live at Vec.t, with<br>
&gt;&gt;&gt; &quot;open Vec.Type&quot; bringing the fields of the type into=
 scope.<br>
&gt;&gt;&gt; As background, here are examples of opening different features=
 of the Vec<br>
&gt;&gt;&gt; module:<br>
&gt;&gt;&gt; =A0 let c =3D Vec.add a b<br>
&gt;&gt;&gt; =A0 open Vec.Prefixed<br>
&gt;&gt;&gt; =A0 let c =3D vadd a b<br>
&gt;&gt;&gt; =A0 open Vec.Ops<br>
&gt;&gt;&gt; =A0 let c =3D a +| b<br>
&gt;&gt;&gt; =A0 open Vec.Type<br>
&gt;&gt;&gt; =A0 let c =3D Vec.add a {x;y;z=3D0.}<br>
&gt;&gt;&gt; Apologies if this is really beginner-list material. It&#39;s m=
inor, but has<br>
&gt;&gt;&gt; been bugging me.<br>
&gt;&gt;&gt; Thank-you for looking,<br>
&gt;&gt;&gt; =A0Tony<br>
&gt;&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
</div></div></blockquote></div><br></div>

--0015175cae9203e5c904b0ca2730--
