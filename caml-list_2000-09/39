Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA24578 for caml-red; Thu, 21 Sep 2000 21:26:25 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA03835 for <caml-list@pauillac.inria.fr>; Thu, 21 Sep 2000 14:00:32 +0200 (MET DST)
Received: from malonne.lifl.fr (malonne.lifl.fr [134.206.10.29])
	by nez-perce.inria.fr (8.10.0/8.10.0) with ESMTP id e8LC0Vj23829
	for <caml-list@inria.fr>; Thu, 21 Sep 2000 14:00:32 +0200 (MET DST)
Received: from tjejol.lifl.fr (tjejol.lifl.fr [134.206.10.213])
          by malonne.lifl.fr (8.9.3/jtpda-5.3.3) with ESMTP id OAA10194
          for <caml-list@inria.fr>; Thu, 21 Sep 2000 14:00:23 +0200 (MET DST)
Received: from (soula@localhost)
          by tjejol.lifl.fr (8.9.3/jtpda-5.3.3) id OAA05572
          ; Thu, 21 Sep 2000 14:00:30 +0200
X-Authentication-Warning: tjejol.lifl.fr: soula set sender to soula@tjejol.lifl.fr using -f
From: "Julien.Soula" <Julien.Soula@lifl.fr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <14793.63582.136713.373134@tjejol.lifl.fr>
Date: Thu, 21 Sep 2000 14:00:30 +0200 (CEST)
To: caml-list@inria.fr
Subject: scanning recursive variable type
X-Mailer: VM 6.64 under Emacs 20.7.1
Sender: weis@pauillac.inria.fr

hello

I have defined a type that allow me to recurse on constructor (option
and list):

  # type 'a t = N of 'a | L of ('a list) t | O of ('a option) t;;
  type 'a t = | N of 'a | L of 'a list t | O of 'a option t

So I can do this:

  # let lo = [ Some 1; None ];;
  val lo : int option list = [Some 1; None]
  # let lot = O (L (N lo));;
  val lot : int t = O (L (N [Some 1; None]))


Assume that I know how to pass from a function ('a->int) to functions
('a list->int) and ('a option->int) :

  val fun_of_list : ('a -> int) -> 'a list -> int = <fun>
  val fun_of_option : ('a -> int) -> 'a option -> int = <fun>

Now I want to apply such a function on ('a t). So I think of a
recursive function with signature:

  val int_of_t : ('a->int) -> 'a t -> int = <fun>

I try to define this recursive function like that but... :

  # let rec int_of_t f = function
    N x -> f x
  | L lx -> int_of_t (fun_of_list f) lx
  | O ox -> int_of_t (fun_of_option f) ox ;;
      Characters 67-80:
This expression has type 'a list -> int but is here used with type 'a -> int

I don't know how to make it otherway with this type ?

-- Julien


