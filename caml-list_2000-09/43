Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA23458 for caml-red; Fri, 22 Sep 2000 15:56:53 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA23687 for <caml-list@pauillac.inria.fr>; Fri, 22 Sep 2000 02:33:35 +0200 (MET DST)
Received: from mail5.microsoft.com (mail5.microsoft.com [131.107.3.121])
	by nez-perce.inria.fr (8.10.0/8.10.0) with SMTP id e8M0XYj05289
	for <caml-list@inria.fr>; Fri, 22 Sep 2000 02:33:34 +0200 (MET DST)
Received: from 157.54.9.108 by mail5.microsoft.com (InterScan E-Mail VirusWall NT); Thu, 21 Sep 2000 12:57:38 -0700 (Pacific Daylight Time)
Received: by INET-IMC-05 with Internet Mail Service (5.5.2651.58)
	id <TKLWLZ97>; Thu, 21 Sep 2000 12:57:37 -0700
Message-ID: <2CCC2A4C8D41EC4991B547B3595F1A7251A376@red-pt-01.redmond.corp.microsoft.com>
From: Manuel Fahndrich <maf@microsoft.com>
To: "'Julien.Soula'" <Julien.Soula@lifl.fr>, caml-list@inria.fr
Subject: RE: scanning recursive variable type
Date: Thu, 21 Sep 2000 12:58:08 -0700
X-Mailer: Internet Mail Service (5.5.2651.58)
Sender: weis@pauillac.inria.fr


What you need is polymorphic recursion in functions, which OCaml does not
provide. In the body of your function "int_of_t", it's type is monomorphic,
so the two recursive invocations don't both type check.

See also the CAML archive, e.g.

http://caml.inria.fr/archives/199809/msg00031.html

-Manuel


-----Original Message-----
From: Julien.Soula [mailto:Julien.Soula@lifl.fr]
Sent: Thursday, September 21, 2000 5:00 AM
To: caml-list@inria.fr
Subject: scanning recursive variable type


hello

I have defined a type that allow me to recurse on constructor (option
and list):

  # type 'a t = N of 'a | L of ('a list) t | O of ('a option) t;;
  type 'a t = | N of 'a | L of 'a list t | O of 'a option t

So I can do this:

  # let lo = [ Some 1; None ];;
  val lo : int option list = [Some 1; None]
  # let lot = O (L (N lo));;
  val lot : int t = O (L (N [Some 1; None]))


Assume that I know how to pass from a function ('a->int) to functions
('a list->int) and ('a option->int) :

  val fun_of_list : ('a -> int) -> 'a list -> int = <fun>
  val fun_of_option : ('a -> int) -> 'a option -> int = <fun>

Now I want to apply such a function on ('a t). So I think of a
recursive function with signature:

  val int_of_t : ('a->int) -> 'a t -> int = <fun>

I try to define this recursive function like that but... :

  # let rec int_of_t f = function
    N x -> f x
  | L lx -> int_of_t (fun_of_list f) lx
  | O ox -> int_of_t (fun_of_option f) ox ;;
      Characters 67-80:
This expression has type 'a list -> int but is here used with type 'a -> int

I don't know how to make it otherway with this type ?

-- Julien


