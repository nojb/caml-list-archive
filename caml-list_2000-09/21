Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA31315 for caml-red; Tue, 12 Sep 2000 08:43:38 +0200 (MET DST)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA10360 for <caml-list@pauillac.inria.fr>; Mon, 11 Sep 2000 19:25:26 +0200 (MET DST)
Received: from pandora.mclees.com.ar ([200.51.12.114])
	by concorde.inria.fr (8.10.0/8.10.0) with ESMTP id e8BHPIT06738
	for <caml-list@inria.fr>; Mon, 11 Sep 2000 19:25:19 +0200 (MET DST)
To: caml-list@inria.fr
Subject: Eager vs. Lazy (newbie)
X-Mailer: Lotus Notes Release 5.0 (Intl) 30 March 1999
Message-ID: <OF84195933.DA64FAAD-ON03256957.005E9322@mclees.com.ar>
From: Enrique.Vetere@mclees.com.ar
Date: Mon, 11 Sep 2000 14:25:45 -0300
X-MIMETrack: Serialize by Router on Pandora/McLees(Release 5.0.4a |July 24, 2000) at 11/09/2000
	14:25:41,
	Serialize complete at 11/09/2000 14:25:41
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: weis@pauillac.inria.fr

Hi.
I'm looking for references about the "eager vs. lazy" issue in functional 
languages. 
I undertand that eager languages map more directly to (strict) math 
functions, so formal proof of things is easier. I've also read that lazy 
evaluation is a key issue for code reuse ("Why functional programming 
matters - John Hughes). He mentions "the present controversy over lazy 
evaluation". The paper is more than 10 years old, so I guess that 
something has happened in between.
I'm also interested in the design issues that drove Ocaml to be eager. 
Thank you.

Enrique Vetere
enrique.vetere@mclees.com.ar
McLees S.A.
http://www.mclees.com.ar


