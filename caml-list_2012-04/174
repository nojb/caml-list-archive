Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q3R0Scpr013802
	for <caml-list@sympa-roc.inria.fr>; Fri, 27 Apr 2012 02:28:38 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Av0BADvnmU9KfVK2kGdsb2JhbABFn2yIWQGJJggiAQEBAQkJDQcUBCOCCQEBAQMBEgIsARsSCwEDAQsGBQsDCg0hIgERAQUBChIGExIQhW+BbQEDBgULnSIKjCOCc4UgChknAwpXiHYBBQuRMwSIY40agRGNTz2EKoE9
X-IronPort-AV: E=Sophos;i="4.75,487,1330902000"; 
   d="scan'208";a="155831071"
Received: from mail-we0-f182.google.com ([74.125.82.182])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 27 Apr 2012 02:28:32 +0200
Received: by weyt57 with SMTP id t57so169512wey.27
        for <caml-list@inria.fr>; Thu, 26 Apr 2012 17:28:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=r3Q997Mkfu5qlB7bi29hGV8V/hjH1/6AdZp3/8B9c4Q=;
        b=kn/eh+snOKOVVtNaVHiKNgBglPbZSMJ9cMuJt/dkO8atOgLEp2Zl98+Y2J3/Wmqtsc
         5O5lRomxk7ob9Tbbr/JnvRQy4awbhsAsAlFTvvAGZyOYtsmElnMZhTobDG/mzju1+eb/
         2oXIrHRZ2u/vPlp1EdHvdAkbHBrU+ohelIYiA2jfb6TZWj+87kncMjvhMkadDfDZlDms
         nQrU5jyq6MW/2lGKlaF9u8hBrvtn+U1yG3MtIf+LR2tIyotwqheJnPZTc9IPSnWIQ5be
         QuzL+vucY1mVlKhkaGV2f8Vj0/8+W2koEAYt9YUskr35tP9QAT2h91l6kRgIEchcV3ga
         WRQA==
MIME-Version: 1.0
Received: by 10.180.104.231 with SMTP id gh7mr756815wib.10.1335486512501; Thu,
 26 Apr 2012 17:28:32 -0700 (PDT)
Received: by 10.223.143.82 with HTTP; Thu, 26 Apr 2012 17:28:32 -0700 (PDT)
In-Reply-To: <3C0F509D-8590-4D45-A586-83630088C7B5@pobox.com>
References: <CAN2fQM6PmfgkBspx1Js0yq8r2hbtd15mhvDXQ6tUcmAL46q=rw@mail.gmail.com>
	<3C0F509D-8590-4D45-A586-83630088C7B5@pobox.com>
Date: Thu, 26 Apr 2012 18:28:32 -0600
Message-ID: <CAN=ouMRvAUhtEv5ofZOKgR6yuUqWAZd6z8+TM0aUHjX0m2hR_Q@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Haoyang Wang <hywang@pobox.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=f46d044288bc2e127204be9e2f36
Subject: Re: [Caml-list] using infix operators/functions in modules when not
 using "open"


--f46d044288bc2e127204be9e2f36
Content-Type: text/plain; charset=ISO-8859-1

Haoyang Wang provided the answer you're looking for, I think!

In case you are writing your own modules with infix operators, I've found
the following style to be useful:

--- Inside Vector.ml ---
(* definition of some basic functions here... *)
(* now some infix defs using the basic functions, in "Ops" submodule *)
module Ops = struct
  let ( +| ) u v = add u v
  let ( -| ) u v = sub u v
  let ( *| ) a v = scale a v
end
open Ops (* so that they are usable within Vector itself *)
---

--- Some other module without opening all of Vector ---
open Vector.Ops

let answer = a +| b
let same_answer = Vector.add a b
---

In some cases I'll also expose types in a Type submodule. This is to
minimize name-collision with record fields, but have direct access to the
fields in situations which it's appropriate (by doing "open Vector.Type",
for example).

Hope that's of some use!

 -Tony

On Thu, Apr 26, 2012 at 5:01 PM, Haoyang Wang <hywang@pobox.com> wrote:

>
> On Apr 26, 2012, at 3:36 PM, ocamllist.robertwork@spamgourmet.com wrote:
>
> > I'm a OCaml newbie.  I don't understand how to use infix functions that
> are in modules when I don't want to use "open".
> >
> > I did discover http://xahlee.org/ocaml/functions.html which explains
> that an infix operator can be used as a prefix.  So, this format:
> >
> >   ((Module.(op)) "foo" "bar")
> >
> > does seem to work.  But, intuitively, it seems like:
> >
> >  "foo" Module.(op) "bar"
> >
> > would work -- it doesn't.
> >
> > Is there a way to keep the infix notation?
> >
> > Thanks.
>
>
> Module.("foo" (op) "bar")
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--f46d044288bc2e127204be9e2f36
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_extra">Haoyang Wang provided the answer you&#39;re look=
ing for, I think!</div><div class=3D"gmail_extra"><br></div><div class=3D"g=
mail_extra">In case you are writing your own modules with infix operators, =
I&#39;ve found the following style to be useful:</div>
<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">--- Inside =
Vector.ml=A0---</div><div class=3D"gmail_extra"><div class=3D"gmail_extra">=
(* definition of some basic functions here... *)</div><div class=3D"gmail_e=
xtra">(* now some infix defs using the basic functions, in &quot;Ops&quot; =
submodule *)</div>
<div class=3D"gmail_extra">module Ops =3D struct</div><div class=3D"gmail_e=
xtra">=A0 let ( +| ) u v =3D add u v</div><div class=3D"gmail_extra">=A0 le=
t ( -| ) u v =3D sub u v</div><div class=3D"gmail_extra">=A0 let ( *| ) a v=
 =3D scale a v</div>
<div class=3D"gmail_extra">end</div><div class=3D"gmail_extra">open Ops (* =
so that they are usable within Vector itself *)</div><div>---</div><div><br=
></div><div>--- Some other module without opening all of Vector ---</div><d=
iv>
open Vector.Ops</div><div><br></div><div>let answer =3D a +| b</div><div>le=
t same_answer =3D Vector.add a b</div><div>---</div><div><br></div><div>In =
some cases I&#39;ll also expose types in a Type submodule. This is to minim=
ize name-collision with record fields, but have direct access to the fields=
 in situations which it&#39;s appropriate (by doing &quot;open Vector.Type&=
quot;, for example).</div>
<div><br></div><div>Hope that&#39;s of some use!</div><div><br></div><div>=
=A0-Tony</div><div><br></div></div><div class=3D"gmail_extra"><div class=3D=
"gmail_quote">On Thu, Apr 26, 2012 at 5:01 PM, Haoyang Wang <span dir=3D"lt=
r">&lt;<a href=3D"mailto:hywang@pobox.com" target=3D"_blank">hywang@pobox.c=
om</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><div class=3D"h5"><br>
On Apr 26, 2012, at 3:36 PM, <a href=3D"mailto:ocamllist.robertwork@spamgou=
rmet.com">ocamllist.robertwork@spamgourmet.com</a> wrote:<br>
<br>
&gt; I&#39;m a OCaml newbie. =A0I don&#39;t understand how to use infix fun=
ctions that are in modules when I don&#39;t want to use &quot;open&quot;.<b=
r>
&gt;<br>
&gt; I did discover <a href=3D"http://xahlee.org/ocaml/functions.html" targ=
et=3D"_blank">http://xahlee.org/ocaml/functions.html</a> which explains tha=
t an infix operator can be used as a prefix. =A0So, this format:<br>
&gt;<br>
&gt; =A0 ((Module.(op)) &quot;foo&quot; &quot;bar&quot;)<br>
&gt;<br>
&gt; does seem to work. =A0But, intuitively, it seems like:<br>
&gt;<br>
&gt; =A0&quot;foo&quot; Module.(op) &quot;bar&quot;<br>
&gt;<br>
&gt; would work -- it doesn&#39;t.<br>
&gt;<br>
&gt; Is there a way to keep the infix notation?<br>
&gt;<br>
&gt; Thanks.<br>
<br>
<br>
</div></div>Module.(&quot;foo&quot; (op) &quot;bar&quot;)<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</font></span></blockquote></div><br></div>

--f46d044288bc2e127204be9e2f36--
