Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q3D9hKob001925
	for <caml-list@sympa-roc.inria.fr>; Fri, 13 Apr 2012 11:43:20 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlcFAAb0h0+CiAFm/2dsb2JhbABFpiCRVIEHggkBAQUnRwoRCxgJBBIPCQMCAQIBMxITBgIBAQ6HbgMLC7AHA4ldkVcEln2IRYZggmk
X-IronPort-AV: E=Sophos;i="4.75,415,1330902000"; 
   d="scan'208,217";a="153900769"
Received: from leb.cs.unibo.it ([130.136.1.102])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/ADH-AES256-SHA; 13 Apr 2012 11:43:14 +0200
Received: from ssl.cs.unibo.it (ssl.cs.unibo.it [127.0.0.1]) (Authenticated sender: hidden)
	by leb.cs.unibo.it (Postfix) with ESMTPSA id EF7FB2365 
	for <caml-list@inria.fr>; Fri, 13 Apr 2012 11:43:13 +0200 (CEST)
Message-ID: <4F87F535.8030705@cs.unibo.it>
Date: Fri, 13 Apr 2012 11:43:17 +0200
From: Matthias Puech <puech@cs.unibo.it>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:11.0) Gecko/20120329 Thunderbird/11.0.1
MIME-Version: 1.0
To: caml-list@inria.fr
References: <4F87EDFB.6090409@cs.unibo.it> <CAPFanBHoRdRH9=pjv3nszA6oiqS4O+0z5bU6BSHhExvHYG5onA@mail.gmail.com>
In-Reply-To: <CAPFanBHoRdRH9=pjv3nszA6oiqS4O+0z5bU6BSHhExvHYG5onA@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------080408050403000606060606"
Subject: Re: [Caml-list] Printexc.register_printer without catch

This is a multi-part message in MIME format.
--------------080408050403000606060606
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit

Ok so it seems Printexc is not the way to go... Can you make sense out 
of this sentence in catch's documentation then?

"This function is deprecated: the runtime system is now able to print 
uncaught exceptions as precisely as|Printexc.catch|does"

In the toplevel, exceptions are printed in a sensible way, i.e. their 
arguments is printed as far as it can go respecting abstract types:

# type t = A | B;;
# exception Bla of t;;
# raise (Bla A);;
Exception: Bla A.

Also it honors my #install_printer when printing arguments.
If I compile the same code, I get:

Fatal error: exception Exc.Bla(0)

It seems there is a very ad-hoc, type-unaware exception handler in 
compiled code (byterun/printexc.c:caml_format_exception?) that can't be 
changed and I was hoping Printexc would do that for me. It seems not; 
so, no other way to change the global catcher?

Thanks,
     -m

Le 04/13/2012 11:18 AM, Gabriel Scherer a écrit :
> It seems Printexc.register_printer affects the other Printexc.*
> functions, not the way the toplevel itself (or the runtime system more
> generally) handles uncaught exceptions.
>
> # Printexc.register_printer begin function Not_found ->  Some "hello" |
> _ ->  None end;;
> - : unit = ()
> # (fun () ->  raise Not_found) ();;
> Exception: Not_found.
> # Printexc.print (fun () ->  raise Not_found) ();;
> Uncaught exception: hello
> Exception: Not_found.
>
>
> On Fri, Apr 13, 2012 at 11:12 AM, Matthias Puech<puech@cs.unibo.it>  wrote:
>> Hello,
>>
>> Is there a way to change printing of uncaught exceptions in the toplevel and
>> in (native/bytecode, 3.12) compiled code without wrapping the whole code in
>> a try ... with or in Printexc.catch?
>>
>> Printexc.catch's documentation says it is deprecated and that the runtime
>> system should be able to print exceptions the way they were registered with
>> Printexc.register_printer, yet
>>
>> # Printexc.register_printer begin function Not_found ->  Some "hello" | _ ->
>> None end;;
>> # raise Not_found;;
>> Exception: Not_found.
>>
>> (* I would expect it to respond [Exception: hello] *)
>>
>> Do I miss something here?
>> Thanks in advance,
>>     -m
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa-roc.inria.fr/wws/info/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
>>
>


--------------080408050403000606060606
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Ok so it seems Printexc is not the way to go... Can you make sense
    out of this sentence in catch's documentation then?<br>
    <br>
    "<span style="color: rgb(0, 0, 0); font-family: 'Times New Roman';
      font-style: normal; font-variant: normal; font-weight: normal;
      letter-spacing: normal; line-height: normal; orphans: 2;
      text-align: -webkit-auto; text-indent: 0px; text-transform: none;
      white-space: normal; widows: 2; word-spacing: 0px;
      -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;
      background-color: rgb(255, 255, 255); font-size: medium; display:
      inline !important; float: none; ">This function is deprecated: the
      runtime system is now able to print uncaught exceptions as
      precisely as<span class="Apple-converted-space">&nbsp;</span></span><code
      class="code" style="color: rgb(70, 95, 145); font-style: normal;
      font-variant: normal; font-weight: normal; letter-spacing: normal;
      line-height: normal; orphans: 2; text-align: -webkit-auto;
      text-indent: 0px; text-transform: none; white-space: normal;
      widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto;
      -webkit-text-stroke-width: 0px; background-color: rgb(255, 255,
      255); "><span class="constructor" style="color: blue; ">Printexc</span>.catch</code><span
      style="color: rgb(0, 0, 0); font-family: 'Times New Roman';
      font-style: normal; font-variant: normal; font-weight: normal;
      letter-spacing: normal; line-height: normal; orphans: 2;
      text-align: -webkit-auto; text-indent: 0px; text-transform: none;
      white-space: normal; widows: 2; word-spacing: 0px;
      -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;
      background-color: rgb(255, 255, 255); font-size: medium; display:
      inline !important; float: none; "><span
        class="Apple-converted-space">&nbsp;</span>does</span>"
    <meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1">
    <br>
    <br>
    In the toplevel, exceptions are printed in a sensible way, i.e.
    their arguments is printed as far as it can go respecting abstract
    types:<br>
    <br>
    # type t = A | B;;<br>
    # exception Bla of t;;<br>
    # raise (Bla A);;<br>
    Exception: Bla A.<br>
    <br>
    Also it honors my #install_printer when printing arguments.<br>
    If I compile the same code, I get:<br>
    <br>
    Fatal error: exception Exc.Bla(0)<br>
    <br>
    It seems there is a very ad-hoc, type-unaware exception handler in
    compiled code (byterun/printexc.c:caml_format_exception?) that can't
    be changed and I was hoping Printexc would do that for me. It seems
    not; so, no other way to change the global catcher?<br>
    <br>
    Thanks,<br>
    &nbsp;&nbsp;&nbsp; -m<br>
    <br>
    Le 04/13/2012 11:18 AM, Gabriel Scherer a &eacute;crit&nbsp;:
    <blockquote
cite="mid:CAPFanBHoRdRH9=pjv3nszA6oiqS4O+0z5bU6BSHhExvHYG5onA@mail.gmail.com"
      type="cite">
      <pre wrap="">It seems Printexc.register_printer affects the other Printexc.*
functions, not the way the toplevel itself (or the runtime system more
generally) handles uncaught exceptions.

# Printexc.register_printer begin function Not_found -&gt; Some "hello" |
_ -&gt; None end;;
- : unit = ()
# (fun () -&gt; raise Not_found) ();;
Exception: Not_found.
# Printexc.print (fun () -&gt; raise Not_found) ();;
Uncaught exception: hello
Exception: Not_found.


On Fri, Apr 13, 2012 at 11:12 AM, Matthias Puech <a class="moz-txt-link-rfc2396E" href="mailto:puech@cs.unibo.it">&lt;puech@cs.unibo.it&gt;</a> wrote:
</pre>
      <blockquote type="cite">
        <pre wrap="">Hello,

Is there a way to change printing of uncaught exceptions in the toplevel and
in (native/bytecode, 3.12) compiled code without wrapping the whole code in
a try ... with or in Printexc.catch?

Printexc.catch's documentation says it is deprecated and that the runtime
system should be able to print exceptions the way they were registered with
Printexc.register_printer, yet

# Printexc.register_printer begin function Not_found -&gt; Some "hello" | _ -&gt;
None end;;
# raise Not_found;;
Exception: Not_found.

(* I would expect it to respond [Exception: hello] *)

Do I miss something here?
Thanks in advance,
&nbsp; &nbsp;-m

--
Caml-list mailing list. &nbsp;Subscription management and archives:
<a class="moz-txt-link-freetext" href="https://sympa-roc.inria.fr/wws/info/caml-list">https://sympa-roc.inria.fr/wws/info/caml-list</a>
Beginner's list: <a class="moz-txt-link-freetext" href="http://groups.yahoo.com/group/ocaml_beginners">http://groups.yahoo.com/group/ocaml_beginners</a>
Bug reports: <a class="moz-txt-link-freetext" href="http://caml.inria.fr/bin/caml-bugs">http://caml.inria.fr/bin/caml-bugs</a>

</pre>
      </blockquote>
      <pre wrap="">

</pre>
    </blockquote>
    <br>
  </body>
</html>

--------------080408050403000606060606--
