Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q35KJFLr031789
	for <caml-list@sympa-roc.inria.fr>; Thu, 5 Apr 2012 22:19:15 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqoBAPX8fU/RVdc2imdsb2JhbABFr3EBiHkIIgEBAQoJDQcSBiOCCQEBAQMBEgITUgULCws7IhIBBQEcBhMih14DBgWcHQqUQyKJPpBaBJVrgRGNQz2EJg
X-IronPort-AV: E=Sophos;i="4.75,378,1330902000"; 
   d="scan'208";a="152911875"
Received: from mail-lpp01m010-f54.google.com ([209.85.215.54])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Apr 2012 22:19:09 +0200
Received: by lagv3 with SMTP id v3so3486274lag.27
        for <caml-list@inria.fr>; Thu, 05 Apr 2012 13:19:08 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type:x-gm-message-state;
        bh=9bmWOKiCb0IppICfEaqMUIXM3fwyILWFwt6ygntTAW0=;
        b=c399mwph6rRfEZUY5Qi7zbgbxEG8+RF7LEDI8RMTseMRANOddEB84dMwQ2xWybaGoT
         d119hkHXusS6r/+HoNMfs3APr5yvyODVoS9vcrZ87483KX0xHH171oOZoGuXKVvqTjlB
         Q5fndyoaiLrX1N1qtXfm4R2W6kP3OR8D+6jNSueebf23FFV2/wXjAyNHbayFbPfSSGtI
         S3Hrwd3DqqSqN//jXVH56btVVpuDgA0IaW9YW7yMUL7MDpCuGnprm/wAs1D+0je+yR+r
         jywk3D4Nent+UWroJGixLjO6j+/QPF6Bb1XhMy7hlVAE6qD7Leww0iNEpDXVo2gqkEHk
         E6hA==
MIME-Version: 1.0
Received: by 10.152.131.9 with SMTP id oi9mr5063145lab.6.1333657148719; Thu,
 05 Apr 2012 13:19:08 -0700 (PDT)
Received: by 10.112.55.2 with HTTP; Thu, 5 Apr 2012 13:19:08 -0700 (PDT)
In-Reply-To: <874nsy1rcd.fsf@frosties.localnet>
References: <CAGyUfm0SkjTVZ4hcQRNGThWWzGoXbbVnBXHBDcr1jP=6cFCMkQ@mail.gmail.com>
	<874nsy1rcd.fsf@frosties.localnet>
Date: Thu, 5 Apr 2012 16:19:08 -0400
Message-ID: <CAGyUfm0=K7ASggPYXnUhKDHuoH=vdD4avmsruKm9sYufqeX8YQ@mail.gmail.com>
From: Pierre Chopin <pierre@punchup.com>
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=f46d042c64779a018504bcf440a5
X-Gm-Message-State: ALoCoQmXjftxYFxWVigzVCADJ6Cm0pn6M+tLNHb94N//cjwPtSoRlwwB12l5Y7YOC4QVrfbEspDh
Subject: Re: [Caml-list] exn vs option


--f46d042c64779a018504bcf440a5
Content-Type: text/plain; charset=ISO-8859-1

Thank you for your answers.
I am actually in the case of a webserver where I need to avoid interrupting
it, even in 'exceptional' cases, but rather report the problem in a log,
and return a default value whenever it is possible. Options seem to be the
best choice, not only from a safety point of view but also performance-wise.

Cheers

On Thu, Apr 5, 2012 at 5:05 AM, Goswin von Brederlow <goswin-v-b@web.de>wrote:

> Pierre Chopin <pierre@punchup.com> writes:
>
> > Hi,
> >
> > I benchmarked two programs, in one case the main function throw an
> exception
> > that is caught, in the other the function returns an option that is
> pattern
> > matched on.
> >
> > I noticed that, whether the exception is thrown or not, the option
> version is
> > always faster.
> >
> > Is there any case where it makes sense, performance wise, to use
> exception
> > instead of 'a option ?
>
> I find that in most cases speed is not a major concern and then it comes
> down to taste and readability of the code.
>
> > test1.ml
> > ----------------------------------------------------------------------
> >
> > exception Foo
> > let f x =
> >  if x =1 then raise Foo else ()
> >
> > ;;
> >
> >  for i = 0 to 10_000_000 do
> > try
> >     f 1
> > with Foo -> ()
> > done
>
> 0.34s user 0.01s system 99% cpu 0.351 total
>
> That is rather short for a test. lets add 2 zeroes to the loop. And lets
> call f 0 and f 1 to test both cases:
>
> f 0: 17.72s user 0.02s system 99% cpu 17.792 total
> f 1: 35.30s user 0.02s system 99% cpu 35.371 total
>
> > ------------------------------------------------------------------------
> > test2.ml:
> > ------------------------------------------------------------------------
> > let f x =
> >     if x=1 then None else Some ()
> >
> > ;;
> > for i = 0 to 10_000_000 do
> >     match f 1 with
> >         None -> ()
> >     |   Some s -> s
> >     done
> > ------------------------------------------------------------------------
>
> f 0: 11.60s user 0.02s system 99% cpu 11.655 total
> f 1: 10.91s user 0.01s system 99% cpu 10.933 total
>
> And lets test the speed when the exception is actualy exceptional:
>
> exception Foo
> let f x = if x =1 then raise Foo else ()
>
> let () =
>  try
>    for i = 0 to 1000000000 do
>      f 0
>    done
>  with Foo -> ()
>
> 9.94s user 0.00s system 99% cpu 9.946 total
>
> Someone said in deep recursions exceptions are faster because they don't
> have to unwind the stack:
>
> exception Result of int
>
> let rec fac acc = function
>  | 1 -> raise (Result acc)
>  | n -> fac (n * acc) (n - 1)
>
> let () =
>  for i = 0 to 100_000_000 do
>    try
>      fac 1 50
>    with Result _ -> ()
>  done
>
> 71.88s user 0.00s system 99% cpu 1:11.90 total
>
>
> let rec fac acc = function
>  | 1 -> acc
>  | n -> fac (n * acc) (n - 1)
>
> let () =
>  for i = 0 to 100_000_000 do
>    ignore (fac 1 50)
>  done
>
> 67.04s user 0.02s system 99% cpu 1:07.08 total
>
>
> Not feeling it. Lets try something not tail recursive:
>
> exception Error
>
> let rec foo = function
>  | 1 -> raise Error
>  | n -> n * (foo (n - 1))
>
> let () =
>  for i = 0 to 100_000_000 do
>    try
>      ignore (foo 50)
>    with Error -> ()
>  done
>
> 25.03s user 0.01s system 99% cpu 25.068 total
>
> let rec foo = function
>  | 1 -> None
>  | n -> match foo (n - 1) with None -> None | Some x -> Some (n * x)
>
> let () =
>  for i = 0 to 100_000_000 do
>    ignore (foo 50)
>  done
>
> 49.48s user 0.01s system 99% cpu 49.508 total
>
>
> In conclusion I would have to say that exceptions are better if they are
> exceptional.
>
> When you do not catch them right away or not at all then they are
> better. The "try" command is more expensive than an option type and if
> you are going to catch the exception right away anyway then options are
> faster.
>
> But if you don't catch them right away the cost of the try can be
> amortized over many calls and becomes cheaper. Or if you don't catch the
> exception at all then you can get a nice backtrace of where the
> exception occured.
>
> If your code is not tail recursive then option types mean you have to
> match them on every level again and again and allocate a ton of 'Some x'
> if no error occurs. You can make your code tail recursive or use
> exception to improve performance there.
>
>
>
> If you are writing a module then consider providing both flavours for
> functions, one with exceptions and one with options. Even if you only do
> something like this:
>
> let find x y = ....
>
> let raise_on_none exn f arg =
>  match f arg with
>  | None -> raise exn
>  | Some x -> x
>
> let find_exn x y = raise_on_none Not_found (find x) y
>
> Obviously option only works for exceptions like Not_found. If you want
> to return an error you might have to use something like
>
>   type ('a, 'b) result = Result of 'a | Error of 'b
>
> Putting the 2 flavours into different submodules can keep things tidy too.
>
> MfG
>         Goswin
>



-- 
Pierre Chopin,
Chief Technology Officer and co-founder
punchup LLC
pierre@punchup.com

--f46d042c64779a018504bcf440a5
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank you for your answers.<div>I am actually in the case of a webserver wh=
ere I need to avoid interrupting it, even in &#39;exceptional&#39; cases, b=
ut rather report the problem in a log, and return a default value whenever =
it is possible. Options seem to be the best choice, not only from a safety =
point of view but also performance-wise.</div>
<div><br></div><div>Cheers<br><div><br><div class=3D"gmail_quote">On Thu, A=
pr 5, 2012 at 5:05 AM, Goswin von Brederlow <span dir=3D"ltr">&lt;<a href=
=3D"mailto:goswin-v-b@web.de" target=3D"_blank">goswin-v-b@web.de</a>&gt;</=
span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
<div>Pierre Chopin &lt;<a href=3D"mailto:pierre@punchup.com" target=3D"_bla=
nk">pierre@punchup.com</a>&gt; writes:<br>
<br>
&gt; Hi,<br>
&gt;<br>
&gt; I benchmarked two programs, in one case the main function throw an exc=
eption<br>
&gt; that is caught, in the other the function returns an option that is pa=
ttern<br>
&gt; matched on.<br>
&gt;<br>
&gt; I noticed that, whether the exception is thrown or not, the option ver=
sion is<br>
&gt; always faster.<br>
&gt;<br>
&gt; Is there any case where it makes sense, performance wise, to use excep=
tion<br>
&gt; instead of &#39;a option ?<br>
<br>
</div>I find that in most cases speed is not a major concern and then it co=
mes<br>
down to taste and readability of the code.<br>
<div><br>
&gt; <a href=3D"http://test1.ml" target=3D"_blank">test1.ml</a><br>
&gt; ----------------------------------------------------------------------=
<br>
&gt;<br>
&gt; exception Foo<br>
&gt; let f x =3D<br>
&gt; =A0if x =3D1 then raise Foo else ()<br>
&gt;<br>
&gt; ;;<br>
&gt;<br>
&gt; =A0for i =3D 0 to 10_000_000 do<br>
&gt; try<br>
&gt; =A0 =A0 f 1<br>
&gt; with Foo -&gt; ()<br>
&gt; done<br>
<br>
</div>0.34s user 0.01s system 99% cpu 0.351 total<br>
<br>
That is rather short for a test. lets add 2 zeroes to the loop. And lets<br>
call f 0 and f 1 to test both cases:<br>
<br>
f 0: 17.72s user 0.02s system 99% cpu 17.792 total<br>
f 1: 35.30s user 0.02s system 99% cpu 35.371 total<br>
<div><br>
&gt; ----------------------------------------------------------------------=
--<br>
&gt; <a href=3D"http://test2.ml" target=3D"_blank">test2.ml</a>:<br>
&gt; ----------------------------------------------------------------------=
--<br>
&gt; let f x =3D<br>
&gt; =A0 =A0 if x=3D1 then None else Some ()<br>
&gt;<br>
&gt; ;;<br>
&gt; for i =3D 0 to 10_000_000 do<br>
&gt; =A0 =A0 match f 1 with<br>
&gt; =A0 =A0 =A0 =A0 None -&gt; ()<br>
&gt; =A0 =A0 | =A0 Some s -&gt; s<br>
&gt; =A0 =A0 done<br>
&gt; ----------------------------------------------------------------------=
--<br>
<br>
</div>f 0: 11.60s user 0.02s system 99% cpu 11.655 total<br>
f 1: 10.91s user 0.01s system 99% cpu 10.933 total<br>
<br>
And lets test the speed when the exception is actualy exceptional:<br>
<div><br>
exception Foo<br>
let f x =3D if x =3D1 then raise Foo else ()<br>
<br>
</div>let () =3D<br>
 =A0try<br>
 =A0 =A0for i =3D 0 to 1000000000 do<br>
 =A0 =A0 =A0f 0<br>
 =A0 =A0done<br>
 =A0with Foo -&gt; ()<br>
<br>
9.94s user 0.00s system 99% cpu 9.946 total<br>
<br>
Someone said in deep recursions exceptions are faster because they don&#39;=
t<br>
have to unwind the stack:<br>
<br>
exception Result of int<br>
<br>
let rec fac acc =3D function<br>
 =A0| 1 -&gt; raise (Result acc)<br>
 =A0| n -&gt; fac (n * acc) (n - 1)<br>
<br>
let () =3D<br>
 =A0for i =3D 0 to 100_000_000 do<br>
 =A0 =A0try<br>
 =A0 =A0 =A0fac 1 50<br>
 =A0 =A0with Result _ -&gt; ()<br>
 =A0done<br>
<br>
71.88s user 0.00s system 99% cpu 1:11.90 total<br>
<br>
<br>
let rec fac acc =3D function<br>
 =A0| 1 -&gt; acc<br>
 =A0| n -&gt; fac (n * acc) (n - 1)<br>
<br>
let () =3D<br>
 =A0for i =3D 0 to 100_000_000 do<br>
 =A0 =A0ignore (fac 1 50)<br>
 =A0done<br>
<br>
67.04s user 0.02s system 99% cpu 1:07.08 total<br>
<br>
<br>
Not feeling it. Lets try something not tail recursive:<br>
<br>
exception Error<br>
<br>
let rec foo =3D function<br>
 =A0| 1 -&gt; raise Error<br>
 =A0| n -&gt; n * (foo (n - 1))<br>
<br>
let () =3D<br>
 =A0for i =3D 0 to 100_000_000 do<br>
 =A0 =A0try<br>
 =A0 =A0 =A0ignore (foo 50)<br>
 =A0 =A0with Error -&gt; ()<br>
 =A0done<br>
<br>
25.03s user 0.01s system 99% cpu 25.068 total<br>
<br>
let rec foo =3D function<br>
 =A0| 1 -&gt; None<br>
 =A0| n -&gt; match foo (n - 1) with None -&gt; None | Some x -&gt; Some (n=
 * x)<br>
<br>
let () =3D<br>
 =A0for i =3D 0 to 100_000_000 do<br>
 =A0 =A0ignore (foo 50)<br>
 =A0done<br>
<br>
49.48s user 0.01s system 99% cpu 49.508 total<br>
<br>
<br>
In conclusion I would have to say that exceptions are better if they are<br>
exceptional.<br>
<br>
When you do not catch them right away or not at all then they are<br>
better. The &quot;try&quot; command is more expensive than an option type a=
nd if<br>
you are going to catch the exception right away anyway then options are<br>
faster.<br>
<br>
But if you don&#39;t catch them right away the cost of the try can be<br>
amortized over many calls and becomes cheaper. Or if you don&#39;t catch th=
e<br>
exception at all then you can get a nice backtrace of where the<br>
exception occured.<br>
<br>
If your code is not tail recursive then option types mean you have to<br>
match them on every level again and again and allocate a ton of &#39;Some x=
&#39;<br>
if no error occurs. You can make your code tail recursive or use<br>
exception to improve performance there.<br>
<br>
<br>
<br>
If you are writing a module then consider providing both flavours for<br>
functions, one with exceptions and one with options. Even if you only do<br>
something like this:<br>
<br>
let find x y =3D ....<br>
<br>
let raise_on_none exn f arg =3D<br>
 =A0match f arg with<br>
 =A0| None -&gt; raise exn<br>
 =A0| Some x -&gt; x<br>
<br>
let find_exn x y =3D raise_on_none Not_found (find x) y<br>
<br>
Obviously option only works for exceptions like Not_found. If you want<br>
to return an error you might have to use something like<br>
<br>
 =A0 type (&#39;a, &#39;b) result =3D Result of &#39;a | Error of &#39;b<br>
<br>
Putting the 2 flavours into different submodules can keep things tidy too.<=
br>
<br>
MfG<br>
<span><font color=3D"#888888"> =A0 =A0 =A0 =A0Goswin<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r>Pierre Chopin,<div>Chief Technology Officer and co-founder</div><div>punc=
hup LLC</div><div><a href=3D"mailto:pierre@punchup.com" target=3D"_blank">p=
ierre@punchup.com</a></div>

<br>
</div>
</div>

--f46d042c64779a018504bcf440a5--
