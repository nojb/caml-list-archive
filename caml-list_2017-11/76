Return-Path: <mandrykin@ispras.ru>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 5348282355
	for <caml-list@sympa.inria.fr>; Tue, 28 Nov 2017 19:20:01 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=mandrykin@ispras.ru; spf=Pass smtp.mailfrom=mandrykin@ispras.ru; spf=None smtp.helo=postmaster@smtp.ispras.ru
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  mandrykin@ispras.ru) identity=pra; client-ip=83.149.199.196;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mandrykin@ispras.ru";
  x-sender="mandrykin@ispras.ru"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  mandrykin@ispras.ru designates 83.149.199.196 as permitted
  sender) identity=mailfrom; client-ip=83.149.199.196;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mandrykin@ispras.ru";
  x-sender="mandrykin@ispras.ru";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@smtp.ispras.ru) identity=helo;
  client-ip=83.149.199.196;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mandrykin@ispras.ru";
  x-sender="postmaster@smtp.ispras.ru";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Aj3pX2Rerf+PjF883sDjZzeCClGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc65ZR7h7PlgxGXEQZ/co6odzbGJ4+a9ASQp2tWojjMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpRZbIBj0NBJ0?=
 =?us-ascii?q?K+LpAcaSyp3vj6Hhs6HUNiRWjTz1TrRuKwu9rQTNrYFCgJVtAqc8xxaPpWFHLa?=
 =?us-ascii?q?Ae/m5yKl/bpBfi5cCutMp46DwWvugw/tNoXqDzfqB+RrtdWmcIKWcwsejqthnK?=
 =?us-ascii?q?TA/Hw3IaXn8HkRtOS1zA5Rf2RIbysy3St/FlwiCBe9frG+NnEQ++5rtmHUe7wB?=
 =?us-ascii?q?wMMCQ0pSSO0pR9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CCAQALqB1a/8THlVNdGgEBAQEBAgEBA?=
 =?us-ascii?q?QEIAQEBAYJKgVhuJ4N/ixSQIYhokBsphRwChUkUAQEBAQEBAQEBAWoogjgFAR4?=
 =?us-ascii?q?BBYI+AQUjBFIQCQIOCicDAgIhJREGAQwGAgEBF4lvAxmKJ51rgW06JocNDYMmA?=
 =?us-ascii?q?QEBAQEFAQEBAQEBIoM8hXCDAoJrhUmCYwWKQYhIjwM9h3OIIYR5gnmBGodiEU6?=
 =?us-ascii?q?Ge40yTYl6NiKBUUwyQIIpCYRPPjaJDIFYAQEB?=
X-IPAS-Result: =?us-ascii?q?A0CCAQALqB1a/8THlVNdGgEBAQEBAgEBAQEIAQEBAYJKgVh?=
 =?us-ascii?q?uJ4N/ixSQIYhokBsphRwChUkUAQEBAQEBAQEBAWoogjgFAR4BBYI+AQUjBFIQC?=
 =?us-ascii?q?QIOCicDAgIhJREGAQwGAgEBF4lvAxmKJ51rgW06JocNDYMmAQEBAQEFAQEBAQE?=
 =?us-ascii?q?BIoM8hXCDAoJrhUmCYwWKQYhIjwM9h3OIIYR5gnmBGodiEU6Ge40yTYl6NiKBU?=
 =?us-ascii?q?UwyQIIpCYRPPjaJDIFYAQEB?=
X-IronPort-AV: E=Sophos;i="5.44,468,1505772000"; 
   d="scan'208,217";a="246423260"
Received: from bran.ispras.ru (HELO smtp.ispras.ru) ([83.149.199.196])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 28 Nov 2017 19:20:00 +0100
Received: from [10.10.2.183] (molnar.intra.ispras.ru [10.10.2.183])
	by smtp.ispras.ru (Postfix) with ESMTP id CEDE8203E8;
	Tue, 28 Nov 2017 21:19:57 +0300 (MSK)
To: Ivan Gotovchits <ivg@ieee.org>, Serge Sivkov <ssp.mryau@gmail.com>
Cc: OCaml Mailing List <caml-list@inria.fr>
References: <CAOUGqWxJ1NmSf_SExVh5gPJOA4BGN44eaZwMqgnFL3egODE3pg@mail.gmail.com>
 <CALdWJ+x4pJNaYtRAwuZACGmFN0XOr5GPTWwpVB-Gc7-ssVWk6w@mail.gmail.com>
From: Mikhail Mandrykin <mandrykin@ispras.ru>
Message-ID: <fbb1de08-59a8-52d2-209a-c6056f890ce3@ispras.ru>
Date: Tue, 28 Nov 2017 21:19:57 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.4.0
MIME-Version: 1.0
In-Reply-To: <CALdWJ+x4pJNaYtRAwuZACGmFN0XOr5GPTWwpVB-Gc7-ssVWk6w@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------42D595A30A14F1BCA669CBB3"
Content-Language: en-US
Subject: Re: [Caml-list] using module with types as record parameter

This is a multi-part message in MIME format.
--------------42D595A30A14F1BCA669CBB3
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

It's also possible to parametrize over abstract types (though only those 
without type parameters) that occur in first-class module signature:

module type CmdIface = sig
         type message
         val cmd : message -> int
end

module type NetIface = sig
         type init
         val net : init -> init
end

module Cmd = struct
         type message = int
         let cmd v = v+1
end

module Net = struct
         type 'a init = { cvt: (module CmdIface with type message = 'a) }

         let net (init : int init) =
                 let cvt = init.cvt in
                 let (module R) = cvt in
                 R.cmd 1 (* line 22 with error *)
end

let i = { Net.cvt = (module Cmd) };;
Net.net i;;

Also there's another type error in the example since types of cmd in the 
Cmdline module type and Cmd module are incompatible (_ -> unit vs. _ -> 
int).

On 28.11.2017 21:09, Ivan Gotovchits wrote:
> Let me first explain what is wrong with your code.
>
> The message type in `Cmdlface` is defined as an abstract type with 
> only one operation `cmd : message -> unit`. The module `Cmd` provides 
> a possible implementation for this abstract type.
> The `R.cmd 1` expression tries to break the abstraction by assuming 
> that the `R` implementation is using the `int` type as an underlying 
> implementation. Imagine, what will happen if the `Net.cvt` field 
> contained another implementation,
> for example
>
>     module Cmd = struct
>       type message = string
>       let cmd = print_endline
>     end
>
>     let i = { Net.cvt = (module Cmd: CmdIface) }
>     Net.net i
>
> This will finally lead to a call `print_endline 1` if the type system 
> won't stop you before.
>
>
> The solution is either to uncover the abstractions and stick to `int` 
> as a concrete representation of the message abstraction or to extend 
> the message abstraction interface with functions that will allow you 
> to create the messages, e.g.,
>
>
>     module type CmdIface = sig
>        type message
>        val of_int : int -> message
>        val cmd : message -> unit
>     end
>
>
>
>
>
> On Tue, Nov 28, 2017 at 12:55 PM, Serge Sivkov <ssp.mryau@gmail.com 
> <mailto:ssp.mryau@gmail.com>> wrote:
>
>     Hello,
>
>     is there way to fix the following code:
>
>     module type CmdIface = sig
>             type message
>             val cmd : message -> unit
>     end
>
>     module type NetIface = sig
>             type init
>             val net : init -> init
>     end
>
>     module Cmd = struct
>             type message = int
>             let cmd v = v+1
>     end
>
>     module Net = struct
>             type init = { cvt: (module CmdIface) }
>
>             let net init =
>                     let cvt = init.cvt in
>                     let module R = (val cvt: CmdIface) in
>                     R.cmd 1 (* line 22 with error *)
>     end
>
>     let i = { Net.cvt = (module Cmd: CmdIface) }
>     Net.net i
>
>     I got error:
>     File "t.ml <http://t.ml>", line 22, characters 22-23:
>     Error: This expression has type int but an expression was expected
>     of type
>              R.message
>
>     In case I do not use types in function signature code works well:
>     module type I = sig val f : int -> int end;;
>     module M = struct
>     let f v = v+1
>     end;;
>     type t = {cvt: (module M); v: int};;
>     let module R = (val i.cvt: I) in R.f i.v;;
>     - : int = 1
>
>     WBR, ssp
>
>

-- 
Mikhail Mandrykin
Linux Verification Center, ISPRAS
web: http://linuxtesting.org
e-mail: mandrykin@ispras.ru


--------------42D595A30A14F1BCA669CBB3
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <p>It's also possible to parametrize over abstract types (though
      only those without type parameters) that occur in first-class
      module signature:<br>
    </p>
    <p>module type CmdIface = sig<br>
              type message<br>
              val cmd : message -&gt; int<br>
      end<br>
      <br>
      module type NetIface = sig<br>
              type init<br>
              val net : init -&gt; init<br>
      end<br>
      <br>
      module Cmd = struct<br>
              type message = int<br>
              let cmd v = v+1<br>
      end<br>
      <br>
      module Net = struct<br>
              type 'a init = { cvt: (module CmdIface with type message =
      'a) }<br>
      <br>
              let net (init : int init) =<br>
                      let cvt = init.cvt in<br>
                      let (module R) = cvt in <br>
                      R.cmd 1 (* line 22 with error *)<br>
      end<br>
      <br>
      let i = { Net.cvt = (module Cmd) };;<br>
      Net.net i;;<br>
    </p>
    Also there's another type error in the example since types of cmd in
    the Cmdline module type and Cmd module are incompatible (_ -&gt;
    unit vs. _ -&gt; int).<br>
    <br>
    <div class="moz-cite-prefix">On 28.11.2017 21:09, Ivan Gotovchits
      wrote:<br>
    </div>
    <blockquote type="cite"
cite="mid:CALdWJ+x4pJNaYtRAwuZACGmFN0XOr5GPTWwpVB-Gc7-ssVWk6w@mail.gmail.com">
      <div dir="ltr">
        <div>Let me first explain what is wrong with your code. </div>
        <div><br>
        </div>
        <div>The message type in `Cmdlface` is defined as an abstract
          type with only one operation `cmd : message -&gt; unit`. The
          module `Cmd` provides a possible implementation for this
          abstract type. </div>
        <div>The `R.cmd 1` expression tries to break the abstraction by
          assuming that the `R` implementation is using the `int` type
          as an underlying implementation. Imagine, what will happen if
          the `Net.cvt` field contained another implementation, </div>
        <div>for example </div>
        <div><br>
        </div>
        <div>    module Cmd = struct  </div>
        <div>      type message = string </div>
        <div>      let cmd = print_endline</div>
        <div>    end </div>
        <div><br>
        </div>
        <div>    let i = { Net.cvt = (module Cmd: CmdIface) }</div>
        <div>    Net.net i<br>
          <br>
        </div>
        <div>This will finally lead to a call `print_endline 1` if the
          type system won't stop you before. </div>
        <div><br>
        </div>
        <div><br>
        </div>
        <div>The solution is either to uncover the abstractions and
          stick to `int` as a concrete representation of the message
          abstraction or to extend the message abstraction interface
          with functions that will allow you to create the messages,
          e.g., </div>
        <div><br>
        </div>
        <div><br>
        </div>
        <div>    module type CmdIface = sig </div>
        <div>       type message</div>
        <div>       val of_int : int -&gt; message</div>
        <div>       val cmd : message -&gt; unit</div>
        <div>    end</div>
        <div><br>
        </div>
        <div><br>
        </div>
        <div><br>
        </div>
        <div><br>
          <div class="gmail_extra"><br>
            <div class="gmail_quote">On Tue, Nov 28, 2017 at 12:55 PM,
              Serge Sivkov <span dir="ltr">&lt;<a
                  href="mailto:ssp.mryau@gmail.com" target="_blank"
                  moz-do-not-send="true">ssp.mryau@gmail.com</a>&gt;</span>
              wrote:<br>
              <blockquote class="gmail_quote" style="margin:0px 0px 0px
                0.8ex;border-left:1px solid
                rgb(204,204,204);padding-left:1ex">
                <div dir="ltr">Hello,
                  <div><br>
                  </div>
                  <div>is there way to fix the following code:</div>
                  <div><br>
                  </div>
                  <div>
                    <div>module type CmdIface = sig</div>
                    <div>        type message</div>
                    <div>        val cmd : message -&gt; unit</div>
                    <div>end</div>
                    <div><br>
                    </div>
                    <div>module type NetIface = sig</div>
                    <div>        type init</div>
                    <div>        val net : init -&gt; init</div>
                    <div>end</div>
                    <div><br>
                    </div>
                    <div>module Cmd = struct</div>
                    <div>        type message = int</div>
                    <div>        let cmd v = v+1</div>
                    <div>end</div>
                    <div><br>
                    </div>
                    <div>module Net = struct</div>
                    <div>        type init = { cvt: (module CmdIface) }</div>
                    <div><br>
                    </div>
                    <div>        let net init =</div>
                    <div>                let cvt = init.cvt in</div>
                    <div>                let module R = (val cvt:
                      CmdIface) in </div>
                    <div>                R.cmd 1 (* line 22 with error
                      *)</div>
                    <div>end</div>
                    <div><br>
                    </div>
                    <div>let i = { Net.cvt = (module Cmd: CmdIface) }</div>
                    <div>Net.net i</div>
                  </div>
                  <div><br>
                  </div>
                  <div>I got error:</div>
                  <div>
                    <div>File "<a href="http://t.ml" target="_blank"
                        moz-do-not-send="true">t.ml</a>", line 22,
                      characters 22-23:</div>
                    <div>Error: This expression has type int but an
                      expression was expected of type</div>
                    <div>         R.message</div>
                  </div>
                  <div><br>
                  </div>
                  <div>In case I do not use types in function signature
                    code works well:</div>
                  <div>
                    <div><span
style="color:rgb(20,24,35);font-family:helvetica,arial,sans-serif;font-size:13px;line-height:18px">module
                        type I = sig val f : int -&gt; int end;;</span></div>
                    <div><span
style="color:rgb(20,24,35);font-family:helvetica,arial,sans-serif;font-size:13px;line-height:18px">module
                        M = struct<br>
                        let f v = v+1<br>
                        end;;<br>
                        type t = {cvt: (module M); v: int};;<br>
                        let module R = (val i.cvt: I) in R.f i.v;;<br>
                        - : int = 1</span></div>
                  </div>
                  <div><span
style="color:rgb(20,24,35);font-family:helvetica,arial,sans-serif;font-size:13px;line-height:18px"><br>
                    </span></div>
                  <div><span
style="color:rgb(20,24,35);font-family:helvetica,arial,sans-serif;font-size:13px;line-height:18px">WBR,
                      ssp</span></div>
                </div>
              </blockquote>
            </div>
            <br>
          </div>
        </div>
      </div>
    </blockquote>
    <br>
    <pre class="moz-signature" cols="72">-- 
Mikhail Mandrykin
Linux Verification Center, ISPRAS
web: <a class="moz-txt-link-freetext" href="http://linuxtesting.org">http://linuxtesting.org</a>
e-mail: <a class="moz-txt-link-abbreviated" href="mailto:mandrykin@ispras.ru">mandrykin@ispras.ru</a></pre>
  </body>
</html>

--------------42D595A30A14F1BCA669CBB3--
