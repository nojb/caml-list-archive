Return-Path: <cedilla@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id B0C35822AC
	for <caml-list@sympa.inria.fr>; Fri, 17 Nov 2017 03:05:08 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=cedilla@gmail.com; spf=Pass smtp.mailfrom=cedilla@gmail.com; spf=None smtp.helo=postmaster@mail-wm0-f45.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  cedilla@gmail.com) identity=pra; client-ip=74.125.82.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  cedilla@gmail.com designates 74.125.82.45 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="cedilla@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wm0-f45.google.com) identity=helo;
  client-ip=74.125.82.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="cedilla@gmail.com";
  x-sender="postmaster@mail-wm0-f45.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AYZ/RAxwA3R2YS8HXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uMWIJqq85mqBkHD//Il1AaPBtqLra8cw8Pt8IneGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2TxTor3az9T8fHAnkfUow?=
 =?us-ascii?q?f7ytW92as8Pi5umt8oebSgBJgnLpcLptJQ/wpADQsOEZhIJjLuA6zR6f8VVSfO?=
 =?us-ascii?q?ED/25lKRqsnhLn4cH4qJVu/yVUv/sJ+MtJUKG8dKM9G+8LRA86Onw4sZW4/SLI?=
 =?us-ascii?q?ShGCsz5FCj0b?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0D3AQDzQg5ahi1SfUpcGwEBAQEDAQEBC?=
 =?us-ascii?q?QEBAYQPC24UEweDeIE2mA+BfYJ/jheFWYIBCiWDOIFeAoRYB0IVAQEBAQEBAQE?=
 =?us-ascii?q?BARIBAQEICwsIKC+COAUBHgEFgjwBAQEBAgEjBBkBGx0BAwELBgULDRUVAgIhA?=
 =?us-ascii?q?QERAQUBHAYTigsBAwgFCBCcUECMDYFtGAUBHIMKBYNiChknDViCYwEBAQEBAQE?=
 =?us-ascii?q?DAQEBAQEBAQEYAgYSgyJFgUKGaYJrJIFEchKCVoJjBYoEKYhaXYU8iF49h3CII?=
 =?us-ascii?q?YR5ghVhiS+HI4xxOohxFAUfgRUPJoIXNCEIHRVJNYIvCYIaKh+CFCA2AYowgVU?=
 =?us-ascii?q?BAQE?=
X-IPAS-Result: =?us-ascii?q?A0D3AQDzQg5ahi1SfUpcGwEBAQEDAQEBCQEBAYQPC24UEwe?=
 =?us-ascii?q?DeIE2mA+BfYJ/jheFWYIBCiWDOIFeAoRYB0IVAQEBAQEBAQEBARIBAQEICwsIK?=
 =?us-ascii?q?C+COAUBHgEFgjwBAQEBAgEjBBkBGx0BAwELBgULDRUVAgIhAQERAQUBHAYTigs?=
 =?us-ascii?q?BAwgFCBCcUECMDYFtGAUBHIMKBYNiChknDViCYwEBAQEBAQEDAQEBAQEBAQEYA?=
 =?us-ascii?q?gYSgyJFgUKGaYJrJIFEchKCVoJjBYoEKYhaXYU8iF49h3CIIYR5ghVhiS+HI4x?=
 =?us-ascii?q?xOohxFAUfgRUPJoIXNCEIHRVJNYIvCYIaKh+CFCA2AYowgVUBAQE?=
X-IronPort-AV: E=Sophos;i="5.44,406,1505772000"; 
   d="scan'208,217";a="301161826"
Received: from mail-wm0-f45.google.com ([74.125.82.45])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 17 Nov 2017 03:05:07 +0100
Received: by mail-wm0-f45.google.com with SMTP id z3so3626672wme.5
        for <caml-list@inria.fr>; Thu, 16 Nov 2017 18:05:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=mMTQPnM+LM70ngc2+4MIEA9KsrRmcxV6H6BOnKUN2Qk=;
        b=nRSqsvkMg/kDUluu5io+oiiqHQe6BP6DuINmoaP4OCqAqlEQDfDm3oqgpkQGdnchT3
         1aTpge6AvNhgUzJCrxmx6LzYr/17oW1GiOls0lKTocJP+W/tnIyw0K6vzmjw3PlwYMzB
         vOVbHuep4DnG9ZEqW0ksw+Az0+/p4nwahyrUNdKvgEF7IhYbPCP5PJgurepOYuzCRT4Y
         Pcw6+ZWWhUX3gkhSnkbJXsJe8kzE3z9bSMI3ZoHngL5T9jFFslp9gbjlTPlFKiv4ExGh
         lAMtbs+mK+GInNHuiMV6sQ1KdnCp1BSvRVn9Wv+hjqSlbMZkJgijdfYxpPAB5wi/Flvy
         zD3Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=mMTQPnM+LM70ngc2+4MIEA9KsrRmcxV6H6BOnKUN2Qk=;
        b=SJKeiclHapHBmjeg/m3PyJO5hJ9at7Vx/vw7ipSXdWpP1ftQ/n1WKmwzrgJaQRjks2
         cHtu2nNxtI72eMy2EISwN5JFeDIvchHafJpEs2XTiprNn86NI0bYoCiNAb4hdc7WoJ8O
         tClG7DBwm1qLZDocO9ZZgGjwkFgDJS863GKZT0Ei2z1ZqpDudYbUgcaQ0Toa0M/IvSHV
         MzXeqArkVJcJe5L6veH+sea6Dvz4xHzyXdCade4ifCin9bNVH5ZE5oM8wZ5kRizot+f2
         laO5jNNBQmaCuBfrHrn9zr6DJrmzs3seuOPpKdgk8MUHBvGD4TtE9Ov9wTxnTZqi5D22
         CC5g==
X-Gm-Message-State: AJaThX4xApR7wNqJtWpvrxr5MBSWXBqWqJ6FnSIWYnJJ5DI99FnbVnP4
	GPjz95wYiodwuiwwXvpXnnpAhoTGoY5IM8ChiIc=
X-Google-Smtp-Source: AGs4zMa6tGVauwuJKycaYsZSlKYqNBDvvXhXufhjTD5OYj/7GAO3NLP+9oEbwM0LEsBr3nuRhSgyDbCjQDiVaV70bKk=
X-Received: by 10.80.139.65 with SMTP id l59mr5328124edl.187.1510884307081;
 Thu, 16 Nov 2017 18:05:07 -0800 (PST)
MIME-Version: 1.0
Received: by 10.80.245.226 with HTTP; Thu, 16 Nov 2017 18:05:06 -0800 (PST)
In-Reply-To: <CAJbYVJLHBPR=RZbWnz1KWmSWQacA5hODsKrvrSZvUX+NOOkWsw@mail.gmail.com>
References: <CALLFq5QAJixXFyQQVT9sk59dLT3VXfMsEeHiE=U4CxmkNGpbnA@mail.gmail.com>
 <CAJbYVJLHBPR=RZbWnz1KWmSWQacA5hODsKrvrSZvUX+NOOkWsw@mail.gmail.com>
From: Reed Wilson <cedilla@gmail.com>
Date: Thu, 16 Nov 2017 18:05:06 -0800
Message-ID: <CALLFq5SvVWfBdkW4Z-O0Uq=Odf1N3Y5x_qRSm=S_rx8GeO8Wyw@mail.gmail.com>
To: Yawar Amin <yawar.amin@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary="94eb2c194a066ba1b3055e242a2f"
X-Validation-by: cedilla@gmail.com
Subject: Re: [Caml-list] Subtyping (or something like it)

--94eb2c194a066ba1b3055e242a2f
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

That looks pretty good! One of the things I tried was to use the private
type declaration. However, I failed to take the coercion into account, so I
thought they couldn't actually be used as bigarrays.
I'd still like to avoid casting to bigarrays, but unless a miracle comes
along, I think this is how I'll do it.
Thanks!

On Thu, Nov 16, 2017 at 4:49 PM, Yawar Amin <yawar.amin@gmail.com> wrote:

> Hi Reed, this is maybe not exactly what you specified, but a `private`
> type abbreviation ( https://caml.inria.fr/pub/do
> cs/manual-ocaml/extn.html#s-private-types-abbrev ) should work. You'll
> have to cast your safe array type to a normal bigarray to get the indexing
> and other operations, e.g.:
>
> (my_array : ro t :> (int, int8_unsigned_elt, c_layout) Array1.t).{idx}
>
> Also, see http://camltastic.blogspot.ca/2008/05/phantom-types.html for a
> really cool way to mix phantom types and subtyping.
>
> Cheers,
>
> Yawar
>
> On Thu, Nov 16, 2017 at 4:46 PM, Reed Wilson <cedilla@gmail.com> wrote:
>
>> A while ago, I made a module which basically extended bigarrays with a
>> few more functions. However, I wanted to have a distinction between
>> read-only and read-write values. The equivalence with bigarrays was
>> irrelevant, so my interface just looked like this:
>>
>> type ro
>> type rw
>> type 'a t
>> val read_only : 'a t -> ro t
>> val get : 'a t -> int -> int
>> val put : rw t -> int -> int -> unit
>> ...
>>
>> Basically, any function that wrote to the type would have to take a "rw
>> t", but anything else would take " 'a t". From what I know about C, "ro"
>> behaves like the "const" qualifier - not water-proof but it catches some=
 of
>> my common mistakes.
>>
>> Now, however, I want to re-export the equivalence between 'a t and
>> bigarrays (mostly for the .{} operator), but also have the
>> read-only/read-write distinction. The problem is that if I write:
>> type 'a t =3D (int, int8_unsigned_elt, c_layout) Array1.t
>>
>> then OCaml will see that "ro t" and "rw t" are the same and freely let me
>> use "ro t" values in, for example, the "put" function above.
>>
>> To summarize, is there a way to make two types internally represented by
>> bigarrays, the first of which:
>> * can use the bigarray functions (specifically .{} )
>> * can use all of my new functions
>> and the second type
>> * can't use bigarray functions
>> * can only use a subset of my new functions
>>
>> I don't want to have two different versions of each function that I have
>> to keep track of.
>>
>> Thanks,
>> Reed Wilson
>>
>> --
>> =C3=A7
>>
>
>


--=20
=C3=A7

--94eb2c194a066ba1b3055e242a2f
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">That looks pretty good! One of the things I tried was to u=
se the private type declaration. However, I failed to take the coercion int=
o account, so I thought they couldn&#39;t actually be used as bigarrays.<di=
v>I&#39;d still like to avoid casting to bigarrays, but unless a miracle co=
mes along, I think this is how I&#39;ll do it.</div><div>Thanks!<br><div cl=
ass=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Nov 16, 2017 at =
4:49 PM, Yawar Amin <span dir=3D"ltr">&lt;<a href=3D"mailto:yawar.amin@gmai=
l.com" target=3D"_blank">yawar.amin@gmail.com</a>&gt;</span> wrote:<br><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #c=
cc solid;padding-left:1ex"><div dir=3D"ltr">Hi Reed, this is maybe not exac=
tly what you specified, but a `private` type abbreviation (=C2=A0<a href=3D=
"https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#s-private-types-abbr=
ev" target=3D"_blank">https://caml.inria.fr/pub/do<wbr>cs/manual-ocaml/extn=
.html#s-pr<wbr>ivate-types-abbrev</a> ) should work. You&#39;ll have to cas=
t your safe array type to a normal bigarray=C2=A0to get the indexing and ot=
her operations, e.g.:<div><br></div><div>(my_array : ro=C2=A0t :&gt; (int, =
int8_unsigned_elt, c_layout) Array1.t).{idx}</div><div><br></div><div>Also,=
 see=C2=A0<a href=3D"http://camltastic.blogspot.ca/2008/05/phantom-types.ht=
ml" target=3D"_blank">http://camltastic.blogspot<wbr>.ca/2008/05/phantom-ty=
pes.html</a> for a really cool way to mix phantom types and subtyping.</div=
><div><br></div><div>Cheers,</div><div><br></div><div>Yawar</div></div><div=
 class=3D"m_5784746985502711197HOEnZb"><div class=3D"m_5784746985502711197h=
5"><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Nov 16=
, 2017 at 4:46 PM, Reed Wilson <span dir=3D"ltr">&lt;<a href=3D"mailto:cedi=
lla@gmail.com" target=3D"_blank">cedilla@gmail.com</a>&gt;</span> wrote:<br=
><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1=
px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"=
><div dir=3D"ltr">A while ago, I made a module which basically extended big=
arrays with a few more functions. However, I wanted to have a distinction b=
etween read-only and read-write values. The equivalence with bigarrays was =
irrelevant, so my interface just looked like this:<div><br></div><div>type =
ro</div><div>type rw</div><div>type &#39;a t</div><div>val read_only : &#39=
;a t -&gt; ro t</div><div>val get : &#39;a t -&gt; int -&gt; int<br></div><=
div>val put : rw t -&gt; int -&gt; int -&gt; unit</div><div>...</div><div><=
br></div><div>Basically, any function that wrote to the type would have to =
take a &quot;rw t&quot;, but anything else would take &quot; &#39;a t&quot;=
. From what I know about C, &quot;ro&quot; behaves like the &quot;const&quo=
t; qualifier - not water-proof but it catches some of my common mistakes.</=
div><div><br></div><div>Now, however, I want to re-export the equivalence b=
etween &#39;a t and bigarrays (mostly for the .{} operator), but also have =
the read-only/read-write distinction. The problem is that if I write:</div>=
<div>type &#39;a t =3D (int, int8_unsigned_elt, c_layout) Array1.t</div><di=
v><br></div><div>then OCaml will see that &quot;ro t&quot; and &quot;rw t&q=
uot; are the same and freely let me use &quot;ro t&quot; values in, for exa=
mple, the &quot;put&quot; function above.</div><div><br></div><div>To summa=
rize, is there a way to make two types internally represented by bigarrays,=
 the first of which:</div><div>* can use the bigarray functions (specifical=
ly .{} )</div><div>* can use all of my new functions</div><div>and the seco=
nd type</div><div>* can&#39;t use bigarray functions</div><div>* can only u=
se a subset of my new functions</div><div><br></div><div>I don&#39;t want t=
o have two different versions of each function that I have to keep track of=
.</div><div><br></div><div>Thanks,</div><div>Reed Wilson</div><span class=
=3D"m_5784746985502711197m_-2308305827664936733HOEnZb"><font color=3D"#8888=
88"><span class=3D"m_5784746985502711197m_-2308305827664936733m_69895057713=
69625786gmail-HOEnZb"><font color=3D"#888888"><div><br></div></font></span>=
</font></span></div></div><span class=3D"m_5784746985502711197m_-2308305827=
664936733HOEnZb"><font color=3D"#888888">-- <br><div class=3D"m_57847469855=
02711197m_-2308305827664936733m_6989505771369625786gmail_signature">=C3=A7<=
/div>
</font></span></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=
<div class=3D"m_5784746985502711197gmail_signature" data-smartmail=3D"gmail=
_signature">=C3=A7</div>
</div></div></div>

--94eb2c194a066ba1b3055e242a2f--
