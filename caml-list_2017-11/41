Return-Path: <yawar.amin@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id AB818822AC
	for <caml-list@sympa.inria.fr>; Fri, 17 Nov 2017 01:50:13 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=yawar.amin@gmail.com; spf=Pass smtp.mailfrom=yawar.amin@gmail.com; spf=None smtp.helo=postmaster@mail-it0-f48.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  yawar.amin@gmail.com) identity=pra; client-ip=209.85.214.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yawar.amin@gmail.com";
  x-sender="yawar.amin@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  yawar.amin@gmail.com designates 209.85.214.48 as permitted
  sender) identity=mailfrom; client-ip=209.85.214.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yawar.amin@gmail.com";
  x-sender="yawar.amin@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-it0-f48.google.com) identity=helo;
  client-ip=209.85.214.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yawar.amin@gmail.com";
  x-sender="postmaster@mail-it0-f48.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AU1/gZxL5oF+XX3PEetmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXLPTxwZ3uMQTl6Ol3ixeRBMOAtKIC1rKempujcFJDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBWB6kG1uAQfFxm3Cgtx?=
 =?us-ascii?q?PePzUtrZgsi20+S705LWagRMwjG6ZOUhAg+xqFDgv9Yfm8NLL6c3gk/Yq2RBYa?=
 =?us-ascii?q?JfwGJuDV2Wlhf4oMy3+cgwoGxrp/s9+psYAu3BdKMiQOkAAQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CxAwBtMQ5ahjDWVdFcHAEBAQQBAQoBA?=
 =?us-ascii?q?YNbP24UEweDeIE2mA+BfYJ/jheFSYIRCiWFFgKEWAdAFwEBAQEBAQEBAQESAQE?=
 =?us-ascii?q?BCAsLCCgvgjgigkUBAgIBIwQZARsdAQMBCwYFCwM0AgIhAQERAQUBHAYTigsBA?=
 =?us-ascii?q?w0IEJxeQIwNgW0YBQEcgwoFg2MKGScNWIJjAQEBAQEBAQMBAQEBAQEBAQEXAgY?=
 =?us-ascii?q?SgyJFgUKBVYUUgmskgjaCaIJjBYoEiQOOdz2CN4U5iCGEeYIVYYkvhyOMcTqIc?=
 =?us-ascii?q?RQFH4EVDxIBgio0ISVeNYIvCYJEH4IRIzYBjAUBAQE?=
X-IPAS-Result: =?us-ascii?q?A0CxAwBtMQ5ahjDWVdFcHAEBAQQBAQoBAYNbP24UEweDeIE?=
 =?us-ascii?q?2mA+BfYJ/jheFSYIRCiWFFgKEWAdAFwEBAQEBAQEBAQESAQEBCAsLCCgvgjgig?=
 =?us-ascii?q?kUBAgIBIwQZARsdAQMBCwYFCwM0AgIhAQERAQUBHAYTigsBAw0IEJxeQIwNgW0?=
 =?us-ascii?q?YBQEcgwoFg2MKGScNWIJjAQEBAQEBAQMBAQEBAQEBAQEXAgYSgyJFgUKBVYUUg?=
 =?us-ascii?q?mskgjaCaIJjBYoEiQOOdz2CN4U5iCGEeYIVYYkvhyOMcTqIcRQFH4EVDxIBgio?=
 =?us-ascii?q?0ISVeNYIvCYJEH4IRIzYBjAUBAQE?=
X-IronPort-AV: E=Sophos;i="5.44,405,1505772000"; 
   d="scan'208,217";a="244922382"
Received: from mail-it0-f48.google.com ([209.85.214.48])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 17 Nov 2017 01:50:12 +0100
Received: by mail-it0-f48.google.com with SMTP id y15so2254857ita.4
        for <caml-list@inria.fr>; Thu, 16 Nov 2017 16:50:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=EIbZ2Lr7XiUsNWX8aiQ//oyZdJPpQwbnTsPZAoiVz30=;
        b=jMc+GczdLB/Z2yd7+zLJamltOXbwpUC7b0i/yTalz+MHAgXxkW+gm1n/aqAknyIri5
         msMgLNE6JlctjGvP0Pl/Zxe4lAQ7KRcYJa3kRsLWfUNXZBh4DgPBNNtez2UYCr6eAfzP
         HIfz9b7j9gkTY17HkZH7LZCvsCbUEo1VJ4rXNZTCP8zK3pL/WxTVZz0XzTHSbVz3PLdj
         e4J4AAD+zgghn1RGGyN8HSvkUXgwywtcxwoO8UlTbtv+XLigJsggTnvpVla6+Fb6nBph
         gu7YsmeGBJbQuGb7YTJFVhIlEuQI666loHauQW2pme8A4Qy96qDXSOMyusClutPyaKd+
         XpLw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=EIbZ2Lr7XiUsNWX8aiQ//oyZdJPpQwbnTsPZAoiVz30=;
        b=m7OR4IAUrnqGfsseAZT7Kj1hub+HRhF4ERXdxtxNE7qltBs5F6xXodZ20BZOE4y88R
         FhiHdWh6re+FnsNAOHrghOVkEWsVGzOBehUX3k6+13j1fhwrX8/29YiX8QMHEqS4RPiZ
         3ol0gO07KX67VPf6ZHAQ3NKdHG5RxDsVYDSc2drAUO0eWr3L8pZmMUL0zBAjm1pBZx9F
         KD/h4YgT/dEgf2fytueOpP9LRY4/QaMCzRa6wgQGZpjxlxw1HBFUX+ChOJkARJZ/G3Qf
         g6uJ3sMKqlTE2DDKfRYAyIib1rVW/zZmcPozSvGmNme/zm2iIahgh7AWQE5mmn3og/Sy
         1bEQ==
X-Gm-Message-State: AJaThX4Wf96Zoz1t2I4DCiihm/78+V2zFIVIQOAZVw3ft+/lVPkUmWCl
	YZGwzZc2NaJ8HZUzNNrGmm8Oii8QqgoXk9AePQ==
X-Google-Smtp-Source: AGs4zMZi3Ky8rh/YHUVp/u66P0lgj5m7fpW66esphid9c8LRW2jcMG5nrvSUTc1mH72/YJ0ZpLZuYSKgYM0fxicOMg4=
X-Received: by 10.36.36.19 with SMTP id f19mr4601865ita.96.1510879810438; Thu,
 16 Nov 2017 16:50:10 -0800 (PST)
MIME-Version: 1.0
Received: by 10.2.181.19 with HTTP; Thu, 16 Nov 2017 16:49:50 -0800 (PST)
In-Reply-To: <CALLFq5QAJixXFyQQVT9sk59dLT3VXfMsEeHiE=U4CxmkNGpbnA@mail.gmail.com>
References: <CALLFq5QAJixXFyQQVT9sk59dLT3VXfMsEeHiE=U4CxmkNGpbnA@mail.gmail.com>
From: Yawar Amin <yawar.amin@gmail.com>
Date: Thu, 16 Nov 2017 19:49:50 -0500
Message-ID: <CAJbYVJLHBPR=RZbWnz1KWmSWQacA5hODsKrvrSZvUX+NOOkWsw@mail.gmail.com>
To: Reed Wilson <cedilla@gmail.com>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary="001a11474b60664c11055e231e6d"
Subject: Re: [Caml-list] Subtyping (or something like it)

--001a11474b60664c11055e231e6d
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Hi Reed, this is maybe not exactly what you specified, but a `private` type
abbreviation (
https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#s-private-types-abbrev
) should work. You'll have to cast your safe array type to a normal
bigarray to get the indexing and other operations, e.g.:

(my_array : ro t :> (int, int8_unsigned_elt, c_layout) Array1.t).{idx}

Also, see http://camltastic.blogspot.ca/2008/05/phantom-types.html for a
really cool way to mix phantom types and subtyping.

Cheers,

Yawar

On Thu, Nov 16, 2017 at 4:46 PM, Reed Wilson <cedilla@gmail.com> wrote:

> A while ago, I made a module which basically extended bigarrays with a few
> more functions. However, I wanted to have a distinction between read-only
> and read-write values. The equivalence with bigarrays was irrelevant, so =
my
> interface just looked like this:
>
> type ro
> type rw
> type 'a t
> val read_only : 'a t -> ro t
> val get : 'a t -> int -> int
> val put : rw t -> int -> int -> unit
> ...
>
> Basically, any function that wrote to the type would have to take a "rw
> t", but anything else would take " 'a t". From what I know about C, "ro"
> behaves like the "const" qualifier - not water-proof but it catches some =
of
> my common mistakes.
>
> Now, however, I want to re-export the equivalence between 'a t and
> bigarrays (mostly for the .{} operator), but also have the
> read-only/read-write distinction. The problem is that if I write:
> type 'a t =3D (int, int8_unsigned_elt, c_layout) Array1.t
>
> then OCaml will see that "ro t" and "rw t" are the same and freely let me
> use "ro t" values in, for example, the "put" function above.
>
> To summarize, is there a way to make two types internally represented by
> bigarrays, the first of which:
> * can use the bigarray functions (specifically .{} )
> * can use all of my new functions
> and the second type
> * can't use bigarray functions
> * can only use a subset of my new functions
>
> I don't want to have two different versions of each function that I have
> to keep track of.
>
> Thanks,
> Reed Wilson
>
> --
> =C3=A7
>

--001a11474b60664c11055e231e6d
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi Reed, this is maybe not exactly what you specified, but=
 a `private` type abbreviation (=C2=A0<a href=3D"https://caml.inria.fr/pub/=
docs/manual-ocaml/extn.html#s-private-types-abbrev">https://caml.inria.fr/p=
ub/docs/manual-ocaml/extn.html#s-private-types-abbrev</a> ) should work. Yo=
u&#39;ll have to cast your safe array type to a normal bigarray=C2=A0to get=
 the indexing and other operations, e.g.:<div><br></div><div>(my_array : ro=
=C2=A0t :&gt; (int, int8_unsigned_elt, c_layout) Array1.t).{idx}</div><div>=
<br></div><div>Also, see=C2=A0<a href=3D"http://camltastic.blogspot.ca/2008=
/05/phantom-types.html">http://camltastic.blogspot.ca/2008/05/phantom-types=
.html</a> for a really cool way to mix phantom types and subtyping.</div><d=
iv><br></div><div>Cheers,</div><div><br></div><div>Yawar</div></div><div cl=
ass=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Nov 16, 2017 at =
4:46 PM, Reed Wilson <span dir=3D"ltr">&lt;<a href=3D"mailto:cedilla@gmail.=
com" target=3D"_blank">cedilla@gmail.com</a>&gt;</span> wrote:<br><blockquo=
te class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc so=
lid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><div dir=
=3D"ltr">A while ago, I made a module which basically extended bigarrays wi=
th a few more functions. However, I wanted to have a distinction between re=
ad-only and read-write values. The equivalence with bigarrays was irrelevan=
t, so my interface just looked like this:<div><br></div><div>type ro</div><=
div>type rw</div><div>type &#39;a t</div><div>val read_only : &#39;a t -&gt=
; ro t</div><div>val get : &#39;a t -&gt; int -&gt; int<br></div><div>val p=
ut : rw t -&gt; int -&gt; int -&gt; unit</div><div>...</div><div><br></div>=
<div>Basically, any function that wrote to the type would have to take a &q=
uot;rw t&quot;, but anything else would take &quot; &#39;a t&quot;. From wh=
at I know about C, &quot;ro&quot; behaves like the &quot;const&quot; qualif=
ier - not water-proof but it catches some of my common mistakes.</div><div>=
<br></div><div>Now, however, I want to re-export the equivalence between &#=
39;a t and bigarrays (mostly for the .{} operator), but also have the read-=
only/read-write distinction. The problem is that if I write:</div><div>type=
 &#39;a t =3D (int, int8_unsigned_elt, c_layout) Array1.t</div><div><br></d=
iv><div>then OCaml will see that &quot;ro t&quot; and &quot;rw t&quot; are =
the same and freely let me use &quot;ro t&quot; values in, for example, the=
 &quot;put&quot; function above.</div><div><br></div><div>To summarize, is =
there a way to make two types internally represented by bigarrays, the firs=
t of which:</div><div>* can use the bigarray functions (specifically .{} )<=
/div><div>* can use all of my new functions</div><div>and the second type</=
div><div>* can&#39;t use bigarray functions</div><div>* can only use a subs=
et of my new functions</div><div><br></div><div>I don&#39;t want to have tw=
o different versions of each function that I have to keep track of.</div><d=
iv><br></div><div>Thanks,</div><div>Reed Wilson</div><span class=3D"HOEnZb"=
><font color=3D"#888888"><span class=3D"m_6989505771369625786gmail-HOEnZb">=
<font color=3D"#888888"><div><br></div></font></span></font></span></div></=
div><span class=3D"HOEnZb"><font color=3D"#888888">-- <br><div class=3D"m_6=
989505771369625786gmail_signature">=C3=A7</div>
</font></span></div>
</blockquote></div><br></div>

--001a11474b60664c11055e231e6d--
