Return-Path: <jocelyn.serot@uca.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C8726826D8
	for <caml-list@sympa.inria.fr>; Thu, 25 Jul 2019 17:20:49 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=jocelyn.serot@uca.fr; spf=Pass smtp.mailfrom=jocelyn.serot@uca.fr; spf=None smtp.helo=postmaster@mta02.udamail.fr
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  jocelyn.serot@uca.fr) identity=pra; client-ip=193.49.117.21;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="jocelyn.serot@uca.fr";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  jocelyn.serot@uca.fr designates 193.49.117.21 as permitted
  sender) identity=mailfrom; client-ip=193.49.117.21;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="jocelyn.serot@uca.fr";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mta02.udamail.fr) identity=helo;
  client-ip=193.49.117.21;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jocelyn.serot@uca.fr";
  x-sender="postmaster@mta02.udamail.fr";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3ADYhdeRYUZ+vuqKSNrZ33cyL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZr86ybnLW6fgltlLVR4KTs6sC17OM9fC6Ejxcqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba5sIBmsrgjdqMYajIhtJ60s1hbHv3xEdv?=
 =?us-ascii?q?hMy2h1P1yThRH85smx/J5n7Stdvu8q+tBDX6vnYak2VKRUAzs6PW874s3rrgTD?=
 =?us-ascii?q?QhCU5nQASGUWkwFHDBbD4RrnQ5r+qCr6tu562CmHIc37SK0/VDq+46t3ThLjlT?=
 =?us-ascii?q?wKPCAl/m7JlsNwjbpboBO/qBx5347Ue5yeOP5ncq/AYd8WWW9NU8BMXCJDH4y8?=
 =?us-ascii?q?dZMCAPYOMuhFr4fypVUAoxiwBQeyA+3i0SVHimPz3aAg0+QtDQHL0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8WX+Cy0KbH0zHDbvNQ2Tjl9YbPaAohofaQXbltdsfRy04vGB/bgVWU?=
 =?us-ascii?q?qY3lOSmZ1v8TvGiB6OpgSfmii3M7pA5ruDSvyN0sh5DPi4kIxF7E8iB5z5w0Jd?=
 =?us-ascii?q?2+UEN7bt+kEIdQtyGHLIR6WN8tQ2ZtuCs817YIuoa7cTAXxJkjyRPTcfOKfoyS?=
 =?us-ascii?q?7h7+SeqcIy10iGx4dL6nhBu/8lKsxvD9W8S7ylpHqjRJnsPSun0NyxDe7NWMRO?=
 =?us-ascii?q?Fn8Ue7wzmP0hje6uFaLkAwkqrWM5shwqIqmZYPr0jPBDL2l1jsg6+TbEok++yo?=
 =?us-ascii?q?5/7pYrX8vpOcNol0hR/iMqk2h8CyBeo1PhIBUmWf4+iwyaDv8E/jTLlUk/E6iq?=
 =?us-ascii?q?zZv4rbJcQfqK65GQhV0oM75ha9CDepzMoXnX0HLVJDYh6HlJbmO0vJIPDkFvq/?=
 =?us-ascii?q?nkijny1xy/DIJL3tGo/NIWTbkLf9YbZ97FZRxxYpwtBa45JYE7UBIPPoWk/tr9?=
 =?us-ascii?q?HYFR84Mwmsw+n9Etl914UeWXiOAqCDKq/Sv0WItaoTJLyjbYUPuTv5Y8Mu5/P0?=
 =?us-ascii?q?gGVxzVAUd7Oo0J9Rc3u4E+5rOW2WZHPthpEKFmJc7SQkS+m/qlqJXDpCYUGJ3r?=
 =?us-ascii?q?g7+nlvCoWtAIPSQMa2jaaGwA+mFZQQaHoQWQPEKmvha4jRA6REUymVOMI012Vc?=
 =?us-ascii?q?DeHwGb9k7gmnsUrB85QiK+PV/iMCspezhsV+7qvdj0NrrGEmP4Gmy2iIClpMsC?=
 =?us-ascii?q?YISjsxhfAtpFB0kg3FzKRxhvVZEZpd/aERC1toBdvn1+V/TuvKdEfZZN7ZGkut?=
 =?us-ascii?q?S5OoG2NpQw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C/CAAyyDldhxV1McFmHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZ4EVgW8DUAEwKo0ZiBeBaiWDZIVwkScJAQMBDCMMAQGEQAKCXhsHAQQ0EwE?=
 =?us-ascii?q?DAQEEAQECAQMDARMBAQEKCwkIKYUlDII6KQGCZgEBAQECAScZAQE3AQQLCxggD?=
 =?us-ascii?q?iE2BhODIgGBagMOEwEKrGKBcDOCegEBBYJHgkENgh4DBoE0i2CCFoERJwwTgh4?=
 =?us-ascii?q?uPoIaLhkCAoIMgxCCJowlnWMtQAcCgTJqhlmIbAVPhBKNN4pVjFuIKYF1iwuDM?=
 =?us-ascii?q?4EvOEuBLnRMKgGCQT6CBAwOCRSDOoE+iRc+ATGOWwEB?=
X-IPAS-Result: =?us-ascii?q?A0C/CAAyyDldhxV1McFmHAEBAQQBAQcEAQGBZ4EVgW8DUAE?=
 =?us-ascii?q?wKo0ZiBeBaiWDZIVwkScJAQMBDCMMAQGEQAKCXhsHAQQ0EwEDAQEEAQECAQMDA?=
 =?us-ascii?q?RMBAQEKCwkIKYUlDII6KQGCZgEBAQECAScZAQE3AQQLCxggDiE2BhODIgGBagM?=
 =?us-ascii?q?OEwEKrGKBcDOCegEBBYJHgkENgh4DBoE0i2CCFoERJwwTgh4uPoIaLhkCAoIMg?=
 =?us-ascii?q?xCCJowlnWMtQAcCgTJqhlmIbAVPhBKNN4pVjFuIKYF1iwuDM4EvOEuBLnRMKgG?=
 =?us-ascii?q?CQT6CBAwOCRSDOoE+iRc+ATGOWwEB?=
X-IronPort-AV: E=Sophos;i="5.64,307,1559512800"; 
   d="scan'208,217";a="314712156"
X-MGA-submission: =?us-ascii?q?MDEPIQT8WPtbfxksd9pu3GH6/dvOQy48FNUWTT?=
 =?us-ascii?q?/v9NL3zcxE0gIeSNVEoHn0FooYuKMHVYqymAW99Dw/rCoQsa7OMYDpSb?=
 =?us-ascii?q?7N3D65+luICu6lT7OC0DGVGw44mzA1rshd2aOSy/YLlPAMpSuAmllleg?=
 =?us-ascii?q?InojuM4tH1vPwdJ4/Ck2LXrA=3D=3D?=
Received: from mta02.udamail.fr ([193.49.117.21])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 25 Jul 2019 17:20:48 +0200
Received: from mta02.udamail.fr (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTPS id 45vbWd6kQ2zBsDZ;
	Thu, 25 Jul 2019 17:20:45 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by mta02.udamail.fr (Postfix) with ESMTP id 45vbWd65hrzBsDX;
	Thu, 25 Jul 2019 17:20:45 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.10.3 mta02.udamail.fr 45vbWd65hrzBsDX
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=uca.fr;
	s=72FD7F0C-5358-11E8-A3B7-17E0B3BFED1B; t=1564068045;
	bh=lZFBlwc5fqPwImhQkRGK7j/Y/uA1mFKtcdq1fca1fXc=;
	h=Mime-Version:From:Date:Message-Id:To;
	b=Bj4VgBxeDRUDtQy0JYa8CKwalptH8/1lOmi7TFY3bRKOKVk/QrVmIoB00tOCL1/YH
	 QFifVNHeX0K6v+/9DVZjhQV7xpT1VM8C8NxhCdPIL1zmMta8idU6B/e7Ap1ijqcx+o
	 hl4Fv2zUvmD3Sxp55IWxdSJA64+kNocAlhXjmfmo=
X-Virus-Scanned: amavisd-new at mta02.udamail.fr
Received: from mta02.udamail.fr ([127.0.0.1])
	by localhost (mta02.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id qWIo0eu4feyD; Thu, 25 Jul 2019 17:20:45 +0200 (CEST)
Received: from proxy01.udamail.fr (unknown [193.49.117.26])
	by mta02.udamail.fr (Postfix) with ESMTPS id 45vbWd4nrGzBsDW;
	Thu, 25 Jul 2019 17:20:45 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy01.udamail.fr (Postfix) with ESMTP id 45vbWd49G0zBnBY;
	Thu, 25 Jul 2019 17:20:45 +0200 (CEST)
Received: from proxy01.udamail.fr ([127.0.0.1])
	by localhost (proxy01.udamail.fr [127.0.0.1]) (amavisd-new, port 10032)
	with ESMTP id JQG5OCHGal_Z; Thu, 25 Jul 2019 17:20:44 +0200 (CEST)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by proxy01.udamail.fr (Postfix) with ESMTP id 45vbWc0WbNzBnBw;
	Thu, 25 Jul 2019 17:20:44 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.10.3 proxy01.udamail.fr 45vbWc0WbNzBnBw
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=uca.fr;
	s=72FD7F0C-5358-11E8-A3B7-17E0B3BFED1B; t=1564068044;
	bh=lZFBlwc5fqPwImhQkRGK7j/Y/uA1mFKtcdq1fca1fXc=;
	h=Mime-Version:From:Date:Message-Id:To;
	b=bUoA9cNBZbYI2zRleO4zf7+/B8kNgG4ZCge56I7slbqr8tugMpWIR7kEOeCVP0P1+
	 kVDXn9yM0b5uDpVN5RspPJ8ITk9aV4wjz3wSIYB9zs/bHZQwgxlZq40HxH596zwK7Q
	 WSlXGfbWWAFQDbQ7w9szaOx58wVeSGJ/03f+4Iq4=
X-Virus-Scanned: amavisd-new at proxy01.udamail.fr
Received: from proxy01.udamail.fr ([127.0.0.1])
	by localhost (proxy01.udamail.fr [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id qehD0mgr_3eK; Thu, 25 Jul 2019 17:20:43 +0200 (CEST)
Received: from [192.168.0.38] (lav63-2-88-164-92-250.fbx.proxad.net [88.164.92.250])
	by proxy01.udamail.fr (Postfix) with ESMTPSA id 45vbWb24xjzBnBY;
	Thu, 25 Jul 2019 17:20:43 +0200 (CEST)
Content-Type: multipart/alternative; boundary="Apple-Mail=_1B82EDD0-E023-4DF1-AF8F-DBF3BA409BB3"
Mime-Version: 1.0 (Mac OS X Mail 7.3 \(1878.6\))
From: =?iso-8859-1?Q?Jocelyn_S=E9rot?= <jocelyn.serot@uca.fr>
In-Reply-To: <CAPFanBHeEM_osrF5ue4QO=vLVvNYZi+fywRSHrSzn-C1hSbHpA@mail.gmail.com>
Date: Thu, 25 Jul 2019 17:20:42 +0200
Cc: caml users <caml-list@inria.fr>
Message-Id: <9D191A05-C9B7-4462-A7BB-BE705AF9E434@uca.fr>
References: <C4399DA5-3383-4A7E-9546-0021083D6EF3@uca.fr> <6300BCD6-A188-46E1-BA13-D9ACBE80FD49@uca.fr> <CAPFanBHeEM_osrF5ue4QO=vLVvNYZi+fywRSHrSzn-C1hSbHpA@mail.gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
X-Mailer: Apple Mail (2.1878.6)
X-Validation-by: jocelyn.serot@uca.fr
Subject: Re: [Caml-list] Camlp4-free implementation of stream parsers (was
 camlp4 & OCaml 4.08)


--Apple-Mail=_1B82EDD0-E023-4DF1-AF8F-DBF3BA409BB3
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=windows-1252

Thanks for the suggestion, Gabriel.

It is indeed less tiresome that i had imagined.

I attach the corresponding full code (with original camlp4 formulation in c=
omment).
Handling of the minus operator is here handled before parsing; this is not =
a problem since such a parser is supposed to be called on very small string=
s in practice.

Jocelyn

ps : i=92m still wondering whether some library and/or ppx-based  generic (=
afap) implementation of Camlp4 stream parsers is possible..

8<=97=97 Stream-based parser for simple arithmetic expressions (with non-ne=
gative integers)

type ident =3D string=20

type value =3D int=20

type t =3D=20
  EConst of value              (** Constants *)=20=20=20
| EVar of ident                (** Input, output or local variable *)
| EBinop of string * t * t     (** Binary operation *)

let keywords =3D ["+"; "-"; "*"; "/"; "("; ")"]

let mk_binary_minus s =3D s |> String.split_on_char '-' |> String.concat " =
- "
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
let lexer s =3D s |> mk_binary_minus |> Stream.of_string |> Genlex.make_lex=
er keywords=20

open Genlex

(* let rec p_exp0  =3D parser
 *                 | [< 'Int n >] -> EConst n
 *                 | [< 'Ident i >] -> EVar i
 *                 | [< 'Kwd "("; e=3Dp_exp ; 'Kwd ")" >] -> e *)

let rec p_exp0 s =3D
  match Stream.next s with
    | Int n -> EConst n
    | Ident i -> EVar i
    | Kwd "(" ->
       let e =3D p_exp s in
       begin match Stream.peek s with
       | Some (Kwd ")") -> Stream.junk s; e
       | _ -> raise Stream.Failure
       end
    | _ -> raise Stream.Failure

(* and p_exp1  =3D parser
 *             | [< e1=3Dp_exp0 ; rest >] -> p_exp2  e1 rest *)

and p_exp1 s =3D
  let e1 =3D p_exp0 s in
  p_exp2 e1 s
=20=20
(* and p_exp2  e1 =3D parser
 *                | [< 'Kwd "*"; e2=3Dp_exp1  >] -> EBinop("*", e1, e2)
 *                | [< 'Kwd "/"; e2=3Dp_exp1  >] -> EBinop("/", e1, e2)
 *                | [< >] -> e1 *)

and p_exp2 e1 s =3D
  match Stream.peek s with
  | Some (Kwd "*") -> Stream.junk s; let e2 =3D p_exp1 s in EBinop("*", e1,=
 e2)
  | Some (Kwd "/") -> Stream.junk s; let e2 =3D p_exp1 s in EBinop("/", e1,=
 e2)
  | _ -> e1
=20=20
(* and p_exp  =3D parser
 *            | [< e1=3Dp_exp1 ; rest >] -> p_exp3  e1 rest *)

and p_exp s =3D
  let e1 =3D p_exp1 s in p_exp3 e1 s
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
(* and p_exp3  e1 =3D parser
 *                | [< 'Kwd "+"; e2=3Dp_exp  >] -> EBinop("+", e1, e2)
 *                | [< 'Kwd "-"; e2=3Dp_exp  >] -> EBinop("-", e1, e2)
 *                | [< >] -> e1 *)

and p_exp3 e1 s =3D
  match Stream.peek s with
  | Some (Kwd "+") -> Stream.junk s; let e2 =3D p_exp s in EBinop("+", e1, =
e2)
  | Some (Kwd "-") -> Stream.junk s; let e2 =3D p_exp s in EBinop("-", e1, =
e2)
  | _ -> e1

let parse s =3D s |> lexer |> p_exp


Le 25 juil. 2019 =E0 13:42, Gabriel Scherer <gabriel.scherer@gmail.com> a =
=E9crit :

> Hi,
>=20
> The parser from https://github.com/jserot/lascar/blob/master/src/lib/fsm_=
expr.ml seems fairly trivial, have you considered just rewriting it to use =
the functions of the Stream primitives directly?
>=20
> For example, roughly (I have not tried to type-check or test the code),
>=20
>     let rec aux =3D parser
>     | [< 'Int n when n<0; t=3Daux >] -> [< 'Kwd "-"; 'Int (-n); t >]
>     | [< 'h; t=3Daux >] -> [< 'h; t >]
>     | [< >] -> [< >] in
>=20
> would become
>=20
>     let aux s =3D
>       let next =3D ref [] in
>       Stream.from @@ fun _ ->
>         match !next with
>         | tok::toks -> next :=3D toks; Some tok
>         | [] -> match Stream.next with
>                 | exception Stream.Failure -> None
>                 | Int n when n < 0 ->
>                   next :=3D [Int (-n)];
>                   Some (Kwd "-")
>                 | tok -> Some tok
>=20=20
> and
>=20
>     let rec p_exp0  =3D parser
>     | [< 'Int n >] -> EConst n
>     | [< 'Ident i >] -> EVar i
>     | [< 'Kwd "("; e=3Dp_exp ; 'Kwd ")" >] -> e=20=20=20=20=20=20=20=20
>=20
> becomes
>=20
>     let rec p_exp0 s =3D match Stream.next s with
>     | Int n -> EConst n
>     | Ident i -> EVar i
>     | Kwd "(" ->
>       let e =3D p_exp s in
>       match Stream.peek s with
>       | Some (Kwd ")") -> Stream.junk s; e
>       | _ -> raise Stream.Failure
>=20
> This is not exactly exciting code to write, but it's not a lot of work ei=
ther for such a simple grammar.
>=20
> On Thu, Jul 25, 2019 at 12:28 PM Jocelyn S=E9rot <jocelyn.serot@uca.fr> w=
rote:
> HI Daniil,
>=20
> Thanks for the example. It clearly shows how to embed a Menhir-specified =
parser into an existing program.
>=20
> I still think, however that using Menhir for parsing arithmetic expressio=
ns is a bit overkill.
>=20
> I=92m having a look at Angstrom (and all the other parser combinator libs=
 cited on the corresp. page).
> It seems simpler.=20
>=20
> Jocelyn
>=20
> Le 24 juil. 2019 =E0 17:31, Daniil Baturin <daniil@baturin.org> a =E9crit=
 :
>=20
> > Hi Jocelyn,
> >=20
> > I've completed the first version of my project, so now I can start
> > looking into this again!
> >=20
> > There's a third option: parser combinators like angstrom.
> > My experience with Menhir is very positive though. After initial
> > struggle, I came to like its new incremental API and declarative error
> > reporting.
> >=20
> > Here's my parser for an extended BNF:
> > Menhir grammar:
> > https://github.com/dmbaturin/bnfgen/blob/master/src/bnf_parser.mly
> > Parser driver that feeds it tokens:
> > https://github.com/dmbaturin/bnfgen/blob/master/src/parse_bnf.ml
> > Error messages:
> > https://github.com/dmbaturin/bnfgen/blob/master/src/bnf_parser.messages
> > Error message module build:
> > https://github.com/dmbaturin/bnfgen/blob/master/src/dune#L6-L8
> >=20
> > On 7/24/19 10:10 PM, Jocelyn S=E9rot wrote:
> >> Hi Daniil (and everyone interested by the subject),
> >>=20
> >> Did you have a closer look at this ?=20
> >>=20
> >> I=92m still hesitating between these three approaches for replacing th=
e implementation of the small arithm expression parser used in Lascar [1] :
> >>=20
> >> i. rewrite it using the basic fns provided by the Stream library (pro:=
 no additionnal dependency, cons: not so trivial..)
> >>=20
> >> ii. replace camlp4 by camlp5 (pro: straightforward, cons: long term ma=
intainability of camlp5 (?))=20
> >>=20
> >> iii. rewrite it using ocamlex/menhir and embed it in the main code (pr=
o: =AB standard =BB soon; cons: a bit heavy)
> >>=20
> >> Jocelyn
> >>=20
> >> [1] https://github.com/jserot/lascar/blob/master/src/lib/fsm_expr.ml, =
lines 70=96112
> >>=20
> >> Le 2 juil. 2019 =E0 11:25, Daniil Baturin <daniil@baturin.org> a =E9cr=
it :
> >>=20
> >>> Hi Jocelyn,
> >>> Camlp5 is still sort of maintained, but I don't think it's going to be
> >>> developed beyond compatibility updates.
> >>> For syntax extensions, everyone is switching to PPX.
> >>>=20
> >>> From a quick look, it seems like the only bit of camlp4 you use is
> >>> stream expressions.
> >>> This is one of the things PPX can't do (on purpose, since it doesn't
> >>> allow _arbitrary_ extensions),
> >>> but I don't think just using streams directly is going to make code m=
uch
> >>> longer.
> >>>=20
> >>> Or I missed some other camlp4 bits?
> >>>=20
> >>> I'm ready to work on a patch if you are open to it.
> >>>=20
> >>> On 7/2/19 1:44 PM, Jocelyn S=E9rot wrote:
> >>>> Le 29 juin 2019 =E0 17:15, Daniil Baturin <daniil@baturin.org> a =E9=
crit :
> >>>>=20
> >>>>> Perhaps we should make some coordinated effort to help them.
> >>>>> I've just sent a pull request to the ocamldot maintainer that enabl=
es
> >>>>> the graphviz files parsing and printing modules
> >>>>> to build and work with 4.08. The GTK parts have their own issues.
> >>>>> Next I'm going to look into LASCAR/RFSM (packages that interest me =
first ;).
> >>>>>=20
> >>>> Hi Daniil,
> >>>>=20
> >>>> I=92ve been been thinking of removing the dependency of Lascar and R=
FSM on camlp4 for a while.
> >>>> Is switching to CamlP5 a good alternative ?=20
> >>>>=20
> >>>> Jocelyn
> >>>>=20
> >>>>=20
> >>>=20
> >=20
> >=20
>=20
>=20


--Apple-Mail=_1B82EDD0-E023-4DF1-AF8F-DBF3BA409BB3
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=windows-1252

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dwindows-1252"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-=
mode: space; -webkit-line-break: after-white-space;">Thanks for the suggest=
ion, Gabriel.<div><br></div><div>It is indeed less tiresome that i had imag=
ined.</div><div><br></div><div>I attach the corresponding full code (with o=
riginal camlp4 formulation in comment).</div><div>Handling of the minus ope=
rator is here handled before parsing; this is not a problem since such a pa=
rser is supposed to be called on very small strings in practice.</div><div>=
<br></div><div>Jocelyn</div><div><br></div><div>ps : i=92m still wondering =
whether some library and/or ppx-based &nbsp;generic (afap) implementation o=
f Camlp4 stream parsers is possible..</div><div><br></div><div><div><font f=
ace=3D"Courier"><span style=3D"font-size: 11px;">8&lt;=97=97 Stream-based p=
arser for simple arithmetic expressions (with non-negative integers)</span>=
</font></div><div><font face=3D"Courier"><span style=3D"font-size: 11px;"><=
br></span></font></div><div><font face=3D"Courier"><span style=3D"font-size=
: 11px;">type ident =3D string&nbsp;</span></font></div><div style=3D"font-=
size: 11px;"><font face=3D"Courier"><br></font></div><div style=3D"font-siz=
e: 11px;"><font face=3D"Courier">type value =3D int&nbsp;</font></div><div =
style=3D"font-size: 11px;"><font face=3D"Courier"><br></font></div><div sty=
le=3D"font-size: 11px;"><font face=3D"Courier">type t =3D&nbsp;</font></div=
><div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; EConst of va=
lue &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(** Constants *) &nbsp;=
&nbsp;</font></div><div style=3D"font-size: 11px;"><font face=3D"Courier">|=
 EVar of ident &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(** I=
nput, output or local variable *)</font></div><div style=3D"font-size: 11px=
;"><font face=3D"Courier">| EBinop of string * t * t &nbsp; &nbsp; (** Bina=
ry operation *)</font></div><div style=3D"font-size: 11px;"><font face=3D"C=
ourier"><br></font></div><div style=3D"font-size: 11px;"><font face=3D"Cour=
ier">let keywords =3D ["+"; "-"; "*"; "/"; "("; ")"]</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier"><br></font></div><div style=3D=
"font-size: 11px;"><font face=3D"Courier">let mk_binary_minus s =3D s |&gt;=
 String.split_on_char '-' |&gt; String.concat " - "</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nbsp; &nbsp; &nbsp; &n=
bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier">let lexer s =3D s |&gt; mk_bin=
ary_minus |&gt; Stream.of_string |&gt; Genlex.make_lexer keywords&nbsp;</fo=
nt></div><div style=3D"font-size: 11px;"><font face=3D"Courier"><br></font>=
</div><div style=3D"font-size: 11px;"><font face=3D"Courier">open Genlex</f=
ont></div><div style=3D"font-size: 11px;"><font face=3D"Courier"><br></font=
></div><div style=3D"font-size: 11px;"><font face=3D"Courier">(* let rec p_=
exp0 &nbsp;=3D parser</font></div><div style=3D"font-size: 11px;"><font fac=
e=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbs=
p; | [&lt; 'Int n &gt;] -&gt; EConst n</font></div><div style=3D"font-size:=
 11px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &=
nbsp; &nbsp; &nbsp; | [&lt; 'Ident i &gt;] -&gt; EVar i</font></div><div st=
yle=3D"font-size: 11px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | [&lt; 'Kwd "("; e=3Dp_exp ; 'Kwd ")"=
 &gt;] -&gt; e *)</font></div><div style=3D"font-size: 11px;"><font face=3D=
"Courier"><br></font></div><div style=3D"font-size: 11px;"><font face=3D"Co=
urier">let rec p_exp0 s =3D</font></div><div style=3D"font-size: 11px;"><fo=
nt face=3D"Courier">&nbsp; match Stream.next s with</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nbsp; | Int n -&gt; EC=
onst n</font></div><div style=3D"font-size: 11px;"><font face=3D"Courier">&=
nbsp; &nbsp; | Ident i -&gt; EVar i</font></div><div style=3D"font-size: 11=
px;"><font face=3D"Courier">&nbsp; &nbsp; | Kwd "(" -&gt;</font></div><div =
style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nbsp; &nbsp; &nbs=
p;let e =3D p_exp s in</font></div><div style=3D"font-size: 11px;"><font fa=
ce=3D"Courier">&nbsp; &nbsp; &nbsp; &nbsp;begin match Stream.peek s with</f=
ont></div><div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nb=
sp; &nbsp; &nbsp;| Some (Kwd ")") -&gt; Stream.junk s; e</font></div><div s=
tyle=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nbsp; &nbsp; &nbsp=
;| _ -&gt; raise Stream.Failure</font></div><div style=3D"font-size: 11px;"=
><font face=3D"Courier">&nbsp; &nbsp; &nbsp; &nbsp;end</font></div><div sty=
le=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; &nbsp; | _ -&gt; rais=
e Stream.Failure</font></div><div style=3D"font-size: 11px;"><font face=3D"=
Courier"><br></font></div><div style=3D"font-size: 11px;"><font face=3D"Cou=
rier">(* and p_exp1 &nbsp;=3D parser</font></div><div style=3D"font-size: 1=
1px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; | [&lt; e1=3Dp_exp0 ; rest &gt;] -&gt; p_exp2 &nbsp;e1 rest *)</font></=
div><div style=3D"font-size: 11px;"><font face=3D"Courier"><br></font></div=
><div style=3D"font-size: 11px;"><font face=3D"Courier">and p_exp1 s =3D</f=
ont></div><div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; let=
 e1 =3D p_exp0 s in</font></div><div style=3D"font-size: 11px;"><font face=
=3D"Courier">&nbsp; p_exp2 e1 s</font></div><div style=3D"font-size: 11px;"=
><font face=3D"Courier">&nbsp;&nbsp;</font></div><div style=3D"font-size: 1=
1px;"><font face=3D"Courier">(* and p_exp2 &nbsp;e1 =3D parser</font></div>=
<div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| [&lt; 'Kwd "*"; e2=3Dp_exp1 &n=
bsp;&gt;] -&gt; EBinop("*", e1, e2)</font></div><div style=3D"font-size: 11=
px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbs=
p; &nbsp; &nbsp;| [&lt; 'Kwd "/"; e2=3Dp_exp1 &nbsp;&gt;] -&gt; EBinop("/",=
 e1, e2)</font></div><div style=3D"font-size: 11px;"><font face=3D"Courier"=
>&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| [&lt; &gt=
;] -&gt; e1 *)</font></div><div style=3D"font-size: 11px;"><font face=3D"Co=
urier"><br></font></div><div style=3D"font-size: 11px;"><font face=3D"Couri=
er">and p_exp2 e1 s =3D</font></div><div style=3D"font-size: 11px;"><font f=
ace=3D"Courier">&nbsp; match Stream.peek s with</font></div><div style=3D"f=
ont-size: 11px;"><font face=3D"Courier">&nbsp; | Some (Kwd "*") -&gt; Strea=
m.junk s; let e2 =3D p_exp1 s in EBinop("*", e1, e2)</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; | Some (Kwd "/") -&gt; =
Stream.junk s; let e2 =3D p_exp1 s in EBinop("/", e1, e2)</font></div><div =
style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; | _ -&gt; e1</font=
></div><div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp;&nbsp;<=
/font></div><div style=3D"font-size: 11px;"><font face=3D"Courier">(* and p=
_exp &nbsp;=3D parser</font></div><div style=3D"font-size: 11px;"><font fac=
e=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| [&lt; e1=
=3Dp_exp1 ; rest &gt;] -&gt; p_exp3 &nbsp;e1 rest *)</font></div><div style=
=3D"font-size: 11px;"><font face=3D"Courier"><br></font></div><div style=3D=
"font-size: 11px;"><font face=3D"Courier">and p_exp s =3D</font></div><div =
style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; let e1 =3D p_exp1 =
s in p_exp3 e1 s</font></div><div style=3D"font-size: 11px;"><font face=3D"=
Courier">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp;</font></div><div style=3D"font-size: 11px;"><font face=3D"Courie=
r">(* and p_exp3 &nbsp;e1 =3D parser</font></div><div style=3D"font-size: 1=
1px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp;| [&lt; 'Kwd "+"; e2=3Dp_exp &nbsp;&gt;] -&gt; EBinop("+",=
 e1, e2)</font></div><div style=3D"font-size: 11px;"><font face=3D"Courier"=
>&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| [&lt; 'Kw=
d "-"; e2=3Dp_exp &nbsp;&gt;] -&gt; EBinop("-", e1, e2)</font></div><div st=
yle=3D"font-size: 11px;"><font face=3D"Courier">&nbsp;* &nbsp; &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| [&lt; &gt;] -&gt; e1 *)</font></div><=
div style=3D"font-size: 11px;"><font face=3D"Courier"><br></font></div><div=
 style=3D"font-size: 11px;"><font face=3D"Courier">and p_exp3 e1 s =3D</fon=
t></div><div style=3D"font-size: 11px;"><font face=3D"Courier">&nbsp; match=
 Stream.peek s with</font></div><div style=3D"font-size: 11px;"><font face=
=3D"Courier">&nbsp; | Some (Kwd "+") -&gt; Stream.junk s; let e2 =3D p_exp =
s in EBinop("+", e1, e2)</font></div><div style=3D"font-size: 11px;"><font =
face=3D"Courier">&nbsp; | Some (Kwd "-") -&gt; Stream.junk s; let e2 =3D p_=
exp s in EBinop("-", e1, e2)</font></div><div style=3D"font-size: 11px;"><f=
ont face=3D"Courier">&nbsp; | _ -&gt; e1</font></div><div style=3D"font-siz=
e: 11px;"><font face=3D"Courier"><br></font></div><div style=3D"font-size: =
11px;"><font face=3D"Courier">let parse s =3D s |&gt; lexer |&gt; p_exp</fo=
nt></div></div><div><br></div><div><br><div><div>Le 25 juil. 2019 =E0 13:42=
, Gabriel Scherer &lt;<a href=3D"mailto:gabriel.scherer@gmail.com">gabriel.=
scherer@gmail.com</a>&gt; a =E9crit :</div><br class=3D"Apple-interchange-n=
ewline"><blockquote type=3D"cite"><div dir=3D"ltr"><div>Hi,</div><div><br><=
/div><div>The parser from <a href=3D"https://github.com/jserot/lascar/blob/=
master/src/lib/fsm_expr.ml">https://github.com/jserot/lascar/blob/master/sr=
c/lib/fsm_expr.ml</a> seems fairly trivial, have you considered just rewrit=
ing it to use the functions of the Stream primitives directly?</div><div><b=
r></div><div>For example, roughly (I have not tried to type-check or test t=
he code),</div><div><table class=3D"gmail-highlight gmail-tab-size gmail-js=
-file-line-container"><tbody><tr><td id=3D"gmail-LC82" class=3D"gmail-blob-=
code gmail-blob-code-inner gmail-js-file-line"></td></tr><tr></tr></tbody><=
/table><table class=3D"gmail-highlight gmail-tab-size gmail-js-file-line-co=
ntainer"><tbody><tr><td id=3D"gmail-LC83" class=3D"gmail-blob-code gmail-bl=
ob-code-inner gmail-js-file-line">  <span class=3D"gmail-pl-k"><br>&nbsp; &=
nbsp; let rec aux =3D parser<br>&nbsp; &nbsp; | [&lt; 'Int n when n&lt;0; t=
=3Daux &gt;] -&gt; [&lt; 'Kwd "-"; 'Int (-n); t &gt;]<br>&nbsp; &nbsp; | [&=
lt; 'h; t=3Daux &gt;] -&gt; [&lt; 'h; t &gt;]<br>&nbsp; &nbsp; | [&lt; &gt;=
] -&gt; [&lt; &gt;] in<br></span></td></tr><tr></tr></tbody></table></div><=
div><span class=3D"gmail-pl-k"><br></span></div><div><span class=3D"gmail-p=
l-k">would become<br></span></div><div><br></div><div>&nbsp; &nbsp; let aux=
 s =3D<br>&nbsp; &nbsp; &nbsp; let next =3D ref [] in<br>&nbsp; &nbsp; &nbs=
p; Stream.from @@ fun _ -&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; match !next wi=
th<br>&nbsp; &nbsp; &nbsp; &nbsp; | tok::toks -&gt; next :=3D toks; Some to=
k<br>&nbsp; &nbsp; &nbsp; &nbsp; | [] -&gt; match Stream.next with<br>&nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | exception Stream.Failu=
re -&gt; None<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | =
Int n when n &lt; 0 -&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbs=
p; &nbsp; &nbsp; next :=3D [Int (-n)];<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; Some (Kwd "-")<br>&nbsp; &nbsp; &nbsp; &nbsp;=
 &nbsp; &nbsp; &nbsp; &nbsp; | tok -&gt; Some tok<br></div><div><span class=
=3D"gmail-pl-k">&nbsp;</span></div><div><span class=3D"gmail-pl-k">and</spa=
n></div><div><span class=3D"gmail-pl-k"><br></span></div><div><span class=
=3D"gmail-pl-k">&nbsp; &nbsp; let rec p_exp0 &nbsp;=3D parser<br>&nbsp; &nb=
sp; | [&lt; 'Int n &gt;] -&gt; EConst n<br>&nbsp; &nbsp; | [&lt; 'Ident i &=
gt;] -&gt; EVar i<br>&nbsp; &nbsp; | [&lt; 'Kwd "("; e=3Dp_exp ; 'Kwd ")" &=
gt;] -&gt; e &nbsp; &nbsp; &nbsp; &nbsp;<br></span></div><div><br><span cla=
ss=3D"gmail-pl-k"></span></div><div><span class=3D"gmail-pl-k">becomes<br><=
/span></div><div><span class=3D"gmail-pl-k"><br></span></div><div><span cla=
ss=3D"gmail-pl-k">&nbsp; &nbsp; let rec p_exp0 s =3D match Stream.next s wi=
th<br>&nbsp; &nbsp; | Int n -&gt; EConst n<br>&nbsp; &nbsp; | Ident i -&gt;=
 EVar i<br>&nbsp; &nbsp; | Kwd "(" -&gt;<br>&nbsp; &nbsp; &nbsp; let e =3D =
p_exp s in<br>&nbsp; &nbsp; &nbsp; match Stream.peek s with<br>&nbsp; &nbsp=
; &nbsp; | Some (Kwd ")") -&gt; Stream.junk s; e<br>&nbsp; &nbsp; &nbsp; | =
_ -&gt; raise Stream.Failure<br><br></span></div><div>This is not exactly e=
xciting code to write, but it's not a lot of work either for such a simple =
grammar.<br></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr" cla=
ss=3D"gmail_attr">On Thu, Jul 25, 2019 at 12:28 PM Jocelyn S=E9rot &lt;<a h=
ref=3D"mailto:jocelyn.serot@uca.fr">jocelyn.serot@uca.fr</a>&gt; wrote:<br>=
</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;b=
order-left:1px solid rgb(204,204,204);padding-left:1ex">HI Daniil,<br>
<br>
Thanks for the example. It clearly shows how to embed a Menhir-specified pa=
rser into an existing program.<br>
<br>
I still think, however that using Menhir for parsing arithmetic expressions=
 is a bit overkill.<br>
<br>
I=92m having a look at Angstrom (and all the other parser combinator libs c=
ited on the corresp. page).<br>
It seems simpler. <br>
<br>
Jocelyn<br>
<br>
Le 24 juil. 2019 =E0 17:31, Daniil Baturin &lt;<a href=3D"mailto:daniil@bat=
urin.org" target=3D"_blank">daniil@baturin.org</a>&gt; a =E9crit :<br>
<br>
&gt; Hi Jocelyn,<br>
&gt; <br>
&gt; I've completed the first version of my project, so now I can start<br>
&gt; looking into this again!<br>
&gt; <br>
&gt; There's a third option: parser combinators like angstrom.<br>
&gt; My experience with Menhir is very positive though. After initial<br>
&gt; struggle, I came to like its new incremental API and declarative error=
<br>
&gt; reporting.<br>
&gt; <br>
&gt; Here's my parser for an extended BNF:<br>
&gt; Menhir grammar:<br>
&gt; <a href=3D"https://github.com/dmbaturin/bnfgen/blob/master/src/bnf_par=
ser.mly" rel=3D"noreferrer" target=3D"_blank">https://github.com/dmbaturin/=
bnfgen/blob/master/src/bnf_parser.mly</a><br>
&gt; Parser driver that feeds it tokens:<br>
&gt; <a href=3D"https://github.com/dmbaturin/bnfgen/blob/master/src/parse_b=
nf.ml" rel=3D"noreferrer" target=3D"_blank">https://github.com/dmbaturin/bn=
fgen/blob/master/src/parse_bnf.ml</a><br>
&gt; Error messages:<br>
&gt; <a href=3D"https://github.com/dmbaturin/bnfgen/blob/master/src/bnf_par=
ser.messages" rel=3D"noreferrer" target=3D"_blank">https://github.com/dmbat=
urin/bnfgen/blob/master/src/bnf_parser.messages</a><br>
&gt; Error message module build:<br>
&gt; <a href=3D"https://github.com/dmbaturin/bnfgen/blob/master/src/dune#L6=
-L8" rel=3D"noreferrer" target=3D"_blank">https://github.com/dmbaturin/bnfg=
en/blob/master/src/dune#L6-L8</a><br>
&gt; <br>
&gt; On 7/24/19 10:10 PM, Jocelyn S=E9rot wrote:<br>
&gt;&gt; Hi Daniil (and everyone interested by the subject),<br>
&gt;&gt; <br>
&gt;&gt; Did you have a closer look at this ? <br>
&gt;&gt; <br>
&gt;&gt; I=92m still hesitating between these three approaches for replacin=
g the implementation of the small arithm expression parser used in Lascar [=
1] :<br>
&gt;&gt; <br>
&gt;&gt; i. rewrite it using the basic fns provided by the Stream library (=
pro: no additionnal dependency, cons: not so trivial..)<br>
&gt;&gt; <br>
&gt;&gt; ii. replace camlp4 by camlp5 (pro: straightforward, cons: long ter=
m maintainability of camlp5 (?)) <br>
&gt;&gt; <br>
&gt;&gt; iii. rewrite it using ocamlex/menhir and embed it in the main code=
 (pro: =AB standard =BB soon; cons: a bit heavy)<br>
&gt;&gt; <br>
&gt;&gt; Jocelyn<br>
&gt;&gt; <br>
&gt;&gt; [1] <a href=3D"https://github.com/jserot/lascar/blob/master/src/li=
b/fsm_expr.ml" rel=3D"noreferrer" target=3D"_blank">https://github.com/jser=
ot/lascar/blob/master/src/lib/fsm_expr.ml</a>, lines 70=96112<br>
&gt;&gt; <br>
&gt;&gt; Le 2 juil. 2019 =E0 11:25, Daniil Baturin &lt;<a href=3D"mailto:da=
niil@baturin.org" target=3D"_blank">daniil@baturin.org</a>&gt; a =E9crit :<=
br>
&gt;&gt; <br>
&gt;&gt;&gt; Hi Jocelyn,<br>
&gt;&gt;&gt; Camlp5 is still sort of maintained, but I don't think it's goi=
ng to be<br>
&gt;&gt;&gt; developed beyond compatibility updates.<br>
&gt;&gt;&gt; For syntax extensions, everyone is switching to PPX.<br>
&gt;&gt;&gt; <br>
&gt;&gt;&gt; From a quick look, it seems like the only bit of camlp4 you us=
e is<br>
&gt;&gt;&gt; stream expressions.<br>
&gt;&gt;&gt; This is one of the things PPX can't do (on purpose, since it d=
oesn't<br>
&gt;&gt;&gt; allow _arbitrary_ extensions),<br>
&gt;&gt;&gt; but I don't think just using streams directly is going to make=
 code much<br>
&gt;&gt;&gt; longer.<br>
&gt;&gt;&gt; <br>
&gt;&gt;&gt; Or I missed some other camlp4 bits?<br>
&gt;&gt;&gt; <br>
&gt;&gt;&gt; I'm ready to work on a patch if you are open to it.<br>
&gt;&gt;&gt; <br>
&gt;&gt;&gt; On 7/2/19 1:44 PM, Jocelyn S=E9rot wrote:<br>
&gt;&gt;&gt;&gt; Le 29 juin 2019 =E0 17:15, Daniil Baturin &lt;<a href=3D"m=
ailto:daniil@baturin.org" target=3D"_blank">daniil@baturin.org</a>&gt; a =
=E9crit :<br>
&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt;&gt;&gt; Perhaps we should make some coordinated effort to help=
 them.<br>
&gt;&gt;&gt;&gt;&gt; I've just sent a pull request to the ocamldot maintain=
er that enables<br>
&gt;&gt;&gt;&gt;&gt; the graphviz files parsing and printing modules<br>
&gt;&gt;&gt;&gt;&gt; to build and work with 4.08. The GTK parts have their =
own issues.<br>
&gt;&gt;&gt;&gt;&gt; Next I'm going to look into LASCAR/RFSM (packages that=
 interest me first ;).<br>
&gt;&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt;&gt; Hi Daniil,<br>
&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt;&gt; I=92ve been been thinking of removing the dependency of La=
scar and RFSM on camlp4 for a while.<br>
&gt;&gt;&gt;&gt; Is switching to CamlP5 a good alternative ? <br>
&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt;&gt; Jocelyn<br>
&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt;&gt; <br>
&gt;&gt;&gt; <br>
&gt; <br>
&gt; <br>
<br>
<br>
</blockquote></div>
</blockquote></div><br></div></body></html>=

--Apple-Mail=_1B82EDD0-E023-4DF1-AF8F-DBF3BA409BB3--
