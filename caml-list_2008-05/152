Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 63E8EBBCA
	for <caml-list@yquem.inria.fr>; Sat, 10 May 2008 03:34:07 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlUDAKOYJEjUnw6Gb2dsb2JhbACCMY9YAQwFAgQHEwOYeA
X-IronPort-AV: E=Sophos;i="4.27,463,1204498800"; 
   d="scan'208";a="12055690"
Received: from pih-relay08.plus.net ([212.159.14.134])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 10 May 2008 03:34:07 +0200
Received: from [80.229.56.224] (helo=beast.local)
	 by pih-relay08.plus.net with esmtp (Exim) id 1JudyQ-0006Z2-2Q; Sat, 10 May 2008 02:34:06 +0100
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: "Ulf Wiger (TN/EAB)" <ulf.wiger@ericsson.com>
Subject: Re: [Caml-list] Re: Why OCaml sucks
Date: Sat, 10 May 2008 02:29:02 +0100
User-Agent: KMail/1.9.9
References: <200805090139.54870.jon@ffconsultancy.com> <200805091846.32238.jon@ffconsultancy.com> <4824953A.4000207@ericsson.com>
In-Reply-To: <4824953A.4000207@ericsson.com>
Cc: caml-list@yquem.inria.fr
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Message-Id: <200805100229.02201.jon@ffconsultancy.com>
X-Plusnet-Relay: 0df3df553c9ca6f7cbb187b9383f6979
X-Spam: no; 0.00; ocaml:01 parallelism:01 mutable:01 erlang:01 mutable:01 achieves:01 erlang:01 uniformly:01 mutation:01 locality:01 inherently:01 scalable:01 parallelism:01 scalable:01 mutation:01 

On Friday 09 May 2008 19:17:30 Ulf Wiger wrote:
> Jon Harrop skrev:
> > On Friday 09 May 2008 14:00:52 you wrote:
> >> Jon Harrop skrev:
> >>> . Parallelism is for performance and performance
> >>>
> >>  >   requires mutable data structures.
> >>
> >> I disagree. SMP Erlang has no mutable data structures,
> >> but achieves very good scalability anyway.
> >
> > Scalability != performance. For CPU intensive tasks,
> >
> > Erlang is uniformly slow.
>
> I don't see how you can say that. If you introduce the
> restriction that there can be only one CPU, then this
> might be true.

On 1 CPU Erlang is currently ~5x slower in this context. So even if we ignore 
the cost of message passing we know Erlang cannot be competitive for <6 
cores. In fact, you find that the cost of message passing over mutation makes 
Erlang not competitive for any existing computers in this context, even 256 
CPU shared memory supercomputers.

This is why Erlang has not (and will not) penetrate the market of scientists 
programming shared memory supercomputers. For the same reason, Erlang is not 
relevant for exploiting multicore: its remit is massive concurrency which is 
a completely different problem.

The theoretical scaling of Erlang's performance in terms of asymptotic 
complexity is irrelevant because we're still looking at small numbers (<<256) 
of cores and the prefactor is huge. Moreover, this will never change: even 
when we have 1,024-core machines there will still be locality effects best 
exploited by sharing memory between physically-close cores.

So neither approach is a panacea but concurrent GC is essential now and 
message passing will be essential in 10 years.

> Some applications are very difficult to 
> scale to multiple CPUs, but others are inherently
> scalable. For some problems, mutable data structures
> make all the difference, and in others, they just make
> a mess of things.
>
> If you say "parallelism is for performance", you imply
> that the program is scalable, and that it actually makes
> a difference to add more CPUs. In this case, mutable
> the presence of data structures will make scaling more
> difficult.

That is commonly claimed by the proponents of alternative approaches (purity, 
STM, message passing etc.) but I have found it to be untrue in the 
case of F# although I can believe it applies when there is uncontrolled 
mutation.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/products/?e

