Return-Path: <berke.durak@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id A8466BBCA
	for <caml-list@yquem.inria.fr>; Sat, 10 May 2008 11:09:07 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmcEAAoDJUjRVcbuc2dsb2JhbACCNzSPHgEMAwQECQ8FkwSFSA
X-IronPort-AV: E=Sophos;i="4.27,464,1204498800"; 
   d="scan'208";a="12063273"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 10 May 2008 11:09:07 +0200
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id m4A997Y9012727
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Sat, 10 May 2008 11:09:07 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AmcEAAoDJUjRVcbuc2dsb2JhbACCNzSPHgEMAwQECQ8FkwSFSA
X-IronPort-AV: E=Sophos;i="4.27,464,1204498800"; 
   d="scan'208";a="12063271"
Received: from rv-out-0506.google.com ([209.85.198.238])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 10 May 2008 11:09:05 +0200
Received: by rv-out-0506.google.com with SMTP id k40so1600428rvb.57
        for <caml-list@inria.fr>; Sat, 10 May 2008 02:09:04 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:mime-version:content-type;
        bh=z7iErHoDJospjs8fRmx50q3USsrAFnxKdXqZSTai99Q=;
        b=QsLvKumS3YmBXgl0RtzsP8VMd6RBl9u4Wtg7EEAC7wSGNOFcmwUYhOlRT3+MNpyvVfwyJGObTRoEh4LzZWxXJFfmp4KFxcQrWfejKq+tuY7YqBNdQ0qpDQwj+jSY/51WfZfE5K6TPeYuZ1813TRL0vXCsPSqgBhe+UsuT0Vi+PY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:mime-version:content-type;
        b=flX1lPR6VwrseXeYMAd8/r80vtuH6JeFdoeklPZ3Um8k1Kjd1uT9HF8cIODKtJGvydnmLiKpekFzbXl69OEZyDQ3Z50gUo+9uYYzaKh5F7ythjtIh1Vl+jfwLql6T5bsnfDZQnimlfkTHIPyVtSO/7yIp9O8ipdwlcFF4RYEvSQ=
Received: by 10.141.23.7 with SMTP id a7mr2627666rvj.5.1210410544817;
        Sat, 10 May 2008 02:09:04 -0700 (PDT)
Received: by 10.140.193.3 with HTTP; Sat, 10 May 2008 02:09:04 -0700 (PDT)
Message-ID: <b903a8570805100209h39972043o22871faefbcf2d17@mail.gmail.com>
Date: Sat, 10 May 2008 11:09:04 +0200
From: "Berke Durak" <berke.durak@gmail.com>
To: "Richard Jones" <rich@annexia.org>
Subject: Re: Ancient, concurrency, etc.
Cc: caml-list@inria.fr
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_6143_1115318.1210410544816"
X-Miltered: at discorde with ID 48256633.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; berke:01 durak:01 berke:01 durak:01 threading:01 mutexes:01 ad-hoc:01 marshalling:01 marshaling:01 ocaml:01 ocaml:01 mlvalues:01 extern:01 intern:01 hashing:01 
X-Attachments: cset="UTF-8" cset="UTF-8" 

------=_Part_6143_1115318.1210410544816
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Sat, May 10, 2008 at 10:51 AM, Richard Jones <rich@annexia.org> wrote:

>
> > As you cannot mutate anything that is ancient (since it might be
> > concurrently
> > accessed),
>
> There are various restrictions on mutating the ancient data, which are
> explained in the README.  It is not true that ancient data is
> completely immutable, just that you really need to understand what
> you're doing in order to do it correctly.


I'm not talking of mutating atomic values here.

I'm saying that you certainly can't have the GC or someone else mutate the
data for
traversal purposes.


>  There are additional
> restrictions to mutating [any] data concurrently, but I didn't explain
> those because they are obvious, and can be solved with standard
> threading techniques (mutexes, etc.)..
>
> > you cannot mark or modify them in-place for ad-hoc marshalling or
> > deep copying.  Is that correct?
>
> I'm not sure what this means.  I haven't tried to Marshal ancient
> data, because ancient data can already be persisted, so marshaling it
> doesn't make much sense.

'Deep copying' of ancient data can be done just like deep copying any
> other OCaml value.


As in: it can't be done polymorphically, unless you resort to Marshal, which
doesn't work on ancient data.


> > Comparison does not mark (and thus does not work on cyclic structures).
> > Does it work on values in the ancient heap (I'm not talking of handles
> > here)?
>
> Your use of 'value', 'handle' etc. is confusing me.


By handle I meant values behind of type 'a ancient.


> I suggest you
> take a look at how OCaml values are stored (eg. <caml/mlvalues.h> is a
> good place to start).


I suggest you look at extern.c & intern.c to see how Ocaml values are
marshalled.
A joke of course, I assume you already know.

Anyhow, the polymorphic primitives (like %compare) don't work, just
> because they make the assumption that anything outside the normal
> OCaml heap is incomparable


And that can be quite annoying, so we'd like a way to take values of out
the ancient heap.


> , but you can certainly write your own
> comparison functions to replace those, eg. comparing
> character-by-character for strings.


Not. Polymorphic.


> This has nothing to do with 'marking'.


Well, walking over a value graph, either for complete
hashing/comparison/copying or
serialization requires marking unless your graph is a tree.

> So it seems that adding a generic copy-out-of-the-ancient heap function
> > (which marks in a private area) would be worthwhile.  Should not be too
> > difficult.
>
> As I said earlier, you can just copy values from the ancient heap as
> you would any other value, eg. using { ... with ... } syntax or
> Array.copy / String.copy etc.


That is not polymorphic.

Let's say this again.  Values on the ancient heap look just like
> values anywhere else in the program.  You can pass them to functions,
> print them out, add them up, do whatever else you would normally do,
> with very few restrictions.  The differences are:
>
>  - the polymorphic primitives don't work (so you can't compare or hash
> them)


That's very annoying for what I had in mind: communication for concurrency.


>   - they don't get garbage collected


Again, if you want to store an ancient value in a new one, you're toast.

- you should be very careful about mutating them


That I can understand.  Something like

  val Ancient.get : int -> 'a(immutable)

would have been nice.

-- 
Berke

------=_Part_6143_1115318.1210410544816
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Sat, May 10, 2008 at 10:51 AM, Richard Jones &lt;<a href="mailto:rich@annexia.org">rich@annexia.org</a>&gt; wrote:<br><div class="gmail_quote"><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div class="Ih2E3d"><br>
&gt; As you cannot mutate anything that is ancient (since it might be<br>
&gt; concurrently<br>
&gt; accessed),<br>
<br>
</div>There are various restrictions on mutating the ancient data, which are<br>
explained in the README. &nbsp;It is not true that ancient data is<br>
completely immutable, just that you really need to understand what<br>
you&#39;re doing in order to do it correctly.</blockquote><div><br>I&#39;m not talking of mutating atomic values here.<br><br>I&#39;m saying that you certainly can&#39;t have the GC or someone else mutate the data for<br>
traversal purposes.<br>&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"> &nbsp;There are additional<br>
restrictions to mutating [any] data concurrently, but I didn&#39;t explain<br>
those because they are obvious, and can be solved with standard<br>
threading techniques (mutexes, etc.)..<br>
<div class="Ih2E3d"><br>
&gt; you cannot mark or modify them in-place for ad-hoc marshalling or<br>
&gt; deep copying. &nbsp;Is that correct?<br>
<br>
</div>I&#39;m not sure what this means. &nbsp;I haven&#39;t tried to Marshal ancient<br>
data, because ancient data can already be persisted, so marshaling it<br>
doesn&#39;t make much sense.</blockquote><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
&#39;Deep copying&#39; of ancient data can be done just like deep copying any<br>
other OCaml value.</blockquote><div><br>As in: it can&#39;t be done polymorphically, unless you resort to Marshal, which<br>doesn&#39;t work on ancient data.<br>&nbsp;<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
&gt; Comparison does not mark (and thus does not work on cyclic structures).<br><div class="Ih2E3d">
&gt; Does it work on values in the ancient heap (I&#39;m not talking of handles<br>
&gt; here)?<br>
<br>
</div>Your use of &#39;value&#39;, &#39;handle&#39; etc. is confusing me.</blockquote><div><br>By handle I meant values behind of type &#39;a ancient.<br>&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
 I suggest you<br>
take a look at how OCaml values are stored (eg. &lt;caml/mlvalues.h&gt; is a<br>
good place to start).</blockquote><div><br>I suggest you look at extern.c &amp; intern.c to see how Ocaml values are marshalled.<br>A joke of course, I assume you already know.<br><br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">

Anyhow, the polymorphic primitives (like %compare) don&#39;t work, just<br>
because they make the assumption that anything outside the normal<br>
OCaml heap is incomparable</blockquote><div><br>And that can be quite annoying, so we&#39;d like a way to take values of out<br>the ancient heap.<br>&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
, but you can certainly write your own<br>
comparison functions to replace those, eg. comparing<br>
character-by-character for strings.</blockquote><div><br>Not. Polymorphic.<br>&nbsp;<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
This has nothing to do with &#39;marking&#39;.</blockquote><div><br>Well, walking over a value graph, either for complete hashing/comparison/copying or<br>serialization requires marking unless your graph is a tree.<br><br>
</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="Ih2E3d">&gt; So it seems that adding a generic copy-out-of-the-ancient heap function<br>

&gt; (which marks in a private area) would be worthwhile. &nbsp;Should not be too<br>
&gt; difficult.<br>
<br>
</div>As I said earlier, you can just copy values from the ancient heap as<br>
you would any other value, eg. using { ... with ... } syntax or<br>
Array.copy / String.copy etc.</blockquote><div><br>That is not polymorphic.<br><br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Let&#39;s say this again. &nbsp;Values on the ancient heap look just like<br>
values anywhere else in the program. &nbsp;You can pass them to functions,<br>
print them out, add them up, do whatever else you would normally do,<br>
with very few restrictions. &nbsp;The differences are:<br>
<br>
 &nbsp;- the polymorphic primitives don&#39;t work (so you can&#39;t compare or hash them)</blockquote><div><br>That&#39;s very annoying for what I had in mind: communication for concurrency.<br>&nbsp;<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
&nbsp;
 - they don&#39;t get garbage collected</blockquote><div>&nbsp;<br>Again, if you want to store an ancient value in a new one, you&#39;re toast.<br><br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
 - you should be very careful about mutating them</blockquote><div><br>That I can understand.&nbsp; Something like<br><br>&nbsp; val Ancient.get : int -&gt; &#39;a(immutable)<br><br>would have been nice.<br><br>-- <br>Berke<br><br>
</div></div>

------=_Part_6143_1115318.1210410544816--

