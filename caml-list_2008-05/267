Return-Path: <raould@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 2DEDABBB7
	for <caml-list@yquem.inria.fr>; Tue, 20 May 2008 00:38:07 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkMBAGKeMUjAXQIniGdsb2JhbACSMgEBAQ8glymEcA
X-IronPort-AV: E=Sophos;i="4.27,511,1204498800"; 
   d="scan'208";a="26367458"
Received: from concorde.inria.fr ([192.93.2.39])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 20 May 2008 00:38:05 +0200
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id m4JMc3S9031287
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Tue, 20 May 2008 00:38:05 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkQDAKSeMUjRVcbiY2dsb2JhbACSKBcDBAQJDpcvhHA
X-IronPort-AV: E=Sophos;i="4.27,511,1204498800"; 
   d="scan'208";a="12775212"
Received: from rv-out-0506.google.com ([209.85.198.226])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 20 May 2008 00:37:38 +0200
Received: by rv-out-0506.google.com with SMTP id k40so1362897rvb.57
        for <caml-list@inria.fr>; Mon, 19 May 2008 15:37:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        bh=UkqiSZyfcBqLUpfNJg/5vWAa4nDF0csfhmIJRe8whhg=;
        b=XgtVS2MiUC5lW6nCa1FPaAYD8pr+u+C97tuUntN0INU3IwRyVAucOXV9DrIwG8iFuP/X9QIWLBpWpYFw9QjOSMFc36zeELBtVAgbyFG4CtYO1IrphbA1CmmLfePzJRqEb4LpnQ27U1kWL7EfaqmXdVnKhJRSbXiCTu44rnPIMnA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=hFAxU+wMtsHSpfXZ8o5dNOQXkxU0CPlGPbCupPwk0n01VfenwldjeRUm7LMoHhJtyxjsJ5/6ms51J2lR1NQRoiABATUnjWNvFrxuGkEpfsKIWAlkvfQEAE/2NAf/iHLvJASlX7pZ+z9jHlwCrZNRzKcTsVaJTsI1yYsLaFDYY6o=
Received: by 10.141.163.12 with SMTP id q12mr3979434rvo.265.1211236657254;
        Mon, 19 May 2008 15:37:37 -0700 (PDT)
Received: by 10.141.20.5 with HTTP; Mon, 19 May 2008 15:37:37 -0700 (PDT)
Message-ID: <91a2ba3e0805191537g7fec02f9h7c46aa1be4b92270@mail.gmail.com>
Date: Mon, 19 May 2008 15:37:37 -0700
From: "Raoul Duke" <raould@gmail.com>
To: caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Re: Where's my non-classical shared memory concurrency technology?
In-Reply-To: <b903a8570805191524n4b23b6e9v8a834d4f8ff826de@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <b903a8570805180139i7dfe7526u799e82d5126c9f3@mail.gmail.com>
	 <4831686F.8010903@doc.ic.ac.uk>
	 <b903a8570805190524y64154ce0x758571764813bf79@mail.gmail.com>
	 <200805192247.09949.jon@ffconsultancy.com>
	 <b903a8570805191524n4b23b6e9v8a834d4f8ff826de@mail.gmail.com>
X-Miltered: at concorde with ID 4832014B.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; non-trivial:01 haskell:01 caml-list:01 precisely:01 locks:03 concurrency:04 generally:04 shared:06 uses:07 uses:07 memory:09 whereas:10 example:10 interesting:12 optimize:12 

> If the answer is STM, please show me some non-trivial application that
> uses it, preferably
> in an impure language.

yes, that would be interesting to see. presumably the example would
have to come from Haskell, Clojure, or classically some SQL database?
i am under the impression that STM is harder to optimize since
generally you don't know what the transactions collided on. whereas
with a "hot lock" you can see precisely what code uses that lock and
what it locks.

