Return-Path: <till.varoquaux@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.3 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id B7838BBCA
	for <caml-list@yquem.inria.fr>; Sun, 11 May 2008 16:46:24 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuECAP+jJkjRVcisc2dsb2JhbACSCQEMAwQECQ8FkmKEHw
X-IronPort-AV: E=Sophos;i="4.27,469,1204498800"; 
   d="scan'208";a="26049761"
Received: from wf-out-1314.google.com ([209.85.200.172])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 11 May 2008 16:46:02 +0200
Received: by wf-out-1314.google.com with SMTP id 28so2514103wfa.15
        for <caml-list@yquem.inria.fr>; Sun, 11 May 2008 07:46:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        bh=RNYd9lIqMMok1g7w0FKAZSXAfrI69A0eKqcj0pbtW2A=;
        b=kdg9hjU8yalpWP1hOKlE4J8RUK+tgWYZDkVgLUrd6A7GMm/TqRZFTkRdXj0Ql4Ez2rMsZEwWilAzO38FUZ33lXnZRdeiPFw23mKZ9E/QCBW9dpEiZvbB78RMOahQ/d68Ysi5R5OuKnjNm7I5p9q641Cl/Kb1e5V9Jp51RbX97Jo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QvVmTUqq26B9btX1HbJlj+0+FdHs3+/FStm1IARZ9JWv2DzEYVpVV4/w2Aj5i3fy12uEXc5p9GRPAFQiwzbBR+FipePG0kvUOeTLEufvL/Fkh2W/hSzcODF6GssakeoNwvwPAhTNnrazU5+48rPawwpGw8vhaSceQA9jlEesQ1c=
Received: by 10.142.53.5 with SMTP id b5mr2837065wfa.324.1210517160712;
        Sun, 11 May 2008 07:46:00 -0700 (PDT)
Received: by 10.142.115.3 with HTTP; Sun, 11 May 2008 07:46:00 -0700 (PDT)
Message-ID: <9d3ec8300805110746s3b4ad089p9d6572a491403384@mail.gmail.com>
Date: Sun, 11 May 2008 15:46:00 +0100
From: "Till Varoquaux" <till.varoquaux@gmail.com>
To: "Florent Monnier" <fmonnier@linux-nantes.fr.eu.org>
Subject: Re: [Caml-list] Hashtbl.remove legal within Hashtbl.iter for the same hash table?
Cc: caml-list@yquem.inria.fr,
	"David MENTRE" <dmentre@linux-france.org>
In-Reply-To: <200805111642.14164.fmonnier@linux-nantes.fr.eu.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <87tzh5kxhl.fsf@linux-france.org>
	 <200805111642.14164.fmonnier@linux-nantes.fr.eu.org>
X-Spam: no; 0.00; hashtbl:01 hashtbl:01 iter:01 hash:01 arrays:01 associative:01 iterating:01 iter:01 hash:01 pred:01 printf:01 printf:01 enum:01 enum:01 ocaml:01 

Hatables are arrays of associative lists. When you are iterating over
them removing any element you have already visited should be ok.
Removing elements you haven't visited yet could cause you to encounter
them anyhow.

Adding elements might trigger resizing and then things could get
sketchy (has tables are never down sized).

Till
On Sun, May 11, 2008 at 3:42 PM, Florent Monnier
<fmonnier@linux-nantes.fr.eu.org> wrote:
>> Hello,
> Hello David,
>
>> Probably a newbie question but anyway: is it allowed to do a
>> Hashtbl.remove while doing a Hashtbl.iter on the same hash table?
> I don't know if it is legal, but at least it works:
>
> # let h = Hashtbl.create 8 ;;
>
> # for i = 0 to pred 8 do
>    Hashtbl.add h i (char_of_int((int_of_char 'A') + i))
>  done ;;
>
> # Hashtbl.iter (fun i v ->
>      if i = 3 then Hashtbl.remove h 5;
>      Printf.printf " %d  %c\n" i v) h ;;
>  0  A
>  1  B
>  2  C
>  3  D
>  4  E
>  6  G
>  7  H
>
> But perhaps is it implementation dependant, in which case another
> implementation could react in a different way...
>
> The ExtLib reacts in the same way than the standard one.
>
>> More precisely, at one point while doing a "Hashtbl.iter f h" my
>> function "f" is called with something like "f k v". Can I do a
>> "Hashtbl.remove h k" within the body of "f"?
>
> it seems to work too when we remove the current itered key
> (with both implementations)
>
> I don't know if this module was written with in mind to allow this behavior,
> but for what I understand from the manual : "in-place modification" should
> mean that this structure is purely imperative and that this behavior is
> "legal/allowed".
> ______
>
> Perhaps a more sure method could be to get an enum from the hash table, and
> then iter on this enum (with the ExtLib), see below.
> With this method you are sure that *all* the keys will be itered, including
> the hidden contents, which is different than the previous example.
> Then you don't need to worry about a perhaps implementation dependant
> behavior.
>
> ocaml -I +/site-lib/extlib extLib.cma
> # open ExtLib ;;
> # open ExtHashtbl ;;
> # let h = Hashtbl.create 8 ;;
> # for i = 0 to pred 8 do
>    Hashtbl.add h i (char_of_int((int_of_char 'A') + i))
>  done ;;
>
> (* this one would not appear with the sdt Hashtbl.iter ! *)
> # Hashtbl.add h 6 'Z' ;;
>
> # let iter_all_hashtbl f h =
>    let keys = Hashtbl.keys h
>    and vals = Hashtbl.values h in
>    Enum.iter2 f keys vals
>  ;;
>
> # let f i v =
>    if i = 3 then Hashtbl.remove h 3;
>    Printf.printf " %d  %c\n" i v
>  ;;
>
> # iter_all_hashtbl f h ;;
>  0  A
>  1  B
>  2  C
>  3  D
>  4  E
>  5  F
>  6  Z
>  6  G
>  7  H
>
> # iter_all_hashtbl f h ;;
>  0  A
>  1  B
>  2  C
>  4  E
>  5  F
>  6  Z
>  6  G
>  7  H
>
> --
> Florent
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>



-- 
http://till-varoquaux.blogspot.com/

