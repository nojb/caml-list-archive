Return-Path: <ober.14@osu.edu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 0D241BBCA
	for <caml-list@yquem.inria.fr>; Mon, 12 May 2008 15:13:20 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqsDALLfJ0hDWxLCbmdsb2JhbACBU5A8Npd8
X-IronPort-AV: E=Sophos;i="4.27,473,1204498800"; 
   d="scan'208";a="10626214"
Received: from ip67-91-18-194.z18-91-67.customer.algx.net (HELO server1.bertec.net) ([67.91.18.194])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 12 May 2008 15:13:14 +0200
Received: from kuba.bertec.net (kuba.bertec.net [192.168.2.16])
	by server1.bertec.net (Postfix) with ESMTP id 7DE19CDFB6
	for <caml-list@yquem.inria.fr>; Mon, 12 May 2008 09:13:13 -0400 (EDT)
From: Kuba Ober <ober.14@osu.edu>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: Why OCaml sucks
Date: Mon, 12 May 2008 09:13:12 -0400
User-Agent: KMail/1.9.9
References: <200805090139.54870.jon@ffconsultancy.com> <74cabd9e0805082145p120ce487h6c1194d87f3f8396@mail.gmail.com>
In-Reply-To: <74cabd9e0805082145p120ce487h6c1194d87f3f8396@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200805120913.12803.ober.14@osu.edu>
X-Spam: no; 0.00; ocaml:01 parallelism:01 scalable:01 jocaml:01 haskell:01 haskell's:01 trolls:01 parallelism:01 cheers:01 propaganda:98 scsi:98 threads:01 threads:01 caml-list:01 functional:02 

> > 1. Lack of Parallelism: Yes, this is already a complete show stopper.
> > Exploiting multicores requires a scalable concurrent GC and message
> > passing (like JoCaml) is not a substitute. Unfortunately, this is now
> > true of all functional languages available for Linux, which is why we
> > have now migrated entirely to Windows and F#. I find it particularly
> > ironic that the Haskell community keep hyping the multicore capabilities
> > of pure code when the rudimentary GC in Haskell's only usable
> > implementation already stopped scaling.
>
> Fork?  For something like a raytracer, I do not see how threads would be
> any more useful than fork.  For the UI, the native threads suffice.  For
> windows...  well f*ck windows.  When was the last time you heard of a cool
> new windows app anyway?  MSFT has killed their own platform with bad
> engineering decisions.

I wouldn't generalize like that. Where I work we use Qt (a C++ framework) and 
can relatively trivially deploy on three major platforms (Linux, Windows and 
OS X). It's been a long time since I dealt directly with any Windows 
deficiencies per se. Trolls had to deal with them for sure, but they did the 
job so that I wouldn't have to. Most cool applications are multi-platform...

I can't comment about the original lack of parallelism issue, but the 
platform-bashing comment is just gibberish to me. I'm all for cool, inspiring 
platforms, and I use OS X and Linux exclusively at home/school, but Windows 
has made some headway in recent years and for me XP is quite reasonable as 
long as you don't deal with driver writing. The latter is still better than 
in WIN95 DDK days, but the toolset (apart from the F#-based tools) is 
obscenely out-of-date, just as it was in 1995. Then there are some regressed 
pieces of Linux which are quite a reality check given the whole "we support 
old hardware" propaganda (steer clear of SCSI tape drives), so for me 
personally I have equally many bash-Windows arguments as I have bash-Linux 
ones.

Cheers, Kuba

