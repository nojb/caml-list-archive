Return-Path: <nilekim@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=ADVANCE_FEE_1,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 35ED5BBCA
	for <caml-list@yquem.inria.fr>; Sat, 10 May 2008 20:39:24 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AowDACuIJUjRVZKwc2dsb2JhbACCNTaPHwEMAwQECQ8FknmFGw
X-IronPort-AV: E=Sophos;i="4.27,466,1204498800"; 
   d="scan'208";a="26033615"
Received: from wa-out-1112.google.com ([209.85.146.176])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 10 May 2008 20:39:22 +0200
Received: by wa-out-1112.google.com with SMTP id j4so2179027wah.3
        for <caml-list@yquem.inria.fr>; Sat, 10 May 2008 11:39:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:in-reply-to:mime-version:content-type:references:x-google-sender-auth;
        bh=fQbX4uMaztErDJ3Y+Vs/u0i6e5x6rXkziqbwJjViveU=;
        b=YlFBKr/bu8iL0lOEb3tywxHubMuS6wvOgdHz8wF6GbJZJTGV2CPEDEW7Ut30Rlddgo38KVTd5x6DJ8dINrCUj1FlNVp/s4IvCoqlZEy/u+dAYMxlubvMSfSVfJoafp/BRRvWPKz4gAfkaJciCG2aHjUZ2ao31Q0yEb4hilB9lag=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:sender:to:subject:in-reply-to:mime-version:content-type:references:x-google-sender-auth;
        b=u3oII9JP70JmnhnqCK6+RC3+PtuXRFRgf2mQ8Ee+Vl8Y3aRpds63vPa+Yes2A/ZllfkeDnrw5Qss/9qwwV40bqgjX+ziIFJfzzQz43cH/8TO3YlsEj18Yt/NkI1UYnUHKRBIHwPtHrL18Z2JJ63eqhA7t2tlkAzKOxaIZdaZ5ck=
Received: by 10.114.197.1 with SMTP id u1mr5529672waf.229.1210444761089;
        Sat, 10 May 2008 11:39:21 -0700 (PDT)
Received: by 10.114.78.14 with HTTP; Sat, 10 May 2008 11:39:20 -0700 (PDT)
Message-ID: <2a1a1a0c0805101139q54d73331gccef530e34a05098@mail.gmail.com>
Date: Sat, 10 May 2008 14:39:20 -0400
From: "Mike Lin" <mikelin@mit.edu>
Sender: nilekim@gmail.com
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Re: Why OCaml **cks
In-Reply-To: <4825B668.40903@ericsson.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_9219_16265754.1210444761080"
References: <200805090139.54870.jon@ffconsultancy.com>
	 <200805091846.32238.jon@ffconsultancy.com>
	 <4824953A.4000207@ericsson.com>
	 <200805100229.02201.jon@ffconsultancy.com>
	 <4825B668.40903@ericsson.com>
X-Google-Sender-Auth: 6bd88003ecb71573
X-Spam: no; 0.00; mikelin:01 ocaml:01 computations:01 speedup:01 speedup:01 computations:01 vastly:01 openmp:01 ocaml's:01 show-stopper:01 -mike:01 erlang:01 uniformly:01 erlang:01 ocaml's:01 

------=_Part_9219_16265754.1210444761080
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

I'll chip in here and say that as someone who does a lot of numerical
scientific computation (CRFs and M^3 networks for genome sequence analysis),
it would be really hard for me to justify structuring all my computations to
make them amenable to shared-memory parallelization in order to get a measly
2-8x speedup. In my field, I don't feel there are many major questions we
can't attack with a single core but we could if we could only do it 4x
faster.
If I really *need* to parallelize a computation, I usually need to do it
bigtime (100x, 1000x), and I use a compute farm. If I'm going to do the
nontrivial legwork of parallelization, I'd rather do it in such a way that
it can immediately scale to the compute farm when I find the multicore
speedup to be underwhelming - basically coarse-grain parallelization with
RPCs.
The multicore situation might be more interesting to me if/when, as
predicted, we see dozens or hundreds of cores on a single chip. But it seems
to me like coordinating shared-memory computations in that scenario is still
a rather active research area, from both hardware and software perspectives,
and whatever designs are out there at the moment for concurrent GCs etc.
might well end up being irrelevant. Similarly, except for a handful of major
products, scientific code doesn't have a very long shelf-life (you're just
trying to pump out data for your next paper), and anything I write now will
be vastly obsoleted and long forgotten in 4-5 years. So I really don't worry
about this right now.

Now, if it were not only possible but really easy for me to do fine-grain
parallelization, like with OpenMP, Task Parallel Library, Cilk, etc., then
there'd be little reason for me not to take advantage of current multicores.
But again, it's not like this would enable me to attack all these problems
that I can't now. I don't doubt such problems exist, but they don't for me
(or really anyone I know). So, to me, OCaml's lack of shared-memory
concurrency is a shame but not a show-stopper.

-Mike Lin

PS. Apologies in advance, but I can never resist the urge to good-naturedly
hoist one by his own petard,
"I'm hard pressed to find a practically-important application that
will be better off with a concurrent GC..."
-Jon Harrop, 11 months ago
http://groups.google.com/group/comp.lang.functional/browse_thread/thread/a288a989c5cd6acb/50b6ca2607173c91

On Sat, May 10, 2008 at 10:51 AM, Ulf Wiger (TN/EAB) <ulf.wiger@ericsson.com>
wrote:

> Jon Harrop skrev:
>
>> On Friday 09 May 2008 19:17:30 Ulf Wiger wrote:
>>
>>> Jon Harrop skrev:
>>>
>>>>
>>>> Erlang is uniformly slow.
>>>>
>>> I don't see how you can say that. If you introduce the
>>> restriction that there can be only one CPU, then this
>>> might be true.
>>>
>>
>> On 1 CPU Erlang is currently ~5x slower in this context.
>>
>
> I thought "this context" for this thread was a blog article
> that discussed OCaml's weaknesses in general terms.
>
> Just looking at the default weighting of the shootout
> benchmarks, the Erlang/OCaml ratio is 3.17; excluding
> the only concurrency-related benchmark, where Erlang
> is 10.6x faster than OCaml, it's 4.0.
> (Not that I consider the shootout representative to the
> products we build...)
>
> > So even if we ignore the cost of message passing we know
> > Erlang cannot be competitive for <6 cores.
> [...]
>
>> This is why Erlang has not (and will not) penetrate the
>>
> > market of scientists programming shared memory
> > supercomputers.
>
> The problem with your argumentation is that you make
> sweeping general statements and later, when challenged
> justify them by claiming them to be true in a very
> specific context - presumably your favourite problem.
>
> I can only assume that you are perfectly happy with
> OCaml staying focused on scientific computation and
> applications that have the same characteristics.
>
>
> > For the same reason, Erlang is not relevant for exploiting
> > multicore: its remit is massive concurrency which is
>
>> a completely different problem.
>>
>
> Perhaps we live on different planets...?
> In my world, products are never this black and white.
>
> There are constant tradeoffs, where a high degree of
> concurrency is almost always a factor, but also fairly
> big chunks of sequential processing where raw performance
> is important. The problem is that we can't find one
> language that does it all. Erlang is admittedly slow on
> things like text parsing, math, etc., but jumping out of
> the shared memory space and executing the code in something
> like C or OCaml, we pay so much for heavyweight
> communication that it's usually not worth the effort - never
> mind the fact that debugging becomes much, much harder.
>
> So on total system performance, we usually do very well,
> even though it is pretty slow on some specific parts of
> the problem. And we get superior robustness and
> maintenance cost, which for our customers is far more
> important than raw performance.
>
> Right now, the main language that I see as an interesting
> contender for our type of products is Haskell, because it
> combines very good performance with very good support for
> lightweight concurrency /and/ offers very high productivity.
>
>
> OCaml, sadly, cannot even be considered for anything but
> specialized tasks, since it has no credible support for
> concurrency. I don't really see why it'd have to stay
> that way, except that interest in message-passing
> concurrency seems to have been very low so far on this
> mailing list.
>
> (Actually, I'd rank Felix higher, if it could ever rise
> from obscurity, since it was designed to run safely as
> a dynamically linked component. It could work as a very
> nice complement to Erlang.)
>
> And as for exploiting multicore, we simply cannot get
> our hands on enough cores quickly enough (mainly because
> we need them in compact NEBS-compliant embedded systems).
> But we ship dual-core systems today, and got a 1.7x
> speedup without even recompiling the code. Very soon,
> we'll move to quad-cores, and expect corresponding
> speedups again. 8-core boards are on the horizon.
>
> Just recently, we noted that an Erlang-based product may
> well surpass what's been the undisputed market leader on
> performance using an 8-core machine, since that product
> (hand-written C++) cannot use more than 1 core due to
> timing issues. And the Erlang product in question wasn't
> even designed for raw performance, but for maximum
> convenience.
>
> Perhaps this is all irrelevant to your particular
> consultancy company? I know a number of companies that
> consider it extremely relevant /today/ - in market
> segments worth many billions of dollars.
>
> BR,
> Ulf W
>
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_9219_16265754.1210444761080
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

I&#39;ll chip in here and say that as someone who does a lot of numerical scientific computation (CRFs and M^3 networks for genome sequence analysis), it would be really hard for me to justify structuring all my computations to make them amenable to shared-memory parallelization in order to get a measly 2-8x speedup. In my field, I don&#39;t feel there are many major questions we can&#39;t attack with a single core but we could if we could only do it 4x faster.<div>

<br></div><div>If I really *need* to parallelize a computation, I usually need to do it bigtime (100x, 1000x), and I use a compute farm. If I&#39;m going to do the nontrivial legwork of parallelization, I&#39;d rather do it in such a way that it can immediately scale to the compute farm when I find the multicore speedup to be underwhelming - basically coarse-grain parallelization with RPCs.<div>

<br></div><div>The multicore situation might be more interesting to me if/when, as predicted, we see dozens or hundreds of cores on a single chip. But it seems to me like coordinating shared-memory computations in that scenario is still a rather active research area, from both hardware and software perspectives, and whatever designs are out there at the moment for concurrent GCs etc. might well end up being irrelevant. Similarly, except for a handful of major products, scientific code doesn&#39;t have a very long shelf-life (you&#39;re just trying to pump out data for your next paper), and anything I write now will be vastly obsoleted and long forgotten in 4-5 years. So I really don&#39;t worry about this right now.</div>

<div><br></div><div>Now, if it were not only possible but really easy for me to do fine-grain parallelization, like with OpenMP, Task Parallel Library,&nbsp;Cilk, etc., then there&#39;d be little reason for me not to take advantage of current multicores. But again, it&#39;s not like this would enable me to attack all these problems that I can&#39;t now. I don&#39;t doubt such problems exist, but they don&#39;t for me (or really anyone I know).&nbsp;So, to me, OCaml&#39;s lack of shared-memory concurrency is a shame but not a show-stopper.</div>
<div><br></div><div>-Mike Lin</div><div><br></div><div>PS. Apologies in advance, but I can never resist the urge to good-naturedly hoist one by his own petard,</div><div>&quot;<span class="Apple-style-span" style="font-family: fixed-width; font-size: 10px; ">I&#39;m hard pressed to find a practically-important application that&nbsp;</span></div>
<div><span class="Apple-style-span" style="font-family: fixed-width; font-size: 10px; ">will be better off with a concurrent GC...&quot;</span></div><div>-Jon Harrop, 11 months ago<span class="Apple-style-span" style="font-family: &#39;Lucida Grande&#39;; font-size: 12px; white-space: pre; "></span></div>
<div><span class="Apple-style-span" style="font-family: &#39;Lucida Grande&#39;; font-size: 12px; white-space: pre; "><a href="http://groups.google.com/group/comp.lang.functional/browse_thread/thread/a288a989c5cd6acb/50b6ca2607173c91">http://groups.google.com/group/comp.lang.functional/browse_thread/thread/a288a989c5cd6acb/50b6ca2607173c91</a></span><br>
<br><div class="gmail_quote">
On Sat, May 10, 2008 at 10:51 AM, Ulf Wiger (TN/EAB) &lt;<a href="mailto:ulf.wiger@ericsson.com" target="_blank">ulf.wiger@ericsson.com</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">

Jon Harrop skrev:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
On Friday 09 May 2008 19:17:30 Ulf Wiger wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
Jon Harrop skrev:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
Erlang is uniformly slow.<br>
</blockquote>
I don&#39;t see how you can say that. If you introduce the<br>
restriction that there can be only one CPU, then this<br>
might be true.<br>
</blockquote>
<br>
On 1 CPU Erlang is currently ~5x slower in this context.<br>
</blockquote>
<br>
I thought &quot;this context&quot; for this thread was a blog article<br>
that discussed OCaml&#39;s weaknesses in general terms.<br>
<br>
Just looking at the default weighting of the shootout<br>
benchmarks, the Erlang/OCaml ratio is 3.17; excluding<br>
the only concurrency-related benchmark, where Erlang<br>
is 10.6x faster than OCaml, it&#39;s 4.0.<br>
(Not that I consider the shootout representative to the<br>
products we build...)<br>
<br>
&gt; So even if we ignore the cost of message passing we know<br>
&gt; Erlang cannot be competitive for &lt;6 cores.<br>
[...]<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
This is why Erlang has not (and will not) penetrate the<br>
</blockquote>
&gt; market of scientists programming shared memory<br>
&gt; supercomputers.<br>
<br>
The problem with your argumentation is that you make<br>
sweeping general statements and later, when challenged<br>
justify them by claiming them to be true in a very<br>
specific context - presumably your favourite problem.<br>
<br>
I can only assume that you are perfectly happy with<br>
OCaml staying focused on scientific computation and<br>
applications that have the same characteristics.<br>
<br>
<br>
&gt; For the same reason, Erlang is not relevant for exploiting<br>
&gt; multicore: its remit is massive concurrency which is<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
a completely different problem.<br>
</blockquote>
<br>
Perhaps we live on different planets...?<br>
In my world, products are never this black and white.<br>
<br>
There are constant tradeoffs, where a high degree of<br>
concurrency is almost always a factor, but also fairly<br>
big chunks of sequential processing where raw performance<br>
is important. The problem is that we can&#39;t find one<br>
language that does it all. Erlang is admittedly slow on<br>
things like text parsing, math, etc., but jumping out of<br>
the shared memory space and executing the code in something<br>
like C or OCaml, we pay so much for heavyweight<br>
communication that it&#39;s usually not worth the effort - never<br>
mind the fact that debugging becomes much, much harder.<br>
<br>
So on total system performance, we usually do very well,<br>
even though it is pretty slow on some specific parts of<br>
the problem. And we get superior robustness and<br>
maintenance cost, which for our customers is far more<br>
important than raw performance.<br>
<br>
Right now, the main language that I see as an interesting<br>
contender for our type of products is Haskell, because it<br>
combines very good performance with very good support for<br>
lightweight concurrency /and/ offers very high productivity.<br>
<br>
<br>
OCaml, sadly, cannot even be considered for anything but<br>
specialized tasks, since it has no credible support for<br>
concurrency. I don&#39;t really see why it&#39;d have to stay<br>
that way, except that interest in message-passing<br>
concurrency seems to have been very low so far on this<br>
mailing list.<br>
<br>
(Actually, I&#39;d rank Felix higher, if it could ever rise<br>
from obscurity, since it was designed to run safely as<br>
a dynamically linked component. It could work as a very<br>
nice complement to Erlang.)<br>
<br>
And as for exploiting multicore, we simply cannot get<br>
our hands on enough cores quickly enough (mainly because<br>
we need them in compact NEBS-compliant embedded systems).<br>
But we ship dual-core systems today, and got a 1.7x<br>
speedup without even recompiling the code. Very soon,<br>
we&#39;ll move to quad-cores, and expect corresponding<br>
speedups again. 8-core boards are on the horizon.<br>
<br>
Just recently, we noted that an Erlang-based product may<br>
well surpass what&#39;s been the undisputed market leader on<br>
performance using an 8-core machine, since that product<br>
(hand-written C++) cannot use more than 1 core due to<br>
timing issues. And the Erlang product in question wasn&#39;t<br>
even designed for raw performance, but for maximum<br>
convenience.<br>
<br>
Perhaps this is all irrelevant to your particular<br>
consultancy company? I know a number of companies that<br>
consider it extremely relevant /today/ - in market<br>
segments worth many billions of dollars.<br>
<br>
BR,<br>
Ulf W<div><div></div><div><br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href="http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target="_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>
Archives: <a href="http://caml.inria.fr" target="_blank">http://caml.inria.fr</a><br>
Beginner&#39;s list: <a href="http://groups.yahoo.com/group/ocaml_beginners" target="_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href="http://caml.inria.fr/bin/caml-bugs" target="_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div></div>

------=_Part_9219_16265754.1210444761080--

