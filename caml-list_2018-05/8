Return-Path: <murthy.chet@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id AAC868240C
	for <caml-list@sympa.inria.fr>; Sat,  5 May 2018 05:26:20 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=murthy.chet@gmail.com; spf=Pass smtp.mailfrom=murthy.chet@gmail.com; spf=None smtp.helo=postmaster@mail-vk0-f48.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  murthy.chet@gmail.com) identity=pra; client-ip=209.85.213.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="murthy.chet@gmail.com";
  x-sender="murthy.chet@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  murthy.chet@gmail.com designates 209.85.213.48 as permitted
  sender) identity=mailfrom; client-ip=209.85.213.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="murthy.chet@gmail.com";
  x-sender="murthy.chet@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vk0-f48.google.com) identity=helo;
  client-ip=209.85.213.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="murthy.chet@gmail.com";
  x-sender="postmaster@mail-vk0-f48.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AHGUeXx9bmxg+Pf9uRHKM819IXTAuvvDOBiVQ1KB3?=
 =?us-ascii?q?1+McTK2v8tzYMVDF4r011RmVBd6ds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+55Pebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbY6SKfR+Y7jdfcsESmVdQsZfWStBAoam?=
 =?us-ascii?q?YIsOCeoKIOJUoob5qlcLqxa1GAuiC/71yjJQhHD206003eoiHw/bwgIvA8kDv2?=
 =?us-ascii?q?7IoNjvLqoeTfy5wavOwD7eb/1WwzD96I3Qfx0/ofGDQ65wetfWx0kyDQPFklWQ?=
 =?us-ascii?q?qIz4ND6S0+QNrnKb7/ZgVeOvkWIotwFxrSazxso3hYnJg5gaylHA9Slj3Ik1It?=
 =?us-ascii?q?i4RVd9bNW5HpVQsCSaOJF3QsMkW2xouSA6yqcHuZGhZiQKxo4nywbfavOdc4iI?=
 =?us-ascii?q?5RXjWPyNLjd/gXJofq+0iRWq8UW41OHwSs253ExJoydFiNXAqG0B2hLJ5sWISf?=
 =?us-ascii?q?Zw+Fqq1yyV2ADJ8O5EJFg5larFJJ4lxb49jp8Tvl7CHi/ygUn2kqyWelk99uim?=
 =?us-ascii?q?5OnqYa/qppCbN49zhQH+NrohltajDuQ/NwgCR2mb+eKi273/5UD1XqlGg/ksnq?=
 =?us-ascii?q?TasJ3WP9oXqrO3DgNP3Ysu6A6zDzK839QZmXkHIkhFeBWCj4XxPlHOPer4Deu/?=
 =?us-ascii?q?g1Wsijtk2/DGMaP9ApjWIXjDla3ufbd560JG1AUzytVf64pOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAxAlKQO0xuLnBMx51oMfQmKPHrSUMLjSsF+N/uIgOfOAZI4TuDbnKvgq/eTi?=
 =?us-ascii?q?jXEjmQxVQa7884EaZH2iH/8uG0iDe3vrnp9VH38HpBA/S/DCh1iLUDoVbHG3Cf?=
 =?us-ascii?q?ES/DY+XammAJuLY523nLyQlHO+A4dKZnEAAVCBDV/ncoyFX7EHbyfEcZwpqSAN?=
 =?us-ascii?q?SbX0E9xp7hqprgKvjuc+d7uGymgjrZvmkeNNyajWnBA2+yZzCp3EgW6IRmBw2G?=
 =?us-ascii?q?gPQm1vhfwtkQlG0l6GlJNArblAD9UKvqFGVw47MdjXyOkoU4mvCDKERc+ATROd?=
 =?us-ascii?q?evvjATw1SYhskdoHYkI4Bdb6yx6fj2ylBLgak7HND5sxoPrR?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAgClI+1ahjDVVdFcGwEBAQEDAQEBC?=
 =?us-ascii?q?QEBAYNoATwXYxUTCoMlP4EdglCRCIF5gQ+BQIxuhmoLI4RJAoIxBxkHAQQ0FAE?=
 =?us-ascii?q?CAQEBAQEBAQEBEwEBAQgLCwgoIwyCNSSCUAECAgEMFx0BGxILAQMBCwYDAgQHA?=
 =?us-ascii?q?xcdAgIhAQERAQUBChIGExKEaQEDDQgPjSOQADyLBYF/BQEXgnAFg1IKGSYDClR?=
 =?us-ascii?q?XgjACBhKIE4ITgQ+DC4JPN4Enc4JTglQChg4IgQOFWop/LAiFZYVrZ4IWXYEUi?=
 =?us-ascii?q?myJQkmGLg8DHoEEDCeBczMaI1AxghIJgWckGoNOgT6JNB8wjXqCNwEB?=
X-IPAS-Result: =?us-ascii?q?A0AvAgClI+1ahjDVVdFcGwEBAQEDAQEBCQEBAYNoATwXYxU?=
 =?us-ascii?q?TCoMlP4EdglCRCIF5gQ+BQIxuhmoLI4RJAoIxBxkHAQQ0FAECAQEBAQEBAQEBE?=
 =?us-ascii?q?wEBAQgLCwgoIwyCNSSCUAECAgEMFx0BGxILAQMBCwYDAgQHAxcdAgIhAQERAQU?=
 =?us-ascii?q?BChIGExKEaQEDDQgPjSOQADyLBYF/BQEXgnAFg1IKGSYDClRXgjACBhKIE4ITg?=
 =?us-ascii?q?Q+DC4JPN4Enc4JTglQChg4IgQOFWop/LAiFZYVrZ4IWXYEUimyJQkmGLg8DHoE?=
 =?us-ascii?q?EDCeBczMaI1AxghIJgWckGoNOgT6JNB8wjXqCNwEB?=
X-IronPort-AV: E=Sophos;i="5.49,364,1520895600"; 
   d="scan'208,217";a="325843793"
Received: from mail-vk0-f48.google.com ([209.85.213.48])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 05 May 2018 05:26:19 +0200
Received: by mail-vk0-f48.google.com with SMTP id 10-v6so14529641vkh.5
        for <caml-list@inria.fr>; Fri, 04 May 2018 20:26:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=IWpf8jGff9H/7cGe/2J3lrHZvwWPekO6i951gVKHKXI=;
        b=Gul0XjYxGSt34WTE8AThE5bbDSVyqlVYBWFsEOaAt717WMy08szMPE0k1fOEjDrPw4
         Rvd0zDRSt24G211CMJuod0WcLDS0gj1tfax6yMWL6bkgwzHKc46yVu4/MmXvI6HUJBwJ
         MQWYYd6hgfGgKFYmMzwr+JlAk6ye0gLijhmu24iaW7PV7qhlfQ6ojly4Oy9bez8xFgJN
         Z79mPdHbygpfiF2aQB8T758s5PmmetLEh6cXI7fnOWPYcU2O3ZxwY+aWLGdGUr6XQ2mN
         iDzRJuiSM/O1UGc0zihoWekKz1JXRiOJLJAWPTW49h0zSJ3IT23W/JKJBCVBUeN0eEwr
         uMHQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=IWpf8jGff9H/7cGe/2J3lrHZvwWPekO6i951gVKHKXI=;
        b=OzavaK6L82uaWv/822bQJXUD+mS0vhZ7XknDgvA56rXovpuZacEJwJFAzxhSnxEbJQ
         C74MzXC4kRu6wRGbYKDfhDS6fMK0npePeCM/1MZogZs1E2sr8c3/4Gw6YCOBZwxyxHmY
         MVW2h1OC06Pseo1pMkHRHHAAvvEZ9hW/8tr7/KT5uJ4eFxBJvt6XY+YAlptEM3UUyFn+
         WiBMrpz1Y9lt4JCMzkeh5gIffriCrma6Zp1X58MCdn0k5zaWX9FZy/InGXcW9z7leor2
         TMoCOiZCZ19rrsM7+WYtcXyEkv2LKntZv7/IhZjSTw1N6bx5xsf9znOFN7cpvCZYjcwm
         +Fqg==
X-Gm-Message-State: ALQs6tA/sRc8tAi6MLIofhEdFApD1NWM2GU/WJiLPvsAIury08c4e2Au
	xsMqI0PMPxsCpkmEOQBe2IpR2n5Aqh8EFOeLs28=
X-Google-Smtp-Source: AB8JxZoAro+ILEzuDOhBrWq3Mwrlj94FYT/m7lLYCdhnpu/8/Ef9VEc8eFtSf6tMz/lS7EbPU+Ane8jufN6/hly91us=
X-Received: by 2002:a1f:bf17:: with SMTP id p23-v6mr26017447vkf.73.1525490778168;
 Fri, 04 May 2018 20:26:18 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.176.97.134 with HTTP; Fri, 4 May 2018 20:26:17 -0700 (PDT)
In-Reply-To: <CAFY7FBM5v0D-fcpxNEWqtja8uDuJHH+5Avj_u5i826HNxtkwkQ@mail.gmail.com>
References: <CAFY7FBM5v0D-fcpxNEWqtja8uDuJHH+5Avj_u5i826HNxtkwkQ@mail.gmail.com>
From: Chet Murthy <murthy.chet@gmail.com>
Date: Fri, 4 May 2018 20:26:17 -0700
Message-ID: <CA++P_geR3PpdO6gEyHj=PtVNB_daVzBNOwST8b6GqAdw=3yWtQ@mail.gmail.com>
To: Frederic Perriot <fperriot@gmail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="000000000000f0e212056b6cffc3"
Subject: Re: [Caml-list] a bad value detector

--000000000000f0e212056b6cffc3
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

If I remember correctly, a company once started with Boehm's conservative
GC, and by doing things somewhat like you suggest, built a
memory-leak-detector product.  So you're not alone in going down this sort
of path.

On Wed, May 2, 2018 at 9:19 AM, Frederic Perriot <fperriot@gmail.com> wrote:

> Hello caml-list,
>
> I'd like to propose a detector to help in the detection of incorrect C
> bindings that do not follow the GC rules.
>
> The idea is rather simple:
>
> 1. after a minor collection, mprotect the pages of the minor heap to
> disallow reads and writes
> 2. install a SEGV handler to catch the ensuing faults
> 3. if the faulting address is above caml_young_ptr - Max_young_whsize,
> unprotect the page and carry on
> 4. otherwise, the program has no business accessing a value in the
> unallocated part of the minor heap, so let it crash
>
> I've hacked up a prototype that protects a single page at
> caml_young_start, and it catches the bug I mention in my other message
> entitled "an implicit GC rule".
>
> Such a change surely degrades performance, but maybe it would be
> useful as a runtime option available through CAMLRUNPARAM, to detect
> misbehaved C bindings.
>
> Does it sound like a viable technique?
>
> I'm curious to hear what you think.
>
> thanks,
> Fr=C3=A9d=C3=A9ric Perriot
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--000000000000f0e212056b6cffc3
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">If I remember correctly, a company once started with Boehm=
&#39;s conservative GC, and by doing things somewhat like you suggest, buil=
t a memory-leak-detector product.=C2=A0 So you&#39;re not alone in going do=
wn this sort of path.</div><div class=3D"gmail_extra"><br><div class=3D"gma=
il_quote">On Wed, May 2, 2018 at 9:19 AM, Frederic Perriot <span dir=3D"ltr=
">&lt;<a href=3D"mailto:fperriot@gmail.com" target=3D"_blank">fperriot@gmai=
l.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"m=
argin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hello caml-li=
st,<br>
<br>
I&#39;d like to propose a detector to help in the detection of incorrect C<=
br>
bindings that do not follow the GC rules.<br>
<br>
The idea is rather simple:<br>
<br>
1. after a minor collection, mprotect the pages of the minor heap to<br>
disallow reads and writes<br>
2. install a SEGV handler to catch the ensuing faults<br>
3. if the faulting address is above caml_young_ptr - Max_young_whsize,<br>
unprotect the page and carry on<br>
4. otherwise, the program has no business accessing a value in the<br>
unallocated part of the minor heap, so let it crash<br>
<br>
I&#39;ve hacked up a prototype that protects a single page at<br>
caml_young_start, and it catches the bug I mention in my other message<br>
entitled &quot;an implicit GC rule&quot;.<br>
<br>
Such a change surely degrades performance, but maybe it would be<br>
useful as a runtime option available through CAMLRUNPARAM, to detect<br>
misbehaved C bindings.<br>
<br>
Does it sound like a viable technique?<br>
<br>
I&#39;m curious to hear what you think.<br>
<br>
thanks,<br>
Fr=C3=A9d=C3=A9ric Perriot<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
-- <br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/<wbr=
>ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>bugs</a></font></s=
pan></blockquote></div><br></div>

--000000000000f0e212056b6cffc3--
