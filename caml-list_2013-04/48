Return-Path: <anthony.tavener@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C4CBE7EE51
	for <caml-list@sympa.inria.fr>; Fri,  5 Apr 2013 21:55:25 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  anthony.tavener@gmail.com) identity=pra;
  client-ip=209.85.215.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  anthony.tavener@gmail.com designates 209.85.215.171 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.215.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ea0-f171.google.com) identity=helo;
  client-ip=209.85.215.171;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="postmaster@mail-ea0-f171.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ai0CAMUrX1HRVderjWdsb2JhbABBCoM8rw+JY4gzgQUIFg4BAQEBBwsLCRIGJIIfAQEEARoNGQEbEgsBAwELBgULAwoNDAIFDiEBAREBBQEKEgYTEgmHZgEDCQYMo2WML4J7SIQIChknAwpZPohAAQUMjD2BBhAEgTQEBycCgxcDiHyMEoFggSCKUoM5FimETR2BER0CBxc
X-IPAS-Result: Ai0CAMUrX1HRVderjWdsb2JhbABBCoM8rw+JY4gzgQUIFg4BAQEBBwsLCRIGJIIfAQEEARoNGQEbEgsBAwELBgULAwoNDAIFDiEBAREBBQEKEgYTEgmHZgEDCQYMo2WML4J7SIQIChknAwpZPohAAQUMjD2BBhAEgTQEBycCgxcDiHyMEoFggSCKUoM5FimETR2BER0CBxc
X-IronPort-AV: E=Sophos;i="4.87,416,1363129200"; 
   d="scan'208";a="12035742"
Received: from mail-ea0-f171.google.com ([209.85.215.171])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Apr 2013 21:55:24 +0200
Received: by mail-ea0-f171.google.com with SMTP id b15so1527592eae.16
        for <caml-list@inria.fr>; Fri, 05 Apr 2013 12:55:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=hLtfmEK2xcdzjlvwzSfIIr+J77ynvbDJpJe2SOTzSiw=;
        b=ib5H9wuCuHcdgSDorrn01/pVUQ4lC4uRMGlLUFKvsEtbCEaNsJst6wtRPvJROVwj6s
         nyMmzcE3ZKE8y33uDUrNaDFz9w4RDWFpekUd7dV5qCknx4Mz7VeHdhuPklGozIGKBZRk
         O87ZbiiRuQ7hT8Rx7LcjM/u1JYZBNJMyaHBB7ZqwuaD/U0RY1di+HUC45BEUXZGvpfec
         jA2C6ba5Lk33sJvhWbW5DsRaFgcJ+r3boNSbYAJ9uniLle+z4yHkwFGjCgiEhdLzrOGy
         rp5vytG4fDMD+Blte24rxEeMB30l2Gzjk+brqjwfFxLWVNYQy1biqAPEisY9gzayB7ZE
         rfWA==
MIME-Version: 1.0
X-Received: by 10.15.24.14 with SMTP id i14mr22055877eeu.25.1365191723559;
 Fri, 05 Apr 2013 12:55:23 -0700 (PDT)
Received: by 10.14.2.198 with HTTP; Fri, 5 Apr 2013 12:55:23 -0700 (PDT)
In-Reply-To: <CACLX4jSEm-T=QTB5Bbdkq--AEKdkTCaB2fduEJqpg=jkbiJwzg@mail.gmail.com>
References: <CAN=ouMQ599Pu-ay+Hr=-KSV7xgdUsNB4GXiMWfjhaJfdZ-2Jeg@mail.gmail.com>
	<CAAmHUAkkA662sQ=oB_3DU1w_PzC+iyU1aN3+vDTkWC9fUSgNDw@mail.gmail.com>
	<CAN=ouMSwQ1PP+-D4Em6a2MFUPVOS-QM4-YHj0_eSJj=yVpakqg@mail.gmail.com>
	<CAK=fH+g-FP=wmdrMoJOyn4e=ePArRMWMixRMCTwrAu5asdnLSA@mail.gmail.com>
	<CAN=ouMQ86Ji1mnebLiQxcsmbTSx89QDw10SaB6DEFA=L9zF_VA@mail.gmail.com>
	<CACLX4jQFxK2vwAsBpw3w4T8YM7WD0urYSm6JGggC=-93q6QX1g@mail.gmail.com>
	<CAN=ouMS9PtAn6r58V3g-D4-ymN8UkBfFNn8F_iCF0cfX8LVvVw@mail.gmail.com>
	<CACLX4jSEm-T=QTB5Bbdkq--AEKdkTCaB2fduEJqpg=jkbiJwzg@mail.gmail.com>
Date: Fri, 5 Apr 2013 13:55:23 -0600
Message-ID: <CAN=ouMRtB_wOvxv66xoYT2eCpmjx1oGX8831qFusg+wZmxeP9Q@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e0160c9bebbdef404d9a2771a
Subject: Re: [Caml-list] Heterogeneous dictionary


--089e0160c9bebbdef404d9a2771a
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

Hmm... that is some food for thought. I wasn't really considering
the creation of modules which might only hold a few keys.
Sometimes we overlook simple things. :) You've convinced me
enough to work with it and see how it fits -- it sounds like you've
had similar cases, and turning out "prettily" is appealing.

I do have a pattern of Module.t. I remember thinking that was
an odd idiom, at first, and used an "appropriate" full name. Once
I really started using modules, and especially functors, I saw the
light. Is there a design patterns for OCaml, somewhere? :)

Thank-you for wading through my walls of text and still offering
advice, Yaron!


On Fri, Apr 5, 2013 at 12:51 PM, Yaron Minsky <yminsky@janestreet.com>wrote:

> On Fri, Apr 5, 2013 at 2:27 PM, Anthony Tavener
> <anthony.tavener@gmail.com> wrote:
> >> Sure, but there's nothing that requires these to be stored together.
> >> They can be scattered to the four winds, and yet all used to keep
> >> things in the same Univ_map.t.
> >
> > I was working with a universal type, but that was exactly the
> > problem I encountered: I need to create the keys and hold them
> > somewhere. My original post might have been unclear, sorry. This is
> > what I meant by having to pre-create the inj/proj pair and house
> > them somewhere... where a single file would create a bottleneck of
> > types, or scattered becomes a "mess". Scattered would prove
> > confusing I think... with hundreds of keys that have no sensible
> > "home" module. Well, some might make sense, but most of these keys
> > are interstitial -- between modules, somewhat like messages. I was
> > trying to map out where various keys would live and it wasn't
> > obvious and would continue to be unclear when I wanted to use a
> > key. There would be cognitive burden of deciding home modules for
> > things which don't fit into the modular namespace.
>
> My experience with this kind of design is that this isn't that much of
> a problem.  You can create multiple modules that house keys for
> different concerns.  Indeed, in such designs I've historically created
> modules with typeful interfaces that back-end on such keys, but simply
> expose a typeful way of getting access to the properties in question,
> which I think turns out quite prettily.
>
> > So, a universal type with "keys" does solve the problem, for some
> > definition of solved. My concern is that the solution is too
> > cumbersome and confusing in this use-case. Very much like arguments
> > for polymorphic variants versus variants. Unfortunately I don't see
> > any way to "embed type" in a polymorphic variant (I did check
> > whether hashes could match between different function
> > implementations of same type-signature... which was kind of silly
> > because I'm pretty sure the function address would be used in the
> > hashvalue). Although I imagine types do have hashvalues at some
> > point in the compiler!
>
> Again, If you create wrapper modules for accessing and working with
> these properties, I think everything will work smoothly.  Indeed, if
> you have a module T for a given type of thing to be stored in one of
> these maps, you can build your typeful accessors for T.t into module
> T.  You just need to follow the design pattern of having one module
> per type you define.
>
> > Another (failed?) possibility I mentioned as a pipe-dream: if "keys"
> > could be left open "to trust", and then verified that all trusted
> > usages lined up at link-time. After you're first reply (Yaron), I
> > thought for a moment that monomorphic types might work like that --
> > resolved at link time. Of course, they're not, as a test quickly
> > confirmed. :( But... that's why I asked the wise body of OCamlers if
> > you have ideas -- I don't have a complete grasp of the language and
> > might be missing something or have a false assumption. It's a
> > complex type-system! I like it a lot though.
> >
> > Thinking more about this, and formulating these replies, I've
> > realized there's a common idiom in game development -- and maybe
> > software in general?  It's use of string-hashes to create flexible
> > associations... from code to code, or code to data (I think that's
> > how it starts... you need to share "IDs" between code and data --
> > and then the technique spreads).  Messages, names of special points
> > in artwork (eg "primary-grip"), effects, things accessible by
> > script...  But with such extensive usage, you need tools to verify
> > correct usage as much as possible. C, of course, provides few
> > guarantees of anything, so you write your own tools. OCaml is
> > tantalizing with its rich typesystem -- and polymorphic variants are
> > like built-in string-hash support. So I kept trying to figure out a
> > way to get OCaml to do the heavy lifting... for idioms I might be
> > unreasonably stuck on. ;)
>
> Maybe.  My intuition is that the design pattern you're talking about
> is a good one, and really can be made to work well in OCaml.
>
> y
>
> > On Fri, Apr 5, 2013 at 10:37 AM, Yaron Minsky <yminsky@janestreet.com>
> > wrote:
> >>
> >> On Thu, Apr 4, 2013 at 2:48 PM, Anthony Tavener
> >> <anthony.tavener@gmail.com> wrote:
> >> > The problem here...
> >> >
> >> >   module Keys : sig
> >> >     val recovery : int Univ_map.Key.t
> >> >     val resist_pain : float  Univ_map.Key.t
> >> >     ...
> >> >
> >> > Would be that Keys would now have dependence on types spanning the
> >> > codebase.
> >>
> >> Sure, but there's nothing that requires these to be stored together.
> >> They can be scattered to the four winds, and yet all used to keep
> >> things in the same Univ_map.t.
> >>
> >> It's honestly very much like using a dynamic language, where you get
> >> to declare new items at will that can be cast in and out from a
> >> universal type.
> >>
> >> It's probably worth reading over the Univ module in Core as well,
> >> since Univ_map is built on it, and if Univ_map doesn't quite do what
> >> you want, you can probably built what you need precisely on top of
> >> Univ.
> >>
> >> > Say these modifiers use Wounds.t, Fatigue.t, Ability.Score.t, ...
> There
> >> > are
> >> > a
> >> > lot of types, which mostly have a limited scope (their own module and
> a
> >> > few
> >> > others). Wouldn't it be a problem to have all types brought into this
> >> > one
> >> > module, which every other module also becomes dependent on? Maybe it
> >> > just
> >> > feels like a problem but it's just an aesthetic -- Would you do this?
> A
> >> > few
> >> > hundred keys involving types from half the modules of the codebase?
> >> >
> >> >
> >> > I'm trying to use these "modifiers" for code organisation -- declari=
ng
> >> > snippets of functionality (all of signature 'a -> 'a... to return
> >> > modified
> >> > input) in a lightweight manner, which can be applied elsewhere.
> >> >
> >> > For example, the Virtue module can add a lot of modifers to an entity
> >> > (UID).
> >> > Say one entity has virtues of Agility, Inspirational, and Sun-cyclic
> >> > Magic,
> >> > which each adding a few modifier functions keyed to various contexts
> >> > (sun-cyclic magic: "Casting" is +3 while the sun is up). The
> associated
> >> > modifiers would be picked up in code spread throughout the
> application.
> >> > Rules
> >> > for combat, spellcasting, even character dialog...
> >> >
> >> > Rather than having character dialog checking for "does he have this
> >> > virtue,
> >> > or
> >> > that one? How about this ability? Spell-effects? Reputations? ..." I
> >> > want to
> >> > apply all appropriate/active modifiers for entity and situation which
> >> > come
> >> > from other rules. So, dialog code might have a current_value, then...
> >> > eg.
> >> >   let modified_value =3D apply_modifiers_for_context entity `CharmRo=
ll
> >> > current_value
> >> >
> >> > There is a lot of work on my project which I've been avoiding because
> >> > the
> >> > direct approach is building hairy nests of checks which call out to
> code
> >> > everywhere... effectively splitting logic between the point of origin
> of
> >> > a
> >> > rule, and the point of application of it. I'd rather declare the
> >> > individual
> >> > rules, each in one piece, and "magically" apply the aggregate of
> rules.
> >> >
> >> >
> >> > In a way, what I'm looking for is having a grand-central lookup, whi=
ch
> >> > *trusts* that I'm using the right keys at the right time (where the
> keys
> >> > are
> >> > purely symbolic with no type info)... but it would be nice if once t=
he
> >> > whole
> >> > program is compiled it could identify whether that trust was broken
> >> > afterall.
> >> > A bit of a pipe-dream, and maybe even flawed logic. :)
> >> >
> >> > It might sound like I'm being too picky or even whiney... that
> declaring
> >> > keys
> >> > throughout the code is unacceptable, or having a file dependent on a=
ll
> >> > types
> >> > is problematic... maybe I am? The first seems disorganised and adds a
> >> > mental burden to deciding and knowing where keys live; the second is=
 a
> >> > problem, isn't it?
> >> >
> >> > Dynamic languages can do what I want at the cost of typesafety. So I
> >> > might
> >> > just prefer to make that same tradeoff for one mechanism in my code.=
..
> >> > "famous
> >> > last words"? I hope not. I hope it just works and I don't have
> >> > nightmares
> >> > about lurking segfaults. :)
> >> >
> >> >
> >> > On Thu, Apr 4, 2013 at 3:04 AM, David House <dhouse@janestreet.com>
> >> > wrote:
> >> >>
> >> >> I don't quite understand the problem. Here's an example of how one
> >> >> might use univ_map:
> >> >>
> >> >> open Core.Std
> >> >>
> >> >> module Keys : sig
> >> >>   val recovery : int Univ_map.Key.t
> >> >>   val resist_pain : float  Univ_map.Key.t
> >> >> end =3D struct
> >> >>   let recovery =3D Univ_key.Key.create "recovery" Int.sexp_of_t
> >> >>   let resist_pain =3D Univ_key.Key.create "resist_pain" Float.sexp_=
of_t
> >> >> end
> >> >>
> >> >> (In practice this might be two files: keys.ml with the
> implementation
> >> >> and keys.mli with the signature.) You can then add things as follow=
s:
> >> >>
> >> >> let add map ~key ~data =3D Univ_map.add_exn map key data in
> >> >> let map =3D
> >> >>   Univ_map.empty
> >> >>   |> add ~key:Keys.recovery ~data:4
> >> >>   |> add ~key:Keys.resist_pain ~data:10.
> >> >> in
> >> >> ...
> >> >>
> >> >> On 4 April 2013 09:37, Anthony Tavener <anthony.tavener@gmail.com>
> >> >> wrote:
> >> >> > Thank-you for the advice and pointers, folks...
> >> >> >
> >> >> > Well, the common problem is still the same one I've been struggli=
ng
> >> >> > with:
> >> >> > "creating keys", and having to access them.
> >> >> >
> >> >> > I can't create keys "type-free" in a common module. As I figured.=
..
> >> >> > having
> >> >> > "modifier.ml" with a bunch of Key.create will have monomorphic
> types
> >> >> > which
> >> >> > can't be resolved since with no usage in that module to make the
> type
> >> >> > concrete. I had a nagging feeling I'd need a "whole-program"
> >> >> > compiler...
> >> >> >
> >> >> > Instead I'd have to create keys in modules where they are used...
> but
> >> >> > then I
> >> >> > might have a mess of keys like Wounds.recovery, Combat.resist_pai=
n,
> >> >> > ...
> >> >> > the
> >> >> > problem being that only a fraction of these keys actually make
> sense
> >> >> > being
> >> >> > associated to a particular module, and it gets confusing to know
> >> >> > which
> >> >> > (of
> >> >> > several candidates) I decided to stash them into. This was the
> >> >> > attraction to
> >> >> > polymorphic variants (which I rarely use) -- they give a
> pre-ordained
> >> >> > unique
> >> >> > ID based on a simple name... no declaration, and no module
> prefixing,
> >> >> > which
> >> >> > seems important to me for this case.
> >> >> >
> >> >> > Note that I have a "database" of tables with different types
> >> >> > (implemented by
> >> >> > first-class modules!), and it works great for the bulk of my
> >> >> > game-state,
> >> >> > but
> >> >> > each table is well-populated and heavily used in consistent manne=
r.
> >> >> > These
> >> >> > modifiers though... they're a bit like ad-hoc message passing,
> where
> >> >> > I
> >> >> > can
> >> >> > submit any message and anywhere else add a snippet of code to
> >> >> > interpret
> >> >> > it
> >> >> > (not that I have any of that going on, otherwise it might hold the
> >> >> > solution!).
> >> >> >
> >> >> >
> >> >> >
> >> >> > On Thu, Apr 4, 2013 at 1:38 AM, Rapha=EBl Proust <
> raphlalou@gmail.com>
> >> >> > wrote:
> >> >> >>
> >> >> >> On Thu, Apr 4, 2013 at 1:45 AM, Anthony Tavener
> >> >> >> <anthony.tavener@gmail.com> wrote:
> >> >> >> > [=85]
> >> >> >>
> >> >> >> And yet-another-solution, Ocsigen's Polytable:
> >> >> >> http://ocsigen.org/ocsigenserver/api/Polytables
> >> >> >>
> >> >> >>
> >> >> >> Cheers,
> >> >> >> --
> >> >> >> ______________
> >> >> >> Rapha=EBl Proust
> >> >> >
> >> >> >
> >> >
> >> >
> >
> >
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--089e0160c9bebbdef404d9a2771a
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hmm... that is some food for thought. I wasn&#39;t really =
considering<div style>the creation of modules which might only hold a few k=
eys.</div><div style>Sometimes we overlook simple things. :) You&#39;ve con=
vinced me</div>
<div style>enough to work with it and see how it fits -- it sounds like you=
&#39;ve</div><div style>had similar cases, and turning out &quot;prettily&q=
uot; is appealing.</div><div style><br></div><div style>I do have a pattern=
 of Module.t. I remember thinking that was<br>
</div><div style>an odd idiom, at first, and used an &quot;appropriate&quot=
; full name. Once</div><div style>I really started using modules, and espec=
ially functors, I saw the</div><div style>light. Is there a design patterns=
 for OCaml, somewhere? :)</div>
<div style><br></div><div style><div>Thank-you for wading through my walls =
of text and still offering</div><div>advice, Yaron!</div></div></div><div c=
lass=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri, Apr 5, 2013=
 at 12:51 PM, Yaron Minsky <span dir=3D"ltr">&lt;<a href=3D"mailto:yminsky@=
janestreet.com" target=3D"_blank">yminsky@janestreet.com</a>&gt;</span> wro=
te:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">On Fri, Apr 5, 2013 at 2:2=
7 PM, Anthony Tavener<br>
&lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.tavener@gmail.com<=
/a>&gt; wrote:<br>
&gt;&gt; Sure, but there&#39;s nothing that requires these to be stored tog=
ether.<br>
&gt;&gt; They can be scattered to the four winds, and yet all used to keep<=
br>
&gt;&gt; things in the same Univ_map.t.<br>
&gt;<br>
&gt; I was working with a universal type, but that was exactly the<br>
&gt; problem I encountered: I need to create the keys and hold them<br>
&gt; somewhere. My original post might have been unclear, sorry. This is<br>
&gt; what I meant by having to pre-create the inj/proj pair and house<br>
&gt; them somewhere... where a single file would create a bottleneck of<br>
&gt; types, or scattered becomes a &quot;mess&quot;. Scattered would prove<=
br>
&gt; confusing I think... with hundreds of keys that have no sensible<br>
&gt; &quot;home&quot; module. Well, some might make sense, but most of thes=
e keys<br>
&gt; are interstitial -- between modules, somewhat like messages. I was<br>
&gt; trying to map out where various keys would live and it wasn&#39;t<br>
&gt; obvious and would continue to be unclear when I wanted to use a<br>
&gt; key. There would be cognitive burden of deciding home modules for<br>
&gt; things which don&#39;t fit into the modular namespace.<br>
<br>
</div>My experience with this kind of design is that this isn&#39;t that mu=
ch of<br>
a problem. =A0You can create multiple modules that house keys for<br>
different concerns. =A0Indeed, in such designs I&#39;ve historically create=
d<br>
modules with typeful interfaces that back-end on such keys, but simply<br>
expose a typeful way of getting access to the properties in question,<br>
which I think turns out quite prettily.<br>
<div class=3D"im"><br>
&gt; So, a universal type with &quot;keys&quot; does solve the problem, for=
 some<br>
&gt; definition of solved. My concern is that the solution is too<br>
&gt; cumbersome and confusing in this use-case. Very much like arguments<br>
&gt; for polymorphic variants versus variants. Unfortunately I don&#39;t se=
e<br>
&gt; any way to &quot;embed type&quot; in a polymorphic variant (I did chec=
k<br>
&gt; whether hashes could match between different function<br>
&gt; implementations of same type-signature... which was kind of silly<br>
&gt; because I&#39;m pretty sure the function address would be used in the<=
br>
&gt; hashvalue). Although I imagine types do have hashvalues at some<br>
&gt; point in the compiler!<br>
<br>
</div>Again, If you create wrapper modules for accessing and working with<b=
r>
these properties, I think everything will work smoothly. =A0Indeed, if<br>
you have a module T for a given type of thing to be stored in one of<br>
these maps, you can build your typeful accessors for T.t into module<br>
T. =A0You just need to follow the design pattern of having one module<br>
per type you define.<br>
<div class=3D"im"><br>
&gt; Another (failed?) possibility I mentioned as a pipe-dream: if &quot;ke=
ys&quot;<br>
&gt; could be left open &quot;to trust&quot;, and then verified that all tr=
usted<br>
&gt; usages lined up at link-time. After you&#39;re first reply (Yaron), I<=
br>
&gt; thought for a moment that monomorphic types might work like that --<br>
&gt; resolved at link time. Of course, they&#39;re not, as a test quickly<b=
r>
&gt; confirmed. :( But... that&#39;s why I asked the wise body of OCamlers =
if<br>
&gt; you have ideas -- I don&#39;t have a complete grasp of the language an=
d<br>
&gt; might be missing something or have a false assumption. It&#39;s a<br>
&gt; complex type-system! I like it a lot though.<br>
&gt;<br>
&gt; Thinking more about this, and formulating these replies, I&#39;ve<br>
&gt; realized there&#39;s a common idiom in game development -- and maybe<b=
r>
&gt; software in general? =A0It&#39;s use of string-hashes to create flexib=
le<br>
&gt; associations... from code to code, or code to data (I think that&#39;s=
<br>
&gt; how it starts... you need to share &quot;IDs&quot; between code and da=
ta --<br>
&gt; and then the technique spreads). =A0Messages, names of special points<=
br>
&gt; in artwork (eg &quot;primary-grip&quot;), effects, things accessible b=
y<br>
&gt; script... =A0But with such extensive usage, you need tools to verify<b=
r>
&gt; correct usage as much as possible. C, of course, provides few<br>
&gt; guarantees of anything, so you write your own tools. OCaml is<br>
&gt; tantalizing with its rich typesystem -- and polymorphic variants are<b=
r>
&gt; like built-in string-hash support. So I kept trying to figure out a<br>
&gt; way to get OCaml to do the heavy lifting... for idioms I might be<br>
&gt; unreasonably stuck on. ;)<br>
<br>
</div>Maybe. =A0My intuition is that the design pattern you&#39;re talking =
about<br>
is a good one, and really can be made to work well in OCaml.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
y<br>
<br>
&gt; On Fri, Apr 5, 2013 at 10:37 AM, Yaron Minsky &lt;<a href=3D"mailto:ym=
insky@janestreet.com">yminsky@janestreet.com</a>&gt;<br>
&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; On Thu, Apr 4, 2013 at 2:48 PM, Anthony Tavener<br>
&gt;&gt; &lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.tavener@g=
mail.com</a>&gt; wrote:<br>
&gt;&gt; &gt; The problem here...<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; =A0 module Keys : sig<br>
&gt;&gt; &gt; =A0 =A0 val recovery : int Univ_map.Key.t<br>
&gt;&gt; &gt; =A0 =A0 val resist_pain : float =A0Univ_map.Key.t<br>
&gt;&gt; &gt; =A0 =A0 ...<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Would be that Keys would now have dependence on types spannin=
g the<br>
&gt;&gt; &gt; codebase.<br>
&gt;&gt;<br>
&gt;&gt; Sure, but there&#39;s nothing that requires these to be stored tog=
ether.<br>
&gt;&gt; They can be scattered to the four winds, and yet all used to keep<=
br>
&gt;&gt; things in the same Univ_map.t.<br>
&gt;&gt;<br>
&gt;&gt; It&#39;s honestly very much like using a dynamic language, where y=
ou get<br>
&gt;&gt; to declare new items at will that can be cast in and out from a<br>
&gt;&gt; universal type.<br>
&gt;&gt;<br>
&gt;&gt; It&#39;s probably worth reading over the Univ module in Core as we=
ll,<br>
&gt;&gt; since Univ_map is built on it, and if Univ_map doesn&#39;t quite d=
o what<br>
&gt;&gt; you want, you can probably built what you need precisely on top of=
<br>
&gt;&gt; Univ.<br>
&gt;&gt;<br>
&gt;&gt; &gt; Say these modifiers use Wounds.t, Fatigue.t, Ability.Score.t,=
 ... There<br>
&gt;&gt; &gt; are<br>
&gt;&gt; &gt; a<br>
&gt;&gt; &gt; lot of types, which mostly have a limited scope (their own mo=
dule and a<br>
&gt;&gt; &gt; few<br>
&gt;&gt; &gt; others). Wouldn&#39;t it be a problem to have all types broug=
ht into this<br>
&gt;&gt; &gt; one<br>
&gt;&gt; &gt; module, which every other module also becomes dependent on? M=
aybe it<br>
&gt;&gt; &gt; just<br>
&gt;&gt; &gt; feels like a problem but it&#39;s just an aesthetic -- Would =
you do this? A<br>
&gt;&gt; &gt; few<br>
&gt;&gt; &gt; hundred keys involving types from half the modules of the cod=
ebase?<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; I&#39;m trying to use these &quot;modifiers&quot; for code or=
ganisation -- declaring<br>
&gt;&gt; &gt; snippets of functionality (all of signature &#39;a -&gt; &#39=
;a... to return<br>
&gt;&gt; &gt; modified<br>
&gt;&gt; &gt; input) in a lightweight manner, which can be applied elsewher=
e.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; For example, the Virtue module can add a lot of modifers to a=
n entity<br>
&gt;&gt; &gt; (UID).<br>
&gt;&gt; &gt; Say one entity has virtues of Agility, Inspirational, and Sun=
-cyclic<br>
&gt;&gt; &gt; Magic,<br>
&gt;&gt; &gt; which each adding a few modifier functions keyed to various c=
ontexts<br>
&gt;&gt; &gt; (sun-cyclic magic: &quot;Casting&quot; is +3 while the sun is=
 up). The associated<br>
&gt;&gt; &gt; modifiers would be picked up in code spread throughout the ap=
plication.<br>
&gt;&gt; &gt; Rules<br>
&gt;&gt; &gt; for combat, spellcasting, even character dialog...<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Rather than having character dialog checking for &quot;does h=
e have this<br>
&gt;&gt; &gt; virtue,<br>
&gt;&gt; &gt; or<br>
&gt;&gt; &gt; that one? How about this ability? Spell-effects? Reputations?=
 ...&quot; I<br>
&gt;&gt; &gt; want to<br>
&gt;&gt; &gt; apply all appropriate/active modifiers for entity and situati=
on which<br>
&gt;&gt; &gt; come<br>
&gt;&gt; &gt; from other rules. So, dialog code might have a current_value,=
 then...<br>
&gt;&gt; &gt; eg.<br>
&gt;&gt; &gt; =A0 let modified_value =3D apply_modifiers_for_context entity=
 `CharmRoll<br>
&gt;&gt; &gt; current_value<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; There is a lot of work on my project which I&#39;ve been avoi=
ding because<br>
&gt;&gt; &gt; the<br>
&gt;&gt; &gt; direct approach is building hairy nests of checks which call =
out to code<br>
&gt;&gt; &gt; everywhere... effectively splitting logic between the point o=
f origin of<br>
&gt;&gt; &gt; a<br>
&gt;&gt; &gt; rule, and the point of application of it. I&#39;d rather decl=
are the<br>
&gt;&gt; &gt; individual<br>
&gt;&gt; &gt; rules, each in one piece, and &quot;magically&quot; apply the=
 aggregate of rules.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; In a way, what I&#39;m looking for is having a grand-central =
lookup, which<br>
&gt;&gt; &gt; *trusts* that I&#39;m using the right keys at the right time =
(where the keys<br>
&gt;&gt; &gt; are<br>
&gt;&gt; &gt; purely symbolic with no type info)... but it would be nice if=
 once the<br>
&gt;&gt; &gt; whole<br>
&gt;&gt; &gt; program is compiled it could identify whether that trust was =
broken<br>
&gt;&gt; &gt; afterall.<br>
&gt;&gt; &gt; A bit of a pipe-dream, and maybe even flawed logic. :)<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; It might sound like I&#39;m being too picky or even whiney...=
 that declaring<br>
&gt;&gt; &gt; keys<br>
&gt;&gt; &gt; throughout the code is unacceptable, or having a file depende=
nt on all<br>
&gt;&gt; &gt; types<br>
&gt;&gt; &gt; is problematic... maybe I am? The first seems disorganised an=
d adds a<br>
&gt;&gt; &gt; mental burden to deciding and knowing where keys live; the se=
cond is a<br>
&gt;&gt; &gt; problem, isn&#39;t it?<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Dynamic languages can do what I want at the cost of typesafet=
y. So I<br>
&gt;&gt; &gt; might<br>
&gt;&gt; &gt; just prefer to make that same tradeoff for one mechanism in m=
y code...<br>
&gt;&gt; &gt; &quot;famous<br>
&gt;&gt; &gt; last words&quot;? I hope not. I hope it just works and I don&=
#39;t have<br>
&gt;&gt; &gt; nightmares<br>
&gt;&gt; &gt; about lurking segfaults. :)<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; On Thu, Apr 4, 2013 at 3:04 AM, David House &lt;<a href=3D"ma=
ilto:dhouse@janestreet.com">dhouse@janestreet.com</a>&gt;<br>
&gt;&gt; &gt; wrote:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; I don&#39;t quite understand the problem. Here&#39;s an e=
xample of how one<br>
&gt;&gt; &gt;&gt; might use univ_map:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; open Core.Std<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; module Keys : sig<br>
&gt;&gt; &gt;&gt; =A0 val recovery : int Univ_map.Key.t<br>
&gt;&gt; &gt;&gt; =A0 val resist_pain : float =A0Univ_map.Key.t<br>
&gt;&gt; &gt;&gt; end =3D struct<br>
&gt;&gt; &gt;&gt; =A0 let recovery =3D Univ_key.Key.create &quot;recovery&q=
uot; Int.sexp_of_t<br>
&gt;&gt; &gt;&gt; =A0 let resist_pain =3D Univ_key.Key.create &quot;resist_=
pain&quot; Float.sexp_of_t<br>
&gt;&gt; &gt;&gt; end<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; (In practice this might be two files: <a href=3D"http://k=
eys.ml" target=3D"_blank">keys.ml</a> with the implementation<br>
&gt;&gt; &gt;&gt; and keys.mli with the signature.) You can then add things=
 as follows:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; let add map ~key ~data =3D Univ_map.add_exn map key data =
in<br>
&gt;&gt; &gt;&gt; let map =3D<br>
&gt;&gt; &gt;&gt; =A0 Univ_map.empty<br>
&gt;&gt; &gt;&gt; =A0 |&gt; add ~key:Keys.recovery ~data:4<br>
&gt;&gt; &gt;&gt; =A0 |&gt; add ~key:Keys.resist_pain ~data:10.<br>
&gt;&gt; &gt;&gt; in<br>
&gt;&gt; &gt;&gt; ...<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; On 4 April 2013 09:37, Anthony Tavener &lt;<a href=3D"mai=
lto:anthony.tavener@gmail.com">anthony.tavener@gmail.com</a>&gt;<br>
&gt;&gt; &gt;&gt; wrote:<br>
&gt;&gt; &gt;&gt; &gt; Thank-you for the advice and pointers, folks...<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt; Well, the common problem is still the same one I&#39=
;ve been struggling<br>
&gt;&gt; &gt;&gt; &gt; with:<br>
&gt;&gt; &gt;&gt; &gt; &quot;creating keys&quot;, and having to access them=
.<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt; I can&#39;t create keys &quot;type-free&quot; in a c=
ommon module. As I figured...<br>
&gt;&gt; &gt;&gt; &gt; having<br>
&gt;&gt; &gt;&gt; &gt; &quot;<a href=3D"http://modifier.ml" target=3D"_blan=
k">modifier.ml</a>&quot; with a bunch of Key.create will have monomorphic t=
ypes<br>
&gt;&gt; &gt;&gt; &gt; which<br>
&gt;&gt; &gt;&gt; &gt; can&#39;t be resolved since with no usage in that mo=
dule to make the type<br>
&gt;&gt; &gt;&gt; &gt; concrete. I had a nagging feeling I&#39;d need a &qu=
ot;whole-program&quot;<br>
&gt;&gt; &gt;&gt; &gt; compiler...<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt; Instead I&#39;d have to create keys in modules where=
 they are used... but<br>
&gt;&gt; &gt;&gt; &gt; then I<br>
&gt;&gt; &gt;&gt; &gt; might have a mess of keys like Wounds.recovery, Comb=
at.resist_pain,<br>
&gt;&gt; &gt;&gt; &gt; ...<br>
&gt;&gt; &gt;&gt; &gt; the<br>
&gt;&gt; &gt;&gt; &gt; problem being that only a fraction of these keys act=
ually make sense<br>
&gt;&gt; &gt;&gt; &gt; being<br>
&gt;&gt; &gt;&gt; &gt; associated to a particular module, and it gets confu=
sing to know<br>
&gt;&gt; &gt;&gt; &gt; which<br>
&gt;&gt; &gt;&gt; &gt; (of<br>
&gt;&gt; &gt;&gt; &gt; several candidates) I decided to stash them into. Th=
is was the<br>
&gt;&gt; &gt;&gt; &gt; attraction to<br>
&gt;&gt; &gt;&gt; &gt; polymorphic variants (which I rarely use) -- they gi=
ve a pre-ordained<br>
&gt;&gt; &gt;&gt; &gt; unique<br>
&gt;&gt; &gt;&gt; &gt; ID based on a simple name... no declaration, and no =
module prefixing,<br>
&gt;&gt; &gt;&gt; &gt; which<br>
&gt;&gt; &gt;&gt; &gt; seems important to me for this case.<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt; Note that I have a &quot;database&quot; of tables wi=
th different types<br>
&gt;&gt; &gt;&gt; &gt; (implemented by<br>
&gt;&gt; &gt;&gt; &gt; first-class modules!), and it works great for the bu=
lk of my<br>
&gt;&gt; &gt;&gt; &gt; game-state,<br>
&gt;&gt; &gt;&gt; &gt; but<br>
&gt;&gt; &gt;&gt; &gt; each table is well-populated and heavily used in con=
sistent manner.<br>
&gt;&gt; &gt;&gt; &gt; These<br>
&gt;&gt; &gt;&gt; &gt; modifiers though... they&#39;re a bit like ad-hoc me=
ssage passing, where<br>
&gt;&gt; &gt;&gt; &gt; I<br>
&gt;&gt; &gt;&gt; &gt; can<br>
&gt;&gt; &gt;&gt; &gt; submit any message and anywhere else add a snippet o=
f code to<br>
&gt;&gt; &gt;&gt; &gt; interpret<br>
&gt;&gt; &gt;&gt; &gt; it<br>
&gt;&gt; &gt;&gt; &gt; (not that I have any of that going on, otherwise it =
might hold the<br>
&gt;&gt; &gt;&gt; &gt; solution!).<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt; On Thu, Apr 4, 2013 at 1:38 AM, Rapha=EBl Proust &lt=
;<a href=3D"mailto:raphlalou@gmail.com">raphlalou@gmail.com</a>&gt;<br>
&gt;&gt; &gt;&gt; &gt; wrote:<br>
&gt;&gt; &gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; &gt;&gt; On Thu, Apr 4, 2013 at 1:45 AM, Anthony Tavener<=
br>
&gt;&gt; &gt;&gt; &gt;&gt; &lt;<a href=3D"mailto:anthony.tavener@gmail.com"=
>anthony.tavener@gmail.com</a>&gt; wrote:<br>
&gt;&gt; &gt;&gt; &gt;&gt; &gt; [=85]<br>
&gt;&gt; &gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; &gt;&gt; And yet-another-solution, Ocsigen&#39;s Polytabl=
e:<br>
&gt;&gt; &gt;&gt; &gt;&gt; <a href=3D"http://ocsigen.org/ocsigenserver/api/=
Polytables" target=3D"_blank">http://ocsigen.org/ocsigenserver/api/Polytabl=
es</a><br>
&gt;&gt; &gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; &gt;&gt; Cheers,<br>
&gt;&gt; &gt;&gt; &gt;&gt; --<br>
&gt;&gt; &gt;&gt; &gt;&gt; ______________<br>
&gt;&gt; &gt;&gt; &gt;&gt; Rapha=EBl Proust<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;<br>
&gt;<br>
<br>
</div></div><div class=3D"HOEnZb"><div class=3D"h5">--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a></div></div></blockquote></div><br=
></div>

--089e0160c9bebbdef404d9a2771a--
