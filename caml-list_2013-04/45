Return-Path: <anthony.tavener@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 1115D7EE51
	for <caml-list@sympa.inria.fr>; Fri,  5 Apr 2013 20:27:36 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  anthony.tavener@gmail.com) identity=pra;
  client-ip=74.125.83.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  anthony.tavener@gmail.com designates 74.125.83.44 as
  permitted sender) identity=mailfrom; client-ip=74.125.83.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ee0-f44.google.com) identity=helo;
  client-ip=74.125.83.44;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="postmaster@mail-ee0-f44.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhICAKgWX1FKfVMsk2dsb2JhbABBCoM8uHKIM4EFCBYOAQEBAQcLCwkUBCSCHwEBBAEnGQEbHQEDAQsGBQsDChkCEyEBAREBBQEcBhMbh2YBAwkGDKNijC+Ce4RUChknDVmIfgEFDIw9gRYEgTgHJwKDFwOIfIwSgWCBIIpSgzkWKYRNHYERHQIe
X-IPAS-Result: AhICAKgWX1FKfVMsk2dsb2JhbABBCoM8uHKIM4EFCBYOAQEBAQcLCwkUBCSCHwEBBAEnGQEbHQEDAQsGBQsDChkCEyEBAREBBQEcBhMbh2YBAwkGDKNijC+Ce4RUChknDVmIfgEFDIw9gRYEgTgHJwKDFwOIfIwSgWCBIIpSgzkWKYRNHYERHQIe
X-IronPort-AV: E=Sophos;i="4.87,416,1363129200"; 
   d="scan'208";a="12029551"
Received: from mail-ee0-f44.google.com ([74.125.83.44])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 05 Apr 2013 20:27:35 +0200
Received: by mail-ee0-f44.google.com with SMTP id c41so566046eek.3
        for <caml-list@inria.fr>; Fri, 05 Apr 2013 11:27:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=im0xY1xDsQWCGC1QN5DgcA1mhFhVFylIJcvpsXKO8Jo=;
        b=oMJNAkWKlQr2uw07g98fUD0JfPQGGuXT5AiO0go53EMN07+zcJtn33UH1WJwthZvEJ
         vBN5TDWbvAV6fh7JAIAs49JCIyTvLcdsf27+l4194AUxmykXL9QIoj/ho5GmJzphed/L
         Q8W98QeZrzMLYkqv5O172q6snYDlnUnzNCXdi5zHj9FUgbIpQtKc0SGmMyuNwxPJX6fj
         V0OkQ8MBlUVzAdyB41LSSHhxXUZ6lZdZNnJzP+IW9nePaxxR8efPxU+o2XH7Pcjo5mWx
         3mg32lKSr9COFbV/kRPuouFgUc6TNy1xzUgOuHMROtSkEy8Qt8o2uQ+mhv2zfoc95xf9
         lr6w==
MIME-Version: 1.0
X-Received: by 10.14.179.5 with SMTP id g5mr21816693eem.41.1365186454397; Fri,
 05 Apr 2013 11:27:34 -0700 (PDT)
Received: by 10.14.2.198 with HTTP; Fri, 5 Apr 2013 11:27:34 -0700 (PDT)
In-Reply-To: <CACLX4jQFxK2vwAsBpw3w4T8YM7WD0urYSm6JGggC=-93q6QX1g@mail.gmail.com>
References: <CAN=ouMQ599Pu-ay+Hr=-KSV7xgdUsNB4GXiMWfjhaJfdZ-2Jeg@mail.gmail.com>
	<CAAmHUAkkA662sQ=oB_3DU1w_PzC+iyU1aN3+vDTkWC9fUSgNDw@mail.gmail.com>
	<CAN=ouMSwQ1PP+-D4Em6a2MFUPVOS-QM4-YHj0_eSJj=yVpakqg@mail.gmail.com>
	<CAK=fH+g-FP=wmdrMoJOyn4e=ePArRMWMixRMCTwrAu5asdnLSA@mail.gmail.com>
	<CAN=ouMQ86Ji1mnebLiQxcsmbTSx89QDw10SaB6DEFA=L9zF_VA@mail.gmail.com>
	<CACLX4jQFxK2vwAsBpw3w4T8YM7WD0urYSm6JGggC=-93q6QX1g@mail.gmail.com>
Date: Fri, 5 Apr 2013 12:27:34 -0600
Message-ID: <CAN=ouMS9PtAn6r58V3g-D4-ymN8UkBfFNn8F_iCF0cfX8LVvVw@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=047d7b603fe6aac77004d9a13da3
Subject: Re: [Caml-list] Heterogeneous dictionary


--047d7b603fe6aac77004d9a13da3
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

> Sure, but there's nothing that requires these to be stored together.
> They can be scattered to the four winds, and yet all used to keep
> things in the same Univ_map.t.

I was working with a universal type, but that was exactly the problem I
encountered: I need to create the keys and hold them somewhere. My original
post might have been unclear, sorry. This is what I meant by having to
pre-create the inj/proj pair and house them somewhere... where a single file
would create a bottleneck of types, or scattered becomes a "mess". Scattered
would prove confusing I think... with hundreds of keys that have no sensible
"home" module. Well, some might make sense, but most of these keys are
interstitial -- between modules, somewhat like messages. I was trying to map
out where various keys would live and it wasn't obvious and would continue
to
be unclear when I wanted to use a key. There would be cognitive burden of
deciding home modules for things which don't fit into the modular namespace.

So, a universal type with "keys" does solve the problem, for some
definition of
solved. My concern is that the solution is too cumbersome and confusing in
this use-case. Very much like arguments for polymorphic variants versus
variants. Unfortunately I don't see any way to "embed type" in a polymorphic
variant (I did check whether hashes could match between different function
implementations of same type-signature... which was kind of silly because
I'm
pretty sure the function address would be used in the hashvalue). Although
I imagine types do have hashvalues at some point in the compiler!

Another (failed?) possibility I mentioned as a pipe-dream: if "keys" could
be
left open "to trust", and then verified that all trusted usages lined up at
link-time. After you're first reply (Yaron), I thought for a moment that
monomorphic types might work like that -- resolved at link time. Of course,
they're not, as a test quickly confirmed. :( But... that's why I asked the
wise body of OCamlers if you have ideas -- I don't have a complete grasp of
the language and might be missing something or have a false assumption.
It's a
complex type-system! I like it a lot though.

Thinking more about this, and formulating these replies, I've realized
there's
a common idiom in game development -- and maybe software in general?  It's
use
of string-hashes to create flexible associations... from code to code, or
code
to data (I think that's how it starts... you need to share "IDs" between
code
and data -- and then the technique spreads).  Messages, names of special
points in artwork (eg "primary-grip"), effects, things accessible by
script...
But with such extensive usage, you need tools to verify correct usage as
much
as possible. C, of course, provides few guarantees of anything, so you write
your own tools. OCaml is tantalizing with its rich typesystem -- and
polymorphic variants are like built-in string-hash support. So I kept trying
to figure out a way to get OCaml to do the heavy lifting... for idioms I
might
be unreasonably stuck on. ;)



On Fri, Apr 5, 2013 at 10:37 AM, Yaron Minsky <yminsky@janestreet.com>wrote:

> On Thu, Apr 4, 2013 at 2:48 PM, Anthony Tavener
> <anthony.tavener@gmail.com> wrote:
> > The problem here...
> >
> >   module Keys : sig
> >     val recovery : int Univ_map.Key.t
> >     val resist_pain : float  Univ_map.Key.t
> >     ...
> >
> > Would be that Keys would now have dependence on types spanning the
> codebase.
>
> Sure, but there's nothing that requires these to be stored together.
> They can be scattered to the four winds, and yet all used to keep
> things in the same Univ_map.t.
>
> It's honestly very much like using a dynamic language, where you get
> to declare new items at will that can be cast in and out from a
> universal type.
>
> It's probably worth reading over the Univ module in Core as well,
> since Univ_map is built on it, and if Univ_map doesn't quite do what
> you want, you can probably built what you need precisely on top of
> Univ.
>
> > Say these modifiers use Wounds.t, Fatigue.t, Ability.Score.t, ... There
> are
> > a
> > lot of types, which mostly have a limited scope (their own module and a
> few
> > others). Wouldn't it be a problem to have all types brought into this o=
ne
> > module, which every other module also becomes dependent on? Maybe it ju=
st
> > feels like a problem but it's just an aesthetic -- Would you do this? A
> few
> > hundred keys involving types from half the modules of the codebase?
> >
> >
> > I'm trying to use these "modifiers" for code organisation -- declaring
> > snippets of functionality (all of signature 'a -> 'a... to return
> modified
> > input) in a lightweight manner, which can be applied elsewhere.
> >
> > For example, the Virtue module can add a lot of modifers to an entity
> (UID).
> > Say one entity has virtues of Agility, Inspirational, and Sun-cyclic
> Magic,
> > which each adding a few modifier functions keyed to various contexts
> > (sun-cyclic magic: "Casting" is +3 while the sun is up). The associated
> > modifiers would be picked up in code spread throughout the application.
> > Rules
> > for combat, spellcasting, even character dialog...
> >
> > Rather than having character dialog checking for "does he have this
> virtue,
> > or
> > that one? How about this ability? Spell-effects? Reputations? ..." I
> want to
> > apply all appropriate/active modifiers for entity and situation which
> come
> > from other rules. So, dialog code might have a current_value, then...
> > eg.
> >   let modified_value =3D apply_modifiers_for_context entity `CharmRoll
> > current_value
> >
> > There is a lot of work on my project which I've been avoiding because t=
he
> > direct approach is building hairy nests of checks which call out to code
> > everywhere... effectively splitting logic between the point of origin of
> a
> > rule, and the point of application of it. I'd rather declare the
> individual
> > rules, each in one piece, and "magically" apply the aggregate of rules.
> >
> >
> > In a way, what I'm looking for is having a grand-central lookup, which
> > *trusts* that I'm using the right keys at the right time (where the keys
> are
> > purely symbolic with no type info)... but it would be nice if once the
> whole
> > program is compiled it could identify whether that trust was broken
> > afterall.
> > A bit of a pipe-dream, and maybe even flawed logic. :)
> >
> > It might sound like I'm being too picky or even whiney... that declaring
> > keys
> > throughout the code is unacceptable, or having a file dependent on all
> types
> > is problematic... maybe I am? The first seems disorganised and adds a
> > mental burden to deciding and knowing where keys live; the second is a
> > problem, isn't it?
> >
> > Dynamic languages can do what I want at the cost of typesafety. So I
> might
> > just prefer to make that same tradeoff for one mechanism in my code...
> > "famous
> > last words"? I hope not. I hope it just works and I don't have nightmar=
es
> > about lurking segfaults. :)
> >
> >
> > On Thu, Apr 4, 2013 at 3:04 AM, David House <dhouse@janestreet.com>
> wrote:
> >>
> >> I don't quite understand the problem. Here's an example of how one
> >> might use univ_map:
> >>
> >> open Core.Std
> >>
> >> module Keys : sig
> >>   val recovery : int Univ_map.Key.t
> >>   val resist_pain : float  Univ_map.Key.t
> >> end =3D struct
> >>   let recovery =3D Univ_key.Key.create "recovery" Int.sexp_of_t
> >>   let resist_pain =3D Univ_key.Key.create "resist_pain" Float.sexp_of_t
> >> end
> >>
> >> (In practice this might be two files: keys.ml with the implementation
> >> and keys.mli with the signature.) You can then add things as follows:
> >>
> >> let add map ~key ~data =3D Univ_map.add_exn map key data in
> >> let map =3D
> >>   Univ_map.empty
> >>   |> add ~key:Keys.recovery ~data:4
> >>   |> add ~key:Keys.resist_pain ~data:10.
> >> in
> >> ...
> >>
> >> On 4 April 2013 09:37, Anthony Tavener <anthony.tavener@gmail.com>
> wrote:
> >> > Thank-you for the advice and pointers, folks...
> >> >
> >> > Well, the common problem is still the same one I've been struggling
> >> > with:
> >> > "creating keys", and having to access them.
> >> >
> >> > I can't create keys "type-free" in a common module. As I figured...
> >> > having
> >> > "modifier.ml" with a bunch of Key.create will have monomorphic types
> >> > which
> >> > can't be resolved since with no usage in that module to make the type
> >> > concrete. I had a nagging feeling I'd need a "whole-program"
> compiler...
> >> >
> >> > Instead I'd have to create keys in modules where they are used... but
> >> > then I
> >> > might have a mess of keys like Wounds.recovery, Combat.resist_pain,
> ...
> >> > the
> >> > problem being that only a fraction of these keys actually make sense
> >> > being
> >> > associated to a particular module, and it gets confusing to know whi=
ch
> >> > (of
> >> > several candidates) I decided to stash them into. This was the
> >> > attraction to
> >> > polymorphic variants (which I rarely use) -- they give a pre-ordained
> >> > unique
> >> > ID based on a simple name... no declaration, and no module prefixing,
> >> > which
> >> > seems important to me for this case.
> >> >
> >> > Note that I have a "database" of tables with different types
> >> > (implemented by
> >> > first-class modules!), and it works great for the bulk of my
> game-state,
> >> > but
> >> > each table is well-populated and heavily used in consistent manner.
> >> > These
> >> > modifiers though... they're a bit like ad-hoc message passing, where=
 I
> >> > can
> >> > submit any message and anywhere else add a snippet of code to
> interpret
> >> > it
> >> > (not that I have any of that going on, otherwise it might hold the
> >> > solution!).
> >> >
> >> >
> >> >
> >> > On Thu, Apr 4, 2013 at 1:38 AM, Rapha=EBl Proust <raphlalou@gmail.co=
m>
> >> > wrote:
> >> >>
> >> >> On Thu, Apr 4, 2013 at 1:45 AM, Anthony Tavener
> >> >> <anthony.tavener@gmail.com> wrote:
> >> >> > [=85]
> >> >>
> >> >> And yet-another-solution, Ocsigen's Polytable:
> >> >> http://ocsigen.org/ocsigenserver/api/Polytables
> >> >>
> >> >>
> >> >> Cheers,
> >> >> --
> >> >> ______________
> >> >> Rapha=EBl Proust
> >> >
> >> >
> >
> >
>

--047d7b603fe6aac77004d9a13da3
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">&gt; Sure, but there&#39;s nothing that requires these to =
be stored together.<br>&gt; They can be scattered to the four winds, and ye=
t all used to keep<br>&gt; things in the same Univ_map.t.<br><div class=3D"=
gmail_extra">
<br></div><div class=3D"gmail_extra"><div class=3D"gmail_extra">I was worki=
ng with a universal type, but that was exactly the problem I</div><div clas=
s=3D"gmail_extra">encountered: I need to create the keys and hold them some=
where. My original</div>
<div class=3D"gmail_extra">post might have been unclear, sorry. This is wha=
t I meant by having to</div><div class=3D"gmail_extra">pre-create the inj/p=
roj pair and house them somewhere... where a single file</div><div class=3D=
"gmail_extra">
would create a bottleneck of types, or scattered becomes a &quot;mess&quot;=
. Scattered</div><div class=3D"gmail_extra">would prove confusing I think..=
. with hundreds of keys that have no sensible</div><div class=3D"gmail_extr=
a">
&quot;home&quot; module. Well, some might make sense, but most of these key=
s are</div><div class=3D"gmail_extra">interstitial -- between modules, some=
what like messages. I was trying to map</div><div class=3D"gmail_extra">out=
 where various keys would live and it wasn&#39;t obvious and would continue=
 to</div>
<div class=3D"gmail_extra">be unclear when I wanted to use a key. There wou=
ld be cognitive burden of</div><div class=3D"gmail_extra">deciding home mod=
ules for things which don&#39;t fit into the modular namespace.</div><div c=
lass=3D"gmail_extra">
<br></div><div class=3D"gmail_extra">So, a universal type with &quot;keys&q=
uot; does solve the problem, for some definition of</div><div class=3D"gmai=
l_extra">solved. My concern is that the solution is too cumbersome and conf=
using in</div>
<div class=3D"gmail_extra">this use-case. Very much like arguments for poly=
morphic variants versus</div><div class=3D"gmail_extra">variants. Unfortuna=
tely I don&#39;t see any way to &quot;embed type&quot; in a polymorphic</di=
v>
<div class=3D"gmail_extra">variant (I did check whether hashes could match =
between different function</div><div class=3D"gmail_extra">implementations =
of same type-signature... which was kind of silly because I&#39;m</div><div=
 class=3D"gmail_extra">
pretty sure the function address would be used in the hashvalue). Although<=
/div><div class=3D"gmail_extra">I imagine types do have hashvalues at some =
point in the compiler!</div><div class=3D"gmail_extra"><br></div><div class=
=3D"gmail_extra">
Another (failed?) possibility I mentioned as a pipe-dream: if &quot;keys&qu=
ot; could be</div><div class=3D"gmail_extra">left open &quot;to trust&quot;=
, and then verified that all trusted usages lined up at</div><div class=3D"=
gmail_extra">
link-time. After you&#39;re first reply (Yaron), I thought for a moment tha=
t</div><div class=3D"gmail_extra">monomorphic types might work like that --=
 resolved at link time. Of course,</div><div class=3D"gmail_extra">they&#39=
;re not, as a test quickly confirmed. :( But... that&#39;s why I asked the<=
/div>
<div class=3D"gmail_extra">wise body of OCamlers if you have ideas -- I don=
&#39;t have a complete grasp of</div><div class=3D"gmail_extra">the languag=
e and might be missing something or have a false assumption. It&#39;s a</di=
v>
<div class=3D"gmail_extra">complex type-system! I like it a lot though.</di=
v><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">Thinking =
more about this, and formulating these replies, I&#39;ve realized there&#39=
;s</div>
<div class=3D"gmail_extra">a common idiom in game development -- and maybe =
software in general? =A0It&#39;s use</div><div class=3D"gmail_extra">of str=
ing-hashes to create flexible associations... from code to code, or code</d=
iv>
<div class=3D"gmail_extra">to data (I think that&#39;s how it starts... you=
 need to share &quot;IDs&quot; between code</div><div class=3D"gmail_extra"=
>and data -- and then the technique spreads). =A0Messages, names of special=
</div>
<div class=3D"gmail_extra">points in artwork (eg &quot;primary-grip&quot;),=
 effects, things accessible by script...</div><div class=3D"gmail_extra">Bu=
t with such extensive usage, you need tools to verify correct usage as much=
</div>
<div class=3D"gmail_extra">as possible. C, of course, provides few guarante=
es of anything, so you write</div><div class=3D"gmail_extra">your own tools=
. OCaml is tantalizing with its rich typesystem -- and</div><div class=3D"g=
mail_extra">
polymorphic variants are like built-in string-hash support. So I kept tryin=
g</div><div class=3D"gmail_extra">to figure out a way to get OCaml to do th=
e heavy lifting... for idioms I might</div><div class=3D"gmail_extra">be un=
reasonably stuck on. ;)</div>
<div><br></div></div><div class=3D"gmail_extra" style><br></div><div class=
=3D"gmail_extra"><br><div class=3D"gmail_quote">On Fri, Apr 5, 2013 at 10:3=
7 AM, Yaron Minsky <span dir=3D"ltr">&lt;<a href=3D"mailto:yminsky@janestre=
et.com" target=3D"_blank">yminsky@janestreet.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
adding-left:1ex"><div class=3D"im">On Thu, Apr 4, 2013 at 2:48 PM, Anthony =
Tavener<br>

&lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.tavener@gmail.com<=
/a>&gt; wrote:<br>
&gt; The problem here...<br>
&gt;<br>
&gt; =A0 module Keys : sig<br>
&gt; =A0 =A0 val recovery : int Univ_map.Key.t<br>
&gt; =A0 =A0 val resist_pain : float =A0Univ_map.Key.t<br>
&gt; =A0 =A0 ...<br>
&gt;<br>
&gt; Would be that Keys would now have dependence on types spanning the cod=
ebase.<br>
<br>
</div>Sure, but there&#39;s nothing that requires these to be stored togeth=
er.<br>
They can be scattered to the four winds, and yet all used to keep<br>
things in the same Univ_map.t.<br>
<br>
It&#39;s honestly very much like using a dynamic language, where you get<br>
to declare new items at will that can be cast in and out from a<br>
universal type.<br>
<br>
It&#39;s probably worth reading over the Univ module in Core as well,<br>
since Univ_map is built on it, and if Univ_map doesn&#39;t quite do what<br>
you want, you can probably built what you need precisely on top of<br>
Univ.<br>
<div class=3D""><div class=3D"h5"><br>
&gt; Say these modifiers use Wounds.t, Fatigue.t, Ability.Score.t, ... Ther=
e are<br>
&gt; a<br>
&gt; lot of types, which mostly have a limited scope (their own module and =
a few<br>
&gt; others). Wouldn&#39;t it be a problem to have all types brought into t=
his one<br>
&gt; module, which every other module also becomes dependent on? Maybe it j=
ust<br>
&gt; feels like a problem but it&#39;s just an aesthetic -- Would you do th=
is? A few<br>
&gt; hundred keys involving types from half the modules of the codebase?<br>
&gt;<br>
&gt;<br>
&gt; I&#39;m trying to use these &quot;modifiers&quot; for code organisatio=
n -- declaring<br>
&gt; snippets of functionality (all of signature &#39;a -&gt; &#39;a... to =
return modified<br>
&gt; input) in a lightweight manner, which can be applied elsewhere.<br>
&gt;<br>
&gt; For example, the Virtue module can add a lot of modifers to an entity =
(UID).<br>
&gt; Say one entity has virtues of Agility, Inspirational, and Sun-cyclic M=
agic,<br>
&gt; which each adding a few modifier functions keyed to various contexts<b=
r>
&gt; (sun-cyclic magic: &quot;Casting&quot; is +3 while the sun is up). The=
 associated<br>
&gt; modifiers would be picked up in code spread throughout the application=
.<br>
&gt; Rules<br>
&gt; for combat, spellcasting, even character dialog...<br>
&gt;<br>
&gt; Rather than having character dialog checking for &quot;does he have th=
is virtue,<br>
&gt; or<br>
&gt; that one? How about this ability? Spell-effects? Reputations? ...&quot=
; I want to<br>
&gt; apply all appropriate/active modifiers for entity and situation which =
come<br>
&gt; from other rules. So, dialog code might have a current_value, then...<=
br>
&gt; eg.<br>
&gt; =A0 let modified_value =3D apply_modifiers_for_context entity `CharmRo=
ll<br>
&gt; current_value<br>
&gt;<br>
&gt; There is a lot of work on my project which I&#39;ve been avoiding beca=
use the<br>
&gt; direct approach is building hairy nests of checks which call out to co=
de<br>
&gt; everywhere... effectively splitting logic between the point of origin =
of a<br>
&gt; rule, and the point of application of it. I&#39;d rather declare the i=
ndividual<br>
&gt; rules, each in one piece, and &quot;magically&quot; apply the aggregat=
e of rules.<br>
&gt;<br>
&gt;<br>
&gt; In a way, what I&#39;m looking for is having a grand-central lookup, w=
hich<br>
&gt; *trusts* that I&#39;m using the right keys at the right time (where th=
e keys are<br>
&gt; purely symbolic with no type info)... but it would be nice if once the=
 whole<br>
&gt; program is compiled it could identify whether that trust was broken<br>
&gt; afterall.<br>
&gt; A bit of a pipe-dream, and maybe even flawed logic. :)<br>
&gt;<br>
&gt; It might sound like I&#39;m being too picky or even whiney... that dec=
laring<br>
&gt; keys<br>
&gt; throughout the code is unacceptable, or having a file dependent on all=
 types<br>
&gt; is problematic... maybe I am? The first seems disorganised and adds a<=
br>
&gt; mental burden to deciding and knowing where keys live; the second is a=
<br>
&gt; problem, isn&#39;t it?<br>
&gt;<br>
&gt; Dynamic languages can do what I want at the cost of typesafety. So I m=
ight<br>
&gt; just prefer to make that same tradeoff for one mechanism in my code...=
<br>
&gt; &quot;famous<br>
&gt; last words&quot;? I hope not. I hope it just works and I don&#39;t hav=
e nightmares<br>
&gt; about lurking segfaults. :)<br>
&gt;<br>
&gt;<br>
&gt; On Thu, Apr 4, 2013 at 3:04 AM, David House &lt;<a href=3D"mailto:dhou=
se@janestreet.com">dhouse@janestreet.com</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; I don&#39;t quite understand the problem. Here&#39;s an example of=
 how one<br>
&gt;&gt; might use univ_map:<br>
&gt;&gt;<br>
&gt;&gt; open Core.Std<br>
&gt;&gt;<br>
&gt;&gt; module Keys : sig<br>
&gt;&gt; =A0 val recovery : int Univ_map.Key.t<br>
&gt;&gt; =A0 val resist_pain : float =A0Univ_map.Key.t<br>
&gt;&gt; end =3D struct<br>
&gt;&gt; =A0 let recovery =3D Univ_key.Key.create &quot;recovery&quot; Int.=
sexp_of_t<br>
&gt;&gt; =A0 let resist_pain =3D Univ_key.Key.create &quot;resist_pain&quot=
; Float.sexp_of_t<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; (In practice this might be two files: <a href=3D"http://keys.ml" t=
arget=3D"_blank">keys.ml</a> with the implementation<br>
&gt;&gt; and keys.mli with the signature.) You can then add things as follo=
ws:<br>
&gt;&gt;<br>
&gt;&gt; let add map ~key ~data =3D Univ_map.add_exn map key data in<br>
&gt;&gt; let map =3D<br>
&gt;&gt; =A0 Univ_map.empty<br>
&gt;&gt; =A0 |&gt; add ~key:Keys.recovery ~data:4<br>
&gt;&gt; =A0 |&gt; add ~key:Keys.resist_pain ~data:10.<br>
&gt;&gt; in<br>
&gt;&gt; ...<br>
&gt;&gt;<br>
&gt;&gt; On 4 April 2013 09:37, Anthony Tavener &lt;<a href=3D"mailto:antho=
ny.tavener@gmail.com">anthony.tavener@gmail.com</a>&gt; wrote:<br>
&gt;&gt; &gt; Thank-you for the advice and pointers, folks...<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Well, the common problem is still the same one I&#39;ve been =
struggling<br>
&gt;&gt; &gt; with:<br>
&gt;&gt; &gt; &quot;creating keys&quot;, and having to access them.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; I can&#39;t create keys &quot;type-free&quot; in a common mod=
ule. As I figured...<br>
&gt;&gt; &gt; having<br>
&gt;&gt; &gt; &quot;<a href=3D"http://modifier.ml" target=3D"_blank">modifi=
er.ml</a>&quot; with a bunch of Key.create will have monomorphic types<br>
&gt;&gt; &gt; which<br>
&gt;&gt; &gt; can&#39;t be resolved since with no usage in that module to m=
ake the type<br>
&gt;&gt; &gt; concrete. I had a nagging feeling I&#39;d need a &quot;whole-=
program&quot; compiler...<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Instead I&#39;d have to create keys in modules where they are=
 used... but<br>
&gt;&gt; &gt; then I<br>
&gt;&gt; &gt; might have a mess of keys like Wounds.recovery, Combat.resist=
_pain, ...<br>
&gt;&gt; &gt; the<br>
&gt;&gt; &gt; problem being that only a fraction of these keys actually mak=
e sense<br>
&gt;&gt; &gt; being<br>
&gt;&gt; &gt; associated to a particular module, and it gets confusing to k=
now which<br>
&gt;&gt; &gt; (of<br>
&gt;&gt; &gt; several candidates) I decided to stash them into. This was th=
e<br>
&gt;&gt; &gt; attraction to<br>
&gt;&gt; &gt; polymorphic variants (which I rarely use) -- they give a pre-=
ordained<br>
&gt;&gt; &gt; unique<br>
&gt;&gt; &gt; ID based on a simple name... no declaration, and no module pr=
efixing,<br>
&gt;&gt; &gt; which<br>
&gt;&gt; &gt; seems important to me for this case.<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; Note that I have a &quot;database&quot; of tables with differ=
ent types<br>
&gt;&gt; &gt; (implemented by<br>
&gt;&gt; &gt; first-class modules!), and it works great for the bulk of my =
game-state,<br>
&gt;&gt; &gt; but<br>
&gt;&gt; &gt; each table is well-populated and heavily used in consistent m=
anner.<br>
&gt;&gt; &gt; These<br>
&gt;&gt; &gt; modifiers though... they&#39;re a bit like ad-hoc message pas=
sing, where I<br>
&gt;&gt; &gt; can<br>
&gt;&gt; &gt; submit any message and anywhere else add a snippet of code to=
 interpret<br>
&gt;&gt; &gt; it<br>
&gt;&gt; &gt; (not that I have any of that going on, otherwise it might hol=
d the<br>
&gt;&gt; &gt; solution!).<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt; On Thu, Apr 4, 2013 at 1:38 AM, Rapha=EBl Proust &lt;<a href=
=3D"mailto:raphlalou@gmail.com">raphlalou@gmail.com</a>&gt;<br>
&gt;&gt; &gt; wrote:<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; On Thu, Apr 4, 2013 at 1:45 AM, Anthony Tavener<br>
&gt;&gt; &gt;&gt; &lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.=
tavener@gmail.com</a>&gt; wrote:<br>
&gt;&gt; &gt;&gt; &gt; [=85]<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; And yet-another-solution, Ocsigen&#39;s Polytable:<br>
&gt;&gt; &gt;&gt; <a href=3D"http://ocsigen.org/ocsigenserver/api/Polytable=
s" target=3D"_blank">http://ocsigen.org/ocsigenserver/api/Polytables</a><br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt;<br>
&gt;&gt; &gt;&gt; Cheers,<br>
&gt;&gt; &gt;&gt; --<br>
&gt;&gt; &gt;&gt; ______________<br>
&gt;&gt; &gt;&gt; Rapha=EBl Proust<br>
&gt;&gt; &gt;<br>
&gt;&gt; &gt;<br>
&gt;<br>
&gt;<br>
</div></div></blockquote></div><br></div></div>

--047d7b603fe6aac77004d9a13da3--
