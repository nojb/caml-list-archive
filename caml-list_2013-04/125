Return-Path: <anthony.tavener@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 3916D7EE51
	for <caml-list@sympa.inria.fr>; Sat, 13 Apr 2013 18:07:24 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  anthony.tavener@gmail.com) identity=pra;
  client-ip=74.125.83.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  anthony.tavener@gmail.com designates 74.125.83.48 as
  permitted sender) identity=mailfrom; client-ip=74.125.83.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="anthony.tavener@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ee0-f48.google.com) identity=helo;
  client-ip=74.125.83.48;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="anthony.tavener@gmail.com";
  x-sender="postmaster@mail-ee0-f48.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AnMCAD6BaVFKfVMwk2dsb2JhbABQgzy5FwGINXwIFg4BAQEBBwsLCRQEJIIfAQEEAScZARsdAQMBCwYFCw0uIQEBEQEFARwGEwiHeQEDCQYMnRKML4J7hBUKGScNWYh+AQUMjDiCUweDQQOJBYwdgWOBIYpUgzoWKYRNHQ
X-IPAS-Result: AnMCAD6BaVFKfVMwk2dsb2JhbABQgzy5FwGINXwIFg4BAQEBBwsLCRQEJIIfAQEEAScZARsdAQMBCwYFCw0uIQEBEQEFARwGEwiHeQEDCQYMnRKML4J7hBUKGScNWYh+AQUMjDiCUweDQQOJBYwdgWOBIYpUgzoWKYRNHQ
X-IronPort-AV: E=Sophos;i="4.87,468,1363129200"; 
   d="scan'208";a="13125761"
Received: from mail-ee0-f48.google.com ([74.125.83.48])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 13 Apr 2013 18:07:23 +0200
Received: by mail-ee0-f48.google.com with SMTP id b15so1694669eek.21
        for <caml-list@inria.fr>; Sat, 13 Apr 2013 09:07:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=QEGnb1ef4UaND6kk6M0R3GArfW5UpMLTWbnK5gldYRA=;
        b=AKrJWFKbZwIdKHa0tvhwDDyanIRfMet0v/h6CFyOp15CBfOetau1TqqGkHY253FAj2
         nWW/TzqGqbb27Z68Esq/yTu+oT5v3jb23Qfnu6/eSeDcyhMQ/CXUcoJdtjFuixQL9U/3
         JPdYE0LOiO06g05lCtiKXp49QCr3NEkwfpGoKwWJQTc0cuZhihnsphb6/Kko+hY6RcqY
         9Sw4XTU/8g8HiQRdSBRYcr5xoGcOlAbv/x8/g3976B5KV/np909XGcOpinJH1iQRwIH+
         n19X7lkxdOLWtU8t5mayj3X7i8tZQtqIsQBuOq6zcoXc39XOOrMNk/5lCTRYVUMge37X
         rJEw==
MIME-Version: 1.0
X-Received: by 10.14.110.198 with SMTP id u46mr40745743eeg.41.1365869243053;
 Sat, 13 Apr 2013 09:07:23 -0700 (PDT)
Received: by 10.14.7.4 with HTTP; Sat, 13 Apr 2013 09:07:22 -0700 (PDT)
In-Reply-To: <CAPFanBHD-3aK+osLRxn-McxB7FdmHtpDPeaqGme81jcyt4XiYw@mail.gmail.com>
References: <CAN=ouMQQM8ox8qfSKP_ZPdwTdXb4FL5FwRuJMW9P5MERvPV3Dw@mail.gmail.com>
	<CAGmVoG2eiM_t-qq5GCsOBuE3iYZG62PvVVtm_WueVx1FUjH3EQ@mail.gmail.com>
	<CAPFanBHD-3aK+osLRxn-McxB7FdmHtpDPeaqGme81jcyt4XiYw@mail.gmail.com>
Date: Sat, 13 Apr 2013 10:07:22 -0600
Message-ID: <CAN=ouMR1vnXU7C-fMjBvBSnuFpT4sxCihQPKqjGaey_iaT_2sA@mail.gmail.com>
From: Anthony Tavener <anthony.tavener@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: Kakadu <kakadu.hafanana@gmail.com>, "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e0158c2260ae60104da40377e
Subject: Re: [Caml-list] Types look compatible, but they aren't?


--089e0158c2260ae60104da40377e
Content-Type: text/plain; charset=ISO-8859-1

Ohhh... that is interesting. (TL;DR: problem solved, and it was from
inappropriate Oo.id use.)

Modifier.attach is actually implemented as a function of one argument which
does some stuff,
returning a function of two arguments, to avoid redundant lookups in the
case of multiple "attach"
to the same "id".

When I remove the let m = ... and just inline "Modifer.attach id ..." the
type of Modifier.attach changes to:

  Db.key -> int * (((< _.. > as 'a) list -> exn) * (exn -> 'a list) -> 'a
-> Modifier.deleter

So, 'a becomes: (< _.. > as 'a) -- I get some monomorphic... object?

As I wrote this I had an idea and found the problem:

  ...
  (* return (tbl -> unit) function which deletes this specific function *)
  let del_id = Oo.id fn in
  (fun tbl ->
    let lst = List.filter (fun e -> Oo.id e <> del_id) (fn_list tbl) in
    Hashtbl.replace tbl tag (inj lst))


Here, "fn" is the provided function, and I want an easy way to remove such
functions uniquely from the
mess of Hashtbl, universal embedding, and list. I tried a trick I once read
Alain suggest for getting a
unique id using the object module... and I guess that brought in this <..>
thing I was unfamiliar with. :)
Instead of Oo.id I'm using Hashtbl.hash now, which is normally what I'd
do... not sure why I
half-remembered some trick with Oo.id.

Thank-you for looking at this, both of you. It helped me dig in the right
direction!


On Sat, Apr 13, 2013 at 1:33 AM, Gabriel Scherer
<gabriel.scherer@gmail.com>wrote:

> This looks like a value restriction issue with
>
>   let m = Modifier.attach id
>
>   "A function obtained through partial application is not polymorphic
> enough"
>   http://caml.inria.fr/resources/doc/faq/core.en.html#eta-expansion
>
> If this is indeed the source of your error, you can regain
> type-checking by using instead
>
>   let m total = Modifier.attach id total
>
> Note that this may change the semantics of your code if
> (Modifier.attach id) does a side-effect before getting its next
> parameter: if would have been effected only once with your previous
> definition, and will be effected at each call of 'm' with the new
> definition.
>
> On Sat, Apr 13, 2013 at 8:56 AM, Kakadu <kakadu.hafanana@gmail.com> wrote:
> > Maybe function type (int * int -> int * int) is incompatible with object
> > type <..>?
> >
> > Kakadu
> >
> >
> > On Sat, Apr 13, 2013 at 10:50 AM, Anthony Tavener
> > <anthony.tavener@gmail.com> wrote:
> >>
> >> File "virtue.ml", line 462, characters 12-24:
> >> Error: This expression has type
> >>          int * ((int * int -> int * int) list -> exn) *
> >>          (exn -> (int * int -> int * int) list)
> >>        but an expression was expected of type
> >>          int * ((< .. > as 'a) list -> exn) * (exn -> 'a list)
> >>
> >> The code in question:
> >>
> >>   (fun id ->
> >>     let m = Modifier.attach id in
> >>       [ m Cast.total'k (fun (v,b) -> (v, max 1 (b-3)))     (* <-- line
> 462
> >> *)
> >>       ; m Lab.total'k (fun (v,b) -> (v, max 1 (b-3))) ])
> >>
> >> For reference, the signature of Modifier.attach:
> >>   Db.key -> int * ('a list -> exn) * (exn -> 'a list) -> 'a ->
> >> Modifier.deleter
> >>
> >> OCaml version is 4.00.0 -- I know I should upgrade. Keep meaning to, I
> >> guess I will if I wake up and there's no helpful soul explaining what
> >> could
> >> be wrong here. :)
> >>
> >> Thank-you for any help. My eyes are starting to bug-out looking at this.
> >>
> >>  -Tony
> >>
> >>
> >
>

--089e0158c2260ae60104da40377e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Ohhh... that is interesting. (TL;DR: problem solved, and i=
t was from inappropriate Oo.id use.)<div><br></div><div style>Modifier.atta=
ch is actually implemented as a function of one argument which does some st=
uff,</div>
<div style>returning a function of two arguments, to avoid redundant lookup=
s in the case of multiple &quot;attach&quot;</div><div style>to the same &q=
uot;id&quot;.</div><div style><br></div><div style>When I remove the let m =
=3D ... and just inline &quot;Modifer.attach id ...&quot; the type of Modif=
ier.attach changes to:</div>
<div style><br></div><div style>=A0 Db.key -&gt; int * (((&lt; _.. &gt; as =
&#39;a) list -&gt; exn) * (exn -&gt; &#39;a list) -&gt; &#39;a -&gt; Modifi=
er.deleter<br></div><div style><br></div><div style>So, &#39;a becomes: (&l=
t; _.. &gt; as &#39;a) -- I get some monomorphic... object?<br>
</div><div style><br></div><div style>As I wrote this I had an idea and fou=
nd the problem:</div><div style><br></div><div style>=A0 ...</div><div styl=
e><div>=A0 (* return (tbl -&gt; unit) function which deletes this specific =
function *)</div>
<div>=A0 let del_id =3D Oo.id fn in</div><div>=A0 (fun tbl -&gt;<br></div><=
div>=A0 =A0 let lst =3D List.filter (fun e -&gt; Oo.id e &lt;&gt; del_id) (=
fn_list tbl) in</div><div>=A0 =A0 Hashtbl.replace tbl tag (inj lst))</div><=
div><br></div>
<div><br></div><div style>Here, &quot;fn&quot; is the provided function, an=
d I want an easy way to remove such functions uniquely from the</div><div s=
tyle>mess of Hashtbl, universal embedding, and list. I tried a trick I once=
 read Alain suggest for getting a</div>
<div style>unique id using the object module... and I guess that brought in=
 this &lt;..&gt; thing I was unfamiliar with. :)</div><div style>Instead of=
 Oo.id I&#39;m using Hashtbl.hash now, which is normally what I&#39;d do...=
 not sure why I</div>
<div style>half-remembered some trick with Oo.id.</div><div style><br></div=
><div style>Thank-you for looking at this, both of you. It helped me dig in=
 the right direction!</div></div></div><div class=3D"gmail_extra"><br><br>
<div class=3D"gmail_quote">On Sat, Apr 13, 2013 at 1:33 AM, Gabriel Scherer=
 <span dir=3D"ltr">&lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=
=3D"_blank">gabriel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote =
class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
;padding-left:1ex">
This looks like a value restriction issue with<br>
<div class=3D"im"><br>
=A0 let m =3D Modifier.attach id<br>
<br>
</div>=A0 &quot;A function obtained through partial application is not poly=
morphic enough&quot;<br>
=A0 <a href=3D"http://caml.inria.fr/resources/doc/faq/core.en.html#eta-expa=
nsion" target=3D"_blank">http://caml.inria.fr/resources/doc/faq/core.en.htm=
l#eta-expansion</a><br>
<br>
If this is indeed the source of your error, you can regain<br>
type-checking by using instead<br>
<br>
=A0 let m total =3D Modifier.attach id total<br>
<br>
Note that this may change the semantics of your code if<br>
(Modifier.attach id) does a side-effect before getting its next<br>
parameter: if would have been effected only once with your previous<br>
definition, and will be effected at each call of &#39;m&#39; with the new<b=
r>
definition.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Sat, Apr 13, 2013 at 8:56 AM, Kakadu &lt;<a href=3D"mailto:kakadu.hafana=
na@gmail.com">kakadu.hafanana@gmail.com</a>&gt; wrote:<br>
&gt; Maybe function type (int * int -&gt; int * int) is incompatible with o=
bject<br>
&gt; type &lt;..&gt;?<br>
&gt;<br>
&gt; Kakadu<br>
&gt;<br>
&gt;<br>
&gt; On Sat, Apr 13, 2013 at 10:50 AM, Anthony Tavener<br>
&gt; &lt;<a href=3D"mailto:anthony.tavener@gmail.com">anthony.tavener@gmail=
.com</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; File &quot;<a href=3D"http://virtue.ml" target=3D"_blank">virtue.m=
l</a>&quot;, line 462, characters 12-24:<br>
&gt;&gt; Error: This expression has type<br>
&gt;&gt; =A0 =A0 =A0 =A0 =A0int * ((int * int -&gt; int * int) list -&gt; e=
xn) *<br>
&gt;&gt; =A0 =A0 =A0 =A0 =A0(exn -&gt; (int * int -&gt; int * int) list)<br>
&gt;&gt; =A0 =A0 =A0 =A0but an expression was expected of type<br>
&gt;&gt; =A0 =A0 =A0 =A0 =A0int * ((&lt; .. &gt; as &#39;a) list -&gt; exn)=
 * (exn -&gt; &#39;a list)<br>
&gt;&gt;<br>
&gt;&gt; The code in question:<br>
&gt;&gt;<br>
&gt;&gt; =A0 (fun id -&gt;<br>
&gt;&gt; =A0 =A0 let m =3D Modifier.attach id in<br>
&gt;&gt; =A0 =A0 =A0 [ m Cast.total&#39;k (fun (v,b) -&gt; (v, max 1 (b-3))=
) =A0 =A0 (* &lt;-- line 462<br>
&gt;&gt; *)<br>
&gt;&gt; =A0 =A0 =A0 ; m Lab.total&#39;k (fun (v,b) -&gt; (v, max 1 (b-3)))=
 ])<br>
&gt;&gt;<br>
&gt;&gt; For reference, the signature of Modifier.attach:<br>
&gt;&gt; =A0 Db.key -&gt; int * (&#39;a list -&gt; exn) * (exn -&gt; &#39;a=
 list) -&gt; &#39;a -&gt;<br>
&gt;&gt; Modifier.deleter<br>
&gt;&gt;<br>
&gt;&gt; OCaml version is 4.00.0 -- I know I should upgrade. Keep meaning t=
o, I<br>
&gt;&gt; guess I will if I wake up and there&#39;s no helpful soul explaini=
ng what<br>
&gt;&gt; could<br>
&gt;&gt; be wrong here. :)<br>
&gt;&gt;<br>
&gt;&gt; Thank-you for any help. My eyes are starting to bug-out looking at=
 this.<br>
&gt;&gt;<br>
&gt;&gt; =A0-Tony<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
</div></div></blockquote></div><br></div>

--089e0158c2260ae60104da40377e--
