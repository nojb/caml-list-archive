Return-Path: <malc@pulsesoft.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 91D75BB9C
	for <caml-list@yquem.inria.fr>; Sun, 18 Dec 2005 16:03:31 +0100 (CET)
Received: from comtv.ru (mail.comtv.ru [217.10.32.19])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id jBIF3U9A003341
	for <caml-list@yquem.inria.fr>; Sun, 18 Dec 2005 16:03:31 +0100
X-UCL: actv
Received: from av1474.oops ([10.0.66.9] verified)
  by comtv.ru (CommuniGate Pro SMTP 4.1.8)
  with ESMTP id 113519090; Sun, 18 Dec 2005 18:03:30 +0300
Date: Sun, 18 Dec 2005 18:04:08 +0300 (MSK)
From: malc <malc@pulsesoft.com>
X-X-Sender: malc@home.oyster.ru
To: Andries Hekstra <andries.hekstra@philips.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Funny effect computation time
In-Reply-To: <OF270D6FEB.64D91E96-ONC12570DB.00423925-C12570DB.004EAE5E@philips.com>
Message-ID: <Pine.LNX.4.61.0512181759010.1107@home.oyster.ru>
References: <OF270D6FEB.64D91E96-ONC12570DB.00423925-C12570DB.004EAE5E@philips.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
X-Miltered: at nez-perce with ID 43A57A42.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; malc:01 malc:01 pulsesoft:01 caml-list:01 ocaml-list:01 ocaml:01 -inline:01 -noassert:01 -unsafe:01 ocaml:01 pulsesoft:01 1.5:98 080:98 afa:98 080:98 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.3

On Sun, 18 Dec 2005, Andries Hekstra wrote:

> Dear OCaml-list,
>
> I would like to thank several people of the ocaml list for constructive
> comments to the LDPC decoder program I posted earlier. I attached the
> revised Main.ml to this email.
>
> I noticed that when compiling Main.ml with -inline 100 -noassert -unsafe
> on a Pentium M, and I removing the unused argument messageCheckNodeOut of
> the function processCheckNode (resulting in Main2.ml), the computation
> time increases ca. 1.5-fold. I wonder whether this has to do with
> (un)boxing?

It's hard to say why OCaml somtimes produces the code the way it does,
it's even harder to predict how it will be intrepreted by different
"modern" CPUs. Here's a list of potentially useful links.

http://groups.google.com/group/fa.caml/browse_frm/thread/9c152a39b30c88d5/080df2a83aa2d878?lnk=st&q=group%3Afa.caml+author%3Amalc+faster&rnum=3#080df2a83aa2d878
http://groups.google.com/group/fa.caml/browse_thread/thread/624ed8213174b634/f5371b023927cc8e?lnk=st&q=group%3Afa.caml+author%3Amalc&rnum=15#f5371b023927cc8e
http://groups.google.com/group/fa.caml/browse_frm/thread/c9e40e633120a79/5f14ce70f4a35373?tvc=1&q=group%3Afa.caml+author%3Amalc#5f14ce70f4a35373
http://groups.google.com/group/comp.lang.functional/browse_frm/thread/4a6159c5beef192a/689140a6436f558f?lnk=st&q=malc+stand+corrected+ocaml&rnum=1#689140a6436f558f

-- 
mailto:malc@pulsesoft.com

