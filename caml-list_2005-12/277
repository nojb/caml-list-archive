Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 9FA00BB81
	for <caml-list@yquem.inria.fr>; Thu, 29 Dec 2005 19:05:48 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jBTI5mWn023306
	for <caml-list@yquem.inria.fr>; Thu, 29 Dec 2005 19:05:48 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA00451 for <caml-list@pauillac.inria.fr>; Thu, 29 Dec 2005 19:05:47 +0100 (MET)
Received: from ptb-cgirelay01.plus.net (ptb-cgirelay01.plus.net [195.166.130.40])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jBTI5l3I023299
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NO)
	for <caml-list@inria.fr>; Thu, 29 Dec 2005 19:05:47 +0100
Message-Id: <200512291805.jBTI5l3I023299@concorde.inria.fr>
Received: from [212.159.6.58] (helo=ptn-atmail03.plus.net)
	by ptb-cgirelay01.plus.net with esmtp (Exim 4.34)
	id 1Es2iK-0003pT-0x
	for caml-list@inria.fr; Thu, 29 Dec 2005 18:41:24 +0000
Content-Type: text/plain; charset="iso-8859-1"
Content-Disposition: inline
Content-Transfer-Encoding: binary
Mime-Version: 1.0
From: Jonathan Harrop <jdh30@jdh30.plus.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] LablGL - get_matrix problem or silly mistake
Reply-To: jdh30@jdh30.plus.com
X-Mailer: AtMail 4.01
X-Origin: 217.36.231.62
X-Uidl: 43b3ce80b6d4b@wppl
Date: Thu, 29 Dec 2005 18:08:59 +0000
X-j-chkmail-Score: MSGID : 43B4257B.000 on concorde : j-chkmail score : X : 0/20 1
X-Miltered: at concorde with ID 43B4257C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 43B4257B.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 lablgl:01 lablgl:01 ocaml:01 printf:01 iter:01 iter:01 printf:01 argv:01 mainloop:01 ocamlc:01 lablglut:01 ocaml:01 stack:01 pairs:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=FROM_ENDS_IN_NUMS,
	MSGID_FROM_MTA_HEADER autolearn=disabled version=3.0.3

On Thu Dec 29 11:54 , 'Grzegorz Malesik' <fnan@wp.pl> sent:  
>I'm using the LablGL 1.0.1 and have a get_matrix related problem. I wonder   
>if it actually works (however I'm just a beginner in ocaml so I may be   
>wrong).  
 
I've been using that lablGL function for quite some time and it seems to work perfectly. I just wrote  
a little test program and that prints the identity matrix as expected:  
  
open Printf;;  
  
let print_mat m =  
  Array.iter (fun row ->  
		Array.iter (printf "%f ") row;  
		printf "\n") (GlMat.to_array m);;  
  
let _ =  
  let argv' = Glut.init Sys.argv in  
  ignore (Glut.createWindow ~title:"OpenGL Demo");  
  Glut.displayFunc ~cb:(fun () ->  
			  GlMat.mode `modelview;  
			  GlMat.load_identity();  
			  print_mat (GlMat.get_matrix `modelview_matrix));  
  Glut.idleFunc ~cb:(Some (fun () -> exit 0));  
  Glut.mainLoop ();; 
 
$ ocamlc -I +lablgl lablglut.cma lablgl.cma base.ml -o base 
$ ./base 
1.000000 0.000000 0.000000 0.000000 
0.000000 1.000000 0.000000 0.000000 
0.000000 0.000000 1.000000 0.000000 
0.000000 0.000000 0.000000 1.000000 
 
So I think your problem is an OpenGL one rather than an OCaml one. 
 
>GlMat.mode `modelview;  
>GlMat.push ();  
>GlMat.load_identity ();  
>let transform_matrix = GlMat.get_matrix `modelview_matrix in  
>print_matrix (transform_matrix);  
  
Check for OpenGL and GLU errors. Have you called "GlMat.push" too many times and run out of matrix  
stack? Are you calling "GlMat.pop" for every push? Should you factor those pairs of calls out into a 
HOF to ensure that they are always called correctly? 
 
>This is the print matrix function:  
>  
>(* outputs the given matrix *)  
>let print_matrix matrix =  
>    let mat = GlMat.to_array(matrix) in  
>    print_string "[";  
>    Array.iter(print_separated_float) mat.(0);  
>    print_string "|\n|";  
>    Array.iter(print_separated_float) mat.(1);  
>    print_string "|\n|";  
>    Array.iter(print_separated_float) mat.(2);  
>    print_string "|\n|";  
>    Array.iter(print_separated_float) mat.(3);  
>    print_string "]\n"  
  
You may also like to use String.concat to avoid the superfluous space at the end of each line in my 
above implementation: 
  
let print_mat = 
  let aux l = String.concat " " (List.map string_of_float l) in 
  Array.iter (fun r -> print_endline (aux (Array.to_list r)));; 
 
Cheers, 
Jon. 
 

