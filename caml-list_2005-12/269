Return-Path: <fw@deneb.enyo.de>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 46AB1BB81
	for <caml-list@yquem.inria.fr>; Wed, 28 Dec 2005 10:53:59 +0100 (CET)
Received: from mail.enyo.de (mail.enyo.de [212.9.189.167])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id jBS9rwV2020242
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 28 Dec 2005 10:53:59 +0100
Received: from deneb.vpn.enyo.de ([212.9.189.177] helo=deneb.enyo.de)
	by mail.enyo.de with esmtp id 1ErY0L-0001J8-8A; Wed, 28 Dec 2005 10:53:57 +0100
Received: from fw by deneb.enyo.de with local (Exim 4.60)
	(envelope-from <fw@deneb.enyo.de>)
	id 1ErY0J-0003Gg-HS; Wed, 28 Dec 2005 10:53:55 +0100
From: Florian Weimer <fw@deneb.enyo.de>
To: "Stephen Brackin" <stephen.brackin@verizon.net>
Cc: <caml-list@yquem.inria.fr>
Subject: Re: [Caml-list] Ask-if-continue wrapper?
References: <0IS700AHX9M9TKT2@vms042.mailsrvcs.net>
Date: Wed, 28 Dec 2005 10:53:55 +0100
In-Reply-To: <0IS700AHX9M9TKT2@vms042.mailsrvcs.net> (Stephen Brackin's
	message of "Wed, 28 Dec 2005 03:44:29 -0500")
Message-ID: <87wthppmx8.fsf@mid.deneb.enyo.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Miltered: at concorde with ID 43B260B6.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 argument:01 florian:02 incorrect:02 library:03 generally:03 asynchronous:03 horrible:04 folks:05 i'd:05 evaluating:06 terrible:08 function:08 function:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

* Stephen Brackin:

> I'd like an OCaml function, which I'll call continueq, with the property
> that for any function f with argument(s) fargs,
>
> continueq f fargs tsecs defaultval
>
> starts evaluating f on fargs and lets this evaluation proceed for up to
> tsecs seconds.

Other folks call this "asynchronous transfer of control", and it is
generally thought to be a terrible mistakes once you've put it into a
language.  It leads to horrible complexities and tends to make lots of
good library code incorrect.

