Return-Path: <emir.pasalic@logicblox.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by yquem.inria.fr (Postfix) with ESMTP id 9DBD0BBAF
	for <caml-list@yquem.inria.fr>; Fri,  5 Dec 2008 04:08:07 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtQCABsqOEkmaAAegWdsb2JhbACTTwEBFiK8JIMFg2k
X-IronPort-AV: E=Sophos;i="4.33,718,1220220000"; 
   d="scan'208";a="18004371"
Received: from vpn.predictix.com (HELO email.predictix.com) ([38.104.0.30])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 05 Dec 2008 04:08:06 +0100
Received: from localhost (localhost.localdomain [127.0.0.1])
	by email.predictix.com (Postfix) with ESMTP id 6BB762628727;
	Thu,  4 Dec 2008 22:08:05 -0500 (EST)
X-Virus-Scanned: amavisd-new at 
Received: from email.predictix.com ([127.0.0.1])
	by localhost (email.predictix.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id W8rFMRtOr8nb; Thu,  4 Dec 2008 22:08:04 -0500 (EST)
Received: from [192.168.1.3] (64_30_165_27.hyperband.com [64.30.165.27])
	by email.predictix.com (Postfix) with ESMTP id A5C08262840D;
	Thu,  4 Dec 2008 22:08:03 -0500 (EST)
Message-Id: <35DECF69-EC03-4B12-9D09-95E87AB9E22B@logicblox.com>
From: Emir Pasalic <emir.pasalic@logicblox.com>
To: boost@lists.boost.org, Boost-Interest@lists.boost.org,
	types-announce@lists.seas.upenn.edu, oon-list@oonumerics.org,
	planetmde@imag.fr, caml-list@yquem.inria.fr, EAPLS@JISCMAIL.AC.UK,
	newsletter_srpublishing@yahoo.cn, ai@cs.man.ac.uk,
	concurrency@cwi.nl, fm-discussion@cs.man.ac.uk, pvs@csl.sri.com,
	qed@mcs.anl.gov, lics@informatik.hu-berlin.de, loco@csc.liv.ac.uk,
	theorem-provers@ai.mit.edu, rewriting@ens-lyon.fr,
	twelf-list@twelf.org, isabelle-users@cl.cam.ac.uk,
	math.logik@gmx.net, hol-info@lists.sourceforge.net,
	pept@kb.ecei.tohoku.ac.jp, haskell-cafe@haskell.org,
	haskell <haskell@haskell.org>, publicity@hipeac.net,
	agda@lists.chalmers.se, announce@aosd.net, ieeewicom@gmail.com,
	types-wg@durham.ac.uk, stratego@cs.uu.nl, cfp@clip.dia.fi.upm.es,
	plt-scheme@fast.cs.utah.edu, mercury-ads@cs.mu.oz.au,
	cgn-talk@yahoogroups.com, clean-list@cs.kun.nl,
	gpce-news@cs.rice.edu, seworld@cs.colorado.edu,
	gnome-announce-list@gnome.org, logic@theory.lcs.mit.edu,
	logic@cs.indiana.edu, announcements@oopsla.acm.org,
	compunode@compulog.org, compulog@doc.imperial.ac.uk,
	forum@jsoftware.com, coq-club@pauillac.inria.fr
Content-Type: text/plain; charset=ISO-8859-2; format=flowed; delsp=yes
Content-Transfer-Encoding: quoted-printable
Mime-Version: 1.0 (Apple Message framework v929.2)
Subject: Finall Call For Papers (DSL WC)
Date: Thu, 4 Dec 2008 22:08:02 -0500
X-Mailer: Apple Mail (2.929.2)
X-Spam: no; 0.00; ifip:01 notations:01 semantics:01 syntax:01 pointers:01 lncs:01 lncs:01 avayalabs:01 henzinger:01 kieburtz:01 ralf:01 sarkar:01 taha:01 weirich:01 javascript:98 

*** IFIP Working Conference on Domain Specific Languages (DSL WC) ***
       July 15-17, 2009, Oxford

http://www.hope.cs.rice.edu/twiki/bin/view/WG211/DSLWC

* Call for Papers
Domain-specific languages are emerging as a fundamental component of =20
software engineering practice. DSLs are often introduced when new =20
domains such as web-scripting or markup come into existence, but it is =20=

also common to see DSLs being introduced and adopted for traditional =20
domains such as parsing and data description. Developing software =20
using DSLs has many benefits. DSLs are often designed based on =20
existing notations that are already in use by experts in a given =20
domain. As such, successful DSLs often reduce or eliminate the effort =20=

needed to transform the concept or innovation produced by the domain =20
expert into an executable artifact or even a deliverable software =20
product. DSL implementations can capture and mechanize a significant =20
portion of the repetitive and mechanical tasks that a domain expert =20
traditionally needed to perform in order to produce an executable. =20
DSLs can in many cases capture and make widely available special =20
expertise that only top specialists in a given domain might have. By =20
capturing expert knowledge and reducing repetitive tasks, DSLs often =20
also lead to software that is significantly more portable, more =20
reliable and more understandable than it would otherwise be.

DSLs can be viewed as having a dual role to general-purpose languages: =20=

whereas general purpose languages try to do everything as well as =20
possible, DSLs are designed to find a domain where they can solve some =20=

class of problems -- no matter how small -- in the best possible way. =20=

Widely known examples of DSLs include Matlab, Verilog, SQL, LINQ, =20
JavaScript, PERL, HTML, Open GL, Tcl/Tk, Macromedia Director, =20
Mathematica/Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX, =20=

PostScript, Excel, among many others. But while these tools have been =20=

widely successful, they still fall short of realizing the full idea =20
behind them. The goal of this conference is to explore the extent to =20
which incorporating modern principles of language design and software =20=

engineering can benefit existing and future domain-specific languages.

The ultimate goal of using DSLs is to improve programmer productivity =20=

and software quality. Often, this is achieved by reducing the cost of =20=

initial software development as well as maintenance costs. These =20
improvements - programs being easier to write and maintain - =20
materialize as a result of domain-specific guarantees, analyses, =20
testing techniques, verification techniques, and optimizations.

*  Paper Criteria
Papers are sought addressing the research problems, fundamental =20
principles, and practical techniques of DSLs, including but not =20
limited to:
        -  Foundations, including semantics, formal methods, type =20
theory, and complexity theory
        -   Language design, ranging from concrete syntax to semantic =20=

and typing issues
        -   Software engineering, including domain analysis, software =20=

design, and 	  round-trip engineering
        -   Software processes, including metrics for software and =20
language evaluation
        -   Implementation techniques, including parsing, compiling, =20
and program 	  generation
        -   Program analysis and automated transformation
        -  Reverse engineering, re-engineering, design discovery, =20
automated refactoring
        -  Hardware/software codesign
        -  Programming environments, including visual languages, =20
debuggers, and testing  infrastructure
        -   Teaching DSLs and the use of DSLs in teaching

Case studies, including engineering, bioinformatics, hardware =20
specification languages, parallel computing languages, real-time and =20
embedded systems, and networked and distributed domains
Papers will be judged on the depth of their insight and the extent to =20=

which they translate specific experience into general lessons for =20
domain-specific language designers and implementers, and software =20
engineers. Papers can range from the practical to the theoretical; =20
where appropriate, they should refer to actual languages, tools, and =20
techniques, provide pointers to full definitions and implementations, =20=

and include empirical data on results.

    * Important Dates
        -  July 23rd, 2008: First Call for Papers
        -  November 12th, 2008: Final Call for Papers
        - December 14th, 2008: Abstract submission due.
        - December 21st, 2008: Paper submission deadline.
        - February 23rd, 2009: Author notification of decisions
        - March 22nd, 2009: Camera ready manuscripts due

    * Instructions for Authors
Proceedings will be published in the Springer LNCS series. Submissions =20=

and final manuscripts are to follow the LNCS stylesheet formatting =20
guidelines, and are not to exceed 25 pages. Please submit your =20
manuscripts online using the EasyChair conference management system.

    * Program Committee
Jon Bentley, Avayalabs
Martin Erwig, Oregon State University
Jeff Gray, University of Alabama at Birmingham
Robert Grimm, New York University
Jim Grundy, Intel Strategic CAD Labs
Tom Henzinger, EPFL
Sam Kamin, UIUC
Dick Kieburtz, Portland State University
Ralf L=E4mmel, University of Koblenz
Julia Lawall, University of Copenhagen
Benjamin Pierce, University of Pennsylvania
Vivek Sarkar, Rice University
Jeremy Siek, University of Colorado at Boulder
Jos=E9 Nuno Oliveira, University of Minho
Doaitse Swierstra, Utrecht University
Walid Taha (Chair), Rice University
Eelco Visser, Delft University
William Waite, University of Colorado at Boulder
Stephanie Weirich, University of Pennsylvania

    * Organizers
General Chair: Jeremy Gibbons, Oxford University
Publicity Chair: Emir Pasalic, LogicBlox=

