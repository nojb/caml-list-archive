Return-Path: <pasalic@cs.rice.edu>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=AWL,HTML_10_20,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id BBE1ABBAF
	for <caml-list@yquem.inria.fr>; Fri,  5 Dec 2008 04:18:42 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhoCAHMsOEmAKgEfiWdsb2JhbACCPjKEMYwuAQEBCgsREQWwHoZihQeDBYNp
X-IronPort-AV: E=Sophos;i="4.33,718,1220220000"; 
   d="scan'208,217";a="19933747"
Received: from mail.cs.rice.edu ([128.42.1.31])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 05 Dec 2008 04:18:41 +0100
Received: from mail.cs.rice.edu (localhost.localdomain [127.0.0.1])
	by mail.cs.rice.edu (Postfix) with ESMTP id 7CD212C2AD0;
	Thu,  4 Dec 2008 21:18:39 -0600 (CST)
X-Virus-Scanned: by amavis-2.4.0 at mail.cs.rice.edu
Received: from mail.cs.rice.edu ([127.0.0.1])
	by mail.cs.rice.edu (mail.cs.rice.edu [127.0.0.1]) (amavisd-new, port 10024)
	with LMTP id CMj4hszwyiZH; Thu,  4 Dec 2008 21:18:31 -0600 (CST)
Received: from [192.168.1.3] (64_30_165_27.hyperband.com [64.30.165.27])
	(using TLSv1 with cipher AES128-SHA (128/128 bits))
	(No client certificate requested)
	by mail.cs.rice.edu (Postfix) with ESMTP id 04D2E2C2A8E;
	Thu,  4 Dec 2008 21:18:30 -0600 (CST)
Message-Id: <A159E76F-6346-4EFE-BC15-45CAE6C6B7D2@cs.rice.edu>
From: Emir Pasalic <pasalic@cs.rice.edu>
To: EAPLS@JISCMAIL.AC.UK, types-announce-owner@lists.seas.upenn.edu,
	announce@aosd.net, announcements@oopsla.acm.org,
	caml-list@yquem.inria.fr, coq-club@pauillac.inria.fr,
	haskell-cafe@haskell.org, gpce-news@cs.rice.edu
Content-Type: multipart/alternative; boundary=Apple-Mail-2-1031806819
Mime-Version: 1.0 (Apple Message framework v929.2)
Subject: Finall Call For Papers (DSL WC) 
Date: Thu, 4 Dec 2008 22:18:29 -0500
X-Mailer: Apple Mail (2.929.2)
X-Spam: no; 0.00; ifip:01 notations:01 semantics:01 syntax:01 pointers:01 lncs:01 lncs:01 avayalabs:01 henzinger:01 kieburtz:01 ralf:01 sarkar:01 taha:01 weirich:01 ifip:01 
X-Attachments: cset="ISO-8859-2" cset="ISO-8859-2" 


--Apple-Mail-2-1031806819
Content-Type: text/plain;
	charset=ISO-8859-2;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: quoted-printable

*** IFIP Working Conference on Domain Specific Languages (DSL WC) ***
      July 15-17, 2009, Oxford

http://www.hope.cs.rice.edu/twiki/bin/view/WG211/DSLWC

* Call for Papers
Domain-specific languages are emerging as a fundamental component of =20
software engineering practice. DSLs are often introduced when new =20
domains such as web-scripting or markup come into existence, but it is =20=

also common to see DSLs being introduced and adopted for traditional =20
domains such as parsing and data description. Developing software =20
using DSLs has many benefits. DSLs are often designed based on =20
existing notations that are already in use by experts in a given =20
domain. As such, successful DSLs often reduce or eliminate the effort =20=

needed to transform the concept or innovation produced by the domain =20
expert into an executable artifact or even a deliverable software =20
product. DSL implementations can capture and mechanize a significant =20
portion of the repetitive and mechanical tasks that a domain expert =20
traditionally needed to perform in order to produce an executable. =20
DSLs can in many cases capture and make widely available special =20
expertise that only top specialists in a given domain might have. By =20
capturing expert knowledge and reducing repetitive tasks, DSLs often =20
also lead to software that is significantly more portable, more =20
reliable and more understandable than it would otherwise be.

DSLs can be viewed as having a dual role to general-purpose languages: =20=

whereas general purpose languages try to do everything as well as =20
possible, DSLs are designed to find a domain where they can solve some =20=

class of problems -- no matter how small -- in the best possible way. =20=

Widely known examples of DSLs include Matlab, Verilog, SQL, LINQ, =20
JavaScript, PERL, HTML, Open GL, Tcl/Tk, Macromedia Director, =20
Mathematica/Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, lex/yacc, LaTeX, =20=

PostScript, Excel, among many others. But while these tools have been =20=

widely successful, they still fall short of realizing the full idea =20
behind them. The goal of this conference is to explore the extent to =20
which incorporating modern principles of language design and software =20=

engineering can benefit existing and future domain-specific languages.

The ultimate goal of using DSLs is to improve programmer productivity =20=

and software quality. Often, this is achieved by reducing the cost of =20=

initial software development as well as maintenance costs. These =20
improvements - programs being easier to write and maintain - =20
materialize as a result of domain-specific guarantees, analyses, =20
testing techniques, verification techniques, and optimizations.

*  Paper Criteria
Papers are sought addressing the research problems, fundamental =20
principles, and practical techniques of DSLs, including but not =20
limited to:
       -  Foundations, including semantics, formal methods, type =20
theory, and complexity theory
       -   Language design, ranging from concrete syntax to semantic =20
and typing issues
       -   Software engineering, including domain analysis, software =20
design, and 	  round-trip engineering
       -   Software processes, including metrics for software and =20
language evaluation
       -   Implementation techniques, including parsing, compiling, =20
and program 	  generation
       -   Program analysis and automated transformation
       -  Reverse engineering, re-engineering, design discovery, =20
automated refactoring
       -  Hardware/software codesign
       -  Programming environments, including visual languages, =20
debuggers, and testing  infrastructure
       -   Teaching DSLs and the use of DSLs in teaching

Case studies, including engineering, bioinformatics, hardware =20
specification languages, parallel computing languages, real-time and =20
embedded systems, and networked and distributed domains
Papers will be judged on the depth of their insight and the extent to =20=

which they translate specific experience into general lessons for =20
domain-specific language designers and implementers, and software =20
engineers. Papers can range from the practical to the theoretical; =20
where appropriate, they should refer to actual languages, tools, and =20
techniques, provide pointers to full definitions and implementations, =20=

and include empirical data on results.

   * Important Dates
       -  July 23rd, 2008: First Call for Papers
       -  November 12th, 2008: Final Call for Papers
       - December 14th, 2008: Abstract submission due.
       - December 21st, 2008: Paper submission deadline.
       - February 23rd, 2009: Author notification of decisions
       - March 22nd, 2009: Camera ready manuscripts due

   * Instructions for Authors
Proceedings will be published in the Springer LNCS series. Submissions =20=

and final manuscripts are to follow the LNCS stylesheet formatting =20
guidelines, and are not to exceed 25 pages. Please submit your =20
manuscripts online using the EasyChair conference management system.

   * Program Committee
Jon Bentley, Avayalabs
Martin Erwig, Oregon State University
Jeff Gray, University of Alabama at Birmingham
Robert Grimm, New York University
Jim Grundy, Intel Strategic CAD Labs
Tom Henzinger, EPFL
Sam Kamin, UIUC
Dick Kieburtz, Portland State University
Ralf L=E4mmel, University of Koblenz
Julia Lawall, University of Copenhagen
Benjamin Pierce, University of Pennsylvania
Vivek Sarkar, Rice University
Jeremy Siek, University of Colorado at Boulder
Jos=E9 Nuno Oliveira, University of Minho
Doaitse Swierstra, Utrecht University
Walid Taha (Chair), Rice University
Eelco Visser, Delft University
William Waite, University of Colorado at Boulder
Stephanie Weirich, University of Pennsylvania

   * Organizers
General Chair: Jeremy Gibbons, Oxford University
Publicity Chair: Emir Pasalic, LogicBlox=

--Apple-Mail-2-1031806819
Content-Type: text/html;
	charset=ISO-8859-2
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; ">*** IFIP Working Conference on =
Domain Specific Languages (DSL WC) =
***<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;July 15-17, 2009, Oxford<br><br><a =
href=3D"http://www.hope.cs.rice.edu/twiki/bin/view/WG211/DSLWC">http://www=
.hope.cs.rice.edu/twiki/bin/view/WG211/DSLWC</a><br><br>* Call for =
Papers<br>Domain-specific languages are emerging as a fundamental =
component of software engineering practice. DSLs are often introduced =
when new domains such as web-scripting or markup come into existence, =
but it is also common to see DSLs being introduced and adopted for =
traditional domains such as parsing and data description. Developing =
software using DSLs has many benefits. DSLs are often designed based on =
existing notations that are already in use by experts in a given domain. =
As such, successful DSLs often reduce or eliminate the effort needed to =
transform the concept or innovation produced by the domain expert into =
an executable artifact or even a deliverable software product. DSL =
implementations can capture and mechanize a significant portion of the =
repetitive and mechanical tasks that a domain expert traditionally =
needed to perform in order to produce an executable. DSLs can in many =
cases capture and make widely available special expertise that only top =
specialists in a given domain might have. By capturing expert knowledge =
and reducing repetitive tasks, DSLs often also lead to software that is =
significantly more portable, more reliable and more understandable than =
it would otherwise be.<br><br>DSLs can be viewed as having a dual role =
to general-purpose languages: whereas general purpose languages try to =
do everything as well as possible, DSLs are designed to find a domain =
where they can solve some class of problems -- no matter how small -- in =
the best possible way. Widely known examples of DSLs include Matlab, =
Verilog, SQL, LINQ, JavaScript, PERL, HTML, Open GL, Tcl/Tk, Macromedia =
Director, Mathematica/Maple, AutoLisp/AutoCAD, XSLT, RPM, Make, =
lex/yacc, LaTeX, PostScript, Excel, among many others. But while these =
tools have been widely successful, they still fall short of realizing =
the full idea behind them. The goal of this conference is to explore the =
extent to which incorporating modern principles of language design and =
software engineering can benefit existing and future domain-specific =
languages.<br><br>The ultimate goal of using DSLs is to improve =
programmer productivity and software quality. Often, this is achieved by =
reducing the cost of initial software development as well as maintenance =
costs. These improvements - programs being easier to write and maintain =
- materialize as a result of domain-specific guarantees, analyses, =
testing techniques, verification techniques, and optimizations.<br><br>* =
&nbsp;Paper Criteria<br>Papers are sought addressing the research =
problems, fundamental principles, and practical techniques of DSLs, =
including but not limited to:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;Foundations, including semantics, formal methods, type theory, and =
complexity theory<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Language design, ranging from concrete syntax to semantic =
and typing issues<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Software engineering, including domain analysis, software =
design, and&nbsp;<span class=3D"Apple-tab-span" style=3D"white-space: =
pre; ">	</span>&nbsp;&nbsp;round-trip =
engineering<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Software processes, including metrics for software and =
language evaluation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Implementation techniques, including parsing, compiling, and =
program&nbsp;<span class=3D"Apple-tab-span" style=3D"white-space: pre; =
">	=
</span>&nbsp;&nbsp;generation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Program analysis and automated =
transformation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- &nbsp;Reverse =
engineering, re-engineering, design discovery, automated =
refactoring<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;Hardware/software =
codesign<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- &nbsp;Programming =
environments, including visual languages, debuggers, and testing =
&nbsp;infrastructure<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;&nbsp;Teaching DSLs and the use of DSLs in teaching<br><br>Case =
studies, including engineering, bioinformatics, hardware specification =
languages, parallel computing languages, real-time and embedded systems, =
and networked and distributed domains<br>Papers will be judged on the =
depth of their insight and the extent to which they translate specific =
experience into general lessons for domain-specific language designers =
and implementers, and software engineers. Papers can range from the =
practical to the theoretical; where appropriate, they should refer to =
actual languages, tools, and techniques, provide pointers to full =
definitions and implementations, and include empirical data on =
results.<br><br>&nbsp;&nbsp;* Important =
Dates<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- &nbsp;July 23rd, 2008: =
First Call for Papers<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
&nbsp;November 12th, 2008: Final Call for =
Papers<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- December 14th, 2008: =
Abstract submission due.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- =
December 21st, 2008: Paper submission =
deadline.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- February 23rd, 2009: =
Author notification of =
decisions<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- March 22nd, 2009: =
Camera ready manuscripts due<br><br>&nbsp;&nbsp;* Instructions for =
Authors<br>Proceedings will be published in the Springer LNCS series. =
Submissions and final manuscripts are to follow the LNCS stylesheet =
formatting guidelines, and are not to exceed 25 pages. Please submit =
your manuscripts online using the EasyChair conference management =
system.<br><br>&nbsp;&nbsp;* Program Committee<br>Jon Bentley, =
Avayalabs<br>Martin Erwig, Oregon State University<br>Jeff Gray, =
University of Alabama at Birmingham<br>Robert Grimm, New York =
University<br>Jim Grundy, Intel Strategic CAD Labs<br>Tom Henzinger, =
EPFL<br>Sam Kamin, UIUC<br>Dick Kieburtz, Portland State =
University<br>Ralf L=E4mmel, University of Koblenz<br>Julia Lawall, =
University of Copenhagen<br>Benjamin Pierce, University of =
Pennsylvania<br>Vivek Sarkar, Rice University<br>Jeremy Siek, University =
of Colorado at Boulder<br>Jos=E9 Nuno Oliveira, University of =
Minho<br>Doaitse Swierstra, Utrecht University<br>Walid Taha (Chair), =
Rice University<br>Eelco Visser, Delft University<br>William Waite, =
University of Colorado at Boulder<br>Stephanie Weirich, University of =
Pennsylvania<br><br>&nbsp;&nbsp;* Organizers<br>General Chair: Jeremy =
Gibbons, Oxford University<br>Publicity Chair: Emir Pasalic, =
LogicBlox</body></html>=

--Apple-Mail-2-1031806819--

