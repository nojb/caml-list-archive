Return-Path: <mmatalka@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C9C477FB13
	for <caml-list@sympa.inria.fr>; Thu,  4 Dec 2014 16:37:31 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  mmatalka@gmail.com) identity=pra; client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="mmatalka@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  mmatalka@gmail.com designates 209.85.212.177 as permitted
  sender) identity=mailfrom; client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="mmatalka@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wi0-f177.google.com) identity=helo;
  client-ip=209.85.212.177;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="mmatalka@gmail.com";
  x-sender="postmaster@mail-wi0-f177.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ap4BAHx+gFTRVdSxm2dsb2JhbABagmR0WMxqAoEdFgEBAQEBEQEBAQEBBgsLCRQuhAMBAQMBEi4BGx0BAwELBgULFiUPAQQPEQEFASITIogGAQMJCQEEs3g9MY0cgweLNgoZJw1ZhQUBAQEBAQUBAQEBARcBBQ6QWAeEQgWaWpIlN4NxgURvgkUBAQE
X-IPAS-Result: Ap4BAHx+gFTRVdSxm2dsb2JhbABagmR0WMxqAoEdFgEBAQEBEQEBAQEBBgsLCRQuhAMBAQMBEi4BGx0BAwELBgULFiUPAQQPEQEFASITIogGAQMJCQEEs3g9MY0cgweLNgoZJw1ZhQUBAQEBAQUBAQEBARcBBQ6QWAeEQgWaWpIlN4NxgURvgkUBAQE
X-IronPort-AV: E=Sophos;i="5.07,516,1413237600"; 
   d="scan'208";a="91674899"
Received: from mail-wi0-f177.google.com ([209.85.212.177])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Dec 2014 16:37:31 +0100
Received: by mail-wi0-f177.google.com with SMTP id l15so28324567wiw.4
        for <multiple recipients>; Thu, 04 Dec 2014 07:37:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=from:to:cc:subject:references:date:in-reply-to:message-id
         :user-agent:mime-version:content-type;
        bh=v/l1SnNXAYIdzsu3YilqbhuPxRGbZy5UrRwRtOo6+bw=;
        b=W2yaKzU+5MPHQLiKZgfJUPOEUkyjlHd2xJgJMscJqckajr1W0VexvwaqPb5uDJ4Xsl
         c9xoqZuyyp+fo2tDQFK/fC2pSdI9w+ZOmkU3mo68p1bPx4t4GDhrs8/KG/kfgL/7WozW
         Yepcmn1SBxCZU9Vmf9tOCwiAN9eZ2l1tcyagNb8TFj/wBWIQu38rsp0wNKPLP51hgz8w
         jMvl0EV3/l1SEYaKErvILmSkLxkz4HQirM9cPrCP6J1w2K3a0rsc6XpCxLcAfu65Udqe
         XCTltrqn9jmzaAWMG98WDP64+nrb9/Y4JqvKFHuLV6+qvrruaYmZppOY2R3aXtbIY5uy
         obHw==
X-Received: by 10.180.81.7 with SMTP id v7mr22306219wix.74.1417707451027;
        Thu, 04 Dec 2014 07:37:31 -0800 (PST)
Received: from localhost ([2a01:7e00::f03c:91ff:fe70:2696])
        by mx.google.com with ESMTPSA id dm10sm55417032wib.18.2014.12.04.07.37.30
        for <multiple recipients>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 04 Dec 2014 07:37:30 -0800 (PST)
From: Malcolm Matalka <mmatalka@gmail.com>
To: Francois Berenger <francois.berenger@inria.fr>
Cc: OCaml List <caml-list@inria.fr>
References: <54802A60.7020704@inria.fr>
Date: Thu, 04 Dec 2014 15:37:30 +0000
In-Reply-To: <54802A60.7020704@inria.fr> (Francois Berenger's message of "Thu,
	04 Dec 2014 10:33:20 +0100")
Message-ID: <87h9xbxw79.fsf@gmail.com>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.3 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
Subject: Re: [Caml-list] What are people using when writing distributed
 applications in OCaml?

It depends on what level you're talking.  My distributed systems apps
tend to be functorized over their transport, so I can switch out what
works and what doesn't pretty easily.

I tend to avoid RPC frameworks, I find they focus more on the
computation than on the data, but depending on what you're doing they
could be appropriate.

Unless you're under heavy load, simple HTTP calls with some JSON is
probably sufficient.

Francois Berenger <francois.berenger@inria.fr> writes:

> Hello,
>
> If you know about some distributed application that went into production
> and that can happily withstand the fire of production and real world loads, I would be happy to here about which library the system was
> using.
>
> I have heard about MPI and zmq for example, which both have
> ocaml bindings. However, I also know that there are several RPC
> implementations out there (one in ocamlnet, one in mirage, one in core), but I am not sure about which one is the most mature and
> production-tested.
>
> Thanks a lot,
> Francois.
