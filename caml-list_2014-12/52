Return-Path: <kennethadammiller@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id D7D607FB0A
	for <caml-list@sympa.inria.fr>; Mon,  8 Dec 2014 19:19:16 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  kennethadammiller@gmail.com) identity=pra;
  client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  kennethadammiller@gmail.com designates 209.85.218.43 as
  permitted sender) identity=mailfrom; client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="kennethadammiller@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oi0-f43.google.com) identity=helo;
  client-ip=209.85.218.43;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="kennethadammiller@gmail.com";
  x-sender="postmaster@mail-oi0-f43.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlsBAPbqhVTRVdorlGdsb2JhbABag1hcgwHBBIFqhgkCgSoHFgEBAQEBEQEBAQEHCwsJEjCEAgEBAQMBEhEdARseAwELBgULDSoCAiEBAREBBQEcBhMiiAEBAwkIDbNhPTGLL4FsgwWLBwoZJw1ZhQYBAQEBBgEBAQEBFwEFDo0HeoIpC4JvgUcFiUKCcYUzg3SBSIENMIl5PIQKEiWBDYIFgjEhMIJDAQEB
X-IPAS-Result: AlsBAPbqhVTRVdorlGdsb2JhbABag1hcgwHBBIFqhgkCgSoHFgEBAQEBEQEBAQEHCwsJEjCEAgEBAQMBEhEdARseAwELBgULDSoCAiEBAREBBQEcBhMiiAEBAwkIDbNhPTGLL4FsgwWLBwoZJw1ZhQYBAQEBBgEBAQEBFwEFDo0HeoIpC4JvgUcFiUKCcYUzg3SBSIENMIl5PIQKEiWBDYIFgjEhMIJDAQEB
X-IronPort-AV: E=Sophos;i="5.07,539,1413237600"; 
   d="scan'208";a="92417845"
Received: from mail-oi0-f43.google.com ([209.85.218.43])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 08 Dec 2014 19:19:15 +0100
Received: by mail-oi0-f43.google.com with SMTP id a3so3760218oib.30
        for <caml-list@inria.fr>; Mon, 08 Dec 2014 10:19:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=u4FsLJpuX9LUyK3uLVDr/ryRpkKEyzA8cmHdaQOGxc8=;
        b=N2flLdrals7I6+5BBFFE5KyYf67PI/eBhgKYdjUVXgzd+BQWzmdP5Dq22xEGmdv4ac
         0molM7xpd2LqckBV0QKJ1AC/o4kXJgW7g0b97PS31hoEsI/+skyAMz5AT+DA3jv0ImBu
         2ZSN+Z61mLBi0bW7eRtDoHeGzXH6bgCPKLglA98anl52SbFeQ/LAlc1rJR0NZGCa4tZr
         APvz469SC/YwpbE1ZHPnn3g5ivtCZcNIQJDAX//h+fZlJwAoAJmiBPWjBLFMmOriNe5f
         haYHK/SZY8i3dRffEw4pMQ/Wq/Yt4EvfZwFibs0rlGnfSMTXBpyuqAzKuCRMJ3bnyX4Z
         /fjA==
MIME-Version: 1.0
X-Received: by 10.202.59.137 with SMTP id i131mr7693565oia.114.1418062753987;
 Mon, 08 Dec 2014 10:19:13 -0800 (PST)
Received: by 10.182.197.1 with HTTP; Mon, 8 Dec 2014 10:19:13 -0800 (PST)
In-Reply-To: <CAN6ygOmKwW4AYYwmGTLHmM0e=ab=B6DjYGdFo65apdeLQ+yH+Q@mail.gmail.com>
References: <CAK7rcp9iRMQo0H1DRo00QRM5bw6psT2kN+pkkcjip9ykrLtL-A@mail.gmail.com>
	<54801373.3010506@fugmann.net>
	<CAK7rcp98sHmpn7-e7Sj68YPRjES1J+PZbriOGoUB5kd+2BGhZg@mail.gmail.com>
	<5480309B.3020402@fugmann.net>
	<CAK7rcp9mXT1Ud=VoGexnEtyzascBpar-+4aeLW_=WG-1ZHzsiA@mail.gmail.com>
	<CAK7rcp-tdMKaeK0fiP8tcSaXEaN7uW-GB6-n30KX6iZtC00U4g@mail.gmail.com>
	<CAK7rcp_Es8q+PEv08XWVGZS8odU=NQuiKkqfPG=Kidk+fcsybw@mail.gmail.com>
	<5480B7C3.90300@fugmann.net>
	<CAK7rcp_w3xxwWxOKsAEOHrtqQSc-u50ZizXZSVcLSKM6=ZCL0g@mail.gmail.com>
	<54817769.2050605@fugmann.net>
	<CAK7rcp-UXQtkhVjK77a-NcBLK2Z2PSFOZxd_f1AW0f=h=hz0eQ@mail.gmail.com>
	<CAK7rcp-nO43phHKSKZKXLj6-=yw9XcyyoTnjyKNXTSuQCKjsDQ@mail.gmail.com>
	<CAN6ygOmKwW4AYYwmGTLHmM0e=ab=B6DjYGdFo65apdeLQ+yH+Q@mail.gmail.com>
Date: Mon, 8 Dec 2014 13:19:13 -0500
Message-ID: <CAK7rcp-be5hENYDCmaddeEv1_HqAjoRP6SJpC9auBoqd+0=-Hg@mail.gmail.com>
From: Kenneth Adam Miller <kennethadammiller@gmail.com>
To: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a113cc7f2b88d620509b87679
Subject: Re: [Caml-list] Potential OCaml-ZMQ memory management problems

--001a113cc7f2b88d620509b87679
Content-Type: text/plain; charset=UTF-8

Excellent call. I find it is better to just update inputs in get_program
and do a push request. It doesn't affect any existing program adversely and
will only help others in the instance they reuse the function as I am.

On Mon, Dec 8, 2014 at 1:16 PM, Yotam Barnoy <yotambarnoy@gmail.com> wrote:

> You didn't export inputs in Input.mli.
>
> -Yotam
>
> On Mon, Dec 8, 2014 at 1:11 PM, Kenneth Adam Miller <
> kennethadammiller@gmail.com> wrote:
>
>> While reproducing it, I found that in the bap/ocaml directory's input.ml,
>> there is a mutable list that is being updated by functors in speclist when
>> parse_argv or parse is called; it retains the old list between calls to my
>> function. So I need to reset it.
>> (line 6 at https://github.com/argp/bap/blob/master/ocaml/input.ml)
>>
>> But now I get a strange compiler error! I don't know how ocaml could be
>> such a hard language to use...
>>
>> Input.inputs:=ref [];
>>
>> Error: Unbound value Input.inputs
>>
>> But you can know that I have included the ocaml directory and linked it
>> correct, since using Input.get_program already worked...
>>
>> On Fri, Dec 5, 2014 at 9:38 AM, Kenneth Adam Miller <
>> kennethadammiller@gmail.com> wrote:
>>
>>> Yes, I'll try and recreate it for you.
>>>
>>> No, the backtrace in gdb is useless. All it says is:
>>> #0  0x0000000000843033  in caml_c_call ()
>>> #1  0x0000000000000000  in ?? ()
>>>
>>> On Fri, Dec 5, 2014 at 4:14 AM, Anders Fugmann <anders@fugmann.net>
>>> wrote:
>>>
>>>> On 12/04/2014 10:48 PM, Kenneth Adam Miller wrote:
>>>>
>>>>> Well I am just no thorough and you are correct.
>>>>>
>>>>> The sending of data over a zmq socket and the conversion of that data
>>>>> from string to protobuf encoded string all occurred in one line. One I
>>>>> added a print statement and then segregated them more cleanly, I can
>>>>> see
>>>>> that it is most certainly the line that converts to protobuf.
>>>>>
>>>>> The exact function that fails (on my end, could be deeper within this)
>>>>> is to_pb from here:
>>>>>
>>>>> https://github.com/argp/bap/blob/master/ocaml/piqi/ast_piqi.ml#L186
>>>>>
>>>>> In any case, I did a test, and in my first function when to_pb gets
>>>>> called the first time and succeeds, I added an additional call to it...
>>>>> which also succeeded. But then in a subsequent unit test, the one that
>>>>> has been failing, still segfaults.
>>>>>
>>>>> If I turn off the tests prior to the segfaulting test, to_pb works in
>>>>> this particular run. But if the tests run before hand, something goes
>>>>> awry between the tests. Is it possible that to_pb is using some shared
>>>>> state between calls?
>>>>>
>>>>
>>>> I would not expect so.
>>>>
>>>> If you create a failing unittest that I could try?
>>>>
>>>> Also, does the segfault contain a usable back trace (using gdb)? That
>>>> might give some insights into which code is failing.
>>>>
>>>> /Anders
>>>>
>>>>
>>>>
>>>
>>
>

--001a113cc7f2b88d620509b87679
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Excellent call. I find it is better to just update inputs =
in get_program and do a push request. It doesn&#39;t affect any existing pr=
ogram adversely and will only help others in the instance they reuse the fu=
nction as I am.</div><div class=3D"gmail_extra"><br><div class=3D"gmail_quo=
te">On Mon, Dec 8, 2014 at 1:16 PM, Yotam Barnoy <span dir=3D"ltr">&lt;<a h=
ref=3D"mailto:yotambarnoy@gmail.com" target=3D"_blank">yotambarnoy@gmail.co=
m</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margi=
n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">=
You didn&#39;t export inputs in Input.mli.<span class=3D"HOEnZb"><font colo=
r=3D"#888888"><div><br></div><div>-Yotam</div></font></span></div><div clas=
s=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><div class=3D=
"gmail_quote">On Mon, Dec 8, 2014 at 1:11 PM, Kenneth Adam Miller <span dir=
=3D"ltr">&lt;<a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blan=
k">kennethadammiller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex"><div dir=3D"ltr">While reproducing it, I found that in the ba=
p/ocaml directory&#39;s <a href=3D"http://input.ml" target=3D"_blank">input=
.ml</a>, there is a mutable list that is being updated by functors in specl=
ist when parse_argv or parse is called; it retains the old list between cal=
ls to my function. So I need to reset it.<div>(line 6 at=C2=A0<a href=3D"ht=
tps://github.com/argp/bap/blob/master/ocaml/input.ml" target=3D"_blank">htt=
ps://github.com/argp/bap/blob/master/ocaml/input.ml</a>)</div><div><br></di=
v><div>But now I get a strange compiler error! I don&#39;t know how ocaml c=
ould be such a hard language to use...</div><div><br></div><div>Input.input=
s:=3Dref [];</div><div><br></div><div>Error: Unbound value Input.inputs</di=
v><div><br></div><div>But you can know that I have included the ocaml direc=
tory and linked it correct, since using Input.get_program already worked...=
</div></div><div><div><div class=3D"gmail_extra"><br><div class=3D"gmail_qu=
ote">On Fri, Dec 5, 2014 at 9:38 AM, Kenneth Adam Miller <span dir=3D"ltr">=
&lt;<a href=3D"mailto:kennethadammiller@gmail.com" target=3D"_blank">kennet=
hadammiller@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><div dir=3D"ltr">Yes, I&#39;ll try and recreate it for you.<div><br></di=
v><div>No, the backtrace in gdb is useless. All it says is:</div><div>#0 =
=C2=A00x0000000000843033 =C2=A0in caml_c_call ()</div><div>#1 =C2=A00x00000=
00000000000 =C2=A0in ?? ()</div></div><div><div><div class=3D"gmail_extra">=
<br><div class=3D"gmail_quote">On Fri, Dec 5, 2014 at 4:14 AM, Anders Fugma=
nn <span dir=3D"ltr">&lt;<a href=3D"mailto:anders@fugmann.net" target=3D"_b=
lank">anders@fugmann.net</a>&gt;</span> wrote:<br><blockquote class=3D"gmai=
l_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=
:1ex"><span>On 12/04/2014 10:48 PM, Kenneth Adam Miller wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
Well I am just no thorough and you are correct.<br>
<br>
The sending of data over a zmq socket and the conversion of that data<br>
from string to protobuf encoded string all occurred in one line. One I<br>
added a print statement and then segregated them more cleanly, I can see<br>
that it is most certainly the line that converts to protobuf.<br>
<br>
The exact function that fails (on my end, could be deeper within this)<br>
is to_pb from here:<br>
<br>
<a href=3D"https://github.com/argp/bap/blob/master/ocaml/piqi/ast_piqi.ml#L=
186" target=3D"_blank">https://github.com/argp/bap/<u></u>blob/master/ocaml=
/piqi/ast_<u></u>piqi.ml#L186</a><br>
<br>
In any case, I did a test, and in my first function when to_pb gets<br>
called the first time and succeeds, I added an additional call to it...<br>
which also succeeded. But then in a subsequent unit test, the one that<br>
has been failing, still segfaults.<br>
<br>
If I turn off the tests prior to the segfaulting test, to_pb works in<br>
this particular run. But if the tests run before hand, something goes<br>
awry between the tests. Is it possible that to_pb is using some shared<br>
state between calls?<br>
</blockquote>
<br></span>
I would not expect so.<br>
<br>
If you create a failing unittest that I could try?<br>
<br>
Also, does the segfault contain a usable back trace (using gdb)? That might=
 give some insights into which code is failing.<span><font color=3D"#888888=
"><br>
<br>
/Anders<br>
<br>
<br>
</font></span></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--001a113cc7f2b88d620509b87679--
