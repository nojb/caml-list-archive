Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id IAA02466; Fri, 22 Oct 2004 08:19:34 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id IAA02267 for <caml-list@pauillac.inria.fr>; Fri, 22 Oct 2004 08:19:33 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i9M6JVDi021108
	for <caml-list@inria.fr>; Fri, 22 Oct 2004 08:19:32 +0200
Received: from [192.168.1.200] (ppp217-99.lns1.syd3.internode.on.net [203.122.217.99])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i9M6JN4Y067245;
	Fri, 22 Oct 2004 15:49:24 +0930 (CST)
Subject: Re: [Caml-list] Polymorphism and the "for" loop
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: "Robert M. Solovay" <solovay@Math.Berkeley.EDU>
Cc: David Brown <caml-list@davidb.org>, Jon Harrop <jon@jdh30.plus.com>,
        caml-list <caml-list@inria.fr>
In-Reply-To: <Pine.SOL.4.44.0410211921030.29298-100000@blue1>
References: <Pine.SOL.4.44.0410211921030.29298-100000@blue1>
Content-Type: text/plain
Message-Id: <1098425963.7584.9.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 22 Oct 2004 16:19:23 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4178A673.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 bug:01 9660:01 glebe:01 ocaml:01 ocaml:01 variants:01 int:01 nsw:01 polymorphic:01 snail:02 checkout:02 2037:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 934
Lines: 26

On Fri, 2004-10-22 at 12:22, Robert M. Solovay wrote:
> How does one define a function f of type int -> void? I looked in the
> OCaml manual and couldn't find any reference to "void". {It is, of course,
> a familiar concept in C.}

That's right. Ocaml has no void type. I consider that a bug.
Briefly, it was possible to define one using polymorphic variants:

	type void = []

however that feature was removed. In any case that would
not be enough, since many standard functions would still
return the wrong type.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

