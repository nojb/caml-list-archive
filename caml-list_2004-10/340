Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 22258BC3F
	for <caml-list@yquem.inria.fr>; Wed, 27 Oct 2004 15:31:47 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9RDVkom013265
	for <caml-list@yquem.inria.fr>; Wed, 27 Oct 2004 15:31:46 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA16235 for <caml-list@pauillac.inria.fr>; Wed, 27 Oct 2004 15:31:46 +0200 (MET DST)
Received: from ZIVLNX01.uni-muenster.de (ZIVLNX01.UNI-MUENSTER.DE [128.176.188.24])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9RDVjpU013262
	for <caml-list@inria.fr>; Wed, 27 Oct 2004 15:31:46 +0200
Received: from localhost (unknown [127.0.0.1])
	by ZIVLNX01.uni-muenster.de (Postfix) with ESMTP
	id 1A528369F4; Wed, 27 Oct 2004 15:31:45 +0200 (CEST)
Received: from ZIVLNX01.uni-muenster.de ([127.0.0.1])
 by localhost (ZIVLNX01 [127.0.0.1]) (amavisd-new, port 10024) with ESMTP
 id 32114-06; Wed, 27 Oct 2004 15:31:44 +0200 (CEST)
Received: from [128.176.150.158] (VPNPOOL01-0148.UNI-MUENSTER.DE [128.176.150.158])
	by ZIVLNX01.uni-muenster.de (Postfix) with ESMTP
	id DD7213686C; Wed, 27 Oct 2004 15:31:41 +0200 (CEST)
In-Reply-To: <20041026203825.43063.qmail@web53001.mail.yahoo.com>
References: <20041026203825.43063.qmail@web53001.mail.yahoo.com>
Mime-Version: 1.0 (Apple Message framework v619)
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Message-Id: <884E587A-281C-11D9-8B1E-0003937628DA@uni-muenster.de>
Content-Transfer-Encoding: quoted-printable
Cc: caml-list@inria.fr
From: Wolfgang Lux <wlux@uni-muenster.de>
Subject: Re: [Caml-list] OCaml and implicit parallelism (threading)
Date: Wed, 27 Oct 2004 15:31:39 +0200
To: Vasili Galchin <vasiliocaml@yahoo.com>
X-Mailer: Apple Mail (2.619)
X-Virus-Scanned: by amavisd-new at uni-muenster.de
X-Miltered: at concorde with ID 417FA342.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 417FA341.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; wlux:01 uni-muenster:01 caml-list:01 ocaml:01 threading:01 wrote:01 ocaml:01 threading:01 compilers:01 threads:01 computations:01 computations:01 parallelism:01 parallelism:01 expression:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

Vasili Galchin wrote:

> Hello,
> =A0
> =A0=A0=A0=A0 I have: =
http://www.csg.csail.mit.edu/Users/arvind/pub.html. OCaml=20
> allows explicit threading through the Unix library, but are there any=20=

> plans to do use implicit parallelism (via the OCaml compilers)=A0to do=20=

> parallel expression evaluation where possible?

I can't speak for Inria, but I would not expect them to do anything in
that direction. The problem is that the implicit parallelism in
functional languages is usually much too fine grained. For instance,
consider the expression
   sqr 3 + sqr 6
where sqr is defined as fun x -> x * x. The function sqr is side effect
free, so in principle both multiplications could be evaluated in=20
parallel.
However, the overhead for generating new parallel threads for these
computations is -- obviously -- much too high. It is a very delicate
decision when to parallelize computations and most people agree that
this decision is best made by the programmer. At least nobody has come
up with a generic algorithm for exploiting implicit parallelism in a
reasonable way (i.e., such that there is really a gain in efficiency).

Regards
Wolfgang

