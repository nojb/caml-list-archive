Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA05483; Sat, 9 Oct 2004 01:30:10 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA05460 for <caml-list@pauillac.inria.fr>; Sat, 9 Oct 2004 01:30:09 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i98NU6MX000615
	for <caml-list@pauillac.inria.fr>; Sat, 9 Oct 2004 01:30:08 +0200
Received: from [192.168.1.200] (ppp213-29.lns2.syd3.internode.on.net [203.122.213.29])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i98NTu4Y098362;
	Sat, 9 Oct 2004 08:59:57 +0930 (CST)
Subject: Re: [Caml-list] Recursive lists
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Alex Baretta <alex@baretta.com>
Cc: David Brown <caml-list@davidb.org>, caml-list@pauillac.inria.fr
In-Reply-To: <4166CC3E.3080909@baretta.com>
References: <E1CFuqr-0000uk-00@mta1.cl.cam.ac.uk>
	 <4166A764.3010905@baretta.com> <20041008154347.GA14210@old.davidb.org>
	 <4166CC3E.3080909@baretta.com>
Content-Type: text/plain
Message-Id: <1097278194.19722.110.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 09 Oct 2004 09:29:55 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 416722FE.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 baretta:01 cyclic:01 logically:01 cyclic:01 coinductive:01 supplies:99 9660:01 glebe:01 alex:01 nsw:01 snail:02 lazy:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1211
Lines: 34

On Sat, 2004-10-09 at 03:19, Alex Baretta wrote:
> Of course, a separate Cyclic_list module could be defined to 
> access the cyclic-safe functions, but from an abstract point of view 
> such functions logically belong to List.

No they don't. List is an inductive data type,
and it is always finite. A data structure with
a cyclic pointer chain cannot represent a list.

A cyclic list is actually an instance of a 
coinductive data type, and this particular
one is called a stream.

In fact the List module is already *faulty*
because it supplies hd and tl, which are not
list operators at all -- they're the characteristic
functions of streams (just as Cons and Empty characterise
lists).

So there is actually a good argument for a Stream
module with hd and tl functions (and lazy map ..)

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

