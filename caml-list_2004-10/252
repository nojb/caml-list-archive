Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA05004; Sat, 23 Oct 2004 14:06:29 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA05046 for <caml-list@pauillac.inria.fr>; Sat, 23 Oct 2004 14:06:29 +0200 (MET DST)
Received: from smtp-out-02.utu.fi (smtp-out-02.utu.fi [130.232.202.172])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9NC6Sdb012495
	for <caml-list@inria.fr>; Sat, 23 Oct 2004 14:06:28 +0200
Received: from alfirk.yob.utu.fi (alfirk.yob.utu.fi [130.232.36.49])
 by smtp02.mess.utu.fi
 (iPlanet Messaging Server 5.2 HotFix 1.21 (built Sep  8 2003))
 with ESMTP id <0I610001MDMS64@smtp02.mess.utu.fi> for caml-list@inria.fr; Sat,
 23 Oct 2004 15:06:28 +0300 (EEST)
Received: by alfirk.yob.utu.fi (Postfix, from userid 268)	id 478DA14094D; Sat,
 23 Oct 2004 15:06:19 +0300 (EEST)
Date: Sat, 23 Oct 2004 15:06:19 +0300
From: moj@utu.fi (Matti Jokinen)
Subject: Re: [Caml-list] Polymorphism and the "for" loop
In-reply-to: <20041023114148.GA20016@annexia.org>
To: caml-list@inria.fr
Message-id: <20041023120619.GA23366@utu.fi>
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii
Content-transfer-encoding: 7BIT
Content-disposition: inline
User-Agent: Mutt/1.5.6+20040722i
References: <200410211950.43396.jon@jdh30.plus.com>
 <20041023114148.GA20016@annexia.org>
X-Miltered: at concorde with ID 417A4944.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; matti:01 jokinen:01 caml-list:01 val:01 val:01 matti:01 jokinen:01 unit:03 unit:03 let:04 let:04 polymorphism:06 loop:06 type:07 fun:08 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 583
Lines: 19

>   # let f = ref None;;
>   val f : '_a option ref = {contents = None}
>   # let store_f f' = f := Some f';;
>   val store_f : '_a -> unit = <fun>
> 
>   (I want store_f to have type (unit -> 'a) -> unit.)

You can write

# let store_f f' = f := Some (fun () -> ignore (f'()));;
val store_f : (unit -> 'a) -> unit = <fun>


- Matti Jokinen

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

