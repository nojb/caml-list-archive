Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA17559; Mon, 11 Oct 2004 18:40:49 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA17697 for <caml-list@pauillac.inria.fr>; Mon, 11 Oct 2004 18:40:48 +0200 (MET DST)
Received: from smtp.mbg.ocn.ne.jp (mbg.ocn.ne.jp [210.190.142.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9BGelDw019110
	for <caml-list@inria.fr>; Mon, 11 Oct 2004 18:40:47 +0200
Received: from localhost (p26153-adsau08doujib4-acca.osaka.ocn.ne.jp [221.190.232.153])
	by smtp.mbg.ocn.ne.jp (Postfix) with ESMTP id BB96978C2
	for <caml-list@inria.fr>; Tue, 12 Oct 2004 01:40:45 +0900 (JST)
Date: Tue, 12 Oct 2004 01:40:18 +0900 (JST)
Message-Id: <20041012.014018.74748925.yoriyuki@mbg.ocn.ne.jp>
To: caml-list@inria.fr
Subject: Re: [Caml-list] About Obj
From: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <200410111633.03459.jon@jdh30.plus.com>
References: <16746.15832.409677.764564@gargle.gargle.HOWL>
	<416A8CDA.7060407@univ-savoie.fr>
	<200410111633.03459.jon@jdh30.plus.com>
X-Mailer: Mew version 3.3 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 416AB78F.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 yamagata:01 yoriyuki:01 yoriyuki:01 caml-list:01 2004:99 yamagata:01 compiler:01 unsafe:01 unsafe:01 thread:02 external:03 recursive:03 obj:03 obj:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 874
Lines: 21

From: Jon Harrop <jon@jdh30.plus.com>
Subject: Re: [Caml-list] About Obj (was Recursive lists)
Date: Mon, 11 Oct 2004 16:33:03 +0100

> Yes, your Obj implementation is substantially bigger, more complicated, more 
> error prone and more costly on small lists. Just forget this whole thread 
> ever happened and consider using a different data structure. :-)
> 
> Can Obj not be hidden so that people can't use it so easily?

Yes, it would be nice to have a compiler option which disable all
causes of the evil (Obj.magic, Array.unsafe_get, external etc).  Then
we can control where unsafe operations are used.
--
Yamagata Yoriyuki


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

