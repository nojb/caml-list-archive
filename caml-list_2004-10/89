Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA20612; Sat, 9 Oct 2004 11:08:12 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA20602 for <caml-list@pauillac.inria.fr>; Sat, 9 Oct 2004 11:08:11 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i99988tn024711
	for <caml-list@pauillac.inria.fr>; Sat, 9 Oct 2004 11:08:10 +0200
Received: from [192.168.1.200] (ppp213-29.lns2.syd3.internode.on.net [203.122.213.29])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i9997t4Y065804;
	Sat, 9 Oct 2004 18:37:56 +0930 (CST)
Subject: Re: [Caml-list] Recursive lists
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Cc: Alex Baretta <alex@baretta.com>, David Brown <caml-list@davidb.org>,
        caml-list@pauillac.inria.fr
In-Reply-To: <E1CGChq-0006HZ-00@mta1.cl.cam.ac.uk>
References: <E1CGChq-0006HZ-00@mta1.cl.cam.ac.uk>
Content-Type: text/plain
Message-Id: <1097312874.19722.168.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 09 Oct 2004 19:07:54 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4167AA78.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 cyclic:01 9660:01 glebe:01 nsw:01 snail:02 lazy:02 lazy:02 checkout:02 module:03 2037:03 wrote:03 fetch:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 971
Lines: 31

On Sat, 2004-10-09 at 18:35, Keith Wansbrough wrote:
> > So there is actually a good argument for a Stream
> > module with hd and tl functions (and lazy map ..)
> 
> Even lazy map shouldn't do cycle-detection, though: I would expect a
> cyclic stream to be mapped to an infinite one.

Yes, what I meant was that for a data type s:'a stream,
and a function f: 'a -> 'b, the function

	map f s : 'b stream

creates a new stream represented by the pair

	(f,s)

with hd (f,s) = f (hd s). In other words, the map is only
applied when you fetch an element.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

