Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 28D87BC40
	for <caml-list@yquem.inria.fr>; Tue, 26 Oct 2004 16:07:37 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9QE7aCt004606
	for <caml-list@yquem.inria.fr>; Tue, 26 Oct 2004 16:07:37 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA03896 for <caml-list@pauillac.inria.fr>; Tue, 26 Oct 2004 16:07:36 +0200 (MET DST)
Received: from [128.93.8.158] (macaque.inria.fr [128.93.8.158])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i9QE7aC0000852
	for <caml-list@inria.fr>; Tue, 26 Oct 2004 16:07:36 +0200
Mime-Version: 1.0 (Apple Message framework v619)
In-Reply-To: <000601c4ba9e$6f9b8a00$1b447182@cas.mcmaster.ca>
References: <000601c4ba9e$6f9b8a00$1b447182@cas.mcmaster.ca>
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <67E54EEE-2758-11D9-BCF8-00039310CAE8@inria.fr>
Content-Transfer-Encoding: 7bit
From: Damien Doligez <damien.doligez@inria.fr>
Subject: Re: [Caml-list] Single-case union types as strong typedefs
Date: Tue, 26 Oct 2004 16:07:43 +0200
To: "'caml users'" <caml-list@inria.fr>
X-Mailer: Apple Mail (2.619)
X-Miltered: at concorde with ID 417E5A28.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 417E5A28.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 caml-list:01 typedefs:01 wrote:01 statically:01 statically:01 run-time:01 compiler:01 compiler:01 link-time:01 25,:98 25,:98 polymorphic:01 doligez:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

On Oct 25, 2004, at 16:25, Jacques Carette wrote:

> Isn't that correct though?  The value x is completely known 
> statically, and
> all computation on x can be done statically, so it is not necessary to 
> have
> any traces of x left at run-time.

Then how do you pass it to a polymorphic function?

> Yes, I am assuming that a fair bit of partial evaluation is a good 
> thing for
> the compiler to do.

Unfortunately, the compiler doesn't have all the information about the
program.  A lot of things are not known until link-time.

-- Damien

