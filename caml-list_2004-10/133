Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA02155; Wed, 13 Oct 2004 13:57:42 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA01961 for <caml-list@pauillac.inria.fr>; Wed, 13 Oct 2004 13:57:41 +0200 (MET DST)
Received: from alex.barettalocal.com (h213-255-109-130.albacom.net [213.255.109.130] (may be forged))
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9DBvfYP011218
	for <caml-list@inria.fr>; Wed, 13 Oct 2004 13:57:41 +0200
Received: from [127.0.0.1] (localhost.localdomain [127.0.0.1])
	by alex.barettalocal.com (Postfix) with ESMTP id 14AED2BAA5A;
	Wed, 13 Oct 2004 13:59:16 +0200 (CEST)
Message-ID: <416D1893.1000400@baretta.com>
Date: Wed, 13 Oct 2004 13:59:15 +0200
From: Alex Baretta <alex@baretta.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.3) Gecko/20040913
X-Accept-Language: it, en-us, en
MIME-Version: 1.0
To: Yamagata Yoriyuki <yoriyuki@mbg.ocn.ne.jp>, Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] About Obj
References: <16746.15832.409677.764564@gargle.gargle.HOWL>	<416A8CDA.7060407@univ-savoie.fr>	<200410111633.03459.jon@jdh30.plus.com> <20041012.014018.74748925.yoriyuki@mbg.ocn.ne.jp>
In-Reply-To: <20041012.014018.74748925.yoriyuki@mbg.ocn.ne.jp>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 416D1835.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; baretta:01 baretta:01 caml-list:01 yamagata:01 yoriyuki:01 caml-list:01 2004:99 yamagata:01 yoriyuki:01 camlp:01 compiler:01 unsafe:01 unsafe:01 alex:01 alex:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1362
Lines: 37

Yamagata Yoriyuki wrote:
> From: Jon Harrop <jon@jdh30.plus.com>
> Subject: Re: [Caml-list] About Obj (was Recursive lists)
> Date: Mon, 11 Oct 2004 16:33:03 +0100
> 
> 
>>Yes, your Obj implementation is substantially bigger, more complicated, more 
>>error prone and more costly on small lists. Just forget this whole thread 
>>ever happened and consider using a different data structure. :-)
>>
>>Can Obj not be hidden so that people can't use it so easily?
> 
> 
> Yes, it would be nice to have a compiler option which disable all
> causes of the evil (Obj.magic, Array.unsafe_get, external etc).  Then
> we can control where unsafe operations are used.
> --
> Yamagata Yoriyuki



Your proposal is reasonable and sound; however, I really think Xavier 
has more important stuff to do. Consider the following issues:
1) Your request cannot be satisfied in general because you'd never dream 
of disabling the use of Obj in the standard library.
2) You can easily achieve the same behavior by using camlp4 or possibly 
a custom preprocessor which throughs an extension upon identifying calls 
to the Obj module.



Alex

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

