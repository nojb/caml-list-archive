Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA18947; Fri, 8 Oct 2004 16:32:54 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA18936 for <caml-list@pauillac.inria.fr>; Fri, 8 Oct 2004 16:32:52 +0200 (MET DST)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i98EWoWJ026189
	for <caml-list@inria.fr>; Fri, 8 Oct 2004 16:32:51 +0200
Received: from [192.168.1.200] (ppp213-29.lns2.syd3.internode.on.net [203.122.213.29])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i98EWe4Y019709;
	Sat, 9 Oct 2004 00:02:41 +0930 (CST)
Subject: Re: [Caml-list] Recursive lists
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Cc: Luca Pascali <pasckosky2000@yahoo.it>, caml-list <caml-list@inria.fr>
In-Reply-To: <E1CFuqr-0000uk-00@mta1.cl.cam.ac.uk>
References: <E1CFuqr-0000uk-00@mta1.cl.cam.ac.uk>
Content-Type: text/plain
Message-Id: <1097245959.19722.27.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 09 Oct 2004 00:32:39 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4166A512.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 sourceforge:01 2004:99 descent:01 acyclic:01 9660:01 glebe:01 tokens:01 equality:01 token:01 nsw:01 snail:02 lazy:02 nodes:02 node:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1271
Lines: 39

On Fri, 2004-10-08 at 23:31, Keith Wansbrough wrote:
> > Can some functions of the List library support the use of the recursive 
> > lists?

> How could they do this?  

> You might be able to do it by keeping a list of all the nodes you've 
> visited, and using physical equality to check if you have already 
> visited a node.

I use that technique to perform recursive descent
on acyclic graphs, which the recursive list is.

For a list with the cycle *known* to be length 1,
this is very cheap, since you only need to compare
against previous element.

You can also use lazy evaluation.

An example of a stream (infinite list) being a *correct* 
data structure is a list of tokens with a cycle on 
the 'end of file' token.

Much easier to analyse with matches against substring
patterns .. since you don't have to worry about
the end of the list.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

