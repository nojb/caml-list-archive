Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id A0B53BC40
	for <caml-list@yquem.inria.fr>; Sun, 31 Oct 2004 13:00:23 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i9VC0Nrk021971
	for <caml-list@yquem.inria.fr>; Sun, 31 Oct 2004 13:00:23 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA23178 for <caml-list@pauillac.inria.fr>; Sun, 31 Oct 2004 13:00:22 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i9VC0KCF019986
	for <caml-list@inria.fr>; Sun, 31 Oct 2004 13:00:21 +0100
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id VAA26556;
	Sun, 31 Oct 2004 21:00:14 +0900 (JST)
Date: Sun, 31 Oct 2004 21:00:05 +0900 (JST)
Message-Id: <20041031.210005.48374762.garrigue@math.nagoya-u.ac.jp>
To: info@gerd-stolpmann.de
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Packaging OCaml for Linux
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <1099079054.25474.76.camel@ice.gerd-stolpmann.de>
References: <20041028204047.GB5402@swordfish>
	<20041029.095157.71083228.garrigue@math.nagoya-u.ac.jp>
	<1099079054.25474.76.camel@ice.gerd-stolpmann.de>
X-Mailer: Mew version 4.0.64 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4184D3D7.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 4184D3D4.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 gerd:01 stolpmann:01 ocaml:01 avoided:01 uniformly:01 dependencies:01 labltk:01 labltk:01 o'caml:01 o'caml:01 binary:01 partial:01 compile:01 
X-Spam-Checker-Version: SpamAssassin 3.0.0 (2004-09-13) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.0
X-Spam-Level: 

From: Gerd Stolpmann <info@gerd-stolpmann.de>

> > > 1) Which OCaml distribution should be the basis for the Linux package:
> > >    the basic distribution from INRIA, or GODI? Why do you think so?
> > 
> > GODI is probably difficult to make into a package: it is a package
> > manager itself.
> 
> I think this is straight-forward. After all, GODI just installs files,
> and the files can be repackaged with the package manager of the Linux
> distribution.
> 
> Of course, the user must not call the GODI build system manually after
> that (i.e. godi_console must no longer be used). When the Linux package
> manager is responsible for managing the packages, it must be avoided
> that it interfers with the GODI build system in an uncontrolled way,
> because GODI would replace files, and the Linux package manager is not
> informed. (And doing so is really hard, I think this is the difficulty
> Jacques Garrigue means.) 

There are two parts in GODI: the ability to compile ocaml related
software uniformly, and the ability to maintain a coherent state
considering their dependencies.
You can certainly exploit the first aspect from a packaging system,
but I don't see how you can use the second one, which is really where
GODI shines.

> But in general, stacking of package managers should work as long as
> there is a clear hierarchy, and one manager calls the other as
> subordinate tool (and no user takes the freedom to call the subordinate
> manager directly, breaking the hierarchy). 

But even calling GODI from the package manager should be able to
update other godi packages, no? How is the package manager going to
keep track of that?
Or is there already some support for that in GODI? If this is the
case, and GODI can call package manager commands to update the
database, the even calling GODI directly should be OK.

> > > 2) What about LablTk? Should it be included, excluded? Should I break it
> > >    into a separate package, as is often done with Python/Tkinter? Is
> > >    that even possible with OCaml?
> > 
> > You should be aware that ocamlbrowser (which is included in the
> > distribution) depends on LablTk. So if you remove labltk from the
> > package, default users will not get it.
> 
> On the other hand, there are users who need not ocamlbrowser, because
> they install O'Caml only because their favourite application happens to
> be written in O'Caml.

If they use binary packages, they don't need to install ocaml at all.
If they compile the application themselves, then it might be nice to
have a real ocaml installed. At least they won't have to wonder
afterwards why they don't have some utilities/libraries which are
supposed to be in the standard distribution.
(Again, I don't mean that it shouldn't be possible to disable some
libraries, particularly if you don't have X11 for instance, of if the
user knows exactly what he wants, but I don't see the point of
providing a partial system without warning.)

Jacques Garrigue

