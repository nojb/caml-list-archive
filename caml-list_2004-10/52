Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA04434; Thu, 7 Oct 2004 18:17:59 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA02641 for <caml-list@pauillac.inria.fr>; Thu, 7 Oct 2004 18:17:58 +0200 (MET DST)
Received: from slinky.cs.nyu.edu (SLINKY.CS.NYU.EDU [128.122.20.14])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id i97GHv2b031042
	for <caml-list@inria.fr>; Thu, 7 Oct 2004 18:17:58 +0200
Received: from localhost (localhost [127.0.0.1])
	by slinky.cs.nyu.edu (8.12.10+Sun/8.12.10) with ESMTP id i97GHuoQ029346;
	Thu, 7 Oct 2004 12:17:56 -0400 (EDT)
Date: Thu, 7 Oct 2004 12:17:56 -0400 (EDT)
From: Igor Pechtchanski <pechtcha@cs.nyu.edu>
Reply-To: caml-list@inria.fr
To: mattwb@comcast.net
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Sys.sigint is blocked with cygwin threads
In-Reply-To: <100720041517.25930.41655DFA0005346A0000654A22007503300D999B9B0E03@comcast.net>
Message-ID: <Pine.GSO.4.61.0410071212160.28197@slinky.cs.nyu.edu>
References: <100720041517.25930.41655DFA0005346A0000654A22007503300D999B9B0E03@comcast.net>
Importance: Normal
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Scanned-By: MIMEDefang 2.39
X-Miltered: at concorde with ID 41656C35.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; nyu:99 caml-list:01 cygwin:01 threads:01 mattwb:01 cygwin:01 threads:01 unblock:01 unblock:01 blocking:01 delivery:98 compile:02 native:02 o'caml:02 o'caml:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1093
Lines: 24

On Thu, 7 Oct 2004, mattwb wrote:

> Is there a good reason that Sys.sigint is blocked when I compile a
> native application under Cygwin using threads?  Is O'Caml doing the
> blocking or Cygwin?  I would like to develop a service using cygrunsrv
> to run it, but that requires my application to take a signal when
> killed.  Is it safe to unblock any signals when using threads under
> Cygwin?  If so, which one's.

I would say that you may unblock any signals you want.  There's nothing
inherent in Cygwin that prevents signal delivery, so it's probably O'Caml.
Are you using the O'Caml version that comes with Cygwin, or a self-built
one?

In any case, if you have a small example that demonstrates the problem,
please send it to me either on-list or privately -- I'd like to
investigate.

Igor Pechtchanski, volunteer O'Caml maintainer for Cygwin

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

