Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA30766; Fri, 1 Oct 2004 01:18:17 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA30572 for <caml-list@pauillac.inria.fr>; Fri, 1 Oct 2004 01:18:15 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id i8UNIDr9018919
	for <caml-list@inria.fr>; Fri, 1 Oct 2004 01:18:14 +0200
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id IAA17655;
	Fri, 1 Oct 2004 08:17:57 +0900 (JST)
Date: Fri, 01 Oct 2004 08:17:52 +0900 (JST)
Message-Id: <20041001.081752.59461685.garrigue@kurims.kyoto-u.ac.jp>
To: Keith.Wansbrough@cl.cam.ac.uk
Cc: jon@jdh30.plus.com, caml-list@inria.fr
Subject: Re: [Caml-list] Factoring HOFs
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
In-Reply-To: <E1CCxvo-0007By-00@mta1.cl.cam.ac.uk>
References: <200409291749.17226.jon@jdh30.plus.com>
	<E1CCxvo-0007By-00@mta1.cl.cam.ac.uk>
X-Mailer: Mew version 4.0.64 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 415C9435.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 hofs:01 jacques:01 subtlety:01 val:01 forall:01 quantifiers:01 simonpj:01 quantifiers:01 verbose:01 infer:01 functor:01 val:01 struct:01 functor:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk
Status: O
Content-Length: 1861
Lines: 54

From: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>

> > Yipes! Ok, so I'm missing some typing subtlety. Why does this end up with a 
> > single polymorphic type:
> > 
> > # let map_2 m g f x = m g (m f x);;
> > val map_2 : ('a -> 'b -> 'b) -> 'a -> 'a -> 'b -> 'b = <fun>
> 
> You want it to have type
> 
> (forall 'a 'b 'f. ('a -> 'b) -> ('a 'f -> 'b 'f))
>    -> ('b -> 'c) 
>    -> ('a -> 'b) 
>    -> 'a 'f 
>    -> 'b 'f
> 
> but OCaml doesn't allow nested quantifiers (i.e., higher-rank
> polymorphism).
> 
> It actually wouldn't be very hard to support, if you're prepared to
> accept the need for the occasional type annotation - see
> http://research.microsoft.com/~simonpj/papers/putting/index.htm.

OCaml has been supporting nested quantifiers for years.
However, they are a little more verbose because we chose to allow
unpredicate 2nd order types, which are harder to infer.

Look in the manual for polymorphic record fields and polymorphic
methods. The former are lighter syntactically, but require an
explicit record definition in advance, while the latter allow defining
polymorphic values on the fly.

But your example also uses constructor variables, which are not
available in ocaml. Note however that you can still encode it using
a functor:

module Map2(M : sig type 'a f val map : ('a -> 'b) -> 'a f -> 'b f end) =
  struct
    let map2 g f x = M.map g (M.map f x)
  end

Not much longer, he?
You can apply this functor locally with "let module".

let to_string l =
  let module M = Map2(struct type 'a f = 'a list let map = List.map end) in
  M.map2 string_of_int (fun x -> x + 1) l

Jacques

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

