Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p9I887hE004411
	for <caml-list@sympa-roc.inria.fr>; Tue, 18 Oct 2011 10:08:07 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ao0BAJ4ynU5KfVI0kGdsb2JhbABDoSYBhzAIIgEBAQEJCQ0HFAQhgW4BAQEDARICExkBGx0BAwELBgUEBzshAQERAQUBHAYTCBqHXphtCotRgmCFaD2IbgIFCogRBJN9ii+Cez2DcQ
X-IronPort-AV: E=Sophos;i="4.69,364,1315173600"; 
   d="scan'208";a="113282655"
Received: from mail-ww0-f52.google.com ([74.125.82.52])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Oct 2011 10:08:01 +0200
Received: by wwf25 with SMTP id 25so538748wwf.9
        for <caml-list@inria.fr>; Tue, 18 Oct 2011 01:08:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=Yco1ubU+2Oa720XgnEC1CueIwhehaYj9mXp3No7YeEo=;
        b=kJtmkud5gyRRxc2zBJEC2pYcoyK9dC3EwKc7zA57gjIOMlk0DZgp4omvsqmpaaUxoV
         vRmdBFAM8cnwg8p2dIghmlzRJBulw1x3XOL7ch0xizLE8grF7Lc36t+MsKvts+2fwWYq
         meAxsPJ8H9s5vBcpmiTnRvPShpUl7+33wkliU=
Received: by 10.227.195.13 with SMTP id ea13mr474074wbb.36.1318925281267; Tue,
 18 Oct 2011 01:08:01 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.227.155.67 with HTTP; Tue, 18 Oct 2011 01:07:41 -0700 (PDT)
In-Reply-To: <CAHqiZ-Lsy-jEb93VSPJzU2utf7GK8cU-RS66QBXeAR2GZcuHGA@mail.gmail.com>
References: <CAHqiZ-Lsy-jEb93VSPJzU2utf7GK8cU-RS66QBXeAR2GZcuHGA@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 18 Oct 2011 10:07:41 +0200
Message-ID: <CAPFanBHLP9Qrx39dxRYUAY_CQTWTcKisuvnqAUx1ZVdapbVBGw@mail.gmail.com>
To: Diego Olivier Fernandez Pons <dofp.ocaml@gmail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=20cf30025a58e0123e04af8e3852
Subject: Re: [Caml-list] Interpreting a language with (sparse) arrays
 explicitly indexed


--20cf30025a58e0123e04af8e3852
Content-Type: text/plain; charset=ISO-8859-1

What about hash tables ?

  | Val_table of (value, value) Hashtbl.t

If you have caml closures in your values (not in Val_closure but in
Val_primitive), it is maybe not appropriate to use the default hash function
that would choke on them. You should rather define your own hashing function
--but defining a mutually recursive `value` type and Hashtable.make
application will be delicate -- or change your representation of primitives
to avoid ocaml functions (by reifying them into a concrete datatype for
example).

On Tue, Oct 18, 2011 at 1:12 AM, Diego Olivier Fernandez Pons <
dofp.ocaml@gmail.com> wrote:

>      Caml-list,
>
> I have to write an interpreter for a language that has arrays explicitly
> indexed by anything that can be sequential (list, range, set)
>
>     {string} airports = {"ATL", "JFK"};
>     range index = 1 .. 2;
>     tuple recordAirport { airport : string; id : int }
>     {recordAirport} otherAiports = { <"ATL", 12345>, <"JFK", 42>};
>
>     int myArray [airports][index] = [[1, 2], [3, 4]];
>     string myArray2 [a in recordAirports][i in index] = (i < a.id) ?
> "unknown" : a.airport ;
>     int mySliceOfArray [a in recordAirports]  = sum (i in index)
> myArray[a.airport][i];
>
> Usually the trick in interpreter implementation is to transform everything
> back to "one-dimensional" objects
> - simple types
> - inductive constructions for lists
> - curried functions
>
> For instance in the book "Le langage Caml" the return type of the eval
> function is
>
> type value =
>    | Val_number of int
>    | Val_boolean of bool
>    | Val_pair of value * value
>    | Val_nil
>    | Val_cons of value * value
>    | Val_closure of closure
>    | Val_primitive of value -> value
> and closure = { definition: (pattern * expression) list; mutable
> environnement: environnement }
> and environnement == (string * value) list
>
> I don't see however how I am going to represent a type Val_Array given that
> the indexes can be of arbitrary type and in arbitrary number.
> I haven't found either how to transform the arrays into inductive types
> like lists to avoid the issue.
>
> Any suggestions ?
>
>         Diego Olivier
>

--20cf30025a58e0123e04af8e3852
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

What about hash tables ?<br><br>=A0 | Val_table of (value, value) Hashtbl.t=
<br><br>If you have caml closures in your values (not in Val_closure but in=
 Val_primitive), it is maybe not appropriate to use the default hash functi=
on that would choke on them. You should rather define your own hashing func=
tion --but defining a mutually recursive `value` type and Hashtable.make ap=
plication will be delicate -- or change your representation of primitives t=
o avoid ocaml functions (by reifying them into a concrete datatype for exam=
ple).<br>

<br><div class=3D"gmail_quote">On Tue, Oct 18, 2011 at 1:12 AM, Diego Olivi=
er Fernandez Pons <span dir=3D"ltr">&lt;<a href=3D"mailto:dofp.ocaml@gmail.=
com">dofp.ocaml@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gma=
il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
t:1ex;">

=A0 =A0 =A0Caml-list,<div><br></div><div>I have to write an interpreter for=
 a language that has arrays explicitly indexed by anything that can be sequ=
ential (list, range, set)</div><div><br></div><div>=A0 =A0 {string} airport=
s =3D {&quot;ATL&quot;, &quot;JFK&quot;};</div>


<div>=A0 =A0 range index =3D 1 .. 2;</div><div>=A0 =A0 tuple recordAirport =
{ airport : string; id : int }</div><div>=A0 =A0 {recordAirport} otherAipor=
ts =3D { &lt;&quot;ATL&quot;, 12345&gt;, &lt;&quot;JFK&quot;, 42&gt;};</div=
><div><br></div>


<div>=A0 =A0 int myArray [airports][index] =3D [[1, 2], [3, 4]];</div><div>=
=A0 =A0 string myArray2 [a in recordAirports][i in index] =3D (i &lt; <a hr=
ef=3D"http://a.id" target=3D"_blank">a.id</a>) ? &quot;unknown&quot; : a.ai=
rport ;</div>

<div>=A0 =A0 int mySliceOfArray [a in recordAirports] =A0=3D sum (i in inde=
x) myArray[a.airport][i];</div>
<div><br></div><div>Usually the trick in interpreter implementation is to t=
ransform everything back to &quot;one-dimensional&quot; objects</div><div>-=
 simple types</div><div>- inductive constructions for lists</div><div>

- curried functions</div>
<div><br></div><div>For instance in the book &quot;Le langage Caml&quot; th=
e return type of the eval function is</div><div><br></div><div><div>type va=
lue =3D</div><div>=A0 =A0| Val_number of int</div><div>=A0 =A0| Val_boolean=
 of bool</div>


<div>=A0 =A0| Val_pair of value * value</div><div>=A0 =A0| Val_nil</div><di=
v>=A0 =A0| Val_cons of value * value</div><div>=A0 =A0| Val_closure of clos=
ure</div><div>=A0 =A0| Val_primitive of value -&gt; value</div><div>and clo=
sure =3D=A0{ definition: (pattern * expression) list;=A0mutable environneme=
nt: environnement }</div>


<div>and environnement =3D=3D (string * value) list</div></div><div><br></d=
iv><div>I don&#39;t see however how I am going to represent a type Val_Arra=
y given that the indexes can be of arbitrary type and in arbitrary number.<=
/div>


<div>I haven&#39;t found either how to transform the arrays into inductive =
types like lists to avoid the issue.</div><div><br></div><div>Any suggestio=
ns ?</div><div><br></div><font color=3D"#888888"><div>=A0 =A0 =A0 =A0 Diego=
 Olivier</div>


</font></blockquote></div><br>

--20cf30025a58e0123e04af8e3852--
