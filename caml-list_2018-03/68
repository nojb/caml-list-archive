Return-Path: <SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 652CA8239C
	for <caml-list@sympa.inria.fr>; Mon, 26 Mar 2018 07:57:37 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="SRS0=gEVt=GQ=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?9a23=3AwIoW1BFa4fxV0dxAoXev4Z1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7zrs6wAkXT6L1XgUPTWs2DsrQY07GQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDSwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH428?=
 =?us-ascii?q?YYUBAOgCM+lWoIbyu0ADrRSiCQS2Hu7j1iVFi33w0KYn0+ohCwbG3Ak4Et8StH?=
 =?us-ascii?q?TbttP1P7oPX++pzKnIyDTDb+9K2Tzg74XHaBQhruuKXb5qasre1UkvFwbEjlWM?=
 =?us-ascii?q?tYzoJCuV1uMJs2mb8+pvS/6gi24hqwFwuziv29kjhpPOhoIPxVDJ7CN0y5s2K9?=
 =?us-ascii?q?2gUEN3fMCoHZ9Kuy2HK4d7TdkuTm90tCogxLALtoa3cSoJxZg92RLSZOKLf5KV?=
 =?us-ascii?q?7h/sTuqdPDh1iG5jdbminRi961Kgxff5VsSs0FZFsC5Fkt7Uu3AI2B3f99KLSu?=
 =?us-ascii?q?N6/kel2TePyx7c5f1EIUAylKrbMoMhzaAqmpoUq0TDETf6mETwjKCIakUp4vWk?=
 =?us-ascii?q?5/rjb7n8u5OQK4B5hhvwP6gygMCyD+s1PhALX2eB+OS80LPj/Vf+QLVPlvA4j7?=
 =?us-ascii?q?XXvo3GKckDqa63DABa0po75hi+FDmryMwYnX4DLFNFZBKIkZTmO1HIIPD5FPe/?=
 =?us-ascii?q?nkqjnC1sx/DcMb3sGo/CLnzZn7fnZ7p98FJTyAo2zdBe+5JUFqoML+n0Wk/sst?=
 =?us-ascii?q?zXEgE2Mxeuz+biB9h82ZkSWWWVAq+WKK/Sq0OH5vozI+mQY48YoCryJOIg5/7q?=
 =?us-ascii?q?lHM5nV4dfbK13ZYMc3C5HvFmI12Dbnb2g9cBF30KvgskQ+Dwhl2CS20bW3HncK?=
 =?us-ascii?q?8m6nkAFIWiFYLKQIbl1L2H0iCTEZBMaiVdFleICXLhcYPCV/paOwyIJco0uzgN?=
 =?us-ascii?q?U/CaQI8k1A2y/Fvzz7NhaPHf+igZqY7LzN9x9vHenhE09CVpAoKayW7bHDI8pX?=
 =?us-ascii?q?8BWzJjhPM3mkd60FrWlPEg26UJR+wW3OtAV0IBDbCZyuV7D97oXQeYIYWDT0ug?=
 =?us-ascii?q?Sdi9RzRtXpQ22dBcOh8hSeXntQjK2m+RO5FQj6aCXc1m6qXYzmT8LMZ7ym/b2e?=
 =?us-ascii?q?8mlVZ0G5ISZ13jvbZ28k3oP6CMk0idkPzxJ6EMhWjV82OS0WeFvEdZSRN9F6Lf?=
 =?us-ascii?q?UiJGaw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BBAABci7hahyIeaIFeHAEBAQQBAQoBA?=
 =?us-ascii?q?YUSKINciABfjC6BdIERklGCDgOIfxoGAQUvGAECAQEBAQEBAQEBEgEBAQoLCQg?=
 =?us-ascii?q?oL4I4JAGCSQEEASNWBQsLDhMTDgICDwEEKSAThQYIBAGrSIIgiD+CCw+HWIFUQ?=
 =?us-ascii?q?IQTh3SCVAOXPwiBXolajzKPdoElHIIKMxowQoJDkFJtkCQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BBAABci7hahyIeaIFeHAEBAQQBAQoBAYUSKINciABfjC6?=
 =?us-ascii?q?BdIERklGCDgOIfxoGAQUvGAECAQEBAQEBAQEBEgEBAQoLCQgoL4I4JAGCSQEEA?=
 =?us-ascii?q?SNWBQsLDhMTDgICDwEEKSAThQYIBAGrSIIgiD+CCw+HWIFUQIQTh3SCVAOXPwi?=
 =?us-ascii?q?BXolajzKPdoElHIIKMxowQoJDkFJtkCQBAQ?=
X-IronPort-AV: E=Sophos;i="5.48,363,1517871600"; 
   d="asc'?scan'208";a="319882322"
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Mar 2018 07:57:36 +0200
Received: from top.local (cbg35-2-78-242-14-140.fbx.proxad.net [78.242.14.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id C20E85646C9;
	Mon, 26 Mar 2018 07:57:34 +0200 (CEST)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: Gerd Stolpmann <info@gerd-stolpmann.de>
Cc: OCaml Mailing List <caml-list@inria.fr>
References: <m2po3x8by0.fsf@polytechnique.org>
	<9a905c88-7201-baaf-7b13-ac892807f876@gerd-stolpmann.de>
Date: Mon, 26 Mar 2018 07:57:32 +0200
In-Reply-To: <9a905c88-7201-baaf-7b13-ac892807f876@gerd-stolpmann.de> (Gerd
	Stolpmann's message of "Thu, 22 Mar 2018 20:55:44 +0100")
Message-ID: <m2zi2vidkj.fsf@polytechnique.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.0.91 (darwin)
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="=-=-=";
	micalg=pgp-sha512; protocol="application/pgp-signature"
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Mon Mar 26 07:57:35 2018 +0200 (CEST))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.000027, queueID=225C05646CA
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: Re: [Caml-list] ocamlnet question: get with arbitrary header

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello Gerd,

On 2018-03-22 20:55, Gerd Stolpmann <info@gerd-stolpmann.de> writes:

> No, with the Convenience module you cannot do it. It's really meant for
> super-simple stuff only.
>
> But you can do:
>
> let pipeline =3D new Nethttp.pipeline in
> let call =3D new Nethttp_client.get url in
> call # set_request_header (new Netmime.basic_mime_header
> ["Authorization", ...]);
> pipeline # add call;
> pipeline # run()
>
> then check for call # response_* values. You can reuse the pipeline
> across calls.

Thank you for the tip. The API I'm interacting with also uses the PATCH
method, is there support for it in ocamlnet?

Best,

Alan

--=20
OpenPGP Key ID : 040D0A3B4ED2E5C7
Monthly Athmospheric CO=E2=82=82, Mauna Loa Obs. 2018-02: 408.35, 2017-02: =
406.42

--=-=-=
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - https://gpgtools.org

iQEzBAEBCgAdFiEE6lXof/BsSVW56ZmGBA0KO07S5ccFAlq4i80ACgkQBA0KO07S
5cem2gf/Yr3gXUAQx1deM61ql5cMW6DbG0lQOG6dzg03fAjdtMA5RZzoTmPpCKCz
LeiPsUuNRTDAUQ3hhl65cGVFzofTvjra/mEbbAFCAqHlXOzk5TF1fhYqmowkWvH7
w2tsdi0cmitpNrgVf2zdeW27wGviI9AYpm55zoVHdsSrWEWqHol+ZCuKerV7Qr8i
sIEvodqyE2QFq+dwQZ3tMXXKoccV5Hfw7XfpXhWIbIEW+9FhRy55aubjyx6hYNEc
eNcuSttRUsEGef5uyBBN3DYoSuyLC4VVhEOJWSN3tVvMWkJQANP8STGInFd5lPBm
ixpQ18qdnXrFjrLL9bdKA6igyzD4ig==
=WJNo
-----END PGP SIGNATURE-----
--=-=-=--

