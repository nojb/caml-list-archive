Return-Path: <a6b37331@telus.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=AWL,SPF_NEUTRAL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id AD72FBC0B
	for <caml-list@yquem.inria.fr>; Tue,  6 Feb 2007 08:31:33 +0100 (CET)
Received: from defout.telus.net (defout.telus.net [199.185.220.240])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l167VTcd000804
	for <caml-list@yquem.inria.fr>; Tue, 6 Feb 2007 08:31:33 +0100
Received: from priv-edtnaa05.telusplanet.net ([154.20.161.125])
          by priv-edtnes73.telusplanet.net
          (InterMail vM.7.05.00.01 201-2174-101-101-20051220) with ESMTP
          id <20070206073129.VJOJ19794.priv-edtnes73.telusplanet.net@priv-edtnaa05.telusplanet.net>
          for <caml-list@yquem.inria.fr>; Tue, 6 Feb 2007 00:31:29 -0700
Received: from localhost.localdomain (d154-20-161-125.bchsia.telus.net [154.20.161.125])
	by priv-edtnaa05.telusplanet.net (BorderWare MXtreme Infinity Mail Firewall) with ESMTP id 6FSMAMKENU
	for <caml-list@yquem.inria.fr>; Tue,  6 Feb 2007 00:31:26 -0700 (MST)
Received: from a6b37331 by localhost.localdomain with local (Exim 4.50)
	id 1HEKdM-00058c-DN
	for caml-list@yquem.inria.fr; Mon, 05 Feb 2007 23:20:56 -0800
Date: Mon, 5 Feb 2007 23:20:56 -0800
From: Bob Williams <a6b37331@telus.net>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Exception Unix_error problem in toplevel
Message-ID: <20070206072056.GB19722@telus.net>
References: <20070202011014.GA27655@telus.net> <3564akdaob.fsf@hod.lan.m-e-leypold.de> <20070203022956.GC29434@telus.net> <feirejcpxt.fsf@hod.lan.m-e-leypold.de> <20070204004610.GB30621@telus.net> <ylsldmurmo.fsf@hod.lan.m-e-leypold.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <ylsldmurmo.fsf@hod.lan.m-e-leypold.de>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Miltered: at discorde with ID 45C82ED1.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; toplevel:01 0100,:01 markus:01 bug:01 bug:01 byte:01 redefining:01 redefining:01 reloading:01 byte:01 reloading:01 debugging:01 cmo:01 toplevel:01 compilation:01 

On Sun, Feb 04, 2007 at 11:46:55AM +0100, ls-ocaml-developer-2006@m-e-leypold.de wrote:
> 
> > They are all obscure, Markus.  A careful developer finds and fixes
> > most of the obvious bugs; the ones left over are nearly always
> > unusual.
> >
> > I did something stupid to trigger the exception-renumbering bug, but
> 
> 
> But if I understood it right, it's not a bug, but rather a user
> error. There is AFAIR a FAQ for a similar situation if people
> interactively load byte code files several times and define functions
> in between. Your problem is similar, only that you're not redefining
> functions but rather execptions.
> 
> I also think redefining an exception should not trigger an error or
> warning message.
> 
> Rather reloading a byte code file of the same name and at the same
> time having still loaded byte code files that refer to another version
> of the first byte code file -- this should trigger an error or a
> warning. Reloading a byte code file to which no other definitions
> refer is not a problem and indeed wanted when you do debugging.

It can be very useful to reload a cmo file into a running toplevel,
especially if the application is huge (thousands of compilation
units).

I have done some preliminary spelunking into the OCaml sources, and I
think I see an almost general fix for this.  One restriction is that
the replacement cmo file would necessarily need to have the same
interface as the original, but that can be verified by comparing the
interface's MD5 sums.

The idea is to allow any number of #loads or #uses at any time.  You
would be free to replace any compilation unit at any time, or to load
new ones.  Just before evaluating a toplevel expression, toplevel
would check whether there have been any intervening #loads or #uses;
if there have been, toplevel would reapply all the global relocations
(Reloc_setglobal and Reloc_getglobal) and rerun the initialization
code for all the compilation units present in memory, in the order in
which they were loaded.  The repatching and reinitialization should
fix up all the inter-compilation-unit references (including all
exceptions).

What do you all think of this?  Have I missed anything?  The patch
will probably be on the order of 50 lines long; if nobody predicts any
show stoppers, I will start on this in a few days.

