Return-Path: <jon@ffconsultancy.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 87931BC69
	for <caml-list@yquem.inria.fr>; Wed, 21 Feb 2007 23:39:36 +0100 (CET)
Received: from ptb-relay03.plus.net (ptb-relay03.plus.net [212.159.14.214])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l1LMdZcS023208
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Wed, 21 Feb 2007 23:39:36 +0100
Received: from [80.229.56.224] (helo=beast.local)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1HK07b-00037h-EI
	for caml-list@yquem.inria.fr; Wed, 21 Feb 2007 22:39:35 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Maze generator
Date: Wed, 21 Feb 2007 22:32:45 +0000
User-Agent: KMail/1.9.5
MIME-Version: 1.0
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200702212232.45438.jon@ffconsultancy.com>
X-Miltered: at concorde with ID 45DCCA27.004 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 stack:01 unify:01 ocaml:01 frog:98 postscript:01 algorithm:01 shorter:02 tree:02 functional:02 output:02 explicit:03 30%:95 passing:04 style:93 


Whilst revamping our website, I took the time to improve the maze generator:

  http://www.ffconsultancy.com/ocaml/maze/

it is now 30% shorter and much faster, using an array instead of a functional 
map. It also uses continuation passing style instead of an explicit stack. 
But it no longer produces PostScript output.

The program uses a simple depth first search. An interesting alternative 
algorithm involves keeping track of sets of connection cells and breaking 
walls to unify the sets until you have a spanning tree. That should be easy 
to code in OCaml but I think it will generate mazes that are much harder to 
solve.

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
OCaml for Scientists
http://www.ffconsultancy.com/products/ocaml_for_scientists

