Return-Path: <sds@gnu.org>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.7 required=5.0 tests=AWL,SPF_SOFTFAIL 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 6C39DBC69
	for <caml-list@yquem.inria.fr>; Wed, 21 Feb 2007 23:19:20 +0100 (CET)
Received: from smtp.janestcapital.com (www.janestcapital.com [66.155.124.107])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l1LMJJFG013525
	for <caml-list@inria.fr>; Wed, 21 Feb 2007 23:19:19 +0100
Received: from [192.168.250.217] [209.213.205.130] by janestcapital.com with ESMTP
  (SMTPD-9.10) id A1EA0314; Wed, 21 Feb 2007 17:04:26 -0500
Message-ID: <45DCC1E8.3050807@gnu.org>
Date: Wed, 21 Feb 2007 17:04:24 -0500
From: Sam Steingold <sds@gnu.org>
User-Agent: Thunderbird 1.5.0.8 (X11/20061107)
MIME-Version: 1.0
Newsgroups: gmane.comp.lang.caml.inria
To: David Brown <davidb@davidb.org>
Cc: Christian Lindig <lindig@cs.uni-sb.de>,
	Caml List <caml-list@inria.fr>
Subject: Re: warning on value shadowing
References: <45DCAE89.1050904@gnu.org>	<97C89459-B045-4700-8333-FAE31EC648E0@cs.uni-sb.de>	<45DCB558.6000601@podval.org> <45DCBEED.10706@davidb.org>
In-Reply-To: <45DCBEED.10706@davidb.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-j-chkmail-Score: MSGID : 45DCC567.000 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 45DCC567.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; lindig:01 foo:01 quux:01 foo:01 avoided:01 arbitrarily:01 compiler:01 haskell:01 haskell:01 ocaml:01 redefining:01 2007,:98 wrote:01 wrote:01 explicitly:01 

David Brown wrote:
> Sam Steingold wrote:
>> Christian Lindig wrote:
>>> On Feb 21, 2007, at 9:41 PM, Sam Steingold wrote:
>>>
>>>> Proposal: When both foo.ml and bar.ml define zot and quux.ml opens
>>>> both Foo and Bar, there should be a warning [..]
>>> While I see your concern I think open is best avoided.
>> Yes, of course.  Alas, I am not at liberty to arbitrarily and
>> pervasively change a huge code-reviewed project to satisfy my
>> stylistic preferences.  I just see no reason for the compiler not to
>> issue such a warning.
> 
> One could also argue that this condition is an error.  The closest
> equivalent in Haskell is erroneous (only when the symbol is
> referenced).  Of course Haskell gives a lot more control over the
> importing or names, and is declarative, so it isn't equivalent at all.

It is also an error in Lisp - although there is a well defined way to 
avoid the error by explicitly specifying who shadows what.
http://www.lisp.org/HyperSpec/Body/fun_shadow.html
http://www.lisp.org/HyperSpec/Body/sec_11-1-1-2-5.html

I think there is a way to treat warnings as errors, so this is covered.

> The problem with this as a warning, is that outside of multiple
> modules, this scenario is fairly common:
> 
>   let x = ...
>   let x = ... x ...
> 
> Since ocaml uses the most recent declration, this is well defined, as
> it is with multiple 'open's.

it should be possible to separate 4 situations:
1 cross-module shadowing (warning)
2 redefining a global value in the same file (warning)
3 shadow a global value with a local one (warning)
4 redefine a local value as in your example (no warning)
the warnings can be made optional; one may be able to enable them 
separately (one by one) etc.

Sam.

