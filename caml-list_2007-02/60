Return-Path: <skaller@users.sourceforge.net>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 625E0BC0B
	for <caml-list@yquem.inria.fr>; Mon,  5 Feb 2007 00:30:16 +0100 (CET)
Received: from ipmail01.adl2.internode.on.net (ipmail01.adl2.internode.on.net [203.16.214.140])
	by concorde.inria.fr (8.13.6/8.13.6) with ESMTP id l14NUCoM000495
	for <caml-list@yquem.inria.fr>; Mon, 5 Feb 2007 00:30:14 +0100
Received: from ppp27-234.lns1.syd6.internode.on.net (HELO rosella) ([59.167.27.234])
  by ipmail01.adl2.internode.on.net with ESMTP; 05 Feb 2007 10:00:08 +1030
X-IronPort-AV: i="4.13,279,1167571800"; 
   d="scan'208"; a="83741573:sNHT61131840"
Subject: Re: [Caml-list] Modeling tool for OCaml?
From: skaller <skaller@users.sourceforge.net>
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <200702042043.37094.jon@ffconsultancy.com>
References: <1170603239.11113.11.camel@oxylin.no-ip.org>
	 <55DE94DC-A1F7-4A30-85FC-9270FFD77509@seas.upenn.edu>
	 <1170614508.4843.12.camel@oxylin.no-ip.org>
	 <200702042043.37094.jon@ffconsultancy.com>
Content-Type: text/plain
Date: Mon, 05 Feb 2007 10:30:04 +1100
Message-Id: <1170631804.9549.50.camel@rosella.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.6.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 45C66C84.001 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 variants:01 functors:01 inference:01 lexically:01 sourceforge:01 polymorphic:01 closures:01 wrote:01 caml-list:01 functions:01 imperative:01 modules:02 objects:02 

On Sun, 2007-02-04 at 20:43 +0000, Jon Harrop wrote:

> Most OO design patterns are redundant in OCaml. Basically, most OO design 
> patterns solve problems creating by OO in the first place...

I agree but this is only half the story. Ocaml has objects, and is
basically an imperative language. But it also has gc, variants,
modules, functors, type inference, and lexically scoped 
intensionally polymorphic functions with closures.

I would say it isn't Ocaml but its user base that is 'functionally
oriented'.

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

