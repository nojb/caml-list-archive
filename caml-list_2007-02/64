Return-Path: <stephane.duprat@atosorigin.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.5 required=5.0 tests=AWL,HTML_10_20,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from discorde.inria.fr (discorde.inria.fr [192.93.2.38])
	by yquem.inria.fr (Postfix) with ESMTP id 39930BC0B
	for <caml-list@yquem.inria.fr>; Mon,  5 Feb 2007 11:00:47 +0100 (CET)
Received: from smtp1.mail.atosorigin.com (smtp1.mail.atosorigin.com [160.92.103.80])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id l15A0kvR030302
	for <caml-list@yquem.inria.fr>; Mon, 5 Feb 2007 11:00:47 +0100
Received: from filter.worldlinemail.net (localhost [127.0.0.1])
	by mwumf0101.mail.fr.ww.atosorigin.com (Postfix) with SMTP id 8B0681C000A2;
	Mon,  5 Feb 2007 11:00:46 +0100 (CET)
Received: from [192.168.234.156] (localhost [127.0.0.1])
	by mwumf0101.mail.fr.ww.atosorigin.com (Postfix) with ESMTP id 46C3B1C000A0;
	Mon,  5 Feb 2007 11:00:46 +0100 (CET)
Message-ID: <45C70049.4040100@atosorigin.com>
Date: Mon, 05 Feb 2007 11:00:41 +0100
From: =?ISO-8859-15?Q?St=E9phane_DUPRAT?= <stephane.duprat@atosorigin.com>
Reply-To: stephane.duprat@atosorigin.com
Organization: Atos Origin - Systems Integration
User-Agent: Thunderbird 1.5.0.7 (X11/20060922)
MIME-Version: 1.0
To: Julien Peeters <jj.peeters@gmail.com>, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Modeling tool for OCaml?
References: <1170603239.11113.11.camel@oxylin.no-ip.org>	<60702.66.41.204.234.1170610830.squirrel@webmail.fischerventure.com>	<55DE94DC-A1F7-4A30-85FC-9270FFD77509@seas.upenn.edu> <1170614508.4843.12.camel@oxylin.no-ip.org>
In-Reply-To: <1170614508.4843.12.camel@oxylin.no-ip.org>
Content-Type: multipart/alternative;
 boundary="------------040405000103040200080903"
X-j-chkmail-Score: MSGID : 45C7004E.003 on discorde : j-chkmail score : X : 0/20 1 0.000 -> 1
X-Miltered: at discorde with ID 45C7004E.003 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 caml-list:01 imperative:01 imperative:01 algorithm:01 algorithm:01 modules:02 modules:02 caml:02 caml:02 functional:02 functional:02 programming:03 programming:03 

This is a multi-part message in MIME format.
--------------040405000103040200080903
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 8bit

I'd quite the same question one week ago.

As we see in the home page of ocaml at INRIA, "/Caml supports 
functional, imperative, and object-oriented programming styles/".
I think that you are interested by the functional one.
So, even if Ocaml allows you to make algorithm with the imperative 
features, it is interesting to make programs without them almost for two 
reasons :
  - this is an other way to think your program
  - for a better quality of your program (less global var => less 
side-effects) according to my little experience

As for designing method, it seems that flow charts are generally 
convenient but not for all (ex: concept of interface with signature of a 
module).
As for me, I almost need a design language to describe a project that is 
already developed and data-flow could be extracted from the code (this 
is doc-generation).
At a higher level, if you want to describe organization of you project 
into modules and libraries, you can use component diagram in UML to have 
a standard representation.

I regret that modeling tools are not used for ocaml development, I think 
it could be better to share same methods and representation in that domain.


Stéphane Duprat


Julien Peeters a écrit :
> Ok,
>
> Thanks all ones for answers...
>
> I imagine that designing applications with functional languages is much
> different than with imperative ones.
> I was wondering on which points the difference is significant?
> Does common oriented object design patterns can be used with OCaml?
> And what, for a developer, is the work to do to change his way of
> thinking?
>
> I envisage to learn OCaml deeply and than I want to set the basis to do
> the change from imperative languages to functional ones.
>
> P.S. : somebody have reference books which goes over this subject?
>   


--------------040405000103040200080903
Content-Type: text/html; charset=ISO-8859-15
Content-Transfer-Encoding: 8bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-15"
 http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
I'd quite the same question one week ago.<br>
<br>
As we see in the home page of ocaml at INRIA, "<i>Caml supports
functional, imperative, and object-oriented programming styles</i>".<br>
I think that you are interested by the functional one.<br>
So, even if Ocaml allows you to make algorithm with the imperative
features, it is interesting to make programs without them almost for
two reasons :<br>
  - this is an other way to think your program<br>
  - for a better quality of your program (less global var =&gt; less
side-effects) according to my little experience<br>
<br>
As for designing method, it seems that flow charts are generally
convenient but not for all (ex: concept of interface with signature of
a module).<br>
As for me, I almost need a design language to describe a project that
is already developed and data-flow could be extracted from the code
(this is doc-generation).<br>
At a higher level, if you want to describe organization of you project
into modules and libraries, you can use component diagram in UML to
have a standard representation.<br>
<br>
I regret that modeling tools are not used for ocaml development, I
think it could be better to share same methods and representation in
that domain.<br>
<br>
<br>
Stéphane Duprat<br>
<br>
<br>
Julien Peeters a écrit :
<blockquote cite="mid1170614508.4843.12.camel@oxylin.no-ip.org"
 type="cite">
  <pre wrap="">Ok,

Thanks all ones for answers...

I imagine that designing applications with functional languages is much
different than with imperative ones.
I was wondering on which points the difference is significant?
Does common oriented object design patterns can be used with OCaml?
And what, for a developer, is the work to do to change his way of
thinking?

I envisage to learn OCaml deeply and than I want to set the basis to do
the change from imperative languages to functional ones.

P.S. : somebody have reference books which goes over this subject?
  </pre>
</blockquote>
<br>
</body>
</html>

--------------040405000103040200080903--

