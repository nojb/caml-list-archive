Return-Path: <ollie.frolovs.2012@my.bristol.ac.uk>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 264117EE6B
	for <caml-list@sympa.inria.fr>; Mon,  2 Dec 2013 09:55:57 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  ollie.frolovs.2012@my.bristol.ac.uk) identity=pra;
  client-ip=74.125.82.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="ollie.frolovs.2012@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  ollie.frolovs.2012@my.bristol.ac.uk) identity=mailfrom;
  client-ip=74.125.82.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="ollie.frolovs.2012@my.bristol.ac.uk";
  x-conformance=sidf_compatible
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wg0-f48.google.com) identity=helo;
  client-ip=74.125.82.48;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="ollie.frolovs.2012@my.bristol.ac.uk";
  x-sender="postmaster@mail-wg0-f48.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ai8DAF9KnFJKfVIwlGdsb2JhbABZgz+DTbVdgSAWDgEBAQEHCwsJEiqCJQEBBAEjBCUtBQsLEwUCAiYCAiEEDwEFARwGE4dvAwkCBAQBCKMVjAaEYYNGDVeGXReBKYtOgSQ6MweCazWBEwOWKYgwhhWDTEGEVQ
X-IPAS-Result: Ai8DAF9KnFJKfVIwlGdsb2JhbABZgz+DTbVdgSAWDgEBAQEHCwsJEiqCJQEBBAEjBCUtBQsLEwUCAiYCAiEEDwEFARwGE4dvAwkCBAQBCKMVjAaEYYNGDVeGXReBKYtOgSQ6MweCazWBEwOWKYgwhhWDTEGEVQ
X-IronPort-AV: E=Sophos;i="4.93,809,1378850400"; 
   d="scan'208";a="38871174"
Received: from mail-wg0-f48.google.com ([74.125.82.48])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 02 Dec 2013 09:55:56 +0100
Received: by mail-wg0-f48.google.com with SMTP id z12so11594310wgg.15
        for <caml-list@inria.fr>; Mon, 02 Dec 2013 00:55:55 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:content-type:mime-version:subject:from
         :in-reply-to:date:cc:content-transfer-encoding:message-id:references
         :to;
        bh=t/8tO679uZIHnaolLaiViRfvnoeZtDE5Dcrk2ZrYtOM=;
        b=m0gyn1GqwhXVRhejn3tV9+h5FoeBAU9wbTP1NMzbdXcb8EQGyh5Oc+ub+UMydtT0tw
         ML4YEeZ5CTqO/0fsZBESQNrHu5VooDFlyw0tUVLvhjTXDh1Wjm+pfP52NMzEZi3TA8Eb
         LrnVyCykj6sUgr8YFyG2KKq39WtrsZmRKdkJu+KwgQMGpo1YWLFVL5977sNaEVSgaLAr
         S7VhqJC4sj0BoLfM3H8GdBG2mOsDeGW5l9ciJ+m0c9NJKcNGLHTmFjf/0dCQ0Q/cw2rN
         SCXLijHWXSiwRlIQvG2YcvltOcWS+GitSHWuwiO4QKV1+QP9v4OjU6nwjhOu+Nfhk7o/
         gDtw==
X-Gm-Message-State: ALoCoQmNc7X1uDYXaktc7UF1anTl1ejrGiST7vELPJB1/jD98ttpIyqkJF+126ZHYOnJ7xPnd1A4
X-Received: by 10.194.170.133 with SMTP id am5mr882230wjc.42.1385974555542;
        Mon, 02 Dec 2013 00:55:55 -0800 (PST)
Received: from [10.0.0.92] (94.197.120.197.threembb.co.uk. [94.197.120.197])
        by mx.google.com with ESMTPSA id s20sm120674032wib.1.2013.12.02.00.55.53
        for <multiple recipients>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Mon, 02 Dec 2013 00:55:54 -0800 (PST)
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 7.0 \(1822\))
From: Ollie Frolovs <ollie.frolovs.2012@my.bristol.ac.uk>
In-Reply-To: <CAKR7PS-obzWahpYT4ALrMMCSohYoSfCrrPjjVO3XkukQ4MK0RQ@mail.gmail.com>
Date: Mon, 2 Dec 2013 08:55:51 +0000
Cc: caml users <caml-list@inria.fr>
Content-Transfer-Encoding: quoted-printable
Message-Id: <2405FBD1-B79A-4C23-8886-FB6A17D5F8EA@my.bristol.ac.uk>
References: <96620953-9991-4976-A207-7DBB32584D57@my.bristol.ac.uk> <CAKR7PS-obzWahpYT4ALrMMCSohYoSfCrrPjjVO3XkukQ4MK0RQ@mail.gmail.com>
To: =?utf-8?Q?Milan_Stanojevi=C4=87?= <milanst@gmail.com>
X-Mailer: Apple Mail (2.1822)
X-Validation-by: ollie.frolovs.2012@my.bristol.ac.uk
Subject: Re: [Caml-list] Extracting exception details (Async, Cohttp, Exn)

Thank you for your advice, I=E2=80=99ve written the reply below as I still =
cannot do what I set out to do.

On 2 Dec 2013, at 03:45, Milan Stanojevi=C4=87 <milanst@gmail.com> wrote:

> On Fri, Nov 29, 2013 at 9:34 AM, Ollie Frolovs
> <ollie.frolovs.2012@my.bristol.ac.uk> wrote:
>> Hello list!
>>=20
>> I=E2=80=99m designing a function to query a web service and i am stuck t=
rying to implement quality error handling/reporting. I have a specific ques=
tion =E2=80=93 how do i extract the =E2=80=9Cdescription=E2=80=9D field fro=
m the Core=E2=80=99s Exn type?
>>=20
>=20
> There is no "description" field in Exn type.
Indeed. By saying =E2=80=9Cdescription=E2=80=9D I tried to communicate my i=
ntention, obviously unsuccessfully. In the given example, I would like to e=
xtract ("connection attempt timeout" 127.0.0.2:80) in some civil way, prefe=
rable as a string so that i can display the error message to the user. In R=
WO all examples that i have seen so far, just check for Error/None and prin=
t =E2=80=9CUnexpected failure=E2=80=9D to the user (DuckDuckGo example). I =
want to give more information but not the entire sexp with the backtrace, e=
tc.

utop # result >>| ident;;
- : (Cohttp.Response.t * string Pipe.Reader.t, exn) Result.t =3D  Core.Std.=
Result.Error                                                            (li=
b/monitor.ml.Error_=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20
((exn ("connection attempt timeout" 127.0.0.2:80)) (backtrace (""))
(monitor
(((name try_with) (here ()) (id 553) (has_seen_error true)
(someone_is_listening true) (kill_index 0))
((name main) (here ()) (id 1) (has_seen_error false)
(someone_is_listening false) (kill_index 0))))))

> The confusion here is that the exception you see is actually a wrapped
> async exception. When async catches an exception, it wraps it up in a
> different exception with more information for easier debugging.
> Its definition is (you can see it at
> https://github.com/janestreet/async_core/blob/master/lib/monitor.ml#L55)
>=20
> module Exn_for_monitor =3D struct
>  type t =3D
>    { exn : exn;
>      backtrace : string sexp_list;
>      backtrace_history : Backtrace.t sexp_list;
>      monitor : monitor;
>    }
>  with fields, sexp_of
> end
>=20
> exception Error_ of Exn_for_monitor.t with sexp
>=20
> And that is what you see in your output.
> To get the original exception you can use Monitor.extract_exn but that
> gives you less information (but it might be ok in your particular
> case)
>=20
All this makes sense, the question is how do i extract the exception inform=
ation in a format i described above?

>> I=E2=80=99ve been experimenting in the top-level and i got stuck. My wor=
kflow with step by step explanations is below.
>>=20
>>=20
>> First, i create a request, which i believe does not run just yet because=
 it is =E2=80=9Cdeferred=E2=80=9D.
>>=20
>> utop # let result =3D try_with (fun () -> Cohttp_async.Client.get (Uri.o=
f_string "http://127.0.0.2"));;
>> val result : (Cohttp.Response.t * string Pipe.Reader.t, exn) Result.t De=
ferred.t =3D <abstr>
>>=20
>> Then, i =E2=80=9CDeferred.map" the result at which point the Cohttp/Asyn=
c library try to connect and (as desired) fail.
>=20
> utop has some special support for async but I'm not sure exactly what
> it does but I doubt it delays running a function.
Again, that was bad wording on my part. The way I understand it =E2=80=93 u=
top runs Async scheduler and also when necessary, waits for the deferred to=
 become determined and shows the contents of the deferred instead. I don=E2=
=80=99t have a problem with this =E2=80=93 I think i understand this part.=
=20

>=20
> In general when you have a function in async that returns a deferred,
> you do kick off code that will eventually fill in the deferred that
> you got back. It is not the case that only when you use that deferred
> something happens. Just wanted to point this out to avoid
> misconceptions about async.
Thanks.
>=20
>=20
>> I had a look at Core=E2=80=99s documentation for Exn but its to_string r=
eturns the whole sexp converted into string so i am stuck :=E2=80=99(
>>=20
>> As a side question for someone familiar with Core =E2=80=93 why does Exn=
.to_string return sexp in a string at all, it also has sexp_of_t, so i supp=
ose one could evaluate Sexp.to_string @@ Exn.sexp_of_t e. I am surprised th=
at i do not see a  function to extract the valuable description field from =
the exception and yet there is this apparent duplication of effort. Or am i=
 talking non-sense?
>>=20
>=20
> As I said before, this is an issue with async wrapping the original
> exception with some more data and then raising the new exception.
>=20
> Exn.to_string gives you a sexp in a string precisely to avoid
> duplication of effort. Otherwise we would need to write to_string and
> sexp_of_t for each exception (basically having two preprocessors, one
> for to_string and one for sexp). This way you just define your
> exception and add "with sexp" and you get all the data in exception
> when it's raised.
>=20
OK, i understand this but i still do not know how to extract the informatio=
n from the exception and display it to the user :=E2=80=99(

=E2=80=94 Ollie

> Hope this helps,
>   Milan

