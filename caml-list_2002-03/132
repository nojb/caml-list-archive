Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA02229; Tue, 19 Mar 2002 23:24:29 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA02508 for <caml-list@pauillac.inria.fr>; Tue, 19 Mar 2002 23:24:28 +0100 (MET)
Received: from smtp2.home.se (smtp2.home.se [195.66.35.201])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id g2JMOOr26682
	for <caml-list@inria.fr>; Tue, 19 Mar 2002 23:24:28 +0100 (MET)
Received: from seneca [213.114.140.209] by smtp2.home.se
	with Novonyx SMTP Server $Revision:   2.74  $; Tue, 19 Mar 2002 23:18:56 +0100 (ECTD)
Message-ID: <00d901c1cf94$c5fa7700$f58c72d5@invariant.se>
From: =?iso-8859-1?Q?Johan_Georg_Granstr=F6m?= <georg.g@home.se>
To: "Jacques Garrigue" <garrigue@kurims.kyoto-u.ac.jp>
Cc: <caml-list@inria.fr>
References: <9601-Sat16Mar2002094255-0800-tim@fungible.com><20020318101225C.garrigue@kurims.kyoto-u.ac.jp><1191-Sun17Mar2002193326-0800-tim@fungible.com> <20020318142017J.garrigue@kurims.kyoto-u.ac.jp>
Subject: Re: [Caml-list] Big executables from ocamlopt; dynamic libraries again
Date: Tue, 19 Mar 2002 23:21:02 +0100
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2600.0000
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> As a fall-back solution, there is MD5 hashing. The problem is that
> you're then mixing information for all the contents of a module.
> Any change will produce a new incompatible hash value.
> For instance, every time you add a function to a library, it becomes
> incompatible. And there are new functions in every release of ocaml.
>
> Note that for C, compatibility policies generally allow adding extra
> functions to a library without changing the version number, since the
> problem, should it arise, can be detected at link time.

IMHO this a perfect research problem:

Find a mapping H:S->B where S is the set of module signatures and
B is the set of binary (arbitrary length) strings. Such that if and only if
s_1 is a subset of s_2 then there is some relation between H(s_1) and
H(s_2), thus  s_1<s_2 iff H(s_1) R H(s_2).

Perhaps you could drop "and only if" and let H(s_1) R H(s_2) imply
s_1 < s_2 with 99.9...% certainty.

Finding an efficient pair H and R would really make life easier for
software maintainers. I guess reasonable demands on H and R are that
H(s) should have a binary length that is a fraction of the size of the
corresponding .cmi and that b_1 R b_2 is big ordo the size of b_1 plus b_2.
In any case R must be significantly faster than big ordo size of b_1 times
b_2.



Does this make since? Is it possible? Is it already done?

Yours,

- Johan Granström

Ps. Using hashes of modules for compability checks is a pain in the
ass. Microsoft .NET framework does it - and it doesn't work in real
life. I know from personal experience...


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

