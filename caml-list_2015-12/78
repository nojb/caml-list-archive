Return-Path: <hendrik@topoi.pooq.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id AAC977F042
	for <caml-list@sympa.inria.fr>; Fri, 18 Dec 2015 02:09:14 +0100 (CET)
IronPort-PHdr: 9a23:R8JtpxyhB+s18ULXCy+O+j09IxM/srCxBDY+r6Qd0e0QIJqq85mqBkHD//Il1AaPBtWFraocw8Pt8IneGkU4qa6bt34DdJEeHzQksu4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2WVTerzWI4CIIHV2nbEwudrqzQtaapv/0/t7x0qWbWx9Piju5bOE6BzSNhiKViPMrh5B/IL060BrDrygAUe1XwWR1OQDbxE6ktY+YtaRu+CVIuv8n69UIEeCjJ/x5HvRkC2EBGGkw4IXOvBjHTA2Arl8dSXlexhFBBgyA6BDhQr/wtDH7v6xzwn/JE9fxSOUUVDKu9aZoADXvjyJPYz409m3Ni89YkKVDpxPnvxt42sjfZ4TDZ6k2Rb/UYd5PHTkJZc1WTSEUR9rkN4Y=
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=hendrik@topoi.pooq.com; spf=None smtp.mailfrom=hendrik@topoi.pooq.com; spf=None smtp.helo=postmaster@april.topoi.pooq.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  hendrik@topoi.pooq.com) identity=pra;
  client-ip=69.165.131.134;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="hendrik@topoi.pooq.com";
  x-sender="hendrik@topoi.pooq.com";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  hendrik@topoi.pooq.com) identity=mailfrom;
  client-ip=69.165.131.134;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="hendrik@topoi.pooq.com";
  x-sender="hendrik@topoi.pooq.com";
  x-conformance=sidf_compatible
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@april.topoi.pooq.com) identity=helo;
  client-ip=69.165.131.134;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="hendrik@topoi.pooq.com";
  x-sender="postmaster@april.topoi.pooq.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0CBBgBHXHNW/4aDpUVehAxHASWCYrxoGYJEhSUQAQEBAQEBAQGBCYItgkg4QzQFGDGIQpwAoh2TeoEaBY4thFqDdoU5iAYJXn6XTYN0OSuEIiA0hGoBAQE
X-IPAS-Result: A0CBBgBHXHNW/4aDpUVehAxHASWCYrxoGYJEhSUQAQEBAQEBAQGBCYItgkg4QzQFGDGIQpwAoh2TeoEaBY4thFqDdoU5iAYJXn6XTYN0OSuEIiA0hGoBAQE
X-IronPort-AV: E=Sophos;i="5.20,443,1444687200"; 
   d="scan'208";a="192810463"
Received: from topoi.pooq.com (HELO april.topoi.pooq.com) ([69.165.131.134])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 18 Dec 2015 02:08:43 +0100
Received: by april.topoi.pooq.com (Postfix, from userid 1001)
	id 163BF1A0738; Thu, 17 Dec 2015 20:08:35 -0500 (EST)
Date: Thu, 17 Dec 2015 20:08:35 -0500
From: Hendrik Boom <hendrik@topoi.pooq.com>
To: OCaml Mailing List <caml-list@inria.fr>
Message-ID: <20151218010834.GA7442@topoi.pooq.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
Subject: [Caml-list] Is OCaml for experienced beginners?

# Is anyone in charge of the OCaml ecosystem?

I am a beginner to OCaml.  I'm not a beginner to the functional style of programmins, nor to sophisticated type systems, nor to  computing in general.  I started programming in 1963, was involved with Algol 68, Lisp, and constructive type theory.  I've managed to get code running in the days when you had to enter it as numbers; the machine I  used then wouldn't even type letters other than u, v, w, x, y, z (its version of hexadecimal).  In those days what you needed to know was the instruction set and its encoding.  Everything followed from that.

Believe be, I appreciate every advantage high-level languages have to offer.

With this background, you'd expect I'd take to OCaml like a duck to water.

Wrong.

The language itself is actually usable.  Once you figure out how the syntax works and where to put the brackets.

But the world has changed since source code was in hexadecimal.

## Libraries

Nowdays, software rests on a huge inventory of libaries and tools.  A language, however elegant, isn't very usable for anything very practical without its libraries and their documentation.  It's not enough to know the machine inside out.

That's the hurdle I face whenever I program in OCaml -- figuring out which libraries are usable, and which are actually documented.  Not documented in the sense that someone has written an API guide and a tutorial, but documented in the sense that it is actually possible to find them.

There are often multiple packages to accomplish a single task.

You don't know which one to use.  You try the obvious one, have trouble, ask about it, and then be told, No, that one is troubled, you should use this other one instead.  The one you can download from *this* site.  So you do,  You download it.  You figure out how to edit the Makefile so that it generates the right package files.  The options you need are actually documented in the Makefile.

I had to compile my own from the original Makefile, using the options that are indeed documented inside it.XXX

I've actually manged to write a trivial 3D videogame once I was pointed to the usable OpenGL library.  The one where the function names were closely related to the ones in the OpenGL manual, of which I have a printed copy.  I didn't have to guess what functions to use.

But then you discover that the one you were recommended to use is in the opam library (the one you access by saying opam install ... with a default configuration), and you decide to simplify things by using the Opam package instead of including all the library's source code within your own project.  But when you do that, it doesn't work, because the Opam package was was configured with optons that preclude essential functionality.  (in my case, the ability to load PNG files, not just JPEG).

So what? another might say.  Just tell opam to install with different options.  But that is another *huge* problem for a beginner.

So I stick with embedding the library source code in my application.  I already understand how to edit a Makefile.

## Documentation

And try to find documentation.  I'm dealing with this problemm with gtk at the moment.  There's a lablgtk.  There's a lablgtk2.  Whats the relationship between the two?  And where's the documentation.  There's links to a tutorial all over the place, but they seem all to be to the same web page, which isn't there.

Opam has a way, I'm told, to install documentation along with the package, but  haven't been able to figure out how it works.  Or maybe, just maybe, the packages I've been trying it on don't have documentation.  Who knows?

## Are beginners even  welcome?

Is there anyone in charge of any of this?

And what's the result?  It's a lovely language, it deserves to be used, but to get something done, I find myself programming in C++ instead, even though the concpts of OCAML fit my style of programming ike a glove and fit C++ like a rusty nail keeps my hand warm.   Or spend days or months trying things, asking questions, deciphering the answers, and so forth.

I imagine if I were working in a shop where lots of people used OCaml, all the ways of doing stuff would be local folklore.  But for the isolated beginner, there's a huge barrier to entry.

It's a lovely language, but the pragmatics of its ecosystem are all wrong.  For a beginner.  For someone with experience in the particular set of tools and libraries he needs, it's great.

And most of the problem is lack of organised, findable documentation.

-- hendrik

