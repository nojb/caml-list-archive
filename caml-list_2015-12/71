Return-Path: <chan.ngo2203@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 440307EF29
	for <caml-list@sympa.inria.fr>; Wed, 16 Dec 2015 14:29:08 +0100 (CET)
IronPort-PHdr: 9a23:ISQDChTdzE5Pa12dJ+6Ok8vti9psv+yvbD5Q0YIujvd0So/mwa65ZRSN2/xhgRfzUJnB7Loc0qyN4/6mAz1LvcnJmUtBWaIPfidNsd8RkQ0kDZzNImzAB9muURYHGt9fXkRu5XCxPBsdMs//Y1rPvi/6tmZKSV3BPAZ4bt74BpTVx5zukbvipduJMk4U23KUWvBbElaflU3prM4YgI9veO4a6yDihT92QdlQ3n5iPlmJnhzxtY+a9Z9n9DlM6bp6r5YTGY2zRakzTKRZATI6KCh1oZSz7ViQBTeIs0MVT2FeqhdMEQyNuAn3WoX1qinSue902S3cNsrzG/R8fh+r6qMjbRbpjCYBOHYd8XrLwph7hadf5RagvABXwojOYYjTOuAoLY3HetZPbmpIWI53WCsJVoi8Zo1JCeUGZ7wA9KHyolIPqV21Agz6V7Cn8SNBmnKjhf5y6O8mCwyTmVV4R98=
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=chan.ngo2203@gmail.com; spf=Pass smtp.mailfrom=chan.ngo2203@gmail.com; spf=None smtp.helo=postmaster@mail-wm0-f49.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  chan.ngo2203@gmail.com) identity=pra; client-ip=74.125.82.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="chan.ngo2203@gmail.com";
  x-sender="chan.ngo2203@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  chan.ngo2203@gmail.com designates 74.125.82.49 as permitted
  sender) identity=mailfrom; client-ip=74.125.82.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="chan.ngo2203@gmail.com";
  x-sender="chan.ngo2203@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-wm0-f49.google.com) identity=helo;
  client-ip=74.125.82.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="chan.ngo2203@gmail.com";
  x-sender="postmaster@mail-wm0-f49.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0AHAQDKZXFWmzFSfUpehAxtv1YhhWwCgSc7EQEBAQEBAQEBEAEBAQEBBgsLCSEuQRIBgVmCBwEBAQMBEi4BGx4DAQsGBQQHDScHIQIRAQUBCxEGARIih3cBAwoIDp5KgTE+MY0ygnmIKAoZJw1Wg1QBAQEBAQEEAQEBAQEBAQEBAQESAQUOiFeCboJTgjWDHoEaBZZ1B4U5hheBeIFcSYZxjCmDZ4InNoEXESaCMCOBXnEBAYJKgkUBAQE
X-IPAS-Result: A0AHAQDKZXFWmzFSfUpehAxtv1YhhWwCgSc7EQEBAQEBAQEBEAEBAQEBBgsLCSEuQRIBgVmCBwEBAQMBEi4BGx4DAQsGBQQHDScHIQIRAQUBCxEGARIih3cBAwoIDp5KgTE+MY0ygnmIKAoZJw1Wg1QBAQEBAQEEAQEBAQEBAQEBAQESAQUOiFeCboJTgjWDHoEaBZZ1B4U5hheBeIFcSYZxjCmDZ4InNoEXESaCMCOBXnEBAYJKgkUBAQE
X-IronPort-AV: E=Sophos;i="5.20,437,1444687200"; 
   d="scan'208,217";a="192463869"
Received: from mail-wm0-f49.google.com ([74.125.82.49])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 16 Dec 2015 14:29:06 +0100
Received: by mail-wm0-f49.google.com with SMTP id p187so1215527wmp.0
        for <caml-list@inria.fr>; Wed, 16 Dec 2015 05:29:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=from:content-type:message-id:mime-version:subject:date:references
         :to:in-reply-to;
        bh=h+nq2Moy1hqExL5P21eKnitxoIKfIxNGTsXiCHmXD64=;
        b=m4tqXQjmsWVrpeIAIbHL5ZAY0uWTpCQUt17vmSgNLJ/iE7pPoyU0R7zIfzEbpqAQ3p
         321VsS8l+OHu/ZYuZOdBBY9HoUB4RUletRVAeWNFTicKYlkcYlYgYV/Xo0rHsOSk76JL
         9s3R6F+FUueIkzWDNKPcALu1nexxc+n38duz8olzWhopI/oHspneG1xVKliXmtdc0GCQ
         /H8WCea+AaviSBlohdkgtUhZWtdW9K5OgADEbtnv2cMN3tGBI02rRyNR1Eel6bL2Phhs
         vHmyHeYW3T/IkNxwsbJfwn8U2fWqb4oUHd0yFyJKlGwN3sn8D4tZQRUKOxdxTjTS481h
         7nJA==
X-Received: by 10.28.229.65 with SMTP id c62mr11030039wmh.25.1450272546809;
        Wed, 16 Dec 2015 05:29:06 -0800 (PST)
Received: from cafehanoi.irisa.fr (cafehanoi.irisa.fr. [131.254.11.144])
        by smtp.gmail.com with ESMTPSA id cl2sm6011249wjc.33.2015.12.16.05.29.05
        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Wed, 16 Dec 2015 05:29:05 -0800 (PST)
From: Chan Ngo <chan.ngo2203@gmail.com>
Content-Type: multipart/alternative; boundary="Apple-Mail=_00405CEB-D6C6-4D32-B58B-5CEB814BF546"
Message-Id: <4D6A138A-AA9F-4DFB-85E8-38B44983EC11@gmail.com>
Mime-Version: 1.0 (Mac OS X Mail 9.2 \(3112\))
Date: Wed, 16 Dec 2015 14:29:14 +0100
References: <CAAPK4qARiq_ittwShNfRwXNJDtHGPVQLsvnFGRJP=o_mYfpmSw@mail.gmail.com> <8D722630-1CB1-413B-9F90-1F975FA5B64B@gmail.com> <CANk_VL+bq9ukB_HXtoJ1wAegKTAy+tBx05YPzeqhC8AA6OY93w@mail.gmail.com>
To: Paul Pelzl <pelzlpj@gmail.com>,
 OCaml Mailing List <caml-list@inria.fr>
In-Reply-To: <CANk_VL+bq9ukB_HXtoJ1wAegKTAy+tBx05YPzeqhC8AA6OY93w@mail.gmail.com>
X-Mailer: Apple Mail (2.3112)
Subject: Re: [Caml-list] Invoking Java programs from an OCaml program


--Apple-Mail=_00405CEB-D6C6-4D32-B58B-5CEB814BF546
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=us-ascii


> On Dec 15, 2015, at 6:21 AM, Paul Pelzl <pelzlpj@gmail.com> wrote:
>=20
> On Mon, Dec 14, 2015 at 9:25 AM, Chan Ngo <chan.ngo2203@gmail.com <mailto=
:chan.ngo2203@gmail.com>> wrote:
> An alternative, if you want to do as follows:
> - Compile Java program to an executable (not jar file)
> - Call this executable and get the return values from it
>=20
> So you can think about Unix module in OCaml, you can use the standard I/O=
 to realize a communication channel between your OCaml code and the executa=
ble Java.
> https://ocaml.github.io/ocamlunix/ocamlunix.html <https://ocaml.github.io=
/ocamlunix/ocamlunix.html>
>=20
>=20
> If the data to be exchanged is structurally complex, then this technique =
becomes difficult; a cross-platform serialization library can be very helpf=
ul for generating appropriate serialization code in multiple languages.  As=
 one example, Cap'n Proto has bindings for both Java and OCaml: https://cap=
nproto.org/otherlang.html <https://capnproto.org/otherlang.html>

Yes, I agree, in some cases, it will become difficult and we need a cross-p=
latform serialization library. Your example is a good point. In addition, i=
f you can control the source code of the Java side, you can modify the code=
 such that it can return the result as JSON object then the OCaml side can =
get this object value to parse complex data structures.

Best,

---
Chan Ngo
INRIA,
(+33)02 99 84 72 84
chan.ngo@inria.fr
http://people.rennes.inria.fr/Chan.Ngo


--Apple-Mail=_00405CEB-D6C6-4D32-B58B-5CEB814BF546
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=us-ascii

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html charset=
=3Dus-ascii"></head><body style=3D"word-wrap: break-word; -webkit-nbsp-mode=
: space; -webkit-line-break: after-white-space;" class=3D""><br class=3D"">=
<div><blockquote type=3D"cite" class=3D""><div class=3D"">On Dec 15, 2015, =
at 6:21 AM, Paul Pelzl &lt;<a href=3D"mailto:pelzlpj@gmail.com" class=3D"">=
pelzlpj@gmail.com</a>&gt; wrote:</div><br class=3D"Apple-interchange-newlin=
e"><div class=3D""><div dir=3D"ltr" class=3D"">On Mon, Dec 14, 2015 at 9:25=
 AM, Chan Ngo <span dir=3D"ltr" class=3D"">&lt;<a href=3D"mailto:chan.ngo22=
03@gmail.com" target=3D"_blank" class=3D"">chan.ngo2203@gmail.com</a>&gt;</=
span> wrote:<br class=3D""><div class=3D"gmail_extra"><div class=3D"gmail_q=
uote"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;b=
order-left:1px solid rgb(204,204,204);padding-left:1ex"><div style=3D"word-=
wrap:break-word" class=3D"">An alternative, if you want to do as follows:<d=
iv class=3D"">- Compile Java program to an executable (not jar file)</div><=
div class=3D"">- Call this executable and get the return values from it</di=
v><div class=3D""><br class=3D""></div><div class=3D"">So you can think abo=
ut Unix module in OCaml, you can use the standard I/O to realize a communic=
ation channel between your OCaml code and the executable Java.</div><div cl=
ass=3D""><a href=3D"https://ocaml.github.io/ocamlunix/ocamlunix.html" targe=
t=3D"_blank" class=3D"">https://ocaml.github.io/ocamlunix/ocamlunix.html</a=
></div><div class=3D""><br class=3D""></div></div></blockquote><div class=
=3D""><br class=3D""></div><div class=3D"">If the data to be exchanged is s=
tructurally complex, then this technique becomes difficult; a cross-platfor=
m serialization library can be very helpful for generating appropriate seri=
alization code in multiple languages.&nbsp; As one example, Cap'n Proto has=
 bindings for both Java and OCaml: <a href=3D"https://capnproto.org/otherla=
ng.html" class=3D"">https://capnproto.org/otherlang.html</a><br class=3D"">=
</div></div></div></div></div></blockquote><div><br class=3D""></div>Yes, I=
 agree, in some cases, it will become difficult and we need a cross-platfor=
m serialization library. Your example is a good point. In addition, if you =
can control the source code of the Java side, you can modify the code such =
that it can return the result as JSON object then the OCaml side can get th=
is object value to parse complex data structures.</div><div><br class=3D"">=
</div><div>Best,</div><div><br class=3D""></div><div class=3D""><div class=
=3D"">---</div><div class=3D"">Chan Ngo</div><div class=3D"">INRIA,</div><d=
iv class=3D"">(+33)02 99 84 72 84</div><div class=3D""><a href=3D"mailto:ch=
an.ngo@inria.fr" class=3D"">chan.ngo@inria.fr</a></div><div class=3D""><a h=
ref=3D"http://people.rennes.inria.fr/Chan.Ngo" class=3D"">http://people.ren=
nes.inria.fr/Chan.Ngo</a></div></div><div class=3D""><br class=3D""></div><=
/body></html>=

--Apple-Mail=_00405CEB-D6C6-4D32-B58B-5CEB814BF546--
