Return-Path: <bobzhang1988@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id C7A447ED27
	for <caml-list@sympa.inria.fr>; Thu, 31 May 2012 18:01:39 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjMCAGKVx0/RVdgvkGdsb2JhbABEsBmDawgiAQEBAQkJDQcUBCOCGAEBAQMBEgITGQEbHQEDAQsGBQsNLiIBEQEFARwGEyKHWgEDBgWadQkDjCKCcIRdChknDVeIcQEFDIsFFIUyA5UYjhY+hBuBOg
X-IronPort-AV: E=Sophos;i="4.75,693,1330902000"; 
   d="scan'208";a="146069363"
Received: from mail-qa0-f47.google.com ([209.85.216.47])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 31 May 2012 18:01:39 +0200
Received: by qabg1 with SMTP id g1so3295264qab.6
        for <caml-list@inria.fr>; Thu, 31 May 2012 09:01:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=TeRjy1g58RiJJqud137WZFobXYx/4KP0wMnHMUPEz2Y=;
        b=xs7nIHNnihh0O/4SJgcuWvAuFNSv4b7B9GDfBDlcVK+GoJtgUM7vO9nNN5dzP0DNm3
         JPjmSg/Du/AB8SDUgfGzoI+zp4zpz7LbdvCHFL/VS9Fk6RQDNVSjn6urCmRKx2fPlTqz
         oDi2qXe0tswN/FdzP3ULh9eWxQqfhu2LeRwUXC+CcGdBV4WQNC9nvHqQeF92LlCNkO28
         vaCnQ3Gu6d5EXbxZzC6mI+wOFkCwX9/OIt0Z4BbwJ8R81DpoWbDNhauOoJC2oO4aWhT3
         492uwx0ugdyFjgqVTxmxahNqI3byLh6ghjtBPNfxGe1qW/cjXhmBCv5NyswHq4ZiZ7Ii
         sLVw==
MIME-Version: 1.0
Received: by 10.60.14.41 with SMTP id m9mr19768757oec.57.1338480097896; Thu,
 31 May 2012 09:01:37 -0700 (PDT)
Received: by 10.182.144.71 with HTTP; Thu, 31 May 2012 09:01:37 -0700 (PDT)
In-Reply-To: <4FC76B3E.2070509@frisch.fr>
References: <CAH2fdNZ+-COr_HWoD_q1JS2uV1syRfaXkncokrtdxD45qyZnCQ@mail.gmail.com>
	<jptm5g$bul$1@dough.gmane.org>
	<4FC61595.6070009@frisch.fr>
	<4FC62B53.20504@gmail.com>
	<4FC76B3E.2070509@frisch.fr>
Date: Thu, 31 May 2012 12:01:37 -0400
Message-ID: <CANcqPu6w5anbHdw7Es3tk0dd-pFVzQ43yU0OPEPxqFi-hrvM7Q@mail.gmail.com>
From: bob zhang <bobzhang1988@gmail.com>
To: Alain Frisch <alain@frisch.fr>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=e89a8fb1fac0c62b3504c1572ed1
Subject: Re: [Caml-list] Re: Syntax extensions without Camlp4


--e89a8fb1fac0c62b3504c1572ed1
Content-Type: text/plain; charset=ISO-8859-1

On Thu, May 31, 2012 at 8:59 AM, Alain Frisch <alain@frisch.fr> wrote:

> On 05/30/2012 04:14 PM, Hongbo Zhang wrote:
>
>> 1. Why camlp4 is buggy?
>> The main buggy part is its parsing technology.
>>
>
> I don't consider that the main problem with Camlp4 is that it is buggy,
> but rather that (i) it is overly complex for the benefits it delivers,
> and (ii) it is actually not such a great idea to change the concrete
> syntax.
>
> Hi,Alain,
   Thanks for your message.
   Some opinions below: (Feel free to correct if I am wrong)
   Why do you think it's overly complex? The other part is not complex IMO
except the internal mechanism of parsing. There are other benefits of
revised syntax. One point is that write an error
recover parser is straitforward for revised syntax. And it's more friendly
to IDE.

Some example of useless complexity:
>
>  - A custom notion of AST. Why not simply use the OCaml one?  (Extended
> with nodes for a new nodes, like quotations.)
>
> The simple answer is you can not. (or it's at least not an easy way once
you want to support quotation and *antiquotation* *everywhere*. Just take a
look at how ugly the Template Haskell program is)

>  - The use of concrete syntax for manipulating the AST.  The developer
> needs to understand not only the new AST, but also how it is reflected
> exactly by the concrete syntax quotations (and this is non trivial), and
> where anti-quotations are allowed, etc. What's wrong with normal pattern
> matching and expression building with the standard AST?  It might be a
> little bit more verbose, but it's so much simpler to understand.
>
> The answer is also you can not. There are some ambiguities that you can
not support quotations
and antiquotations. Currenty Camlp4 support quotations and antiquotations
for revised syntax in
all branches except Ast.TyDcl.

I agree it would be useful to write a simple quoation expander for
Parsetree.structure_item, (with limited antiquotation support) in Camlp4
and add another hook for Parsetree.

>  - A different syntax (the revised one).  I understand the benefits of
> this new syntax, but it seems kind of crazy to have a "low-level" tool
> implemented in (and encouraging) a syntax different from the core system.
>
>  - A complicated bootstrapping cycle (partly a consequence of the fact
> that Camlp4 is itself written in a custom syntax).  That's mostly for OCaml
> maintainers, but in the past, it has slowed down development in a
> non-negligible way.
>
>
>  2. About the proposal.
>> There are mainly 2 pieces. About the hook
>> Parsetree.structure->**Parsetree. structure, given that camlp4 already
>>
>> imports Parsetree, it's really trivial to
>> add another hook after camlp4astdump2ocamlast.
>>
>
> I've absolutely no doubt that Camlp4 can be extended to be at least as
> powerful as this "Parsetree rewriting" proposal.  What's important is that
> this proposal is so simple that it can be implemented in a few dozens line
> of code in the core compiler. We should not create a dependency on a
> complex tool for problems which can be solved with something so simple.
>
>
>  It's still nontrivial to write a robust Parsetree.structure ->
>> Parsetree.structure, it would be nice if we could provide a quotation
>> syntax for Parsetree.types.
>>
>
> I believe the opposite: it's simpler to write a robust AST->AST rewriting
> function if you work directly on the "real" AST definition, rather than a
> slighlty different one and with a custom syntax.  Just for an example,
> consider a left-hand side like:
>
>  | <:pat< $p1$ | $p2$ | $p3$ >> -> ...
>
> Will it capture both (p1|p2)|p3 and p1|(p2|p3)?  Or only one of them?
> Another example: controlling precisely locations introduced in the AST
> fragments created with quotations is quite tricky.
>
>
>
> Alain
>



-- 
-- Bob

--e89a8fb1fac0c62b3504c1572ed1
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br><br><div class=3D"gmail_quote">On Thu, May 31, 2012 at 8:59 AM, Alain F=
risch <span dir=3D"ltr">&lt;<a href=3D"mailto:alain@frisch.fr" target=3D"_b=
lank">alain@frisch.fr</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x">
<div class=3D"im">On 05/30/2012 04:14 PM, Hongbo Zhang wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
1. Why camlp4 is buggy?<br>
The main buggy part is its parsing technology.<br>
</blockquote>
<br></div>
I don&#39;t consider that the main problem with Camlp4 is that it is buggy,=
 but rather that (i) it is overly complex for the benefits it delivers,<br>
and (ii) it is actually not such a great idea to change the concrete syntax=
.<br>
<br></blockquote><div>Hi,Alain,=A0</div><div>=A0 =A0Thanks for your message=
.</div><div>=A0 =A0Some opinions below: (Feel free to correct if I am wrong=
)</div><div>=A0 =A0Why do you think it&#39;s overly complex? The other part=
 is not complex IMO except the internal mechanism of parsing. There are oth=
er benefits of revised syntax. One point is that write an error =A0</div>
<div>recover parser is straitforward for revised syntax. And it&#39;s more =
friendly to IDE.</div><div><br></div><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
Some example of useless complexity:<br>
<br>
=A0- A custom notion of AST. Why not simply use the OCaml one? =A0(Extended=
 with nodes for a new nodes, like quotations.)<br>
<br></blockquote><div>The simple answer is you can not. (or it&#39;s at lea=
st not an easy way once you want to support quotation and *antiquotation* *=
everywhere*. Just take a look at how ugly the Template Haskell program is)=
=A0</div>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
=A0- The use of concrete syntax for manipulating the AST. =A0The developer =
needs to understand not only the new AST, but also how it is reflected exac=
tly by the concrete syntax quotations (and this is non trivial), and where =
anti-quotations are allowed, etc. What&#39;s wrong with normal pattern matc=
hing and expression building with the standard AST? =A0It might be a little=
 bit more verbose, but it&#39;s so much simpler to understand.<br>

<br></blockquote><div>The answer is also you can not. There are some ambigu=
ities that you can not support quotations</div><div>and antiquotations. Cur=
renty Camlp4 support quotations and antiquotations for revised syntax in=A0=
</div>
<div>all branches except Ast.TyDcl.</div><div><br></div><div>I agree it wou=
ld be useful to write a simple quoation expander for Parsetree.structure_it=
em, (with limited antiquotation support) in Camlp4 and add another hook for=
 Parsetree.</div>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
=A0- A different syntax (the revised one). =A0I understand the benefits of =
this new syntax, but it seems kind of crazy to have a &quot;low-level&quot;=
 tool implemented in (and encouraging) a syntax different from the core sys=
tem.<br>

<br>
=A0- A complicated bootstrapping cycle (partly a consequence of the fact th=
at Camlp4 is itself written in a custom syntax). =A0That&#39;s mostly for O=
Caml maintainers, but in the past, it has slowed down development in a non-=
negligible way.<br>

<br>
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"im">
2. About the proposal.<br>
There are mainly 2 pieces. About the hook<br></div>
Parsetree.structure-&gt;<u></u>Parsetree. structure, given that camlp4 alre=
ady<div class=3D"im"><br>
imports Parsetree, it&#39;s really trivial to<br>
add another hook after camlp4astdump2ocamlast.<br>
</div></blockquote>
<br>
I&#39;ve absolutely no doubt that Camlp4 can be extended to be at least as =
powerful as this &quot;Parsetree rewriting&quot; proposal. =A0What&#39;s im=
portant is that this proposal is so simple that it can be implemented in a =
few dozens line of code in the core compiler. We should not create a depend=
ency on a complex tool for problems which can be solved with something so s=
imple.<div class=3D"im">
<br>
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">
It&#39;s still nontrivial to write a robust Parsetree.structure -&gt;<br>
Parsetree.structure, it would be nice if we could provide a quotation<br>
syntax for Parsetree.types.<br>
</blockquote>
<br></div>
I believe the opposite: it&#39;s simpler to write a robust AST-&gt;AST rewr=
iting function if you work directly on the &quot;real&quot; AST definition,=
 rather than a slighlty different one and with a custom syntax. =A0Just for=
 an example, consider a left-hand side like:<br>

<br>
 =A0| &lt;:pat&lt; $p1$ | $p2$ | $p3$ &gt;&gt; -&gt; ...<br>
<br>
Will it capture both (p1|p2)|p3 and p1|(p2|p3)? =A0Or only one of them?<br>
Another example: controlling precisely locations introduced in the AST frag=
ments created with quotations is quite tricky.<span class=3D"HOEnZb"><font =
color=3D"#888888"><br>
<br>
<br>
<br>
Alain<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r>-- Bob<br>

--e89a8fb1fac0c62b3504c1572ed1--
