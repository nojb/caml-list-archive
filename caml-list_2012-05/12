Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q43CMu7H025921
	for <caml-list@sympa-roc.inria.fr>; Thu, 3 May 2012 14:22:56 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ArUBAIV3ok/RVdIpkGdsb2JhbABFsx0IIgEBAQEJCQ0HFAQjgiICLAEbHgMSEF0BEQEFAVeHXAEDCwuZOIJeCQOMJIJzhQoKGScNV4h2AQULjViDJQSVfoERjVE9hAw
X-IronPort-AV: E=Sophos;i="4.75,523,1330902000"; 
   d="scan'208";a="156569289"
Received: from mail-pz0-f41.google.com ([209.85.210.41])
  by mail1-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 May 2012 14:22:50 +0200
Received: by dakp5 with SMTP id p5so1366159dak.0
        for <caml-list@inria.fr>; Thu, 03 May 2012 05:22:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=AUulFA3pIaGKHGuMpiH6DfL7VEHpBhaN+gAcxEotVFI=;
        b=OhJlJ1XCZpXWMY4uG7D/v+1tySNFHZb5cUq08EZlfIRKgm4c5u/RIht3gnKQ3BszCZ
         llN0WVSDs9kNzvx531EIpUcEeL/MIoTEdzE3evkc9qTU77BjqMt2VZunmFdHBD8leCGC
         nlIS6AiK58IC1hDdccQHXNAXAcXgVxfY4vRWcVyUGG0SMqze9i7wJw8JXdmiyFO2GEjD
         aM7cWPUWgI6MuTMLHTrxglDhmIRVoHPaqBPnZ4df6iYLdBZeRm99rUtVzlaFkYGwa4iz
         2fYAzHyGysNf1Cu6jnqMtwILx+0JBjYSxFpa1qOVig5IGNQ3/JO88m8JZgle6aWICHkX
         vbVQ==
MIME-Version: 1.0
Received: by 10.68.213.162 with SMTP id nt2mr4973559pbc.31.1336047769180; Thu,
 03 May 2012 05:22:49 -0700 (PDT)
Received: by 10.68.228.194 with HTTP; Thu, 3 May 2012 05:22:49 -0700 (PDT)
Date: Thu, 3 May 2012 13:22:49 +0100
Message-ID: <CAOQwdX1f_RvxeV=NZPaN9-XwSNw3bg_nWzhFMf6Qga0L5Btt9Q@mail.gmail.com>
From: Joel Reymont <joelr1@gmail.com>
To: caml-list@inria.fr
Content-Type: text/plain; charset=ISO-8859-1
Subject: [Caml-list] using modules to wrap c++ classes

Suppose I have a C++ class with a bunch of methods that act as callbacks.

My callbacks will be hit if I derive the class and implement the
methods I'm interested in.

Now, I would like to wrap this class from OCaml.

This is straightforward from using OCaml classes (section 18.3.5 of
the manual) but is there a way to implement this using modules?

I don't think this is possible but would like to confirm.

    Thanks, Joel

--------------------------------------------------------------------------
Working on AlgoKit, a new algorithmic trading platform using Rithmic R|API
---------------------+------------+---------------------------------------
http://wagerlabs.com | @wagerlabs | http://www.linkedin.com/in/joelreymont
---------------------+------------+---------------------------------------
