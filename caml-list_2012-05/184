Return-Path: <daniel.buenzli@erratique.ch>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 5CFC27ED26
	for <caml-list@sympa.inria.fr>; Sun, 27 May 2012 21:01:50 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApYCAJF5wk9KN1ZKm2dsb2JhbABFgx2CGbAFAQEBAQEICQsJFCeCFwEBBAEjBFIFCwsODAImAgJHEAYbh34FBKVRkVGBJIlfhC0yYAOaUxONBA
X-IronPort-AV: E=Sophos;i="4.75,666,1330902000"; 
   d="scan'208";a="145566335"
Received: from mail6.webfaction.com (HELO smtp.webfaction.com) ([74.55.86.74])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 27 May 2012 21:01:49 +0200
Received: from [192.168.0.102] (91-233.197-178.cust.bluewin.ch [178.197.233.91])
	by smtp.webfaction.com (Postfix) with ESMTP id 3A973208E47E;
	Sun, 27 May 2012 14:01:47 -0500 (CDT)
Date: Sun, 27 May 2012 21:01:43 +0200
From: =?utf-8?Q?Daniel_B=C3=BCnzli?= <daniel.buenzli@erratique.ch>
To: Hongbo Zhang <bobzhang1988@gmail.com>
Cc: caml-list@inria.fr
Message-ID: <71FFF6A2CF1E4E6DA0FFF397B2084B89@erratique.ch>
In-Reply-To: <4FC26FDD.9010407@gmail.com>
References: <CAH2fdNZ+-COr_HWoD_q1JS2uV1syRfaXkncokrtdxD45qyZnCQ@mail.gmail.com>
 <jptm5g$bul$1@dough.gmane.org>
 <D521C447A36B43D4B39B88CDC2A55852@erratique.ch>
 <4FC26FDD.9010407@gmail.com>
X-Mailer: sparrow 1.6 (build 1081.27)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Subject: Re: [Caml-list] Re: Syntax extensions without Camlp4


Le dimanche, 27 mai 2012 =C3=A0 20:18, Hongbo Zhang a =C3=A9crit :
> Come on, Parsetree.structure -> Parsetree.structure does not solve the sc=
ope rule problem.


I didn't say it did.=20=20

As I said in my message and in the comment of the blog post I'm not really =
fond of the proposal either but I still think it's a better thing than caml=
p4.

Regarding your comments about fragmentation, camlp4 is actually much more p=
rone to lead to fragmentation and confusion (e.g. this revised syntax thing=
) than the proposed mechanism.

> I agree that it would be nice if we have metaocaml in.

Why not. But metaocaml is not about static meta-programming, it provides ab=
stractions for runtime meta-programming.

Best,

Daniel
