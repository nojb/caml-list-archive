Return-Path: <info@gerd-stolpmann.de>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by sympa.inria.fr (Postfix) with ESMTPS id 5221A7ED26
	for <caml-list@sympa.inria.fr>; Thu, 31 May 2012 19:28:56 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AncDAKGpx0/U4xEJk2dsb2JhbABEgx2CMKpQg3MiAQEBAQkJCwkUAySCGAEBBAEjBFIFCwsYAgImAgJXBhMJh30JB6ZBkjuBI4luFIQggRIDjSSJA4RAjQaBVA
X-IronPort-AV: E=Sophos;i="4.75,693,1330902000"; 
   d="scan'208";a="146079598"
Received: from moutng.kundenserver.de ([212.227.17.9])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 31 May 2012 19:28:55 +0200
Received: from office1.lan.sumadev.de (dslb-188-097-013-091.pools.arcor-ip.net [188.97.13.91])
	by mrelayeu.kundenserver.de (node=mreu3) with ESMTP (Nemesis)
	id 0MSCWE-1ST1Mi0x22-00TNKg; Thu, 31 May 2012 19:28:55 +0200
Received: from [192.168.5.106] (dslb-188-097-013-091.pools.arcor-ip.net [188.97.13.91])
	by office1.lan.sumadev.de (Postfix) with ESMTPSA id EBE03C00D0;
	Thu, 31 May 2012 19:28:53 +0200 (CEST)
From: Gerd Stolpmann <info@gerd-stolpmann.de>
To: bob zhang <bobzhang1988@gmail.com>
Cc: Alain Frisch <alain@frisch.fr>, caml-list@inria.fr
In-Reply-To: <CANcqPu6w5anbHdw7Es3tk0dd-pFVzQ43yU0OPEPxqFi-hrvM7Q@mail.gmail.com>
References:
	 <CAH2fdNZ+-COr_HWoD_q1JS2uV1syRfaXkncokrtdxD45qyZnCQ@mail.gmail.com>
	 <jptm5g$bul$1@dough.gmane.org> <4FC61595.6070009@frisch.fr>
	 <4FC62B53.20504@gmail.com> <4FC76B3E.2070509@frisch.fr>
	 <CANcqPu6w5anbHdw7Es3tk0dd-pFVzQ43yU0OPEPxqFi-hrvM7Q@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
Date: Thu, 31 May 2012 19:28:59 +0200
Message-ID: <1338485339.17140.120.camel@thinkpad>
Mime-Version: 1.0
X-Mailer: Evolution 2.28.3 
Content-Transfer-Encoding: 7bit
X-Provags-ID: V02:K0:AH1eIaZZ9MLbBWjcPP6jasHI3QmlUATC2u27y4Uip0M
 sB53rR+2Vai2FKWSuSzbQbuNzJH7PK7mmGRH73/3jvwYtWrF2B
 9WebYA9F4kZqbufnT4GAVoj38GUwWFU2zVU3xE7V5taPmMcaK9
 e6/R6O64yveb+vRP/skt6GTZWCRlmrbMBi8Rc9MRXuenUqgz+5
 AhOS2fH5GajlE8MzG8K+RGK0U3rzoVFgD8mzmCzqZRKAd905wR
 7f6gQjYGjDYsrwBPv5dmdnnmJ3ZXDsU/s24UFof/s3MoN5yXLs
 xs2iiZGKr01pv8CpJOf9fdZB6M1us/5AgRmnNWl/toLYkzSz/i
 GJqDDj1uiC12qCb3dtZHbKtQGX2sa+cfRrp12OABs
Subject: Re: [Caml-list] Re: Syntax extensions without Camlp4

Am Donnerstag, den 31.05.2012, 12:01 -0400 schrieb bob zhang:
> 
> 
> On Thu, May 31, 2012 at 8:59 AM, Alain Frisch <alain@frisch.fr> wrote:
>         On 05/30/2012 04:14 PM, Hongbo Zhang wrote:
>                 1. Why camlp4 is buggy?
>                 The main buggy part is its parsing technology.
>         
>         
>         I don't consider that the main problem with Camlp4 is that it
>         is buggy, but rather that (i) it is overly complex for the
>         benefits it delivers,
>         and (ii) it is actually not such a great idea to change the
>         concrete syntax.
>         
> Hi,Alain, 
>    Thanks for your message.
>    Some opinions below: (Feel free to correct if I am wrong)
>    Why do you think it's overly complex? The other part is not complex
> IMO except the internal mechanism of parsing. There are other benefits
> of revised syntax. One point is that write an error  
> recover parser is straitforward for revised syntax. And it's more
> friendly to IDE.

IMHO, there is no point in discussing "revised" (actually, alternate)
syntax. It might be easier to parse, but most programmers are used to
the standard syntax. The problem here is that it is difficult for a
human to switch between two syntaxes.

That said, I'm for dropping the alternate syntax entirely.

> 
> 
>         Some example of useless complexity:
>         
>          - A custom notion of AST. Why not simply use the OCaml one?
>          (Extended with nodes for a new nodes, like quotations.)
>         
> The simple answer is you can not. (or it's at least not an easy way
> once you want to support quotation and *antiquotation* *everywhere*.
> Just take a look at how ugly the Template Haskell program is) 

What's the problem with antiquotations? I imagine that you can simply
call the parser, and it is only a matter of selecting the right entry
point, and passing the tokens down.

>          - The use of concrete syntax for manipulating the AST.  The
>         developer needs to understand not only the new AST, but also
>         how it is reflected exactly by the concrete syntax quotations
>         (and this is non trivial), and where anti-quotations are
>         allowed, etc. What's wrong with normal pattern matching and
>         expression building with the standard AST?  It might be a
>         little bit more verbose, but it's so much simpler to
>         understand.
>         
> The answer is also you can not. There are some ambiguities that you
> can not support quotations
> and antiquotations. Currenty Camlp4 support quotations and
> antiquotations for revised syntax in 
> all branches except Ast.TyDcl.

I guess you are missing Alain's point here. He suggests to use normal
pattern matching directly on parsetrees, as in

match expr with
 | Pexp_ident id -> Pexp_ident (tranform id)
 | Pexp_contant c -> Pexp_constant c
 | ...

instead of using camlp4 syntax quotations (no <<...>> stuff for syntax
manipulation anymore).

Gerd

> I agree it would be useful to write a simple quoation expander for
> Parsetree.structure_item, (with limited antiquotation support) in
> Camlp4 and add another hook for Parsetree.
>          - A different syntax (the revised one).  I understand the
>         benefits of this new syntax, but it seems kind of crazy to
>         have a "low-level" tool implemented in (and encouraging) a
>         syntax different from the core system.
>         
>          - A complicated bootstrapping cycle (partly a consequence of
>         the fact that Camlp4 is itself written in a custom syntax).
>          That's mostly for OCaml maintainers, but in the past, it has
>         slowed down development in a non-negligible way.
>         
>         
>                 2. About the proposal.
>                 There are mainly 2 pieces. About the hook
>                 
>                 Parsetree.structure->Parsetree. structure, given that
>                 camlp4 already
>                 
>                 imports Parsetree, it's really trivial to
>                 add another hook after camlp4astdump2ocamlast.
>                 
>         
>         I've absolutely no doubt that Camlp4 can be extended to be at
>         least as powerful as this "Parsetree rewriting" proposal.
>          What's important is that this proposal is so simple that it
>         can be implemented in a few dozens line of code in the core
>         compiler. We should not create a dependency on a complex tool
>         for problems which can be solved with something so simple.
>         
>         
>                 It's still nontrivial to write a robust
>                 Parsetree.structure ->
>                 Parsetree.structure, it would be nice if we could
>                 provide a quotation
>                 syntax for Parsetree.types.
>         
>         
>         I believe the opposite: it's simpler to write a robust
>         AST->AST rewriting function if you work directly on the "real"
>         AST definition, rather than a slighlty different one and with
>         a custom syntax.  Just for an example, consider a left-hand
>         side like:
>         
>          | <:pat< $p1$ | $p2$ | $p3$ >> -> ...
>         
>         Will it capture both (p1|p2)|p3 and p1|(p2|p3)?  Or only one
>         of them?
>         Another example: controlling precisely locations introduced in
>         the AST fragments created with quotations is quite tricky.
>         
>         
>         
>         Alain
> 
> 
> 
> 
> -- 
> -- Bob

-- 
------------------------------------------------------------
Gerd Stolpmann, Darmstadt, Germany    gerd@gerd-stolpmann.de
Creator of GODI and camlcity.org.
Contact details:        http://www.camlcity.org/contact.html
Company homepage:       http://www.gerd-stolpmann.de
*** Searching for new projects! Need consulting for system
*** programming in Ocaml? Gerd Stolpmann can help you.
------------------------------------------------------------

