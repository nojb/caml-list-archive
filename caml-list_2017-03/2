Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 90B167FD2F
	for <caml-list@sympa.inria.fr>; Wed,  1 Mar 2017 04:58:00 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qk0-f176.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.220.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.220.176 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.220.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk0-f176.google.com) identity=helo;
  client-ip=209.85.220.176;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qk0-f176.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Ah27egRxRsaEsuRfXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4WIJqq85mqBkHD//Il1AaPBtSGragVwLSJ++C4ACpbvsbH6ChDOLV3FDY7yu?=
 =?us-ascii?q?wu1zQ6B8CEDUCpZNXLVAcdWPp4aVl+4nugOlJUEsutL3fbo3m18CJAUk6nbVk9?=
 =?us-ascii?q?Dq3PF4XTl8W60fyps92WOl0QxWmLWq5pNBi9sSnWs8AXh8MidvdwmVP1pS5odu?=
 =?us-ascii?q?BT2H8gD0iamRr4rpOw8Zpm7jgWsego8cJEear/b+I+QKAOXxo8NGVgy8ThrxjO?=
 =?us-ascii?q?SUO07XsRSGgM2k5HCgLf7Rz+GIz6sibgu/BV1yyTPMmwRrcxD2fxp5x3QQPl3X?=
 =?us-ascii?q?9UfwUy93va34kt1a8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CHDgC4RbZYhrDcVdFeGgEBAQECAQEBA?=
 =?us-ascii?q?QgBAQEBFAEBAQEBAQEBAQEBBwEBAQEBg0c/gQkHg1SRCophgjoqhhaOSCyFLEo?=
 =?us-ascii?q?CgicHQxQBAQEBAQEBAQEBARIBAQEICwsKHS+CMwQBHQWCFwEEASMEGQEbEgsBA?=
 =?us-ascii?q?wELBgMCCxodAgIiAREBBQEKEgYKCRKJSwEDDQgOk3yRFj+MA4FsGAUBHIMJBYN?=
 =?us-ascii?q?jChknAwpVgwkBAQEBAQEEAQEBAQEBAQEBFwIGEoY6hG+CUYIwglmCXwWHPQyJC?=
 =?us-ascii?q?4tTggKEcos8gXtTjkyIPIIZhxYUHoEVDyeBGgghFB9TF4N/Kg8RDIF/IjWIIYF?=
 =?us-ascii?q?PAQEB?=
X-IPAS-Result: =?us-ascii?q?A0CHDgC4RbZYhrDcVdFeGgEBAQECAQEBAQgBAQEBFAEBAQE?=
 =?us-ascii?q?BAQEBAQEBBwEBAQEBg0c/gQkHg1SRCophgjoqhhaOSCyFLEoCgicHQxQBAQEBA?=
 =?us-ascii?q?QEBAQEBARIBAQEICwsKHS+CMwQBHQWCFwEEASMEGQEbEgsBAwELBgMCCxodAgI?=
 =?us-ascii?q?iAREBBQEKEgYKCRKJSwEDDQgOk3yRFj+MA4FsGAUBHIMJBYNjChknAwpVgwkBA?=
 =?us-ascii?q?QEBAQEEAQEBAQEBAQEBFwIGEoY6hG+CUYIwglmCXwWHPQyJC4tTggKEcos8gXt?=
 =?us-ascii?q?TjkyIPIIZhxYUHoEVDyeBGgghFB9TF4N/Kg8RDIF/IjWIIYFPAQEB?=
X-IronPort-AV: E=Sophos;i="5.35,223,1484002800"; 
   d="scan'208,217";a="262538743"
Received: from mail-qk0-f176.google.com ([209.85.220.176])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 01 Mar 2017 04:57:59 +0100
Received: by mail-qk0-f176.google.com with SMTP id s186so51563912qkb.1;
        Tue, 28 Feb 2017 19:57:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=kOH0ee+MsbpbTklpQSb2JGGu7wp7BiXBbbdLJLVv4kk=;
        b=Zb6Tl2L/NcQrlJaQ/3FynJp91MzYc0WA/Cl1v6sttJf4eeme1McpQjVS5gZakpojl3
         w1y6Xo6lkFcUiyAWrAQEUZkuQrwZR93n3PcsQ7VbbYp7ZmytdBoOCdLdoC6esqanFg/1
         U7da7bP0vPYW2SYpE0+ZRs/PzuG90RhTQTgmbmSusWHAa0i0ZB7mdIfjF/mcVUvDriLe
         C20gsNE/TpaDbgDQKGR/p0MzhwjHGc0WZQicUZE2rzNJqwo+TtBzbAf4PwKPDFxq5x6F
         d9OgXPdnmvioBg+2OV3tSL1aXaMtKAPTFRuwYNFRBIN284y3BAGRC2xT51lElp7m2AgL
         piPg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=kOH0ee+MsbpbTklpQSb2JGGu7wp7BiXBbbdLJLVv4kk=;
        b=Q4I2CKuBO99vqxcswFwjrvp45PT5l9yOaNHug7Sd0SomQBu5MQPTFc/E+KvPucyPcc
         TpAtcn2Pgk4tq0jGwGxMDk3H7NmtG2LtRw9MeRCp6FxQORP/YZir4Z+mUmud2LSFJQRP
         9TG03O1/xs+UJqBtImiPvZ6kZnnba+uGWt9oYzTPDQJXVu1l7z+eiQHw2pxkO/CG9VtM
         4vxAmbOvrUvEhhl0CY5uRrnNvMcLMOAPh6QsApgsVhTcXOaR/XPQJCRVkFVYgGogJOtQ
         elSCrc4N5uOoKClPDyZpsqk4oZ0FVpIX+UshcXsHOz2ajx7yqmWEzSWjusG4ItjHL4Cx
         sJUA==
X-Gm-Message-State: AMke39n88Le+g09W527qSMk13fcIMOHwB4/x1sBMGRciwBVCYscWyMN8EgvHgc0TqwFTZC/RCEYeQALVb+4lSg==
X-Received: by 10.200.49.129 with SMTP id h1mr7421759qte.277.1488340678033;
 Tue, 28 Feb 2017 19:57:58 -0800 (PST)
MIME-Version: 1.0
Received: by 10.12.156.8 with HTTP; Tue, 28 Feb 2017 19:57:17 -0800 (PST)
In-Reply-To: <7C984183-3E3A-4698-8597-342888F7E53B@gmx.net>
References: <7C984183-3E3A-4698-8597-342888F7E53B@gmx.net>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 28 Feb 2017 22:57:17 -0500
Message-ID: <CAPFanBF75utqyxjUCgJEEkuZV89cNXtBc6jSSo-0=G26dp=xEQ@mail.gmail.com>
To: Helmut Brandl <helmut.brandl@gmx.net>
Cc: caml users <caml-list@inria.fr>, Francois Pottier <francois.pottier@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c003866b554d0549a35185
Subject: Re: [Caml-list] Menhir incremental api with ocamlbuild

--001a11c003866b554d0549a35185
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Indeed, ocamlbuild misses some built-in flag for menhir features. That
said, it is easy to add these flags through your myocamlbuild.ml. Here is
what I have in an incremental-menhir-using project (inside a dispatch call):

        flag ["menhir"; "parser"; "trace"] (A"--trace");
        flag ["menhir"; "parser"; "table"] (A "--table");
        flag ["menhir"; "parser"; "canonical"] (A"--canonical");

but it would be easy to add those to the built-in -use-menhir mode.

(If you are not comfortable with using myocamlbuild.ml, see the ocamlbuild
manual:

https://github.com/ocaml/ocamlbuild/blob/master/manual/manual.adoc#Sec_Plug=
ins
)

In this project I also have rules for handling of .messages files
corresponding Menhir's new error message support. I include the complete
code at the end of my email. I would like to get a bit more experience
using those, before considering including them in ocamlbuild proper.

----

module Menhir =3D struct
  let menhir () =3D
    if !Options.ocamlyacc =3D N then V"MENHIR" else !Options.ocamlyacc
  let menhir_tags mly =3D
    tags_of_pathname mly ++"ocaml"++"parser"++"menhir"

  let menhir_produce_messages env build =3D
    let messages, mly =3D env "%.messages", env "%.mly" in
    let open Ocamlbuild_pack in
    Ocaml_compiler.prepare_compile build mly;
    Cmd(S[menhir (); T (menhir_tags mly);
          A "--list-errors"; P mly; Sh ">"; Px messages])

  let menhir_compile_messages env build =3D
    let mly =3D env "%.mly" in
    let messages =3D env "%.messages" in
    let target =3D env "%_messages.ml" in
    Cmd(S[menhir (); T (menhir_tags mly); P mly;
          A "--compile-errors"; P messages;
          Sh ">"; Px target])

  let menhir_update_messages env build =3D
    let mly =3D env "%.mly" in
    let messages =3D env "%.messages" in
    let tmp =3D Filename.temp_file "menhir" ".messages" in
    Seq [
      Cmd(S[menhir (); T (menhir_tags mly); P mly;
            A "--update-errors"; P messages;
            Sh ">"; P tmp]);
      Cmd(S[A "mv"; P tmp; P messages]);
    ]

  let dispatcher =3D function
      | After_rules ->
        flag ["menhir"; "parser"; "menhir_trace"] (A"--trace");
        flag ["menhir"; "parser"; "menhir_table"] (A "--table");
        flag ["menhir"; "parser"; "menhir_canonical"] (A"--canonical");
        rule "menhir: .mly -> .messages"
          ~prod:"%.messages"
          ~deps:["%.mly"]
          menhir_produce_messages;
        rule "menhir: .mly & .messages -> _messages.ml"
          ~prod:"%_messages.ml"
          ~deps:["%.mly"; "%.messages"]
          menhir_compile_messages;
        rule "menhir: .mly & .messages -> .messages & .messages.update"
          ~stamp:"%.messages.update"
          ~deps:["%.mly"; "%.messages"]
          menhir_update_messages;
      | _ -> ()
end


On Tue, Feb 28, 2017 at 10:30 PM, Helmut Brandl <helmut.brandl@gmx.net>
wrote:

> Hello list,
>
> does anybody know how to build a project with ocamlbuild and use the
> incremental api of menhir. By using menhir directly I would use the
> =E2=80=98-table=E2=80=99 flag. But I don=E2=80=99t know how to transfer t=
his flag to menhir by
> using ocamlbuild.
>
> Kind regards
> Helmut
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs

--001a11c003866b554d0549a35185
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>Indeed, ocamlbuild misses some built-in flag for=
 menhir features. That said, it is easy to add these flags through your <a =
href=3D"http://myocamlbuild.ml">myocamlbuild.ml</a>. Here is what I have in=
 an incremental-menhir-using project (inside a dispatch call):<br><br>=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 flag [&quot;menhir&quot;; &quot;par=
ser&quot;; &quot;trace&quot;] (A&quot;--trace&quot;);<br>=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0 flag [&quot;menhir&quot;; &quot;parser&quot;; &quo=
t;table&quot;] (A &quot;--table&quot;);<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0 flag [&quot;menhir&quot;; &quot;parser&quot;; &quot;canonical&=
quot;] (A&quot;--canonical&quot;);<br><br></div>but it would be easy to add=
 those to the built-in -use-menhir mode.<br><br></div><div>(If you are not =
comfortable with using <a href=3D"http://myocamlbuild.ml">myocamlbuild.ml</=
a>, see the ocamlbuild manual:<br>=C2=A0 <a href=3D"https://github.com/ocam=
l/ocamlbuild/blob/master/manual/manual.adoc#Sec_Plugins">https://github.com=
/ocaml/ocamlbuild/blob/master/manual/manual.adoc#Sec_Plugins</a><br>)<br><b=
r></div>In this project I also have rules for handling of .messages files c=
orresponding Menhir&#39;s new error message support. I include the complete=
 code at the end of my email. I would like to get a bit more experience usi=
ng those, before considering including them in ocamlbuild proper.<br><br>--=
--<br><br>module Menhir =3D struct<br>=C2=A0 let menhir () =3D<br>=C2=A0=C2=
=A0=C2=A0 if !Options.ocamlyacc =3D N then V&quot;MENHIR&quot; else !Option=
s.ocamlyacc<br>=C2=A0 let menhir_tags mly =3D<br>=C2=A0=C2=A0=C2=A0 tags_of=
_pathname mly ++&quot;ocaml&quot;++&quot;parser&quot;++&quot;menhir&quot;<b=
r><br>=C2=A0 let menhir_produce_messages env build =3D<br>=C2=A0=C2=A0=C2=
=A0 let messages, mly =3D env &quot;%.messages&quot;, env &quot;%.mly&quot;=
 in<br>=C2=A0=C2=A0=C2=A0 let open Ocamlbuild_pack in<br>=C2=A0=C2=A0=C2=A0=
 Ocaml_compiler.prepare_compile build mly;<br>=C2=A0=C2=A0=C2=A0 Cmd(S[menh=
ir (); T (menhir_tags mly);<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0 A &quot;--list-errors&quot;; P mly; Sh &quot;&gt;&quot;; Px me=
ssages])<br><br>=C2=A0 let menhir_compile_messages env build =3D<br>=C2=A0=
=C2=A0=C2=A0 let mly =3D env &quot;%.mly&quot; in<br>=C2=A0=C2=A0=C2=A0 let=
 messages =3D env &quot;%.messages&quot; in<br>=C2=A0=C2=A0=C2=A0 let targe=
t =3D env &quot;%_<a href=3D"http://messages.ml">messages.ml</a>&quot; in<b=
r>=C2=A0=C2=A0=C2=A0 Cmd(S[menhir (); T (menhir_tags mly); P mly;<br>=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 A &quot;--compile-errors&q=
uot;; P messages;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
 Sh &quot;&gt;&quot;; Px target])<br><br>=C2=A0 let menhir_update_messages =
env build =3D<br>=C2=A0=C2=A0=C2=A0 let mly =3D env &quot;%.mly&quot; in<br=
>=C2=A0=C2=A0=C2=A0 let messages =3D env &quot;%.messages&quot; in<br>=C2=
=A0=C2=A0=C2=A0 let tmp =3D Filename.temp_file &quot;menhir&quot; &quot;.me=
ssages&quot; in<br>=C2=A0=C2=A0=C2=A0 Seq [<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0 Cmd(S[menhir (); T (menhir_tags mly); P mly;<br>=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 A &quot;--update-errors&quot;=
; P messages;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0 Sh &quot;&gt;&quot;; P tmp]);<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 C=
md(S[A &quot;mv&quot;; P tmp; P messages]);<br>=C2=A0=C2=A0=C2=A0 ]<br><br>=
=C2=A0 let dispatcher =3D function<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 | Afte=
r_rules -&gt;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 flag [&quot;men=
hir&quot;; &quot;parser&quot;; &quot;menhir_trace&quot;] (A&quot;--trace&qu=
ot;);<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 flag [&quot;menhir&quot=
;; &quot;parser&quot;; &quot;menhir_table&quot;] (A &quot;--table&quot;);<b=
r>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 flag [&quot;menhir&quot;; &quo=
t;parser&quot;; &quot;menhir_canonical&quot;] (A&quot;--canonical&quot;);<b=
r>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 rule &quot;menhir: .mly -&gt; =
.messages&quot;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 ~=
prod:&quot;%.messages&quot;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0 ~deps:[&quot;%.mly&quot;]<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0 menhir_produce_messages;<br>=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0 rule &quot;menhir: .mly &amp; .messages -&gt; _<a href=
=3D"http://messages.ml">messages.ml</a>&quot;<br>=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 ~prod:&quot;%_<a href=3D"http://messages.ml"=
>messages.ml</a>&quot;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0 ~deps:[&quot;%.mly&quot;; &quot;%.messages&quot;]<br>=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 menhir_compile_messages;<br>=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 rule &quot;menhir: .mly &amp; .message=
s -&gt; .messages &amp; .messages.update&quot;<br>=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 ~stamp:&quot;%.messages.update&quot;<br>=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 ~deps:[&quot;%.mly&quot=
;; &quot;%.messages&quot;]<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0 menhir_update_messages;<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 | _ -&g=
t; ()<br>end<br><br></div><div class=3D"gmail_extra"><br><div class=3D"gmai=
l_quote">On Tue, Feb 28, 2017 at 10:30 PM, Helmut Brandl <span dir=3D"ltr">=
&lt;<a href=3D"mailto:helmut.brandl@gmx.net" target=3D"_blank">helmut.brand=
l@gmx.net</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hello li=
st,<br>
<br>
does anybody know how to build a project with ocamlbuild and use the increm=
ental api of menhir. By using menhir directly I would use the =E2=80=98-tab=
le=E2=80=99 flag. But I don=E2=80=99t know how to transfer this flag to men=
hir by using ocamlbuild.<br>
<br>
Kind regards<br>
<span class=3D"HOEnZb"><font color=3D"#888888">Helmut<br>
<br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/<wbr=
>ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>bugs</a></font></s=
pan></blockquote></div><br></div>

--001a11c003866b554d0549a35185--
