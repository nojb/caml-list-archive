Return-Path: <jordojw@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 3B6217EF10
	for <caml-list@sympa.inria.fr>; Tue, 24 Feb 2015 21:26:29 +0100 (CET)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  jordojw@gmail.com) identity=pra; client-ip=209.85.217.174;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jordojw@gmail.com";
  x-sender="jordojw@gmail.com"; x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  jordojw@gmail.com designates 209.85.217.174 as permitted
  sender) identity=mailfrom; client-ip=209.85.217.174;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jordojw@gmail.com";
  x-sender="jordojw@gmail.com"; x-conformance=sidf_compatible;
  x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lb0-f174.google.com) identity=helo;
  client-ip=209.85.217.174;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="jordojw@gmail.com";
  x-sender="postmaster@mail-lb0-f174.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0BnAQCK3exUm67ZVdFbg1haBIMEwBSHHgdDAQEBAQEBEAEBAQEBBgsLCRQuhCgRHQEbHgMSEA8CJgIkAREBBQEiGxqHeAEDEQ2sPYMrPjGLLoFrgneOGQoZJw1UhFsMGgEBBA6BE5FPgUMFik6IbUqBTAEFg0mBG45igXQSI4EMCYQxHTGCQwEBAQ
X-IPAS-Result: A0BnAQCK3exUm67ZVdFbg1haBIMEwBSHHgdDAQEBAQEBEAEBAQEBBgsLCRQuhCgRHQEbHgMSEA8CJgIkAREBBQEiGxqHeAEDEQ2sPYMrPjGLLoFrgneOGQoZJw1UhFsMGgEBBA6BE5FPgUMFik6IbUqBTAEFg0mBG45igXQSI4EMCYQxHTGCQwEBAQ
X-IronPort-AV: E=Sophos;i="5.09,641,1418079600"; 
   d="scan'208";a="101197724"
Received: from mail-lb0-f174.google.com ([209.85.217.174])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 24 Feb 2015 21:26:28 +0100
Received: by lbiw7 with SMTP id w7so27517396lbi.10
        for <caml-list@inria.fr>; Tue, 24 Feb 2015 12:26:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=Ik0ZX8CT/m3Fxg8M8J/oleCYO4Zd/AmV+D4dtoK1vCg=;
        b=ykRGfkmtH78bGRI42hWYtHDiylcN4+qRHH+KJQASNs8RtC3eqVgP0XuVeBsGJ4ORca
         Xlqiauns3VeFb4eWicPjiBtx+ZWsunzYWn160kOP/w3jk3Tc39cNqW+elCYP1ohjDgS/
         MH+8fvrUnqg+Zw5AOCUqzqLdO3bPm5zZoaaNICVexyar5oiAX8a0WSVyDbyzDPQHtCd/
         nqO7rW8yDfNBL/IEy1RPujXxtBBQDz+zwho2+5ZpHNNlPtXvHDAp2ty68VcD9dMoWvNi
         fRV4OKVAv17++Qf+bC6kxr6RtL7jyKu+9Tn/CpBhYREjHHBx1Op4wA9uG473KB0RgzRo
         fA8w==
MIME-Version: 1.0
X-Received: by 10.112.215.9 with SMTP id oe9mr16091868lbc.40.1424809587931;
 Tue, 24 Feb 2015 12:26:27 -0800 (PST)
Received: by 10.25.128.3 with HTTP; Tue, 24 Feb 2015 12:26:27 -0800 (PST)
Date: Tue, 24 Feb 2015 12:26:27 -0800
Message-ID: <CAPOA5_5KZXXPaJ7OktWVqzN86Ex4joDrdXrQQHvW_hUwRe0cJg@mail.gmail.com>
From: Jordan W <jordojw@gmail.com>
To: "caml-list@inria.fr" <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
X-Validation-by: jordojw@gmail.com
Subject: [Caml-list] CommonML: An opinionated build/package/develop workflow
 on top of CommonJS

I'm cross posting my post from the opam-devel list:

Since there is a lot of interest in OCaml from web frontend communities, I
thought it would be useful to imagine what the ideal development flow for
this audience would look like. I know there's a ton of progress being made
on documentation, and build systems, but I thought I would explore the
problem from the perspective of a frontend developer, which means starting
with the tooling that they are familiar with. One common tool is
`CommonJS/package.json`, which is a way to model and organize dependencies
using a single JSON file per package. The npm command line tools allow you
to install files to disk based purely on these package.json files.

I created a proof of concept called CommonML, which lets developers use
their familiar CommonJS workflow with OCaml:
https://github.com/jordwalke/CommonML

I also took used it as an opportunity to explore what can be done when
there are opinionated conventions in place. If you have a predictable
project structure, how can that benefit us? In this case, I created an
automatic docs builder (with nice styling) and also automatically generate
IDE autocomplete support for all your dependencies (and your project's
internal modules).


I hope there is at least something we can take away from it that helps
inform the design of OPAM and related tools.


One nice aspect is that with `CommonJS`, there needn't be an authoritative
package service. Your package.json file can point to arbitrary git URLs if
you like.  (Note: The npm command line tool is *not* the npm package
service - they are made by the same organization but one may be used
without the other). However, this prototype I've built does allow you to
host OCaml code on npm and depend on it.

By far the nicest thing about developing with `CommonJS` is that you don't
have to think about module namespace collisions. There is Just One Way to
namespace modules/packages. This prototype automatically sets up a similar
namespacing convention for OCaml modules. It's not flexible, and you can't
customize it, but it always works. It uses module aliases (thank you to Leo
White for helping me come up with the build conventions).

Another thing I like about the `CommonJS` workflow is that developing
packages locally is virtually the same as developing against remote
dependencies. (`npm link` is much like `opam pin` I'm told). When you `npm
install` dependencies, everything is pulled down into a local
sandbox(node_modules directory) instead of being installed globally by
default. If you want to see what versions your local package is seeing,
just traverse the file system! If you want to reinstall, just delete the
node_modules directory and then `npm install` again. I believe there is a
way to get it to use a global package cache so the node_modules might
contain symlinks to those shared packages - but that's just an
optimization. There isn't any notion of building in `npm`, so there
wouldn't be a build cache I believe.

In my quick prototype, every dependency must be compiled at least once for
the root level project that you are building. This ends up being nice in
cases where the build flags (such as -g) must be in effect for the
compilation of all my dependencies - relying on the build flags that you
*installed* the package with will bite you. But of course, the rebuilding
approach can end up being super slow. Still, the incremental build times
are *totally* reasonable since it does try to do some basic incremental
compilation. I would have used ocamlbuild which probably does a much better
job, but I needed to write my own totally custom operations in order to get
the auto-namespacing (with the help of Leo White). I wasn't sure how to do
that with ocamlbuild, but if I could, I imagine the incremental compilation
times would be way better.

Either way, for most of the work I do (developing libraries with many other
small libraries as dependencies) - I could see a development flow like this
being a worthwhile goal, especially if it makes OCaml much more comfortable
for a *huge* set of developers. `CommonJS` is likely becoming the most
popular development flow. It's just a hacky proof of concept, but it was
fun.
