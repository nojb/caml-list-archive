Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id p2PKRQQO003566
	for <caml-list@sympa-roc.inria.fr>; Fri, 25 Mar 2011 21:27:32 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvsEAPH5jE0+3JIE/2dsb2JhbAClY3eITbsqhWkEjHWDVA
X-IronPort-AV: E=Sophos;i="4.63,244,1299452400"; 
   d="scan'208";a="79105812"
Received: from vs.philou.ch ([62.220.146.4])
  by mail3-smtp-sop.national.inria.fr with ESMTP; 25 Mar 2011 21:27:32 +0100
Received: from [192.168.1.120] (85-218-16-131.dclient.lsne.ch [85.218.16.131])
	by vs.philou.ch (Postfix) with ESMTPSA id 6717C232B99;
	Fri, 25 Mar 2011 21:27:31 +0100 (CET)
Mime-Version: 1.0 (Apple Message framework v1084)
Content-Type: text/plain; charset=iso-8859-1
From: Philippe Strauss <philou@philou.ch>
In-Reply-To: <4D8CB859.9040709@inescporto.pt>
Date: Fri, 25 Mar 2011 21:27:30 +0100
Cc: Fabrice Le Fessant <Fabrice.Le_fessant@inria.fr>,
        Gerd Stolpmann <info@gerd-stolpmann.de>, caml-list@inria.fr
Message-Id: <7E7486ED-A8E7-478F-B39E-80C45A614CE8@philou.ch>
References: <2054357367.219171.1300974318806.JavaMail.root@zmbs4.inria.fr>	 <4D8BD02D.1010505@inria.fr>  <4D8C73C8.6020801@inescporto.pt> <1301055903.8429.314.camel@thinkpad> <341494683.237537.1301057887481.JavaMail.root@zmbs4.inria.fr> <4D8C944A.9060601@inria.fr> <4D8CB859.9040709@inescporto.pt>
To: Hugo Ferreira <hmf@inescporto.pt>
X-Mailer: Apple Mail (2.1084)
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by walapai.inria.fr id p2PKRQQO003566
Subject: Re: [Caml-list] Efficient OCaml multicore -- roadmap?


Le 25 mars 2011 à 16:44, Hugo Ferreira a écrit :

> Hi,
> 
> Don't mean to drag this on but...
> 
> On 03/25/2011 01:10 PM, Fabrice Le Fessant wrote:
>> On 03/25/2011 01:58 PM, Hugo Ferreira wrote:
>>>>> Assuming all shared data structures are immutable is it possible to:
>> 
>> Well, Java has fully multi-threaded garbage collection, so there is no
>> point that it is possible to do it.
>> 
>> The problem is that it has a cost, and the cost is a huge slowdown on
>> mono-threaded programs. Since most OCaml programs are mono-threaded, and
>> only few programs would really benefit from multi-threading, we are
>> trying to come up with a solution that would satisfy both worlds.
>> Mono-threaded programs would still run as fast (possibly using a
>> non-reentrant version of the runtime, to avoid the cost of TLS if it is
>> visible), and multi-threaded programs can be written easily.
>> 
> 
> Personally I think this is an "impossible" feat.
> Why not simply allow for the existence of two GC's and let
> the programmer select the one that is best for the application?
> 

I second this one.

Seems GC and caml are heavily intricated, but modularizing this part seems a future proof investment in effort.


