Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 860E07EF0B
	for <caml-list@sympa.inria.fr>; Fri, 20 Sep 2019 10:33:22 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qk1-f175.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.222.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.222.175 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.222.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk1-f175.google.com) identity=helo;
  client-ip=209.85.222.175;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qk1-f175.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3ARC6BhxC0W/zKP75c7xh5UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPTyocbcNUDSrc9gkEXOFd2Cra4d0KyM6eu4AyRAuc/H7ClYNsQUFlcsso?=
 =?us-ascii?q?Y/p0QYGsmLCEn2frbBThcRO4B8bmJj5GyxKkNPGczzNBX4q3y26iMOSF2kbVIm?=
 =?us-ascii?q?buv6FZTPgMupyuu854PcYxlShDq6fLh+MAi6oR/eu8ULj4ZuMLg9xgXGrndUZe?=
 =?us-ascii?q?hd2GdkKU6Okxrm6cq84YBv/z5Mt/498sJLTLn3cbk/QbFEFjotLno75NfstRnN?=
 =?us-ascii?q?TAuP4mUTX2ALmRdWAAbL8Q/3UI7pviT1quRy1i+aPdbrTb8vQjSt871rSB7zhy?=
 =?us-ascii?q?gZMTMy7XzahdZxjKJfpxKhugB/zovJa4ybKPZyYqXQds4BSGFfQsheSTBOAoKk?=
 =?us-ascii?q?b4sOEeUBO/pYr5LgrFcKtBeyGBWgCP/qxjJOm3T437A10/45HA7J0gwvHdIAvn?=
 =?us-ascii?q?rXotvoKqkdTfu4w7PUwTjZdf5axSvx5YrOfxs8of+MR7Vwcc/JxEcuDQzKlU+Q?=
 =?us-ascii?q?qY37MDORy+8DrnSU7+p+WuK1lWEnsRx6rz+gxsg2kYbJnIMVxU7A9Slj24Y6Od?=
 =?us-ascii?q?24R1BhYdG6CptdrC6aN45sTcMjR2Fkojo1yroDuZOieiUB1Zopxxnaa/OdcoiI?=
 =?us-ascii?q?5AruVOeXITdihXJqYqizhxio8US4y+38UNW03VhUoiZfk9jDqGoN1xvV58OaSf?=
 =?us-ascii?q?V95l+s1SiT2w3X8O1JIkA5mbDFJ5I/3LI8jIcfvEbDEyLwhU74lrWZdl8+9eit?=
 =?us-ascii?q?8+nnYqvpppubN4JsjwHxKKUumsimDeQhMQgCQnGX+eqh2LDh/UD1WrpKjvoxkq?=
 =?us-ascii?q?nWtJDVO94XqbK+Aw9Qyooj6hC/ACm60NkAg3ULMFZIdAiEgoXpIV3CPu70Aeml?=
 =?us-ascii?q?j1ixkjpmx+jKPrj7DZXMKnjDnq3hfbF460NExwo818tQ54hVCr4fJPL/QFTxu8?=
 =?us-ascii?q?DYDhAnKQy73fznBc5y1oMbQ22PA6uZPLnOvl+P4+IjO/OMa5MNuDbhN/gl4Obj?=
 =?us-ascii?q?gmMjll8YeamlxJ8XaHGjHvR6OEiZenrtgtIZEWgQpAY+TerqiEeDUTFJfXqyUb?=
 =?us-ascii?q?g8tXkHD9eDBIPIQYSoyJmIwC6/HZQeMmVDA0yFFXThX4qBUvYILimVJ5kyvCYD?=
 =?us-ascii?q?UO2OQoU71Byq/DTxy7d9I/CcriIRv4ji2dwz/ObTmAs/7xR7Cs2c1yeGSGQizT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6UtxqUATYUCtcMMaR8zMNvn98I/DtnzXgzbedLQEQSp?=
 =?us-ascii?q?R9ynBXc6SddjmoZSMXY4IM2ri1X45wTvG6UczuXZC5k986aa1H/0dZ4kliT2kZ?=
 =?us-ascii?q?I5hlxjefNhcG2rgqklqVrWDo/N1lyazuOkLPtBmiHK82iHwCyFu0QKCAM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtCQCejYRdh6/eVdFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZ4MFgQUWFIIGghyBHYJeixqCD5sdCQEDAQwjDAEBhD8CgwcbBwEENBMCDAE?=
 =?us-ascii?q?BBAEBAQIBAgMEARMBAQEIDQkIKYU0DII6KQGCZgEBAQECARIRBBkBGxYHAQMBC?=
 =?us-ascii?q?wYDAgsDCioCAiEBAREBBQEcBhMIEweDAAGBaQEDDg8PjzGPDIEDPIskfxYFARe?=
 =?us-ascii?q?CfgWBSEGCNQoZJw1iA4E9AgcSgSKMCYFYP4ERgmQuPoIaRwOEa4JYBJ4ijXstQ?=
 =?us-ascii?q?QeCJWUEhhyJL1WEARuCZUOVfJYtggiPEw8jgRwqgXkzGiNQMYI7CUcQFIFODA4?=
 =?us-ascii?q?Jg0+BPokXQTABjysBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AtCQCejYRdh6/eVdFlHAEBAQQBAQcEAQGBZ4MFgQUWFII?=
 =?us-ascii?q?GghyBHYJeixqCD5sdCQEDAQwjDAEBhD8CgwcbBwEENBMCDAEBBAEBAQIBAgMEA?=
 =?us-ascii?q?RMBAQEIDQkIKYU0DII6KQGCZgEBAQECARIRBBkBGxYHAQMBCwYDAgsDCioCAiE?=
 =?us-ascii?q?BAREBBQEcBhMIEweDAAGBaQEDDg8PjzGPDIEDPIskfxYFAReCfgWBSEGCNQoZJ?=
 =?us-ascii?q?w1iA4E9AgcSgSKMCYFYP4ERgmQuPoIaRwOEa4JYBJ4ijXstQQeCJWUEhhyJL1W?=
 =?us-ascii?q?EARuCZUOVfJYtggiPEw8jgRwqgXkzGiNQMYI7CUcQFIFODA4Jg0+BPokXQTABj?=
 =?us-ascii?q?ysBAQ?=
X-IronPort-AV: E=Sophos;i="5.64,528,1559512800"; 
   d="scan'208,217";a="402636859"
X-MGA-submission: =?us-ascii?q?MDFsq8dLiOOvadP2DKqvkejzgD/A93IfkeSbBQ?=
 =?us-ascii?q?ADxzJD50gYBviMOh+yFmOOHMEK4k+x+tRh/sN7aCOpBiVVwghn2bNPxb?=
 =?us-ascii?q?mByc0aqymnF6g6YzPB4pct+sniuSENpHXbAa039MtHuYgm/dJbpgx6oi?=
 =?us-ascii?q?Ti0owdDq7bunw9srsEf9Qnrw=3D=3D?=
Received: from mail-qk1-f175.google.com ([209.85.222.175])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 20 Sep 2019 10:33:20 +0200
Received: by mail-qk1-f175.google.com with SMTP id f16so6475051qkl.9
        for <caml-list@inria.fr>; Fri, 20 Sep 2019 01:33:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=nNc5Kva7pO8oXC9cIwR4RrIk5KvQ0gFC54gmsGN4FVE=;
        b=YvwLrD0brV7p1wn5t0K0k5R+Iu1FJulELej8P/JQJ/czfFhkLOWIPDwCnJCX2/beWM
         AbIjeoKR0m/xE2JYcIGszS+8r0jblexbDV9GmTyPr86plTN5I2BLSESuugUapoH1H6X4
         s5R2xJnR8B43egoOUnBzqVCCk7PwbW9796EHvIgoXNS6iAIVn/XcvboOW9hH2wBBaceY
         p6sto5Oac8xhRyfPIrRjD349Xi8EbaRfz+M1eWRO8ONYxxk4r3T4pUhvKrpxamSRN4AD
         XQ+PSybbUSYZDKSN5bVink0FZgaZJkuZ0k8IDRxobrpeQwqszq4GQM1fuNTr81qnO1BG
         4d4g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=nNc5Kva7pO8oXC9cIwR4RrIk5KvQ0gFC54gmsGN4FVE=;
        b=rzJs7bqwSbKaLcX7wQJUbIRHTqZ4OJg4Gvqrxo5gf9H1qpwFOR3JSyv1JAjQnOEuB6
         14RFS7WlwjLhj6CZciY1l94dCs8rgyngrAWGZI5hygZfX0X52RbqNaKmThByvEwJ/CFJ
         pJwHbEZob5CRc8+qo58J3wKbMyERe10jRcUrQ8FhKvPBlmnBzYswZ05Y8gNI11SPCVzt
         y8ML2MdhIvdtEFwRnjjfs+5JDB92Ywh0N2WBLz+D9hK47E0ISVvqqKv8RkwxpLbPHgdX
         qb8rzyKHs9tgASDUQJocquKDLfjhNCvr/ICYkOb6Wgs2MMVqScL3nYP9dYDAXnPwTkjr
         k30w==
X-Gm-Message-State: APjAAAX/3L8RjzZ7YIWWB/ZfX+y+VTzwyD4G8yIhjqjIzUHnui8Zr9Uc
	PKDbRNDo7F0wYJ5LtLAX2ZUefv/+khj85SdoG6rEOLvTIiY=
X-Google-Smtp-Source: APXvYqzOmM0hEJWh6WLyO8x2D+vw134aOLHu3ng5Lun4ufMfkrpBjLjpgbV8PK6FJ9BULUu+J+DTpFgywlyn0mVRiHs=
X-Received: by 2002:a05:620a:40f:: with SMTP id 15mr2510396qkp.274.1568968399081;
 Fri, 20 Sep 2019 01:33:19 -0700 (PDT)
MIME-Version: 1.0
References: <86o8zfpra2.fsf@gmail.com> <CAPFanBG==YLwYYau1hFw875TR=4NSS6Yc0nSvVve-L0zMLPjpg@mail.gmail.com>
 <86v9tnfkum.fsf@gmail.com>
In-Reply-To: <86v9tnfkum.fsf@gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 20 Sep 2019 10:35:06 +0200
Message-ID: <CAPFanBFAr5LOEXTdRJtrX6FUQ2_LVjbVgZqiZHLMyE6KkUPL8A@mail.gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="00000000000017576b0592f7ecea"
Subject: Re: [Caml-list] How is this type inferred (GADTs)

--00000000000017576b0592f7ecea
Content-Type: text/plain; charset="UTF-8"

There is a direct relation between how type evolve during GADT typing and
how queries evolve during logic/relational programming. It can help to
think of a GADT declaration as the set of rules of a Prolog program. (I you
have never looked at Prolog, here is an occasion to learn something new).
That does *not* mean that GADTs let you do prolog-style programming in
types (the compiler will not automatically search for a proof, the user has
to write it down explicitly as a GADT term, so this work is not done
implicitly, as with type-class search for example), but it does give a way
to think about GADT declarations.

Your declaration (notice that I renamed the Z variable, for a good reason
that will appear clear below):

  type (_, _) t =
    | Z : ('f, 'f) t
    | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t

becomes

  t F F.
  t F R :- t F (A -> R), (unit -> A).

In any case, your declaration has the following effect:
- by the Z rule, all types of the form
  ('a1 -> 'a2 -> ... -> 'an -> 'r, 'a -> 'a2 -> ... -> 'an -> 'r) t
  are inhabited
- by the S rule, you can "hide" an element on the right
  (and you have to provide a thunk for it)
, moving from
  ('a1 -> ... -> 'an -> r, 'ak -> 'a{k+1} -> .. -> 'an -> r) t
  to
  ('a1 -> ... -> 'an -> r, 'a{k+1} -> .. -> 'an -> r) t

If you do this repeatedly you end up on what you want: ('a1 -> .. -> 'an ->
r, r) t.

The way you write about it, it sounds like you had the following
*different* definition in mind

type (_, _) t =
| Z : ('r, 'r) t
| S : ('f, 'r) t * (unit -> 'a) -> ('a -> 'f, 'r) t

let test = S (S (Z, (fun () -> 3l)), (fun () -> "foo"))

corresponding to the following Prolog program that I do find easier to
think about:

  t R R.
  t (A -> F) R :- t F R, (unit -> A).

It turns out that with this other definition, the first implementation that
you had written actually type-check fines.

(You could try to write conversion functions between those two definitions
to convince yourself that they are morally equivalent, but this is actually
a difficult exercise.)

On Fri, Sep 20, 2019 at 10:11 AM Malcolm Matalka <mmatalka@gmail.com> wrote:

>
> Gabriel Scherer <gabriel.scherer@gmail.com> writes:
>
> > Note: the reason why you get _weak type variables (which are not
> > polymorphic, just not-inferred-yet)  is that the type-checker cannot
> detect
> > that (z // (fun () -> ...)) is a value: it would have to unfold the call
> to
> > (//) for this, which it doesn't do in general, and here certainly could
> not
> > do given that its definition is hidden behind an abstraction boundary.
> > I would recommend experimenting *without* the module interface and the
> > auxiliary function, with the constructors directly, you would get
> slightly
> > better types.
> >
> > # S(S(Z, (fun () -> Int32.zero)), (fun () -> ""));;
> > - : (int32 -> string -> 'a, 'a) t = S (S (Z, <fun>), <fun>)
> >
> > Historically we have used module interfaces to implement "phantom types"
> --
> > because the type information there is only present in the interface, not
> in
> > the definition. With GADTs, the type constraints are built into the
> > definition itself, which is precisely what makes them more powerful; no
> > need for an abstract interface on top.
> >
> > The first part of your question is about understanding how the
> > type-inference work (how variables are manipulated by the type-checker
> and
> > then "propagated back up"). This sounds like a difficult way to
> understand
> > GADTs: you want to learn the typing rules *and* the type-inference
> > algorithm at once. But only the first part is necessary to use the
> feature
> > productively (with a few tips on when to use annotations, which are easy
> to
> > explain and in fact explained in the manual:
> > http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html ). So instead
> of
> > asking: "how did the compiler get this type?", I would ask: "why is this
> > the right type"? I think you could convince yourself that (1) it is a
> > correct type and (2) any other valid type would be a specialization of
> this
> > type, there is no simpler solution.
> >
> > The second part: you wrote:
> >
> >   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
> >     | Z ->
> >       f
> >     | S (t, v) ->
> >       bind (f (v ())) t
> >
> > Let's focus on the second clause:
> >
> >     | S (t, v) ->
> >       bind (f (v ())) t
> >
> > we know that (f : f) holds, and that the pattern-matching is on a value
> of
> > type (f, r) t, and we must return r.
> > When pattern-matching on S (t, v), we learn extra type information from
> the
> > typing rule of S:
> >
> >     | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t
> >
> > if r has type (f, r) t, then (t, v) has type ((f, a -> r) t * (unit ->
> a))
> > for *some* unknown/existential type a. So within the branch we have
> >
> >   bind : type f r. f -> (f, r) t -> r
> >   f : (f, a -> r) t
> >   v : unit -> a
> >   expected return type: r
> >
> > f does *not* have a function type here, so your idea of applying (f (v
> ()))
> > cannot work (v does have a function type, so (v ()) is valid).
> >
> > The only thing you can do on f is call (bind) recursively (with what
> > arguments?), and then you will get an (a -> r) as result.
> >
> > Do you see how to write a correct program from there?
>
> Ah-ha!  I was close but my thinking was at the "wrong level" (I'm not
> sure how to put it).  The working implementation of bind is:
>
>   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
>     | Z ->
>       f
>     | S (t, v) ->
>       let f' = bind f t in
>       f' (v ())
>
> And now I see why you wanted me to look at it not through the module
> interface.  Looking at how the recursion would work, of course the
> most-nested S will have the function corresponding to the first
> parameter of the function.  I was thinking that I would consume the
> parameters on the way down, but it's actually on the way up.
>
> I am still working out in my head the answer to "why is this the right
> type", I think it has to slosh around in there a bit before it truly
> makes sense to me.
>
> Thank you!
>
> >
> >
> >
> > On Fri, Sep 20, 2019 at 5:42 AM Malcolm Matalka <mmatalka@gmail.com>
> wrote:
> >
> >> I have been using GADTs to make type-safe versions of APIs that are kind
> >> of like printf.  I've been using this pattern by rote and now I'm
> >> getting to trying to understand how it works.
> >>
> >> I have the following code:
> >>
> >> module F : sig
> >>   type ('f, 'r) t
> >>
> >>   val z : ('r, 'r) t
> >>   val (//) : ('f, 'a -> 'r) t -> (unit -> 'a) -> ('f, 'r) t
> >> end = struct
> >>   type ('f, 'r) t =
> >>     | Z : ('r, 'r) t
> >>     | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t
> >>
> >>   let z = Z
> >>   let (//) t f = S (t, f)
> >> end
> >>
> >> And the following usage:
> >>
> >> utop # F.(z // (fun () -> Int32.zero) // (fun () -> ""));;
> >> - : (int32 -> string -> '_weak1, '_weak1) F.t = <abstr>
> >>
> >> I understand how 'r is '_weak1 (I think), but I'm still trying to figure
> >> out how 'f gets its type by applying (//).  I think I have an
> >> explanation below, and I'm hoping someone can say if it's correct and/or
> >> simplify it.
> >>
> >> Explanation:
> >>
> >> The constructor Z says that 'f and 'r, are the same (Z : ('r, 'r) t).
> >> The constructor S says that the (_, _) t that it takes has some type 'f,
> >> but that the second type variable must be of the form 'a -> 'r, sort of
> >> deconstructing pattern match on the type (if that makes sense).  And if
> >> that (_, _) t is a Z, where we have stated the two type variables have
> >> the same value, that means 'f must also be ('a -> 'r). So for the
> >> first application of (//) it makes sense.  If we apply (//) again, the
> >> first parameter has the type (int32 -> '_weak1, '_weak1) t, but that
> >> must actually mean '_weak1 in this case is string -> '_weak, and then
> >> this is where things become jumbled in my head.  If the passed in (_, _)
> >> t must be (string -> '_weak), and the inner type actually must be (int32
> >> -> '_weak), then, the inner inner type must be ('_weak), the type of 'r
> >> at Z must be (string -> int32 -> '_weak), and since 'r, and 'f are the
> >> same type for Z, 'f must also be (string -> int32 -> '_weak), and that
> >> knowledge propagates back up?  But that doesn't feel quite right to me,
> >> either.
> >>
> >> With the help of reading other code, I've figured out how to make a
> >> function that uses a type like this that works like kprintf, however
> >> where I'm going in this case is that I want to take a function that
> >> matches 'f and apply it to the result of my functions.
> >>
> >> Something like:
> >>
> >>   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
> >>     | Z ->
> >>       f
> >>     | S (t, v) ->
> >>       bind (f (v ())) t
> >>
> >> However, this does not compile given:
> >>
> >> Error: This expression has type f
> >>        This is not a function; it cannot be applied.
> >>
> >> My understanding was if I have Z, and an input that has the type f, then
> >> that is just the return type since at Z, f and r are the same type.  And
> >> than at S, I can peel away the type of f by applying the function f and
> >> then recursively calling.  But my understanding is missing something.
> >>
> >> Does this make sense?
> >>
> >> What am I not understanding?
> >>
> >> Thank you,
> >> /Malcolm
> >>
>
>

--00000000000017576b0592f7ecea
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>There is a direct relation between how type evolve du=
ring GADT typing and how queries evolve during logic/relational programming=
. It can help to think of a GADT declaration as the set of rules of a Prolo=
g program. (I you have never looked at Prolog, here is an occasion to learn=
 something new). That does *not* mean that GADTs let you do prolog-style pr=
ogramming in types (the compiler will not automatically search for a proof,=
 the user has to write it down explicitly as a GADT term, so this work is n=
ot done implicitly, as with type-class search for example), but it does giv=
e a way to think about GADT declarations.</div><div><br></div><div>Your dec=
laration (notice that I renamed the Z variable, for a good reason that will=
 appear clear below):<br></div><div><br></div><div>
=C2=A0 type (_, _) t =3D<br>
=C2=A0 =C2=A0 | Z : (&#39;f, &#39;f) t<br>
=C2=A0 =C2=A0 | S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit -&gt; &#39;a))=
 -&gt; (&#39;f, &#39;r) t</div><div><br></div><div>becomes<br></div><div><b=
r></div><div>=C2=A0 t F F.<br></div><div>=C2=A0 t F R :- t F (A -&gt; R), (=
unit -&gt; A).</div><div><br></div><div>In any case, your declaration has t=
he following effect:</div><div>- by the Z rule, all types of the form</div>=
<div>=C2=A0 (&#39;a1 -&gt; &#39;a2 -&gt; ... -&gt; &#39;an -&gt; &#39;r, &#=
39;a -&gt; &#39;a2 -&gt; ... -&gt; &#39;an -&gt; &#39;r) t <br></div><div>=
=C2=A0 are inhabited<br></div><div>- by the S rule, you can &quot;hide&quot=
; an element on the right</div><div>=C2=A0 (and you have to provide a thunk=
 for it)<br></div><div>, moving from</div><div>=C2=A0 (&#39;a1 -&gt; ... -&=
gt; &#39;an -&gt; r, &#39;ak -&gt; &#39;a{k+1} -&gt; .. -&gt; &#39;an -&gt;=
 r) t<br></div><div>=C2=A0 to</div><div>=C2=A0 (&#39;a1 -&gt; ... -&gt; &#3=
9;an -&gt; r, &#39;a{k+1} -&gt; .. -&gt; &#39;an -&gt; r) t<br><div>=C2=A0 =
<br></div><div>If you do this repeatedly you end up on what you want: (&#39=
;a1 -&gt; .. -&gt; &#39;an -&gt; r, r) t.</div><div><br></div><div>The way =
you write about it, it sounds like you had the following *different* defini=
tion in mind</div><div><br></div><div>type (_, _) t =3D<br>| Z : (&#39;r, &=
#39;r) t<br>| S : (&#39;f, &#39;r) t * (unit -&gt; &#39;a) -&gt; (&#39;a -&=
gt; &#39;f, &#39;r) t<br><br>let test =3D S (S (Z, (fun () -&gt; 3l)), (fun=
 () -&gt; &quot;foo&quot;))</div><div><br></div><div>corresponding to the f=
ollowing Prolog program that I do find easier to think about:<br></div><div=
><br></div><div><div>=C2=A0 t R R.<br></div><div>=C2=A0 t (A -&gt; F) R :- =
t F R, (unit -&gt; A).</div><div><br></div></div><div>It turns out that wit=
h this other definition, the first implementation that you had written actu=
ally type-check fines.</div><div><br></div><div>(You could try to write con=
version functions between those two definitions to convince yourself that t=
hey are morally equivalent, but this is actually a difficult exercise.)<br>=
</div></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"=
gmail_attr">On Fri, Sep 20, 2019 at 10:11 AM Malcolm Matalka &lt;<a href=3D=
"mailto:mmatalka@gmail.com">mmatalka@gmail.com</a>&gt; wrote:<br></div><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left=
:1px solid rgb(204,204,204);padding-left:1ex"><br>
Gabriel Scherer &lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=3D"=
_blank">gabriel.scherer@gmail.com</a>&gt; writes:<br>
<br>
&gt; Note: the reason why you get _weak type variables (which are not<br>
&gt; polymorphic, just not-inferred-yet)=C2=A0 is that the type-checker can=
not detect<br>
&gt; that (z // (fun () -&gt; ...)) is a value: it would have to unfold the=
 call to<br>
&gt; (//) for this, which it doesn&#39;t do in general, and here certainly =
could not<br>
&gt; do given that its definition is hidden behind an abstraction boundary.=
<br>
&gt; I would recommend experimenting *without* the module interface and the=
<br>
&gt; auxiliary function, with the constructors directly, you would get slig=
htly<br>
&gt; better types.<br>
&gt;<br>
&gt; # S(S(Z, (fun () -&gt; Int32.zero)), (fun () -&gt; &quot;&quot;));;<br>
&gt; - : (int32 -&gt; string -&gt; &#39;a, &#39;a) t =3D S (S (Z, &lt;fun&g=
t;), &lt;fun&gt;)<br>
&gt;<br>
&gt; Historically we have used module interfaces to implement &quot;phantom=
 types&quot; --<br>
&gt; because the type information there is only present in the interface, n=
ot in<br>
&gt; the definition. With GADTs, the type constraints are built into the<br>
&gt; definition itself, which is precisely what makes them more powerful; n=
o<br>
&gt; need for an abstract interface on top.<br>
&gt;<br>
&gt; The first part of your question is about understanding how the<br>
&gt; type-inference work (how variables are manipulated by the type-checker=
 and<br>
&gt; then &quot;propagated back up&quot;). This sounds like a difficult way=
 to understand<br>
&gt; GADTs: you want to learn the typing rules *and* the type-inference<br>
&gt; algorithm at once. But only the first part is necessary to use the fea=
ture<br>
&gt; productively (with a few tips on when to use annotations, which are ea=
sy to<br>
&gt; explain and in fact explained in the manual:<br>
&gt; <a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html" =
rel=3D"noreferrer" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-o=
caml/manual033.html</a> ). So instead of<br>
&gt; asking: &quot;how did the compiler get this type?&quot;, I would ask: =
&quot;why is this<br>
&gt; the right type&quot;? I think you could convince yourself that (1) it =
is a<br>
&gt; correct type and (2) any other valid type would be a specialization of=
 this<br>
&gt; type, there is no simpler solution.<br>
&gt;<br>
&gt; The second part: you wrote:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D fun =
f -&gt; function<br>
&gt;=C2=A0 =C2=A0 =C2=A0| Z -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0f<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;<br>
&gt; Let&#39;s focus on the second clause:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;<br>
&gt; we know that (f : f) holds, and that the pattern-matching is on a valu=
e of<br>
&gt; type (f, r) t, and we must return r.<br>
&gt; When pattern-matching on S (t, v), we learn extra type information fro=
m the<br>
&gt; typing rule of S:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit -&gt=
; &#39;a)) -&gt; (&#39;f, &#39;r) t<br>
&gt;<br>
&gt; if r has type (f, r) t, then (t, v) has type ((f, a -&gt; r) t * (unit=
 -&gt; a))<br>
&gt; for *some* unknown/existential type a. So within the branch we have<br>
&gt;<br>
&gt;=C2=A0 =C2=A0bind : type f r. f -&gt; (f, r) t -&gt; r<br>
&gt;=C2=A0 =C2=A0f : (f, a -&gt; r) t<br>
&gt;=C2=A0 =C2=A0v : unit -&gt; a<br>
&gt;=C2=A0 =C2=A0expected return type: r<br>
&gt;<br>
&gt; f does *not* have a function type here, so your idea of applying (f (v=
 ()))<br>
&gt; cannot work (v does have a function type, so (v ()) is valid).<br>
&gt;<br>
&gt; The only thing you can do on f is call (bind) recursively (with what<b=
r>
&gt; arguments?), and then you will get an (a -&gt; r) as result.<br>
&gt;<br>
&gt; Do you see how to write a correct program from there?<br>
<br>
Ah-ha!=C2=A0 I was close but my thinking was at the &quot;wrong level&quot;=
 (I&#39;m not<br>
sure how to put it).=C2=A0 The working implementation of bind is:<br>
<br>
=C2=A0 let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D fun f -&gt; fu=
nction<br>
=C2=A0 =C2=A0 | Z -&gt;<br>
=C2=A0 =C2=A0 =C2=A0 f<br>
=C2=A0 =C2=A0 | S (t, v) -&gt;<br>
=C2=A0 =C2=A0 =C2=A0 let f&#39; =3D bind f t in<br>
=C2=A0 =C2=A0 =C2=A0 f&#39; (v ())<br>
<br>
And now I see why you wanted me to look at it not through the module<br>
interface.=C2=A0 Looking at how the recursion would work, of course the<br>
most-nested S will have the function corresponding to the first<br>
parameter of the function.=C2=A0 I was thinking that I would consume the<br>
parameters on the way down, but it&#39;s actually on the way up.<br>
<br>
I am still working out in my head the answer to &quot;why is this the right=
<br>
type&quot;, I think it has to slosh around in there a bit before it truly<b=
r>
makes sense to me.<br>
<br>
Thank you!<br>
<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; On Fri, Sep 20, 2019 at 5:42 AM Malcolm Matalka &lt;<a href=3D"mailto:=
mmatalka@gmail.com" target=3D"_blank">mmatalka@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; I have been using GADTs to make type-safe versions of APIs that ar=
e kind<br>
&gt;&gt; of like printf.=C2=A0 I&#39;ve been using this pattern by rote and=
 now I&#39;m<br>
&gt;&gt; getting to trying to understand how it works.<br>
&gt;&gt;<br>
&gt;&gt; I have the following code:<br>
&gt;&gt;<br>
&gt;&gt; module F : sig<br>
&gt;&gt;=C2=A0 =C2=A0type (&#39;f, &#39;r) t<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0val z : (&#39;r, &#39;r) t<br>
&gt;&gt;=C2=A0 =C2=A0val (//) : (&#39;f, &#39;a -&gt; &#39;r) t -&gt; (unit=
 -&gt; &#39;a) -&gt; (&#39;f, &#39;r) t<br>
&gt;&gt; end =3D struct<br>
&gt;&gt;=C2=A0 =C2=A0type (&#39;f, &#39;r) t =3D<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| Z : (&#39;r, &#39;r) t<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit =
-&gt; &#39;a)) -&gt; (&#39;f, &#39;r) t<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0let z =3D Z<br>
&gt;&gt;=C2=A0 =C2=A0let (//) t f =3D S (t, f)<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; And the following usage:<br>
&gt;&gt;<br>
&gt;&gt; utop # F.(z // (fun () -&gt; Int32.zero) // (fun () -&gt; &quot;&q=
uot;));;<br>
&gt;&gt; - : (int32 -&gt; string -&gt; &#39;_weak1, &#39;_weak1) F.t =3D &l=
t;abstr&gt;<br>
&gt;&gt;<br>
&gt;&gt; I understand how &#39;r is &#39;_weak1 (I think), but I&#39;m stil=
l trying to figure<br>
&gt;&gt; out how &#39;f gets its type by applying (//).=C2=A0 I think I hav=
e an<br>
&gt;&gt; explanation below, and I&#39;m hoping someone can say if it&#39;s =
correct and/or<br>
&gt;&gt; simplify it.<br>
&gt;&gt;<br>
&gt;&gt; Explanation:<br>
&gt;&gt;<br>
&gt;&gt; The constructor Z says that &#39;f and &#39;r, are the same (Z : (=
&#39;r, &#39;r) t).<br>
&gt;&gt; The constructor S says that the (_, _) t that it takes has some ty=
pe &#39;f,<br>
&gt;&gt; but that the second type variable must be of the form &#39;a -&gt;=
 &#39;r, sort of<br>
&gt;&gt; deconstructing pattern match on the type (if that makes sense).=C2=
=A0 And if<br>
&gt;&gt; that (_, _) t is a Z, where we have stated the two type variables =
have<br>
&gt;&gt; the same value, that means &#39;f must also be (&#39;a -&gt; &#39;=
r). So for the<br>
&gt;&gt; first application of (//) it makes sense.=C2=A0 If we apply (//) a=
gain, the<br>
&gt;&gt; first parameter has the type (int32 -&gt; &#39;_weak1, &#39;_weak1=
) t, but that<br>
&gt;&gt; must actually mean &#39;_weak1 in this case is string -&gt; &#39;_=
weak, and then<br>
&gt;&gt; this is where things become jumbled in my head.=C2=A0 If the passe=
d in (_, _)<br>
&gt;&gt; t must be (string -&gt; &#39;_weak), and the inner type actually m=
ust be (int32<br>
&gt;&gt; -&gt; &#39;_weak), then, the inner inner type must be (&#39;_weak)=
, the type of &#39;r<br>
&gt;&gt; at Z must be (string -&gt; int32 -&gt; &#39;_weak), and since &#39=
;r, and &#39;f are the<br>
&gt;&gt; same type for Z, &#39;f must also be (string -&gt; int32 -&gt; &#3=
9;_weak), and that<br>
&gt;&gt; knowledge propagates back up?=C2=A0 But that doesn&#39;t feel quit=
e right to me,<br>
&gt;&gt; either.<br>
&gt;&gt;<br>
&gt;&gt; With the help of reading other code, I&#39;ve figured out how to m=
ake a<br>
&gt;&gt; function that uses a type like this that works like kprintf, howev=
er<br>
&gt;&gt; where I&#39;m going in this case is that I want to take a function=
 that<br>
&gt;&gt; matches &#39;f and apply it to the result of my functions.<br>
&gt;&gt;<br>
&gt;&gt; Something like:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D =
fun f -&gt; function<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| Z -&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0f<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;&gt;<br>
&gt;&gt; However, this does not compile given:<br>
&gt;&gt;<br>
&gt;&gt; Error: This expression has type f<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 This is not a function; it cannot be ap=
plied.<br>
&gt;&gt;<br>
&gt;&gt; My understanding was if I have Z, and an input that has the type f=
, then<br>
&gt;&gt; that is just the return type since at Z, f and r are the same type=
.=C2=A0 And<br>
&gt;&gt; than at S, I can peel away the type of f by applying the function =
f and<br>
&gt;&gt; then recursively calling.=C2=A0 But my understanding is missing so=
mething.<br>
&gt;&gt;<br>
&gt;&gt; Does this make sense?<br>
&gt;&gt;<br>
&gt;&gt; What am I not understanding?<br>
&gt;&gt;<br>
&gt;&gt; Thank you,<br>
&gt;&gt; /Malcolm<br>
&gt;&gt;<br>
<br>
</blockquote></div>

--00000000000017576b0592f7ecea--
