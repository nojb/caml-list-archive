Return-Path: <ivg@ieee.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 021287EF0B
	for <caml-list@sympa.inria.fr>; Wed,  4 Sep 2019 22:40:02 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=ivg@ieee.org; spf=Pass smtp.mailfrom=ivg@ieee.org; spf=None smtp.helo=postmaster@mail-lj1-f180.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  ivg@ieee.org) identity=pra; client-ip=209.85.208.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  ivg@ieee.org designates 209.85.208.180 as permitted sender)
  identity=mailfrom; client-ip=209.85.208.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lj1-f180.google.com) identity=helo;
  client-ip=209.85.208.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org";
  x-sender="postmaster@mail-lj1-f180.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AYKBgkBKXzY+/SKgFsNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgeIvjxwZ3uMQTl6Ol3ixeRBMOHsqgC0rWL+Pm8BiQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTagf79+Ngi6oAfRu8UZnIdvJaQ8wQbVr3VVfO?=
 =?us-ascii?q?hb2XlmLk+JkRbm4cew8p9j8yBOtP8k6sVNT6b0cbkmQLJBFDgpPHw768PttRnY?=
 =?us-ascii?q?UAuA/WAcXXkMkhpJGAfK8hf3VYrsvyTgt+p93C6aPdDqTb0xRD+v4btnRAPuhS?=
 =?us-ascii?q?waMDE37XzXitdojK1FvB2huxJxw4nRYI6PNfp+eL7WcdcVSGdFW8pcUTFKDIGh?=
 =?us-ascii?q?YIsVF+cOMuhYoIv9qVUArhWwGBeiC//0xzBSmnP7x7c33/g9HQzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocUv61w7POzT7ebv1W3iv96I/Wch89ofGMXK5wcdHMwkQoFgPFkFqQ?=
 =?us-ascii?q?pJfkPzyLyOsCrXKX7+16VeKgkmMqrRx6rDaoxscpkIbJh4QVx0jY+ipjxoY1It?=
 =?us-ascii?q?u4SE9nbtG+FJtcrSSaN49uTsItWW1ouTs1xqUJuZ66YCgKyIknyAXFZ/yGdIiE?=
 =?us-ascii?q?+h3jVOeNITd4mXJqY6iziAq18Uil0uH8Ucq00FNLripHiNXMsWoN1xPL5smHUP?=
 =?us-ascii?q?d9/1qu1DCS3A7Q8uFJOV44mbbfJpI7wbM9loAfvVrfEiL1gkn6kaybelki9+O1?=
 =?us-ascii?q?8eroeK/mqYWZN4JsigHxLKAumsunDOQ9KAcOXmyb9f241L3h4EH1WbtKguA1n6?=
 =?us-ascii?q?XFqpzaKsMbpqm2Aw9RzIkv8QqwDzCj0NgAnHkHKkxKeA6fgoT3J13DJOr0APS/?=
 =?us-ascii?q?jli2jjtn2/PLMqf8DpjOMnTPiLLhcqx8605Yxgoz19df55dMB7EAPvLzVVT8tN?=
 =?us-ascii?q?3GARAnLQO42eHnCM9y1o8GQ2KAHreZML/OsV+P/u8gP/ODZIoRuDrkL/gl5uXu?=
 =?us-ascii?q?jWMilF8Gfaip2IMXZ2qiEvRnJUWZe3vsjc0bHWcEpAptBNDt3XqGXDEbM3G2Uq?=
 =?us-ascii?q?0U4TI+CYDgCp3MEMTli7WE2GK/H4ZKLjRNA1WIVHPpbJmsWvEWaSvULNU3wRIe?=
 =?us-ascii?q?Ur30apEo01mBsxP91bFnL/bPsnkZq53L1dV46qvUjx5kpm88NNiUz2zYFzI8pW?=
 =?us-ascii?q?gPXTJjgPEm/B5Nj2yb2K09uMR2UNxe4/QTDFU/PJ/Yiuh4UpX8A1KZONiOT1mi?=
 =?us-ascii?q?T5OtBjRjFottke9LWF50HpCZtj6GxzCjWudHlrGGCdoz6K2OhyGgdfY48G7P0e?=
 =?us-ascii?q?wat3djR8JOMWO8gasmr1rSCoPE1UKDmPTzeA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CyAgBrIHBdhrTQVdFdCYQHgReBBSqEI?=
 =?us-ascii?q?YEdj36DCoZlkE8FUgkBAwEMJQoBAYQ/AoIyGwcBBDQTAgsBAQQBAQECAQMDBAE?=
 =?us-ascii?q?TAQEBCAsLCCmFNQyCOgyDBQEBAQIBEggJBBkBATIGDwkCCzcCAiISAQUBHAYBE?=
 =?us-ascii?q?ggTB4MAAYF2BQ8PkTWPDIEDPIoxc38zgnwBAQWGAoFACRKBIotpDxiBQD9mgwg?=
 =?us-ascii?q?1PoJIDgsCAYEsCg5Jgl6CWIxBIYgRlkdugimGdoUKhBGEUBuCY0CVSI13hiWBV?=
 =?us-ascii?q?IVSix0PIYFGZYEUfQg7MQaCNQmCRAEOCYEEAQGCSYJKGoE8dIVbJzCPYQEB?=
X-IPAS-Result: =?us-ascii?q?A0CyAgBrIHBdhrTQVdFdCYQHgReBBSqEIYEdj36DCoZlkE8?=
 =?us-ascii?q?FUgkBAwEMJQoBAYQ/AoIyGwcBBDQTAgsBAQQBAQECAQMDBAETAQEBCAsLCCmFN?=
 =?us-ascii?q?QyCOgyDBQEBAQIBEggJBBkBATIGDwkCCzcCAiISAQUBHAYBEggTB4MAAYF2BQ8?=
 =?us-ascii?q?PkTWPDIEDPIoxc38zgnwBAQWGAoFACRKBIotpDxiBQD9mgwg1PoJIDgsCAYEsC?=
 =?us-ascii?q?g5Jgl6CWIxBIYgRlkdugimGdoUKhBGEUBuCY0CVSI13hiWBVIVSix0PIYFGZYE?=
 =?us-ascii?q?UfQg7MQaCNQmCRAEOCYEEAQGCSYJKGoE8dIVbJzCPYQEB?=
X-IronPort-AV: E=Sophos;i="5.64,468,1559512800"; 
   d="scan'208,217";a="400298467"
X-MGA-submission: =?us-ascii?q?MDGJ5+I1mraEp++0KF0N0GR5SJR/a4Tr1wtg7Z?=
 =?us-ascii?q?VUxTpw+jgWJeqoflEln8LrRJlNzjycFxjQVK8tNs3jnPPGgHc+2dh93u?=
 =?us-ascii?q?AvqFTRfdkQr+xTmy8oDJHuve7aVirjer0a+bQh7rdsYWQhBOAhMtoFOe?=
 =?us-ascii?q?HgGySdUPAk0g4btVJvtyTQKg=3D=3D?=
Received: from mail-lj1-f180.google.com ([209.85.208.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 04 Sep 2019 22:40:00 +0200
Received: by mail-lj1-f180.google.com with SMTP id a22so120869ljd.0
        for <caml-list@inria.fr>; Wed, 04 Sep 2019 13:40:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ieee.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=mQ8TuaxIeRMmWIa+TDSG4W8mAdCY1TPsG8G8F46wY5c=;
        b=TL918/UuVt9TIUlFJP4KhvabNsTSvX0KnAdZKtfCFI++rBL+ucta/bt5+Lgmkm/0Di
         ACvmlJFavd+FcqyRVbOx0LIMFDGY86QnzbfoBjUtn2a3gEi9+bHZ6xQjl69dYKmRqZYv
         jr2UkPHe98gT7d9IIzvmdorMJ4mClqje+bQM8=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to;
        bh=mQ8TuaxIeRMmWIa+TDSG4W8mAdCY1TPsG8G8F46wY5c=;
        b=uHzl617FzYet8orhg9Z21i69RZkYN6E3XDa2uMNzSpFYUIOkVzbbNqSRJO3QQvsCgv
         X4QdoxTionOMuEFb4n9FjOIZ3HWquaVep0e9cZbf2ORjivSQjJ4FCVqclvqzpo3s7QbG
         NUovj8eorlaSOMloApJAwVwquPHNWDz8JsjykWz7i1kdhVo9FBk49AXuPJ6h2WLNZTX2
         b+owKUTHXLeL5W3lK6OVPcnvvi6DKaFlSkm9ylzyIcYGqZqIifoTWTSrBJQEbDhsa2lK
         XkdwUYoAcxHOpXOrApocURDoqK3eYQ5BGUvcLcn0ZxtQhf3URVz4CrgMB3nP/evFNIe1
         J4CA==
X-Gm-Message-State: APjAAAXUrAwzn50II5tWxbdU8YT0LPcfFyH7Hsx7SHdgtkSNPzogZ9Bh
	f+Rsjo3ymRTJ7b0Ehqs0ZnFICnhNijd21nhBNNPbTB72Vx4=
X-Google-Smtp-Source: APXvYqxY/0pEaBHdBPMQvQBe8lGwcXYeVxCJrWUAkevDUt61RxykUI4ETCYpvgRmwsFHudyYQ8yHez1YGSHIa3lQTGc=
X-Received: by 2002:a05:651c:93:: with SMTP id 19mr3002368ljq.0.1567629598991;
 Wed, 04 Sep 2019 13:39:58 -0700 (PDT)
MIME-Version: 1.0
References: <20190904152517.GA2014@Melchior.localnet>
In-Reply-To: <20190904152517.GA2014@Melchior.localnet>
From: Ivan Gotovchits <ivg@ieee.org>
Date: Wed, 4 Sep 2019 16:41:57 -0400
Message-ID: <CALdWJ+wpwafYOddNYhTFY5Zz02k4GcWLBmZLGkekuJSMjrdd6Q@mail.gmail.com>
To: Oleg <oleg@okmij.org>, caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="00000000000063454f0591c035a5"
Subject: Re: [Caml-list] Implicits for the masses

--00000000000063454f0591c035a5
Content-Type: text/plain; charset="UTF-8"

Very interesting and thought-provoking writeup, thank you!

Incidentally, we're investigating the same venues, in our CMU BAP project,
as we found out that we need the extensibility in the style of type
classes/canonical structures to decouple complex dependencies which arise
in the program analysis domain.
In fact, we build our new BAP 2.0 framework largely on your
[tagless-final][1] style which, let's admit it, works much better with type
classes. Therefore we ended up implementing extensible type representations
along with registries for our type classes. Unfortunately, the idea of
storing rules in the registry didn't visit us, but we're now thinking about
how to incorporate it (the classes that we have are very nontrivial,
usually having hundreds of methods, so we're currently using functors to
manually derive on class from another, and registering the resulting
structures - but using your approach we can register functors as well and
automate the derivation). We also didn't generalize the type class
instantiation, so our solutions do have some boilerplate (but I have to
admit, that the total number of type classes that we need is not very big,
so it really never bothered us). What could be surprising is that the
universe of types actually grew quite large, that large that the linear
search in the registry is not an option for us anymore. In fact, we have so
many comparisons between treps, that instead of extracting the extension
constructor number from an extensible variant we had to rely on our own
freshly generated identifier. But I'm running in front of myself, an
important lesson that we have learned is that treps should not only be
equality comparable but also ordered (and even hashable) so that we can
implement our registries as hash tables. It is also better to keep them
abstract so that we can later extend them without breaking user code (to
implement introspection as well as different resolution schemes). This is
basically an elaboration of your approach (which is also could be commonly
found in Janestreet's Core (Type_equal.Uid.t) and other implementations of
existentials). In our case, we ended up with the following implementation
```
    type 'a witness = ..

    module type Witness = sig
      type t
      type _ witness += Id : t witness
    end

    type 'a typeid = (module Witness with type t = 'a)

    type 'a key = {
      ord : int;
      key : 'a typeid;
      name : string; (* for introspection *)
      show : 'a -> Sexp.t; (* also for introspection *)
    }
```
Now, we can use the `ord` field to order types, compare them, store in
maps, hash tables, and even arrays. E.g., this is how our `teq` function
looks like,
```
    let same (type a b) x y : (a,b) Type_equal.t =
      if x.id =  y.id then
        let module X = (val x.key : Witness with type t = a) in
        let module Y = (val y.key : Witness with type t = b) in
        match X.Id with
        | Y.Id -> Type_equal.T
        | _ -> failwith "broken type equality"
      else failwith "types are not equal"
```

It is often used in the context where we already know that `x.id = y.id`,
e.g., when we already found an entry, so we just need to obtain the
equality witness (we use Janestreet's Type_equal.T, which is the same as
yours eq type).

Concerning the representation of the registry, we also experimented with
different approaches (since we have a few ways to make a type existential
in OCaml), and found out the following to be the most efficient and easy to
work with,

```
type ordered = {
    order : 'a. 'a key -> 'a -> 'a -> int;
  } [@@unboxed]
```

Notice, that thanks to `[@@unboxed]` we got a free unpacked existential. We
will next store `ordered` in our registry, which is a hash table,

```
let ordered : ordered Hashtbl.M(Int).t = Hashtbl.create (module Int)
```
and register it as simple as,
```
  let register: type p. p Key.t -> (p -> p -> int) -> unit = fun key order
->
    Hashtbl.add_exn vtables ~key:(uid key) ~data:{
      order = fun (type a) (k : a key) (x : a) (y : a) ->
        let T = same k key in (* obtain the witness that we found the right
structure *)
        order x y
     }
```

Instead of a hashtable, it is also possible to use `ordered array ref`
(since our `ord` is just an integer which we increment every time a new
class is declared). This will give us even faster lookup.

I hope that this was interesting. And if yes, I'm ready to elaborate more
on our design decision or to hear suggestions and critics. Here are a few
links:

- https://github.com/BinaryAnalysisPlatform/bap - the BAP project per se.
- https://binaryanalysisplatform.github.io/knowledge-intro-1  - a small
introductionary post about BAP 2.0 Knowledge representation
-
https://github.com/BinaryAnalysisPlatform/bap/blob/master/lib/knowledge/bap_knowledge.ml
- the implementation of the knowledge system
-
https://github.com/BinaryAnalysisPlatform/bap/tree/master/lib/bap_core_theory
- The Core Theory, an exemplar type class of the theory that we're
developing :)

Cheers,
Ivan Gotovchits
Research Scientist, CMU Cylab

[1]: http://okmij.org/ftp/tagless-final/index.html

On Wed, Sep 4, 2019 at 11:23 AM Oleg <oleg@okmij.org> wrote:

>
> This is to announce a simple, plain OCaml library to experiment with
> type-class/implicits resolution, which can be thought of as evaluating
> a Prolog-like program. One may allow `overlapping instances' -- or
> prohibit them, insisting on uniqueness. One may make the search fully
> deterministic, fully non-deterministic, or something in-between.
> There is an immediate, albeit modest practical benefit: the facility
> like "#install_printer", which was restricted to top-level, is now
> available for all -- as a small, self-contained, plain OCaml library
> with no knowledge or dependencies on the compiler internals. We show
> an example at the end of the message.
>
> This message has been inspired by the remarkable paper
>         Canonical Structures for the working Coq user
>         Assia Mahboubi, Enrico Tassi
>         DOI: 10.1007/978-3-642-39634-2_5
> Its introduction is particularly insightful: the power of
> (mathematical) notation is in eliding distracting details. Yet to
> formally check a proof, or to run a program, the omitted has to be
> found. When pressed to fill in details, people `skillful in the art'
> look in the database of the `state of the art', with the context as
> the key. Computers can be programmed similarly; types well represent
> the needed context to guide the search.
>
> Mahboubi and Tassi's paper explains very well how this eliding and
> filling-in is realized, as a programmable unification, and used in
> Coq. Yet their insights go beyond Coq and deserve to be known better.
> This message and the accompanying code is to explain them in
> plain OCaml and encourage experimentation. It could have been titled
> `Canonical Structures for the working OCaml (meta) programmer'.
>
> The rudiment of canonical structures is already present in OCaml, in
> the form of the registry of printers for user-defined types. This
> facility is available only at the top-level, however, and deeply
> intertwined with it. As a modest practical benefit, this facility is
> now available for all programs, as a plain, small, self-contained
> library, with no compiler or other magic. The full potential of the
> method is realized however in (multi-) staged programming. In fact, I'm
> planning to use it in the upcoming version of MetaOCaml to implement
> `lifting' from a value to the code that produces it -- letting the
> users register lifting functions for their own data types.
>
>
> http://okmij.org/ftp/ML/canonical.ml
>         The implementation and the examples, some of which are noted below.
> http://okmij.org/ftp/ML/trep.ml
>         A generic library of type representations: something like
>         Typeable in Haskell. Some day it may be built-in into the compiler
> http://okmij.org/ftp/ML/canonical_leadup.ml
>         A well-commented code that records the progressive development of
>         canonical.ml. It is not part of the library, but may serve as
>         its explanation.
>
> Here are a few examples, starting with the most trivial one
>    module Show = MakeResolve(struct type 'a dict = 'a -> string end)
>    let () = Show.register Int string_of_int    (* Define `instances' *)
>    let () = Show.register Bool string_of_bool
>    Show.find Int 1;;
>
> However contrived and flawed, it is instructive. Here (Int : int trep)
> is the value representing the type int. The type checker can certainly
> figure out that 1 is of the type int, and could potentially save us
> trouble writing Int explicitly. What the type checker cannot do by
> itself is to find out which function to use to convert an int to a
> string. After all, there are many of them. Show.register lets us
> register the *canonical* int->string function. Show.find is to search
> the database of such canonical functions: in effect, finding *the*
> evidence that the type int->string is populated. Keeping Curry-Howard
> in mind, Show.find does a _proof search_.
>
> The type of Show.find is 'a trep -> ('a -> string). Compare with
> Haskell's show : Show a => a -> String (or, desuraging => and Show)
> show : ('a -> string) -> ('a -> string).  Haskell's show indeed does
> not actually do anything: it is the identity function. All the hard
> work -- finding out the right dictionary (the string producing
> function) -- is done by the compiler. If one does not like the way the
> compiler goes about it -- tough luck. There is little one may do save
> complaining on reddit. In contrast, the first argument of Show.find is
> trivial: it is a mere reflection of the type int, with no further
> information. Hence Show.find has to do a non-trivial work.  In the
> case of int, this work is the straightforward database search --
> or, if you prefer, running the query ?- dict(int,R) against a logic
> program
>      dict(int,string_of_int).
>      dict(bool,string_of_bool).
> The program becomes more interesting when it comes to pairs:
>      dict(T,R) :- T = pair(X,Y), !,
>          dict(X,DX), dict(Y,DY), R=make_pair_dict(DX,DY).
> Here is how it is expressed in OCaml:
> let () =
>   let open Show in
>   let pat : type b. b trep -> b rule_body option = function
>     | Pair (x,y) ->
>         Some (Arg (x, fun dx -> Arg (y, fun dy ->
>           Fact (fun (x,y) -> "(" ^ dx x ^ "," ^ dy y ^ ")"))))
>     | _      -> None
>   in register_rule {pat}
>
> let () = Show.register (Pair(Bool,Bool))
>            (fun (x,y) -> string_of_bool x ^ string_of_bool y)
>
> Our library permits `overlapping instances'. We hence registered the
> printer for generic pairs, and a particular printer just for pairs of
> booleans.
>
> The library is extensible with user-defined data types, for example:
>    type my_fancy_datatype = Fancy of int * string * (int -> string)
>
> After registering the type with trep library, and the printer
>    type _ trep += MyFancy : my_fancy_datatype trep
>    let () = Show.register MyFancy (function Fancy(x,y,_) ->
>      string_of_int x ^ "/" ^ y ^ "/" ^ "<fun>")
>
> one can print rather complex data with fancy, with no further ado:
>    Show.find (List(List(Pair(MyFancy,Int)))) [[(Fancy ...,5)];[]]
>
> As Mahboubi and Tassi would say, proof synthesis at work!
>
> We should stress that what we have described is not a type-class
> facility for OCaml. It is *meta* type-class facility.  Show.find has
> many drawbacks: we have to explicitly pass the trep argument like
> Int. The resolution happens at run time, and hence the failure of the
> resolution is a run-time exception. But the canonical instance
> resolution was intended to be a part of a type checker. There, the
> resolution failure is a type checking error. The trep argument,
> representing the type in the object program, is also at
> hand. Likewise, the drawbacks of Show.find disappear when we use the
> library in a meta-program (code generator). The library then becomes a
> type-class/implicits facility, for the generated code -- the facility,
> we can easily (re)program.
>

--00000000000063454f0591c035a5
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Very interesting and thought-provoking writeup, thank=
 you!=C2=A0<br></div><div><br></div><div>Incidentally, we&#39;re investigat=
ing the same venues, in our CMU BAP project, as we found out that we need t=
he extensibility in the style of type classes/canonical structures to decou=
ple complex dependencies which arise in the program analysis domain.=C2=A0<=
/div><div>In fact, we build our new BAP 2.0 framework largely on your [tagl=
ess-final][1] style which, let&#39;s admit it, works much better with type =
classes. Therefore we ended up implementing extensible type representations=
 along with registries for our type classes. Unfortunately, the idea of sto=
ring rules in the registry didn&#39;t visit us, but we&#39;re now thinking =
about how to incorporate it (the classes that we have are very nontrivial, =
usually having hundreds of methods, so we&#39;re currently using functors t=
o manually derive on class from another, and registering the resulting stru=
ctures - but using your approach we can register functors as well and autom=
ate the derivation). We also didn&#39;t generalize the type class instantia=
tion, so our solutions do have some boilerplate (but I have to admit, that =
the total number of type classes that we need is not very big, so it really=
 never bothered us). What could be surprising is that the universe of types=
 actually grew quite large, that large that the linear search in the regist=
ry is not an option for us anymore. In fact, we have so many comparisons be=
tween treps, that instead of extracting the extension constructor number fr=
om an extensible variant we had to rely on our own freshly generated identi=
fier. But I&#39;m running in front of myself, an important lesson that we h=
ave learned is that treps should not only be equality comparable but also o=
rdered (and even hashable) so that we can implement our registries as hash =
tables. It is also better to keep them abstract so that we can later extend=
 them without breaking user code (to implement introspection as well as dif=
ferent resolution schemes). This is basically an elaboration of your approa=
ch (which is also could be commonly found in Janestreet&#39;s Core (Type_eq=
ual.Uid.t) and other implementations of existentials). In our case, we ende=
d up with the following implementation</div><div>```</div><div>=C2=A0 =C2=
=A0 type &#39;a witness =3D ..<br></div><div><br></div><div>=C2=A0 =C2=A0 m=
odule type Witness =3D sig<br></div><div>=C2=A0 =C2=A0 =C2=A0 type t<br>=C2=
=A0 =C2=A0 =C2=A0 type _ witness +=3D Id : t witness<br>=C2=A0 =C2=A0 end<b=
r><br>=C2=A0 =C2=A0 type &#39;a typeid =3D (module Witness with type t =3D =
&#39;a)<br><br>=C2=A0 =C2=A0 type &#39;a key =3D {<br>=C2=A0 =C2=A0 =C2=A0 =
ord : int;<br>=C2=A0 =C2=A0 =C2=A0 key : &#39;a typeid;=C2=A0</div><div>=C2=
=A0 =C2=A0 =C2=A0 name : string; (* for introspection *)<br>=C2=A0 =C2=A0 =
=C2=A0 show : &#39;a -&gt; Sexp.t; (* also for introspection *)<br>=C2=A0 =
=C2=A0 }<br></div><div>```</div><div>Now, we can use the `ord` field to ord=
er types, compare them, store in maps, hash tables, and even arrays. E.g., =
this is how our `teq` function looks like,<br></div><div>```</div><div>=C2=
=A0 =C2=A0 let same (type a b) x y : (a,b) Type_equal.t =3D<br>=C2=A0 =C2=
=A0 =C2=A0 if <a href=3D"http://x.id">x.id</a> =3D=C2=A0 <a href=3D"http://=
y.id">y.id</a> then<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 let module X =3D (val x.=
key : Witness with type t =3D a) in<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 let modu=
le Y =3D (val y.key : Witness with type t =3D b) in<br>=C2=A0 =C2=A0 =C2=A0=
 =C2=A0 match X.Id with<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 | Y.Id -&gt; Type_eq=
ual.T<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 | _ -&gt; failwith &quot;broken type e=
quality&quot;<br>=C2=A0 =C2=A0 =C2=A0 else failwith &quot;types are not equ=
al&quot;<br></div><div>```</div><div><br></div><div>It is often used in the=
 context where we already know that `<a href=3D"http://x.id">x.id</a> =3D <=
a href=3D"http://y.id">y.id</a>`, e.g., when we already found an entry, so =
we just need to obtain the equality witness (we use Janestreet&#39;s Type_e=
qual.T, which is the same as yours eq type).=C2=A0</div><div><br></div><div=
>Concerning the representation of the registry, we also experimented with d=
ifferent approaches (since we have a few ways to make a type existential in=
 OCaml), and found out the following to be the most efficient and easy to w=
ork with,</div><div><br></div><div>```</div><div>type ordered =3D {</div>=
=C2=A0 =C2=A0 order : &#39;a. &#39;a key -&gt; &#39;a -&gt; &#39;a -&gt; in=
t;<br>=C2=A0 } [@@unboxed]<br><div>```<br></div><div><br></div><div>Notice,=
 that thanks to `[@@unboxed]` we got a free unpacked existential. We will n=
ext store `ordered` in our registry, which is a hash table,</div><div><br><=
/div><div>```</div><div>let ordered : ordered Hashtbl.M(Int).t =3D Hashtbl.=
create (module Int)</div><div>```</div><div>and register it as simple as,</=
div><div>```</div><div>=C2=A0 let register: type p. p Key.t -&gt; (p -&gt; =
p -&gt; int) -&gt; unit =3D=C2=A0fun key order -&gt;</div><div>=C2=A0 =C2=
=A0 Hashtbl.add_exn vtables ~key:(uid key) ~data:{<br>=C2=A0 =C2=A0 =C2=A0 =
order =3D fun (type a) (k : a key) (x : a) (y : a) -&gt;<br>=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 let T =3D same k key in (* obtain the witness that we found t=
he right structure *)<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 order x y<br>=C2=A0 =
=C2=A0 =C2=A0}<br></div><div>```<br></div><div><br></div><div>Instead of a =
hashtable, it is also possible to use `ordered array ref` (since our `ord` =
is just an integer which we increment every time a new class is declared). =
This will give us even faster lookup.=C2=A0</div><div><br></div><div>I hope=
 that this was interesting. And if yes, I&#39;m ready to elaborate more on =
our design decision or to hear suggestions and critics. Here are a few link=
s:</div><div><br></div><div>- <a href=3D"https://github.com/BinaryAnalysisP=
latform/bap">https://github.com/BinaryAnalysisPlatform/bap</a> - the BAP pr=
oject per se.=C2=A0</div><div>-=C2=A0<a href=3D"https://binaryanalysisplatf=
orm.github.io/knowledge-intro-1">https://binaryanalysisplatform.github.io/k=
nowledge-intro-1</a>=C2=A0 - a small introductionary post about BAP 2.0 Kno=
wledge representation<br></div><div>-=C2=A0<a href=3D"https://github.com/Bi=
naryAnalysisPlatform/bap/blob/master/lib/knowledge/bap_knowledge.ml">https:=
//github.com/BinaryAnalysisPlatform/bap/blob/master/lib/knowledge/bap_knowl=
edge.ml</a> - the implementation of the knowledge system</div><div>- <a hre=
f=3D"https://github.com/BinaryAnalysisPlatform/bap/tree/master/lib/bap_core=
_theory">https://github.com/BinaryAnalysisPlatform/bap/tree/master/lib/bap_=
core_theory</a> - The Core Theory, an exemplar type class of the theory tha=
t we&#39;re developing :)</div><div><br></div><div>Cheers,</div><div>Ivan G=
otovchits</div><div>Research Scientist, CMU Cylab</div><div><br></div><div>=
[1]:=C2=A0<a href=3D"http://okmij.org/ftp/tagless-final/index.html">http://=
okmij.org/ftp/tagless-final/index.html</a></div></div><br><div class=3D"gma=
il_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Wed, Sep 4, 2019 at 11:2=
3 AM Oleg &lt;<a href=3D"mailto:oleg@okmij.org">oleg@okmij.org</a>&gt; wrot=
e:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0=
.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><br>
This is to announce a simple, plain OCaml library to experiment with<br>
type-class/implicits resolution, which can be thought of as evaluating<br>
a Prolog-like program. One may allow `overlapping instances&#39; -- or<br>
prohibit them, insisting on uniqueness. One may make the search fully<br>
deterministic, fully non-deterministic, or something in-between.<br>
There is an immediate, albeit modest practical benefit: the facility<br>
like &quot;#install_printer&quot;, which was restricted to top-level, is no=
w<br>
available for all -- as a small, self-contained, plain OCaml library<br>
with no knowledge or dependencies on the compiler internals. We show<br>
an example at the end of the message.<br>
<br>
This message has been inspired by the remarkable paper<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Canonical Structures for the working Coq user<b=
r>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Assia Mahboubi, Enrico Tassi<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 DOI: 10.1007/978-3-642-39634-2_5<br>
Its introduction is particularly insightful: the power of<br>
(mathematical) notation is in eliding distracting details. Yet to<br>
formally check a proof, or to run a program, the omitted has to be<br>
found. When pressed to fill in details, people `skillful in the art&#39;<br>
look in the database of the `state of the art&#39;, with the context as<br>
the key. Computers can be programmed similarly; types well represent<br>
the needed context to guide the search.<br>
<br>
Mahboubi and Tassi&#39;s paper explains very well how this eliding and<br>
filling-in is realized, as a programmable unification, and used in<br>
Coq. Yet their insights go beyond Coq and deserve to be known better.<br>
This message and the accompanying code is to explain them in<br>
plain OCaml and encourage experimentation. It could have been titled<br>
`Canonical Structures for the working OCaml (meta) programmer&#39;.<br>
<br>
The rudiment of canonical structures is already present in OCaml, in<br>
the form of the registry of printers for user-defined types. This<br>
facility is available only at the top-level, however, and deeply<br>
intertwined with it. As a modest practical benefit, this facility is<br>
now available for all programs, as a plain, small, self-contained<br>
library, with no compiler or other magic. The full potential of the<br>
method is realized however in (multi-) staged programming. In fact, I&#39;m=
<br>
planning to use it in the upcoming version of MetaOCaml to implement<br>
`lifting&#39; from a value to the code that produces it -- letting the<br>
users register lifting functions for their own data types.<br>
<br>
<br>
<a href=3D"http://okmij.org/ftp/ML/canonical.ml" rel=3D"noreferrer" target=
=3D"_blank">http://okmij.org/ftp/ML/canonical.ml</a><br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 The implementation and the examples, some of wh=
ich are noted below.<br>
<a href=3D"http://okmij.org/ftp/ML/trep.ml" rel=3D"noreferrer" target=3D"_b=
lank">http://okmij.org/ftp/ML/trep.ml</a><br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 A generic library of type representations: some=
thing like <br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Typeable in Haskell. Some day it may be built-i=
n into the compiler<br>
<a href=3D"http://okmij.org/ftp/ML/canonical_leadup.ml" rel=3D"noreferrer" =
target=3D"_blank">http://okmij.org/ftp/ML/canonical_leadup.ml</a><br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 A well-commented code that records the progress=
ive development of<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 <a href=3D"http://canonical.ml" rel=3D"noreferr=
er" target=3D"_blank">canonical.ml</a>. It is not part of the library, but =
may serve as<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 its explanation.<br>
<br>
Here are a few examples, starting with the most trivial one<br>
=C2=A0 =C2=A0module Show =3D MakeResolve(struct type &#39;a dict =3D &#39;a=
 -&gt; string end)<br>
=C2=A0 =C2=A0let () =3D Show.register Int string_of_int=C2=A0 =C2=A0 (* Def=
ine `instances&#39; *)<br>
=C2=A0 =C2=A0let () =3D Show.register Bool string_of_bool<br>
=C2=A0 =C2=A0Show.find Int 1;;<br>
<br>
However contrived and flawed, it is instructive. Here (Int : int trep)<br>
is the value representing the type int. The type checker can certainly<br>
figure out that 1 is of the type int, and could potentially save us<br>
trouble writing Int explicitly. What the type checker cannot do by<br>
itself is to find out which function to use to convert an int to a<br>
string. After all, there are many of them. Show.register lets us<br>
register the *canonical* int-&gt;string function. Show.find is to search<br>
the database of such canonical functions: in effect, finding *the*<br>
evidence that the type int-&gt;string is populated. Keeping Curry-Howard<br>
in mind, Show.find does a _proof search_.<br>
<br>
The type of Show.find is &#39;a trep -&gt; (&#39;a -&gt; string). Compare w=
ith<br>
Haskell&#39;s show : Show a =3D&gt; a -&gt; String (or, desuraging =3D&gt; =
and Show)<br>
show : (&#39;a -&gt; string) -&gt; (&#39;a -&gt; string).=C2=A0 Haskell&#39=
;s show indeed does<br>
not actually do anything: it is the identity function. All the hard<br>
work -- finding out the right dictionary (the string producing<br>
function) -- is done by the compiler. If one does not like the way the<br>
compiler goes about it -- tough luck. There is little one may do save<br>
complaining on reddit. In contrast, the first argument of Show.find is<br>
trivial: it is a mere reflection of the type int, with no further<br>
information. Hence Show.find has to do a non-trivial work.=C2=A0 In the<br>
case of int, this work is the straightforward database search --<br>
or, if you prefer, running the query ?- dict(int,R) against a logic<br>
program<br>
=C2=A0 =C2=A0 =C2=A0dict(int,string_of_int).<br>
=C2=A0 =C2=A0 =C2=A0dict(bool,string_of_bool).<br>
The program becomes more interesting when it comes to pairs:<br>
=C2=A0 =C2=A0 =C2=A0dict(T,R) :- T =3D pair(X,Y), !,=C2=A0 <br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0dict(X,DX), dict(Y,DY), R=3Dmake_pair_dic=
t(DX,DY).<br>
Here is how it is expressed in OCaml:<br>
let () =3D <br>
=C2=A0 let open Show in<br>
=C2=A0 let pat : type b. b trep -&gt; b rule_body option =3D function<br>
=C2=A0 =C2=A0 | Pair (x,y) -&gt; <br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Some (Arg (x, fun dx -&gt; Arg (y, fun dy -&gt;=
 <br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Fact (fun (x,y) -&gt; &quot;(&quot; ^ dx=
 x ^ &quot;,&quot; ^ dy y ^ &quot;)&quot;))))<br>
=C2=A0 =C2=A0 | _=C2=A0 =C2=A0 =C2=A0 -&gt; None<br>
=C2=A0 in register_rule {pat}<br>
<br>
let () =3D Show.register (Pair(Bool,Bool)) <br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(fun (x,y) -&gt; string_of_bool x =
^ string_of_bool y)<br>
<br>
Our library permits `overlapping instances&#39;. We hence registered the<br>
printer for generic pairs, and a particular printer just for pairs of<br>
booleans.<br>
<br>
The library is extensible with user-defined data types, for example:<br>
=C2=A0 =C2=A0type my_fancy_datatype =3D Fancy of int * string * (int -&gt; =
string)<br>
<br>
After registering the type with trep library, and the printer<br>
=C2=A0 =C2=A0type _ trep +=3D MyFancy : my_fancy_datatype trep<br>
=C2=A0 =C2=A0let () =3D Show.register MyFancy (function Fancy(x,y,_) -&gt;<=
br>
=C2=A0 =C2=A0 =C2=A0string_of_int x ^ &quot;/&quot; ^ y ^ &quot;/&quot; ^ &=
quot;&lt;fun&gt;&quot;)<br>
<br>
one can print rather complex data with fancy, with no further ado:<br>
=C2=A0 =C2=A0Show.find (List(List(Pair(MyFancy,Int)))) [[(Fancy ...,5)];[]]=
<br>
<br>
As Mahboubi and Tassi would say, proof synthesis at work!<br>
<br>
We should stress that what we have described is not a type-class<br>
facility for OCaml. It is *meta* type-class facility.=C2=A0 Show.find has<b=
r>
many drawbacks: we have to explicitly pass the trep argument like<br>
Int. The resolution happens at run time, and hence the failure of the<br>
resolution is a run-time exception. But the canonical instance<br>
resolution was intended to be a part of a type checker. There, the<br>
resolution failure is a type checking error. The trep argument,<br>
representing the type in the object program, is also at<br>
hand. Likewise, the drawbacks of Show.find disappear when we use the<br>
library in a meta-program (code generator). The library then becomes a<br>
type-class/implicits facility, for the generated code -- the facility,<br>
we can easily (re)program.<br>
</blockquote></div>

--00000000000063454f0591c035a5--
