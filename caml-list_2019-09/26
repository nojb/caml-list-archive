Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id AB0F77EE31
	for <caml-list@sympa.inria.fr>; Fri, 20 Sep 2019 10:54:43 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qt1-f174.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.160.174;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.160.174 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.160.174;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qt1-f174.google.com) identity=helo;
  client-ip=209.85.160.174;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qt1-f174.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3AVXvp4BYZglYQDMvwSJ8a3y7/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZr8W8bnLW6fgltlLVR4KTs6sC17ON9fq6EjReqdbZ6TZeKcYKD0dEwe?=
 =?us-ascii?q?wt3CUYSPafDkP6KPO4JwcbJ+9lEGFfwnegLEJOE9z/bVCB6le77DoVBwmtfVEt?=
 =?us-ascii?q?fre9FYHdldm42P6v8JPPfQpImCC9YbRvJxmqsAndrMYbjZZsJ6or1BfFvHREd/?=
 =?us-ascii?q?hXyGh1IV6fgwvw6t2/8ZJ+7Shcoe4t+9JFXa7nY6k2ULtUASg8PWso/sPrrx7D?=
 =?us-ascii?q?TQWO5nsYTGoblwdDDhbG4h/nQJr/qzP2ueVh1iaUO832Vq00Vi+576h3Uh/oiT?=
 =?us-ascii?q?wIOCA//WrKl8F/lqNboBampxxi347ZZZyeOfRicq/Be94RWHFMVdhNWSNfHoy8?=
 =?us-ascii?q?bpMPD+sfMuZes4n9vEYFoR+nCQWxGO/j1jpEi3nr1qM4zushCxnL0wMuH90MsH?=
 =?us-ascii?q?raotb7OroMX++p16TH1ynPYulM1Dvh9ITFcBYsquyMU7JqdsrRzFEiGQLfgVqL?=
 =?us-ascii?q?s4zlPi2a1uAQuGaG8+VgVfygi3Q5pAFrvzOiwcgshZPSiYIPy1DL6yF5zJwuJd?=
 =?us-ascii?q?KkSE50f8SkH4VKtyyBOIt2R9ktQ2BsuCog1rIGvpu7cTEMxZ86yRDfbPmHfJKJ?=
 =?us-ascii?q?4hLlTOuRIDF4hGhkeL2lnRqy/1KgxvX9VsmyzFZHoDRJnsPNt38TzRzT7c6KQe?=
 =?us-ascii?q?Z+8Ee5wTuDyRzf5+VeLU03lafXMYMtz78smpYJrEjOHCD7lUPrh6GMbEok4PKn?=
 =?us-ascii?q?6+H/b7XmuJCcM4h0hxn7Mqs0m8y/Bf00MhESX2SG4Oi82qDv8E/2TblQgf02la?=
 =?us-ascii?q?7ZsJ/eJcsFvKK2HwhV0oM75xa+CTepzsgYkGEZIF5ZfB+LlYvkNlHULPzlDPqz?=
 =?us-ascii?q?n06gnCppyv3JJrHhB4/CLnnHkLfvZ7Z97EtcxRI8zd9F/J1UELABL+z3WkPrr9?=
 =?us-ascii?q?zXEh85PBKuw+n5EtVwzYweWWeVDa+YNKPeq0OH5uUqI+WUfo8apC79K+Q55/7p?=
 =?us-ascii?q?lXI2hUUSfayt3ZcObHC4H+9mI1mCbHr3gtYBFH8KsRAkQOzrjl2CSz9TaGyoU6?=
 =?us-ascii?q?Iy/DFoQL6hWKLKQouqhLnJ+S6nF5lVbygSD1WFDX7sdIysVPIFaSbUKchkxG8q?=
 =?us-ascii?q?T7+kHqAo3wuvuQuy8LFnI/DZ4GVMupvpztl446vInhE/7zFuJ8uY2mCJCWpzmz?=
 =?us-ascii?q?VbFHcNwKljrBklmR+42q9ijqkdTIQLvq8bYkIBLZfZitdCJZXqQAuYJ4WGTV+n?=
 =?us-ascii?q?RpOtBjRjFotgke9LWF50HpCZtj6G2iOrB7EPkLnSXc4796vd2z76IMMvki+bhp?=
 =?us-ascii?q?lktEEvR450DUPjhqN78FKNVYvAkkHcjrrzMKpFg3KL+2CEwm6D+kpfVVwoXA?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BiCwCrkoRdgK6gVdFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZ4MFgQUWFIIGghyBHYJeixmCD5sdCQEDAQwjDAEBhD8CgwcbBwEENBMCDAE?=
 =?us-ascii?q?BBAEBAQIBAgMEARMBAQkNCQgnhTYMgjopAYJmAQEBAQIBEhEEGQEbFgcBAwELB?=
 =?us-ascii?q?gMCCwMKKgICIQEBEQEFARwGExsHgwABgWkBAw4PD489jwyBAzyLJH8WBQEXgn4?=
 =?us-ascii?q?FgUhBgjUKGScNYgOBPQIHEoEijAmBWD+BEYJkLj6CGkcDhGuCWASeIo17LUEHg?=
 =?us-ascii?q?iVlBIYciS9VhAEbgmVDlXyWLYIIjxMPI4EcKoF5MxojUDGCOwlHEBSBTgwXg0+?=
 =?us-ascii?q?BPokXQTABjysBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BiCwCrkoRdgK6gVdFlHAEBAQQBAQcEAQGBZ4MFgQUWFII?=
 =?us-ascii?q?GghyBHYJeixmCD5sdCQEDAQwjDAEBhD8CgwcbBwEENBMCDAEBBAEBAQIBAgMEA?=
 =?us-ascii?q?RMBAQkNCQgnhTYMgjopAYJmAQEBAQIBEhEEGQEbFgcBAwELBgMCCwMKKgICIQE?=
 =?us-ascii?q?BEQEFARwGExsHgwABgWkBAw4PD489jwyBAzyLJH8WBQEXgn4FgUhBgjUKGScNY?=
 =?us-ascii?q?gOBPQIHEoEijAmBWD+BEYJkLj6CGkcDhGuCWASeIo17LUEHgiVlBIYciS9VhAE?=
 =?us-ascii?q?bgmVDlXyWLYIIjxMPI4EcKoF5MxojUDGCOwlHEBSBTgwXg0+BPokXQTABjysBA?=
 =?us-ascii?q?Q?=
X-IronPort-AV: E=Sophos;i="5.64,528,1559512800"; 
   d="scan'208,217";a="402642712"
X-MGA-submission: =?us-ascii?q?MDGGA2dqmemxI7nweE9b7ZMpGqWzO846+0pn3R?=
 =?us-ascii?q?GL80g7bKzOybLdwayayWYJ6UZHX9WSNg5OP/lryH+QXbXwjcKLU5t06w?=
 =?us-ascii?q?fwVY+cUYaC+oNBWkbdNtihZyCce3WLdmMf6yXg5bOR0KS+M+bNHu5Hbo?=
 =?us-ascii?q?q1U9c9fWMI+gbj1Tn6nD8IFA=3D=3D?=
Received: from mail-qt1-f174.google.com ([209.85.160.174])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 20 Sep 2019 10:54:41 +0200
Received: by mail-qt1-f174.google.com with SMTP id w14so3350328qto.9
        for <caml-list@inria.fr>; Fri, 20 Sep 2019 01:54:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=djzLj5uZljcpf491jYzFWGT1nw47M2OFFO+JqiMZGv8=;
        b=stkF1DdjaqsRaXIqyJz584c/UfjjeDOyHlvVkoK8duSA8BqOEQgt/KHOjS4iBLa0kH
         OGrXXDnudp5Tih1FOyvbaqRv+QOiTnkNpbp/TDabwDnzRzcPjMrEox6S/MURA0s3UVGM
         XJzIoiWyTKMVpj4FSwjYMqFgZkxB1wWUC1iUUdNAEhC0X+BBMSLd04O4ZgubiBtQpy/h
         wLFWWbuiIMf5lbuxmtvsNb6NG6LXBpMfAqL9kSovhKVOpy5GHpIqjV59XXFxz2CZ4yg/
         BmVwzEwIpGHubj5JLzR82U5NcvJT09STy0JqLgPD4oNgi2nOzzqSEYPiiraC1236hrWP
         BFZA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=djzLj5uZljcpf491jYzFWGT1nw47M2OFFO+JqiMZGv8=;
        b=qH6YlK7Is5ePKlhFgzN1chlb95iE+pFohtykosvgllJ7+tBicGdwt8yfjJsudojlfz
         IZfA36RkNfot9RAtFGgBcEqMdEevAFi7cfTOs8lz57Ft9cgGQ1ZjJYiWWBStS+hvd0zL
         4/icmm4v6Hp/Zd1fmv3FXCzby0gFeVXNlJ+ztUWvtd1f1BIBWfDoa7uMQE5Us5X5yZWV
         6pYGW4L70nCy+ZHZNa1JqnLBLmcoWnN+NKRUqzuO2yd+9kQJsv8cVx0TV3NYGwbT52L4
         VtEZO7r53UM11HZvRht5Zp/28RltIuCGp5LLggCI6mbZH3VOIL7ufQ99ZZnQd8eDpTHr
         sB0w==
X-Gm-Message-State: APjAAAXJGlX19BMU3inpsoCzH/CurzuuWl7qGOqE61VoX8SyhrghHktE
	Dfn6eBNjjU0/npFYN4408CJwgMB09s4NWHGeVzC41Dacnqc=
X-Google-Smtp-Source: APXvYqyGYhN9TdIAR7r6Q+7/Ce6CJCYzKSvny63YrkjSrjuS23RImPpnZXaFOHJkTBmztYg30JIfWMFle0ZmSRwMrkg=
X-Received: by 2002:a0c:8749:: with SMTP id 9mr12178190qvi.174.1568969680442;
 Fri, 20 Sep 2019 01:54:40 -0700 (PDT)
MIME-Version: 1.0
References: <86o8zfpra2.fsf@gmail.com> <CAPFanBG==YLwYYau1hFw875TR=4NSS6Yc0nSvVve-L0zMLPjpg@mail.gmail.com>
 <86v9tnfkum.fsf@gmail.com> <CAPFanBFAr5LOEXTdRJtrX6FUQ2_LVjbVgZqiZHLMyE6KkUPL8A@mail.gmail.com>
In-Reply-To: <CAPFanBFAr5LOEXTdRJtrX6FUQ2_LVjbVgZqiZHLMyE6KkUPL8A@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Fri, 20 Sep 2019 10:56:27 +0200
Message-ID: <CAPFanBEXXy6A-L13_-awFn+trFfDTkHKQ8PgE2_MZHeY1M3Tdw@mail.gmail.com>
To: Malcolm Matalka <mmatalka@gmail.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="0000000000007759870592f838cb"
Subject: Re: [Caml-list] How is this type inferred (GADTs)

--0000000000007759870592f838cb
Content-Type: text/plain; charset="UTF-8"

> (You could try to write conversion functions between those two definitions
> to convince yourself that they are morally equivalent,
> but this is actually a difficult exercise.)

type (_, _) t1 =
| Z : ('f, 'f) t1
| S : (('f, 'a -> 'r) t1 * (unit -> 'a)) -> ('f, 'r) t1

type (_, _) t2 =
| Z : ('r, 'r) t2
| S : ('f, 'r) t2 * (unit -> 'a) -> ('a -> 'f, 'r) t2

t2 is t1 "upside down" (and conversely). To go from t1 to t2 is thus a
"reverse" operation.
Just like for lists, writing "reverse" directly is difficult, but one can
use an auxiliary function

let rec rev_append
  : type a b c. (b, c) t2 -> (a, b) t1 -> (a, c) t2


On Fri, Sep 20, 2019 at 10:35 AM Gabriel Scherer <gabriel.scherer@gmail.com>
wrote:

> There is a direct relation between how type evolve during GADT typing and
> how queries evolve during logic/relational programming. It can help to
> think of a GADT declaration as the set of rules of a Prolog program. (I you
> have never looked at Prolog, here is an occasion to learn something new).
> That does *not* mean that GADTs let you do prolog-style programming in
> types (the compiler will not automatically search for a proof, the user has
> to write it down explicitly as a GADT term, so this work is not done
> implicitly, as with type-class search for example), but it does give a way
> to think about GADT declarations.
>
> Your declaration (notice that I renamed the Z variable, for a good reason
> that will appear clear below):
>
>   type (_, _) t =
>     | Z : ('f, 'f) t
>     | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t
>
> becomes
>
>   t F F.
>   t F R :- t F (A -> R), (unit -> A).
>
> In any case, your declaration has the following effect:
> - by the Z rule, all types of the form
>   ('a1 -> 'a2 -> ... -> 'an -> 'r, 'a -> 'a2 -> ... -> 'an -> 'r) t
>   are inhabited
> - by the S rule, you can "hide" an element on the right
>   (and you have to provide a thunk for it)
> , moving from
>   ('a1 -> ... -> 'an -> r, 'ak -> 'a{k+1} -> .. -> 'an -> r) t
>   to
>   ('a1 -> ... -> 'an -> r, 'a{k+1} -> .. -> 'an -> r) t
>
> If you do this repeatedly you end up on what you want: ('a1 -> .. -> 'an
> -> r, r) t.
>
> The way you write about it, it sounds like you had the following
> *different* definition in mind
>
> type (_, _) t =
> | Z : ('r, 'r) t
> | S : ('f, 'r) t * (unit -> 'a) -> ('a -> 'f, 'r) t
>
> let test = S (S (Z, (fun () -> 3l)), (fun () -> "foo"))
>
> corresponding to the following Prolog program that I do find easier to
> think about:
>
>   t R R.
>   t (A -> F) R :- t F R, (unit -> A).
>
> It turns out that with this other definition, the first implementation
> that you had written actually type-check fines.
>
> (You could try to write conversion functions between those two definitions
> to convince yourself that they are morally equivalent, but this is actually
> a difficult exercise.)
>
> On Fri, Sep 20, 2019 at 10:11 AM Malcolm Matalka <mmatalka@gmail.com>
> wrote:
>
>>
>> Gabriel Scherer <gabriel.scherer@gmail.com> writes:
>>
>> > Note: the reason why you get _weak type variables (which are not
>> > polymorphic, just not-inferred-yet)  is that the type-checker cannot
>> detect
>> > that (z // (fun () -> ...)) is a value: it would have to unfold the
>> call to
>> > (//) for this, which it doesn't do in general, and here certainly could
>> not
>> > do given that its definition is hidden behind an abstraction boundary.
>> > I would recommend experimenting *without* the module interface and the
>> > auxiliary function, with the constructors directly, you would get
>> slightly
>> > better types.
>> >
>> > # S(S(Z, (fun () -> Int32.zero)), (fun () -> ""));;
>> > - : (int32 -> string -> 'a, 'a) t = S (S (Z, <fun>), <fun>)
>> >
>> > Historically we have used module interfaces to implement "phantom
>> types" --
>> > because the type information there is only present in the interface,
>> not in
>> > the definition. With GADTs, the type constraints are built into the
>> > definition itself, which is precisely what makes them more powerful; no
>> > need for an abstract interface on top.
>> >
>> > The first part of your question is about understanding how the
>> > type-inference work (how variables are manipulated by the type-checker
>> and
>> > then "propagated back up"). This sounds like a difficult way to
>> understand
>> > GADTs: you want to learn the typing rules *and* the type-inference
>> > algorithm at once. But only the first part is necessary to use the
>> feature
>> > productively (with a few tips on when to use annotations, which are
>> easy to
>> > explain and in fact explained in the manual:
>> > http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html ). So
>> instead of
>> > asking: "how did the compiler get this type?", I would ask: "why is this
>> > the right type"? I think you could convince yourself that (1) it is a
>> > correct type and (2) any other valid type would be a specialization of
>> this
>> > type, there is no simpler solution.
>> >
>> > The second part: you wrote:
>> >
>> >   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
>> >     | Z ->
>> >       f
>> >     | S (t, v) ->
>> >       bind (f (v ())) t
>> >
>> > Let's focus on the second clause:
>> >
>> >     | S (t, v) ->
>> >       bind (f (v ())) t
>> >
>> > we know that (f : f) holds, and that the pattern-matching is on a value
>> of
>> > type (f, r) t, and we must return r.
>> > When pattern-matching on S (t, v), we learn extra type information from
>> the
>> > typing rule of S:
>> >
>> >     | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t
>> >
>> > if r has type (f, r) t, then (t, v) has type ((f, a -> r) t * (unit ->
>> a))
>> > for *some* unknown/existential type a. So within the branch we have
>> >
>> >   bind : type f r. f -> (f, r) t -> r
>> >   f : (f, a -> r) t
>> >   v : unit -> a
>> >   expected return type: r
>> >
>> > f does *not* have a function type here, so your idea of applying (f (v
>> ()))
>> > cannot work (v does have a function type, so (v ()) is valid).
>> >
>> > The only thing you can do on f is call (bind) recursively (with what
>> > arguments?), and then you will get an (a -> r) as result.
>> >
>> > Do you see how to write a correct program from there?
>>
>> Ah-ha!  I was close but my thinking was at the "wrong level" (I'm not
>> sure how to put it).  The working implementation of bind is:
>>
>>   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
>>     | Z ->
>>       f
>>     | S (t, v) ->
>>       let f' = bind f t in
>>       f' (v ())
>>
>> And now I see why you wanted me to look at it not through the module
>> interface.  Looking at how the recursion would work, of course the
>> most-nested S will have the function corresponding to the first
>> parameter of the function.  I was thinking that I would consume the
>> parameters on the way down, but it's actually on the way up.
>>
>> I am still working out in my head the answer to "why is this the right
>> type", I think it has to slosh around in there a bit before it truly
>> makes sense to me.
>>
>> Thank you!
>>
>> >
>> >
>> >
>> > On Fri, Sep 20, 2019 at 5:42 AM Malcolm Matalka <mmatalka@gmail.com>
>> wrote:
>> >
>> >> I have been using GADTs to make type-safe versions of APIs that are
>> kind
>> >> of like printf.  I've been using this pattern by rote and now I'm
>> >> getting to trying to understand how it works.
>> >>
>> >> I have the following code:
>> >>
>> >> module F : sig
>> >>   type ('f, 'r) t
>> >>
>> >>   val z : ('r, 'r) t
>> >>   val (//) : ('f, 'a -> 'r) t -> (unit -> 'a) -> ('f, 'r) t
>> >> end = struct
>> >>   type ('f, 'r) t =
>> >>     | Z : ('r, 'r) t
>> >>     | S : (('f, 'a -> 'r) t * (unit -> 'a)) -> ('f, 'r) t
>> >>
>> >>   let z = Z
>> >>   let (//) t f = S (t, f)
>> >> end
>> >>
>> >> And the following usage:
>> >>
>> >> utop # F.(z // (fun () -> Int32.zero) // (fun () -> ""));;
>> >> - : (int32 -> string -> '_weak1, '_weak1) F.t = <abstr>
>> >>
>> >> I understand how 'r is '_weak1 (I think), but I'm still trying to
>> figure
>> >> out how 'f gets its type by applying (//).  I think I have an
>> >> explanation below, and I'm hoping someone can say if it's correct
>> and/or
>> >> simplify it.
>> >>
>> >> Explanation:
>> >>
>> >> The constructor Z says that 'f and 'r, are the same (Z : ('r, 'r) t).
>> >> The constructor S says that the (_, _) t that it takes has some type
>> 'f,
>> >> but that the second type variable must be of the form 'a -> 'r, sort of
>> >> deconstructing pattern match on the type (if that makes sense).  And if
>> >> that (_, _) t is a Z, where we have stated the two type variables have
>> >> the same value, that means 'f must also be ('a -> 'r). So for the
>> >> first application of (//) it makes sense.  If we apply (//) again, the
>> >> first parameter has the type (int32 -> '_weak1, '_weak1) t, but that
>> >> must actually mean '_weak1 in this case is string -> '_weak, and then
>> >> this is where things become jumbled in my head.  If the passed in (_,
>> _)
>> >> t must be (string -> '_weak), and the inner type actually must be
>> (int32
>> >> -> '_weak), then, the inner inner type must be ('_weak), the type of 'r
>> >> at Z must be (string -> int32 -> '_weak), and since 'r, and 'f are the
>> >> same type for Z, 'f must also be (string -> int32 -> '_weak), and that
>> >> knowledge propagates back up?  But that doesn't feel quite right to me,
>> >> either.
>> >>
>> >> With the help of reading other code, I've figured out how to make a
>> >> function that uses a type like this that works like kprintf, however
>> >> where I'm going in this case is that I want to take a function that
>> >> matches 'f and apply it to the result of my functions.
>> >>
>> >> Something like:
>> >>
>> >>   let rec bind : type f r. f -> (f, r) t -> r = fun f -> function
>> >>     | Z ->
>> >>       f
>> >>     | S (t, v) ->
>> >>       bind (f (v ())) t
>> >>
>> >> However, this does not compile given:
>> >>
>> >> Error: This expression has type f
>> >>        This is not a function; it cannot be applied.
>> >>
>> >> My understanding was if I have Z, and an input that has the type f,
>> then
>> >> that is just the return type since at Z, f and r are the same type.
>> And
>> >> than at S, I can peel away the type of f by applying the function f and
>> >> then recursively calling.  But my understanding is missing something.
>> >>
>> >> Does this make sense?
>> >>
>> >> What am I not understanding?
>> >>
>> >> Thank you,
>> >> /Malcolm
>> >>
>>
>>

--0000000000007759870592f838cb
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>&gt; (You could try to write conversion functions bet=
ween those two=20
definitions</div><div>&gt; to convince yourself that they are morally equiv=
alent,</div><div>&gt; but=20
this is actually a difficult exercise.)</div><div><br></div><div>type (_, _=
) t1 =3D<br>| Z : (&#39;f, &#39;f) t1<br>| S : ((&#39;f, &#39;a -&gt; &#39;=
r) t1 * (unit -&gt; &#39;a)) -&gt; (&#39;f, &#39;r) t1<br><br>type (_, _) t=
2 =3D<br>| Z : (&#39;r, &#39;r) t2<br>| S : (&#39;f, &#39;r) t2 * (unit -&g=
t; &#39;a) -&gt; (&#39;a -&gt; &#39;f, &#39;r) t2<br></div><div><br></div><=
div>t2 is t1 &quot;upside down&quot; (and conversely). To go from t1 to t2 =
is thus a &quot;reverse&quot; operation.</div><div>Just like for lists, wri=
ting &quot;reverse&quot; directly is difficult, but one can use an auxiliar=
y function<br></div><div><br></div><div>let rec rev_append<br>=C2=A0 : type=
 a b c. (b, c) t2 -&gt; (a, b) t1 -&gt; (a, c) t2 <br></div><div><br></div>=
</div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">=
On Fri, Sep 20, 2019 at 10:35 AM Gabriel Scherer &lt;<a href=3D"mailto:gabr=
iel.scherer@gmail.com">gabriel.scherer@gmail.com</a>&gt; wrote:<br></div><b=
lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
ft:1px solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr"><div>There=
 is a direct relation between how type evolve during GADT typing and how qu=
eries evolve during logic/relational programming. It can help to think of a=
 GADT declaration as the set of rules of a Prolog program. (I you have neve=
r looked at Prolog, here is an occasion to learn something new). That does =
*not* mean that GADTs let you do prolog-style programming in types (the com=
piler will not automatically search for a proof, the user has to write it d=
own explicitly as a GADT term, so this work is not done implicitly, as with=
 type-class search for example), but it does give a way to think about GADT=
 declarations.</div><div><br></div><div>Your declaration (notice that I ren=
amed the Z variable, for a good reason that will appear clear below):<br></=
div><div><br></div><div>
=C2=A0 type (_, _) t =3D<br>
=C2=A0 =C2=A0 | Z : (&#39;f, &#39;f) t<br>
=C2=A0 =C2=A0 | S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit -&gt; &#39;a))=
 -&gt; (&#39;f, &#39;r) t</div><div><br></div><div>becomes<br></div><div><b=
r></div><div>=C2=A0 t F F.<br></div><div>=C2=A0 t F R :- t F (A -&gt; R), (=
unit -&gt; A).</div><div><br></div><div>In any case, your declaration has t=
he following effect:</div><div>- by the Z rule, all types of the form</div>=
<div>=C2=A0 (&#39;a1 -&gt; &#39;a2 -&gt; ... -&gt; &#39;an -&gt; &#39;r, &#=
39;a -&gt; &#39;a2 -&gt; ... -&gt; &#39;an -&gt; &#39;r) t <br></div><div>=
=C2=A0 are inhabited<br></div><div>- by the S rule, you can &quot;hide&quot=
; an element on the right</div><div>=C2=A0 (and you have to provide a thunk=
 for it)<br></div><div>, moving from</div><div>=C2=A0 (&#39;a1 -&gt; ... -&=
gt; &#39;an -&gt; r, &#39;ak -&gt; &#39;a{k+1} -&gt; .. -&gt; &#39;an -&gt;=
 r) t<br></div><div>=C2=A0 to</div><div>=C2=A0 (&#39;a1 -&gt; ... -&gt; &#3=
9;an -&gt; r, &#39;a{k+1} -&gt; .. -&gt; &#39;an -&gt; r) t<br><div>=C2=A0 =
<br></div><div>If you do this repeatedly you end up on what you want: (&#39=
;a1 -&gt; .. -&gt; &#39;an -&gt; r, r) t.</div><div><br></div><div>The way =
you write about it, it sounds like you had the following *different* defini=
tion in mind</div><div><br></div><div>type (_, _) t =3D<br>| Z : (&#39;r, &=
#39;r) t<br>| S : (&#39;f, &#39;r) t * (unit -&gt; &#39;a) -&gt; (&#39;a -&=
gt; &#39;f, &#39;r) t<br><br>let test =3D S (S (Z, (fun () -&gt; 3l)), (fun=
 () -&gt; &quot;foo&quot;))</div><div><br></div><div>corresponding to the f=
ollowing Prolog program that I do find easier to think about:<br></div><div=
><br></div><div><div>=C2=A0 t R R.<br></div><div>=C2=A0 t (A -&gt; F) R :- =
t F R, (unit -&gt; A).</div><div><br></div></div><div>It turns out that wit=
h this other definition, the first implementation that you had written actu=
ally type-check fines.</div><div><br></div><div>(You could try to write con=
version functions between those two definitions to convince yourself that t=
hey are morally equivalent, but this is actually a difficult exercise.)<br>=
</div></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"=
gmail_attr">On Fri, Sep 20, 2019 at 10:11 AM Malcolm Matalka &lt;<a href=3D=
"mailto:mmatalka@gmail.com" target=3D"_blank">mmatalka@gmail.com</a>&gt; wr=
ote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px=
 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><br>
Gabriel Scherer &lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=3D"=
_blank">gabriel.scherer@gmail.com</a>&gt; writes:<br>
<br>
&gt; Note: the reason why you get _weak type variables (which are not<br>
&gt; polymorphic, just not-inferred-yet)=C2=A0 is that the type-checker can=
not detect<br>
&gt; that (z // (fun () -&gt; ...)) is a value: it would have to unfold the=
 call to<br>
&gt; (//) for this, which it doesn&#39;t do in general, and here certainly =
could not<br>
&gt; do given that its definition is hidden behind an abstraction boundary.=
<br>
&gt; I would recommend experimenting *without* the module interface and the=
<br>
&gt; auxiliary function, with the constructors directly, you would get slig=
htly<br>
&gt; better types.<br>
&gt;<br>
&gt; # S(S(Z, (fun () -&gt; Int32.zero)), (fun () -&gt; &quot;&quot;));;<br>
&gt; - : (int32 -&gt; string -&gt; &#39;a, &#39;a) t =3D S (S (Z, &lt;fun&g=
t;), &lt;fun&gt;)<br>
&gt;<br>
&gt; Historically we have used module interfaces to implement &quot;phantom=
 types&quot; --<br>
&gt; because the type information there is only present in the interface, n=
ot in<br>
&gt; the definition. With GADTs, the type constraints are built into the<br>
&gt; definition itself, which is precisely what makes them more powerful; n=
o<br>
&gt; need for an abstract interface on top.<br>
&gt;<br>
&gt; The first part of your question is about understanding how the<br>
&gt; type-inference work (how variables are manipulated by the type-checker=
 and<br>
&gt; then &quot;propagated back up&quot;). This sounds like a difficult way=
 to understand<br>
&gt; GADTs: you want to learn the typing rules *and* the type-inference<br>
&gt; algorithm at once. But only the first part is necessary to use the fea=
ture<br>
&gt; productively (with a few tips on when to use annotations, which are ea=
sy to<br>
&gt; explain and in fact explained in the manual:<br>
&gt; <a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html" =
rel=3D"noreferrer" target=3D"_blank">http://caml.inria.fr/pub/docs/manual-o=
caml/manual033.html</a> ). So instead of<br>
&gt; asking: &quot;how did the compiler get this type?&quot;, I would ask: =
&quot;why is this<br>
&gt; the right type&quot;? I think you could convince yourself that (1) it =
is a<br>
&gt; correct type and (2) any other valid type would be a specialization of=
 this<br>
&gt; type, there is no simpler solution.<br>
&gt;<br>
&gt; The second part: you wrote:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D fun =
f -&gt; function<br>
&gt;=C2=A0 =C2=A0 =C2=A0| Z -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0f<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;<br>
&gt; Let&#39;s focus on the second clause:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;<br>
&gt; we know that (f : f) holds, and that the pattern-matching is on a valu=
e of<br>
&gt; type (f, r) t, and we must return r.<br>
&gt; When pattern-matching on S (t, v), we learn extra type information fro=
m the<br>
&gt; typing rule of S:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0| S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit -&gt=
; &#39;a)) -&gt; (&#39;f, &#39;r) t<br>
&gt;<br>
&gt; if r has type (f, r) t, then (t, v) has type ((f, a -&gt; r) t * (unit=
 -&gt; a))<br>
&gt; for *some* unknown/existential type a. So within the branch we have<br>
&gt;<br>
&gt;=C2=A0 =C2=A0bind : type f r. f -&gt; (f, r) t -&gt; r<br>
&gt;=C2=A0 =C2=A0f : (f, a -&gt; r) t<br>
&gt;=C2=A0 =C2=A0v : unit -&gt; a<br>
&gt;=C2=A0 =C2=A0expected return type: r<br>
&gt;<br>
&gt; f does *not* have a function type here, so your idea of applying (f (v=
 ()))<br>
&gt; cannot work (v does have a function type, so (v ()) is valid).<br>
&gt;<br>
&gt; The only thing you can do on f is call (bind) recursively (with what<b=
r>
&gt; arguments?), and then you will get an (a -&gt; r) as result.<br>
&gt;<br>
&gt; Do you see how to write a correct program from there?<br>
<br>
Ah-ha!=C2=A0 I was close but my thinking was at the &quot;wrong level&quot;=
 (I&#39;m not<br>
sure how to put it).=C2=A0 The working implementation of bind is:<br>
<br>
=C2=A0 let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D fun f -&gt; fu=
nction<br>
=C2=A0 =C2=A0 | Z -&gt;<br>
=C2=A0 =C2=A0 =C2=A0 f<br>
=C2=A0 =C2=A0 | S (t, v) -&gt;<br>
=C2=A0 =C2=A0 =C2=A0 let f&#39; =3D bind f t in<br>
=C2=A0 =C2=A0 =C2=A0 f&#39; (v ())<br>
<br>
And now I see why you wanted me to look at it not through the module<br>
interface.=C2=A0 Looking at how the recursion would work, of course the<br>
most-nested S will have the function corresponding to the first<br>
parameter of the function.=C2=A0 I was thinking that I would consume the<br>
parameters on the way down, but it&#39;s actually on the way up.<br>
<br>
I am still working out in my head the answer to &quot;why is this the right=
<br>
type&quot;, I think it has to slosh around in there a bit before it truly<b=
r>
makes sense to me.<br>
<br>
Thank you!<br>
<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; On Fri, Sep 20, 2019 at 5:42 AM Malcolm Matalka &lt;<a href=3D"mailto:=
mmatalka@gmail.com" target=3D"_blank">mmatalka@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; I have been using GADTs to make type-safe versions of APIs that ar=
e kind<br>
&gt;&gt; of like printf.=C2=A0 I&#39;ve been using this pattern by rote and=
 now I&#39;m<br>
&gt;&gt; getting to trying to understand how it works.<br>
&gt;&gt;<br>
&gt;&gt; I have the following code:<br>
&gt;&gt;<br>
&gt;&gt; module F : sig<br>
&gt;&gt;=C2=A0 =C2=A0type (&#39;f, &#39;r) t<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0val z : (&#39;r, &#39;r) t<br>
&gt;&gt;=C2=A0 =C2=A0val (//) : (&#39;f, &#39;a -&gt; &#39;r) t -&gt; (unit=
 -&gt; &#39;a) -&gt; (&#39;f, &#39;r) t<br>
&gt;&gt; end =3D struct<br>
&gt;&gt;=C2=A0 =C2=A0type (&#39;f, &#39;r) t =3D<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| Z : (&#39;r, &#39;r) t<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| S : ((&#39;f, &#39;a -&gt; &#39;r) t * (unit =
-&gt; &#39;a)) -&gt; (&#39;f, &#39;r) t<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0let z =3D Z<br>
&gt;&gt;=C2=A0 =C2=A0let (//) t f =3D S (t, f)<br>
&gt;&gt; end<br>
&gt;&gt;<br>
&gt;&gt; And the following usage:<br>
&gt;&gt;<br>
&gt;&gt; utop # F.(z // (fun () -&gt; Int32.zero) // (fun () -&gt; &quot;&q=
uot;));;<br>
&gt;&gt; - : (int32 -&gt; string -&gt; &#39;_weak1, &#39;_weak1) F.t =3D &l=
t;abstr&gt;<br>
&gt;&gt;<br>
&gt;&gt; I understand how &#39;r is &#39;_weak1 (I think), but I&#39;m stil=
l trying to figure<br>
&gt;&gt; out how &#39;f gets its type by applying (//).=C2=A0 I think I hav=
e an<br>
&gt;&gt; explanation below, and I&#39;m hoping someone can say if it&#39;s =
correct and/or<br>
&gt;&gt; simplify it.<br>
&gt;&gt;<br>
&gt;&gt; Explanation:<br>
&gt;&gt;<br>
&gt;&gt; The constructor Z says that &#39;f and &#39;r, are the same (Z : (=
&#39;r, &#39;r) t).<br>
&gt;&gt; The constructor S says that the (_, _) t that it takes has some ty=
pe &#39;f,<br>
&gt;&gt; but that the second type variable must be of the form &#39;a -&gt;=
 &#39;r, sort of<br>
&gt;&gt; deconstructing pattern match on the type (if that makes sense).=C2=
=A0 And if<br>
&gt;&gt; that (_, _) t is a Z, where we have stated the two type variables =
have<br>
&gt;&gt; the same value, that means &#39;f must also be (&#39;a -&gt; &#39;=
r). So for the<br>
&gt;&gt; first application of (//) it makes sense.=C2=A0 If we apply (//) a=
gain, the<br>
&gt;&gt; first parameter has the type (int32 -&gt; &#39;_weak1, &#39;_weak1=
) t, but that<br>
&gt;&gt; must actually mean &#39;_weak1 in this case is string -&gt; &#39;_=
weak, and then<br>
&gt;&gt; this is where things become jumbled in my head.=C2=A0 If the passe=
d in (_, _)<br>
&gt;&gt; t must be (string -&gt; &#39;_weak), and the inner type actually m=
ust be (int32<br>
&gt;&gt; -&gt; &#39;_weak), then, the inner inner type must be (&#39;_weak)=
, the type of &#39;r<br>
&gt;&gt; at Z must be (string -&gt; int32 -&gt; &#39;_weak), and since &#39=
;r, and &#39;f are the<br>
&gt;&gt; same type for Z, &#39;f must also be (string -&gt; int32 -&gt; &#3=
9;_weak), and that<br>
&gt;&gt; knowledge propagates back up?=C2=A0 But that doesn&#39;t feel quit=
e right to me,<br>
&gt;&gt; either.<br>
&gt;&gt;<br>
&gt;&gt; With the help of reading other code, I&#39;ve figured out how to m=
ake a<br>
&gt;&gt; function that uses a type like this that works like kprintf, howev=
er<br>
&gt;&gt; where I&#39;m going in this case is that I want to take a function=
 that<br>
&gt;&gt; matches &#39;f and apply it to the result of my functions.<br>
&gt;&gt;<br>
&gt;&gt; Something like:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0let rec bind : type f r. f -&gt; (f, r) t -&gt; r =3D =
fun f -&gt; function<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| Z -&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0f<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0| S (t, v) -&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0bind (f (v ())) t<br>
&gt;&gt;<br>
&gt;&gt; However, this does not compile given:<br>
&gt;&gt;<br>
&gt;&gt; Error: This expression has type f<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 This is not a function; it cannot be ap=
plied.<br>
&gt;&gt;<br>
&gt;&gt; My understanding was if I have Z, and an input that has the type f=
, then<br>
&gt;&gt; that is just the return type since at Z, f and r are the same type=
.=C2=A0 And<br>
&gt;&gt; than at S, I can peel away the type of f by applying the function =
f and<br>
&gt;&gt; then recursively calling.=C2=A0 But my understanding is missing so=
mething.<br>
&gt;&gt;<br>
&gt;&gt; Does this make sense?<br>
&gt;&gt;<br>
&gt;&gt; What am I not understanding?<br>
&gt;&gt;<br>
&gt;&gt; Thank you,<br>
&gt;&gt; /Malcolm<br>
&gt;&gt;<br>
<br>
</blockquote></div>
</blockquote></div>

--0000000000007759870592f838cb--
