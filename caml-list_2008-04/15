Return-Path: <lcoquelle@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id ACD99BBCA
	for <caml-list@yquem.inria.fr>; Wed,  2 Apr 2008 02:54:57 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqkGAEN28kfAXQIm/2dsb2JhbACCPDajSoYc
X-IronPort-AV: E=Sophos;i="4.25,589,1199660400"; 
   d="scan'208";a="24479866"
Received: from discorde.inria.fr ([192.93.2.38])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 02 Apr 2008 02:54:57 +0200
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by discorde.inria.fr (8.13.6/8.13.6) with ESMTP id m320suEN006185
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=OK)
	for <caml-list@inria.fr>; Wed, 2 Apr 2008 02:54:57 +0200
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhsCAEN28kfRVYT5c2dsb2JhbACCPDaOWAEMAwQFCRSUPIYc
X-IronPort-AV: E=Sophos;i="4.25,589,1199660400"; 
   d="scan'208";a="9081566"
Received: from an-out-0708.google.com ([209.85.132.249])
  by mail2-smtp-roc.national.inria.fr with ESMTP; 02 Apr 2008 02:54:56 +0200
Received: by an-out-0708.google.com with SMTP id c24so587041ana.97
        for <caml-list@inria.fr>; Tue, 01 Apr 2008 17:54:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type;
        bh=N+XbaL+5NwpYDrhbmIwkr3uTe9cZuWj6WHShsPUGLaY=;
        b=FmEVrsT69fCHUSmgCcbbwxCL6d8UrLY4oqvXSD959WH/IttM2JR49uZ8CedUbWjj2Y7gy5C4dr63wnJPK2DkZss5GpwO3VlpyLmxnE94Z44XVWiOY4VzVdp4jwyR/InraV9kTikZTNtyuQLvfY9Hz+Utwc0/bSrxb4pepyDTGqo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=message-id:date:from:to:subject:mime-version:content-type;
        b=A5criCsretmgLDws2s5t6tSGqMUiC65Y6gW4wi5jokG6zHdz8XD4FbppjZJytRVMCtjDq1akd85GLGHCjAG1bfXiyXBbGEN4glVD3Q0wCSTFZYNTz25gj4Y+bIW7qS1ZR/HBGfWYIBFVLEF5ugp4BBTrTprH8f9dPfWb9ee9Vgs=
Received: by 10.100.214.16 with SMTP id m16mr20905635ang.101.1207097694528;
        Tue, 01 Apr 2008 17:54:54 -0700 (PDT)
Received: by 10.100.136.16 with HTTP; Tue, 1 Apr 2008 17:54:54 -0700 (PDT)
Message-ID: <d6c7b34d0804011754k34acaecfp7de0f27769b829b@mail.gmail.com>
Date: Wed, 2 Apr 2008 08:54:54 +0800
From: "Ludovic Coquelle" <lcoquelle@gmail.com>
To: Caml <caml-list@inria.fr>
Subject: ocaml and int64
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_1618_28729966.1207097694516"
X-Miltered: at discorde with ID 47F2D960.000 by Joe's j-chkmail (http://j-chkmail . ensmp . fr)!
X-Spam: no; 0.00; ocaml:01 ocaml:01 wrote:01 wrote:01 compile:01 compile:01 integer:01 integer:01 arithmetic:01 arithmetic:01 int:01 int:01 face:97 face:97 module:03 

------=_Part_1618_28729966.1207097694516
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hi,

I wrote a direct translation of a simple algo from F# to ocaml.
(details can be found here:
http://khigia.wordpress.com/2008/03/30/ocaml-vs-f-for-big-integer-surprising-performance-test/
)

The compile F# program (12s) is much faster than Ocaml (30s), probably
because the algo do integer arithmetic with Int64 module (thanks to David
for this info).

Have someone here face this kind of problem (optimizing a code doing
arithmetic on big integer)?
Any advice to improve the Ocaml code (without changing the algo)?

Thanks

------=_Part_1618_28729966.1207097694516
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hi,<br><br>I wrote a direct translation of a simple algo from F# to ocaml.<br>(details can be found here: <a href="http://khigia.wordpress.com/2008/03/30/ocaml-vs-f-for-big-integer-surprising-performance-test/">http://khigia.wordpress.com/2008/03/30/ocaml-vs-f-for-big-integer-surprising-performance-test/</a>)<br>
<br>The compile F# program (12s) is much faster than Ocaml (30s), probably because the algo do integer arithmetic with Int64 module (thanks to David for this info).<br><br>Have someone here face this kind of problem (optimizing a code doing arithmetic on big integer)?<br>
Any advice to improve the Ocaml code (without changing the algo)?<br><br>Thanks<br>

------=_Part_1618_28729966.1207097694516--

