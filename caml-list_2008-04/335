Return-Path: <agarwal1975@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 46552BBC1
	for <caml-list@yquem.inria.fr>; Wed, 30 Apr 2008 00:58:29 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkACAJpEF0hA6bjld2dsb2JhbACCNjWOYwEMBQIECQ8FlS+FYA
X-IronPort-AV: E=Sophos;i="4.25,724,1199660400"; 
   d="scan'208";a="25673594"
Received: from wr-out-0506.google.com ([64.233.184.229])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 30 Apr 2008 00:58:28 +0200
Received: by wr-out-0506.google.com with SMTP id c30so264685wra.21
        for <caml-list@yquem.inria.fr>; Tue, 29 Apr 2008 15:58:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        bh=6NPLv+ZRwKBSp0wuBEN30JISMvJ3lrsX465ziZYGxjM=;
        b=lBGob9vk+kcRzjRkKpihyHt5qvdQ1hgwR6MgxxxGMMFc0bI4+BON+E8LzD8/N+bLPnx3krpKryvHUzdB+c2POo4Y4eEhlIhkXk2C6nSEd7j2xnwHAzE3hNU4zjpZ6Rb1vtjBkiW+TDP4/rOweLg68UsbE7xnHOBt8KztRSSyXSQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=OTQNwRVZr4SAAZcLxjH2SEBVXD3XVrVtVPhpN3ie1tIH5dtX1OwgBEa3N3snaZ6wcjI/XYQJW3n/WuQ68stN2dT3vsOukqrBpEH7FKM2AWpoCN26TrbQ4AJuCjFGTToy5ir3TesyBhhIFrAVRSVTwPDOd9SCWFzca2CFyKMivaM=
Received: by 10.141.178.5 with SMTP id f5mr9180rvp.91.1209509906025;
        Tue, 29 Apr 2008 15:58:26 -0700 (PDT)
Received: by 10.141.41.9 with HTTP; Tue, 29 Apr 2008 15:58:26 -0700 (PDT)
Message-ID: <d8be5ae20804291558i7e5baa47ua2a228e165db0ff5@mail.gmail.com>
Date: Tue, 29 Apr 2008 18:58:26 -0400
From: "Ashish Agarwal" <agarwal1975@gmail.com>
To: "David Teller" <David.Teller@univ-orleans.fr>
Subject: Re: [Caml-list] Invoking the standard library ?
Cc: "David Allsopp" <dra-news@metastack.com>,
	Caml <caml-list@yquem.inria.fr>
In-Reply-To: <1209498604.7286.43.camel@Blefuscu>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_15252_23423872.1209509906026"
References: <1209479205.11285.15.camel@Blefuscu>
	 <003a01c8aa2c$5962f6c0$017ca8c0@countertenor>
	 <1209498604.7286.43.camel@Blefuscu>
X-Spam: no; 0.00; lib:01 lib:01 pervasives:01 pervasives:01 univ-orleans:01 0100,:01 struct:01 endline:01 cmo:01 cmi:01 cmi:01 cmo:01 compilation:01 ocamldep:01 cmx:01 

------=_Part_15252_23423872.1209509906026
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

After various attempts at this problem a couple months ago, I settled for
the following (not ideal) solution. I suffix all modules I am extending with
a 2. Then I package them up in a module named Lib2, which is defined such
that doing "open Lib2" serves as a drop-in replacement for the Standard
Library. As follows:
---- File lib2.ml ----
module String = String2
module List = List2
include Pervasives2 (* note Pervasives2 is "included" *)

---- File string2.ml ----
include String
let f1 = ...
let f2 = ...

---- File list2.ml ----
include List
let f1 = ...
let f2 = ...

---- File pervasives2.ml ----
include Pervasives
let identity x = x
let (<<-) f g x = f (g x)
let (->>) f g x = g (f x)
...

This solution has at least the following flaws:
- one has to write "open Lib2" in every other file
- the module names String2, List2, etc. are visible but we really don't want
them


On Tue, Apr 29, 2008 at 3:50 PM, David Teller <David.Teller@univ-orleans.fr>
wrote:

> On Tue, 2008-04-29 at 20:07 +0100, David Allsopp wrote:
> > I don't quite following the motivation for needing module Inria: there's
> no
> > problem with writing:
> >
> > module String = struct
> >   include String
> >   (* Your functions here *)
> > end
>
> Doesn't work whenever the module is contained in its own file.
>
> (*File string.ml*)
> include String
> let _ = print_endline "Done"
> (*end of file string.ml*)
>
> $ ocamlbuild string.cmo
> Circular build detected
>  (string.cmi already seen in [ string.cmi; string.cmo ])
> Compilation unsuccessful after building 1 target (0 cached) in 00:00:00.
>
> $ ocamldep string.ml
> string.cmo: string.cmo
> string.cmx: string.cmx
>
> $ ocamlc string.ml
> File "string.ml", line 1, characters 8-14:
> Unbound module String
>
> etc.
>
> > but I think perhaps I've not understood the problem properly. That said,
> why
> > is defining module Inria clumsy? I copied the table of contents from the
> > StdLib page and with a couple of %s instructions got
> >
> > module Inria =
> > struct
> >   module Arg = Arg
> >   module Array = Array
> > (* 34 additional lines *)
> >   module StringLabels = StringLabels
> >   module Sys = Sys
> > end
> >
> > Which is exactly what you want, right?
>
> Auto-generating the module is not hard. It's getting everything to
> compile without having to hand-write a Makefile (e.g. with ocamlbuild).
> Indeed, module Inria depends on [the original] String, [the original]
> Sys, etc... and I wouldn't want ocamlbuild or ocamldep to decide
> compiling string.ml before inria.ml.
>
>
> Cheers,
>  David
>
> --
> David Teller
>  Security of Distributed Systems
>  http://www.univ-orleans.fr/lifo/Members/David.Teller
>  Angry researcher: French Universities need reforms, but the LRU act
> brings liquidations.
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

------=_Part_15252_23423872.1209509906026
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

After various attempts at this problem a couple months ago, I settled for the following (not ideal) solution. I suffix all modules I am extending with a 2. Then I package them up in a module named Lib2, which is defined such that doing &quot;open Lib2&quot; serves as a drop-in replacement for the Standard Library. As follows:<div>
<br></div><div>---- File <a href="http://lib2.ml">lib2.ml</a> ----</div><div>module String = String2</div><div>module List = List2</div><div>include Pervasives2 (* note Pervasives2 is &quot;included&quot; *)<br></div><div>
<div><br></div><div>---- File <a href="http://string2.ml">string2.ml</a> ----</div><div>include String</div><div>let f1 = ...</div><div>let f2 = ...</div><div><br></div><div><div>---- File <a href="http://list2.ml">list2.ml</a> ----</div>
<div>include List</div><div>let f1 = ...</div><div>let f2 = ...</div><div><br></div><div>---- File <a href="http://pervasives2.ml">pervasives2.ml</a> ----</div><div><div>include Pervasives</div><div>let identity x = x<br>
</div><div>let (&lt;&lt;-) f g x = f (g x)</div><div>let (-&gt;&gt;) f g x = g (f x)</div><div>...</div><div><br></div><div>This solution has at least the following flaws:</div><div>- one has to write &quot;open Lib2&quot; in every other file</div>
<div>- the module names String2, List2, etc. are visible but we really don&#39;t want them</div><div><br></div></div><br><div class="gmail_quote">On Tue, Apr 29, 2008 at 3:50 PM, David Teller &lt;<a href="mailto:David.Teller@univ-orleans.fr">David.Teller@univ-orleans.fr</a>&gt; wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">On Tue, 2008-04-29 at 20:07 +0100, David Allsopp wrote:<br>
&gt; I don&#39;t quite following the motivation for needing module Inria: there&#39;s no<br>
&gt; problem with writing:<br>
<div class="Ih2E3d">&gt;<br>
&gt; module String = struct<br>
&gt; &nbsp; include String<br>
</div>&gt; &nbsp; (* Your functions here *)<br>
&gt; end<br>
<br>
Doesn&#39;t work whenever the module is contained in its own file.<br>
<br>
(*File string.ml*)<br>
include String<br>
let _ = print_endline &quot;Done&quot;<br>
(*end of file string.ml*)<br>
<br>
$ ocamlbuild string.cmo<br>
Circular build detected<br>
 &nbsp;(string.cmi already seen in [ string.cmi; string.cmo ])<br>
Compilation unsuccessful after building 1 target (0 cached) in 00:00:00.<br>
<br>
$ ocamldep <a href="http://string.ml" target="_blank">string.ml</a><br>
string.cmo: string.cmo<br>
string.cmx: string.cmx<br>
<br>
$ ocamlc <a href="http://string.ml" target="_blank">string.ml</a><br>
File &quot;<a href="http://string.ml" target="_blank">string.ml</a>&quot;, line 1, characters 8-14:<br>
Unbound module String<br>
<br>
etc.<br>
<br>
&gt; but I think perhaps I&#39;ve not understood the problem properly. That said, why<br>
&gt; is defining module Inria clumsy? I copied the table of contents from the<br>
&gt; StdLib page and with a couple of %s instructions got<br>
&gt;<br>
&gt; module Inria =<br>
&gt; struct<br>
&gt; &nbsp; module Arg = Arg<br>
&gt; &nbsp; module Array = Array<br>
&gt; (* 34 additional lines *)<br>
&gt; &nbsp; module StringLabels = StringLabels<br>
&gt; &nbsp; module Sys = Sys<br>
&gt; end<br>
&gt;<br>
&gt; Which is exactly what you want, right?<br>
<br>
Auto-generating the module is not hard. It&#39;s getting everything to<br>
compile without having to hand-write a Makefile (e.g. with ocamlbuild).<br>
Indeed, module Inria depends on [the original] String, [the original]<br>
Sys, etc... and I wouldn&#39;t want ocamlbuild or ocamldep to decide<br>
compiling <a href="http://string.ml" target="_blank">string.ml</a> before <a href="http://inria.ml" target="_blank">inria.ml</a>.<br>
<br>
<br>
Cheers,<br>
<div><div></div><div class="Wj3C7c">&nbsp;David<br>
<br>
--<br>
David Teller<br>
&nbsp;Security of Distributed Systems<br>
 &nbsp;<a href="http://www.univ-orleans.fr/lifo/Members/David.Teller" target="_blank">http://www.univ-orleans.fr/lifo/Members/David.Teller</a><br>
&nbsp;Angry researcher: French Universities need reforms, but the LRU act<br>
brings liquidations.<br>
<br>
_______________________________________________<br>
Caml-list mailing list. Subscription management:<br>
<a href="http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list" target="_blank">http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list</a><br>
Archives: <a href="http://caml.inria.fr" target="_blank">http://caml.inria.fr</a><br>
Beginner&#39;s list: <a href="http://groups.yahoo.com/group/ocaml_beginners" target="_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href="http://caml.inria.fr/bin/caml-bugs" target="_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div></div>

------=_Part_15252_23423872.1209509906026--

