Return-Path: <baguasquirrel@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=HTML_MESSAGE 
	autolearn=disabled version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 98290BBCA
	for <caml-list@yquem.inria.fr>; Sat, 26 Apr 2008 23:32:27 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqkCAC48E0jRVYC+c2dsb2JhbACCNTaObgEMAwQECQ8Fk0aEMg
X-IronPort-AV: E=Sophos;i="4.25,712,1199660400"; 
   d="scan'208";a="25547778"
Received: from fk-out-0910.google.com ([209.85.128.190])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 26 Apr 2008 23:32:27 +0200
Received: by fk-out-0910.google.com with SMTP id b27so6850959fka.11
        for <caml-list@yquem.inria.fr>; Sat, 26 Apr 2008 14:32:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        bh=a6a/w9ElzeBXhh6p1Fj8r84cuH6gVCrUMtooIs3yUf4=;
        b=Qga234ojDAZR7hNW2vnPTqVlByot0uojuXSQp5v34/a3ACUbswHJC5wyAoC1TafrCFTtvxWQgMkvrfo+7/VZa1OiMcI1bFPmNa2QBlfnUxIcnvVUq/J0yc7yg4yQKdCnCxUdKTG04tb8nVTj2GxJ/E0Hc4ODP0dIO95vf344j+Q=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=PHdrEw9GiOlqKw7MRfXNYbWeVGPd+2DHkTiHU7HXlEaDIV34/SDIWuU6y4L3mel6yrU3JNx36c1pXGZIPZh07647Nj5emulYIfuF2g/DnCbcRfkK6XT7bGD+rqYghWdDKRr+ZUWaWMXSffT1fcv5PHO87OAu5a4+bLBaSCJdTRI=
Received: by 10.78.143.13 with SMTP id q13mr39781hud.80.1209245546286;
        Sat, 26 Apr 2008 14:32:26 -0700 (PDT)
Received: by 10.78.187.19 with HTTP; Sat, 26 Apr 2008 14:32:26 -0700 (PDT)
Message-ID: <74cabd9e0804261432o116f4db5w2f5777496da17d94@mail.gmail.com>
Date: Sat, 26 Apr 2008 14:32:26 -0700
From: "Arthur Chan" <baguasquirrel@gmail.com>
To: "Till Crueger" <crueger@informatik.uni-bonn.de>
Subject: Re: [Caml-list] [OSR] Standard syntax extensions ?
Cc: "Richard Jones" <rich@annexia.org>,
	Caml <caml-list@yquem.inria.fr>,
	"David Teller" <David.Teller@univ-orleans.fr>
In-Reply-To: <op.t97j6yp6tayt6l@reitoei.dyndns.info>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_1294_24873825.1209245546285"
References: <1209052182.6180.35.camel@Blefuscu>
	 <74cabd9e0804251337m40811532yb359710630cdbdfd@mail.gmail.com>
	 <20080426074157.GA15640@annexia.org>
	 <op.t97j6yp6tayt6l@reitoei.dyndns.info>
X-Spam: no; 0.00; syntax:01 infix:01 syntax:01 ocaml:01 infix:01 corresponds:01 notation:01 notation:01 type-safe:01 0200,:01 'list:01 haskell:01 ocaml:01 elegantly:01 corresponds:01 
X-Attachments: cset="UTF-8" cset="UTF-8" 

------=_Part_1294_24873825.1209245546285
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

As Till Crueger suggested, sometimes the infix syntax makes more sense.
More than that, one of the intents of the original ML language was to create
a language that was clear in its intents and *provably correct* (at least
that was what I was taught in school.  ocaml apparently isn't completely
provably correct but the functional parts of it are).  That said, there are
some of us who feel that that the python infix syntax is clearer, and as it
corresponds more directly to the mathematical notation, it is just as
provably correct as the List.mem notation is.  If reusing "in" is a big
deal, then maybe we could do "in_list" or "inlist"?  That'd be more
type-safe too.

The python syntax goes further than just the "in" bit, in fact.  They can do
list comprehensions like [for x in blah if f(x)].  Now every functional guru
will recognize this immediately as the bastardization of List.filter.  While
it'd be nice to have that, I come across List.filter much less than
List.exists/mem.

Whatever....  it's just a minor quibble, but this thread was about syntax
extensions, after all.




On Sat, Apr 26, 2008 at 12:53 AM, Till Crueger <
crueger@informatik.uni-bonn.de> wrote:

> On Sat, 26 Apr 2008 09:41:57 +0200, Richard Jones <rich@annexia.org>
> wrote:
>
>  I'm guessing that there will be ambiguity because you're wanting to
> > add yet another meaning to the reserved word 'in'.
> >
> > However I'm not sure why you don't just use 'List.mem', or even:
> >
> >  let mem = List.mem ;;
> >
> >  mem 1 [1;2;3]
> >
>
> Since I am reading the "Haskell School of expressions" right now (to
> become better at functional Programming, not to leave my favourite language
> :)) I am starting to like the way you can turn any function into an infix
> operator by using quotes. Wouldn't it be possible to have something similar
> to this in OCaml? I don't think there is an easy way to do this yet, since I
> didn't find anything on this topic.
>
> I am posting this in this thread, because this would allow us to write the
> above more elegantly as:
> 1 `mem` [1;2;3], which is close to what was originally proposed.
>
> What do you think of this?
>
> bye,
>  Till
>
>
> --
> There once was a man from the sticks
> Who liked to compose limericks.
> But he failed at the sport,
> For he wrote 'em too short.
>



-- 
-----------------------------------------------------------------------
(\__/)
(='.'=)This is Bunny. Copy and paste Bunny into your
(")_(")signature to help him gain world domination.
------------------------------------------------------------------------

------=_Part_1294_24873825.1209245546285
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

As Till Crueger suggested, sometimes the infix syntax makes more sense.&nbsp; More than that, one of the intents of the original ML language was to create a language that was clear in its intents and *provably correct* (at least that was what I was taught in school.&nbsp; ocaml apparently isn&#39;t completely provably correct but the functional parts of it are).&nbsp; That said, there are some of us who feel that that the python infix syntax is clearer, and as it corresponds more directly to the mathematical notation, it is just as provably correct as the List.mem notation is.&nbsp; If reusing &quot;in&quot; is a big deal, then maybe we could do &quot;in_list&quot; or &quot;inlist&quot;?&nbsp; That&#39;d be more type-safe too.<br>
<br>The python syntax goes further than just the &quot;in&quot; bit, in fact.&nbsp; They can do list comprehensions like [for x in blah if f(x)].&nbsp; Now every functional guru will recognize this immediately as the bastardization of List.filter.&nbsp; While it&#39;d be nice to have that, I come across List.filter much less than List.exists/mem.<br>
<br>Whatever....&nbsp; it&#39;s just a minor quibble, but this thread was about syntax extensions, after all.<br><br><br><br><br><div class="gmail_quote">On Sat, Apr 26, 2008 at 12:53 AM, Till Crueger &lt;<a href="mailto:crueger@informatik.uni-bonn.de">crueger@informatik.uni-bonn.de</a>&gt; wrote:<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="Ih2E3d">On Sat, 26 Apr 2008 09:41:57 +0200, Richard Jones &lt;<a href="mailto:rich@annexia.org" target="_blank">rich@annexia.org</a>&gt; wrote:<br>

<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
I&#39;m guessing that there will be ambiguity because you&#39;re wanting to<br>
add yet another meaning to the reserved word &#39;in&#39;.<br>
<br>
However I&#39;m not sure why you don&#39;t just use &#39;List.mem&#39;, or even:<br>
<br>
 &nbsp;let mem = List.mem ;;<br>
<br>
 &nbsp;mem 1 [1;2;3]<br>
</blockquote>
<br></div>
Since I am reading the &quot;Haskell School of expressions&quot; right now (to become better at functional Programming, not to leave my favourite language :)) I am starting to like the way you can turn any function into an infix operator by using quotes. Wouldn&#39;t it be possible to have something similar to this in OCaml? I don&#39;t think there is an easy way to do this yet, since I didn&#39;t find anything on this topic.<br>

<br>
I am posting this in this thread, because this would allow us to write the above more elegantly as:<br>
1 `mem` [1;2;3], which is close to what was originally proposed.<br>
<br>
What do you think of this?<br>
<br>
bye,<br>
 &nbsp;Till<br><font color="#888888">
<br>
<br>
-- <br>
There once was a man from the sticks<br>
Who liked to compose limericks.<br>
But he failed at the sport,<br>
For he wrote &#39;em too short.<br>
</font></blockquote></div><br><br clear="all"><br>-- <br>-----------------------------------------------------------------------<br> (\__/)<br> (=&#39;.&#39;=)This is Bunny. Copy and paste Bunny into your<br> (&quot;)_(&quot;)signature to help him gain world domination.<br>
------------------------------------------------------------------------

------=_Part_1294_24873825.1209245546285--

