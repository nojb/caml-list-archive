Return-Path: <garrigue@math.nagoya-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id D3FA3BBCA
	for <caml-list@yquem.inria.fr>; Tue,  1 Apr 2008 08:34:05 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAHJ08UeCNhAB/2dsb2JhbACqdw
X-IronPort-AV: E=Sophos;i="4.25,585,1199660400"; 
   d="scan'208";a="10245507"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 01 Apr 2008 08:34:04 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m316Y0Pi011524;
	Tue, 1 Apr 2008 15:34:00 +0900 (JST)
Date: Tue, 01 Apr 2008 15:33:53 +0900 (JST)
Message-Id: <20080401.153353.71907522.garrigue@math.nagoya-u.ac.jp>
To: rathereasy@gmail.com
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] adding methods to object
From: Jacques Garrigue <garrigue@math.nagoya-u.ac.jp>
In-Reply-To: <f74178430803312250n5b9b88fbg73a7342575ccd221@mail.gmail.com>
References: <f74178430803312250n5b9b88fbg73a7342575ccd221@mail.gmail.com>
X-Mailer: Mew version 4.2 on Emacs 22.1 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; caml-list:01 garrigue:03 garrigue:03 jacques:03 jacques:03 let:03 nagoya-u:04 classes:08 wrap:08 object:09 object:09 wrapper:10 end:12 methods:12 methods:12 

From: "Jacques Le Normand" <rathereasy@gmail.com>

> is it possible to add methods to an object?
> in other words, if an object has type <a:b,c:d>, is it possible to create an
> object of type <a:b,c:d,e:f> ?

No, you can only add methods to classes.
The only thing you can do with an object is build a wrapper object or
class, which forwards original methods to the base object:

let wrap o =
  object
    method a = o#a
    method c = o#c
    method e = ...
  end

Jacques Garrigue

