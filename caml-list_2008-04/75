Return-Path: <keiko@kurims.kyoto-u.ac.jp>
X-Spam-Checker-Version: SpamAssassin 3.1.3 (2006-06-01) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.1.3
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 7AB8DBBCA
	for <caml-list@yquem.inria.fr>; Fri,  4 Apr 2008 17:45:24 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAJ/p9UeCNhAB/2dsb2JhbACsDQ
X-IronPort-AV: E=Sophos;i="4.25,605,1199660400"; 
   d="scan'208";a="24610289"
Received: from kurims.kurims.kyoto-u.ac.jp ([130.54.16.1])
  by mail4-smtp-sop.national.inria.fr with ESMTP; 04 Apr 2008 17:45:21 +0200
Received: from localhost (orion [130.54.16.5])
	by kurims.kurims.kyoto-u.ac.jp (8.13.8/8.13.8) with ESMTP id m34FjHjT014008
	for <caml-list@yquem.inria.fr>; Sat, 5 Apr 2008 00:45:17 +0900 (JST)
Date: Sat, 05 Apr 2008 00:45:16 +0900 (JST)
Message-Id: <20080405.004516.46634800.keiko@kurims.kyoto-u.ac.jp>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] recursive modules: Cannot safely evaluate the
 definition
From: Keiko Nakata <keiko@kurims.kyoto-u.ac.jp>
In-Reply-To: <wwu63uxd4p2.fsf@tandem.cs.ru.nl>
References: <20080404.180015.125124978.keiko@kurims.kyoto-u.ac.jp>
	<47F622A5.9060707@lri.fr>
	<wwu63uxd4p2.fsf@tandem.cs.ru.nl>
X-Mailer: Mew version 4.2 on Emacs 20.7 / Mule 4.1 (AOI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Spam: no; 0.00; recursive:01 functors:01 recursive:01 ocaml:01 functor:01 sig:01 sig:01 val:01 functor:01 struct:01 val:01 wrote:01 rec:01 caml-list:01 int:01 

Thank you for the correction and citation.

>    Keiko Nakata wrote:
>    > I think that functors cannot be recursive in the current OCaml.

Yes, I was incorrect.
We have: 

module rec F: functor (X:sig end) -> sig val f : int -> int end = 
  functor(X:sig end) -> struct  
    let f x = if x = 0 then 0 else M.f (x-1)
  end

and M : sig val f: int -> int end = F(M)

This should imply interesting examples are available. 

Best,
Keiko

