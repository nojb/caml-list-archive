Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 34CD2BBBB
	for <caml-list@yquem.inria.fr>; Fri, 31 Mar 2006 15:42:43 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k2VDggJ0030765
	for <caml-list@yquem.inria.fr>; Fri, 31 Mar 2006 15:42:42 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA24291 for <caml-list@pauillac.inria.fr>; Fri, 31 Mar 2006 15:42:41 +0200 (MET DST)
Received: from justus.rz.uni-saarland.de (justus.rz.uni-saarland.de [134.96.7.31])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k2VDgfC0030762
	for <caml-list@inria.fr>; Fri, 31 Mar 2006 15:42:41 +0200
Received: from uni-sb.de (uni-sb.de [134.96.7.230])
	by justus.rz.uni-saarland.de (8.12.11.20060308/8.12.10) with ESMTP id k2VDgejY20458167;
	Fri, 31 Mar 2006 15:42:40 +0200 (CEST)
Received: from mail.cs.uni-sb.de (mail.cs.uni-sb.de [134.96.254.200])
	by uni-sb.de (8.13.6/2006032300) with ESMTP id k2VDgdJx020708;
	Fri, 31 Mar 2006 15:42:39 +0200 (CEST)
Received: from mail.st.cs.uni-sb.de (goscinny.cs.uni-sb.de [134.96.235.32])
	by mail.cs.uni-sb.de (8.13.6/2006032300) with ESMTP id k2VDgdRA027370;
	Fri, 31 Mar 2006 15:42:39 +0200 (CEST)
Received: from [134.96.235.101] (jonagold.cs.uni-sb.de [134.96.235.101])
	by mail.st.cs.uni-sb.de (Postfix) with ESMTP id 5F30B1BD87;
	Fri, 31 Mar 2006 15:42:39 +0200 (CEST)
In-Reply-To: <OFC99B0F81.298F7B60-ONC1257142.00424AC7-C1257142.0046A500@philips.com>
References: <OFC99B0F81.298F7B60-ONC1257142.00424AC7-C1257142.0046A500@philips.com>
Mime-Version: 1.0 (Apple Message framework v623)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <e16b969021cf185b0879857ca0f4c0d5@cs.uni-sb.de>
Content-Transfer-Encoding: 7bit
Cc: Caml List <caml-list@inria.fr>
From: Christian Lindig <lindig@cs.uni-sb.de>
Subject: Re: [Caml-list] efficient binary relations?
Date: Fri, 31 Mar 2006 15:42:37 +0200
To: Sebastian Egner <sebastian.egner@philips.com>
X-Mailer: Apple Mail (2.623)
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-1.5.1 (justus.rz.uni-saarland.de [134.96.7.31]); Fri, 31 Mar 2006 15:42:40 +0200 (CEST)
X-AntiVirus: checked by AntiVir Milter (version: 1.1.1-9; AVE: 6.34.0.14; VDF: 6.34.0.124; host: AntiVir2)
X-Miltered: at nez-perce with ID 442D31D2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 442D31D1.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; lindig:01 lindig:01 binary:01 computes:01 applicative:01 cubic:98 wrote:01 uni-sb:01 caml-list:01 structures:01 data:02 data:02 clarify:02 functional:02 suggestion:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


On Mar 31, 2006, at 2:50 PM, Sebastian Egner wrote:

> Please could you clarify the circumstances a little bit?
>
> 1. Are you looking for a data structure that you set
> up for a fixed R once and then query many times for
> different X? Or are you looking for a dynamic data
> structure in which you keep changing R? Or are you
> looking for a 'functional data structure' where the
> older versions of R are preserved? Or for a functional
> data structure where R is fixed, but the queries X
> are constructed incrementally?
>
> 2. Is R sparse, i.e. is |R| << |\X|*|\Y|?

First, thanks for a detailed suggestion! R is sparse, constructed once, 
and queried often. As I mentioned, this is in the context of concept 
analysis. The ' operation computes the maximal blocks (or concepts) in 
a cross table; typically their number grows cubic with the size |R| of 
the relation - hence the importance of the ' operation. (In the worst 
case, when the matrix is densely populated, there may be exponentially 
many blocks.)

I generally prefer applicative data structures (without side effects) 
but understand that this is not always possible.

-- Christian

