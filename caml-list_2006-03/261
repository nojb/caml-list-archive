Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 8DA57BBBB
	for <caml-list@yquem.inria.fr>; Fri, 31 Mar 2006 14:42:37 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k2VCgbar024573
	for <caml-list@yquem.inria.fr>; Fri, 31 Mar 2006 14:42:37 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA23740 for <caml-list@pauillac.inria.fr>; Fri, 31 Mar 2006 14:42:36 +0200 (MET DST)
Received: from justus.rz.uni-saarland.de (justus.rz.uni-saarland.de [134.96.7.31])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k2VCga03024569
	for <caml-list@inria.fr>; Fri, 31 Mar 2006 14:42:36 +0200
Received: from uni-sb.de (uni-sb.de [134.96.7.230])
	by justus.rz.uni-saarland.de (8.12.11.20060308/8.12.10) with ESMTP id k2VCgYbb23463056;
	Fri, 31 Mar 2006 14:42:34 +0200 (CEST)
Received: from mail.cs.uni-sb.de (mail.cs.uni-sb.de [134.96.254.200])
	by uni-sb.de (8.13.6/2006032300) with ESMTP id k2VCgYLb011539;
	Fri, 31 Mar 2006 14:42:34 +0200 (CEST)
Received: from mail.st.cs.uni-sb.de (goscinny.cs.uni-sb.de [134.96.235.32])
	by mail.cs.uni-sb.de (8.13.6/2006032300) with ESMTP id k2VCgX38024411;
	Fri, 31 Mar 2006 14:42:33 +0200 (CEST)
Received: from [134.96.235.101] (jonagold.cs.uni-sb.de [134.96.235.101])
	by mail.st.cs.uni-sb.de (Postfix) with ESMTP id 77BB91BD98;
	Fri, 31 Mar 2006 14:42:33 +0200 (CEST)
In-Reply-To: <1143807710.8248.6.camel@rosella.wigram>
References: <4120ea8c70420ccd2f670bd9e4433527@cs.uni-sb.de> <1143807710.8248.6.camel@rosella.wigram>
Mime-Version: 1.0 (Apple Message framework v623)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <3987bcf3520a409927becb63db474644@cs.uni-sb.de>
Content-Transfer-Encoding: 7bit
Cc: Caml List <caml-list@inria.fr>
From: Christian Lindig <lindig@cs.uni-sb.de>
Subject: Re: [Caml-list] efficient binary relations?
Date: Fri, 31 Mar 2006 14:42:32 +0200
To: skaller <skaller@users.sourceforge.net>
X-Mailer: Apple Mail (2.623)
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-1.5.1 (justus.rz.uni-saarland.de [134.96.7.31]); Fri, 31 Mar 2006 14:42:34 +0200 (CEST)
X-AntiVirus: checked by AntiVir Milter (version: 1.1.1-9; AVE: 6.34.0.14; VDF: 6.34.0.124; host: AntiVir2)
X-Miltered: at nez-perce with ID 442D23BD.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 442D23BC.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; lindig:01 lindig:01 binary:01 binary:01 ocaml:01 bitvectors:01 high-level:01 tokens:01 functor:01 2006:98 wrote:01 wrote:01 uni-sb:01 caml-list:01 polymorphic:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


On Mar 31, 2006, at 2:21 PM, skaller wrote:

> On Fri, 2006-03-31 at 13:56 +0200, Christian Lindig wrote:
>> I am looking for an efficient representation of binary relations in
>> OCaml. I have used bitvectors in the past but would like to use a more
>> high-level and less imperative data structure.
>
> You have said nothing about the type of elements and their
> distribution..

The typical case will be strings or other small tokens as elements but 
I'd like to keep this as a (functor) parameter or have a polymorphic 
data structure. Relations are typically sparsely populated but can be 
large (1000x1000). Sorry, but I don't have hard numbers.

-- Christian

