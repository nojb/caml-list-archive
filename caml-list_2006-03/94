Return-Path: <padator@wanadoo.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 006ECBB81
	for <caml-list@yquem.inria.fr>; Wed,  8 Mar 2006 11:11:40 +0100 (CET)
Received: from smtp16.wanadoo.fr (smtp16.wanadoo.fr [193.252.23.89])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id k28ABeU8004965
	for <caml-list@yquem.inria.fr>; Wed, 8 Mar 2006 11:11:40 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf1603.wanadoo.fr (SMTP Server) with ESMTP id 93E8B7000096
	for <caml-list@yquem.inria.fr>; Wed,  8 Mar 2006 11:11:40 +0100 (CET)
Received: from wwinf1632 (wwinf1632 [172.22.147.106])
	by mwinf1603.wanadoo.fr (SMTP Server) with ESMTP id 89EC47000091;
	Wed,  8 Mar 2006 11:11:40 +0100 (CET)
X-ME-UUID: 20060308101140565.89EC47000091@mwinf1603.wanadoo.fr
Message-ID: <1474655.1141812700555.JavaMail.www@wwinf1632>
From: yoann padioleau <padator@wanadoo.fr>
Reply-To: padator@wanadoo.fr
To: skaller <skaller@users.sourceforge.net>,
	Asfand Yar Qazi <email@asfandyar.cjb.net>
Subject: Re: [Caml-list] STM support in OCaml
Cc: caml-list@yquem.inria.fr
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
X-Originating-IP: [193.54.76.165]
X-Wum-Nature: EMAIL-NATURE
X-WUM-FROM: |~|
X-WUM-TO: |~||~|
X-WUM-CC: |~|
X-WUM-REPLYTO: |~|
Date: Wed,  8 Mar 2006 11:11:40 +0100 (CET)
X-Miltered: at concorde with ID 440EADDC.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 runtime:01 ocaml:01 runtime:01 caml-list:01 structures:01 data:02 seems:03 programming:03 guess:03 mutex:03 mutex:03 locks:03 processors:04 implement:06 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: *
X-Spam-Status: No, score=1.8 required=5.0 tests=DNS_FROM_RFC_ABUSE,
	DNS_FROM_RFC_POST autolearn=disabled version=3.0.3


> > You make several claims:
> > 
> > STM is not lock free.
> > STM is not useful on a small number of processors
> > 
> > As for claim 1.  "Lock-free" doesn't mean what you think it does. 
> 
> I know what STM does, thank you: I intend to implement it
> myself in my own programming language. Maybe you should
> read more carefully.
> 
> I said "protected by a mutex under the hood." which means
> sure, the programmer is not writing locks, but they're used
> in the implementation and the associated costs are still paid.

I have read (very fastly) the atomcaml paper and I don't think they use "mutex under the hood".
It seems that they just log stuff and rollback. I guess that when you want to implement 
STM on multiprocessor you may need to mutex stuff (the internal data structures maintained by the STM runtime),
but as ocaml runtime does not use multiprocessor, they dont need it.



