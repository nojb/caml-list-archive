Return-Path: <skaller@users.sourceforge.net>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 968DFBB81
	for <caml-list@yquem.inria.fr>; Wed,  8 Mar 2006 12:56:22 +0100 (CET)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id k28BuKru006694
	for <caml-list@yquem.inria.fr>; Wed, 8 Mar 2006 12:56:21 +0100
Received: from [192.168.1.200] (ppp9-113.lns1.syd7.internode.on.net [59.167.9.113])
	by smtp3.adl2.internode.on.net (8.13.5/8.13.5) with ESMTP id k28Bu6Xm084887;
	Wed, 8 Mar 2006 22:26:08 +1030 (CST)
	(envelope-from skaller@users.sourceforge.net)
Subject: Re: [Caml-list] STM support in OCaml
From: skaller <skaller@users.sourceforge.net>
To: Gerd Stolpmann <info@gerd-stolpmann.de>
Cc: padator@wanadoo.fr, Asfand Yar Qazi <email@asfandyar.cjb.net>,
	caml-list@yquem.inria.fr
In-Reply-To: <1141817549.10771.63.camel@localhost.localdomain>
References: <1474655.1141812700555.JavaMail.www@wwinf1632>
	 <1141817549.10771.63.camel@localhost.localdomain>
Content-Type: text/plain
Organization: Async P/L
Date: Wed, 08 Mar 2006 23:04:56 +1100
Message-Id: <1141819496.20944.534.camel@budgie.wigram>
Mime-Version: 1.0
X-Mailer: Evolution 2.4.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 440EC664.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocaml:01 gerd:01 stolpmann:01 async:01 2006:98 consultants:98 wrote:01 sourceforge:01 sourceforge:01 caml-list:01 realtime:01 concurrency:02 misleading:03 anyway:06 wed:07 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

On Wed, 2006-03-08 at 12:32 +0100, Gerd Stolpmann wrote:

> Anyway, I think this question is misleading. The point is not to
> establish locking schemes that use the hardware better (i.e. that are
> faster), but to help programmers writing correct code.

My aim would be to do both -- they're not independent.
Who cares about concurrency if not to try to do some job faster?
And of course it's no good if you do the wrong thing faster :)

-- 
John Skaller <skaller at users dot sourceforge dot net>
Async PL, Realtime software consultants
Checkout Felix: http://felix.sourceforge.net

