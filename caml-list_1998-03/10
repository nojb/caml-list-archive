Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA31344 for caml-redistribution; Wed, 11 Mar 1998 09:23:50 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA18919 for <caml-list@pauillac.inria.fr>; Tue, 10 Mar 1998 20:42:28 +0100 (MET)
Received: from wagga.cs.umass.edu (wagga.cs.umass.edu [128.119.40.167])
	by nez-perce.inria.fr (8.8.7/8.8.5) with ESMTP id UAA22728
	for <caml-list@inria.fr>; Tue, 10 Mar 1998 20:42:25 +0100 (MET)
Received: (from ajenkins@localhost)
	by wagga.cs.umass.edu (8.8.6/8.8.6) id OAA09854;
	Tue, 10 Mar 1998 14:42:23 -0500
Date: Tue, 10 Mar 1998 14:42:23 -0500
Message-Id: <199803101942.OAA09854@wagga.cs.umass.edu>
From: "Adam P. Jenkins" <ajenkins@cs.umass.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: Brian Rogoff <bpr@best.com>
Cc: caml-list@inria.fr
Subject: Overloading
In-Reply-To: <Pine.BSF.3.96.980309124523.7835A-100000@shell5.ba.best.com>
References: <Pine.BSF.3.96.980309124523.7835A-100000@shell5.ba.best.com>
X-Mailer: VM 6.22 under 19.15p2 XEmacs Lucid
Sender: weis

Brian Rogoff writes:
 > (My apologies for the lack of a French version of this message)
Same here.

 > 
 > Hi Caml'ers,
 > 	One of the things I miss the most when I'm working in Caml is 
 > overloading. There are numerous situations, such as arithmetic, linear 
 > algebra (where I may want multiplication between scalars, vectors, 
 > matrices, and higher order tensors), I/O (read/write/open), etc. where 
 > it is IMO the "right thing". Are there any plans to add some form of 
 > overloading to Caml in the future? I know that the Haskell folks plan to 
 > remove the single parameter restriction in type classes and gain more 
 > expressiveness in these areas, but none of the ML family of languages 
 > I know of support any overloading.
 > 
 > 	My experience with overloading in Ada is almost entirely positive.
 > 

I too have missed overloading in ML/Caml.  However, it seems to me
that function overloading is opposed to type inference; you can't have
both at the same time without too many explicit casts, which destroys
the point of function overloading.  Are there any languages which have
both automatic type inference and function overloading?

Adam







