Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA31216 for caml-redistribution@pauillac.inria.fr; Sat, 15 Apr 2000 22:42:06 +0200 (MET DST)
Resent-Message-Id: <200004152042.WAA31216@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA30158 for <caml-list@pauillac.inria.fr>; Fri, 14 Apr 2000 11:34:52 +0200 (MET DST)
Received: from julie.univ-savoie.fr (univax.univ-savoie.fr [193.48.120.32])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id LAA05828
	for <caml-list@inria.fr>; Fri, 14 Apr 2000 11:34:51 +0200 (MET DST)
Received: from univ-savoie.fr (lama-d134.univ-savoie.fr [193.48.123.134])
          by julie.univ-savoie.fr (8.9.3/jtpda-5.3.3) with ESMTP id LAA43288
          for <caml-list@inria.fr>; Fri, 14 Apr 2000 11:34:49 +0200 (CEST)
Sender: raffalli@univ-savoie.fr
Message-ID: <38F6E5C8.972110C3@univ-savoie.fr>
Date: Fri, 14 Apr 2000 11:32:56 +0200
From: Christophe Raffalli <Christophe.Raffalli@univ-savoie.fr>
Organization: Laboratoire de =?iso-8859-1?Q?Math=E9matiques?=, 
	=?iso-8859-1?Q?Universit=E9?= de Savoie
X-Mailer: Mozilla 4.7 [fr] (X11; I; Linux 2.2.14-15mdksmp i686)
X-Accept-Language: fr, en
MIME-Version: 1.0
CC: caml-list@inria.fr
Subject: Caml wish list
References: <38E7F364.5D24BB7C@motorola.com>
		<14572.49274.910966.673172@cylinder.csl.sri.com>
		<38ED71B6.30118608@motorola.com>
		<14574.1721.508470.790475@cylinder.csl.sri.com>
		<38F270CF.221F5BD0@motorola.com>
		<20000411195808.62154@pauillac.inria.fr>
		<38F3D520.9CD19485@motorola.com>
		<14581.28385.615880.93928@pc89.lri.fr> <14581.55775.16448.947429@tkb.mpl.com>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Sat, 15 Apr 2000 22:42:06 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

Here is a list of request for Ocaml that would really make the libray
for formal and numerical calculus better (see
http://www.raffalli.univ-savoie.fr/~RAFFALLI/formel.html) : 


- include with ...

	would allow multiple inheritance in signature !

- include in structure.

	We should also think about multiple inheritance and
	even override in this case. But a simple implementation 
	would already be useful.

- typing of structure containing modules is problematic:

	if you write:

	module F = functor(M:M) -> 
	struct 
	  module M =M
	end

	Then you have a module Q:Q where Q is a subtype of M.

	If you type R = F(Q) then
	the type of R.M is M even if the type system knows that
	R.M = Q.

	This makes it impossible in some cases to put modules as member 
	of structure ! It was for instance impossible to put the Ring of 
	scalar as a member of the structure Vector, because when this
	Ring is a Field, we may loose this information and fail to
	type-check perfectly correct program.

- Infix operator like + ...

	Every body will agree that infix operator are needed. So
	R.+ should be allowed as an infix operator and R.(+) would
	be prefix.

	One could event think to reuse symbols like + for many functions.
	Here is a simple proposal on how to do it that I would really enjoy to 
	see working :

	Two new commands in OCaml structure (the syntax can be changed):

	share + : 'a -> 'a -> 'a

	this makes that + exists and is type-checked with type 'a -> 'a -> 'a

 	share + = add_int
	share + = add_float
	...

	this means that, after type checking, + will take the first value 
	among  add_int, add_float, ... whose type matches the infered type for
+.

	If add_int is tested first, this will be compatible with existing code.
	This is easy to implement (I think).

	One could even allow some kind of recursive macros !

	share + = fun (x,y) (x',y') -> (x+x', y+y')
	share + = List.map2 (+)
	share + = Array.map2 (+)

	This is a bit mode difficult to implement, but it seems feasible.

- The library is too slow when using floating points.

	One need to add inlining for functor and functions 
	before doing the floating point optimisations. 

	A function or functor that is used only once 
	should be inlined regardless of its size (no huge code size 
	explosion even if the function is used once in every .ml files)

	A syntax for inlining on demand (when applying and/or) defining the
	function should be provided. A way would be to have three new
	choices when defining a function or functor:
	- normal
	- always inlined
	- inlined on demand



-- 
Christophe Raffalli
Université de Savoie
Batiment Le Chablais, bureau 21
73376 Le Bourget-du-Lac Cedex

tél: (33) 4 79 75 81 03
fax: (33) 4 79 75 87 42
mail: Christophe.Raffalli@univ-savoie.fr
www: http://www.lama.univ-savoie.fr/~RAFFALLI


