Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA27095 for caml-redistribution@pauillac.inria.fr; Mon, 17 Apr 2000 21:01:37 +0200 (MET DST)
Resent-Message-Id: <200004171901.VAA27095@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA22109 for <caml-list@pauillac.inria.fr>; Mon, 17 Apr 2000 14:51:42 +0200 (MET DST)
Received: from indigo.recherche.enac.fr (indigo.recherche.enac.fr [195.220.158.66])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id OAA03885
	for <caml-list@inria.fr>; Mon, 17 Apr 2000 14:51:41 +0200 (MET DST)
Received: from rouge.recherche.enac.fr (root@rouge.recherche.enac.fr [195.220.158.70]) by indigo.recherche.enac.fr (8.8.6 (PHNE_14041)/8.6.11) with ESMTP id OAA08945; Mon, 17 Apr 2000 14:51:34 +0200 (METDST)
Received: from recherche.enac.fr (alliot@localhost [127.0.0.1]) by rouge.recherche.enac.fr (8.9.3/8.6.11) with ESMTP id OAA03753; Mon, 17 Apr 2000 14:51:31 +0200
X-Authentication-Warning: rouge.recherche.enac.fr: Host alliot@localhost [127.0.0.1] claimed to be recherche.enac.fr
Sender: alliot@recherche.enac.fr
Message-ID: <38FB08D3.B6E5B5E0@recherche.enac.fr>
Date: Mon, 17 Apr 2000 14:51:31 +0200
From: jean-marc alliot <alliot@recherche.enac.fr>
Organization: Laboratoire d'Optimisation Globale
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12 i686)
X-Accept-Language: fr-FR
MIME-Version: 1.0
To: John Max Skaller <skaller@maxtal.com.au>, caml-list@inria.fr
Subject: Re: When functional languages can be accepted by industry?
References: <38E7F364.5D24BB7C@motorola.com>
			<14572.49274.910966.673172@cylinder.csl.sri.com>
			<38ED71B6.30118608@motorola.com>
			<14574.1721.508470.790475@cylinder.csl.sri.com>
			<38F270CF.221F5BD0@motorola.com>
			<20000411195808.62154@pauillac.inria.fr>
			<38F3D520.9CD19485@motorola.com> <14581.28385.615880.93928@pc89.lri.fr> <38F5FCFA.2D7F3C3B@maxtal.com.au>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 17 Apr 2000 21:01:37 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

John Max Skaller wrote:

>
> > > 1. Current functional languages do not have enough library support:
> >
> > Please. ocaml has  the most wonderful standard library  that any other
> > language  has ever had.  Have a  look in  the reference  manual before
> > stating such non-sense.
>
>         Oh come on. Have a look at a real library before making
> such non-sense claims. Considerable functionality is missing,
> the library is inconsistent, the documentation is incomplete,
> and it is less generic than C++

I don't think there are lot of things missing in the STANDARD library. I
don't see why it is inconsistent. I don't see why documentation is
incomplete. Things might be missing in the general library, yes.

>

>
>         Show me a functional programming language that is as fast
> as C++ and I will give up C++. :-)
>

CAML. Just try programming the fibonacci function in both languages...  -:)

CAML becomes slow when you use some of the nice functional features of the
language. But if you write CAML as you write C code you won't lose much
speed. Over the years, students and development programmers have developped
thousand of lines of code in many different languages in my team and
writing or rewriting in CAML had  a limited impact on the speed of the
program.

Again, I don't like religious opinions, but I am anyway going to explain a
few things. I am sorry to use personal examples, but I know them very well
-:)

I understand that for highly time critical fragment of codes that are
extremely closed to machine architecture, C is a reasonable choice. I am an
old game programmer, and once had a program (otage) based on pattern
recognition, who had its 15 minutes of glory on the Internet Othelo Server
and entered the top 5 list. It is written in C and assembly language, it is
using each and every bit of every byte of memory; it is fast indeed, and C
is efficient.
But I stopped maintaining it, because it has become a real pain. Even when
the code is documented, the program is extremely complex, and when I stop
working on it for a few months, it is almost impossible to re-enter the
code. I am too old and too busy now to work on it anymore. And I don't like
programs core dumping anymore either.
C should be only used by experienced programmers, who are extremely careful
of everything they write, with unitary tests for each and every function,
and only for time critical functions.
On the opposite, I wrote a chinese checkers program in CAML this year in a
few days (it was a challenge with some friends). It is in no way
ridiculous, and is extremely easy to maintain.

I understand also people using ADA for programs that need to be highly
portable, easy to maintain and whose life span will be long. The ADA code I
wrote with ALSYS and VERDIX compiler for my PhD thesis 15 years ago (an
extension of PROLOG to modal logic) is still compiling without any
modification on the gnat compiler today. ADA includes representation clause
that makes it almost independant to anything including machine
architecture.
ADA is not as fast as C or as easy to use as CAML, but it is definitely a
decent compromise for many industrial applications. It suffered from a very
bad integration with UNIX (always worked well with VMS) at the beginning,
especially when I/O and multi-tasking were both involved. This is quite
solved now (thanks to clone()...)

I am extremely sorry to say that I don't understand people using C++when
they have a choice.
This language is, according to me, a collection of every little thing that
should never be done. Templates are, from a theoritical point of view, a
matter of laugh, and generally not compatible between different compilers
(I have examples every year with students coming back from training periods
with programs written in C++, and who speend hours to make them compile
with the University compilers and machines). For people knowing object
theory and its EIFFEL implementation, the C++ object system looks at least
shaky. Operators overloading has been pushed to its ugliest limit (it does
exist in ADA, but WITH and USE clauses give at least meaningfull
informations) : I saw once an experienced programmer who was using a
library developped by someone who had left the development team spending
two days to find a "core dumping" bug in the C++ library left by this
former developper. The fragment of code looked like this:
void f(foobar *ival)
{
foobar *l;
for (l=ival; l<>NULL;l++) {...}
}
Unfortunately, the ++ operator had been overloaded for type foobar
somewhere else and was no more a pointer incrementation, but was in fact:

l = l->next
where next was a field of the foobar structure : the problem was an
incorrectly initialized field and not an "incorrectly" terminated pointer
array.
I could write endlessly about C++  problems ; I had to use it for a few
years for development purpose, and, if I first began to like it, I soon
learned to hate it.
JAVA has corrected many problems, such as memory allocation or the infamous
core dumping behaviour. But it is not that fast...

I love programming. I began when i was 15 (almost 25 years ago) on small
machines, I learned assembly language, BASIC, FORTRAN and C before learning
anything about computer science theory. To summarize, I  did mathematics at
the University and hacking at home ; I went back to University to learn
computer science when I was 26, and I had then lot of bad programming
habits.
It took me a long time to understand that there were more proper ways to
write programs.
I also had to realize that speed is far from being the only concern, and
that fast but buggy/unmaintanaible programs are useless in team
development. Functional programming is painful to learn (and it was painful
for me) when you are used to imperative programming. You have to learn to
think differently before you can really master the language. But it is
worth the effort.

JMA



