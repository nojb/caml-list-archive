Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA10909 for caml-redistribution@pauillac.inria.fr; Sat, 15 Apr 2000 22:36:14 +0200 (MET DST)
Resent-Message-Id: <200004152036.WAA10909@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA23574 for <caml-list@pauillac.inria.fr>; Thu, 13 Apr 2000 19:00:21 +0200 (MET DST)
Received: from localhost.localdomain (kenny110.zip.com.au [61.8.18.238])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id TAA13673;
	Thu, 13 Apr 2000 19:00:12 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id CAA02321;
	Fri, 14 Apr 2000 02:59:38 +1000
Sender: root@localhost.localdomain
Message-ID: <38F5FCFA.2D7F3C3B@maxtal.com.au>
Date: Fri, 14 Apr 2000 02:59:38 +1000
From: John Max Skaller <skaller@maxtal.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Jean-Christophe Filliatre <Jean-Christophe.Filliatre@lri.fr>
CC: "Dennis (Gang) Chen" <Dennis.G.Chen@motorola.com>,
        Pierre Weis <Pierre.Weis@inria.fr>, caml-list@inria.fr
Subject: Re: When functional languages can be accepted by industry?
References: <38E7F364.5D24BB7C@motorola.com>
		<14572.49274.910966.673172@cylinder.csl.sri.com>
		<38ED71B6.30118608@motorola.com>
		<14574.1721.508470.790475@cylinder.csl.sri.com>
		<38F270CF.221F5BD0@motorola.com>
		<20000411195808.62154@pauillac.inria.fr>
		<38F3D520.9CD19485@motorola.com> <14581.28385.615880.93928@pc89.lri.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Sat, 15 Apr 2000 22:36:14 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

Jean-Christophe Filliatre wrote:
> 
> > more attractive than C++. In ocaml, there are arrays, structures
> > and objects etc, but no such things like pointers in C.
> 
> Wrong. You have references, which are quite better than pointers (they
> are typed, 

	So are C/C++ ones ..

> and necessarily initialized)

	.. which is a serious problem. And C++ also has 'necessarily
initialised' references :-)

> > 1. Current functional languages do not have enough library support:
> 
> Please. ocaml has  the most wonderful standard library  that any other
> language  has ever had.  Have a  look in  the reference  manual before
> stating such non-sense.

	Oh come on. Have a look at a real library before making
such non-sense claims. Considerable functionality is missing,
the library is inconsistent, the documentation is incomplete,
and it is less generic than C++ STL, which is also probably
more efficient on almost every operation.

	Many of us who know STL wonder how to fit it into the
ocaml type system! 
 
> > 2. Functional languages do not well support the use of dynamic
> > data structures which requires mutable operations for achieving the
> > efficiency;
> 
> Wrong. And you should stop thinking that efficiency means mutable data
> structures. Once again, read Okasaki's book.

	The statement said 'functional languages do not
well support use of dynamic data structures which _require mutable
operations for efficiency_'. you cannot say the conditional
is wrong, only the claim that functional languages do not
provide good support for mutable data structures.

	You could argue that the argument is void, since the
assumptions are vacuous 'there are no such data structures',
but reality would prove you wrong very quickly. The vast majority
of data structures are collections of interrelated objects
reflecting or controlling state, and where changes are propagated
throughout the data structures in such a way that efficient
functional modelling would be worthless -- since the application
domain is clearly one in which state transformation is the whole point.
 
> Your arguments  are not the good  ones. People in industry  do not use
> functional programming for other reasons: because this is not in their
> culture, because  they don't know,  because they have not  been taught
> functional programming. Some of  them, like you, think that functional
> programming languages are inefficient, but they are wrong.

	Show me a functional programming language that is as fast
as C++ and I will give up C++. :-)

	Until then, I will use ocaml where speed is not essential,
but power is important, and confidence in the result crucial
(such as a compiler).

-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


