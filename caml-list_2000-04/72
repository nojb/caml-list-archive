Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA03428 for caml-redistribution@pauillac.inria.fr; Mon, 17 Apr 2000 21:03:53 +0200 (MET DST)
Resent-Message-Id: <200004171903.VAA03428@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA23112 for <caml-list@pauillac.inria.fr>; Mon, 17 Apr 2000 17:06:18 +0200 (MET DST)
Received: from miss.wu-wien.ac.at (miss.wu-wien.ac.at [137.208.107.17])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id RAA08726
	for <caml-list@inria.fr>; Mon, 17 Apr 2000 17:06:18 +0200 (MET DST)
Received: (from mottl@localhost)
	by miss.wu-wien.ac.at (8.9.0/8.9.0) id RAA11695;
	Mon, 17 Apr 2000 17:06:07 +0200 (MET DST)
From: Markus Mottl <mottl@miss.wu-wien.ac.at>
Message-Id: <200004171506.RAA11695@miss.wu-wien.ac.at>
Subject: Re: When functional languages can be accepted by industry?
To: proff@iq.org (Julian Assange)
Date: Mon, 17 Apr 2000 17:06:06 +0200 (MET DST)
Cc: caml-list@inria.fr (OCAML)
In-Reply-To: <wxbt3d6hkh.fsf@suburbia.net> from "Julian Assange" at Apr 14, 2000 03:23:26 AM
X-Mailer: ELM [version 2.5 PL2]
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 17 Apr 2000 21:03:53 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

> That said, one excellent catalytic change, would be to bring in
> seperate compilation library version dependency analysis (i.e an ocaml
> 3rd party package manager) into the main ocaml distribution. I believe
> there is an ocaml package to do this already, although I'm not sure
> how sound it is.

There are certainly a few "social" technologies that could significantly
boost the usability of OCaml in real-world projects, a good version
management tool for third party sources probably ranking among the "most
missing" ones.

I am highly convinced that the success of some "modern" (?) languages
(Perl, Python, Java) was strongly supported by a (more or less) standard
way of incorporating third-party libraries.

The current state of OCaml is definitely advanced enough to pay more
attention to some "not-so-academic" goals like providing for tools aimed at
extending the user base. I believe this would benefit the whole process a
lot in the future.

> A library calculus system which was URL name space aware would be
> particularly interesting. NetBSD and FreeBSD take this approach in
> their own package source dependency system for instance. Compiling one
> package recursively pulls in, uncompresses, patches, compilies and
> installs the dependencies.

It need not be an "overkill" version right from the beginning - a nice,
clean and (important!) standard way to safely add, update and remove
libraries would surely be a good start.

> Such technology strongly fosters co-operative community.

Taking a look at the Hump and Gerd's link database, I have the impression
that there is already enough "critical mass" of contributors, but most of
the contributions are "one-man-efforts", i.e. nice, but they don't have
enough "punch". Maybe we should really think more about ways to "unleash
the forces of cooperative development". As it seems: easily said, difficult
to do...

Best regards,
Markus Mottl

-- 
Markus Mottl, mottl@miss.wu-wien.ac.at, http://miss.wu-wien.ac.at/~mottl


