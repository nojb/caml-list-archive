Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA11679 for caml-redistribution@pauillac.inria.fr; Thu, 6 Apr 2000 15:59:36 +0200 (MET DST)
Resent-Message-Id: <200004061359.PAA11679@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA29438 for <caml-list@pauillac.inria.fr>; Thu, 6 Apr 2000 15:43:49 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id PAA19701;
	Thu, 6 Apr 2000 15:43:31 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA14300; Thu, 6 Apr 2000 15:43:31 +0200 (MET DST)
Message-ID: <20000406154331.51828@pauillac.inria.fr>
Date: Thu, 6 Apr 2000 15:43:31 +0200
From: Pierre Weis <Pierre.Weis@inria.fr>
To: Brian Rogoff <bpr@best.com>
Cc: caml-list@inria.fr
Subject: Re: to have labels or not
References: <20000404155325J.garrigue@kurims.kyoto-u.ac.jp> <Pine.BSF.4.21.0004040837190.4012-100000@shell5.ba.best.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <Pine.BSF.4.21.0004040837190.4012-100000@shell5.ba.best.com>; from Brian Rogoff on Tue, Apr 04, 2000 at 09:39:02AM -0700
Resent-From: weis@pauillac.inria.fr
Resent-Date: Thu, 6 Apr 2000 15:59:36 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

> I should note that most functional programming languages are
> designed by people with a strong academic/theoretical bent, rather
> than an industrial bent, and so issues like the type system get a
> lot more attention IMO than human engineering issues. I think the
> Modula-3 book by Nelson had a nice section on the language design
> with the different types of designer given colorful names like
> "Lambdaman", "Hackwell", etc. FPs appear to be designed by entire
> teams of "Lambdamen". (OK, perhaps I'm being a little bit
> provocative here ;-)

You certainly are provocative, as far as the Caml team is concerned:
we consistently insisted on practicability and usability of the
language, writing theoretical articles on better handling of
side-effects features, better design of modules to allow separate
compilation, better compilation of floating point numbers and
operations, etc; and then we implemented all those nice ideas into
fairly usable compilers. Last but not least ``concession'' to
praticability: this entire set of new basic types and operations for
integers and big arrays...

Best regards,
-- 
Pierre Weis

INRIA, Projet Cristal, http://pauillac.inria.fr/~weis


