Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA30278 for caml-redist@pauillac.inria.fr; Thu, 20 Apr 2000 09:50:21 +0200 (MET DST)
Resent-Message-Id: <200004200750.JAA30278@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA13841 for <caml-list@pauillac.inria.fr>; Wed, 19 Apr 2000 22:47:06 +0200 (MET DST)
Received: from postfix2.free.fr (postfix2.free.fr [212.27.32.74])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id WAA14989
	for <caml-list@inria.fr>; Wed, 19 Apr 2000 22:47:06 +0200 (MET DST)
Received: from univ-savoie.fr (unknown [213.228.52.253])
	by postfix2.free.fr (Postfix) with ESMTP
	id 7535B74215; Wed, 19 Apr 2000 22:46:53 +0200 (MEST)
Sender: raffalli@free.fr
Message-ID: <38FE1ADC.FB3031A@univ-savoie.fr>
Date: Wed, 19 Apr 2000 22:45:16 +0200
From: Christophe Raffalli <Christophe.Raffalli@univ-savoie.fr>
Organization: Laboratoire de =?iso-8859-1?Q?Math=E9matiques?=, 
	=?iso-8859-1?Q?Universit=E9?= de Savoie
X-Mailer: Mozilla 4.7 [fr] (X11; I; Linux 2.2.14-15mdkfb i686)
X-Accept-Language: fr, en
MIME-Version: 1.0
To: William Chesters <williamc@paneris.org>
Cc: thierry BRAVIER <thierry.bravier@dassault-aviation.fr>, caml-list@inria.fr
Subject: Re: Caml wish list
References: <38E7F364.5D24BB7C@motorola.com>
		<14572.49274.910966.673172@cylinder.csl.sri.com>
		<38ED71B6.30118608@motorola.com>
		<14574.1721.508470.790475@cylinder.csl.sri.com>
		<38F270CF.221F5BD0@motorola.com>
		<20000411195808.62154@pauillac.inria.fr>
		<38F3D520.9CD19485@motorola.com>
		<14581.28385.615880.93928@pc89.lri.fr>
		<14581.55775.16448.947429@tkb.mpl.com>
		<38F6E5C8.972110C3@univ-savoie.fr>
		<38FD9B38.6691E0D6@dassault-aviation.fr> <200004191345.OAA27001@toy.william.bogus>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Thu, 20 Apr 2000 09:50:21 +0200
Resent-To: caml-redist@pauillac.inria.fr


>  >
>  > I fear that your share proposal will not interact well with separate compiling of
>  > modules:
>  > how can the list of all share definition be completely know to the compiler ?

It is not the case if you consider that two modules sharing the same
symbol 
should declare it with the same type and then you merge the list of
possible values. Some value may be hiden by other, but this is already
the case for usual module field.

> Well, I can't remember offhand how SMJ/NJ handles overloading, but it
> seems to work reasonably well.  On the other hand, I am nowadays a
> convert to ocaml's hard line on overloading---it's an absolute curse
> of many, many C++ programs by coders whose enthusiasm outruns their
> judgement.

I agree with you that one should not abuse overloading. The problem of
C++
is that you can even overload operator such as = ! I would live happy if
there was a finite, fixed and short lists of overloadable operator (In
fact  arithmetic operators are the most needed).

The pb is that if you use twice the same functors declaring + (which is 
unavoidable if you do formal calculus). You can never have access to
both symbols with their short names. So sharing/overloading
is really needed as soon as you use and reuse functors in complex ways.

-- 
Christophe Raffalli
Université de Savoie
Batiment Le Chablais, bureau 21
73376 Le Bourget-du-Lac Cedex

tél: (33) 4 79 75 81 03
fax: (33) 4 79 75 87 42
mail: Christophe.Raffalli@univ-savoie.fr
www: http://www.lama.univ-savoie.fr/~RAFFALLI


