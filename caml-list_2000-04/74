Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA29910 for caml-redistribution@pauillac.inria.fr; Mon, 17 Apr 2000 21:09:40 +0200 (MET DST)
Resent-Message-Id: <200004171909.VAA29910@pauillac.inria.fr>
Received: (from xleroy@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA23885; Mon, 17 Apr 2000 17:35:47 +0200 (MET DST)
Message-ID: <20000417173547.04110@pauillac.inria.fr>
Date: Mon, 17 Apr 2000 17:35:47 +0200
From: Xavier Leroy <xleroy@pauillac.inria.fr>
To: FALCON Gilles FTRD/DTL/LAN <gilles.falcon@rd.francetelecom.fr>
Cc: caml-list@pauillac.inria.fr
Subject: Re: When functional languages can be accepted by industry?
References: <26F7C2E07274D311A6D80060080C3EEEA8D4B6@l-mhs5.lannion.cnet.fr>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Mailer: Mutt 0.89.1
In-Reply-To: <26F7C2E07274D311A6D80060080C3EEEA8D4B6@l-mhs5.lannion.cnet.fr>; from FALCON Gilles FTRD/DTL/LAN on Mon, Apr 17, 2000 at 02:57:16PM +0200
Resent-From: weis@pauillac.inria.fr
Resent-Date: Mon, 17 Apr 2000 21:09:40 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

> Last week, i learn java and i feel the community behind this language,

You mis-spelled "Sun's deep pockets and hordes of programmers" :-)

> The documentation is something real. You have library for SGBD acess, the
> I/O, the graphics.

In OCaml, you have excellent I/O (better than Java's in my opinion) in
the standard library, TK and GTK bindings for GUIs, and a couple of
bindings to existing database libraries (see the Caml hump at
http://caml.inria.fr).  I agree the database stuff needs more work and
the GUI stuff needs more documentation, but it's a start.

> You can find a book easily on java, not on ocaml. Inria
> documentation is fine, but with only one point of view.

There are several books out on Caml Light, which are largely relevant
to OCaml.  A quite comprehensive book on OCaml is in preparation
(mostly written by non-INRIA personnel, so you'll get another "point
of view") and should appear this summer (in French).

> The IHM : if you like camltk, you learn tcl too ( for the example) 
>   after, you have to look between the graphics language possibility, what
> you can access with caml
>   and eventually  what you would like to add ( naturaly the documentation
> send you on an other documentation)

Agreed, there is a lack of documentation for CamlTk.  Any volunteers?

>  We want to have generated documentation
>    with java, no configuration to do: javadoc
>    with ocaml, you can do it, but nothing in the package.

This is true, a "camldoc" tool would be nice.  Some members of this
list would advocate using off-the-shelf, language-independent literate
programming tools, of which there are plenty.

>   You need something, with java you search in the documentation or
> you look if someone done it, you fill more lucky than with ocaml

Well, with OCaml, you search the documentation, then look (in the Hump
for instance) if someone has done it.  So what?

>  Generaly people who use ocaml, master well computer, langage theory. 
>   The question is for the other who need a more generalist langage, they are
> totally forgotten

Symbolic processing (compilers, theorem provers, etc) were the first
application of Caml and other members of the ML family, so of course
we have more experience with that.  However, if other users were
"totally forgotten", we wouldn't have GUIs, the Unix and Str
libraries, a COM binding, and all other stuff that symbolic processing
doesn't need.  We're definitely trying to extend OCaml beyond the
compiler/prover niche, and have had already some success stories in
this direction (see the list of signficant projects on the Web site).

> I like ocaml, fonctional style, it is possible to do impérative or
> object code .  One thing is sure, if the IHM was better and with
> SGBD connection (in the ideal world all with good documentation) it
> would be easier to use ocaml on more project.

I certainly can't disagree with you.  The main problem here is human
resources.  But we are looking at ways for big industrial users to
help fund that kind of developments.

- Xavier Leroy


