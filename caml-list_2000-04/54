Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA01773 for caml-redistribution@pauillac.inria.fr; Thu, 13 Apr 2000 16:50:57 +0200 (MET DST)
Resent-Message-Id: <200004131450.QAA01773@pauillac.inria.fr>
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA05070 for <caml-list@pauillac.inria.fr>; Thu, 13 Apr 2000 16:37:05 +0200 (MET DST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id QAA22194;
	Thu, 13 Apr 2000 16:36:35 +0200 (MET DST)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA24826; Thu, 13 Apr 2000 16:36:34 +0200 (MET DST)
Message-ID: <20000413163634.63519@pauillac.inria.fr>
Date: Thu, 13 Apr 2000 16:36:34 +0200
From: Pierre Weis <Pierre.Weis@inria.fr>
To: "Dennis (Gang) Chen" <Dennis.G.Chen@motorola.com>
Cc: caml-list@inria.fr
Subject: Re: When functional languages can be accepted by industry?
References: <38E7F364.5D24BB7C@motorola.com> <14572.49274.910966.673172@cylinder.csl.sri.com> <38ED71B6.30118608@motorola.com> <14574.1721.508470.790475@cylinder.csl.sri.com> <38F270CF.221F5BD0@motorola.com> <20000411195808.62154@pauillac.inria.fr> <38F3D520.9CD19485@motorola.com> <20000412110604.A23481@davidb.org> <38F521A7.BBB3CA23@motorola.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.89.1
In-Reply-To: <38F521A7.BBB3CA23@motorola.com>; from Dennis (Gang) Chen on Thu, Apr 13, 2000 at 10:53:51AM +0930
Resent-From: weis@pauillac.inria.fr
Resent-Date: Thu, 13 Apr 2000 16:50:56 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

> Thank you very much. Now I find that a mutable linked list can
> indeed be elegantly implemented in ocaml, e.g.:
> 
> type 'a mlist = Empty | Node of 'a mlist ref * 'a ref;;

If efficiency is really crucial, you could also write

type 'a mlist = Empty | Node of 'a mcell
and 'a mcell = {mutable hd : 'a; mutable tl : 'a mlist}

You may have a look at the Caml FAQ, where the existence and
manipulation of pointers in Caml is discussed:

http://pauillac.inria.fr/caml/FAQ/pointers-eng.html

(Fresh english translation written for the occasion).

Best regards,
-- 
Pierre Weis

INRIA, Projet Cristal, http://pauillac.inria.fr/~weis


