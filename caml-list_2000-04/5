Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA24653 for caml-redistribution@pauillac.inria.fr; Sun, 2 Apr 2000 23:29:57 +0200 (MET DST)
Resent-Message-Id: <200004022129.XAA24653@pauillac.inria.fr>
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA29613 for <caml-list@pauillac.inria.fr>; Thu, 30 Mar 2000 11:50:29 +0200 (MET DST)
Received: from localhost.localdomain (stan110.zip.com.au [61.8.17.110])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id LAA16537;
	Thu, 30 Mar 2000 11:49:02 +0200 (MET DST)
Received: from maxtal.com.au (IDENT:root@localhost [127.0.0.1])
	by localhost.localdomain (8.9.3/8.8.7) with ESMTP id TAA17222;
	Thu, 30 Mar 2000 19:49:02 +1000
Sender: root@localhost.localdomain
Message-ID: <38E3230E.A0615BD9@maxtal.com.au>
Date: Thu, 30 Mar 2000 19:49:02 +1000
From: John Max Skaller <skaller@maxtal.com.au>
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Christophe Raffalli <Christophe.Raffalli@univ-savoie.fr>
CC: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>, Xavier.leroy@inria.fr,
        caml-list@inria.fr
Subject: Re: Semantic of label: The best (only ?) solution to merge both mode
References: <38D35B51.8EB15DA0@univ-savoie.fr> <20000319112913P.garrigue@kurims.kyoto-u.ac.jp> <38E1C205.813AD040@univ-savoie.fr> <38E1D2B0.DE5F84E@univ-savoie.fr>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Resent-From: weis@pauillac.inria.fr
Resent-Date: Sun, 2 Apr 2000 23:29:57 +0200
Resent-To: caml-redistribution@pauillac.inria.fr

Christophe Raffalli wrote:
> 
> A small mistake:
> 
> f a     means a is the argument corresponding to the first non
> optionnal
>         argument of f WHICH IS NOT GIVEN LATER WITH AN EXPLICIT LABEL !

	This is a complication. In ocaml 2.0x, application is
left associative:

	f a b c d .. = ((((f a) b) c) d)

but this would not be the case with the above rule. I propose instead
the simpler description you gave where a function is applied
to _one_ argument to produce a curried function which is then
applied to the next: the next argument is 'used up', labelled or not,
immediately. Therefore consider:

	let f l1:p1 l2:p2 .. =
	f a l1:b

means precisely:

	((f a) l1:b)

and gives an error because 'l1:' is NOT a label of the function (f a),
which is like

	let fa l2:p2 ... =

By your interpretation, the function call would be correct and
equivalent to


	f l2:a l1:b

or

	f b a

So I think your original unqualified version is actually better :-)


-- 
John (Max) Skaller, mailto:skaller@maxtal.com.au
10/1 Toxteth Rd Glebe NSW 2037 Australia voice: 61-2-9660-0850
checkout Vyper http://Vyper.sourceforge.net
download Interscript http://Interscript.sourceforge.net


