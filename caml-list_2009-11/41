Return-Path: <jon@ffconsultancy.com>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id 4AEE7BBAF
	for <caml-list@yquem.inria.fr>; Wed,  4 Nov 2009 21:25:28 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Ar4AAGNy8UrUnwcjkGdsb2JhbACCHplAAQEBAQkJDAcTBIgoulKEPQQ
X-IronPort-AV: E=Sophos;i="4.44,682,1249250400"; 
   d="scan'208";a="49806996"
Received: from relay.ptn-ipout01.plus.net ([212.159.7.35])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 04 Nov 2009 21:24:41 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aq0EAK9x8UpUXebz/2dsb2JhbACCHqIoukqEPQQ
Received: from relay02.plus.net ([84.93.230.243])
  by relay.ptn-ipout01.plus.net with ESMTP; 04 Nov 2009 20:24:40 +0000
Received: from [87.113.75.250] (helo=leper.local)
	 by relay02.plus.net with esmtp (Exim) id 1N5mPI-0003M3-Am; Wed, 04 Nov 2009 20:24:40 +0000
From: Jon Harrop <jon@ffconsultancy.com>
Organization: Flying Frog Consultancy Ltd.
To: Jan Kybic <kybic@fel.cvut.cz>, caml-list@yquem.inria.fr
Subject: Re: [Caml-list] AST versus Ocaml
Date: Wed, 4 Nov 2009 20:25:34 +0000
User-Agent: KMail/1.9.9
References: <878wem75iq.fsf@fel.cvut.cz> <Pine.LNX.4.64.0911040937510.25017@juno.math.carleton.ca> <87zl725ma5.fsf@fel.cvut.cz>
In-Reply-To: <87zl725ma5.fsf@fel.cvut.cz>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200911042025.34897.jon@ffconsultancy.com>
X-Plusnet-Relay: f2e048a6ca2f7413112c91e041ffca14
X-Spam: no; 0.00; ocaml:01 shivkumar:01 ocaml:01 computations:01 low-level:01 low-level:01 ocaml-like:01 hongwei:01 model:01 non-blocking:01 gcc:01 gcc:01 compiler:01 compilation:01 workarounds:01 

On Wednesday 04 November 2009 15:42:42 Jan Kybic wrote:
> >  Shivkumar Chandrasekara said:
> >I switched from OCaml to ATS for numerical computations. I did this
> >because I was thinking of switching to some low-level language anyway
> >(for efficiency). I think ATS is a good fit for OCaml types who also
> >want low-level control of memory and CPU. (You can always turn on the
> >GC in ATS and code in an OCaml-like fashion if you wish.)
>
> Thank you, that sounds very encouraging. So are you saying that if you
> turn on the GC in ATS, the performance is not so different?

I haven't found the time to give ATSLang a serious test drive but I had a 
brief conversation with Hongwei Xi about his work and goals. He is into 
systems programming, which is closely related to high performance programming 
in the context of serial code but foundations for easy parallel programming 
are missing. I don't know what the state of ATS' memory model is so things 
like non-blocking algorithms might be tricky. Another concern is that ATS' 
code gen goes via GCC and GCC is quite a sucky compiler with poor compilation 
times, poor generated code and, of course, missing features like tail calls 
requiring elaborate and usually slow and uninteroperable workarounds. ATS 
also lacks a performant REPL, a build system, DLLs and package management. I 
don't know what the state of editors/IDEs is.

Given that ATSLang uses the Boehm GC, my main concerns would be about leaks 
and crashes rather than performance. Moreover, I would note that the 
performant ATS code out there seems to go to *great* lengths to avoid the GC 
whenever possible, so I suspect it is extremely slow in the context of 
heavily allocating code or many short-lived values (much like HLVM). For 
example, binary trees:

http://shootout.alioth.debian.org/u64q/benchmark.php?test=binarytrees&lang=ats&id=2#about

OCaml:  58 LOC
C:     122 LOC
ATS:   191 LOC

My guess is that safe ATS code will be slow if it allocates much. Also, I 
don't know how well its allocator scales across multiple threads.

> > Kevin Cheung said:
> > Unfortunately, I don't have much to say about AST at the moment.  But
> > if it is as fast as it claims to be, then it might do what Jon Harrop
> > is trying to achieve with HLVM.
>
> Yes, exactly, fast Ocaml based on HLVM would be ideal. However
> HLVM+Ocaml is probably still years away...

My vision for the OCaml+HLVM combo is the ability to use HLVM from your OCaml 
projects to generate and execute high performance parallel numerical code 
on-the-fly.

Hopefully I'll be implementing HLVM's first concurrent GC soon, based upon the 
following VCGC design:

  http://doc.cat-v.org/inferno/concurrent_gc/

In the meantime, you can still use HLVM to generate serial numerical code that 
is typically 2-3x faster than the equivalent OCaml code.

-- 
Dr Jon Harrop, Flying Frog Consultancy Ltd.
http://www.ffconsultancy.com/?e

