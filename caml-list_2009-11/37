Return-Path: <kcheung@math.carleton.ca>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by yquem.inria.fr (Postfix) with ESMTP id E7332BBAF
	for <caml-list@yquem.inria.fr>; Wed,  4 Nov 2009 15:41:49 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApsEAIch8UqGdRUV/2dsb2JhbACPfc4DgkGBfAQ
X-IronPort-AV: E=Sophos;i="4.44,680,1249250400"; 
   d="scan'208";a="37538769"
Received: from pegasus.math.carleton.ca ([134.117.21.21])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 04 Nov 2009 15:41:49 +0100
Received: from juno.math.carleton.ca (juno [134.117.21.50])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by pegasus.math.carleton.ca (Postfix) with ESMTP id E5D417FCB9B
	for <caml-list@inria.fr>; Wed,  4 Nov 2009 09:41:46 -0500 (EST)
Date: Wed, 4 Nov 2009 09:41:23 -0500 (EST)
From: Kevin Cheung <kcheung@math.carleton.ca>
To: caml-list@inria.fr
Subject: Re: [Caml-list] AST versus Ocaml
In-Reply-To: <878wem75iq.fsf@fel.cvut.cz>
Message-ID: <Pine.LNX.4.64.0911040937510.25017@juno.math.carleton.ca>
References: <878wem75iq.fsf@fel.cvut.cz>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
X-Spam: no; 0.00; ocaml:01 ocaml:01 high-level:01 genericity:01 inference:01 explicitely:01 beginner's:01 bug:01 cheung:98 carleton:98 garbage:01 beginners:01 wrote:01 caml-list:01 caml-list:01 

Unfortunately, I don't have much to say about AST at the moment.  But if 
it is as fast as it claims to be, then it might do what Jon Harrop is 
trying to achieve with HLVM.

Kevin.

On Wed, 4 Nov 2009, Jan Kybic wrote:

> I am an Ocaml user but execution speed is very important for me, so I am
> constantly looking for ways to make my programs faster, if possible
> without sacrificing the high-level language benefits (genericity,
> garbage collection, safety).  I have just come across a language
> called AST (http://www.ats-lang.org/) which claims to be functional,
> based on ML (or Ocaml), and at the same time very efficient, perhaps
> as efficient as C. (AST has some other features (theorem proving)
> which I cannot fully appreciate at the moment.)
>
> Some of the benchmarks definitely seem to support the speed claim,
> others are more suspicious as they are actually partly coded in C.
>
> Before devoting more time to investigating AST, I wanted to ask if you
> perhaps already have some experience with this language and can make a
> comparison to Ocaml. I have already observed that the type inference
> seems to be weaker in AST so the function types have to be explicitely
> given.
>
> Thank you for your comments.
>
> Jan
>
> -- 
> -------------------------------------------------------------------------
> Jan Kybic <kybic@fel.cvut.cz>                       tel. +420 2 2435 5721
> http://cmp.felk.cvut.cz/~kybic                      ICQ 200569450
>
> _______________________________________________
> Caml-list mailing list. Subscription management:
> http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
> Archives: http://caml.inria.fr
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

