Return-Path: <hans@simula.no>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by yquem.inria.fr (Postfix) with ESMTP id C52B1BBAF
	for <caml-list@yquem.inria.fr>; Wed, 18 Nov 2009 17:59:59 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AkUBAGe2A0uB8ApHmWdsb2JhbACQC4kKgm0BAQEBAQgLCgcTulWEOwSBbw
X-IronPort-AV: E=Sophos;i="4.44,766,1249250400"; 
   d="scan'208";a="50568336"
Received: from mail-forward2.uio.no ([129.240.10.71])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 18 Nov 2009 17:59:59 +0100
Received: from exim by mail-out2.uio.no with local-bsmtp (Exim 4.69)
	(envelope-from <hans@simula.no>)
	id 1NAnss-0002c4-9l
	for caml-list@inria.fr; Wed, 18 Nov 2009 17:59:58 +0100
Received: from mail-mx2.uio.no ([129.240.10.30])
	by mail-out2.uio.no with esmtp (Exim 4.69)
	(envelope-from <hans@simula.no>)
	id 1NAnsq-0002bq-Oq; Wed, 18 Nov 2009 17:59:56 +0100
Received: from [128.39.37.254] (helo=[192.168.100.135])
	by mail-mx2.uio.no with esmtpsa (TLSv1:AES256-SHA:256)
	user hans (Exim 4.69)
	(envelope-from <hans@simula.no>)
	id 1NAnsq-0003nt-8F; Wed, 18 Nov 2009 17:59:56 +0100
Message-ID: <4B04280B.3010100@simula.no>
Date: Wed, 18 Nov 2009 17:59:55 +0100
From: Hans Ole Rafaelsen <hans@simula.no>
User-Agent: Thunderbird 2.0.0.23 (X11/20090817)
MIME-Version: 1.0
To: Marc de Falco <marc@de-falco.fr>
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Polymorphic function in reference cell
References: <4B0405CA.80704@simula.no> <d2c83f640911180658s25c2e5fbr2d08ef91dde92054@mail.gmail.com>
In-Reply-To: <d2c83f640911180658s25c2e5fbr2d08ef91dde92054@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-UiO-Ratelimit-Test: rcpts/h 2 msgs/h 1 sum rcpts/h 2 sum msgs/h 1 total rcpts 736 max rcpts/h 10 ratelimit 0
X-UiO-Spam-info: not spam, SpamAssassin (score=-5.0, required=5.0, autolearn=disabled, UIO_MAIL_IS_INTERNAL=-5, uiobl=NO, uiouri=NO)
X-UiO-Scanned: 61ECB6CCB8508F04AF959E99C9239A0439920D54
X-UiO-SPAM-Test: remote_host: 128.39.37.254 spam_score: -49 maxlevel 80 minaction 2 bait 0 mail/h: 5 total 7329 max/h 49 blacklist 0 greylist 0 ratelimit 0
X-Spam: no; 0.00; rafaelsen:01 struct:01 printf:01 printf:01 foo:01 sig:01 val:01 struct:01 foo:01 functor:01 sig:01 val:01 rafaelsen:01 beginner's:01 ocaml:01 

Thanks Marc,

I have been experimenting some with modules as well. But I think it 
boils down to the same problem. I want to define a polymorphic function 
outside the module that uses it (at the top of my module hierarchy). So 
if the module UseFoo could be created using the function defined in the 
top module (Top.f_fun) for the f function, then I think I would be able 
to solve my problem.

module Bar = struct
     let f_full a b =
       Printf.printf "%s" a; b
end

module Foo (M : sig val f : 'a -> 'a end) =
   struct
     let use_f1 () = M.f 1
     let use_f2 () = M.f 1.0
   end

let f_fun b =
  Bar.f_full "dummy" b

module UseFoo =
  Foo(struct
    let f b = f_fun b
      end)


module Top =
struct

  (* This is the function we want to be "f_fun" in UseFoo *)
  let f_fun b =
    Bar.f_full "bar" b

  let a = UseFoo.use_f1 ()

  let b = UseFoo.use_f2 ()
end


Marc de Falco wrote:
> I might have misunderstood your problem, and I do not have a solution 
> pertaining to your exact question,
> but hiding the function and its type inside a module argument for a 
> functor does the trick, no ?
> For example, if you define
>
> module Foo (M : sig type t val f : t -> t end) =
>    struct let use_f x = M.f x end
>
> You can define too modules Foo1 and Foo2 using your different functions.
>
> Marc
>
> 2009/11/18 Hans Ole Rafaelsen <hans@simula.no <mailto:hans@simula.no>>
>
>     Hi,
>
>     I have a module that have several functions that take a
>     polymorphic function as part of their arguments (Foo.f1 and Foo.f2
>     in the example).
>
>     module Foo  = struct
>
>      let f1 f =
>       f 1
>
>      let f2 f =
>       f 1.0
>
>      let f1_ref = (ref (fun _ -> raise (Failure "undefined") : ('a ->
>     'a) ))
>      let set_f1_ref f =
>       f1_ref := f
>
>      let f2_ref = (ref (fun _ -> raise (Failure "undefined") : ('a ->
>     'a) ))
>      let set_f2_ref f =
>       f2_ref := f
>
>      let use_f1 () =
>       !f1_ref 1
>
>      let use_f2 () =
>       !f2_ref 1.0
>
>      let internal_f v =
>       v
>
>      let internal_f1 () =
>       internal_f 1
>
>      let internal_f2 () =
>       internal_f 1.0
>
>     end
>
>     let f v =
>      v
>
>     let a = Foo.f1 f
>     let b = Foo.f2 f
>     let () = Foo.set_f1_ref f
>     let () = Foo.set_f2_ref f
>     let c = Foo.use_f1 ()
>     let d = Foo.use_f2 ()
>
>
>     In my code I don't want to pass this function around to to all
>     functions where Foo.f1 is called. For this reason I would like to
>     store this function that Foo.f1 needs within Foo. (The function is
>     created outside the module and bound with values generated outside
>     the module.) However you can not store polymorphic functions in
>     references. So I have to make one reference for each concrete type
>     it is used for. What I really would like is use it as if it was
>     defined within Foo, like internal_f and used like the internal_f1
>     and internal_f2.
>
>     Is it possible to only store one reference to this kind of
>     function within a module, or do I really have to write a reference
>     for each usage of the function? If I have to create a reference
>     for each case, do anyone have some trick to avoid code repetition?
>
>     Regards,
>
>     Hans Ole
>
>     _______________________________________________
>     Caml-list mailing list. Subscription management:
>     http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list
>     Archives: http://caml.inria.fr
>     Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>     Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

