Return-Path: <kybic@fel.cvut.cz>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id B6F3CBBAF
	for <caml-list@yquem.inria.fr>; Wed,  4 Nov 2009 23:21:30 +0100 (CET)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am8CAFiN8UqTIMAki2dsb2JhbACBT5oQAQEBCgsKGsJJhD0E
X-IronPort-AV: E=Sophos;i="4.44,682,1249250400"; 
   d="scan'208";a="39541320"
Received: from max.feld.cvut.cz ([147.32.192.36])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 04 Nov 2009 23:21:30 +0100
Received: from localhost (unknown [192.168.200.4])
	by max.feld.cvut.cz (Postfix) with ESMTP id D4B8F19F3615;
	Wed,  4 Nov 2009 23:21:29 +0100 (CET)
X-Virus-Scanned: IMAP AMAVIS
Received: from max.feld.cvut.cz ([192.168.200.1])
	by localhost (styx.feld.cvut.cz [192.168.200.4]) (amavisd-new, port 10044)
	with ESMTP id uJ+Tmz7Qufw5; Wed,  4 Nov 2009 23:21:25 +0100 (CET)
Received: from imap.feld.cvut.cz (imap.feld.cvut.cz [147.32.192.34])
	by max.feld.cvut.cz (Postfix) with ESMTP id A98DB19F3612;
	Wed,  4 Nov 2009 23:21:25 +0100 (CET)
Received: from localhost.fel.cvut.cz (meyer.felk.cvut.cz [147.32.84.20])
	(Authenticated sender: kybicjan)
	by imap.feld.cvut.cz (Postfix) with ESMTPSA id 5B06A15C066;
	Wed,  4 Nov 2009 23:21:25 +0100 (CET)
To: Jon Harrop <jon@ffconsultancy.com>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] AST versus Ocaml
Reply-To: Jan Kybic <kybic@fel.cvut.cz>
From: Jan Kybic <kybic@fel.cvut.cz>
In-Reply-To: <200911042025.34897.jon@ffconsultancy.com> (Jon Harrop's message of "Wed, 4 Nov 2009 20:25:34 +0000")
References: <878wem75iq.fsf@fel.cvut.cz>
	<Pine.LNX.4.64.0911040937510.25017@juno.math.carleton.ca>
	<87zl725ma5.fsf@fel.cvut.cz> <200911042025.34897.jon@ffconsultancy.com>
Date: Wed, 04 Nov 2009 23:21:24 +0100
Message-ID: <87y6mmc4nv.fsf@fel.cvut.cz>
User-Agent: Gnus/5.1008 (Gnus v5.10.8) Emacs/22.3 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam: no; 0.00; ocaml:01 hongwei:01 showstopper:01 non-blocking:01 gcc:01 gcc:01 compiler:01 compilation:01 compiler:01 allocating:01 ocaml:01 functors:01 metaocaml:01 threads:01 polymorphic:01 

> I haven't found the time to give ATSLang a serious test drive but I had a 
> brief conversation with Hongwei Xi about his work and goals. He is into 
> systems programming, which is closely related to high performance programming 
> in the context of serial code but foundations for easy parallel programming 
> are missing. 

Jon, thank you for your comments. Parallel programming support through
threads is not a showstopper for me - my problems can usually be
parallelized easily using processes or via message passing (on a cluster).

> like non-blocking algorithms might be tricky. Another concern is that ATS' 
> code gen goes via GCC and GCC is quite a sucky compiler with poor compilation 

I am not worried about that either, I have been living happily with
gcc for a long time and if needed, I imagine that the code can be
compiled by another C compiler.

> and crashes rather than performance. Moreover, I would note that the 
> performant ATS code out there seems to go to *great* lengths to avoid the GC 
> whenever possible, so I suspect it is extremely slow in the context of 
> heavily allocating code or many short-lived values (much like HLVM). For 

This will be easy to test.

> My vision for the OCaml+HLVM combo is the ability to use HLVM from your OCaml 
> projects to generate and execute high performance parallel numerical code 
> on-the-fly.

So you do not plan to write a full compiler for Ocaml with HLVM
output?  That would be disappointing. I must say, I do not have much need to
generate and execute code on the fly. I was hoping that Ocaml+HLVM
would allow me to write a more generic code without the performance
penalty it now incurs.

> In the meantime, you can still use HLVM to generate serial numerical code that 
> is typically 2-3x faster than the equivalent OCaml code.

Yes, but if I understand correctly, the language you can use for that
is rather restricted. If I write a code like that (no polymorphic
functions, no functors, no objects), Ocaml is already fast enough for
me. And are you not better off using for example MetaOcaml with
offshoring to C?

Yours,

Jan

-- 
-------------------------------------------------------------------------
Jan Kybic <kybic@fel.cvut.cz>                       tel. +420 2 2435 5721
http://cmp.felk.cvut.cz/~kybic                      ICQ 200569450

