Return-Path: <martindemello@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 341067F734
	for <caml-list@sympa.inria.fr>; Tue, 22 Sep 2015 21:02:46 +0200 (CEST)
IronPort-PHdr: 9a23:9vROSxC0P/I5vMONOx8lUyQJP3N1i/DPJgcQr6AfoPdwSP7ypsbcNUDSrc9gkEXOFd2CrakU16yK6+u5AzdIyK3CmU5BWaQEbwUCh8QSkl5oK+++Imq/EsTXaTcnFt9JTl5v8iLzG0FUHMHjew+a+SXqvnYsExnyfTB4Ov7yUtaLyZ/ni6buo9aKOV4ArQH+SI0xBS3+lR/WuMgSjNkqAYcK4TyNnEF1ff9Lz3hjP1OZkkW0zM6x+Jl+73YY4Kp5pIZoGJ/3dKUgTLFeEC9ucyVsvJWq5lH/Sl6g73EGU2gS2iFDAwXf4QuyCpj4uDH7u+47wyKaMNf7V5g7XD2j6+FgTxq+2wkdMDts1WjNls12xI5WhR+loxs3l4vdep2UMvZze67ZedQySm9IX8IXXCtEVNDvJ7ATBvYMaL4L57L2oEED+F7nXVGh
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=martindemello@gmail.com; spf=Pass smtp.mailfrom=martindemello@gmail.com; spf=None smtp.helo=postmaster@mail-vk0-f52.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  martindemello@gmail.com) identity=pra;
  client-ip=209.85.213.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="martindemello@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  martindemello@gmail.com designates 209.85.213.52 as permitted
  sender) identity=mailfrom; client-ip=209.85.213.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="martindemello@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vk0-f52.google.com) identity=helo;
  client-ip=209.85.213.52;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="postmaster@mail-vk0-f52.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0AgAQBUpAFWmzTVVdFdhFIPBr1UAQ2HcwKBQwc4FAEBAQEBAQEBEAEBAQEBBgsLCSEugh2CBwEBAQMBEhEdARsdAQMBCwYFCw0qAgIhAQERAQUBHAYTIod2AQMKCKkrgTA+MYtGgWyCeYl6ChknDVaECgEBAQEBAQQBAQEBAQEBFQEFDoZlhH2CUII9B4JpgUMFjXKHdYsagW+BTpIUg1SCIRIjgRcfAQGCRoIdHjOJbQEBAQ
X-IPAS-Result: A0AgAQBUpAFWmzTVVdFdhFIPBr1UAQ2HcwKBQwc4FAEBAQEBAQEBEAEBAQEBBgsLCSEugh2CBwEBAQMBEhEdARsdAQMBCwYFCw0qAgIhAQERAQUBHAYTIod2AQMKCKkrgTA+MYtGgWyCeYl6ChknDVaECgEBAQEBAQQBAQEBAQEBFQEFDoZlhH2CUII9B4JpgUMFjXKHdYsagW+BTpIUg1SCIRIjgRcfAQGCRoIdHjOJbQEBAQ
X-IronPort-AV: E=Sophos;i="5.17,574,1437429600"; 
   d="scan'208";a="148249616"
Received: from mail-vk0-f52.google.com ([209.85.213.52])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 22 Sep 2015 21:02:44 +0200
Received: by vkfp126 with SMTP id p126so13064533vkf.3
        for <caml-list@yquem.inria.fr>; Tue, 22 Sep 2015 12:02:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=EqPi7z171r/a3MW8Hvzs2bQY4lYn6A9UBulTZWZPKPQ=;
        b=zLDGHYwBFQSbBhbt2BIYogLeRj3/jXkw09gH932dpROERccJssF1RS1jFr1DvwwL37
         0XAdJnOi7BpTSQvp09CjA1trb24NNbcOmS3t+FILMPyTRlo0ZPFQn2i2zaVHrInBA0ZA
         bkXmlq5QevNDgbRFMv6w/TOgsAZJCN7hSlvSxsdPZHa03XKpehyorR/Bx6UAa4kbZsWm
         gibNdJhP+JsNV2yexOAL7ayKBXLgJmrK4kVmw3EGoAwNqX3VM3KZ4zOLycoCGCtYpAck
         HJ18QzFEw3aSjfF3fBkgaYu/cBm/v7w/DhyXKpPSn6dgyBOKMrDtG0rIBUNMlJs300I2
         i5wA==
MIME-Version: 1.0
X-Received: by 10.31.146.203 with SMTP id u194mr19227558vkd.42.1442948563330;
 Tue, 22 Sep 2015 12:02:43 -0700 (PDT)
Received: by 10.103.51.142 with HTTP; Tue, 22 Sep 2015 12:02:43 -0700 (PDT)
In-Reply-To: <CAPFanBE+ywOaKVGd_B5M4e5mL4dXwuRneDg7gpd9s8KjzNyr=w@mail.gmail.com>
References: <CAFrFfuFLfbBNGSfkX6tqGrFbSgnqQoVUdipDH3RYkPyc-iCKRw@mail.gmail.com>
	<CAPFanBGoSC-EptQqKRPGTB2h4O=z3jidjTAYKBT624Y5cmA5aA@mail.gmail.com>
	<CAFrFfuGH0GY_0_6x75L+MoCC9bBBSwXNzqJWMP+NGJPpWG1K_g@mail.gmail.com>
	<CAPFanBG92Q5kVVVgcxLh=OaoS78qMkQU01+-6aZRV4aGoFk6Gg@mail.gmail.com>
	<CAFrFfuG+eOPdNncogzZZ8YTRKMgTEgn5JXd8LgMH501axXgq=g@mail.gmail.com>
	<CAPFanBE+ywOaKVGd_B5M4e5mL4dXwuRneDg7gpd9s8KjzNyr=w@mail.gmail.com>
Date: Tue, 22 Sep 2015 12:02:43 -0700
Message-ID: <CAFrFfuGBrrwZb++1X962CAuvvE50tnx+b0BeA6PpspkQzVtOCQ@mail.gmail.com>
From: Martin DeMello <martindemello@gmail.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: OCaml List <caml-list@yquem.inria.fr>
Content-Type: multipart/alternative; boundary=001a1143945c8beed505205aa497
Subject: Re: [Caml-list] building and using a library in a subdirectory

--001a1143945c8beed505205aa497
Content-Type: text/plain; charset=UTF-8

Okay, thanks, that does make sense. I'm curious now as to what the use case
is for a .mllib file that just defines an internal library. It doesn't seem
to be buying me anything if I don't want to compile the library separately
and use it in a different project.

martin

On Tue, Sep 22, 2015 at 12:45 AM, Gabriel Scherer <gabriel.scherer@gmail.com
> wrote:

> The compiler allows to store C compilation flags in library archives,
> but not OCaml-level flags, and in any case that would be a dubious
> idea as hardcoding the path to the ocamlfind packages on your system
> would make the (bytecode) archive libraries less portable.
>
> You can easily define the packages of the final executable in several
> steps, one per plugin:
>
>   <plugin1/**> or <main.*>: package(foo)
>   ...
>   <plugin2/**> or <main.*>: package(bar)
>
> Finally, you could also distribute each of your plugin as a separate
> ocamlfind package (allowing to combine both the link to the archive(s)
> and information about ocamlfind dependencies in a single place, the
> package's META file), but that requires re-installing a package for
> its changes to be visible from the main program -- so it is probably
> more useful for libraries that are less tightly coupled.
>
> On Tue, Sep 22, 2015 at 9:09 AM, Martin DeMello <martindemello@gmail.com>
> wrote:
> > On Mon, Sep 21, 2015 at 11:58 PM, Gabriel Scherer
> > <gabriel.scherer@gmail.com> wrote:
> >>
> >> > I don't (yet) need dynamic linking; my current main aim with the
> .mllib
> >> > setup is to specify the package dependencies for each plugin in its >
> own
> >> > section of the _tags file, and not have a long list of every plugin's
> >> > dependencies in the main module.
> >>
> >> Well, that doesn't quite work: you need to have the ocamlfind packages
> >> passed to the command linking the final executable.
> >>
> >> I suppose changing
> >>   <**/puz.*>: ...
> >> to
> >>   <**/puz.*> or <file.*>: ...
> >> could work, as this line seems to pass all the libraries flags.
> >
> >
> > Isn't there any way with a .cmxa to compile the dependencies into a
> library
> > and then just have the library as a link-time dependency for the main
> > project? I can imagine things getting pretty messy once I have several
> > plugins and have to concatenate all their package deps into the file.*
> tags
> > line.
> >
> > martin
>

--001a1143945c8beed505205aa497
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Okay, thanks, that does make sense. I&#39;m curious now as=
 to what the use case is for a .mllib file that just defines an internal li=
brary. It doesn&#39;t seem to be buying me anything if I don&#39;t want to =
compile the library separately and use it in a different project.<div><br><=
/div><div>martin</div></div><div class=3D"gmail_extra"><br><div class=3D"gm=
ail_quote">On Tue, Sep 22, 2015 at 12:45 AM, Gabriel Scherer <span dir=3D"l=
tr">&lt;<a href=3D"mailto:gabriel.scherer@gmail.com" target=3D"_blank">gabr=
iel.scherer@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x">The compiler allows to store C compilation flags in library archives,<br>
but not OCaml-level flags, and in any case that would be a dubious<br>
idea as hardcoding the path to the ocamlfind packages on your system<br>
would make the (bytecode) archive libraries less portable.<br>
<br>
You can easily define the packages of the final executable in several<br>
steps, one per plugin:<br>
<br>
=C2=A0 &lt;plugin1/**&gt; or &lt;main.*&gt;: package(foo)<br>
=C2=A0 ...<br>
=C2=A0 &lt;plugin2/**&gt; or &lt;main.*&gt;: package(bar)<br>
<br>
Finally, you could also distribute each of your plugin as a separate<br>
ocamlfind package (allowing to combine both the link to the archive(s)<br>
and information about ocamlfind dependencies in a single place, the<br>
package&#39;s META file), but that requires re-installing a package for<br>
its changes to be visible from the main program -- so it is probably<br>
more useful for libraries that are less tightly coupled.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On Tue, Sep 22, 2015 at 9:09 AM, Martin DeMello &lt;<a href=3D"mailto:marti=
ndemello@gmail.com">martindemello@gmail.com</a>&gt; wrote:<br>
&gt; On Mon, Sep 21, 2015 at 11:58 PM, Gabriel Scherer<br>
&gt; &lt;<a href=3D"mailto:gabriel.scherer@gmail.com">gabriel.scherer@gmail=
.com</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; &gt; I don&#39;t (yet) need dynamic linking; my current main aim w=
ith the .mllib<br>
&gt;&gt; &gt; setup is to specify the package dependencies for each plugin =
in its &gt; own<br>
&gt;&gt; &gt; section of the _tags file, and not have a long list of every =
plugin&#39;s<br>
&gt;&gt; &gt; dependencies in the main module.<br>
&gt;&gt;<br>
&gt;&gt; Well, that doesn&#39;t quite work: you need to have the ocamlfind =
packages<br>
&gt;&gt; passed to the command linking the final executable.<br>
&gt;&gt;<br>
&gt;&gt; I suppose changing<br>
&gt;&gt;=C2=A0 =C2=A0&lt;**/puz.*&gt;: ...<br>
&gt;&gt; to<br>
&gt;&gt;=C2=A0 =C2=A0&lt;**/puz.*&gt; or &lt;file.*&gt;: ...<br>
&gt;&gt; could work, as this line seems to pass all the libraries flags.<br>
&gt;<br>
&gt;<br>
&gt; Isn&#39;t there any way with a .cmxa to compile the dependencies into =
a library<br>
&gt; and then just have the library as a link-time dependency for the main<=
br>
&gt; project? I can imagine things getting pretty messy once I have several=
<br>
&gt; plugins and have to concatenate all their package deps into the file.*=
 tags<br>
&gt; line.<br>
&gt;<br>
&gt; martin<br>
</div></div></blockquote></div><br></div>

--001a1143945c8beed505205aa497--
