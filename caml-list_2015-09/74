Return-Path: <martindemello@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 034CD7F1AA
	for <caml-list@sympa.inria.fr>; Thu, 10 Sep 2015 21:14:24 +0200 (CEST)
IronPort-PHdr: 9a23:DREjXRfVDRRqiE5FILcfvhLRlGMj4u6mDksu8pMizoh2WeGdxc6zZB7h7PlgxGXEQZ/co6odzbGG7+a5BydZusnJmUtBWaIPfidNsd8RkQ0kDZzNImzAB9muURYHGt9fXkRu5XCxPBsdMs//Y1rPvi/6tmZKSV3BPAZ4bt74BpTVx5zukbvip9uKPU4R32X1SIgxBSv1hD2ZjtMRj4pmJ/R54TryiVwMRd5rw3h1L0mYhRf265T41pdi9yNNp6BprJYYAu3SNp41Rr1ADTkgL3t9pIiy7UGCHkOz4S45W38KkxwAIQHA5hb8FsP0uzHmt+w72iCfN8rwZb0yQnGm/qBtDhjyh3FUGSQ+9TTyg9ZsjaQTjB+Eqhh7xMaAZYiPKPt4cq7YcNceQkJOW89QU2pKBYbqPNhHNPYIIesN99q1nFAJtxbrQFD0XO4=
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=martindemello@gmail.com; spf=Pass smtp.mailfrom=martindemello@gmail.com; spf=None smtp.helo=postmaster@mail-vk0-f49.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  martindemello@gmail.com) identity=pra;
  client-ip=209.85.213.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="martindemello@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  martindemello@gmail.com designates 209.85.213.49 as permitted
  sender) identity=mailfrom; client-ip=209.85.213.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="martindemello@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-vk0-f49.google.com) identity=helo;
  client-ip=209.85.213.49;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="martindemello@gmail.com";
  x-sender="postmaster@mail-vk0-f49.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0BEAQDf1fFVmzHVVdFdg3dpBoMgvAKGAQKBSgc8EAEBAQEBAQEBEAEBAQEBBgsLCSEugh2CBgEBAQMBEhEEGQEbHQEDAQsGAwILDScDAgIhAQERAQUBCxEGEyKHdgEDCgibEI9DgTA+MYtBgWyCeYlqChknDVaEDQEBAQEBAQEDAQEBAQEBARUBBQ6GZYR7gk+CPQeCaYFDBY1sh2qFCoYDgW2BTEaRKoNQgiASI4EXOIIugh0eM4hJAQEB
X-IPAS-Result: A0BEAQDf1fFVmzHVVdFdg3dpBoMgvAKGAQKBSgc8EAEBAQEBAQEBEAEBAQEBBgsLCSEugh2CBgEBAQMBEhEEGQEbHQEDAQsGAwILDScDAgIhAQERAQUBCxEGEyKHdgEDCgibEI9DgTA+MYtBgWyCeYlqChknDVaEDQEBAQEBAQEDAQEBAQEBARUBBQ6GZYR7gk+CPQeCaYFDBY1sh2qFCoYDgW2BTEaRKoNQgiASI4EXOIIugh0eM4hJAQEB
X-IronPort-AV: E=Sophos;i="5.17,506,1437429600"; 
   d="scan'208";a="176906088"
Received: from mail-vk0-f49.google.com ([209.85.213.49])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 10 Sep 2015 21:14:23 +0200
Received: by vkfp126 with SMTP id p126so14714341vkf.3
        for <caml-list@inria.fr>; Thu, 10 Sep 2015 12:14:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=OEdUgENQep6EfRDnP4UnjC1T0OGlsxp2OqmuxJPALxE=;
        b=A+jFT9PAVCFNcZgdWKPG6lh0WHsw8jjvjIGgJ4UKLjNVROLo7xTFjh/zZdy+qqxMEK
         0gD4uw5QOaTxTVdePcUrYz615Hkyz77Qhfi7YO0hUDXSP/YuR6UfaZakWm+O6pqFQl4q
         6mTMQPpjTtv+rpspq/xKRDclF4rogFe87oApOV1WcosRFkZq300cvFleORK4PEJ1yJz4
         V8kD2+Dvi80JRYjTSE6YZXX0gL2QvxpuGOf0AGl8oHfYfGKjpZj1qLBspBZJ7cTNFC17
         JkYJZC0K3q0EDZKyAT/rtdRnHMsCzwt/MR3wSDbi17qnnfa7eblGJOdYCZtkfth9k7Nx
         sPDw==
MIME-Version: 1.0
X-Received: by 10.31.132.131 with SMTP id g125mr2074390vkd.40.1441912461482;
 Thu, 10 Sep 2015 12:14:21 -0700 (PDT)
Received: by 10.103.51.142 with HTTP; Thu, 10 Sep 2015 12:14:21 -0700 (PDT)
In-Reply-To: <55F1C5EE.7010205@ens-lyon.org>
References: <CAFrFfuFJqPfhkWgvdwr+vDsOYbwAi1GhEfOn-Tcttjd1yFiuOA@mail.gmail.com>
	<CAMCFErTTHpxpMuNg=wWLiwCUJLYJ1qK0_=8R_jgWzN2G2mvTDg@mail.gmail.com>
	<55F1C5EE.7010205@ens-lyon.org>
Date: Thu, 10 Sep 2015 12:14:21 -0700
Message-ID: <CAFrFfuEnqpXHGuc8ceBAPjGZpLEoSN+sD5mx3_6Ydk1yKr52EQ@mail.gmail.com>
From: Martin DeMello <martindemello@gmail.com>
To: Martin Jambon <martin.jambon@ens-lyon.org>
Cc: OCaml Mailing List <caml-list@inria.fr>, Edouard Evangelisti <edouardevangelisti@gmail.com>
Content-Type: multipart/alternative; boundary=001a1143d7b6108aa7051f696822
Subject: Re: [Caml-list] using a restricted subset of a polymorphic variant

--001a1143d7b6108aa7051f696822
Content-Type: text/plain; charset=UTF-8

Thanks all! I was trying to express the fact that heading could only be `Up
or `Down but should act as a direction otherwise; Romain is right that I
was expecting the coercion to happen automatically (too much time in other
languages :)). Annotating

val mutable heading : [`Up | `Down] = `Up

and then coercing it when I pass it as a direction worked nicely.

martin

On Thu, Sep 10, 2015 at 11:03 AM, Martin Jambon <martin.jambon@ens-lyon.org>
wrote:

> I'd like to add that this a good systematic way to avoid confusing error
> messages when dealing with polymorphic variants (or objects). Just add type
> annotations on variables and function parameters which are polymorphic
> variants (or objects).
>
> Here only one extra annotation would be needed, on the heading value:
>
>   val mutable heading : dir = `Up
>   method flip_heading = ...
>   method get_direction (x : dir) = ...
>   method get_heading = ...
>
> The error message becomes closer to the actual error:
>
> File "toto.ml", line 15, characters 15-61:
> Warning 8: this pattern-matching is not exhaustive.
> Here is an example of a value that is not matched:
> (`West|`South|`North|`East)
>
> Martin
>
> On 09/10/2015 02:13 AM, Edouard Evangelisti wrote:
>
>> Dear Martin,
>>
>> In your example, heading is not of type dir.
>> However, this would work :
>>
>> val mutable heading : dir = `Up
>>
>> Regards,
>> Edouard
>>
>>
>> 2015-09-10 10:07 GMT+01:00 Martin DeMello <martindemello@gmail.com
>> <mailto:martindemello@gmail.com>>:
>>
>>     I'm not sure exactly why this doesn't work:
>>
>>     type dir = [`North | `South | `East | `West | `Up | `Down]
>>
>>     let index = function
>>        | `North -> 1
>>        | `South -> 2
>>        | `East -> 3
>>        | `West -> 4
>>        | `Up -> 5
>>        | `Down -> 6
>>
>>     class foo = object(self)
>>        val mutable heading = `Up
>>
>>        method flip_heading =
>>          heading <- match heading with `Up -> `Down | `Down -> `Up
>>
>>        method get_direction (x : dir) = index x
>>
>>        method get_heading = self#get_direction heading
>>     end
>>
>>     it fails with
>>     File "test.ml <http://test.ml>", line 28, characters 42-49:
>>     Error: This expression has type [ `Down | `Up ]
>>             but an expression was expected of type dir
>>             The first variant type does not allow tag(s)
>>             `East, `North, `South, `West
>>
>>     but why is that an error? I'd think that any function that accepts
>>     type dir should accept type [`Down | `Up] as well. Also, how do I
>>     get this to work?
>>
>>     martin
>>
>>
>>

--001a1143d7b6108aa7051f696822
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks all! I was trying to express the fact that heading =
could only be `Up or `Down but should act as a direction otherwise; Romain =
is right that I was expecting the coercion to happen automatically (too muc=
h time in other languages :)). Annotating=C2=A0<div><br></div><div>val muta=
ble heading : [`Up | `Down] =3D `Up<br></div><div><br></div><div>and then c=
oercing it when I pass it as a direction worked nicely.</div><div><br></div=
><div>martin</div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_=
quote">On Thu, Sep 10, 2015 at 11:03 AM, Martin Jambon <span dir=3D"ltr">&l=
t;<a href=3D"mailto:martin.jambon@ens-lyon.org" target=3D"_blank">martin.ja=
mbon@ens-lyon.org</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote=
" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I=
&#39;d like to add that this a good systematic way to avoid confusing error=
 messages when dealing with polymorphic variants (or objects). Just add typ=
e annotations on variables and function parameters which are polymorphic va=
riants (or objects).<br>
<br>
Here only one extra annotation would be needed, on the heading value:<span =
class=3D""><br>
<br>
=C2=A0 val mutable heading : dir =3D `Up<br></span>
=C2=A0 method flip_heading =3D ...<br>
=C2=A0 method get_direction (x : dir) =3D ...<br>
=C2=A0 method get_heading =3D ...<br>
<br>
The error message becomes closer to the actual error:<br>
<br>
File &quot;<a href=3D"http://toto.ml" rel=3D"noreferrer" target=3D"_blank">=
toto.ml</a>&quot;, line 15, characters 15-61:<br>
Warning 8: this pattern-matching is not exhaustive.<br>
Here is an example of a value that is not matched:<br>
(`West|`South|`North|`East)<br>
<br>
Martin<span class=3D""><br>
<br>
On 09/10/2015 02:13 AM, Edouard Evangelisti wrote:<br>
</span><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-=
left:1px #ccc solid;padding-left:1ex"><span class=3D"">
Dear Martin,<br>
<br>
In your example, heading is not of type dir.<br>
However, this would work :<br>
<br>
val mutable heading : dir =3D `Up<br>
<br>
Regards,<br>
Edouard<br>
<br>
<br>
2015-09-10 10:07 GMT+01:00 Martin DeMello &lt;<a href=3D"mailto:martindemel=
lo@gmail.com" target=3D"_blank">martindemello@gmail.com</a><br></span>
&lt;mailto:<a href=3D"mailto:martindemello@gmail.com" target=3D"_blank">mar=
tindemello@gmail.com</a>&gt;&gt;:<span class=3D""><br>
<br>
=C2=A0 =C2=A0 I&#39;m not sure exactly why this doesn&#39;t work:<br>
<br>
=C2=A0 =C2=A0 type dir =3D [`North | `South | `East | `West | `Up | `Down]<=
br>
<br>
=C2=A0 =C2=A0 let index =3D function<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `North -&gt; 1<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `South -&gt; 2<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `East -&gt; 3<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `West -&gt; 4<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `Up -&gt; 5<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0| `Down -&gt; 6<br>
<br>
=C2=A0 =C2=A0 class foo =3D object(self)<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0val mutable heading =3D `Up<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0method flip_heading =3D<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0heading &lt;- match heading with `Up -&gt=
; `Down | `Down -&gt; `Up<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0method get_direction (x : dir) =3D index x<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0method get_heading =3D self#get_direction headin=
g<br>
=C2=A0 =C2=A0 end<br>
<br>
=C2=A0 =C2=A0 it fails with<br></span>
=C2=A0 =C2=A0 File &quot;<a href=3D"http://test.ml" rel=3D"noreferrer" targ=
et=3D"_blank">test.ml</a> &lt;<a href=3D"http://test.ml" rel=3D"noreferrer"=
 target=3D"_blank">http://test.ml</a>&gt;&quot;, line 28, characters 42-49:=
<span class=3D""><br>
=C2=A0 =C2=A0 Error: This expression has type [ `Down | `Up ]<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 but an expression was expected of=
 type dir<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 The first variant type does not a=
llow tag(s)<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 `East, `North, `South, `West<br>
<br>
=C2=A0 =C2=A0 but why is that an error? I&#39;d think that any function tha=
t accepts<br>
=C2=A0 =C2=A0 type dir should accept type [`Down | `Up] as well. Also, how =
do I<br>
=C2=A0 =C2=A0 get this to work?<br>
<br>
=C2=A0 =C2=A0 martin<br>
<br>
<br>
</span></blockquote>
</blockquote></div><br></div>

--001a1143d7b6108aa7051f696822--
