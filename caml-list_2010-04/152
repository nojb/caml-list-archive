Return-Path: <emmanuel.dieul@free.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by yquem.inria.fr (Postfix) with ESMTP id 1478ABC57
	for <caml-list@yquem.inria.fr>; Fri, 30 Apr 2010 22:36:34 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: At4CABXc2kvUGyoCkGdsb2JhbACRB4wgFQEBAQEJCQwHEQMfvluFEgQ
X-IronPort-AV: E=Sophos;i="4.52,304,1270418400"; 
   d="scan'208";a="58290556"
Received: from smtp2-g21.free.fr ([212.27.42.2])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 30 Apr 2010 22:36:33 +0200
Received: from smtp2-g21.free.fr (localhost [127.0.0.1])
	by smtp2-g21.free.fr (Postfix) with ESMTP id B0CA64B0080
	for <caml-list@inria.fr>; Fri, 30 Apr 2010 22:36:28 +0200 (CEST)
Received: from [127.0.0.1] (put92-1-81-57-61-170.fbx.proxad.net [81.57.61.170])
	by smtp2-g21.free.fr (Postfix) with ESMTP id C5B954B0091
	for <caml-list@inria.fr>; Fri, 30 Apr 2010 22:36:25 +0200 (CEST)
Message-ID: <4BDB3F3E.9030603@free.fr>
Date: Fri, 30 Apr 2010 22:36:14 +0200
From: Emmanuel Dieul <emmanuel.dieul@free.fr>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.1.9) Gecko/20100317 Thunderbird/3.0.4
MIME-Version: 1.0
To: caml-list@inria.fr
Subject: Re: [Caml-list] Some obsolete constructions ?
References: <4BDAD9C7.5060501@free.fr> <4BDAE6A2.1060902@frisch.fr>
In-Reply-To: <4BDAE6A2.1060902@frisch.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-Antivirus: avast! (VPS 100430-1, 30/04/2010), Outbound message
X-Antivirus-Status: Clean
X-Spam: no; 0.00; frisch:01 pcf:01 afaik:01 pexp:01 letmodule:01 pexp:01 ppat:01 ocaml:01 wrote:01 caml-list:01 inherit:01 alain:01 alain:01 expression:02 override:03 

Le 30/04/2010 16:18, Alain Frisch a écrit :
> On 04/30/2010 03:23 PM, Emmanuel Dieul wrote:
>> - Pcf_let : a let construction as a class field ?
>
> AFAIK, this one is obsolete.
>
>> - Pexp_letmodule : ?
>
> let module L = List in ();;
>
>> - Pexp_override : an override expression ?
>
> object(this) method m = {< >} end;;
>
>> - Ppat_type : a type pattern matching ?
>
> type t = [`A];;
> fun #t -> ();;
>
>> - Rinherit : an inherit row field ?
>
> type t = [`A];;
> type s = [t | `B];;
>
>
> -- Alain
>
>

Great ! This completes my knowledge of ocaml constructions !...
Thanks !

