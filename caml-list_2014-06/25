Return-Path: <yminsky@janestreet.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id A4DD47F8F2
	for <caml-list@sympa.inria.fr>; Wed,  4 Jun 2014 01:36:04 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yminsky@janestreet.com) identity=pra;
  client-ip=38.105.200.115;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="yminsky@janestreet.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yminsky@janestreet.com designates 38.105.200.115 as permitted
  sender) identity=mailfrom; client-ip=38.105.200.115;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="yminsky@janestreet.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mxout1.mail.janestreet.com) identity=helo;
  client-ip=38.105.200.115;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="postmaster@mxout1.mail.janestreet.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjEBADFbjlMmachznGdsb2JhbABZg1lYgmy/egGBAR4OAQEBAQEGFgk8giUBAQEEEhEEGQEBNwEPCwsDCgICJgICIQESAQUBHAYTIogMAxEDAgiffmqKMHeEfwEFmjcNhggRAgSBKosSghYHgnWBS5YGgg+BeY0+hAQYKYUE
X-IPAS-Result: AjEBADFbjlMmachznGdsb2JhbABZg1lYgmy/egGBAR4OAQEBAQEGFgk8giUBAQEEEhEEGQEBNwEPCwsDCgICJgICIQESAQUBHAYTIogMAxEDAgiffmqKMHeEfwEFmjcNhggRAgSBKosSghYHgnWBS5YGgg+BeY0+hAQYKYUE
X-IronPort-AV: E=Sophos;i="4.98,969,1392159600"; 
   d="scan'208";a="77906994"
Received: from mxout2.mail.janestreet.com (HELO mxout1.mail.janestreet.com) ([38.105.200.115])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 04 Jun 2014 01:36:03 +0200
Received: from tot-smtp.delacy.com ([172.27.22.15] helo=tot-smtp)
	by mxout1.mail.janestreet.com with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.82)
	(envelope-from <yminsky@janestreet.com>)
	id 1WryFN-0001yJ-V6
	for caml-list@inria.fr; Tue, 03 Jun 2014 19:36:01 -0400
Received: from tot-dmz-mxgoog1.delacy.com ([172.27.224.14] helo=mxgoog2.janestreet.com)
	by tot-smtp with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72)
	(envelope-from <yminsky@janestreet.com>)
	id 1Wrxxh-00054Y-6f
	for caml-list@inria.fr; Tue, 03 Jun 2014 19:17:45 -0400
Received: from mail-la0-f52.google.com ([209.85.215.52])
	by mxgoog2.janestreet.com with esmtp (Exim 4.76)
	(envelope-from <yminsky@janestreet.com>)
	id 1Wrxxh-0005OG-1e
	for caml-list@inria.fr; Tue, 03 Jun 2014 19:17:45 -0400
Received: by mail-la0-f52.google.com with SMTP id s18so1951088lam.11
        for <caml-list@inria.fr>; Tue, 03 Jun 2014 16:17:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=janestreet.com; s=google;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=BWX3A5MzpEhx3ZkfZvvoWMIAXmhNeAN093gEG39akow=;
        b=drrdgQ/nI8T3ZoMMASmHzWuB2q/QFaGDU6SiZAG8h1NdtftQ/YZAi/Jfs0PUpD/6GO
         XT3TWLYynW2L6g9hc2LStl0zEIiaF/F6P13+zeb8sgXy+cs4OYkQtGQ9cxrCI1Uhd5xx
         FeyH+h+JYVU2htVujmIzGJ3fWRUwo/S/VyQZ0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=BWX3A5MzpEhx3ZkfZvvoWMIAXmhNeAN093gEG39akow=;
        b=K9gg08D0E4hnP7amdAsIDBA9mOGffuy/ShiBsWE91Dt1aSM9Jze1WVD/vDERPLTdEN
         DqKXmJvknrG94Bco+R71JNhPruVxI/YbfClfIb45LP1A78MCMH3l6YRDzftUMjmmd9ie
         WdcPgVlkzPNgBK+LrBlELVKLebKOBuw34fX0+wQ406fpSYBoSvWq5sGj3RSk0C9HkfjU
         nRiOunXlKudvG4Q5CfiVif6bjFnFyCFAImEtCWXZVbvLLswZS7BY03htZ+z5Y599F4Hb
         iIfg3R66Wy8KC3nX94SpXgYuBsbb27iLB7az1twUVoyjcLD+t/a07JJyNIFdYaCD8648
         6d5g==
X-Gm-Message-State: ALoCoQmHqZA95+DN4FCNPmP0HKmmZ4WckEoV2BeRBub5v0W3SQuUk6C4GdxxBFuMIxin6nkBaSOKuSzIskrCU38Hkq5ajIXFQCxmQcyc02ZzPWOxXJDxynEY1oP/HaqY7HDvjZDCcg88
X-Received: by 10.112.160.105 with SMTP id xj9mr34976060lbb.2.1401837464347;
        Tue, 03 Jun 2014 16:17:44 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.112.160.105 with SMTP id xj9mr34976047lbb.2.1401837464103;
 Tue, 03 Jun 2014 16:17:44 -0700 (PDT)
Received: by 10.112.3.39 with HTTP; Tue, 3 Jun 2014 16:17:44 -0700 (PDT)
In-Reply-To: <CANQp=sS7G+mF=qJ969TRjkaewDBL7tn9NDEZ2kCLr8TofpGi3g@mail.gmail.com>
References: <CANQp=sT+7EgYnXaTZQfmUkYmWqgmODijbrsY25Huz=Eq=CK28g@mail.gmail.com>
	<CAK=fH+gDpq_G9rwff=ex-2EDK9pF91yND2QGJAn74xNgB6novA@mail.gmail.com>
	<CANQp=sS7G+mF=qJ969TRjkaewDBL7tn9NDEZ2kCLr8TofpGi3g@mail.gmail.com>
Date: Tue, 3 Jun 2014 19:17:44 -0400
Message-ID: <CACLX4jSy=Dby8-Cjpr_a0wMrrJomYz8DU3BZMzXe41m0p4C=bA@mail.gmail.com>
From: Yaron Minsky <yminsky@janestreet.com>
To: Dan Stark <interlock.public@gmail.com>
Cc: David House <dhouse@janestreet.com>, OCaml Mailing List <caml-list@inria.fr>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] How is Async implemented?

For what it's worth, this gives a decent overview of Async (if I do
say so myself)

https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html

This isn't quite right, but a good mental model is to think of Async
as being single threaded.  Scheduler.go starts up the async scheduler
on the main thread, and you do indeed need to do that for any IO to
actually happen.

y

On Tue, Jun 3, 2014 at 4:59 PM, Dan Stark <interlock.public@gmail.com> wrote:
> Hi David
>
> Thank you very much for this comprehensive explanation.
>
> Can I also know who is responsible for the queue and scheduler?
>
> Are they created and maintained by OCaml thread (OCaml internal) or Async
> (3rd party library, which means Async create the job queue and has its own
> scheduler)?
>
> In addition, will the compiler got involved in handling Deferred.t?
>
> I ask above questions because I felt quite curious about what is happening
> in the followings:
>
> Suppose we have a normal function:
>
>> let f1 () = print_endline "hello"; whatever_result;;
>
>
> Normally, no matter what whatever_result is, when I do let _ = f1 ();;,
> print_endline "hello" will be executed, am I right? For example, finally
> returning an int or a record or a lazy.t, etc, "hello" would be printed out.
>
> However, if I do
>
>> let f2 () = print_endline "hello"; return 1;;
>
>
> let _ = f2 ();; would do nothing unless I run the schedule let _ =
> ignore(Scheduler.go());;
>
> Since for f2 I am not using any other special creation function and the only
> special bit is return 1 after print_endline, if the compiler doesn't get
> involved, how can compiler know the whole application of f2() should be in
> future execution?
>
> Sorry for my above verbose questions if they are boring. I am just trying to
> understand more and I guess eventually I will look into the code once I
> grasp the big picture.
>
> thanks
>
> Dan
>
>
>
>
>
>
>
>
>
> On Tue, Jun 3, 2014 at 5:29 PM, David House <dhouse@janestreet.com> wrote:
>>
>> There is a queue of jobs in the scheduler. The scheduler runs the jobs one
>> by one. Jobs may schedule other jobs. A job is a pair of ['a * 'a -> unit].
>>
>> There's a thing called a deferred. ['a Deferred.t] is an initially empty
>> box that may become filled later with something of type ['a]. There is a
>> similar type called ['a Ivar.t] -- the difference is that ivars have a
>> function to actually fill in the value, whereas deferreds do not: a deferred
>> is a "read-only" view on an ivar.
>>
>> You can wait on a deferred using bind. Doing [x >>= f] mutates the
>> deferred x to add f as a "handler". When a deferred is filled, it adds a job
>> to the scheduler for each handler it has.
>>
>> Doing [Deferred.return 1] allocates a deferred which is already filled and
>> has no handlers. Binding on that will immediately schedule a job to run your
>> function. (The job is still scheduled though, rather than being run
>> immediately, to ensure that you don't have an immediate context switch -- in
>> async, the only context switch points are the binds.)
>>
>> The primitive operations that block are replaced with functions that
>> return deferreds, and go do their work in a separate thread. There's a
>> thread pool to make sure you don't use infinity threads. (I think the
>> default cap is 50 threads.) I think yes, async does depend on -thread.
>>
>> There is an important optimisation: if you want to read or write to
>> certain file descriptors, that doesn't use a thread. Instead there's a
>> central list of such file descriptors. There's also a central list of all
>> "timer events" (e.g. deferreds that become deferred after some amount of
>> time). The scheduler actually is based around a select loop: it does the
>> following:
>>
>> run all the jobs
>> if more jobs have been scheduled, run those too
>> keep going until there are no more jobs, or we hit the
>> maximum-jobs-per-cycle cap
>> sleep using select until one read fd is read, or a write fd is ready, or a
>> timer event is due to fire
>> do that thing
>>
>> There's also a way to manually interrupt the scheduler. Blocking
>> operations other than reading/writing to fds do this: they run in a thread,
>> grab the async scheduler lock, fill in an ivar, then wake up the scheduler
>> to ensure timely running of the jobs they just scheduled. The async
>> scheduler lock is necessary because the scheduler itself is not re-entrant:
>> you cannot have multiple threads modifying the scheduler's internals.
>>
>>
>> On 3 June 2014 16:39, Dan Stark <interlock.public@gmail.com> wrote:
>>>
>>> Hi all
>>>
>>> I am trying to get a rough overview of how Async is implemented (or the
>>> idea behind it) before I really dig into its source code.
>>>
>>> I have the following questions:
>>>
>>> Q1: Is Async event-loop like?
>>>
>>> From the API and some docs for Async's usage, I feel it is quite like a
>>> event-loop.
>>>
>>> You create Deferred.t and it might be added to a queue and a scheduler
>>> behind might be adjusting the order of running for all Deferred.t in the
>>> queue.
>>>
>>> Am I correct?
>>>
>>> Q2: Deferred.return and Deferred.bind
>>>
>>> If I say
>>>
>>>> Deferred.return 1
>>>
>>>
>>> It will returns me a Deferred.t, but inside the function return or bind
>>> somehow an "event" is implicitly added to the default queue for scheduling,
>>> right?
>>>
>>> If I am correct above,
>>>
>>> Q3: Is Async depending on -thread? The queue or scheduler needs compiler
>>> support?
>>>
>>> I just need to understand the whole picture in a rough way first.
>>>
>>> Thanks
>>>
>>> Dan
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>
>
