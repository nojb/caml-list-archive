Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 2CC077F8F2
	for <caml-list@sympa.inria.fr>; Tue,  3 Jun 2014 15:13:36 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.128.179;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.128.179 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.128.179;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ve0-f179.google.com) identity=helo;
  client-ip=209.85.128.179;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-ve0-f179.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Al8BAGTJjVPRVYCzlGdsb2JhbABZg1lYgmyqDJVmAYEFCBYOAQEBAQcLCwkSKoIlAQEBBBIRHQEbCQkLAQMMBgULAwoCAggBHQICIQEBEQEFAQoSBhMSDASICwEDEQ2fZmqLJ4Fygw2ZLQoZJwMKZIReEQEFDIEeiAmDCYEuEVcHgnWBSwSEXwWTJ4F4gT6Lf4QDGCmEajuBMQ
X-IPAS-Result: Al8BAGTJjVPRVYCzlGdsb2JhbABZg1lYgmyqDJVmAYEFCBYOAQEBAQcLCwkSKoIlAQEBBBIRHQEbCQkLAQMMBgULAwoCAggBHQICIQEBEQEFAQoSBhMSDASICwEDEQ2fZmqLJ4Fygw2ZLQoZJwMKZIReEQEFDIEeiAmDCYEuEVcHgnWBSwSEXwWTJ4F4gT6Lf4QDGCmEajuBMQ
X-IronPort-AV: E=Sophos;i="4.98,965,1392159600"; 
   d="scan'208";a="77795913"
Received: from mail-ve0-f179.google.com ([209.85.128.179])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Jun 2014 15:13:35 +0200
Received: by mail-ve0-f179.google.com with SMTP id oy12so6865265veb.38
        for <caml-list@inria.fr>; Tue, 03 Jun 2014 06:13:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=X7+fpmMN5VGJUgQTzGI5BlfOxSjl/rMA0Ol+wXHLiQE=;
        b=ybmRwDbCC58pyNMxL+r59LsNYSrtyhzRRCiB8b1iec9O24pLTWjfueoQDUg9LbGqhc
         Wn+2VRQmleO699oSUv1yp+wmbGDQNsC033egmoCFC5LkUVFuTMM5ovjO6rQkGRP8dVoL
         l5bJkhEGVeiPr8L4etbveoN2HkEfiO9o1ncNWdzlFOP/m9sXGjtjLf6m1SGC+kzd2/Ca
         D2mTVVDo2LG2bOrBhs3OFK0uuNFnst0SUSmquYQ37WKx+HVe6CoutPyCNtgMzd8GCC1z
         Qkm5rB4jp/ZcFjfo0ecFsKL122VDHBLYZaGyBnjTvjqiZIJNXivFtSVG5/itGhYgvkX4
         iGwg==
X-Received: by 10.220.183.4 with SMTP id ce4mr1404849vcb.54.1401801214198;
 Tue, 03 Jun 2014 06:13:34 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.58.90.227 with HTTP; Tue, 3 Jun 2014 06:12:54 -0700 (PDT)
In-Reply-To: <CACLX4jS0Hn04JZnaxB2eh=4Tr3c73drKS0EsFP1oJfMUZ+qkeg@mail.gmail.com>
References: <543099239773658961@orange.fr> <1401716071976.85ecb8da@Nodemailer>
 <CAPFanBGWGDw9ofH8_643CMg9PgX7xkSD8hWROnh5KpSmm4wgcw@mail.gmail.com> <CACLX4jS0Hn04JZnaxB2eh=4Tr3c73drKS0EsFP1oJfMUZ+qkeg@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Tue, 3 Jun 2014 15:12:54 +0200
Message-ID: <CAPFanBFrnP+eM8EETEejCrCPO_FLWU6toR4O9xgAA-qZJ_pAhg@mail.gmail.com>
To: Yaron Minsky <yminsky@janestreet.com>
Cc: Andrew Herron <andrew.herron@gmail.com>, Damien Guichard <alphablock@orange.fr>, 
	Caml List <caml-list@inria.fr>, David Powers <dpowers@janestreet.com>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] Why AVL-tree?

Thanks Yaron, that is very interesting feedback.

Would you happen to have the same kind of information about your
experiments with balanced tree buckets for Hashtable? I'm quite
interested in their good worst-case behavior, and considered
experimenting with such a structure for Batteries, but didn't have
time to look at it so far.

On Tue, Jun 3, 2014 at 2:48 PM, Yaron Minsky <yminsky@janestreet.com> wrote:
> The following summary of what we do with respect to Maps and Sets in
> Core was written by David Powers (who isn't yet subscribe to the list,
> so he asked me to forward it on.)
>
> In Core we use a slight modification of the AVL tree found in the
> standard library.  I think the biggest change (other than the
> interface) is that we add a specialized constructor (Leaf of 'key *
> 'value) as a specialization of Node (left * key * value * right) to
> limit allocation.  It's a nice speed bump and doesn't do too much
> damage to the readability of the code.
>
> We also spent a bunch of time last summer working through the research
> papers of the last 10 years to see if we could find an implementation
> we liked better.  I'd have to pull up the full history of the project
> to give real details, but we tried at least all of the following:
>
> - red-black trees
> - left-leaning red-black trees
> - treaps (including a variant that stored entropy in the spare bits in
> the variant tag)
> - splay trees
> - weight balanced trees
> - AVL trees with GADT enforcement of the invariants
> - 1-2 brother trees
>
> I'll lead with the caveat that benchmarking is hard, and these
> structures shine in different ways depending on the type of workload
> you throw at them.  Each implementation below was also mostly a
> first-pass to understand the structure and do simple tests, so there
> may be more speed gold in the hills.  Your mileage may vary.
>
> That said, our conclusions at the end:
>
> - red black trees are hard to code and understand (mostly due to
> remove), and don't show a real performance win.
>
> - treaps are a wonderful structure in terms of code simplicity, but
> getting enough randomness quickly enough is too costly to make them a
> win over AVL trees (you need to allocate just as much and you need to
> generate randomness)
>
> - splay trees are in our tree, but are too special purpose to be a general win.
>
> - Weight balanced trees are a nice structure, and are used in other
> languages/libraries.  They were neither better or worse than AVL
> trees.
>
> - AVL trees with GADT enforcement work, but were actually slower than
> straightforward AVL trees at the time we tested them.  There is some
> extra matching due to the variant having more cases, so perhaps this
> isn't surprising.  It's also likely that we didn't carry the
> 2-imbalance trick into the GADT version, which might have skewed the
> result.
>
> - 1-2 brother trees were the best of the lot, and we actually produced
> a version of the code that we felt was an overall win (or tie) for all
> workloads.  Unfortunately, the optimizations we needed to get us there
> made the code much longer and harder to understand than the AVL tree
> code.  We just couldn't convince ourselves that it was worth it.
>
> Probably the most important point is that nothing we did above gave a
> general win of more than 10-20% in the tight loop case.  Given that,
> we kept our tweaked AVL tree implementation.  If you want to be very
> very fast, you probably can't get away with a map, and if you just
> want to be "fast enough" the AVL tree we have is a nice set of
> tradeoffs for code complexity.
>
> On Mon, Jun 2, 2014 at 11:06 AM, Gabriel Scherer
> <gabriel.scherer@gmail.com> wrote:
>> Note that OCaml's balanced trees are not exactly what is usually
>> called AVL, as the imbalance between different branches can be at most
>> 2 (+1 on one side and -1 on the other) instead of just 1 as the
>> traditional definition assumes.
>>
>> On Mon, Jun 2, 2014 at 3:34 PM, Andrew Herron <andrew.herron@gmail.com> wrote:
>>> Wikipedia has some notes on the difference:
>>>
>>> http://en.wikipedia.org/wiki/AVL_tree
>>>
>>> AVL has faster lookup, so maybe they decided to optimise for that.
>>>
>>> It's different to some other languages I've seen, but then so is their
>>> decision to not use a tail recursive List.map. Each to their own, it's not
>>> hard to implement the alternative :)
>>>
>>>
>>> On Mon, Jun 2, 2014 at 11:21 PM, Damien Guichard <alphablock@orange.fr>
>>> wrote:
>>>>
>>>>
>>>> Red-black tree would spare a machine word per node, because a red-black
>>>> tree doesn't need depth information.
>>>> Hence the reason is either historical or a space/speed trade-off
>>>> (comparing two depths may be faster than pattern matching).
>>>>
>>>> Regards,
>>>>
>>>> damien guichard
>>>>
>>>> Hi, list,
>>>>
>>>> Just from the curiosity, why balanced binary trees used in Set and Map are
>>>> AVL-trees, not their alternative, say, red-black trees?  Is there a deep
>>>> reason for it, or just a historical one?
>>>>
>>>> Best,
>>>> --
>>>> Yoriyuki Yamagata
>>>> http://yoriyuki.info/
>>>>
>>>>
>>>
>>
>> --
>> Caml-list mailing list.  Subscription management and archives:
>> https://sympa.inria.fr/sympa/arc/caml-list
>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
>> Bug reports: http://caml.inria.fr/bin/caml-bugs
