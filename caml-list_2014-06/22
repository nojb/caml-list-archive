Return-Path: <interlock.public@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 32FBB7F8F2
	for <caml-list@sympa.inria.fr>; Tue,  3 Jun 2014 22:59:54 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  interlock.public@gmail.com) identity=pra;
  client-ip=209.85.128.169;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="interlock.public@gmail.com";
  x-sender="interlock.public@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  interlock.public@gmail.com designates 209.85.128.169 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.128.169;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="interlock.public@gmail.com";
  x-sender="interlock.public@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ve0-f169.google.com) identity=helo;
  client-ip=209.85.128.169;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="interlock.public@gmail.com";
  x-sender="postmaster@mail-ve0-f169.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AhUDAN42jlPRVYCplGdsb2JhbABZhDGCbKdWAQaYHAGBBggWDgEBAQEHCwsJEiqCJQEBAQMBEhEEGQEbHQEDAQsGBQsDCioCAiEBAREBBQEcBhMIGogLAQMJCJ9oaosngXKDDZlwChknDWSFJBEBBQyFSYZnghYHgnWBSwSWAoIPgXmNPoQEGCmEaTw
X-IPAS-Result: AhUDAN42jlPRVYCplGdsb2JhbABZhDGCbKdWAQaYHAGBBggWDgEBAQEHCwsJEiqCJQEBAQMBEhEEGQEbHQEDAQsGBQsDCioCAiEBAREBBQEcBhMIGogLAQMJCJ9oaosngXKDDZlwChknDWSFJBEBBQyFSYZnghYHgnWBSwSWAoIPgXmNPoQEGCmEaTw
X-IronPort-AV: E=Sophos;i="4.98,968,1392159600"; 
   d="scan'208";a="77894995"
Received: from mail-ve0-f169.google.com ([209.85.128.169])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 03 Jun 2014 22:59:53 +0200
Received: by mail-ve0-f169.google.com with SMTP id jx11so7790667veb.28
        for <caml-list@inria.fr>; Tue, 03 Jun 2014 13:59:51 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=RbSAVLwuqu+kgJV7woTmrnnnbW3Pe0redPXL9fAyzW8=;
        b=zN0M+RponlUTmp7TdjcQbPb39+N2u0ivZ0nGNKrDTAupNo6YlX9qHaO8cr2rnKOuKS
         UTCNM0xBDHzi76wWV+shzkrCiFxUbW6wqlFEcGSILzds8O9K+BfXLMWPSVeIgQbQBU9t
         UMBAfspq7zmvC+/cNqT7ut8ZOwfoaVEjRsQeFCdFSRcOInqzFrJKBMyKqSAkBzxWt0h8
         NJaGMrkdJqlYZ6VJ75RpiulzqTRZDA6nnpMBsfxjlOOlzewgeV7JPLSD4ikIaxLu65s0
         10yarPOcZJvvKKBcs3bqZmjF3+WoznuVDhNZkswqsT7r1Ra2lGOMZU3+Ee+f64De2Wlt
         BIFA==
MIME-Version: 1.0
X-Received: by 10.58.39.98 with SMTP id o2mr204087vek.75.1401829191860; Tue,
 03 Jun 2014 13:59:51 -0700 (PDT)
Received: by 10.221.45.130 with HTTP; Tue, 3 Jun 2014 13:59:51 -0700 (PDT)
In-Reply-To: <CAK=fH+gDpq_G9rwff=ex-2EDK9pF91yND2QGJAn74xNgB6novA@mail.gmail.com>
References: <CANQp=sT+7EgYnXaTZQfmUkYmWqgmODijbrsY25Huz=Eq=CK28g@mail.gmail.com>
	<CAK=fH+gDpq_G9rwff=ex-2EDK9pF91yND2QGJAn74xNgB6novA@mail.gmail.com>
Date: Tue, 3 Jun 2014 21:59:51 +0100
Message-ID: <CANQp=sS7G+mF=qJ969TRjkaewDBL7tn9NDEZ2kCLr8TofpGi3g@mail.gmail.com>
From: Dan Stark <interlock.public@gmail.com>
To: David House <dhouse@janestreet.com>
Cc: OCaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=089e01176feb0449dd04faf4cbcb
Subject: Re: [Caml-list] How is Async implemented?

--089e01176feb0449dd04faf4cbcb
Content-Type: text/plain; charset=UTF-8

Hi David

Thank you very much for this comprehensive explanation.

Can I also know who is responsible for the queue and scheduler?

Are they created and maintained by OCaml thread (OCaml internal) or Async
(3rd party library, which means Async create the job queue and has its own
scheduler)?

In addition, will the compiler got involved in handling Deferred.t?

I ask above questions because I felt quite curious about what is happening
in the followings:

Suppose we have a normal function:

let f1 () = print_endline "hello"; whatever_result;;


*Normally*, no matter what *whatever_result *is, when I do *let _ = f1 ();;*,
*print_endline "hello" *will be executed, am I right? For example, finally
returning an int or a record or a lazy.t, etc, "hello" would be printed out.

However, if I do

let f2 () = print_endline "hello"; return 1;;


*let _ = f2 ();; *would do nothing unless I run the schedule *let _ =
ignore(Scheduler.go());; *

Since for *f2* I am not using any other special creation function and the
only special bit is *return 1* after *print_endline*, if the compiler
doesn't get involved, how can compiler know the whole application of
*f2()* should
be in future execution?

Sorry for my above verbose questions if they are boring. I am just trying
to understand more and I guess eventually I will look into the code once I
grasp the big picture.

thanks

Dan









On Tue, Jun 3, 2014 at 5:29 PM, David House <dhouse@janestreet.com> wrote:

> There is a queue of jobs in the scheduler. The scheduler runs the jobs one
> by one. Jobs may schedule other jobs. A job is a pair of ['a * 'a -> unit].
>
> There's a thing called a deferred. ['a Deferred.t] is an initially empty
> box that may become filled later with something of type ['a]. There is a
> similar type called ['a Ivar.t] -- the difference is that ivars have a
> function to actually fill in the value, whereas deferreds do not: a
> deferred is a "read-only" view on an ivar.
>
> You can wait on a deferred using bind. Doing [x >>= f] mutates the
> deferred x to add f as a "handler". When a deferred is filled, it adds a
> job to the scheduler for each handler it has.
>
> Doing [Deferred.return 1] allocates a deferred which is already filled and
> has no handlers. Binding on that will immediately schedule a job to run
> your function. (The job is still scheduled though, rather than being run
> immediately, to ensure that you don't have an immediate context switch --
> in async, the only context switch points are the binds.)
>
> The primitive operations that block are replaced with functions that
> return deferreds, and go do their work in a separate thread. There's a
> thread pool to make sure you don't use infinity threads. (I think the
> default cap is 50 threads.) I think yes, async does depend on -thread.
>
> There is an important optimisation: if you want to read or write to
> certain file descriptors, that doesn't use a thread. Instead there's a
> central list of such file descriptors. There's also a central list of all
> "timer events" (e.g. deferreds that become deferred after some amount of
> time). The scheduler actually is based around a select loop: it does the
> following:
>
> run all the jobs
> if more jobs have been scheduled, run those too
> keep going until there are no more jobs, or we hit the
> maximum-jobs-per-cycle cap
> sleep using select until one read fd is read, or a write fd is ready, or a
> timer event is due to fire
> do that thing
>
> There's also a way to manually interrupt the scheduler. Blocking
> operations other than reading/writing to fds do this: they run in a thread,
> grab the async scheduler lock, fill in an ivar, then wake up the scheduler
> to ensure timely running of the jobs they just scheduled. The async
> scheduler lock is necessary because the scheduler itself is not re-entrant:
> you cannot have multiple threads modifying the scheduler's internals.
>
>
> On 3 June 2014 16:39, Dan Stark <interlock.public@gmail.com> wrote:
>
>> Hi all
>>
>> I am trying to get a rough overview of how Async is implemented (or the
>> idea behind it) before I really dig into its source code.
>>
>> I have the following questions:
>>
>> *Q1:* Is Async event-loop like?
>>
>> From the API and some docs for Async's usage, I feel it is quite like a
>> event-loop.
>>
>> You create Deferred.t and it might be added to a queue and a scheduler
>> behind might be adjusting the order of running for all Deferred.t in the
>> queue.
>>
>> Am I correct?
>>
>> *Q2:* Deferred.return and Deferred.bind
>>
>> If I say
>>
>> Deferred.return 1
>>
>>
>> It will returns me a Deferred.t, but inside the function *return* or
>> *bind* somehow an "event" is implicitly added to the default queue for
>> scheduling, right?
>>
>> If I am correct above,
>>
>> *Q3:* Is Async depending on -thread? The queue or scheduler needs
>> compiler support?
>>
>> I just need to understand the whole picture in a rough way first.
>>
>> Thanks
>>
>> Dan
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>

--089e01176feb0449dd04faf4cbcb
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi David<div><br></div><div>Thank you very much for this c=
omprehensive explanation.</div><div><br></div><div>Can I also know who is r=
esponsible for the queue and scheduler?=C2=A0</div><div><br></div><div>Are =
they created and maintained by OCaml thread (OCaml internal) or Async (3rd =
party library, which means Async create the job queue and has its own sched=
uler)?=C2=A0</div>
<div><br></div><div>In addition, will the compiler got involved in handling=
 Deferred.t?</div><div><br></div><div>I ask above questions because I felt =
quite curious about what is happening in the followings:</div><div><br>
</div><div>Suppose we have a normal function:</div><div><br></div><blockquo=
te class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left-widt=
h:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-le=
ft:1ex">
let f1 () =3D print_endline &quot;hello&quot;; whatever_result;;</blockquot=
e><div><br></div><div><b>Normally</b>, no matter what <i>whatever_result </=
i>is, when I do <i>let _ =3D=C2=A0f1 ();;</i>, <i>print_endline &quot;hello=
&quot; </i>will be executed, am I right? For example, finally returning an =
int or a record or a lazy.t, etc, &quot;hello&quot; would be printed out.</=
div>
<div><br></div><div>However, if I do</div><div><br></div><blockquote class=
=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left-width:1px;bo=
rder-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">=
let f2 () =3D print_endline &quot;hello&quot;; return 1;;</blockquote>
<div><br></div><div><i>let _ =3D f2 ();; </i>would do nothing unless I run =
the schedule <i>let _ =3D ignore(Scheduler.go());;=C2=A0</i></div><div><br>=
</div><div>Since for <i>f2</i>=C2=A0I am not using any other special creati=
on function and the only special bit is <i>return 1</i>=C2=A0after <i>print=
_endline</i>, if the compiler doesn&#39;t get involved, how can compiler kn=
ow the whole application of <i>f2()</i>=C2=A0should be in future execution?=
=C2=A0</div>
<div><br></div><div>Sorry for my above verbose questions if they are boring=
. I am just trying to understand more and I guess eventually I will look in=
to the code once I grasp the big picture.</div><div><br></div><div>thanks</=
div>
<div><br></div><div>Dan</div><div><br></div><div><br></div><div><br></div><=
div><br></div><div><br></div><div><br></div><div><br></div></div><div class=
=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Tue, Jun 3, 2014 at =
5:29 PM, David House <span dir=3D"ltr">&lt;<a href=3D"mailto:dhouse@janestr=
eet.com" target=3D"_blank">dhouse@janestreet.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr">There is a queue of jobs in=
 the scheduler. The scheduler runs the jobs one by one. Jobs may schedule o=
ther jobs. A job is a pair of [&#39;a * &#39;a -&gt; unit].<div>
<br></div><div>There&#39;s a thing called a deferred. [&#39;a Deferred.t] i=
s an initially empty box that may become filled later with something of typ=
e [&#39;a]. There is a similar type called [&#39;a Ivar.t] -- the differenc=
e is that ivars have a function to actually fill in the value, whereas defe=
rreds do not: a deferred is a &quot;read-only&quot; view on an ivar.</div>

<div><br></div><div>You can wait on a deferred using bind. Doing [x &gt;&gt=
;=3D f] mutates the deferred x to add f as a &quot;handler&quot;. When a de=
ferred is filled, it adds a job to the scheduler for each handler it has.=
=C2=A0</div>

<div><br></div><div>Doing [Deferred.return 1] allocates a deferred which is=
 already filled and has no handlers. Binding on that will immediately sched=
ule a job to run your function. (The job is still scheduled though, rather =
than being run immediately, to ensure that you don&#39;t have an immediate =
context switch -- in async, the only context switch points are the binds.)<=
/div>

<div><br></div><div>The primitive operations that block are replaced with f=
unctions that return deferreds, and go do their work in a separate thread. =
There&#39;s a thread pool to make sure you don&#39;t use infinity threads. =
(I think the default cap is 50 threads.) I think yes, async does depend on =
-thread.</div>

<div><br></div><div>There is an important optimisation: if you want to read=
 or write to certain file descriptors, that doesn&#39;t use a thread. Inste=
ad there&#39;s a central list of such file descriptors. There&#39;s also a =
central list of all &quot;timer events&quot; (e.g. deferreds that become de=
ferred after some amount of time). The scheduler actually is based around a=
 select loop: it does the following:</div>

<div><br></div><div>run all the jobs</div><div>if more jobs have been sched=
uled, run those too</div><div>keep going until there are no more jobs, or w=
e hit the maximum-jobs-per-cycle cap</div><div>sleep using select until one=
 read fd is read, or a write fd is ready, or a timer event is due to fire</=
div>

<div>do that thing</div><div><br></div><div>There&#39;s also a way to manua=
lly interrupt the scheduler. Blocking operations other than reading/writing=
 to fds do this: they run in a thread, grab the async scheduler lock, fill =
in an ivar, then wake up the scheduler to ensure timely running of the jobs=
 they just scheduled. The async scheduler lock is necessary because the sch=
eduler itself is not re-entrant: you cannot have multiple threads modifying=
 the scheduler&#39;s internals.</div>

</div><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><b=
r><br><div class=3D"gmail_quote">On 3 June 2014 16:39, Dan Stark <span dir=
=3D"ltr">&lt;<a href=3D"mailto:interlock.public@gmail.com" target=3D"_blank=
">interlock.public@gmail.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Hi all<div><br></div><div>I=
 am trying to get a rough overview of how Async is implemented (or the idea=
 behind it) before I really dig into its source code.</div>

<div><br></div><div>I have the following questions:</div>
<div><br></div><div><b>Q1:</b>=C2=A0Is Async event-loop like?</div><div><br=
></div><div>From the API and some docs for Async&#39;s usage, I feel it is =
quite like a event-loop.=C2=A0</div><div><br></div><div>You create Deferred=
.t and it might be added to a queue and a scheduler behind might be adjusti=
ng the order of running for all Deferred.t in the queue.=C2=A0</div>


<div><br></div><div>Am I correct?</div><div><br></div><div><b>Q2:</b> Defer=
red.return and Deferred.bind</div><div><br></div><div>If I say</div><div><b=
r></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex=
;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style=
:solid;padding-left:1ex">


Deferred.return 1</blockquote><div><br></div><div>It will returns me a Defe=
rred.t, but inside the function <i>return</i>=C2=A0or <i>bind</i> somehow a=
n &quot;event&quot; is implicitly added to the default queue for scheduling=
, right?</div>


<div><br></div><div>If I am correct above,=C2=A0</div><div><br></div><div><=
b>Q3:</b>=C2=A0Is Async depending on -thread? The queue or scheduler needs =
compiler support?=C2=A0</div><div><br></div><div>I just need to understand =
the whole picture in a rough way first.</div>


<div><br></div><div>Thanks</div><span><font color=3D"#888888"><div><br></di=
v><div>Dan</div><div><br></div><div><br></div><div><br></div><div><br></div=
><div><br></div><div><br></div><div><br></div><div><br></div>
<div><br></div><div><br></div><div><br></div>
<div><br></div></font></span></div>
</blockquote></div><br></div>
</div></div></blockquote></div><br></div>

--089e01176feb0449dd04faf4cbcb--
