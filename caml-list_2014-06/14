Return-Path: <yminsky@janestreet.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id F0B437F8F2
	for <caml-list@sympa.inria.fr>; Tue,  3 Jun 2014 14:48:10 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yminsky@janestreet.com) identity=pra;
  client-ip=38.105.200.112;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="yminsky@janestreet.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yminsky@janestreet.com designates 38.105.200.112 as permitted
  sender) identity=mailfrom; client-ip=38.105.200.112;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="yminsky@janestreet.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mxout1.mail.janestreet.com) identity=helo;
  client-ip=38.105.200.112;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yminsky@janestreet.com";
  x-sender="postmaster@mxout1.mail.janestreet.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AlYBAF3DjVMmachwnGdsb2JhbABZg1lYgmyqDJVmAYEFCBYOAQEBAQEGFgk8giUBAQEEEhEdAQEjCQsBDwsLDQICCAEdAgIhARIBBQEKEgYTEgwEiAwDEQMCCKElaoowd4R/AQWZcQMKhUIRBoEqiAmDCYE/VweCdYFLhGMFkyeBeIE+i3+EAxgphQSBUg
X-IPAS-Result: AlYBAF3DjVMmachwnGdsb2JhbABZg1lYgmyqDJVmAYEFCBYOAQEBAQEGFgk8giUBAQEEEhEdAQEjCQsBDwsLDQICCAEdAgIhARIBBQEKEgYTEgwEiAwDEQMCCKElaoowd4R/AQWZcQMKhUIRBoEqiAmDCYE/VweCdYFLhGMFkyeBeIE+i3+EAxgphQSBUg
X-IronPort-AV: E=Sophos;i="4.98,965,1392159600"; 
   d="scan'208";a="77788815"
Received: from mxout1.mail.janestreet.com ([38.105.200.112])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-SHA; 03 Jun 2014 14:48:09 +0200
Received: from tot-smtp.delacy.com ([172.27.22.15] helo=tot-smtp)
	by mxout1.mail.janestreet.com with esmtps (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.82)
	(envelope-from <yminsky@janestreet.com>)
	id 1Wro8O-0005Y0-12
	for caml-list@inria.fr; Tue, 03 Jun 2014 08:48:08 -0400
Received: from tot-dmz-mxgoog1.delacy.com ([172.27.224.14] helo=mxgoog2.janestreet.com)
	by tot-smtp with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72)
	(envelope-from <yminsky@janestreet.com>)
	id 1Wro8N-0005Pa-SZ
	for caml-list@inria.fr; Tue, 03 Jun 2014 08:48:07 -0400
Received: from mail-lb0-f178.google.com ([209.85.217.178])
	by mxgoog2.janestreet.com with esmtp (Exim 4.76)
	(envelope-from <yminsky@janestreet.com>)
	id 1Wro8N-0007F0-MP
	for caml-list@inria.fr; Tue, 03 Jun 2014 08:48:07 -0400
Received: by mail-lb0-f178.google.com with SMTP id w7so3352784lbi.37
        for <caml-list@inria.fr>; Tue, 03 Jun 2014 05:48:07 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=janestreet.com; s=google;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=QlpEfV6WLQ7dORICyAgbHfXYymHVv/0aKycoDi3VEgI=;
        b=StqdxZLVAdnqEeBVHTFn+vroI189jw5PEwSARg26RyixzMsmty2bEcDmWy5npvhxNL
         VZsL+YnwItEphVmtUfy9AQFcjqc6rdxlXiSjQObQ0+veR8eVXQr8wgyB1C/6qIcQtWcE
         30YF8a0My2D5mTnqP3w3GPhZpOXiHSwVVZztM=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=QlpEfV6WLQ7dORICyAgbHfXYymHVv/0aKycoDi3VEgI=;
        b=bjWU8hMDd07+BtfDPqtRwrwkSChzXrrxcEEbSNhbE3AIxx6S3cLWEQE95QMenwmQOj
         O8oZwTxKwnm8GUdHhY8QdGuVgzT1mGgfrp3DoQwpsh4IyLezfG/PZ040FWgwihcWLuwd
         XxUuTFcvip1Q25rJ99xxHAu3022DIr1Dqo8B58ZTU0KC3yivc+8uDD7MFkUNW41OolxV
         WYAXreqP36DKYwVeRtsvNQg6eCP3UcL/1NCt+KGesVwfmoVhcg1A4b9Vpefxgx2Lxk+V
         d/qm43CIsvzQpayUIPSNuwX/fh6fQQGh4arrQjdsV9ENLWemoSdzAxjxX3ePMcBzFa6P
         BzXg==
X-Gm-Message-State: ALoCoQmi6MQwGzedkoHFSyT8zPXmdZ23wYNzicLQPLY3ZZvaep9n+z8BXcoZ81n3n918Zpiv24biVa/YCrV2lNNJAxrAKUeARyQvAKWveNnsC2QPNV9ailpfSCgOoq2V5RNu9TUwG5eP
X-Received: by 10.152.5.98 with SMTP id r2mr3042274lar.59.1401799686989;
        Tue, 03 Jun 2014 05:48:06 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.152.5.98 with SMTP id r2mr3042259lar.59.1401799686853; Tue,
 03 Jun 2014 05:48:06 -0700 (PDT)
Received: by 10.112.3.39 with HTTP; Tue, 3 Jun 2014 05:48:06 -0700 (PDT)
In-Reply-To: <CAPFanBGWGDw9ofH8_643CMg9PgX7xkSD8hWROnh5KpSmm4wgcw@mail.gmail.com>
References: <543099239773658961@orange.fr>
	<1401716071976.85ecb8da@Nodemailer>
	<CAPFanBGWGDw9ofH8_643CMg9PgX7xkSD8hWROnh5KpSmm4wgcw@mail.gmail.com>
Date: Tue, 3 Jun 2014 08:48:06 -0400
Message-ID: <CACLX4jS0Hn04JZnaxB2eh=4Tr3c73drKS0EsFP1oJfMUZ+qkeg@mail.gmail.com>
From: Yaron Minsky <yminsky@janestreet.com>
To: Gabriel Scherer <gabriel.scherer@gmail.com>
Cc: Andrew Herron <andrew.herron@gmail.com>, Damien Guichard <alphablock@orange.fr>, 
	Caml List <caml-list@inria.fr>, David Powers <dpowers@janestreet.com>
Content-Type: text/plain; charset=UTF-8
Subject: Re: [Caml-list] Why AVL-tree?

The following summary of what we do with respect to Maps and Sets in
Core was written by David Powers (who isn't yet subscribe to the list,
so he asked me to forward it on.)

In Core we use a slight modification of the AVL tree found in the
standard library.  I think the biggest change (other than the
interface) is that we add a specialized constructor (Leaf of 'key *
'value) as a specialization of Node (left * key * value * right) to
limit allocation.  It's a nice speed bump and doesn't do too much
damage to the readability of the code.

We also spent a bunch of time last summer working through the research
papers of the last 10 years to see if we could find an implementation
we liked better.  I'd have to pull up the full history of the project
to give real details, but we tried at least all of the following:

- red-black trees
- left-leaning red-black trees
- treaps (including a variant that stored entropy in the spare bits in
the variant tag)
- splay trees
- weight balanced trees
- AVL trees with GADT enforcement of the invariants
- 1-2 brother trees

I'll lead with the caveat that benchmarking is hard, and these
structures shine in different ways depending on the type of workload
you throw at them.  Each implementation below was also mostly a
first-pass to understand the structure and do simple tests, so there
may be more speed gold in the hills.  Your mileage may vary.

That said, our conclusions at the end:

- red black trees are hard to code and understand (mostly due to
remove), and don't show a real performance win.

- treaps are a wonderful structure in terms of code simplicity, but
getting enough randomness quickly enough is too costly to make them a
win over AVL trees (you need to allocate just as much and you need to
generate randomness)

- splay trees are in our tree, but are too special purpose to be a general win.

- Weight balanced trees are a nice structure, and are used in other
languages/libraries.  They were neither better or worse than AVL
trees.

- AVL trees with GADT enforcement work, but were actually slower than
straightforward AVL trees at the time we tested them.  There is some
extra matching due to the variant having more cases, so perhaps this
isn't surprising.  It's also likely that we didn't carry the
2-imbalance trick into the GADT version, which might have skewed the
result.

- 1-2 brother trees were the best of the lot, and we actually produced
a version of the code that we felt was an overall win (or tie) for all
workloads.  Unfortunately, the optimizations we needed to get us there
made the code much longer and harder to understand than the AVL tree
code.  We just couldn't convince ourselves that it was worth it.

Probably the most important point is that nothing we did above gave a
general win of more than 10-20% in the tight loop case.  Given that,
we kept our tweaked AVL tree implementation.  If you want to be very
very fast, you probably can't get away with a map, and if you just
want to be "fast enough" the AVL tree we have is a nice set of
tradeoffs for code complexity.

On Mon, Jun 2, 2014 at 11:06 AM, Gabriel Scherer
<gabriel.scherer@gmail.com> wrote:
> Note that OCaml's balanced trees are not exactly what is usually
> called AVL, as the imbalance between different branches can be at most
> 2 (+1 on one side and -1 on the other) instead of just 1 as the
> traditional definition assumes.
>
> On Mon, Jun 2, 2014 at 3:34 PM, Andrew Herron <andrew.herron@gmail.com> wrote:
>> Wikipedia has some notes on the difference:
>>
>> http://en.wikipedia.org/wiki/AVL_tree
>>
>> AVL has faster lookup, so maybe they decided to optimise for that.
>>
>> It's different to some other languages I've seen, but then so is their
>> decision to not use a tail recursive List.map. Each to their own, it's not
>> hard to implement the alternative :)
>>
>>
>> On Mon, Jun 2, 2014 at 11:21 PM, Damien Guichard <alphablock@orange.fr>
>> wrote:
>>>
>>>
>>> Red-black tree would spare a machine word per node, because a red-black
>>> tree doesn't need depth information.
>>> Hence the reason is either historical or a space/speed trade-off
>>> (comparing two depths may be faster than pattern matching).
>>>
>>> Regards,
>>>
>>> damien guichard
>>>
>>> Hi, list,
>>>
>>> Just from the curiosity, why balanced binary trees used in Set and Map are
>>> AVL-trees, not their alternative, say, red-black trees?  Is there a deep
>>> reason for it, or just a historical one?
>>>
>>> Best,
>>> --
>>> Yoriyuki Yamagata
>>> http://yoriyuki.info/
>>>
>>>
>>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
