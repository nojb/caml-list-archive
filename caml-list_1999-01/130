Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA10824 for caml-redistribution; Thu, 28 Jan 1999 13:22:31 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA28551 for <caml-list@pauillac.inria.fr>; Thu, 28 Jan 1999 10:59:02 +0100 (MET)
Received: from zarya.maya.com (zarya.maya.com [192.70.254.128])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA07863
	for <caml-list@inria.fr>; Thu, 28 Jan 1999 10:59:00 +0100 (MET)
Received: (from prevost@localhost)
	by zarya.maya.com (8.8.7/8.8.7) id EAA20943;
	Thu, 28 Jan 1999 04:58:42 -0500
Sender: weis
To: caml-list@inria.fr
Subject: Optimization with -inline n
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
From: John Prevost <prevost@maya.com>
Date: 28 Jan 1999 04:58:42 -0500
Message-ID: <ya2aez367n1.fsf@zarya.maya.com>
Lines: 9
User-Agent: Gnus/5.070072 (Pterodactyl Gnus v0.72) Emacs/20.3

In what circumstances will ocamlopt -inline n put a function in-line?
I was just trying it to see what effect it could have on my monadic
parsing libraries, but it didn't seem to have much effect, whereas my
inlining by hand did.  I take this to mean that it does not, at least,
cross module boundaries.

When should I expect to see ocamlopt inlining functions?

jmp



