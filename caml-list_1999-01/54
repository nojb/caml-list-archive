Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA08933 for caml-redistribution; Wed, 20 Jan 1999 14:02:40 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA05092 for <caml-list@pauillac.inria.fr>; Wed, 20 Jan 1999 03:29:50 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id DAA19409
	for <caml-list@inria.fr>; Wed, 20 Jan 1999 03:29:46 +0100 (MET)
Received: from localhost (safran.kurims.kyoto-u.ac.jp [130.54.16.91])
	by kurims.kurims.kyoto-u.ac.jp (8.9.1a/3.7W) with ESMTP id LAA22143;
	Wed, 20 Jan 1999 11:29:39 +0900 (JST)
To: tews@irritatie.cs.kun.nl
Cc: caml-list@inria.fr
Subject: Re: Obj module
In-Reply-To: Your message of "Tue, 19 Jan 1999 14:09:00 +0100"
	<199901191309.OAA31814@irritatie.cs.kun.nl>
References: <199901191309.OAA31814@irritatie.cs.kun.nl>
X-Mailer: Mew version 1.93 on Emacs 20.3 / Mule 4.0 (HANANOEN)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <19990120112904E.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 20 Jan 1999 11:29:04 +0900
From: Jacques GARRIGUE <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 980905(IM100)
Lines: 24
Content-Transfer-Encoding: 7bit
Sender: weis

From: Hendrik Tews <tews@irritatie.cs.kun.nl>

> where can I find documentation on the Obj module in the standard
> library?

There is (intentionally) no documentation to this module.
But it shall be rather easy to understand once you read the chapter on
interfacing with C in the reference manual, which gives lots of
information about how values are represented physically.

> Can somebody explain the meaning of those C primitives starting
> with a percent sign, eg "%identity"?

These primitives are handled in a special way by the compiler.
For "%identity", it is simply discarded, as you might expect.
Some others are converted to instructions of the abstract machine.
And finally some may really call C primitives.
The only way to really know what happens is to read the compiler's
sources.

Jacques
---------------------------------------------------------------------------
Jacques Garrigue      Kyoto University     garrigue at kurims.kyoto-u.ac.jp
		<A HREF=http://wwwfun.kurims.kyoto-u.ac.jp/~garrigue/>JG</A>



