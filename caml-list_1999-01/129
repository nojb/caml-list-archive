Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA25089 for caml-redistribution; Thu, 28 Jan 1999 13:22:04 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA24569 for <caml-list@pauillac.inria.fr>; Thu, 28 Jan 1999 10:54:35 +0100 (MET)
Received: from link.csem.ch (link.csem.ch [138.131.145.25])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id KAA07688
	for <caml-list@inria.fr>; Thu, 28 Jan 1999 10:54:34 +0100 (MET)
Received: from exchsrv.csem.ch by link.csem.ch; Thu, 28 Jan 1999 10:55:06 +0100 (MET)
Received: from CODER (coder.csem.ch [138.131.12.118]) by exchsrv.csem.ch with SMTP (Microsoft Exchange Internet Mail Service Version 5.5.2232.9)
	id D4SYR2NG; Thu, 28 Jan 1999 10:54:06 +0100
To: caml-list@inria.fr
Subject: Re: Looking for a nail
References: <199901252037.VAA22593@miss.wu-wien.ac.at>
Mime-Version: 1.0
From: Michel Schinz <michel.schinz@csem.ch>
Date: 28 Jan 1999 10:54:29 +0100
In-Reply-To: Markus Mottl's message of "26 Jan 1999 18:49:00 +0100"
Message-ID: <usocvsox6.fsf@csem.ch>
Lines: 36
User-Agent: Gnus/5.070063 (Pterodactyl Gnus v0.63) Emacs/20.3
Sender: weis

Markus Mottl <mottl@miss.wu-wien.ac.at> writes:

[...]
> There is even a much more radical approach concerning OO: Make all
> basic types classes! This would e.g. allow to put all kinds of
> values into a list and iterate it with a print function - just one
> of many other then possible things I miss...

I'm not sure this is such a good idea for CAML. The non-OO part of
CAML is quite mature, while the OO part is more like research. Forcing
everybody to use CAML as an OO language is IMHO not a very nice thing.
I do not use the OO part of CAML at all right now, and I'm pretty sure
I'm not the only one. I think we need more experience with the OO part
of CAML (or, more fundamentally with OO programming in a functional
language) before choosing to use it for basic types.

Don't get me wrong, I have nothing against purely-OO languages. I
*love* Self, Smalltalk, ... I just think that it's not appropriate for
CAML at this time. Later, when we have more experience, maybe, but not
now.

[...]
> As Okasaki shows, most kinds of data structures can be implemented
> in a very efficient and still purely applicative way. I am not sure
> whether there are many data structures that deserve their existence
> in both forms...

I think that having arrays with in-place modification is almost a
must, for example. For some applications, having only functional
arrays is pretty awful.

I agree with you that for some data-structures, having a
non-functional version when the functional one is efficient is maybe
not such a good idea.

Michel.



