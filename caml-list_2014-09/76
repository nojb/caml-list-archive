Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id DE2DD7F75C
	for <caml-list@sympa.inria.fr>; Tue,  9 Sep 2014 17:32:23 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.192.44 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f44.google.com) identity=helo;
  client-ip=209.85.192.44;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qg0-f44.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AuYBAAQdD1TRVcAslGdsb2JhbABZhDcEgnjQAQgWEAEBAQEHCwsJEiyDeiIRHQEbHgMSCAEHNwIkAREBBQEiGxqICwEDEZdegxlrizCBcoMQiTMKGScNZoV3AREBBQ6SP4FTAQScc5M8GCmFLiEvgk8BAQE
X-IPAS-Result: AuYBAAQdD1TRVcAslGdsb2JhbABZhDcEgnjQAQgWEAEBAQEHCwsJEiyDeiIRHQEbHgMSCAEHNwIkAREBBQEiGxqICwEDEZdegxlrizCBcoMQiTMKGScNZoV3AREBBQ6SP4FTAQScc5M8GCmFLiEvgk8BAQE
X-IronPort-AV: E=Sophos;i="5.04,492,1406584800"; 
   d="scan'208";a="78333045"
Received: from mail-qg0-f44.google.com ([209.85.192.44])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 09 Sep 2014 17:32:23 +0200
Received: by mail-qg0-f44.google.com with SMTP id f51so5411437qge.17
        for <caml-list@inria.fr>; Tue, 09 Sep 2014 08:32:22 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=fD3bKPJoFv8gb+7IhszbDY91x7IsjhhPu6k1nLCyHHg=;
        b=pzLB6vwpCXFdkL9VCOOIvyXjk+1k4dQ4rH/Dli2qo8AwtZsaH7o4N0TW1zZudJomyJ
         thi+BGtavXHdUllQ+FMikpvJoY6dADn8JOV7ryUfJq27FtsbznZo69AcfIpOZtQ1AeC4
         Ai/faEBSOYMytRrXZneHrpzR8/+/UMzNSaIi8RGerReo68/BTKAeRHZroSTuauVHju8F
         bXJRp03vb/U41zFo3YTcjiiujCw/x7lMQeuyhl8NAcuEgztJaDKWWf3lWSH8RsCEs8Y8
         OlxjfaxRT4GGgMu/NicRetJx3JJvbYLkI2n8xpdsvcOILtKFaKW/lzH1s9D9C5cZ0uxn
         6K1w==
X-Received: by 10.140.109.75 with SMTP id k69mr19347470qgf.96.1410276741974;
 Tue, 09 Sep 2014 08:32:21 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.174.68 with HTTP; Tue, 9 Sep 2014 08:32:01 -0700 (PDT)
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Tue, 9 Sep 2014 11:32:01 -0400
Message-ID: <CAN6ygOkMTDYLbfZrL2rSBFK15psESCgEnoeDPMBXWsLt8HCEhQ@mail.gmail.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1139bd023d95660502a3a4b0
Subject: [Caml-list] Implicit module question

--001a1139bd023d95660502a3a4b0
Content-Type: text/plain; charset=UTF-8

I loved the Implicit Module presentation, and I'm very happy for ocaml to
be moving from a fully dynamic first-class-module existential type model
(excluding functors of course) that can't be optimized to one where the
compiler is in control and can do significant static analysis. I have a
question about the implicit module implementation: Is there any way to
combine modules automatically? For example, suppose I have a Show implicit
module and an Ord implicit module, and a function receives both, and wants
to infer both functionalities for an incoming type so we can run both show
and compare on the same type. Does the current model cover such a use-case?
If not, is there any idea how to move in this direction? Automatic module
fusion perhaps?

Thanks,

Yotam

--001a1139bd023d95660502a3a4b0
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I loved the Implicit Module presentation, and I&#39;m very=
 happy for ocaml to be moving from a fully dynamic first-class-module exist=
ential type model (excluding functors of course) that can&#39;t be optimize=
d to one where the compiler is in control and can do significant static ana=
lysis. I have a question about the implicit module implementation: Is there=
 any way to combine modules automatically? For example, suppose I have a Sh=
ow implicit module and an Ord implicit module, and a function receives both=
, and wants to infer both functionalities for an incoming type so we can ru=
n both show and compare on the same type. Does the current model cover such=
 a use-case? If not, is there any idea how to move in this direction? Autom=
atic module fusion perhaps?<div><br></div><div>Thanks,</div><div><br></div>=
<div>Yotam</div></div>

--001a1139bd023d95660502a3a4b0--
