Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 2C26E7F75C
	for <caml-list@sympa.inria.fr>; Thu, 11 Sep 2014 01:16:59 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.192.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.192.45 as permitted
  sender) identity=mailfrom; client-ip=209.85.192.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qg0-f45.google.com) identity=helo;
  client-ip=209.85.192.45;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qg0-f45.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aj8BAEvbEFTRVcAtm2dsb2JhbABgg2BbgnjFYYFph00BgQsIFhABAQEBAQYLCwkUKoQDAQEBAwESEQQZARsdAQMBCwYDAgsNKgICIQEBEQEFARwGEyKICwEDCQgNjTmQKmuLMIFygxCJAQoZJw1mhXwBEQEFDo0Sgi0HgnmBUwEElXmEc4IQgV+NHYRLGCmFLiEvAYJOAQEB
X-IPAS-Result: Aj8BAEvbEFTRVcAtm2dsb2JhbABgg2BbgnjFYYFph00BgQsIFhABAQEBAQYLCwkUKoQDAQEBAwESEQQZARsdAQMBCwYDAgsNKgICIQEBEQEFARwGEyKICwEDCQgNjTmQKmuLMIFygxCJAQoZJw1mhXwBEQEFDo0Sgi0HgnmBUwEElXmEc4IQgV+NHYRLGCmFLiEvAYJOAQEB
X-IronPort-AV: E=Sophos;i="5.04,502,1406584800"; 
   d="scan'208";a="94038145"
Received: from mail-qg0-f45.google.com ([209.85.192.45])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 11 Sep 2014 01:16:58 +0200
Received: by mail-qg0-f45.google.com with SMTP id j107so6612391qga.4
        for <caml-list@inria.fr>; Wed, 10 Sep 2014 16:16:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=87CAskQvgzX0xV0xD6IQjeoJnHJwppR1Q1irDxrKg/A=;
        b=blH8QP1LTp+2qzl1fDCbRvLHO0Oc5vp4CsKztgen0Yhx9hZA1u0NzQUX1+cZ1I9gGV
         zOwCiKZsZJZTEiPg+MecPuIIAqeey0RpG2nj1mEYZNEEGwW0TU1Uh6eylQvYvWqgv2eX
         8LXtO28Ki+eOHvQsCHG0hDXJ5KjzKGStdRgQsz9b356VLcrxcsBvmdssZgozCx5OMafh
         pBdN0IQHzQxl6ydo+BkHmfpAKH9t7EaKq5yI0dxRFfAJ+gT6Sm267Kr6S+oiXksSQFBe
         mgR0gnMyi7U7x1VcYCe9TwfXCfkADNm/0bne1Y86UMOpb677Qz+EtfhOdwW7NUpdWaxE
         vfHg==
X-Received: by 10.224.8.131 with SMTP id h3mr8556385qah.35.1410391017219; Wed,
 10 Sep 2014 16:16:57 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.174.68 with HTTP; Wed, 10 Sep 2014 16:16:37 -0700 (PDT)
In-Reply-To: <CAAxsn=E2XnZ+r=WmH4Ao-4gSPCj6NBR2eV1OdOpokCm6Z7v4Tw@mail.gmail.com>
References: <CAN6ygOn3_xL3MT=LH_NvdZn4mLkpfs-4hCn__hgu0CMP2BY=+g@mail.gmail.com>
 <CAAxsn=Hdk6VpPFC0uLdZaXeN5nBAt3FwvmWJ+aSo7teKcq_tww@mail.gmail.com>
 <CAN6ygOn1cgA3n0Q8QxHopgWqHK9b+z_wRGg+Be7UcBY=fL3tFw@mail.gmail.com> <CAAxsn=E2XnZ+r=WmH4Ao-4gSPCj6NBR2eV1OdOpokCm6Z7v4Tw@mail.gmail.com>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Wed, 10 Sep 2014 19:16:37 -0400
Message-ID: <CAN6ygO=q+hsugSMzFP-Hf3WM40yfORv+O8KYN3uQ=5n5OxNLdg@mail.gmail.com>
To: Jeremy Yallop <yallop@gmail.com>
Cc: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c2be64936ec80502be3f73
Subject: Re: [Caml-list] Undefined recursive module

--001a11c2be64936ec80502be3f73
Content-Type: text/plain; charset=UTF-8

Thank you for the detailed explanation. That makes sense, as much as I wish
there was a static detection mechanism in place for this kind of thing.

On Wed, Sep 10, 2014 at 6:50 PM, Jeremy Yallop <yallop@gmail.com> wrote:

> On 10 September 2014 23:26, Yotam Barnoy <yotambarnoy@gmail.com> wrote:
> > On Wed, Sep 10, 2014 at 6:20 PM, Jeremy Yallop <yallop@gmail.com> wrote:
> >>
> >> On 10 September 2014 21:32, Yotam Barnoy <yotambarnoy@gmail.com> wrote:
> >> > I just encountered this nasty RUNTIME error in my code. What does it
> >> > mean?
> >> > How does it happen?
> >>
> >> The behaviour is documented in the manual:
> >>
> >>    http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc75
> >>
> >> See the paragraph beginning "Currently, the compiler requires [...]".
> >
> > Thanks. Does it make sense that changing a function definition from
> > point-free to an explicit definition should eliminate this exception?
>
> Yes, that's the expected behaviour.  Initially the fields in a
> recursive module are bound to functions that raise an exception.  The
> module initialization then overwrites each field with its actual
> value, which is determined by evaluating the expression on the right
> hand side of the field definition.  If evaluating the right hand side
> involves reading one of the fields of the module that has not yet been
> overwritten then the field will resolve to the exception-raising
> function, which may lead to the runtime error that you've seen.
>
> Here's an example.  Suppose you have a recursive module like this:
>
>   module rec M1
>     : sig val x : unit -> unit end =
>   struct
>       let x = M1.x
>   end
>
> Then the initial state of the module at runtime has x bound to a
> function that raises an exception:
>
>    module rec M1
>      : sig val x : unit -> unit end =
>    struct
>        let x = fun _ -> raise Undefined_recursive_module
>    end
>
> Module initialization then overwrites the field with the result of
> evaluating the right-hand side -- that is, by the result of evaluating
> M1.x:
>
>    M1.x <- (fun _ -> raise Undefined_recursive_module)
>
> Calling M1.x will lead to the exception being raised:
>
>    M1.x ()
>      => raise Undefined_recursive_module
>
> Now consider what happens when you eta-expand the definition of x.
> Here's the source program
>
>    module rec M2 : sig val x : unit -> unit end =
>    struct
>        let x = fun e -> M2.x e
>    end
>
> The initial state of the module at runtime is the same as for M1:
>
>    module rec M2 : sig val x : unit -> unit end =
>    struct
>        let x = fun _ -> raise Undefined_recursive_module end
>    end
>
> Once again, module initialization overwrites the field with the result
> of evaluating the right-hand side.  This time, however, evaluating the
> right-hand side doesn't require resolving M2.x, since M2.x is under a
> 'fun' binding:
>
>    M2.x <- (fun e -> M2.x e)
>
> When you come to call M2.x the recursive reference resolves to the new
> value of the field and evaluation proceeds as expected:
>
>    M2.x ()
>      => M2.x ()
>
> As the manual says, all of this is subject to change, and it's best
> not to rely on the current behaviour.  I recommend that you avoid
> using recursive modules for value-level recursion, if possible.
>

--001a11c2be64936ec80502be3f73
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thank you for the detailed explanation. That makes sense, =
as much as I wish there was a static detection mechanism in place for this =
kind of thing.</div><div class=3D"gmail_extra"><br><div class=3D"gmail_quot=
e">On Wed, Sep 10, 2014 at 6:50 PM, Jeremy Yallop <span dir=3D"ltr">&lt;<a =
href=3D"mailto:yallop@gmail.com" target=3D"_blank">yallop@gmail.com</a>&gt;=
</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex"><span class=3D"">On 10 Sep=
tember 2014 23:26, Yotam Barnoy &lt;<a href=3D"mailto:yotambarnoy@gmail.com=
">yotambarnoy@gmail.com</a>&gt; wrote:<br>
&gt; On Wed, Sep 10, 2014 at 6:20 PM, Jeremy Yallop &lt;<a href=3D"mailto:y=
allop@gmail.com">yallop@gmail.com</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt; On 10 September 2014 21:32, Yotam Barnoy &lt;<a href=3D"mailto:yot=
ambarnoy@gmail.com">yotambarnoy@gmail.com</a>&gt; wrote:<br>
&gt;&gt; &gt; I just encountered this nasty RUNTIME error in my code. What =
does it<br>
&gt;&gt; &gt; mean?<br>
&gt;&gt; &gt; How does it happen?<br>
&gt;&gt;<br>
&gt;&gt; The behaviour is documented in the manual:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 <a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml=
-400/manual021.html#toc75" target=3D"_blank">http://caml.inria.fr/pub/docs/=
manual-ocaml-400/manual021.html#toc75</a><br>
&gt;&gt;<br>
&gt;&gt; See the paragraph beginning &quot;Currently, the compiler requires=
 [...]&quot;.<br>
&gt;<br>
</span><span class=3D"">&gt; Thanks. Does it make sense that changing a fun=
ction definition from<br>
&gt; point-free to an explicit definition should eliminate this exception?<=
br>
<br>
</span>Yes, that&#39;s the expected behaviour.=C2=A0 Initially the fields i=
n a<br>
recursive module are bound to functions that raise an exception.=C2=A0 The<=
br>
module initialization then overwrites each field with its actual<br>
value, which is determined by evaluating the expression on the right<br>
hand side of the field definition.=C2=A0 If evaluating the right hand side<=
br>
involves reading one of the fields of the module that has not yet been<br>
overwritten then the field will resolve to the exception-raising<br>
function, which may lead to the runtime error that you&#39;ve seen.<br>
<br>
Here&#39;s an example.=C2=A0 Suppose you have a recursive module like this:=
<br>
<br>
=C2=A0 module rec M1<br>
=C2=A0 =C2=A0 : sig val x : unit -&gt; unit end =3D<br>
=C2=A0 struct<br>
=C2=A0 =C2=A0 =C2=A0 let x =3D M1.x<br>
=C2=A0 end<br>
<br>
Then the initial state of the module at runtime has x bound to a<br>
function that raises an exception:<br>
<br>
=C2=A0 =C2=A0module rec M1<br>
=C2=A0 =C2=A0 =C2=A0: sig val x : unit -&gt; unit end =3D<br>
=C2=A0 =C2=A0struct<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0let x =3D fun _ -&gt; raise Undefined_recursive_=
module<br>
=C2=A0 =C2=A0end<br>
<br>
Module initialization then overwrites the field with the result of<br>
evaluating the right-hand side -- that is, by the result of evaluating<br>
M1.x:<br>
<br>
=C2=A0 =C2=A0M1.x &lt;- (fun _ -&gt; raise Undefined_recursive_module)<br>
<br>
Calling M1.x will lead to the exception being raised:<br>
<br>
=C2=A0 =C2=A0M1.x ()<br>
=C2=A0 =C2=A0 =C2=A0=3D&gt; raise Undefined_recursive_module<br>
<br>
Now consider what happens when you eta-expand the definition of x.<br>
Here&#39;s the source program<br>
<br>
=C2=A0 =C2=A0module rec M2 : sig val x : unit -&gt; unit end =3D<br>
=C2=A0 =C2=A0struct<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0let x =3D fun e -&gt; M2.x e<br>
=C2=A0 =C2=A0end<br>
<br>
The initial state of the module at runtime is the same as for M1:<br>
<br>
=C2=A0 =C2=A0module rec M2 : sig val x : unit -&gt; unit end =3D<br>
=C2=A0 =C2=A0struct<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0let x =3D fun _ -&gt; raise Undefined_recursive_=
module end<br>
=C2=A0 =C2=A0end<br>
<br>
Once again, module initialization overwrites the field with the result<br>
of evaluating the right-hand side.=C2=A0 This time, however, evaluating the=
<br>
right-hand side doesn&#39;t require resolving M2.x, since M2.x is under a<b=
r>
&#39;fun&#39; binding:<br>
<br>
=C2=A0 =C2=A0M2.x &lt;- (fun e -&gt; M2.x e)<br>
<br>
When you come to call M2.x the recursive reference resolves to the new<br>
value of the field and evaluation proceeds as expected:<br>
<br>
=C2=A0 =C2=A0M2.x ()<br>
=C2=A0 =C2=A0 =C2=A0=3D&gt; M2.x ()<br>
<br>
As the manual says, all of this is subject to change, and it&#39;s best<br>
not to rely on the current behaviour.=C2=A0 I recommend that you avoid<br>
using recursive modules for value-level recursion, if possible.<br>
</blockquote></div><br></div>

--001a11c2be64936ec80502be3f73--
