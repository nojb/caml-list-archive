Return-Path: <yotambarnoy@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 8CBA17F75C
	for <caml-list@sympa.inria.fr>; Fri, 12 Sep 2014 16:08:37 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  yotambarnoy@gmail.com) identity=pra; client-ip=209.85.216.51;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  yotambarnoy@gmail.com designates 209.85.216.51 as permitted
  sender) identity=mailfrom; client-ip=209.85.216.51;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="yotambarnoy@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qa0-f51.google.com) identity=helo;
  client-ip=209.85.216.51;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="yotambarnoy@gmail.com";
  x-sender="postmaster@mail-qa0-f51.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Am4BABz9ElTRVdgzm2dsb2JhbABfg2BXBIJ4sUeSR4Frh0wBgQYIFhABAQEBAQYLCwkUKoQDAQEBAgEBEgYLHQEbEgwDAQsGAwILDQ0aAwICIQEBEQEFAQoBEQYTEgIHB4gLAQMJCA2LMJAqa4swgXKDEIkgChknAwpmhhgBEQEFDo0SgUJnC4J5gVMFhQ0FkHKEdIIQgV+NIoRMGCmFLiEvgk8BAQE
X-IPAS-Result: Am4BABz9ElTRVdgzm2dsb2JhbABfg2BXBIJ4sUeSR4Frh0wBgQYIFhABAQEBAQYLCwkUKoQDAQEBAgEBEgYLHQEbEgwDAQsGAwILDQ0aAwICIQEBEQEFAQoBEQYTEgIHB4gLAQMJCA2LMJAqa4swgXKDEIkgChknAwpmhhgBEQEFDo0SgUJnC4J5gVMFhQ0FkHKEdIIQgV+NIoRMGCmFLiEvgk8BAQE
X-IronPort-AV: E=Sophos;i="5.04,513,1406584800"; 
   d="scan'208";a="94381591"
Received: from mail-qa0-f51.google.com ([209.85.216.51])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 12 Sep 2014 16:08:35 +0200
Received: by mail-qa0-f51.google.com with SMTP id i13so748500qae.10
        for <caml-list@inria.fr>; Fri, 12 Sep 2014 07:08:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        bh=Xg7rBxxQyGooBvvh9MnjeXH/V/ttADaN9yhLAYWtIkY=;
        b=K4O7AeOJHqs7KTvX+oORLHd/LudWQoEgjTMD2DllbJZz7GqYE0GveFd23JPSrLIecL
         Y84eh7sqBPXvbwnMXxVibT0ZTlrwE4qSNx/LRztVdeZnTCJ6SxRH13io+4YZxfQrZAG5
         jrgcIdmplXXLfjIo5akhmIqGdpLgUY2a8hP5n2vwIYxBbBZeWg+5FAJpRST38pjZljnn
         x+lcO5wX2bS/vmmClnpStqWiEf/tmytaE2A/a164ehO6lZnxLiGz7W4svZVBTGc6a5yC
         4z7wjOZD6aZ4GtWsXQ7e4VsrJZRis2qvnNW0lFbWiJRvpO4Zhl8GBVgi3+0ZX7xrfDKw
         6wTw==
X-Received: by 10.229.40.3 with SMTP id i3mr6656878qce.30.1410530914384; Fri,
 12 Sep 2014 07:08:34 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.174.68 with HTTP; Fri, 12 Sep 2014 07:08:14 -0700 (PDT)
In-Reply-To: <CACLX4jSV7XSY_Xxyf5GFm0W1zKw+6JjXewmD1owgi=Yoi_c57w@mail.gmail.com>
References: <CAN6ygO=P_QTa6Wk0=Wx=0XLwhGOP=16eGaGiacA5N60nRjApDQ@mail.gmail.com>
 <5410522E.3050207@inria.fr> <1410359012.3003.34.camel@thinkpad>
 <54106B6D.4040607@gmail.com> <CAN6ygOndvw0McYKsB20LtFAdZED-CnzEEZ9qc7PJAXRPBdDWAQ@mail.gmail.com>
 <54115517.9020209@inria.fr> <CACLX4jSV7XSY_Xxyf5GFm0W1zKw+6JjXewmD1owgi=Yoi_c57w@mail.gmail.com>
From: Yotam Barnoy <yotambarnoy@gmail.com>
Date: Fri, 12 Sep 2014 10:08:14 -0400
Message-ID: <CAN6ygOn+jD7waa0tAm-Ad6=0JR4RTL8sdBnUq9Mc5CnmMNRf6Q@mail.gmail.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1133cfe218c1710502ded22f
Subject: Re: [Caml-list] One build system to rule them all?

--001a1133cfe218c1710502ded22f
Content-Type: text/plain; charset=UTF-8

OK so here's my summary of what I've heard here so far:

- Ocaml does not yet have a (public) build system that the majority of
users can be happy with for all of their project needs.
- It seems difficult to have a build system that's simple enough to use for
small projects, flexible enough to handle the more complicated projects,
and that can scale.
- While declarative, dsl-based tools are appealing, they get bogged down as
you add features to them, making them become unwieldy.
- A better solution seems to be using a real programming language to
describe packages. In our case that should clearly be ocaml itself. The
trick is making the API simple.

Looking at some of the the available options:
- ocamlbuild (dsl-based) is a decent basic choice, but lacks advanced
features and has become weighed down by multiple file types (_tags,
myocamlbuild etc).
- OASIS (dsl-based) seems to be a good description layer for projects,
currently farming out the difficult work of building stuff to ocamlbuild,
but not really a contender in this race except as an abstraction layer.
- omake (dsl-based) has some fans, but becomes overly-complex for more
complicated projects.
- ocp-build (dsl-based) has had nothing but criticism on this thread. Is
there any ongoing work to address these criticisms?
- Jenga (uses ocaml) seems promising but has heavy dependencies, and is
currently not geared towards light projects.
- assemblage (uses ocaml) seems promising as well, and seems focused on
simplicity. Any comment from assemblage contributors on its status?

Also, while I understand some of the windows hatred, the fact is, most of
the world uses windows. Even using cygwin as a translation layer hurts
ocaml's ability to reach people. Ideally, a windows programmer could
download opam, ocaml and perhaps a mingw compiler, and begin to build
projects without any need for a shell or anything POSIX-like. This means
that the build system needs to obviate the need for any shell commands or
makefiles.

On Thu, Sep 11, 2014 at 6:37 AM, Yaron Minsky <yminsky@janestreet.com>
wrote:

> On Thu, Sep 11, 2014 at 3:53 AM, Francois Berenger
> <francois.berenger@inria.fr> wrote:
> > On 09/10/2014 08:59 PM, Yotam Barnoy wrote:
> >>
> >> Here's part of my motivation for starting this discussion now: I
> >> recently experienced a hard-drive failure and had to switch to my backup
> >> windows laptop. I was dismayed that opam is still not available for
> >> Windows, and while wodi is available, it's not nearly as well developed,
> >> and apparently requires many hacks for different packages.
> >>
> >> It seems to me that these hacks are some of the things that make
> >> platform compatibility hard for opam. Each build system has different
> >> requirements and methods of compilation, and making this approach
> >> cross-platform compatible is difficult. Ideally, a build system will
> >> abstract away the things that are not inter-platform compatible. This is
> >> why I don't like people using makefiles. Makefiles are not available
> >> natively on Windows, and they often contain other bits of shell code
> >> that isn't available on all POSIX platforms, let alone on Windows. Not
> >> to mention the fact that makefiles have a very tricky and sensitive
> >> syntax.
> >>
> >> I don't expect one build system to match everyone's requirements, but I
> >> think if we get together, make a list of requirements, and try to get
> >> over our personal biases, we can find something that works for most
> >> people, and with some group effort, can work for even more people in
> >> more use-cases. I'm not suggesting that we invent something new, but
> >> that we take something good and make it better, as well as make an
> >> effort to learn that tool and convert packages to use that tool.
> >>
> >> So here are some requirements I can think of (using some of the
> >> suggestions that have been brought up):
> >> - Easy to use, especially for small projects (large projects can afford
> >> to put more time into their build systems)
> >> - Abstract away platform considerations as much as possible. No
> >> dependence on specific shells and POSIX utilities.
> >> - Allows compilation of C files, which is quite common in ocaml
> packages.
> >> - Scalable to many directories and files
> >> - Uses ocamlfind to locate packages
> >> - Handles camlp4 and ppx
> >> - Parallel & incremental compilation
> >>
> >> About Jenga: I took a quick look at Jenga, and even though I'm impressed
> >> by its capabilities, the amount of code needed to be written even for
> >> simple projects is overwhelming. It's clearly a very flexible and
> >> powerful tool, but I'd say it's too flexible for the mainstream. There's
> >> always room for a build system that's integrated into ocaml itself (like
> >> Shake), but I think declarative build systems tend to be easier to
> >> comprehend for the average user.
> >>
> >> ocp-build actually looks very interesting. The manual (which is here:
> >>
> >>
> http://github.com/OCamlPro/ocp-build/blob/master/docs/user-manual/user-manual.pdf?raw=true
> )
> >> is incomplete, but contains a nice survey of the existing build tools,
> >> and motivation for making ocp-build. Has anyone had experience with
> >> ocp-build? Opam seems to be using it, but they also use a makefile
> >> (why?) with a bunch of shell commands inside (which is precisely the
> >> problem from my perspective). ocp-build is supposedly compatible with
> >> Windows, too.
> >
> >
> > Here is one thing I dislike in ocp-build: you have to explicitely list
> all
> > the source files (and maybe same thing for Jenga).
>
> Jenga is quite flexible, so you could write your jengaroot either way
> (to demand or not demand explicit source file lists.)  Our internal
> jengaroot does not require explicit source file lists.
>
> Not to confuse people, though, Jenga isn't really suitable for people
> just picking up and using yet.  We haven't yet written a suitable
> jengaroot for general use yet (though there is a version of our
> internal jengaroot that we've released, but it's not yet ready for
> prime time.)  So Jenga is interesting as an option to discuss, but not
> yet a practical option we want to encourage casual users to try.
>
> > I am way too lazy to do that, especially since other tools are able
> > to infer this list automatically (a library is just a list of modules,
> > an executable has a single entry point, the main function in a single
> file).
> >
> >> Yotam
> >>
> >>
> >> On Wed, Sep 10, 2014 at 11:17 AM, Leonardo Laguna Ruiz <
> modlfo@gmail.com
> >> <mailto:modlfo@gmail.com>> wrote:
> >>
> >>     My pick is ocamlbuild because:
> >>
> >>     - It works the same way in all platforms that I work (linux,osx,
> >>     windows msvc port, cygwin)
> >>     - If I can compile ocaml, then I have ocamlbuild
> >>     - It does not require external libraries
> >>
> >>     I have to say that I feel a little bit annoyed by the fact that some
> >>     other build systems or tools, do not work correctly in all the
> >>     platforms that I want to support.
> >>
> >>     Leonardo
> >>
> >>
> >>
> >>     On 9/10/2014 4:23 PM, Gerd Stolpmann wrote:
> >>
> >>         Am Mittwoch, den 10.09.2014, 15:29 +0200 schrieb Francois
> >> Berenger:
> >>
> >>             More seriously, concerning build systems, we clearly have
> >>             quite some
> >>             choice on the OCaml shelf:
> >>             - obuild
> >>             - ocamlbuild
> >>             - omake
> >>             - oasis (which in fact uses ocamlbuild, don't forget that)
> >>
> >>         oasis is not a build system. It is a package description format
> >> that
> >>         describes how to invoke the build (and more). So far there is
> only
> >>         built-in knowledge for ocamlbuild, but this may change, and you
> >> can
> >>         already call any external tool, so you can wrap any build system
> >> you
> >>         want. The intention is here more to create a uniform API for
> >>         starting
> >>         the build, which may help packagers and other people who
> >>         routinely build
> >>         software.
> >>
> >>         Gerd
> >>
> >>             - jenga
> >>             - [...]
> >>
> >>             My preffered is obuild
> >>             (https://github.com/ocaml-__obuild/obuild
> >>             <https://github.com/ocaml-obuild/obuild>),
> >>             for the terseness, readability and centralization of its
> build
> >>             descriptions. I would love to see the user community of
> >>             obuild grow,
> >>             so that we can get rid of more bugs, be able to compile
> _any_
> >>             OCaml project with it and implement even more cool features
> >>             (contributors are very welcome).
> >>
> >>             I don't want a ring to rule them all, jut a ring that fits
> >>             _my_ finger. ;)
> >>
> >>             --
> >>             Regards,
> >>             Francois.
> >>
> >>
> >>
> >>     --
> >>     Caml-list mailing list.  Subscription management and archives:
> >>     https://sympa.inria.fr/sympa/__arc/caml-list
> >>     <https://sympa.inria.fr/sympa/arc/caml-list>
> >>     Beginner's list: http://groups.yahoo.com/group/__ocaml_beginners
> >>     <http://groups.yahoo.com/group/ocaml_beginners>
> >>     Bug reports: http://caml.inria.fr/bin/caml-__bugs
> >>     <http://caml.inria.fr/bin/caml-bugs>
> >>
> >>
> >
> > --
> > Regards,
> > Francois.
> >
> > --
> > Caml-list mailing list.  Subscription management and archives:
> > https://sympa.inria.fr/sympa/arc/caml-list
> > Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> > Bug reports: http://caml.inria.fr/bin/caml-bugs
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--001a1133cfe218c1710502ded22f
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">OK so here&#39;s my summary of what I&#39;ve heard here so=
 far:<div><br></div><div>- Ocaml does not yet have a (public) build system =
that the majority of users can be happy with for all of their project needs=
.</div><div>- It seems difficult to have a build system that&#39;s simple e=
nough to use for small projects, flexible enough to handle the more complic=
ated projects, and that can scale.</div><div>- While declarative, dsl-based=
 tools are appealing, they get bogged down as you add features to them, mak=
ing them become unwieldy.</div><div>- A better solution seems to be using a=
 real programming language to describe packages. In our case that should cl=
early be ocaml itself. The trick is making the API simple.</div><div><br></=
div><div>Looking at some of the the available options:</div><div>- ocamlbui=
ld (dsl-based) is a decent basic choice, but lacks advanced features and ha=
s become weighed down by multiple file types (_tags, myocamlbuild etc).</di=
v><div>- OASIS (dsl-based) seems to be a good description layer for project=
s, currently farming out the difficult work of building stuff to ocamlbuild=
, but not really a contender in this race except as an abstraction layer.</=
div><div>- omake (dsl-based) has some fans, but becomes overly-complex for =
more complicated projects.=C2=A0</div><div>- ocp-build (dsl-based) has had =
nothing but criticism on this thread. Is there any ongoing work to address =
these criticisms?</div><div>- Jenga (uses ocaml) seems promising but has he=
avy dependencies, and is currently not geared towards light projects.</div>=
<div>- assemblage (uses ocaml) seems promising as well, and seems focused o=
n simplicity. Any comment from assemblage contributors on its status?</div>=
<div><br></div><div>Also, while I understand some of the windows hatred, th=
e fact is, most of the world uses windows. Even using cygwin as a translati=
on layer hurts ocaml&#39;s ability to reach people. Ideally, a windows prog=
rammer could download opam, ocaml and perhaps a mingw compiler, and begin t=
o build projects without any need for a shell or anything POSIX-like. This =
means that the build system needs to obviate the need for any shell command=
s or makefiles.</div></div><div class=3D"gmail_extra"><br><div class=3D"gma=
il_quote">On Thu, Sep 11, 2014 at 6:37 AM, Yaron Minsky <span dir=3D"ltr">&=
lt;<a href=3D"mailto:yminsky@janestreet.com" target=3D"_blank">yminsky@jane=
street.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div cla=
ss=3D"HOEnZb"><div class=3D"h5">On Thu, Sep 11, 2014 at 3:53 AM, Francois B=
erenger<br>
&lt;<a href=3D"mailto:francois.berenger@inria.fr">francois.berenger@inria.f=
r</a>&gt; wrote:<br>
&gt; On 09/10/2014 08:59 PM, Yotam Barnoy wrote:<br>
&gt;&gt;<br>
&gt;&gt; Here&#39;s part of my motivation for starting this discussion now:=
 I<br>
&gt;&gt; recently experienced a hard-drive failure and had to switch to my =
backup<br>
&gt;&gt; windows laptop. I was dismayed that opam is still not available fo=
r<br>
&gt;&gt; Windows, and while wodi is available, it&#39;s not nearly as well =
developed,<br>
&gt;&gt; and apparently requires many hacks for different packages.<br>
&gt;&gt;<br>
&gt;&gt; It seems to me that these hacks are some of the things that make<b=
r>
&gt;&gt; platform compatibility hard for opam. Each build system has differ=
ent<br>
&gt;&gt; requirements and methods of compilation, and making this approach<=
br>
&gt;&gt; cross-platform compatible is difficult. Ideally, a build system wi=
ll<br>
&gt;&gt; abstract away the things that are not inter-platform compatible. T=
his is<br>
&gt;&gt; why I don&#39;t like people using makefiles. Makefiles are not ava=
ilable<br>
&gt;&gt; natively on Windows, and they often contain other bits of shell co=
de<br>
&gt;&gt; that isn&#39;t available on all POSIX platforms, let alone on Wind=
ows. Not<br>
&gt;&gt; to mention the fact that makefiles have a very tricky and sensitiv=
e<br>
&gt;&gt; syntax.<br>
&gt;&gt;<br>
&gt;&gt; I don&#39;t expect one build system to match everyone&#39;s requir=
ements, but I<br>
&gt;&gt; think if we get together, make a list of requirements, and try to =
get<br>
&gt;&gt; over our personal biases, we can find something that works for mos=
t<br>
&gt;&gt; people, and with some group effort, can work for even more people =
in<br>
&gt;&gt; more use-cases. I&#39;m not suggesting that we invent something ne=
w, but<br>
&gt;&gt; that we take something good and make it better, as well as make an=
<br>
&gt;&gt; effort to learn that tool and convert packages to use that tool.<b=
r>
&gt;&gt;<br>
&gt;&gt; So here are some requirements I can think of (using some of the<br>
&gt;&gt; suggestions that have been brought up):<br>
&gt;&gt; - Easy to use, especially for small projects (large projects can a=
fford<br>
&gt;&gt; to put more time into their build systems)<br>
&gt;&gt; - Abstract away platform considerations as much as possible. No<br>
&gt;&gt; dependence on specific shells and POSIX utilities.<br>
&gt;&gt; - Allows compilation of C files, which is quite common in ocaml pa=
ckages.<br>
&gt;&gt; - Scalable to many directories and files<br>
&gt;&gt; - Uses ocamlfind to locate packages<br>
&gt;&gt; - Handles camlp4 and ppx<br>
&gt;&gt; - Parallel &amp; incremental compilation<br>
&gt;&gt;<br>
&gt;&gt; About Jenga: I took a quick look at Jenga, and even though I&#39;m=
 impressed<br>
&gt;&gt; by its capabilities, the amount of code needed to be written even =
for<br>
&gt;&gt; simple projects is overwhelming. It&#39;s clearly a very flexible =
and<br>
&gt;&gt; powerful tool, but I&#39;d say it&#39;s too flexible for the mains=
tream. There&#39;s<br>
&gt;&gt; always room for a build system that&#39;s integrated into ocaml it=
self (like<br>
&gt;&gt; Shake), but I think declarative build systems tend to be easier to=
<br>
&gt;&gt; comprehend for the average user.<br>
&gt;&gt;<br>
&gt;&gt; ocp-build actually looks very interesting. The manual (which is he=
re:<br>
&gt;&gt;<br>
&gt;&gt; <a href=3D"http://github.com/OCamlPro/ocp-build/blob/master/docs/u=
ser-manual/user-manual.pdf?raw=3Dtrue" target=3D"_blank">http://github.com/=
OCamlPro/ocp-build/blob/master/docs/user-manual/user-manual.pdf?raw=3Dtrue<=
/a>)<br>
&gt;&gt; is incomplete, but contains a nice survey of the existing build to=
ols,<br>
&gt;&gt; and motivation for making ocp-build. Has anyone had experience wit=
h<br>
&gt;&gt; ocp-build? Opam seems to be using it, but they also use a makefile=
<br>
&gt;&gt; (why?) with a bunch of shell commands inside (which is precisely t=
he<br>
&gt;&gt; problem from my perspective). ocp-build is supposedly compatible w=
ith<br>
&gt;&gt; Windows, too.<br>
&gt;<br>
&gt;<br>
&gt; Here is one thing I dislike in ocp-build: you have to explicitely list=
 all<br>
&gt; the source files (and maybe same thing for Jenga).<br>
<br>
</div></div>Jenga is quite flexible, so you could write your jengaroot eith=
er way<br>
(to demand or not demand explicit source file lists.)=C2=A0 Our internal<br>
jengaroot does not require explicit source file lists.<br>
<br>
Not to confuse people, though, Jenga isn&#39;t really suitable for people<b=
r>
just picking up and using yet.=C2=A0 We haven&#39;t yet written a suitable<=
br>
jengaroot for general use yet (though there is a version of our<br>
internal jengaroot that we&#39;ve released, but it&#39;s not yet ready for<=
br>
prime time.)=C2=A0 So Jenga is interesting as an option to discuss, but not=
<br>
yet a practical option we want to encourage casual users to try.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
&gt; I am way too lazy to do that, especially since other tools are able<br>
&gt; to infer this list automatically (a library is just a list of modules,=
<br>
&gt; an executable has a single entry point, the main function in a single =
file).<br>
&gt;<br>
&gt;&gt; Yotam<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; On Wed, Sep 10, 2014 at 11:17 AM, Leonardo Laguna Ruiz &lt;<a href=
=3D"mailto:modlfo@gmail.com">modlfo@gmail.com</a><br>
&gt;&gt; &lt;mailto:<a href=3D"mailto:modlfo@gmail.com">modlfo@gmail.com</a=
>&gt;&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0My pick is ocamlbuild because:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0- It works the same way in all platforms that I=
 work (linux,osx,<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0windows msvc port, cygwin)<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0- If I can compile ocaml, then I have ocamlbuil=
d<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0- It does not require external libraries<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0I have to say that I feel a little bit annoyed =
by the fact that some<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0other build systems or tools, do not work corre=
ctly in all the<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0platforms that I want to support.<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0Leonardo<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0On 9/10/2014 4:23 PM, Gerd Stolpmann wrote:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Am Mittwoch, den 10.09.2014, 15:2=
9 +0200 schrieb Francois<br>
&gt;&gt; Berenger:<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0More seriously, con=
cerning build systems, we clearly have<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0quite some<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0choice on the OCaml=
 shelf:<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- obuild<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- ocamlbuild<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- omake<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- oasis (which in f=
act uses ocamlbuild, don&#39;t forget that)<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0oasis is not a build system. It i=
s a package description format<br>
&gt;&gt; that<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0describes how to invoke the build=
 (and more). So far there is only<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0built-in knowledge for ocamlbuild=
, but this may change, and you<br>
&gt;&gt; can<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0already call any external tool, s=
o you can wrap any build system<br>
&gt;&gt; you<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0want. The intention is here more =
to create a uniform API for<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0starting<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0the build, which may help package=
rs and other people who<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0routinely build<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0software.<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Gerd<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- jenga<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0- [...]<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0My preffered is obu=
ild<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(<a href=3D"https:/=
/github.com/ocaml-__obuild/obuild" target=3D"_blank">https://github.com/oca=
ml-__obuild/obuild</a><br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&lt;<a href=3D"http=
s://github.com/ocaml-obuild/obuild" target=3D"_blank">https://github.com/oc=
aml-obuild/obuild</a>&gt;),<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0for the terseness, =
readability and centralization of its build<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0descriptions. I wou=
ld love to see the user community of<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0obuild grow,<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0so that we can get =
rid of more bugs, be able to compile _any_<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0OCaml project with =
it and implement even more cool features<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(contributors are v=
ery welcome).<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0I don&#39;t want a =
ring to rule them all, jut a ring that fits<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0_my_ finger. ;)<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0--<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Regards,<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Francois.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0--<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0Caml-list mailing list.=C2=A0 Subscription mana=
gement and archives:<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0<a href=3D"https://sympa.inria.fr/sympa/__arc/c=
aml-list" target=3D"_blank">https://sympa.inria.fr/sympa/__arc/caml-list</a=
><br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0&lt;<a href=3D"https://sympa.inria.fr/sympa/arc=
/caml-list" target=3D"_blank">https://sympa.inria.fr/sympa/arc/caml-list</a=
>&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0Beginner&#39;s list: <a href=3D"http://groups.y=
ahoo.com/group/__ocaml_beginners" target=3D"_blank">http://groups.yahoo.com=
/group/__ocaml_beginners</a><br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0&lt;<a href=3D"http://groups.yahoo.com/group/oc=
aml_beginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginn=
ers</a>&gt;<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0Bug reports: <a href=3D"http://caml.inria.fr/bi=
n/caml-__bugs" target=3D"_blank">http://caml.inria.fr/bin/caml-__bugs</a><b=
r>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0&lt;<a href=3D"http://caml.inria.fr/bin/caml-bu=
gs" target=3D"_blank">http://caml.inria.fr/bin/caml-bugs</a>&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
&gt; --<br>
&gt; Regards,<br>
&gt; Francois.<br>
&gt;<br>
&gt; --<br>
&gt; Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blan=
k">https://sympa.inria.fr/sympa/arc/caml-list</a><br>
&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_be=
ginners" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a=
><br>
&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"=
_blank">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
--<br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" target=3D"_blank">ht=
tps://sympa.inria.fr/sympa/arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
</div></div></blockquote></div><br></div>

--001a1133cfe218c1710502ded22f--
