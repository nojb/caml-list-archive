Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 92F547FACD
	for <caml-list@sympa.inria.fr>; Sun, 28 Sep 2014 21:43:44 +0200 (CEST)
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.223.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.223.180 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.223.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-ie0-f180.google.com) identity=helo;
  client-ip=209.85.223.180;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-ie0-f180.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AtwBAONjKFTRVd+0lGdsb2JhbABggkiBGVuCfYJgs1yOa4Foh1MCcwgWAREBAQEBBwsLCRIuhAQBAQMBEhEEGQEbHQEDAQsGBQs3AgIhAQERAQUBHAYTIogHAQMJCA2dMm6LMIFygxCINwoZJw1nhjkBEQEFDoocg0SBSGQEB4J4gVMFhluMD4M1gj6CO4IQgWKNM4RWGCmCeoIcOy8BAYJIAQEB
X-IPAS-Result: AtwBAONjKFTRVd+0lGdsb2JhbABggkiBGVuCfYJgs1yOa4Foh1MCcwgWAREBAQEBBwsLCRIuhAQBAQMBEhEEGQEbHQEDAQsGBQs3AgIhAQERAQUBHAYTIogHAQMJCA2dMm6LMIFygxCINwoZJw1nhjkBEQEFDoocg0SBSGQEB4J4gVMFhluMD4M1gj6CO4IQgWKNM4RWGCmCeoIcOy8BAYJIAQEB
X-IronPort-AV: E=Sophos;i="5.04,615,1406584800"; 
   d="scan'208";a="98298750"
Received: from mail-ie0-f180.google.com ([209.85.223.180])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/RC4-SHA; 28 Sep 2014 21:43:43 +0200
Received: by mail-ie0-f180.google.com with SMTP id ar1so15886661iec.39
        for <caml-list@inria.fr>; Sun, 28 Sep 2014 12:43:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=A9T17yCSTQLMIIuY6bi7SmBPrLNoIIaOLwBQQPQdRKQ=;
        b=rvLhjFTsSysEzddOiTsTftE4pd9NuQl3VmfOGQKkYhtCW2kej1k2P2ogzH1WLQ8nod
         Biw/DxW/IN1ub0hC6IOB/uQOO9CP1TlCBz1gH4hGJqzh9chI8exR7VWeAroGlFWaStHu
         0iZBnUVo4MlyNv7rhjGvyJMiFXV9++e2PUcI/UboByrG0jci5W/fe3YuT9TAL9T2zPjB
         DRdxe5ipwoKSSiEW9CkFMIThPClWglWTGLiqnEwBWvvAmhlnEwhmd/NpXzc8rsUFgeNQ
         RefnCIflmBkplDKRcaHaOKYgfE+qt+0b3SvbsfIY8SoB1QLFGCHW4KIQduj/NK03C2M3
         /8xA==
X-Received: by 10.50.66.36 with SMTP id c4mr30160607igt.48.1411933035370; Sun,
 28 Sep 2014 12:37:15 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.107.130.195 with HTTP; Sun, 28 Sep 2014 12:36:35 -0700 (PDT)
In-Reply-To: <CAEQMQo=bZnk2+GRD1RpW_W-2GVrugVPgMCguwAYSYj7dqY3A_g@mail.gmail.com>
References: <CAEQMQo=bZnk2+GRD1RpW_W-2GVrugVPgMCguwAYSYj7dqY3A_g@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sun, 28 Sep 2014 21:36:35 +0200
Message-ID: <CAPFanBHYvq8t6sHH4CsaRofegxV4TiBKh=4YqMwvH-hewwaw=Q@mail.gmail.com>
To: Shuai Wang <wangshuai901@gmail.com>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a1134cc1e051fe30504254711
Subject: Re: [Caml-list] Why List.map does not be implemented
 tail-recursively?

--001a1134cc1e051fe30504254711
Content-Type: text/plain; charset=UTF-8

The compiler library chose to keep it's implementation simple and clean, at
the cost of not being tail-recursive, and therefore unsuitable for large
lists. This is documented in the manual:
  http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html

> Some functions are flagged as not tail-recursive. A tail-recursive
function uses constant stack space, while a non-tail-recursive function
uses stack space proportional to the length of its list argument, which can
be a problem with very long lists.

>  List.map f [a1; ...; an] applies function f to a1, ..., an, and builds
the list [f a1; ...; f an] with the results returned by f. Not
tail-recursive.

Other libraries have made different design choices, so you can easily use a
different List module that provides tail-recursive operations. There are
several larger libraries, some (such as Batteries
http://batteries.forge.ocamlcore.org/ ) which directly extend the compiler
library, and are therefore usable as a drop-in replacement for it, some
others (such as Core
https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/ ) which use
different conventions. They all provide tail-recursive mapping functions
suitable for use on long lists.

(Of course you can also simply replace `List.map f li` with `List.rev_map f
(List.rev li)` if you know `li` may be long.)

On Sun, Sep 28, 2014 at 9:31 PM, Shuai Wang <wangshuai901@gmail.com> wrote:

> Hello list,
>
>
> I am working on some stack_overflow exception in our recent project
> written in OCaml
> and eventually it turns out that this exception is thrown by List.map
> function.
>
> By seeing the source code of OCaml's List module
> <https://code.ohloh.net/file?fid=P5Us_txNCMHIhpdfML6OZ8QN4Zs&cid=Jigg8RAfQdg&s=ocaml%20list.ml&pp=0&fp=305967&fe=ml&ff=1&filterChecked=true&mp=1&ml=1&me=1&md=1#L3>,
> it seems that map function
> does not be implemented tail-recursively:
>
> let rec map f = function
>     [] -> []
>   | a::l -> let r = f a in r :: map f l
>
>
>
> So my question is:
>
> *Why would OCaml's implementation List.map like this?  *
>
> In my humble option, it definitely should be written in a tail-recursive
> way,
> and it not, stack_overflow would be unavoidable.
> For example in order to handle the exception,
> I abandon the code using List.map and rewrite it into a tail-recursive
> help function.
>
> Best,
> Shuai
>

--001a1134cc1e051fe30504254711
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>The compiler library chose to keep it&#39;s impl=
ementation simple and clean, at the cost of not being tail-recursive, and t=
herefore unsuitable for large lists. This is documented in the manual:<br>=
=C2=A0 <a href=3D"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.ht=
ml">http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html</a><br><br>=
&gt;=20

   Some functions are flagged as not tail-recursive.  A tail-recursive
   function uses constant stack space, while a non-tail-recursive function
   uses stack space proportional to the length of its list argument, which
   can be a problem with very long lists.<br><br>&gt;=C2=A0 <code class=3D"=
"><span class=3D"constructor">List</span>.map f [a1; ...; an]</code> applie=
s function <code class=3D"">f</code> to <code class=3D"">a1, ..., an</code>,
   and builds the list <code class=3D"">[f a1; ...; f an]</code>
   with the results returned by <code class=3D"">f</code>.  Not tail-recurs=
ive.<br><br></div>Other libraries have made different design choices, so yo=
u can easily use a different List module that provides tail-recursive opera=
tions. There are several larger libraries, some (such as Batteries <a href=
=3D"http://batteries.forge.ocamlcore.org/">http://batteries.forge.ocamlcore=
.org/</a> ) which directly extend the compiler library, and are therefore u=
sable as a drop-in replacement for it, some others (such as Core <a href=3D=
"https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/">https://ocaml=
.janestreet.com/ocaml-core/111.28.00/doc/core/</a> ) which use different co=
nventions. They all provide tail-recursive mapping functions suitable for u=
se on long lists.<br><br></div>(Of course you can also simply replace `List=
.map f li` with `List.rev_map f (List.rev li)` if you know `li` may be long=
.)<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Su=
n, Sep 28, 2014 at 9:31 PM, Shuai Wang <span dir=3D"ltr">&lt;<a href=3D"mai=
lto:wangshuai901@gmail.com" target=3D"_blank">wangshuai901@gmail.com</a>&gt=
;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><di=
v class=3D"h5"><div dir=3D"ltr"><span style=3D"font-family:arial,sans-serif=
;font-size:13px">Hello list,</span><div style=3D"font-family:arial,sans-ser=
if;font-size:13px"><br></div><div style=3D"font-family:arial,sans-serif;fon=
t-size:13px"><br></div><div style=3D"font-family:arial,sans-serif;font-size=
:13px">I am working on some stack_overflow exception in our recent project =
written in OCaml</div><div style=3D"font-family:arial,sans-serif;font-size:=
13px">and eventually it turns out that this exception is thrown by List.map=
 function.</div><div style=3D"font-family:arial,sans-serif;font-size:13px">=
<br></div><div style=3D"font-family:arial,sans-serif;font-size:13px">By see=
ing the source code of OCaml&#39;s=C2=A0<a href=3D"https://code.ohloh.net/f=
ile?fid=3DP5Us_txNCMHIhpdfML6OZ8QN4Zs&amp;cid=3DJigg8RAfQdg&amp;s=3Docaml%2=
0list.ml&amp;pp=3D0&amp;fp=3D305967&amp;fe=3Dml&amp;ff=3D1&amp;filterChecke=
d=3Dtrue&amp;mp=3D1&amp;ml=3D1&amp;me=3D1&amp;md=3D1#L3" target=3D"_blank">=
List module</a>, it seems that map function=C2=A0</div><div style=3D"font-f=
amily:arial,sans-serif;font-size:13px">does not be implemented tail-recursi=
vely:=C2=A0</div><div style=3D"font-family:arial,sans-serif;font-size:13px"=
><br></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><pre =
style=3D"white-space:pre-wrap;margin-top:0px;margin-bottom:0px;padding:0px;=
list-style:none;color:rgb(0,0,0);font-size:12px;line-height:14.399999618530=
273px"><a title=3D"Search for references of &quot;let&quot;" style=3D"color=
:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-s=
tyle:none;outline:none">let</a> <a title=3D"Search for references of &quot;=
rec&quot;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0p=
x;padding-left:0px;list-style:none;outline:none">rec</a> <a title=3D"Search=
 for references of &quot;map&quot;" style=3D"color:black;margin:0px;padding=
-top:0px;padding-right:0px;padding-left:0px;list-style:none;outline:none">m=
ap</a> <a title=3D"Search for references of &quot;f&quot;" style=3D"color:b=
lack;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-sty=
le:none;outline:none">f</a> =3D <a title=3D"Search for references of &quot;=
function&quot;" style=3D"color:black;margin:0px;padding-top:0px;padding-rig=
ht:0px;padding-left:0px;list-style:none;outline:none">function</a>
    [] -&gt; []
  | <a title=3D"Search for references of &quot;a&quot;" style=3D"color:blac=
k;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:=
none;outline:none">a</a>::<a title=3D"Search for references of &quot;l&quot=
;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;paddin=
g-left:0px;list-style:none;outline:none">l</a> -&gt; <a title=3D"Search for=
 references of &quot;let&quot;" style=3D"color:black;margin:0px;padding-top=
:0px;padding-right:0px;padding-left:0px;list-style:none;outline:none">let</=
a> <a title=3D"Search for references of &quot;r&quot;" style=3D"color:black=
;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:n=
one;outline:none">r</a> =3D <a title=3D"Search for references of &quot;f&qu=
ot;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padd=
ing-left:0px;list-style:none;outline:none">f</a> <a title=3D"Search for ref=
erences of &quot;a&quot;" style=3D"color:black;margin:0px;padding-top:0px;p=
adding-right:0px;padding-left:0px;list-style:none;outline:none">a</a> <a ti=
tle=3D"Search for references of &quot;in&quot;" style=3D"color:black;margin=
:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:none;out=
line:none">in</a> <a title=3D"Search for references of &quot;r&quot;" style=
=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0=
px;list-style:none;outline:none">r</a> :: <a title=3D"Search for references=
 of &quot;map&quot;" style=3D"color:black;margin:0px;padding-top:0px;paddin=
g-right:0px;padding-left:0px;list-style:none;outline:none">map</a> <a title=
=3D"Search for references of &quot;f&quot;" style=3D"color:black;margin:0px=
;padding-top:0px;padding-right:0px;padding-left:0px;list-style:none;outline=
:none">f</a> <a title=3D"Search for references of &quot;l&quot;" style=3D"c=
olor:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;li=
st-style:none;outline:none">l</a>
</pre></div><div style=3D"font-family:arial,sans-serif;font-size:13px"><a t=
itle=3D"Search for references of &quot;l&quot;" style=3D"color:black;margin=
:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:none;out=
line:none"><br></a></div><div style=3D"font-family:arial,sans-serif;font-si=
ze:13px"><a title=3D"Search for references of &quot;l&quot;" style=3D"color=
:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-s=
tyle:none;outline:none"><br></a></div><div style=3D"font-family:arial,sans-=
serif;font-size:13px"><a title=3D"Search for references of &quot;l&quot;" s=
tyle=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padding-le=
ft:0px;list-style:none;outline:none">So my question is:=C2=A0</a></div><div=
 style=3D"font-family:arial,sans-serif;font-size:13px"><a title=3D"Search f=
or references of &quot;l&quot;" style=3D"color:black;margin:0px;padding-top=
:0px;padding-right:0px;padding-left:0px;list-style:none;outline:none"><b><b=
r></b></a></div><div style=3D"font-family:arial,sans-serif;font-size:13px">=
<a title=3D"Search for references of &quot;l&quot;" style=3D"color:black;ma=
rgin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:none=
;outline:none"><b>Why would OCaml&#39;s implementation List.map like this? =
=C2=A0</b></a></div><div style=3D"font-family:arial,sans-serif;font-size:13=
px"><a title=3D"Search for references of &quot;l&quot;" style=3D"color:blac=
k;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:=
none;outline:none"><br></a></div><div style=3D"font-family:arial,sans-serif=
;font-size:13px"><a title=3D"Search for references of &quot;l&quot;" style=
=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0=
px;list-style:none;outline:none">In my humble option, it definitely should =
be written in a tail-recursive way,</a></div><div style=3D"font-family:aria=
l,sans-serif;font-size:13px"><a title=3D"Search for references of &quot;l&q=
uot;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;pad=
ding-left:0px;list-style:none;outline:none">and it not, stack_overflow woul=
d be unavoidable.=C2=A0</a></div><div style=3D"font-family:arial,sans-serif=
;font-size:13px"><a title=3D"Search for references of &quot;l&quot;" style=
=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0=
px;list-style:none;outline:none">For example in order to=C2=A0</a><a title=
=3D"Search for references of &quot;l&quot;" style=3D"color:black;margin:0px=
;padding-top:0px;padding-right:0px;padding-left:0px;list-style:none;outline=
:none">handle the exception,=C2=A0</a></div><div style=3D"font-family:arial=
,sans-serif;font-size:13px"><a title=3D"Search for references of &quot;l&qu=
ot;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;padd=
ing-left:0px;list-style:none;outline:none">I abandon the code using List.ma=
p and rewrite it=C2=A0</a><a title=3D"Search for references of &quot;l&quot=
;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;paddin=
g-left:0px;list-style:none;outline:none">into a tail-recursive help functio=
n.=C2=A0</a></div><div style=3D"font-family:arial,sans-serif;font-size:13px=
"><a title=3D"Search for references of &quot;l&quot;" style=3D"color:black;=
margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;list-style:no=
ne;outline:none"><br></a></div><div style=3D"font-family:arial,sans-serif;f=
ont-size:13px"><a title=3D"Search for references of &quot;l&quot;" style=3D=
"color:black;margin:0px;padding-top:0px;padding-right:0px;padding-left:0px;=
list-style:none;outline:none">Best,</a></div><div style=3D"font-family:aria=
l,sans-serif;font-size:13px"><a title=3D"Search for references of &quot;l&q=
uot;" style=3D"color:black;margin:0px;padding-top:0px;padding-right:0px;pad=
ding-left:0px;list-style:none;outline:none">Shuai</a></div></div>
</div></div></blockquote></div><br></div>

--001a1134cc1e051fe30504254711--
