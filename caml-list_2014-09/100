Return-Path: <francois.berenger@inria.fr>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 670997F75C
	for <caml-list@sympa.inria.fr>; Wed, 10 Sep 2014 15:55:23 +0200 (CEST)
X-IronPort-AV: E=Sophos;i="5.04,499,1406584800"; 
   d="scan'208";a="93969707"
Received: from meleze.ens.fr (HELO [129.199.99.114]) ([129.199.99.114])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/DHE-RSA-AES128-SHA; 10 Sep 2014 15:55:23 +0200
Message-ID: <5410584B.8090302@inria.fr>
Date: Wed, 10 Sep 2014 15:55:23 +0200
From: Francois Berenger <francois.berenger@inria.fr>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.0
MIME-Version: 1.0
To: Jacques-Pascal Deplaix <jp.deplaix@gmail.com>, caml-list@inria.fr
References: <CAN6ygO=P_QTa6Wk0=Wx=0XLwhGOP=16eGaGiacA5N60nRjApDQ@mail.gmail.com> <5410522E.3050207@inria.fr> <541057C6.702@gmail.com>
In-Reply-To: <541057C6.702@gmail.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Subject: Re: [Caml-list] One build system to rule them all?

On 09/10/2014 03:53 PM, Jacques-Pascal Deplaix wrote:
> Hi,
>
> I did know obuild but I forgot a fact about it: it doesn't use ocamlfind.
>
> As you took the defense of obuild, do you know why it doesn't use it ? I
> think I know how it works for simple packages but how is it supposed to
> work with packages which uses the linkopts field or even if the cma has
> not the same name as the library itself ? Why not having used findlib
> (for the speed declaimed in DESIGN.md) ?

I don't know, I am just an obuild user, not a real contributor.

> Did I missed something ?
>
> Cheers,
>
> On 09/10/2014 03:29 PM, Francois Berenger wrote:
>> On 09/10/2014 02:49 PM, Yotam Barnoy wrote:
>>> It appears to me that every couple of months we hear of someone
>>> implementing yet another build system in ocaml. Given the success of
>>> opam, I think it's clear that sometimes a monolithic solution, behind
>>> which the entire community can organize, is the best solution --
>>> especially for infrastructure. Looking at haskell, having cabal as the
>>> main build system has really helped them advance in terms of supporting
>>> other platforms (such as windows), and since all community efforts in
>>> this realm are focused on cabal, they can improve it rapidly.
>>>
>>> a. Is there any build system we can organize behind to crown as the
>>> official build system?
>>> b. What are the use-cases missing from specific build systems, that have
>>> driven people to use other build systems?
>>> c. To pick one possible candidate, if ocamlbuild were spun out of the
>>> compiler, could it be enhanced to cover all the main use-cases so
>>> (almost) everyone would be happy with it?
>>>
>>> It's just such a shame to see the ocaml community re-inventing the wheel
>>> over and over again, each time with some limitation so that the next
>>> person needs to do the same thing yet again.
>>
>> It is not a shame, it is a tradition in the ocaml community! :-D
>> For example, almost each ocaml programmer that I know of have written
>> a logger (me included, it's even in opam so that I can reinvent
>> another wheel next time).
>>
>> More seriously, concerning build systems, we clearly have quite some
>> choice on the OCaml shelf:
>> - obuild
>> - ocamlbuild
>> - omake
>> - oasis (which in fact uses ocamlbuild, don't forget that)
>> - jenga
>> - [...]
>>
>> My preffered is obuild (https://github.com/ocaml-obuild/obuild),
>> for the terseness, readability and centralization of its build
>> descriptions. I would love to see the user community of obuild grow,
>> so that we can get rid of more bugs, be able to compile _any_
>> OCaml project with it and implement even more cool features
>> (contributors are very welcome).
>>
>> I don't want a ring to rule them all, jut a ring that fits _my_
>> finger. ;)
>>
>

-- 
Regards,
Francois.
