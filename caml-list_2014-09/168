Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 1F2B97FACD
	for <caml-list@sympa.inria.fr>; Thu, 18 Sep 2014 10:24:46 +0200 (CEST)
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.219.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.219.41 as
  permitted sender) identity=mailfrom; client-ip=209.85.219.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-oa0-f41.google.com) identity=helo;
  client-ip=209.85.219.41;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-oa0-f41.google.com";
  x-conformance=sidf_compatible
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AggCAPeVGlTRVdspm2dsb2JhbABGEgiCR4EZVwSCfMRQgW2HDT4BgQIIFgERAQEBAQEGCwsJFCqEBAEBAwESER0BGx0BAwELBgULNwICIgERAQUBHAYTCBMHiAcBAwkIDTadKmuLMIFygxCJKQoZJw1mhkEBEQEFDo58F1IEB4J4gVMFhh+JGYMZgzSHB4FgjSmETRgphRE7LwEEgkUBAQE
X-IPAS-Result: AggCAPeVGlTRVdspm2dsb2JhbABGEgiCR4EZVwSCfMRQgW2HDT4BgQIIFgERAQEBAQEGCwsJFCqEBAEBAwESER0BGx0BAwELBgULNwICIgERAQUBHAYTCBMHiAcBAwkIDTadKmuLMIFygxCJKQoZJw1mhkEBEQEFDo58F1IEB4J4gVMFhh+JGYMZgzSHB4FgjSmETRgphRE7LwEEgkUBAQE
X-IronPort-AV: E=Sophos;i="5.04,545,1406584800"; 
   d="scan'208";a="79876842"
Received: from mail-oa0-f41.google.com ([209.85.219.41])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 18 Sep 2014 10:24:44 +0200
Received: by mail-oa0-f41.google.com with SMTP id o6so404537oag.28
        for <caml-list@inria.fr>; Thu, 18 Sep 2014 01:24:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=oMI9rEdttFeb3UP4/80GO4tSTXt8vzHYCVqgYfFhzjw=;
        b=0mDfrHCI5399qVm9M5T4vyigwofGtbDd3/sPi9mh2+jNnUB8QroD2ePP1LIc7TVVIv
         Am6/cCaj2NS/efro23AiWKMug9UR9yzeOmTw1DaYZoqxf+dqbfXVI/myic8DGky7FkVe
         1ctC/TmwNf5CF3Ipn1naaeuaC+q+PgU9RoEk4h+5zQdOnT0MkT4EOCkoZCUo9d4l9e27
         HOIXuML47wHe5Tlj0RGog/1mPddgg/FhjsGXLKxXVm5m/34tgr3EROKIlH0lAzp0vIBq
         4s7ZnaKqOztB51Ou7p25fX0Gy4gQrAmZ/qX6bo8/dkTrfcmPTaCyV/UObp6cBEk1H23f
         TYIQ==
X-Received: by 10.182.38.138 with SMTP id g10mr2593358obk.21.1411028683418;
 Thu, 18 Sep 2014 01:24:43 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.76.141.165 with HTTP; Thu, 18 Sep 2014 01:24:03 -0700 (PDT)
In-Reply-To: <B604D632D4692C45A95E5EB6E3E0FFF201AD77BF@DEKOMMBX002.net.plm.eds.com>
References: <B604D632D4692C45A95E5EB6E3E0FFF201AD77BF@DEKOMMBX002.net.plm.eds.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Thu, 18 Sep 2014 10:24:03 +0200
Message-ID: <CAPFanBFSbR+g+y-zxaE8ym_C0Dweac_wEbsgu3mWfDuAZzGqWg@mail.gmail.com>
To: "Bauer, Christoph" <bauerchristoph@siemens.com>
Cc: caml-list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=001a11c2ec5a7172ab050352b749
Subject: Re: [Caml-list] memory mapped files with bigarray on windows

--001a11c2ec5a7172ab050352b749
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

There were experiments adding an explicit "unmap this bigarray" operation
to the runtime: see Apr 2012 commit

https://github.com/ocaml/ocaml/commit/2330a3b30fe5b910f4776bf9c41f35ce2b980=
fb1
However, this change was reverted shortly thereafter because of performance
concerns: it changes the invariant that the size of a live bigarray never
changes, which makes it easier to optimize away bound checks.

Could you please create a bug report ( http://caml.inria.fr/mantis/ ) to
keep track of your particular issue with lack of explicit bigarray closure?
I haven't found traces of it in the bugtracker ( the rather old bug
http://caml.inria.fr/mantis/view.php?id=3D3571 is about the need to call
msync() in a NFS setting, but doesn't touch explicit closure ), so it may
not have been previously known.

On Thu, Sep 18, 2014 at 10:04 AM, Bauer, Christoph <
bauerchristoph@siemens.com> wrote:

>  Dear All,
>
>
>
> my program maps  several blocks of a file into memory with
> Bigarray.Array1.map_file for writing.
>
> Finally the file handle is closed with Unix.close.
>
>
>
> On local files system everything works as expected. But if the file is on
> a network drive,
>
> the resulting file is after the close still  locked [1] and it contains
> just zeros.
>
>
>
> My workaround is, to call  Gc.full_major() before the close. Then all
> remaining bigarrays are
>
> finalized (the finalizer calls caml_ba_unmap_file(), see
> bigarray_stubs.c).
>
>
>
> Calling Gc.full_major () is somewhat dissatisfying. But I=E2=80=99m not s=
ure how
> it could be solved more cleanly.
>
> I would expect that Unix.close should unmap all remaining views of the
> file. But Unix.close knows nothing
>
> about the bigarray mapping.
>
>
>
> Maybe a special Bigarray.unmap is the solution.
>
>
>
> Does anyone has a better idea?
>
>
>
> Thanks,
>
> Christoph Bauer
>
>
>
> [1] You can=E2=80=99t delete it in the windows explorer.
>
>
>
>
>
> -----------------
> Siemens Industry Software GmbH & Co. KG; Anschrift: Franz-Geuer-Str. 10,
> 50823 K=C3=B6ln;
> Kommanditgesellschaft: Sitz der Gesellschaft: K=C3=B6ln; Registergericht:
> Amtsgericht K=C3=B6ln, HRA 28227;
> Gesch=C3=A4ftsf=C3=BChrung und pers=C3=B6nlich haftender Gesellschafter: =
Siemens Industry
> Software Management GmbH;
> Gesch=C3=A4ftsf=C3=BChrer: Urban August, Daniel Trebes; Sitz der Gesellsc=
haft: K=C3=B6ln;
> Registergericht: Amtsgericht K=C3=B6ln, HRB 70858
>

--001a11c2ec5a7172ab050352b749
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div>There were experiments adding an explicit &quot;=
unmap this bigarray&quot; operation to the runtime: see Apr 2012 commit<br>=
=C2=A0 <a href=3D"https://github.com/ocaml/ocaml/commit/2330a3b30fe5b910f47=
76bf9c41f35ce2b980fb1">https://github.com/ocaml/ocaml/commit/2330a3b30fe5b9=
10f4776bf9c41f35ce2b980fb1</a><br></div>However, this change was reverted s=
hortly thereafter because of performance concerns: it changes the invariant=
 that the size of a live bigarray never changes, which makes it easier to o=
ptimize away bound checks.<br><br></div>Could you please create a bug repor=
t ( <a href=3D"http://caml.inria.fr/mantis/">http://caml.inria.fr/mantis/</=
a> ) to keep track of your particular issue with lack of explicit bigarray =
closure? I haven&#39;t found traces of it in the bugtracker ( the rather ol=
d bug <a href=3D"http://caml.inria.fr/mantis/view.php?id=3D3571">http://cam=
l.inria.fr/mantis/view.php?id=3D3571</a> is about the need to call msync() =
in a NFS setting, but doesn&#39;t touch explicit closure ), so it may not h=
ave been previously known.<br></div><div class=3D"gmail_extra"><br><div cla=
ss=3D"gmail_quote">On Thu, Sep 18, 2014 at 10:04 AM, Bauer, Christoph <span=
 dir=3D"ltr">&lt;<a href=3D"mailto:bauerchristoph@siemens.com" target=3D"_b=
lank">bauerchristoph@siemens.com</a>&gt;</span> wrote:<br><blockquote class=
=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
ing-left:1ex">




<div link=3D"blue" vlink=3D"purple" lang=3D"DE">
<div>
<p class=3D"MsoNormal">Dear All, </p>
<p class=3D"MsoNormal">=C2=A0</p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">my program maps =C2=A0several b=
locks of a file into memory with Bigarray.Array1.map_file for writing.</spa=
n></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Finally the file handle is clos=
ed with Unix.close.</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">On local files system everythin=
g works as expected. But if the file is on a network drive,
</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">the resulting file is after the=
 close still =C2=A0locked [1] and it contains just zeros.</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">My workaround is, to call =C2=
=A0Gc.full_major() before the close. Then all remaining bigarrays are</span=
></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">finalized (the finalizer calls =
caml_ba_unmap_file(), see bigarray_stubs.c).
</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Calling Gc.full_major () is som=
ewhat dissatisfying. But I=E2=80=99m not sure how it could be solved more c=
leanly.</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">I would expect that Unix.close =
should unmap all remaining views of the file. But Unix.close knows nothing<=
/span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">about the bigarray mapping. </s=
pan></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Maybe a special Bigarray.unmap =
is the solution.</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Does anyone has a better idea?<=
/span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Thanks,</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">Christoph Bauer</span></p>
<p class=3D"MsoNormal">=C2=A0</p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">[1] You can=E2=80=99t delete it=
 in the windows explorer.</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
<p class=3D"MsoNormal"><span lang=3D"EN-US">=C2=A0</span></p>
</div>
<p style=3D"font-family:Arial;font-size:70%">-----------------<br>
Siemens Industry Software GmbH &amp; Co. KG; Anschrift: Franz-Geuer-Str. 10=
, 50823 K=C3=B6ln;<br>
Kommanditgesellschaft: Sitz der Gesellschaft: K=C3=B6ln; Registergericht: A=
mtsgericht K=C3=B6ln, HRA 28227;<br>
Gesch=C3=A4ftsf=C3=BChrung und pers=C3=B6nlich haftender Gesellschafter: Si=
emens Industry Software Management GmbH;<br>
Gesch=C3=A4ftsf=C3=BChrer: Urban August, Daniel Trebes; Sitz der Gesellscha=
ft: K=C3=B6ln; Registergericht: Amtsgericht K=C3=B6ln, HRB 70858
</p>
</div>

</blockquote></div><br></div>

--001a11c2ec5a7172ab050352b749--
