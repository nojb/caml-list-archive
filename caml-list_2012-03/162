Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q2DCW011022063
	for <caml-list@sympa-roc.inria.fr>; Tue, 13 Mar 2012 13:32:02 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Au8CAM88X0/RVdy2mGdsb2JhbABDpA+IVQGIcwgiAQEBAQEICQ0HFCeCCQEBAQMBEgIsARsSCwEDAQsGBQsDCg0hIQEBEQEFAQoSBhMSEIdjBQufFwqLeIJxhS0/iHQBBQuJN4cjBIJeknGLK4MaPYQH
X-IronPort-AV: E=Sophos;i="4.73,575,1325458800"; 
   d="scan'208";a="135806672"
Received: from mail-vx0-f182.google.com ([209.85.220.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 13 Mar 2012 13:32:01 +0100
Received: by vcmm1 with SMTP id m1so1150926vcm.27
        for <caml-list@inria.fr>; Tue, 13 Mar 2012 05:32:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type;
        bh=ZxrL4KBZFq8JL+/8ZKl0VPEUNg8oeRrl3jKewMKyZPY=;
        b=g7ucGPimA4J8F6NBepYexuBrGkCT0HN4shqInH1n49RQRZCt+LhlzoHH8//xfvF/Qd
         NQWVO6AHk5A1OUl+mF6GbOk1gNFwkf4bX6/0Kqu1qxnmf3L0vvgYXLvb0dGaxj++uuDQ
         4LFEDUZNXcCHCeJtvnezbAhdoNrI1yFEhg/xmJqWmA2WHjKKnaGnfROFpudPt69uz4iS
         dhM3HdLG/6ZBud6qnlhQE6JjnzOax2MYRq1h5QMWMHQkxAJP+L8Pro6AVdQn/+MyhLUF
         rOO1QH4nT29Yu24cHQlMf+Wesa+ipnzaeqdF6nNlHg4OoHgUXc6vD8ggYuzdyIX64I/y
         5SVw==
Received: by 10.52.173.38 with SMTP id bh6mr16529217vdc.43.1331641920229; Tue,
 13 Mar 2012 05:32:00 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.52.112.201 with HTTP; Tue, 13 Mar 2012 05:31:40 -0700 (PDT)
In-Reply-To: <CAPzAKVDFjW3z81hdOTfCyvsVRysc=O6XRe7aq0xK2=Pu2Q5k9A@mail.gmail.com>
References: <4F3078F1.8070105@redhat.com> <4F3079F7.4040606@redhat.com>
 <20120207083412.GA30350@annexia.org> <20120310073113.GA16716@annexia.org>
 <4F5E3A6E.4010406@inria.fr> <4F5F1968.20600@lsv.ens-cachan.fr> <CAPzAKVDFjW3z81hdOTfCyvsVRysc=O6XRe7aq0xK2=Pu2Q5k9A@mail.gmail.com>
From: Philippe Veber <philippe.veber@gmail.com>
Date: Tue, 13 Mar 2012 13:31:40 +0100
Message-ID: <CAOOOohQbc1i17tdytamPh5bbW=FNZC2dJSCyyz7vxkf8seB74Q@mail.gmail.com>
To: Paolo Donadeo <p.donadeo@gmail.com>
Cc: OCaml mailing list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary=bcaec517c4fc9f901604bb1f0bfe
X-Validation-by: philippe.veber@gmail.com
Subject: Re: [Caml-list] Re: [oss-security] CVE request: Hash DoS
 vulnerability (ocert-2011-003)


--bcaec517c4fc9f901604bb1f0bfe
Content-Type: text/plain; charset=ISO-8859-1

The best compromise to me is to leave the default for Hashtbl, but properly
document this aspect in the manual (with succint explanation and one
relevant pointer). That way:
- you don't break compatibility
- you keep default reproducibility (which is a real feature)
- you teach beginners like myself on tough aspects related to the use of a
datastructure in some frequent use cases.

Having a default randomisation seems much too intrusive to me
(notwithstanding the importance of web programming for ocaml's future ;o))
and for those changes that modify the semantic of a program, you have to be
in control. So I second Paolo's opinion.

However, assuming ocaml users will be "aware of attacks", at least more
than users of other languages, is not only controversial but also non
relevant: there are beginners in ocaml too (who may also be beginners in
programming), and these should be taken care of. A small note in the doc on
the DOS vulnerability that may arise from the use of Hashtbl in a web
application context is enough to protect the users I think, and is of
interest for the casual Hashtbl reader. This note could appear in a
different font/color than the main description of [Hashtbl.create], to
preserve the readability of the docs.

my 2 cent
ph.

2012/3/13 Paolo Donadeo <p.donadeo@gmail.com>

> In my humble opinion, here we have two different vision of what
> computer programming is, or should be. Your statement "maybe it's
> better to assume that the programmer will not be aware of attacks" may
> be true for the average Java programmer (please, no flame, no insult
> intended to Java programmers reading this list!) but not for an OCaml
> programmer. I want to be perfectly aware of attacks, and I want to be
> in control of the data structure I use, and not "be unaware"...
>
> In Python, the other language I use every day, dictionaries are
> implemented as hash tables and not having reproducibility is a PITA.
>
>
> --
> Paolo
>
>
> On Tue, Mar 13, 2012 at 10:54, Romain Bardou <bardou@lsv.ens-cachan.fr>
> wrote:
> > Hi,
> >
> >
> >> As you and Gerd said, the new Hashtbl implementation in the upcoming
> >> major release has everything needed to randomize hash tables by
> >> seeding.  The question at this point is whether randomization should
> >> be the default or not: some of our big users who don't do Web stuff
> >> value reproducibility highly...  We (OCaml core developers) will take
> >> a decision soon.
> >
> >
> > FWIW, as a developer I do not expect reproducibility from Hash tables
> (nor
> > from the Random module actually) but I do expect some way to control
> > reproducibility (i.e. read the current seed, give my own seed). Maybe
> it's
> > better to assume that the programmer will not be aware of attacks, and
> > provide him with a safer environment.
> >
> > On the other hand, when you find a bug and need reproducibility, it's too
> > late if you have used a random seed without recording it. And could it
> break
> > some existing applications?
> >
> > I guess you('re) already had(having) this discussion though.
> >
> > Cheers,
> >
> > --
> > Romain
>
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa-roc.inria.fr/wws/info/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>
>

--bcaec517c4fc9f901604bb1f0bfe
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<br>The best compromise to me is to leave the default for Hashtbl, but prop=
erly document this aspect in the manual (with succint explanation and one r=
elevant pointer). That way:<br>- you don&#39;t break compatibility<br>- you=
 keep default reproducibility (which is a real feature)<br>

- you teach beginners like myself on tough aspects related to the use of a =
datastructure in some frequent use cases.<br><br>Having a default randomisa=
tion seems much too intrusive to me (notwithstanding the importance of web =
programming for ocaml&#39;s future ;o)) and for those changes that modify t=
he semantic of a program, you have to be in control. So I second Paolo&#39;=
s opinion.<br>

<br>However, assuming ocaml users will be &quot;aware of attacks&quot;, at =
least more than users of other languages, is not only controversial but als=
o non relevant: there are beginners in ocaml too (who may also be beginners=
 in programming), and these should be taken care of. A small note in the do=
c on the DOS vulnerability that may arise from the use of Hashtbl in a web =
application context is enough to protect the users I think, and is of inter=
est for the casual Hashtbl reader. This note could appear in a different fo=
nt/color than the main description of [Hashtbl.create], to preserve the rea=
dability of the docs.<br>

<br>my 2 cent<br>ph.<br><br><div class=3D"gmail_quote">2012/3/13 Paolo Dona=
deo <span dir=3D"ltr">&lt;<a href=3D"mailto:p.donadeo@gmail.com">p.donadeo@=
gmail.com</a>&gt;</span><br><blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">

In my humble opinion, here we have two different vision of what<br>
computer programming is, or should be. Your statement &quot;maybe it&#39;s<=
br>
better to assume that the programmer will not be aware of attacks&quot; may=
<br>
be true for the average Java programmer (please, no flame, no insult<br>
intended to Java programmers reading this list!) but not for an OCaml<br>
programmer. I want to be perfectly aware of attacks, and I want to be<br>
in control of the data structure I use, and not &quot;be unaware&quot;...<b=
r>
<br>
In Python, the other language I use every day, dictionaries are<br>
implemented as hash tables and not having reproducibility is a PITA.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
<br>
--<br>
Paolo<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
On Tue, Mar 13, 2012 at 10:54, Romain Bardou &lt;<a href=3D"mailto:bardou@l=
sv.ens-cachan.fr">bardou@lsv.ens-cachan.fr</a>&gt; wrote:<br>
&gt; Hi,<br>
&gt;<br>
&gt;<br>
&gt;&gt; As you and Gerd said, the new Hashtbl implementation in the upcomi=
ng<br>
&gt;&gt; major release has everything needed to randomize hash tables by<br>
&gt;&gt; seeding. =A0The question at this point is whether randomization sh=
ould<br>
&gt;&gt; be the default or not: some of our big users who don&#39;t do Web =
stuff<br>
&gt;&gt; value reproducibility highly... =A0We (OCaml core developers) will=
 take<br>
&gt;&gt; a decision soon.<br>
&gt;<br>
&gt;<br>
&gt; FWIW, as a developer I do not expect reproducibility from Hash tables =
(nor<br>
&gt; from the Random module actually) but I do expect some way to control<b=
r>
&gt; reproducibility (i.e. read the current seed, give my own seed). Maybe =
it&#39;s<br>
&gt; better to assume that the programmer will not be aware of attacks, and=
<br>
&gt; provide him with a safer environment.<br>
&gt;<br>
&gt; On the other hand, when you find a bug and need reproducibility, it&#3=
9;s too<br>
&gt; late if you have used a random seed without recording it. And could it=
 break<br>
&gt; some existing applications?<br>
&gt;<br>
&gt; I guess you(&#39;re) already had(having) this discussion though.<br>
&gt;<br>
&gt; Cheers,<br>
&gt;<br>
&gt; --<br>
&gt; Romain<br>
<br>
<br>
--<br>
Caml-list mailing list. =A0Subscription management and archives:<br>
<a href=3D"https://sympa-roc.inria.fr/wws/info/caml-list" target=3D"_blank"=
>https://sympa-roc.inria.fr/wws/info/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" target=3D"_blank">http://groups.yahoo.com/group/ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" target=3D"_blan=
k">http://caml.inria.fr/bin/caml-bugs</a><br>
<br>
</div></div></blockquote></div><br>

--bcaec517c4fc9f901604bb1f0bfe--
