Received: from mail4-relais-sop.national.inria.fr (mail4-relais-sop.national.inria.fr [192.134.164.105])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q2N9X45Q016728
	for <caml-list@sympa-roc.inria.fr>; Fri, 23 Mar 2012 10:33:04 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AqUCABpCbE/RVdK2kWdsb2JhbABErwwBiGIIIgEBAQEJCQ0HEimCCQEBAQMBEgIsARsdAQMBCwYFCzshAQERAQUBHAYTGgiHYwULmjEKjBaCcYR7P4h2AQULiWJxhiUElV+LL4MaPYQKgVM
X-IronPort-AV: E=Sophos;i="4.73,636,1325458800"; 
   d="scan'208";a="137389421"
Received: from mail-iy0-f182.google.com ([209.85.210.182])
  by mail4-smtp-sop.national.inria.fr with ESMTP/TLS/RC4-SHA; 23 Mar 2012 10:32:58 +0100
Received: by iahk25 with SMTP id k25so7572645iah.27
        for <caml-list@inria.fr>; Fri, 23 Mar 2012 02:32:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=nNe7hfKKsujFWLOOV0PQQPy4DVaqNzQhfAAiX1Sby7o=;
        b=EdS6Bvt08qreEGNufaZ6lGtQlBg9XmkuaCQ3hmjd1dG7OiFgy1Q37dPO48PXkWEvQG
         nxNUuyrmuP1WE6BU2BUCQ1TOZ5TTTYYmkfv02t+w3X12Khsj1HNb2/Q4QVNha7rJYLTH
         nCmbKVkbTzr4fPUajvVYsfxzAOAu0rgmRv4XBIImxJGjZIentOldn64p+X17D1BArbZm
         Md6Vh5tYKfw824NJUb546xGGPGU9HDscwRqbIIDVZtKjq1ztiN9riiusXGtEmQVjnEF2
         brlXP47CicYBHXI0OZvUwsWpjh2NQ09WZFIZjgGKB0cgImJjnSn+szZzQ4SvpR/YCAC6
         VLUQ==
MIME-Version: 1.0
Received: by 10.50.45.234 with SMTP id q10mr1358214igm.54.1332495176980; Fri,
 23 Mar 2012 02:32:56 -0700 (PDT)
Received: by 10.42.117.67 with HTTP; Fri, 23 Mar 2012 02:32:56 -0700 (PDT)
In-Reply-To: <874ntgadal.fsf@frosties.localnet>
References: <CALs4vDYGKNiYQZLDRVbBWDZibEXeU8T33Bw08G9xAT_-T-6h9A@mail.gmail.com>
	<874ntgadal.fsf@frosties.localnet>
Date: Fri, 23 Mar 2012 10:32:56 +0100
Message-ID: <CALs4vDZUd37VB=hGGM=dsoig2zeFEEP-n3oYUTkFgeTjyWs7xQ@mail.gmail.com>
From: Hans Ole Rafaelsen <hrafaelsen@gmail.com>
To: Goswin von Brederlow <goswin-v-b@web.de>
Cc: caml-list@inria.fr
Content-Type: multipart/alternative; boundary=14dae93403d7b0585904bbe5b591
Subject: Re: [Caml-list] Strategies for finding memory leaks


--14dae93403d7b0585904bbe5b591
Content-Type: text/plain; charset=ISO-8859-1

Hi,

I have tried to trigger Gc.compact but that only have limited effect for a
short time.

Hans Ole

On Thu, Mar 22, 2012 at 4:03 PM, Goswin von Brederlow <goswin-v-b@web.de>wrote:

> Hans Ole Rafaelsen <hrafaelsen@gmail.com> writes:
>
> > Hello,
> >
> > Is there some tools / tricks that can be used to help find memory leaks?
> >
> > I have trouble with an application, that when running for a long time,
> starts
> > to use a lot of CPU and consume more memory. It starts out by using
> about 20%
> > CPU (reported by top) and after 24 hours it has increased to 80% usage.
> Also
> > physical (RES) memory usage goes from 80M to 160M. The workload for the
> > application is the same the whole time.
> >
> > Using OProfile (http://oprofile.sourceforge.net/news/) shows that that
> most of
> > the time is being spent doing memory management.
> >
> > At startup:
> > CPU: Core 2, speed 2667 MHz (estimated)
> > Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a
> unit mask
> > of 0x00 (Unhalted core cycles) count 100000
> > samples  %        image name               symbol name
> > 52764    22.3913  vc_client.native         mark_slice
> > 33580    14.2502  vc_client.native         caml_page_table_lookup
> > 25415    10.7853  vc_client.native         sweep_slice
> > 10119     4.2942  vc_client.native         caml_fl_allocate
> > 6423      2.7257  [vdso] (tgid:9015 range:0x7fff4256c000-0x7fff4256d000)
> [vdso]
> > (tgid:9015 range:0x7fff4256c000-0x7fff4256d000)
> > 5233      2.2207  vc_client.native
> > camlLividisvc__Nalbuf_tools__replace_pattern_1033
> > 2759      1.1708  vc_client.native         caml_iterate_global_roots
> > 2728      1.1577  vc_client.native         caml_modify
> > 2473      1.0495  vc_client.native         caml_oldify_one
> > 2204      0.9353  vc_client.native
> > camlLividisvc__Nalbuf_bytestream__search_1047
> > 2183      0.9264  vc_client.native         caml_darken
> > 1935      0.8212  vc_client.native         caml_stash_backtrace
> > 1843      0.7821  vc_client.native         caml_do_roots
> > 1838      0.7800  vc_client.native         caml_delete_global_root
> >
> > After ca. 24 hours run:
> > CPU: Core 2, speed 2667 MHz (estimated)
> > Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a
> unit mask
> > of 0x00 (Unhalted core cycles) count 100000
> > samples  %        image name               symbol name
> > 1137401  56.2697  vc_client.native         mark_slice
> > 405598   20.0658  vc_client.native         sweep_slice
> > 399832   19.7806  vc_client.native         caml_page_table_lookup
> > 10106     0.5000  vc_client.native         caml_fl_allocate
> > 3548      0.1755  vc_client.native         caml_iterate_global_roots
> > 3397      0.1681  [vdso] (tgid:26129
> range:0x7fff747ff000-0x7fff74800000)
> > [vdso]
> >  (tgid:26129 range:0x7fff747ff000-0x7fff74800000)
> > 2797      0.1384  vc_client.native
> > camlLividisvc__Nalbuf_tools__replace_
> > pattern_1033
> > 2307      0.1141  vc_client.native
> > camlLividisvc__Nalbuf_bytestream__sea
> > rch_1047
> > 2005      0.0992  vc_client.native         caml_oldify_local_roots
> > 1786      0.0884  vc_client.native         caml_gc_stat
> > 1441      0.0713  vc_client.native         caml_oldify_one
> > 1163      0.0575  vc_client.native         caml_darken
> > 1163      0.0575  vc_client.native         caml_fl_merge_block
> > 1032      0.0511  vc_client.native         camlHashtbl__find_1093
> >
> > The application uses several 3rd party libraries, including: LablGTK2,
> > OCamlNet, LWT and others.
> >
> > Is there some clever trick that can by used to track down or get a hint
> of what
> > is causing this?
> >
> > Thanks,
> >
> > Hans Ole Rafaelsen
>
> Are you calling the GC manually somewhere in the code or in one of the
> libs?
>
> MfG
>         Goswin
>

--14dae93403d7b0585904bbe5b591
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi,<br><br>I have tried to trigger Gc.compact but that only have limited ef=
fect for a short time.<br><br>Hans Ole<br><br><div class=3D"gmail_quote">On=
 Thu, Mar 22, 2012 at 4:03 PM, Goswin von Brederlow <span dir=3D"ltr">&lt;<=
a href=3D"mailto:goswin-v-b@web.de">goswin-v-b@web.de</a>&gt;</span> wrote:=
<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"HOEnZb"><div class=3D"h5">Hans=
 Ole Rafaelsen &lt;<a href=3D"mailto:hrafaelsen@gmail.com">hrafaelsen@gmail=
.com</a>&gt; writes:<br>

<br>
&gt; Hello,<br>
&gt;<br>
&gt; Is there some tools / tricks that can be used to help find memory leak=
s?<br>
&gt;<br>
&gt; I have trouble with an application, that when running for a long time,=
 starts<br>
&gt; to use a lot of CPU and consume more memory. It starts out by using ab=
out 20%<br>
&gt; CPU (reported by top) and after 24 hours it has increased to 80% usage=
. Also<br>
&gt; physical (RES) memory usage goes from 80M to 160M. The workload for th=
e<br>
&gt; application is the same the whole time.<br>
&gt;<br>
&gt; Using OProfile (<a href=3D"http://oprofile.sourceforge.net/news/" targ=
et=3D"_blank">http://oprofile.sourceforge.net/news/</a>) shows that that mo=
st of<br>
&gt; the time is being spent doing memory management.<br>
&gt;<br>
&gt; At startup:<br>
&gt; CPU: Core 2, speed 2667 MHz (estimated)<br>
&gt; Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a =
unit mask<br>
&gt; of 0x00 (Unhalted core cycles) count 100000<br>
&gt; samples=A0 %=A0=A0=A0=A0=A0=A0=A0 image name=A0=A0=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0=A0 symbol name<br>
&gt; 52764=A0=A0=A0 22.3913=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 mar=
k_slice<br>
&gt; 33580=A0=A0=A0 14.2502=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 cam=
l_page_table_lookup<br>
&gt; 25415=A0=A0=A0 10.7853=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 swe=
ep_slice<br>
&gt; 10119=A0=A0=A0=A0 4.2942=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 c=
aml_fl_allocate<br>
&gt; 6423=A0=A0=A0=A0=A0 2.7257=A0 [vdso] (tgid:9015 range:0x7fff4256c000-0=
x7fff4256d000) [vdso]<br>
&gt; (tgid:9015 range:0x7fff4256c000-0x7fff4256d000)<br>
&gt; 5233=A0=A0=A0=A0=A0 2.2207=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
<br>
&gt; camlLividisvc__Nalbuf_tools__replace_pattern_1033<br>
&gt; 2759=A0=A0=A0=A0=A0 1.1708=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_iterate_global_roots<br>
&gt; 2728=A0=A0=A0=A0=A0 1.1577=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_modify<br>
&gt; 2473=A0=A0=A0=A0=A0 1.0495=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_oldify_one<br>
&gt; 2204=A0=A0=A0=A0=A0 <a href=3D"tel:0.9353" value=3D"+4709353">0.9353</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0<br>
&gt; camlLividisvc__Nalbuf_bytestream__search_1047<br>
&gt; 2183=A0=A0=A0=A0=A0 <a href=3D"tel:0.9264" value=3D"+4709264">0.9264</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_darken<br>
&gt; 1935=A0=A0=A0=A0=A0 <a href=3D"tel:0.8212" value=3D"+4708212">0.8212</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_stash_backtrace<br>
&gt; 1843=A0=A0=A0=A0=A0 <a href=3D"tel:0.7821" value=3D"+4707821">0.7821</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_do_roots<br>
&gt; 1838=A0=A0=A0=A0=A0 <a href=3D"tel:0.7800" value=3D"+4707800">0.7800</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_delete_global_root<br>
&gt;<br>
&gt; After ca. 24 hours run:<br>
&gt; CPU: Core 2, speed 2667 MHz (estimated)<br>
&gt; Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a =
unit mask<br>
&gt; of 0x00 (Unhalted core cycles) count 100000<br>
&gt; samples=A0 %=A0=A0=A0=A0=A0=A0=A0 image name=A0=A0=A0=A0=A0=A0=A0=A0=
=A0=A0=A0=A0=A0=A0 symbol name<br>
&gt; 1137401=A0 56.2697=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 mark_sl=
ice<br>
&gt; 405598=A0=A0 20.0658=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 sweep=
_slice<br>
&gt; 399832=A0=A0 19.7806=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_=
page_table_lookup<br>
&gt; 10106=A0=A0=A0=A0 <a href=3D"tel:0.5000" value=3D"+4705000">0.5000</a>=
=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_fl_allocate<br>
&gt; 3548=A0=A0=A0=A0=A0 <a href=3D"tel:0.1755" value=3D"+4701755">0.1755</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0 caml_iterate_global_roots<br>
&gt; 3397=A0=A0=A0=A0=A0 <a href=3D"tel:0.1681" value=3D"+4701681">0.1681</=
a>=A0 [vdso] (tgid:26129 range:0x7fff747ff000-0x7fff74800000)<br>
&gt; [vdso]<br>
&gt; =A0(tgid:26129 range:0x7fff747ff000-0x7fff74800000)<br>
&gt; 2797=A0=A0=A0=A0=A0 <a href=3D"tel:0.1384" value=3D"+4701384">0.1384</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0<br>
&gt; camlLividisvc__Nalbuf_tools__replace_<br>
&gt; pattern_1033<br>
&gt; 2307=A0=A0=A0=A0=A0 <a href=3D"tel:0.1141" value=3D"+4701141">0.1141</=
a>=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0<br>
&gt; camlLividisvc__Nalbuf_bytestream__sea<br>
&gt; rch_1047<br>
&gt; 2005=A0=A0=A0=A0=A0 0.0992=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_oldify_local_roots<br>
&gt; 1786=A0=A0=A0=A0=A0 0.0884=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_gc_stat<br>
&gt; 1441=A0=A0=A0=A0=A0 0.0713=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_oldify_one<br>
&gt; 1163=A0=A0=A0=A0=A0 0.0575=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_darken<br>
&gt; 1163=A0=A0=A0=A0=A0 0.0575=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 caml_fl_merge_block<br>
&gt; 1032=A0=A0=A0=A0=A0 0.0511=A0 vc_client.native=A0=A0=A0=A0=A0=A0=A0=A0=
 camlHashtbl__find_1093<br>
&gt;<br>
&gt; The application uses several 3rd party libraries, including: LablGTK2,=
<br>
&gt; OCamlNet, LWT and others.<br>
&gt;<br>
&gt; Is there some clever trick that can by used to track down or get a hin=
t of what<br>
&gt; is causing this?<br>
&gt;<br>
&gt; Thanks,<br>
&gt;<br>
&gt; Hans Ole Rafaelsen<br>
<br>
</div></div>Are you calling the GC manually somewhere in the code or in one=
 of the<br>
libs?<br>
<br>
MfG<br>
<span class=3D"HOEnZb"><font color=3D"#888888"> =A0 =A0 =A0 =A0Goswin<br>
</font></span></blockquote></div><br>

--14dae93403d7b0585904bbe5b591--
