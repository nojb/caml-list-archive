Received: from mail1-relais-roc.national.inria.fr (mail1-relais-roc.national.inria.fr [192.134.164.82])
	by walapai.inria.fr (8.13.6/8.13.6) with ESMTP id q2MHEDC1018475
	for <caml-list@sympa-roc.inria.fr>; Thu, 22 Mar 2012 18:14:13 +0100
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: Aj0CAIBca0/B/UPkmWdsb2JhbABEtDODLAEBAQEBBg0LBxQnggkBAQV4ARALGAkWDwkDAgECAUUGDQEHAogGBLkAkGQEm0yNIw
X-IronPort-AV: E=Sophos;i="4.73,630,1325458800"; 
   d="scan'208";a="150766212"
Received: from smtpout3.laposte.net (HELO smtpout.laposte.net) ([193.253.67.228])
  by mail1-smtp-roc.national.inria.fr with ESMTP; 22 Mar 2012 18:14:07 +0100
Received: from [128.93.60.78] ([128.93.60.78])
	by mwinf8506-out with ME
	id ohE31i00G1hGlFk03hE3kH; Thu, 22 Mar 2012 18:14:07 +0100
Message-ID: <4F6B5DDB.1040800@laposte.net>
Date: Thu, 22 Mar 2012 18:14:03 +0100
From: Pierre Chambart <pierre.chambart@laposte.net>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:8.0) Gecko/20120216 Icedove/8.0
MIME-Version: 1.0
To: "Richard W.M. Jones" <rich@annexia.org>
CC: caml-list@inria.fr
References: <20120322114710.GA21740@annexia.org> <4F6B206D.6030103@frisch.fr> <20120322164233.GB21740@annexia.org>
In-Reply-To: <20120322164233.GB21740@annexia.org>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Subject: Re: [Caml-list] Native dynlink and reloading modules

On 03/22/2012 05:42 PM, Richard W.M. Jones wrote:
> On Thu, Mar 22, 2012 at 01:51:57PM +0100, Alain Frisch wrote:
>> On 03/22/2012 12:47 PM, Richard W.M. Jones wrote:
>>> I'm a bit surprised to find that native dynlink doesn't work in the
>>> same way as bytecode dynlink in respect to reloading the same module.
>>> (See attached test program)
>>>
>>> In bytecode dynlink, reloading (ie. Dynlink.loadfile) the same module
>>> causes the new module code to override the old module code:
>>>
>>>   $ ./dynlink_test
>>>   testing bytecode ...
>>>   a
>>>   b
>>>
>>> But in native dynlink, the new module is silently discarded and the
>>> old code appears to run:
>>>
>>>   $ ./dynlink_test
>>>   testing native ...
>>>   a
>>>   a
>>>
>>> I would classify this as a bug, but I'm not quite sure what is
>>> expected to happen.  Is there some other way to override a module as
>>> in bytecode?
>> natdynlink currenlty depends on the OS dynamic linker, we cannot
>> control the semantics so precisely (you can try loadfile_private,
>> but I'm not sure it would solve your issue).
> This is all a bit, umm, unexpected.
>
> Stepping back, the problem I'm trying to solve is how to reload a
> configuration-like file into a daemon without restarting the daemon.
> The "configuration-like file" is the whenjobs jobs script[1], and the
> daemon is the whenjobs daemon[2].
>
> Any ideas on how best to go about this?  Note that the whenjobs jobs
> script is intentionally a Turing-complete OCaml program, so converting
> it to another format is probably not going to be practical.
>
I did not really read your code, but it seams to me that you are doing
the compilation in your tool.
So you can choose the name of the module. Isn't it possible to change
the name of the file each
time you compile/reload it ?
-- 
Pierre
