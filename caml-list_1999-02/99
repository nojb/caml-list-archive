Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA23483 for caml-redistribution; Mon, 22 Feb 1999 18:58:37 +0100 (MET)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA05744 for <caml-list@pauillac.inria.fr>; Mon, 22 Feb 1999 18:37:04 +0100 (MET)
Received: from heplix4.ikp.physik.tu-darmstadt.de (heplix4.ikp.physik.tu-darmstadt.de [130.83.24.139])
	by nez-perce.inria.fr (8.8.7/8.8.7) with ESMTP id SAA13568
	for <caml-list@inria.fr>; Mon, 22 Feb 1999 18:37:02 +0100 (MET)
Received: (from ohl@localhost)
	by heplix4.ikp.physik.tu-darmstadt.de (8.8.8/8.8.8) id SAA11290;
	Mon, 22 Feb 1999 18:37:01 +0100
From: Thorsten Ohl <ohl@hep.tu-darmstadt.de>
Message-ID: <14033.38333.652607.941379@heplix4.ikp.physik.tu-darmstadt.de>
Date: Mon, 22 Feb 1999 18:37:01 +0100 (CET)
To: caml-list@inria.fr
Subject: polymorphically comparable Maps?
X-Mailer: VM 6.61 under Emacs 19.34.1
Reply-To: ohl@hep.tu-darmstadt.de
Sender: weis

Does anybody know of a fast data structure for (applicative)
association tables over ordered types (like Map in the standard
library) with the property that identical maps will have an identical
representation?  Sorted association lists work, but have linear access
and insertion.  Is there something logarithmical (even with an OCaml
implementation)?

Thanks,
-Thorsten

[ If anybody wonders: I want/need polymorphic comparison, because the
  Maps are part of a recursive datastructure. ]
-- 
Thorsten Ohl, Physics Department, TU Darmstadt -- ohl@hep.tu-darmstadt.de
http://heplix.ikp.physik.tu-darmstadt.de/~ohl/ [<=== PGP public key here]



