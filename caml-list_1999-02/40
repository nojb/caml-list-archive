Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA19138 for caml-redistribution; Tue, 9 Feb 1999 09:51:39 +0100 (MET)
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA11702 for <caml-list@pauillac.inria.fr>; Tue, 9 Feb 1999 09:43:48 +0100 (MET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.8.7/8.8.7) with ESMTP id JAA08781;
	Tue, 9 Feb 1999 09:43:45 +0100 (MET)
Received: (from weis@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA22736; Tue, 9 Feb 1999 09:43:46 +0100 (MET)
From: Pierre Weis <Pierre.Weis@inria.fr>
Message-Id: <199902090843.JAA22736@pauillac.inria.fr>
Subject: Re: "while" with condition at end?
To: mottl@miss.wu-wien.ac.at (Markus Mottl)
Date: Tue, 9 Feb 1999 09:43:46 +0100 (MET)
Cc: caml-list@inria.fr
In-Reply-To: <199902082014.VAA24823@miss.wu-wien.ac.at> from "Markus Mottl" at Feb 8, 99 09:14:47 pm
X-Mailer: ELM [version 2.4 PL24 ME8]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: weis

> Hello!
> 
> I have just found out that there is no loop construct that checks the
> termination condition at the end of the block. Is there some special
> reason to this?
> 
> I'd like to write something like e.g.
> 
>   do
>     ();
>     ...;
>   while (some_condition);
> 
> The only work-around is to either double the code and execute it once
> before a "normal" while-loop (not elegant). The other option is to put
> the block into a unit-function (a bit less efficient) and use it once
> before and than in the loop (also not very elegant).
> A construct of this kind would probably make the imperative features
> more complete.
> 
> Best regards,
> Markus Mottl
> 
> -- 
> Markus Mottl, mottl@miss.wu-wien.ac.at, http://miss.wu-wien.ac.at/~mottl

The introduction of a ``do ... while ...'' construct would introduce
ambiguities in the Caml grammar. It would be preferable to
introduce a new keyword for the new kind of loop, for instance

repeat
 actions
until
 cond
done

Or may be better, just change the keyword ``while'' into the keyword
``until'' to reflect the symetry between the two syntactic constructs
for imperative loops:

until cond
do
 actions
done

For the time being, there is a simple workaround (admittedly not as
nice as desirable): merge the ``actions'' and the ``condition'' into a
single sequence within a while loop with an empty body. In effect,

until cond
do 
 actions
done

is equivalent to

while actions; cond do () done

Alternatively, you may define your loop via a recursive function:

let rec repeat_loop () =
 actions;
 if not cond then repeat_loop () in
repeat_loop ()

Best regards,

Pierre Weis

INRIA, Projet Cristal, Pierre.Weis@inria.fr, http://cristal.inria.fr/~weis/




