Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA16638; Wed, 5 Mar 2003 21:36:02 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA15786 for <caml-list@pauillac.inria.fr>; Wed, 5 Mar 2003 21:36:01 +0100 (MET)
Received: from wetware.wetware.com (wetware.wetware.com [199.108.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h25KZxT06375
	for <caml-list@inria.fr>; Wed, 5 Mar 2003 21:36:00 +0100 (MET)
Received: from wetware.com([199.108.16.89]) (1959 bytes) by wetware.wetware.com
	via sendmail with P:esmtp/R:bind_hosts/T:inet_zone_bind_smtp
	(sender: <jhw@wetware.com>) 
	id <m18qfU3-002zUGC@wetware.wetware.com>
	for <caml-list@inria.fr>; Wed, 5 Mar 2003 12:27:23 -0800 (PST)
	(Smail-3.2.0.114 2001-Aug-6 #1 built 2002-Sep-2)
Date: Wed, 5 Mar 2003 12:27:26 -0800
Subject: Re: [Caml-list] ipv6
Content-Type: text/plain; charset=US-ASCII; format=flowed
Mime-Version: 1.0 (Apple Message framework v551)
From: james woodyatt <jhw@wetware.com>
To: The Trade <caml-list@inria.fr>
Content-Transfer-Encoding: 7bit
In-Reply-To: <20030305125936.GB17976@hilbert.house>
Message-Id: <E177A530-4F48-11D7-A972-000393BA7EBA@wetware.com>
X-Mailer: Apple Mail (2.551)
X-Spam: no; 0.00; woodyatt:01 jhw:01 wetware:01 caml-list:01 ceri:01 andrieu:01 oandrieu:01 extensible:01 admittedly:01 multicast:01 ditch:01 nerim:01 ocaml:01 05,:01 imho:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wednesday, Mar 5, 2003, at 04:59 US/Pacific, Ceri Storey wrote:
> On Wed, Mar 05, 2003 at 10:22:06AM +0100, Olivier Andrieu wrote:
>> I did some things on ipv6 too. I made a patch for the Unix library :
>>
>> http://oandrieu.nerim.net/ocaml/index.html#ipv6
>>
>> There's getaddrinfo and getnameinfo support and some other things too.
>
> It looks good to me, but I don't suppose it'd be possible to have it
> extensible to other address families? Myself, i'd like getaddrinfo
> etc to handle unix addresses transparently. Admittedly this isn't
> supported in any C implementation I know of, but IMHO it'd be nice.

Not to mention it would also be nice to get support for multicast, 
IPsec, ICMP, etc.

The way I have been approaching this problem is to ditch the sockets 
layer in the Unix library, and roll my own extensible sockets layer.  
That way I can support new address families, socket types, protocols 
and socket options without having to change the module signatures in 
the existing library.  As a bonus, I get more type safety in the socket 
interface and a couple of convenience functions for manipulating socket 
addresses more easily.

I doubt this approach will ever be used in the standard distribution, 
though.  I'm also not expecting to be able to release my code until 
probably after the next OCaml release-- whenever that is.


-- 
j h woodyatt <jhw@wetware.com>

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

