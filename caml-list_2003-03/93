Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA06190; Wed, 12 Mar 2003 06:41:27 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA06614 for <caml-list@pauillac.inria.fr>; Wed, 12 Mar 2003 06:41:26 +0100 (MET)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h2C5fOf03202
	for <caml-list@inria.fr>; Wed, 12 Mar 2003 06:41:24 +0100 (MET)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3/3.7W) with ESMTP id OAA14336;
	Wed, 12 Mar 2003 14:40:54 +0900 (JST)
To: brian.hurt@qlogic.com
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] Checked exceptions and type inference
In-Reply-To: <Pine.LNX.4.33.0303111538120.2164-100000@eagle.ancor.com>
References: <Pine.LNX.4.33.0303111538120.2164-100000@eagle.ancor.com>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20030312144054N.garrigue@kurims.kyoto-u.ac.jp>
Date: Wed, 12 Mar 2003 14:40:54 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 22
X-Spam: no; 0.00; jacques:01 caml-list:01 inference:01 qlogic:01 pessaux:01 thesis:01 implemented:01 checker:01 defensive:01 ocaml:01 caml:01 garrigue:01 checking:01 uncaught:02 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Brian Hurt <brian.hurt@qlogic.com>

> Java treats checked exceptions as part of the type signature of the 
> function.  As such, it seems to me that as such, type inference would work 
> to propogate most of this information in a more convient way.
[...]
> Is there any research on using checked exceptions in an ML derived 
> language?  Any plans/opinions on implementing checked exceptions in Ocaml?

I'm not sure it is exactly what you are looking for, but Francois
Pessaux wrote a PhD thesis (and also implemented it) on "static
analysis to detect uncaught exceptions in Objective Caml". IIRC, you
need to declare nothing, the checker tells you what exceptions can
happen at any point of the program.

http://guinness.cs.stevens-tech.edu/~fpessaux/#My_thesis_work

I suppose the same technology could also be used in a more defensive
manner: checking that only specified exceptions can come out of a
function for instance.

Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

