Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA13145; Mon, 3 Mar 2003 22:45:56 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA13467 for <caml-list@pauillac.inria.fr>; Mon, 3 Mar 2003 22:45:53 +0100 (MET)
Received: from wetware.wetware.com (wetware.wetware.com [199.108.16.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h23LjqH22030
	for <caml-list@inria.fr>; Mon, 3 Mar 2003 22:45:52 +0100 (MET)
Received: from wetware.com([199.108.16.89]) (1512 bytes) by wetware.wetware.com
	via sendmail with P:esmtp/R:bind_hosts/T:inet_zone_bind_smtp
	(sender: <jhw@wetware.com>) 
	id <m18pxfm-002zUJC@wetware.wetware.com>
	for <caml-list@inria.fr>; Mon, 3 Mar 2003 13:40:34 -0800 (PST)
	(Smail-3.2.0.114 2001-Aug-6 #1 built 2002-Sep-2)
Date: Mon, 3 Mar 2003 13:40:38 -0800
Subject: [Caml-list] extensional polymorphism
Content-Type: text/plain; charset=US-ASCII; format=flowed
Mime-Version: 1.0 (Apple Message framework v551)
Cc: The Trade <caml-list@inria.fr>
To: brogoff@speakeasy.net
From: james woodyatt <jhw@wetware.com>
In-Reply-To: <Pine.LNX.4.44.0303031135560.9492-100000@grace.speakeasy.net>
Message-Id: <C62BDE26-4DC0-11D7-A907-000393BA7EBA@wetware.com>
Content-Transfer-Encoding: 7bit
X-Mailer: Apple Mail (2.551)
X-Spam: no; 0.00; woodyatt:01 jhw:01 wetware:01 extensional:01 brogoff:01 agitate:01 notations:01 monad:01 monads:01 monadic:01 haskell:01 ocaml:01 speakeasy:01 syntax:02 arbitrary:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Monday, Mar 3, 2003, at 12:10 US/Pacific, brogoff@speakeasy.net 
wrote:
>
> That's why I said "Agitate for extensional polyorphism!". You really 
> want a
> way to overload similar notations.

If "extensional polymorphism" is what I want in order to be able to 
define an operator ( >>= ) that performs the monad bind operation on 
arbitrary monads, then yeah-- I'm all for it.

I recently discovered the power of monadic programming, but I am in no 
hurry to switch to Haskell in order to get a nice clean syntax for it.

If "extensional polymorphism" will get me a cleaner syntax for monadic 
programming without forcing me to give up all the things that make 
Ocaml the best language in the universe for imperative programming, 
then sign me up right here right now.

How would extensional polymorphism get me what I want?


-- 
j h woodyatt <jhw@wetware.com>

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

