Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA15954; Sun, 16 Mar 2003 06:28:40 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA15648 for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 06:28:39 +0100 (MET)
From: brogoff@speakeasy.net
Received: from grace.speakeasy.org (grace.speakeasy.org [216.254.0.2])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id h2G5Sbf12767
	for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 06:28:38 +0100 (MET)
Received: (qmail 10119 invoked by uid 36130); 16 Mar 2003 05:28:36 -0000
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 16 Mar 2003 05:28:36 -0000
Date: Sat, 15 Mar 2003 21:28:36 -0800 (PST)
To: "caml-list@pauillac.inria.fr" <caml-list@pauillac.inria.fr>
Subject: Module recursion (Was Re: [Caml-list] Re: Haskell-like syntax)
In-Reply-To: <20030315105846.GA28233@fichte.ai.univie.ac.at>
Message-ID: <Pine.LNX.4.44.0303152112560.27230-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; brogoff:01 recursion:01 caml-list:01 haskell-like:01 functor:01 admittedly:01 workarounds:01 impure:01 ocaml:01 speakeasy:01 syntax:02 mottl:02 modules:02 module:03 typing:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sat, 15 Mar 2003, Markus Mottl wrote:
> Furthermore, the "mutually recursive modules"-problem is more
> of a typing problem than one of compilation.

The most annoying (to me) case where the lack of module recursion is 
really hits is the problem of wanting type declarations and functor 
instantiations in a recursive relationship. If this problem, which seems 
like more of a compilation problem than a typing problem, were fixed, I 
don't think I'd care that much about having a general recursive module 
facility. I can live with the (admittedly sometimes ugly) workarounds in 
other cases where module recursion is desirable.

That's not to say I wouldn't like or use a general recursive module feature, 
but the full problem seems awfully hard in a (strict, impure) language like ML 
and I doubt that I'll see it in OCaml before I retire. 

-- Brian



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

