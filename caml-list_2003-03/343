Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA13681; Tue, 25 Mar 2003 17:06:48 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA13361 for <caml-list@pauillac.inria.fr>; Tue, 25 Mar 2003 17:06:46 +0100 (MET)
Received: from mail0.epfl.ch (mail0.epfl.ch [128.178.50.57])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h2PG6kX12162
	for <caml-list@inria.fr>; Tue, 25 Mar 2003 17:06:46 +0100 (MET)
Received: (qmail 11884 invoked from network); 25 Mar 2003 16:06:46 -0000
Received: from lamppc32.epfl.ch (HELO epfl.ch) (128.178.154.41)
  by mail0.epfl.ch with SMTP; 25 Mar 2003 16:06:46 -0000
Message-ID: <3E807E95.7090005@epfl.ch>
Date: Tue, 25 Mar 2003 17:06:45 +0100
From: Sebastien Briais <sebastien.briais@epfl.ch>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.3) Gecko/20030312
X-Accept-Language: en-us, en, fr-fr
MIME-Version: 1.0
To: Florian Hars <hars@bik-gmbh.de>
CC: caml-list@inria.fr
Subject: Re: [Caml-list] About polymorphic methods and recursive classes
References: <3E7C4784.6000901@epfl.ch> <20030324094415.6679de19.Damien.Pous@ens-lyon.fr> <3E7F457A.80006@epfl.ch> <20030325101545S.garrigue@kurims.kyoto-u.ac.jp> <3E80547E.2010201@epfl.ch> <3E8079D8.5000507@bik-gmbh.de>
In-Reply-To: <3E8079D8.5000507@bik-gmbh.de>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
X-Spam: no; 0.00; caml-list:01 florian:01 hars:01 generic:01 inference:01 unsound:01 polymorphic:01 classes:03 wrote:03 recursive:03 types:03 sebastien:03 epfl:05 upenn:06 definition:06 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Florian Hars wrote:

> Sebastien Briais wrote:
>
>> But what is the reason of this limitation ? I do not see the reasons 
>> since for example, in Generic Java, such a definition is correct
>
>
> I don't know if it is directly related to your problem, but Generic 
> Java is a bad reference point, because it's type inference is know to 
> be unsound:
>
> http://www.cis.upenn.edu/~bcpierce/types/archives/current/msg00849.html
>
> Yours, Florian
>
This problem in type inference has been fixed  since january 2002:

http://www.cis.upenn.edu/~bcpierce/types/archives/current/msg00921.html

Sébastien


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

