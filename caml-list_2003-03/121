Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA04120; Thu, 13 Mar 2003 01:35:20 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA04221 for <caml-list@pauillac.inria.fr>; Thu, 13 Mar 2003 01:35:18 +0100 (MET)
Received: from hirsch.in-berlin.de (hirsch.in-berlin.de [192.109.42.6])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h2D0ZHX12738
	for <caml-list@inria.fr>; Thu, 13 Mar 2003 01:35:17 +0100 (MET)
Received: from hirsch.in-berlin.de (localhost [127.0.0.1])
	by hirsch.in-berlin.de (8.12.8/8.12.8/Debian-2) with ESMTP id h2D0ZHvp007261
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NOT)
	for <caml-list@inria.fr>; Thu, 13 Mar 2003 01:35:17 +0100
Received: from first.UUCP (uucp@localhost)
	by hirsch.in-berlin.de (8.12.8/8.12.8/Debian-2) with UUCP id h2D0ZGje007259
	for inria.fr!caml-list; Thu, 13 Mar 2003 01:35:16 +0100
X-Envelope-From: oliver@first.in-berlin.de
X-Envelope-To: inria.fr!caml-list
Received: by first.in-berlin.de
	via sendmail from stdin
	id <m18tGgs-0005BaC@first.in-berlin.de> (Debian Smail3.2.0.114)
	Thu, 13 Mar 2003 01:35:22 +0100 (CET) 
From: oliver@first.in-berlin.de (Oliver Bandel)
Date: Thu, 13 Mar 2003 01:35:22 +0100
To: caml-list@inria.fr
Subject: [oliver: Re: [Caml-list] OCaml popularity]
Message-ID: <20030313003522.GB1261@first.in-berlin.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
User-Agent: Mutt/1.3.28i
X-Spam: no; 0.00; oliver:01 in-berlin:01 bandel:01 caml-list:01 1197:99 gradient:01 user-agent:01 mutt:01 weber:99 application':01 generically:01 stuffing:99 retrieve:99 datasets:01 real-world:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

----- Forwarded message from oliver -----

Date: Thu, 13 Mar 2003 01:29:47 +0100
To: Michael Schuerig <schuerig@acm.org>
Subject: Re: [Caml-list] OCaml popularity
Message-ID: <20030313002947.GB1197@first.in-berlin.de>
References: <Pine.GSO.4.44.0303121258020.5464-100000@gradient.cis.upenn.edu> <200303122334.34982.schuerig@acm.org> <20030312231352.GC372@phaeton.entropie.net> <200303130035.39823.schuerig@acm.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <200303130035.39823.schuerig@acm.org>
User-Agent: Mutt/1.3.28i
Status: RO
Content-Length: 2978
Lines: 88

On Thu, Mar 13, 2003 at 12:35:39AM +0100, Michael Schuerig wrote:
> On Thursday 13 March 2003 00:13, Martin Weber wrote:
> > I don't know what usually classifies as 'enterprise application' but
> > I think what I'm doing is one - application(s) written solely for the
> > use within the producing corner - no end user will ever see it
> 
> In my experience, the term "enterprise application" is not used 
> generically for all custom or behind-the-scenes application used in an 
> enterprise. Rather, it's used more specifically for applications that 
> handle large amounts of data managed in databases; stuffing data into 
> and getting it out of a DB and accomodating business processes while 
> doing so.

Well, when reasoning about data-structures, OCaml could provide
much here.
But IMHO, this area is absolutely a high-performance field.

And when you retrieve a lot of data, then every little
performance lack (which is not worth talking about, the little
quantity of some thousands of datasets or so) will
cause long waiting times for the application and the user...

So, if in high-end-perormance OCaml will be fast enough
in "real-world applications", not only in selected
benchmarks, is not proven yet!

But nevetrheless: Programming is a kind of social
task, and the companies normally will not rely
on a small amaount of programmers, which can't be
substituted by other programmers!
There are to view OCaml-programmers for a decision
in Companies to use that language.

So you have to use C/C++ for the next decade there,
IMHO. (But I hope that there are some niches, where
OCaml could be used here too.)



> 
> I've been working on this kind of software for a couple of years and 
> can't say that I'm particularly attracted to it. To be sure, I 
> recognize that there are interesting aspects to it,

Well, there is a lot of trees, and sorting and such stuff
internally in the databases. If they (the databases) would
be more than a row-oriented SQL-engine, and able
to communicate directly to a datastructure in your
program, that would be nice. :)
A typesafe database. :)


Using the newly created toplevel with database.cma:

# let my_db = Database.create_database (type my_example_db = int * Mytype of int*string) 100000
val my_db : my_example_db = [...]


Wouldn't that be nice?


Maybe it's necessary not to *adapt* OCaml to a database,
but *implement* a database with OCaml!


BTW: using a type-declaration as a parameter for a function...
...that seems unusual to me, and not fitting OCaml-language.
Or could it be possible?

If this is bull...., please show me, how such a stuff like
above could look like, when using OCaml (or "enhanced-OCaml"...).

if this could not implemented directly in Ocaml, maybe
a camlp4-solution could help here?





> but it's not what I 
> myself find interesting. Also, as I said before, I don't see that OCaml 
> provides a decisive advantage for *this* kind of software.

Sould be, IMHO (see above).


Ciao,
   Oliver

----- End forwarded message -----

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

