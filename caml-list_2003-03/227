Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id GAA15474; Sun, 16 Mar 2003 06:43:03 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id GAA16281 for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 06:43:02 +0100 (MET)
Received: from relay.pair.com (relay.pair.com [209.68.1.20])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id h2G5h1f13249
	for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 06:43:02 +0100 (MET)
Received: (qmail 89282 invoked from network); 16 Mar 2003 05:42:59 -0000
Received: from arda.pair.com (HELO compaqreview.d6.com) (209.68.1.133)
  by relay.pair.com with SMTP; 16 Mar 2003 05:42:59 -0000
X-pair-Authenticated: 209.68.1.133
Message-Id: <4.3.2.7.2.20030315213334.037caf08@localhost>
X-Sender: checker@localhost
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Sat, 15 Mar 2003 21:38:52 -0800
To: brogoff@speakeasy.net,
        "caml-list@pauillac.inria.fr" <caml-list@pauillac.inria.fr>
From: Chris Hecker <checker@d6.com>
Subject: Re: Module recursion (Was Re: [Caml-list] Re: Haskell-like
  syntax)
In-Reply-To: <Pine.LNX.4.44.0303152112560.27230-100000@grace.speakeasy.n
 et>
References: <20030315105846.GA28233@fichte.ai.univie.ac.at>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
X-Spam: no; 0.00; hecker:01 checker:01 recursion:01 caml-list:01 haskell-like:01 functor:01 admittedly:01 workarounds:01 impure:01 recursively:01 decoupling:01 chris:01 ocaml:01 caml:01 patch:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>The most annoying (to me) case where the lack of module recursion is 
>really hits is the problem of wanting type declarations and functor 
>instantiations in a recursive relationship. If this problem, which seems 
>like more of a compilation problem than a typing problem, were fixed, I 
>don't think I'd care that much about having a general recursive module 
>facility. I can live with the (admittedly sometimes ugly) workarounds in 
>other cases where module recursion is desirable. ... That's not to say I 
>wouldn't like or use a general recursive module feature, but the full 
>problem seems awfully hard in a (strict, impure) language like ML and I 
>doubt that I'll see it in OCaml before I retire.

I agree with this.  If I could just call functions and use types 
recursively across modules, I'd be 95% satisfied and it would allow 95% of 
the decoupling needed for large projects, and it's probably only 5% of the 
work (I think there was a tiny patch that allowed this in an older version 
of caml).  That would be great.  We don't need the 100% perfect recursion 
solution to make caml much more useful large projects.  95% now better than 
100% never.  :)

Chris


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

