Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA17740; Tue, 11 Mar 2003 15:27:27 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA17736 for <caml-list@pauillac.inria.fr>; Tue, 11 Mar 2003 15:27:26 +0100 (MET)
Received: from draco.services.brown.edu (draco.services.brown.edu [128.148.19.208])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h2BERPX10224
	for <caml-list@inria.fr>; Tue, 11 Mar 2003 15:27:25 +0100 (MET)
Received: from localhost.localdomain (anquetil.cs.brown.edu [128.148.33.148])
	by draco.services.brown.edu (Switch-2.2.5/Switch-2.2.4) with ESMTP id h2BERNG02747
	for <caml-list@inria.fr>; Tue, 11 Mar 2003 09:27:23 -0500 (EST)
Subject: Re: [Caml-list] OCaml popularity
From: Guillaume Marceau <gmarceau@cs.brown.edu>
To: caml-list@inria.fr
In-Reply-To: <200303111023.LAA09578@pauillac.inria.fr>
References: <200303111023.LAA09578@pauillac.inria.fr>
Content-Type: text/plain
Content-Transfer-Encoding: 7bit
X-Mailer: Ximian Evolution 1.0.5 
Date: 11 Mar 2003 09:27:18 -0500
Message-Id: <1047392843.16158.2192.camel@anquetil>
Mime-Version: 1.0
X-Brown-MailScanner: Found to be clean
X-Spam: no; 0.00; guillaume:01 caml-list:01 gerd:01 stolpmann:01 python:01 pierre:01 weis:01 recognized:99 ocaml's:01 laden:99 strive:99 offsets:01 matured:01 coders:01 usages:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 2003-03-10 at 18:48, Gerd Stolpmann wrote:
> 
> I suppose it has to do with the label "functional language", and
> these languages are often seen as toys of academic people. I.e.
> nothing for the real programmer. Not really sexy.


What about Python and Ruby? They were both heavily influenced by 
functional programming, yet they do not appear to carry the "toy
functional language" stigma. 

Is Ocaml special in that respect?


On Tue, 2003-03-11 at 05:23, Pierre Weis wrote:
> [...]
> 
> To briefly answer your question: I think Caml is not so popular
> because there were no big company or extremely important and
> successful tool to advertize it all over the place (like Sun did for
> Java or Unix for C). In short, Caml is more and more recognized as a
> powerful and well-crafted language among expert programmers, but it is
> almost unknown to the general audience.
> 

Well, since we cannot do much about Ocaml's lack of buzz-word laden
marketing campaign, maybe we should look at other indicator of language
success and work of those.


I believe most of today's mainstream language kick started their
popularity with a killer app :


   C was once the only language you could hack Unix with

   Java had web applets

   Perl had regular expressions

   Visual Basic had that really nice beginner-friendly dialog box editor

   PHP does server side web page generation.

   Tcl had Tk


We could strive to find (or develop) something ocaml can do that cannot
be done with any other mainstream language. Or, alternatively, something
that is an order or two faster in ocaml than in any other language. So
easy in fact, that the time time saved on a single project offsets the
time cost of learning the rudiments ocaml [*]. 

While writing these lines reminds me of Todd Proebsting's presentation
at LL2. 
    http://ll2.ai.mit.edu/talks/proebsting.ppt
Among other things, he offered a starter list of domains which are
begging for better support at the programming language level. If only we
could nail one of them solid...



One other unrelated observation on language acceptance:

In the the industry, they accept new languages as their IDE become
usable. Somehow, a solid IDE has become the sign that the language
matured and is now stable enough for industrial usage. Also, by their
own account, industrial coders spent so much time in VC++, they are now
IDE-dependent. IDE in this context means one-key compilation, hypertext
jumps between name usages and definitions, and a tree overview of the
components of the project, context sensitive work completion and context
sensitive help, etc. Ocaml would gain at having an official IDE project
which implement these features.




[*] : Ocaml makes writing compilers a delicacy. Unfortunately, not
enough people write compilers to start a critical mass seed around it.
For now I am selling ocaml as the language of choice to do error prone
data structure gymnastics. This is rather vague and unlikely to trigger
at coder into thinking : "wow, I'm about to do error prone data
structure gymnastics! This is the perfect occasion to learn ocaml!"


-- 
  "In Google non est, ergo non est." 

- Guillaume


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

