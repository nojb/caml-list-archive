Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA26480; Sun, 16 Mar 2003 19:02:10 +0100 (MET)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA26925 for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 19:02:09 +0100 (MET)
From: brogoff@speakeasy.net
Received: from grace.speakeasy.org (grace.speakeasy.org [216.254.0.2])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h2GI27X25521
	for <caml-list@pauillac.inria.fr>; Sun, 16 Mar 2003 19:02:08 +0100 (MET)
Received: (qmail 21702 invoked by uid 36130); 16 Mar 2003 18:02:06 -0000
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 16 Mar 2003 18:02:06 -0000
Date: Sun, 16 Mar 2003 10:02:06 -0800 (PST)
To: Markus Mottl <markus@oefai.at>
cc: "caml-list@pauillac.inria.fr" <caml-list@pauillac.inria.fr>
Subject: Re: Module recursion (Was Re: [Caml-list] Re: Haskell-like syntax)
In-Reply-To: <20030316111014.GA4354@fichte.ai.univie.ac.at>
Message-ID: <Pine.LNX.4.44.0303160949460.11736-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; brogoff:01 recursion:01 caml-list:01 haskell-like:01 impure:01 russo's:01 implemented:01 unsound:01 vnc:99 type-:01 extensional:01 furuse's:01 thesis:01 haskell:01 ocaml:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sun, 16 Mar 2003, Markus Mottl wrote:
> On Sat, 15 Mar 2003, brogoff@speakeasy.net wrote:
> > That's not to say I wouldn't like or use a general recursive module feature, 
> > but the full problem seems awfully hard in a (strict, impure) language like ML 
> > and I doubt that I'll see it in OCaml before I retire. 
> 
> Actually, I more often regret the lack of first class modules in OCaml
> rather than module recursion.

I here you, I guess it depends on your style and your applications. I'm 
guessing now, but I think I'd prefer a more powerful record system to 
ease those problems. Currently people use records or objects to workaround 
the lack of first class modules, so I'd look at raising the power of records. 
That said, of course, if we had first class modules I'm sure I'd use them ;-)

> In any case, this seems like a suitable moment for once again suggesting
> that Claudio Russo's module system as implemented in Moscow ML be
> integrated into OCaml :-)

Not quite yet! Google this 

    dreyer "moscow ml" unsound

I'd give the URL but I'm having trouble clipping text in this VNC window on the 
laptop. 

> It would be interesting to learn about future directions concerning the
> type- and the module system. Are there any plans of implementing the
> suggestion above? And how about extensional polymorphism - it seems that
> Jun Furuse's thesis was already finished last December?

Certainly my top request. Those Haskell guys are having too much fun, and it 
isn't because of syntax, or laziness, but because of all of the cool post HM 
type features in the core language. 

-- Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

