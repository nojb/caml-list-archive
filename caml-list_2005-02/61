Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id DF71ABC8B
	for <caml-list@yquem.inria.fr>; Thu,  3 Feb 2005 21:51:01 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j13Kp1sw032142
	for <caml-list@yquem.inria.fr>; Thu, 3 Feb 2005 21:51:01 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA23324 for <caml-list@pauillac.inria.fr>; Thu, 3 Feb 2005 21:51:00 +0100 (MET)
Received: from mta10-winn.mailhost.ntl.com (smtpout18.mailhost.ntl.com [212.250.162.18])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j13Kp0FI000954
	for <caml-list@inria.fr>; Thu, 3 Feb 2005 21:51:00 +0100
Received: from aamta01-winn.mailhost.ntl.com ([212.250.162.8])
          by mta10-winn.mailhost.ntl.com with ESMTP
          id <20050203205100.OICC20856.mta10-winn.mailhost.ntl.com@aamta01-winn.mailhost.ntl.com>;
          Thu, 3 Feb 2005 20:51:00 +0000
Received: from [80.4.70.84] by aamta01-winn.mailhost.ntl.com with ESMTP
          id <20050203205100.KNFN15415.aamta01-winn.mailhost.ntl.com@[80.4.70.84]>;
          Thu, 3 Feb 2005 20:51:00 +0000
Message-ID: <42028EB1.7060602@ntlworld.com>
Date: Thu, 03 Feb 2005 20:50:57 +0000
From: "chris.danx" <chris.danx@ntlworld.com>
User-Agent: Mozilla Thunderbird 1.0 (X11/20041206)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: skaller@users.sourceforge.net
Cc: Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE>,
	Erik de Castro Lopo <ocaml-erikd@mega-nerd.com>,
	caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Estimating the size of the ocaml community
References: <891bd33905020213315a2ebb18@mail.gmail.com>	 <8008871f05020213362d21ba87@mail.gmail.com>	 <000f01c50971$baad4840$0100a8c0@mshome.net>	 <1107403128.32586.223.camel@pelican.wigram>	 <20050203173556.4acec1c5.ocaml-erikd@mega-nerd.com>	 <Pine.LNX.4.58.0502031903410.14412@eiger.cip.physik.uni-muenchen.de> <1107461173.14589.91.camel@pelican.wigram>
In-Reply-To: <1107461173.14589.91.camel@pelican.wigram>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 42028EB5.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 42028EB4.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 ocaml:01 wrote:01 wrote:01 ocaml:01 interfacing:01 trivial:01 compiler:01 compiler:01 interfacing:01 trivial:01 ntlworld:98 lisp:01 flx:01 underlying:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

skaller wrote:
> On Fri, 2005-02-04 at 05:06, Thomas Fischbacher wrote:
> 
> 
>>Anyway, this leaves us with a very interesting question: how many people 
>>actually do believe in the value of Ocaml? I, for myself, use it whenever 
>>it is the most appropriate tool for a job (usually, when portability is 
>>an issue). This is sometimes the case, but more often than not, LISP 
>>turned out to be a better choice for what I do.
> 
> 
> Well ..
> 
> [skaller@pelican] ~/links/flx/src>wc *.ml
>   89737  342248 3223570 total
> 
> 90K Camls here speak for themselves ..
> 
> Ocaml has four downsides from my viewpoint:
> 
> (a) interfacing to C isn't trivial
> (b) native code compiler on x86 can't make a shared library
> 
> To a large extent these two factors are not only
> the reason for those 90K lines (which implement a 
> compiler) but also the reason I'll probably have to
> bootstrap the compiler away from Ocaml.


I didn't realise the native code compiler on x86 couldn't do this.  What 
exactly is the problem?

For interfacing to C would it be helpful to create a tool for handling 
all the underlying stuff.  In Ada, binding to C is done through special 
compiler directives and it's pretty trivial to do.  OCaml isn't Ada or 
as close to C as Ada is, but I was thinking of something that allows 
descriptions in OCaml augmented with directives telling the tool how to 
handle C.  Running the tool over a script would generate the appropriate 
C code for interfacing with OCaml.

I'm not 100% sure of the details or the benefit, but it might be worth 
considering.


Regards,
Chris

