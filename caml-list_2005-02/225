Return-Path: <will@exomi.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id D2B06BC88
	for <caml-list@yquem.inria.fr>; Mon,  7 Feb 2005 18:24:44 +0100 (CET)
Received: from will.iki.fi (will.iki.fi [217.169.64.20])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j17HOiaU013769
	for <caml-list@yquem.inria.fr>; Mon, 7 Feb 2005 18:24:44 +0100
Received: from ZMXLVII.dsl.saunalahti.fi (ZMXLVII.dsl.saunalahti.fi [85.76.70.148])
	by will.iki.fi (Postfix) with ESMTP id 09C5468;
	Mon,  7 Feb 2005 19:24:44 +0200 (EET)
Subject: Re: [Caml-list] The boon of static type checking
From: Ville-Pertti Keinonen <will@exomi.com>
To: skaller@users.sourceforge.net
Cc: Brian Hurt <bhurt@spnz.org>, Jon <jdh30@cam.ac.uk>,
	caml-list@yquem.inria.fr
In-Reply-To: <1107795520.13571.118.camel@pelican.wigram>
References: <Pine.LNX.4.44.0502062248540.5563-100000@localhost.localdomain>
	 <1107773824.654.43.camel@localhost>
	 <1107795520.13571.118.camel@pelican.wigram>
Content-Type: text/plain
Date: Mon, 07 Feb 2005 19:24:42 +0200
Message-Id: <1107797082.655.14.camel@localhost>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 FreeBSD GNOME Team Port 
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4207A45C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 wrote:01 wrote:01 iirc:01 transformed:01 transformed:01 cps:01 cps:01 functions:01 imperative:01 checking:01 purely:02 compiling:02 functional:02 functional:02 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Tue, 2005-02-08 at 03:58 +1100, skaller wrote:
> On Mon, 2005-02-07 at 21:57, Ville-Pertti Keinonen wrote:
> > 
> > While the single-assignment aspect of SSA could be considered
> > "functional", representing control flow using blocks and branches can't.
> 
> Yeah it can, it has been proven SSA is equivalent to
> a purely functional representation. Branches are done with CPS.
> Sorry I can't find the paper: the paper was actually written
> to explain *why* SSA is easy to analyse.

It's kind of equivalent (IIRC SSA can be transformed to CPS, but (full)
CPS can't be transformed trivially into SSA), but I still think SSA is
not functional in style.  Blocks are an imperative concept.

SSA also does nothing to address the interesting parts of compiling
functional languages - dealing with functions and calls.


