Return-Path: <will@exomi.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id AE14ABC88
	for <caml-list@yquem.inria.fr>; Mon,  7 Feb 2005 11:57:16 +0100 (CET)
Received: from will.iki.fi (will.iki.fi [217.169.64.20])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j17AvG6V026325
	for <caml-list@yquem.inria.fr>; Mon, 7 Feb 2005 11:57:16 +0100
Received: from acerf.exomi.com (fa-3-0-0.fw.exomi.com [217.169.64.99])
	by will.iki.fi (Postfix) with ESMTP id AF3C668;
	Mon,  7 Feb 2005 12:57:15 +0200 (EET)
Subject: Re: [Caml-list] The boon of static type checking
From: Ville-Pertti Keinonen <will@exomi.com>
To: Brian Hurt <bhurt@spnz.org>
Cc: skaller <skaller@users.sourceforge.net>, Jon <jdh30@cam.ac.uk>,
	caml-list@yquem.inria.fr
In-Reply-To: <Pine.LNX.4.44.0502062248540.5563-100000@localhost.localdomain>
References: <Pine.LNX.4.44.0502062248540.5563-100000@localhost.localdomain>
Content-Type: text/plain
Date: Mon, 07 Feb 2005 12:57:04 +0200
Message-Id: <1107773824.654.43.camel@localhost>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 FreeBSD GNOME Team Port 
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4207498C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 wrote:01 gcc:01 inlining:01 ocaml:01 inlining:01 closures:01 -inline:01 checking:01 parameter:02 functional:02 functional:02 brian:03 optimization:03 optimization:03 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Sun, 2005-02-06 at 23:34 -0600, Brian Hurt wrote:

> optimizations to it.  Of course, the more I look at SSA, the more it looks 
> like a functional language to me.  So, in effect, the GCC optimization 

While the single-assignment aspect of SSA could be considered
"functional", representing control flow using blocks and branches can't.

> Don't assume that inlining is optimization.  Actually, it generally isn't.  

Note that for OCaml, more aggressive inlining could be a significant
improvement, not because it would eliminate calls, but because it could
eliminate closures.  By more aggressive I mean more capable, not just
cranking up the -inline parameter.

Obviously this doesn't apply to C++.


