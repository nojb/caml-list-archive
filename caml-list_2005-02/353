Return-Path: <oliver@first.in-berlin.de>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 0B597BC8C
	for <caml-list@yquem.inria.fr>; Fri, 11 Feb 2005 21:44:26 +0100 (CET)
Received: from first.in-berlin.de (dialin-145-254-065-087.arcor-ip.net [145.254.65.87])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j1BKiOX8007728
	for <caml-list@yquem.inria.fr>; Fri, 11 Feb 2005 21:44:25 +0100
Received: by first.in-berlin.de (Postfix, from userid 501)
	id 0A467AAB47; Fri, 11 Feb 2005 12:26:54 +0100 (CET)
Date: Fri, 11 Feb 2005 12:26:54 +0100
From: Oliver Bandel <oliver@first.in-berlin.de>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Memory allocation nano-benchmark.
Message-ID: <20050211112654.GB429@first.in-berlin.de>
References: <420B7A7E.90504@or.uni-bonn.de> <d849ad2a050210065928a7a6d6@mail.gmail.com> <cee4e1fb050210085044fa063e@mail.gmail.com> <420BB3E3.1060005@t-online.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <420BB3E3.1060005@t-online.de>
User-Agent: Mutt/1.5.6i
X-Miltered: at nez-perce with ID 420D1928.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; oliver:01 bandel:01 oliver:01 in-berlin:01 caml-list:01 wrote:01 arrays:01 ocaml:01 ocaml:01 ...:98 computation:01 shorter:02 output:02 astonishment:95 thu:05 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.3 required=5.0 tests=DATE_IN_PAST_06_12,
	FORGED_RCVD_HELO autolearn=disabled version=3.0.2
X-Spam-Level: 

On Thu, Feb 10, 2005 at 08:20:03PM +0100, Christian Szegedy wrote:
[...]
> Actually, I have *filled* the arrays, as it may be clear from
> the code. This example was extracted from a program which
> massively shuffles around the content of this 3-dimensional grid.
> (Both work fine and yield identical output.)
> 
> To my astonishment, the OCaml was a bit faster than C when
> working on the grid, but the speed of allocation was nowhere
> near to that of the C version.

What does this mean?
Is only the work on the grid faster, or is the program
all in all (mem allocation AND working on the grid)
faster in OCaml or in C?

What does count more?

Being faster in subatsks, or getting the whole computation
done in a shorter time?


Ciao,
   Oliver

