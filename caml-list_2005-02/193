Return-Path: <skaller@users.sourceforge.net>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id E6871BC88
	for <caml-list@yquem.inria.fr>; Mon,  7 Feb 2005 03:23:55 +0100 (CET)
Received: from smtp1.adl2.internode.on.net (smtp1.adl2.internode.on.net [203.16.214.181])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j172Nrgj020975
	for <caml-list@yquem.inria.fr>; Mon, 7 Feb 2005 03:23:55 +0100
Received: from [192.168.1.200] (ppp212-197.lns2.syd3.internode.on.net [203.122.212.197])
	by smtp1.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id j172NkBY034307;
	Mon, 7 Feb 2005 12:53:47 +1030 (CST)
Subject: Re: [Caml-list] The boon of static type checking
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Jon <jdh30@cam.ac.uk>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <Prayer.1.0.13.0502061728330.14240@hermes-1.csi.cam.ac.uk>
References: <891bd33905020213315a2ebb18@mail.gmail.com>
	 <7f8e92aa0502060222383aac60@mail.gmail.com>
	 <Prayer.1.0.13.0502061728330.14240@hermes-1.csi.cam.ac.uk>
Content-Type: text/plain
Organization: 
Message-Id: <1107743025.6363.393.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 07 Feb 2005 13:23:46 +1100
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4206D139.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 sourceforge:01 wrote:01 unreasonable:01 misses:01 stl:01 ocaml:01 functors:01 ocaml:01 glebe:01 collapse:98 061:98 nsw:01 structures:01 behaviour:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Mon, 2005-02-07 at 04:28, Jon wrote:

> You seem to be complaining about poor performance when you know you are 
> using the wrong data structure. Talk about unreasonable expectations. :-)

But this misses the most important advantage of STL,
namely the ability to use multiple data structures
with the same algorithms.

In the first order Ocaml functors do that too,
but in practice they don't seem to work nearly as well.

For higher order problems, both systems seem to
collapse -- C++ from ad hoc behaviour, and Ocaml
from complexity, constraints, and limitations
on expressiveness.

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



