Return-Path: <mvanier@cs.caltech.edu>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 42510BC8B
	for <caml-list@yquem.inria.fr>; Mon, 14 Feb 2005 02:46:30 +0100 (CET)
Received: from swordfish.cs.caltech.edu (swordfish.cs.caltech.edu [131.215.44.124])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j1E1kTFC008865
	for <caml-list@yquem.inria.fr>; Mon, 14 Feb 2005 02:46:29 +0100
Received: from orchestra.cs.caltech.edu (orchestra.cs.caltech.edu [131.215.44.20])
	by swordfish.cs.caltech.edu (Postfix) with ESMTP
	id CA400DF28E; Sun, 13 Feb 2005 17:46:28 -0800 (PST)
Received: by orchestra.cs.caltech.edu (Postfix, from userid 2554)
	id EF42F9BDAB; Sun, 13 Feb 2005 17:46:24 -0800 (PST)
From: Michael Vanier <mvanier@cs.caltech.edu>
To: michael.walter@gmail.com
Cc: Thomas.Fischbacher@physik.uni-muenchen.de,
	dheck@ix.urz.uni-heidelberg.de, caml-list@yquem.inria.fr
In-reply-to: <877e9a170502131711122bd34e@mail.gmail.com> (message from Michael
	Walter on Sun, 13 Feb 2005 20:11:54 -0500)
Subject: Re: [Caml-list] The boon of static type checking
References: <877e9a17050206221653d14456@mail.gmail.com>
	 <Pine.LNX.4.58.0502130310510.22145@eiger.cip.physik.uni-muenchen.de>
	 <20050213112630.73930e19@hobbes>
	 <Pine.LNX.4.58.0502131358230.8773@eiger.cip.physik.uni-muenchen.de>
	 <877e9a1705021312525337a907@mail.gmail.com>
	 <Pine.LNX.4.58.0502132237040.24651@eiger.cip.physik.uni-muenchen.de>
	 <877e9a1705021314512ff095b9@mail.gmail.com>
	 <Pine.LNX.4.58.0502140031390.30259@eiger.cip.physik.uni-muenchen.de>
	 <877e9a1705021316114d4e10f0@mail.gmail.com>
	 <Pine.LNX.4.58.0502140134570.520@eiger.cip.physik.uni-muenchen.de> <877e9a170502131711122bd34e@mail.gmail.com>
Message-Id: <20050214014624.EF42F9BDAB@orchestra.cs.caltech.edu>
Date: Sun, 13 Feb 2005 17:46:24 -0800 (PST)
X-Miltered: at concorde with ID 421002F5.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; vanier:01 mvanier:01 caml-list:01 compiler:01 escapes:01 syntax:01 syntax:01 expansions:01 aficionados:01 metaocaml:01 haskell:01 lisp:01 lisp:01 checking:01 caltech:02 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 


> Date: Sun, 13 Feb 2005 20:11:54 -0500
> From: Michael Walter <michael.walter@gmail.com>
> 
> > > Of course, if you decide to use S-expressions primarily as a compiler
> > > target that's an entirely different issue (to bad that this path
> > > hasn't been explored that much, besides maybe Dylan).
> > 
> > That's how it's supposed to be.
> But that is not what it *is* like in > 95% of "the Lisp world". See my
> last mail - the typical Lisper seldomly/never "escapes" S expressions,
> and I strongly believe this is not because S expressions are the
> "best" syntax.
> 
> Michael
> 

[Way off-topic -- sorry!]

But S-expressions are arguably the best syntax for writing macro
expansions.  Since an S-expression is trivially parseable and dispatches on
its first symbol it's very easy to write source code transformations in
lisp, and lispers seem to value this much more than aficionados of other
languages.  More recent efforts like metaocaml and template Haskell (not to
mention camlp4 and C++ templates) suggest that the notion that source code
transformations can be a useful part of programming is getting more
popular.

Mike


