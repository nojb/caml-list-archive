Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id E0928BC88
	for <caml-list@yquem.inria.fr>; Fri,  4 Feb 2005 10:02:32 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j1492WQ2011131
	for <caml-list@yquem.inria.fr>; Fri, 4 Feb 2005 10:02:32 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA11831 for <caml-list@pauillac.inria.fr>; Fri, 4 Feb 2005 10:02:32 +0100 (MET)
Received: from smtp11.wanadoo.fr (smtp11.wanadoo.fr [193.252.22.31])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j1492VOh011128
	for <caml-list@inria.fr>; Fri, 4 Feb 2005 10:02:32 +0100
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf1107.wanadoo.fr (SMTP Server) with ESMTP id A3A691C0009A
	for <caml-list@inria.fr>; Fri,  4 Feb 2005 10:02:31 +0100 (CET)
Received: from nono (ARouen-106-1-2-39.w217-128.abo.wanadoo.fr [217.128.67.39])
	by mwinf1107.wanadoo.fr (SMTP Server) with SMTP id 4E6041C000A7
	for <caml-list@inria.fr>; Fri,  4 Feb 2005 10:02:31 +0100 (CET)
X-ME-UUID: 20050204090231321.4E6041C000A7@mwinf1107.wanadoo.fr
Message-ID: <002c01c50a98$84337a00$0100a8c0@mshome.net>
From: =?iso-8859-1?Q?Fr=E9d=E9ric_Gava?= <frederic.gava@wanadoo.fr>
Cc: <caml-list@inria.fr>
References: <891bd33905020213315a2ebb18@mail.gmail.com> <8008871f05020213362d21ba87@mail.gmail.com> <000f01c50971$baad4840$0100a8c0@mshome.net> <1107403128.32586.223.camel@pelican.wigram> <20050203173556.4acec1c5.ocaml-erikd@mega-nerd.com> <Pine.LNX.4.58.0502031903410.14412@eiger.cip.physik.uni-muenchen.de> <009a01c50a1e$f6c92080$0100a8c0@mshome.net> <Pine.LNX.4.58.0502032131000.14412@eiger.cip.physik.uni-muenchen.de> <4202A6AA.3030807@trdlnk.com> <Pine.LNX.4.58.0502040003080.14412@eiger.cip.physik.uni-muenchen.de> <20050203233950.GB7121@furbychan.cocan.org>
Subject: Re: [Caml-list] Estimating the size of the ocaml community
Date: Fri, 4 Feb 2005 10:04:20 +0100
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.50.4133.2400
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
X-Miltered: at nez-perce with ID 42033A28.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 42033A27.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; gava:01 gava:01 caml-list:01 ocaml:01 wrote:01 ocaml:01 serialize:01 serialize:01 extern:01 flags:01 extern:01 flags:01 marshaled:01 hair:98 ...:98 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

> On Fri, Feb 04, 2005 at 12:22:47AM +0100, Thomas Fischbacher wrote:
> > Oh, by the way, there is one more thing which I consider a really
> > grave issue, which gave us quite a lot of grey hair already: Ocaml
> > strings have this stupid limitation to 16 MB, which means in particular
> > that if you serialize a truly large intermediate state of, say, a long
> > and complicated calculation which accidentally got a bit larger than
this
> > limit (while you did not expect that), well...
>
> Got to agree with you on this one ...  At least we'll soon all be
> using 64 bit computers where OCaml doesn't suffer this limitation.
>
> Rich.
> Richard Jones, CTO Merjis Ltd.

Also agree with you.  This limitation is sometime a problem for me. I code a
library in Ocaml
for parallel computing, thus I always serialize values and I could not bench
programs which put on the networks, very big values. But this problem is a
problem of the implementation and not a problem of language design. Maybe in
the futur, this limitation would be deleted. "Int" are also limited (except
using num.cma) and so "string" are limited for  an access reason. Peraps in
the futur, we could serialize values to another things than string (another
data structure) and unmarshaled those sepcial data structures to
values....and having  only 4 functions:
to_channel: out_channel -> 'a -> extern_flags list -> unit
from_channel: in_channel -> 'a
to_serialize: 'a -> extern_flags list -> t
from_serialize: t -> 'a
where t is an abstract data type of marshaled values....

Regards,
Frédéric Gava


