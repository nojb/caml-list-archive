Return-Path: <jon@jdh30.plus.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id B7148BC8E
	for <caml-list@yquem.inria.fr>; Sun, 27 Feb 2005 12:09:04 +0100 (CET)
Received: from ptb-relay03.plus.net (ptb-relay03.plus.net [212.159.14.214])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j1RB94dQ010305
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Sun, 27 Feb 2005 12:09:04 +0100
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay03.plus.net with esmtp (Exim) id 1D5MIK-000MJe-1C
	for caml-list@yquem.inria.fr; Sun, 27 Feb 2005 11:09:04 +0000
From: Jon Harrop <jon@jdh30.plus.com>
Organization: Flying Frog Consultancy Ltd.
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] [Bug] Different behavior bytecode/nativecode
Date: Sun, 27 Feb 2005 11:10:22 +0000
User-Agent: KMail/1.7.1
References: <20050227.011343.11780601.Christophe.Troestler@umh.ac.be> <200502270444.51192.jon@jdh30.plus.com> <20050227.111314.133428119.Christophe.Troestler@umh.ac.be>
In-Reply-To: <20050227.111314.133428119.Christophe.Troestler@umh.ac.be>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200502271110.23479.jon@jdh30.plus.com>
X-Miltered: at nez-perce with ID 4221AA50.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 bug:01 bytecode:01 nativecode:01 christophe:01 troestler:01 wrote:01 ocamlopt:01 inlining:01 ocamlopt:01 inlining:01 advert:98 frog:98 guess:02 guess:02 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Sunday 27 February 2005 10:13, Christophe TROESTLER wrote:
> > ocamlopt is generating x86 code which is partly performed in 80-bit
> > registers and partly stored in 64-bit memory locations
>
> Are there general rules about this: does a "let" necessarily put the
> result into 64-bit memory (as an assignment in C does) or is it more
> complicated (e.g. due to inlining)?

My guess is that your guess is roughly right. I don't think ocamlopt does much 
inlining so you're probably fairly safe. For a detailed and accurate answer 
you'd better ask Xavier. You'd better be quick though, or skaller will reply 
and poison your mind. ;-)

> Thanks for quickly finding my mistake!

Any excuse for a free advert. :-)

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd.
http://ffconsultancy.com

