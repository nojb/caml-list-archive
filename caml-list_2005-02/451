Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 76C30BC75
	for <caml-list@yquem.inria.fr>; Thu, 17 Feb 2005 16:32:02 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j1HFW2wX011136
	for <caml-list@yquem.inria.fr>; Thu, 17 Feb 2005 16:32:02 +0100
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA21844 for <caml-list@pauillac.inria.fr>; Thu, 17 Feb 2005 16:32:01 +0100 (MET)
Received: from alex.barettalocal.com (h213-255-109-130.albacom.net [213.255.109.130] (may be forged))
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j1HFW1DL011132
	for <caml-list@inria.fr>; Thu, 17 Feb 2005 16:32:01 +0100
Received: from [127.0.0.1] (localhost.localdomain [127.0.0.1])
	by alex.barettalocal.com (Postfix) with ESMTP id AF8452BABE8
	for <caml-list@inria.fr>; Thu, 17 Feb 2005 16:32:01 +0100 (CET)
Message-ID: <4214B8F1.7010402@barettadeit.com>
Date: Thu, 17 Feb 2005 16:32:01 +0100
From: Alex Baretta <alex@barettadeit.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.5) Gecko/20050105 Debian/1.7.5-1
X-Accept-Language: it, en-us, en
MIME-Version: 1.0
To: Ocaml <caml-list@inria.fr>
Subject: Immediate recursive functions
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 4214B8F2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 4214B8F1.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; baretta:01 recursive:01 rec:01 pred:01 rec:01 pred:01 syntax:01 baretta:01 functions:01 int:01 int:01 alex:03 alex:03 let:03 370:96 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.2
X-Spam-Level: 

I sometimes feel the need for a mu operator. I'm thinking of something 
like the following:

# (rec f x -> if x <= 0 then 1 else x * (f (pred x))) 5
- : int = 120

as opposed to

(let rec f x = if x <= 0 then 1 else x * (f (pred x)) in f) 5
- : int = 120

This is not really a feature wish so much a bit of insane curiosity. Is 
there any specific reason for not having this in the core language syntax?

Alex

-- 
*********************************************************************
http://www.barettadeit.com/
Baretta DE&IT
A division of Baretta SRL

tel. +39 02 370 111 55
fax. +39 02 370 111 54

Our technology:

The Application System/Xcaml (AS/Xcaml)
<http://www.asxcaml.org/>

The FreerP Project
<http://www.freerp.org/>

