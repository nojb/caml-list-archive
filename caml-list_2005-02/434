Return-Path: <will@exomi.com>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0D3EFBC75
	for <caml-list@yquem.inria.fr>; Wed, 16 Feb 2005 11:56:57 +0100 (CET)
Received: from will.iki.fi (will.iki.fi [217.169.64.20])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j1GAuuR9004321
	for <caml-list@yquem.inria.fr>; Wed, 16 Feb 2005 11:56:56 +0100
Received: from acerf.exomi.com (fa-3-0-0.fw.exomi.com [217.169.64.99])
	by will.iki.fi (Postfix) with ESMTP id 4DB1D78;
	Wed, 16 Feb 2005 12:56:56 +0200 (EET)
Subject: Re: [Caml-list] Memory allocation nano-benchmark.
From: Ville-Pertti Keinonen <will@exomi.com>
To: Jon Harrop <jon@jdh30.plus.com>
Cc: caml-list@yquem.inria.fr
In-Reply-To: <200502160954.14157.jon@jdh30.plus.com>
References: <420B7A7E.90504@or.uni-bonn.de>
	 <200502152051.55292.jon@jdh30.plus.com> <1108541998.669.22.camel@localhost>
	 <200502160954.14157.jon@jdh30.plus.com>
Content-Type: text/plain
Date: Wed, 16 Feb 2005 12:56:55 +0200
Message-Id: <1108551415.652.30.camel@localhost>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.3 FreeBSD GNOME Team Port 
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 421326F8.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 wrote:01 compiler:01 abstracted:01 runtime:01 dependencies:01 ocaml:01 dynamic:03 intermediate:03 relies:05 wed:07 elegant:07 elegant:07 nicely:07 seem:07 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Wed, 2005-02-16 at 09:54 +0000, Jon Harrop wrote:

> Yes, the performance is astonishingly good considering how elegant the 
> compiler is. I think it relies entirely on the CPU to do dynamic instruction 

Elegant?  My idea of elegant would be something that's nicely abstracted
into intermediate representations and passes, introducing runtime
dependencies as late as possible, making things straightforward to
change etc.  My impression of OCaml is that it's an interesting
combination of "simplistic" and "hairy".  To be fair, the actual machine
code generation parts seem fairly nice.


