Return-Path: <pierre.weis@inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id E5FBABC88
	for <caml-list@yquem.inria.fr>; Thu, 10 Feb 2005 16:00:03 +0100 (CET)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j1AF03PP006290
	for <caml-list@yquem.inria.fr>; Thu, 10 Feb 2005 16:00:03 +0100
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA22727 for <caml-list@pauillac.inria.fr>; Thu, 10 Feb 2005 16:00:03 +0100 (MET)
Received: from wproxy.gmail.com (wproxy.gmail.com [64.233.184.192])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j1AF02Pf025015
	for <caml-list@inria.fr>; Thu, 10 Feb 2005 16:00:02 +0100
Received: by wproxy.gmail.com with SMTP id 69so123509wra
        for <caml-list@inria.fr>; Thu, 10 Feb 2005 06:59:53 -0800 (PST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:references;
        b=JB04A9gQsPuiPhs+orJZ0bsX7lyIc+oJ0+pbAZdWWSRNLB/fKOEfzzKMoBhsplYJq+7FWIIrgaRtekzx9fzZS1ZIYBEk49GKg5dnQf7hB1nATNMP6LrUwefcujov7gqMds41AIkDyKcjBZyGy3Ydl/8SWDnJXx0pcM8BUOyHNRw=
Received: by 10.54.31.8 with SMTP id e8mr11735wre;
        Thu, 10 Feb 2005 06:59:53 -0800 (PST)
Received: by 10.54.22.12 with HTTP; Thu, 10 Feb 2005 06:59:53 -0800 (PST)
Message-ID: <d849ad2a050210065928a7a6d6@mail.gmail.com>
Date: Thu, 10 Feb 2005 09:59:53 -0500
From: John Prevost <j.prevost@gmail.com>
Reply-To: John Prevost <j.prevost@gmail.com>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Memory allocation nano-benchmark.
In-Reply-To: <420B7A7E.90504@or.uni-bonn.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
References: <420B7A7E.90504@or.uni-bonn.de>
X-Miltered: at concorde with ID 420B76F3.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 420B76F2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; prevost:01 prevost:01 caml-list:01 uni-bonn:01 wrote:01 ocaml:01 vaguely:01 o'caml:01 allocates:01 chunks:01 o'caml:01 allocates:01 chunks:01 ...:98 chunk:02 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_BY_IP autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Thu, 10 Feb 2005 16:15:10 +0100, Christian Szegedy
<szegedy@or.uni-bonn.de> wrote:
> Let us look at another example where ocaml not really shines:

Er.  Or perhaps we should not?  I could not imagine writing anything
even vaguely similar to these examples in either C or in O'Caml.

Not to mention the serious problem with evaluating memory allocation
overhead by comparing programs that allocate massive amounts of memory
but never use or release any of it.

In a program that allocates many small short-lived chunks of memory, I
suspect you will find that *in practice*, O'Caml performs better than
C.

In a program that allocates one very large chunk of memory, I suspect
you will find that both C and O'Caml do a lot better when... you
allocated as one very large chunk of memory (or, if need be, a *tiny*
number of large chunks) instead of as many small chunks of memory.

John.

