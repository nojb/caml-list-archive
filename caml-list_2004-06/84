Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id XAA24976; Mon, 7 Jun 2004 23:42:49 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id XAA24630 for <caml-list@pauillac.inria.fr>; Mon, 7 Jun 2004 23:42:48 +0200 (MET DST)
Received: from orange.csi.cam.ac.uk (orange.csi.cam.ac.uk [131.111.8.77])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i57LglSH005125
	for <caml-list@inria.fr>; Mon, 7 Jun 2004 23:42:48 +0200
Received: from jdh30 (helo=localhost)
	by orange.csi.cam.ac.uk with local-esmtp (Exim 4.12)
	id 1BXRtH-0004VD-00; Mon, 07 Jun 2004 22:42:47 +0100
Date: Mon, 7 Jun 2004 22:42:47 +0100 (BST)
From: Jon Harrop <jdh30@hermes.cam.ac.uk>
X-X-Sender: jdh30@orange.csi.cam.ac.uk
To: Richard Jones <rich@annexia.org>
cc: caml <caml-list@inria.fr>
Subject: Re: [Caml-list] 32 bit floats, SSE instructions
In-Reply-To: <20040607210053.GA10442@redhat.com>
Message-ID: <Pine.SOL.4.58.0406072237460.12680@orange.csi.cam.ac.uk>
References: <20040607.185308.48335962.Christophe.Troestler@umh.ac.be>
 <OOEALCJCKEBJBIJHCNJDGEEGHDAB.vanevery@indiegamedesign.com>
 <20040607210053.GA10442@redhat.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at concorde with ID 40C4E157.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 floats:01 ocamlopt:01 cmx:01 inlined:01 optimiser:01 cased:01 backend:01 ocaml:01 ocaml:01 assembler:01 assembler:01 routines:02 modules:02 arbitrary:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 7 Jun 2004, Richard Jones wrote:
> Is there not any work on allowing inline asm in OCaml?
>
> Since ocamlopt can inline code from modules, would it be possible to
> create a 'fake' .cmx/.o file which would actually contain direct
> assembler code to be inlined?

Can we not do more to integrate OCaml with BCPL? Just kidding...

Seriously though, would there be any value in, and would it be easy to,
make the OCaml backend, particularly the optimiser, pluggable to avoid the
copyright issues of reabsorbing code in the core OCaml distribution?
Then effort spent writing more mundane optimisers (from a research point
of view) could be done by third parties.

Personally, I'd like to see much more efficient handling of arbitrary
precision numbers and better optimisation of a handful of small routines
(which could be special cased) at the assembler level.

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

