Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA21647; Wed, 30 Jun 2004 15:41:26 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA21636 for <caml-list@pauillac.inria.fr>; Wed, 30 Jun 2004 15:41:25 +0200 (MET DST)
Received: from ptb-relay02.plus.net (ptb-relay02.plus.net [212.159.14.213])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i5UDfOSH019654
	for <caml-list@inria.fr>; Wed, 30 Jun 2004 15:41:25 +0200
Received: from [80.229.56.224] (helo=chetara)
	 by ptb-relay02.plus.net with esmtp (Exim) id 1BffL2-000A57-Me
	for caml-list@inria.fr; Wed, 30 Jun 2004 13:41:24 +0000
From: Jon Harrop <postmaster@jdh30.plus.com>
To: Ocaml <caml-list@inria.fr>
Subject: Re: [Caml-list] lazy vs function for values that are used once at most
Date: Wed, 30 Jun 2004 14:39:15 +0100
User-Agent: KMail/1.6.2
References: <d61254fb04063006314bd9ee5a@mail.gmail.com>
In-Reply-To: <d61254fb04063006314bd9ee5a@mail.gmail.com>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200406301439.15289.postmaster@jdh30.plus.com>
X-Miltered: at concorde with ID 40E2C304.002 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; postmaster:99 caml-list:01 passing:01 passing:01 slower:01 memoizing:01 closure:01 lazy:02 lazy:02 overhead:03 overhead:03 cheers:06 forcing:06 fun:08 function:09 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


> when one has a value v that is going to be either used 0 or 1 time, is
> there any difference in terms of overhead (ie for building the
> closure,  GC performance, etc) between passing around  (lazy v) and
> then forcing the value if needed, or passing around (fun () -> v) and
> evaluating f when needed?

IIRC, Lazy is slower because of the (wasted, in this case) overhead of 
memoizing the result.

Cheers,
Jon.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

