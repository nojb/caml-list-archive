Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id BAA15926; Sat, 19 Jun 2004 01:22:19 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id BAA15912 for <caml-list@pauillac.inria.fr>; Sat, 19 Jun 2004 01:22:18 +0200 (MET DST)
Received: from postfix4-2.free.fr (postfix4-2.free.fr [213.228.0.176])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i5INMHEV010849
	for <caml-list@inria.fr>; Sat, 19 Jun 2004 01:22:17 +0200
Received: from detritus.baronie.vez (lns-vlq-29-82-254-8-173.adsl.proxad.net [82.254.8.173])
	by postfix4-2.free.fr (Postfix) with SMTP id AE328193F39
	for <caml-list@inria.fr>; Sat, 19 Jun 2004 01:22:16 +0200 (CEST)
Date: Sat, 19 Jun 2004 02:26:48 +0200
From: Nicolas FRANCOIS (AKA El Bofo) <nicolas.francois@free.fr>
To: caml-list@inria.fr
Subject: Re: [Caml-list] Great Programming Language Shootout Revived
Message-Id: <20040619022648.7864665d.nicolas.francois@free.fr>
In-Reply-To: <06D9583C-C0FD-11D8-8AC7-000393863F70@exomi.com>
References: <Pine.LNX.4.44.0406171237270.4305-100000@localhost.localdomain>
	<06D9583C-C0FD-11D8-8AC7-000393863F70@exomi.com>
X-Mailer: Sylpheed version 0.9.10 (GTK+ 1.2.10; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Miltered: at nez-perce with ID 40D37929.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 shootout:01 2004:99 damned:01 ocaml's:01 mlton:01 ltu:99 mlton:01 scorecard:01 bug:01 totals:99 shootout:01 misleading:01 settling:99 faq:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Le Fri, 18 Jun 2004 10:56:38 +0300 Ville-Pertti Keinonen <will@exomi.com>
a =E9crit :

>=20
> On Jun 17, 2004, at 9:05 PM, Brian Hurt wrote:
>=20
> > board is pretty damned good- we're beating both Java and C++ across
> > the board, in fact the only other language that comes close to Ocaml's
> > performance is, unsurprisingly, version of SML- MLton and SML/NJ). =20
> > But if
>=20
> I looked at it a bit earlier (when it was posted on LtU), and MLton and=20
> SML/NJ were both ahead of OCaml in the overall scorecard for CPU. =20
> There was probably a bug in computing the totals, as the raw scores=20
> don't seem to have changed.

They are ahead of the bytecode, not the native code.
=20
> Anyhow, the shootout seems, like most benchmarks, to be misleading and=20
> arbitrary.  The language features compared are not really equivalent. =20
> E.g. C, C++ and Ada should be approximately the same in performance for=20
> code that doesn't compare their libraries or exception models.  Despite=20
> doing things like disabling array index checks, it seems some of the=20
> Ada benchmarks don't even use types equivalent to the C versions.

Read the disclaimers :

"Disclaimer No. 1: I'm just a beginner in many of these languages, so if
you can help me improve any of the solutions, please drop me an email.
Thanks.

Disclaimer No. 2: These pages are provided for novelty purposes only. Any
other use voids the manufacturer's warranty. Do not mix with alchohol.
Some contents may consist of recycled materials. Contents packaged by
weight. Some settling of volume may occur.

Disclaimer No. 3: ditto.

Disclaimer No. 4: Please read the pages on Methodology, the FAQ, and
Conclusions before you flame."

Don't misunderstand te purpose of the site : _compilers_ are compared, not
languages. The confusion comes from the fact that most languages have only
one (or several, but on different platforms) implementation. That's for
the interpretation of the results.

As for the benchmarks provided, they don't pretend to be the best, and I
think that if you know a better way to do something, just contact the
author, who will certainly be glad to correct and improve its tests.

It's just a tool, and CERTAINLY not an impartial judgement, or a way to
choose a language. It just shows facts, you use them the way you want.

> OCaml does have good performance characteristics - decent overall code=20
> generation, fast exceptions, fast memory allocation and a simple,=20
> lightweight standard library - but most of the benchmarks in the=20
> shootout are simply bogus for many of the languages.  They can be=20
> useful if you compare the performance of specific languages in specific=20
> benchmarks, as long as you look at the code as well to see what it is=20
> that's really being compared.

Again, it's not a promotion site for OCaml. So don't expect it to present
Caml better than any other language.

And don't be too sad : second place just after a huge work like gcc is not
so bad :-) And remember : on certain circumpstances, gcc is RIDICULOUS
compared to the native INTEL compiler (on running on I86 architectures, of
course). COnsidering all this, I would say Pierre, Xavier and the others'
work is OUTSTANDING !
=20
> A more interesting way to compare programming languages might be to see=20
> what programming techniques are possible (and efficient) in different=20
> languages and how well suited they are for different tasks.  As you've=20
> noted, no one language is good at everything.  One reason I like OCaml=20
> is that it makes a reasonable range of techniques efficient, and it=20
> doesn't have DSLish characteristics.

So why don't you start your own site, or BETTER : contribute to the work
allready started ?

\bye

--=20

Nicolas FRANCOIS
http://nicolas.francois.free.fr

We are the Micro$oft.
Resistance is futile.
You will be assimilated.

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

