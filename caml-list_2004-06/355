Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA03849; Thu, 24 Jun 2004 22:13:21 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA03597 for <caml-list@pauillac.inria.fr>; Thu, 24 Jun 2004 22:13:20 +0200 (MET DST)
Received: from shiva.jussieu.fr (shiva.jussieu.fr [134.157.0.129])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i5OKDJSH004655
	for <caml-list@inria.fr>; Thu, 24 Jun 2004 22:13:19 +0200
Received: from localhost (akasha.ijm.jussieu.fr [134.157.173.57])
          by shiva.jussieu.fr (8.12.11/jtpda-5.4) with ESMTP id i5OKD6IC051859
          ; Thu, 24 Jun 2004 22:13:06 +0200 (CEST)
X-Ids: 167
Date: Thu, 24 Jun 2004 22:13:05 +0200 (CEST)
Message-Id: <20040624.221305.41637106.andrieu@ijm.jussieu.fr>
To: wneumann@cs.unm.edu
Cc: jfh@cs.brown.edu, caml-list@inria.fr
Subject: Re: [Caml-list] Why must types be always defined at the top level?
From: Olivier Andrieu <andrieu@ijm.jussieu.fr>
In-Reply-To: <Pine.LNX.4.56.0406241354570.31614@hobbs.cs.unm.edu>
References: <20040624194603.2A91010EF06@clark.cs.brown.edu>
	<Pine.LNX.4.56.0406241354570.31614@hobbs.cs.unm.edu>
X-Mailer: Mew version 4.0.64 on Emacs 21.3 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 40DB35DF.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at shiva.jussieu.fr with ID 40DB35D2.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Antivirus: scanned by sophie at shiva.jussieu.fr
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 andrieu:01 andrieu:01 2004:99 val:01 annotating:01 annotating:01 annotate:01 val:01 bool:01 bool:01 ints:01 int:01 int:01 syntax:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

 William D. Neumann [Thu, 24 Jun 2004]:
 > On Thu, 24 Jun 2004, John Hughes wrote:
 > > 5. Why can I no longer type-annotate things I've written, so that
 > >
 > > let f x y z = (x = y) & (y = z)
 > >
 > > defines a function applicable to ALL types? I actually *liked*
 > > being able to say something like
 > >
 > > let f x y z:int = (x = y) && (y = z)
 > >
 > > so that it would be restricted to ints.
 > 
 > You can do this.  You just need to do:
 > # let f x y (z:int) = (x = y) & (y = z);;
 > val f : int -> int -> int -> bool = <fun>
 > 
 > What you have above is annotating f, not z.

Actually, it's annotating the return value of f (ie the right hand
side of the =). To annotate f, you have to use this syntax :

# let f x y z : bool = (x = y) & (y = z) ;;
val f : 'a -> 'a -> 'a -> bool = <fun>
# let f : int -> int -> int -> bool = fun x y z -> (x = y) & (y = z) ;;
val f : int -> int -> int -> bool = <fun>

-- 
   Olivier

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

