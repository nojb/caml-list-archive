Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA03968; Thu, 10 Jun 2004 17:21:10 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA03741 for <caml-list@pauillac.inria.fr>; Thu, 10 Jun 2004 17:21:08 +0200 (MET DST)
Received: from mta1.cl.cam.ac.uk (mta1.cl.cam.ac.uk [128.232.0.15])
	by nez-perce.inria.fr (8.12.10/8.12.10) with ESMTP id i5AFL7EV025534
	for <caml-list@inria.fr>; Thu, 10 Jun 2004 17:21:08 +0200
Received: from astrocyte.cl.cam.ac.uk
	([128.232.8.107] helo=cl.cam.ac.uk ident=[9TCiGwMO6sAOlLpDeES87O1xh1IYRLBf])
	by mta1.cl.cam.ac.uk with esmtp (Exim 3.092 #1)
	id 1BYRME-0002Qt-00; Thu, 10 Jun 2004 16:20:46 +0100
X-Mailer: exmh version 2.6.3-CL 04/04/2003 with nmh-1.0.4
X-Exmh-Isig-CompType: repl
X-Exmh-Isig-Folder: inbox
To: David Brown <caml-list@davidb.org>
cc: Nicolas Cannasse <warplayer@free.fr>,
        "Brandon J. Van Every" <vanevery@indiegamedesign.com>,
        caml <caml-list@inria.fr>
Subject: Re: [Caml-list] 32 bit floats, SSE instructions 
In-reply-to: Your message of "Thu, 10 Jun 2004 07:43:54 PDT."
             <20040610144354.GA11353@davidb.org> 
Mime-Version: 1.0
Content-Type: text/plain
Date: Thu, 10 Jun 2004 16:20:45 +0100
From: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Message-Id: <E1BYRME-0002Qt-00@mta1.cl.cam.ac.uk>
X-Miltered: at nez-perce with ID 40C87C63.003 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 floats:01 unboxing:01 optimising:01 strictness:01 unbox:01 annotate:01 haskell:01 unboxed:01 unboxed:01 compiler:01 distinguish:01 optimizer:02 optimizer:02 btw:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> BTW, GHC boxes almost everything, and leaves selective unboxing to the
> optimizer.

I'm not quite sure how you distinguish between "GHC" and "the 
optimizer" here.  GHC is an optimising compiler.

GHC has a pretty good strictness analysis, and anything it can prove is 
needed strictly it will try to unbox.  This generally means that lots 
of things are never boxed.

You can also annotate something (in Haskell) to say "this is strict" - 
this will usually cause it to be unboxed - and in GHC you can also say 
"this must be unboxed" - this will always cause it to be unboxed.

--KW 8-)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

