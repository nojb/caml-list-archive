Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA06396; Thu, 10 Jun 2004 17:57:55 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA06361 for <caml-list@pauillac.inria.fr>; Thu, 10 Jun 2004 17:57:53 +0200 (MET DST)
Received: from smtp3.adl2.internode.on.net (smtp3.adl2.internode.on.net [203.16.214.203])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i5AFvoSH021072
	for <caml-list@inria.fr>; Thu, 10 Jun 2004 17:57:51 +0200
Received: from [192.168.1.200] (ppp214-100.lns1.syd2.internode.on.net [203.122.214.100])
	by smtp3.adl2.internode.on.net (8.12.9/8.12.9) with ESMTP id i5AFvQHY003182;
	Fri, 11 Jun 2004 01:27:30 +0930 (CST)
Subject: Re: [Caml-list] 32 bit floats, SSE instructions
From: skaller <skaller@users.sourceforge.net>
Reply-To: skaller@users.sourceforge.net
To: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Cc: David Brown <caml-list@davidb.org>, Nicolas Cannasse <warplayer@free.fr>,
        "Brandon J. Van Every" <vanevery@indiegamedesign.com>,
        caml-list <caml-list@inria.fr>
In-Reply-To: <E1BYRME-0002Qt-00@mta1.cl.cam.ac.uk>
References: <E1BYRME-0002Qt-00@mta1.cl.cam.ac.uk>
Content-Type: text/plain
Message-Id: <1086883041.16811.1168.camel@pelican.wigram>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 11 Jun 2004 01:57:25 +1000
Content-Transfer-Encoding: 7bit
X-Miltered: at concorde with ID 40C884FE.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 floats:01 sourceforge:01 2004:99 annotate:01 haskell:01 unboxed:01 unboxed:01 9660:01 glebe:01 nsw:01 polymorphic:01 snail:02 checkout:02 2037:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 2004-06-11 at 01:20, Keith Wansbrough wrote:

> You can also annotate something (in Haskell) to say "this is strict" - 
> this will usually cause it to be unboxed - and in GHC you can also say 
> "this must be unboxed" - this will always cause it to be unboxed.

Does that work with polymorphic functions?
eg: cause the function to be specialised every call?

-- 
John Skaller, mailto:skaller@users.sf.net
voice: 061-2-9660-0850, 
snail: PO BOX 401 Glebe NSW 2037 Australia
Checkout the Felix programming language http://felix.sf.net



-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

