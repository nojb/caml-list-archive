Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA07997; Thu, 10 Jun 2004 18:23:42 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA07923 for <caml-list@pauillac.inria.fr>; Thu, 10 Jun 2004 18:23:41 +0200 (MET DST)
Received: from mta1.cl.cam.ac.uk (mta1.cl.cam.ac.uk [128.232.0.15])
	by concorde.inria.fr (8.12.10/8.12.10) with ESMTP id i5AGNeSH024139
	for <caml-list@inria.fr>; Thu, 10 Jun 2004 18:23:40 +0200
Received: from astrocyte.cl.cam.ac.uk
	([128.232.8.107] helo=cl.cam.ac.uk ident=[APLH73A+9bmSOZxxptC6y9sMnSdgOWD4])
	by mta1.cl.cam.ac.uk with esmtp (Exim 3.092 #1)
	id 1BYSL0-0003eE-00; Thu, 10 Jun 2004 17:23:34 +0100
X-Mailer: exmh version 2.6.3-CL 04/04/2003 with nmh-1.0.4
X-Exmh-Isig-CompType: repl
X-Exmh-Isig-Folder: inbox
To: skaller@users.sourceforge.net
cc: David Brown <caml-list@davidb.org>, Nicolas Cannasse <warplayer@free.fr>,
        "Brandon J. Van Every" <vanevery@indiegamedesign.com>,
        caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] 32 bit floats, SSE instructions 
In-reply-to: Your message of "11 Jun 2004 01:57:25 +1000."
             <1086883041.16811.1168.camel@pelican.wigram> 
Mime-Version: 1.0
Content-Type: text/plain
Date: Thu, 10 Jun 2004 17:23:33 +0100
From: Keith Wansbrough <Keith.Wansbrough@cl.cam.ac.uk>
Message-Id: <E1BYSL0-0003eE-00@mta1.cl.cam.ac.uk>
X-Miltered: at concorde with ID 40C88B0C.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 floats:01 2004:99 annotate:01 haskell:01 unboxed:01 unboxed:01 polymorphic:01 wrote:03 types:03 compilation:04 compilation:04 functions:05 fri:07 type:07 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> On Fri, 2004-06-11 at 01:20, Keith Wansbrough wrote:
> 
> > You can also annotate something (in Haskell) to say "this is strict" - 
> > this will usually cause it to be unboxed - and in GHC you can also say 
> > "this must be unboxed" - this will always cause it to be unboxed.
> 
> Does that work with polymorphic functions?
> eg: cause the function to be specialised every call?

No, but you can tell it to specialise a function to a particular type
(or any finite number of types), and it will automatically use the
specialised one if available.

(You can't automatically specialise in general if you're doing
separate compilation - well, you could, but it wouldn't really be
separate compilation, it would be more like using the function as a
macro).

--KW 8-)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

