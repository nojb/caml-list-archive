Return-Path: <SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id AF4B9E0072
	for <caml-list@sympa.inria.fr>; Tue,  2 Nov 2021 09:50:38 +0100 (CET)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=Pass smtp.pra=alan.schmitt@polytechnique.org; spf=Pass smtp.mailfrom=SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org; spf=Pass smtp.helo=postmaster@mx1.polytechnique.org
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  alan.schmitt@polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=pra; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="alan.schmitt@polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org
  designates 129.104.30.34 as permitted sender)
  identity=mailfrom; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-conformance=sidf_compatible; x-record-type="spf2.0"
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  postmaster@mx1.polytechnique.org designates 129.104.30.34 as
  permitted sender) identity=helo; client-ip=129.104.30.34;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="SRS0=35Um=PV=polytechnique.org=alan.schmitt@bounces.m4x.org";
  x-sender="postmaster@mx1.polytechnique.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
IronPort-PHdr: =?us-ascii?q?A9a23=3A1kw6ahdUtUgXe6T/WSKAqco+lGM+q9jLVj580XL?=
 =?us-ascii?q?Ho4xHfqnrxZn+JkuXvawr0AWRG9SCoK8bw8Pt8InYEVQa5piAtH1QOLdtbDQiz?=
 =?us-ascii?q?fssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB?=
 =?us-ascii?q?1JuPoEYLOksi7ze+/94PPbwlSgDexfLx+IRW0oA7MqsQYnIxuJ7orxBDUuHVIY?=
 =?us-ascii?q?eNWxW1pJVKXgRnx49q78YBg/SpNpf8v7tZMXqrmcas2S7xYFykmPHsu5ML3rxn?=
 =?us-ascii?q?DTBCA6WUaX24LjxdHGQnF7BX9Xpfsriv3s/d21SeGMcHqS70/RDSu4aRtSB/2i?=
 =?us-ascii?q?ScHLD85/3rTisNukalarhWhpwZizI7PfYqZMPRzcr/Ycd4cWGFPXNteVzZZD42?=
 =?us-ascii?q?8cYUBEuQPM+VXoIbhvFYBtweyCBO2Ce/z1jNFhHn71rA63eQ7FgHG2RQtEs4Ks?=
 =?us-ascii?q?HvOqtX+KbocXvy1zKnNzDXDc+9W0ir65YfSdhAuu/eMUahrccXNyUkvEgLFjkm?=
 =?us-ascii?q?MqYH+JzOV0eANsmiH7+V+Se2vi2gnqwBoojiy2MggkI7Jhpgayl3d8yhy3Yk6K?=
 =?us-ascii?q?8GiRkFhfd6kDIVftzucN4ZuQs0sTW9mtTokxrAGpZO2fCgExIg7yhPdaPGKc4i?=
 =?us-ascii?q?G7wztWeqMPDp1hHJodayxihiy80WtzuPyW8uo3FpXqidInd/BvW0D2RzU78iIU?=
 =?us-ascii?q?Pp9/kG51DaXyQ/T9uBEIVwqmqrDLJ4hx7swmYQJvUTFACD2hF36jKiKeUo+/+i?=
 =?us-ascii?q?o7/7rYrL8pp+TL4N0iwf+Mr4vmsOlG+g4PBIOU3Cb+OS7yb3j4VD5TK9RgfIoi?=
 =?us-ascii?q?qXYvpfaJcAVpq6jGQBV15wv5Aq4DzejyNgYgGIHLEhLeBKGi4jmJUrOLOrkAve?=
 =?us-ascii?q?4hlSgiDhrx/HaPr3hH5XCNWLPn6vmfbZ480JczxIzws5Z55JPFr4OOu/8VlX2t?=
 =?us-ascii?q?NzCAR81Kw60zPzhCNpjzYMeRXiPDbGHP6POq1OH+uUvI+yUaI8SpDnyMf0l5/r?=
 =?us-ascii?q?2jX8jnl8RZ7Wm3ZwSaHygAvRpOV+ZYXvxjdgfCmcGpBYxTOvviFGaUD5cenazX?=
 =?us-ascii?q?6Y45j0hD4KmF4jDS4awi7KCxCe2BoBaan5CB1yWDHvka4qJV+0CZS6OOMNsnDM?=
 =?us-ascii?q?JWaC8R4IvyB2irhH2xrpoI+bO5yEUqYjv2MV36uHPkxw56CZ6AN6H026XSmF5h?=
 =?us-ascii?q?mMISCEy3KB4uUF9z1iC3bVij/xAEtxT4/NIUhskOpHAz+x6DdHyWhvcftiXUlq?=
 =?us-ascii?q?mRc+mAT4pQtIwxd8BfVp9Fs2/ghzd2yemGaIZm6CECZAu/K/Qw2L9Kshyxnre0?=
 =?us-ascii?q?akulVgmQs9BNW28ga5/8hDeCZPVnUuEi6qnbaoR0S7D+2eG1WeApk5XXRZoUaX?=
 =?us-ascii?q?CWXAeZlfWosrl6UPCSb+uCK0nMhZfxsKYLatKcNLpgE1cS/fnItveZXi9m3ysC?=
 =?us-ascii?q?haIw7OMbZbqe3kG0SrGD0gEjgYT8mqYOgglHCuhpm3TDTN0GVLoeUPs/vFyqGm?=
 =?us-ascii?q?nQU8s0wGKc0ph2qKp9REPgPycT+of3rYFuCc6tzV5B0293tLTC9qYvQVtZqRcY?=
 =?us-ascii?q?dUn4FdGz23VrQJ9PobzZ5xl0xQabAI99xfqyBNfDppG184nsCVuhEB5NqTSmBs?=
 =?us-ascii?q?VfCye9ZTxIaHMbGj+7RSrLanM1QeamN2f/6NK7PUjt33iuhuoHwws6SZJyd5Qh?=
 =?us-ascii?q?lKY75OCNwESVJPtTg5j/hxzoffBaSk45p/I/WVrNbiovzTC3dMwGeZjzQyvKYQ?=
 =?us-ascii?q?MeJiYHRP/RpVJT/OlL/YnzgPxBvrhFPhV8L8oMsimcfqfxaPtO/xvzmvOZYVv5?=
 =?us-ascii?q?ZAklFqL8ztgR+XI2Zcc3vze2RGIBW6UZLiJuMfqn4tJfncXQnr5zjLrVtc5Ww?=
 =?us-ascii?q?=3D=3D?=
IronPort-HdrOrdr: =?us-ascii?q?A9a23=3A6mKBda9hcPC8v8xfu6luk+ALI+orL9Y04lQ7?=
 =?us-ascii?q?vn2ZKCYlCPBw8vrEoB1173HJYVoqNU3I2urwXZVoOEm8yXct2+ks1NSZLWvbUQ?=
 =?us-ascii?q?mTXflfBOLZqlWLJ8SZzJ8l6U4KScdD4bPLYWSSwvyKhDVRsr0bsaK6GQ2T9IDj?=
 =?us-ascii?q?5mYoZztDL4tn6x59Cg6dGEEzfg9bHpA0faDshfav4wDQH0gqUg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DmAAASaxphlyIeaIFahAWBGgFkVzoxh?=
 =?us-ascii?q?EeJBIZFgiSDKIV1hleMC4FzAQMBDSoBDgUBAgQBAYRhAoJrAh4GAQUzEwECBBU?=
 =?us-ascii?q?BAQUBAQECAQMDBAETAQEBAQEBAQEJGwZehWgNgjUMGYNtAwEhCkABAiIjAxQHA?=
 =?us-ascii?q?wIRARcBFAoXARIUBgGCVgGDBwUKi2KcCoExgQGDTQEDAgELBQ8vhBWBYw0CFIE?=
 =?us-ascii?q?XhXBTSIJuCINwAicQgVVEgRWCdW6CQAsMCwEBAQEBgRQLCQERAgEIIS2CYYJkB?=
 =?us-ascii?q?IMhAiQOPi4tPCIBAVAIAQI1PRsECA8uARYvA5FBAQMollOTV2stB4MrgTEGC4d?=
 =?us-ascii?q?mgRWMRYd7g2WBSJBfkGkhlXCIdYELCYI1h3GLUhQEBIUogU0qgQ0/HgwHMxowQ?=
 =?us-ascii?q?4I1AQEyCWAOjXgBMxaCMoEegT6DGzuFS0AyAgEBNAIGAQoBAQMJgQgBAQUTCwG?=
 =?us-ascii?q?GACyBQFsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0DmAAASaxphlyIeaIFahAWBGgFkVzoxhEeJBIZFgiSDKIV?=
 =?us-ascii?q?1hleMC4FzAQMBDSoBDgUBAgQBAYRhAoJrAh4GAQUzEwECBBUBAQUBAQECAQMDB?=
 =?us-ascii?q?AETAQEBAQEBAQEJGwZehWgNgjUMGYNtAwEhCkABAiIjAxQHAwIRARcBFAoXARI?=
 =?us-ascii?q?UBgGCVgGDBwUKi2KcCoExgQGDTQEDAgELBQ8vhBWBYw0CFIEXhXBTSIJuCINwA?=
 =?us-ascii?q?icQgVVEgRWCdW6CQAsMCwEBAQEBgRQLCQERAgEIIS2CYYJkBIMhAiQOPi4tPCI?=
 =?us-ascii?q?BAVAIAQI1PRsECA8uARYvA5FBAQMollOTV2stB4MrgTEGC4dmgRWMRYd7g2WBS?=
 =?us-ascii?q?JBfkGkhlXCIdYELCYI1h3GLUhQEBIUogU0qgQ0/HgwHMxowQ4I1AQEyCWAOjXg?=
 =?us-ascii?q?BMxaCMoEegT6DGzuFS0AyAgEBNAIGAQoBAQMJgQgBAQUTCwGGACyBQFsBAQ?=
X-IronPort-AV: E=Sophos;i="5.84,326,1620684000"; 
   d="scan'208,217";a="397984850"
X-MGA-submission: =?us-ascii?q?MDFJF2g/Xxz+zRcD5OxZy9B31XLAAUQfZhGUZw?=
 =?us-ascii?q?EFK/2JgiMkPNBxaZyy8MYfPF1JPE9Iaixemlz8qvm5nSRXATLOH5EsT0?=
 =?us-ascii?q?kO4cJqK/8PZ6gXWprgLgxdEv3W6Yhpgca15Tz8ixp5GHZjqxF6eUU+A3?=
 =?us-ascii?q?fZUg52u+1qKLBMoav1WUzekA=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Nov 2021 09:50:37 +0100
Received: from set (set.irisa.fr [131.254.10.170])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id 7D03B5647C2;
	Tue,  2 Nov 2021 09:50:35 +0100 (CET)
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, "cwn"  <cwn@lists.idyll.org>, caml-list@inria.fr
Date: Tue, 02 Nov 2021 09:50:21 +0100
Message-ID: <87sfwfaqlu.fsf@m4x.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Nov  2 09:50:36 2021 +0100 (CET))
X-Spam-Flag: No, tests=bogofilter, spamicity=0.300195, queueID=050435647C5
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of October 26 to
November 02, 2021.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Lists.ocaml.org: service temporarily sunsetted
Talk at Func Prog Sweden
First OPAM releases of Scad_ml and [@@deriving scad]
Other OCaml News
Old CWN


Lists.ocaml.org: service temporarily sunsetted
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/lists-ocaml-org-service-temporarily-sunsette=
d/8692/1>


Anil Madhavapeddy announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  *This note does not concern the main OCaml email list, which continues
  to be available through <https://sympa.inria.fr/sympa/arc/caml-list/>*

  The lists.ocaml.org e-mail service has been going through a rough time
  in the past few years, with vast swathes of spam regularly hitting our
  ingress email server and require manual unblocking every time.  It was
  set up [back in 2012] as an augmentation of the main OCaml mailing
  list and really helped with some big projects in the early days (the
  design of and migration to ppx from camlp4, for example).  However, in
  the intervening years e-mail has reduced in importance as a primary
  community communication mechanism (as evidenced, for example, in this
  forum).

  With the latest spam surge, I've moved the service into read-only mode
  with all the mailboxes and archives still available on the website,
  but with mail delivery and list creation/admin disabled. All existing
  links should continue to work to historical links online without
  change.  The only mailing list on there that was still active to my
  knowledge is the opam-commits cron list, which will be replaced by an
  ocurrent-based deployer for that website shortly.

  I hope to bring e-mail back to ocaml.org sometime in 2022, as it's an
  important communications medium that is highly accessible. One
  challenge is spam, and another is the inflexibility of GNU Mailman and
  its upgrade mechanism (essentially a manual process from 2 to
  3). Therefore, if there is anyone in the community interested in
  building a simple e-mail list manager in OCaml, that would be of
  interest :slight_smile:


[back in 2012]
<https://sympa.inria.fr/sympa/arc/caml-list/2012-12/msg00015.html>


Talk at Func Prog Sweden
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/talk-at-func-prog-sweden/8703/1>


Leonardo Laguna Ruiz announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here's a link for the talk I gave at the Func Prog Sweden meetup. In
  that talk I show the process we follow some years ago in order to move
  all our code base to OCaml and why it was an excellent decision.

  <https://youtu.be/FGXiAARXE2M>

  [Wolfram System Modeler] is a simulation environment that can be used
  to model multi-domain systems. For example systems composed of
  electrical, thermal, hydraulic, mechanical, etc, components.

  One of the main parts of System Modeler is the model compiler (Kernel)
  which takes models written in the Modelica language and compiles them
  into efficient simulation executables. This compiler was ported to
  OCaml by using custom tool that performed the code to code translation
  of our old code base.

  Slides
  <https://a2076202-c90b-450e-901b-cb56c346913c.usrfiles.com/ugd/a20762_adf=
a899586c7413a8c17f7b708dbc177.pdf>


[Wolfram System Modeler] <https://www.wolfram.com/system-modeler/>


First OPAM releases of Scad_ml and [@@deriving scad]
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-first-opam-releases-of-scad-ml-and-deriv=
ing-scad/8718/1>


geoffder announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  I'd like to announce the first release onto opam of [Scad_ml] and
  [ppx_deriving_scad]. The former being a DSL front-end to the
  [OpenSCAD] solid modelling language, and the latter providing
  transformation function generation for custom types (a pattern that I
  have found useful during my time using `Scad_ml'.

  When I decided I wanted to pick up OpenScad, I was pleasantly
  surprised to discover that the `Scad_ml' library already existed on
  GitHub, credits to <https://github.com/namachan10777>. Over time I
  filled out the rest of the OpenSCAD language coverage, as well as some
  additional helpful math, and reorganized things to try and keep it
  from getting too messy as more and more was tacked on. Finally, after
  some help in the ocaml discord (from NULL and octachron), we also now
  can track whether shapes are 2D or 3D with minimal changes to the user
  interface, preventing misapplications of operations that would
  otherwise only appear in the OpenSCAD console.

  The `[@@deriving scad]' ppx is my solution to make a habit I developed
  to get around the otherwise fully declarative nature of working in
  OpenSCAD more ergonomic. Shapes in OpenSCAD cannot be queried in any
  way, so upon creation, the locations of it's vertices or it's origin
  are not available. Of course, since you created it, you know exactly
  it's dimensions, and where you have moved it, but what if you want to
  use the location of one of it's vertices, wherever that ends up after
  a series of transformations? What I did for some time before learning
  how to write a ppx, was put the coordinates I cared about into a
  record with the shape, and mapped over the type (by hand (and regex))
  with the relevant functions (typically transform and rotate). Turns
  out writing a ppx with `Ppxlib' and `metaquot' isn't so bad, and I
  really wish I did it sooner!

  Anyway, to the few of you out there that might use OpenSCAD, I hope
  that these tools might come in handy!


[Scad_ml] <https://github.com/namachan10777/scad-ml>

[ppx_deriving_scad] <https://github.com/geoffder/ppx_deriving_scad>

[OpenSCAD] <https://openscad.org/>


Other OCaml News
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

>From the ocamlcore planet blog
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here are links from many OCaml blogs aggregated at [OCaml Planet].

  =E2=80=A2 [Hiring a Developer Educator]
  =E2=80=A2 [Verification for Dummies: SMT and Induction]
  =E2=80=A2 [SCoP Passed Phase 1 of the DAPSI Initiative!]


[OCaml Planet] <http://ocaml.org/community/planet/>

[Hiring a Developer Educator]
<https://blog.janestreet.com/hiring-a-developer-educator/>

[Verification for Dummies: SMT and Induction]
<https://www.ocamlpro.com/2021/10/14/verification-for-dummies-smt-and-induc=
tion/>

[SCoP Passed Phase 1 of the DAPSI Initiative!]
<https://tarides.com/blog/2021-10-14-scop-selected-for-dapsi-phase2>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[online] <http://lists.idyll.org/listinfo/caml-news-weekly/>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html
Content-Disposition: inline

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2021-11-02 Tue 09:43 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>OCaml Weekly News</title>
<meta name="generator" content="Org mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
<style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id="content">
<h1 class="title">OCaml Weekly News</h1>
<p>
<a href="https://alan.petitepomme.net/cwn/2021.10.26.html">Previous Week</a> <a href="https://alan.petitepomme.net/cwn/index.html">Up</a> <a href="https://alan.petitepomme.net/cwn/2021.11.09.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of October 26 to November 02, 2021.
</p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#1">Lists.ocaml.org: service temporarily sunsetted</a></li>
<li><a href="#2">Talk at Func Prog Sweden</a></li>
<li><a href="#3">First OPAM releases of Scad_ml and [@@deriving scad]</a></li>
<li><a href="#4">Other OCaml News</a></li>
<li><a href="#org45c5848">Old CWN</a></li>
</ul>
</div>
</div>


<div id="outline-container-1" class="outline-2">
<h2 id="1">Lists.ocaml.org: service temporarily sunsetted</h2>
<div class="outline-text-2" id="text-1">
<p>
Archive: <a href="https://discuss.ocaml.org/t/lists-ocaml-org-service-temporarily-sunsetted/8692/1">https://discuss.ocaml.org/t/lists-ocaml-org-service-temporarily-sunsetted/8692/1</a>
</p>
</div>

<div id="outline-container-org47f42f0" class="outline-3">
<h3 id="org47f42f0">Anil Madhavapeddy announced</h3>
<div class="outline-text-3" id="text-org47f42f0">
<p>
<b>This note does not concern the main OCaml email list, which continues to be available through
<a href="https://sympa.inria.fr/sympa/arc/caml-list/">https://sympa.inria.fr/sympa/arc/caml-list/</a></b>
</p>

<p>
The lists.ocaml.org e-mail service has been going through a rough time in the past few years, with vast swathes of
spam regularly hitting our ingress email server and require manual unblocking every time.  It was set up <a href="https://sympa.inria.fr/sympa/arc/caml-list/2012-12/msg00015.html">back in
2012</a> as an augmentation of the main OCaml mailing
list and really helped with some big projects in the early days (the design of and migration to ppx from camlp4, for
example).  However, in the intervening years e-mail has reduced in importance as a primary community communication
mechanism (as evidenced, for example, in this forum).
</p>

<p>
With the latest spam surge, I've moved the service into read-only mode with all the mailboxes and archives still
available on the website, but with mail delivery and list creation/admin disabled. All existing links should continue
to work to historical links online without change.  The only mailing list on there that was still active to my
knowledge is the opam-commits cron list, which will be replaced by an ocurrent-based deployer for that website
shortly.
</p>

<p>
I hope to bring e-mail back to ocaml.org sometime in 2022, as it's an important communications medium that is highly
accessible. One challenge is spam, and another is the inflexibility of GNU Mailman and its upgrade mechanism
(essentially a manual process from 2 to 3). Therefore, if there is anyone in the community interested in building a
simple e-mail list manager in OCaml, that would be of interest :slight_smile:
</p>
</div>
</div>
</div>




<div id="outline-container-2" class="outline-2">
<h2 id="2">Talk at Func Prog Sweden</h2>
<div class="outline-text-2" id="text-2">
<p>
Archive: <a href="https://discuss.ocaml.org/t/talk-at-func-prog-sweden/8703/1">https://discuss.ocaml.org/t/talk-at-func-prog-sweden/8703/1</a>
</p>
</div>

<div id="outline-container-orgca29c26" class="outline-3">
<h3 id="orgca29c26">Leonardo Laguna Ruiz announced</h3>
<div class="outline-text-3" id="text-orgca29c26">
<p>
Here's a link for the talk I gave at the Func Prog Sweden meetup. In that talk I show the process we follow some years ago in order to move all our code base to OCaml and why it was an excellent decision.
</p>

<p>
<a href="https://youtu.be/FGXiAARXE2M">https://youtu.be/FGXiAARXE2M</a>
</p>

<p>
<a href="https://www.wolfram.com/system-modeler/">Wolfram System Modeler</a> is a simulation environment that can be used to model multi-domain systems. For example systems composed of electrical, thermal, hydraulic, mechanical, etc, components.
</p>

<p>
One of the main parts of System Modeler is the model compiler (Kernel) which takes models written in the Modelica language and compiles them into efficient simulation executables. This compiler was ported to OCaml by using custom tool that performed the code to code translation of our old code base.
</p>

<p>
Slides <a href="https://a2076202-c90b-450e-901b-cb56c346913c.usrfiles.com/ugd/a20762_adfa899586c7413a8c17f7b708dbc177.pdf">https://a2076202-c90b-450e-901b-cb56c346913c.usrfiles.com/ugd/a20762_adfa899586c7413a8c17f7b708dbc177.pdf</a>
</p>
</div>
</div>
</div>




<div id="outline-container-3" class="outline-2">
<h2 id="3">First OPAM releases of Scad_ml and [@@deriving scad]</h2>
<div class="outline-text-2" id="text-3">
<p>
Archive: <a href="https://discuss.ocaml.org/t/ann-first-opam-releases-of-scad-ml-and-deriving-scad/8718/1">https://discuss.ocaml.org/t/ann-first-opam-releases-of-scad-ml-and-deriving-scad/8718/1</a>
</p>
</div>

<div id="outline-container-org8208355" class="outline-3">
<h3 id="org8208355">geoffder announced</h3>
<div class="outline-text-3" id="text-org8208355">
<p>
I'd like to announce the first release onto opam of <a href="https://github.com/namachan10777/scad-ml">Scad_ml</a> and
<a href="https://github.com/geoffder/ppx_deriving_scad">ppx_deriving_scad</a>. The former being a DSL front-end to the
<a href="https://openscad.org/">OpenSCAD</a> solid modelling language, and the latter providing transformation function
generation for custom types (a pattern that I have found useful during my time using <code>Scad_ml</code>.
</p>

<p>
When I decided I wanted to pick up OpenScad, I was pleasantly surprised to discover that the <code>Scad_ml</code> library
already existed on GitHub, credits to <a href="https://github.com/namachan10777">https://github.com/namachan10777</a>. Over time I filled out the rest of the
OpenSCAD language coverage, as well as some additional helpful math, and reorganized things to try and keep it from
getting too messy as more and more was tacked on. Finally, after some help in the ocaml discord (from NULL and
octachron), we also now can track whether shapes are 2D or 3D with minimal changes to the user interface, preventing
misapplications of operations that would otherwise only appear in the OpenSCAD console.
</p>

<p>
The <code>[@@deriving scad]</code> ppx is my solution to make a habit I developed to get around the otherwise fully declarative
nature of working in OpenSCAD more ergonomic. Shapes in OpenSCAD cannot be queried in any way, so upon creation, the
locations of it's vertices or it's origin are not available. Of course, since you created it, you know exactly it's
dimensions, and where you have moved it, but what if you want to use the location of one of it's vertices, wherever
that ends up after a series of transformations? What I did for some time before learning how to write a ppx, was put
the coordinates I cared about into a record with the shape, and mapped over the type (by hand (and regex)) with the
relevant functions (typically transform and rotate). Turns out writing a ppx with <code>Ppxlib</code> and <code>metaquot</code> isn't so
bad, and I really wish I did it sooner!
</p>

<p>
Anyway, to the few of you out there that might use OpenSCAD, I hope that these tools might come in handy!
</p>
</div>
</div>
</div>




<div id="outline-container-4" class="outline-2">
<h2 id="4">Other OCaml News</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org7ed6cba" class="outline-3">
<h3 id="org7ed6cba">From the ocamlcore planet blog</h3>
<div class="outline-text-3" id="text-org7ed6cba">
<p>
Here are links from many OCaml blogs aggregated at <a href="http://ocaml.org/community/planet/">OCaml Planet</a>.
</p>

<ul class="org-ul">
<li><a href="https://blog.janestreet.com/hiring-a-developer-educator/">Hiring a Developer Educator</a></li>
<li><a href="https://www.ocamlpro.com/2021/10/14/verification-for-dummies-smt-and-induction/">Verification for Dummies: SMT and Induction</a></li>
<li><a href="https://tarides.com/blog/2021-10-14-scop-selected-for-dapsi-phase2">SCoP Passed Phase 1 of the DAPSI Initiative!</a></li>
</ul>
</div>
</div>
</div>




<div id="outline-container-org45c5848" class="outline-2">
<h2 id="org45c5848">Old CWN</h2>
<div class="outline-text-2" id="text-org45c5848">
<p>
If you happen to miss a CWN, you can <a href="mailto:alan.schmitt@polytechnique.org">send me a message</a> and I'll mail it to you, or go take a look at <a href="https://alan.petitepomme.net/cwn/">the archive</a> or the <a href="https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archives</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe <a href="http://lists.idyll.org/listinfo/caml-news-weekly/">online</a>.
</p>

<div class="authorname" id="orgd6c0c1f">
<p>
<a href="https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

