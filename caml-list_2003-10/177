Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id NAA20996; Wed, 15 Oct 2003 13:40:34 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id NAA29700 for <caml-list@pauillac.inria.fr>; Wed, 15 Oct 2003 13:40:32 +0200 (MET DST)
Received: from mail1.tpgi.com.au (mail.tpgi.com.au [203.12.160.57])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h9FBeU104457
	for <caml-list@inria.fr>; Wed, 15 Oct 2003 13:40:31 +0200 (MET DST)
Received: from 203-213-85-158-syd-ts17-2600.tpgi.com.au (203-213-85-158-syd-ts17-2600.tpgi.com.au [203.213.85.158])
	by mail1.tpgi.com.au (8.11.6/8.11.6) with ESMTP id h9FBeJi08354;
	Wed, 15 Oct 2003 21:40:19 +1000
Subject: Re: [Caml-list] Is arrow programming impossible in ocaml?
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
Cc: nick.name@inwind.it, caml-list@inria.fr
In-Reply-To: <20031015112001U.garrigue@kurims.kyoto-u.ac.jp>
References: <200310141326.22497.nick.name@inwind.it>
	 <20031015092206F.garrigue@kurims.kyoto-u.ac.jp>
	 <200310150353.46072.nick.name@inwind.it>
	 <20031015112001U.garrigue@kurims.kyoto-u.ac.jp>
Content-Type: text/plain
Message-Id: <1066217999.20793.12.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 15 Oct 2003 21:39:59 +1000
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 jacques:01 abstraction:01 val:01 cleanliness:01 camlp:01 ocaml:01 garrigue:01 polymorphic:01 polymorphic:01 float:02 wrote:03 arrow:95 let:04 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2003-10-15 at 12:20, Jacques Garrigue wrote:
> From: Nick Name <nick.name@inwind.it>

> By the way, if you are ready to break abstraction (which in your case
> doesn't seem essential), you can build a t with the right polymorphic
> type:
>   # let t = T(fun s -> let T a = time >>> time in a s);;
>   val t : ('a, float) Var.Time.t = ...
> Not very clean, but you can replace time >>> time by any polymorphic
> expression.

The cleanliness can be had with camlp4 surely?


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

