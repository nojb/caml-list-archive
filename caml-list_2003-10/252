Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA02814; Wed, 22 Oct 2003 15:21:30 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA18847 for <caml-list@pauillac.inria.fr>; Wed, 22 Oct 2003 15:21:28 +0200 (MET DST)
Received: from mail.speakeasy.net (mail10.speakeasy.net [216.254.0.210])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h9MDLR122811
	for <caml-list@inria.fr>; Wed, 22 Oct 2003 15:21:27 +0200 (MET DST)
Received: (qmail 1957 invoked from network); 22 Oct 2003 13:21:25 -0000
Received: from unknown (HELO grace.speakeasy.net) ([216.254.0.22])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail10.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <garrigue@kurims.kyoto-u.ac.jp>; 22 Oct 2003 13:21:25 -0000
Date: Wed, 22 Oct 2003 06:21:21 -0700 (PDT)
From: brogoff@speakeasy.net
To: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
cc: "rich@annexia.org" <rich@annexia.org>,
        "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] OCaml wishlist
In-Reply-To: <20031022101438T.garrigue@kurims.kyoto-u.ac.jp>
Message-ID: <Pine.LNX.4.44.0310220601180.3672-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; brogoff:01 caml-list:01 wishlist:01 jacques:01 blend:99 dylan:01 ocaml:01 ocaml:01 speakeasy:01 clos:01 garrigue:01 town:98 variant:02 objects:02 address:96 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 22 Oct 2003, Jacques Garrigue wrote:
> Overall, I would not characterize ocaml objects as weak, but rather
> nonintuitive.

I agree. They're actually rather powerful. OCaml has multiple inheritance,
whereas Java doesn't.

Unfortunately, they are also nonintuitive, complex, and don't really blend well
with the rest of the language, IMO. I'm thinking of pattern matching here. I
realize that the class system did evolve from an earleir approach based on
records, so it has been thought of before, and there are many issues to
consider...

Still, I hope some future ML variant will address these issues, either by
dispensing with the class system and providing alternative solutions, or maybe
by providing another OO approach (like CLOS/Dylan style) altogether. For now,
OCaml is the only game in town for the working programmer.

-- Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

