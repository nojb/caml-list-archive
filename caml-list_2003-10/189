Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA32118; Thu, 16 Oct 2003 03:13:45 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA10169; Thu, 16 Oct 2003 03:13:43 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h9G1Df114715;
	Thu, 16 Oct 2003 03:13:41 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2-20030924/3.7W) with ESMTP id KAA12895;
	Thu, 16 Oct 2003 10:13:33 +0900 (JST)
To: vanicat@labri.u-bordeaux.fr
Cc: caml-list@inria.fr, caml-bugs@inria.fr
Subject: Re: [Caml-list] NaN-safe min and max
In-Reply-To: <87u16a77rr.dlv@wanadoo.fr>
References: <18220.141.155.88.179.1066229526.squirrel@minsky-primus.homeip.net>
	<87u16a77rr.dlv@wanadoo.fr>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20031016101338I.garrigue@kurims.kyoto-u.ac.jp>
Date: Thu, 16 Oct 2003 10:13:38 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 42
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 jacques:01 val:01 0.0:01 val:01 abstr:01 abstr:01 0.0:01 jacques:01 arrays:01 compiler:01 compiler:01 bool:01 bool:01 unsafe:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Remi Vanicat <vanicat@labri.u-bordeaux.fr>

> this one is unsafe : the fact that a is a block with a tag
> Obj.double_tag doesn't proof that the same is true for b even if a and
> b have the same type :
> 
> # let i1 = Lazy.lazy_from_val 0.0;;
> val i1 : float Lazy.t = lazy 0.
> # let o1 = Obj.repr i1;;
> val o1 : Obj.t = <abstr>
> # Obj.is_block o1;;
> - : bool = true
> # Obj.tag o1 = Obj.double_tag;;
> - : bool = true
> # let i2 = lazy 3;;
> val i2 : int lazy_t = <lazy>
> # let o2 = Obj.repr i2;;
> val o2 : Obj.t = <abstr>
> # Obj.is_block o2;;
> - : bool = true
> #  Obj.tag o2 = Obj.double_tag;;
> - : bool = false
> 
> both i1 and i2 have the same type, but only the first one is a block of
> tag Obj.double_tag. A verification have to be done for both argument.

Very interesting: you have found an unsoundness in the ocaml compiler.
Using your example combined with arrays we obtain:

# let arr = [|Lazy.lazy_from_val 0.0; lazy 1.0|];;
val arr : float Lazy.t array = [|lazy 0.; lazy 4.32681603021051e-311|]

i.e., the second lazy is assumed to be a float value, and results in a
wrong result (clearly 1.0 is not anything close to 4.32e-311)

So my take on this is that the code suggested for min is correct, this
is the compiler which is wrong: two values with the same type _must_
have the same representation.

A new headache for implementers...

   Jacques Garrigue

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

