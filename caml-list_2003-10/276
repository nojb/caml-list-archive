Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA09934; Fri, 24 Oct 2003 14:25:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA11862 for <caml-list@pauillac.inria.fr>; Fri, 24 Oct 2003 14:25:10 +0200 (MET DST)
Received: from mail.science.uva.nl (mail.science.uva.nl [146.50.4.51])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h9OCPA115146
	for <caml-list@pauillac.inria.fr>; Fri, 24 Oct 2003 14:25:10 +0200 (MET DST)
Received: from vegas.science.uva.nl [146.50.1.150]
          by mail.science.uva.nl with ESMTP (sendmail 8.11.6p2/config 11.34).
          id h9OCP7E21120; Fri, 24 Oct 2003 14:25:07 +0200 (MEST)
Received: from localhost
          by vegas.science.uva.nl (sendmail 8.11.6/config 11.34).
          id h9OCP7p13221; Fri, 24 Oct 2003 14:25:07 +0200
X-Organisation: Faculty of Science, University of Amsterdam, The Netherlands
X-URL: http://www.science.uva.nl/
From: Andrew Bagdanov <andrew@science.uva.nl>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <16281.6691.677366.101886@vegas.science.uva.nl>
Date: Fri, 24 Oct 2003 14:25:07 +0200
To: caml-list@pauillac.inria.fr
Subject: [Caml-list] Type abstraction question
X-Mailer: VM 7.07 under Emacs 21.1.1
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; uva:99 abstraction:01 abstraction:01 val:01 val:01 functors:01 functor:01 functor:01 struct:01 struct:01 passing:01 constants:01 bin:01 bin:01 sig:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello all,

I'm having a bit of difficulty getting the sort of type abstraction
I want.

I have the following sort of module:

 module type Alg =
   sig
     type t
     type bin_t = t -> t -> t
     val add : bin_t
     val sub : bin_t
   end

which just encapsulates a domain and a few operations that can be
performed over values.  What I want to do is expose the type "t" but
_not_ "bin_t" to the world.  The specific reason I want this is so
that people can only apply functors like the following:

 module PairLifter :
   functor ( A : Alg ) ->
     functor ( Op : sig val op : A.bin_t end ) ->
   sig
     val op : (A.t * A.t) -> (A.t * A.t) -> (A.t * A.t)
   end

with operations explicitly defined in implementations of type Alg.
That is, assuming there is an implementation of:

 module IntAlg : Alg with type t = int

then I want:

 module PairAdd = PairLifter(IntAlg)(struct let op = IntAlg.add end)

to work fine, but:

 module PairAdd = PairLifter(IntAlg)(struct let op = ( + ) end)

to fail.  It is somewhat crucial for the type "t" to be exposed,
however, to simplify passing of constants, etc.

Anyway, this is a simplified version of what I'm trying to do, and I
fear there might be fundamental problems with my understanding of the
type system.  So, feel free to hold my hand...

Thanks,

-Andy


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

