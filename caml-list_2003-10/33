Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA09174; Thu, 2 Oct 2003 22:16:13 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA18147 for <caml-list@pauillac.inria.fr>; Thu, 2 Oct 2003 22:16:12 +0200 (MET DST)
Received: from mail-in-03.arcor-online.net (mail-in-03.arcor-online.net [151.189.21.43])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h92KGB121874
	for <caml-list@inria.fr>; Thu, 2 Oct 2003 22:16:12 +0200 (MET DST)
Received: from diebuntekuh.de (dialin-212-144-187-065.arcor-ip.net [212.144.187.65])
	by mail-in-03.arcor-online.net (Postfix) with ESMTP
	id C8CFBDD5BD; Thu,  2 Oct 2003 22:16:10 +0200 (CEST)
Received: by diebuntekuh.de (Postfix, from userid 500)
	id DCE7061F175; Thu,  2 Oct 2003 22:19:10 +0200 (CEST)
To: OCaml List <caml-list@inria.fr>
Cc: wahl@informatik.uni-kl.de
Subject: Re: [Caml-list] linear programming library in OCaml
References: <000e01c38918$e69bb390$0300a8c0@James>
From: Christoph Bauer <c_bauer@informatik.uni-kl.de>
Date: Thu, 02 Oct 2003 22:19:10 +0200
In-Reply-To: <000e01c38918$e69bb390$0300a8c0@James> (James Scott's message
 of "Thu, 2 Oct 2003 20:10:52 +0100")
Message-ID: <m3ad8jmlz5.fsf@diebuntekuh.de>
User-Agent: Gnus/5.1002 (Gnus v5.10.2) Emacs/21.3 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 bauer:01 bauer:01 runbox:99 modelling:01 interfacing:01 toolkit:01 foreach:01 expr:01 bindings:01 ocaml:01 ocaml:01 lib:01 writes:01 optimizer:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

"James Scott" <j.scott@runbox.com> writes:

> We were working on bindings from OCaml to COIN a few months ago, this
> gives you access to a fairly serious (and 'free') simplex optimizer as
> well as drivers for commercial codes. We were considering GPLing it but
> have dropped that ball for the moment. But let us know if you're
> interested. 
>
> Also we had something that resembles an algebraic modelling language
> that makes it very easy to put an LP together, it all needs some work
> for general use though...
>
> Alternatively you might consider interfacing the GNU Linear Programming
> Toolkit.


IBGS uses a glpk-wrapper. Work was done by Tobias Wahl.  Look in the cvs

http://sf.net/projects/chesslib

under

  ibgs/lib/glpk


Christoph


-- 
proc self {} {foreach c [split [info body self] ""] d {14 -7 0 0 4 -67 4 73 11
69 24 -83 -15 6 -4 -84 78 20 11 -78 -1 -1 79 19 -8 4} { binary scan $c c c
if {[catch {append r [format %c [expr $c+$d]]}]} {return $r};}};puts [self]

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

