Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id WAA12460; Tue, 7 Oct 2003 22:18:02 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id WAA00534 for <caml-list@pauillac.inria.fr>; Tue, 7 Oct 2003 22:18:00 +0200 (MET DST)
Received: from mail3.tpgi.com.au ([203.12.160.59])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h97KHw109461
	for <caml-list@inria.fr>; Tue, 7 Oct 2003 22:17:59 +0200 (MET DST)
Received: from 203-213-83-64-syd-ts15-2600.tpgi.com.au (203-213-83-64-syd-ts15-2600.tpgi.com.au [203.213.83.64])
	by mail3.tpgi.com.au (8.11.6/8.11.6) with ESMTP id h97KGav07981;
	Wed, 8 Oct 2003 06:16:37 +1000
Subject: Re: [Caml-list] Re: [Ocaml-lib-devel] pMap.ml
From: skaller <skaller@ozemail.com.au>
Reply-To: skaller@ozemail.com.au
To: brogoff@speakeasy.net
Cc: "caml-list@inria.fr" <caml-list@inria.fr>
In-Reply-To: <Pine.LNX.4.44.0310070931500.10769-100000@grace.speakeasy.net>
References: <Pine.LNX.4.44.0310070931500.10769-100000@grace.speakeasy.net>
Content-Type: text/plain
Message-Id: <1065557774.2173.18.camel@pelican>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 08 Oct 2003 06:16:14 +1000
Content-Transfer-Encoding: 7bit
X-Loop: caml-list@inria.fr
X-Spam: no; 0.00; caml-list:01 ozemail:01 brogoff:01 notations:01 hashtable:01 newbie:01 horrendous:01 iostream:01 templated:01 arrays:01 bigarray:01 ocaml:01 garbage:01 speakeasy:01 overloading:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Wed, 2003-10-08 at 02:37, brogoff@speakeasy.net wrote:
> While it's nice to have stopgap solutions to these "problems", IMO the right
> solution will be possible when we have some kind of overloading in the language.
> Rather than having lots of squirrelly notations for hashtable access (and string
> access, and BigArray access, and...) we should just be able to index like arrays
> and be done with it. Lack of user defined overloading has always been a weak
> point in the entire ML family of languages, IMO.
> 

Felix has overloading. My feelings: lack of overloading
has two advantages.

(1) definiteness

Its definite what you're refering to: the lookup rules
are simple. Unlike overloading systems such as the lookup
and overload resolution in C++.

(2) prevents newbie abuse

Well, I have seen so much *horrendous* C++ garbage
where people thought overloading was clever.

I have also seen bad consequences where more expert
people constructed a badly designed mess -- such as the
C++ iostream facility. They got confused, and tried
to 'overload' cout << x for x being a 'character'. Only,
when iostreams got templated (character type became a type parameter)
it no longer made so much sense .. 

Yes, I miss overloading in Ocaml. But not all that much :-)


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

