Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 0C7B5BB9C
	for <caml-list@yquem.inria.fr>; Wed, 14 Sep 2005 14:24:01 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j8ECO0W3018519
	for <caml-list@yquem.inria.fr>; Wed, 14 Sep 2005 14:24:00 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA01000 for <caml-list@pauillac.inria.fr>; Wed, 14 Sep 2005 14:24:00 +0200 (MET DST)
Received: from mx1.polytechnique.org (mx1.polytechnique.org [129.104.30.34])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j8ECNxMG032556
	for <caml-list@inria.fr>; Wed, 14 Sep 2005 14:23:59 +0200
Received: from [192.168.0.11] (falcal.net [81.56.73.55])
	(using TLSv1 with cipher RC4-SHA (128/128 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTP id D06AF33176;
	Wed, 14 Sep 2005 14:23:58 +0200 (CEST)
In-Reply-To: <200509140321.43045.jon@ffconsultancy.com>
References: <200509140321.43045.jon@ffconsultancy.com>
Mime-Version: 1.0 (Apple Message framework v734)
Content-Type: multipart/signed; micalg=sha1; boundary=Apple-Mail-7-217064948; protocol="application/pkcs7-signature"
Message-Id: <EEDF0CF3-93BC-4C30-B6F2-DAE56FC6E70F@m4x.org>
Cc: caml users <caml-list@inria.fr>
From: Damien Bobillot <damien.bobillot@m4x.org>
Subject: Re: [Caml-list] Profiling garbage
Date: Wed, 14 Sep 2005 14:23:56 +0200
To: Jon Harrop <jon@ffconsultancy.com>
X-Mailer: Apple Mail (2.734)
X-AV-Checked: ClamAV using ClamSMTP at djali.polytechnique.org (Wed Sep 14 14:23:59 2005 +0200 (CEST))
X-DCC--Metrics: djali 32702; Body=1 Fuz1=1 Fuz2=1
X-Org-Mail: damien.bobillot.2002@polytechnique.org
X-Miltered: at concorde with ID 43281660.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 4328165F.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; damien:01 damien:01 caml-list:01 garbage:01 flowed:01 garbage:01 minor:01 allocating:01 ocaml:01 memoizing:01 verbose:01 stdout:01 minor:01 heap:01 heap:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3


--Apple-Mail-7-217064948
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=WINDOWS-1252;
	delsp=yes;
	format=flowed


Jon Harrop wrote :

> I've recently been trying to optimize Presenta. The profiling results
> surprised me. Most of the time was spent in the GC, invoked by
> "<spontaneous>". I assumed this meant that the GC was recycling =20
> enormous
> amounts of garbage from the old generation. Had it been recycled =20
> from the
> young generation then I assume the calls to the (minor) GC would be =20=

> invoked
> by the allocating function - is that right?
>
> Anyway, the best way I found to track down the offending function =20
> was to write
> lots of extra code to spew out Gc.stat results and look at the =20
> amount of data
> being allocated by each function call. Doing this by hand is very =20
> tedious, of
> course. So I'm wondering, are there any tools to profile allocation =20=

> and
> collection on a per function basis for OCaml code? I'm thinking of =20
> something
> along the lines of gprof results but showing space rather than time =20=

> taken.
>
> I managed to find the offending function by hand this time - it was
> retypesetting the entire document every frame, regenerating the =20
> scene graph.
> Memoizing it improved the performance of the whole program by an =20
> order of
> magnitude. So this is definitely an optimisation trick worth =20
> remembering...

You may use GC den-bugging information by adding the following =20
commands at the beginning of your code :
     Gc.set { (Gc.get()) with Gc.verbose =3D 1+2+4+8 };;

This will print a message on stdout every time a minor or major =20
collection is done, and some other actions like heap growing.

You may print at any time the current GC statistics (number of =20
collections, current heap size, total number of allocated bytes=85) with =
:
     Gc.print_stat stderr;;

It's also possible to tune the GC parameter to reduce frequency of =20
minor collections (by increasing the minor heap size for instance) =20
and some other things.

For more information, have a look at :
http://caml.inria.fr/pub/docs/manual-ocaml/libref/Gc.html

--=20
Damien alias Schmurtz
aim:goim?screenname=3Dschmuuurtz


--Apple-Mail-7-217064948
Content-Transfer-Encoding: base64
Content-Type: application/pkcs7-signature;
	name=smime.p7s
Content-Disposition: attachment;
	filename=smime.p7s

MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIGIjCCAtsw
ggJEoAMCAQICAw54xzANBgkqhkiG9w0BAQQFADBiMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhh
d3RlIENvbnN1bHRpbmcgKFB0eSkgTHRkLjEsMCoGA1UEAxMjVGhhd3RlIFBlcnNvbmFsIEZyZWVt
YWlsIElzc3VpbmcgQ0EwHhcNMDUwNDEzMTc1MTAxWhcNMDYwNDEzMTc1MTAxWjBJMR8wHQYDVQQD
ExZUaGF3dGUgRnJlZW1haWwgTWVtYmVyMSYwJAYJKoZIhvcNAQkBFhdkYW1pZW4uYm9iaWxsb3RA
bTR4Lm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ1TOYBqwJ42s0Fzz56jY1p0
fplGyikFgoNEUKGnOpqt4vpeoqUppAnORt2yvdQJxfIkhsWkrD/diiPS7MTF73wcxlSJtqYzVzPK
G/2WDm6dBinuWCIyWYFhtGedyxbap3kJW44H7cL7HUVVxZ0JhOIOTsjCoEzaeKnML7bctbIJeXEE
lErfbDv2jA1PDG1ru5dx+Q+AmbexX92ygnntE6aX3QZLSbhrytg4yCRdV8cOyQ9eFruZBI42RJv3
nJXevjUOr4n+y/7bzijAJj4BFyUU+dllvj6bmk5brnUXheCSOD0Ci20dqGNC1MyJ43b6MoIrbW7j
JwYIv12D6KuWoaUCAwEAAaM0MDIwIgYDVR0RBBswGYEXZGFtaWVuLmJvYmlsbG90QG00eC5vcmcw
DAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQQFAAOBgQB0u5b6wgwsbcyzDHJTzshlCn4gshxWtU/1
mH77gBCpsY8L554YV4/Tvm1PzmDzErm++drQf5HMy8sEFjmwLvNfBP0BqtkSqsdRFGR4wHzTjMhS
EW5LgmlaccqBQzqQrANtzglgBVbtmBDAV92qHjQslwHK4FohCRRzGl4DLQmqBDCCAz8wggKooAMC
AQICAQ0wDQYJKoZIhvcNAQEFBQAwgdExCzAJBgNVBAYTAlpBMRUwEwYDVQQIEwxXZXN0ZXJuIENh
cGUxEjAQBgNVBAcTCUNhcGUgVG93bjEaMBgGA1UEChMRVGhhd3RlIENvbnN1bHRpbmcxKDAmBgNV
BAsTH0NlcnRpZmljYXRpb24gU2VydmljZXMgRGl2aXNpb24xJDAiBgNVBAMTG1RoYXd0ZSBQZXJz
b25hbCBGcmVlbWFpbCBDQTErMCkGCSqGSIb3DQEJARYccGVyc29uYWwtZnJlZW1haWxAdGhhd3Rl
LmNvbTAeFw0wMzA3MTcwMDAwMDBaFw0xMzA3MTYyMzU5NTlaMGIxCzAJBgNVBAYTAlpBMSUwIwYD
VQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQDEyNUaGF3dGUgUGVyc29u
YWwgRnJlZW1haWwgSXNzdWluZyBDQTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxKY8VXNV
+065yplaHmjAdQRwnd/p/6Me7L3N9VvyGna9fww6YfK/Uc4B1OVQCjDXAmNaLIkVcI7dyfArhVqq
P3FWy688Cwfn8R+RNiQqE88r1fOCdz0Dviv+uxg+B79AgAJk16emu59l0cUqVIUPSAR/p7bRPGEE
QB5kGXJgt/sCAwEAAaOBlDCBkTASBgNVHRMBAf8ECDAGAQH/AgEAMEMGA1UdHwQ8MDowOKA2oDSG
Mmh0dHA6Ly9jcmwudGhhd3RlLmNvbS9UaGF3dGVQZXJzb25hbEZyZWVtYWlsQ0EuY3JsMAsGA1Ud
DwQEAwIBBjApBgNVHREEIjAgpB4wHDEaMBgGA1UEAxMRUHJpdmF0ZUxhYmVsMi0xMzgwDQYJKoZI
hvcNAQEFBQADgYEASIzRUIPqCy7MDaNmrGcPf6+svsIXoUOWlJ1/TCG4+DYfqi2fNi/A9BxQIJNw
PP2t4WFiw9k6GX6EsZkbAMUaC4J0niVQlGLH2ydxVyWN3amcOY6MIE9lX5Xa9/eH1sYITq726jTl
EBpbNU1341YheILcIRk13iSx0x1G/11fZU8xggLnMIIC4wIBATBpMGIxCzAJBgNVBAYTAlpBMSUw
IwYDVQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQDEyNUaGF3dGUgUGVy
c29uYWwgRnJlZW1haWwgSXNzdWluZyBDQQIDDnjHMAkGBSsOAwIaBQCgggFTMBgGCSqGSIb3DQEJ
AzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTA1MDkxNDEyMjM1NlowIwYJKoZIhvcNAQkE
MRYEFD6CLFKKMyMjh7Z/Y/FVsXHv6cRCMHgGCSsGAQQBgjcQBDFrMGkwYjELMAkGA1UEBhMCWkEx
JTAjBgNVBAoTHFRoYXd0ZSBDb25zdWx0aW5nIChQdHkpIEx0ZC4xLDAqBgNVBAMTI1RoYXd0ZSBQ
ZXJzb25hbCBGcmVlbWFpbCBJc3N1aW5nIENBAgMOeMcwegYLKoZIhvcNAQkQAgsxa6BpMGIxCzAJ
BgNVBAYTAlpBMSUwIwYDVQQKExxUaGF3dGUgQ29uc3VsdGluZyAoUHR5KSBMdGQuMSwwKgYDVQQD
EyNUaGF3dGUgUGVyc29uYWwgRnJlZW1haWwgSXNzdWluZyBDQQIDDnjHMA0GCSqGSIb3DQEBAQUA
BIIBABB6hOUerbADp7HC0SqLwVpP34JUvdKlLViKHoEhfFgFGzONYymGiYBlA+efWP6ACzjrhA6R
zkEN0ARB8RGZNcNOOz7JoBiSz+WrkrqRNyL5C+gYFrQ2bSaWuxdlHyfU1PwN4MyQvoAEN0DiCN4D
hsGl8lEfSdMxlj3gWYO/HkxGYebNDzwQg8uODYSKgEpUnTVg8ontM14iP7unYFe1480ItAbX3In7
KOU23RcPBMKFTi8grNbdEdX07hPqB/5B864k0pBGO/F7dbJj3gtxPEY+cZMwp1yUJTqbZ3fpuEen
nfAsHfFY3o7jMSZku6yd31hbNKYRTdMCGO0GUeIaC7wAAAAAAAA=

--Apple-Mail-7-217064948--

