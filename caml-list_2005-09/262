Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 2FFF0BB81
	for <caml-list@yquem.inria.fr>; Tue, 27 Sep 2005 15:24:57 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j8RDOu2r022051
	for <caml-list@yquem.inria.fr>; Tue, 27 Sep 2005 15:24:56 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA29084 for <caml-list@pauillac.inria.fr>; Tue, 27 Sep 2005 15:24:55 +0200 (MET DST)
Received: from vaxjo.synopsys.com (vaxjo.synopsys.com [198.182.60.75])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j8RDOsK1022042
	for <caml-list@inria.fr>; Tue, 27 Sep 2005 15:24:55 +0200
Received: from crone.synopsys.com (crone.synopsys.com [146.225.7.23])
	by vaxjo.synopsys.com (Postfix) with ESMTP
	id 2F81ADAF4; Tue, 27 Sep 2005 06:24:50 -0700 (PDT)
Received: from US01Kalium.internal.synopsys.com (localhost [127.0.0.1])
	by crone.synopsys.com (8.9.1/8.9.1) with ESMTP id GAA24998;
	Tue, 27 Sep 2005 06:24:49 -0700 (PDT)
Received: from US01Natrium.internal.synopsys.com ([10.9.67.42]) by US01Kalium.internal.synopsys.com with Microsoft SMTPSVC(5.0.2195.5329);
	 Tue, 27 Sep 2005 06:24:49 -0700
Received: from ca05osmium.internal.synopsys.com ([10.44.8.226]) by US01Natrium.internal.synopsys.com with Microsoft SMTPSVC(5.0.2195.5329);
	 Tue, 27 Sep 2005 06:24:49 -0700
Received: from synopsys.com ([10.44.9.157]) by ca05osmium.internal.synopsys.com with Microsoft SMTPSVC(5.0.2195.5329);
	 Tue, 27 Sep 2005 09:24:47 -0400
Message-ID: <4339481F.4@synopsys.com>
Date: Tue, 27 Sep 2005 09:24:47 -0400
From: Alan Falloon <Al.Falloon@synopsys.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.5) Gecko/20031007
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Brian Hurt <bhurt@spnz.org>
Cc: skaller <skaller@users.sourceforge.net>,
	Stefan Monnier <monnier@iro.umontreal.ca>,
	caml-list <caml-list@inria.fr>
Subject: Re: [Caml-list] Re: Ant:  Efficiency of let/and
References: <20050926043240.24009.qmail@web26809.mail.ukl.yahoo.com> 	<Pine.LNX.4.63.0509260819410.9226@localhost.localdomain> 	<87hdc724wo.fsf-monnier+gmane.comp.lang.caml.inria@gnu.org> 	<Pine.LNX.4.63.0509261123220.9226@localhost.localdomain>	<1127800374.31518.167.camel@rosella> <Pine.LNX.4.63.0509270750180.9226@localhost.localdomain>
In-Reply-To: <Pine.LNX.4.63.0509270750180.9226@localhost.localdomain>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 27 Sep 2005 13:24:47.0629 (UTC) FILETIME=[D4ECB3D0:01C5C366]
X-Miltered: at nez-perce with ID 43394828.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 43394826.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 parallelism:01 parallelism:01 symmetric:01 haskell:01 abstractions:01 thread-safe:01 2005,:98 wrote:01 wrote:01 incremental:01 alan:01 concurrency:02 heh:02 mutex:03 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Brian Hurt wrote:

> On Tue, 27 Sep 2005, skaller wrote:
>
>> I personally don't think of this as real parallelism,
>> that's something you get on a machine with K's or M's
>> of processing units .. eg the human eye.
>
>
> Heh.  We've hit the point where we have so many transistors on a chip 
> we literally don't know what to do with them all- we have no idea how 
> to spend the transistors to provide more than very small incremental 
> performance improvements to single-threaded execution.  Which is why 
> the sudden interest in parallelism (Symmetric Mult-Threading aka 
> Hyperthreading, multi-core chips, etc.).  The problem is that the 
> theory on how to write race condition/deadlock/livelock -free code 
> isn't there, to my knowledge (someone please prove me wrong).

I did see a paper called "Composable Memory Transactions" by some of the 
more well know Haskell researchers  its avaliable at  
http://got.net/~landauer/cs/fp/ea8-composablememory_stm.pdf

The idea is to introduce new concurrency abstractions (a replacement for 
mutex and friends) that are composable to make it easy to reason about 
thread-safe sections in isolation.

