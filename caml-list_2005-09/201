Return-Path: <weis@pauillac.inria.fr>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 05733BB81
	for <caml-list@yquem.inria.fr>; Wed, 21 Sep 2005 20:34:36 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j8LIYZlw018678
	for <caml-list@yquem.inria.fr>; Wed, 21 Sep 2005 20:34:35 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id UAA23725 for <caml-list@pauillac.inria.fr>; Wed, 21 Sep 2005 20:34:35 +0200 (MET DST)
Received: from ash25e.internode.on.net (ash25e.internode.on.net [203.16.214.182])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j8LIYWjF018672
	for <caml-list@inria.fr>; Wed, 21 Sep 2005 20:34:34 +0200
Received: from rosella (ppp36-123.lns2.syd6.internode.on.net [59.167.36.123])
	by ash25e.internode.on.net (8.12.9/8.12.6) with ESMTP id j8LIYU6I099210
	for <caml-list@inria.fr>; Thu, 22 Sep 2005 04:04:31 +0930 (CST)
	(envelope-from skaller@users.sourceforge.net)
Subject: ocamllex question
From: skaller <skaller@users.sourceforge.net>
To: ocaml <caml-list@inria.fr>
Content-Type: text/plain
Date: Thu, 22 Sep 2005 04:34:35 +1000
Message-Id: <1127327675.23425.111.camel@rosella>
Mime-Version: 1.0
X-Mailer: Evolution 2.2.1.1 
Content-Transfer-Encoding: 7bit
X-Miltered: at nez-perce with ID 4331A7BB.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 4331A7B8.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; ocamllex:01 lexbuf:01 ocamllex:01 lexer:01 recursive:01 lexer:01 sourceforge:01 character:03 stream:04 stream:04 eof:04 eof:04 john:08 felix:08 felix:08 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

Can eof be read from a lexbuf more than once by an ocamllex lexer?
In particular is a recursive lexer matches an eof and
returns to its caller, can the parent caller still read
another eof?

In other words, is the character stream postpended by one eof
or an infinite stream of them?

-- 
John Skaller <skaller at users dot sf dot net>
Felix, successor to C++: http://felix.sf.net

