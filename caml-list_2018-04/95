Return-Path: <elie.canonicimerle@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id A0C8F82416
	for <caml-list@sympa.inria.fr>; Fri, 27 Apr 2018 13:21:34 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=elie.canonicimerle@gmail.com; spf=Pass smtp.mailfrom=elie.canonicimerle@gmail.com; spf=None smtp.helo=postmaster@mail-lf0-f46.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  elie.canonicimerle@gmail.com) identity=pra;
  client-ip=209.85.215.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="elie.canonicimerle@gmail.com";
  x-sender="elie.canonicimerle@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  elie.canonicimerle@gmail.com designates 209.85.215.46 as
  permitted sender) identity=mailfrom; client-ip=209.85.215.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="elie.canonicimerle@gmail.com";
  x-sender="elie.canonicimerle@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lf0-f46.google.com) identity=helo;
  client-ip=209.85.215.46;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="elie.canonicimerle@gmail.com";
  x-sender="postmaster@mail-lf0-f46.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Als+NzRwNNvWGZwLXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoeLfad9pjvdHbS+e9qxAeQG9mDsLQc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPbQhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYO/1jcKPAZtMaXXROUdpNVyJPBYO8?=
 =?us-ascii?q?apEAD+sHPe1Fq4XwqF8DoR64CAKxBu3g1yVIi2f00q000+ovHwLI0hE+Ed0Sq3?=
 =?us-ascii?q?nbtsn5Ob0IXOyp0KXFzzPOZO5W1zfn74jIdwgsr/6IXbJxb8Xa1FciGBnDjlWX?=
 =?us-ascii?q?r4zlPi+a1uUQuGac8eVgT+avhHA6oAx2vDevwsYshZfTio0J0F/E8yJ5wIA0Jd?=
 =?us-ascii?q?KkSU57ZMCrEIFUty6ELIZ2TcYiTHtpuCY+0LEJpZm7fC0TxZkh2hXRZfuHc42S?=
 =?us-ascii?q?7RLiUuacOS94hG9+d7K7hha97VKsyuj4VsWsyllGtC9Fkt3UunAVzRzT69aHRe?=
 =?us-ascii?q?Fh/ki/wzqP0gTT5vlFIUAyj6rbKoQuzqQ+lpoJqUjDES72mFn2jK+LbUoo4Omo?=
 =?us-ascii?q?6+P/brXpp5+cK490ihzlPag0hsO/BuE4PhAOXmeB+eS807rj8VflT7VNi/06iq?=
 =?us-ascii?q?zZv4rGJcQBp664DBVZ0oMn6xqnFDiqytEYnX0fIFJAYh2Hk5LpO1DBIf/gDPe/?=
 =?us-ascii?q?hUisnylxx/DAJLLhBo3CIWXEkLfnYbZy81JcyA0uzd9D55JYELQBIPb1V0Tst9?=
 =?us-ascii?q?LYFgc0PxKoz+vjEtlw1YMTVXiRDqOEMK7eq1CF6+MpLuKRfoEaoiz9JOIg5/P2?=
 =?us-ascii?q?jX82h1sdfa6x0JsScn+4H/BmL1ydYXrintsNCGkKswU/QeDwh12CVjlTZ3m2X6?=
 =?us-ascii?q?0i/D00FIWmDYLbSoCshryOwju7E4VIamxaDl2AC3TleoWeV/sSdS6fItVtnzMF?=
 =?us-ascii?q?WLS5To8uzxCutAv0y7p9KerU/zUVuozn1Nh0+eLfjw09+iZyD8Sa1WGNTn17nm?=
 =?us-ascii?q?INRzAoxqB/pVJyx0yM0ah9mfNYFNhT6+lVXQc9MJ7Q1/Z6BMzqWgLdYteJT06r?=
 =?us-ascii?q?Tcm8DjE0StI92tsOY0dmG9W+lR3DxCqrA7oNl7ORHpA086Tc32LwJ8ln0XrG2r?=
 =?us-ascii?q?Mh3BEaRZ5tKGvup6h46gWbU4zUlQOdnqOgea000yvE9WPFxm2L6hJ2Sgl1BIjB?=
 =?us-ascii?q?XH1XTULQqtL47UKKarK0DblvZgZFyMPEIaJMbdvohlRDSe3nNfzRZmuwnyG7Ah?=
 =?us-ascii?q?PeleDEV5bjZ2hIhHaVM0MDiQ1GuCvfbFlsNmKau2vbSQdWOxfqakLo//N5rSri?=
 =?us-ascii?q?HEAxxgCOKUZm0ujso0JHtbmnU/oWm4k8lmI5sTwtRQSy2tvXD5yLoA8zJPwBM+?=
 =?us-ascii?q?N4209O0CfijyI4PpGkKPo/1FsXcgAyu022khsrVMNPls8lqH5sxw13e/qV?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BhAQB0BuNafy7XVdFcGgEBAQEBAgEBA?=
 =?us-ascii?q?QEIAQEBAYJNgVcXYxUTCoNhgR2CUJEQgXSBD4FAJ5FBgWQLI4MSgTcCgkYHGQc?=
 =?us-ascii?q?BBDQUAQIBAQEBAQEBAQETAQEJCwsIJiUMgjUkgk8BAQEBAgEjBBkBGxILAQMBC?=
 =?us-ascii?q?wYDAgsNDR0CAiEBAREBBQEKEgYTCAqEZAEDDQgPjEGQADyLBYFpFgUBF4JwBYN?=
 =?us-ascii?q?XChkmAwpUV4I9AgYShV6CJIITg2wugk83CwICgRgOZYJTglQChg4IfIR7hGWGb?=
 =?us-ascii?q?ywIhWSFaYJ9gXGKZIVqg1JFV4VTDwMegQQMJ0eBLE0jUA0NF4ISCYFnJDSDNIE?=
 =?us-ascii?q?+gSaBPIY0PTCPBII3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BhAQB0BuNafy7XVdFcGgEBAQEBAgEBAQEIAQEBAYJNgVc?=
 =?us-ascii?q?XYxUTCoNhgR2CUJEQgXSBD4FAJ5FBgWQLI4MSgTcCgkYHGQcBBDQUAQIBAQEBA?=
 =?us-ascii?q?QEBAQETAQEJCwsIJiUMgjUkgk8BAQEBAgEjBBkBGxILAQMBCwYDAgsNDR0CAiE?=
 =?us-ascii?q?BAREBBQEKEgYTCAqEZAEDDQgPjEGQADyLBYFpFgUBF4JwBYNXChkmAwpUV4I9A?=
 =?us-ascii?q?gYShV6CJIITg2wugk83CwICgRgOZYJTglQChg4IfIR7hGWGbywIhWSFaYJ9gXG?=
 =?us-ascii?q?KZIVqg1JFV4VTDwMegQQMJ0eBLE0jUA0NF4ISCYFnJDSDNIE+gSaBPIY0PTCPB?=
 =?us-ascii?q?II3AQE?=
X-IronPort-AV: E=Sophos;i="5.49,335,1520895600"; 
   d="scan'208,217";a="324770633"
Received: from mail-lf0-f46.google.com ([209.85.215.46])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 27 Apr 2018 13:21:32 +0200
Received: by mail-lf0-f46.google.com with SMTP id v85-v6so2131769lfa.13
        for <caml-list@inria.fr>; Fri, 27 Apr 2018 04:21:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=IfCl+4FSG7t9ZMJFGAAK34zwSZmpazQdhF74gNccIAM=;
        b=MwQaQ6p3NrgrR0ksbBTfBUHLkZ+hSKAShZeINHKMYCS9W+QUkSlcJQXcLipuo9gbuD
         +U0J//Rkn8qw6o+s+8WPfT9VnZM0AU43Ldg9viV57uIaumIeD2gIUuWsU11lU/knpfyS
         ZM6HJVsNRFIgA2Iuzl06/PjsQwAU4hJHr+n0ORmVasbTBGDJWvNu5JFeAk4mUVo2iuBe
         Ajfns+qEhphLqW8nvz5fsuXxZa1f7pDCMHetAdtcboqsQ22WAzngQElVbvDmEimey5XH
         NJa7HkuM/AUOMBBRfFg5smaWzILJtIIAb8BLdZQGP7ywgRtrLhSXbQeRZyGglFLTHKzh
         hdxw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=IfCl+4FSG7t9ZMJFGAAK34zwSZmpazQdhF74gNccIAM=;
        b=dZeR1QbEG4DhUBGK7o7Rr0O/druG0SI8JdduXva1lgn4tx1/fb5O5PEWSS8eSLaWLI
         BdPddesYHt32FD4qcxrmzuYfhL7aDWaOVr6i3JYMnwTFxNAoXzdXRa6zGQWZsJas4jdz
         v0WSS2dR5YxGL88xjljzkNjma0ow1/jSTDbKnoNtkIwqc7mP5AEl0cA4jhNOCtImsURR
         vYK59cy+AHAucDNNMtRYoSkyLWEO2Y8n0pWQGfuyl5LUNAuX1UC885GAI0JEEsb705JY
         m8DUwOgVSL6Jsbkhg4wZn7F8IX0k7JvWvLTPshauofCIBg1f4+FFD4zcTZS+wlYjxYs6
         jkQw==
X-Gm-Message-State: ALQs6tBhcsVgYlZlUdtynNyOrKngBPycR87gYBeqj/3928sDTxHGvhJy
	hQMt3N1VTPyQcegnSpfCQ74j6kSINPE2bWOYBhSLGA==
X-Google-Smtp-Source: AB8JxZpfjLTL4gU+Ky2qG2d/VWW2QA96Frzi16VejrW/JE7K4z2gsw95ffJYSxnMhFL7KkUJwpptrlekBG1lQoLGIdg=
X-Received: by 2002:a19:8e8e:: with SMTP id a14-v6mr1319583lfl.145.1524828092047;
 Fri, 27 Apr 2018 04:21:32 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.46.157.21 with HTTP; Fri, 27 Apr 2018 04:21:01 -0700 (PDT)
In-Reply-To: <CA+ZA8Qx2dMN1BFeQr+hw2gZgzPj+T5x1Aj-d7z6B5iwjLV4Egw@mail.gmail.com>
References: <CA+ZA8QzuJg8iZC=aktSNKhnJuHU0ghVOuCV5X05t+5D2bJd5xA@mail.gmail.com>
 <CALdWJ+ybpxNYtp3Pu75pWL_F=0=TfVGx8k0mBXbmJb+_QSSmLw@mail.gmail.com>
 <CA+ZA8Qyqpi4hvnaGrVFA5Vims+1W5EL=O4tT+v-MJp9dc_Ep2A@mail.gmail.com>
 <30D1A366-BDE1-4D6A-9531-A21492C930CE@math.nagoya-u.ac.jp> <CA+ZA8Qx2dMN1BFeQr+hw2gZgzPj+T5x1Aj-d7z6B5iwjLV4Egw@mail.gmail.com>
From: Elie Canonici Merle <elie.canonicimerle@gmail.com>
Date: Fri, 27 Apr 2018 13:21:01 +0200
Message-ID: <CAN7gcRNZyoMKxj9XxSKpJGRZ5HPNYgaxthY9fhdV0gC_6WeiMA@mail.gmail.com>
To: Jun Inoue <jun.lambda@gmail.com>
Cc: Mailing List OCaml <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="000000000000c52510056ad2b461"
Subject: Re: [Caml-list] Type That's Concrete From Within A Library Abstract
 From Without

--000000000000c52510056ad2b461
Content-Type: text/plain; charset="UTF-8"

Hi,

Do you need to expose that B.t and A.t are the same?

Because if you don't it works.

$ cat > a.ml
type t = Foo of int
let x : t = Foo 3
$ cat > b.ml
type t = A.t
let x2 = A.x
$ cat > p.mli
module B : sig type t val x2 : t end
$ ocamlc -for-pack P -c a.ml b.ml
$ ocamlc -c p.mli
$ ocamlc -pack -o p.cmo a.cmo b.cmo

If you need to expose the type equality you can make it work by adding the
signature of the module A while still keeping A.t abstract in p.mli (or
not, depending on your needs)

$ cat > a.ml
type t = Foo of int
let x : t = Foo 3
$ cat > b.ml
type t = A.t
let x2 = A.x
$ cat > p.mli
module A : sig type t end
module B : sig type t = A.t val x2 : t end
$ ocamlc -for-pack P -c a.ml b.ml
$ ocamlc -c p.mli
$ ocamlc -pack -o p.cmo a.cmo b.cmo

I hope it helps.


2018-04-27 10:53 GMT+02:00 Jun Inoue <jun.lambda@gmail.com>:

> Hi Jacques,
>
> OCaml gives a type error if a public type in b.ml references a
> non-trivial type in a.ml.  Is there a way around this?
>
> $ cat > a.ml
> type t = Foo of int
> let x : t = Foo 3
> $ cat > b.ml
> type t = A.t
> let x2 = A.x
> $ cat > p.mli
> module B : sig type t = A.t val x2 : t end
> $ ocamlc -for-pack P -c a.ml b.ml
> $ ocamlc -c p.mli
> $ ocamlc -pack -o p.cmo a.cmo b.cmo
> File "_none_", line 1:
> Error: The implementation (obtained by packing)
>        does not match the interface p.mli:
>        In module B:
>        Modules do not match:
>          sig type t = A.t val x2 : A.t end
>        is not included in
>          sig type t = A.t val x2 : t end
>        In module B:
>        Type declarations do not match:
>          type t = A.t
>        is not included in
>          type t = A.t
>
>
> On Fri, Apr 27, 2018 at 3:05 PM, Jacques Garrigue
> <garrigue@math.nagoya-u.ac.jp> wrote:
> > You can provide a mli for the -pack.
> > Just compile it before.
> >
> > $ cat > a.ml
> > type t = int
> > let x : int = 3
> > $ cat > b.ml
> > let x2 = A.x * A.x
> > $ ocamlc -for-pack P a.ml b.ml
> > $ cat > p.mli
> > module A : sig type t val x : t end
> > module B : sig val x2 : int end
> > $ ocamlc -c p.mli
> > $ ocamlc -pack -o p.cmo a.cmo b.cmo
> >
> > Now, if you use your library with only p.cmo and p.cmi available, you
> will
> > only be able to access it through the interface you provided.
> >
> > Also, the method using module aliases can work too: you just have
> > to use longer file names for the internal modules, to reduce the risk of
> > conflicts. But this is more involved than using -pack with a mli.
> >
> > Jacques Garrigue
> >
> > On 2018/04/27 14:48, Jun Inoue wrote:
> >>
> >> Hi Ivan,
> >>
> >> That's basically our current approach, but it doesn't solve the
> >> namespace pollution problem.  In your example, when someone installs a
> >> file named b.cmi (whose interface is unrelated to your b.ml), the name
> >> conflict prevents loading the std.cma file at all:
> >>
> >> $ ocaml
> >>        OCaml version 4.04.0
> >>
> >> # #show B;;
> >> module B : sig val foo : int end
> >> # #load "std.cma";;
> >> The files std.cma and b.cmi disagree over interface B
> >>
> >> So the technique makes B inaccessible but doesn't remove it from the
> >> namespace.  This is why we want to -pack things, because our analogue
> >> of b.ml is named matrix.ml, and there's no other sensible name for it.
> >>
> >> This technique doesn't work with -pack because that option demands all
> >> .cmi's, including b.cmi.  I guess we could rename matrix.ml to
> >> matrix_internal_dont_touch.ml, but we wanted to know if there's a
> >> cleaner approach.  I wish we could supply a .mli file to the product
> >> of -pack, but that also doesn't work...
> >>
> >> On Fri, Apr 27, 2018 at 12:06 AM, Ivan Gotovchits <ivg@ieee.org> wrote:
> >>> Hi Jun,
> >>>
> >>> You can achieve this by implying an extra layer of indirection, i.e.,
> by
> >>> having two levels of interfaces. For example,
> >>>
> >>>   * A.ml - implementation of module A
> >>>   * A.mli - private interface of module A
> >>>   * B.ml  - implementation of module B that may rely on anything in
> A.mli
> >>>   * Std.ml - a set of modules that you would like to import, e.g.,
> `module
> >>> A = A`, `module B = B`
> >>>   * Std.mli - public interface specification
> >>>
> >>>
> >>> Next, you deploy `std.cmxa` and `std.cmi` but keep `a.cmi` and `b.cmi`
> to
> >>> yourself. This will prevent users from accessing your private modules
> A and
> >>> B directly. (In oasis you can use PrivateModules stanza for this)
> >>>
> >>> Now you will have `Std.A` and `Std.B` that exposes as much as you
> want. Not
> >>> sure whether it will work with the `-pack`, but you can use this
> approach
> >>> instead of it. This is how we address the same issue in [BAP][1]
> >>>
> >>> Cheers,
> >>> Ivan
> >>>
> >>> [1]: https://github.com/BinaryAnalysisPlatform/bap
> >>>
> >>>
> >>> On Thu, Apr 26, 2018 at 10:18 AM, Jun Inoue <jun.lambda@gmail.com>
> wrote:
> >>>>
> >>>> Dear list,
> >>>>
> >>>> Is there a way to make a type concrete inside a library, yet opaque to
> >>>> library users, preferably in a way that works with -pack?  This is a
> >>>> nagging issue in our sundials package
> >>>> (http://inria-parkas.github.io/sundialsml/).
> >>>>
> >>>> Basically, we have a type declared in one module of the library that
> >>>> is pattern-matched upon in other modules, like:
> >>>>
> >>>> (* private.ml *)
> >>>> type opaque_type = Foo | Bar
> >>>>
> >>>> (* public.ml *)
> >>>> let f : opaque_type -> int = function
> >>>>  | Foo -> 0
> >>>>  | Bar -> 1
> >>>>
> >>>> There are a few constraints:
> >>>> - We don't want users to be able to pattern-match on opaque_type.
> >>>> - We need multiple modules in the library to pattern-match on
> >>>> opaque-type (so moving opaque_typ e to public.ml is not an option).
> >>>> - To avoid namespace pollution, we want to pack the whole library
> >>>> (with ocamlc -pack) as a single Sundials module, so the user sees a
> >>>> Sundials.Public module instead of just Public.
> >>>>
> >>>> Is this possible?  Right now, we just collect public.cmo and
> >>>> private.cmo into sundials.cma and throw away private.cmi.  But this
> >>>> doesn't work with packing:
> >>>>
> >>>> $ ocamlc -pack -o sundials.cmo private.cmo public.cmo
> >>>>
> >>>> demands that there be a private.cmi.
> >>>>
> >>>> --
> >>>> Jun Inoue
> >>>>
> >>>> --
> >>>> Caml-list mailing list.  Subscription management and archives:
> >>>> https://sympa.inria.fr/sympa/arc/caml-list
> >>>> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> >>>> Bug reports: http://caml.inria.fr/bin/caml-bugs
> >
> >
> >
>
>
>
> --
> Jun Inoue
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--000000000000c52510056ad2b461
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi,<div><br></div><div>Do you need to expose that B.t and =
A.t are the same?</div><div><br></div><div>Because if you don&#39;t it work=
s.</div><div><br></div><div><span style=3D"font-size:12.8px">$ cat &gt; <a =
href=3D"http://a.ml">a.ml</a></span><br style=3D"font-size:12.8px"><span st=
yle=3D"font-size:12.8px">type t =3D Foo of int</span><br style=3D"font-size=
:12.8px"><span style=3D"font-size:12.8px">let x : t =3D Foo 3</span><br sty=
le=3D"font-size:12.8px"><span style=3D"font-size:12.8px">$ cat &gt; <a href=
=3D"http://b.ml">b.ml</a></span><br style=3D"font-size:12.8px"><span style=
=3D"font-size:12.8px">type t =3D A.t</span><br style=3D"font-size:12.8px"><=
span style=3D"font-size:12.8px">let x2 =3D A.x</span><br style=3D"font-size=
:12.8px"><span style=3D"font-size:12.8px">$ cat &gt; p.mli</span><br style=
=3D"font-size:12.8px"><span style=3D"font-size:12.8px">module B : sig type =
t val x2 : t end</span><br style=3D"font-size:12.8px"><span style=3D"font-s=
ize:12.8px">$ ocamlc -for-pack P -c <a href=3D"http://a.ml">a.ml</a></span>=
<span style=3D"font-size:12.8px">=C2=A0<a href=3D"http://b.ml">b.ml</a></sp=
an><br style=3D"font-size:12.8px"><span class=3D"gmail-im" style=3D"font-si=
ze:12.8px">$ ocamlc -c p.mli<br>$ ocamlc -pack -o p.cmo a.cmo b.cmo</span><=
br></div><div><br></div><div>If you need to expose the type equality you ca=
n make it work by adding the signature of the module A while still keeping =
A.t abstract in p.mli (or not, depending on your needs)</div><div><br></div=
><div><span style=3D"font-size:12.8px">$ cat &gt; <a href=3D"http://a.ml">a=
.ml</a></span><br style=3D"font-size:12.8px"><span style=3D"font-size:12.8p=
x">type t =3D Foo of int</span><br style=3D"font-size:12.8px"><span style=
=3D"font-size:12.8px">let x : t =3D Foo 3</span><br style=3D"font-size:12.8=
px"><span style=3D"font-size:12.8px">$ cat &gt; <a href=3D"http://b.ml">b.m=
l</a></span><br style=3D"font-size:12.8px"><span style=3D"font-size:12.8px"=
>type t =3D A.t</span><br style=3D"font-size:12.8px"><span style=3D"font-si=
ze:12.8px">let x2 =3D A.x</span><br style=3D"font-size:12.8px"><span style=
=3D"font-size:12.8px">$ cat &gt; p.mli</span></div><div>module A : sig type=
 t end<br style=3D"font-size:12.8px"><span style=3D"font-size:12.8px">modul=
e B : sig type t =3D A.t val x2 : t end</span><br style=3D"font-size:12.8px=
"><span style=3D"font-size:12.8px">$ ocamlc -for-pack P -c <a href=3D"http:=
//a.ml">a.ml</a></span><span style=3D"font-size:12.8px">=C2=A0<a href=3D"ht=
tp://b.ml">b.ml</a></span><br style=3D"font-size:12.8px"><span class=3D"gma=
il-im" style=3D"font-size:12.8px">$ ocamlc -c p.mli<br>$ ocamlc -pack -o p.=
cmo a.cmo b.cmo</span><br></div><div><span class=3D"gmail-im" style=3D"font=
-size:12.8px"><br></span></div><div><span class=3D"gmail-im" style=3D"font-=
size:12.8px">I hope it helps.</span></div><div><br></div></div><div class=
=3D"gmail_extra"><br><div class=3D"gmail_quote">2018-04-27 10:53 GMT+02:00 =
Jun Inoue <span dir=3D"ltr">&lt;<a href=3D"mailto:jun.lambda@gmail.com" tar=
get=3D"_blank">jun.lambda@gmail.com</a>&gt;</span>:<br><blockquote class=3D=
"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding=
-left:1ex">Hi Jacques,<br>
<br>
OCaml gives a type error if a public type in <a href=3D"http://b.ml" rel=3D=
"noreferrer" target=3D"_blank">b.ml</a> references a<br>
non-trivial type in <a href=3D"http://a.ml" rel=3D"noreferrer" target=3D"_b=
lank">a.ml</a>.=C2=A0 Is there a way around this?<br>
<br>
$ cat &gt; <a href=3D"http://a.ml" rel=3D"noreferrer" target=3D"_blank">a.m=
l</a><br>
type t =3D Foo of int<br>
let x : t =3D Foo 3<br>
$ cat &gt; <a href=3D"http://b.ml" rel=3D"noreferrer" target=3D"_blank">b.m=
l</a><br>
type t =3D A.t<br>
let x2 =3D A.x<br>
$ cat &gt; p.mli<br>
module B : sig type t =3D A.t val x2 : t end<br>
$ ocamlc -for-pack P -c <a href=3D"http://a.ml" rel=3D"noreferrer" target=
=3D"_blank">a.ml</a> <a href=3D"http://b.ml" rel=3D"noreferrer" target=3D"_=
blank">b.ml</a><br>
<span class=3D"">$ ocamlc -c p.mli<br>
$ ocamlc -pack -o p.cmo a.cmo b.cmo<br>
</span>File &quot;_none_&quot;, line 1:<br>
Error: The implementation (obtained by packing)<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0does not match the interface p.mli:<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0In module B:<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0Modules do not match:<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0sig type t =3D A.t val x2 : A.t end<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0is not included in<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0sig type t =3D A.t val x2 : t end<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0In module B:<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0Type declarations do not match:<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0type t =3D A.t<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0is not included in<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0type t =3D A.t<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
<br>
On Fri, Apr 27, 2018 at 3:05 PM, Jacques Garrigue<br>
&lt;<a href=3D"mailto:garrigue@math.nagoya-u.ac.jp">garrigue@math.nagoya-u.=
ac.jp</a>&gt; wrote:<br>
&gt; You can provide a mli for the -pack.<br>
&gt; Just compile it before.<br>
&gt;<br>
&gt; $ cat &gt; <a href=3D"http://a.ml" rel=3D"noreferrer" target=3D"_blank=
">a.ml</a><br>
&gt; type t =3D int<br>
&gt; let x : int =3D 3<br>
&gt; $ cat &gt; <a href=3D"http://b.ml" rel=3D"noreferrer" target=3D"_blank=
">b.ml</a><br>
&gt; let x2 =3D A.x * A.x<br>
&gt; $ ocamlc -for-pack P <a href=3D"http://a.ml" rel=3D"noreferrer" target=
=3D"_blank">a.ml</a> <a href=3D"http://b.ml" rel=3D"noreferrer" target=3D"_=
blank">b.ml</a><br>
&gt; $ cat &gt; p.mli<br>
&gt; module A : sig type t val x : t end<br>
&gt; module B : sig val x2 : int end<br>
&gt; $ ocamlc -c p.mli<br>
&gt; $ ocamlc -pack -o p.cmo a.cmo b.cmo<br>
&gt;<br>
&gt; Now, if you use your library with only p.cmo and p.cmi available, you =
will<br>
&gt; only be able to access it through the interface you provided.<br>
&gt;<br>
&gt; Also, the method using module aliases can work too: you just have<br>
&gt; to use longer file names for the internal modules, to reduce the risk =
of<br>
&gt; conflicts. But this is more involved than using -pack with a mli.<br>
&gt;<br>
&gt; Jacques Garrigue<br>
&gt;<br>
&gt; On 2018/04/27 14:48, Jun Inoue wrote:<br>
&gt;&gt;<br>
&gt;&gt; Hi Ivan,<br>
&gt;&gt;<br>
&gt;&gt; That&#39;s basically our current approach, but it doesn&#39;t solv=
e the<br>
&gt;&gt; namespace pollution problem.=C2=A0 In your example, when someone i=
nstalls a<br>
&gt;&gt; file named b.cmi (whose interface is unrelated to your <a href=3D"=
http://b.ml" rel=3D"noreferrer" target=3D"_blank">b.ml</a>), the name<br>
&gt;&gt; conflict prevents loading the std.cma file at all:<br>
&gt;&gt;<br>
&gt;&gt; $ ocaml<br>
&gt;&gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 OCaml version 4.04.0<br>
&gt;&gt;<br>
&gt;&gt; # #show B;;<br>
&gt;&gt; module B : sig val foo : int end<br>
&gt;&gt; # #load &quot;std.cma&quot;;;<br>
&gt;&gt; The files std.cma and b.cmi disagree over interface B<br>
&gt;&gt;<br>
&gt;&gt; So the technique makes B inaccessible but doesn&#39;t remove it fr=
om the<br>
&gt;&gt; namespace.=C2=A0 This is why we want to -pack things, because our =
analogue<br>
&gt;&gt; of <a href=3D"http://b.ml" rel=3D"noreferrer" target=3D"_blank">b.=
ml</a> is named <a href=3D"http://matrix.ml" rel=3D"noreferrer" target=3D"_=
blank">matrix.ml</a>, and there&#39;s no other sensible name for it.<br>
&gt;&gt;<br>
&gt;&gt; This technique doesn&#39;t work with -pack because that option dem=
ands all<br>
&gt;&gt; .cmi&#39;s, including b.cmi.=C2=A0 I guess we could rename <a href=
=3D"http://matrix.ml" rel=3D"noreferrer" target=3D"_blank">matrix.ml</a> to=
<br>
&gt;&gt; <a href=3D"http://matrix_internal_dont_touch.ml" rel=3D"noreferrer=
" target=3D"_blank">matrix_internal_dont_touch.ml</a>, but we wanted to kno=
w if there&#39;s a<br>
&gt;&gt; cleaner approach.=C2=A0 I wish we could supply a .mli file to the =
product<br>
&gt;&gt; of -pack, but that also doesn&#39;t work...<br>
&gt;&gt;<br>
&gt;&gt; On Fri, Apr 27, 2018 at 12:06 AM, Ivan Gotovchits &lt;<a href=3D"m=
ailto:ivg@ieee.org">ivg@ieee.org</a>&gt; wrote:<br>
&gt;&gt;&gt; Hi Jun,<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; You can achieve this by implying an extra layer of indirection=
, i.e., by<br>
&gt;&gt;&gt; having two levels of interfaces. For example,<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;=C2=A0 =C2=A0* A.ml - implementation of module A<br>
&gt;&gt;&gt;=C2=A0 =C2=A0* A.mli - private interface of module A<br>
&gt;&gt;&gt;=C2=A0 =C2=A0* B.ml=C2=A0 - implementation of module B that may=
 rely on anything in A.mli<br>
&gt;&gt;&gt;=C2=A0 =C2=A0* Std.ml - a set of modules that you would like to=
 import, e.g., `module<br>
&gt;&gt;&gt; A =3D A`, `module B =3D B`<br>
&gt;&gt;&gt;=C2=A0 =C2=A0* Std.mli - public interface specification<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Next, you deploy `std.cmxa` and `std.cmi` but keep `a.cmi` and=
 `b.cmi` to<br>
&gt;&gt;&gt; yourself. This will prevent users from accessing your private =
modules A and<br>
&gt;&gt;&gt; B directly. (In oasis you can use PrivateModules stanza for th=
is)<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Now you will have `Std.A` and `Std.B` that exposes as much as =
you want. Not<br>
&gt;&gt;&gt; sure whether it will work with the `-pack`, but you can use th=
is approach<br>
&gt;&gt;&gt; instead of it. This is how we address the same issue in [BAP][=
1]<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Cheers,<br>
&gt;&gt;&gt; Ivan<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; [1]: <a href=3D"https://github.com/BinaryAnalysisPlatform/bap"=
 rel=3D"noreferrer" target=3D"_blank">https://github.com/<wbr>BinaryAnalysi=
sPlatform/bap</a><br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; On Thu, Apr 26, 2018 at 10:18 AM, Jun Inoue &lt;<a href=3D"mai=
lto:jun.lambda@gmail.com">jun.lambda@gmail.com</a>&gt; wrote:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Dear list,<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Is there a way to make a type concrete inside a library, y=
et opaque to<br>
&gt;&gt;&gt;&gt; library users, preferably in a way that works with -pack?=
=C2=A0 This is a<br>
&gt;&gt;&gt;&gt; nagging issue in our sundials package<br>
&gt;&gt;&gt;&gt; (<a href=3D"http://inria-parkas.github.io/sundialsml/" rel=
=3D"noreferrer" target=3D"_blank">http://inria-parkas.github.<wbr>io/sundia=
lsml/</a>).<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Basically, we have a type declared in one module of the li=
brary that<br>
&gt;&gt;&gt;&gt; is pattern-matched upon in other modules, like:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; (* <a href=3D"http://private.ml" rel=3D"noreferrer" target=
=3D"_blank">private.ml</a> *)<br>
&gt;&gt;&gt;&gt; type opaque_type =3D Foo | Bar<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; (* <a href=3D"http://public.ml" rel=3D"noreferrer" target=
=3D"_blank">public.ml</a> *)<br>
&gt;&gt;&gt;&gt; let f : opaque_type -&gt; int =3D function<br>
&gt;&gt;&gt;&gt;=C2=A0 | Foo -&gt; 0<br>
&gt;&gt;&gt;&gt;=C2=A0 | Bar -&gt; 1<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; There are a few constraints:<br>
&gt;&gt;&gt;&gt; - We don&#39;t want users to be able to pattern-match on o=
paque_type.<br>
&gt;&gt;&gt;&gt; - We need multiple modules in the library to pattern-match=
 on<br>
&gt;&gt;&gt;&gt; opaque-type (so moving opaque_typ e to <a href=3D"http://p=
ublic.ml" rel=3D"noreferrer" target=3D"_blank">public.ml</a> is not an opti=
on).<br>
&gt;&gt;&gt;&gt; - To avoid namespace pollution, we want to pack the whole =
library<br>
&gt;&gt;&gt;&gt; (with ocamlc -pack) as a single Sundials module, so the us=
er sees a<br>
&gt;&gt;&gt;&gt; Sundials.Public module instead of just Public.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Is this possible?=C2=A0 Right now, we just collect public.=
cmo and<br>
&gt;&gt;&gt;&gt; private.cmo into sundials.cma and throw away private.cmi.=
=C2=A0 But this<br>
&gt;&gt;&gt;&gt; doesn&#39;t work with packing:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; $ ocamlc -pack -o sundials.cmo private.cmo public.cmo<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; demands that there be a private.cmi.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; --<br>
&gt;&gt;&gt;&gt; Jun Inoue<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; --<br>
&gt;&gt;&gt;&gt; Caml-list mailing list.=C2=A0 Subscription management and =
archives:<br>
&gt;&gt;&gt;&gt; <a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=
=3D"noreferrer" target=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/cam=
l-list</a><br>
&gt;&gt;&gt;&gt; Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/gr=
oup/ocaml_beginners" rel=3D"noreferrer" target=3D"_blank">http://groups.yah=
oo.com/group/<wbr>ocaml_beginners</a><br>
&gt;&gt;&gt;&gt; Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs=
" rel=3D"noreferrer" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>b=
ugs</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
<br>
<br>
<br>
-- <br>
Jun Inoue<br>
<br>
-- <br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/<wbr=
>ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>bugs</a><br>
</div></div></blockquote></div><br></div>

--000000000000c52510056ad2b461--
