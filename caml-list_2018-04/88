Return-Path: <ivg@ieee.org>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id C2B7382416
	for <caml-list@sympa.inria.fr>; Thu, 26 Apr 2018 17:06:24 +0200 (CEST)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=ivg@ieee.org; spf=Pass smtp.mailfrom=ivg@ieee.org; spf=None smtp.helo=postmaster@mail-lf0-f47.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  ivg@ieee.org) identity=pra; client-ip=209.85.215.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  ivg@ieee.org designates 209.85.215.47 as permitted sender)
  identity=mailfrom; client-ip=209.85.215.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org"; x-sender="ivg@ieee.org";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-lf0-f47.google.com) identity=helo;
  client-ip=209.85.215.47;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="ivg@ieee.org";
  x-sender="postmaster@mail-lf0-f47.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3ArNHxqBBduNXTnKtQzq3/UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPTyosbcNUDSrc9gkEXOFd2Cra4c0KyO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUijexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzcaTAc9MHXmpBRtheWDBdAo2y?=
 =?us-ascii?q?aIsPCvAOPeder4Lgo1cDoh+zCQyqCejyyDFHm2X20LU43OQvEQ/I0g8uEc8Qvn?=
 =?us-ascii?q?vIt9j6LrseXPqvwaXU0TnObfVb0ir95ojSdRAhpOmBU7FuccXLz0kkCgLLjlKM?=
 =?us-ascii?q?qYziITOayuQNs2mH7+p7SOmijG8nqx9+ojW0x8cjlJfGiZwPxlDD7yV5z584KN?=
 =?us-ascii?q?ulQ0B1Zt6kFYFftyCcN4ZuWsMiXnpnuCI7yrIao5K7eSwKxIw/xx7FavyHbZKH?=
 =?us-ascii?q?4g79W+qLJDd4gGppeLO5hxao8Eiv0PfwVseu0FpSoSpFk8XMtnAQ1xPI8MSHS/?=
 =?us-ascii?q?x98l+u2TaOywDT6vxELlsumaXHLJ4hx6Y8l5oJvkTDGS/2n1/6g7ORdkUh/OWj?=
 =?us-ascii?q?9ufpYq3+q5OCK4N5jhvyP6cul8ClH+g0LwgDU3KU9Om+0rDo4Ff3T69QjvIsl6?=
 =?us-ascii?q?nUqJDaKtofpq6+GwJV15ws6xe7Dzu/1NQYk2ULIEtLeB+IjYXlIV7OIPf/Dfew?=
 =?us-ascii?q?h1Sjji1nyOzBPr3kGpnNL37Dn6n9fbtl9UJQ1A4+wcpc6p9UEL0NPu//V0/ruN?=
 =?us-ascii?q?HXDBI1Kwm0zPzmCNV52IMeQ2WPAqqBPaPTr1+I6fkiI+iSa4ALpjnxMf8l5+Th?=
 =?us-ascii?q?jXMhg18SYbGp3YcLaHC/BvlpP1+WYX/ogtsYFWcKvxE+TPDxhV2ZUT9TYm6yUL?=
 =?us-ascii?q?gm6jE6DoKmF4bDSZq3jLyPxifoVqFRM0JbDBitF3D1es3QWeoKLiabJ8VtmxQL?=
 =?us-ascii?q?ULGgT8kq0hT45yHgzL8yD/Td/GU3so7kytN15vHI3UUz6zNcDsmQ3ieKVW4izT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6UtxqEBTI0B17ZySg4/cKXk4al/AtH2VBjGe47RGler?=
 =?us-ascii?q?T9jgBis+HIton40+Jn1lEtDntSjtmjKwCuZNxb2GCZFy9bjTjSCoepRNjk3e3a?=
 =?us-ascii?q?xktGEIB8tCMWr82/x6/gnXQorHywCXy/nseqMb0yrAsmyEyDjWsQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DEAACk6eFahi/XVdFbGwEBAQEDAQEBC?=
 =?us-ascii?q?QEBAYNnPRdjKAqDYYEdk1yBdIEPgUAnhQuHMYUEgQ4DUwsjgxKBNwKCPQcZBwE?=
 =?us-ascii?q?ENBQBAgEBAQEBAQEBARMBAQEICwsIKCMMgjUkgkoBAgIBIwQZAQEsCwEECwsLG?=
 =?us-ascii?q?h0CAiEBEgEFAQoSBhMShGUDCAUID5w+PIoYbYFpM4JvAQEFhBcDCoErgj0IEod?=
 =?us-ascii?q?/gVQ/g2wugk83CwICgRgOZYJTglSGEAh8kEssCIVjhWiCfYFximSJPUWGKg8DH?=
 =?us-ascii?q?oEEDCeBc30IOw0NFwaCDAmBZyQaGoM0gT6BJoE8hk4jMAGOdII3AQE?=
X-IPAS-Result: =?us-ascii?q?A0DEAACk6eFahi/XVdFbGwEBAQEDAQEBCQEBAYNnPRdjKAq?=
 =?us-ascii?q?DYYEdk1yBdIEPgUAnhQuHMYUEgQ4DUwsjgxKBNwKCPQcZBwEENBQBAgEBAQEBA?=
 =?us-ascii?q?QEBARMBAQEICwsIKCMMgjUkgkoBAgIBIwQZAQEsCwEECwsLGh0CAiEBEgEFAQo?=
 =?us-ascii?q?SBhMShGUDCAUID5w+PIoYbYFpM4JvAQEFhBcDCoErgj0IEod/gVQ/g2wugk83C?=
 =?us-ascii?q?wICgRgOZYJTglSGEAh8kEssCIVjhWiCfYFximSJPUWGKg8DHoEEDCeBc30IOw0?=
 =?us-ascii?q?NFwaCDAmBZyQaGoM0gT6BJoE8hk4jMAGOdII3AQE?=
X-IronPort-AV: E=Sophos;i="5.49,330,1520895600"; 
   d="scan'208,217";a="324617662"
Received: from mail-lf0-f47.google.com ([209.85.215.47])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 26 Apr 2018 17:06:23 +0200
Received: by mail-lf0-f47.google.com with SMTP id b23-v6so31289204lfg.4
        for <caml-list@inria.fr>; Thu, 26 Apr 2018 08:06:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ieee-org.20150623.gappssmtp.com; s=20150623;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=o01+kuPe7Gjo20y53kbnp56K4dNEJ33ZHbMLVv/bV4g=;
        b=Ui6ESTtO4Ev52g0j626rTAisFDktcTom2fHehwTE4IQWTRIpbgbelHV8lNkEoKI4ih
         CewABGiP8zL8ZaqI8AS1LaF7W2LQyJRLjaxueWvXIwVNJpvYTfIxoc3Ccxbl+4Un6Bso
         RS6ReCLMtVYdWrSm96FkwCn61UlALEn4HWJDo4XSa6+lYYRbJv3h9/WVJoYoA4uXCl7/
         hgY5rh22+IiabkBi0ujyJvOzm2NERpJUhSNRtTs2NpX4VkB5ZkiLVt7ClJ3TjZLoaDNb
         1QVggZzBc4ZeY6W/p4RHATJ1QxZWQ5hoM1uhmRfSPcY3AF1EEyc+9+p4bzEfwqV45QOy
         KuFQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to:cc;
        bh=o01+kuPe7Gjo20y53kbnp56K4dNEJ33ZHbMLVv/bV4g=;
        b=Ai1LAfn84R4lD1vuLb6FydX7vMfIU0hDu2eHCRVA/QbewG3eEFDYZOhJtpgB5mVbqT
         FF/BO2FpTCTenUY9lDlCpSnp6HqkJThAXt5GVrLIUS13IEnGnDqyL6jMJepxCwQcqHB4
         ia4z/5U9zwhwqpzz5stROKO10fE/uGQQkSEjqJzXDia3TbORv+7eu4pHDNEK7FeN66nO
         86P+IziIi2E/NnN/6R6Yzn8iYwGfILpXrU1H5piYC/OA66D+S79cBxt6i03H9TvsayHK
         PKKpsjr3MyUJBcIYU3ZavyqGiMlfpAKEP0lWgxlvthVBshyKSb2qVDBuUR6ImstSNZYt
         I3pQ==
X-Gm-Message-State: ALQs6tDskR6pV6+R9q7AfvDWCCXX1hn3X+Xsd5k5iVTWYz9Rzhmoqy2O
	zP7gp/njoLVq0s6QrhY93DM+rZpQETwvUQxWz/Ef1Q==
X-Google-Smtp-Source: AIpwx48lwMQ7N/3BUzoHMJty9R2RoQhHuYBUQZ6hpOecUaeyX0ELagV6rgeskjx+0jv6yPE/qXKiojVYxBb08pKq6/U=
X-Received: by 10.46.158.5 with SMTP id e5mr23091445ljk.16.1524755182425; Thu,
 26 Apr 2018 08:06:22 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.46.134.68 with HTTP; Thu, 26 Apr 2018 08:06:21 -0700 (PDT)
In-Reply-To: <CA+ZA8QzuJg8iZC=aktSNKhnJuHU0ghVOuCV5X05t+5D2bJd5xA@mail.gmail.com>
References: <CA+ZA8QzuJg8iZC=aktSNKhnJuHU0ghVOuCV5X05t+5D2bJd5xA@mail.gmail.com>
From: Ivan Gotovchits <ivg@ieee.org>
Date: Thu, 26 Apr 2018 11:06:21 -0400
Message-ID: <CALdWJ+ybpxNYtp3Pu75pWL_F=0=TfVGx8k0mBXbmJb+_QSSmLw@mail.gmail.com>
To: Jun Inoue <jun.lambda@gmail.com>
Cc: caml list <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="883d24f1b2d804bfa6056ac1bbaa"
Subject: Re: [Caml-list] Type That's Concrete From Within A Library Abstract
 From Without

--883d24f1b2d804bfa6056ac1bbaa
Content-Type: text/plain; charset="UTF-8"

Hi Jun,

You can achieve this by implying an extra layer of indirection, i.e., by
having two levels of interfaces. For example,

   * A.ml - implementation of module A
   * A.mli - private interface of module A
   * B.ml  - implementation of module B that may rely on anything in A.mli
   * Std.ml - a set of modules that you would like to import, e.g., `module
A = A`, `module B = B`
   * Std.mli - public interface specification


Next, you deploy `std.cmxa` and `std.cmi` but keep `a.cmi` and `b.cmi` to
yourself. This will prevent users from accessing your private modules A and
B directly. (In oasis you can use PrivateModules stanza for this)

Now you will have `Std.A` and `Std.B` that exposes as much as you want. Not
sure whether it will work with the `-pack`, but you can use this approach
instead of it. This is how we address the same issue in [BAP][1]

Cheers,
Ivan

[1]: https://github.com/BinaryAnalysisPlatform/bap


On Thu, Apr 26, 2018 at 10:18 AM, Jun Inoue <jun.lambda@gmail.com> wrote:

> Dear list,
>
> Is there a way to make a type concrete inside a library, yet opaque to
> library users, preferably in a way that works with -pack?  This is a
> nagging issue in our sundials package
> (http://inria-parkas.github.io/sundialsml/).
>
> Basically, we have a type declared in one module of the library that
> is pattern-matched upon in other modules, like:
>
> (* private.ml *)
> type opaque_type = Foo | Bar
>
> (* public.ml *)
> let f : opaque_type -> int = function
>   | Foo -> 0
>   | Bar -> 1
>
> There are a few constraints:
> - We don't want users to be able to pattern-match on opaque_type.
> - We need multiple modules in the library to pattern-match on
> opaque-type (so moving opaque_typ e to public.ml is not an option).
> - To avoid namespace pollution, we want to pack the whole library
> (with ocamlc -pack) as a single Sundials module, so the user sees a
> Sundials.Public module instead of just Public.
>
> Is this possible?  Right now, we just collect public.cmo and
> private.cmo into sundials.cma and throw away private.cmi.  But this
> doesn't work with packing:
>
> $ ocamlc -pack -o sundials.cmo private.cmo public.cmo
>
> demands that there be a private.cmi.
>
> --
> Jun Inoue
>
> --
> Caml-list mailing list.  Subscription management and archives:
> https://sympa.inria.fr/sympa/arc/caml-list
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> Bug reports: http://caml.inria.fr/bin/caml-bugs
>

--883d24f1b2d804bfa6056ac1bbaa
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hi Jun,</div><div><br></div>You can achieve this by i=
mplying an extra layer of indirection, i.e., by having two levels of interf=
aces. For example,=C2=A0<div><br></div><div>=C2=A0 =C2=A0* A.ml - implement=
ation of module=C2=A0A</div><div>=C2=A0 =C2=A0* A.mli=C2=A0- private interf=
ace of module=C2=A0A</div><div>=C2=A0 =C2=A0* B.ml=C2=A0 - implementation o=
f module=C2=A0B that may rely on anything in A.mli</div><div>=C2=A0 =C2=A0*=
 Std.ml - a set of modules that you would like to import, e.g., `module A =
=3D A`, `module B =3D B`=C2=A0</div><div>=C2=A0 =C2=A0* Std.mli=C2=A0- publ=
ic interface specification</div><div><br></div><div><br></div><div>Next, yo=
u deploy `std.cmxa` and `std.cmi` but keep `a.cmi` and `b.cmi` to yourself.=
 This will prevent users from accessing your private modules A and B direct=
ly. (In oasis you can use PrivateModules stanza for this)</div><div><br></d=
iv><div>Now you will have `Std.A` and `Std.B` that exposes as much as you w=
ant. Not sure whether it will work with the `-pack`, but you can use this a=
pproach instead of it. This is how we address the same issue in [BAP][1]</d=
iv><div><br></div><div>Cheers,</div><div>Ivan</div><div><br></div><div>[1]:=
=C2=A0<a href=3D"https://github.com/BinaryAnalysisPlatform/bap">https://git=
hub.com/BinaryAnalysisPlatform/bap</a></div><div>=C2=A0 =C2=A0</div></div><=
div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Thu, Apr 26, 20=
18 at 10:18 AM, Jun Inoue <span dir=3D"ltr">&lt;<a href=3D"mailto:jun.lambd=
a@gmail.com" target=3D"_blank">jun.lambda@gmail.com</a>&gt;</span> wrote:<b=
r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
1px #ccc solid;padding-left:1ex">Dear list,<br>
<br>
Is there a way to make a type concrete inside a library, yet opaque to<br>
library users, preferably in a way that works with -pack?=C2=A0 This is a<b=
r>
nagging issue in our sundials package<br>
(<a href=3D"http://inria-parkas.github.io/sundialsml/" rel=3D"noreferrer" t=
arget=3D"_blank">http://inria-parkas.github.<wbr>io/sundialsml/</a>).<br>
<br>
Basically, we have a type declared in one module of the library that<br>
is pattern-matched upon in other modules, like:<br>
<br>
(* <a href=3D"http://private.ml" rel=3D"noreferrer" target=3D"_blank">priva=
te.ml</a> *)<br>
type opaque_type =3D Foo | Bar<br>
<br>
(* <a href=3D"http://public.ml" rel=3D"noreferrer" target=3D"_blank">public=
.ml</a> *)<br>
let f : opaque_type -&gt; int =3D function<br>
=C2=A0 | Foo -&gt; 0<br>
=C2=A0 | Bar -&gt; 1<br>
<br>
There are a few constraints:<br>
- We don&#39;t want users to be able to pattern-match on opaque_type.<br>
- We need multiple modules in the library to pattern-match on<br>
opaque-type (so moving opaque_typ e to <a href=3D"http://public.ml" rel=3D"=
noreferrer" target=3D"_blank">public.ml</a> is not an option).<br>
- To avoid namespace pollution, we want to pack the whole library<br>
(with ocamlc -pack) as a single Sundials module, so the user sees a<br>
Sundials.Public module instead of just Public.<br>
<br>
Is this possible?=C2=A0 Right now, we just collect public.cmo and<br>
private.cmo into sundials.cma and throw away private.cmi.=C2=A0 But this<br>
doesn&#39;t work with packing:<br>
<br>
$ ocamlc -pack -o sundials.cmo private.cmo public.cmo<br>
<br>
demands that there be a private.cmi.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
-- <br>
Jun Inoue<br>
<br>
-- <br>
Caml-list mailing list.=C2=A0 Subscription management and archives:<br>
<a href=3D"https://sympa.inria.fr/sympa/arc/caml-list" rel=3D"noreferrer" t=
arget=3D"_blank">https://sympa.inria.fr/sympa/<wbr>arc/caml-list</a><br>
Beginner&#39;s list: <a href=3D"http://groups.yahoo.com/group/ocaml_beginne=
rs" rel=3D"noreferrer" target=3D"_blank">http://groups.yahoo.com/group/<wbr=
>ocaml_beginners</a><br>
Bug reports: <a href=3D"http://caml.inria.fr/bin/caml-bugs" rel=3D"noreferr=
er" target=3D"_blank">http://caml.inria.fr/bin/caml-<wbr>bugs</a><br>
</font></span></blockquote></div><br></div>

--883d24f1b2d804bfa6056ac1bbaa--
