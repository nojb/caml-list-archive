Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id OAA23385; Tue, 24 Jun 2003 14:36:07 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA23751 for <caml-list@pauillac.inria.fr>; Tue, 24 Jun 2003 14:36:06 +0200 (MET DST)
Received: from kurims.kurims.kyoto-u.ac.jp (kurims.kurims.kyoto-u.ac.jp [130.54.16.1])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h5OCa4X26641
	for <caml-list@inria.fr>; Tue, 24 Jun 2003 14:36:04 +0200 (MET DST)
Received: from localhost (suiren.kurims.kyoto-u.ac.jp [130.54.16.25])
	by kurims.kurims.kyoto-u.ac.jp (8.9.3p2/3.7W) with ESMTP id VAA23532;
	Tue, 24 Jun 2003 21:35:59 +0900 (JST)
To: bywang@saul.cis.upenn.edu
Cc: caml-list@inria.fr
Subject: Re: [Caml-list] copy of parametrized object
In-Reply-To: <200306241115.h5OBFH5U025183@saul.cis.upenn.edu>
References: <200306241115.h5OBFH5U025183@saul.cis.upenn.edu>
X-Mailer: Mew version 1.94.2 on Emacs 21.2 / Mule 5.0 (SAKAKI)
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20030624213608T.garrigue@kurims.kyoto-u.ac.jp>
Date: Tue, 24 Jun 2003 21:36:08 +0900
From: Jacques Garrigue <garrigue@kurims.kyoto-u.ac.jp>
X-Dispatcher: imput version 20000228(IM140)
Lines: 62
X-Spam: no; 0.00; jacques:01 caml-list:01 bow-yaw:01 bywang:01 val:01 instantiate:01 unsound:01 monomorphic:01 mutable:01 feasible:01 int:01 garrigue:01 polymorphic:01 instantiated:02 match:02 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

From: Bow-Yaw Wang <bywang@saul.cis.upenn.edu>

> I'd like to know how to make independent copies of parameterized 
> objects. Consider the following example:
> 
> # class ['a] t = object method id (x:'a) = x end;;
> class ['a] t : object method id : 'a -> 'a end
> # let o = new t;;
> val o : '_a t = <obj>
> # let p = Oo.copy o;;
> val p : < id : '_a -> '_a > = <obj>
> # o#id 1;;
> - : int = 1
> 
> After defining a simple parameterized class t, I create an
> object o of type '_a t and make p as a copy. After the type 
> '_a is instantiated to int, I'd expect p to retain its type
> < id : '_a -> '_a >. However, 
> 
> # p;;
> - : < id : int -> int > = <obj>

That's just the point of non-generalized variables: if you instantiate
them somewhere, the type is propagated everywhere. So as long as the
type of o is '_a t, there is no hope.

> So my questions are:
> 
> 1. Is there a way to make a copy of o so that it can be 
> instantiated differently?

No.

> 2. If not, is there any type-theoretic explanation? I'm
> just curious if it may make type system unsound.

In this case, this is pretty simple: '_a is not a polymorphic
variable, this is just a monomorphic type which is not yet known.
If you copy it, you just get a pointer to the same type.

As to why o has such a non-polymorphic type, this is due to the evily
famous value restriction: any function application result is
non-polymorphic, and an object construtctor is seen as a function
application.

A dangerous definition would be:

class ['a] t =
  object
    val mutable r = None
    method id (x:'a) =
      match r with Some y -> y | None -> r <- Some x; x
  end;;

> I'm aware of polymorphic methods. Unfortunately, the
> project I'm working on uses parameterized classes. Using
> polymorphic methods doesn't seem to be feasible at the
> moment. :(

I wonder what you need exactly.

Jacques

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

