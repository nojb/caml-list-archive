Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id CAA20155; Sat, 7 Jun 2003 02:27:48 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id CAA19712 for <caml-list@pauillac.inria.fr>; Sat, 7 Jun 2003 02:27:46 +0200 (MET DST)
Received: from mail2.tpgi.com.au (mail.tpgi.com.au [203.12.160.58])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h570RiT12034
	for <caml-list@inria.fr>; Sat, 7 Jun 2003 02:27:44 +0200 (MET DST)
Received: from ozemail.com.au (203-219-225-40-syd-ts24-2600.tpgi.com.au [203.219.225.40])
	(authenticated bits=0)
	by mail2.tpgi.com.au (8.12.9/8.12.9) with ESMTP id h570RZmb029051;
	Sat, 7 Jun 2003 10:27:36 +1000
Message-ID: <3EE13177.9080107@ozemail.com.au>
Date: Sat, 07 Jun 2003 10:27:35 +1000
From: John Max Skaller <skaller@ozemail.com.au>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:0.9.2.1) Gecko/20010901
X-Accept-Language: en-us
MIME-Version: 1.0
To: Brian Hurt <brian.hurt@qlogic.com>
CC: Chris Hecker <checker@d6.com>, Stefan Heimann <lists@stefanheimann.net>,
        Ocaml Mailing List <caml-list@inria.fr>
Subject: Re: [Caml-list] Automatic generation of mli files
References: <Pine.LNX.4.33.0306061404080.2857-100000@eagle.ancor.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Kaspersky-Antivirus: Passed
X-Spam: no; 0.00; ozemail:01 caml-list:01 mli:01 hecker:01 foo:01 inference:01 val:01 instantiate:01 functor:01 ocamlc:01 sux:99 toxteth:01 glebe:01 2037,:01 9660:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Brian Hurt wrote:

> On Fri, 6 Jun 2003, Chris Hecker wrote:

> type t = foo * bar * bang
> 
> Then several functions that use type t.  The type inference will come up 
> with types like:
>     val add: foo * bar * bang -> foo -> bar -> bang -> foo * bar * bang
> when what I wanted was:
>     vall add: t -> foo -> bar -> bang -> t
> 
> How do you deal with this?


The problem I have is that I instantiate a functor.

The ocamlc -i generated interface lists all the functions,
which sux big time, since one has to continually
reformat them to look pretty, and it's all clutter anyhow.

I'd rather see the interface instantiated.
Hmm .. can this be done?

-- 
John Max Skaller, mailto:skaller@ozemail.com.au
snail:10/1 Toxteth Rd, Glebe, NSW 2037, Australia.
voice:61-2-9660-0850


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

