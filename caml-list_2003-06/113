Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id VAA12863; Fri, 6 Jun 2003 21:21:45 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id VAA12758 for <caml-list@pauillac.inria.fr>; Fri, 6 Jun 2003 21:21:43 +0200 (MET DST)
Received: from relay.pair.com (relay.pair.com [209.68.1.20])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id h56JLgH03626
	for <caml-list@inria.fr>; Fri, 6 Jun 2003 21:21:42 +0200 (MET DST)
Received: (qmail 21395 invoked from network); 6 Jun 2003 19:21:41 -0000
Received: from arda.pair.com (HELO checkerdell.d6.com) (209.68.1.133)
  by relay.pair.com with SMTP; 6 Jun 2003 19:21:41 -0000
X-pair-Authenticated: 209.68.1.133
Message-Id: <4.3.2.7.2.20030606121624.016d8770@localhost>
X-Sender: checker@localhost
X-Mailer: QUALCOMM Windows Eudora Version 4.3.2
Date: Fri, 06 Jun 2003 12:21:17 -0700
To: Brian Hurt <brian.hurt@qlogic.com>
From: Chris Hecker <checker@d6.com>
Subject: Re: [Caml-list] Automatic generation of mli files
Cc: Brian Hurt <brian.hurt@qlogic.com>,
        Stefan Heimann <lists@stefanheimann.net>,
        Ocaml Mailing List <caml-list@inria.fr>
In-Reply-To: <Pine.LNX.4.33.0306061404080.2857-100000@eagle.ancor.com>
References: <4.3.2.7.2.20030606112653.039b1838@localhost>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
X-Spam: no; 0.00; hecker:01 checker:01 caml-list:01 mli:01 decoupling:01 dependencies:01 foo:01 chris:01 ocaml:01 interface:03 dynamic:03 exported:03 generally:05 i'm:07 opposed:08 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


>If I'm heavily modifying a file *and* it's interface, I generally don't
>even bother with a .mli file.

Yes, this is what I do as well.  It's very nice that you don't need an mli 
at all in ocaml, that makes for a nice dynamic process during 
development.  (See, I said something positive! :)

And, for having mlis around for decoupling for build dependencies (as 
opposed to having them for interface design, where you care about what's 
exported), ocaml -i > foo.mli works just fine.

But, if the tool was lightweight and easy enough, it could be useful.

Chris


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

