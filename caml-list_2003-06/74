Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA08658; Thu, 5 Jun 2003 00:13:36 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA08688 for <caml-list@pauillac.inria.fr>; Thu, 5 Jun 2003 00:13:34 +0200 (MET DST)
Received: from main.gmane.org (main.gmane.org [80.91.224.249])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h54MDXT17608
	for <caml-list@inria.fr>; Thu, 5 Jun 2003 00:13:33 +0200 (MET DST)
Received: from root by main.gmane.org with local (Exim 3.35 #1 (Debian))
	id 19NgSJ-0006ge-00
	for <caml-list@inria.fr>; Thu, 05 Jun 2003 00:10:03 +0200
X-Injected-Via-Gmane: http://gmane.org/
To: caml-list@inria.fr
Received: from news by main.gmane.org with local (Exim 3.35 #1 (Debian))
	id 19NgHH-00062I-00
	for <gmane-comp-lang-caml-inria@m.gmane.org>; Wed, 04 Jun 2003 23:58:39 +0200
From: Alan Post <apost@recalcitrant.org>
Subject: [Caml-list] Re: yet another benchmark: List.map vs tail recursive map
Date: Wed, 4 Jun 2003 21:58:39 +0000 (UTC)
Lines: 14
Message-ID: <slrnbdsr0t.6fv.apost@recalcitrant.org>
References: <20030604120011.GA12262@fistandantilus.takhisis.org> <20030604.171327.37652101.debian00@tiscali.be> <20030604202317.GF18515@fistandantilus.takhisis.org> <3EDE572C.2010707@quasar.ipa.nw.ru>
X-Complaints-To: usenet@main.gmane.org
User-Agent: slrn/0.9.7.4 (NetBSD)
X-Spam: no; 0.00; ede:99 572:99 quasar:01 voinov:01 callback:01 extlib:01 sourceforge:01 alexander:01 benchmark:02 ipa:02 stack:02 pointer:03 wrote:03 recursive:03 tail:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

In article <3EDE572C.2010707@quasar.ipa.nw.ru>, Alexander V. Voinov wrote:
>
> A year ago I 'benchmarked' almost exactly the alternatives you discuss 
> within some real application. The difference was substantial, and I had 
> to work with 'lots of elements'. List.rev took significant time, you 
> can't neglect this. I even thought about implementing List.map as a C 
> extension which calls the first argument as a callback and use pointer 
> operations to build the list without consuming the stack. Not sure if 
> it's a _proper-way-to-go_ :-).

Have you seen the List.map provided by the extlib guys?

http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/ocaml-lib/extlib-dev/extList.ml


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

