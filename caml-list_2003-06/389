Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id PAA14878; Thu, 26 Jun 2003 15:15:20 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA14987 for <caml-list@pauillac.inria.fr>; Thu, 26 Jun 2003 15:15:19 +0200 (MET DST)
Received: from mail.speakeasy.net (mail7.speakeasy.net [216.254.0.207])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h5QDFIj14570
	for <caml-list@inria.fr>; Thu, 26 Jun 2003 15:15:18 +0200 (MET DST)
Received: (qmail 16291 invoked from network); 26 Jun 2003 13:15:16 -0000
Received: from unknown (HELO grace.speakeasy.org) ([216.254.0.2])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail7.speakeasy.net (qmail-ldap-1.03) with DES-CBC3-SHA encrypted SMTP
          for <xavier.leroy@inria.fr>; 26 Jun 2003 13:15:16 -0000
Date: Thu, 26 Jun 2003 06:15:16 -0700 (PDT)
From: brogoff@speakeasy.net
To: Xavier Leroy <xavier.leroy@inria.fr>
cc: "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] Recursive modules and polymorphic recursion
In-Reply-To: <20030626141415.B11992@pauillac.inria.fr>
Message-ID: <Pine.LNX.4.44.0306260555370.32188-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; brogoff:01 caml-list:01 recursion:01 publi:01 elt:01 3.07:01 speakeasy:01 rec:01 polymorphic:01 modules:02 module:03 wrote:03 recursive:03 hack:03 rarely:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Thu, 26 Jun 2003, Xavier Leroy wrote:
> As the design document explains
> (http://pauillac.inria.fr/~xleroy/publi/recursive-modules-note.pdf),
> the current implementation of recursive modules is such that a definition
>         module rec A : SIGA = StructA
> is accepted only if all value components of SIGA are functions. 

I guess I was thrown by the fact that the similar

module rec ASet : Set.S with type elt = A.t = Set.Make(A) 
and A : (* ... etc ...*) 

is accepted, and by the fact that I rarely comprehend this kind of stuff by 
reading alone, but instead have to read/hack/ask/read/... 

> The decision to integrate recursive modules in 3.07 was taken on the
> grounds that imperfect recursive modules are still better than no
> recursive modules at all.  Be patient: perfection takes time.

Of course. I'm glad that decision was taken, and I think what's there is 
pretty good, even if imperfect. I expect that perfection would take forever, 
which will certainly exhaust anyone's patience. 

-- Brian

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

