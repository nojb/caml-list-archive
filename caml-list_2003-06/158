Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id LAA15851; Mon, 9 Jun 2003 11:44:31 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id LAA15048 for <caml-list@pauillac.inria.fr>; Mon, 9 Jun 2003 11:44:29 +0200 (MET DST)
Received: from pareto.inria.fr.inria.fr (lamarck.inria.fr [128.93.1.21])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h599iNH02191;
	Mon, 9 Jun 2003 11:44:23 +0200 (MET DST)
Date: Mon, 09 Jun 2003 11:40:57 +0200
Message-ID: <lwadcrvb9y.wl@inria.fr>
From: Jun.Furuse@inria.fr
To: Chris Hecker <checker@d6.com>
Cc: Pierre Weis <pierre.weis@inria.fr>, Oleg Trott <oleg_trott@columbia.edu>,
        John Max Skaller <skaller@ozemail.com.au>,
        "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: easy print and read (was: [Caml-list] Why are arithmetic  functions not polymorph?)
In-Reply-To: <4.3.2.7.2.20030608014051.03139b88@localhost>
References: <200306060308.42724.oleg_trott@columbia.edu>
	<Pine.LNX.4.33.0305231259070.2037-100000@eagle.ancor.com>
	<3EDC152C.5070906@ozemail.com.au>
	<20030606124626.A27959@pauillac.inria.fr>
	<4.3.2.7.2.20030608014051.03139b88@localhost>
User-Agent: Wanderlust/2.10.0 (Venus) SEMI/1.14.4 (Hosorogi) FLIM/1.14.4
 (=?ISO-8859-4?Q?Kashiharajing=FE-mae?=) APEL/10.4 MULE XEmacs/21.4 (patch
 12) (Portable Code) (i386-debian-linux)
MIME-Version: 1.0 (generated by SEMI 1.14.4 - "Hosorogi")
Content-Type: text/plain; charset=US-ASCII
X-Spam: no; 0.00; furuse:01 caml-list:01 hecker:01 generics:01 generic:01 inlining:01 g'caml:01 statically:01 chris:01 ocaml:01 0700,:01 arithmetic:01 identifier:03 complex:03 wrote:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello,

At Sun, 08 Jun 2003 01:49:21 -0700,
Chris Hecker wrote:
> 
> >All this hard work needed a long time to mature (1995 -> 2003!) and is
> >now in a stable and satisfying state.
> 
> This is great.  My concern about generics in ocaml is one of efficiency.  I 
> read the paper (as much as I could understand), and the flow array stuff 
> seems smart and better than type pattern matching in the case where you 
> don't know the definition of the generic function at the call point, but is 
> there going to be inlining with generics as well in this initial 
> implementation? 

This is one of the TODO items of G'Caml. 
You can hope that inlining of very simple generic values such as plus
will be available in near future, (but not in the next release, sorry.)
The inlining will occur only when:

  * The type of a generic value instance is statically known.
  * The corresponding overloaded definition is an identifier, such as
	(+) and (+.)

Inlining more complex generic values such as double 
(let double x = plus x x) will be another story...

--
Jun

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

