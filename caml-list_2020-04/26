Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 1A2217EEDF
	for <caml-list@sympa.inria.fr>; Sat, 18 Apr 2020 12:01:44 +0200 (CEST)
Authentication-Results: mail3-smtp-sop.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qk1-f169.google.com
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.222.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail3-smtp-sop.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.222.169 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.222.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail3-smtp-sop.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk1-f169.google.com) identity=helo;
  client-ip=209.85.222.169;
  receiver=mail3-smtp-sop.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qk1-f169.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Au5FP7x+cbRxfNP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?0+gcTK2v8tzYMVDF4r011RmSAtWdtqoMotGVmp6jcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47WLmffqXyq7DMUBg63dU8s?=
 =?us-ascii?q?fry0ScbuiJGU2uaz8J3SKyxTjTv1NbppJRSerB6XscIWiM1rIeAz0k2ajGFPfr?=
 =?us-ascii?q?F5zGlyJF+X1y335sqq8YQrpytZsegg+soGSq76cr41V5RXCT0nNyY+48i95kqL?=
 =?us-ascii?q?dheG+nZJCjZeqRFPGQWQqUiiBs6s4Bu/jfJ03WyhBeOzTb0wXm78vaJiSRutkS?=
 =?us-ascii?q?RecjBgrjCRhct3g6ZW5hmmok4nmtKGUMSuLPN7O5jlU5YCX2MYB5ReUiVABsW3?=
 =?us-ascii?q?aI5dV7NQb9YdlJH0oh41lTX7AACtAO31zToR3y352KQ716IqFgSUhQE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B9BgBAz5pef6neVdFmDhABCxyGFyqEH?=
 =?us-ascii?q?YEcgl6LAoIRigN1jm+BZwoBAwEMLwQBAYREAoIPHAcBBDQTAhABAQUBAQECAQI?=
 =?us-ascii?q?DBAETAQEJCwsIJ4VfDII7BQEjAQaDBwEBAQIBEhEEGQEbFwYBAwELBgMCCzcCA?=
 =?us-ascii?q?iIBEQEFARwGEwgahU8BAw4gk0uPEIEEPYsofxYFAReDAQWEeQoZJw1iA4E0Agc?=
 =?us-ascii?q?SgSaMOQ+BTD+BR4JaPoQUg0yCXwSwdXsHgkd9BJZiHZw/qFiEDA8jgUaBeTMaI?=
 =?us-ascii?q?1AxgjhQGA2RWAwXg1CKGD9CMI1dgVQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0B9BgBAz5pef6neVdFmDhABCxyGFyqEHYEcgl6LAoIRigN?=
 =?us-ascii?q?1jm+BZwoBAwEMLwQBAYREAoIPHAcBBDQTAhABAQUBAQECAQIDBAETAQEJCwsIJ?=
 =?us-ascii?q?4VfDII7BQEjAQaDBwEBAQIBEhEEGQEbFwYBAwELBgMCCzcCAiIBEQEFARwGEwg?=
 =?us-ascii?q?ahU8BAw4gk0uPEIEEPYsofxYFAReDAQWEeQoZJw1iA4E0AgcSgSaMOQ+BTD+BR?=
 =?us-ascii?q?4JaPoQUg0yCXwSwdXsHgkd9BJZiHZw/qFiEDA8jgUaBeTMaI1AxgjhQGA2RWAw?=
 =?us-ascii?q?Xg1CKGD9CMI1dgVQBAQ?=
X-IronPort-AV: E=Sophos;i="5.72,398,1580770800"; 
   d="scan'208,217";a="346318144"
X-MGA-submission: =?us-ascii?q?MDEXcXiZYTvEiuAZ7PgBY84WHRLCFpR7cV5YWw?=
 =?us-ascii?q?ipOGg3JHNWXkdPb0VeA+0ajkvV+LjT6gGoZx9fJNPRu543UDonyOtizZ?=
 =?us-ascii?q?aKVemJRCBUsgc9gZmhnY/S01VUhBS7cQQYAmjGJkIl5wHyBLbiFqgkuK?=
 =?us-ascii?q?TecVHICNXiJYRjIGiZICLdQQ=3D=3D?=
Received: from mail-qk1-f169.google.com ([209.85.222.169])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/AES256-GCM-SHA384; 18 Apr 2020 12:01:42 +0200
Received: by mail-qk1-f169.google.com with SMTP id 20so5177285qkl.10
        for <caml-list@inria.fr>; Sat, 18 Apr 2020 03:01:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=yviKRh7GnhDoQ7JmmUcxZHCfmO+FtKgwaIVywg3KTW8=;
        b=lz4nzoho0tr8S+Vz4nbWnfgD5hRx6IpNy47iJx5uJpIY0hHhzF4r4HMmg2U6z+XSEe
         gFrn6B0HLzvBxorDbPtqpOyUMLhIK5MsybPHSv60lkD2Xx/v9w2v1LgtU3yeYcslNeau
         tpU0+KMbvc9KFOFyJY1t5aBgD91mHrFEJHRsQCNIzeAB1+sViUR0CFYybPJuM7sYVIen
         WztFxslUafL/F2l3ppEU3wz1mXaS938TawX+6L3K7EkVyCnOrvXg/wPHpKkFejPbMwcA
         H+WcRHxK6iyWjDAG1Qy/YiMPXppU62Altoq2DqDNJFdOWNzMFi+phLYQJoce01pKVsxG
         j7BQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=yviKRh7GnhDoQ7JmmUcxZHCfmO+FtKgwaIVywg3KTW8=;
        b=m61Jto4l0ddrxRWrJQytnVBkYjO865D80FjgQ3BRLXB/QjU1xkd8DcEAizRShFfcwA
         GweeU0vySqPJgMI0FlqjmPkIIgSA8M2g+UYb6wcOm1jT9QBPCdH7aBPveguDAsUpX2Ei
         afg5McTMpoAmzu7l7GVyIvp27OylxBG+d/c5/LyfaZH61zpk92LSAO5+fuKCfsMb7x8w
         Z1+2o1SRBvUXXnl0+t34GDa9FtaffStAB40dl//Sgipxo/RFcZX7Hcx8ha4qVvPXo7bP
         +8XwckxZTx8OSzqBkqyAfyPBRRwE1xA2qp2tRzctGm6o9ULz7U51LVYHr6fc093iKA4Y
         6sFg==
X-Gm-Message-State: AGi0Puau5HWVYR1fgv8W71L2muxWZuJFwY4zXv8NfkhPzcO3DI6FRa9R
	CHgNxAE98yuzXIaXhrp5n8MOW6m/DW7MyCiD+0KCGVx5XX8=
X-Google-Smtp-Source: APiQypKqLUEb0z46/wQEMmR0NHnTyoq0JAN65fnboBF6qnLR1o7b6P/l3x+y82iXjmgINaYl0m267e0OpZbzpWSMNV4=
X-Received: by 2002:a37:a45:: with SMTP id 66mr7113492qkk.395.1587204101557;
 Sat, 18 Apr 2020 03:01:41 -0700 (PDT)
MIME-Version: 1.0
References: <20200418022319.GA75735@pllab.is.ocha.ac.jp> <CAPFanBHvrnTqq1q0Ony4yqGvZPr9odKw_orZoA5Lje6T_RDRCA@mail.gmail.com>
 <20200418094736.GA80393@pllab.is.ocha.ac.jp>
In-Reply-To: <20200418094736.GA80393@pllab.is.ocha.ac.jp>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sat, 18 Apr 2020 12:01:01 +0200
Message-ID: <CAPFanBFDkgLrXPDJJEY3AAVev3Q0VNn_AQJOSEvRZwtKmErb2g@mail.gmail.com>
To: Kenichi Asai <asai@is.ocha.ac.jp>
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="000000000000a8d1d105a38dc0ef"
Subject: Re: [Caml-list] Locally abstract parameterized types?

--000000000000a8d1d105a38dc0ef
Content-Type: text/plain; charset="UTF-8"

Dear Kenichi,

You can have existentials with GADTs:

  type _ t =
  | A : 'a * ('a -> 'v t) -> 'v t
  | V : 'v -> 'v t

  let test : bool t = A (3, fun x -> V true)

(Another approach, simpler than modules, is to use a double universal
encoding:
  (exists a. T[a])
becomes
  (forall b. (forall a. T[a] -> b) -> b)
)



On Sat, Apr 18, 2020 at 11:47 AM Kenichi Asai <asai@is.ocha.ac.jp> wrote:

> Thank you, Gabriel.
>
> > No, this is currently not supported. For this use-case you will have to
> use
> > modules, typically a functor (in some circumstances a first-class module
> > parameter may work as well, if the return type does not depend on the
> > parameter).
>
> Let me ask a possibly related question.  I want to define types
> similar to the following:
>
> type 'v pair_t = {pair : 'a. 'a * ('a -> 'v t)}
> and 'v t =
>   A of 'v pair_t
> | V of 'v
>
> but where the type 'a of the pair field should be existential, rather
> than universal.  Since the above definition is universal, I get an
> error for the following definition:
>
> let test : bool t = A {pair = (3, fun x -> V true)}
>
> Error: This field value has type int * (int -> bool t)
>        which is less general than 'a. 'a * ('a -> 'v t)
>
> To implement an existential type, we need to use modules.  Let me try.
> If 'v pair_t does not depend on 'v t, for example, if the second
> element of the pair has type 'a -> 'v (rather than 'a -> 'v t), I
> could write as follows:
>
> module type Pair1_t = sig
>   type a
>   type v
>   val pair : a * (a -> v)   (* not a -> v t *)
> end
>
> type 'v t1 =
>   A of (module Pair1_t with type v = 'v)
> | V of 'v
>
> Now I can define (3, fun x -> true) as follows:
>
> let test1 : bool t1 =
>   let module Pair1 = struct
>     type a = int
>     type v = bool
>     let pair = (3, fun x -> true)
>   end in
>   A (module Pair1)
>
> On the other hand, if pair_t did not have a type parameter, for
> example, if the parameter is fixed to bool, I could write as follows:
>
> module type Pair2_t = sig
>   type a
>   type t
>   val pair : a * (a -> t)   (* not a -> v t *)
> end
>
> type t2 =
>   A of (module Pair2_t with type t = t2)
> | V of bool
>
> Now I can define (3, fun x -> V true) as follows:
>
> let test2 : t2 =
>   let module Pair2 = struct
>     type a = int
>     type t = t2
>     let pair = (3, fun x -> V true)
>   end in
>   A (module Pair2)
>
> My question is if we can combine these two to achieve my original
> goal.  I first write:
>
> module type Pair3_t = sig
>   type a
>   type v
>   type 'a t
>   val pair : a * (a -> v t)
> end
>
> and tried to define:
>
> type 'v t3 =
>   A of (module Pair3_t with type v = 'v and type 'a t = 'a t3)
> | V of 'v
>
> but I got the following error:
>
> Error: invalid package type: parametrized types are not supported
>
> If mutual recursion between Pair3_t and t3 is allowed, that would also
> be OK.  But if I try to connect the two definitons with "and", I get a
> syntax error.
>
> You mention a functor, which is suggestive.  I tried to use a
> functor, but so far without success.  Can I define my types using a
> functor?
>
> Thank you in advance.  Sincerely,
>
> --
> Kenichi Asai
>

--000000000000a8d1d105a38dc0ef
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Dear Kenichi,</div><div><br></div><div>You can have e=
xistentials with GADTs:</div><div><br></div><div>=C2=A0 type _ t =3D<br>=C2=
=A0 | A : &#39;a * (&#39;a -&gt; &#39;v t) -&gt; &#39;v t<br>=C2=A0 | V : &=
#39;v -&gt; &#39;v t<br><br>=C2=A0 let test : bool t =3D A (3, fun x -&gt; =
V true)</div><div><br></div><div>(Another approach, simpler than modules, i=
s to use a double universal encoding:</div><div>=C2=A0 (exists a. T[a])</di=
v><div>becomes</div><div>=C2=A0 (forall b. (forall a. T[a] -&gt; b) -&gt; b=
)</div><div>)<br></div><div><br></div><div><br></div></div><br><div class=
=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Sat, Apr 18, 2020=
 at 11:47 AM Kenichi Asai &lt;<a href=3D"mailto:asai@is.ocha.ac.jp">asai@is=
.ocha.ac.jp</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex">Thank you, Gabriel.<br>
<br>
&gt; No, this is currently not supported. For this use-case you will have t=
o use<br>
&gt; modules, typically a functor (in some circumstances a first-class modu=
le<br>
&gt; parameter may work as well, if the return type does not depend on the<=
br>
&gt; parameter).<br>
<br>
Let me ask a possibly related question.=C2=A0 I want to define types<br>
similar to the following:<br>
<br>
type &#39;v pair_t =3D {pair : &#39;a. &#39;a * (&#39;a -&gt; &#39;v t)}<br>
and &#39;v t =3D<br>
=C2=A0 A of &#39;v pair_t<br>
| V of &#39;v<br>
<br>
but where the type &#39;a of the pair field should be existential, rather<b=
r>
than universal.=C2=A0 Since the above definition is universal, I get an<br>
error for the following definition:<br>
<br>
let test : bool t =3D A {pair =3D (3, fun x -&gt; V true)}<br>
<br>
Error: This field value has type int * (int -&gt; bool t)<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0which is less general than &#39;a. &#39;a * (&#3=
9;a -&gt; &#39;v t)<br>
<br>
To implement an existential type, we need to use modules.=C2=A0 Let me try.=
<br>
If &#39;v pair_t does not depend on &#39;v t, for example, if the second<br>
element of the pair has type &#39;a -&gt; &#39;v (rather than &#39;a -&gt; =
&#39;v t), I<br>
could write as follows:<br>
<br>
module type Pair1_t =3D sig<br>
=C2=A0 type a<br>
=C2=A0 type v<br>
=C2=A0 val pair : a * (a -&gt; v)=C2=A0 =C2=A0(* not a -&gt; v t *)<br>
end<br>
<br>
type &#39;v t1 =3D<br>
=C2=A0 A of (module Pair1_t with type v =3D &#39;v)<br>
| V of &#39;v<br>
<br>
Now I can define (3, fun x -&gt; true) as follows:<br>
<br>
let test1 : bool t1 =3D<br>
=C2=A0 let module Pair1 =3D struct<br>
=C2=A0 =C2=A0 type a =3D int<br>
=C2=A0 =C2=A0 type v =3D bool<br>
=C2=A0 =C2=A0 let pair =3D (3, fun x -&gt; true)<br>
=C2=A0 end in<br>
=C2=A0 A (module Pair1)<br>
<br>
On the other hand, if pair_t did not have a type parameter, for<br>
example, if the parameter is fixed to bool, I could write as follows:<br>
<br>
module type Pair2_t =3D sig<br>
=C2=A0 type a<br>
=C2=A0 type t<br>
=C2=A0 val pair : a * (a -&gt; t)=C2=A0 =C2=A0(* not a -&gt; v t *)<br>
end<br>
<br>
type t2 =3D<br>
=C2=A0 A of (module Pair2_t with type t =3D t2)<br>
| V of bool<br>
<br>
Now I can define (3, fun x -&gt; V true) as follows:<br>
<br>
let test2 : t2 =3D<br>
=C2=A0 let module Pair2 =3D struct<br>
=C2=A0 =C2=A0 type a =3D int<br>
=C2=A0 =C2=A0 type t =3D t2<br>
=C2=A0 =C2=A0 let pair =3D (3, fun x -&gt; V true)<br>
=C2=A0 end in<br>
=C2=A0 A (module Pair2)<br>
<br>
My question is if we can combine these two to achieve my original<br>
goal.=C2=A0 I first write:<br>
<br>
module type Pair3_t =3D sig<br>
=C2=A0 type a<br>
=C2=A0 type v<br>
=C2=A0 type &#39;a t<br>
=C2=A0 val pair : a * (a -&gt; v t)<br>
end<br>
<br>
and tried to define:<br>
<br>
type &#39;v t3 =3D<br>
=C2=A0 A of (module Pair3_t with type v =3D &#39;v and type &#39;a t =3D &#=
39;a t3)<br>
| V of &#39;v<br>
<br>
but I got the following error:<br>
<br>
Error: invalid package type: parametrized types are not supported<br>
<br>
If mutual recursion between Pair3_t and t3 is allowed, that would also<br>
be OK.=C2=A0 But if I try to connect the two definitons with &quot;and&quot=
;, I get a<br>
syntax error.<br>
<br>
You mention a functor, which is suggestive.=C2=A0 I tried to use a<br>
functor, but so far without success.=C2=A0 Can I define my types using a<br>
functor?<br>
<br>
Thank you in advance.=C2=A0 Sincerely,<br>
<br>
-- <br>
Kenichi Asai<br>
</blockquote></div>

--000000000000a8d1d105a38dc0ef--
