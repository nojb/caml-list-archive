Return-Path: <cstork@ics.uci.edu>
X-Original-To: caml-list@yquem.inria.fr
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id D87C7BB84
	for <caml-list@yquem.inria.fr>; Mon, 17 Apr 2006 11:35:39 +0200 (CEST)
Received: from anthony.ics.uci.edu (anthony.ics.uci.edu [128.200.39.241])
	by concorde.inria.fr (8.13.0/8.13.0) with SMTP id k3H9Zcjt017787
	for <caml-list@yquem.inria.fr>; Mon, 17 Apr 2006 11:35:39 +0200
Received: (qmail 14037 invoked by uid 1000); 17 Apr 2006 09:36:35 -0000
Date: Mon, 17 Apr 2006 02:36:35 -0700
From: Christian Stork <cstork@ics.uci.edu>
To: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] recursion/iterator question
Message-ID: <20060417093635.GB13523@anthony.ics.uci.edu>
References: <1145221898.16349.259200911@webmail.messagingengine.com> <200604170106.23660.jon@ffconsultancy.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200604170106.23660.jon@ffconsultancy.com>
X-Archive: encrypt
User-Agent: Mutt/1.5.11
X-Miltered: at concorde with ID 4443616A.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; recursion:01 iterator:01 uncommon:01 enumeration:01 rec:01 ocaml:01 compiler:01 2006:98 2006:98 806:98 021:98 wrote:01 wrote:01 caml-list:01 caml-list:01 
X-Spam-Checker-Version: SpamAssassin 3.0.3 (2005-04-27) on yquem.inria.fr
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.3

On Mon, Apr 17, 2006 at 01:06:22AM +0100, Jon Harrop wrote:
> On Sunday 16 April 2006 22:11, Tato Thetza wrote:
> > Hi caml-list
> > Given a list, I would like to iterate over all triplets in the list. For
> > example, in mathematcs, its not uncommon to have expressions such as
> > "for all i,j,k in set X, do f(i,j,k)"

Just in case you didn't know, you're looking for an enumeration of all
"3-sets" or "combinations" out of the set X.  See for example
http://mathworld.wolfram.com/Combination.html .

> > The only way I can think of is to create a list with all triplets of the
> > list, so:
> >   triplets([1,2,3,4]) = [(1,2,3),(1,2,4),(1,3,4),(2,3,4)]
> > and take this list and map a function f to it.

> > questions:
> > 1) what would be the best way to write triplets?

> As 3-tuples, as you have done.

Or, if you choose to represent triplets as lists of three elements, you can
generalize Jon's solution to


  let rec combs = function
      | (0, _) -> [[]]
      | (n, es) when n > List.length es -> []
      | (n, e::es) -> List.map (fun l -> e::l) (combs (n-1, es)) @ combs (n, es)
  let triplets es = combs (3, es)


Question to the rest of the list:  The ocaml compiler complains with 
  ...
  Warning P: this pattern-matching is not exhaustive.
  Here is an example of a value that is not matched:
  (1, [])
  (However, some guarded clause may match this value.)
  ...

Am I right to assume there's no way to get rid of this warning short of
disabling P-warnings on the command line?  (I can't list all the lacking
patterns since they depend on n, right?)

-- 
Chris Stork   <>  Support eff.org!  <>   http://www.ics.uci.edu/~cstork/
OpenPGP fingerprint:  B08B 602C C806 C492 D069  021E 41F3 8C8D 50F9 CA2F

