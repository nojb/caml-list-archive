Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id DAA26253; Fri, 23 May 2003 03:35:28 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id DAA26604 for <caml-list@pauillac.inria.fr>; Fri, 23 May 2003 03:35:26 +0200 (MET DST)
Received: from psyche.kaba.or.jp (psyche.kaba.or.jp [202.249.19.1])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h4N1ZOH10745
	for <caml-list@inria.fr>; Fri, 23 May 2003 03:35:25 +0200 (MET DST)
Received: from mail.kaba.or.jp (cascade.kaba.or.jp [202.249.19.34])
	by psyche.kaba.or.jp (Postfix) with ESMTP
	id 0ABB822A3F; Fri, 23 May 2003 10:35:23 +0900 (JST)
Received: from WARP (dhcp04.kaba.or.jp [202.249.19.39])
	by mail.kaba.or.jp (Postfix) with SMTP
	id C8C1249A6B; Fri, 23 May 2003 10:35:22 +0900 (JST)
Message-ID: <00a801c320cb$6772e9e0$2713f9ca@WARP>
From: "Nicolas Cannasse" <warplayer@free.fr>
To: "hermanns" <jan_hermanns@gmx.de>, <caml-list@inria.fr>
References: <147AB214-8CA5-11D7-B453-003065A2962C@gmx.de>
Subject: Re: [Caml-list] Why are arithmetic functions not polymorph?
Date: Fri, 23 May 2003 10:34:08 +0900
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2800.1106
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1106
X-Spam: no; 0.00; cannasse:01 warplayer:01 caml-list:01 funtions:01 recursively:01 nicolas:01 arithmetic:01 exception:02 comparison:02 data:03 functions:05 structures:05 problem:07 perhaps:09 multiply:10 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

> I don't understand this, because comparison funtions ('<', '>', ...)
> are polymorph.
> So, where is the problem with arithmetic functions?

Because perhaps there is always a good way to compare two data structures
(with the exception of functions) since we can recursively compare their C
representations, but there is not a good way to actually add or even
multiply them.

For exemple it somehow makes sense to compare  [] with [2] ( in that case []
< [2] ) but what about [] / [2]  ?

Nicolas Cannasse

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

