Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA11999; Mon, 19 May 2003 17:23:04 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA11564 for <caml-list@pauillac.inria.fr>; Mon, 19 May 2003 17:23:03 +0200 (MET DST)
Received: from epexch01.qlogic.org ([63.170.40.3])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h4JFN1T08822
	for <caml-list@inria.fr>; Mon, 19 May 2003 17:23:02 +0200 (MET DST)
Received: from epmailtmp.qlogic.org ([10.20.33.254]) by epexch01.qlogic.org with Microsoft SMTPSVC(5.0.2195.5329);
	 Mon, 19 May 2003 10:21:18 -0500
Received: from [10.20.33.146] ([10.20.33.146]) by epmailtmp.qlogic.org with Microsoft SMTPSVC(5.0.2195.4905);
	 Mon, 19 May 2003 10:21:18 -0500
Date: Mon, 19 May 2003 10:36:05 -0500 (CDT)
From: Brian Hurt <brian.hurt@qlogic.com>
X-X-Sender:  <brianh@eagle.ancor.com>
Reply-To: Brian Hurt <brian.hurt@qlogic.com>
To: Chris Hecker <checker@d6.com>
cc: David Brown <caml-list@davidb.org>,
        "'caml-list@inria.fr'" <caml-list@inria.fr>
Subject: Re: [Caml-list] ocaml and large development projects
In-Reply-To: <4.3.2.7.2.20030517225010.04b748a0@localhost>
Message-ID: <Pine.LNX.4.33.0305191022180.2037-100000@eagle.ancor.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-OriginalArrivalTime: 19 May 2003 15:21:18.0482 (UTC) FILETIME=[4BB7B720:01C31E1A]
X-Spam: no; 0.00; qlogic:01 caml-list:01 hecker:01 rave:99 checksum:01 recompiles:01 chris:01 ocaml:01 caml:01 recompile:01 checking:01 compile:02 module:03 wrote:03 behavior:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Sat, 17 May 2003, Chris Hecker wrote:

> Any production C++ 
> programmer evaluating caml as a possible alternative for large scale 
> software would simply laugh and write off the language as an option for 
> this behavior alone, in my opinion.  

Except C++ has *exactly* the same problem.  Change a private member of a 
base class, and watch *everything* recompile.  I've seen this more often 
then I want to remember.  This is, of course, assuming you don't have an 
"everything.h" include file, which is quite common if you precompile 
headers.  At which point, change anything in a header and watch everything 
recompile.

And the Java programmers?  The build tool they all (at least all the ones 
I know about) rave about is Ant, which doesn't even support partial 
recompilation unless you jump through serious hoops.  "It's almost as fast 
just to recompile the module" they say, "as it is just to check if it's 
changed."  Of course, checking time stamps on files is way too obvious- 
instead they MD5 checksum the file.  And Java doesn't even try to optimize 
the code on compile.  So they may be right, for their language.

> Don't people consider separate compilation and the ability to change 
> implementation without complete project recompiles a fundamental 
> requirement of non-toy languages?

Maybe.  C++ and Java are toy languages, then.

Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

