Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA09494; Sat, 3 May 2003 18:58:11 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA11921 for <caml-list@pauillac.inria.fr>; Sat, 3 May 2003 18:58:10 +0200 (MET DST)
Received: from eposta.kablonet.com.tr ([62.248.102.66])
	by concorde.inria.fr (8.11.1/8.11.1) with SMTP id h43Gw7H06288
	for <caml-list@inria.fr>; Sat, 3 May 2003 18:58:08 +0200 (MET DST)
Received: (qmail 18223 invoked by uid 0); 3 May 2003 17:05:34 -0000
Received: from unknown (HELO 195.174.169.185) (exa@kablonet.com.tr@195.174.169.185)
  by 0 with SMTP; 3 May 2003 17:05:34 -0000
From: Eray Ozkural <exa@kablonet.com.tr>
Reply-To: erayo@cs.bilkent.edu.tr
Organization: Bilkent University CS Dept.
To: John Max Skaller <skaller@ozemail.com.au>
Subject: Re: [Caml-list] Easy solution in OCaml?
Date: Sat, 3 May 2003 19:57:27 +0300
User-Agent: KMail/1.5.9
Cc: David Brown <caml-list@davidb.org>, caml-list@inria.fr
References: <20030427164326.34082.qmail@web41211.mail.yahoo.com> <200304282114.37271.exa@kablonet.com.tr> <3EB3D43C.3030701@ozemail.com.au>
In-Reply-To: <3EB3D43C.3030701@ozemail.com.au>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200305031957.27055.exa@kablonet.com.tr>
X-Spam: no; 0.00; eray:01 ozkural:01 caml-list:01 closures:01 haskell:01 monadic:01 sequencing:01 burdensome:01 erayo:01 bilkent:01 ankara:01 kde:01 malfunction:01 ariza:01 compiler:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Saturday 03 May 2003 17:37, John Max Skaller wrote:
> Eray Ozkural wrote:
> > On Monday 28 April 2003 17:22, David Brown wrote:
> >>To me, the core feature of functional programming are first class
> >>closures.  Everything else just makes it more convenient.
> >
> > Well said. I would also like to say here that I fail to see what
> > distinguishes the core of ocaml and haskell so much from a semantics
> > point of view!!!!!!!
>
> Laziness.

I know all the fluff about laziness. I wrote code that used so-called 
"infinite graphs" and another code that did have higher order functions which 
used monadic parameters and a lot of sequencing of monadic code if you want 
to verify that. But I, as a programmer not as a lambda-calculus addict, see 
laziness as an "evaluation strategy" not as a deep semantic difference. What 
I meant is whether this difference is exaggerated. I think it is, and I also 
think that monadic I/O is just a pretty (and burdensome) way of writing 
sequential code. Something that isn't wildly interesting from a semantic POV.

Here is what I'm trying to really mean: I can write a compiler for a subset of 
ocaml that uses only lazy evaluation. [*] Right or wrong?

[*] For any pure functional language I should be able to do that. Just like 
Haskell compilers I don't really have to care whether the resulting code will 
work reasonably or not.

-- 
Eray Ozkural (exa) <erayo@cs.bilkent.edu.tr>
Comp. Sci. Dept., Bilkent University, Ankara  KDE Project: http://www.kde.org
www: http://www.cs.bilkent.edu.tr/~erayo  Malfunction: http://mp3.com/ariza
GPG public key fingerprint: 360C 852F 88B0 A745 F31B  EA0F 7C07 AE16 874D 539C

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

