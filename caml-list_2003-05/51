Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id JAA23964; Mon, 5 May 2003 09:32:31 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id JAA24670 for <caml-list@pauillac.inria.fr>; Mon, 5 May 2003 09:32:29 +0200 (MET DST)
Received: from shiva.jussieu.fr (shiva.jussieu.fr [134.157.0.129])
	by concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h457WTH05974
	for <caml-list@inria.fr>; Mon, 5 May 2003 09:32:29 +0200 (MET DST)
Received: from ibm3.cicrp.jussieu.fr (ibm3.cicrp.jussieu.fr [134.157.15.3])
          by shiva.jussieu.fr (8.12.9/jtpda-5.4) with ESMTP id h457WNru044646
          ; Mon, 5 May 2003 09:32:23 +0200 (CEST)
Received: from ibm1.cicrp.jussieu.fr (ibm1.cicrp.jussieu.fr [134.157.15.1])
          by ibm3.cicrp.jussieu.fr (8.8.8/jtpda/mob-V8) with ESMTP id JAA31026
          ; Mon, 5 May 2003 09:31:30 +0200
Received: from localhost (fernande@localhost)
          by ibm1.cicrp.jussieu.fr (8.8.8/jtpda/mob-v8) with ESMTP id JAA2818174
          ; Mon, 5 May 2003 09:31:29 +0200
Date: Mon, 5 May 2003 09:31:29 +0200 (DST)
From: Diego Olivier Fernandez Pons <Diego-Olivier.FERNANDEZ-PONS@cicrp.jussieu.fr>
To: Mattias Waldau <mattias.waldau@abc.se>
cc: caml-list@inria.fr
Subject: Re: [Caml-list] Two types of efficiency (Was Efficiency of 'a list)
In-Reply-To: <041d01c31208$f02327e0$0200a8c0@gateway>
Message-ID: <Pine.A41.4.44.0305050916210.1843274-100000@ibm1.cicrp.jussieu.fr>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Antivirus: scanned by sophie at shiva.jussieu.fr
X-Spam: no; 0.00; pons:01 cicrp:01 caml-list:01 stringset:01 struct:01 acyclic:01 thesis:01 arrays:01 fernandez:01 ocaml:01 caml:01 syntax:02 olivier:02 optimized:02 module:03 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

    Bonjour,

> Languages like PHP have more advanced built-in datastructures with
> language syntax to support them. In Ocaml, we can create the same
> program, however, there is no syntax support, and we have to add
> declarations like
>
> module StringSet = Set.Make(struct
>       type t = string
>       let compare = compare
>     end) ;;
>

You should not use a set of strings but a trie. There are of course a
lot of ways to implement tries :

- trees of lists
- trees of arrays (or an optimized version with strings)
- ternary trees (balanced or not)

You may even minimize your acyclic automaton using any of the
following algorithms :
- 2 phases algorithm (cf Dominique Revuz PhD thesis)
- Incremental minimization (Incremental construction of a minimal
acyclic finite state automata, Daciuk, Milhov, B. Watson, R. Watson,
Computer linguistics volume 26 number 1 mars 2000)
- minimization by Brzozowki's algorithm
- minimization by Hopcroft's algorithm

For which one of these versions should Caml provide build-in support ?

        Diego Olivier

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

