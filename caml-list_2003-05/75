Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id QAA15238; Wed, 7 May 2003 16:57:22 +0200 (MET DST)
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id QAA14900 for <caml-list@pauillac.inria.fr>; Wed, 7 May 2003 16:57:21 +0200 (MET DST)
Received: from nitro.isi.edu (nitro.isi.edu [128.9.208.207])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h47EvFT03641
	for <caml-list@inria.fr>; Wed, 7 May 2003 16:57:15 +0200 (MET DST)
Received: from moussor.isi.edu (moussor.isi.edu [128.9.208.41])
	by nitro.isi.edu (8.11.6p2/8.11.2) with ESMTP id h47EvDv00970;
	Wed, 7 May 2003 07:57:13 -0700 (PDT)
Received: from localhost (hdaume@localhost)
	by moussor.isi.edu (8.9.3/8.8.6) with ESMTP id HAA15668;
	Wed, 7 May 2003 07:57:13 -0700 (PDT)
X-Authentication-Warning: moussor.isi.edu: hdaume owned process doing -bs
Date: Wed, 7 May 2003 07:57:13 -0700 (PDT)
From: Hal Daume III <hdaume@ISI.EDU>
To: Neel Krishnaswami <neelk@alum.mit.edu>
cc: "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] why the "rec" in "let rec"?
In-Reply-To: <16057.7459.42552.45637@h00045a4799d6.ne.client2.attbi.com>
Message-ID: <Pine.GSO.4.21.0305070754400.15643-100000@moussor.isi.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; caml-list:01 neel:01 krishnaswami:01 hodgson:01 recursion:01 disallow:01 bug:01 compiler:01 bindings:01 rec:01 writes:01 wrote:03 recursive:03 let:04 pointed:04 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hi all,

On Wed, 7 May 2003, Neel Krishnaswami wrote:

> Garry Hodgson writes:
> > 
> > something i was always curious about:  why do you need to 
> > specify the "rec" in a "let rec" function definition?  as opposed
> > to, say, having the compiler figure out when a function is recursive?
> 
> It's the simplest way of dealing with the interaction of lexical scope
> and recursion. Consider the following examples:

Both responses so far have pointed out how it's different from jsut 'let',
but I don't think this was the point of the question.  Arguably, the
"simplest" way to dealing with:

> let f x = ..
> let f x = f x

is to simply disallow bindings like this.  I would think that they're
almost always a bug.  Especially if the first definition appears at the
top of your file and the second (perhaps you forgot the "rec" and the body
is actually long) appears at the bottom.  Likely it would turn out to be a
type error anyway, but why risk it?

Anyway, I think the question was more along the lines of "why let the
programmer do something like this."  I cannot answer that.

 - Hal

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

