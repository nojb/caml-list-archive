Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id TAA24897; Fri, 23 May 2003 19:48:35 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id TAA24729 for <caml-list@pauillac.inria.fr>; Fri, 23 May 2003 19:48:32 +0200 (MET DST)
Received: from epexch01.qlogic.org ([63.170.40.3])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h4NHmWT25898
	for <caml-list@inria.fr>; Fri, 23 May 2003 19:48:32 +0200 (MET DST)
Received: from epmailtmp.qlogic.org ([10.20.33.254]) by epexch01.qlogic.org with Microsoft SMTPSVC(5.0.2195.5329);
	 Fri, 23 May 2003 12:46:37 -0500
Received: from [10.20.33.146] ([10.20.33.146]) by epmailtmp.qlogic.org with Microsoft SMTPSVC(5.0.2195.4905);
	 Fri, 23 May 2003 12:46:37 -0500
Date: Fri, 23 May 2003 13:02:33 -0500 (CDT)
From: Brian Hurt <brian.hurt@qlogic.com>
X-X-Sender:  <brianh@eagle.ancor.com>
Reply-To: Brian Hurt <brian.hurt@qlogic.com>
To: <brogoff@speakeasy.net>
cc: David Monniaux <David.Monniaux@ens.fr>, hermanns <jan_hermanns@gmx.de>,
        "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] Why are arithmetic functions not polymorph?
In-Reply-To: <Pine.LNX.4.44.0305230850350.10692-100000@grace.speakeasy.net>
Message-ID: <Pine.LNX.4.33.0305231259070.2037-100000@eagle.ancor.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-OriginalArrivalTime: 23 May 2003 17:46:37.0175 (UTC) FILETIME=[421DB070:01C32153]
X-Spam: no; 0.00; qlogic:01 caml-list:01 brogoff:01 abominable:01 flamefest:01 ocaml:01 speakeasy:01 overloading:01 arithmetic:01 sml:01 overload:03 similarly:03 wrote:03 functions:05 define:05 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Fri, 23 May 2003 brogoff@speakeasy.net wrote:

> > SML has a kind of operator overloading, but I don't know the details.
> 
> SML doesn't allow the user to define overloadings, and that is an 
> abomination. Java is similarly abominable. 
> 

Ocaml allows you to define *new* operators to your heart's content.  You
just can't overload the meanings of old operators.  And frankly, I don't
find that abominable at all.  I don't want to turn this into a C++ 
flamefest (had one of those already this week), but in my experience 
operator overloading is *really* *really* bad.

Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

