Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id RAA10208; Thu, 1 May 2003 17:18:37 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA10573 for <caml-list@pauillac.inria.fr>; Thu, 1 May 2003 17:18:36 +0200 (MET DST)
Received: from epexch01.qlogic.org ([63.170.40.3])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h41FIZT19014
	for <caml-list@inria.fr>; Thu, 1 May 2003 17:18:35 +0200 (MET DST)
Received: from epmailtmp.qlogic.org ([10.20.33.254]) by epexch01.qlogic.org with Microsoft SMTPSVC(5.0.2195.5329);
	 Thu, 1 May 2003 10:17:43 -0500
Received: from [10.20.33.146] ([10.20.33.146]) by epmailtmp.qlogic.org with Microsoft SMTPSVC(5.0.2195.4905);
	 Thu, 1 May 2003 10:17:42 -0500
Date: Thu, 1 May 2003 10:27:28 -0500 (CDT)
From: Brian Hurt <brian.hurt@qlogic.com>
X-X-Sender:  <brianh@eagle.ancor.com>
Reply-To: Brian Hurt <brian.hurt@qlogic.com>
To: Ocaml Mailing List <caml-list@inria.fr>
Subject: [Caml-list] OT: Java Performance
Message-ID: <Pine.LNX.4.33.0305011021220.3160-100000@eagle.ancor.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-OriginalArrivalTime: 01 May 2003 15:17:42.0954 (UTC) FILETIME=[CFD140A0:01C30FF4]
X-Spam: no; 0.00; qlogic:01 compiler:01 ocaml:01 library:03 probably:05 obvious:06 i'd:06 brian:06 languages:06 programmers:06 solved:06 java:07 problem:07 maillist:92 comment:08 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk


Given the number of performance-related discussions in this maillist of 
late, I thought I'd forward this article:
http://www-106.ibm.com/developerworks/java/library/j-jtp04223.html

It's about Java, but I think it's still worthwhile reading for Ocaml 
programmers.  The lesson to learn here is that performance is tricky- what 
you think will obviously be a problem often isn't, and what you think 
won't be a problem can be.  Make it work correctly first, then measure 
performance, then enhance for performance if necessary.

Another comment that applies to both languages is that if it's a glaringly 
obvious problem, the compiler people are probably already working on it 
(or possibly already solved it).

Brian


-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

