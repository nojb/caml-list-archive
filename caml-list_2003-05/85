Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id AAA26366; Fri, 9 May 2003 00:00:04 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id AAA26118 for <caml-list@pauillac.inria.fr>; Fri, 9 May 2003 00:00:03 +0200 (MET DST)
Received: from earth.corbina.net (earth.corbina.net [195.14.50.21])
	by nez-perce.inria.fr (8.11.1/8.11.1) with ESMTP id h48M02T09419
	for <caml-list@inria.fr>; Fri, 9 May 2003 00:00:02 +0200 (MET DST)
Received: by earth.corbina.net (Postfix, from userid 67)
	id E5565AAA6F; Fri,  9 May 2003 02:00:00 +0400 (MSD)
Received: from p153.f1297.n5020.z2.fidonet.org by f128.n5020.z2.fidonet.org
	with FTN (ifmail v.2.15) id AA15343; Fri, 09 May 2003 02:00:00 +0400
Apparently-To: caml-list@inria.fr
To: caml-list@inria.fr
From: oliver@first.in-berlin.de (Oliver Bandel)
X-FTN-Sender: "oliver@first.in-berlin.de" <oliver%first.in-berlin.de@p153.f1297.n5020.z2.fidonet.org>
Date: Sun, 16 Mar 2003 10:24:49 +0100
Subject: [Caml-list] Books on FPL
Message-ID: <1052442796@p153.f1297.n5020.z2.ftn>
Cc: ocaml_beginners@yahoogroups.com
Mail-Followup-To: oliver@earth.corbina.net, caml-list@inria.fr,
	ocaml_beginners@yahoogroups.com
X-FTN-FLAGS: PVT TRN
X-FTN-MSGID: 2:5020/1297.153 3ebb00ac
X-FTN-Tearline: ifmail v.2.15dev5
X-FTN-Via: 2:5020/1297.153 @20030509.051332.UTC NetMgr 1.0y+
X-FTN-Via: 2:5020/1297@FidoNet @20030508.211509.49.UTC Itrack+ 2.0 DB001977
X-FTN-Via: 2:5020/976@FidoNet @20030508.214329.63.UTC Itrack+ 2.0 DB160874
X-FTN-Via: 2:5020/758 FTrack 3.1/W32 09 May 2003 01:44:03 UTC+0400
X-FTN-Via: 2:5020/52 @20030508.215005.UTC FTrack 3.01/FBSD
X-Spam: no; 0.00; oliver:01 in-berlin:01 bandel:01 caml-list:01 recursion:01 abstraction:01 hmc:99 W6:99 primer:99 abstracted:01 fpls:01 bug:01 faq:01 beginner's:01 beginners:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

Hello,


this night I have looked for papers on tail-recursion.
I found some interesting papers. But I also found
books on FP-programming, which are highly interesting
and available in web.


# Recursion, Iteration
# and
# Functional Languages:

    http://www.cs.trinity.edu/~jhowland/ccsc98/ccsc98/ccsc98.html


This author also has written texts about selecting languages
in computer science education, and other interesting texts too.



# Computer Science:
# Abstraction to Implementation

    http://www.cs.hmc.edu/claremont/keller/webBook/index.htm

Contains a Chapter on High-Level- and one one Low-Level-
Functional Programming (Chap. 3 and Chap. 4).
Covers Object-Oriented programming as well.

  Более свежая версия в pdf тут:
  http://www.cs.hmc.edu/~keller/cs60book/

# LISP Primer:
    http://grimpeur.tamu.edu/~colin/lp/



I have found other interesting material on tail-recursion,
but did not add all these here. If the explanations in the
above-books are not enough, ask me (or google).

But one paper on tail-recursion (forgotten the URL, but the
filename is: "primitive-slides.pdf") I can recommend:

   John Cowles, Consistelntly Adding Primitive Recursive
                Functions in ACL2

Explains tail-recursion in a more abstratced way, but does
use abstracted formalisms: does not leave the programmers
perspective and therefore is a very good attempt to
do it abstract as well as grounded :)
That's, what I like, and how programmers can learn new
stuff, even if they are not researchers.

(When formalisms are introduced more gently (maybe two-column
 page layout and on one column using this style of "concrete abstraction"
 and  on the other column using formalisms, then you can gain
 more understanding in your readers... so, the mentioned paper can be
 seen as using an "example" as a specification/explanation of a concept.
 This is a very good attempt!  Because functional languages are
 often explained as "executable" specifications, why not using
 this advantage of FPLs to explain the programming concepts? (...) ))



Ciao,
   Oliver

P.S.: It seems to me, that my style of writing texts should be a hint
      to start Lisp-Programming. ;-)

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners



From: Sergey Goldgaber <sgoldgaber@yahoo.com>
Subject: Re: [Caml-list] Books on FPL
To: Oliver Bandel <oliver@first.in-berlin.de>, caml-list@inria.fr
Cc: ocaml_beginners@yahoogroups.com
Date: Sun, 16 Mar 2003 18:44:50 -0800 (PST)

>
> this night I have looked for papers on tail-recursion.
> I found some interesting papers. But I also found
> books on FP-programming, which are highly interesting
> and available in web.

"Unix System Programming with Standard ML" ( available online at
http://web.access.net.au/felixadv/smlbook.html ), has a nice writeup on
tail recursion in the "loops and recursion" section.  The book also has
the desirable property that (at least in this section) it compares and
contrasts functional style with imperative style, including
representing the same problem in both C and SML.

I've only read the section on tail recursion, so I can't comment on the
rest of the book, but it looks very promising so far.


  --Sergey


__________________________________________________
Do you Yahoo!?
Yahoo! Web Hosting - establish your business online
http://webhosting.yahoo.com

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

 + Origin: tyranny (2:5020/400)
/////////////////////////////////////////////////////////////////////////////

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

