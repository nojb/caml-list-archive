Received: (from majordomo@localhost) by pauillac.inria.fr (8.7.6/8.7.3) id SAA23281; Fri, 16 May 2003 18:31:53 +0200 (MET DST)
X-Authentication-Warning: pauillac.inria.fr: majordomo set sender to owner-caml-list@pauillac.inria.fr using -f
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA13889 for <caml-list@pauillac.inria.fr>; Fri, 16 May 2003 18:31:51 +0200 (MET DST)
Received: from grace.speakeasy.org (grace.speakeasy.org [216.254.0.2])
	by nez-perce.inria.fr (8.11.1/8.11.1) with SMTP id h4GGVoT04454
	for <caml-list@inria.fr>; Fri, 16 May 2003 18:31:50 +0200 (MET DST)
Received: (qmail 7535 invoked by uid 36130); 16 May 2003 16:31:49 -0000
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 16 May 2003 16:31:49 -0000
Date: Fri, 16 May 2003 09:31:49 -0700 (PDT)
From: brogoff@speakeasy.net
To: Markus Mottl <markus@oefai.at>
cc: Xavier Leroy <xavier.leroy@inria.fr>,
        "caml-list@inria.fr" <caml-list@inria.fr>
Subject: Re: [Caml-list] recursive modules
In-Reply-To: <20030505112911.GA15651@fichte.ai.univie.ac.at>
Message-ID: <Pine.LNX.4.44.0305160843550.26018-100000@grace.speakeasy.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam: no; 0.00; brogoff:01 caml-list:01 fixpoint:01 markus':01 recursion:01 bug:01 faq:01 beginner's:01 beginners:01 bin:01 caml-bugs:01 ocaml:01 caml:01 speakeasy:01 groups:01 
Sender: owner-caml-list@pauillac.inria.fr
Precedence: bulk

On Mon, 5 May 2003, Markus Mottl wrote:
> On Mon, 05 May 2003, Xavier Leroy wrote:
> > The other point worth mentioning is that the detection of ill-founded
> > recursive definitions (definitions that have no fixpoint in a
> > call-by-value evaluation regime) is not completely static and may
> > cause an "Undefined" exception to be thrown at program initialization
> > time.
> 
> Guaranteed at program initialization time? But how about local modules?

Unfortunately local recursive modules are ruled out by syntax now. Any reason 
not to allow them? 

I agree with Markus' comment about having this in the main distribution. 
I made an mrec version, and I'm testing, but more people will thrash on 
this if it's part of the language. 

It's utility can't be denied, as it fixes the main problem with the ML 
module system, and just happens to sneak polymorphic recursion capabilities 
into OCaml (yes, I know they exist already because of first class 
polymorphism). I hope you decide to include this in 3.07. 

-- Brian

> > No decision has been taken yet concerning the possible integration of
> > this extension in a future release of OCaml.
> 
> This is of course a matter of how progressive (aggressive?) you want the
> main distribution to be. I think that more exotic but otherwise usable
> features in a distribution won't harm as long as they do not affect
> normal work. Why not add this as usual to the "language extensions"
> section of the manual?  People who want to be on the safe side are not
> forced to use anything that's in there.
> 
> This would make it much easier to get feedback, because only few people
> are daring enough to test things with some CVS-branch.
> 
> Regards,
> Markus Mottl
> 
> -- 
> Markus Mottl          http://www.oefai.at/~markus          markus@oefai.at
> 
> -------------------
> To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
> Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
> Beginner's list: http://groups.yahoo.com/group/ocaml_beginners
> 

-------------------
To unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr
Bug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/
Beginner's list: http://groups.yahoo.com/group/ocaml_beginners

