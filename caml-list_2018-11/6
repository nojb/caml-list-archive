Return-Path: <gabriel.scherer@gmail.com>
X-Original-To: caml-list@sympa.inria.fr
Delivered-To: caml-list@sympa.inria.fr
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 77456824E4
	for <caml-list@sympa.inria.fr>; Sun,  4 Nov 2018 18:57:25 +0100 (CET)
Authentication-Results: mail2-smtp-roc.national.inria.fr; spf=None smtp.pra=gabriel.scherer@gmail.com; spf=Pass smtp.mailfrom=gabriel.scherer@gmail.com; spf=None smtp.helo=postmaster@mail-qk1-f196.google.com
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  gabriel.scherer@gmail.com) identity=pra;
  client-ip=209.85.222.196;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible
Received-SPF: Pass (mail2-smtp-roc.national.inria.fr: domain of
  gabriel.scherer@gmail.com designates 209.85.222.196 as
  permitted sender) identity=mailfrom;
  client-ip=209.85.222.196;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="gabriel.scherer@gmail.com";
  x-conformance=sidf_compatible; x-record-type="v=spf1"
Received-SPF: None (mail2-smtp-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@mail-qk1-f196.google.com) identity=helo;
  client-ip=209.85.222.196;
  receiver=mail2-smtp-roc.national.inria.fr;
  envelope-from="gabriel.scherer@gmail.com";
  x-sender="postmaster@mail-qk1-f196.google.com";
  x-conformance=sidf_compatible
IronPort-PHdr: =?us-ascii?q?9a23=3Aop9S2RdtUYleF2sTz2pE2eYQlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcS6Yh7h7PlgxGXEQZ/co6odzbaO7Oa4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahY75+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM2/2/Xhc5wgqxVoxyvugJxzJLPbY6PKPZzZLnQcc8GSWdDWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cPPPxXoJLnp1sPsxS+ARSnCv7zxT9ImHD2x7M10/48GgzB0wwvBckBsG?=
 =?us-ascii?q?7VrNrrMKceS/u1w7XIzTrddfNZxy395ZPHchAku/6MXLZwfdDNxkkoEgPIl1Od?=
 =?us-ascii?q?opHrMTOS0+QCqWmb7+x4WO21l2Enrht9oj+1xscjkoXJiYMVykzE9SVk24k5P8?=
 =?us-ascii?q?G3SEl+YdK8EZtQsSCaN5dsTsMnR2FlvjsxxL4euZOjYiQG1JAqywTcZvGHaYSE?=
 =?us-ascii?q?/AzvWPiLLTtlgH9oebSyjAuo/0e60O3zTMy03U5KriVbltnMsWgA1xnJ5ciGTv?=
 =?us-ascii?q?tx516h2TWS2wzK5OFIPEQ5mKvBJ54uxb4wkZUTsUDdESPshEr2i6qWel0l+uiu?=
 =?us-ascii?q?9evnfq3rqoGAO4JwkA3zMaQjltahDegmLAQCRXWX9OC92bH7+E32WrRKjvk4kq?=
 =?us-ascii?q?nDt5DaINwWpqGjDABOyIYj6giwDzO83NQDgXYHLExKeAiZgIjzIFzOL/X4Au2+?=
 =?us-ascii?q?g1Soijtk2/fGPrj5DpXXMnfDiKvhfap660NE1AU819Vf55ZNBrEFIfLzQVPxuc?=
 =?us-ascii?q?fDDh45Ngy02/zoBM981oMYQ2KPA7WWPLncsV+StaoTJLyHZYsUsiz0MdAq4vfv?=
 =?us-ascii?q?iTkynlpOU7Ou2M44YXqiH/lia36SYXf2j81JRWgDtBA/Qeisk1aCXCRefV69Wq?=
 =?us-ascii?q?s94ncwD4fwXtSLfZyknLHUhHTzJZZRfG0TUgndQ0etTJ2NXrI3UAzXJ8ZgljIe?=
 =?us-ascii?q?Ur34Et0u0BivsEnxzL81d7OIqB1djorq0Z1O38OWjQs7rGUmAMGU0mXLRGZxzD?=
 =?us-ascii?q?tRGm0GmZtnqEk48W+tlKh1h/sCS45W7vJNFx45bNvSlr0kTd/1XQ3Fc5GCT1P0?=
 =?us-ascii?q?Gtg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ChAgCmMt9bf8TeVdFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYIqQX8VE4N2gR2CXpAygg2OKokXgWYNJYFSgnECAgKDPhoHAQQ0FgEDAQE?=
 =?us-ascii?q?CAQEBAQETAQEJCwsIGwwlDII2IoJjAQUjBBkBGxEMAQMBCwYDAgsNIwcCAiEBA?=
 =?us-ascii?q?REBBQEcGQmDGYFoAQMVD4xvkAc8iwx7FgUBF4J3BYExAYJ2ChknDVqBHRoCBhK?=
 =?us-ascii?q?LZIFYP4MlfoEoGQGBFEUBAYEuARIBTIJXglcChlWCECQflTYmLgcCghQEhFaDJ?=
 =?us-ascii?q?IMcOYMqGIIhjj8/jEmBBIYbgxAPIYE5gQVxMxojUDGCOwmCEhgdgzeEIHSFPz4?=
 =?us-ascii?q?wi26CPgEB?=
X-IPAS-Result: =?us-ascii?q?A0ChAgCmMt9bf8TeVdFjHAEBAQQBAQcEAQGBZYIqQX8VE4N?=
 =?us-ascii?q?2gR2CXpAygg2OKokXgWYNJYFSgnECAgKDPhoHAQQ0FgEDAQECAQEBAQETAQEJC?=
 =?us-ascii?q?wsIGwwlDII2IoJjAQUjBBkBGxEMAQMBCwYDAgsNIwcCAiEBAREBBQEcGQmDGYF?=
 =?us-ascii?q?oAQMVD4xvkAc8iwx7FgUBF4J3BYExAYJ2ChknDVqBHRoCBhKLZIFYP4MlfoEoG?=
 =?us-ascii?q?QGBFEUBAYEuARIBTIJXglcChlWCECQflTYmLgcCghQEhFaDJIMcOYMqGIIhjj8?=
 =?us-ascii?q?/jEmBBIYbgxAPIYE5gQVxMxojUDGCOwmCEhgdgzeEIHSFPz4wi26CPgEB?=
X-IronPort-AV: E=Sophos;i="5.54,465,1534802400"; 
   d="scan'208,217";a="354054457"
Received: from mail-qk1-f196.google.com ([209.85.222.196])
  by mail2-smtp-roc.national.inria.fr with ESMTP/TLS/AES128-GCM-SHA256; 04 Nov 2018 18:57:23 +0100
Received: by mail-qk1-f196.google.com with SMTP id o89so11198733qko.0
        for <caml-list@inria.fr>; Sun, 04 Nov 2018 09:57:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=QALaYWsaKTflXcnnvMCEF8pVI8Z+0PZofTF74gs0ltI=;
        b=lwEUNxba75wLgMq7p5zo4jorQat0uG0tLYlEoNHC3/roiDMHpzMcl3bTms1e+OJ615
         nlkqNbVi+oUWavgvUpvbXsbw4Nxm+MouR5FHIbhhEJmva2SswrRqes8DRoCX5fDub5BR
         acfF29lPqF9KL/AtWWs3+EgsS8GxGslAJ+XWjjwh7R1TX1N/u3vzWnOSqxikVCSENPqS
         KcLqzdUYLrFF9D1zUEm85s912+vJ0gRFke5wV+lGwXCIGJHJuln3QUgnJwTj5Bpsn5b8
         EZFt25ZFoiwz/u6tVyBLQ4oajy0BLiKd9GeYyQpHsOBmNIE+NqCHM/DbxReQN2m+iPx5
         qFmQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=QALaYWsaKTflXcnnvMCEF8pVI8Z+0PZofTF74gs0ltI=;
        b=HPrRnpoVP3nORqCboEUDM4VPVt6wEfoMX7pf6ocUgksUawRUpD+UywzuCNeqrYmnME
         O11z5otrn0Go9e8snDmb3Tn15h80TW33cbkGaoqWTf3kWk6cCFOFjApqFr+USe+2yNuk
         66Nj1k6caVaBTs5fa6Ba+HD6kWc1OHB/GLsKFKSnSOit4bUz6gj+bCuIeiUtPBE2CU9G
         HBH3+zoM6ix5e/T3yhKyrd+cpjNMOiB6tg4j2Jr9hzFLJ25vP6vbhJL7x4IwfYfsaVzb
         tIqSEsbPLq3Yq3yfpeoVY3xb+7maTx1treV8mKUKEzcAMKo9rgjIGnP3jzGMHEh8spcg
         VhwQ==
X-Gm-Message-State: AGRZ1gJ2Jc8dWUUcyPwYIPWwDY3MTtiNMAEp9Z/x+cBi5MLqXmMkXzI0
	tFIYYxT2R8FSNSF4EujaXuUlWhgXApd3bFMb5UE=
X-Google-Smtp-Source: AJdET5dyZJYaPdyFdvge7jHMVZrej/48TAhkb62Jrnl7VWKxPzdrddE3NNjscw7klbkWwjFWWvTgrZOMcbIlre3Yg/E=
X-Received: by 2002:a0c:89e9:: with SMTP id 38mr18727612qvs.31.1541354242506;
 Sun, 04 Nov 2018 09:57:22 -0800 (PST)
MIME-Version: 1.0
References: <CABvMw3bYyJYOxJAYQBANMgVqMa+XYkW3pOQ-2MXA5ZF4czBV-w@mail.gmail.com>
 <CAPFanBEG8vnFVb7buZw0o3xd5GqeW9XrZPzyJ+h9n9+1RkKRBw@mail.gmail.com>
In-Reply-To: <CAPFanBEG8vnFVb7buZw0o3xd5GqeW9XrZPzyJ+h9n9+1RkKRBw@mail.gmail.com>
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sun, 4 Nov 2018 19:06:42 +0100
Message-ID: <CAPFanBFFemXovGArvq+2W64sg=RX7EZrWHJ8aR=P6Fprd6rHgg@mail.gmail.com>
To: cilibrar@gmail.com
Cc: caml users <caml-list@inria.fr>
Content-Type: multipart/alternative; boundary="00000000000019057c0579da803e"
Subject: Re: [Caml-list] Request for hint/help in camlp4/5-ppx conversion of
 famous logic quotation code by Harrison

--00000000000019057c0579da803e
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Here is a transcript of using plain OCaml code instead of the extension:

(* mock parsers for testing; I'm sure the real definitions are more
interesting *)
let default_parser str =3D `Default str
let secondary_parser str =3D `Secondary str

(* do the same test as done by the syntax extension *)
let default_or_secondary_parser s =3D
    if String.sub s 0 1 =3D "|" && String.sub s (String.length s - 1) 1 =3D=
 "|"
    then secondary_parser (String.sub s 1 (String.length s - 1))
    else default_parser s

(* convenient infix operator *)
let (!!) =3D default_or_secondary_parser

(* example use-cases from

https://github.com/logic-tools/sml-handbook/blob/master/code/OCaml/example.=
ml
 *)

let gold =3D !!{|p /\ q <=3D> ((p <=3D> q) <=3D> p \/ q)|} (* default parse=
r *)
let test =3D
  ["fix1", !!{||--(imp(G,imp(Pr(G),S)))||};
   "fix2", !!{||--(imp(imp(Pr(G),S),G))||}];
(* the doubling of "|" in formulas above signals the secondary parser. *)

On Sun, Nov 4, 2018 at 7:00 PM Gabriel Scherer <gabriel.scherer@gmail.com>
wrote:

> It looks like what this syntax extension is doing is to rewrite fragments
> of the form
>
>   <<foo>>
>
> into
>
>   default_parser "foo"
>
> and
>
>   <<|foo|>>
>
> into
>
>   secondary_parser "foo".
>
> You should be able to translate examples from the book simply by doing
> this rewriting by hand. If the string/formula contains backslashes, it can
> be painful to properly escape them to follow the lexical conventions of
> OCaml double-quoted string literals, but you can use the new string liter=
al
> {|foo|} to avoid escapes. For example, "a\\b" can be rewritten into {|a\b=
|}.
>
>
> On Sun, Nov 4, 2018 at 6:42 PM Rudi Cilibrasi <cilibrar@gmail.com> wrote:
>
>> Greetings ML friends,
>>
>> I have been gradually following the ML style languages a couple decades
>> with HOL/SML etc and recently got interested in the OCaml variation.
>>
>> I've been able to make simple OCaml programs for my research but am
>> hitting a steep learning curve trying to understand the differences
>> between the preprocessors camlp4, camlp5, and ppx. The documentation
>> is confusing to me at this point.
>>
>> I have been trying to compile the code from the famous and great book
>> on logic called "Handbook of Practical Logic and Automated Reasoning"
>> but it does not work for me under Ubuntu 18.04 using OCaml 4.05. I
>> have opam 1.2.2.  I am getting an "Unbound module Quotation" error
>> that Icannot solve and I suspect is related to old coding convention
>> for preprocessing.  Would anybody on the list be able to help me (perhaps
>> privately via email/github) to convert this small fragment to modern
>> PPX syntax so that we can "unlock" the rest of the code describing first
>> order logic?  I attach a transcript below trying to compile one of many
>> copies of the same code on github, this one from
>>
>> https://github.com/logic-tools/sml-handbook/tree/master/code/OCaml
>>
>> Any help or info you can provide to get unblocked would be appreciated.
>> Thank you in advance for your kind attention.
>>
>> Best regards,
>>
>> Rudi
>>
>> ------------------------------------------------------------------------=
----------------
>> =E2=9E=9C  sml-handbook git:(master) =E2=9C=97 cd code/OCaml
>> =E2=9E=9C  OCaml git:(master) =E2=9C=97 make
>> echo '#use "init.ml";;' >.ocamlinit; (sleep 3s; rm -f .ocamlinit) & ocaml
>>         OCaml version 4.05.0
>>
>> File "Quotexpander.ml", line 2, characters 5-72:
>> Warning 3: deprecated: Pervasives.&
>> Use (&&) instead.
>> File "Quotexpander.ml", line 7, characters 0-13:
>> Error: Unbound module Quotation
>> File "Quotexpander.ml", line 998, characters 7-9:
>> Unbound quotation: ""
>> Camlp5 parsing version 7.06
>>
>> #
>> =E2=9E=9C  OCaml git:(master) =E2=9C=97 cat Quotexpander.ml
>> let quotexpander s =3D
>>   if String.sub s 0 1 =3D "|" & String.sub s (String.length s - 1) 1 =3D=
 "|"
>> then
>>     "secondary_parser \""^
>>     (String.escaped (String.sub s 1 (String.length s - 2)))^"\""
>>   else "default_parser \""^(String.escaped s)^"\"";;
>>
>> Quotation.add "" (Quotation.ExStr (fun x -> quotexpander));;
>> =E2=9E=9C  OCaml git:(master) =E2=9C=97 ocaml --version
>> The OCaml toplevel, version 4.05.0
>> =E2=9E=9C  OCaml git:(master) =E2=9C=97 opam --version
>> 1.2.2
>> =E2=9E=9C  OCaml git:(master) =E2=9C=97
>>
>>
>> --
>> Happy to Code with Integrity : Software Engineering Code of Ethics and
>> Professional Practice <http://www.acm.org/about/about/se-code>
>>
>

--00000000000019057c0579da803e
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div>Here is a transcript of using plain =
OCaml code instead of the extension:</div><div><br></div><div>(* mock parse=
rs for testing; I&#39;m sure the real definitions are more interesting *)<b=
r>let default_parser str =3D `Default str<br>let secondary_parser str =3D `=
Secondary str<br><br>(* do the same test as done by the syntax extension *)=
<br>let default_or_secondary_parser s =3D<br>=C2=A0=C2=A0=C2=A0 if String.s=
ub s 0 1 =3D &quot;|&quot; &amp;&amp; String.sub s (String.length s - 1) 1 =
=3D &quot;|&quot;<br>=C2=A0=C2=A0=C2=A0 then secondary_parser (String.sub s=
 1 (String.length s - 1))<br>=C2=A0=C2=A0=C2=A0 else default_parser s<br><b=
r>(* convenient infix operator *)<br>let (!!) =3D default_or_secondary_pars=
er<br><br>(* example use-cases from<br>=C2=A0=C2=A0 <a href=3D"https://gith=
ub.com/logic-tools/sml-handbook/blob/master/code/OCaml/example.ml">https://=
github.com/logic-tools/sml-handbook/blob/master/code/OCaml/example.ml</a><b=
r>=C2=A0*)<br><br>let gold =3D !!{|p /\ q &lt;=3D&gt; ((p &lt;=3D&gt; q) &l=
t;=3D&gt; p \/ q)|} (* default parser *)<br>let test =3D<br>=C2=A0 [&quot;f=
ix1&quot;, !!{||--(imp(G,imp(Pr(G),S)))||};=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0 <br>=C2=A0=C2=A0 &quot;fix2&quot;, !!{||--(imp(imp(Pr(G),S),G)=
)||}];<br></div><div>(* the doubling of &quot;|&quot; in formulas above sig=
nals the secondary parser. *)<br></div></div></div><br><div class=3D"gmail_=
quote"><div dir=3D"ltr">On Sun, Nov 4, 2018 at 7:00 PM Gabriel Scherer &lt;=
<a href=3D"mailto:gabriel.scherer@gmail.com">gabriel.scherer@gmail.com</a>&=
gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div>It=
 looks like what this syntax extension is doing is to rewrite fragments of =
the form</div><div><br></div><div>=C2=A0 &lt;&lt;foo&gt;&gt;</div><div><br>=
</div><div>into</div><div><br></div><div>=C2=A0 default_parser &quot;foo&qu=
ot;</div><div><br></div><div>and</div><div><br></div><div>=C2=A0 &lt;&lt;|f=
oo|&gt;&gt;</div><div><br></div><div>into</div><div><br></div><div>=C2=A0 s=
econdary_parser &quot;foo&quot;.</div><div><br></div><div>You should be abl=
e to translate examples from the book simply by doing this rewriting by han=
d. If the string/formula contains backslashes, it can be painful to properl=
y escape them to follow the lexical conventions of OCaml double-quoted stri=
ng literals, but you can use the new string literal {|foo|} to avoid escape=
s. For example, &quot;a\\b&quot; can be rewritten into {|a\b|}.</div><div><=
br></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr">On Sun, Nov =
4, 2018 at 6:42 PM Rudi Cilibrasi &lt;<a href=3D"mailto:cilibrar@gmail.com"=
 target=3D"_blank">cilibrar@gmail.com</a>&gt; wrote:<br></div><blockquote c=
lass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;=
padding-left:1ex"><div dir=3D"ltr"><div dir=3D"ltr"><div>Greetings ML frien=
ds,</div><div><br></div><div>I have been gradually following the ML style l=
anguages a couple decades</div><div>with HOL/SML etc and recently got inter=
ested in the OCaml variation.</div><div><br></div><div>I&#39;ve been able t=
o make simple OCaml programs for my research but am</div><div>hitting a ste=
ep learning curve trying to understand the differences</div><div>between th=
e preprocessors camlp4, camlp5, and ppx. The documentation</div><div>is con=
fusing to me at this point.</div><div><br></div><div>I have been trying to =
compile the code from the famous and great book</div><div>on logic called &=
quot;Handbook of Practical Logic and Automated Reasoning&quot;</div><div>bu=
t it does not work for me under Ubuntu 18.04 using OCaml 4.05. I</div><div>=
have opam 1.2.2.=C2=A0 I am getting an &quot;Unbound module Quotation&quot;=
 error</div><div>that Icannot solve and I suspect is related to old coding =
convention</div><div>for preprocessing.=C2=A0 Would anybody on the list be =
able to help me (perhaps</div><div>privately via email/github) to convert t=
his small fragment to modern</div><div>PPX syntax so that we can &quot;unlo=
ck&quot; the rest of the code describing first=C2=A0</div><div>order logic?=
=C2=A0 I attach a transcript below trying to compile one of many</div><div>=
copies of the same code on github, this one from</div><div><br></div><div><=
a href=3D"https://github.com/logic-tools/sml-handbook/tree/master/code/OCam=
l" target=3D"_blank">https://github.com/logic-tools/sml-handbook/tree/maste=
r/code/OCaml</a></div><div><br></div><div>Any help or info you can provide =
to get unblocked would be appreciated.</div><div>Thank you in advance for y=
our kind attention.</div><div><br></div><div>Best regards,</div><div><br></=
div><div>Rudi</div><div>---------------------------------------------------=
-------------------------------------</div><div>=E2=9E=9C=C2=A0 sml-handboo=
k git:(master) =E2=9C=97 cd code/OCaml</div><div>=E2=9E=9C=C2=A0 OCaml git:=
(master) =E2=9C=97 make</div><div>echo &#39;#use &quot;<a href=3D"http://in=
it.ml" target=3D"_blank">init.ml</a>&quot;;;&#39; &gt;.ocamlinit; (sleep 3s=
; rm -f .ocamlinit) &amp; ocaml</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 OCaml=
 version 4.05.0</div><div><br></div><div>File &quot;Quotexpander.ml&quot;, =
line 2, characters 5-72:</div><div>Warning 3: deprecated: Pervasives.&amp;<=
/div><div>Use (&amp;&amp;) instead.</div><div>File &quot;Quotexpander.ml&qu=
ot;, line 7, characters 0-13:</div><div>Error: Unbound module Quotation</di=
v><div>File &quot;Quotexpander.ml&quot;, line 998, characters 7-9:</div><di=
v>Unbound quotation: &quot;&quot;</div><div><span style=3D"white-space:pre-=
wrap">	</span>Camlp5 parsing version 7.06</div><div><br></div><div>#=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0<span style=3D"white-space:pre-wrap">	</span></d=
iv><div>=E2=9E=9C=C2=A0 OCaml git:(master) =E2=9C=97 cat Quotexpander.ml=C2=
=A0</div><div>let quotexpander s =3D</div><div>=C2=A0 if String.sub s 0 1 =
=3D &quot;|&quot; &amp; String.sub s (String.length s - 1) 1 =3D &quot;|&qu=
ot; then</div><div>=C2=A0 =C2=A0 &quot;secondary_parser \&quot;&quot;^</div=
><div>=C2=A0 =C2=A0 (String.escaped (String.sub s 1 (String.length s - 2)))=
^&quot;\&quot;&quot;</div><div>=C2=A0 else &quot;default_parser \&quot;&quo=
t;^(String.escaped s)^&quot;\&quot;&quot;;;</div><div><br></div><div>Quotat=
ion.add &quot;&quot; (Quotation.ExStr (fun x -&gt; quotexpander));;</div><d=
iv>=E2=9E=9C=C2=A0 OCaml git:(master) =E2=9C=97 ocaml --version</div><div>T=
he OCaml toplevel, version 4.05.0</div><div>=E2=9E=9C=C2=A0 OCaml git:(mast=
er) =E2=9C=97 opam --version</div><div>1.2.2</div><div>=E2=9E=9C=C2=A0 OCam=
l git:(master) =E2=9C=97=C2=A0</div><div><br></div><div><br></div>-- <br><d=
iv dir=3D"ltr" class=3D"m_6064707717144435144m_3425015046327542362gmail_sig=
nature"><div dir=3D"ltr">Happy to Code with Integrity :=C2=A0<a href=3D"htt=
p://www.acm.org/about/about/se-code" target=3D"_blank">Software Engineering=
 Code of Ethics and Professional Practice</a><br></div></div></div></div>
</blockquote></div>
</blockquote></div>

--00000000000019057c0579da803e--
