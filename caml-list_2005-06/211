Return-Path: <weis@pauillac.inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 27797BCAE
	for <caml-list@yquem.inria.fr>; Fri, 24 Jun 2005 18:39:30 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j5OGdTMU017717
	for <caml-list@yquem.inria.fr>; Fri, 24 Jun 2005 18:39:29 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id SAA23149 for <caml-list@pauillac.inria.fr>; Fri, 24 Jun 2005 18:39:29 +0200 (MET DST)
Received: from wproxy.gmail.com (wproxy.gmail.com [64.233.184.196])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5OGdS9q024666
	for <caml-list@inria.fr>; Fri, 24 Jun 2005 18:39:28 +0200
Received: by wproxy.gmail.com with SMTP id 68so459812wra
        for <caml-list@inria.fr>; Fri, 24 Jun 2005 09:39:25 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:reply-to:to:subject:mime-version:content-type;
        b=JnrXXp/J37j2Lw6BD8HZbdsXXeNZWYDBWM/PytrjhgYH2uBhrPamIXuIH854DWPCgq9qBCah/CVlmtak8SyCfptfpSnNhN0kUDEFw7lCnunpc3A1maz/Id0BRZc+odRU37lfNa0u+qMNOQbOcv+MC3Vnx2yHWitaa9bGMrN+LRk=
Received: by 10.54.6.13 with SMTP id 13mr1785756wrf;
        Fri, 24 Jun 2005 09:39:24 -0700 (PDT)
Received: by 10.54.2.21 with HTTP; Fri, 24 Jun 2005 09:39:24 -0700 (PDT)
Message-ID: <891bd339050624093978a3c9a8@mail.gmail.com>
Date: Fri, 24 Jun 2005 12:39:24 -0400
From: Yaron Minsky <yminsky@gmail.com>
Reply-To: yminsky@cs.cornell.edu
To: Caml Mailing List <caml-list@inria.fr>
Subject: Why are backtraces (sometimes) useless
Mime-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_3701_19865421.1119631164777"
X-Miltered: at concorde with ID 42BC3741.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 42BC3740.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; yaron:01 minsky:01 yminsky:01 ocaml:01 threads:01 stack:01 surprising:01 native-code:01 backtrace:01 ocaml:01 threads:01 stack:01 surprising:01 native-code:01 backtrace:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.2 required=5.0 tests=HTML_00_10,HTML_MESSAGE,
	RCVD_BY_IP autolearn=disabled version=3.0.2
X-Spam-Level: 

------=_Part_3701_19865421.1119631164777
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I've had a lot of experience lately with OCaml backtraces sucking, and I'm=
=20
not sure what's going on. We're working on a decent-sizes project (about=20
10-kloc) that uses threads and a decent amount of functorization. One thing=
=20
we've noticed is that backtraces are almost completely useless --- generall=
y=20
speaking, they have lots of "Called from unknown location" messages, and=20
almost no useful data. They often skip over functions on the call stack of=
=20
the error in surprising ways.

I guess the question is this: what kind of situations cause backtraces to=
=20
drop information in the ways described above?

Also, is there anyone out there actively using the native-code backtrace=20
patches that people have come up with? I'm curious to hear other people's=
=20
experiences.

y

------=_Part_3701_19865421.1119631164777
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

I've had a lot of experience lately with OCaml backtraces sucking, and
I'm not sure what's going on.&nbsp; We're working on a decent-sizes
project (about 10-kloc) that uses threads and a decent amount of
functorization.&nbsp; One thing we've noticed is that backtraces are
almost completely useless --- generally speaking, they have lots of
&quot;Called from unknown location&quot; messages, and almost no useful
data.&nbsp; They often skip over functions on the call stack of the
error in surprising ways.<br>
<br>
I guess the question is this:&nbsp; what kind of situations cause backtrace=
s to drop information in the ways described above?<br>
<br>
Also, is there anyone out there actively using the native-code
backtrace patches that people have come up with?&nbsp; I'm curious to
hear other people's experiences.<br>
<br>
y<br>
<br>

------=_Part_3701_19865421.1119631164777--

