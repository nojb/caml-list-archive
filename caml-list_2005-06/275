Return-Path: <weis@pauillac.inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 0CA32BCAF
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 14:09:57 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5UC9uls015513
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 14:09:56 +0200
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id OAA16355 for <caml-list@pauillac.inria.fr>; Thu, 30 Jun 2005 14:09:56 +0200 (MET DST)
Received: from kaiserslautern1.lmsintl.com (Kaiserslautern1.lms-gmbh.de [213.68.136.230])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j5UC9tqO028517
	for <caml-list@inria.fr>; Thu, 30 Jun 2005 14:09:55 +0200
Received: by kaiserslautern1.lmsintl.com with Internet Mail Service (5.5.2653.19)
	id <NPF5BL6V>; Thu, 30 Jun 2005 14:09:56 +0200
Message-ID: <26EB47FDD566A7469FC862DAF373792F07D4DA@kaiserslautern1.lmsintl.com>
From: "Bauer, Christoph" <Christoph.Bauer@lms-gmbh.de>
To: caml-list@inria.fr
Subject: Unix.waitpid
Date: Thu, 30 Jun 2005 14:09:51 +0200
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2653.19)
Content-Type: text/plain
X-Miltered: at nez-perce with ID 42C3E114.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at concorde with ID 42C3E113.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; waitpid:01 rec:01 waitpid:01 deutschland:98 unix:01 unix:01 behaviour:01 loops:02 let:03 let:03 christoph:04 christoph:04 fst:06 linux:06 anybody:07 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.2
X-Spam-Level: 

Hi,

my app should wait for some processes. This is done 
by my function wait, which gets a pid, a idle function (e.g. ignore)
+ its value and a delay time between polling:


let delay s = ignore (Unix.select [] [] [] s)

let wait ?(delay_time = 0.01) pid idle x =
  let rec wait' () =
    idle x;
    delay delay_time;
    let pid = try fst (Unix.waitpid [Unix.WNOHANG] pid) with _  -> 1 in
      if pid <> 0 then wait' ()
  in wait' ()

It works mostly, but in some rare, non-deterministic cases wait loops
forever.
In a seconds round it works without problems. I saw this behaviour on Linux
and Windows. Can anybody help me?

Thanks!

Christoph Bauer
Dipl. Inf.

LMS Deutschland GmbH
Luxemburgerstr. 7
D-67657 Kaiserslautern

T +49 631 303 22 152

mailto:Christoph.Bauer@lms-gmbh.de
http://www.lmsintl.com 

