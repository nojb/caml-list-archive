Return-Path: <gava@univ-paris12.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id DFF24BC8E
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 13:38:33 +0200 (CEST)
Received: from smtp3.wanadoo.fr (smtp3.wanadoo.fr [193.252.22.28])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j5NBcXIR018353
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 13:38:33 +0200
Received: from me-wanadoo.net (unknown [127.0.0.1])
	by mwinf0308.wanadoo.fr (SMTP Server) with ESMTP id 733F52000046
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 13:38:33 +0200 (CEST)
Received: from nono (ARouen-106-1-12-182.w80-11.abo.wanadoo.fr [80.11.244.182])
	by mwinf0308.wanadoo.fr (SMTP Server) with SMTP id 1EBBB2000040
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 13:38:33 +0200 (CEST)
X-ME-UUID: 20050623113833126.1EBBB2000040@mwinf0308.wanadoo.fr
Message-ID: <003701c577e8$82512080$0100a8c0@mshome.net>
From: =?iso-8859-1?Q?Fr=E9d=E9ric_Gava?= <gava@univ-paris12.fr>
To: <caml-list@yquem.inria.fr>
Subject: Fw: [Caml-list] How INRIA people envision OCaml's parallel future?
Date: Thu, 23 Jun 2005 13:41:34 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.50.4133.2400
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
X-Miltered: at concorde with ID 42BA9F39.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; gava:01 gava:01 caml-list:01 ocaml's:01 caml-list:01 ocaml's:01 lablgtk:01 parallelism:01 parallelism:01 haskell:01 haskell:01 herrmann:01 metaocaml:01 ocamlmpi:01 bsmllib:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 


----- Original Message -----
From: "Frédéric Gava" <gava@univ-paris12.fr>
To: "David MENTRE" <david.mentre@gmail.com>
Sent: Thursday, June 23, 2005 11:49 AM
Subject: Re: [Caml-list] How INRIA people envision OCaml's parallel future?


> Hello,
>
> >Good question that I did not considered when asking my own question.
> Thanks ;-)
>
> >Right now, I'm writing a user program (with Lablgtk2 user interface)
> >and a server program (network, file and databases I/O, lot of in
> >memory data structures, few computation intensive parts, mostly
> >algorithmic issues). On the user side, I see no real need of
> >parallelism, except if it can improve responsiveness (e.g. user
> >graphical front-end and back-end that interact with the server on the
> >network). On the server side, it is different. If I have a dual core
> >machine (and *I'm going to have* a 2- or 4-core machine), I would like
> >my server to reply as fast as possible to clients, which implies that
> >some tasks must be done in the background, with all the implied
> >synchronization issues.
>
> For tasks parallelism, you can try pGhc or Eden (but it is parallel
> extention of Haskell) or mobile haskell
>
> Herrmann  ( http://www.fmi.uni-passau.de/~hermann ) has also developp a
> tasks parallel extention of MetaOCaml using
> OCamlMPI.
>
>
> >As you see, my programmer profile is quite different from the expected
> >usage of BSMLlib (if I have understood BSMLlib description correctly):
> >no data parallel programming, rather control parallel programming.
>
> yes. Ok. You are in the case of tasks parallelism.
>
> You an try an interface between ocaml and OpenMM but without a parallel
GC,
> it seems (peraps ?) unsafe.
>
>
> >I'm not interested in THE parallel paradigm that will solve all
> >parallel programming issues.
> ok
>
> >After 50 years of research, no consensus
> >have emerged yet.
> Agree
>
>
> >That's said, it does not mean that OCaml should not provide tools to
> >improve the current state of affair. It is already doing that with
> >type inference, GC or sum types.
>
> >Programming parallel code with Posix
> >mutexes and threads is a nightmare.
> Agree, one of our parallel libraries (mspmllib) used massively those
> features and it is too hard to debug...
>
> >I have to say that I had a very
> >pleasant experiment with OCaml typed channels (aka Concurrent ML
> >channels). I'm just wondering if INRIA people consider that unknown
> >(to a wide public) constructs could be offered to ease concurrent
> >programming. And knowing that current ocaml cannot handle real
> >concurrent threads is a real concern.
> ok
>
> Frédéric Gava:
>
> ps: are you a researcher or an ingeneer ?
>


