Return-Path: <weis@pauillac.inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id F176CBC8E
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 10:30:45 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5N8UjgZ021297
	for <caml-list@yquem.inria.fr>; Thu, 23 Jun 2005 10:30:45 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id KAA25512 for <caml-list@pauillac.inria.fr>; Thu, 23 Jun 2005 10:30:45 +0200 (MET DST)
Received: from smtp3.wanadoo.fr (smtp3.wanadoo.fr [193.252.22.28])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5N8UiJf021294
	for <caml-list@inria.fr>; Thu, 23 Jun 2005 10:30:44 +0200
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf0304.wanadoo.fr (SMTP Server) with ESMTP id A17F41C00CA4
	for <caml-list@inria.fr>; Thu, 23 Jun 2005 10:30:44 +0200 (CEST)
Received: from nono (ARouen-106-1-12-182.w80-11.abo.wanadoo.fr [80.11.244.182])
	by mwinf0304.wanadoo.fr (SMTP Server) with SMTP id 41FFD1C00CA2;
	Thu, 23 Jun 2005 10:30:44 +0200 (CEST)
X-ME-UUID: 20050623083044270.41FFD1C00CA2@mwinf0304.wanadoo.fr
Message-ID: <001001c577ce$45b9cce0$0100a8c0@mshome.net>
From: =?iso-8859-1?Q?Fr=E9d=E9ric_Gava?= <gava@univ-paris12.fr>
To: "David MENTRE" <david.mentre@gmail.com>
Cc: <caml-list@inria.fr>
References: <3d13dcfc05062300215e4be9ee@mail.gmail.com>
Subject: Re: [Caml-list] How INRIA people envision OCaml's parallel future?
Date: Thu, 23 Jun 2005 10:33:45 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 8bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.50.4133.2400
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
X-Miltered: at nez-perce with ID 42BA7335.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 42BA7334.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; gava:01 gava:01 caml-list:01 ocaml's:01 parallelism:01 jocaml:01 jocaml:01 bsmllib:01 model:01 model:01 developping:01 ocaml:01 peoples:01 parallelism:01 developping:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

>More generally, do you plan to introduce new language constructs to
>support parallelism? I'm thinking of Jocaml and Skeleton approach for
>example. Or simply some libraries?

Developing a new programming language is a difficult task. JoCaml is a good
example. Hard for the maintenance. Also JoCaml is not a parallel language
but a concurrent language <=> if you create two "tasks" in a concurrent
language, you can't know if there are on two different processors or
sequentials tasks; in a parallel language, when you create two tasks, you
want that those two tasks to be in two different processors.

Skeleton (OcamlP3L) is a good way but there is also Data-Parallel languages
sush as HirondML, Ocaml-Flight, BSMLlib (a library for BSP computing; BSP is
a parallel model with a cost model; no deadlock, no undeterministic results;
it is thus a good candidat for developping parallel algorithms) and many
others. An advantage of Data-Parallel languages is that you have the "same
programs" in each processors and thus a sequential GC is sufficient: the
maintenance of the libraries is "easier".

>I know that predictions are quite difficult, especially about the
>future, :) but I suppose INRIA people are thinking about those issues.
>OCaml is a very exciting experiment of pragmatism and theory and I'm
>curious of what might appear on the parallel topic.

It is hard to work on the maintenance of a parallel library (see MPI, PVM,
PUB for examples) and thus parallel peoples do not want to deal (in general)
with the sequential parts of the languages...

There is also the fact that you do not develop parallel programs for the
same things than sequential ones: what is the interest to have a parallel
language for just an application that play a MP3 ?  Using parallelism is
good for some specific cases and thus need specifics libraries. Developping
a "big language" that is good for parallel computing and sequential
computing seems (it is my opinion) to be a too much harder work.

Regards,
Frédéric Gava


