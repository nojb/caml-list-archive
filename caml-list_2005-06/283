Return-Path: <weis@pauillac.inria.fr>
Delivered-To: caml-list@yquem.inria.fr
Received: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])
	by yquem.inria.fr (Postfix) with ESMTP id 82C61BCAE
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 15:11:19 +0200 (CEST)
Received: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])
	by concorde.inria.fr (8.13.0/8.13.0) with ESMTP id j5UDBJ4n004685
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 15:11:19 +0200
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id PAA17447 for <caml-list@pauillac.inria.fr>; Thu, 30 Jun 2005 15:11:18 +0200 (MET DST)
Received: from kaiserslautern1.lmsintl.com (Kaiserslautern1.lms-gmbh.de [213.68.136.230])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5UDBHGS022890
	for <caml-list@inria.fr>; Thu, 30 Jun 2005 15:11:18 +0200
Received: by kaiserslautern1.lmsintl.com with Internet Mail Service (5.5.2653.19)
	id <NPF5BMDR>; Thu, 30 Jun 2005 15:11:17 +0200
Message-ID: <26EB47FDD566A7469FC862DAF373792F07D4E0@kaiserslautern1.lmsintl.com>
From: "Bauer, Christoph" <Christoph.Bauer@lms-gmbh.de>
To: "'Oliver Bandel'" <oliver@first.in-berlin.de>, caml-list@inria.fr
Subject: AW: [Caml-list] Unix.waitpid
Date: Thu, 30 Jun 2005 15:11:12 +0200
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2653.19)
Content-Type: text/plain
X-Miltered: at concorde with ID 42C3EF77.000 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Miltered: at nez-perce with ID 42C3EF75.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 waitpid:01 waitpid:01 reused:01 terminate:01 ...:98 unix:01 unix:01 kernel:01 int:01 int:01 argument:01 btw:02 renaming:02 rename:04 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.1 required=5.0 tests=FORGED_RCVD_HELO 
	autolearn=disabled version=3.0.2
X-Spam-Level: 

Hi,

> 
> 
> Well, using the corresponding C-API-function,
> you should better rename your arguments:
> 
>   wpid is the pid you wait for (the argument to Unix.waitpid)  and
>    pid is the value you get from that function:
> 
> 
> ===== from the wait(2)/waitpid(2)-manpage =============
>      pid_t
>      waitpid(pid_t wpid, int *status, int options);
> =======================================================
> 

Ok.

> 
> BTW: where do you set the "pid" initially?
> 

>From a Unix.create_process call.

> And: if waitpid returns with a pid, then you can't wait on this
> pid/process again. So, if you wait for one pid and get a different
> pid as result of the function call, then you wait again.
> But if you another time waits for a pid, which you alread caught
> (got as a result once before), then you can wait infinite,
> because that pid was caught by waitpud before... and you have to
> wait until the pid is reused by the kernel or wait until next 
> reboot. ;-)

Ok, then I'll use pid = 0 (or wpid = 0, after the renaming) to terminate
the loop. 

Thanks for the replies,
Christoph Bauer

