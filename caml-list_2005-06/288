Return-Path: <brogoff@speakeasy.net>
Delivered-To: caml-list@yquem.inria.fr
Received: from nez-perce.inria.fr (nez-perce.inria.fr [192.93.2.78])
	by yquem.inria.fr (Postfix) with ESMTP id 94387BCAE
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 19:08:41 +0200 (CEST)
Received: from mail24.sea5.speakeasy.net (mail24.sea5.speakeasy.net [69.17.117.26])
	by nez-perce.inria.fr (8.13.0/8.13.0) with ESMTP id j5UH8d6v019760
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <caml-list@yquem.inria.fr>; Thu, 30 Jun 2005 19:08:41 +0200
Received: (qmail 14162 invoked from network); 30 Jun 2005 17:08:38 -0000
Received: from shell1.sea5.speakeasy.net ([69.17.116.2])
          (envelope-sender <brogoff@speakeasy.net>)
          by mail24.sea5.speakeasy.net (qmail-ldap-1.03) with AES256-SHA encrypted SMTP
          for <rossberg@ps.uni-sb.de>; 30 Jun 2005 17:08:38 -0000
Date: Thu, 30 Jun 2005 10:08:38 -0700 (PDT)
From: brogoff <brogoff@speakeasy.net>
X-X-Sender: brogoff@shell1.sea5.speakeasy.net
To: Andreas Rossberg <rossberg@ps.uni-sb.de>
Cc: caml-list@yquem.inria.fr
Subject: Re: [Caml-list] Type abstraction and (polymorphic) equality
In-Reply-To: <42C3C125.9090406@ps.uni-sb.de>
Message-ID: <Pine.LNX.4.58.0506300950270.9466@shell1.sea5.speakeasy.net>
References: <20050629.023111.15476874.debian00@tiscali.be> 
 <200506291012.30612.jon@ffconsultancy.com> <1120077431.24682.102.camel@localhost.localdomain>
 <42C3C125.9090406@ps.uni-sb.de>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Miltered: at nez-perce with ID 42C42717.001 by Joe's j-chkmail (http://j-chkmail.ensmp.fr)!
X-Spam: no; 0.00; caml-list:01 abstraction:01 rossberg:01 haskell's:01 haskell:01 dependencies:01 hugs:01 g'caml:01 2005,:98 ...:98 wrote:01 wrote:01 equality:01 polymorphic:01 andreas:01 
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on yquem.inria.fr
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=disabled 
	version=3.0.2
X-Spam-Level: 

On Thu, 30 Jun 2005, Andreas Rossberg wrote:

> John Skaller wrote:
> >
> > Executive Summary: I guess no wart free solution can exist.
>
> Where do you see the wart with Haskell's approach?

Which one? Haskell 98's? Or the multiparameter one with functional
dependencies and ... (GHC and Hugs)?

I'd love to see an ML with type classes and a simple module system, just so we
could get experience. G'Caml looks promising too, and the integration with
modules seems straightforward.

-- Brian

